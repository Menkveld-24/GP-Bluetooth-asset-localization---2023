
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

0000c200 <_vector_table>:
    c200:	c0 7a 00 20 59 78 02 00 03 93 03 00 2d 78 02 00     .z. Yx......-x..
    c210:	2d 78 02 00 2d 78 02 00 2d 78 02 00 00 00 00 00     -x..-x..-x......
	...
    c22c:	29 70 02 00 2d 78 02 00 00 00 00 00 d5 6f 02 00     )p..-x.......o..
    c23c:	2d 78 02 00                                         -x..

0000c240 <_irq_vector_table>:
    c240:	d9 70 02 00 f1 b7 03 00 d9 70 02 00 d9 70 02 00     .p.......p...p..
    c250:	d9 70 02 00 d9 70 02 00 d9 70 02 00 d9 70 02 00     .p...p...p...p..
    c260:	b9 b7 03 00 d9 70 02 00 d9 70 02 00 d7 b7 03 00     .....p...p......
    c270:	d9 70 02 00 d9 70 02 00 d9 70 02 00 d9 70 02 00     .p...p...p...p..
    c280:	d9 70 02 00 d9 70 02 00 d9 70 02 00 d9 70 02 00     .p...p...p...p..
    c290:	d9 70 02 00 d9 70 02 00 d9 70 02 00 d9 70 02 00     .p...p...p...p..
    c2a0:	d9 70 02 00 d9 70 02 00 d9 70 02 00 d9 70 02 00     .p...p...p...p..
    c2b0:	d9 70 02 00 d9 70 02 00 d9 70 02 00 d9 70 02 00     .p...p...p...p..
    c2c0:	d9 70 02 00 d9 70 02 00 d9 70 02 00 d9 70 02 00     .p...p...p...p..
    c2d0:	d9 70 02 00 d9 70 02 00 d9 70 02 00                 .p...p...p..

Disassembly of section text:

0000c2e0 <__aeabi_drsub>:
    c2e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    c2e4:	e002      	b.n	c2ec <__adddf3>
    c2e6:	bf00      	nop

0000c2e8 <__aeabi_dsub>:
    c2e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000c2ec <__adddf3>:
    c2ec:	b530      	push	{r4, r5, lr}
    c2ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
    c2f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
    c2f6:	ea94 0f05 	teq	r4, r5
    c2fa:	bf08      	it	eq
    c2fc:	ea90 0f02 	teqeq	r0, r2
    c300:	bf1f      	itttt	ne
    c302:	ea54 0c00 	orrsne.w	ip, r4, r0
    c306:	ea55 0c02 	orrsne.w	ip, r5, r2
    c30a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    c30e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    c312:	f000 80e2 	beq.w	c4da <__adddf3+0x1ee>
    c316:	ea4f 5454 	mov.w	r4, r4, lsr #21
    c31a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    c31e:	bfb8      	it	lt
    c320:	426d      	neglt	r5, r5
    c322:	dd0c      	ble.n	c33e <__adddf3+0x52>
    c324:	442c      	add	r4, r5
    c326:	ea80 0202 	eor.w	r2, r0, r2
    c32a:	ea81 0303 	eor.w	r3, r1, r3
    c32e:	ea82 0000 	eor.w	r0, r2, r0
    c332:	ea83 0101 	eor.w	r1, r3, r1
    c336:	ea80 0202 	eor.w	r2, r0, r2
    c33a:	ea81 0303 	eor.w	r3, r1, r3
    c33e:	2d36      	cmp	r5, #54	; 0x36
    c340:	bf88      	it	hi
    c342:	bd30      	pophi	{r4, r5, pc}
    c344:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    c348:	ea4f 3101 	mov.w	r1, r1, lsl #12
    c34c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    c350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    c354:	d002      	beq.n	c35c <__adddf3+0x70>
    c356:	4240      	negs	r0, r0
    c358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    c35c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    c360:	ea4f 3303 	mov.w	r3, r3, lsl #12
    c364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    c368:	d002      	beq.n	c370 <__adddf3+0x84>
    c36a:	4252      	negs	r2, r2
    c36c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    c370:	ea94 0f05 	teq	r4, r5
    c374:	f000 80a7 	beq.w	c4c6 <__adddf3+0x1da>
    c378:	f1a4 0401 	sub.w	r4, r4, #1
    c37c:	f1d5 0e20 	rsbs	lr, r5, #32
    c380:	db0d      	blt.n	c39e <__adddf3+0xb2>
    c382:	fa02 fc0e 	lsl.w	ip, r2, lr
    c386:	fa22 f205 	lsr.w	r2, r2, r5
    c38a:	1880      	adds	r0, r0, r2
    c38c:	f141 0100 	adc.w	r1, r1, #0
    c390:	fa03 f20e 	lsl.w	r2, r3, lr
    c394:	1880      	adds	r0, r0, r2
    c396:	fa43 f305 	asr.w	r3, r3, r5
    c39a:	4159      	adcs	r1, r3
    c39c:	e00e      	b.n	c3bc <__adddf3+0xd0>
    c39e:	f1a5 0520 	sub.w	r5, r5, #32
    c3a2:	f10e 0e20 	add.w	lr, lr, #32
    c3a6:	2a01      	cmp	r2, #1
    c3a8:	fa03 fc0e 	lsl.w	ip, r3, lr
    c3ac:	bf28      	it	cs
    c3ae:	f04c 0c02 	orrcs.w	ip, ip, #2
    c3b2:	fa43 f305 	asr.w	r3, r3, r5
    c3b6:	18c0      	adds	r0, r0, r3
    c3b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    c3bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    c3c0:	d507      	bpl.n	c3d2 <__adddf3+0xe6>
    c3c2:	f04f 0e00 	mov.w	lr, #0
    c3c6:	f1dc 0c00 	rsbs	ip, ip, #0
    c3ca:	eb7e 0000 	sbcs.w	r0, lr, r0
    c3ce:	eb6e 0101 	sbc.w	r1, lr, r1
    c3d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    c3d6:	d31b      	bcc.n	c410 <__adddf3+0x124>
    c3d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    c3dc:	d30c      	bcc.n	c3f8 <__adddf3+0x10c>
    c3de:	0849      	lsrs	r1, r1, #1
    c3e0:	ea5f 0030 	movs.w	r0, r0, rrx
    c3e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
    c3e8:	f104 0401 	add.w	r4, r4, #1
    c3ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
    c3f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    c3f4:	f080 809a 	bcs.w	c52c <__adddf3+0x240>
    c3f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    c3fc:	bf08      	it	eq
    c3fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    c402:	f150 0000 	adcs.w	r0, r0, #0
    c406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    c40a:	ea41 0105 	orr.w	r1, r1, r5
    c40e:	bd30      	pop	{r4, r5, pc}
    c410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    c414:	4140      	adcs	r0, r0
    c416:	eb41 0101 	adc.w	r1, r1, r1
    c41a:	3c01      	subs	r4, #1
    c41c:	bf28      	it	cs
    c41e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
    c422:	d2e9      	bcs.n	c3f8 <__adddf3+0x10c>
    c424:	f091 0f00 	teq	r1, #0
    c428:	bf04      	itt	eq
    c42a:	4601      	moveq	r1, r0
    c42c:	2000      	moveq	r0, #0
    c42e:	fab1 f381 	clz	r3, r1
    c432:	bf08      	it	eq
    c434:	3320      	addeq	r3, #32
    c436:	f1a3 030b 	sub.w	r3, r3, #11
    c43a:	f1b3 0220 	subs.w	r2, r3, #32
    c43e:	da0c      	bge.n	c45a <__adddf3+0x16e>
    c440:	320c      	adds	r2, #12
    c442:	dd08      	ble.n	c456 <__adddf3+0x16a>
    c444:	f102 0c14 	add.w	ip, r2, #20
    c448:	f1c2 020c 	rsb	r2, r2, #12
    c44c:	fa01 f00c 	lsl.w	r0, r1, ip
    c450:	fa21 f102 	lsr.w	r1, r1, r2
    c454:	e00c      	b.n	c470 <__adddf3+0x184>
    c456:	f102 0214 	add.w	r2, r2, #20
    c45a:	bfd8      	it	le
    c45c:	f1c2 0c20 	rsble	ip, r2, #32
    c460:	fa01 f102 	lsl.w	r1, r1, r2
    c464:	fa20 fc0c 	lsr.w	ip, r0, ip
    c468:	bfdc      	itt	le
    c46a:	ea41 010c 	orrle.w	r1, r1, ip
    c46e:	4090      	lslle	r0, r2
    c470:	1ae4      	subs	r4, r4, r3
    c472:	bfa2      	ittt	ge
    c474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    c478:	4329      	orrge	r1, r5
    c47a:	bd30      	popge	{r4, r5, pc}
    c47c:	ea6f 0404 	mvn.w	r4, r4
    c480:	3c1f      	subs	r4, #31
    c482:	da1c      	bge.n	c4be <__adddf3+0x1d2>
    c484:	340c      	adds	r4, #12
    c486:	dc0e      	bgt.n	c4a6 <__adddf3+0x1ba>
    c488:	f104 0414 	add.w	r4, r4, #20
    c48c:	f1c4 0220 	rsb	r2, r4, #32
    c490:	fa20 f004 	lsr.w	r0, r0, r4
    c494:	fa01 f302 	lsl.w	r3, r1, r2
    c498:	ea40 0003 	orr.w	r0, r0, r3
    c49c:	fa21 f304 	lsr.w	r3, r1, r4
    c4a0:	ea45 0103 	orr.w	r1, r5, r3
    c4a4:	bd30      	pop	{r4, r5, pc}
    c4a6:	f1c4 040c 	rsb	r4, r4, #12
    c4aa:	f1c4 0220 	rsb	r2, r4, #32
    c4ae:	fa20 f002 	lsr.w	r0, r0, r2
    c4b2:	fa01 f304 	lsl.w	r3, r1, r4
    c4b6:	ea40 0003 	orr.w	r0, r0, r3
    c4ba:	4629      	mov	r1, r5
    c4bc:	bd30      	pop	{r4, r5, pc}
    c4be:	fa21 f004 	lsr.w	r0, r1, r4
    c4c2:	4629      	mov	r1, r5
    c4c4:	bd30      	pop	{r4, r5, pc}
    c4c6:	f094 0f00 	teq	r4, #0
    c4ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    c4ce:	bf06      	itte	eq
    c4d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    c4d4:	3401      	addeq	r4, #1
    c4d6:	3d01      	subne	r5, #1
    c4d8:	e74e      	b.n	c378 <__adddf3+0x8c>
    c4da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    c4de:	bf18      	it	ne
    c4e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    c4e4:	d029      	beq.n	c53a <__adddf3+0x24e>
    c4e6:	ea94 0f05 	teq	r4, r5
    c4ea:	bf08      	it	eq
    c4ec:	ea90 0f02 	teqeq	r0, r2
    c4f0:	d005      	beq.n	c4fe <__adddf3+0x212>
    c4f2:	ea54 0c00 	orrs.w	ip, r4, r0
    c4f6:	bf04      	itt	eq
    c4f8:	4619      	moveq	r1, r3
    c4fa:	4610      	moveq	r0, r2
    c4fc:	bd30      	pop	{r4, r5, pc}
    c4fe:	ea91 0f03 	teq	r1, r3
    c502:	bf1e      	ittt	ne
    c504:	2100      	movne	r1, #0
    c506:	2000      	movne	r0, #0
    c508:	bd30      	popne	{r4, r5, pc}
    c50a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    c50e:	d105      	bne.n	c51c <__adddf3+0x230>
    c510:	0040      	lsls	r0, r0, #1
    c512:	4149      	adcs	r1, r1
    c514:	bf28      	it	cs
    c516:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    c51a:	bd30      	pop	{r4, r5, pc}
    c51c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    c520:	bf3c      	itt	cc
    c522:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    c526:	bd30      	popcc	{r4, r5, pc}
    c528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    c52c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    c530:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    c534:	f04f 0000 	mov.w	r0, #0
    c538:	bd30      	pop	{r4, r5, pc}
    c53a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    c53e:	bf1a      	itte	ne
    c540:	4619      	movne	r1, r3
    c542:	4610      	movne	r0, r2
    c544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    c548:	bf1c      	itt	ne
    c54a:	460b      	movne	r3, r1
    c54c:	4602      	movne	r2, r0
    c54e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    c552:	bf06      	itte	eq
    c554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    c558:	ea91 0f03 	teqeq	r1, r3
    c55c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    c560:	bd30      	pop	{r4, r5, pc}
    c562:	bf00      	nop

0000c564 <__aeabi_ui2d>:
    c564:	f090 0f00 	teq	r0, #0
    c568:	bf04      	itt	eq
    c56a:	2100      	moveq	r1, #0
    c56c:	4770      	bxeq	lr
    c56e:	b530      	push	{r4, r5, lr}
    c570:	f44f 6480 	mov.w	r4, #1024	; 0x400
    c574:	f104 0432 	add.w	r4, r4, #50	; 0x32
    c578:	f04f 0500 	mov.w	r5, #0
    c57c:	f04f 0100 	mov.w	r1, #0
    c580:	e750      	b.n	c424 <__adddf3+0x138>
    c582:	bf00      	nop

0000c584 <__aeabi_i2d>:
    c584:	f090 0f00 	teq	r0, #0
    c588:	bf04      	itt	eq
    c58a:	2100      	moveq	r1, #0
    c58c:	4770      	bxeq	lr
    c58e:	b530      	push	{r4, r5, lr}
    c590:	f44f 6480 	mov.w	r4, #1024	; 0x400
    c594:	f104 0432 	add.w	r4, r4, #50	; 0x32
    c598:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    c59c:	bf48      	it	mi
    c59e:	4240      	negmi	r0, r0
    c5a0:	f04f 0100 	mov.w	r1, #0
    c5a4:	e73e      	b.n	c424 <__adddf3+0x138>
    c5a6:	bf00      	nop

0000c5a8 <__aeabi_f2d>:
    c5a8:	0042      	lsls	r2, r0, #1
    c5aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
    c5ae:	ea4f 0131 	mov.w	r1, r1, rrx
    c5b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
    c5b6:	bf1f      	itttt	ne
    c5b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    c5bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    c5c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    c5c4:	4770      	bxne	lr
    c5c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
    c5ca:	bf08      	it	eq
    c5cc:	4770      	bxeq	lr
    c5ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
    c5d2:	bf04      	itt	eq
    c5d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
    c5d8:	4770      	bxeq	lr
    c5da:	b530      	push	{r4, r5, lr}
    c5dc:	f44f 7460 	mov.w	r4, #896	; 0x380
    c5e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    c5e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    c5e8:	e71c      	b.n	c424 <__adddf3+0x138>
    c5ea:	bf00      	nop

0000c5ec <__aeabi_ul2d>:
    c5ec:	ea50 0201 	orrs.w	r2, r0, r1
    c5f0:	bf08      	it	eq
    c5f2:	4770      	bxeq	lr
    c5f4:	b530      	push	{r4, r5, lr}
    c5f6:	f04f 0500 	mov.w	r5, #0
    c5fa:	e00a      	b.n	c612 <__aeabi_l2d+0x16>

0000c5fc <__aeabi_l2d>:
    c5fc:	ea50 0201 	orrs.w	r2, r0, r1
    c600:	bf08      	it	eq
    c602:	4770      	bxeq	lr
    c604:	b530      	push	{r4, r5, lr}
    c606:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    c60a:	d502      	bpl.n	c612 <__aeabi_l2d+0x16>
    c60c:	4240      	negs	r0, r0
    c60e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    c612:	f44f 6480 	mov.w	r4, #1024	; 0x400
    c616:	f104 0432 	add.w	r4, r4, #50	; 0x32
    c61a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    c61e:	f43f aed8 	beq.w	c3d2 <__adddf3+0xe6>
    c622:	f04f 0203 	mov.w	r2, #3
    c626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    c62a:	bf18      	it	ne
    c62c:	3203      	addne	r2, #3
    c62e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    c632:	bf18      	it	ne
    c634:	3203      	addne	r2, #3
    c636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    c63a:	f1c2 0320 	rsb	r3, r2, #32
    c63e:	fa00 fc03 	lsl.w	ip, r0, r3
    c642:	fa20 f002 	lsr.w	r0, r0, r2
    c646:	fa01 fe03 	lsl.w	lr, r1, r3
    c64a:	ea40 000e 	orr.w	r0, r0, lr
    c64e:	fa21 f102 	lsr.w	r1, r1, r2
    c652:	4414      	add	r4, r2
    c654:	e6bd      	b.n	c3d2 <__adddf3+0xe6>
    c656:	bf00      	nop

0000c658 <__aeabi_dmul>:
    c658:	b570      	push	{r4, r5, r6, lr}
    c65a:	f04f 0cff 	mov.w	ip, #255	; 0xff
    c65e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    c662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    c666:	bf1d      	ittte	ne
    c668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    c66c:	ea94 0f0c 	teqne	r4, ip
    c670:	ea95 0f0c 	teqne	r5, ip
    c674:	f000 f8de 	bleq	c834 <__aeabi_dmul+0x1dc>
    c678:	442c      	add	r4, r5
    c67a:	ea81 0603 	eor.w	r6, r1, r3
    c67e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
    c682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
    c686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
    c68a:	bf18      	it	ne
    c68c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
    c690:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    c694:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    c698:	d038      	beq.n	c70c <__aeabi_dmul+0xb4>
    c69a:	fba0 ce02 	umull	ip, lr, r0, r2
    c69e:	f04f 0500 	mov.w	r5, #0
    c6a2:	fbe1 e502 	umlal	lr, r5, r1, r2
    c6a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
    c6aa:	fbe0 e503 	umlal	lr, r5, r0, r3
    c6ae:	f04f 0600 	mov.w	r6, #0
    c6b2:	fbe1 5603 	umlal	r5, r6, r1, r3
    c6b6:	f09c 0f00 	teq	ip, #0
    c6ba:	bf18      	it	ne
    c6bc:	f04e 0e01 	orrne.w	lr, lr, #1
    c6c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
    c6c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    c6c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
    c6cc:	d204      	bcs.n	c6d8 <__aeabi_dmul+0x80>
    c6ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
    c6d2:	416d      	adcs	r5, r5
    c6d4:	eb46 0606 	adc.w	r6, r6, r6
    c6d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
    c6dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
    c6e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
    c6e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
    c6e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
    c6ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    c6f0:	bf88      	it	hi
    c6f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    c6f6:	d81e      	bhi.n	c736 <__aeabi_dmul+0xde>
    c6f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
    c6fc:	bf08      	it	eq
    c6fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
    c702:	f150 0000 	adcs.w	r0, r0, #0
    c706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    c70a:	bd70      	pop	{r4, r5, r6, pc}
    c70c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
    c710:	ea46 0101 	orr.w	r1, r6, r1
    c714:	ea40 0002 	orr.w	r0, r0, r2
    c718:	ea81 0103 	eor.w	r1, r1, r3
    c71c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
    c720:	bfc2      	ittt	gt
    c722:	ebd4 050c 	rsbsgt	r5, r4, ip
    c726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    c72a:	bd70      	popgt	{r4, r5, r6, pc}
    c72c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    c730:	f04f 0e00 	mov.w	lr, #0
    c734:	3c01      	subs	r4, #1
    c736:	f300 80ab 	bgt.w	c890 <__aeabi_dmul+0x238>
    c73a:	f114 0f36 	cmn.w	r4, #54	; 0x36
    c73e:	bfde      	ittt	le
    c740:	2000      	movle	r0, #0
    c742:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
    c746:	bd70      	pople	{r4, r5, r6, pc}
    c748:	f1c4 0400 	rsb	r4, r4, #0
    c74c:	3c20      	subs	r4, #32
    c74e:	da35      	bge.n	c7bc <__aeabi_dmul+0x164>
    c750:	340c      	adds	r4, #12
    c752:	dc1b      	bgt.n	c78c <__aeabi_dmul+0x134>
    c754:	f104 0414 	add.w	r4, r4, #20
    c758:	f1c4 0520 	rsb	r5, r4, #32
    c75c:	fa00 f305 	lsl.w	r3, r0, r5
    c760:	fa20 f004 	lsr.w	r0, r0, r4
    c764:	fa01 f205 	lsl.w	r2, r1, r5
    c768:	ea40 0002 	orr.w	r0, r0, r2
    c76c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
    c770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    c774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    c778:	fa21 f604 	lsr.w	r6, r1, r4
    c77c:	eb42 0106 	adc.w	r1, r2, r6
    c780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    c784:	bf08      	it	eq
    c786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    c78a:	bd70      	pop	{r4, r5, r6, pc}
    c78c:	f1c4 040c 	rsb	r4, r4, #12
    c790:	f1c4 0520 	rsb	r5, r4, #32
    c794:	fa00 f304 	lsl.w	r3, r0, r4
    c798:	fa20 f005 	lsr.w	r0, r0, r5
    c79c:	fa01 f204 	lsl.w	r2, r1, r4
    c7a0:	ea40 0002 	orr.w	r0, r0, r2
    c7a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    c7a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    c7ac:	f141 0100 	adc.w	r1, r1, #0
    c7b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    c7b4:	bf08      	it	eq
    c7b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    c7ba:	bd70      	pop	{r4, r5, r6, pc}
    c7bc:	f1c4 0520 	rsb	r5, r4, #32
    c7c0:	fa00 f205 	lsl.w	r2, r0, r5
    c7c4:	ea4e 0e02 	orr.w	lr, lr, r2
    c7c8:	fa20 f304 	lsr.w	r3, r0, r4
    c7cc:	fa01 f205 	lsl.w	r2, r1, r5
    c7d0:	ea43 0302 	orr.w	r3, r3, r2
    c7d4:	fa21 f004 	lsr.w	r0, r1, r4
    c7d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    c7dc:	fa21 f204 	lsr.w	r2, r1, r4
    c7e0:	ea20 0002 	bic.w	r0, r0, r2
    c7e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
    c7e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    c7ec:	bf08      	it	eq
    c7ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    c7f2:	bd70      	pop	{r4, r5, r6, pc}
    c7f4:	f094 0f00 	teq	r4, #0
    c7f8:	d10f      	bne.n	c81a <__aeabi_dmul+0x1c2>
    c7fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
    c7fe:	0040      	lsls	r0, r0, #1
    c800:	eb41 0101 	adc.w	r1, r1, r1
    c804:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    c808:	bf08      	it	eq
    c80a:	3c01      	subeq	r4, #1
    c80c:	d0f7      	beq.n	c7fe <__aeabi_dmul+0x1a6>
    c80e:	ea41 0106 	orr.w	r1, r1, r6
    c812:	f095 0f00 	teq	r5, #0
    c816:	bf18      	it	ne
    c818:	4770      	bxne	lr
    c81a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
    c81e:	0052      	lsls	r2, r2, #1
    c820:	eb43 0303 	adc.w	r3, r3, r3
    c824:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
    c828:	bf08      	it	eq
    c82a:	3d01      	subeq	r5, #1
    c82c:	d0f7      	beq.n	c81e <__aeabi_dmul+0x1c6>
    c82e:	ea43 0306 	orr.w	r3, r3, r6
    c832:	4770      	bx	lr
    c834:	ea94 0f0c 	teq	r4, ip
    c838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    c83c:	bf18      	it	ne
    c83e:	ea95 0f0c 	teqne	r5, ip
    c842:	d00c      	beq.n	c85e <__aeabi_dmul+0x206>
    c844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    c848:	bf18      	it	ne
    c84a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    c84e:	d1d1      	bne.n	c7f4 <__aeabi_dmul+0x19c>
    c850:	ea81 0103 	eor.w	r1, r1, r3
    c854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    c858:	f04f 0000 	mov.w	r0, #0
    c85c:	bd70      	pop	{r4, r5, r6, pc}
    c85e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    c862:	bf06      	itte	eq
    c864:	4610      	moveq	r0, r2
    c866:	4619      	moveq	r1, r3
    c868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    c86c:	d019      	beq.n	c8a2 <__aeabi_dmul+0x24a>
    c86e:	ea94 0f0c 	teq	r4, ip
    c872:	d102      	bne.n	c87a <__aeabi_dmul+0x222>
    c874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
    c878:	d113      	bne.n	c8a2 <__aeabi_dmul+0x24a>
    c87a:	ea95 0f0c 	teq	r5, ip
    c87e:	d105      	bne.n	c88c <__aeabi_dmul+0x234>
    c880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
    c884:	bf1c      	itt	ne
    c886:	4610      	movne	r0, r2
    c888:	4619      	movne	r1, r3
    c88a:	d10a      	bne.n	c8a2 <__aeabi_dmul+0x24a>
    c88c:	ea81 0103 	eor.w	r1, r1, r3
    c890:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    c894:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    c898:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    c89c:	f04f 0000 	mov.w	r0, #0
    c8a0:	bd70      	pop	{r4, r5, r6, pc}
    c8a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    c8a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
    c8aa:	bd70      	pop	{r4, r5, r6, pc}

0000c8ac <__aeabi_ddiv>:
    c8ac:	b570      	push	{r4, r5, r6, lr}
    c8ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
    c8b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    c8b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    c8ba:	bf1d      	ittte	ne
    c8bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    c8c0:	ea94 0f0c 	teqne	r4, ip
    c8c4:	ea95 0f0c 	teqne	r5, ip
    c8c8:	f000 f8a7 	bleq	ca1a <__aeabi_ddiv+0x16e>
    c8cc:	eba4 0405 	sub.w	r4, r4, r5
    c8d0:	ea81 0e03 	eor.w	lr, r1, r3
    c8d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    c8d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
    c8dc:	f000 8088 	beq.w	c9f0 <__aeabi_ddiv+0x144>
    c8e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
    c8e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    c8e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
    c8ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    c8f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
    c8f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
    c8f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
    c8fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
    c900:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
    c904:	429d      	cmp	r5, r3
    c906:	bf08      	it	eq
    c908:	4296      	cmpeq	r6, r2
    c90a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
    c90e:	f504 7440 	add.w	r4, r4, #768	; 0x300
    c912:	d202      	bcs.n	c91a <__aeabi_ddiv+0x6e>
    c914:	085b      	lsrs	r3, r3, #1
    c916:	ea4f 0232 	mov.w	r2, r2, rrx
    c91a:	1ab6      	subs	r6, r6, r2
    c91c:	eb65 0503 	sbc.w	r5, r5, r3
    c920:	085b      	lsrs	r3, r3, #1
    c922:	ea4f 0232 	mov.w	r2, r2, rrx
    c926:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    c92a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
    c92e:	ebb6 0e02 	subs.w	lr, r6, r2
    c932:	eb75 0e03 	sbcs.w	lr, r5, r3
    c936:	bf22      	ittt	cs
    c938:	1ab6      	subcs	r6, r6, r2
    c93a:	4675      	movcs	r5, lr
    c93c:	ea40 000c 	orrcs.w	r0, r0, ip
    c940:	085b      	lsrs	r3, r3, #1
    c942:	ea4f 0232 	mov.w	r2, r2, rrx
    c946:	ebb6 0e02 	subs.w	lr, r6, r2
    c94a:	eb75 0e03 	sbcs.w	lr, r5, r3
    c94e:	bf22      	ittt	cs
    c950:	1ab6      	subcs	r6, r6, r2
    c952:	4675      	movcs	r5, lr
    c954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    c958:	085b      	lsrs	r3, r3, #1
    c95a:	ea4f 0232 	mov.w	r2, r2, rrx
    c95e:	ebb6 0e02 	subs.w	lr, r6, r2
    c962:	eb75 0e03 	sbcs.w	lr, r5, r3
    c966:	bf22      	ittt	cs
    c968:	1ab6      	subcs	r6, r6, r2
    c96a:	4675      	movcs	r5, lr
    c96c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    c970:	085b      	lsrs	r3, r3, #1
    c972:	ea4f 0232 	mov.w	r2, r2, rrx
    c976:	ebb6 0e02 	subs.w	lr, r6, r2
    c97a:	eb75 0e03 	sbcs.w	lr, r5, r3
    c97e:	bf22      	ittt	cs
    c980:	1ab6      	subcs	r6, r6, r2
    c982:	4675      	movcs	r5, lr
    c984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    c988:	ea55 0e06 	orrs.w	lr, r5, r6
    c98c:	d018      	beq.n	c9c0 <__aeabi_ddiv+0x114>
    c98e:	ea4f 1505 	mov.w	r5, r5, lsl #4
    c992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
    c996:	ea4f 1606 	mov.w	r6, r6, lsl #4
    c99a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    c99e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    c9a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
    c9a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
    c9aa:	d1c0      	bne.n	c92e <__aeabi_ddiv+0x82>
    c9ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    c9b0:	d10b      	bne.n	c9ca <__aeabi_ddiv+0x11e>
    c9b2:	ea41 0100 	orr.w	r1, r1, r0
    c9b6:	f04f 0000 	mov.w	r0, #0
    c9ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    c9be:	e7b6      	b.n	c92e <__aeabi_ddiv+0x82>
    c9c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    c9c4:	bf04      	itt	eq
    c9c6:	4301      	orreq	r1, r0
    c9c8:	2000      	moveq	r0, #0
    c9ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    c9ce:	bf88      	it	hi
    c9d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    c9d4:	f63f aeaf 	bhi.w	c736 <__aeabi_dmul+0xde>
    c9d8:	ebb5 0c03 	subs.w	ip, r5, r3
    c9dc:	bf04      	itt	eq
    c9de:	ebb6 0c02 	subseq.w	ip, r6, r2
    c9e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    c9e6:	f150 0000 	adcs.w	r0, r0, #0
    c9ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    c9ee:	bd70      	pop	{r4, r5, r6, pc}
    c9f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
    c9f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
    c9f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
    c9fc:	bfc2      	ittt	gt
    c9fe:	ebd4 050c 	rsbsgt	r5, r4, ip
    ca02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    ca06:	bd70      	popgt	{r4, r5, r6, pc}
    ca08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    ca0c:	f04f 0e00 	mov.w	lr, #0
    ca10:	3c01      	subs	r4, #1
    ca12:	e690      	b.n	c736 <__aeabi_dmul+0xde>
    ca14:	ea45 0e06 	orr.w	lr, r5, r6
    ca18:	e68d      	b.n	c736 <__aeabi_dmul+0xde>
    ca1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    ca1e:	ea94 0f0c 	teq	r4, ip
    ca22:	bf08      	it	eq
    ca24:	ea95 0f0c 	teqeq	r5, ip
    ca28:	f43f af3b 	beq.w	c8a2 <__aeabi_dmul+0x24a>
    ca2c:	ea94 0f0c 	teq	r4, ip
    ca30:	d10a      	bne.n	ca48 <__aeabi_ddiv+0x19c>
    ca32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    ca36:	f47f af34 	bne.w	c8a2 <__aeabi_dmul+0x24a>
    ca3a:	ea95 0f0c 	teq	r5, ip
    ca3e:	f47f af25 	bne.w	c88c <__aeabi_dmul+0x234>
    ca42:	4610      	mov	r0, r2
    ca44:	4619      	mov	r1, r3
    ca46:	e72c      	b.n	c8a2 <__aeabi_dmul+0x24a>
    ca48:	ea95 0f0c 	teq	r5, ip
    ca4c:	d106      	bne.n	ca5c <__aeabi_ddiv+0x1b0>
    ca4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    ca52:	f43f aefd 	beq.w	c850 <__aeabi_dmul+0x1f8>
    ca56:	4610      	mov	r0, r2
    ca58:	4619      	mov	r1, r3
    ca5a:	e722      	b.n	c8a2 <__aeabi_dmul+0x24a>
    ca5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    ca60:	bf18      	it	ne
    ca62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    ca66:	f47f aec5 	bne.w	c7f4 <__aeabi_dmul+0x19c>
    ca6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
    ca6e:	f47f af0d 	bne.w	c88c <__aeabi_dmul+0x234>
    ca72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
    ca76:	f47f aeeb 	bne.w	c850 <__aeabi_dmul+0x1f8>
    ca7a:	e712      	b.n	c8a2 <__aeabi_dmul+0x24a>

0000ca7c <__aeabi_d2f>:
    ca7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
    ca80:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
    ca84:	bf24      	itt	cs
    ca86:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
    ca8a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    ca8e:	d90d      	bls.n	caac <__aeabi_d2f+0x30>
    ca90:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    ca94:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    ca98:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
    ca9c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    caa0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
    caa4:	bf08      	it	eq
    caa6:	f020 0001 	biceq.w	r0, r0, #1
    caaa:	4770      	bx	lr
    caac:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
    cab0:	d121      	bne.n	caf6 <__aeabi_d2f+0x7a>
    cab2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
    cab6:	bfbc      	itt	lt
    cab8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
    cabc:	4770      	bxlt	lr
    cabe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    cac2:	ea4f 5252 	mov.w	r2, r2, lsr #21
    cac6:	f1c2 0218 	rsb	r2, r2, #24
    caca:	f1c2 0c20 	rsb	ip, r2, #32
    cace:	fa10 f30c 	lsls.w	r3, r0, ip
    cad2:	fa20 f002 	lsr.w	r0, r0, r2
    cad6:	bf18      	it	ne
    cad8:	f040 0001 	orrne.w	r0, r0, #1
    cadc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    cae0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    cae4:	fa03 fc0c 	lsl.w	ip, r3, ip
    cae8:	ea40 000c 	orr.w	r0, r0, ip
    caec:	fa23 f302 	lsr.w	r3, r3, r2
    caf0:	ea4f 0343 	mov.w	r3, r3, lsl #1
    caf4:	e7cc      	b.n	ca90 <__aeabi_d2f+0x14>
    caf6:	ea7f 5362 	mvns.w	r3, r2, asr #21
    cafa:	d107      	bne.n	cb0c <__aeabi_d2f+0x90>
    cafc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
    cb00:	bf1e      	ittt	ne
    cb02:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
    cb06:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
    cb0a:	4770      	bxne	lr
    cb0c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
    cb10:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    cb14:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    cb18:	4770      	bx	lr
    cb1a:	bf00      	nop

0000cb1c <__aeabi_frsub>:
    cb1c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
    cb20:	e002      	b.n	cb28 <__addsf3>
    cb22:	bf00      	nop

0000cb24 <__aeabi_fsub>:
    cb24:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0000cb28 <__addsf3>:
    cb28:	0042      	lsls	r2, r0, #1
    cb2a:	bf1f      	itttt	ne
    cb2c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
    cb30:	ea92 0f03 	teqne	r2, r3
    cb34:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
    cb38:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    cb3c:	d06a      	beq.n	cc14 <__addsf3+0xec>
    cb3e:	ea4f 6212 	mov.w	r2, r2, lsr #24
    cb42:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
    cb46:	bfc1      	itttt	gt
    cb48:	18d2      	addgt	r2, r2, r3
    cb4a:	4041      	eorgt	r1, r0
    cb4c:	4048      	eorgt	r0, r1
    cb4e:	4041      	eorgt	r1, r0
    cb50:	bfb8      	it	lt
    cb52:	425b      	neglt	r3, r3
    cb54:	2b19      	cmp	r3, #25
    cb56:	bf88      	it	hi
    cb58:	4770      	bxhi	lr
    cb5a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
    cb5e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    cb62:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    cb66:	bf18      	it	ne
    cb68:	4240      	negne	r0, r0
    cb6a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    cb6e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
    cb72:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    cb76:	bf18      	it	ne
    cb78:	4249      	negne	r1, r1
    cb7a:	ea92 0f03 	teq	r2, r3
    cb7e:	d03f      	beq.n	cc00 <__addsf3+0xd8>
    cb80:	f1a2 0201 	sub.w	r2, r2, #1
    cb84:	fa41 fc03 	asr.w	ip, r1, r3
    cb88:	eb10 000c 	adds.w	r0, r0, ip
    cb8c:	f1c3 0320 	rsb	r3, r3, #32
    cb90:	fa01 f103 	lsl.w	r1, r1, r3
    cb94:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
    cb98:	d502      	bpl.n	cba0 <__addsf3+0x78>
    cb9a:	4249      	negs	r1, r1
    cb9c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
    cba0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    cba4:	d313      	bcc.n	cbce <__addsf3+0xa6>
    cba6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
    cbaa:	d306      	bcc.n	cbba <__addsf3+0x92>
    cbac:	0840      	lsrs	r0, r0, #1
    cbae:	ea4f 0131 	mov.w	r1, r1, rrx
    cbb2:	f102 0201 	add.w	r2, r2, #1
    cbb6:	2afe      	cmp	r2, #254	; 0xfe
    cbb8:	d251      	bcs.n	cc5e <__addsf3+0x136>
    cbba:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
    cbbe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    cbc2:	bf08      	it	eq
    cbc4:	f020 0001 	biceq.w	r0, r0, #1
    cbc8:	ea40 0003 	orr.w	r0, r0, r3
    cbcc:	4770      	bx	lr
    cbce:	0049      	lsls	r1, r1, #1
    cbd0:	eb40 0000 	adc.w	r0, r0, r0
    cbd4:	3a01      	subs	r2, #1
    cbd6:	bf28      	it	cs
    cbd8:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
    cbdc:	d2ed      	bcs.n	cbba <__addsf3+0x92>
    cbde:	fab0 fc80 	clz	ip, r0
    cbe2:	f1ac 0c08 	sub.w	ip, ip, #8
    cbe6:	ebb2 020c 	subs.w	r2, r2, ip
    cbea:	fa00 f00c 	lsl.w	r0, r0, ip
    cbee:	bfaa      	itet	ge
    cbf0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
    cbf4:	4252      	neglt	r2, r2
    cbf6:	4318      	orrge	r0, r3
    cbf8:	bfbc      	itt	lt
    cbfa:	40d0      	lsrlt	r0, r2
    cbfc:	4318      	orrlt	r0, r3
    cbfe:	4770      	bx	lr
    cc00:	f092 0f00 	teq	r2, #0
    cc04:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
    cc08:	bf06      	itte	eq
    cc0a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
    cc0e:	3201      	addeq	r2, #1
    cc10:	3b01      	subne	r3, #1
    cc12:	e7b5      	b.n	cb80 <__addsf3+0x58>
    cc14:	ea4f 0341 	mov.w	r3, r1, lsl #1
    cc18:	ea7f 6c22 	mvns.w	ip, r2, asr #24
    cc1c:	bf18      	it	ne
    cc1e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    cc22:	d021      	beq.n	cc68 <__addsf3+0x140>
    cc24:	ea92 0f03 	teq	r2, r3
    cc28:	d004      	beq.n	cc34 <__addsf3+0x10c>
    cc2a:	f092 0f00 	teq	r2, #0
    cc2e:	bf08      	it	eq
    cc30:	4608      	moveq	r0, r1
    cc32:	4770      	bx	lr
    cc34:	ea90 0f01 	teq	r0, r1
    cc38:	bf1c      	itt	ne
    cc3a:	2000      	movne	r0, #0
    cc3c:	4770      	bxne	lr
    cc3e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
    cc42:	d104      	bne.n	cc4e <__addsf3+0x126>
    cc44:	0040      	lsls	r0, r0, #1
    cc46:	bf28      	it	cs
    cc48:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
    cc4c:	4770      	bx	lr
    cc4e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
    cc52:	bf3c      	itt	cc
    cc54:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
    cc58:	4770      	bxcc	lr
    cc5a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
    cc5e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
    cc62:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    cc66:	4770      	bx	lr
    cc68:	ea7f 6222 	mvns.w	r2, r2, asr #24
    cc6c:	bf16      	itet	ne
    cc6e:	4608      	movne	r0, r1
    cc70:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
    cc74:	4601      	movne	r1, r0
    cc76:	0242      	lsls	r2, r0, #9
    cc78:	bf06      	itte	eq
    cc7a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
    cc7e:	ea90 0f01 	teqeq	r0, r1
    cc82:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
    cc86:	4770      	bx	lr

0000cc88 <__aeabi_ui2f>:
    cc88:	f04f 0300 	mov.w	r3, #0
    cc8c:	e004      	b.n	cc98 <__aeabi_i2f+0x8>
    cc8e:	bf00      	nop

0000cc90 <__aeabi_i2f>:
    cc90:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
    cc94:	bf48      	it	mi
    cc96:	4240      	negmi	r0, r0
    cc98:	ea5f 0c00 	movs.w	ip, r0
    cc9c:	bf08      	it	eq
    cc9e:	4770      	bxeq	lr
    cca0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
    cca4:	4601      	mov	r1, r0
    cca6:	f04f 0000 	mov.w	r0, #0
    ccaa:	e01c      	b.n	cce6 <__aeabi_l2f+0x2a>

0000ccac <__aeabi_ul2f>:
    ccac:	ea50 0201 	orrs.w	r2, r0, r1
    ccb0:	bf08      	it	eq
    ccb2:	4770      	bxeq	lr
    ccb4:	f04f 0300 	mov.w	r3, #0
    ccb8:	e00a      	b.n	ccd0 <__aeabi_l2f+0x14>
    ccba:	bf00      	nop

0000ccbc <__aeabi_l2f>:
    ccbc:	ea50 0201 	orrs.w	r2, r0, r1
    ccc0:	bf08      	it	eq
    ccc2:	4770      	bxeq	lr
    ccc4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
    ccc8:	d502      	bpl.n	ccd0 <__aeabi_l2f+0x14>
    ccca:	4240      	negs	r0, r0
    cccc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    ccd0:	ea5f 0c01 	movs.w	ip, r1
    ccd4:	bf02      	ittt	eq
    ccd6:	4684      	moveq	ip, r0
    ccd8:	4601      	moveq	r1, r0
    ccda:	2000      	moveq	r0, #0
    ccdc:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
    cce0:	bf08      	it	eq
    cce2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
    cce6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
    ccea:	fabc f28c 	clz	r2, ip
    ccee:	3a08      	subs	r2, #8
    ccf0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
    ccf4:	db10      	blt.n	cd18 <__aeabi_l2f+0x5c>
    ccf6:	fa01 fc02 	lsl.w	ip, r1, r2
    ccfa:	4463      	add	r3, ip
    ccfc:	fa00 fc02 	lsl.w	ip, r0, r2
    cd00:	f1c2 0220 	rsb	r2, r2, #32
    cd04:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    cd08:	fa20 f202 	lsr.w	r2, r0, r2
    cd0c:	eb43 0002 	adc.w	r0, r3, r2
    cd10:	bf08      	it	eq
    cd12:	f020 0001 	biceq.w	r0, r0, #1
    cd16:	4770      	bx	lr
    cd18:	f102 0220 	add.w	r2, r2, #32
    cd1c:	fa01 fc02 	lsl.w	ip, r1, r2
    cd20:	f1c2 0220 	rsb	r2, r2, #32
    cd24:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
    cd28:	fa21 f202 	lsr.w	r2, r1, r2
    cd2c:	eb43 0002 	adc.w	r0, r3, r2
    cd30:	bf08      	it	eq
    cd32:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
    cd36:	4770      	bx	lr

0000cd38 <__aeabi_fmul>:
    cd38:	f04f 0cff 	mov.w	ip, #255	; 0xff
    cd3c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
    cd40:	bf1e      	ittt	ne
    cd42:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
    cd46:	ea92 0f0c 	teqne	r2, ip
    cd4a:	ea93 0f0c 	teqne	r3, ip
    cd4e:	d06f      	beq.n	ce30 <__aeabi_fmul+0xf8>
    cd50:	441a      	add	r2, r3
    cd52:	ea80 0c01 	eor.w	ip, r0, r1
    cd56:	0240      	lsls	r0, r0, #9
    cd58:	bf18      	it	ne
    cd5a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
    cd5e:	d01e      	beq.n	cd9e <__aeabi_fmul+0x66>
    cd60:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    cd64:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
    cd68:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
    cd6c:	fba0 3101 	umull	r3, r1, r0, r1
    cd70:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
    cd74:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
    cd78:	bf3e      	ittt	cc
    cd7a:	0049      	lslcc	r1, r1, #1
    cd7c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
    cd80:	005b      	lslcc	r3, r3, #1
    cd82:	ea40 0001 	orr.w	r0, r0, r1
    cd86:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
    cd8a:	2afd      	cmp	r2, #253	; 0xfd
    cd8c:	d81d      	bhi.n	cdca <__aeabi_fmul+0x92>
    cd8e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    cd92:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    cd96:	bf08      	it	eq
    cd98:	f020 0001 	biceq.w	r0, r0, #1
    cd9c:	4770      	bx	lr
    cd9e:	f090 0f00 	teq	r0, #0
    cda2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
    cda6:	bf08      	it	eq
    cda8:	0249      	lsleq	r1, r1, #9
    cdaa:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
    cdae:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
    cdb2:	3a7f      	subs	r2, #127	; 0x7f
    cdb4:	bfc2      	ittt	gt
    cdb6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
    cdba:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
    cdbe:	4770      	bxgt	lr
    cdc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    cdc4:	f04f 0300 	mov.w	r3, #0
    cdc8:	3a01      	subs	r2, #1
    cdca:	dc5d      	bgt.n	ce88 <__aeabi_fmul+0x150>
    cdcc:	f112 0f19 	cmn.w	r2, #25
    cdd0:	bfdc      	itt	le
    cdd2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
    cdd6:	4770      	bxle	lr
    cdd8:	f1c2 0200 	rsb	r2, r2, #0
    cddc:	0041      	lsls	r1, r0, #1
    cdde:	fa21 f102 	lsr.w	r1, r1, r2
    cde2:	f1c2 0220 	rsb	r2, r2, #32
    cde6:	fa00 fc02 	lsl.w	ip, r0, r2
    cdea:	ea5f 0031 	movs.w	r0, r1, rrx
    cdee:	f140 0000 	adc.w	r0, r0, #0
    cdf2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
    cdf6:	bf08      	it	eq
    cdf8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
    cdfc:	4770      	bx	lr
    cdfe:	f092 0f00 	teq	r2, #0
    ce02:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
    ce06:	bf02      	ittt	eq
    ce08:	0040      	lsleq	r0, r0, #1
    ce0a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
    ce0e:	3a01      	subeq	r2, #1
    ce10:	d0f9      	beq.n	ce06 <__aeabi_fmul+0xce>
    ce12:	ea40 000c 	orr.w	r0, r0, ip
    ce16:	f093 0f00 	teq	r3, #0
    ce1a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    ce1e:	bf02      	ittt	eq
    ce20:	0049      	lsleq	r1, r1, #1
    ce22:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
    ce26:	3b01      	subeq	r3, #1
    ce28:	d0f9      	beq.n	ce1e <__aeabi_fmul+0xe6>
    ce2a:	ea41 010c 	orr.w	r1, r1, ip
    ce2e:	e78f      	b.n	cd50 <__aeabi_fmul+0x18>
    ce30:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
    ce34:	ea92 0f0c 	teq	r2, ip
    ce38:	bf18      	it	ne
    ce3a:	ea93 0f0c 	teqne	r3, ip
    ce3e:	d00a      	beq.n	ce56 <__aeabi_fmul+0x11e>
    ce40:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
    ce44:	bf18      	it	ne
    ce46:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
    ce4a:	d1d8      	bne.n	cdfe <__aeabi_fmul+0xc6>
    ce4c:	ea80 0001 	eor.w	r0, r0, r1
    ce50:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
    ce54:	4770      	bx	lr
    ce56:	f090 0f00 	teq	r0, #0
    ce5a:	bf17      	itett	ne
    ce5c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
    ce60:	4608      	moveq	r0, r1
    ce62:	f091 0f00 	teqne	r1, #0
    ce66:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
    ce6a:	d014      	beq.n	ce96 <__aeabi_fmul+0x15e>
    ce6c:	ea92 0f0c 	teq	r2, ip
    ce70:	d101      	bne.n	ce76 <__aeabi_fmul+0x13e>
    ce72:	0242      	lsls	r2, r0, #9
    ce74:	d10f      	bne.n	ce96 <__aeabi_fmul+0x15e>
    ce76:	ea93 0f0c 	teq	r3, ip
    ce7a:	d103      	bne.n	ce84 <__aeabi_fmul+0x14c>
    ce7c:	024b      	lsls	r3, r1, #9
    ce7e:	bf18      	it	ne
    ce80:	4608      	movne	r0, r1
    ce82:	d108      	bne.n	ce96 <__aeabi_fmul+0x15e>
    ce84:	ea80 0001 	eor.w	r0, r0, r1
    ce88:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
    ce8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    ce90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    ce94:	4770      	bx	lr
    ce96:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    ce9a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
    ce9e:	4770      	bx	lr

0000cea0 <__aeabi_fdiv>:
    cea0:	f04f 0cff 	mov.w	ip, #255	; 0xff
    cea4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
    cea8:	bf1e      	ittt	ne
    ceaa:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
    ceae:	ea92 0f0c 	teqne	r2, ip
    ceb2:	ea93 0f0c 	teqne	r3, ip
    ceb6:	d069      	beq.n	cf8c <__aeabi_fdiv+0xec>
    ceb8:	eba2 0203 	sub.w	r2, r2, r3
    cebc:	ea80 0c01 	eor.w	ip, r0, r1
    cec0:	0249      	lsls	r1, r1, #9
    cec2:	ea4f 2040 	mov.w	r0, r0, lsl #9
    cec6:	d037      	beq.n	cf38 <__aeabi_fdiv+0x98>
    cec8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    cecc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
    ced0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
    ced4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
    ced8:	428b      	cmp	r3, r1
    ceda:	bf38      	it	cc
    cedc:	005b      	lslcc	r3, r3, #1
    cede:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
    cee2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
    cee6:	428b      	cmp	r3, r1
    cee8:	bf24      	itt	cs
    ceea:	1a5b      	subcs	r3, r3, r1
    ceec:	ea40 000c 	orrcs.w	r0, r0, ip
    cef0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
    cef4:	bf24      	itt	cs
    cef6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
    cefa:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    cefe:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
    cf02:	bf24      	itt	cs
    cf04:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
    cf08:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    cf0c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
    cf10:	bf24      	itt	cs
    cf12:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
    cf16:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    cf1a:	011b      	lsls	r3, r3, #4
    cf1c:	bf18      	it	ne
    cf1e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
    cf22:	d1e0      	bne.n	cee6 <__aeabi_fdiv+0x46>
    cf24:	2afd      	cmp	r2, #253	; 0xfd
    cf26:	f63f af50 	bhi.w	cdca <__aeabi_fmul+0x92>
    cf2a:	428b      	cmp	r3, r1
    cf2c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    cf30:	bf08      	it	eq
    cf32:	f020 0001 	biceq.w	r0, r0, #1
    cf36:	4770      	bx	lr
    cf38:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
    cf3c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
    cf40:	327f      	adds	r2, #127	; 0x7f
    cf42:	bfc2      	ittt	gt
    cf44:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
    cf48:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
    cf4c:	4770      	bxgt	lr
    cf4e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    cf52:	f04f 0300 	mov.w	r3, #0
    cf56:	3a01      	subs	r2, #1
    cf58:	e737      	b.n	cdca <__aeabi_fmul+0x92>
    cf5a:	f092 0f00 	teq	r2, #0
    cf5e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
    cf62:	bf02      	ittt	eq
    cf64:	0040      	lsleq	r0, r0, #1
    cf66:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
    cf6a:	3a01      	subeq	r2, #1
    cf6c:	d0f9      	beq.n	cf62 <__aeabi_fdiv+0xc2>
    cf6e:	ea40 000c 	orr.w	r0, r0, ip
    cf72:	f093 0f00 	teq	r3, #0
    cf76:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    cf7a:	bf02      	ittt	eq
    cf7c:	0049      	lsleq	r1, r1, #1
    cf7e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
    cf82:	3b01      	subeq	r3, #1
    cf84:	d0f9      	beq.n	cf7a <__aeabi_fdiv+0xda>
    cf86:	ea41 010c 	orr.w	r1, r1, ip
    cf8a:	e795      	b.n	ceb8 <__aeabi_fdiv+0x18>
    cf8c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
    cf90:	ea92 0f0c 	teq	r2, ip
    cf94:	d108      	bne.n	cfa8 <__aeabi_fdiv+0x108>
    cf96:	0242      	lsls	r2, r0, #9
    cf98:	f47f af7d 	bne.w	ce96 <__aeabi_fmul+0x15e>
    cf9c:	ea93 0f0c 	teq	r3, ip
    cfa0:	f47f af70 	bne.w	ce84 <__aeabi_fmul+0x14c>
    cfa4:	4608      	mov	r0, r1
    cfa6:	e776      	b.n	ce96 <__aeabi_fmul+0x15e>
    cfa8:	ea93 0f0c 	teq	r3, ip
    cfac:	d104      	bne.n	cfb8 <__aeabi_fdiv+0x118>
    cfae:	024b      	lsls	r3, r1, #9
    cfb0:	f43f af4c 	beq.w	ce4c <__aeabi_fmul+0x114>
    cfb4:	4608      	mov	r0, r1
    cfb6:	e76e      	b.n	ce96 <__aeabi_fmul+0x15e>
    cfb8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
    cfbc:	bf18      	it	ne
    cfbe:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
    cfc2:	d1ca      	bne.n	cf5a <__aeabi_fdiv+0xba>
    cfc4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
    cfc8:	f47f af5c 	bne.w	ce84 <__aeabi_fmul+0x14c>
    cfcc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
    cfd0:	f47f af3c 	bne.w	ce4c <__aeabi_fmul+0x114>
    cfd4:	e75f      	b.n	ce96 <__aeabi_fmul+0x15e>
    cfd6:	bf00      	nop

0000cfd8 <__gesf2>:
    cfd8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
    cfdc:	e006      	b.n	cfec <__cmpsf2+0x4>
    cfde:	bf00      	nop

0000cfe0 <__lesf2>:
    cfe0:	f04f 0c01 	mov.w	ip, #1
    cfe4:	e002      	b.n	cfec <__cmpsf2+0x4>
    cfe6:	bf00      	nop

0000cfe8 <__cmpsf2>:
    cfe8:	f04f 0c01 	mov.w	ip, #1
    cfec:	f84d cd04 	str.w	ip, [sp, #-4]!
    cff0:	ea4f 0240 	mov.w	r2, r0, lsl #1
    cff4:	ea4f 0341 	mov.w	r3, r1, lsl #1
    cff8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
    cffc:	bf18      	it	ne
    cffe:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    d002:	d011      	beq.n	d028 <__cmpsf2+0x40>
    d004:	b001      	add	sp, #4
    d006:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
    d00a:	bf18      	it	ne
    d00c:	ea90 0f01 	teqne	r0, r1
    d010:	bf58      	it	pl
    d012:	ebb2 0003 	subspl.w	r0, r2, r3
    d016:	bf88      	it	hi
    d018:	17c8      	asrhi	r0, r1, #31
    d01a:	bf38      	it	cc
    d01c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
    d020:	bf18      	it	ne
    d022:	f040 0001 	orrne.w	r0, r0, #1
    d026:	4770      	bx	lr
    d028:	ea7f 6c22 	mvns.w	ip, r2, asr #24
    d02c:	d102      	bne.n	d034 <__cmpsf2+0x4c>
    d02e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
    d032:	d105      	bne.n	d040 <__cmpsf2+0x58>
    d034:	ea7f 6c23 	mvns.w	ip, r3, asr #24
    d038:	d1e4      	bne.n	d004 <__cmpsf2+0x1c>
    d03a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
    d03e:	d0e1      	beq.n	d004 <__cmpsf2+0x1c>
    d040:	f85d 0b04 	ldr.w	r0, [sp], #4
    d044:	4770      	bx	lr
    d046:	bf00      	nop

0000d048 <__aeabi_cfrcmple>:
    d048:	4684      	mov	ip, r0
    d04a:	4608      	mov	r0, r1
    d04c:	4661      	mov	r1, ip
    d04e:	e7ff      	b.n	d050 <__aeabi_cfcmpeq>

0000d050 <__aeabi_cfcmpeq>:
    d050:	b50f      	push	{r0, r1, r2, r3, lr}
    d052:	f7ff ffc9 	bl	cfe8 <__cmpsf2>
    d056:	2800      	cmp	r0, #0
    d058:	bf48      	it	mi
    d05a:	f110 0f00 	cmnmi.w	r0, #0
    d05e:	bd0f      	pop	{r0, r1, r2, r3, pc}

0000d060 <__aeabi_fcmpeq>:
    d060:	f84d ed08 	str.w	lr, [sp, #-8]!
    d064:	f7ff fff4 	bl	d050 <__aeabi_cfcmpeq>
    d068:	bf0c      	ite	eq
    d06a:	2001      	moveq	r0, #1
    d06c:	2000      	movne	r0, #0
    d06e:	f85d fb08 	ldr.w	pc, [sp], #8
    d072:	bf00      	nop

0000d074 <__aeabi_fcmplt>:
    d074:	f84d ed08 	str.w	lr, [sp, #-8]!
    d078:	f7ff ffea 	bl	d050 <__aeabi_cfcmpeq>
    d07c:	bf34      	ite	cc
    d07e:	2001      	movcc	r0, #1
    d080:	2000      	movcs	r0, #0
    d082:	f85d fb08 	ldr.w	pc, [sp], #8
    d086:	bf00      	nop

0000d088 <__aeabi_fcmple>:
    d088:	f84d ed08 	str.w	lr, [sp, #-8]!
    d08c:	f7ff ffe0 	bl	d050 <__aeabi_cfcmpeq>
    d090:	bf94      	ite	ls
    d092:	2001      	movls	r0, #1
    d094:	2000      	movhi	r0, #0
    d096:	f85d fb08 	ldr.w	pc, [sp], #8
    d09a:	bf00      	nop

0000d09c <__aeabi_fcmpge>:
    d09c:	f84d ed08 	str.w	lr, [sp, #-8]!
    d0a0:	f7ff ffd2 	bl	d048 <__aeabi_cfrcmple>
    d0a4:	bf94      	ite	ls
    d0a6:	2001      	movls	r0, #1
    d0a8:	2000      	movhi	r0, #0
    d0aa:	f85d fb08 	ldr.w	pc, [sp], #8
    d0ae:	bf00      	nop

0000d0b0 <__aeabi_fcmpgt>:
    d0b0:	f84d ed08 	str.w	lr, [sp, #-8]!
    d0b4:	f7ff ffc8 	bl	d048 <__aeabi_cfrcmple>
    d0b8:	bf34      	ite	cc
    d0ba:	2001      	movcc	r0, #1
    d0bc:	2000      	movcs	r0, #0
    d0be:	f85d fb08 	ldr.w	pc, [sp], #8
    d0c2:	bf00      	nop

0000d0c4 <__aeabi_f2iz>:
    d0c4:	ea4f 0240 	mov.w	r2, r0, lsl #1
    d0c8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
    d0cc:	d30f      	bcc.n	d0ee <__aeabi_f2iz+0x2a>
    d0ce:	f04f 039e 	mov.w	r3, #158	; 0x9e
    d0d2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
    d0d6:	d90d      	bls.n	d0f4 <__aeabi_f2iz+0x30>
    d0d8:	ea4f 2300 	mov.w	r3, r0, lsl #8
    d0dc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    d0e0:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
    d0e4:	fa23 f002 	lsr.w	r0, r3, r2
    d0e8:	bf18      	it	ne
    d0ea:	4240      	negne	r0, r0
    d0ec:	4770      	bx	lr
    d0ee:	f04f 0000 	mov.w	r0, #0
    d0f2:	4770      	bx	lr
    d0f4:	f112 0f61 	cmn.w	r2, #97	; 0x61
    d0f8:	d101      	bne.n	d0fe <__aeabi_f2iz+0x3a>
    d0fa:	0242      	lsls	r2, r0, #9
    d0fc:	d105      	bne.n	d10a <__aeabi_f2iz+0x46>
    d0fe:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
    d102:	bf08      	it	eq
    d104:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
    d108:	4770      	bx	lr
    d10a:	f04f 0000 	mov.w	r0, #0
    d10e:	4770      	bx	lr

0000d110 <__aeabi_f2uiz>:
    d110:	0042      	lsls	r2, r0, #1
    d112:	d20e      	bcs.n	d132 <__aeabi_f2uiz+0x22>
    d114:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
    d118:	d30b      	bcc.n	d132 <__aeabi_f2uiz+0x22>
    d11a:	f04f 039e 	mov.w	r3, #158	; 0x9e
    d11e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
    d122:	d409      	bmi.n	d138 <__aeabi_f2uiz+0x28>
    d124:	ea4f 2300 	mov.w	r3, r0, lsl #8
    d128:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    d12c:	fa23 f002 	lsr.w	r0, r3, r2
    d130:	4770      	bx	lr
    d132:	f04f 0000 	mov.w	r0, #0
    d136:	4770      	bx	lr
    d138:	f112 0f61 	cmn.w	r2, #97	; 0x61
    d13c:	d101      	bne.n	d142 <__aeabi_f2uiz+0x32>
    d13e:	0242      	lsls	r2, r0, #9
    d140:	d102      	bne.n	d148 <__aeabi_f2uiz+0x38>
    d142:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    d146:	4770      	bx	lr
    d148:	f04f 0000 	mov.w	r0, #0
    d14c:	4770      	bx	lr
    d14e:	bf00      	nop

0000d150 <__aeabi_ldivmod>:
    d150:	b97b      	cbnz	r3, d172 <__aeabi_ldivmod+0x22>
    d152:	b972      	cbnz	r2, d172 <__aeabi_ldivmod+0x22>
    d154:	2900      	cmp	r1, #0
    d156:	bfbe      	ittt	lt
    d158:	2000      	movlt	r0, #0
    d15a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
    d15e:	e006      	blt.n	d16e <__aeabi_ldivmod+0x1e>
    d160:	bf08      	it	eq
    d162:	2800      	cmpeq	r0, #0
    d164:	bf1c      	itt	ne
    d166:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
    d16a:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    d16e:	f000 b857 	b.w	d220 <__aeabi_idiv0>
    d172:	f1ad 0c08 	sub.w	ip, sp, #8
    d176:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    d17a:	2900      	cmp	r1, #0
    d17c:	db09      	blt.n	d192 <__aeabi_ldivmod+0x42>
    d17e:	2b00      	cmp	r3, #0
    d180:	db1a      	blt.n	d1b8 <__aeabi_ldivmod+0x68>
    d182:	f010 fe45 	bl	1de10 <__udivmoddi4>
    d186:	f8dd e004 	ldr.w	lr, [sp, #4]
    d18a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    d18e:	b004      	add	sp, #16
    d190:	4770      	bx	lr
    d192:	4240      	negs	r0, r0
    d194:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    d198:	2b00      	cmp	r3, #0
    d19a:	db1b      	blt.n	d1d4 <__aeabi_ldivmod+0x84>
    d19c:	f010 fe38 	bl	1de10 <__udivmoddi4>
    d1a0:	f8dd e004 	ldr.w	lr, [sp, #4]
    d1a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    d1a8:	b004      	add	sp, #16
    d1aa:	4240      	negs	r0, r0
    d1ac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    d1b0:	4252      	negs	r2, r2
    d1b2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    d1b6:	4770      	bx	lr
    d1b8:	4252      	negs	r2, r2
    d1ba:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    d1be:	f010 fe27 	bl	1de10 <__udivmoddi4>
    d1c2:	f8dd e004 	ldr.w	lr, [sp, #4]
    d1c6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    d1ca:	b004      	add	sp, #16
    d1cc:	4240      	negs	r0, r0
    d1ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    d1d2:	4770      	bx	lr
    d1d4:	4252      	negs	r2, r2
    d1d6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    d1da:	f010 fe19 	bl	1de10 <__udivmoddi4>
    d1de:	f8dd e004 	ldr.w	lr, [sp, #4]
    d1e2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    d1e6:	b004      	add	sp, #16
    d1e8:	4252      	negs	r2, r2
    d1ea:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    d1ee:	4770      	bx	lr

0000d1f0 <__aeabi_uldivmod>:
    d1f0:	b953      	cbnz	r3, d208 <__aeabi_uldivmod+0x18>
    d1f2:	b94a      	cbnz	r2, d208 <__aeabi_uldivmod+0x18>
    d1f4:	2900      	cmp	r1, #0
    d1f6:	bf08      	it	eq
    d1f8:	2800      	cmpeq	r0, #0
    d1fa:	bf1c      	itt	ne
    d1fc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
    d200:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    d204:	f000 b80c 	b.w	d220 <__aeabi_idiv0>
    d208:	f1ad 0c08 	sub.w	ip, sp, #8
    d20c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    d210:	f010 fdfe 	bl	1de10 <__udivmoddi4>
    d214:	f8dd e004 	ldr.w	lr, [sp, #4]
    d218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    d21c:	b004      	add	sp, #16
    d21e:	4770      	bx	lr

0000d220 <__aeabi_idiv0>:
    d220:	4770      	bx	lr
    d222:	bf00      	nop

0000d224 <ocrypto_bigint_add256>:
    d224:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
    d228:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
    d22c:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    d230:	185b      	adds	r3, r3, r1
    d232:	eb54 040c 	adcs.w	r4, r4, ip
    d236:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    d23a:	414d      	adcs	r5, r1
    d23c:	eb56 060c 	adcs.w	r6, r6, ip
    d240:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    d244:	414f      	adcs	r7, r1
    d246:	eb58 080c 	adcs.w	r8, r8, ip
    d24a:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    d24e:	eb59 0901 	adcs.w	r9, r9, r1
    d252:	eb5a 0a0c 	adcs.w	sl, sl, ip
    d256:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
    d25a:	4180      	sbcs	r0, r0
    d25c:	3001      	adds	r0, #1
    d25e:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
    d262:	4770      	bx	lr

0000d264 <ocrypto_bigint_sub256>:
    d264:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
    d268:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
    d26c:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    d270:	1a5b      	subs	r3, r3, r1
    d272:	eb74 040c 	sbcs.w	r4, r4, ip
    d276:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    d27a:	418d      	sbcs	r5, r1
    d27c:	eb76 060c 	sbcs.w	r6, r6, ip
    d280:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    d284:	418f      	sbcs	r7, r1
    d286:	eb78 080c 	sbcs.w	r8, r8, ip
    d28a:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    d28e:	eb79 0901 	sbcs.w	r9, r9, r1
    d292:	eb7a 0a0c 	sbcs.w	sl, sl, ip
    d296:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
    d29a:	4180      	sbcs	r0, r0
    d29c:	4240      	negs	r0, r0
    d29e:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
    d2a2:	4770      	bx	lr

0000d2a4 <ocrypto_bigint_cadd256>:
    d2a4:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
    d2a8:	4252      	negs	r2, r2
    d2aa:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
    d2ae:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
    d2b2:	4017      	ands	r7, r2
    d2b4:	19db      	adds	r3, r3, r7
    d2b6:	ea18 0802 	ands.w	r8, r8, r2
    d2ba:	eb54 0408 	adcs.w	r4, r4, r8
    d2be:	ea19 0902 	ands.w	r9, r9, r2
    d2c2:	eb55 0509 	adcs.w	r5, r5, r9
    d2c6:	ea1a 0a02 	ands.w	sl, sl, r2
    d2ca:	eb56 060a 	adcs.w	r6, r6, sl
    d2ce:	c078      	stmia	r0!, {r3, r4, r5, r6}
    d2d0:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
    d2d4:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
    d2d8:	4017      	ands	r7, r2
    d2da:	417b      	adcs	r3, r7
    d2dc:	ea18 0802 	ands.w	r8, r8, r2
    d2e0:	eb54 0408 	adcs.w	r4, r4, r8
    d2e4:	ea19 0902 	ands.w	r9, r9, r2
    d2e8:	eb55 0509 	adcs.w	r5, r5, r9
    d2ec:	ea1a 0a02 	ands.w	sl, sl, r2
    d2f0:	eb56 060a 	adcs.w	r6, r6, sl
    d2f4:	c078      	stmia	r0!, {r3, r4, r5, r6}
    d2f6:	4180      	sbcs	r0, r0
    d2f8:	3001      	adds	r0, #1
    d2fa:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
    d2fe:	4770      	bx	lr

0000d300 <ocrypto_bigint_csub256>:
    d300:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
    d304:	4252      	negs	r2, r2
    d306:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
    d30a:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
    d30e:	4017      	ands	r7, r2
    d310:	1bdb      	subs	r3, r3, r7
    d312:	ea18 0802 	ands.w	r8, r8, r2
    d316:	eb74 0408 	sbcs.w	r4, r4, r8
    d31a:	ea19 0902 	ands.w	r9, r9, r2
    d31e:	eb75 0509 	sbcs.w	r5, r5, r9
    d322:	ea1a 0a02 	ands.w	sl, sl, r2
    d326:	eb76 060a 	sbcs.w	r6, r6, sl
    d32a:	c078      	stmia	r0!, {r3, r4, r5, r6}
    d32c:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
    d330:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
    d334:	4017      	ands	r7, r2
    d336:	41bb      	sbcs	r3, r7
    d338:	ea18 0802 	ands.w	r8, r8, r2
    d33c:	eb74 0408 	sbcs.w	r4, r4, r8
    d340:	ea19 0902 	ands.w	r9, r9, r2
    d344:	eb75 0509 	sbcs.w	r5, r5, r9
    d348:	ea1a 0a02 	ands.w	sl, sl, r2
    d34c:	eb76 060a 	sbcs.w	r6, r6, sl
    d350:	c078      	stmia	r0!, {r3, r4, r5, r6}
    d352:	4180      	sbcs	r0, r0
    d354:	4240      	negs	r0, r0
    d356:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
    d35a:	4770      	bx	lr

0000d35c <ocrypto_bigint_cswap256>:
    d35c:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
    d360:	4252      	negs	r2, r2
    d362:	f04f 0804 	mov.w	r8, #4

0000d366 <cswap256_loop>:
    d366:	e890 0030 	ldmia.w	r0, {r4, r5}
    d36a:	e891 00c0 	ldmia.w	r1, {r6, r7}
    d36e:	1ba3      	subs	r3, r4, r6
    d370:	4013      	ands	r3, r2
    d372:	1ae4      	subs	r4, r4, r3
    d374:	18f6      	adds	r6, r6, r3
    d376:	1beb      	subs	r3, r5, r7
    d378:	4013      	ands	r3, r2
    d37a:	1aed      	subs	r5, r5, r3
    d37c:	18ff      	adds	r7, r7, r3
    d37e:	c030      	stmia	r0!, {r4, r5}
    d380:	c1c0      	stmia	r1!, {r6, r7}
    d382:	f1b8 0801 	subs.w	r8, r8, #1
    d386:	d1ee      	bne.n	d366 <cswap256_loop>
    d388:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
    d38c:	4770      	bx	lr
    d38e:	bf00      	nop

0000d390 <ocrypto_mul256_noframe>:
    d390:	b500      	push	{lr}
    d392:	e892 07dc 	ldmia.w	r2, {r2, r3, r4, r6, r7, r8, r9, sl}
    d396:	e92d 07dc 	stmdb	sp!, {r2, r3, r4, r6, r7, r8, r9, sl}
    d39a:	e8b1 5780 	ldmia.w	r1!, {r7, r8, r9, sl, ip, lr}
    d39e:	b402      	push	{r1}
    d3a0:	fba7 5102 	umull	r5, r1, r7, r2
    d3a4:	950a      	str	r5, [sp, #40]	; 0x28
    d3a6:	fba8 0b02 	umull	r0, fp, r8, r2
    d3aa:	fbe7 1063 	umaal	r1, r0, r7, r3
    d3ae:	fbe9 b062 	umaal	fp, r0, r9, r2
    d3b2:	910b      	str	r1, [sp, #44]	; 0x2c
    d3b4:	fba8 5103 	umull	r5, r1, r8, r3
    d3b8:	fbea 0162 	umaal	r0, r1, sl, r2
    d3bc:	fbe7 b564 	umaal	fp, r5, r7, r4
    d3c0:	fbe7 0566 	umaal	r0, r5, r7, r6
    d3c4:	fbe8 1566 	umaal	r1, r5, r8, r6
    d3c8:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
    d3cc:	fba9 b603 	umull	fp, r6, r9, r3
    d3d0:	fbea 1663 	umaal	r1, r6, sl, r3
    d3d4:	fbec 5663 	umaal	r5, r6, ip, r3
    d3d8:	fbe8 0b64 	umaal	r0, fp, r8, r4
    d3dc:	fbe9 1b64 	umaal	r1, fp, r9, r4
    d3e0:	fbea 5b64 	umaal	r5, fp, sl, r4
    d3e4:	fbec 6b64 	umaal	r6, fp, ip, r4
    d3e8:	900d      	str	r0, [sp, #52]	; 0x34
    d3ea:	fbac 3002 	umull	r3, r0, ip, r2
    d3ee:	9c05      	ldr	r4, [sp, #20]
    d3f0:	fbee 5062 	umaal	r5, r0, lr, r2
    d3f4:	fbe9 6064 	umaal	r6, r0, r9, r4
    d3f8:	fbea b064 	umaal	fp, r0, sl, r4
    d3fc:	fbe7 3164 	umaal	r3, r1, r7, r4
    d400:	fbe8 5164 	umaal	r5, r1, r8, r4
    d404:	9c06      	ldr	r4, [sp, #24]
    d406:	fbe8 6164 	umaal	r6, r1, r8, r4
    d40a:	fbe9 b164 	umaal	fp, r1, r9, r4
    d40e:	fbea 0164 	umaal	r0, r1, sl, r4
    d412:	930e      	str	r3, [sp, #56]	; 0x38
    d414:	fba7 3204 	umull	r3, r2, r7, r4
    d418:	9c07      	ldr	r4, [sp, #28]
    d41a:	fbe7 6264 	umaal	r6, r2, r7, r4
    d41e:	fbe8 b264 	umaal	fp, r2, r8, r4
    d422:	fbe9 0264 	umaal	r0, r2, r9, r4
    d426:	fbea 1264 	umaal	r1, r2, sl, r4
    d42a:	9c04      	ldr	r4, [sp, #16]
    d42c:	fbe9 5364 	umaal	r5, r3, r9, r4
    d430:	fbea 6364 	umaal	r6, r3, sl, r4
    d434:	9c08      	ldr	r4, [sp, #32]
    d436:	fbe7 b364 	umaal	fp, r3, r7, r4
    d43a:	fbe8 0364 	umaal	r0, r3, r8, r4
    d43e:	fbe9 1364 	umaal	r1, r3, r9, r4
    d442:	fbea 2364 	umaal	r2, r3, sl, r4
    d446:	950f      	str	r5, [sp, #60]	; 0x3c
    d448:	f85d 9b04 	ldr.w	r9, [sp], #4
    d44c:	e899 0600 	ldmia.w	r9, {r9, sl}
    d450:	f8dd 8000 	ldr.w	r8, [sp]
    d454:	fba9 5408 	umull	r5, r4, r9, r8
    d458:	fbea b468 	umaal	fp, r4, sl, r8
    d45c:	f8dd 8010 	ldr.w	r8, [sp, #16]
    d460:	fbec 0468 	umaal	r0, r4, ip, r8
    d464:	fbee 1468 	umaal	r1, r4, lr, r8
    d468:	fbe9 2468 	umaal	r2, r4, r9, r8
    d46c:	fbea 3468 	umaal	r3, r4, sl, r8
    d470:	f8dd 8004 	ldr.w	r8, [sp, #4]
    d474:	fbee 6568 	umaal	r6, r5, lr, r8
    d478:	fbe9 b568 	umaal	fp, r5, r9, r8
    d47c:	fbea 0568 	umaal	r0, r5, sl, r8
    d480:	f8dd 8014 	ldr.w	r8, [sp, #20]
    d484:	fbec 1568 	umaal	r1, r5, ip, r8
    d488:	fbee 2568 	umaal	r2, r5, lr, r8
    d48c:	fbe9 3568 	umaal	r3, r5, r9, r8
    d490:	fbea 4568 	umaal	r4, r5, sl, r8
    d494:	960f      	str	r6, [sp, #60]	; 0x3c
    d496:	f8dd 8008 	ldr.w	r8, [sp, #8]
    d49a:	fbae 7608 	umull	r7, r6, lr, r8
    d49e:	fbe9 0668 	umaal	r0, r6, r9, r8
    d4a2:	fbea 1668 	umaal	r1, r6, sl, r8
    d4a6:	f8dd 8018 	ldr.w	r8, [sp, #24]
    d4aa:	fbec 2668 	umaal	r2, r6, ip, r8
    d4ae:	fbee 3668 	umaal	r3, r6, lr, r8
    d4b2:	fbe9 4668 	umaal	r4, r6, r9, r8
    d4b6:	fbea 5668 	umaal	r5, r6, sl, r8
    d4ba:	f8dd 800c 	ldr.w	r8, [sp, #12]
    d4be:	fbec b768 	umaal	fp, r7, ip, r8
    d4c2:	fbee 0768 	umaal	r0, r7, lr, r8
    d4c6:	fbe9 1768 	umaal	r1, r7, r9, r8
    d4ca:	fbea 2768 	umaal	r2, r7, sl, r8
    d4ce:	f8dd 801c 	ldr.w	r8, [sp, #28]
    d4d2:	fbec 3768 	umaal	r3, r7, ip, r8
    d4d6:	fbee 4768 	umaal	r4, r7, lr, r8
    d4da:	fbe9 5768 	umaal	r5, r7, r9, r8
    d4de:	fbea 6768 	umaal	r6, r7, sl, r8
    d4e2:	b008      	add	sp, #32
    d4e4:	bd00      	pop	{pc}
    d4e6:	bf00      	nop

0000d4e8 <ocrypto_bigint_mul256>:
    d4e8:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d4ec:	b087      	sub	sp, #28
    d4ee:	f7ff ff4f 	bl	d390 <ocrypto_mul256_noframe>
    d4f2:	f8dd 801c 	ldr.w	r8, [sp, #28]
    d4f6:	f108 0820 	add.w	r8, r8, #32
    d4fa:	e888 00ff 	stmia.w	r8, {r0, r1, r2, r3, r4, r5, r6, r7}
    d4fe:	bcff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7}
    d500:	e887 087f 	stmia.w	r7, {r0, r1, r2, r3, r4, r5, r6, fp}
    d504:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000d508 <ocrypto_sqr256_noframe>:
    d508:	b500      	push	{lr}
    d50a:	e891 5798 	ldmia.w	r1, {r3, r4, r7, r8, r9, sl, ip, lr}
    d50e:	fba3 5203 	umull	r5, r2, r3, r3
    d512:	9501      	str	r5, [sp, #4]
    d514:	fba3 0104 	umull	r0, r1, r3, r4
    d518:	fbe3 2064 	umaal	r2, r0, r3, r4
    d51c:	fbe3 1067 	umaal	r1, r0, r3, r7
    d520:	9202      	str	r2, [sp, #8]
    d522:	fba3 5207 	umull	r5, r2, r3, r7
    d526:	fbe3 0268 	umaal	r0, r2, r3, r8
    d52a:	fbe4 1564 	umaal	r1, r5, r4, r4
    d52e:	fbe3 0568 	umaal	r0, r5, r3, r8
    d532:	fbe3 2569 	umaal	r2, r5, r3, r9
    d536:	9103      	str	r1, [sp, #12]
    d538:	fba4 b607 	umull	fp, r6, r4, r7
    d53c:	fbe3 2669 	umaal	r2, r6, r3, r9
    d540:	fbe3 566a 	umaal	r5, r6, r3, sl
    d544:	fbe4 0b67 	umaal	r0, fp, r4, r7
    d548:	fbe4 2b68 	umaal	r2, fp, r4, r8
    d54c:	fbe3 5b6a 	umaal	r5, fp, r3, sl
    d550:	fbe3 6b6c 	umaal	r6, fp, r3, ip
    d554:	9004      	str	r0, [sp, #16]
    d556:	fba4 1008 	umull	r1, r0, r4, r8
    d55a:	fbe4 5069 	umaal	r5, r0, r4, r9
    d55e:	fbe3 606c 	umaal	r6, r0, r3, ip
    d562:	fbe3 b06e 	umaal	fp, r0, r3, lr
    d566:	fbe7 2167 	umaal	r2, r1, r7, r7
    d56a:	fbe4 5169 	umaal	r5, r1, r4, r9
    d56e:	fbe4 616a 	umaal	r6, r1, r4, sl
    d572:	fbe3 b16e 	umaal	fp, r1, r3, lr
    d576:	fbe4 016e 	umaal	r0, r1, r4, lr
    d57a:	9205      	str	r2, [sp, #20]
    d57c:	fba7 3208 	umull	r3, r2, r7, r8
    d580:	fbe4 626a 	umaal	r6, r2, r4, sl
    d584:	fbe4 b26c 	umaal	fp, r2, r4, ip
    d588:	fbe4 026e 	umaal	r0, r2, r4, lr
    d58c:	fbe7 126e 	umaal	r1, r2, r7, lr
    d590:	fbe7 5368 	umaal	r5, r3, r7, r8
    d594:	fbe7 6369 	umaal	r6, r3, r7, r9
    d598:	fbe4 b36c 	umaal	fp, r3, r4, ip
    d59c:	fbe7 036c 	umaal	r0, r3, r7, ip
    d5a0:	fbe7 136e 	umaal	r1, r3, r7, lr
    d5a4:	fbe8 236e 	umaal	r2, r3, r8, lr
    d5a8:	9506      	str	r5, [sp, #24]
    d5aa:	fba7 5409 	umull	r5, r4, r7, r9
    d5ae:	fbe7 b46a 	umaal	fp, r4, r7, sl
    d5b2:	fbe7 046c 	umaal	r0, r4, r7, ip
    d5b6:	fbe8 146c 	umaal	r1, r4, r8, ip
    d5ba:	fbe8 246e 	umaal	r2, r4, r8, lr
    d5be:	fbe9 346e 	umaal	r3, r4, r9, lr
    d5c2:	fbe8 6568 	umaal	r6, r5, r8, r8
    d5c6:	fbe7 b56a 	umaal	fp, r5, r7, sl
    d5ca:	fbe8 056a 	umaal	r0, r5, r8, sl
    d5ce:	fbe8 156c 	umaal	r1, r5, r8, ip
    d5d2:	fbe9 256c 	umaal	r2, r5, r9, ip
    d5d6:	fbe9 356e 	umaal	r3, r5, r9, lr
    d5da:	fbea 456e 	umaal	r4, r5, sl, lr
    d5de:	9607      	str	r6, [sp, #28]
    d5e0:	fba8 7609 	umull	r7, r6, r8, r9
    d5e4:	fbe8 066a 	umaal	r0, r6, r8, sl
    d5e8:	fbe9 166a 	umaal	r1, r6, r9, sl
    d5ec:	fbe9 266c 	umaal	r2, r6, r9, ip
    d5f0:	fbea 366c 	umaal	r3, r6, sl, ip
    d5f4:	fbea 466e 	umaal	r4, r6, sl, lr
    d5f8:	fbec 566e 	umaal	r5, r6, ip, lr
    d5fc:	fbe8 b769 	umaal	fp, r7, r8, r9
    d600:	fbe9 0769 	umaal	r0, r7, r9, r9
    d604:	fbe9 176a 	umaal	r1, r7, r9, sl
    d608:	fbea 276a 	umaal	r2, r7, sl, sl
    d60c:	fbea 376c 	umaal	r3, r7, sl, ip
    d610:	fbec 476c 	umaal	r4, r7, ip, ip
    d614:	fbec 576e 	umaal	r5, r7, ip, lr
    d618:	fbee 676e 	umaal	r6, r7, lr, lr
    d61c:	bd00      	pop	{pc}
    d61e:	bf00      	nop

0000d620 <ocrypto_bigint_sqr256>:
    d620:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d624:	b087      	sub	sp, #28
    d626:	f7ff ff6f 	bl	d508 <ocrypto_sqr256_noframe>
    d62a:	f8dd 801c 	ldr.w	r8, [sp, #28]
    d62e:	f108 0820 	add.w	r8, r8, #32
    d632:	e888 00ff 	stmia.w	r8, {r0, r1, r2, r3, r4, r5, r6, r7}
    d636:	bcff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7}
    d638:	e887 087f 	stmia.w	r7, {r0, r1, r2, r3, r4, r5, r6, fp}
    d63c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000d640 <ocrypto_constant_time_equal>:
    d640:	b430      	push	{r4, r5}
    d642:	f04f 0300 	mov.w	r3, #0

0000d646 <constant_time_equal_loop>:
    d646:	f810 4b01 	ldrb.w	r4, [r0], #1
    d64a:	f811 5b01 	ldrb.w	r5, [r1], #1
    d64e:	3a01      	subs	r2, #1
    d650:	ea84 0405 	eor.w	r4, r4, r5
    d654:	ea43 0304 	orr.w	r3, r3, r4
    d658:	d1f5      	bne.n	d646 <constant_time_equal_loop>
    d65a:	f1a3 0301 	sub.w	r3, r3, #1
    d65e:	ea4f 70d3 	mov.w	r0, r3, lsr #31
    d662:	bc30      	pop	{r4, r5}
    d664:	4770      	bx	lr
    d666:	bf00      	nop

0000d668 <ocrypto_constant_time_is_zero>:
    d668:	f04f 0300 	mov.w	r3, #0

0000d66c <constant_time_is_zero_loop>:
    d66c:	f810 2b01 	ldrb.w	r2, [r0], #1
    d670:	3901      	subs	r1, #1
    d672:	ea43 0302 	orr.w	r3, r3, r2
    d676:	d1f9      	bne.n	d66c <constant_time_is_zero_loop>
    d678:	f1a3 0301 	sub.w	r3, r3, #1
    d67c:	ea4f 70d3 	mov.w	r0, r3, lsr #31
    d680:	4770      	bx	lr
    d682:	bf00      	nop

0000d684 <ocrypto_constant_time_xor>:
    d684:	b430      	push	{r4, r5}

0000d686 <constant_time_xor_loop>:
    d686:	f811 4b01 	ldrb.w	r4, [r1], #1
    d68a:	f812 5b01 	ldrb.w	r5, [r2], #1
    d68e:	406c      	eors	r4, r5
    d690:	f800 4b01 	strb.w	r4, [r0], #1
    d694:	3b01      	subs	r3, #1
    d696:	d1f6      	bne.n	d686 <constant_time_xor_loop>
    d698:	bc30      	pop	{r4, r5}
    d69a:	4770      	bx	lr

0000d69c <ocrypto_mod_p256_add>:
    d69c:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
    d6a0:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
    d6a4:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    d6a8:	185b      	adds	r3, r3, r1
    d6aa:	eb54 040c 	adcs.w	r4, r4, ip
    d6ae:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    d6b2:	414d      	adcs	r5, r1
    d6b4:	eb56 060c 	adcs.w	r6, r6, ip
    d6b8:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    d6bc:	414f      	adcs	r7, r1
    d6be:	eb58 080c 	adcs.w	r8, r8, ip
    d6c2:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    d6c6:	eb59 0901 	adcs.w	r9, r9, r1
    d6ca:	eb5a 0a0c 	adcs.w	sl, sl, ip
    d6ce:	4189      	sbcs	r1, r1
    d6d0:	f1b3 33ff 	subs.w	r3, r3, #4294967295	; 0xffffffff
    d6d4:	f174 34ff 	sbcs.w	r4, r4, #4294967295	; 0xffffffff
    d6d8:	f175 35ff 	sbcs.w	r5, r5, #4294967295	; 0xffffffff
    d6dc:	f176 0600 	sbcs.w	r6, r6, #0
    d6e0:	f177 0700 	sbcs.w	r7, r7, #0
    d6e4:	f178 0800 	sbcs.w	r8, r8, #0
    d6e8:	f179 0901 	sbcs.w	r9, r9, #1
    d6ec:	f17a 3aff 	sbcs.w	sl, sl, #4294967295	; 0xffffffff
    d6f0:	f151 0100 	adcs.w	r1, r1, #0
    d6f4:	185b      	adds	r3, r3, r1
    d6f6:	414c      	adcs	r4, r1
    d6f8:	414d      	adcs	r5, r1
    d6fa:	f156 0600 	adcs.w	r6, r6, #0
    d6fe:	f157 0700 	adcs.w	r7, r7, #0
    d702:	f158 0800 	adcs.w	r8, r8, #0
    d706:	eb59 79d1 	adcs.w	r9, r9, r1, lsr #31
    d70a:	eb5a 0a01 	adcs.w	sl, sl, r1
    d70e:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
    d712:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
    d716:	4770      	bx	lr

0000d718 <ocrypto_mod_p256_sub>:
    d718:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
    d71c:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
    d720:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    d724:	1a5b      	subs	r3, r3, r1
    d726:	eb74 040c 	sbcs.w	r4, r4, ip
    d72a:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    d72e:	418d      	sbcs	r5, r1
    d730:	eb76 060c 	sbcs.w	r6, r6, ip
    d734:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    d738:	418f      	sbcs	r7, r1
    d73a:	eb78 080c 	sbcs.w	r8, r8, ip
    d73e:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    d742:	eb79 0901 	sbcs.w	r9, r9, r1
    d746:	eb7a 0a0c 	sbcs.w	sl, sl, ip
    d74a:	4189      	sbcs	r1, r1
    d74c:	185b      	adds	r3, r3, r1
    d74e:	414c      	adcs	r4, r1
    d750:	414d      	adcs	r5, r1
    d752:	f156 0600 	adcs.w	r6, r6, #0
    d756:	f157 0700 	adcs.w	r7, r7, #0
    d75a:	f158 0800 	adcs.w	r8, r8, #0
    d75e:	eb59 79d1 	adcs.w	r9, r9, r1, lsr #31
    d762:	eb5a 0a01 	adcs.w	sl, sl, r1
    d766:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
    d76a:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
    d76e:	4770      	bx	lr

0000d770 <mul_reduce>:
    d770:	eb18 0804 	adds.w	r8, r8, r4
    d774:	eb59 0905 	adcs.w	r9, r9, r5
    d778:	eb5a 0a06 	adcs.w	sl, sl, r6
    d77c:	eb5b 0b07 	adcs.w	fp, fp, r7
    d780:	f05f 0c00 	movs.w	ip, #0
    d784:	f14c 0c00 	adc.w	ip, ip, #0
    d788:	eb18 0805 	adds.w	r8, r8, r5
    d78c:	eb59 0906 	adcs.w	r9, r9, r6
    d790:	eb5a 0a07 	adcs.w	sl, sl, r7
    d794:	eb5b 0b07 	adcs.w	fp, fp, r7
    d798:	eb50 000c 	adcs.w	r0, r0, ip
    d79c:	f05f 0c00 	movs.w	ip, #0
    d7a0:	eb51 010c 	adcs.w	r1, r1, ip
    d7a4:	eb52 020c 	adcs.w	r2, r2, ip
    d7a8:	4163      	adcs	r3, r4
    d7aa:	f14c 0c00 	adc.w	ip, ip, #0
    d7ae:	ebb8 0807 	subs.w	r8, r8, r7
    d7b2:	f179 0900 	sbcs.w	r9, r9, #0
    d7b6:	f17a 0a00 	sbcs.w	sl, sl, #0
    d7ba:	eb7b 0b04 	sbcs.w	fp, fp, r4
    d7be:	41a8      	sbcs	r0, r5
    d7c0:	41b1      	sbcs	r1, r6
    d7c2:	41a2      	sbcs	r2, r4
    d7c4:	41b3      	sbcs	r3, r6
    d7c6:	f16c 0c00 	sbc.w	ip, ip, #0
    d7ca:	ebbb 0b05 	subs.w	fp, fp, r5
    d7ce:	41b0      	sbcs	r0, r6
    d7d0:	41b9      	sbcs	r1, r7
    d7d2:	41aa      	sbcs	r2, r5
    d7d4:	41bb      	sbcs	r3, r7
    d7d6:	f16c 0c00 	sbc.w	ip, ip, #0
    d7da:	ea6f 74ec 	mvn.w	r4, ip, asr #31
    d7de:	ebb8 0804 	subs.w	r8, r8, r4
    d7e2:	eb79 0904 	sbcs.w	r9, r9, r4
    d7e6:	eb7a 0a04 	sbcs.w	sl, sl, r4
    d7ea:	f17b 0b00 	sbcs.w	fp, fp, #0
    d7ee:	f170 0000 	sbcs.w	r0, r0, #0
    d7f2:	f171 0100 	sbcs.w	r1, r1, #0
    d7f6:	eb72 72d4 	sbcs.w	r2, r2, r4, lsr #31
    d7fa:	41a3      	sbcs	r3, r4
    d7fc:	f16c 0c00 	sbc.w	ip, ip, #0
    d800:	eb18 78ec 	adds.w	r8, r8, ip, asr #31
    d804:	eb59 79ec 	adcs.w	r9, r9, ip, asr #31
    d808:	eb5a 7aec 	adcs.w	sl, sl, ip, asr #31
    d80c:	f15b 0b00 	adcs.w	fp, fp, #0
    d810:	f150 0400 	adcs.w	r4, r0, #0
    d814:	f151 0500 	adcs.w	r5, r1, #0
    d818:	eb52 76dc 	adcs.w	r6, r2, ip, lsr #31
    d81c:	eb53 77ec 	adcs.w	r7, r3, ip, asr #31
    d820:	f14c 0c00 	adc.w	ip, ip, #0
    d824:	eb18 70ec 	adds.w	r0, r8, ip, asr #31
    d828:	eb59 71ec 	adcs.w	r1, r9, ip, asr #31
    d82c:	eb5a 72ec 	adcs.w	r2, sl, ip, asr #31
    d830:	f15b 0300 	adcs.w	r3, fp, #0
    d834:	f154 0400 	adcs.w	r4, r4, #0
    d838:	f155 0500 	adcs.w	r5, r5, #0
    d83c:	eb56 76dc 	adcs.w	r6, r6, ip, lsr #31
    d840:	eb57 77ec 	adcs.w	r7, r7, ip, asr #31
    d844:	4770      	bx	lr
    d846:	bf00      	nop

0000d848 <ocrypto_mod_p256_mul>:
    d848:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d84c:	b087      	sub	sp, #28
    d84e:	f7ff fd9f 	bl	d390 <ocrypto_mul256_noframe>
    d852:	f8dd 8010 	ldr.w	r8, [sp, #16]
    d856:	f8dd 9014 	ldr.w	r9, [sp, #20]
    d85a:	f8dd a018 	ldr.w	sl, [sp, #24]
    d85e:	f7ff ff87 	bl	d770 <mul_reduce>
    d862:	e8bd 0f00 	ldmia.w	sp!, {r8, r9, sl, fp}
    d866:	f7ff ff83 	bl	d770 <mul_reduce>
    d86a:	b003      	add	sp, #12
    d86c:	f85d 8b04 	ldr.w	r8, [sp], #4
    d870:	e888 00ff 	stmia.w	r8, {r0, r1, r2, r3, r4, r5, r6, r7}
    d874:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000d878 <ocrypto_mod_p256_sqr>:
    d878:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d87c:	b087      	sub	sp, #28
    d87e:	f7ff fe43 	bl	d508 <ocrypto_sqr256_noframe>
    d882:	f8dd 8010 	ldr.w	r8, [sp, #16]
    d886:	f8dd 9014 	ldr.w	r9, [sp, #20]
    d88a:	f8dd a018 	ldr.w	sl, [sp, #24]
    d88e:	f7ff ff6f 	bl	d770 <mul_reduce>
    d892:	e8bd 0f00 	ldmia.w	sp!, {r8, r9, sl, fp}
    d896:	f7ff ff6b 	bl	d770 <mul_reduce>
    d89a:	b003      	add	sp, #12
    d89c:	f85d 8b04 	ldr.w	r8, [sp], #4
    d8a0:	e888 00ff 	stmia.w	r8, {r0, r1, r2, r3, r4, r5, r6, r7}
    d8a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000d8a8 <sym_3NUECOSAIC227DBCPHAP4U7EQ3UBTGANU5ASIOA>:
    d8a8:	4801      	ldr	r0, [pc, #4]	; (d8b0 <sym_3NUECOSAIC227DBCPHAP4U7EQ3UBTGANU5ASIOA+0x8>)
    d8aa:	7800      	ldrb	r0, [r0, #0]
    d8ac:	4770      	bx	lr
    d8ae:	0000      	.short	0x0000
    d8b0:	20000028 	.word	0x20000028

0000d8b4 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA>:
    d8b4:	b570      	push	{r4, r5, r6, lr}
    d8b6:	4c17      	ldr	r4, [pc, #92]	; (d914 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x60>)
    d8b8:	7860      	ldrb	r0, [r4, #1]
    d8ba:	2800      	cmp	r0, #0
    d8bc:	d123      	bne.n	d906 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x52>
    d8be:	2001      	movs	r0, #1
    d8c0:	7060      	strb	r0, [r4, #1]
    d8c2:	f010 ff82 	bl	1e7ca <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
    d8c6:	f06f 0527 	mvn.w	r5, #39	; 0x27
    d8ca:	b928      	cbnz	r0, d8d8 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x24>
    d8cc:	f010 ffb3 	bl	1e836 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
    d8d0:	b910      	cbnz	r0, d8d8 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x24>
    d8d2:	f010 ffba 	bl	1e84a <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    d8d6:	b120      	cbz	r0, d8e2 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x2e>
    d8d8:	480f      	ldr	r0, [pc, #60]	; (d918 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x64>)
    d8da:	6060      	str	r0, [r4, #4]
    d8dc:	70a5      	strb	r5, [r4, #2]
    d8de:	2008      	movs	r0, #8
    d8e0:	e010      	b.n	d904 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x50>
    d8e2:	f010 ff47 	bl	1e774 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    d8e6:	b940      	cbnz	r0, d8fa <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x46>
    d8e8:	f010 ff4e 	bl	1e788 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    d8ec:	b928      	cbnz	r0, d8fa <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x46>
    d8ee:	f010 ff62 	bl	1e7b6 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    d8f2:	b910      	cbnz	r0, d8fa <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x46>
    d8f4:	f010 ff73 	bl	1e7de <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    d8f8:	b130      	cbz	r0, d908 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x54>
    d8fa:	4807      	ldr	r0, [pc, #28]	; (d918 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x64>)
    d8fc:	3031      	adds	r0, #49	; 0x31
    d8fe:	6060      	str	r0, [r4, #4]
    d900:	70a5      	strb	r5, [r4, #2]
    d902:	2004      	movs	r0, #4
    d904:	70e0      	strb	r0, [r4, #3]
    d906:	bd70      	pop	{r4, r5, r6, pc}
    d908:	f44f 718f 	mov.w	r1, #286	; 0x11e
    d90c:	2074      	movs	r0, #116	; 0x74
    d90e:	f003 fbff 	bl	11110 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    d912:	0000      	.short	0x0000
    d914:	20000028 	.word	0x20000028
    d918:	000235b4 	.word	0x000235b4

0000d91c <mpsl_tx_power_radio_supported_power_adjust>:
    d91c:	4908      	ldr	r1, [pc, #32]	; (d940 <mpsl_tx_power_radio_supported_power_adjust+0x24>)
    d91e:	f991 2003 	ldrsb.w	r2, [r1, #3]
    d922:	4290      	cmp	r0, r2
    d924:	da03      	bge.n	d92e <mpsl_tx_power_radio_supported_power_adjust+0x12>
    d926:	f991 2002 	ldrsb.w	r2, [r1, #2]
    d92a:	4290      	cmp	r0, r2
    d92c:	dc01      	bgt.n	d932 <mpsl_tx_power_radio_supported_power_adjust+0x16>
    d92e:	4610      	mov	r0, r2
    d930:	4770      	bx	lr
    d932:	6849      	ldr	r1, [r1, #4]
    d934:	1a80      	subs	r0, r0, r2
    d936:	5c08      	ldrb	r0, [r1, r0]
    d938:	4902      	ldr	r1, [pc, #8]	; (d944 <mpsl_tx_power_radio_supported_power_adjust+0x28>)
    d93a:	5608      	ldrsb	r0, [r1, r0]
    d93c:	4770      	bx	lr
    d93e:	0000      	.short	0x0000
    d940:	20000028 	.word	0x20000028
    d944:	000235a6 	.word	0x000235a6

0000d948 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ>:
    d948:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d94c:	461c      	mov	r4, r3
    d94e:	4690      	mov	r8, r2
    d950:	460d      	mov	r5, r1
    d952:	4606      	mov	r6, r0
    d954:	f06f 0715 	mvn.w	r7, #21
    d958:	2804      	cmp	r0, #4
    d95a:	d804      	bhi.n	d966 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1e>
    d95c:	b11c      	cbz	r4, d966 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1e>
    d95e:	f010 fba7 	bl	1e0b0 <__udivmoddi4+0x2a0>
    d962:	42a8      	cmp	r0, r5
    d964:	d802      	bhi.n	d96c <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x24>
    d966:	4638      	mov	r0, r7
    d968:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d96c:	4805      	ldr	r0, [pc, #20]	; (d984 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x3c>)
    d96e:	4642      	mov	r2, r8
    d970:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
    d974:	b118      	cbz	r0, d97e <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x36>
    d976:	5740      	ldrsb	r0, [r0, r5]
    d978:	4282      	cmp	r2, r0
    d97a:	dd00      	ble.n	d97e <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x36>
    d97c:	4602      	mov	r2, r0
    d97e:	7022      	strb	r2, [r4, #0]
    d980:	2000      	movs	r0, #0
    d982:	e7f1      	b.n	d968 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x20>
    d984:	20001028 	.word	0x20001028
    d988:	2800      	cmp	r0, #0
    d98a:	d019      	beq.n	d9c0 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x78>
    d98c:	7803      	ldrb	r3, [r0, #0]
    d98e:	4913      	ldr	r1, [pc, #76]	; (d9dc <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x94>)
    d990:	4a13      	ldr	r2, [pc, #76]	; (d9e0 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x98>)
    d992:	b113      	cbz	r3, d99a <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x52>
    d994:	2b01      	cmp	r3, #1
    d996:	d00e      	beq.n	d9b6 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x6e>
    d998:	e011      	b.n	d9be <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x76>
    d99a:	7903      	ldrb	r3, [r0, #4]
    d99c:	2b01      	cmp	r3, #1
    d99e:	d000      	beq.n	d9a2 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x5a>
    d9a0:	b96b      	cbnz	r3, d9be <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x76>
    d9a2:	7943      	ldrb	r3, [r0, #5]
    d9a4:	b10b      	cbz	r3, d9aa <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x62>
    d9a6:	2b01      	cmp	r3, #1
    d9a8:	d109      	bne.n	d9be <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x76>
    d9aa:	6883      	ldr	r3, [r0, #8]
    d9ac:	3b64      	subs	r3, #100	; 0x64
    d9ae:	428b      	cmp	r3, r1
    d9b0:	d205      	bcs.n	d9be <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x76>
    d9b2:	68c0      	ldr	r0, [r0, #12]
    d9b4:	e00e      	b.n	d9d4 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x8c>
    d9b6:	7903      	ldrb	r3, [r0, #4]
    d9b8:	2b01      	cmp	r3, #1
    d9ba:	d002      	beq.n	d9c2 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x7a>
    d9bc:	b10b      	cbz	r3, d9c2 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x7a>
    d9be:	2000      	movs	r0, #0
    d9c0:	4770      	bx	lr
    d9c2:	7943      	ldrb	r3, [r0, #5]
    d9c4:	b10b      	cbz	r3, d9ca <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x82>
    d9c6:	2b01      	cmp	r3, #1
    d9c8:	d1f9      	bne.n	d9be <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x76>
    d9ca:	68c3      	ldr	r3, [r0, #12]
    d9cc:	3b64      	subs	r3, #100	; 0x64
    d9ce:	428b      	cmp	r3, r1
    d9d0:	d2f5      	bcs.n	d9be <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x76>
    d9d2:	6880      	ldr	r0, [r0, #8]
    d9d4:	4290      	cmp	r0, r2
    d9d6:	d8f2      	bhi.n	d9be <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x76>
    d9d8:	2001      	movs	r0, #1
    d9da:	4770      	bx	lr
    d9dc:	0001863d 	.word	0x0001863d
    d9e0:	0f423fff 	.word	0x0f423fff
    d9e4:	b510      	push	{r4, lr}
    d9e6:	4c05      	ldr	r4, [pc, #20]	; (d9fc <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0xb4>)
    d9e8:	6820      	ldr	r0, [r4, #0]
    d9ea:	b110      	cbz	r0, d9f2 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0xaa>
    d9ec:	4780      	blx	r0
    d9ee:	2000      	movs	r0, #0
    d9f0:	6020      	str	r0, [r4, #0]
    d9f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d9f6:	f002 b863 	b.w	fac0 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
    d9fa:	0000      	.short	0x0000
    d9fc:	20000030 	.word	0x20000030

0000da00 <mpsl_timeslot_session_open>:
    da00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    da04:	460e      	mov	r6, r1
    da06:	0005      	movs	r5, r0
    da08:	d004      	beq.n	da14 <mpsl_timeslot_session_open+0x14>
    da0a:	f000 f847 	bl	da9c <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>
    da0e:	4607      	mov	r7, r0
    da10:	2400      	movs	r4, #0
    da12:	e00b      	b.n	da2c <mpsl_timeslot_session_open+0x2c>
    da14:	f06f 0015 	mvn.w	r0, #21
    da18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    da1c:	4620      	mov	r0, r4
    da1e:	f000 f843 	bl	daa8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
    da22:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
    da26:	b130      	cbz	r0, da36 <mpsl_timeslot_session_open+0x36>
    da28:	1c64      	adds	r4, r4, #1
    da2a:	b2e4      	uxtb	r4, r4
    da2c:	42bc      	cmp	r4, r7
    da2e:	d3f5      	bcc.n	da1c <mpsl_timeslot_session_open+0x1c>
    da30:	f06f 000b 	mvn.w	r0, #11
    da34:	e7f0      	b.n	da18 <mpsl_timeslot_session_open+0x18>
    da36:	4627      	mov	r7, r4
    da38:	2cff      	cmp	r4, #255	; 0xff
    da3a:	d0f9      	beq.n	da30 <mpsl_timeslot_session_open+0x30>
    da3c:	4620      	mov	r0, r4
    da3e:	f000 f833 	bl	daa8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
    da42:	4604      	mov	r4, r0
    da44:	f010 fd00 	bl	1e448 <__udivmoddi4+0x638>
    da48:	f884 7028 	strb.w	r7, [r4, #40]	; 0x28
    da4c:	4621      	mov	r1, r4
    da4e:	4808      	ldr	r0, [pc, #32]	; (da70 <mpsl_timeslot_session_open+0x70>)
    da50:	f002 f80e 	bl	fa70 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
    da54:	f884 0027 	strb.w	r0, [r4, #39]	; 0x27
    da58:	2820      	cmp	r0, #32
    da5a:	d006      	beq.n	da6a <mpsl_timeslot_session_open+0x6a>
    da5c:	2001      	movs	r0, #1
    da5e:	6225      	str	r5, [r4, #32]
    da60:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    da64:	7037      	strb	r7, [r6, #0]
    da66:	2000      	movs	r0, #0
    da68:	e7d6      	b.n	da18 <mpsl_timeslot_session_open+0x18>
    da6a:	f06f 0022 	mvn.w	r0, #34	; 0x22
    da6e:	e7d3      	b.n	da18 <mpsl_timeslot_session_open+0x18>
    da70:	0001e173 	.word	0x0001e173

0000da74 <sym_WTOZYVN52TSAPXLTHQQLG45KSAFDDSBJMHMFM6Q>:
    da74:	b510      	push	{r4, lr}
    da76:	0782      	lsls	r2, r0, #30
    da78:	d002      	beq.n	da80 <sym_WTOZYVN52TSAPXLTHQQLG45KSAFDDSBJMHMFM6Q+0xc>
    da7a:	f06f 000d 	mvn.w	r0, #13
    da7e:	bd10      	pop	{r4, pc}
    da80:	4a05      	ldr	r2, [pc, #20]	; (da98 <sym_WTOZYVN52TSAPXLTHQQLG45KSAFDDSBJMHMFM6Q+0x24>)
    da82:	7011      	strb	r1, [r2, #0]
    da84:	6050      	str	r0, [r2, #4]
    da86:	b128      	cbz	r0, da94 <sym_WTOZYVN52TSAPXLTHQQLG45KSAFDDSBJMHMFM6Q+0x20>
    da88:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    da8c:	010a      	lsls	r2, r1, #4
    da8e:	2100      	movs	r1, #0
    da90:	f010 ff5f 	bl	1e952 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    da94:	2000      	movs	r0, #0
    da96:	bd10      	pop	{r4, pc}
    da98:	20000034 	.word	0x20000034

0000da9c <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>:
    da9c:	4801      	ldr	r0, [pc, #4]	; (daa4 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A+0x8>)
    da9e:	7800      	ldrb	r0, [r0, #0]
    daa0:	4770      	bx	lr
    daa2:	0000      	.short	0x0000
    daa4:	20000034 	.word	0x20000034

0000daa8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>:
    daa8:	4905      	ldr	r1, [pc, #20]	; (dac0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x18>)
    daaa:	780a      	ldrb	r2, [r1, #0]
    daac:	4290      	cmp	r0, r2
    daae:	d301      	bcc.n	dab4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xc>
    dab0:	2000      	movs	r0, #0
    dab2:	4770      	bx	lr
    dab4:	6849      	ldr	r1, [r1, #4]
    dab6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    daba:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    dabe:	4770      	bx	lr
    dac0:	20000034 	.word	0x20000034

0000dac4 <MPSL_IRQ_RADIO_Handler>:
    dac4:	490e      	ldr	r1, [pc, #56]	; (db00 <MPSL_IRQ_RADIO_Handler+0x3c>)
    dac6:	b510      	push	{r4, lr}
    dac8:	f891 002d 	ldrb.w	r0, [r1, #45]	; 0x2d
    dacc:	2820      	cmp	r0, #32
    dace:	d012      	beq.n	daf6 <MPSL_IRQ_RADIO_Handler+0x32>
    dad0:	f891 002d 	ldrb.w	r0, [r1, #45]	; 0x2d
    dad4:	f5a1 6280 	sub.w	r2, r1, #1024	; 0x400
    dad8:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    dadc:	eb02 0080 	add.w	r0, r2, r0, lsl #2
    dae0:	f891 102d 	ldrb.w	r1, [r1, #45]	; 0x2d
    dae4:	6840      	ldr	r0, [r0, #4]
    dae6:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    daea:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
    daee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    daf2:	2104      	movs	r1, #4
    daf4:	4710      	bx	r2
    daf6:	f640 01bc 	movw	r1, #2236	; 0x8bc
    dafa:	2070      	movs	r0, #112	; 0x70
    dafc:	f003 fb08 	bl	11110 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    db00:	2000143c 	.word	0x2000143c
    db04:	b570      	push	{r4, r5, r6, lr}
    db06:	4605      	mov	r5, r0
    db08:	2a20      	cmp	r2, #32
    db0a:	d028      	beq.n	db5e <MPSL_IRQ_RADIO_Handler+0x9a>
    db0c:	4819      	ldr	r0, [pc, #100]	; (db74 <MPSL_IRQ_RADIO_Handler+0xb0>)
    db0e:	4c1a      	ldr	r4, [pc, #104]	; (db78 <MPSL_IRQ_RADIO_Handler+0xb4>)
    db10:	eb00 1c83 	add.w	ip, r0, r3, lsl #6
    db14:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    db18:	eb0c 0042 	add.w	r0, ip, r2, lsl #1
    db1c:	4423      	add	r3, r4
    db1e:	2920      	cmp	r1, #32
    db20:	d022      	beq.n	db68 <MPSL_IRQ_RADIO_Handler+0xa4>
    db22:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
    db26:	7840      	ldrb	r0, [r0, #1]
    db28:	784c      	ldrb	r4, [r1, #1]
    db2a:	7048      	strb	r0, [r1, #1]
    db2c:	4620      	mov	r0, r4
    db2e:	4601      	mov	r1, r0
    db30:	eb0c 0041 	add.w	r0, ip, r1, lsl #1
    db34:	4291      	cmp	r1, r2
    db36:	7005      	strb	r5, [r0, #0]
    db38:	7840      	ldrb	r0, [r0, #1]
    db3a:	d1f8      	bne.n	db2e <MPSL_IRQ_RADIO_Handler+0x6a>
    db3c:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
    db40:	2a20      	cmp	r2, #32
    db42:	bf1a      	itte	ne
    db44:	eb0c 0242 	addne.w	r2, ip, r2, lsl #1
    db48:	7054      	strbne	r4, [r2, #1]
    db4a:	f883 4021 	strbeq.w	r4, [r3, #33]	; 0x21
    db4e:	2220      	movs	r2, #32
    db50:	eb0c 0c41 	add.w	ip, ip, r1, lsl #1
    db54:	f88c 2001 	strb.w	r2, [ip, #1]
    db58:	f883 1022 	strb.w	r1, [r3, #34]	; 0x22
    db5c:	bd70      	pop	{r4, r5, r6, pc}
    db5e:	f44f 7126 	mov.w	r1, #664	; 0x298
    db62:	2070      	movs	r0, #112	; 0x70
    db64:	f003 fad4 	bl	11110 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    db68:	f893 4020 	ldrb.w	r4, [r3, #32]
    db6c:	7840      	ldrb	r0, [r0, #1]
    db6e:	f883 0020 	strb.w	r0, [r3, #32]
    db72:	e7db      	b.n	db2c <MPSL_IRQ_RADIO_Handler+0x68>
    db74:	200013bc 	.word	0x200013bc
    db78:	2000143c 	.word	0x2000143c
    db7c:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    db80:	b08d      	sub	sp, #52	; 0x34
    db82:	4615      	mov	r5, r2
    db84:	460c      	mov	r4, r1
    db86:	f002 fa05 	bl	ff94 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    db8a:	4428      	add	r0, r5
    db8c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    db90:	9008      	str	r0, [sp, #32]
    db92:	6821      	ldr	r1, [r4, #0]
    db94:	1a08      	subs	r0, r1, r0
    db96:	0200      	lsls	r0, r0, #8
    db98:	17c1      	asrs	r1, r0, #31
    db9a:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    db9e:	1200      	asrs	r0, r0, #8
    dba0:	2800      	cmp	r0, #0
    dba2:	f300 80f0 	bgt.w	dd86 <MPSL_IRQ_RADIO_Handler+0x2c2>
    dba6:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
    dbaa:	48cd      	ldr	r0, [pc, #820]	; (dee0 <MPSL_IRQ_RADIO_Handler+0x41c>)
    dbac:	eb08 0148 	add.w	r1, r8, r8, lsl #1
    dbb0:	4408      	add	r0, r1
    dbb2:	9009      	str	r0, [sp, #36]	; 0x24
    dbb4:	f890 5020 	ldrb.w	r5, [r0, #32]
    dbb8:	2020      	movs	r0, #32
    dbba:	4eca      	ldr	r6, [pc, #808]	; (dee4 <MPSL_IRQ_RADIO_Handler+0x420>)
    dbbc:	f10d 0a18 	add.w	sl, sp, #24
    dbc0:	f10d 091c 	add.w	r9, sp, #28
    dbc4:	f88d 0018 	strb.w	r0, [sp, #24]
    dbc8:	2d20      	cmp	r5, #32
    dbca:	bf1c      	itt	ne
    dbcc:	48c6      	ldrne	r0, [pc, #792]	; (dee8 <MPSL_IRQ_RADIO_Handler+0x424>)
    dbce:	eb00 1b88 	addne.w	fp, r0, r8, lsl #6
    dbd2:	d038      	beq.n	dc46 <MPSL_IRQ_RADIO_Handler+0x182>
    dbd4:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
    dbd8:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    dbdc:	f100 0108 	add.w	r1, r0, #8
    dbe0:	68c0      	ldr	r0, [r0, #12]
    dbe2:	6827      	ldr	r7, [r4, #0]
    dbe4:	1a38      	subs	r0, r7, r0
    dbe6:	0200      	lsls	r0, r0, #8
    dbe8:	17c2      	asrs	r2, r0, #31
    dbea:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    dbee:	1200      	asrs	r0, r0, #8
    dbf0:	d429      	bmi.n	dc46 <MPSL_IRQ_RADIO_Handler+0x182>
    dbf2:	89e0      	ldrh	r0, [r4, #14]
    dbf4:	b300      	cbz	r0, dc38 <MPSL_IRQ_RADIO_Handler+0x174>
    dbf6:	89c8      	ldrh	r0, [r1, #14]
    dbf8:	b9f0      	cbnz	r0, dc38 <MPSL_IRQ_RADIO_Handler+0x174>
    dbfa:	6808      	ldr	r0, [r1, #0]
    dbfc:	9003      	str	r0, [sp, #12]
    dbfe:	f003 f8dd 	bl	10dbc <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    dc02:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    dc06:	bf08      	it	eq
    dc08:	200d      	moveq	r0, #13
    dc0a:	d00b      	beq.n	dc24 <MPSL_IRQ_RADIO_Handler+0x160>
    dc0c:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    dc10:	3856      	subs	r0, #86	; 0x56
    dc12:	bf08      	it	eq
    dc14:	201c      	moveq	r0, #28
    dc16:	d005      	beq.n	dc24 <MPSL_IRQ_RADIO_Handler+0x160>
    dc18:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    dc1c:	389f      	subs	r0, #159	; 0x9f
    dc1e:	bf14      	ite	ne
    dc20:	2000      	movne	r0, #0
    dc22:	2032      	moveq	r0, #50	; 0x32
    dc24:	1c41      	adds	r1, r0, #1
    dc26:	9803      	ldr	r0, [sp, #12]
    dc28:	1a38      	subs	r0, r7, r0
    dc2a:	0200      	lsls	r0, r0, #8
    dc2c:	17c2      	asrs	r2, r0, #31
    dc2e:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    dc32:	1200      	asrs	r0, r0, #8
    dc34:	4288      	cmp	r0, r1
    dc36:	db06      	blt.n	dc46 <MPSL_IRQ_RADIO_Handler+0x182>
    dc38:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    dc3c:	f88a 5000 	strb.w	r5, [sl]
    dc40:	7845      	ldrb	r5, [r0, #1]
    dc42:	2d20      	cmp	r5, #32
    dc44:	d1c6      	bne.n	dbd4 <MPSL_IRQ_RADIO_Handler+0x110>
    dc46:	f89a 0000 	ldrb.w	r0, [sl]
    dc4a:	f889 0000 	strb.w	r0, [r9]
    dc4e:	2d20      	cmp	r5, #32
    dc50:	bf1c      	itt	ne
    dc52:	48a5      	ldrne	r0, [pc, #660]	; (dee8 <MPSL_IRQ_RADIO_Handler+0x424>)
    dc54:	eb00 1b88 	addne.w	fp, r0, r8, lsl #6
    dc58:	f000 813e 	beq.w	ded8 <MPSL_IRQ_RADIO_Handler+0x414>
    dc5c:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
    dc60:	eb06 0780 	add.w	r7, r6, r0, lsl #2
    dc64:	6861      	ldr	r1, [r4, #4]
    dc66:	f8d7 8008 	ldr.w	r8, [r7, #8]
    dc6a:	f107 0008 	add.w	r0, r7, #8
    dc6e:	eba8 0101 	sub.w	r1, r8, r1
    dc72:	0209      	lsls	r1, r1, #8
    dc74:	17ca      	asrs	r2, r1, #31
    dc76:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    dc7a:	1209      	asrs	r1, r1, #8
    dc7c:	d427      	bmi.n	dcce <MPSL_IRQ_RADIO_Handler+0x20a>
    dc7e:	89c0      	ldrh	r0, [r0, #14]
    dc80:	2800      	cmp	r0, #0
    dc82:	f000 8129 	beq.w	ded8 <MPSL_IRQ_RADIO_Handler+0x414>
    dc86:	89e0      	ldrh	r0, [r4, #14]
    dc88:	2800      	cmp	r0, #0
    dc8a:	f040 8125 	bne.w	ded8 <MPSL_IRQ_RADIO_Handler+0x414>
    dc8e:	f8d4 a000 	ldr.w	sl, [r4]
    dc92:	f003 f893 	bl	10dbc <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    dc96:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    dc9a:	bf08      	it	eq
    dc9c:	200d      	moveq	r0, #13
    dc9e:	d00b      	beq.n	dcb8 <MPSL_IRQ_RADIO_Handler+0x1f4>
    dca0:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    dca4:	3856      	subs	r0, #86	; 0x56
    dca6:	bf08      	it	eq
    dca8:	201c      	moveq	r0, #28
    dcaa:	d005      	beq.n	dcb8 <MPSL_IRQ_RADIO_Handler+0x1f4>
    dcac:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    dcb0:	389f      	subs	r0, #159	; 0x9f
    dcb2:	bf14      	ite	ne
    dcb4:	2000      	movne	r0, #0
    dcb6:	2032      	moveq	r0, #50	; 0x32
    dcb8:	1c41      	adds	r1, r0, #1
    dcba:	eba8 000a 	sub.w	r0, r8, sl
    dcbe:	0200      	lsls	r0, r0, #8
    dcc0:	17c2      	asrs	r2, r0, #31
    dcc2:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    dcc6:	1200      	asrs	r0, r0, #8
    dcc8:	4288      	cmp	r0, r1
    dcca:	f280 8105 	bge.w	ded8 <MPSL_IRQ_RADIO_Handler+0x414>
    dcce:	f889 5000 	strb.w	r5, [r9]
    dcd2:	7e38      	ldrb	r0, [r7, #24]
    dcd4:	7c21      	ldrb	r1, [r4, #16]
    dcd6:	4288      	cmp	r0, r1
    dcd8:	d906      	bls.n	dce8 <MPSL_IRQ_RADIO_Handler+0x224>
    dcda:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    dcde:	7845      	ldrb	r5, [r0, #1]
    dce0:	2d20      	cmp	r5, #32
    dce2:	d1bb      	bne.n	dc5c <MPSL_IRQ_RADIO_Handler+0x198>
    dce4:	f000 b8f8 	b.w	ded8 <MPSL_IRQ_RADIO_Handler+0x414>
    dce8:	f89d 001c 	ldrb.w	r0, [sp, #28]
    dcec:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    dcf0:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    dcf4:	8ac1      	ldrh	r1, [r0, #22]
    dcf6:	68c5      	ldr	r5, [r0, #12]
    dcf8:	bbe1      	cbnz	r1, dd74 <MPSL_IRQ_RADIO_Handler+0x2b0>
    dcfa:	89e1      	ldrh	r1, [r4, #14]
    dcfc:	b3d1      	cbz	r1, dd74 <MPSL_IRQ_RADIO_Handler+0x2b0>
    dcfe:	6887      	ldr	r7, [r0, #8]
    dd00:	f003 f85c 	bl	10dbc <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    dd04:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    dd08:	bf08      	it	eq
    dd0a:	200d      	moveq	r0, #13
    dd0c:	d00b      	beq.n	dd26 <MPSL_IRQ_RADIO_Handler+0x262>
    dd0e:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    dd12:	3856      	subs	r0, #86	; 0x56
    dd14:	bf08      	it	eq
    dd16:	201c      	moveq	r0, #28
    dd18:	d005      	beq.n	dd26 <MPSL_IRQ_RADIO_Handler+0x262>
    dd1a:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    dd1e:	389f      	subs	r0, #159	; 0x9f
    dd20:	bf14      	ite	ne
    dd22:	2000      	movne	r0, #0
    dd24:	2032      	moveq	r0, #50	; 0x32
    dd26:	1c41      	adds	r1, r0, #1
    dd28:	1be8      	subs	r0, r5, r7
    dd2a:	0200      	lsls	r0, r0, #8
    dd2c:	17c2      	asrs	r2, r0, #31
    dd2e:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    dd32:	1200      	asrs	r0, r0, #8
    dd34:	4288      	cmp	r0, r1
    dd36:	da1d      	bge.n	dd74 <MPSL_IRQ_RADIO_Handler+0x2b0>
    dd38:	f003 f840 	bl	10dbc <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    dd3c:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    dd40:	bf08      	it	eq
    dd42:	200d      	moveq	r0, #13
    dd44:	d00b      	beq.n	dd5e <MPSL_IRQ_RADIO_Handler+0x29a>
    dd46:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    dd4a:	3856      	subs	r0, #86	; 0x56
    dd4c:	bf08      	it	eq
    dd4e:	201c      	moveq	r0, #28
    dd50:	d005      	beq.n	dd5e <MPSL_IRQ_RADIO_Handler+0x29a>
    dd52:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    dd56:	389f      	subs	r0, #159	; 0x9f
    dd58:	bf14      	ite	ne
    dd5a:	2000      	movne	r0, #0
    dd5c:	2032      	moveq	r0, #50	; 0x32
    dd5e:	f89d 101c 	ldrb.w	r1, [sp, #28]
    dd62:	1c40      	adds	r0, r0, #1
    dd64:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    dd68:	eb06 0181 	add.w	r1, r6, r1, lsl #2
    dd6c:	6889      	ldr	r1, [r1, #8]
    dd6e:	4408      	add	r0, r1
    dd70:	f020 457f 	bic.w	r5, r0, #4278190080	; 0xff000000
    dd74:	9808      	ldr	r0, [sp, #32]
    dd76:	1a28      	subs	r0, r5, r0
    dd78:	0200      	lsls	r0, r0, #8
    dd7a:	17c1      	asrs	r1, r0, #31
    dd7c:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    dd80:	1200      	asrs	r0, r0, #8
    dd82:	2800      	cmp	r0, #0
    dd84:	dd03      	ble.n	dd8e <MPSL_IRQ_RADIO_Handler+0x2ca>
    dd86:	b011      	add	sp, #68	; 0x44
    dd88:	2000      	movs	r0, #0
    dd8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dd8e:	6820      	ldr	r0, [r4, #0]
    dd90:	42a8      	cmp	r0, r5
    dd92:	d902      	bls.n	dd9a <MPSL_IRQ_RADIO_Handler+0x2d6>
    dd94:	68a1      	ldr	r1, [r4, #8]
    dd96:	1c49      	adds	r1, r1, #1
    dd98:	60a1      	str	r1, [r4, #8]
    dd9a:	6861      	ldr	r1, [r4, #4]
    dd9c:	f10d 0a18 	add.w	sl, sp, #24
    dda0:	1a08      	subs	r0, r1, r0
    dda2:	4428      	add	r0, r5
    dda4:	f025 417f 	bic.w	r1, r5, #4278190080	; 0xff000000
    dda8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    ddac:	e9c4 1000 	strd	r1, r0, [r4]
    ddb0:	9810      	ldr	r0, [sp, #64]	; 0x40
    ddb2:	900b      	str	r0, [sp, #44]	; 0x2c
    ddb4:	9809      	ldr	r0, [sp, #36]	; 0x24
    ddb6:	f10d 081c 	add.w	r8, sp, #28
    ddba:	f890 5020 	ldrb.w	r5, [r0, #32]
    ddbe:	2020      	movs	r0, #32
    ddc0:	f88d 0018 	strb.w	r0, [sp, #24]
    ddc4:	2d20      	cmp	r5, #32
    ddc6:	d03c      	beq.n	de42 <MPSL_IRQ_RADIO_Handler+0x37e>
    ddc8:	4947      	ldr	r1, [pc, #284]	; (dee8 <MPSL_IRQ_RADIO_Handler+0x424>)
    ddca:	980b      	ldr	r0, [sp, #44]	; 0x2c
    ddcc:	eb01 1b80 	add.w	fp, r1, r0, lsl #6
    ddd0:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
    ddd4:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    ddd8:	f100 0108 	add.w	r1, r0, #8
    dddc:	68c0      	ldr	r0, [r0, #12]
    ddde:	6827      	ldr	r7, [r4, #0]
    dde0:	1a38      	subs	r0, r7, r0
    dde2:	0200      	lsls	r0, r0, #8
    dde4:	17c2      	asrs	r2, r0, #31
    dde6:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    ddea:	1200      	asrs	r0, r0, #8
    ddec:	d429      	bmi.n	de42 <MPSL_IRQ_RADIO_Handler+0x37e>
    ddee:	89e0      	ldrh	r0, [r4, #14]
    ddf0:	b300      	cbz	r0, de34 <MPSL_IRQ_RADIO_Handler+0x370>
    ddf2:	89c8      	ldrh	r0, [r1, #14]
    ddf4:	b9f0      	cbnz	r0, de34 <MPSL_IRQ_RADIO_Handler+0x370>
    ddf6:	f8d1 9000 	ldr.w	r9, [r1]
    ddfa:	f002 ffdf 	bl	10dbc <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    ddfe:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    de02:	bf08      	it	eq
    de04:	200d      	moveq	r0, #13
    de06:	d00b      	beq.n	de20 <MPSL_IRQ_RADIO_Handler+0x35c>
    de08:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    de0c:	3856      	subs	r0, #86	; 0x56
    de0e:	bf08      	it	eq
    de10:	201c      	moveq	r0, #28
    de12:	d005      	beq.n	de20 <MPSL_IRQ_RADIO_Handler+0x35c>
    de14:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    de18:	389f      	subs	r0, #159	; 0x9f
    de1a:	bf14      	ite	ne
    de1c:	2000      	movne	r0, #0
    de1e:	2032      	moveq	r0, #50	; 0x32
    de20:	1c41      	adds	r1, r0, #1
    de22:	eba7 0009 	sub.w	r0, r7, r9
    de26:	0200      	lsls	r0, r0, #8
    de28:	17c2      	asrs	r2, r0, #31
    de2a:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    de2e:	1200      	asrs	r0, r0, #8
    de30:	4288      	cmp	r0, r1
    de32:	db06      	blt.n	de42 <MPSL_IRQ_RADIO_Handler+0x37e>
    de34:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    de38:	f88a 5000 	strb.w	r5, [sl]
    de3c:	7845      	ldrb	r5, [r0, #1]
    de3e:	2d20      	cmp	r5, #32
    de40:	d1c6      	bne.n	ddd0 <MPSL_IRQ_RADIO_Handler+0x30c>
    de42:	f89a 0000 	ldrb.w	r0, [sl]
    de46:	f888 0000 	strb.w	r0, [r8]
    de4a:	980b      	ldr	r0, [sp, #44]	; 0x2c
    de4c:	2d20      	cmp	r5, #32
    de4e:	bf1c      	itt	ne
    de50:	4925      	ldrne	r1, [pc, #148]	; (dee8 <MPSL_IRQ_RADIO_Handler+0x424>)
    de52:	eb01 1b80 	addne.w	fp, r1, r0, lsl #6
    de56:	d03f      	beq.n	ded8 <MPSL_IRQ_RADIO_Handler+0x414>
    de58:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
    de5c:	eb06 0780 	add.w	r7, r6, r0, lsl #2
    de60:	6860      	ldr	r0, [r4, #4]
    de62:	f8d7 9008 	ldr.w	r9, [r7, #8]
    de66:	f107 0108 	add.w	r1, r7, #8
    de6a:	eba9 0000 	sub.w	r0, r9, r0
    de6e:	0200      	lsls	r0, r0, #8
    de70:	17c2      	asrs	r2, r0, #31
    de72:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    de76:	1200      	asrs	r0, r0, #8
    de78:	d422      	bmi.n	dec0 <MPSL_IRQ_RADIO_Handler+0x3fc>
    de7a:	89c8      	ldrh	r0, [r1, #14]
    de7c:	b360      	cbz	r0, ded8 <MPSL_IRQ_RADIO_Handler+0x414>
    de7e:	89e0      	ldrh	r0, [r4, #14]
    de80:	bb50      	cbnz	r0, ded8 <MPSL_IRQ_RADIO_Handler+0x414>
    de82:	f8d4 a000 	ldr.w	sl, [r4]
    de86:	f002 ff99 	bl	10dbc <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    de8a:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    de8e:	bf08      	it	eq
    de90:	200d      	moveq	r0, #13
    de92:	d00b      	beq.n	deac <MPSL_IRQ_RADIO_Handler+0x3e8>
    de94:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    de98:	3856      	subs	r0, #86	; 0x56
    de9a:	bf08      	it	eq
    de9c:	201c      	moveq	r0, #28
    de9e:	d005      	beq.n	deac <MPSL_IRQ_RADIO_Handler+0x3e8>
    dea0:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    dea4:	389f      	subs	r0, #159	; 0x9f
    dea6:	bf14      	ite	ne
    dea8:	2000      	movne	r0, #0
    deaa:	2032      	moveq	r0, #50	; 0x32
    deac:	1c41      	adds	r1, r0, #1
    deae:	eba9 000a 	sub.w	r0, r9, sl
    deb2:	0200      	lsls	r0, r0, #8
    deb4:	17c2      	asrs	r2, r0, #31
    deb6:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    deba:	1200      	asrs	r0, r0, #8
    debc:	4288      	cmp	r0, r1
    debe:	da0b      	bge.n	ded8 <MPSL_IRQ_RADIO_Handler+0x414>
    dec0:	f888 5000 	strb.w	r5, [r8]
    dec4:	7e38      	ldrb	r0, [r7, #24]
    dec6:	7c21      	ldrb	r1, [r4, #16]
    dec8:	4288      	cmp	r0, r1
    deca:	f67f af0d 	bls.w	dce8 <MPSL_IRQ_RADIO_Handler+0x224>
    dece:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    ded2:	7845      	ldrb	r5, [r0, #1]
    ded4:	2d20      	cmp	r5, #32
    ded6:	d1bf      	bne.n	de58 <MPSL_IRQ_RADIO_Handler+0x394>
    ded8:	b011      	add	sp, #68	; 0x44
    deda:	2001      	movs	r0, #1
    dedc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dee0:	2000143c 	.word	0x2000143c
    dee4:	2000103c 	.word	0x2000103c
    dee8:	200013bc 	.word	0x200013bc
    deec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    def0:	460f      	mov	r7, r1
    def2:	4606      	mov	r6, r0
    def4:	eb01 0047 	add.w	r0, r1, r7, lsl #1
    def8:	494b      	ldr	r1, [pc, #300]	; (e028 <MPSL_IRQ_RADIO_Handler+0x564>)
    defa:	4699      	mov	r9, r3
    defc:	4408      	add	r0, r1
    defe:	4692      	mov	sl, r2
    df00:	f890 4020 	ldrb.w	r4, [r0, #32]
    df04:	2020      	movs	r0, #32
    df06:	7010      	strb	r0, [r2, #0]
    df08:	f5a1 6880 	sub.w	r8, r1, #1024	; 0x400
    df0c:	2c20      	cmp	r4, #32
    df0e:	bf1c      	itt	ne
    df10:	4846      	ldrne	r0, [pc, #280]	; (e02c <MPSL_IRQ_RADIO_Handler+0x568>)
    df12:	eb00 1b87 	addne.w	fp, r0, r7, lsl #6
    df16:	d038      	beq.n	df8a <MPSL_IRQ_RADIO_Handler+0x4c6>
    df18:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
    df1c:	eb08 0080 	add.w	r0, r8, r0, lsl #2
    df20:	f100 0108 	add.w	r1, r0, #8
    df24:	68c0      	ldr	r0, [r0, #12]
    df26:	6835      	ldr	r5, [r6, #0]
    df28:	1a28      	subs	r0, r5, r0
    df2a:	0200      	lsls	r0, r0, #8
    df2c:	17c2      	asrs	r2, r0, #31
    df2e:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    df32:	1200      	asrs	r0, r0, #8
    df34:	d429      	bmi.n	df8a <MPSL_IRQ_RADIO_Handler+0x4c6>
    df36:	89f0      	ldrh	r0, [r6, #14]
    df38:	b300      	cbz	r0, df7c <MPSL_IRQ_RADIO_Handler+0x4b8>
    df3a:	89c8      	ldrh	r0, [r1, #14]
    df3c:	b9f0      	cbnz	r0, df7c <MPSL_IRQ_RADIO_Handler+0x4b8>
    df3e:	6808      	ldr	r0, [r1, #0]
    df40:	9000      	str	r0, [sp, #0]
    df42:	f002 ff3b 	bl	10dbc <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    df46:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    df4a:	bf08      	it	eq
    df4c:	200d      	moveq	r0, #13
    df4e:	d00b      	beq.n	df68 <MPSL_IRQ_RADIO_Handler+0x4a4>
    df50:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    df54:	3856      	subs	r0, #86	; 0x56
    df56:	bf08      	it	eq
    df58:	201c      	moveq	r0, #28
    df5a:	d005      	beq.n	df68 <MPSL_IRQ_RADIO_Handler+0x4a4>
    df5c:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    df60:	389f      	subs	r0, #159	; 0x9f
    df62:	bf14      	ite	ne
    df64:	2000      	movne	r0, #0
    df66:	2032      	moveq	r0, #50	; 0x32
    df68:	1c41      	adds	r1, r0, #1
    df6a:	9800      	ldr	r0, [sp, #0]
    df6c:	1a28      	subs	r0, r5, r0
    df6e:	0200      	lsls	r0, r0, #8
    df70:	17c2      	asrs	r2, r0, #31
    df72:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    df76:	1200      	asrs	r0, r0, #8
    df78:	4288      	cmp	r0, r1
    df7a:	db06      	blt.n	df8a <MPSL_IRQ_RADIO_Handler+0x4c6>
    df7c:	eb0b 0044 	add.w	r0, fp, r4, lsl #1
    df80:	f88a 4000 	strb.w	r4, [sl]
    df84:	7844      	ldrb	r4, [r0, #1]
    df86:	2c20      	cmp	r4, #32
    df88:	d1c6      	bne.n	df18 <MPSL_IRQ_RADIO_Handler+0x454>
    df8a:	f89a 0000 	ldrb.w	r0, [sl]
    df8e:	f889 0000 	strb.w	r0, [r9]
    df92:	2c20      	cmp	r4, #32
    df94:	bf1c      	itt	ne
    df96:	4825      	ldrne	r0, [pc, #148]	; (e02c <MPSL_IRQ_RADIO_Handler+0x568>)
    df98:	eb00 1a87 	addne.w	sl, r0, r7, lsl #6
    df9c:	d040      	beq.n	e020 <MPSL_IRQ_RADIO_Handler+0x55c>
    df9e:	bf00      	nop
    dfa0:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
    dfa4:	eb08 0780 	add.w	r7, r8, r0, lsl #2
    dfa8:	6870      	ldr	r0, [r6, #4]
    dfaa:	68bd      	ldr	r5, [r7, #8]
    dfac:	f107 0108 	add.w	r1, r7, #8
    dfb0:	1a28      	subs	r0, r5, r0
    dfb2:	0200      	lsls	r0, r0, #8
    dfb4:	17c2      	asrs	r2, r0, #31
    dfb6:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    dfba:	1200      	asrs	r0, r0, #8
    dfbc:	d422      	bmi.n	e004 <MPSL_IRQ_RADIO_Handler+0x540>
    dfbe:	89c8      	ldrh	r0, [r1, #14]
    dfc0:	b370      	cbz	r0, e020 <MPSL_IRQ_RADIO_Handler+0x55c>
    dfc2:	89f0      	ldrh	r0, [r6, #14]
    dfc4:	bb60      	cbnz	r0, e020 <MPSL_IRQ_RADIO_Handler+0x55c>
    dfc6:	f8d6 b000 	ldr.w	fp, [r6]
    dfca:	f002 fef7 	bl	10dbc <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    dfce:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    dfd2:	bf08      	it	eq
    dfd4:	200d      	moveq	r0, #13
    dfd6:	d00b      	beq.n	dff0 <MPSL_IRQ_RADIO_Handler+0x52c>
    dfd8:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    dfdc:	3856      	subs	r0, #86	; 0x56
    dfde:	bf08      	it	eq
    dfe0:	201c      	moveq	r0, #28
    dfe2:	d005      	beq.n	dff0 <MPSL_IRQ_RADIO_Handler+0x52c>
    dfe4:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    dfe8:	389f      	subs	r0, #159	; 0x9f
    dfea:	bf14      	ite	ne
    dfec:	2000      	movne	r0, #0
    dfee:	2032      	moveq	r0, #50	; 0x32
    dff0:	1c41      	adds	r1, r0, #1
    dff2:	eba5 000b 	sub.w	r0, r5, fp
    dff6:	0200      	lsls	r0, r0, #8
    dff8:	17c2      	asrs	r2, r0, #31
    dffa:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    dffe:	1200      	asrs	r0, r0, #8
    e000:	4288      	cmp	r0, r1
    e002:	da0d      	bge.n	e020 <MPSL_IRQ_RADIO_Handler+0x55c>
    e004:	f889 4000 	strb.w	r4, [r9]
    e008:	7e38      	ldrb	r0, [r7, #24]
    e00a:	7c31      	ldrb	r1, [r6, #16]
    e00c:	4288      	cmp	r0, r1
    e00e:	d802      	bhi.n	e016 <MPSL_IRQ_RADIO_Handler+0x552>
    e010:	2000      	movs	r0, #0
    e012:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e016:	eb0a 0044 	add.w	r0, sl, r4, lsl #1
    e01a:	7844      	ldrb	r4, [r0, #1]
    e01c:	2c20      	cmp	r4, #32
    e01e:	d1bf      	bne.n	dfa0 <MPSL_IRQ_RADIO_Handler+0x4dc>
    e020:	2001      	movs	r0, #1
    e022:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e026:	0000      	.short	0x0000
    e028:	2000143c 	.word	0x2000143c
    e02c:	200013bc 	.word	0x200013bc
    e030:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e034:	b098      	sub	sp, #96	; 0x60
    e036:	4615      	mov	r5, r2
    e038:	468b      	mov	fp, r1
    e03a:	f002 fa59 	bl	104f0 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>
    e03e:	4604      	mov	r4, r0
    e040:	f002 fcee 	bl	10a20 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
    e044:	4606      	mov	r6, r0
    e046:	f1bb 0f01 	cmp.w	fp, #1
    e04a:	bf18      	it	ne
    e04c:	f1bb 0f02 	cmpne.w	fp, #2
    e050:	d005      	beq.n	e05e <MPSL_IRQ_RADIO_Handler+0x59a>
    e052:	f640 1192 	movw	r1, #2450	; 0x992
    e056:	f04f 0070 	mov.w	r0, #112	; 0x70
    e05a:	f003 f859 	bl	11110 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    e05e:	49ff      	ldr	r1, [pc, #1020]	; (e45c <MPSL_IRQ_RADIO_Handler+0x998>)
    e060:	2001      	movs	r0, #1
    e062:	6008      	str	r0, [r1, #0]
    e064:	49fe      	ldr	r1, [pc, #1016]	; (e460 <MPSL_IRQ_RADIO_Handler+0x99c>)
    e066:	6889      	ldr	r1, [r1, #8]
    e068:	6008      	str	r0, [r1, #0]
    e06a:	2000      	movs	r0, #0
    e06c:	f88d 0056 	strb.w	r0, [sp, #86]	; 0x56
    e070:	900e      	str	r0, [sp, #56]	; 0x38
    e072:	1e40      	subs	r0, r0, #1
    e074:	900f      	str	r0, [sp, #60]	; 0x3c
    e076:	49fb      	ldr	r1, [pc, #1004]	; (e464 <MPSL_IRQ_RADIO_Handler+0x9a0>)
    e078:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
    e07c:	eb01 0180 	add.w	r1, r1, r0, lsl #2
    e080:	e9d1 0c02 	ldrd	r0, ip, [r1, #8]
    e084:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
    e088:	e9cd 0c10 	strd	r0, ip, [sp, #64]	; 0x40
    e08c:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
    e090:	6989      	ldr	r1, [r1, #24]
    e092:	9114      	str	r1, [sp, #80]	; 0x50
    e094:	f010 fa87 	bl	1e5a6 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    e098:	4601      	mov	r1, r0
    e09a:	f8bd 804e 	ldrh.w	r8, [sp, #78]	; 0x4e
    e09e:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
    e0a2:	4bf1      	ldr	r3, [pc, #964]	; (e468 <MPSL_IRQ_RADIO_Handler+0x9a4>)
    e0a4:	4440      	add	r0, r8
    e0a6:	1c42      	adds	r2, r0, #1
    e0a8:	1888      	adds	r0, r1, r2
    e0aa:	4299      	cmp	r1, r3
    e0ac:	d84f      	bhi.n	e14e <MPSL_IRQ_RADIO_Handler+0x68a>
    e0ae:	4def      	ldr	r5, [pc, #956]	; (e46c <MPSL_IRQ_RADIO_Handler+0x9a8>)
    e0b0:	42aa      	cmp	r2, r5
    e0b2:	dc53      	bgt.n	e15c <MPSL_IRQ_RADIO_Handler+0x698>
    e0b4:	4269      	negs	r1, r5
    e0b6:	428a      	cmp	r2, r1
    e0b8:	db58      	blt.n	e16c <MPSL_IRQ_RADIO_Handler+0x6a8>
    e0ba:	1c59      	adds	r1, r3, #1
    e0bc:	4281      	cmp	r1, r0
    e0be:	bfdc      	itt	le
    e0c0:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    e0c4:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    e0c8:	dd05      	ble.n	e0d6 <MPSL_IRQ_RADIO_Handler+0x612>
    e0ca:	2800      	cmp	r0, #0
    e0cc:	bfbc      	itt	lt
    e0ce:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    e0d2:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    e0d6:	900c      	str	r0, [sp, #48]	; 0x30
    e0d8:	48e5      	ldr	r0, [pc, #916]	; (e470 <MPSL_IRQ_RADIO_Handler+0x9ac>)
    e0da:	f1b8 0f00 	cmp.w	r8, #0
    e0de:	8b80      	ldrh	r0, [r0, #28]
    e0e0:	f8ad 0054 	strh.w	r0, [sp, #84]	; 0x54
    e0e4:	bf04      	itt	eq
    e0e6:	2000      	moveq	r0, #0
    e0e8:	900b      	streq	r0, [sp, #44]	; 0x2c
    e0ea:	d00b      	beq.n	e104 <MPSL_IRQ_RADIO_Handler+0x640>
    e0ec:	2001      	movs	r0, #1
    e0ee:	900b      	str	r0, [sp, #44]	; 0x2c
    e0f0:	48df      	ldr	r0, [pc, #892]	; (e470 <MPSL_IRQ_RADIO_Handler+0x9ac>)
    e0f2:	f890 002a 	ldrb.w	r0, [r0, #42]	; 0x2a
    e0f6:	b928      	cbnz	r0, e104 <MPSL_IRQ_RADIO_Handler+0x640>
    e0f8:	f002 ff92 	bl	11020 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    e0fc:	2800      	cmp	r0, #0
    e0fe:	bf08      	it	eq
    e100:	2701      	moveq	r7, #1
    e102:	d000      	beq.n	e106 <MPSL_IRQ_RADIO_Handler+0x642>
    e104:	2700      	movs	r7, #0
    e106:	f002 fe59 	bl	10dbc <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    e10a:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    e10e:	bf08      	it	eq
    e110:	200d      	moveq	r0, #13
    e112:	d00b      	beq.n	e12c <MPSL_IRQ_RADIO_Handler+0x668>
    e114:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    e118:	3856      	subs	r0, #86	; 0x56
    e11a:	bf08      	it	eq
    e11c:	201c      	moveq	r0, #28
    e11e:	d005      	beq.n	e12c <MPSL_IRQ_RADIO_Handler+0x668>
    e120:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    e124:	389f      	subs	r0, #159	; 0x9f
    e126:	bf14      	ite	ne
    e128:	2000      	movne	r0, #0
    e12a:	2032      	moveq	r0, #50	; 0x32
    e12c:	f04f 0900 	mov.w	r9, #0
    e130:	46ca      	mov	sl, r9
    e132:	9009      	str	r0, [sp, #36]	; 0x24
    e134:	4546      	cmp	r6, r8
    e136:	d937      	bls.n	e1a8 <MPSL_IRQ_RADIO_Handler+0x6e4>
    e138:	990c      	ldr	r1, [sp, #48]	; 0x30
    e13a:	f8df 932c 	ldr.w	r9, [pc, #812]	; e468 <MPSL_IRQ_RADIO_Handler+0x9a4>
    e13e:	ea6f 0c06 	mvn.w	ip, r6
    e142:	466b      	mov	r3, sp
    e144:	aa16      	add	r2, sp, #88	; 0x58
    e146:	eb01 000c 	add.w	r0, r1, ip
    e14a:	4549      	cmp	r1, r9
    e14c:	d904      	bls.n	e158 <MPSL_IRQ_RADIO_Handler+0x694>
    e14e:	f240 519e 	movw	r1, #1438	; 0x59e
    e152:	2070      	movs	r0, #112	; 0x70
    e154:	f002 ffdc 	bl	11110 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    e158:	45ac      	cmp	ip, r5
    e15a:	dd04      	ble.n	e166 <MPSL_IRQ_RADIO_Handler+0x6a2>
    e15c:	f240 519f 	movw	r1, #1439	; 0x59f
    e160:	2070      	movs	r0, #112	; 0x70
    e162:	f002 ffd5 	bl	11110 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    e166:	49c3      	ldr	r1, [pc, #780]	; (e474 <MPSL_IRQ_RADIO_Handler+0x9b0>)
    e168:	458c      	cmp	ip, r1
    e16a:	da04      	bge.n	e176 <MPSL_IRQ_RADIO_Handler+0x6b2>
    e16c:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
    e170:	2070      	movs	r0, #112	; 0x70
    e172:	f002 ffcd 	bl	11110 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    e176:	49c0      	ldr	r1, [pc, #768]	; (e478 <MPSL_IRQ_RADIO_Handler+0x9b4>)
    e178:	4281      	cmp	r1, r0
    e17a:	bfdc      	itt	le
    e17c:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    e180:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    e184:	dd05      	ble.n	e192 <MPSL_IRQ_RADIO_Handler+0x6ce>
    e186:	2800      	cmp	r0, #0
    e188:	bfbc      	itt	lt
    e18a:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    e18e:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    e192:	4619      	mov	r1, r3
    e194:	f001 ff1a 	bl	ffcc <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    e198:	9800      	ldr	r0, [sp, #0]
    e19a:	9910      	ldr	r1, [sp, #64]	; 0x40
    e19c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    e1a0:	9000      	str	r0, [sp, #0]
    e1a2:	1a08      	subs	r0, r1, r0
    e1a4:	f020 497f 	bic.w	r9, r0, #4278190080	; 0xff000000
    e1a8:	2f00      	cmp	r7, #0
    e1aa:	bf18      	it	ne
    e1ac:	f8dd a024 	ldrne.w	sl, [sp, #36]	; 0x24
    e1b0:	d105      	bne.n	e1be <MPSL_IRQ_RADIO_Handler+0x6fa>
    e1b2:	f89d 0054 	ldrb.w	r0, [sp, #84]	; 0x54
    e1b6:	2800      	cmp	r0, #0
    e1b8:	bf18      	it	ne
    e1ba:	f04f 0a02 	movne.w	sl, #2
    e1be:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    e1c2:	d008      	beq.n	e1d6 <MPSL_IRQ_RADIO_Handler+0x712>
    e1c4:	9810      	ldr	r0, [sp, #64]	; 0x40
    e1c6:	1b00      	subs	r0, r0, r4
    e1c8:	0200      	lsls	r0, r0, #8
    e1ca:	17c1      	asrs	r1, r0, #31
    e1cc:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    e1d0:	1200      	asrs	r0, r0, #8
    e1d2:	2801      	cmp	r0, #1
    e1d4:	da02      	bge.n	e1dc <MPSL_IRQ_RADIO_Handler+0x718>
    e1d6:	2003      	movs	r0, #3
    e1d8:	9d18      	ldr	r5, [sp, #96]	; 0x60
    e1da:	e00d      	b.n	e1f8 <MPSL_IRQ_RADIO_Handler+0x734>
    e1dc:	b157      	cbz	r7, e1f4 <MPSL_IRQ_RADIO_Handler+0x730>
    e1de:	48a4      	ldr	r0, [pc, #656]	; (e470 <MPSL_IRQ_RADIO_Handler+0x9ac>)
    e1e0:	f890 002b 	ldrb.w	r0, [r0, #43]	; 0x2b
    e1e4:	b130      	cbz	r0, e1f4 <MPSL_IRQ_RADIO_Handler+0x730>
    e1e6:	f89d 0054 	ldrb.w	r0, [sp, #84]	; 0x54
    e1ea:	f110 0a00 	adds.w	sl, r0, #0
    e1ee:	bf18      	it	ne
    e1f0:	f04f 0a02 	movne.w	sl, #2
    e1f4:	4625      	mov	r5, r4
    e1f6:	2000      	movs	r0, #0
    e1f8:	4482      	add	sl, r0
    e1fa:	9810      	ldr	r0, [sp, #64]	; 0x40
    e1fc:	eba0 0009 	sub.w	r0, r0, r9
    e200:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
    e204:	1e50      	subs	r0, r2, #1
    e206:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    e20a:	1b41      	subs	r1, r0, r5
    e20c:	0209      	lsls	r1, r1, #8
    e20e:	17cb      	asrs	r3, r1, #31
    e210:	eb01 6113 	add.w	r1, r1, r3, lsr #24
    e214:	1209      	asrs	r1, r1, #8
    e216:	4551      	cmp	r1, sl
    e218:	db04      	blt.n	e224 <MPSL_IRQ_RADIO_Handler+0x760>
    e21a:	f1b9 0f00 	cmp.w	r9, #0
    e21e:	bf18      	it	ne
    e220:	9210      	strne	r2, [sp, #64]	; 0x40
    e222:	e02d      	b.n	e280 <MPSL_IRQ_RADIO_Handler+0x7bc>
    e224:	f1b9 0f00 	cmp.w	r9, #0
    e228:	d005      	beq.n	e236 <MPSL_IRQ_RADIO_Handler+0x772>
    e22a:	f89d 0055 	ldrb.w	r0, [sp, #85]	; 0x55
    e22e:	b920      	cbnz	r0, e23a <MPSL_IRQ_RADIO_Handler+0x776>
    e230:	f002 fbec 	bl	10a0c <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI>
    e234:	b108      	cbz	r0, e23a <MPSL_IRQ_RADIO_Handler+0x776>
    e236:	b9af      	cbnz	r7, e264 <MPSL_IRQ_RADIO_Handler+0x7a0>
    e238:	e00c      	b.n	e254 <MPSL_IRQ_RADIO_Handler+0x790>
    e23a:	b92f      	cbnz	r7, e248 <MPSL_IRQ_RADIO_Handler+0x784>
    e23c:	f89d 0054 	ldrb.w	r0, [sp, #84]	; 0x54
    e240:	2800      	cmp	r0, #0
    e242:	bf18      	it	ne
    e244:	f1aa 0a02 	subne.w	sl, sl, #2
    e248:	f04f 0900 	mov.w	r9, #0
    e24c:	f88d 9054 	strb.w	r9, [sp, #84]	; 0x54
    e250:	464e      	mov	r6, r9
    e252:	e007      	b.n	e264 <MPSL_IRQ_RADIO_Handler+0x7a0>
    e254:	f89d 0054 	ldrb.w	r0, [sp, #84]	; 0x54
    e258:	b120      	cbz	r0, e264 <MPSL_IRQ_RADIO_Handler+0x7a0>
    e25a:	2000      	movs	r0, #0
    e25c:	f88d 0054 	strb.w	r0, [sp, #84]	; 0x54
    e260:	f1aa 0a02 	sub.w	sl, sl, #2
    e264:	9810      	ldr	r0, [sp, #64]	; 0x40
    e266:	eba0 0009 	sub.w	r0, r0, r9
    e26a:	1e40      	subs	r0, r0, #1
    e26c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    e270:	1b41      	subs	r1, r0, r5
    e272:	0209      	lsls	r1, r1, #8
    e274:	17ca      	asrs	r2, r1, #31
    e276:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    e27a:	1209      	asrs	r1, r1, #8
    e27c:	4551      	cmp	r1, sl
    e27e:	db7c      	blt.n	e37a <MPSL_IRQ_RADIO_Handler+0x8b6>
    e280:	970a      	str	r7, [sp, #40]	; 0x28
    e282:	4605      	mov	r5, r0
    e284:	f04f 0900 	mov.w	r9, #0
    e288:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    e28a:	f002 f809 	bl	102a0 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    e28e:	1a28      	subs	r0, r5, r0
    e290:	0200      	lsls	r0, r0, #8
    e292:	17c1      	asrs	r1, r0, #31
    e294:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    e298:	ea4f 2a20 	mov.w	sl, r0, asr #8
    e29c:	f002 fd8e 	bl	10dbc <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    e2a0:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    e2a4:	bf08      	it	eq
    e2a6:	200d      	moveq	r0, #13
    e2a8:	d00b      	beq.n	e2c2 <MPSL_IRQ_RADIO_Handler+0x7fe>
    e2aa:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    e2ae:	3856      	subs	r0, #86	; 0x56
    e2b0:	bf08      	it	eq
    e2b2:	201c      	moveq	r0, #28
    e2b4:	d005      	beq.n	e2c2 <MPSL_IRQ_RADIO_Handler+0x7fe>
    e2b6:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    e2ba:	389f      	subs	r0, #159	; 0x9f
    e2bc:	bf14      	ite	ne
    e2be:	2000      	movne	r0, #0
    e2c0:	2032      	moveq	r0, #50	; 0x32
    e2c2:	300b      	adds	r0, #11
    e2c4:	4582      	cmp	sl, r0
    e2c6:	da20      	bge.n	e30a <MPSL_IRQ_RADIO_Handler+0x846>
    e2c8:	f1bb 0f01 	cmp.w	fp, #1
    e2cc:	d002      	beq.n	e2d4 <MPSL_IRQ_RADIO_Handler+0x810>
    e2ce:	980a      	ldr	r0, [sp, #40]	; 0x28
    e2d0:	b140      	cbz	r0, e2e4 <MPSL_IRQ_RADIO_Handler+0x820>
    e2d2:	e012      	b.n	e2fa <MPSL_IRQ_RADIO_Handler+0x836>
    e2d4:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    e2d8:	d11c      	bne.n	e314 <MPSL_IRQ_RADIO_Handler+0x850>
    e2da:	f640 1113 	movw	r1, #2323	; 0x913
    e2de:	2070      	movs	r0, #112	; 0x70
    e2e0:	f002 ff16 	bl	11110 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    e2e4:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    e2e8:	d007      	beq.n	e2fa <MPSL_IRQ_RADIO_Handler+0x836>
    e2ea:	1b60      	subs	r0, r4, r5
    e2ec:	0200      	lsls	r0, r0, #8
    e2ee:	17c1      	asrs	r1, r0, #31
    e2f0:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    e2f4:	1200      	asrs	r0, r0, #8
    e2f6:	2804      	cmp	r0, #4
    e2f8:	dd04      	ble.n	e304 <MPSL_IRQ_RADIO_Handler+0x840>
    e2fa:	462c      	mov	r4, r5
    e2fc:	4620      	mov	r0, r4
    e2fe:	f001 fff5 	bl	102ec <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    e302:	e007      	b.n	e314 <MPSL_IRQ_RADIO_Handler+0x850>
    e304:	2800      	cmp	r0, #0
    e306:	dc64      	bgt.n	e3d2 <MPSL_IRQ_RADIO_Handler+0x90e>
    e308:	e004      	b.n	e314 <MPSL_IRQ_RADIO_Handler+0x850>
    e30a:	462c      	mov	r4, r5
    e30c:	4620      	mov	r0, r4
    e30e:	f001 ffed 	bl	102ec <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    e312:	46b9      	mov	r9, r7
    e314:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    e318:	d056      	beq.n	e3c8 <MPSL_IRQ_RADIO_Handler+0x904>
    e31a:	9810      	ldr	r0, [sp, #64]	; 0x40
    e31c:	9a11      	ldr	r2, [sp, #68]	; 0x44
    e31e:	1b00      	subs	r0, r0, r4
    e320:	1b12      	subs	r2, r2, r4
    e322:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    e326:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    e32a:	2801      	cmp	r0, #1
    e32c:	d351      	bcc.n	e3d2 <MPSL_IRQ_RADIO_Handler+0x90e>
    e32e:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    e332:	bf98      	it	ls
    e334:	f5b2 0f00 	cmpls.w	r2, #8388608	; 0x800000
    e338:	d84b      	bhi.n	e3d2 <MPSL_IRQ_RADIO_Handler+0x90e>
    e33a:	4620      	mov	r0, r4
    e33c:	f010 f933 	bl	1e5a6 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    e340:	990c      	ldr	r1, [sp, #48]	; 0x30
    e342:	4a4a      	ldr	r2, [pc, #296]	; (e46c <MPSL_IRQ_RADIO_Handler+0x9a8>)
    e344:	1a0d      	subs	r5, r1, r0
    e346:	f04f 0a00 	mov.w	sl, #0
    e34a:	1aaa      	subs	r2, r5, r2
    e34c:	f17a 0200 	sbcs.w	r2, sl, #0
    e350:	d318      	bcc.n	e384 <MPSL_IRQ_RADIO_Handler+0x8c0>
    e352:	4b46      	ldr	r3, [pc, #280]	; (e46c <MPSL_IRQ_RADIO_Handler+0x9a8>)
    e354:	1a42      	subs	r2, r0, r1
    e356:	1ad3      	subs	r3, r2, r3
    e358:	f17a 0300 	sbcs.w	r3, sl, #0
    e35c:	d312      	bcc.n	e384 <MPSL_IRQ_RADIO_Handler+0x8c0>
    e35e:	4b42      	ldr	r3, [pc, #264]	; (e468 <MPSL_IRQ_RADIO_Handler+0x9a4>)
    e360:	42ab      	cmp	r3, r5
    e362:	bf3e      	ittt	cc
    e364:	f5c0 2090 	rsbcc	r0, r0, #294912	; 0x48000
    e368:	f100 50f4 	addcc.w	r0, r0, #511705088	; 0x1e800000
    e36c:	1845      	addcc	r5, r0, r1
    e36e:	d309      	bcc.n	e384 <MPSL_IRQ_RADIO_Handler+0x8c0>
    e370:	4293      	cmp	r3, r2
    e372:	d232      	bcs.n	e3da <MPSL_IRQ_RADIO_Handler+0x916>
    e374:	f5c1 2190 	rsb	r1, r1, #294912	; 0x48000
    e378:	e000      	b.n	e37c <MPSL_IRQ_RADIO_Handler+0x8b8>
    e37a:	e02a      	b.n	e3d2 <MPSL_IRQ_RADIO_Handler+0x90e>
    e37c:	f101 51f4 	add.w	r1, r1, #511705088	; 0x1e800000
    e380:	4408      	add	r0, r1
    e382:	4245      	negs	r5, r0
    e384:	4f3a      	ldr	r7, [pc, #232]	; (e470 <MPSL_IRQ_RADIO_Handler+0x9ac>)
    e386:	7fb8      	ldrb	r0, [r7, #30]
    e388:	b360      	cbz	r0, e3e4 <MPSL_IRQ_RADIO_Handler+0x920>
    e38a:	bf00      	nop
    e38c:	f1bb 0f01 	cmp.w	fp, #1
    e390:	d005      	beq.n	e39e <MPSL_IRQ_RADIO_Handler+0x8da>
    e392:	2002      	movs	r0, #2
    e394:	f002 f9e6 	bl	10764 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    e398:	2001      	movs	r0, #1
    e39a:	f002 f9e3 	bl	10764 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    e39e:	45b0      	cmp	r8, r6
    e3a0:	d22c      	bcs.n	e3fc <MPSL_IRQ_RADIO_Handler+0x938>
    e3a2:	eba5 0106 	sub.w	r1, r5, r6
    e3a6:	f04f 0002 	mov.w	r0, #2
    e3aa:	f002 f925 	bl	105f8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    e3ae:	b390      	cbz	r0, e416 <MPSL_IRQ_RADIO_Handler+0x952>
    e3b0:	f1b8 0f00 	cmp.w	r8, #0
    e3b4:	bf1c      	itt	ne
    e3b6:	eba5 0108 	subne.w	r1, r5, r8
    e3ba:	2001      	movne	r0, #1
    e3bc:	d034      	beq.n	e428 <MPSL_IRQ_RADIO_Handler+0x964>
    e3be:	bf00      	nop
    e3c0:	f002 f91a 	bl	105f8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    e3c4:	b338      	cbz	r0, e416 <MPSL_IRQ_RADIO_Handler+0x952>
    e3c6:	e02f      	b.n	e428 <MPSL_IRQ_RADIO_Handler+0x964>
    e3c8:	f640 2126 	movw	r1, #2598	; 0xa26
    e3cc:	2070      	movs	r0, #112	; 0x70
    e3ce:	f002 fe9f 	bl	11110 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    e3d2:	b01b      	add	sp, #108	; 0x6c
    e3d4:	2000      	movs	r0, #0
    e3d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e3da:	f640 21fa 	movw	r1, #2810	; 0xafa
    e3de:	2070      	movs	r0, #112	; 0x70
    e3e0:	f002 fe96 	bl	11110 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    e3e4:	45b0      	cmp	r8, r6
    e3e6:	bf34      	ite	cc
    e3e8:	4630      	movcc	r0, r6
    e3ea:	4640      	movcs	r0, r8
    e3ec:	301e      	adds	r0, #30
    e3ee:	42a8      	cmp	r0, r5
    e3f0:	dbcc      	blt.n	e38c <MPSL_IRQ_RADIO_Handler+0x8c8>
    e3f2:	f640 213a 	movw	r1, #2618	; 0xa3a
    e3f6:	2070      	movs	r0, #112	; 0x70
    e3f8:	f002 fe8a 	bl	11110 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    e3fc:	d90c      	bls.n	e418 <MPSL_IRQ_RADIO_Handler+0x954>
    e3fe:	eba5 0108 	sub.w	r1, r5, r8
    e402:	2001      	movs	r0, #1
    e404:	f002 f8f8 	bl	105f8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    e408:	b128      	cbz	r0, e416 <MPSL_IRQ_RADIO_Handler+0x952>
    e40a:	2e00      	cmp	r6, #0
    e40c:	bf1c      	itt	ne
    e40e:	1ba9      	subne	r1, r5, r6
    e410:	2002      	movne	r0, #2
    e412:	d009      	beq.n	e428 <MPSL_IRQ_RADIO_Handler+0x964>
    e414:	e7d4      	b.n	e3c0 <MPSL_IRQ_RADIO_Handler+0x8fc>
    e416:	e041      	b.n	e49c <MPSL_IRQ_RADIO_Handler+0x9d8>
    e418:	ea56 0008 	orrs.w	r0, r6, r8
    e41c:	d004      	beq.n	e428 <MPSL_IRQ_RADIO_Handler+0x964>
    e41e:	f640 1176 	movw	r1, #2422	; 0x976
    e422:	2070      	movs	r0, #112	; 0x70
    e424:	f002 fe74 	bl	11110 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    e428:	4629      	mov	r1, r5
    e42a:	2000      	movs	r0, #0
    e42c:	f002 f8e4 	bl	105f8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    e430:	b3a0      	cbz	r0, e49c <MPSL_IRQ_RADIO_Handler+0x9d8>
    e432:	980b      	ldr	r0, [sp, #44]	; 0x2c
    e434:	2601      	movs	r6, #1
    e436:	2800      	cmp	r0, #0
    e438:	bf04      	itt	eq
    e43a:	f897 002b 	ldrbeq.w	r0, [r7, #43]	; 0x2b
    e43e:	2800      	cmpeq	r0, #0
    e440:	d002      	beq.n	e448 <MPSL_IRQ_RADIO_Handler+0x984>
    e442:	f1b9 0f00 	cmp.w	r9, #0
    e446:	d034      	beq.n	e4b2 <MPSL_IRQ_RADIO_Handler+0x9ee>
    e448:	f897 002a 	ldrb.w	r0, [r7, #42]	; 0x2a
    e44c:	b118      	cbz	r0, e456 <MPSL_IRQ_RADIO_Handler+0x992>
    e44e:	f002 fcbb 	bl	10dc8 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    e452:	f887 a02a 	strb.w	sl, [r7, #42]	; 0x2a
    e456:	f1b9 0f00 	cmp.w	r9, #0
    e45a:	e00f      	b.n	e47c <MPSL_IRQ_RADIO_Handler+0x9b8>
    e45c:	40000508 	.word	0x40000508
    e460:	2000003c 	.word	0x2000003c
    e464:	2000103c 	.word	0x2000103c
    e468:	1e847fff 	.word	0x1e847fff
    e46c:	0f424000 	.word	0x0f424000
    e470:	2000143c 	.word	0x2000143c
    e474:	f0bdc000 	.word	0xf0bdc000
    e478:	1e848000 	.word	0x1e848000
    e47c:	d01c      	beq.n	e4b8 <MPSL_IRQ_RADIO_Handler+0x9f4>
    e47e:	9809      	ldr	r0, [sp, #36]	; 0x24
    e480:	1a20      	subs	r0, r4, r0
    e482:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    e486:	2005      	movs	r0, #5
    e488:	f002 f8b6 	bl	105f8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    e48c:	b360      	cbz	r0, e4e8 <MPSL_IRQ_RADIO_Handler+0xa24>
    e48e:	f897 002b 	ldrb.w	r0, [r7, #43]	; 0x2b
    e492:	2800      	cmp	r0, #0
    e494:	bf08      	it	eq
    e496:	f887 602b 	strbeq.w	r6, [r7, #43]	; 0x2b
    e49a:	e015      	b.n	e4c8 <MPSL_IRQ_RADIO_Handler+0xa04>
    e49c:	e7ff      	b.n	e49e <MPSL_IRQ_RADIO_Handler+0x9da>
    e49e:	2002      	movs	r0, #2
    e4a0:	f002 f960 	bl	10764 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    e4a4:	2001      	movs	r0, #1
    e4a6:	f002 f95d 	bl	10764 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    e4aa:	b01b      	add	sp, #108	; 0x6c
    e4ac:	2000      	movs	r0, #0
    e4ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e4b2:	f897 002a 	ldrb.w	r0, [r7, #42]	; 0x2a
    e4b6:	b190      	cbz	r0, e4de <MPSL_IRQ_RADIO_Handler+0xa1a>
    e4b8:	f897 002b 	ldrb.w	r0, [r7, #43]	; 0x2b
    e4bc:	b120      	cbz	r0, e4c8 <MPSL_IRQ_RADIO_Handler+0xa04>
    e4be:	2005      	movs	r0, #5
    e4c0:	f002 f950 	bl	10764 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    e4c4:	f887 a02b 	strb.w	sl, [r7, #43]	; 0x2b
    e4c8:	eba5 0008 	sub.w	r0, r5, r8
    e4cc:	f1a0 0119 	sub.w	r1, r0, #25
    e4d0:	2900      	cmp	r1, #0
    e4d2:	dc0e      	bgt.n	e4f2 <MPSL_IRQ_RADIO_Handler+0xa2e>
    e4d4:	f640 2163 	movw	r1, #2659	; 0xa63
    e4d8:	2070      	movs	r0, #112	; 0x70
    e4da:	f002 fe19 	bl	11110 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    e4de:	f002 fc8f 	bl	10e00 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    e4e2:	f887 602a 	strb.w	r6, [r7, #42]	; 0x2a
    e4e6:	e7b6      	b.n	e456 <MPSL_IRQ_RADIO_Handler+0x992>
    e4e8:	f44f 713e 	mov.w	r1, #760	; 0x2f8
    e4ec:	2070      	movs	r0, #112	; 0x70
    e4ee:	f002 fe0f 	bl	11110 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    e4f2:	2003      	movs	r0, #3
    e4f4:	f002 f880 	bl	105f8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    e4f8:	b1c0      	cbz	r0, e52c <MPSL_IRQ_RADIO_Handler+0xa68>
    e4fa:	480f      	ldr	r0, [pc, #60]	; (e538 <MPSL_IRQ_RADIO_Handler+0xa74>)
    e4fc:	6880      	ldr	r0, [r0, #8]
    e4fe:	f8c0 a000 	str.w	sl, [r0]
    e502:	480e      	ldr	r0, [pc, #56]	; (e53c <MPSL_IRQ_RADIO_Handler+0xa78>)
    e504:	f8c0 a000 	str.w	sl, [r0]
    e508:	ac0e      	add	r4, sp, #56	; 0x38
    e50a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    e50e:	6038      	str	r0, [r7, #0]
    e510:	6079      	str	r1, [r7, #4]
    e512:	60ba      	str	r2, [r7, #8]
    e514:	60fb      	str	r3, [r7, #12]
    e516:	ac12      	add	r4, sp, #72	; 0x48
    e518:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    e51c:	6138      	str	r0, [r7, #16]
    e51e:	6179      	str	r1, [r7, #20]
    e520:	61ba      	str	r2, [r7, #24]
    e522:	61fb      	str	r3, [r7, #28]
    e524:	b01b      	add	sp, #108	; 0x6c
    e526:	2001      	movs	r0, #1
    e528:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e52c:	f640 216b 	movw	r1, #2667	; 0xa6b
    e530:	2070      	movs	r0, #112	; 0x70
    e532:	f002 fded 	bl	11110 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    e536:	0000      	.short	0x0000
    e538:	2000003c 	.word	0x2000003c
    e53c:	40000508 	.word	0x40000508
    e540:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e544:	4614      	mov	r4, r2
    e546:	460d      	mov	r5, r1
    e548:	f04f 0a00 	mov.w	sl, #0
    e54c:	890a      	ldrh	r2, [r1, #8]
    e54e:	4651      	mov	r1, sl
    e550:	f362 411f 	bfi	r1, r2, #16, #16
    e554:	7aaa      	ldrb	r2, [r5, #10]
    e556:	46d1      	mov	r9, sl
    e558:	f362 0907 	bfi	r9, r2, #0, #8
    e55c:	7aea      	ldrb	r2, [r5, #11]
    e55e:	4606      	mov	r6, r0
    e560:	f362 290f 	bfi	r9, r2, #8, #8
    e564:	782a      	ldrb	r2, [r5, #0]
    e566:	b083      	sub	sp, #12
    e568:	6840      	ldr	r0, [r0, #4]
    e56a:	f8c4 a000 	str.w	sl, [r4]
    e56e:	f362 4917 	bfi	r9, r2, #16, #8
    e572:	f8c4 a004 	str.w	sl, [r4, #4]
    e576:	f8c4 9010 	str.w	r9, [r4, #16]
    e57a:	e9c4 0102 	strd	r0, r1, [r4, #8]
    e57e:	4f9d      	ldr	r7, [pc, #628]	; (e7f4 <MPSL_IRQ_RADIO_Handler+0xd30>)
    e580:	6870      	ldr	r0, [r6, #4]
    e582:	fba0 8907 	umull	r8, r9, r0, r7
    e586:	6830      	ldr	r0, [r6, #0]
    e588:	f010 f80d 	bl	1e5a6 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    e58c:	eb10 0108 	adds.w	r1, r0, r8
    e590:	eb4a 0209 	adc.w	r2, sl, r9
    e594:	7828      	ldrb	r0, [r5, #0]
    e596:	ea4f 0967 	mov.w	r9, r7, asr #1
    e59a:	f1c9 0b00 	rsb	fp, r9, #0
    e59e:	b170      	cbz	r0, e5be <MPSL_IRQ_RADIO_Handler+0xafa>
    e5a0:	89e0      	ldrh	r0, [r4, #14]
    e5a2:	f894 8011 	ldrb.w	r8, [r4, #17]
    e5a6:	43c0      	mvns	r0, r0
    e5a8:	f8d5 a004 	ldr.w	sl, [r5, #4]
    e5ac:	f104 020c 	add.w	r2, r4, #12
    e5b0:	4548      	cmp	r0, r9
    e5b2:	dd7c      	ble.n	e6ae <MPSL_IRQ_RADIO_Handler+0xbea>
    e5b4:	f240 519f 	movw	r1, #1439	; 0x59f
    e5b8:	2070      	movs	r0, #112	; 0x70
    e5ba:	f002 fda9 	bl	11110 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    e5be:	f8df c238 	ldr.w	ip, [pc, #568]	; e7f8 <MPSL_IRQ_RADIO_Handler+0xd34>
    e5c2:	e9d5 0304 	ldrd	r0, r3, [r5, #16]
    e5c6:	eb11 0a0c 	adds.w	sl, r1, ip
    e5ca:	f142 0c00 	adc.w	ip, r2, #0
    e5ce:	ebb0 0a0a 	subs.w	sl, r0, sl
    e5d2:	eb73 0c0c 	sbcs.w	ip, r3, ip
    e5d6:	d272      	bcs.n	e6be <MPSL_IRQ_RADIO_Handler+0xbfa>
    e5d8:	1a41      	subs	r1, r0, r1
    e5da:	eb73 0102 	sbcs.w	r1, r3, r2
    e5de:	d36e      	bcc.n	e6be <MPSL_IRQ_RADIO_Handler+0xbfa>
    e5e0:	ebb0 0608 	subs.w	r6, r0, r8
    e5e4:	42b7      	cmp	r7, r6
    e5e6:	d82b      	bhi.n	e640 <MPSL_IRQ_RADIO_Handler+0xb7c>
    e5e8:	89e0      	ldrh	r0, [r4, #14]
    e5ea:	f1a6 58f4 	sub.w	r8, r6, #511705088	; 0x1e800000
    e5ee:	f5a8 2890 	sub.w	r8, r8, #294912	; 0x48000
    e5f2:	43c1      	mvns	r1, r0
    e5f4:	4a81      	ldr	r2, [pc, #516]	; (e7fc <MPSL_IRQ_RADIO_Handler+0xd38>)
    e5f6:	eb08 0001 	add.w	r0, r8, r1
    e5fa:	4542      	cmp	r2, r8
    e5fc:	d32b      	bcc.n	e656 <MPSL_IRQ_RADIO_Handler+0xb92>
    e5fe:	4549      	cmp	r1, r9
    e600:	dcd8      	bgt.n	e5b4 <MPSL_IRQ_RADIO_Handler+0xaf0>
    e602:	4559      	cmp	r1, fp
    e604:	db66      	blt.n	e6d4 <MPSL_IRQ_RADIO_Handler+0xc10>
    e606:	4287      	cmp	r7, r0
    e608:	bfdc      	itt	le
    e60a:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    e60e:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    e612:	dd05      	ble.n	e620 <MPSL_IRQ_RADIO_Handler+0xb5c>
    e614:	2800      	cmp	r0, #0
    e616:	bfbc      	itt	lt
    e618:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    e61c:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    e620:	466a      	mov	r2, sp
    e622:	a901      	add	r1, sp, #4
    e624:	f001 fcd2 	bl	ffcc <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    e628:	89e0      	ldrh	r0, [r4, #14]
    e62a:	f89d 1000 	ldrb.w	r1, [sp]
    e62e:	1a30      	subs	r0, r6, r0
    e630:	1a40      	subs	r0, r0, r1
    e632:	1e40      	subs	r0, r0, #1
    e634:	42b8      	cmp	r0, r7
    e636:	d302      	bcc.n	e63e <MPSL_IRQ_RADIO_Handler+0xb7a>
    e638:	68a0      	ldr	r0, [r4, #8]
    e63a:	1c40      	adds	r0, r0, #1
    e63c:	60a0      	str	r0, [r4, #8]
    e63e:	4646      	mov	r6, r8
    e640:	89e0      	ldrh	r0, [r4, #14]
    e642:	4b6e      	ldr	r3, [pc, #440]	; (e7fc <MPSL_IRQ_RADIO_Handler+0xd38>)
    e644:	43c1      	mvns	r1, r0
    e646:	686d      	ldr	r5, [r5, #4]
    e648:	f894 8011 	ldrb.w	r8, [r4, #17]
    e64c:	1870      	adds	r0, r6, r1
    e64e:	f104 020c 	add.w	r2, r4, #12
    e652:	429e      	cmp	r6, r3
    e654:	d904      	bls.n	e660 <MPSL_IRQ_RADIO_Handler+0xb9c>
    e656:	f240 519e 	movw	r1, #1438	; 0x59e
    e65a:	2070      	movs	r0, #112	; 0x70
    e65c:	f002 fd58 	bl	11110 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    e660:	4549      	cmp	r1, r9
    e662:	dca7      	bgt.n	e5b4 <MPSL_IRQ_RADIO_Handler+0xaf0>
    e664:	4559      	cmp	r1, fp
    e666:	db35      	blt.n	e6d4 <MPSL_IRQ_RADIO_Handler+0xc10>
    e668:	4287      	cmp	r7, r0
    e66a:	bfdc      	itt	le
    e66c:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    e670:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    e674:	dd05      	ble.n	e682 <MPSL_IRQ_RADIO_Handler+0xbbe>
    e676:	2800      	cmp	r0, #0
    e678:	bfbc      	itt	lt
    e67a:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    e67e:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    e682:	4621      	mov	r1, r4
    e684:	f001 fca2 	bl	ffcc <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    e688:	6820      	ldr	r0, [r4, #0]
    e68a:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    e68e:	1970      	adds	r0, r6, r5
    e690:	1c40      	adds	r0, r0, #1
    e692:	6021      	str	r1, [r4, #0]
    e694:	f1b8 0f00 	cmp.w	r8, #0
    e698:	bf08      	it	eq
    e69a:	307a      	addeq	r0, #122	; 0x7a
    e69c:	d004      	beq.n	e6a8 <MPSL_IRQ_RADIO_Handler+0xbe4>
    e69e:	f1b8 0f01 	cmp.w	r8, #1
    e6a2:	bf08      	it	eq
    e6a4:	3048      	addeq	r0, #72	; 0x48
    e6a6:	d13a      	bne.n	e71e <MPSL_IRQ_RADIO_Handler+0xc5a>
    e6a8:	f001 fc74 	bl	ff94 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    e6ac:	e001      	b.n	e6b2 <MPSL_IRQ_RADIO_Handler+0xbee>
    e6ae:	e00e      	b.n	e6ce <MPSL_IRQ_RADIO_Handler+0xc0a>
    e6b0:	e005      	b.n	e6be <MPSL_IRQ_RADIO_Handler+0xbfa>
    e6b2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    e6b6:	6060      	str	r0, [r4, #4]
    e6b8:	b007      	add	sp, #28
    e6ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e6be:	6830      	ldr	r0, [r6, #0]
    e6c0:	1e40      	subs	r0, r0, #1
    e6c2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    e6c6:	6020      	str	r0, [r4, #0]
    e6c8:	f500 707a 	add.w	r0, r0, #1000	; 0x3e8
    e6cc:	e7f3      	b.n	e6b6 <MPSL_IRQ_RADIO_Handler+0xbf2>
    e6ce:	4601      	mov	r1, r0
    e6d0:	4558      	cmp	r0, fp
    e6d2:	da04      	bge.n	e6de <MPSL_IRQ_RADIO_Handler+0xc1a>
    e6d4:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
    e6d8:	2070      	movs	r0, #112	; 0x70
    e6da:	f002 fd19 	bl	11110 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    e6de:	4287      	cmp	r7, r0
    e6e0:	bfdc      	itt	le
    e6e2:	f1a1 50f4 	suble.w	r0, r1, #511705088	; 0x1e800000
    e6e6:	f5a0 2090 	suble.w	r0, r0, #294912	; 0x48000
    e6ea:	dd05      	ble.n	e6f8 <MPSL_IRQ_RADIO_Handler+0xc34>
    e6ec:	2800      	cmp	r0, #0
    e6ee:	bfbc      	itt	lt
    e6f0:	f101 50f4 	addlt.w	r0, r1, #511705088	; 0x1e800000
    e6f4:	f500 2090 	addlt.w	r0, r0, #294912	; 0x48000
    e6f8:	4621      	mov	r1, r4
    e6fa:	f001 fc67 	bl	ffcc <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    e6fe:	6820      	ldr	r0, [r4, #0]
    e700:	f1b8 0f00 	cmp.w	r8, #0
    e704:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    e708:	f10a 0001 	add.w	r0, sl, #1
    e70c:	6021      	str	r1, [r4, #0]
    e70e:	bf08      	it	eq
    e710:	307a      	addeq	r0, #122	; 0x7a
    e712:	d009      	beq.n	e728 <MPSL_IRQ_RADIO_Handler+0xc64>
    e714:	f1b8 0f01 	cmp.w	r8, #1
    e718:	bf08      	it	eq
    e71a:	3048      	addeq	r0, #72	; 0x48
    e71c:	d004      	beq.n	e728 <MPSL_IRQ_RADIO_Handler+0xc64>
    e71e:	f240 6139 	movw	r1, #1593	; 0x639
    e722:	2070      	movs	r0, #112	; 0x70
    e724:	f002 fcf4 	bl	11110 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    e728:	f001 fc34 	bl	ff94 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    e72c:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    e730:	6061      	str	r1, [r4, #4]
    e732:	f8b4 900e 	ldrh.w	r9, [r4, #14]
    e736:	aa01      	add	r2, sp, #4
    e738:	4669      	mov	r1, sp
    e73a:	4648      	mov	r0, r9
    e73c:	6837      	ldr	r7, [r6, #0]
    e73e:	f001 fc45 	bl	ffcc <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    e742:	f002 f96d 	bl	10a20 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
    e746:	f001 fc25 	bl	ff94 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    e74a:	4680      	mov	r8, r0
    e74c:	482c      	ldr	r0, [pc, #176]	; (e800 <MPSL_IRQ_RADIO_Handler+0xd3c>)
    e74e:	f890 102d 	ldrb.w	r1, [r0, #45]	; 0x2d
    e752:	2920      	cmp	r1, #32
    e754:	d02a      	beq.n	e7ac <MPSL_IRQ_RADIO_Handler+0xce8>
    e756:	68c0      	ldr	r0, [r0, #12]
    e758:	1d40      	adds	r0, r0, #5
    e75a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    e75e:	bf00      	nop
    e760:	e9d4 2100 	ldrd	r2, r1, [r4]
    e764:	1a89      	subs	r1, r1, r2
    e766:	4401      	add	r1, r0
    e768:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    e76c:	e9c4 0100 	strd	r0, r1, [r4]
    e770:	6831      	ldr	r1, [r6, #0]
    e772:	4281      	cmp	r1, r0
    e774:	d902      	bls.n	e77c <MPSL_IRQ_RADIO_Handler+0xcb8>
    e776:	68a0      	ldr	r0, [r4, #8]
    e778:	1c40      	adds	r0, r0, #1
    e77a:	60a0      	str	r0, [r4, #8]
    e77c:	6832      	ldr	r2, [r6, #0]
    e77e:	6928      	ldr	r0, [r5, #16]
    e780:	4621      	mov	r1, r4
    e782:	9b06      	ldr	r3, [sp, #24]
    e784:	f7ff f9fa 	bl	db7c <MPSL_IRQ_RADIO_Handler+0xb8>
    e788:	2800      	cmp	r0, #0
    e78a:	bf1c      	itt	ne
    e78c:	b007      	addne	sp, #28
    e78e:	e8bd 8ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e792:	e9d4 1000 	ldrd	r1, r0, [r4]
    e796:	1a40      	subs	r0, r0, r1
    e798:	6831      	ldr	r1, [r6, #0]
    e79a:	6021      	str	r1, [r4, #0]
    e79c:	6831      	ldr	r1, [r6, #0]
    e79e:	4408      	add	r0, r1
    e7a0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    e7a4:	6060      	str	r0, [r4, #4]
    e7a6:	b007      	add	sp, #28
    e7a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e7ac:	3709      	adds	r7, #9
    e7ae:	f1b9 0f00 	cmp.w	r9, #0
    e7b2:	d016      	beq.n	e7e2 <MPSL_IRQ_RADIO_Handler+0xd1e>
    e7b4:	f002 fc34 	bl	11020 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    e7b8:	b998      	cbnz	r0, e7e2 <MPSL_IRQ_RADIO_Handler+0xd1e>
    e7ba:	f002 faff 	bl	10dbc <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    e7be:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    e7c2:	bf08      	it	eq
    e7c4:	200d      	moveq	r0, #13
    e7c6:	d00b      	beq.n	e7e0 <MPSL_IRQ_RADIO_Handler+0xd1c>
    e7c8:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    e7cc:	3856      	subs	r0, #86	; 0x56
    e7ce:	bf08      	it	eq
    e7d0:	201c      	moveq	r0, #28
    e7d2:	d005      	beq.n	e7e0 <MPSL_IRQ_RADIO_Handler+0xd1c>
    e7d4:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    e7d8:	389f      	subs	r0, #159	; 0x9f
    e7da:	bf14      	ite	ne
    e7dc:	2000      	movne	r0, #0
    e7de:	2032      	moveq	r0, #50	; 0x32
    e7e0:	4407      	add	r7, r0
    e7e2:	9800      	ldr	r0, [sp, #0]
    e7e4:	4580      	cmp	r8, r0
    e7e6:	bf84      	itt	hi
    e7e8:	eba8 0000 	subhi.w	r0, r8, r0
    e7ec:	4407      	addhi	r7, r0
    e7ee:	f027 407f 	bic.w	r0, r7, #4278190080	; 0xff000000
    e7f2:	e7b5      	b.n	e760 <MPSL_IRQ_RADIO_Handler+0xc9c>
    e7f4:	1e848000 	.word	0x1e848000
    e7f8:	0f424000 	.word	0x0f424000
    e7fc:	1e847fff 	.word	0x1e847fff
    e800:	2000143c 	.word	0x2000143c
    e804:	b570      	push	{r4, r5, r6, lr}
    e806:	4d1e      	ldr	r5, [pc, #120]	; (e880 <MPSL_IRQ_RADIO_Handler+0xdbc>)
    e808:	f895 002d 	ldrb.w	r0, [r5, #45]	; 0x2d
    e80c:	2820      	cmp	r0, #32
    e80e:	bf18      	it	ne
    e810:	bd70      	popne	{r4, r5, r6, pc}
    e812:	f895 202c 	ldrb.w	r2, [r5, #44]	; 0x2c
    e816:	eb02 0042 	add.w	r0, r2, r2, lsl #1
    e81a:	4428      	add	r0, r5
    e81c:	f890 4020 	ldrb.w	r4, [r0, #32]
    e820:	2c20      	cmp	r4, #32
    e822:	d027      	beq.n	e874 <MPSL_IRQ_RADIO_Handler+0xdb0>
    e824:	4b17      	ldr	r3, [pc, #92]	; (e884 <MPSL_IRQ_RADIO_Handler+0xdc0>)
    e826:	eb03 1182 	add.w	r1, r3, r2, lsl #6
    e82a:	eb01 0144 	add.w	r1, r1, r4, lsl #1
    e82e:	7849      	ldrb	r1, [r1, #1]
    e830:	f880 1020 	strb.w	r1, [r0, #32]
    e834:	20ff      	movs	r0, #255	; 0xff
    e836:	f885 0029 	strb.w	r0, [r5, #41]	; 0x29
    e83a:	f885 402d 	strb.w	r4, [r5, #45]	; 0x2d
    e83e:	4621      	mov	r1, r4
    e840:	2002      	movs	r0, #2
    e842:	f000 f891 	bl	e968 <MPSL_IRQ_RADIO_Handler+0xea4>
    e846:	2000      	movs	r0, #0
    e848:	f885 0028 	strb.w	r0, [r5, #40]	; 0x28
    e84c:	77a8      	strb	r0, [r5, #30]
    e84e:	490e      	ldr	r1, [pc, #56]	; (e888 <MPSL_IRQ_RADIO_Handler+0xdc4>)
    e850:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
    e854:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    e858:	7e00      	ldrb	r0, [r0, #24]
    e85a:	2800      	cmp	r0, #0
    e85c:	bf08      	it	eq
    e85e:	f002 fe73 	bleq	11548 <sym_FLYO2O6PDDEK6WCFFGJRAPCMRB5FFHTEEHI4Z2Q>
    e862:	2000      	movs	r0, #0
    e864:	4909      	ldr	r1, [pc, #36]	; (e88c <MPSL_IRQ_RADIO_Handler+0xdc8>)
    e866:	6849      	ldr	r1, [r1, #4]
    e868:	2900      	cmp	r1, #0
    e86a:	bf08      	it	eq
    e86c:	bd70      	popeq	{r4, r5, r6, pc}
    e86e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    e872:	4708      	bx	r1
    e874:	f240 3132 	movw	r1, #818	; 0x332
    e878:	2070      	movs	r0, #112	; 0x70
    e87a:	f002 fc49 	bl	11110 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    e87e:	0000      	.short	0x0000
    e880:	2000143c 	.word	0x2000143c
    e884:	200013bc 	.word	0x200013bc
    e888:	2000103c 	.word	0x2000103c
    e88c:	2000003c 	.word	0x2000003c
    e890:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    e894:	f8df 80c0 	ldr.w	r8, [pc, #192]	; e958 <MPSL_IRQ_RADIO_Handler+0xe94>
    e898:	f898 502c 	ldrb.w	r5, [r8, #44]	; 0x2c
    e89c:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    e8a0:	4440      	add	r0, r8
    e8a2:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
    e8a6:	2c20      	cmp	r4, #32
    e8a8:	bf08      	it	eq
    e8aa:	e8bd 9ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    e8ae:	f8df b0ac 	ldr.w	fp, [pc, #172]	; e95c <MPSL_IRQ_RADIO_Handler+0xe98>
    e8b2:	f8df a0ac 	ldr.w	sl, [pc, #172]	; e960 <MPSL_IRQ_RADIO_Handler+0xe9c>
    e8b6:	f5aa 7960 	sub.w	r9, sl, #896	; 0x380
    e8ba:	eb0a 1785 	add.w	r7, sl, r5, lsl #6
    e8be:	2607      	movs	r6, #7
    e8c0:	f817 0014 	ldrb.w	r0, [r7, r4, lsl #1]
    e8c4:	2801      	cmp	r0, #1
    e8c6:	d00e      	beq.n	e8e6 <MPSL_IRQ_RADIO_Handler+0xe22>
    e8c8:	2804      	cmp	r0, #4
    e8ca:	bf08      	it	eq
    e8cc:	2602      	moveq	r6, #2
    e8ce:	d00a      	beq.n	e8e6 <MPSL_IRQ_RADIO_Handler+0xe22>
    e8d0:	2805      	cmp	r0, #5
    e8d2:	bf0c      	ite	eq
    e8d4:	2603      	moveq	r6, #3
    e8d6:	2806      	cmpne	r0, #6
    e8d8:	d005      	beq.n	e8e6 <MPSL_IRQ_RADIO_Handler+0xe22>
    e8da:	f640 01dd 	movw	r1, #2269	; 0x8dd
    e8de:	f04f 0070 	mov.w	r0, #112	; 0x70
    e8e2:	f002 fc15 	bl	11110 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    e8e6:	f1bb 0f00 	cmp.w	fp, #0
    e8ea:	bf18      	it	ne
    e8ec:	f3af 8000 	nopne.w
    e8f0:	f3ef 8010 	mrs	r0, PRIMASK
    e8f4:	b672      	cpsid	i
    e8f6:	eb07 0144 	add.w	r1, r7, r4, lsl #1
    e8fa:	784a      	ldrb	r2, [r1, #1]
    e8fc:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    e900:	4441      	add	r1, r8
    e902:	f881 2021 	strb.w	r2, [r1, #33]	; 0x21
    e906:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    e90a:	42a2      	cmp	r2, r4
    e90c:	bf04      	itt	eq
    e90e:	2220      	moveq	r2, #32
    e910:	f881 2022 	strbeq.w	r2, [r1, #34]	; 0x22
    e914:	b1c0      	cbz	r0, e948 <MPSL_IRQ_RADIO_Handler+0xe84>
    e916:	462a      	mov	r2, r5
    e918:	4621      	mov	r1, r4
    e91a:	2001      	movs	r0, #1
    e91c:	f000 f824 	bl	e968 <MPSL_IRQ_RADIO_Handler+0xea4>
    e920:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    e924:	eb09 0081 	add.w	r0, r9, r1, lsl #2
    e928:	f859 2021 	ldr.w	r2, [r9, r1, lsl #2]
    e92c:	6840      	ldr	r0, [r0, #4]
    e92e:	4631      	mov	r1, r6
    e930:	4790      	blx	r2
    e932:	f898 502c 	ldrb.w	r5, [r8, #44]	; 0x2c
    e936:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    e93a:	4440      	add	r0, r8
    e93c:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
    e940:	2c20      	cmp	r4, #32
    e942:	d1ba      	bne.n	e8ba <MPSL_IRQ_RADIO_Handler+0xdf6>
    e944:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    e948:	4806      	ldr	r0, [pc, #24]	; (e964 <MPSL_IRQ_RADIO_Handler+0xea0>)
    e94a:	2800      	cmp	r0, #0
    e94c:	bf18      	it	ne
    e94e:	f3af 8000 	nopne.w
    e952:	b662      	cpsie	i
    e954:	e7df      	b.n	e916 <MPSL_IRQ_RADIO_Handler+0xe52>
    e956:	0000      	.short	0x0000
    e958:	2000143c 	.word	0x2000143c
    e95c:	00000000 	.word	0x00000000
    e960:	200013bc 	.word	0x200013bc
    e964:	00000000 	.word	0x00000000
    e968:	f8df c058 	ldr.w	ip, [pc, #88]	; e9c4 <MPSL_IRQ_RADIO_Handler+0xf00>
    e96c:	b510      	push	{r4, lr}
    e96e:	2300      	movs	r3, #0
    e970:	eb0c 1c82 	add.w	ip, ip, r2, lsl #6
    e974:	2807      	cmp	r0, #7
    e976:	d21f      	bcs.n	e9b8 <MPSL_IRQ_RADIO_Handler+0xef4>
    e978:	e8df f000 	tbb	[pc, r0]
    e97c:	05050505 	.word	0x05050505
    e980:	00040404 	.word	0x00040404
    e984:	2301      	movs	r3, #1
    e986:	f80c 0011 	strb.w	r0, [ip, r1, lsl #1]
    e98a:	2b00      	cmp	r3, #0
    e98c:	bf08      	it	eq
    e98e:	bd10      	popeq	{r4, pc}
    e990:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    e994:	480c      	ldr	r0, [pc, #48]	; (e9c8 <MPSL_IRQ_RADIO_Handler+0xf04>)
    e996:	4402      	add	r2, r0
    e998:	f892 0022 	ldrb.w	r0, [r2, #34]	; 0x22
    e99c:	2820      	cmp	r0, #32
    e99e:	bf0e      	itee	eq
    e9a0:	f882 1021 	strbeq.w	r1, [r2, #33]	; 0x21
    e9a4:	eb0c 0040 	addne.w	r0, ip, r0, lsl #1
    e9a8:	7041      	strbne	r1, [r0, #1]
    e9aa:	2020      	movs	r0, #32
    e9ac:	eb0c 0341 	add.w	r3, ip, r1, lsl #1
    e9b0:	7058      	strb	r0, [r3, #1]
    e9b2:	f882 1022 	strb.w	r1, [r2, #34]	; 0x22
    e9b6:	bd10      	pop	{r4, pc}
    e9b8:	f240 216e 	movw	r1, #622	; 0x26e
    e9bc:	2070      	movs	r0, #112	; 0x70
    e9be:	f002 fba7 	bl	11110 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    e9c2:	0000      	.short	0x0000
    e9c4:	200013bc 	.word	0x200013bc
    e9c8:	2000143c 	.word	0x2000143c
    e9cc:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    e9d0:	460f      	mov	r7, r1
    e9d2:	4680      	mov	r8, r0
    e9d4:	f8df a158 	ldr.w	sl, [pc, #344]	; eb30 <MPSL_IRQ_RADIO_Handler+0x106c>
    e9d8:	eb01 0047 	add.w	r0, r1, r7, lsl #1
    e9dc:	4450      	add	r0, sl
    e9de:	f1b8 0f01 	cmp.w	r8, #1
    e9e2:	f890 4020 	ldrb.w	r4, [r0, #32]
    e9e6:	4625      	mov	r5, r4
    e9e8:	bf18      	it	ne
    e9ea:	f1b8 0f02 	cmpne.w	r8, #2
    e9ee:	d005      	beq.n	e9fc <MPSL_IRQ_RADIO_Handler+0xf38>
    e9f0:	f640 21a1 	movw	r1, #2721	; 0xaa1
    e9f4:	f04f 0070 	mov.w	r0, #112	; 0x70
    e9f8:	f002 fb8a 	bl	11110 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    e9fc:	f04f 0b00 	mov.w	fp, #0
    ea00:	2d20      	cmp	r5, #32
    ea02:	d042      	beq.n	ea8a <MPSL_IRQ_RADIO_Handler+0xfc6>
    ea04:	f89a 001e 	ldrb.w	r0, [sl, #30]
    ea08:	2600      	movs	r6, #0
    ea0a:	2800      	cmp	r0, #0
    ea0c:	bf08      	it	eq
    ea0e:	2602      	moveq	r6, #2
    ea10:	f001 fc46 	bl	102a0 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    ea14:	f8df c11c 	ldr.w	ip, [pc, #284]	; eb34 <MPSL_IRQ_RADIO_Handler+0x1070>
    ea18:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    ea1c:	eb0c 0181 	add.w	r1, ip, r1, lsl #2
    ea20:	688a      	ldr	r2, [r1, #8]
    ea22:	68c9      	ldr	r1, [r1, #12]
    ea24:	1a12      	subs	r2, r2, r0
    ea26:	1a09      	subs	r1, r1, r0
    ea28:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    ea2c:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    ea30:	4296      	cmp	r6, r2
    ea32:	bf99      	ittee	ls
    ea34:	f5b2 0f00 	cmpls.w	r2, #8388608	; 0x800000
    ea38:	f5b1 0f00 	cmpls.w	r1, #8388608	; 0x800000
    ea3c:	4a3e      	ldrhi	r2, [pc, #248]	; (eb38 <MPSL_IRQ_RADIO_Handler+0x1074>)
    ea3e:	eb02 1987 	addhi.w	r9, r2, r7, lsl #6
    ea42:	d920      	bls.n	ea86 <MPSL_IRQ_RADIO_Handler+0xfc2>
    ea44:	4622      	mov	r2, r4
    ea46:	eb09 0142 	add.w	r1, r9, r2, lsl #1
    ea4a:	784c      	ldrb	r4, [r1, #1]
    ea4c:	2c20      	cmp	r4, #32
    ea4e:	d012      	beq.n	ea76 <MPSL_IRQ_RADIO_Handler+0xfb2>
    ea50:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    ea54:	eb0c 0181 	add.w	r1, ip, r1, lsl #2
    ea58:	688b      	ldr	r3, [r1, #8]
    ea5a:	68c9      	ldr	r1, [r1, #12]
    ea5c:	1a1b      	subs	r3, r3, r0
    ea5e:	1a09      	subs	r1, r1, r0
    ea60:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    ea64:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    ea68:	429e      	cmp	r6, r3
    ea6a:	bf9c      	itt	ls
    ea6c:	f5b3 0f00 	cmpls.w	r3, #8388608	; 0x800000
    ea70:	f5b1 0f00 	cmpls.w	r1, #8388608	; 0x800000
    ea74:	d8e6      	bhi.n	ea44 <MPSL_IRQ_RADIO_Handler+0xf80>
    ea76:	2a20      	cmp	r2, #32
    ea78:	d005      	beq.n	ea86 <MPSL_IRQ_RADIO_Handler+0xfc2>
    ea7a:	463b      	mov	r3, r7
    ea7c:	2120      	movs	r1, #32
    ea7e:	2004      	movs	r0, #4
    ea80:	f7ff f840 	bl	db04 <MPSL_IRQ_RADIO_Handler+0x40>
    ea84:	4604      	mov	r4, r0
    ea86:	42ac      	cmp	r4, r5
    ea88:	d116      	bne.n	eab8 <MPSL_IRQ_RADIO_Handler+0xff4>
    ea8a:	482c      	ldr	r0, [pc, #176]	; (eb3c <MPSL_IRQ_RADIO_Handler+0x1078>)
    ea8c:	2800      	cmp	r0, #0
    ea8e:	bf18      	it	ne
    ea90:	f3af 8000 	nopne.w
    ea94:	f001 fc04 	bl	102a0 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    ea98:	4603      	mov	r3, r0
    ea9a:	f89a 002e 	ldrb.w	r0, [sl, #46]	; 0x2e
    ea9e:	2820      	cmp	r0, #32
    eaa0:	d00d      	beq.n	eabe <MPSL_IRQ_RADIO_Handler+0xffa>
    eaa2:	f8da 0008 	ldr.w	r0, [sl, #8]
    eaa6:	1c99      	adds	r1, r3, #2
    eaa8:	1a08      	subs	r0, r1, r0
    eaaa:	0200      	lsls	r0, r0, #8
    eaac:	17c1      	asrs	r1, r0, #31
    eaae:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    eab2:	1200      	asrs	r0, r0, #8
    eab4:	2800      	cmp	r0, #0
    eab6:	dd02      	ble.n	eabe <MPSL_IRQ_RADIO_Handler+0xffa>
    eab8:	2000      	movs	r0, #0
    eaba:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    eabe:	2d20      	cmp	r5, #32
    eac0:	d014      	beq.n	eaec <MPSL_IRQ_RADIO_Handler+0x1028>
    eac2:	462a      	mov	r2, r5
    eac4:	4641      	mov	r1, r8
    eac6:	4618      	mov	r0, r3
    eac8:	f7ff fab2 	bl	e030 <MPSL_IRQ_RADIO_Handler+0x56c>
    eacc:	2800      	cmp	r0, #0
    eace:	bf1e      	ittt	ne
    ead0:	f88a 502e 	strbne.w	r5, [sl, #46]	; 0x2e
    ead4:	2002      	movne	r0, #2
    ead6:	e8bd 9ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    eada:	463b      	mov	r3, r7
    eadc:	462a      	mov	r2, r5
    eade:	2120      	movs	r1, #32
    eae0:	2004      	movs	r0, #4
    eae2:	f7ff f80f 	bl	db04 <MPSL_IRQ_RADIO_Handler+0x40>
    eae6:	2000      	movs	r0, #0
    eae8:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    eaec:	f89a 002a 	ldrb.w	r0, [sl, #42]	; 0x2a
    eaf0:	b118      	cbz	r0, eafa <MPSL_IRQ_RADIO_Handler+0x1036>
    eaf2:	f002 f969 	bl	10dc8 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    eaf6:	f88a b02a 	strb.w	fp, [sl, #42]	; 0x2a
    eafa:	f89a 002b 	ldrb.w	r0, [sl, #43]	; 0x2b
    eafe:	b120      	cbz	r0, eb0a <MPSL_IRQ_RADIO_Handler+0x1046>
    eb00:	2005      	movs	r0, #5
    eb02:	f001 fe2f 	bl	10764 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    eb06:	f88a b02b 	strb.w	fp, [sl, #43]	; 0x2b
    eb0a:	2004      	movs	r0, #4
    eb0c:	f001 fe2a 	bl	10764 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    eb10:	f001 fe98 	bl	10844 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    eb14:	2020      	movs	r0, #32
    eb16:	f88a 002e 	strb.w	r0, [sl, #46]	; 0x2e
    eb1a:	4809      	ldr	r0, [pc, #36]	; (eb40 <MPSL_IRQ_RADIO_Handler+0x107c>)
    eb1c:	6880      	ldr	r0, [r0, #8]
    eb1e:	f8c0 b000 	str.w	fp, [r0]
    eb22:	4808      	ldr	r0, [pc, #32]	; (eb44 <MPSL_IRQ_RADIO_Handler+0x1080>)
    eb24:	f8c0 b000 	str.w	fp, [r0]
    eb28:	2001      	movs	r0, #1
    eb2a:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    eb2e:	0000      	.short	0x0000
    eb30:	2000143c 	.word	0x2000143c
    eb34:	2000103c 	.word	0x2000103c
    eb38:	200013bc 	.word	0x200013bc
    eb3c:	00000000 	.word	0x00000000
    eb40:	2000003c 	.word	0x2000003c
    eb44:	40000508 	.word	0x40000508

0000eb48 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI>:
    eb48:	4906      	ldr	r1, [pc, #24]	; (eb64 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI+0x1c>)
    eb4a:	b510      	push	{r4, lr}
    eb4c:	f891 202d 	ldrb.w	r2, [r1, #45]	; 0x2d
    eb50:	2a20      	cmp	r2, #32
    eb52:	bf1c      	itt	ne
    eb54:	7788      	strbne	r0, [r1, #30]
    eb56:	bd10      	popne	{r4, pc}
    eb58:	f240 319a 	movw	r1, #922	; 0x39a
    eb5c:	2070      	movs	r0, #112	; 0x70
    eb5e:	f002 fad7 	bl	11110 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    eb62:	0000      	.short	0x0000
    eb64:	2000143c 	.word	0x2000143c

0000eb68 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>:
    eb68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    eb6c:	4e69      	ldr	r6, [pc, #420]	; (ed14 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1ac>)
    eb6e:	4607      	mov	r7, r0
    eb70:	b08d      	sub	sp, #52	; 0x34
    eb72:	f896 002d 	ldrb.w	r0, [r6, #45]	; 0x2d
    eb76:	4688      	mov	r8, r1
    eb78:	2820      	cmp	r0, #32
    eb7a:	d055      	beq.n	ec28 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xc0>
    eb7c:	f896 002d 	ldrb.w	r0, [r6, #45]	; 0x2d
    eb80:	f106 0408 	add.w	r4, r6, #8
    eb84:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    eb88:	f5a6 6980 	sub.w	r9, r6, #1024	; 0x400
    eb8c:	eb09 0a80 	add.w	sl, r9, r0, lsl #2
    eb90:	2020      	movs	r0, #32
    eb92:	f88d 0020 	strb.w	r0, [sp, #32]
    eb96:	f896 002c 	ldrb.w	r0, [r6, #44]	; 0x2c
    eb9a:	aa0a      	add	r2, sp, #40	; 0x28
    eb9c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    eba0:	4430      	add	r0, r6
    eba2:	a909      	add	r1, sp, #36	; 0x24
    eba4:	f890 5020 	ldrb.w	r5, [r0, #32]
    eba8:	68f0      	ldr	r0, [r6, #12]
    ebaa:	9002      	str	r0, [sp, #8]
    ebac:	6830      	ldr	r0, [r6, #0]
    ebae:	4438      	add	r0, r7
    ebb0:	f001 fa0c 	bl	ffcc <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    ebb4:	f8da 000c 	ldr.w	r0, [sl, #12]
    ebb8:	9909      	ldr	r1, [sp, #36]	; 0x24
    ebba:	2f65      	cmp	r7, #101	; 0x65
    ebbc:	4408      	add	r0, r1
    ebbe:	d338      	bcc.n	ec32 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xca>
    ebc0:	4a55      	ldr	r2, [pc, #340]	; (ed18 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1b0>)
    ebc2:	2100      	movs	r1, #0
    ebc4:	1bd2      	subs	r2, r2, r7
    ebc6:	eb71 0201 	sbcs.w	r2, r1, r1
    ebca:	d332      	bcc.n	ec32 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xca>
    ebcc:	6822      	ldr	r2, [r4, #0]
    ebce:	1a82      	subs	r2, r0, r2
    ebd0:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    ebd4:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
    ebd8:	d82b      	bhi.n	ec32 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xca>
    ebda:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    ebde:	6060      	str	r0, [r4, #4]
    ebe0:	4630      	mov	r0, r6
    ebe2:	f884 8010 	strb.w	r8, [r4, #16]
    ebe6:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
    ebea:	f10d 0a20 	add.w	sl, sp, #32
    ebee:	2d20      	cmp	r5, #32
    ebf0:	bf1c      	itt	ne
    ebf2:	494a      	ldrne	r1, [pc, #296]	; (ed1c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1b4>)
    ebf4:	eb01 1b80 	addne.w	fp, r1, r0, lsl #6
    ebf8:	d050      	beq.n	ec9c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x134>
    ebfa:	bf00      	nop
    ebfc:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
    ec00:	eb09 0880 	add.w	r8, r9, r0, lsl #2
    ec04:	6861      	ldr	r1, [r4, #4]
    ec06:	f8d8 6008 	ldr.w	r6, [r8, #8]
    ec0a:	f108 0008 	add.w	r0, r8, #8
    ec0e:	1a71      	subs	r1, r6, r1
    ec10:	0209      	lsls	r1, r1, #8
    ec12:	17ca      	asrs	r2, r1, #31
    ec14:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    ec18:	1209      	asrs	r1, r1, #8
    ec1a:	d42d      	bmi.n	ec78 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x110>
    ec1c:	89c0      	ldrh	r0, [r0, #14]
    ec1e:	2800      	cmp	r0, #0
    ec20:	d03c      	beq.n	ec9c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x134>
    ec22:	89e0      	ldrh	r0, [r4, #14]
    ec24:	b148      	cbz	r0, ec3a <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xd2>
    ec26:	e039      	b.n	ec9c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x134>
    ec28:	f640 3168 	movw	r1, #2920	; 0xb68
    ec2c:	2070      	movs	r0, #112	; 0x70
    ec2e:	f002 fa6f 	bl	11110 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    ec32:	b00d      	add	sp, #52	; 0x34
    ec34:	2001      	movs	r0, #1
    ec36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ec3a:	6820      	ldr	r0, [r4, #0]
    ec3c:	900c      	str	r0, [sp, #48]	; 0x30
    ec3e:	f002 f8bd 	bl	10dbc <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    ec42:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    ec46:	bf08      	it	eq
    ec48:	200d      	moveq	r0, #13
    ec4a:	d00b      	beq.n	ec64 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xfc>
    ec4c:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    ec50:	3856      	subs	r0, #86	; 0x56
    ec52:	bf08      	it	eq
    ec54:	201c      	moveq	r0, #28
    ec56:	d005      	beq.n	ec64 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xfc>
    ec58:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    ec5c:	389f      	subs	r0, #159	; 0x9f
    ec5e:	bf14      	ite	ne
    ec60:	2000      	movne	r0, #0
    ec62:	2032      	moveq	r0, #50	; 0x32
    ec64:	1c41      	adds	r1, r0, #1
    ec66:	980c      	ldr	r0, [sp, #48]	; 0x30
    ec68:	1a30      	subs	r0, r6, r0
    ec6a:	0200      	lsls	r0, r0, #8
    ec6c:	17c2      	asrs	r2, r0, #31
    ec6e:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    ec72:	1200      	asrs	r0, r0, #8
    ec74:	4288      	cmp	r0, r1
    ec76:	da11      	bge.n	ec9c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x134>
    ec78:	f88a 5000 	strb.w	r5, [sl]
    ec7c:	f898 1018 	ldrb.w	r1, [r8, #24]
    ec80:	7c20      	ldrb	r0, [r4, #16]
    ec82:	4281      	cmp	r1, r0
    ec84:	d805      	bhi.n	ec92 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x12a>
    ec86:	9802      	ldr	r0, [sp, #8]
    ec88:	6060      	str	r0, [r4, #4]
    ec8a:	b00d      	add	sp, #52	; 0x34
    ec8c:	2002      	movs	r0, #2
    ec8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ec92:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    ec96:	7845      	ldrb	r5, [r0, #1]
    ec98:	2d20      	cmp	r5, #32
    ec9a:	d1af      	bne.n	ebfc <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x94>
    ec9c:	2005      	movs	r0, #5
    ec9e:	f001 fd61 	bl	10764 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    eca2:	4c1c      	ldr	r4, [pc, #112]	; (ed14 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1ac>)
    eca4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    eca8:	6060      	str	r0, [r4, #4]
    ecaa:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
    ecae:	f89d 2020 	ldrb.w	r2, [sp, #32]
    ecb2:	2120      	movs	r1, #32
    ecb4:	2a20      	cmp	r2, #32
    ecb6:	d003      	beq.n	ecc0 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x158>
    ecb8:	2005      	movs	r0, #5
    ecba:	f7fe ff23 	bl	db04 <MPSL_IRQ_RADIO_Handler+0x40>
    ecbe:	e004      	b.n	ecca <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x162>
    ecc0:	eb03 0043 	add.w	r0, r3, r3, lsl #1
    ecc4:	4420      	add	r0, r4
    ecc6:	f890 0020 	ldrb.w	r0, [r0, #32]
    ecca:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
    ecce:	4913      	ldr	r1, [pc, #76]	; (ed1c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1b4>)
    ecd0:	eb01 1182 	add.w	r1, r1, r2, lsl #6
    ecd4:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
    ecd8:	eb01 0142 	add.w	r1, r1, r2, lsl #1
    ecdc:	7048      	strb	r0, [r1, #1]
    ecde:	6820      	ldr	r0, [r4, #0]
    ece0:	4438      	add	r0, r7
    ece2:	6020      	str	r0, [r4, #0]
    ece4:	20ff      	movs	r0, #255	; 0xff
    ece6:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
    ecea:	7e60      	ldrb	r0, [r4, #25]
    ecec:	2801      	cmp	r0, #1
    ecee:	d105      	bne.n	ecfc <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x194>
    ecf0:	68e0      	ldr	r0, [r4, #12]
    ecf2:	1e40      	subs	r0, r0, #1
    ecf4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    ecf8:	f001 fb98 	bl	1042c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    ecfc:	f89d 0020 	ldrb.w	r0, [sp, #32]
    ed00:	2820      	cmp	r0, #32
    ed02:	d003      	beq.n	ed0c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1a4>
    ed04:	4806      	ldr	r0, [pc, #24]	; (ed20 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1b8>)
    ed06:	7840      	ldrb	r0, [r0, #1]
    ed08:	f002 fad6 	bl	112b8 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    ed0c:	b00d      	add	sp, #52	; 0x34
    ed0e:	2000      	movs	r0, #0
    ed10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ed14:	2000143c 	.word	0x2000143c
    ed18:	0f424000 	.word	0x0f424000
    ed1c:	200013bc 	.word	0x200013bc
    ed20:	2000003c 	.word	0x2000003c

0000ed24 <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA>:
    ed24:	4806      	ldr	r0, [pc, #24]	; (ed40 <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA+0x1c>)
    ed26:	b510      	push	{r4, lr}
    ed28:	f890 102d 	ldrb.w	r1, [r0, #45]	; 0x2d
    ed2c:	2920      	cmp	r1, #32
    ed2e:	bf1c      	itt	ne
    ed30:	7e00      	ldrbne	r0, [r0, #24]
    ed32:	bd10      	popne	{r4, pc}
    ed34:	f640 3162 	movw	r1, #2914	; 0xb62
    ed38:	2070      	movs	r0, #112	; 0x70
    ed3a:	f002 f9e9 	bl	11110 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    ed3e:	0000      	.short	0x0000
    ed40:	2000143c 	.word	0x2000143c

0000ed44 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ>:
    ed44:	b570      	push	{r4, r5, r6, lr}
    ed46:	ebc0 01c0 	rsb	r1, r0, r0, lsl #3
    ed4a:	4809      	ldr	r0, [pc, #36]	; (ed70 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ+0x2c>)
    ed4c:	eb00 0481 	add.w	r4, r0, r1, lsl #2
    ed50:	4908      	ldr	r1, [pc, #32]	; (ed74 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ+0x30>)
    ed52:	6920      	ldr	r0, [r4, #16]
    ed54:	fba0 5601 	umull	r5, r6, r0, r1
    ed58:	68a0      	ldr	r0, [r4, #8]
    ed5a:	f00f fc24 	bl	1e5a6 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    ed5e:	8ae1      	ldrh	r1, [r4, #22]
    ed60:	7d22      	ldrb	r2, [r4, #20]
    ed62:	1c40      	adds	r0, r0, #1
    ed64:	4411      	add	r1, r2
    ed66:	4408      	add	r0, r1
    ed68:	1940      	adds	r0, r0, r5
    ed6a:	f146 0100 	adc.w	r1, r6, #0
    ed6e:	bd70      	pop	{r4, r5, r6, pc}
    ed70:	2000103c 	.word	0x2000103c
    ed74:	1e848000 	.word	0x1e848000

0000ed78 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>:
    ed78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ed7a:	4d6b      	ldr	r5, [pc, #428]	; (ef28 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1b0>)
    ed7c:	4a6b      	ldr	r2, [pc, #428]	; (ef2c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1b4>)
    ed7e:	f505 6480 	add.w	r4, r5, #1024	; 0x400
    ed82:	2601      	movs	r6, #1
    ed84:	f894 102a 	ldrb.w	r1, [r4, #42]	; 0x2a
    ed88:	2808      	cmp	r0, #8
    ed8a:	d27c      	bcs.n	ee86 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x10e>
    ed8c:	e8df f000 	tbb	[pc, r0]
    ed90:	a9977004 	.word	0xa9977004
    ed94:	b3ae41c7 	.word	0xb3ae41c7
    ed98:	b919      	cbnz	r1, eda2 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x2a>
    ed9a:	f002 f831 	bl	10e00 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    ed9e:	f884 602a 	strb.w	r6, [r4, #42]	; 0x2a
    eda2:	8ae0      	ldrh	r0, [r4, #22]
    eda4:	b110      	cbz	r0, edac <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x34>
    eda6:	f002 f93b 	bl	11020 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    edaa:	b180      	cbz	r0, edce <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x56>
    edac:	f7ff fd2a 	bl	e804 <MPSL_IRQ_RADIO_Handler+0xd40>
    edb0:	20ff      	movs	r0, #255	; 0xff
    edb2:	f884 0027 	strb.w	r0, [r4, #39]	; 0x27
    edb6:	6861      	ldr	r1, [r4, #4]
    edb8:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
    edbc:	d003      	beq.n	edc6 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x4e>
    edbe:	2005      	movs	r0, #5
    edc0:	f001 fc1a 	bl	105f8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    edc4:	b140      	cbz	r0, edd8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x60>
    edc6:	7e60      	ldrb	r0, [r4, #25]
    edc8:	2801      	cmp	r0, #1
    edca:	d110      	bne.n	edee <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x76>
    edcc:	e009      	b.n	ede2 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x6a>
    edce:	f640 0169 	movw	r1, #2153	; 0x869
    edd2:	2070      	movs	r0, #112	; 0x70
    edd4:	f002 f99c 	bl	11110 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    edd8:	f640 016e 	movw	r1, #2158	; 0x86e
    eddc:	2070      	movs	r0, #112	; 0x70
    edde:	f002 f997 	bl	11110 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    ede2:	68e0      	ldr	r0, [r4, #12]
    ede4:	1e40      	subs	r0, r0, #1
    ede6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    edea:	f001 fb1f 	bl	1042c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    edee:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    edf2:	f894 102d 	ldrb.w	r1, [r4, #45]	; 0x2d
    edf6:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    edfa:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    edfe:	6840      	ldr	r0, [r0, #4]
    ee00:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    ee04:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
    ee08:	b001      	add	sp, #4
    ee0a:	2101      	movs	r1, #1
    ee0c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    ee10:	4710      	bx	r2
    ee12:	f894 002b 	ldrb.w	r0, [r4, #43]	; 0x2b
    ee16:	b140      	cbz	r0, ee2a <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xb2>
    ee18:	b919      	cbnz	r1, ee22 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xaa>
    ee1a:	f001 fff1 	bl	10e00 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    ee1e:	f884 602a 	strb.w	r6, [r4, #42]	; 0x2a
    ee22:	2000      	movs	r0, #0
    ee24:	f884 002b 	strb.w	r0, [r4, #43]	; 0x2b
    ee28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ee2a:	f7ff fceb 	bl	e804 <MPSL_IRQ_RADIO_Handler+0xd40>
    ee2e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    ee32:	6060      	str	r0, [r4, #4]
    ee34:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
    ee38:	f88d 0000 	strb.w	r0, [sp]
    ee3c:	f89d 0000 	ldrb.w	r0, [sp]
    ee40:	b188      	cbz	r0, ee66 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xee>
    ee42:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    ee46:	f894 102d 	ldrb.w	r1, [r4, #45]	; 0x2d
    ee4a:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    ee4e:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    ee52:	6840      	ldr	r0, [r0, #4]
    ee54:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    ee58:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
    ee5c:	b001      	add	sp, #4
    ee5e:	2106      	movs	r1, #6
    ee60:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    ee64:	4710      	bx	r2
    ee66:	f640 0185 	movw	r1, #2181	; 0x885
    ee6a:	2070      	movs	r0, #112	; 0x70
    ee6c:	f002 f950 	bl	11110 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    ee70:	f7ff fcc8 	bl	e804 <MPSL_IRQ_RADIO_Handler+0xd40>
    ee74:	f884 6026 	strb.w	r6, [r4, #38]	; 0x26
    ee78:	f002 f8d2 	bl	11020 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    ee7c:	b120      	cbz	r0, ee88 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x110>
    ee7e:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
    ee82:	b130      	cbz	r0, ee92 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x11a>
    ee84:	e009      	b.n	ee9a <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x122>
    ee86:	e04a      	b.n	ef1e <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1a6>
    ee88:	f640 0193 	movw	r1, #2195	; 0x893
    ee8c:	2070      	movs	r0, #112	; 0x70
    ee8e:	f002 f93f 	bl	11110 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    ee92:	f001 ffb5 	bl	10e00 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    ee96:	f884 602a 	strb.w	r6, [r4, #42]	; 0x2a
    ee9a:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    ee9e:	f894 102d 	ldrb.w	r1, [r4, #45]	; 0x2d
    eea2:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    eea6:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    eeaa:	6840      	ldr	r0, [r0, #4]
    eeac:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    eeb0:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
    eeb4:	b001      	add	sp, #4
    eeb6:	2100      	movs	r1, #0
    eeb8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    eebc:	4710      	bx	r2
    eebe:	f001 fd91 	bl	109e4 <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ>
    eec2:	8ae0      	ldrh	r0, [r4, #22]
    eec4:	b110      	cbz	r0, eecc <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x154>
    eec6:	f002 f8ab 	bl	11020 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    eeca:	b128      	cbz	r0, eed8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x160>
    eecc:	f001 fd9e 	bl	10a0c <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI>
    eed0:	2800      	cmp	r0, #0
    eed2:	bf18      	it	ne
    eed4:	7766      	strbne	r6, [r4, #29]
    eed6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    eed8:	f640 019d 	movw	r1, #2205	; 0x89d
    eedc:	2070      	movs	r0, #112	; 0x70
    eede:	f002 f917 	bl	11110 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    eee2:	4813      	ldr	r0, [pc, #76]	; (ef30 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1b8>)
    eee4:	6006      	str	r6, [r0, #0]
    eee6:	6890      	ldr	r0, [r2, #8]
    eee8:	6006      	str	r6, [r0, #0]
    eeea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    eeec:	7810      	ldrb	r0, [r2, #0]
    eeee:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    eef2:	f002 b9e1 	b.w	112b8 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    eef6:	f7ff fc85 	bl	e804 <MPSL_IRQ_RADIO_Handler+0xd40>
    eefa:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    eefe:	f894 102d 	ldrb.w	r1, [r4, #45]	; 0x2d
    ef02:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    ef06:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    ef0a:	6840      	ldr	r0, [r0, #4]
    ef0c:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    ef10:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
    ef14:	b001      	add	sp, #4
    ef16:	2105      	movs	r1, #5
    ef18:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    ef1c:	4710      	bx	r2
    ef1e:	f44f 610b 	mov.w	r1, #2224	; 0x8b0
    ef22:	2070      	movs	r0, #112	; 0x70
    ef24:	f002 f8f4 	bl	11110 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    ef28:	2000103c 	.word	0x2000103c
    ef2c:	2000003c 	.word	0x2000003c
    ef30:	40000508 	.word	0x40000508

0000ef34 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>:
    ef34:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ef38:	4682      	mov	sl, r0
    ef3a:	48ef      	ldr	r0, [pc, #956]	; (f2f8 <__kernel_ram_size+0x50>)
    ef3c:	b095      	sub	sp, #84	; 0x54
    ef3e:	6800      	ldr	r0, [r0, #0]
    ef40:	4dee      	ldr	r5, [pc, #952]	; (f2fc <__kernel_ram_size+0x54>)
    ef42:	05c0      	lsls	r0, r0, #23
    ef44:	0dc0      	lsrs	r0, r0, #23
    ef46:	d00e      	beq.n	ef66 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x32>
    ef48:	3810      	subs	r0, #16
    ef4a:	b240      	sxtb	r0, r0
    ef4c:	2800      	cmp	r0, #0
    ef4e:	bfb8      	it	lt
    ef50:	f000 000f 	andlt.w	r0, r0, #15
    ef54:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    ef58:	bfac      	ite	ge
    ef5a:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    ef5e:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    ef62:	0940      	lsrs	r0, r0, #5
    ef64:	d00d      	beq.n	ef82 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4e>
    ef66:	9816      	ldr	r0, [sp, #88]	; 0x58
    ef68:	f04f 0b00 	mov.w	fp, #0
    ef6c:	7800      	ldrb	r0, [r0, #0]
    ef6e:	2800      	cmp	r0, #0
    ef70:	bf18      	it	ne
    ef72:	2801      	cmpne	r0, #1
    ef74:	d018      	beq.n	efa8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x74>
    ef76:	f240 713b 	movw	r1, #1851	; 0x73b
    ef7a:	f04f 0070 	mov.w	r0, #112	; 0x70
    ef7e:	f002 f8c7 	bl	11110 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    ef82:	f895 002d 	ldrb.w	r0, [r5, #45]	; 0x2d
    ef86:	f04f 0b01 	mov.w	fp, #1
    ef8a:	2820      	cmp	r0, #32
    ef8c:	d007      	beq.n	ef9e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x6a>
    ef8e:	9816      	ldr	r0, [sp, #88]	; 0x58
    ef90:	7800      	ldrb	r0, [r0, #0]
    ef92:	b148      	cbz	r0, efa8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x74>
    ef94:	f240 7137 	movw	r1, #1847	; 0x737
    ef98:	2070      	movs	r0, #112	; 0x70
    ef9a:	f002 f8b9 	bl	11110 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    ef9e:	f240 7134 	movw	r1, #1844	; 0x734
    efa2:	2070      	movs	r0, #112	; 0x70
    efa4:	f002 f8b4 	bl	11110 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    efa8:	4cd5      	ldr	r4, [pc, #852]	; (f300 <__kernel_ram_size+0x58>)
    efaa:	b124      	cbz	r4, efb6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x82>
    efac:	2100      	movs	r1, #0
    efae:	f240 703e 	movw	r0, #1854	; 0x73e
    efb2:	f3af 8000 	nop.w
    efb6:	2000      	movs	r0, #0
    efb8:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
    efbc:	49d1      	ldr	r1, [pc, #836]	; (f304 <__kernel_ram_size+0x5c>)
    efbe:	ebca 00ca 	rsb	r0, sl, sl, lsl #3
    efc2:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    efc6:	f04f 0901 	mov.w	r9, #1
    efca:	9000      	str	r0, [sp, #0]
    efcc:	b124      	cbz	r4, efd8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xa4>
    efce:	2100      	movs	r1, #0
    efd0:	f240 7049 	movw	r0, #1865	; 0x749
    efd4:	f3af 8000 	nop.w
    efd8:	f1b9 0f00 	cmp.w	r9, #0
    efdc:	d00a      	beq.n	eff4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xc0>
    efde:	bf00      	nop
    efe0:	f895 602c 	ldrb.w	r6, [r5, #44]	; 0x2c
    efe4:	f04f 0800 	mov.w	r8, #0
    efe8:	f885 8029 	strb.w	r8, [r5, #41]	; 0x29
    efec:	f1bb 0f00 	cmp.w	fp, #0
    eff0:	d007      	beq.n	f002 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xce>
    eff2:	e038      	b.n	f066 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x132>
    eff4:	48c4      	ldr	r0, [pc, #784]	; (f308 <__kernel_ram_size+0x60>)
    eff6:	2800      	cmp	r0, #0
    eff8:	bf18      	it	ne
    effa:	f3af 8000 	nopne.w
    effe:	b662      	cpsie	i
    f000:	e7ee      	b.n	efe0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xac>
    f002:	4637      	mov	r7, r6
    f004:	2001      	movs	r0, #1
    f006:	ea20 0607 	bic.w	r6, r0, r7
    f00a:	48c0      	ldr	r0, [pc, #768]	; (f30c <__kernel_ram_size+0x64>)
    f00c:	2240      	movs	r2, #64	; 0x40
    f00e:	eb00 1187 	add.w	r1, r0, r7, lsl #6
    f012:	eb00 1086 	add.w	r0, r0, r6, lsl #6
    f016:	f00f fc22 	bl	1e85e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    f01a:	b124      	cbz	r4, f026 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xf2>
    f01c:	2100      	movs	r1, #0
    f01e:	f240 505e 	movw	r0, #1374	; 0x55e
    f022:	f3af 8000 	nop.w
    f026:	eb07 0147 	add.w	r1, r7, r7, lsl #1
    f02a:	eb06 0046 	add.w	r0, r6, r6, lsl #1
    f02e:	4429      	add	r1, r5
    f030:	4428      	add	r0, r5
    f032:	8c0a      	ldrh	r2, [r1, #32]
    f034:	8402      	strh	r2, [r0, #32]
    f036:	f891 1022 	ldrb.w	r1, [r1, #34]	; 0x22
    f03a:	f880 1022 	strb.w	r1, [r0, #34]	; 0x22
    f03e:	b124      	cbz	r4, f04a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x116>
    f040:	2100      	movs	r1, #0
    f042:	f240 5062 	movw	r0, #1378	; 0x562
    f046:	f3af 8000 	nop.w
    f04a:	b124      	cbz	r4, f056 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x122>
    f04c:	2100      	movs	r1, #0
    f04e:	f240 7053 	movw	r0, #1875	; 0x753
    f052:	f3af 8000 	nop.w
    f056:	f895 0029 	ldrb.w	r0, [r5, #41]	; 0x29
    f05a:	f88d 0008 	strb.w	r0, [sp, #8]
    f05e:	f89d 0008 	ldrb.w	r0, [sp, #8]
    f062:	2800      	cmp	r0, #0
    f064:	d1b2      	bne.n	efcc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x98>
    f066:	b124      	cbz	r4, f072 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x13e>
    f068:	2100      	movs	r1, #0
    f06a:	f240 705d 	movw	r0, #1885	; 0x75d
    f06e:	f3af 8000 	nop.w
    f072:	a802      	add	r0, sp, #8
    f074:	f001 f91a 	bl	102ac <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ>
    f078:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    f07c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
    f080:	4633      	mov	r3, r6
    f082:	aa09      	add	r2, sp, #36	; 0x24
    f084:	a80e      	add	r0, sp, #56	; 0x38
    f086:	9916      	ldr	r1, [sp, #88]	; 0x58
    f088:	f7ff fa5a 	bl	e540 <MPSL_IRQ_RADIO_Handler+0xa7c>
    f08c:	b124      	cbz	r4, f098 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x164>
    f08e:	2100      	movs	r1, #0
    f090:	f240 7064 	movw	r0, #1892	; 0x764
    f094:	f3af 8000 	nop.w
    f098:	4a9c      	ldr	r2, [pc, #624]	; (f30c <__kernel_ram_size+0x64>)
    f09a:	990e      	ldr	r1, [sp, #56]	; 0x38
    f09c:	eb02 1786 	add.w	r7, r2, r6, lsl #6
    f0a0:	a809      	add	r0, sp, #36	; 0x24
    f0a2:	f817 201a 	ldrb.w	r2, [r7, sl, lsl #1]
    f0a6:	2a01      	cmp	r2, #1
    f0a8:	bf18      	it	ne
    f0aa:	2a02      	cmpne	r2, #2
    f0ac:	d138      	bne.n	f120 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1ec>
    f0ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
    f0b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f0b2:	eba2 0201 	sub.w	r2, r2, r1
    f0b6:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    f0ba:	eba3 0101 	sub.w	r1, r3, r1
    f0be:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
    f0c2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    f0c6:	2a02      	cmp	r2, #2
    f0c8:	d364      	bcc.n	f194 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x260>
    f0ca:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
    f0ce:	bf98      	it	ls
    f0d0:	f5b1 0f00 	cmpls.w	r1, #8388608	; 0x800000
    f0d4:	d85e      	bhi.n	f194 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x260>
    f0d6:	f04f 0801 	mov.w	r8, #1
    f0da:	ab14      	add	r3, sp, #80	; 0x50
    f0dc:	aa13      	add	r2, sp, #76	; 0x4c
    f0de:	4631      	mov	r1, r6
    f0e0:	f7fe ff04 	bl	deec <MPSL_IRQ_RADIO_Handler+0x428>
    f0e4:	2800      	cmp	r0, #0
    f0e6:	d05d      	beq.n	f1a4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x270>
    f0e8:	f89d 104c 	ldrb.w	r1, [sp, #76]	; 0x4c
    f0ec:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
    f0f0:	4633      	mov	r3, r6
    f0f2:	428a      	cmp	r2, r1
    f0f4:	d05a      	beq.n	f1ac <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x278>
    f0f6:	2005      	movs	r0, #5
    f0f8:	f7fe fd04 	bl	db04 <MPSL_IRQ_RADIO_Handler+0x40>
    f0fc:	eb07 014a 	add.w	r1, r7, sl, lsl #1
    f100:	7048      	strb	r0, [r1, #1]
    f102:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
    f106:	2820      	cmp	r0, #32
    f108:	bf1c      	itt	ne
    f10a:	eb07 0040 	addne.w	r0, r7, r0, lsl #1
    f10e:	f880 a001 	strbne.w	sl, [r0, #1]
    f112:	d057      	beq.n	f1c4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x290>
    f114:	4632      	mov	r2, r6
    f116:	4651      	mov	r1, sl
    f118:	f05f 0003 	movs.w	r0, #3
    f11c:	f7ff fc24 	bl	e968 <MPSL_IRQ_RADIO_Handler+0xea4>
    f120:	b124      	cbz	r4, f12c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1f8>
    f122:	2100      	movs	r1, #0
    f124:	f240 7069 	movw	r0, #1897	; 0x769
    f128:	f3af 8000 	nop.w
    f12c:	4878      	ldr	r0, [pc, #480]	; (f310 <__kernel_ram_size+0x68>)
    f12e:	2800      	cmp	r0, #0
    f130:	bf18      	it	ne
    f132:	f3af 8000 	nopne.w
    f136:	f3ef 8910 	mrs	r9, PRIMASK
    f13a:	b672      	cpsid	i
    f13c:	b124      	cbz	r4, f148 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x214>
    f13e:	2100      	movs	r1, #0
    f140:	f240 706f 	movw	r0, #1903	; 0x76f
    f144:	f3af 8000 	nop.w
    f148:	f895 0029 	ldrb.w	r0, [r5, #41]	; 0x29
    f14c:	f88d 0008 	strb.w	r0, [sp, #8]
    f150:	f89d 0008 	ldrb.w	r0, [sp, #8]
    f154:	2800      	cmp	r0, #0
    f156:	f47f af39 	bne.w	efcc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x98>
    f15a:	b124      	cbz	r4, f166 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x232>
    f15c:	2100      	movs	r1, #0
    f15e:	f240 7077 	movw	r0, #1911	; 0x777
    f162:	f3af 8000 	nop.w
    f166:	af09      	add	r7, sp, #36	; 0x24
    f168:	9800      	ldr	r0, [sp, #0]
    f16a:	e897 100e 	ldmia.w	r7, {r1, r2, r3, ip}
    f16e:	f100 0708 	add.w	r7, r0, #8
    f172:	f1b8 0f00 	cmp.w	r8, #0
    f176:	e887 100e 	stmia.w	r7, {r1, r2, r3, ip}
    f17a:	990d      	ldr	r1, [sp, #52]	; 0x34
    f17c:	6181      	str	r1, [r0, #24]
    f17e:	d051      	beq.n	f224 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2f0>
    f180:	b124      	cbz	r4, f18c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x258>
    f182:	2100      	movs	r1, #0
    f184:	f240 7084 	movw	r0, #1924	; 0x784
    f188:	f3af 8000 	nop.w
    f18c:	f1bb 0f00 	cmp.w	fp, #0
    f190:	d139      	bne.n	f206 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2d2>
    f192:	e01f      	b.n	f1d4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2a0>
    f194:	4632      	mov	r2, r6
    f196:	4651      	mov	r1, sl
    f198:	2004      	movs	r0, #4
    f19a:	f7ff fbe5 	bl	e968 <MPSL_IRQ_RADIO_Handler+0xea4>
    f19e:	f04f 0801 	mov.w	r8, #1
    f1a2:	e7bd      	b.n	f120 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1ec>
    f1a4:	4632      	mov	r2, r6
    f1a6:	4651      	mov	r1, sl
    f1a8:	2004      	movs	r0, #4
    f1aa:	e7b7      	b.n	f11c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1e8>
    f1ac:	2920      	cmp	r1, #32
    f1ae:	bf19      	ittee	ne
    f1b0:	eb07 0041 	addne.w	r0, r7, r1, lsl #1
    f1b4:	7840      	ldrbne	r0, [r0, #1]
    f1b6:	eb06 0046 	addeq.w	r0, r6, r6, lsl #1
    f1ba:	4428      	addeq	r0, r5
    f1bc:	bf08      	it	eq
    f1be:	f890 0020 	ldrbeq.w	r0, [r0, #32]
    f1c2:	e79b      	b.n	f0fc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1c8>
    f1c4:	eb06 0146 	add.w	r1, r6, r6, lsl #1
    f1c8:	4429      	add	r1, r5
    f1ca:	f881 a020 	strb.w	sl, [r1, #32]
    f1ce:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
    f1d2:	e79f      	b.n	f114 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1e0>
    f1d4:	9811      	ldr	r0, [sp, #68]	; 0x44
    f1d6:	f010 0fff 	tst.w	r0, #255	; 0xff
    f1da:	d014      	beq.n	f206 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2d2>
    f1dc:	f895 002d 	ldrb.w	r0, [r5, #45]	; 0x2d
    f1e0:	2820      	cmp	r0, #32
    f1e2:	d110      	bne.n	f206 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2d2>
    f1e4:	b124      	cbz	r4, f1f0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2bc>
    f1e6:	2100      	movs	r1, #0
    f1e8:	f240 7089 	movw	r0, #1929	; 0x789
    f1ec:	f3af 8000 	nop.w
    f1f0:	4631      	mov	r1, r6
    f1f2:	2002      	movs	r0, #2
    f1f4:	f7ff fbea 	bl	e9cc <MPSL_IRQ_RADIO_Handler+0xf08>
    f1f8:	9010      	str	r0, [sp, #64]	; 0x40
    f1fa:	b920      	cbnz	r0, f206 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2d2>
    f1fc:	9816      	ldr	r0, [sp, #88]	; 0x58
    f1fe:	7800      	ldrb	r0, [r0, #0]
    f200:	b1e8      	cbz	r0, f23e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x30a>
    f202:	2801      	cmp	r0, #1
    f204:	d02a      	beq.n	f25c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x328>
    f206:	b124      	cbz	r4, f212 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2de>
    f208:	2100      	movs	r1, #0
    f20a:	f240 70a6 	movw	r0, #1958	; 0x7a6
    f20e:	f3af 8000 	nop.w
    f212:	20ff      	movs	r0, #255	; 0xff
    f214:	f1bb 0f00 	cmp.w	fp, #0
    f218:	bf18      	it	ne
    f21a:	f885 0029 	strbne.w	r0, [r5, #41]	; 0x29
    f21e:	d026      	beq.n	f26e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x33a>
    f220:	f04f 0801 	mov.w	r8, #1
    f224:	b124      	cbz	r4, f230 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2fc>
    f226:	2100      	movs	r1, #0
    f228:	f240 70b7 	movw	r0, #1975	; 0x7b7
    f22c:	f3af 8000 	nop.w
    f230:	9810      	ldr	r0, [sp, #64]	; 0x40
    f232:	4e38      	ldr	r6, [pc, #224]	; (f314 <__kernel_ram_size+0x6c>)
    f234:	2802      	cmp	r0, #2
    f236:	d023      	beq.n	f280 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x34c>
    f238:	2801      	cmp	r0, #1
    f23a:	d029      	beq.n	f290 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x35c>
    f23c:	e02d      	b.n	f29a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x366>
    f23e:	b124      	cbz	r4, f24a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x316>
    f240:	2100      	movs	r1, #0
    f242:	f240 7091 	movw	r0, #1937	; 0x791
    f246:	f3af 8000 	nop.w
    f24a:	f895 202c 	ldrb.w	r2, [r5, #44]	; 0x2c
    f24e:	4651      	mov	r1, sl
    f250:	2004      	movs	r0, #4
    f252:	f7ff fb89 	bl	e968 <MPSL_IRQ_RADIO_Handler+0xea4>
    f256:	f04f 0801 	mov.w	r8, #1
    f25a:	e7e3      	b.n	f224 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2f0>
    f25c:	2c00      	cmp	r4, #0
    f25e:	f43f aeb5 	beq.w	efcc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x98>
    f262:	2100      	movs	r1, #0
    f264:	f240 709c 	movw	r0, #1948	; 0x79c
    f268:	f3af 8000 	nop.w
    f26c:	e6ae      	b.n	efcc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x98>
    f26e:	f895 202c 	ldrb.w	r2, [r5, #44]	; 0x2c
    f272:	2101      	movs	r1, #1
    f274:	4391      	bics	r1, r2
    f276:	f885 102c 	strb.w	r1, [r5, #44]	; 0x2c
    f27a:	f885 0029 	strb.w	r0, [r5, #41]	; 0x29
    f27e:	e7cf      	b.n	f220 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ec>
    f280:	68a8      	ldr	r0, [r5, #8]
    f282:	990e      	ldr	r1, [sp, #56]	; 0x38
    f284:	1a40      	subs	r0, r0, r1
    f286:	f00f f98e 	bl	1e5a6 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    f28a:	6871      	ldr	r1, [r6, #4]
    f28c:	b921      	cbnz	r1, f298 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x364>
    f28e:	e004      	b.n	f29a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x366>
    f290:	6871      	ldr	r1, [r6, #4]
    f292:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    f296:	b101      	cbz	r1, f29a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x366>
    f298:	4788      	blx	r1
    f29a:	f1b9 0f00 	cmp.w	r9, #0
    f29e:	d024      	beq.n	f2ea <__kernel_ram_size+0x42>
    f2a0:	b124      	cbz	r4, f2ac <__kernel_ram_size+0x4>
    f2a2:	2100      	movs	r1, #0
    f2a4:	f240 70c7 	movw	r0, #1991	; 0x7c7
    f2a8:	f3af 8000 	nop.w
    f2ac:	f1b8 0f00 	cmp.w	r8, #0
    f2b0:	d011      	beq.n	f2d6 <__kernel_ram_size+0x2e>
    f2b2:	f895 002c 	ldrb.w	r0, [r5, #44]	; 0x2c
    f2b6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    f2ba:	4428      	add	r0, r5
    f2bc:	f890 0021 	ldrb.w	r0, [r0, #33]	; 0x21
    f2c0:	2820      	cmp	r0, #32
    f2c2:	d008      	beq.n	f2d6 <__kernel_ram_size+0x2e>
    f2c4:	b124      	cbz	r4, f2d0 <__kernel_ram_size+0x28>
    f2c6:	2100      	movs	r1, #0
    f2c8:	f240 70ce 	movw	r0, #1998	; 0x7ce
    f2cc:	f3af 8000 	nop.w
    f2d0:	7870      	ldrb	r0, [r6, #1]
    f2d2:	f001 fff1 	bl	112b8 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    f2d6:	b124      	cbz	r4, f2e2 <__kernel_ram_size+0x3a>
    f2d8:	2100      	movs	r1, #0
    f2da:	f240 70d3 	movw	r0, #2003	; 0x7d3
    f2de:	f3af 8000 	nop.w
    f2e2:	b017      	add	sp, #92	; 0x5c
    f2e4:	4640      	mov	r0, r8
    f2e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f2ea:	4807      	ldr	r0, [pc, #28]	; (f308 <__kernel_ram_size+0x60>)
    f2ec:	2800      	cmp	r0, #0
    f2ee:	bf18      	it	ne
    f2f0:	f3af 8000 	nopne.w
    f2f4:	b662      	cpsie	i
    f2f6:	e7d3      	b.n	f2a0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x36c>
    f2f8:	e000ed04 	.word	0xe000ed04
    f2fc:	2000143c 	.word	0x2000143c
    f300:	00000000 	.word	0x00000000
    f304:	2000103c 	.word	0x2000103c
    f308:	00000000 	.word	0x00000000
    f30c:	200013bc 	.word	0x200013bc
    f310:	00000000 	.word	0x00000000
    f314:	2000003c 	.word	0x2000003c

0000f318 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>:
    f318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f31c:	4606      	mov	r6, r0
    f31e:	7800      	ldrb	r0, [r0, #0]
    f320:	b08d      	sub	sp, #52	; 0x34
    f322:	b118      	cbz	r0, f32c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x14>
    f324:	b00d      	add	sp, #52	; 0x34
    f326:	2000      	movs	r0, #0
    f328:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f32c:	488c      	ldr	r0, [pc, #560]	; (f560 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x248>)
    f32e:	6800      	ldr	r0, [r0, #0]
    f330:	05c0      	lsls	r0, r0, #23
    f332:	0dc0      	lsrs	r0, r0, #23
    f334:	d00e      	beq.n	f354 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x3c>
    f336:	3810      	subs	r0, #16
    f338:	b240      	sxtb	r0, r0
    f33a:	2800      	cmp	r0, #0
    f33c:	bfb8      	it	lt
    f33e:	f000 000f 	andlt.w	r0, r0, #15
    f342:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    f346:	bfac      	ite	ge
    f348:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    f34c:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    f350:	0940      	lsrs	r0, r0, #5
    f352:	d0e7      	beq.n	f324 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xc>
    f354:	4d83      	ldr	r5, [pc, #524]	; (f564 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x24c>)
    f356:	4c84      	ldr	r4, [pc, #528]	; (f568 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x250>)
    f358:	f04f 0b01 	mov.w	fp, #1
    f35c:	2700      	movs	r7, #0
    f35e:	b125      	cbz	r5, f36a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x52>
    f360:	2100      	movs	r1, #0
    f362:	f240 50e5 	movw	r0, #1509	; 0x5e5
    f366:	f3af 8000 	nop.w
    f36a:	f894 a02c 	ldrb.w	sl, [r4, #44]	; 0x2c
    f36e:	f884 7029 	strb.w	r7, [r4, #41]	; 0x29
    f372:	f04f 0900 	mov.w	r9, #0
    f376:	b125      	cbz	r5, f382 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x6a>
    f378:	2100      	movs	r1, #0
    f37a:	f240 50ea 	movw	r0, #1514	; 0x5ea
    f37e:	f3af 8000 	nop.w
    f382:	487a      	ldr	r0, [pc, #488]	; (f56c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x254>)
    f384:	ea2b 080a 	bic.w	r8, fp, sl
    f388:	eb00 118a 	add.w	r1, r0, sl, lsl #6
    f38c:	eb00 1088 	add.w	r0, r0, r8, lsl #6
    f390:	2240      	movs	r2, #64	; 0x40
    f392:	f00f fa64 	bl	1e85e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    f396:	b125      	cbz	r5, f3a2 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x8a>
    f398:	2100      	movs	r1, #0
    f39a:	f240 505e 	movw	r0, #1374	; 0x55e
    f39e:	f3af 8000 	nop.w
    f3a2:	eb0a 014a 	add.w	r1, sl, sl, lsl #1
    f3a6:	eb08 0048 	add.w	r0, r8, r8, lsl #1
    f3aa:	4421      	add	r1, r4
    f3ac:	4420      	add	r0, r4
    f3ae:	8c0a      	ldrh	r2, [r1, #32]
    f3b0:	8402      	strh	r2, [r0, #32]
    f3b2:	f891 1022 	ldrb.w	r1, [r1, #34]	; 0x22
    f3b6:	f880 1022 	strb.w	r1, [r0, #34]	; 0x22
    f3ba:	b125      	cbz	r5, f3c6 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xae>
    f3bc:	2100      	movs	r1, #0
    f3be:	f240 5062 	movw	r0, #1378	; 0x562
    f3c2:	f3af 8000 	nop.w
    f3c6:	b125      	cbz	r5, f3d2 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xba>
    f3c8:	2100      	movs	r1, #0
    f3ca:	f240 50ef 	movw	r0, #1519	; 0x5ef
    f3ce:	f3af 8000 	nop.w
    f3d2:	a808      	add	r0, sp, #32
    f3d4:	f000 ff6a 	bl	102ac <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ>
    f3d8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    f3dc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
    f3e0:	4643      	mov	r3, r8
    f3e2:	466a      	mov	r2, sp
    f3e4:	4631      	mov	r1, r6
    f3e6:	a80a      	add	r0, sp, #40	; 0x28
    f3e8:	f7ff f8aa 	bl	e540 <MPSL_IRQ_RADIO_Handler+0xa7c>
    f3ec:	b125      	cbz	r5, f3f8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xe0>
    f3ee:	2100      	movs	r1, #0
    f3f0:	f240 50f5 	movw	r0, #1525	; 0x5f5
    f3f4:	f3af 8000 	nop.w
    f3f8:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    f3fc:	2820      	cmp	r0, #32
    f3fe:	d01a      	beq.n	f436 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x11e>
    f400:	68e0      	ldr	r0, [r4, #12]
    f402:	9900      	ldr	r1, [sp, #0]
    f404:	1a09      	subs	r1, r1, r0
    f406:	0209      	lsls	r1, r1, #8
    f408:	17ca      	asrs	r2, r1, #31
    f40a:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    f40e:	1209      	asrs	r1, r1, #8
    f410:	d511      	bpl.n	f436 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x11e>
    f412:	9900      	ldr	r1, [sp, #0]
    f414:	4281      	cmp	r1, r0
    f416:	d902      	bls.n	f41e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x106>
    f418:	9902      	ldr	r1, [sp, #8]
    f41a:	1c49      	adds	r1, r1, #1
    f41c:	9102      	str	r1, [sp, #8]
    f41e:	e9dd 2100 	ldrd	r2, r1, [sp]
    f422:	1a89      	subs	r1, r1, r2
    f424:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
    f428:	4408      	add	r0, r1
    f42a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    f42e:	e9cd 2000 	strd	r2, r0, [sp]
    f432:	f04f 0901 	mov.w	r9, #1
    f436:	b125      	cbz	r5, f442 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x12a>
    f438:	2100      	movs	r1, #0
    f43a:	f240 50ff 	movw	r0, #1535	; 0x5ff
    f43e:	f3af 8000 	nop.w
    f442:	9900      	ldr	r1, [sp, #0]
    f444:	980a      	ldr	r0, [sp, #40]	; 0x28
    f446:	9a01      	ldr	r2, [sp, #4]
    f448:	1a09      	subs	r1, r1, r0
    f44a:	1a10      	subs	r0, r2, r0
    f44c:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    f450:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    f454:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
    f458:	bf98      	it	ls
    f45a:	f5b0 0f00 	cmpls.w	r0, #8388608	; 0x800000
    f45e:	d809      	bhi.n	f474 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x15c>
    f460:	4643      	mov	r3, r8
    f462:	4669      	mov	r1, sp
    f464:	4842      	ldr	r0, [pc, #264]	; (f570 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x258>)
    f466:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    f468:	f7fe fb88 	bl	db7c <MPSL_IRQ_RADIO_Handler+0xb8>
    f46c:	ea59 0000 	orrs.w	r0, r9, r0
    f470:	d129      	bne.n	f4c6 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1ae>
    f472:	e042      	b.n	f4fa <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1e2>
    f474:	980b      	ldr	r0, [sp, #44]	; 0x2c
    f476:	f8bd a00e 	ldrh.w	sl, [sp, #14]
    f47a:	9002      	str	r0, [sp, #8]
    f47c:	aa09      	add	r2, sp, #36	; 0x24
    f47e:	a907      	add	r1, sp, #28
    f480:	4650      	mov	r0, sl
    f482:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
    f486:	f000 fda1 	bl	ffcc <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    f48a:	f001 fac9 	bl	10a20 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
    f48e:	f000 fd81 	bl	ff94 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    f492:	4681      	mov	r9, r0
    f494:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    f498:	2820      	cmp	r0, #32
    f49a:	d03b      	beq.n	f514 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1fc>
    f49c:	68e0      	ldr	r0, [r4, #12]
    f49e:	1d40      	adds	r0, r0, #5
    f4a0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    f4a4:	9900      	ldr	r1, [sp, #0]
    f4a6:	4281      	cmp	r1, r0
    f4a8:	d902      	bls.n	f4b0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x198>
    f4aa:	9902      	ldr	r1, [sp, #8]
    f4ac:	1c49      	adds	r1, r1, #1
    f4ae:	9102      	str	r1, [sp, #8]
    f4b0:	e9dd 2100 	ldrd	r2, r1, [sp]
    f4b4:	1a89      	subs	r1, r1, r2
    f4b6:	9000      	str	r0, [sp, #0]
    f4b8:	4408      	add	r0, r1
    f4ba:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    f4be:	9001      	str	r0, [sp, #4]
    f4c0:	201f      	movs	r0, #31
    f4c2:	f88d 000c 	strb.w	r0, [sp, #12]
    f4c6:	9800      	ldr	r0, [sp, #0]
    f4c8:	f00f f86d 	bl	1e5a6 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    f4cc:	1c41      	adds	r1, r0, #1
    f4ce:	f8bd 000e 	ldrh.w	r0, [sp, #14]
    f4d2:	f89d 200c 	ldrb.w	r2, [sp, #12]
    f4d6:	4410      	add	r0, r2
    f4d8:	4408      	add	r0, r1
    f4da:	e9c6 0704 	strd	r0, r7, [r6, #16]
    f4de:	b125      	cbz	r5, f4ea <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1d2>
    f4e0:	2100      	movs	r1, #0
    f4e2:	f240 601a 	movw	r0, #1562	; 0x61a
    f4e6:	f3af 8000 	nop.w
    f4ea:	e9d6 1004 	ldrd	r1, r0, [r6, #16]
    f4ee:	4a21      	ldr	r2, [pc, #132]	; (f574 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x25c>)
    f4f0:	9b02      	ldr	r3, [sp, #8]
    f4f2:	fbe3 1002 	umlal	r1, r0, r3, r2
    f4f6:	e9c6 1004 	strd	r1, r0, [r6, #16]
    f4fa:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
    f4fe:	f88d 0014 	strb.w	r0, [sp, #20]
    f502:	f89d 0014 	ldrb.w	r0, [sp, #20]
    f506:	2800      	cmp	r0, #0
    f508:	f47f af29 	bne.w	f35e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x46>
    f50c:	b00d      	add	sp, #52	; 0x34
    f50e:	2001      	movs	r0, #1
    f510:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f514:	f108 0809 	add.w	r8, r8, #9
    f518:	f1ba 0f00 	cmp.w	sl, #0
    f51c:	d016      	beq.n	f54c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x234>
    f51e:	f001 fd7f 	bl	11020 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    f522:	b998      	cbnz	r0, f54c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x234>
    f524:	f001 fc4a 	bl	10dbc <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    f528:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    f52c:	bf08      	it	eq
    f52e:	200d      	moveq	r0, #13
    f530:	d00b      	beq.n	f54a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x232>
    f532:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    f536:	3856      	subs	r0, #86	; 0x56
    f538:	bf08      	it	eq
    f53a:	201c      	moveq	r0, #28
    f53c:	d005      	beq.n	f54a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x232>
    f53e:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    f542:	389f      	subs	r0, #159	; 0x9f
    f544:	bf14      	ite	ne
    f546:	4638      	movne	r0, r7
    f548:	2032      	moveq	r0, #50	; 0x32
    f54a:	4480      	add	r8, r0
    f54c:	9807      	ldr	r0, [sp, #28]
    f54e:	4581      	cmp	r9, r0
    f550:	bf84      	itt	hi
    f552:	eba9 0000 	subhi.w	r0, r9, r0
    f556:	4480      	addhi	r8, r0
    f558:	f028 407f 	bic.w	r0, r8, #4278190080	; 0xff000000
    f55c:	e7a2      	b.n	f4a4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x18c>
    f55e:	0000      	.short	0x0000
    f560:	e000ed04 	.word	0xe000ed04
    f564:	00000000 	.word	0x00000000
    f568:	2000143c 	.word	0x2000143c
    f56c:	200013bc 	.word	0x200013bc
    f570:	0f424000 	.word	0x0f424000
    f574:	1e848000 	.word	0x1e848000

0000f578 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>:
    f578:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f57c:	4d92      	ldr	r5, [pc, #584]	; (f7c8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x250>)
    f57e:	b08c      	sub	sp, #48	; 0x30
    f580:	f895 002c 	ldrb.w	r0, [r5, #44]	; 0x2c
    f584:	2000      	movs	r0, #0
    f586:	9008      	str	r0, [sp, #32]
    f588:	9006      	str	r0, [sp, #24]
    f58a:	2001      	movs	r0, #1
    f58c:	4c8f      	ldr	r4, [pc, #572]	; (f7cc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x254>)
    f58e:	f1a5 0980 	sub.w	r9, r5, #128	; 0x80
    f592:	f04f 0800 	mov.w	r8, #0
    f596:	4607      	mov	r7, r0
    f598:	9007      	str	r0, [sp, #28]
    f59a:	b124      	cbz	r4, f5a6 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x2e>
    f59c:	2100      	movs	r1, #0
    f59e:	f240 70e4 	movw	r0, #2020	; 0x7e4
    f5a2:	f3af 8000 	nop.w
    f5a6:	9807      	ldr	r0, [sp, #28]
    f5a8:	2800      	cmp	r0, #0
    f5aa:	d03c      	beq.n	f626 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xae>
    f5ac:	f885 8029 	strb.w	r8, [r5, #41]	; 0x29
    f5b0:	b124      	cbz	r4, f5bc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x44>
    f5b2:	2100      	movs	r1, #0
    f5b4:	f240 70e9 	movw	r0, #2025	; 0x7e9
    f5b8:	f3af 8000 	nop.w
    f5bc:	f895 a02c 	ldrb.w	sl, [r5, #44]	; 0x2c
    f5c0:	2240      	movs	r2, #64	; 0x40
    f5c2:	ea27 060a 	bic.w	r6, r7, sl
    f5c6:	eb09 1086 	add.w	r0, r9, r6, lsl #6
    f5ca:	eb09 118a 	add.w	r1, r9, sl, lsl #6
    f5ce:	4683      	mov	fp, r0
    f5d0:	f00f f945 	bl	1e85e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    f5d4:	b124      	cbz	r4, f5e0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x68>
    f5d6:	2100      	movs	r1, #0
    f5d8:	f240 505e 	movw	r0, #1374	; 0x55e
    f5dc:	f3af 8000 	nop.w
    f5e0:	eb06 0046 	add.w	r0, r6, r6, lsl #1
    f5e4:	eb0a 014a 	add.w	r1, sl, sl, lsl #1
    f5e8:	4428      	add	r0, r5
    f5ea:	4429      	add	r1, r5
    f5ec:	9000      	str	r0, [sp, #0]
    f5ee:	8c0a      	ldrh	r2, [r1, #32]
    f5f0:	8402      	strh	r2, [r0, #32]
    f5f2:	f891 1022 	ldrb.w	r1, [r1, #34]	; 0x22
    f5f6:	f880 1022 	strb.w	r1, [r0, #34]	; 0x22
    f5fa:	b124      	cbz	r4, f606 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x8e>
    f5fc:	2100      	movs	r1, #0
    f5fe:	f240 5062 	movw	r0, #1378	; 0x562
    f602:	f3af 8000 	nop.w
    f606:	f895 0029 	ldrb.w	r0, [r5, #41]	; 0x29
    f60a:	f88d 0008 	strb.w	r0, [sp, #8]
    f60e:	f89d 0008 	ldrb.w	r0, [sp, #8]
    f612:	b178      	cbz	r0, f634 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xbc>
    f614:	2c00      	cmp	r4, #0
    f616:	bf1c      	itt	ne
    f618:	2100      	movne	r1, #0
    f61a:	f240 70ef 	movwne	r0, #2031	; 0x7ef
    f61e:	d0bc      	beq.n	f59a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x22>
    f620:	f3af 8000 	nop.w
    f624:	e7b9      	b.n	f59a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x22>
    f626:	486a      	ldr	r0, [pc, #424]	; (f7d0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x258>)
    f628:	2800      	cmp	r0, #0
    f62a:	bf18      	it	ne
    f62c:	f3af 8000 	nopne.w
    f630:	b662      	cpsie	i
    f632:	e7bb      	b.n	f5ac <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x34>
    f634:	b124      	cbz	r4, f640 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xc8>
    f636:	2100      	movs	r1, #0
    f638:	f240 70f3 	movw	r0, #2035	; 0x7f3
    f63c:	f3af 8000 	nop.w
    f640:	980c      	ldr	r0, [sp, #48]	; 0x30
    f642:	f81b 0010 	ldrb.w	r0, [fp, r0, lsl #1]
    f646:	2803      	cmp	r0, #3
    f648:	d17e      	bne.n	f748 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1d0>
    f64a:	9a00      	ldr	r2, [sp, #0]
    f64c:	990c      	ldr	r1, [sp, #48]	; 0x30
    f64e:	f892 0020 	ldrb.w	r0, [r2, #32]
    f652:	4288      	cmp	r0, r1
    f654:	bf14      	ite	ne
    f656:	f04f 0a00 	movne.w	sl, #0
    f65a:	f04f 0a01 	moveq.w	sl, #1
    f65e:	f102 0c20 	add.w	ip, r2, #32
    f662:	4683      	mov	fp, r0
    f664:	2220      	movs	r2, #32
    f666:	eb09 1386 	add.w	r3, r9, r6, lsl #6
    f66a:	e003      	b.n	f674 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xfc>
    f66c:	4602      	mov	r2, r0
    f66e:	eb03 0042 	add.w	r0, r3, r2, lsl #1
    f672:	7840      	ldrb	r0, [r0, #1]
    f674:	4288      	cmp	r0, r1
    f676:	d002      	beq.n	f67e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x106>
    f678:	2820      	cmp	r0, #32
    f67a:	d00a      	beq.n	f692 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x11a>
    f67c:	e7f6      	b.n	f66c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xf4>
    f67e:	2820      	cmp	r0, #32
    f680:	d007      	beq.n	f692 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x11a>
    f682:	4583      	cmp	fp, r0
    f684:	d107      	bne.n	f696 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x11e>
    f686:	eb03 004b 	add.w	r0, r3, fp, lsl #1
    f68a:	7840      	ldrb	r0, [r0, #1]
    f68c:	f88c 0000 	strb.w	r0, [ip]
    f690:	e007      	b.n	f6a2 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x12a>
    f692:	4640      	mov	r0, r8
    f694:	e00c      	b.n	f6b0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x138>
    f696:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    f69a:	eb03 0142 	add.w	r1, r3, r2, lsl #1
    f69e:	7840      	ldrb	r0, [r0, #1]
    f6a0:	7048      	strb	r0, [r1, #1]
    f6a2:	b124      	cbz	r4, f6ae <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x136>
    f6a4:	2100      	movs	r1, #0
    f6a6:	f240 40c9 	movw	r0, #1225	; 0x4c9
    f6aa:	f3af 8000 	nop.w
    f6ae:	4638      	mov	r0, r7
    f6b0:	46c3      	mov	fp, r8
    f6b2:	ea10 0f0a 	tst.w	r0, sl
    f6b6:	bf18      	it	ne
    f6b8:	46bb      	movne	fp, r7
    f6ba:	2800      	cmp	r0, #0
    f6bc:	d04e      	beq.n	f75c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e4>
    f6be:	b124      	cbz	r4, f6ca <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x152>
    f6c0:	2100      	movs	r1, #0
    f6c2:	f44f 60ff 	mov.w	r0, #2040	; 0x7f8
    f6c6:	f3af 8000 	nop.w
    f6ca:	4632      	mov	r2, r6
    f6cc:	2001      	movs	r0, #1
    f6ce:	990c      	ldr	r1, [sp, #48]	; 0x30
    f6d0:	f7ff f94a 	bl	e968 <MPSL_IRQ_RADIO_Handler+0xea4>
    f6d4:	b124      	cbz	r4, f6e0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x168>
    f6d6:	2100      	movs	r1, #0
    f6d8:	f640 0001 	movw	r0, #2049	; 0x801
    f6dc:	f3af 8000 	nop.w
    f6e0:	483c      	ldr	r0, [pc, #240]	; (f7d4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x25c>)
    f6e2:	2800      	cmp	r0, #0
    f6e4:	bf18      	it	ne
    f6e6:	f3af 8000 	nopne.w
    f6ea:	f3ef 8010 	mrs	r0, PRIMASK
    f6ee:	b672      	cpsid	i
    f6f0:	9007      	str	r0, [sp, #28]
    f6f2:	b124      	cbz	r4, f6fe <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x186>
    f6f4:	2100      	movs	r1, #0
    f6f6:	f640 0006 	movw	r0, #2054	; 0x806
    f6fa:	f3af 8000 	nop.w
    f6fe:	f895 0029 	ldrb.w	r0, [r5, #41]	; 0x29
    f702:	f88d 0008 	strb.w	r0, [sp, #8]
    f706:	f89d 0008 	ldrb.w	r0, [sp, #8]
    f70a:	b138      	cbz	r0, f71c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1a4>
    f70c:	2c00      	cmp	r4, #0
    f70e:	bf1c      	itt	ne
    f710:	2100      	movne	r1, #0
    f712:	f640 000a 	movwne	r0, #2058	; 0x80a
    f716:	f43f af40 	beq.w	f59a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x22>
    f71a:	e781      	b.n	f620 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xa8>
    f71c:	f1bb 0f00 	cmp.w	fp, #0
    f720:	d009      	beq.n	f736 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1be>
    f722:	f895 002d 	ldrb.w	r0, [r5, #45]	; 0x2d
    f726:	2820      	cmp	r0, #32
    f728:	d105      	bne.n	f736 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1be>
    f72a:	4631      	mov	r1, r6
    f72c:	2002      	movs	r0, #2
    f72e:	f7ff f94d 	bl	e9cc <MPSL_IRQ_RADIO_Handler+0xf08>
    f732:	9006      	str	r0, [sp, #24]
    f734:	b1f8      	cbz	r0, f776 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1fe>
    f736:	b124      	cbz	r4, f742 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1ca>
    f738:	2100      	movs	r1, #0
    f73a:	f640 001e 	movw	r0, #2078	; 0x81e
    f73e:	f3af 8000 	nop.w
    f742:	f895 002c 	ldrb.w	r0, [r5, #44]	; 0x2c
    f746:	e000      	b.n	f74a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1d2>
    f748:	e008      	b.n	f75c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e4>
    f74a:	ea27 0000 	bic.w	r0, r7, r0
    f74e:	f885 002c 	strb.w	r0, [r5, #44]	; 0x2c
    f752:	20ff      	movs	r0, #255	; 0xff
    f754:	f885 0029 	strb.w	r0, [r5, #41]	; 0x29
    f758:	2001      	movs	r0, #1
    f75a:	9008      	str	r0, [sp, #32]
    f75c:	b124      	cbz	r4, f768 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1f0>
    f75e:	2100      	movs	r1, #0
    f760:	f640 0027 	movw	r0, #2087	; 0x827
    f764:	f3af 8000 	nop.w
    f768:	9806      	ldr	r0, [sp, #24]
    f76a:	4e1b      	ldr	r6, [pc, #108]	; (f7d8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x260>)
    f76c:	2802      	cmp	r0, #2
    f76e:	d009      	beq.n	f784 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20c>
    f770:	2801      	cmp	r0, #1
    f772:	d010      	beq.n	f796 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x21e>
    f774:	e014      	b.n	f7a0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x228>
    f776:	b19c      	cbz	r4, f7a0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x228>
    f778:	2100      	movs	r1, #0
    f77a:	f640 0019 	movw	r0, #2073	; 0x819
    f77e:	f3af 8000 	nop.w
    f782:	e7ec      	b.n	f75e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e6>
    f784:	f000 fd8c 	bl	102a0 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    f788:	68a9      	ldr	r1, [r5, #8]
    f78a:	1a08      	subs	r0, r1, r0
    f78c:	f00e ff0b 	bl	1e5a6 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    f790:	6871      	ldr	r1, [r6, #4]
    f792:	b921      	cbnz	r1, f79e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x226>
    f794:	e004      	b.n	f7a0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x228>
    f796:	6871      	ldr	r1, [r6, #4]
    f798:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    f79c:	b101      	cbz	r1, f7a0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x228>
    f79e:	4788      	blx	r1
    f7a0:	9807      	ldr	r0, [sp, #28]
    f7a2:	b148      	cbz	r0, f7b8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x240>
    f7a4:	b124      	cbz	r4, f7b0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x238>
    f7a6:	2100      	movs	r1, #0
    f7a8:	f640 003c 	movw	r0, #2108	; 0x83c
    f7ac:	f3af 8000 	nop.w
    f7b0:	9808      	ldr	r0, [sp, #32]
    f7b2:	b00d      	add	sp, #52	; 0x34
    f7b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f7b8:	4805      	ldr	r0, [pc, #20]	; (f7d0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x258>)
    f7ba:	2800      	cmp	r0, #0
    f7bc:	bf18      	it	ne
    f7be:	f3af 8000 	nopne.w
    f7c2:	b662      	cpsie	i
    f7c4:	e7ee      	b.n	f7a4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x22c>
    f7c6:	0000      	.short	0x0000
    f7c8:	2000143c 	.word	0x2000143c
	...
    f7d8:	2000003c 	.word	0x2000003c

0000f7dc <sym_MLZNDMDYRI6WNTNQ4RIQGPD423CK7RT4YVI5CAI>:
    f7dc:	2820      	cmp	r0, #32
    f7de:	bf24      	itt	cs
    f7e0:	2000      	movcs	r0, #0
    f7e2:	4770      	bxcs	lr
    f7e4:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    f7e8:	4b03      	ldr	r3, [pc, #12]	; (f7f8 <sym_MLZNDMDYRI6WNTNQ4RIQGPD423CK7RT4YVI5CAI+0x1c>)
    f7ea:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
    f7ee:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    f7f2:	6042      	str	r2, [r0, #4]
    f7f4:	2001      	movs	r0, #1
    f7f6:	4770      	bx	lr
    f7f8:	2000103c 	.word	0x2000103c

0000f7fc <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>:
    f7fc:	b510      	push	{r4, lr}
    f7fe:	2820      	cmp	r0, #32
    f800:	d211      	bcs.n	f826 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    f802:	490e      	ldr	r1, [pc, #56]	; (f83c <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x40>)
    f804:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
    f808:	f1a1 0280 	sub.w	r2, r1, #128	; 0x80
    f80c:	eb02 1c83 	add.w	ip, r2, r3, lsl #6
    f810:	f81c 3010 	ldrb.w	r3, [ip, r0, lsl #1]
    f814:	b13b      	cbz	r3, f826 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    f816:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
    f81a:	eb02 1283 	add.w	r2, r2, r3, lsl #6
    f81e:	f812 2010 	ldrb.w	r2, [r2, r0, lsl #1]
    f822:	2a01      	cmp	r2, #1
    f824:	d001      	beq.n	f82a <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2e>
    f826:	2000      	movs	r0, #0
    f828:	bd10      	pop	{r4, pc}
    f82a:	f891 202c 	ldrb.w	r2, [r1, #44]	; 0x2c
    f82e:	4601      	mov	r1, r0
    f830:	2000      	movs	r0, #0
    f832:	f7ff f899 	bl	e968 <MPSL_IRQ_RADIO_Handler+0xea4>
    f836:	2001      	movs	r0, #1
    f838:	bd10      	pop	{r4, pc}
    f83a:	0000      	.short	0x0000
    f83c:	2000143c 	.word	0x2000143c

0000f840 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>:
    f840:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f844:	4e86      	ldr	r6, [pc, #536]	; (fa60 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x220>)
    f846:	4680      	mov	r8, r0
    f848:	f896 002c 	ldrb.w	r0, [r6, #44]	; 0x2c
    f84c:	f1a6 0780 	sub.w	r7, r6, #128	; 0x80
    f850:	eb07 1080 	add.w	r0, r7, r0, lsl #6
    f854:	f810 0018 	ldrb.w	r0, [r0, r8, lsl #1]
    f858:	2800      	cmp	r0, #0
    f85a:	d071      	beq.n	f940 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x100>
    f85c:	f896 902c 	ldrb.w	r9, [r6, #44]	; 0x2c
    f860:	4d80      	ldr	r5, [pc, #512]	; (fa64 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x224>)
    f862:	b125      	cbz	r5, f86e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x2e>
    f864:	2100      	movs	r1, #0
    f866:	f640 30ae 	movw	r0, #2990	; 0xbae
    f86a:	f3af 8000 	nop.w
    f86e:	eb07 1489 	add.w	r4, r7, r9, lsl #6
    f872:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    f876:	2801      	cmp	r0, #1
    f878:	d018      	beq.n	f8ac <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6c>
    f87a:	b2c0      	uxtb	r0, r0
    f87c:	2804      	cmp	r0, #4
    f87e:	bf1c      	itt	ne
    f880:	2805      	cmpne	r0, #5
    f882:	2806      	cmpne	r0, #6
    f884:	d061      	beq.n	f94a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x10a>
    f886:	b12d      	cbz	r5, f894 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x54>
    f888:	f04f 0100 	mov.w	r1, #0
    f88c:	f640 30ba 	movw	r0, #3002	; 0xbba
    f890:	f3af 8000 	nop.w
    f894:	f001 fd76 	bl	11384 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    f898:	b125      	cbz	r5, f8a4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x64>
    f89a:	2100      	movs	r1, #0
    f89c:	f640 30be 	movw	r0, #3006	; 0xbbe
    f8a0:	f3af 8000 	nop.w
    f8a4:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    f8a8:	2801      	cmp	r0, #1
    f8aa:	d1e6      	bne.n	f87a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x3a>
    f8ac:	2401      	movs	r4, #1
    f8ae:	b125      	cbz	r5, f8ba <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7a>
    f8b0:	2100      	movs	r1, #0
    f8b2:	f640 30c5 	movw	r0, #3013	; 0xbc5
    f8b6:	f3af 8000 	nop.w
    f8ba:	2c00      	cmp	r4, #0
    f8bc:	d04b      	beq.n	f956 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x116>
    f8be:	2000      	movs	r0, #0
    f8c0:	f886 0029 	strb.w	r0, [r6, #41]	; 0x29
    f8c4:	b125      	cbz	r5, f8d0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x90>
    f8c6:	2100      	movs	r1, #0
    f8c8:	f640 30ca 	movw	r0, #3018	; 0xbca
    f8cc:	f3af 8000 	nop.w
    f8d0:	f896 b02c 	ldrb.w	fp, [r6, #44]	; 0x2c
    f8d4:	2001      	movs	r0, #1
    f8d6:	ea20 090b 	bic.w	r9, r0, fp
    f8da:	eb07 118b 	add.w	r1, r7, fp, lsl #6
    f8de:	eb07 1089 	add.w	r0, r7, r9, lsl #6
    f8e2:	2240      	movs	r2, #64	; 0x40
    f8e4:	f00e ffbb 	bl	1e85e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    f8e8:	b125      	cbz	r5, f8f4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xb4>
    f8ea:	2100      	movs	r1, #0
    f8ec:	f240 505e 	movw	r0, #1374	; 0x55e
    f8f0:	f3af 8000 	nop.w
    f8f4:	eb09 0049 	add.w	r0, r9, r9, lsl #1
    f8f8:	eb00 0a06 	add.w	sl, r0, r6
    f8fc:	eb0b 004b 	add.w	r0, fp, fp, lsl #1
    f900:	4430      	add	r0, r6
    f902:	8c01      	ldrh	r1, [r0, #32]
    f904:	f8aa 1020 	strh.w	r1, [sl, #32]
    f908:	f890 0022 	ldrb.w	r0, [r0, #34]	; 0x22
    f90c:	f88a 0022 	strb.w	r0, [sl, #34]	; 0x22
    f910:	b125      	cbz	r5, f91c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xdc>
    f912:	2100      	movs	r1, #0
    f914:	f240 5062 	movw	r0, #1378	; 0x562
    f918:	f3af 8000 	nop.w
    f91c:	f896 0029 	ldrb.w	r0, [r6, #41]	; 0x29
    f920:	f88d 0000 	strb.w	r0, [sp]
    f924:	f89d 0000 	ldrb.w	r0, [sp]
    f928:	b1e0      	cbz	r0, f964 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x124>
    f92a:	2d00      	cmp	r5, #0
    f92c:	bf1c      	itt	ne
    f92e:	2100      	movne	r1, #0
    f930:	f44f 603d 	movne.w	r0, #3024	; 0xbd0
    f934:	d0bb      	beq.n	f8ae <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    f936:	bf00      	nop
    f938:	f3af 8000 	nop.w
    f93c:	e7b7      	b.n	f8ae <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    f93e:	e7ff      	b.n	f940 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x100>
    f940:	f640 31a5 	movw	r1, #2981	; 0xba5
    f944:	2070      	movs	r0, #112	; 0x70
    f946:	f001 fbe3 	bl	11110 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    f94a:	464a      	mov	r2, r9
    f94c:	4641      	mov	r1, r8
    f94e:	2001      	movs	r0, #1
    f950:	f7ff f80a 	bl	e968 <MPSL_IRQ_RADIO_Handler+0xea4>
    f954:	e7a0      	b.n	f898 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x58>
    f956:	4844      	ldr	r0, [pc, #272]	; (fa68 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x228>)
    f958:	2800      	cmp	r0, #0
    f95a:	bf18      	it	ne
    f95c:	f3af 8000 	nopne.w
    f960:	b662      	cpsie	i
    f962:	e7ac      	b.n	f8be <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7e>
    f964:	b125      	cbz	r5, f970 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x130>
    f966:	2100      	movs	r1, #0
    f968:	f640 30d4 	movw	r0, #3028	; 0xbd4
    f96c:	f3af 8000 	nop.w
    f970:	f89a 3021 	ldrb.w	r3, [sl, #33]	; 0x21
    f974:	f10a 0121 	add.w	r1, sl, #33	; 0x21
    f978:	4640      	mov	r0, r8
    f97a:	461c      	mov	r4, r3
    f97c:	f04f 0b20 	mov.w	fp, #32
    f980:	eb07 1289 	add.w	r2, r7, r9, lsl #6
    f984:	f10a 0a22 	add.w	sl, sl, #34	; 0x22
    f988:	e004      	b.n	f994 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x154>
    f98a:	46a3      	mov	fp, r4
    f98c:	eb02 0c4b 	add.w	ip, r2, fp, lsl #1
    f990:	f89c 4001 	ldrb.w	r4, [ip, #1]
    f994:	4284      	cmp	r4, r0
    f996:	d002      	beq.n	f99e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x15e>
    f998:	2c20      	cmp	r4, #32
    f99a:	d02b      	beq.n	f9f4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1b4>
    f99c:	e7f5      	b.n	f98a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x14a>
    f99e:	2c20      	cmp	r4, #32
    f9a0:	d028      	beq.n	f9f4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1b4>
    f9a2:	42a3      	cmp	r3, r4
    f9a4:	d104      	bne.n	f9b0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x170>
    f9a6:	eb02 0043 	add.w	r0, r2, r3, lsl #1
    f9aa:	7840      	ldrb	r0, [r0, #1]
    f9ac:	7008      	strb	r0, [r1, #0]
    f9ae:	e005      	b.n	f9bc <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x17c>
    f9b0:	eb02 0044 	add.w	r0, r2, r4, lsl #1
    f9b4:	eb02 014b 	add.w	r1, r2, fp, lsl #1
    f9b8:	7840      	ldrb	r0, [r0, #1]
    f9ba:	7048      	strb	r0, [r1, #1]
    f9bc:	f1ba 0f00 	cmp.w	sl, #0
    f9c0:	d011      	beq.n	f9e6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a6>
    f9c2:	b125      	cbz	r5, f9ce <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x18e>
    f9c4:	2100      	movs	r1, #0
    f9c6:	f240 40c1 	movw	r0, #1217	; 0x4c1
    f9ca:	f3af 8000 	nop.w
    f9ce:	f89a 0000 	ldrb.w	r0, [sl]
    f9d2:	42a0      	cmp	r0, r4
    f9d4:	d107      	bne.n	f9e6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a6>
    f9d6:	b125      	cbz	r5, f9e2 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a2>
    f9d8:	2100      	movs	r1, #0
    f9da:	f240 40c4 	movw	r0, #1220	; 0x4c4
    f9de:	f3af 8000 	nop.w
    f9e2:	f88a b000 	strb.w	fp, [sl]
    f9e6:	b15d      	cbz	r5, fa00 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1c0>
    f9e8:	2100      	movs	r1, #0
    f9ea:	f240 40c9 	movw	r0, #1225	; 0x4c9
    f9ee:	f3af 8000 	nop.w
    f9f2:	e000      	b.n	f9f6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1b6>
    f9f4:	b125      	cbz	r5, fa00 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1c0>
    f9f6:	2100      	movs	r1, #0
    f9f8:	f640 30d8 	movw	r0, #3032	; 0xbd8
    f9fc:	f3af 8000 	nop.w
    fa00:	481a      	ldr	r0, [pc, #104]	; (fa6c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x22c>)
    fa02:	2800      	cmp	r0, #0
    fa04:	bf18      	it	ne
    fa06:	f3af 8000 	nopne.w
    fa0a:	f3ef 8410 	mrs	r4, PRIMASK
    fa0e:	b672      	cpsid	i
    fa10:	f896 0029 	ldrb.w	r0, [r6, #41]	; 0x29
    fa14:	f88d 0000 	strb.w	r0, [sp]
    fa18:	f89d 0000 	ldrb.w	r0, [sp]
    fa1c:	b138      	cbz	r0, fa2e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1ee>
    fa1e:	2d00      	cmp	r5, #0
    fa20:	bf1c      	itt	ne
    fa22:	2100      	movne	r1, #0
    fa24:	f640 30de 	movwne	r0, #3038	; 0xbde
    fa28:	f43f af41 	beq.w	f8ae <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    fa2c:	e784      	b.n	f938 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xf8>
    fa2e:	f886 902c 	strb.w	r9, [r6, #44]	; 0x2c
    fa32:	20ff      	movs	r0, #255	; 0xff
    fa34:	f886 0029 	strb.w	r0, [r6, #41]	; 0x29
    fa38:	b154      	cbz	r4, fa50 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x210>
    fa3a:	2d00      	cmp	r5, #0
    fa3c:	bf08      	it	eq
    fa3e:	e8bd 8ff8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fa42:	2100      	movs	r1, #0
    fa44:	f640 30eb 	movw	r0, #3051	; 0xbeb
    fa48:	f3af 8000 	nop.w
    fa4c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fa50:	4805      	ldr	r0, [pc, #20]	; (fa68 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x228>)
    fa52:	2800      	cmp	r0, #0
    fa54:	bf18      	it	ne
    fa56:	f3af 8000 	nopne.w
    fa5a:	b662      	cpsie	i
    fa5c:	e7ed      	b.n	fa3a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1fa>
    fa5e:	0000      	.short	0x0000
    fa60:	2000143c 	.word	0x2000143c
	...

0000fa70 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>:
    fa70:	b570      	push	{r4, r5, r6, lr}
    fa72:	460d      	mov	r5, r1
    fa74:	4606      	mov	r6, r0
    fa76:	f001 fac1 	bl	10ffc <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    fa7a:	480f      	ldr	r0, [pc, #60]	; (fab8 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x48>)
    fa7c:	f890 202c 	ldrb.w	r2, [r0, #44]	; 0x2c
    fa80:	2400      	movs	r4, #0
    fa82:	3880      	subs	r0, #128	; 0x80
    fa84:	eb00 1082 	add.w	r0, r0, r2, lsl #6
    fa88:	f810 1014 	ldrb.w	r1, [r0, r4, lsl #1]
    fa8c:	b129      	cbz	r1, fa9a <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x2a>
    fa8e:	1c61      	adds	r1, r4, #1
    fa90:	b2cc      	uxtb	r4, r1
    fa92:	2c20      	cmp	r4, #32
    fa94:	d3f8      	bcc.n	fa88 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x18>
    fa96:	2020      	movs	r0, #32
    fa98:	bd70      	pop	{r4, r5, r6, pc}
    fa9a:	4808      	ldr	r0, [pc, #32]	; (fabc <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x4c>)
    fa9c:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    faa0:	f840 6021 	str.w	r6, [r0, r1, lsl #2]
    faa4:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    faa8:	4621      	mov	r1, r4
    faaa:	6045      	str	r5, [r0, #4]
    faac:	2001      	movs	r0, #1
    faae:	f7fe ff5b 	bl	e968 <MPSL_IRQ_RADIO_Handler+0xea4>
    fab2:	4620      	mov	r0, r4
    fab4:	bd70      	pop	{r4, r5, r6, pc}
    fab6:	0000      	.short	0x0000
    fab8:	2000143c 	.word	0x2000143c
    fabc:	2000103c 	.word	0x2000103c

0000fac0 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>:
    fac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    fac4:	b083      	sub	sp, #12
    fac6:	f000 fbeb 	bl	102a0 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    faca:	4605      	mov	r5, r0
    facc:	f000 feba 	bl	10844 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    fad0:	4c84      	ldr	r4, [pc, #528]	; (fce4 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x224>)
    fad2:	6860      	ldr	r0, [r4, #4]
    fad4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    fad8:	bf1c      	itt	ne
    fada:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    fade:	6060      	strne	r0, [r4, #4]
    fae0:	7fa0      	ldrb	r0, [r4, #30]
    fae2:	f8df 9204 	ldr.w	r9, [pc, #516]	; fce8 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x228>
    fae6:	b990      	cbnz	r0, fb0e <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x4e>
    fae8:	e9d4 1002 	ldrd	r1, r0, [r4, #8]
    faec:	1a40      	subs	r0, r0, r1
    faee:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    faf2:	f44f 710c 	mov.w	r1, #560	; 0x230
    faf6:	f00e fd83 	bl	1e600 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    fafa:	68e1      	ldr	r1, [r4, #12]
    fafc:	4408      	add	r0, r1
    fafe:	1a28      	subs	r0, r5, r0
    fb00:	0200      	lsls	r0, r0, #8
    fb02:	17c1      	asrs	r1, r0, #31
    fb04:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    fb08:	1200      	asrs	r0, r0, #8
    fb0a:	0fc0      	lsrs	r0, r0, #31
    fb0c:	d012      	beq.n	fb34 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x74>
    fb0e:	7e60      	ldrb	r0, [r4, #25]
    fb10:	b320      	cbz	r0, fb5c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x9c>
    fb12:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
    fb16:	f88d 0000 	strb.w	r0, [sp]
    fb1a:	f89d 0000 	ldrb.w	r0, [sp]
    fb1e:	b1e8      	cbz	r0, fb5c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x9c>
    fb20:	f000 fcec 	bl	104fc <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>
    fb24:	f894 0028 	ldrb.w	r0, [r4, #40]	; 0x28
    fb28:	b1f0      	cbz	r0, fb68 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xa8>
    fb2a:	f240 31f5 	movw	r1, #1013	; 0x3f5
    fb2e:	2070      	movs	r0, #112	; 0x70
    fb30:	f001 faee 	bl	11110 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    fb34:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    fb38:	f894 102d 	ldrb.w	r1, [r4, #45]	; 0x2d
    fb3c:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    fb40:	eb09 0080 	add.w	r0, r9, r0, lsl #2
    fb44:	6840      	ldr	r0, [r0, #4]
    fb46:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    fb4a:	f859 2021 	ldr.w	r2, [r9, r1, lsl #2]
    fb4e:	2108      	movs	r1, #8
    fb50:	4790      	blx	r2
    fb52:	f240 31dd 	movw	r1, #989	; 0x3dd
    fb56:	2070      	movs	r0, #112	; 0x70
    fb58:	f001 fada 	bl	11110 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    fb5c:	1ce8      	adds	r0, r5, #3
    fb5e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    fb62:	f000 fbc3 	bl	102ec <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    fb66:	e7dd      	b.n	fb24 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x64>
    fb68:	2001      	movs	r0, #1
    fb6a:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
    fb6e:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    fb72:	2820      	cmp	r0, #32
    fb74:	d021      	beq.n	fbba <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xfa>
    fb76:	f894 802d 	ldrb.w	r8, [r4, #45]	; 0x2d
    fb7a:	2020      	movs	r0, #32
    fb7c:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
    fb80:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
    fb84:	2000      	movs	r0, #0
    fb86:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    fb8a:	f884 0027 	strb.w	r0, [r4, #39]	; 0x27
    fb8e:	6020      	str	r0, [r4, #0]
    fb90:	f000 ff4c 	bl	10a2c <sym_3RLTHYPNUGF2GJUCXUGLNFS6UK7UWZOBB6PWVDI>
    fb94:	7720      	strb	r0, [r4, #28]
    fb96:	f894 602c 	ldrb.w	r6, [r4, #44]	; 0x2c
    fb9a:	eb06 0046 	add.w	r0, r6, r6, lsl #1
    fb9e:	1907      	adds	r7, r0, r4
    fba0:	f897 0020 	ldrb.w	r0, [r7, #32]
    fba4:	2820      	cmp	r0, #32
    fba6:	d058      	beq.n	fc5a <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x19a>
    fba8:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    fbac:	eb09 0980 	add.w	r9, r9, r0, lsl #2
    fbb0:	f899 001a 	ldrb.w	r0, [r9, #26]
    fbb4:	2801      	cmp	r0, #1
    fbb6:	d005      	beq.n	fbc4 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x104>
    fbb8:	e04f      	b.n	fc5a <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x19a>
    fbba:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
    fbbe:	2070      	movs	r0, #112	; 0x70
    fbc0:	f001 faa6 	bl	11110 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    fbc4:	f8b9 b016 	ldrh.w	fp, [r9, #22]
    fbc8:	aa01      	add	r2, sp, #4
    fbca:	4669      	mov	r1, sp
    fbcc:	4658      	mov	r0, fp
    fbce:	f000 f9fd 	bl	ffcc <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    fbd2:	f000 ff25 	bl	10a20 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
    fbd6:	f000 f9dd 	bl	ff94 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    fbda:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    fbde:	2820      	cmp	r0, #32
    fbe0:	d004      	beq.n	fbec <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x12c>
    fbe2:	68e0      	ldr	r0, [r4, #12]
    fbe4:	1d40      	adds	r0, r0, #5
    fbe6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    fbea:	e01d      	b.n	fc28 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x168>
    fbec:	f105 0a09 	add.w	sl, r5, #9
    fbf0:	f1bb 0f00 	cmp.w	fp, #0
    fbf4:	d016      	beq.n	fc24 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x164>
    fbf6:	f001 fa13 	bl	11020 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    fbfa:	b998      	cbnz	r0, fc24 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x164>
    fbfc:	f001 f8de 	bl	10dbc <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    fc00:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    fc04:	bf08      	it	eq
    fc06:	200d      	moveq	r0, #13
    fc08:	d00b      	beq.n	fc22 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x162>
    fc0a:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    fc0e:	3856      	subs	r0, #86	; 0x56
    fc10:	bf08      	it	eq
    fc12:	201c      	moveq	r0, #28
    fc14:	d005      	beq.n	fc22 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x162>
    fc16:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    fc1a:	389f      	subs	r0, #159	; 0x9f
    fc1c:	bf14      	ite	ne
    fc1e:	2000      	movne	r0, #0
    fc20:	2032      	moveq	r0, #50	; 0x32
    fc22:	4482      	add	sl, r0
    fc24:	f02a 407f 	bic.w	r0, sl, #4278190080	; 0xff000000
    fc28:	f8d9 2008 	ldr.w	r2, [r9, #8]
    fc2c:	1a81      	subs	r1, r0, r2
    fc2e:	0209      	lsls	r1, r1, #8
    fc30:	17cb      	asrs	r3, r1, #31
    fc32:	eb01 6113 	add.w	r1, r1, r3, lsr #24
    fc36:	1209      	asrs	r1, r1, #8
    fc38:	2900      	cmp	r1, #0
    fc3a:	dc0e      	bgt.n	fc5a <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x19a>
    fc3c:	f109 0308 	add.w	r3, r9, #8
    fc40:	4282      	cmp	r2, r0
    fc42:	d202      	bcs.n	fc4a <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x18a>
    fc44:	6899      	ldr	r1, [r3, #8]
    fc46:	1e49      	subs	r1, r1, #1
    fc48:	6099      	str	r1, [r3, #8]
    fc4a:	e9d3 2100 	ldrd	r2, r1, [r3]
    fc4e:	1a89      	subs	r1, r1, r2
    fc50:	6018      	str	r0, [r3, #0]
    fc52:	4408      	add	r0, r1
    fc54:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    fc58:	6058      	str	r0, [r3, #4]
    fc5a:	4631      	mov	r1, r6
    fc5c:	2001      	movs	r0, #1
    fc5e:	f7fe feb5 	bl	e9cc <MPSL_IRQ_RADIO_Handler+0xf08>
    fc62:	ea5f 0900 	movs.w	r9, r0
    fc66:	d0f8      	beq.n	fc5a <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x19a>
    fc68:	4820      	ldr	r0, [pc, #128]	; (fcec <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x22c>)
    fc6a:	eb00 1086 	add.w	r0, r0, r6, lsl #6
    fc6e:	f810 0018 	ldrb.w	r0, [r0, r8, lsl #1]
    fc72:	2802      	cmp	r0, #2
    fc74:	d104      	bne.n	fc80 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1c0>
    fc76:	4632      	mov	r2, r6
    fc78:	4641      	mov	r1, r8
    fc7a:	2006      	movs	r0, #6
    fc7c:	f7fe fe74 	bl	e968 <MPSL_IRQ_RADIO_Handler+0xea4>
    fc80:	20ff      	movs	r0, #255	; 0xff
    fc82:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
    fc86:	f897 0021 	ldrb.w	r0, [r7, #33]	; 0x21
    fc8a:	4e19      	ldr	r6, [pc, #100]	; (fcf0 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x230>)
    fc8c:	2820      	cmp	r0, #32
    fc8e:	bf1c      	itt	ne
    fc90:	7870      	ldrbne	r0, [r6, #1]
    fc92:	f001 fb11 	blne	112b8 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    fc96:	7f20      	ldrb	r0, [r4, #28]
    fc98:	b120      	cbz	r0, fca4 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1e4>
    fc9a:	f000 fea3 	bl	109e4 <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ>
    fc9e:	2000      	movs	r0, #0
    fca0:	7720      	strb	r0, [r4, #28]
    fca2:	7760      	strb	r0, [r4, #29]
    fca4:	f1b9 0f02 	cmp.w	r9, #2
    fca8:	d011      	beq.n	fcce <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x20e>
    fcaa:	f1b9 0f01 	cmp.w	r9, #1
    fcae:	bf1c      	itt	ne
    fcb0:	b003      	addne	sp, #12
    fcb2:	e8bd 8ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fcb6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    fcba:	6871      	ldr	r1, [r6, #4]
    fcbc:	2900      	cmp	r1, #0
    fcbe:	bf04      	itt	eq
    fcc0:	b003      	addeq	sp, #12
    fcc2:	e8bd 8ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fcc6:	b003      	add	sp, #12
    fcc8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    fccc:	4708      	bx	r1
    fcce:	68a0      	ldr	r0, [r4, #8]
    fcd0:	1b40      	subs	r0, r0, r5
    fcd2:	f00e fc68 	bl	1e5a6 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    fcd6:	6871      	ldr	r1, [r6, #4]
    fcd8:	2900      	cmp	r1, #0
    fcda:	d1f4      	bne.n	fcc6 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x206>
    fcdc:	b003      	add	sp, #12
    fcde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fce2:	0000      	.short	0x0000
    fce4:	2000143c 	.word	0x2000143c
    fce8:	2000103c 	.word	0x2000103c
    fcec:	200013bc 	.word	0x200013bc
    fcf0:	2000003c 	.word	0x2000003c

0000fcf4 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>:
    fcf4:	b570      	push	{r4, r5, r6, lr}
    fcf6:	4c42      	ldr	r4, [pc, #264]	; (fe00 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x10c>)
    fcf8:	4605      	mov	r5, r0
    fcfa:	b082      	sub	sp, #8
    fcfc:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    fd00:	2820      	cmp	r0, #32
    fd02:	d008      	beq.n	fd16 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x22>
    fd04:	6860      	ldr	r0, [r4, #4]
    fd06:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    fd0a:	d009      	beq.n	fd20 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x2c>
    fd0c:	f640 21d9 	movw	r1, #2777	; 0xad9
    fd10:	2070      	movs	r0, #112	; 0x70
    fd12:	f001 f9fd 	bl	11110 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    fd16:	f640 21d8 	movw	r1, #2776	; 0xad8
    fd1a:	2070      	movs	r0, #112	; 0x70
    fd1c:	f001 f9f8 	bl	11110 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    fd20:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    fd24:	4937      	ldr	r1, [pc, #220]	; (fe04 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x110>)
    fd26:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    fd2a:	eb01 0680 	add.w	r6, r1, r0, lsl #2
    fd2e:	68b0      	ldr	r0, [r6, #8]
    fd30:	f00e fc39 	bl	1e5a6 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    fd34:	4602      	mov	r2, r0
    fd36:	8af0      	ldrh	r0, [r6, #22]
    fd38:	7d31      	ldrb	r1, [r6, #20]
    fd3a:	4b33      	ldr	r3, [pc, #204]	; (fe08 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x114>)
    fd3c:	4408      	add	r0, r1
    fd3e:	1c40      	adds	r0, r0, #1
    fd40:	1811      	adds	r1, r2, r0
    fd42:	429a      	cmp	r2, r3
    fd44:	d817      	bhi.n	fd76 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x82>
    fd46:	4a31      	ldr	r2, [pc, #196]	; (fe0c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x118>)
    fd48:	4290      	cmp	r0, r2
    fd4a:	dc1b      	bgt.n	fd84 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x90>
    fd4c:	f1c2 0c00 	rsb	ip, r2, #0
    fd50:	4560      	cmp	r0, ip
    fd52:	db1e      	blt.n	fd92 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x9e>
    fd54:	0056      	lsls	r6, r2, #1
    fd56:	428e      	cmp	r6, r1
    fd58:	bfdc      	itt	le
    fd5a:	f501 01f7 	addle.w	r1, r1, #8093696	; 0x7b8000
    fd5e:	f1a1 51f8 	suble.w	r1, r1, #520093696	; 0x1f000000
    fd62:	dd05      	ble.n	fd70 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x7c>
    fd64:	2900      	cmp	r1, #0
    fd66:	bfbc      	itt	lt
    fd68:	f5a1 01f7 	sublt.w	r1, r1, #8093696	; 0x7b8000
    fd6c:	f101 51f8 	addlt.w	r1, r1, #520093696	; 0x1f000000
    fd70:	1948      	adds	r0, r1, r5
    fd72:	4299      	cmp	r1, r3
    fd74:	d904      	bls.n	fd80 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x8c>
    fd76:	f240 519e 	movw	r1, #1438	; 0x59e
    fd7a:	2070      	movs	r0, #112	; 0x70
    fd7c:	f001 f9c8 	bl	11110 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    fd80:	4295      	cmp	r5, r2
    fd82:	dd04      	ble.n	fd8e <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x9a>
    fd84:	f240 519f 	movw	r1, #1439	; 0x59f
    fd88:	2070      	movs	r0, #112	; 0x70
    fd8a:	f001 f9c1 	bl	11110 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    fd8e:	4565      	cmp	r5, ip
    fd90:	da04      	bge.n	fd9c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xa8>
    fd92:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
    fd96:	2070      	movs	r0, #112	; 0x70
    fd98:	f001 f9ba 	bl	11110 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    fd9c:	4286      	cmp	r6, r0
    fd9e:	bfdc      	itt	le
    fda0:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    fda4:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    fda8:	dd05      	ble.n	fdb6 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xc2>
    fdaa:	2800      	cmp	r0, #0
    fdac:	bfbc      	itt	lt
    fdae:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    fdb2:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    fdb6:	aa01      	add	r2, sp, #4
    fdb8:	4669      	mov	r1, sp
    fdba:	f000 f907 	bl	ffcc <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    fdbe:	f89d 0004 	ldrb.w	r0, [sp, #4]
    fdc2:	280f      	cmp	r0, #15
    fdc4:	bf8c      	ite	hi
    fdc6:	2001      	movhi	r0, #1
    fdc8:	2000      	movls	r0, #0
    fdca:	9900      	ldr	r1, [sp, #0]
    fdcc:	4408      	add	r0, r1
    fdce:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    fdd2:	6061      	str	r1, [r4, #4]
    fdd4:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
    fdd8:	f88d 0000 	strb.w	r0, [sp]
    fddc:	f89d 0000 	ldrb.w	r0, [sp]
    fde0:	2800      	cmp	r0, #0
    fde2:	bf04      	itt	eq
    fde4:	b002      	addeq	sp, #8
    fde6:	bd70      	popeq	{r4, r5, r6, pc}
    fde8:	2005      	movs	r0, #5
    fdea:	f000 fc05 	bl	105f8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    fdee:	2800      	cmp	r0, #0
    fdf0:	bf1c      	itt	ne
    fdf2:	b002      	addne	sp, #8
    fdf4:	bd70      	popne	{r4, r5, r6, pc}
    fdf6:	f44f 612e 	mov.w	r1, #2784	; 0xae0
    fdfa:	2070      	movs	r0, #112	; 0x70
    fdfc:	f001 f988 	bl	11110 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    fe00:	2000143c 	.word	0x2000143c
    fe04:	2000103c 	.word	0x2000103c
    fe08:	1e847fff 	.word	0x1e847fff
    fe0c:	0f424000 	.word	0x0f424000

0000fe10 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>:
    fe10:	b570      	push	{r4, r5, r6, lr}
    fe12:	4c1c      	ldr	r4, [pc, #112]	; (fe84 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x74>)
    fe14:	2120      	movs	r1, #32
    fe16:	f884 1020 	strb.w	r1, [r4, #32]
    fe1a:	f884 1021 	strb.w	r1, [r4, #33]	; 0x21
    fe1e:	f884 1022 	strb.w	r1, [r4, #34]	; 0x22
    fe22:	2000      	movs	r0, #0
    fe24:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    fe28:	f884 102d 	strb.w	r1, [r4, #45]	; 0x2d
    fe2c:	1e42      	subs	r2, r0, #1
    fe2e:	e9c4 0200 	strd	r0, r2, [r4]
    fe32:	77a0      	strb	r0, [r4, #30]
    fe34:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    fe38:	f884 0027 	strb.w	r0, [r4, #39]	; 0x27
    fe3c:	7720      	strb	r0, [r4, #28]
    fe3e:	7760      	strb	r0, [r4, #29]
    fe40:	f884 102e 	strb.w	r1, [r4, #46]	; 0x2e
    fe44:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
    fe48:	f884 002b 	strb.w	r0, [r4, #43]	; 0x2b
    fe4c:	f1a4 0182 	sub.w	r1, r4, #130	; 0x82
    fe50:	2210      	movs	r2, #16
    fe52:	7088      	strb	r0, [r1, #2]
    fe54:	f801 0f04 	strb.w	r0, [r1, #4]!
    fe58:	1e52      	subs	r2, r2, #1
    fe5a:	d1fa      	bne.n	fe52 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x42>
    fe5c:	f000 fdf0 	bl	10a40 <sym_476ZEBCLN4VRBESFX6B7F6TMVQVNPVCGXRXSHHY>
    fe60:	4d09      	ldr	r5, [pc, #36]	; (fe88 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x78>)
    fe62:	2601      	movs	r6, #1
    fe64:	f884 6028 	strb.w	r6, [r4, #40]	; 0x28
    fe68:	20ff      	movs	r0, #255	; 0xff
    fe6a:	7028      	strb	r0, [r5, #0]
    fe6c:	4807      	ldr	r0, [pc, #28]	; (fe8c <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x7c>)
    fe6e:	f001 fa05 	bl	1127c <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    fe72:	7068      	strb	r0, [r5, #1]
    fe74:	f001 fa70 	bl	11358 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>
    fe78:	60a8      	str	r0, [r5, #8]
    fe7a:	f000 fd6b 	bl	10954 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>
    fe7e:	f884 602f 	strb.w	r6, [r4, #47]	; 0x2f
    fe82:	bd70      	pop	{r4, r5, r6, pc}
    fe84:	2000143c 	.word	0x2000143c
    fe88:	2000003c 	.word	0x2000003c
    fe8c:	0000e891 	.word	0x0000e891

0000fe90 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ>:
    fe90:	b570      	push	{r4, r5, r6, lr}
    fe92:	4605      	mov	r5, r0
    fe94:	2001      	movs	r0, #1
    fe96:	fa00 f405 	lsl.w	r4, r0, r5
    fe9a:	460e      	mov	r6, r1
    fe9c:	2a00      	cmp	r2, #0
    fe9e:	bf08      	it	eq
    fea0:	4808      	ldreq	r0, [pc, #32]	; (fec4 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ+0x34>)
    fea2:	d00c      	beq.n	febe <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ+0x2e>
    fea4:	2000      	movs	r0, #0
    fea6:	f000 fd3b 	bl	10920 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>
    feaa:	00e9      	lsls	r1, r5, #3
    feac:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    feb0:	f501 31f8 	add.w	r1, r1, #126976	; 0x1f000
    feb4:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
    feb8:	f8c1 6514 	str.w	r6, [r1, #1300]	; 0x514
    febc:	4802      	ldr	r0, [pc, #8]	; (fec8 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ+0x38>)
    febe:	6004      	str	r4, [r0, #0]
    fec0:	bd70      	pop	{r4, r5, r6, pc}
    fec2:	0000      	.short	0x0000
    fec4:	4001f508 	.word	0x4001f508
    fec8:	4001f504 	.word	0x4001f504

0000fecc <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>:
    fecc:	b500      	push	{lr}
    fece:	b083      	sub	sp, #12
    fed0:	4668      	mov	r0, sp
    fed2:	f000 f9eb 	bl	102ac <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ>
    fed6:	9800      	ldr	r0, [sp, #0]
    fed8:	f00e fb65 	bl	1e5a6 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    fedc:	9a01      	ldr	r2, [sp, #4]
    fede:	4b03      	ldr	r3, [pc, #12]	; (feec <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q+0x20>)
    fee0:	2100      	movs	r1, #0
    fee2:	fbe2 0103 	umlal	r0, r1, r2, r3
    fee6:	b003      	add	sp, #12
    fee8:	bd00      	pop	{pc}
    feea:	0000      	.short	0x0000
    feec:	1e848000 	.word	0x1e848000

0000fef0 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ>:
    fef0:	b570      	push	{r4, r5, r6, lr}
    fef2:	4606      	mov	r6, r0
    fef4:	b082      	sub	sp, #8
    fef6:	461d      	mov	r5, r3
    fef8:	4610      	mov	r0, r2
    fefa:	f00e fb54 	bl	1e5a6 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    fefe:	4604      	mov	r4, r0
    ff00:	4668      	mov	r0, sp
    ff02:	f000 f9d3 	bl	102ac <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ>
    ff06:	4920      	ldr	r1, [pc, #128]	; (ff88 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x98>)
    ff08:	9801      	ldr	r0, [sp, #4]
    ff0a:	fba0 0201 	umull	r0, r2, r0, r1
    ff0e:	1a30      	subs	r0, r6, r0
    ff10:	bf44      	itt	mi
    ff12:	f5a0 00f7 	submi.w	r0, r0, #8093696	; 0x7b8000
    ff16:	f110 50f8 	addsmi.w	r0, r0, #520093696	; 0x1f000000
    ff1a:	d504      	bpl.n	ff26 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x36>
    ff1c:	f44f 6140 	mov.w	r1, #3072	; 0xc00
    ff20:	2070      	movs	r0, #112	; 0x70
    ff22:	f001 f8f5 	bl	11110 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    ff26:	4288      	cmp	r0, r1
    ff28:	db04      	blt.n	ff34 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x44>
    ff2a:	f640 4101 	movw	r1, #3073	; 0xc01
    ff2e:	2070      	movs	r0, #112	; 0x70
    ff30:	f001 f8ee 	bl	11110 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    ff34:	4a15      	ldr	r2, [pc, #84]	; (ff8c <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x9c>)
    ff36:	1a21      	subs	r1, r4, r0
    ff38:	2300      	movs	r3, #0
    ff3a:	1a8a      	subs	r2, r1, r2
    ff3c:	f173 0200 	sbcs.w	r2, r3, #0
    ff40:	d318      	bcc.n	ff74 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x84>
    ff42:	f8df c048 	ldr.w	ip, [pc, #72]	; ff8c <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x9c>
    ff46:	1b02      	subs	r2, r0, r4
    ff48:	ebb2 0c0c 	subs.w	ip, r2, ip
    ff4c:	f173 0300 	sbcs.w	r3, r3, #0
    ff50:	d310      	bcc.n	ff74 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x84>
    ff52:	4b0f      	ldr	r3, [pc, #60]	; (ff90 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0xa0>)
    ff54:	428b      	cmp	r3, r1
    ff56:	bf3e      	ittt	cc
    ff58:	f5c0 2090 	rsbcc	r0, r0, #294912	; 0x48000
    ff5c:	f100 50f4 	addcc.w	r0, r0, #511705088	; 0x1e800000
    ff60:	1901      	addcc	r1, r0, r4
    ff62:	d307      	bcc.n	ff74 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x84>
    ff64:	4293      	cmp	r3, r2
    ff66:	d20a      	bcs.n	ff7e <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x8e>
    ff68:	f5c4 2190 	rsb	r1, r4, #294912	; 0x48000
    ff6c:	f101 51f4 	add.w	r1, r1, #511705088	; 0x1e800000
    ff70:	4408      	add	r0, r1
    ff72:	4241      	negs	r1, r0
    ff74:	f101 000f 	add.w	r0, r1, #15
    ff78:	b002      	add	sp, #8
    ff7a:	1a28      	subs	r0, r5, r0
    ff7c:	bd70      	pop	{r4, r5, r6, pc}
    ff7e:	f640 21fa 	movw	r1, #2810	; 0xafa
    ff82:	2070      	movs	r0, #112	; 0x70
    ff84:	f001 f8c4 	bl	11110 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    ff88:	1e848000 	.word	0x1e848000
    ff8c:	0f424000 	.word	0x0f424000
    ff90:	1e847fff 	.word	0x1e847fff

0000ff94 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>:
    ff94:	0b41      	lsrs	r1, r0, #13
    ff96:	f248 6237 	movw	r2, #34359	; 0x8637
    ff9a:	4351      	muls	r1, r2
    ff9c:	0c0a      	lsrs	r2, r1, #16
    ff9e:	4b09      	ldr	r3, [pc, #36]	; (ffc4 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x30>)
    ffa0:	0251      	lsls	r1, r2, #9
    ffa2:	fb02 0203 	mla	r2, r2, r3, r0
    ffa6:	4808      	ldr	r0, [pc, #32]	; (ffc8 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x34>)
    ffa8:	4350      	muls	r0, r2
    ffaa:	f500 3086 	add.w	r0, r0, #68608	; 0x10c00
    ffae:	306e      	adds	r0, #110	; 0x6e
    ffb0:	0d40      	lsrs	r0, r0, #21
    ffb2:	425b      	negs	r3, r3
    ffb4:	fb10 f303 	smulbb	r3, r0, r3
    ffb8:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
    ffbc:	bf88      	it	hi
    ffbe:	1c49      	addhi	r1, r1, #1
    ffc0:	4408      	add	r0, r1
    ffc2:	4770      	bx	lr
    ffc4:	ffffc2f7 	.word	0xffffc2f7
    ffc8:	00010c6f 	.word	0x00010c6f

0000ffcc <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>:
    ffcc:	0b43      	lsrs	r3, r0, #13
    ffce:	f248 6c37 	movw	ip, #34359	; 0x8637
    ffd2:	fb03 f30c 	mul.w	r3, r3, ip
    ffd6:	b430      	push	{r4, r5}
    ffd8:	0c1b      	lsrs	r3, r3, #16
    ffda:	f8df c044 	ldr.w	ip, [pc, #68]	; 10020 <CONFIG_PM_SRAM_SIZE+0x20>
    ffde:	025c      	lsls	r4, r3, #9
    ffe0:	fb03 030c 	mla	r3, r3, ip, r0
    ffe4:	480f      	ldr	r0, [pc, #60]	; (10024 <CONFIG_PM_SRAM_SIZE+0x24>)
    ffe6:	4358      	muls	r0, r3
    ffe8:	ea4f 5c50 	mov.w	ip, r0, lsr #21
    ffec:	eb04 000c 	add.w	r0, r4, ip
    fff0:	f643 5409 	movw	r4, #15625	; 0x3d09
    fff4:	fb1c f404 	smulbb	r4, ip, r4
    fff8:	f504 7c80 	add.w	ip, r4, #256	; 0x100
    fffc:	f643 5508 	movw	r5, #15624	; 0x3d08
   10000:	eba3 2c5c 	sub.w	ip, r3, ip, lsr #9
   10004:	442c      	add	r4, r5
   10006:	f00c 0cff 	and.w	ip, ip, #255	; 0xff
   1000a:	ebb3 2f54 	cmp.w	r3, r4, lsr #9
   1000e:	bf84      	itt	hi
   10010:	f04f 0c00 	movhi.w	ip, #0
   10014:	1c40      	addhi	r0, r0, #1
   10016:	6008      	str	r0, [r1, #0]
   10018:	f882 c000 	strb.w	ip, [r2]
   1001c:	bc30      	pop	{r4, r5}
   1001e:	4770      	bx	lr
   10020:	ffffc2f7 	.word	0xffffc2f7
   10024:	00010c6f 	.word	0x00010c6f

00010028 <MPSL_IRQ_RTC0_Handler>:
   10028:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1002c:	4d3b      	ldr	r5, [pc, #236]	; (1011c <MPSL_IRQ_RTC0_Handler+0xf4>)
   1002e:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
   10032:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 10120 <MPSL_IRQ_RTC0_Handler+0xf8>
   10036:	f410 3f80 	tst.w	r0, #65536	; 0x10000
   1003a:	f44f 6600 	mov.w	r6, #2048	; 0x800
   1003e:	f04f 27e0 	mov.w	r7, #3758153728	; 0xe000e000
   10042:	f04f 0400 	mov.w	r4, #0
   10046:	d019      	beq.n	1007c <MPSL_IRQ_RTC0_Handler+0x54>
   10048:	4836      	ldr	r0, [pc, #216]	; (10124 <MPSL_IRQ_RTC0_Handler+0xfc>)
   1004a:	6800      	ldr	r0, [r0, #0]
   1004c:	b1b0      	cbz	r0, 1007c <MPSL_IRQ_RTC0_Handler+0x54>
   1004e:	f8c5 4140 	str.w	r4, [r5, #320]	; 0x140
   10052:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
   10056:	f8d5 0540 	ldr.w	r0, [r5, #1344]	; 0x540
   1005a:	f8d8 1000 	ldr.w	r1, [r8]
   1005e:	1a40      	subs	r0, r0, r1
   10060:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   10064:	2802      	cmp	r0, #2
   10066:	d302      	bcc.n	1006e <MPSL_IRQ_RTC0_Handler+0x46>
   10068:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1006c:	d906      	bls.n	1007c <MPSL_IRQ_RTC0_Handler+0x54>
   1006e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
   10072:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
   10076:	2004      	movs	r0, #4
   10078:	f7fe fe7e 	bl	ed78 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
   1007c:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
   10080:	f410 3f00 	tst.w	r0, #131072	; 0x20000
   10084:	d01a      	beq.n	100bc <MPSL_IRQ_RTC0_Handler+0x94>
   10086:	4828      	ldr	r0, [pc, #160]	; (10128 <MPSL_IRQ_RTC0_Handler+0x100>)
   10088:	6800      	ldr	r0, [r0, #0]
   1008a:	b1b8      	cbz	r0, 100bc <MPSL_IRQ_RTC0_Handler+0x94>
   1008c:	f8c5 4144 	str.w	r4, [r5, #324]	; 0x144
   10090:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
   10094:	4825      	ldr	r0, [pc, #148]	; (1012c <MPSL_IRQ_RTC0_Handler+0x104>)
   10096:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
   1009a:	f8d8 1000 	ldr.w	r1, [r8]
   1009e:	1a40      	subs	r0, r0, r1
   100a0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   100a4:	2802      	cmp	r0, #2
   100a6:	d302      	bcc.n	100ae <MPSL_IRQ_RTC0_Handler+0x86>
   100a8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   100ac:	d906      	bls.n	100bc <MPSL_IRQ_RTC0_Handler+0x94>
   100ae:	f44f 3000 	mov.w	r0, #131072	; 0x20000
   100b2:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
   100b6:	2005      	movs	r0, #5
   100b8:	f7fe fe5e 	bl	ed78 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
   100bc:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
   100c0:	f410 2f80 	tst.w	r0, #262144	; 0x40000
   100c4:	d01a      	beq.n	100fc <MPSL_IRQ_RTC0_Handler+0xd4>
   100c6:	481a      	ldr	r0, [pc, #104]	; (10130 <MPSL_IRQ_RTC0_Handler+0x108>)
   100c8:	6800      	ldr	r0, [r0, #0]
   100ca:	b1b8      	cbz	r0, 100fc <MPSL_IRQ_RTC0_Handler+0xd4>
   100cc:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
   100d0:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
   100d4:	4817      	ldr	r0, [pc, #92]	; (10134 <MPSL_IRQ_RTC0_Handler+0x10c>)
   100d6:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
   100da:	f8d8 1000 	ldr.w	r1, [r8]
   100de:	1a40      	subs	r0, r0, r1
   100e0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   100e4:	2802      	cmp	r0, #2
   100e6:	d302      	bcc.n	100ee <MPSL_IRQ_RTC0_Handler+0xc6>
   100e8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   100ec:	d906      	bls.n	100fc <MPSL_IRQ_RTC0_Handler+0xd4>
   100ee:	f44f 2080 	mov.w	r0, #262144	; 0x40000
   100f2:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
   100f6:	2006      	movs	r0, #6
   100f8:	f7fe fe3e 	bl	ed78 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
   100fc:	f8d5 0104 	ldr.w	r0, [r5, #260]	; 0x104
   10100:	2800      	cmp	r0, #0
   10102:	bf08      	it	eq
   10104:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
   10108:	f8c5 4104 	str.w	r4, [r5, #260]	; 0x104
   1010c:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
   10110:	4809      	ldr	r0, [pc, #36]	; (10138 <MPSL_IRQ_RTC0_Handler+0x110>)
   10112:	68c1      	ldr	r1, [r0, #12]
   10114:	1c49      	adds	r1, r1, #1
   10116:	60c1      	str	r1, [r0, #12]
   10118:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1011c:	4000b000 	.word	0x4000b000
   10120:	4000b504 	.word	0x4000b504
   10124:	4000b140 	.word	0x4000b140
   10128:	4000b144 	.word	0x4000b144
   1012c:	4000b004 	.word	0x4000b004
   10130:	4000b148 	.word	0x4000b148
   10134:	4000b008 	.word	0x4000b008
   10138:	20000048 	.word	0x20000048

0001013c <MPSL_IRQ_TIMER0_Handler>:
   1013c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10140:	4d38      	ldr	r5, [pc, #224]	; (10224 <MPSL_IRQ_TIMER0_Handler+0xe8>)
   10142:	7828      	ldrb	r0, [r5, #0]
   10144:	2804      	cmp	r0, #4
   10146:	d068      	beq.n	1021a <MPSL_IRQ_TIMER0_Handler+0xde>
   10148:	1ca8      	adds	r0, r5, #2
   1014a:	2201      	movs	r2, #1
   1014c:	7801      	ldrb	r1, [r0, #0]
   1014e:	b159      	cbz	r1, 10168 <MPSL_IRQ_TIMER0_Handler+0x2c>
   10150:	2901      	cmp	r1, #1
   10152:	bf08      	it	eq
   10154:	706a      	strbeq	r2, [r5, #1]
   10156:	d002      	beq.n	1015e <MPSL_IRQ_TIMER0_Handler+0x22>
   10158:	7869      	ldrb	r1, [r5, #1]
   1015a:	2900      	cmp	r1, #0
   1015c:	d058      	beq.n	10210 <MPSL_IRQ_TIMER0_Handler+0xd4>
   1015e:	2102      	movs	r1, #2
   10160:	7001      	strb	r1, [r0, #0]
   10162:	7840      	ldrb	r0, [r0, #1]
   10164:	f000 fafe 	bl	10764 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
   10168:	4c2f      	ldr	r4, [pc, #188]	; (10228 <MPSL_IRQ_TIMER0_Handler+0xec>)
   1016a:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
   1016e:	f04f 0800 	mov.w	r8, #0
   10172:	f410 2f00 	tst.w	r0, #524288	; 0x80000
   10176:	f44f 7780 	mov.w	r7, #256	; 0x100
   1017a:	f04f 26e0 	mov.w	r6, #3758153728	; 0xe000e000
   1017e:	d00a      	beq.n	10196 <MPSL_IRQ_TIMER0_Handler+0x5a>
   10180:	482a      	ldr	r0, [pc, #168]	; (1022c <MPSL_IRQ_TIMER0_Handler+0xf0>)
   10182:	6800      	ldr	r0, [r0, #0]
   10184:	b138      	cbz	r0, 10196 <MPSL_IRQ_TIMER0_Handler+0x5a>
   10186:	2003      	movs	r0, #3
   10188:	f000 faec 	bl	10764 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
   1018c:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
   10190:	2003      	movs	r0, #3
   10192:	f7fe fdf1 	bl	ed78 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
   10196:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
   1019a:	f410 2f80 	tst.w	r0, #262144	; 0x40000
   1019e:	d00a      	beq.n	101b6 <MPSL_IRQ_TIMER0_Handler+0x7a>
   101a0:	4823      	ldr	r0, [pc, #140]	; (10230 <MPSL_IRQ_TIMER0_Handler+0xf4>)
   101a2:	6800      	ldr	r0, [r0, #0]
   101a4:	b138      	cbz	r0, 101b6 <MPSL_IRQ_TIMER0_Handler+0x7a>
   101a6:	2002      	movs	r0, #2
   101a8:	f000 fadc 	bl	10764 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
   101ac:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
   101b0:	2002      	movs	r0, #2
   101b2:	f7fe fde1 	bl	ed78 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
   101b6:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
   101ba:	f410 3f00 	tst.w	r0, #131072	; 0x20000
   101be:	d00a      	beq.n	101d6 <MPSL_IRQ_TIMER0_Handler+0x9a>
   101c0:	481c      	ldr	r0, [pc, #112]	; (10234 <MPSL_IRQ_TIMER0_Handler+0xf8>)
   101c2:	6800      	ldr	r0, [r0, #0]
   101c4:	b138      	cbz	r0, 101d6 <MPSL_IRQ_TIMER0_Handler+0x9a>
   101c6:	2001      	movs	r0, #1
   101c8:	f000 facc 	bl	10764 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
   101cc:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
   101d0:	2001      	movs	r0, #1
   101d2:	f7fe fdd1 	bl	ed78 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
   101d6:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
   101da:	f410 3f80 	tst.w	r0, #65536	; 0x10000
   101de:	bf08      	it	eq
   101e0:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
   101e4:	4814      	ldr	r0, [pc, #80]	; (10238 <MPSL_IRQ_TIMER0_Handler+0xfc>)
   101e6:	6800      	ldr	r0, [r0, #0]
   101e8:	2800      	cmp	r0, #0
   101ea:	bf08      	it	eq
   101ec:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
   101f0:	2000      	movs	r0, #0
   101f2:	f000 fab7 	bl	10764 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
   101f6:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
   101fa:	2004      	movs	r0, #4
   101fc:	7028      	strb	r0, [r5, #0]
   101fe:	f8c5 8004 	str.w	r8, [r5, #4]
   10202:	f8c4 8200 	str.w	r8, [r4, #512]	; 0x200
   10206:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1020a:	2000      	movs	r0, #0
   1020c:	f7fe bdb4 	b.w	ed78 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
   10210:	f240 41a3 	movw	r1, #1187	; 0x4a3
   10214:	206c      	movs	r0, #108	; 0x6c
   10216:	f000 ff7b 	bl	11110 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   1021a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1021e:	2007      	movs	r0, #7
   10220:	f7fe bdaa 	b.w	ed78 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
   10224:	20000048 	.word	0x20000048
   10228:	40008000 	.word	0x40008000
   1022c:	4000814c 	.word	0x4000814c
   10230:	40008148 	.word	0x40008148
   10234:	40008144 	.word	0x40008144
   10238:	40008140 	.word	0x40008140
   1023c:	2201      	movs	r2, #1
   1023e:	0211      	lsls	r1, r2, #8
   10240:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
   10244:	2000      	movs	r0, #0
   10246:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
   1024a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
   1024e:	f3bf 8f4f 	dsb	sy
   10252:	f3bf 8f6f 	isb	sy
   10256:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
   1025a:	490e      	ldr	r1, [pc, #56]	; (10294 <MPSL_IRQ_TIMER0_Handler+0x158>)
   1025c:	f841 2f04 	str.w	r2, [r1, #4]!
   10260:	1e43      	subs	r3, r0, #1
   10262:	f8c1 3304 	str.w	r3, [r1, #772]	; 0x304
   10266:	f8c1 053c 	str.w	r0, [r1, #1340]	; 0x53c
   1026a:	f8c1 013c 	str.w	r0, [r1, #316]	; 0x13c
   1026e:	4b0a      	ldr	r3, [pc, #40]	; (10298 <MPSL_IRQ_TIMER0_Handler+0x15c>)
   10270:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
   10274:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
   10278:	1d1b      	adds	r3, r3, #4
   1027a:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
   1027e:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
   10282:	1d1b      	adds	r3, r3, #4
   10284:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
   10288:	f8c1 0148 	str.w	r0, [r1, #328]	; 0x148
   1028c:	60ca      	str	r2, [r1, #12]
   1028e:	4903      	ldr	r1, [pc, #12]	; (1029c <MPSL_IRQ_TIMER0_Handler+0x160>)
   10290:	7048      	strb	r0, [r1, #1]
   10292:	4770      	bx	lr
   10294:	40008000 	.word	0x40008000
   10298:	40008004 	.word	0x40008004
   1029c:	20000048 	.word	0x20000048

000102a0 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>:
   102a0:	4801      	ldr	r0, [pc, #4]	; (102a8 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY+0x8>)
   102a2:	6800      	ldr	r0, [r0, #0]
   102a4:	4770      	bx	lr
   102a6:	0000      	.short	0x0000
   102a8:	4000b504 	.word	0x4000b504

000102ac <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ>:
   102ac:	b430      	push	{r4, r5}
   102ae:	f3ef 8c10 	mrs	ip, PRIMASK
   102b2:	b672      	cpsid	i
   102b4:	2500      	movs	r5, #0
   102b6:	4b0b      	ldr	r3, [pc, #44]	; (102e4 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ+0x38>)
   102b8:	4a0b      	ldr	r2, [pc, #44]	; (102e8 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ+0x3c>)
   102ba:	bf00      	nop
   102bc:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
   102c0:	f8d3 4104 	ldr.w	r4, [r3, #260]	; 0x104
   102c4:	b12c      	cbz	r4, 102d2 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ+0x26>
   102c6:	68d1      	ldr	r1, [r2, #12]
   102c8:	1c49      	adds	r1, r1, #1
   102ca:	60d1      	str	r1, [r2, #12]
   102cc:	f8c3 5104 	str.w	r5, [r3, #260]	; 0x104
   102d0:	e7f4      	b.n	102bc <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ+0x10>
   102d2:	68d2      	ldr	r2, [r2, #12]
   102d4:	f1bc 0f00 	cmp.w	ip, #0
   102d8:	d100      	bne.n	102dc <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ+0x30>
   102da:	b662      	cpsie	i
   102dc:	e9c0 1200 	strd	r1, r2, [r0]
   102e0:	bc30      	pop	{r4, r5}
   102e2:	4770      	bx	lr
   102e4:	4000b000 	.word	0x4000b000
   102e8:	20000048 	.word	0x20000048

000102ec <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>:
   102ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   102f0:	4e46      	ldr	r6, [pc, #280]	; (1040c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x120>)
   102f2:	4605      	mov	r5, r0
   102f4:	1eb7      	subs	r7, r6, #2
   102f6:	7833      	ldrb	r3, [r6, #0]
   102f8:	68b9      	ldr	r1, [r7, #8]
   102fa:	2b01      	cmp	r3, #1
   102fc:	bf04      	itt	eq
   102fe:	42a9      	cmpeq	r1, r5
   10300:	e8bd 87f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10304:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
   10308:	4a41      	ldr	r2, [pc, #260]	; (10410 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x124>)
   1030a:	6010      	str	r0, [r2, #0]
   1030c:	4a42      	ldr	r2, [pc, #264]	; (10418 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x12c>)
   1030e:	4841      	ldr	r0, [pc, #260]	; (10414 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x128>)
   10310:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
   10314:	f102 0c04 	add.w	ip, r2, #4
   10318:	f04f 0400 	mov.w	r4, #0
   1031c:	2b00      	cmp	r3, #0
   1031e:	d062      	beq.n	103e6 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xfa>
   10320:	483e      	ldr	r0, [pc, #248]	; (1041c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x130>)
   10322:	f8c2 0348 	str.w	r0, [r2, #840]	; 0x348
   10326:	f8cc 4540 	str.w	r4, [ip, #1344]	; 0x540
   1032a:	f8c2 4144 	str.w	r4, [r2, #324]	; 0x144
   1032e:	bf00      	nop
   10330:	f8d2 0148 	ldr.w	r0, [r2, #328]	; 0x148
   10334:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
   10338:	f04f 0801 	mov.w	r8, #1
   1033c:	2800      	cmp	r0, #0
   1033e:	bf01      	itttt	eq
   10340:	f8d2 0104 	ldreq.w	r0, [r2, #260]	; 0x104
   10344:	2800      	cmpeq	r0, #0
   10346:	f44f 6000 	moveq.w	r0, #2048	; 0x800
   1034a:	f8c9 0280 	streq.w	r0, [r9, #640]	; 0x280
   1034e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
   10352:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
   10356:	f8c2 0348 	str.w	r0, [r2, #840]	; 0x348
   1035a:	f8c2 4140 	str.w	r4, [r2, #320]	; 0x140
   1035e:	4830      	ldr	r0, [pc, #192]	; (10420 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x134>)
   10360:	f8d0 c000 	ldr.w	ip, [r0]
   10364:	eba5 0c0c 	sub.w	ip, r5, ip
   10368:	f02c 4c7f 	bic.w	ip, ip, #4278190080	; 0xff000000
   1036c:	f1bc 0f02 	cmp.w	ip, #2
   10370:	d344      	bcc.n	103fc <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x110>
   10372:	f5bc 0f00 	cmp.w	ip, #8388608	; 0x800000
   10376:	d841      	bhi.n	103fc <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x110>
   10378:	f8c2 5540 	str.w	r5, [r2, #1344]	; 0x540
   1037c:	f44f 3c80 	mov.w	ip, #65536	; 0x10000
   10380:	f8c2 c344 	str.w	ip, [r2, #836]	; 0x344
   10384:	b12b      	cbz	r3, 10392 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xa6>
   10386:	6802      	ldr	r2, [r0, #0]
   10388:	1a8a      	subs	r2, r1, r2
   1038a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   1038e:	2a02      	cmp	r2, #2
   10390:	d3f9      	bcc.n	10386 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x9a>
   10392:	f8c7 8004 	str.w	r8, [r7, #4]
   10396:	703c      	strb	r4, [r7, #0]
   10398:	f7ff ff50 	bl	1023c <MPSL_IRQ_TIMER0_Handler+0x100>
   1039c:	4821      	ldr	r0, [pc, #132]	; (10424 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x138>)
   1039e:	f8d0 1504 	ldr.w	r1, [r0, #1284]	; 0x504
   103a2:	f364 0101 	bfi	r1, r4, #0, #2
   103a6:	f8c0 1504 	str.w	r1, [r0, #1284]	; 0x504
   103aa:	f8d0 2508 	ldr.w	r2, [r0, #1288]	; 0x508
   103ae:	2102      	movs	r1, #2
   103b0:	f361 0201 	bfi	r2, r1, #0, #2
   103b4:	f8c0 2508 	str.w	r2, [r0, #1288]	; 0x508
   103b8:	2104      	movs	r1, #4
   103ba:	f8c0 1510 	str.w	r1, [r0, #1296]	; 0x510
   103be:	f8c0 800c 	str.w	r8, [r0, #12]
   103c2:	6879      	ldr	r1, [r7, #4]
   103c4:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
   103c8:	1580      	asrs	r0, r0, #22
   103ca:	f8c9 0280 	str.w	r0, [r9, #640]	; 0x280
   103ce:	f8c9 0100 	str.w	r0, [r9, #256]	; 0x100
   103d2:	4915      	ldr	r1, [pc, #84]	; (10428 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x13c>)
   103d4:	05c0      	lsls	r0, r0, #23
   103d6:	6008      	str	r0, [r1, #0]
   103d8:	2004      	movs	r0, #4
   103da:	60bd      	str	r5, [r7, #8]
   103dc:	7070      	strb	r0, [r6, #1]
   103de:	f886 8000 	strb.w	r8, [r6]
   103e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   103e6:	f8c2 0348 	str.w	r0, [r2, #840]	; 0x348
   103ea:	f8c2 4540 	str.w	r4, [r2, #1344]	; 0x540
   103ee:	f8c2 4140 	str.w	r4, [r2, #320]	; 0x140
   103f2:	f8cc 4540 	str.w	r4, [ip, #1344]	; 0x540
   103f6:	f8c2 4144 	str.w	r4, [r2, #324]	; 0x144
   103fa:	e799      	b.n	10330 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x44>
   103fc:	2000      	movs	r0, #0
   103fe:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
   10402:	f240 2197 	movw	r1, #663	; 0x297
   10406:	206c      	movs	r0, #108	; 0x6c
   10408:	f000 fe82 	bl	11110 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   1040c:	2000004a 	.word	0x2000004a
   10410:	4001f508 	.word	0x4001f508
   10414:	fffbfffd 	.word	0xfffbfffd
   10418:	4000b000 	.word	0x4000b000
   1041c:	fffafffd 	.word	0xfffafffd
   10420:	4000b504 	.word	0x4000b504
   10424:	40008000 	.word	0x40008000
   10428:	4001f504 	.word	0x4001f504

0001042c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>:
   1042c:	b570      	push	{r4, r5, r6, lr}
   1042e:	4c2a      	ldr	r4, [pc, #168]	; (104d8 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xac>)
   10430:	68a1      	ldr	r1, [r4, #8]
   10432:	4281      	cmp	r1, r0
   10434:	bf14      	ite	ne
   10436:	2201      	movne	r2, #1
   10438:	2200      	moveq	r2, #0
   1043a:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 104dc <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb0>
   1043e:	f89c 5000 	ldrb.w	r5, [ip]
   10442:	2d02      	cmp	r5, #2
   10444:	d002      	beq.n	1044c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x20>
   10446:	2a00      	cmp	r2, #0
   10448:	d034      	beq.n	104b4 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x88>
   1044a:	e002      	b.n	10452 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x26>
   1044c:	2a00      	cmp	r2, #0
   1044e:	bf08      	it	eq
   10450:	bd70      	popeq	{r4, r5, r6, pc}
   10452:	7862      	ldrb	r2, [r4, #1]
   10454:	b39a      	cbz	r2, 104be <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x92>
   10456:	4b22      	ldr	r3, [pc, #136]	; (104e0 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb4>)
   10458:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1045c:	601a      	str	r2, [r3, #0]
   1045e:	4b21      	ldr	r3, [pc, #132]	; (104e4 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb8>)
   10460:	1392      	asrs	r2, r2, #14
   10462:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
   10466:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
   1046a:	2200      	movs	r2, #0
   1046c:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
   10470:	4a1d      	ldr	r2, [pc, #116]	; (104e8 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xbc>)
   10472:	6816      	ldr	r6, [r2, #0]
   10474:	1b86      	subs	r6, r0, r6
   10476:	f026 467f 	bic.w	r6, r6, #4278190080	; 0xff000000
   1047a:	2e02      	cmp	r6, #2
   1047c:	d324      	bcc.n	104c8 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x9c>
   1047e:	f5b6 0f00 	cmp.w	r6, #8388608	; 0x800000
   10482:	d821      	bhi.n	104c8 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x9c>
   10484:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
   10488:	f44f 3680 	mov.w	r6, #65536	; 0x10000
   1048c:	f8c3 6344 	str.w	r6, [r3, #836]	; 0x344
   10490:	b12d      	cbz	r5, 1049e <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x72>
   10492:	6813      	ldr	r3, [r2, #0]
   10494:	1acb      	subs	r3, r1, r3
   10496:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   1049a:	2b02      	cmp	r3, #2
   1049c:	d3f9      	bcc.n	10492 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x66>
   1049e:	4b13      	ldr	r3, [pc, #76]	; (104ec <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc0>)
   104a0:	2102      	movs	r1, #2
   104a2:	074a      	lsls	r2, r1, #29
   104a4:	601a      	str	r2, [r3, #0]
   104a6:	60a0      	str	r0, [r4, #8]
   104a8:	2004      	movs	r0, #4
   104aa:	f88c 0001 	strb.w	r0, [ip, #1]
   104ae:	f88c 1000 	strb.w	r1, [ip]
   104b2:	bd70      	pop	{r4, r5, r6, pc}
   104b4:	f240 21a5 	movw	r1, #677	; 0x2a5
   104b8:	206c      	movs	r0, #108	; 0x6c
   104ba:	f000 fe29 	bl	11110 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   104be:	f240 21a9 	movw	r1, #681	; 0x2a9
   104c2:	206c      	movs	r0, #108	; 0x6c
   104c4:	f000 fe24 	bl	11110 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   104c8:	2000      	movs	r0, #0
   104ca:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
   104ce:	f240 21b5 	movw	r1, #693	; 0x2b5
   104d2:	206c      	movs	r0, #108	; 0x6c
   104d4:	f000 fe1c 	bl	11110 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   104d8:	20000048 	.word	0x20000048
   104dc:	2000004a 	.word	0x2000004a
   104e0:	4001f508 	.word	0x4001f508
   104e4:	4000b000 	.word	0x4000b000
   104e8:	4000b504 	.word	0x4000b504
   104ec:	4001f504 	.word	0x4001f504

000104f0 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>:
   104f0:	4801      	ldr	r0, [pc, #4]	; (104f8 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY+0x8>)
   104f2:	6880      	ldr	r0, [r0, #8]
   104f4:	4770      	bx	lr
   104f6:	0000      	.short	0x0000
   104f8:	20000048 	.word	0x20000048

000104fc <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>:
   104fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10500:	4836      	ldr	r0, [pc, #216]	; (105dc <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe0>)
   10502:	4a35      	ldr	r2, [pc, #212]	; (105d8 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xdc>)
   10504:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
   10508:	f8df c0d4 	ldr.w	ip, [pc, #212]	; 105e0 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe4>
   1050c:	1d03      	adds	r3, r0, #4
   1050e:	2100      	movs	r1, #0
   10510:	f89c 4000 	ldrb.w	r4, [ip]
   10514:	b184      	cbz	r4, 10538 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x3c>
   10516:	4a33      	ldr	r2, [pc, #204]	; (105e4 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe8>)
   10518:	f8c0 2348 	str.w	r2, [r0, #840]	; 0x348
   1051c:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
   10520:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
   10524:	f8d0 2148 	ldr.w	r2, [r0, #328]	; 0x148
   10528:	2301      	movs	r3, #1
   1052a:	2a00      	cmp	r2, #0
   1052c:	bf04      	itt	eq
   1052e:	f8d0 0104 	ldreq.w	r0, [r0, #260]	; 0x104
   10532:	2800      	cmpeq	r0, #0
   10534:	d111      	bne.n	1055a <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x5e>
   10536:	e00a      	b.n	1054e <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x52>
   10538:	f8c0 2348 	str.w	r2, [r0, #840]	; 0x348
   1053c:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
   10540:	f8c0 1140 	str.w	r1, [r0, #320]	; 0x140
   10544:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
   10548:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
   1054c:	e7ea      	b.n	10524 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x28>
   1054e:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
   10552:	f44f 6000 	mov.w	r0, #2048	; 0x800
   10556:	f8c2 0280 	str.w	r0, [r2, #640]	; 0x280
   1055a:	2c02      	cmp	r4, #2
   1055c:	d004      	beq.n	10568 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x6c>
   1055e:	f240 21c1 	movw	r1, #705	; 0x2c1
   10562:	206c      	movs	r0, #108	; 0x6c
   10564:	f000 fdd4 	bl	11110 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   10568:	4e1f      	ldr	r6, [pc, #124]	; (105e8 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xec>)
   1056a:	6830      	ldr	r0, [r6, #0]
   1056c:	4c1f      	ldr	r4, [pc, #124]	; (105ec <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf0>)
   1056e:	1cc0      	adds	r0, r0, #3
   10570:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   10574:	68a2      	ldr	r2, [r4, #8]
   10576:	4d1e      	ldr	r5, [pc, #120]	; (105f0 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf4>)
   10578:	4290      	cmp	r0, r2
   1057a:	d00b      	beq.n	10594 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x98>
   1057c:	6837      	ldr	r7, [r6, #0]
   1057e:	1bd7      	subs	r7, r2, r7
   10580:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
   10584:	2f04      	cmp	r7, #4
   10586:	d305      	bcc.n	10594 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x98>
   10588:	f5b7 0f00 	cmp.w	r7, #8388608	; 0x800000
   1058c:	d802      	bhi.n	10594 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x98>
   1058e:	f7ff fead 	bl	102ec <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
   10592:	e01b      	b.n	105cc <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd0>
   10594:	6830      	ldr	r0, [r6, #0]
   10596:	1a10      	subs	r0, r2, r0
   10598:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   1059c:	2802      	cmp	r0, #2
   1059e:	d313      	bcc.n	105c8 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xcc>
   105a0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   105a4:	d810      	bhi.n	105c8 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xcc>
   105a6:	4a13      	ldr	r2, [pc, #76]	; (105f4 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf8>)
   105a8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   105ac:	6010      	str	r0, [r2, #0]
   105ae:	6063      	str	r3, [r4, #4]
   105b0:	7021      	strb	r1, [r4, #0]
   105b2:	606b      	str	r3, [r5, #4]
   105b4:	60eb      	str	r3, [r5, #12]
   105b6:	0040      	lsls	r0, r0, #1
   105b8:	1f11      	subs	r1, r2, #4
   105ba:	6008      	str	r0, [r1, #0]
   105bc:	2004      	movs	r0, #4
   105be:	f88c 0001 	strb.w	r0, [ip, #1]
   105c2:	f88c 3000 	strb.w	r3, [ip]
   105c6:	e001      	b.n	105cc <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd0>
   105c8:	6063      	str	r3, [r4, #4]
   105ca:	7021      	strb	r1, [r4, #0]
   105cc:	6860      	ldr	r0, [r4, #4]
   105ce:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
   105d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   105d6:	0000      	.short	0x0000
   105d8:	fffbfffd 	.word	0xfffbfffd
   105dc:	4000b000 	.word	0x4000b000
   105e0:	2000004a 	.word	0x2000004a
   105e4:	fffafffd 	.word	0xfffafffd
   105e8:	4000b504 	.word	0x4000b504
   105ec:	20000048 	.word	0x20000048
   105f0:	40008000 	.word	0x40008000
   105f4:	4001f508 	.word	0x4001f508

000105f8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>:
   105f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   105fc:	4a54      	ldr	r2, [pc, #336]	; (10750 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x158>)
   105fe:	2500      	movs	r5, #0
   10600:	2401      	movs	r4, #1
   10602:	f892 c000 	ldrb.w	ip, [r2]
   10606:	7853      	ldrb	r3, [r2, #1]
   10608:	f44f 76a0 	mov.w	r6, #320	; 0x140
   1060c:	2807      	cmp	r0, #7
   1060e:	d27d      	bcs.n	1070c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x114>
   10610:	e8df f000 	tbb	[pc, r0]
   10614:	04040404 	.word	0x04040404
   10618:	00585858 	.word	0x00585858
   1061c:	4a4d      	ldr	r2, [pc, #308]	; (10754 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x15c>)
   1061e:	6897      	ldr	r7, [r2, #8]
   10620:	f1b7 7f80 	cmp.w	r7, #16777216	; 0x1000000
   10624:	bf04      	itt	eq
   10626:	7852      	ldrbeq	r2, [r2, #1]
   10628:	2a00      	cmpeq	r2, #0
   1062a:	d003      	beq.n	10634 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x3c>
   1062c:	f1bc 0f02 	cmp.w	ip, #2
   10630:	d005      	beq.n	1063e <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x46>
   10632:	e026      	b.n	10682 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x8a>
   10634:	f240 3151 	movw	r1, #849	; 0x351
   10638:	206c      	movs	r0, #108	; 0x6c
   1063a:	f000 fd69 	bl	11110 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   1063e:	1f1a      	subs	r2, r3, #4
   10640:	b2d2      	uxtb	r2, r2
   10642:	eb06 0282 	add.w	r2, r6, r2, lsl #2
   10646:	f102 4680 	add.w	r6, r2, #1073741824	; 0x40000000
   1064a:	f506 4630 	add.w	r6, r6, #45056	; 0xb000
   1064e:	2200      	movs	r2, #0
   10650:	f1bc 0f01 	cmp.w	ip, #1
   10654:	d003      	beq.n	1065e <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x66>
   10656:	f1bc 0f02 	cmp.w	ip, #2
   1065a:	d008      	beq.n	1066e <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x76>
   1065c:	e00e      	b.n	1067c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x84>
   1065e:	2b04      	cmp	r3, #4
   10660:	bf24      	itt	cs
   10662:	6837      	ldrcs	r7, [r6, #0]
   10664:	2f00      	cmpcs	r7, #0
   10666:	bf08      	it	eq
   10668:	f04f 4200 	moveq.w	r2, #2147483648	; 0x80000000
   1066c:	e006      	b.n	1067c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x84>
   1066e:	2b04      	cmp	r3, #4
   10670:	bf24      	itt	cs
   10672:	6837      	ldrcs	r7, [r6, #0]
   10674:	2f00      	cmpcs	r7, #0
   10676:	bf08      	it	eq
   10678:	f042 4280 	orreq.w	r2, r2, #1073741824	; 0x40000000
   1067c:	f012 4f80 	tst.w	r2, #1073741824	; 0x40000000
   10680:	d1e5      	bne.n	1064e <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x56>
   10682:	f8df c0d4 	ldr.w	ip, [pc, #212]	; 10758 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x160>
   10686:	f100 0210 	add.w	r2, r0, #16
   1068a:	fa04 f202 	lsl.w	r2, r4, r2
   1068e:	f8cc 2308 	str.w	r2, [ip, #776]	; 0x308
   10692:	f04f 0340 	mov.w	r3, #64	; 0x40
   10696:	eb03 0380 	add.w	r3, r3, r0, lsl #2
   1069a:	b2db      	uxtb	r3, r3
   1069c:	4463      	add	r3, ip
   1069e:	601c      	str	r4, [r3, #0]
   106a0:	eb0c 0080 	add.w	r0, ip, r0, lsl #2
   106a4:	f8d0 3540 	ldr.w	r3, [r0, #1344]	; 0x540
   106a8:	eba1 0303 	sub.w	r3, r1, r3
   106ac:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   106b0:	2b03      	cmp	r3, #3
   106b2:	bf26      	itte	cs
   106b4:	f8c0 1540 	strcs.w	r1, [r0, #1344]	; 0x540
   106b8:	f8cc 2304 	strcs.w	r2, [ip, #772]	; 0x304
   106bc:	f8c0 5540 	strcc.w	r5, [r0, #1344]	; 0x540
   106c0:	d237      	bcs.n	10732 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x13a>
   106c2:	e03c      	b.n	1073e <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x146>
   106c4:	f1bc 0f00 	cmp.w	ip, #0
   106c8:	d006      	beq.n	106d8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xe0>
   106ca:	4283      	cmp	r3, r0
   106cc:	d104      	bne.n	106d8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xe0>
   106ce:	f240 3171 	movw	r1, #881	; 0x371
   106d2:	206c      	movs	r0, #108	; 0x6c
   106d4:	f000 fd1c 	bl	11110 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   106d8:	1f02      	subs	r2, r0, #4
   106da:	b2d3      	uxtb	r3, r2
   106dc:	2b03      	cmp	r3, #3
   106de:	d304      	bcc.n	106ea <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xf2>
   106e0:	f44f 71e6 	mov.w	r1, #460	; 0x1cc
   106e4:	206c      	movs	r0, #108	; 0x6c
   106e6:	f000 fd13 	bl	11110 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   106ea:	f8df c070 	ldr.w	ip, [pc, #112]	; 1075c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x164>
   106ee:	f103 0210 	add.w	r2, r3, #16
   106f2:	fa04 f202 	lsl.w	r2, r4, r2
   106f6:	f8cc 2308 	str.w	r2, [ip, #776]	; 0x308
   106fa:	f8cc 2348 	str.w	r2, [ip, #840]	; 0x348
   106fe:	eb06 0383 	add.w	r3, r6, r3, lsl #2
   10702:	f84c 5003 	str.w	r5, [ip, r3]
   10706:	4b16      	ldr	r3, [pc, #88]	; (10760 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x168>)
   10708:	681b      	ldr	r3, [r3, #0]
   1070a:	e000      	b.n	1070e <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x116>
   1070c:	e01a      	b.n	10744 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x14c>
   1070e:	1f00      	subs	r0, r0, #4
   10710:	1acb      	subs	r3, r1, r3
   10712:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   10716:	b2c0      	uxtb	r0, r0
   10718:	eb0c 0080 	add.w	r0, ip, r0, lsl #2
   1071c:	2b02      	cmp	r3, #2
   1071e:	d30b      	bcc.n	10738 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x140>
   10720:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
   10724:	d808      	bhi.n	10738 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x140>
   10726:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
   1072a:	f8cc 2304 	str.w	r2, [ip, #772]	; 0x304
   1072e:	f8cc 2344 	str.w	r2, [ip, #836]	; 0x344
   10732:	2001      	movs	r0, #1
   10734:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10738:	2100      	movs	r1, #0
   1073a:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
   1073e:	2000      	movs	r0, #0
   10740:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10744:	f240 3175 	movw	r1, #885	; 0x375
   10748:	206c      	movs	r0, #108	; 0x6c
   1074a:	f000 fce1 	bl	11110 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   1074e:	0000      	.short	0x0000
   10750:	2000004a 	.word	0x2000004a
   10754:	20000048 	.word	0x20000048
   10758:	40008000 	.word	0x40008000
   1075c:	4000b000 	.word	0x4000b000
   10760:	4000b504 	.word	0x4000b504

00010764 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>:
   10764:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   10768:	2601      	movs	r6, #1
   1076a:	2700      	movs	r7, #0
   1076c:	f44f 78a0 	mov.w	r8, #320	; 0x140
   10770:	2807      	cmp	r0, #7
   10772:	d251      	bcs.n	10818 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb4>
   10774:	e8df f000 	tbb	[pc, r0]
   10778:	04040404 	.word	0x04040404
   1077c:	00191919 	.word	0x00191919
   10780:	f100 0110 	add.w	r1, r0, #16
   10784:	fa06 f201 	lsl.w	r2, r6, r1
   10788:	4926      	ldr	r1, [pc, #152]	; (10824 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc0>)
   1078a:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   1078e:	eb01 0380 	add.w	r3, r1, r0, lsl #2
   10792:	2200      	movs	r2, #0
   10794:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
   10798:	eb08 0280 	add.w	r2, r8, r0, lsl #2
   1079c:	508f      	str	r7, [r1, r2]
   1079e:	4922      	ldr	r1, [pc, #136]	; (10828 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc4>)
   107a0:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
   107a4:	9000      	str	r0, [sp, #0]
   107a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   107aa:	4d20      	ldr	r5, [pc, #128]	; (1082c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc8>)
   107ac:	1f01      	subs	r1, r0, #4
   107ae:	b2cc      	uxtb	r4, r1
   107b0:	7829      	ldrb	r1, [r5, #0]
   107b2:	b179      	cbz	r1, 107d4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x70>
   107b4:	786a      	ldrb	r2, [r5, #1]
   107b6:	4282      	cmp	r2, r0
   107b8:	d10c      	bne.n	107d4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x70>
   107ba:	4a1d      	ldr	r2, [pc, #116]	; (10830 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xcc>)
   107bc:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
   107c0:	6010      	str	r0, [r2, #0]
   107c2:	2901      	cmp	r1, #1
   107c4:	bf08      	it	eq
   107c6:	f7ff fd39 	bleq	1023c <MPSL_IRQ_TIMER0_Handler+0x100>
   107ca:	702f      	strb	r7, [r5, #0]
   107cc:	4919      	ldr	r1, [pc, #100]	; (10834 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xd0>)
   107ce:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
   107d2:	6088      	str	r0, [r1, #8]
   107d4:	4918      	ldr	r1, [pc, #96]	; (10838 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xd4>)
   107d6:	f104 0010 	add.w	r0, r4, #16
   107da:	fa06 f000 	lsl.w	r0, r6, r0
   107de:	f8c1 0308 	str.w	r0, [r1, #776]	; 0x308
   107e2:	f8c1 0348 	str.w	r0, [r1, #840]	; 0x348
   107e6:	00a0      	lsls	r0, r4, #2
   107e8:	4408      	add	r0, r1
   107ea:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
   107ee:	4a13      	ldr	r2, [pc, #76]	; (1083c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xd8>)
   107f0:	6812      	ldr	r2, [r2, #0]
   107f2:	1a80      	subs	r0, r0, r2
   107f4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   107f8:	2802      	cmp	r0, #2
   107fa:	d307      	bcc.n	1080c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xa8>
   107fc:	eb01 0284 	add.w	r2, r1, r4, lsl #2
   10800:	2000      	movs	r0, #0
   10802:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
   10806:	eb08 0084 	add.w	r0, r8, r4, lsl #2
   1080a:	500f      	str	r7, [r1, r0]
   1080c:	480c      	ldr	r0, [pc, #48]	; (10840 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xdc>)
   1080e:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
   10812:	9000      	str	r0, [sp, #0]
   10814:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   10818:	f240 31f9 	movw	r1, #1017	; 0x3f9
   1081c:	206c      	movs	r0, #108	; 0x6c
   1081e:	f000 fc77 	bl	11110 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   10822:	0000      	.short	0x0000
   10824:	40008000 	.word	0x40008000
   10828:	40008140 	.word	0x40008140
   1082c:	2000004a 	.word	0x2000004a
   10830:	4001f508 	.word	0x4001f508
   10834:	20000048 	.word	0x20000048
   10838:	4000b000 	.word	0x4000b000
   1083c:	4000b504 	.word	0x4000b504
   10840:	4000b140 	.word	0x4000b140

00010844 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>:
   10844:	4825      	ldr	r0, [pc, #148]	; (108dc <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x98>)
   10846:	4a24      	ldr	r2, [pc, #144]	; (108d8 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x94>)
   10848:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
   1084c:	4924      	ldr	r1, [pc, #144]	; (108e0 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x9c>)
   1084e:	1d03      	adds	r3, r0, #4
   10850:	f891 c000 	ldrb.w	ip, [r1]
   10854:	2100      	movs	r1, #0
   10856:	f1bc 0f00 	cmp.w	ip, #0
   1085a:	d010      	beq.n	1087e <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x3a>
   1085c:	4a21      	ldr	r2, [pc, #132]	; (108e4 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0xa0>)
   1085e:	f8c0 2348 	str.w	r2, [r0, #840]	; 0x348
   10862:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
   10866:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
   1086a:	bf00      	nop
   1086c:	f8d0 2148 	ldr.w	r2, [r0, #328]	; 0x148
   10870:	2a00      	cmp	r2, #0
   10872:	bf04      	itt	eq
   10874:	f8d0 0104 	ldreq.w	r0, [r0, #260]	; 0x104
   10878:	2800      	cmpeq	r0, #0
   1087a:	d111      	bne.n	108a0 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x5c>
   1087c:	e00a      	b.n	10894 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x50>
   1087e:	f8c0 2348 	str.w	r2, [r0, #840]	; 0x348
   10882:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
   10886:	f8c0 1140 	str.w	r1, [r0, #320]	; 0x140
   1088a:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
   1088e:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
   10892:	e7eb      	b.n	1086c <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x28>
   10894:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
   10898:	f44f 6000 	mov.w	r0, #2048	; 0x800
   1089c:	f8c2 0280 	str.w	r0, [r2, #640]	; 0x280
   108a0:	4811      	ldr	r0, [pc, #68]	; (108e8 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0xa4>)
   108a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   108a6:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
   108aa:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
   108ae:	f8c0 1140 	str.w	r1, [r0, #320]	; 0x140
   108b2:	f100 0204 	add.w	r2, r0, #4
   108b6:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
   108ba:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
   108be:	f102 0204 	add.w	r2, r2, #4
   108c2:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
   108c6:	f8c0 1148 	str.w	r1, [r0, #328]	; 0x148
   108ca:	f102 0204 	add.w	r2, r2, #4
   108ce:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
   108d2:	f8c0 114c 	str.w	r1, [r0, #332]	; 0x14c
   108d6:	4770      	bx	lr
   108d8:	fffbfffd 	.word	0xfffbfffd
   108dc:	4000b000 	.word	0x4000b000
   108e0:	2000004a 	.word	0x2000004a
   108e4:	fffafffd 	.word	0xfffafffd
   108e8:	40008000 	.word	0x40008000

000108ec <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA>:
   108ec:	b510      	push	{r4, lr}
   108ee:	2807      	cmp	r0, #7
   108f0:	d20d      	bcs.n	1090e <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x22>
   108f2:	e8df f000 	tbb	[pc, r0]
   108f6:	0404      	.short	0x0404
   108f8:	06060404 	.word	0x06060404
   108fc:	0006      	.short	0x0006
   108fe:	4906      	ldr	r1, [pc, #24]	; (10918 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x2c>)
   10900:	e002      	b.n	10908 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x1c>
   10902:	1f00      	subs	r0, r0, #4
   10904:	4905      	ldr	r1, [pc, #20]	; (1091c <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x30>)
   10906:	b2c0      	uxtb	r0, r0
   10908:	eb01 0080 	add.w	r0, r1, r0, lsl #2
   1090c:	bd10      	pop	{r4, pc}
   1090e:	f240 3199 	movw	r1, #921	; 0x399
   10912:	206c      	movs	r0, #108	; 0x6c
   10914:	f000 fbfc 	bl	11110 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   10918:	40008140 	.word	0x40008140
   1091c:	4000b140 	.word	0x4000b140

00010920 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>:
   10920:	b510      	push	{r4, lr}
   10922:	2807      	cmp	r0, #7
   10924:	d20d      	bcs.n	10942 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x22>
   10926:	e8df f000 	tbb	[pc, r0]
   1092a:	0404      	.short	0x0404
   1092c:	06060404 	.word	0x06060404
   10930:	0006      	.short	0x0006
   10932:	4906      	ldr	r1, [pc, #24]	; (1094c <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x2c>)
   10934:	e002      	b.n	1093c <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x1c>
   10936:	1f00      	subs	r0, r0, #4
   10938:	4905      	ldr	r1, [pc, #20]	; (10950 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x30>)
   1093a:	b2c0      	uxtb	r0, r0
   1093c:	eb01 0080 	add.w	r0, r1, r0, lsl #2
   10940:	bd10      	pop	{r4, pc}
   10942:	f240 3199 	movw	r1, #921	; 0x399
   10946:	206c      	movs	r0, #108	; 0x6c
   10948:	f000 fbe2 	bl	11110 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   1094c:	40008140 	.word	0x40008140
   10950:	4000b140 	.word	0x4000b140

00010954 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>:
   10954:	b570      	push	{r4, r5, r6, lr}
   10956:	481f      	ldr	r0, [pc, #124]	; (109d4 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x80>)
   10958:	2400      	movs	r4, #0
   1095a:	2104      	movs	r1, #4
   1095c:	7004      	strb	r4, [r0, #0]
   1095e:	1e80      	subs	r0, r0, #2
   10960:	7001      	strb	r1, [r0, #0]
   10962:	0589      	lsls	r1, r1, #22
   10964:	60c4      	str	r4, [r0, #12]
   10966:	6081      	str	r1, [r0, #8]
   10968:	f7ff fc68 	bl	1023c <MPSL_IRQ_TIMER0_Handler+0x100>
   1096c:	2501      	movs	r5, #1
   1096e:	f04f 2ce0 	mov.w	ip, #3758153728	; 0xe000e000
   10972:	02eb      	lsls	r3, r5, #11
   10974:	f8cc 3180 	str.w	r3, [ip, #384]	; 0x180
   10978:	f3bf 8f4f 	dsb	sy
   1097c:	f3bf 8f6f 	isb	sy
   10980:	f8cc 3280 	str.w	r3, [ip, #640]	; 0x280
   10984:	4814      	ldr	r0, [pc, #80]	; (109d8 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x84>)
   10986:	6045      	str	r5, [r0, #4]
   10988:	6085      	str	r5, [r0, #8]
   1098a:	4914      	ldr	r1, [pc, #80]	; (109dc <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x88>)
   1098c:	680a      	ldr	r2, [r1, #0]
   1098e:	2a00      	cmp	r2, #0
   10990:	d1fc      	bne.n	1098c <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x38>
   10992:	1e51      	subs	r1, r2, #1
   10994:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
   10998:	f8c0 1348 	str.w	r1, [r0, #840]	; 0x348
   1099c:	f8c0 4540 	str.w	r4, [r0, #1344]	; 0x540
   109a0:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
   109a4:	490e      	ldr	r1, [pc, #56]	; (109e0 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x8c>)
   109a6:	f8c1 4540 	str.w	r4, [r1, #1344]	; 0x540
   109aa:	f8c0 4144 	str.w	r4, [r0, #324]	; 0x144
   109ae:	1d09      	adds	r1, r1, #4
   109b0:	f8c1 4540 	str.w	r4, [r1, #1344]	; 0x540
   109b4:	f8c0 4148 	str.w	r4, [r0, #328]	; 0x148
   109b8:	f8c0 4104 	str.w	r4, [r0, #260]	; 0x104
   109bc:	f8cc 3100 	str.w	r3, [ip, #256]	; 0x100
   109c0:	6005      	str	r5, [r0, #0]
   109c2:	f44f 7182 	mov.w	r1, #260	; 0x104
   109c6:	f8c0 1344 	str.w	r1, [r0, #836]	; 0x344
   109ca:	2102      	movs	r1, #2
   109cc:	f8c0 1304 	str.w	r1, [r0, #772]	; 0x304
   109d0:	bd70      	pop	{r4, r5, r6, pc}
   109d2:	0000      	.short	0x0000
   109d4:	2000004a 	.word	0x2000004a
   109d8:	4000b000 	.word	0x4000b000
   109dc:	4000b504 	.word	0x4000b504
   109e0:	4000b004 	.word	0x4000b004

000109e4 <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ>:
   109e4:	4808      	ldr	r0, [pc, #32]	; (10a08 <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ+0x24>)
   109e6:	f990 0000 	ldrsb.w	r0, [r0]
   109ea:	2800      	cmp	r0, #0
   109ec:	bfb8      	it	lt
   109ee:	4770      	bxlt	lr
   109f0:	f000 011f 	and.w	r1, r0, #31
   109f4:	2201      	movs	r2, #1
   109f6:	fa02 f101 	lsl.w	r1, r2, r1
   109fa:	0940      	lsrs	r0, r0, #5
   109fc:	0080      	lsls	r0, r0, #2
   109fe:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   10a02:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
   10a06:	4770      	bx	lr
   10a08:	200003d0 	.word	0x200003d0

00010a0c <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI>:
   10a0c:	4803      	ldr	r0, [pc, #12]	; (10a1c <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI+0x10>)
   10a0e:	7800      	ldrb	r0, [r0, #0]
   10a10:	2803      	cmp	r0, #3
   10a12:	bf0c      	ite	eq
   10a14:	2001      	moveq	r0, #1
   10a16:	2000      	movne	r0, #0
   10a18:	4770      	bx	lr
   10a1a:	0000      	.short	0x0000
   10a1c:	200003bc 	.word	0x200003bc

00010a20 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>:
   10a20:	4801      	ldr	r0, [pc, #4]	; (10a28 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII+0x8>)
   10a22:	8840      	ldrh	r0, [r0, #2]
   10a24:	4770      	bx	lr
   10a26:	0000      	.short	0x0000
   10a28:	200003bc 	.word	0x200003bc

00010a2c <sym_3RLTHYPNUGF2GJUCXUGLNFS6UK7UWZOBB6PWVDI>:
   10a2c:	4803      	ldr	r0, [pc, #12]	; (10a3c <sym_3RLTHYPNUGF2GJUCXUGLNFS6UK7UWZOBB6PWVDI+0x10>)
   10a2e:	7800      	ldrb	r0, [r0, #0]
   10a30:	2802      	cmp	r0, #2
   10a32:	bf16      	itet	ne
   10a34:	2803      	cmpne	r0, #3
   10a36:	2001      	moveq	r0, #1
   10a38:	2000      	movne	r0, #0
   10a3a:	4770      	bx	lr
   10a3c:	200003bc 	.word	0x200003bc

00010a40 <sym_476ZEBCLN4VRBESFX6B7F6TMVQVNPVCGXRXSHHY>:
   10a40:	4802      	ldr	r0, [pc, #8]	; (10a4c <sym_476ZEBCLN4VRBESFX6B7F6TMVQVNPVCGXRXSHHY+0xc>)
   10a42:	2100      	movs	r1, #0
   10a44:	7001      	strb	r1, [r0, #0]
   10a46:	8041      	strh	r1, [r0, #2]
   10a48:	4770      	bx	lr
   10a4a:	0000      	.short	0x0000
   10a4c:	200003bc 	.word	0x200003bc

00010a50 <MPSL_IRQ_CLOCK_Handler>:
   10a50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10a54:	4c16      	ldr	r4, [pc, #88]	; (10ab0 <MPSL_IRQ_CLOCK_Handler+0x60>)
   10a56:	7a60      	ldrb	r0, [r4, #9]
   10a58:	2800      	cmp	r0, #0
   10a5a:	d027      	beq.n	10aac <MPSL_IRQ_CLOCK_Handler+0x5c>
   10a5c:	f44f 7180 	mov.w	r1, #256	; 0x100
   10a60:	058d      	lsls	r5, r1, #22
   10a62:	4628      	mov	r0, r5
   10a64:	f00d fdf0 	bl	1e648 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
   10a68:	4680      	mov	r8, r0
   10a6a:	f44f 7182 	mov.w	r1, #260	; 0x104
   10a6e:	4628      	mov	r0, r5
   10a70:	f00d fdea 	bl	1e648 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
   10a74:	2600      	movs	r6, #0
   10a76:	4607      	mov	r7, r0
   10a78:	f1b8 0f00 	cmp.w	r8, #0
   10a7c:	d009      	beq.n	10a92 <MPSL_IRQ_CLOCK_Handler+0x42>
   10a7e:	2001      	movs	r0, #1
   10a80:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
   10a84:	7920      	ldrb	r0, [r4, #4]
   10a86:	b120      	cbz	r0, 10a92 <MPSL_IRQ_CLOCK_Handler+0x42>
   10a88:	7126      	strb	r6, [r4, #4]
   10a8a:	69e0      	ldr	r0, [r4, #28]
   10a8c:	b108      	cbz	r0, 10a92 <MPSL_IRQ_CLOCK_Handler+0x42>
   10a8e:	4780      	blx	r0
   10a90:	61e6      	str	r6, [r4, #28]
   10a92:	b137      	cbz	r7, 10aa2 <MPSL_IRQ_CLOCK_Handler+0x52>
   10a94:	f8c5 6104 	str.w	r6, [r5, #260]	; 0x104
   10a98:	2002      	movs	r0, #2
   10a9a:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
   10a9e:	f000 fa6b 	bl	10f78 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
   10aa2:	4640      	mov	r0, r8
   10aa4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   10aa8:	f000 b858 	b.w	10b5c <MPSL_IRQ_CLOCK_Handler+0x10c>
   10aac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10ab0:	20000058 	.word	0x20000058
   10ab4:	b510      	push	{r4, lr}
   10ab6:	f00d fe71 	bl	1e79c <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
   10aba:	b930      	cbnz	r0, 10aca <MPSL_IRQ_CLOCK_Handler+0x7a>
   10abc:	f00d fe8f 	bl	1e7de <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
   10ac0:	b918      	cbnz	r0, 10aca <MPSL_IRQ_CLOCK_Handler+0x7a>
   10ac2:	f00d fec2 	bl	1e84a <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
   10ac6:	2800      	cmp	r0, #0
   10ac8:	d002      	beq.n	10ad0 <MPSL_IRQ_CLOCK_Handler+0x80>
   10aca:	4902      	ldr	r1, [pc, #8]	; (10ad4 <MPSL_IRQ_CLOCK_Handler+0x84>)
   10acc:	2002      	movs	r0, #2
   10ace:	6008      	str	r0, [r1, #0]
   10ad0:	bd10      	pop	{r4, pc}
   10ad2:	0000      	.short	0x0000
   10ad4:	40000c34 	.word	0x40000c34
   10ad8:	b570      	push	{r4, r5, r6, lr}
   10ada:	f000 f991 	bl	10e00 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
   10ade:	f000 fa9f 	bl	11020 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
   10ae2:	4c09      	ldr	r4, [pc, #36]	; (10b08 <MPSL_IRQ_CLOCK_Handler+0xb8>)
   10ae4:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
   10ae8:	b130      	cbz	r0, 10af8 <MPSL_IRQ_CLOCK_Handler+0xa8>
   10aea:	f7ff ffe3 	bl	10ab4 <MPSL_IRQ_CLOCK_Handler+0x64>
   10aee:	2001      	movs	r0, #1
   10af0:	6128      	str	r0, [r5, #16]
   10af2:	2004      	movs	r0, #4
   10af4:	72a0      	strb	r0, [r4, #10]
   10af6:	e004      	b.n	10b02 <MPSL_IRQ_CLOCK_Handler+0xb2>
   10af8:	2003      	movs	r0, #3
   10afa:	72a0      	strb	r0, [r4, #10]
   10afc:	2001      	movs	r0, #1
   10afe:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
   10b02:	2000      	movs	r0, #0
   10b04:	71e0      	strb	r0, [r4, #7]
   10b06:	bd70      	pop	{r4, r5, r6, pc}
   10b08:	20000058 	.word	0x20000058
   10b0c:	b570      	push	{r4, r5, r6, lr}
   10b0e:	4c12      	ldr	r4, [pc, #72]	; (10b58 <MPSL_IRQ_CLOCK_Handler+0x108>)
   10b10:	79a0      	ldrb	r0, [r4, #6]
   10b12:	b1e0      	cbz	r0, 10b4e <MPSL_IRQ_CLOCK_Handler+0xfe>
   10b14:	79e1      	ldrb	r1, [r4, #7]
   10b16:	1e40      	subs	r0, r0, #1
   10b18:	4281      	cmp	r1, r0
   10b1a:	da18      	bge.n	10b4e <MPSL_IRQ_CLOCK_Handler+0xfe>
   10b1c:	f000 fa80 	bl	11020 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
   10b20:	4605      	mov	r5, r0
   10b22:	f000 fb69 	bl	111f8 <mpsl_temperature_get>
   10b26:	79a1      	ldrb	r1, [r4, #6]
   10b28:	2901      	cmp	r1, #1
   10b2a:	d902      	bls.n	10b32 <MPSL_IRQ_CLOCK_Handler+0xe2>
   10b2c:	79e1      	ldrb	r1, [r4, #7]
   10b2e:	1c49      	adds	r1, r1, #1
   10b30:	71e1      	strb	r1, [r4, #7]
   10b32:	b10d      	cbz	r5, 10b38 <MPSL_IRQ_CLOCK_Handler+0xe8>
   10b34:	6961      	ldr	r1, [r4, #20]
   10b36:	e000      	b.n	10b3a <MPSL_IRQ_CLOCK_Handler+0xea>
   10b38:	6921      	ldr	r1, [r4, #16]
   10b3a:	1a41      	subs	r1, r0, r1
   10b3c:	2902      	cmp	r1, #2
   10b3e:	da02      	bge.n	10b46 <MPSL_IRQ_CLOCK_Handler+0xf6>
   10b40:	f111 0f02 	cmn.w	r1, #2
   10b44:	dc07      	bgt.n	10b56 <MPSL_IRQ_CLOCK_Handler+0x106>
   10b46:	b10d      	cbz	r5, 10b4c <MPSL_IRQ_CLOCK_Handler+0xfc>
   10b48:	6160      	str	r0, [r4, #20]
   10b4a:	e000      	b.n	10b4e <MPSL_IRQ_CLOCK_Handler+0xfe>
   10b4c:	6120      	str	r0, [r4, #16]
   10b4e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   10b52:	f7ff bfc1 	b.w	10ad8 <MPSL_IRQ_CLOCK_Handler+0x88>
   10b56:	bd70      	pop	{r4, r5, r6, pc}
   10b58:	20000058 	.word	0x20000058
   10b5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10b60:	4606      	mov	r6, r0
   10b62:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
   10b66:	f44f 7186 	mov.w	r1, #268	; 0x10c
   10b6a:	4628      	mov	r0, r5
   10b6c:	f00d fd6c 	bl	1e648 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
   10b70:	4680      	mov	r8, r0
   10b72:	f44f 7188 	mov.w	r1, #272	; 0x110
   10b76:	4628      	mov	r0, r5
   10b78:	f00d fd66 	bl	1e648 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
   10b7c:	4c27      	ldr	r4, [pc, #156]	; (10c1c <MPSL_IRQ_CLOCK_Handler+0x1cc>)
   10b7e:	4682      	mov	sl, r0
   10b80:	7827      	ldrb	r7, [r4, #0]
   10b82:	f104 0008 	add.w	r0, r4, #8
   10b86:	f00d fdd3 	bl	1e730 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
   10b8a:	b110      	cbz	r0, 10b92 <MPSL_IRQ_CLOCK_Handler+0x142>
   10b8c:	f240 11b9 	movw	r1, #441	; 0x1b9
   10b90:	e016      	b.n	10bc0 <MPSL_IRQ_CLOCK_Handler+0x170>
   10b92:	f04f 0901 	mov.w	r9, #1
   10b96:	b146      	cbz	r6, 10baa <MPSL_IRQ_CLOCK_Handler+0x15a>
   10b98:	7aa0      	ldrb	r0, [r4, #10]
   10b9a:	2803      	cmp	r0, #3
   10b9c:	d105      	bne.n	10baa <MPSL_IRQ_CLOCK_Handler+0x15a>
   10b9e:	2004      	movs	r0, #4
   10ba0:	72a0      	strb	r0, [r4, #10]
   10ba2:	f7ff ff87 	bl	10ab4 <MPSL_IRQ_CLOCK_Handler+0x64>
   10ba6:	f8c5 9010 	str.w	r9, [r5, #16]
   10baa:	2600      	movs	r6, #0
   10bac:	f1b8 0f00 	cmp.w	r8, #0
   10bb0:	d018      	beq.n	10be4 <MPSL_IRQ_CLOCK_Handler+0x194>
   10bb2:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
   10bb6:	7aa0      	ldrb	r0, [r4, #10]
   10bb8:	2804      	cmp	r0, #4
   10bba:	d004      	beq.n	10bc6 <MPSL_IRQ_CLOCK_Handler+0x176>
   10bbc:	f240 11cb 	movw	r1, #459	; 0x1cb
   10bc0:	206d      	movs	r0, #109	; 0x6d
   10bc2:	f000 faa5 	bl	11110 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   10bc6:	f00d fde9 	bl	1e79c <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
   10bca:	b928      	cbnz	r0, 10bd8 <MPSL_IRQ_CLOCK_Handler+0x188>
   10bcc:	f00d fe07 	bl	1e7de <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
   10bd0:	b910      	cbnz	r0, 10bd8 <MPSL_IRQ_CLOCK_Handler+0x188>
   10bd2:	f00d fe3a 	bl	1e84a <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
   10bd6:	b108      	cbz	r0, 10bdc <MPSL_IRQ_CLOCK_Handler+0x18c>
   10bd8:	4811      	ldr	r0, [pc, #68]	; (10c20 <MPSL_IRQ_CLOCK_Handler+0x1d0>)
   10bda:	6006      	str	r6, [r0, #0]
   10bdc:	2002      	movs	r0, #2
   10bde:	72a0      	strb	r0, [r4, #10]
   10be0:	f000 f8f2 	bl	10dc8 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
   10be4:	f1ba 0f00 	cmp.w	sl, #0
   10be8:	d008      	beq.n	10bfc <MPSL_IRQ_CLOCK_Handler+0x1ac>
   10bea:	f8c5 6110 	str.w	r6, [r5, #272]	; 0x110
   10bee:	7aa0      	ldrb	r0, [r4, #10]
   10bf0:	2802      	cmp	r0, #2
   10bf2:	d101      	bne.n	10bf8 <MPSL_IRQ_CLOCK_Handler+0x1a8>
   10bf4:	f7ff ff8a 	bl	10b0c <MPSL_IRQ_CLOCK_Handler+0xbc>
   10bf8:	f8c5 9014 	str.w	r9, [r5, #20]
   10bfc:	b13f      	cbz	r7, 10c0e <MPSL_IRQ_CLOCK_Handler+0x1be>
   10bfe:	7026      	strb	r6, [r4, #0]
   10c00:	7aa0      	ldrb	r0, [r4, #10]
   10c02:	2802      	cmp	r0, #2
   10c04:	d101      	bne.n	10c0a <MPSL_IRQ_CLOCK_Handler+0x1ba>
   10c06:	f7ff ff67 	bl	10ad8 <MPSL_IRQ_CLOCK_Handler+0x88>
   10c0a:	f000 f8dd 	bl	10dc8 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
   10c0e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10c12:	4802      	ldr	r0, [pc, #8]	; (10c1c <MPSL_IRQ_CLOCK_Handler+0x1cc>)
   10c14:	3008      	adds	r0, #8
   10c16:	f00d bda2 	b.w	1e75e <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
   10c1a:	0000      	.short	0x0000
   10c1c:	20000058 	.word	0x20000058
   10c20:	40000c34 	.word	0x40000c34
   10c24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10c28:	4c5f      	ldr	r4, [pc, #380]	; (10da8 <MPSL_IRQ_CLOCK_Handler+0x358>)
   10c2a:	2700      	movs	r7, #0
   10c2c:	4606      	mov	r6, r0
   10c2e:	61a7      	str	r7, [r4, #24]
   10c30:	7842      	ldrb	r2, [r0, #1]
   10c32:	7881      	ldrb	r1, [r0, #2]
   10c34:	7800      	ldrb	r0, [r0, #0]
   10c36:	72e0      	strb	r0, [r4, #11]
   10c38:	7162      	strb	r2, [r4, #5]
   10c3a:	71a1      	strb	r1, [r4, #6]
   10c3c:	71e7      	strb	r7, [r4, #7]
   10c3e:	f04f 0801 	mov.w	r8, #1
   10c42:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
   10c46:	2805      	cmp	r0, #5
   10c48:	d225      	bcs.n	10c96 <MPSL_IRQ_CLOCK_Handler+0x246>
   10c4a:	e8df f000 	tbb	[pc, r0]
   10c4e:	0310      	.short	0x0310
   10c50:	00222006 	.word	0x00222006
   10c54:	f8c4 8018 	str.w	r8, [r4, #24]
   10c58:	e009      	b.n	10c6e <MPSL_IRQ_CLOCK_Handler+0x21e>
   10c5a:	f000 f8d1 	bl	10e00 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
   10c5e:	2101      	movs	r1, #1
   10c60:	4628      	mov	r0, r5
   10c62:	f00d fcf6 	bl	1e652 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
   10c66:	2800      	cmp	r0, #0
   10c68:	d0f9      	beq.n	10c5e <MPSL_IRQ_CLOCK_Handler+0x20e>
   10c6a:	2002      	movs	r0, #2
   10c6c:	61a0      	str	r0, [r4, #24]
   10c6e:	f00d fd1c 	bl	1e6aa <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>
   10c72:	b1b0      	cbz	r0, 10ca2 <MPSL_IRQ_CLOCK_Handler+0x252>
   10c74:	f000 f9ee 	bl	11054 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>
   10c78:	7e21      	ldrb	r1, [r4, #24]
   10c7a:	f001 0103 	and.w	r1, r1, #3
   10c7e:	4288      	cmp	r0, r1
   10c80:	d10f      	bne.n	10ca2 <MPSL_IRQ_CLOCK_Handler+0x252>
   10c82:	79b0      	ldrb	r0, [r6, #6]
   10c84:	b150      	cbz	r0, 10c9c <MPSL_IRQ_CLOCK_Handler+0x24c>
   10c86:	2002      	movs	r0, #2
   10c88:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
   10c8c:	e070      	b.n	10d70 <MPSL_IRQ_CLOCK_Handler+0x320>
   10c8e:	4847      	ldr	r0, [pc, #284]	; (10dac <MPSL_IRQ_CLOCK_Handler+0x35c>)
   10c90:	e7ec      	b.n	10c6c <MPSL_IRQ_CLOCK_Handler+0x21c>
   10c92:	4847      	ldr	r0, [pc, #284]	; (10db0 <MPSL_IRQ_CLOCK_Handler+0x360>)
   10c94:	e7ea      	b.n	10c6c <MPSL_IRQ_CLOCK_Handler+0x21c>
   10c96:	f240 313a 	movw	r1, #826	; 0x33a
   10c9a:	e04d      	b.n	10d38 <MPSL_IRQ_CLOCK_Handler+0x2e8>
   10c9c:	f000 f9ae 	bl	10ffc <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
   10ca0:	e066      	b.n	10d70 <MPSL_IRQ_CLOCK_Handler+0x320>
   10ca2:	f8c5 800c 	str.w	r8, [r5, #12]
   10ca6:	f44f 7a82 	mov.w	sl, #260	; 0x104
   10caa:	f8c5 7104 	str.w	r7, [r5, #260]	; 0x104
   10cae:	69a0      	ldr	r0, [r4, #24]
   10cb0:	f8c5 0518 	str.w	r0, [r5, #1304]	; 0x518
   10cb4:	f00d fd5e 	bl	1e774 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
   10cb8:	b940      	cbnz	r0, 10ccc <MPSL_IRQ_CLOCK_Handler+0x27c>
   10cba:	f00d fd65 	bl	1e788 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
   10cbe:	b928      	cbnz	r0, 10ccc <MPSL_IRQ_CLOCK_Handler+0x27c>
   10cc0:	f00d fd79 	bl	1e7b6 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
   10cc4:	b910      	cbnz	r0, 10ccc <MPSL_IRQ_CLOCK_Handler+0x27c>
   10cc6:	f00d fd8a 	bl	1e7de <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
   10cca:	b138      	cbz	r0, 10cdc <MPSL_IRQ_CLOCK_Handler+0x28c>
   10ccc:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   10cd0:	f8d0 0244 	ldr.w	r0, [r0, #580]	; 0x244
   10cd4:	4937      	ldr	r1, [pc, #220]	; (10db4 <MPSL_IRQ_CLOCK_Handler+0x364>)
   10cd6:	f3c0 3042 	ubfx	r0, r0, #13, #3
   10cda:	6008      	str	r0, [r1, #0]
   10cdc:	f00d fd4a 	bl	1e774 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
   10ce0:	b940      	cbnz	r0, 10cf4 <MPSL_IRQ_CLOCK_Handler+0x2a4>
   10ce2:	f00d fd51 	bl	1e788 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
   10ce6:	b928      	cbnz	r0, 10cf4 <MPSL_IRQ_CLOCK_Handler+0x2a4>
   10ce8:	f00d fd65 	bl	1e7b6 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
   10cec:	b910      	cbnz	r0, 10cf4 <MPSL_IRQ_CLOCK_Handler+0x2a4>
   10cee:	f00d fd76 	bl	1e7de <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
   10cf2:	b118      	cbz	r0, 10cfc <MPSL_IRQ_CLOCK_Handler+0x2ac>
   10cf4:	492f      	ldr	r1, [pc, #188]	; (10db4 <MPSL_IRQ_CLOCK_Handler+0x364>)
   10cf6:	3110      	adds	r1, #16
   10cf8:	f8c1 8000 	str.w	r8, [r1]
   10cfc:	f8c5 8008 	str.w	r8, [r5, #8]
   10d00:	2002      	movs	r0, #2
   10d02:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
   10d06:	79b0      	ldrb	r0, [r6, #6]
   10d08:	bb90      	cbnz	r0, 10d70 <MPSL_IRQ_CLOCK_Handler+0x320>
   10d0a:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
   10d0e:	f010 0f02 	tst.w	r0, #2
   10d12:	d00f      	beq.n	10d34 <MPSL_IRQ_CLOCK_Handler+0x2e4>
   10d14:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 10db8 <MPSL_IRQ_CLOCK_Handler+0x368>
   10d18:	f8d9 1000 	ldr.w	r1, [r9]
   10d1c:	43c9      	mvns	r1, r1
   10d1e:	f341 1100 	sbfx	r1, r1, #4, #1
   10d22:	f101 0801 	add.w	r8, r1, #1
   10d26:	f8d9 1000 	ldr.w	r1, [r9]
   10d2a:	f041 0110 	orr.w	r1, r1, #16
   10d2e:	f8c9 1000 	str.w	r1, [r9]
   10d32:	e007      	b.n	10d44 <MPSL_IRQ_CLOCK_Handler+0x2f4>
   10d34:	f240 21fb 	movw	r1, #763	; 0x2fb
   10d38:	206d      	movs	r0, #109	; 0x6d
   10d3a:	f000 f9e9 	bl	11110 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   10d3e:	bf00      	nop
   10d40:	f000 fb20 	bl	11384 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
   10d44:	4651      	mov	r1, sl
   10d46:	4628      	mov	r0, r5
   10d48:	f00d fc7e 	bl	1e648 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
   10d4c:	2800      	cmp	r0, #0
   10d4e:	d0f7      	beq.n	10d40 <MPSL_IRQ_CLOCK_Handler+0x2f0>
   10d50:	f000 f954 	bl	10ffc <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
   10d54:	f1b8 0f00 	cmp.w	r8, #0
   10d58:	d105      	bne.n	10d66 <MPSL_IRQ_CLOCK_Handler+0x316>
   10d5a:	f8d9 1000 	ldr.w	r1, [r9]
   10d5e:	f021 0110 	bic.w	r1, r1, #16
   10d62:	f8c9 1000 	str.w	r1, [r9]
   10d66:	2002      	movs	r0, #2
   10d68:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
   10d6c:	f8c5 7104 	str.w	r7, [r5, #260]	; 0x104
   10d70:	79a0      	ldrb	r0, [r4, #6]
   10d72:	b170      	cbz	r0, 10d92 <MPSL_IRQ_CLOCK_Handler+0x342>
   10d74:	7830      	ldrb	r0, [r6, #0]
   10d76:	b960      	cbnz	r0, 10d92 <MPSL_IRQ_CLOCK_Handler+0x342>
   10d78:	f000 f952 	bl	11020 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
   10d7c:	4606      	mov	r6, r0
   10d7e:	f000 fa3b 	bl	111f8 <mpsl_temperature_get>
   10d82:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   10d86:	b116      	cbz	r6, 10d8e <MPSL_IRQ_CLOCK_Handler+0x33e>
   10d88:	e9c4 1004 	strd	r1, r0, [r4, #16]
   10d8c:	e001      	b.n	10d92 <MPSL_IRQ_CLOCK_Handler+0x342>
   10d8e:	e9c4 0104 	strd	r0, r1, [r4, #16]
   10d92:	2101      	movs	r1, #1
   10d94:	4628      	mov	r0, r5
   10d96:	f00d fc5c 	bl	1e652 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
   10d9a:	b108      	cbz	r0, 10da0 <MPSL_IRQ_CLOCK_Handler+0x350>
   10d9c:	f000 f93a 	bl	11014 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
   10da0:	72a7      	strb	r7, [r4, #10]
   10da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10da6:	0000      	.short	0x0000
   10da8:	20000058 	.word	0x20000058
   10dac:	00020001 	.word	0x00020001
   10db0:	00030001 	.word	0x00030001
   10db4:	4000053c 	.word	0x4000053c
   10db8:	e000ed10 	.word	0xe000ed10

00010dbc <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>:
   10dbc:	4801      	ldr	r0, [pc, #4]	; (10dc4 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q+0x8>)
   10dbe:	89c0      	ldrh	r0, [r0, #14]
   10dc0:	4770      	bx	lr
   10dc2:	0000      	.short	0x0000
   10dc4:	20000058 	.word	0x20000058

00010dc8 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>:
   10dc8:	b510      	push	{r4, lr}
   10dca:	f3ef 8410 	mrs	r4, PRIMASK
   10dce:	b672      	cpsid	i
   10dd0:	480a      	ldr	r0, [pc, #40]	; (10dfc <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x34>)
   10dd2:	7841      	ldrb	r1, [r0, #1]
   10dd4:	b129      	cbz	r1, 10de2 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x1a>
   10dd6:	7841      	ldrb	r1, [r0, #1]
   10dd8:	1e49      	subs	r1, r1, #1
   10dda:	7041      	strb	r1, [r0, #1]
   10ddc:	7841      	ldrb	r1, [r0, #1]
   10dde:	b129      	cbz	r1, 10dec <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x24>
   10de0:	e008      	b.n	10df4 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
   10de2:	f44f 718e 	mov.w	r1, #284	; 0x11c
   10de6:	206d      	movs	r0, #109	; 0x6d
   10de8:	f000 f992 	bl	11110 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   10dec:	7880      	ldrb	r0, [r0, #2]
   10dee:	b908      	cbnz	r0, 10df4 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
   10df0:	f000 f924 	bl	1103c <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>
   10df4:	2c00      	cmp	r4, #0
   10df6:	d100      	bne.n	10dfa <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x32>
   10df8:	b662      	cpsie	i
   10dfa:	bd10      	pop	{r4, pc}
   10dfc:	20000058 	.word	0x20000058

00010e00 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>:
   10e00:	b510      	push	{r4, lr}
   10e02:	f3ef 8410 	mrs	r4, PRIMASK
   10e06:	b672      	cpsid	i
   10e08:	4806      	ldr	r0, [pc, #24]	; (10e24 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x24>)
   10e0a:	7841      	ldrb	r1, [r0, #1]
   10e0c:	1c49      	adds	r1, r1, #1
   10e0e:	7041      	strb	r1, [r0, #1]
   10e10:	7840      	ldrb	r0, [r0, #1]
   10e12:	2801      	cmp	r0, #1
   10e14:	d101      	bne.n	10e1a <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x1a>
   10e16:	f00d fc33 	bl	1e680 <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>
   10e1a:	2c00      	cmp	r4, #0
   10e1c:	d100      	bne.n	10e20 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x20>
   10e1e:	b662      	cpsie	i
   10e20:	bd10      	pop	{r4, pc}
   10e22:	0000      	.short	0x0000
   10e24:	20000058 	.word	0x20000058

00010e28 <mpsl_clock_hfclk_release>:
   10e28:	4805      	ldr	r0, [pc, #20]	; (10e40 <mpsl_clock_hfclk_release+0x18>)
   10e2a:	b510      	push	{r4, lr}
   10e2c:	78c1      	ldrb	r1, [r0, #3]
   10e2e:	b121      	cbz	r1, 10e3a <mpsl_clock_hfclk_release+0x12>
   10e30:	2100      	movs	r1, #0
   10e32:	7101      	strb	r1, [r0, #4]
   10e34:	70c1      	strb	r1, [r0, #3]
   10e36:	f7ff ffc7 	bl	10dc8 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
   10e3a:	2000      	movs	r0, #0
   10e3c:	bd10      	pop	{r4, pc}
   10e3e:	0000      	.short	0x0000
   10e40:	20000058 	.word	0x20000058

00010e44 <mpsl_clock_hfclk_request>:
   10e44:	b570      	push	{r4, r5, r6, lr}
   10e46:	4c0c      	ldr	r4, [pc, #48]	; (10e78 <mpsl_clock_hfclk_request+0x34>)
   10e48:	78e1      	ldrb	r1, [r4, #3]
   10e4a:	b961      	cbnz	r1, 10e66 <mpsl_clock_hfclk_request+0x22>
   10e4c:	2501      	movs	r5, #1
   10e4e:	70e5      	strb	r5, [r4, #3]
   10e50:	61e0      	str	r0, [r4, #28]
   10e52:	f7ff ffd5 	bl	10e00 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
   10e56:	f000 f8e3 	bl	11020 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
   10e5a:	b130      	cbz	r0, 10e6a <mpsl_clock_hfclk_request+0x26>
   10e5c:	69e0      	ldr	r0, [r4, #28]
   10e5e:	b110      	cbz	r0, 10e66 <mpsl_clock_hfclk_request+0x22>
   10e60:	4780      	blx	r0
   10e62:	2000      	movs	r0, #0
   10e64:	61e0      	str	r0, [r4, #28]
   10e66:	2000      	movs	r0, #0
   10e68:	bd70      	pop	{r4, r5, r6, pc}
   10e6a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   10e6e:	7125      	strb	r5, [r4, #4]
   10e70:	f8c0 5304 	str.w	r5, [r0, #772]	; 0x304
   10e74:	e7f7      	b.n	10e66 <mpsl_clock_hfclk_request+0x22>
   10e76:	0000      	.short	0x0000
   10e78:	20000058 	.word	0x20000058

00010e7c <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>:
   10e7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10e80:	0005      	movs	r5, r0
   10e82:	f06f 0015 	mvn.w	r0, #21
   10e86:	d03f      	beq.n	10f08 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
   10e88:	7829      	ldrb	r1, [r5, #0]
   10e8a:	2904      	cmp	r1, #4
   10e8c:	d83c      	bhi.n	10f08 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
   10e8e:	2900      	cmp	r1, #0
   10e90:	7869      	ldrb	r1, [r5, #1]
   10e92:	d03b      	beq.n	10f0c <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x90>
   10e94:	2900      	cmp	r1, #0
   10e96:	d137      	bne.n	10f08 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
   10e98:	78a9      	ldrb	r1, [r5, #2]
   10e9a:	2900      	cmp	r1, #0
   10e9c:	d134      	bne.n	10f08 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
   10e9e:	2000      	movs	r0, #0
   10ea0:	f00d fb9d 	bl	1e5de <sym_2XHWCFCONWNVOJMSX36K54RLWKHKBPZWGYV3IRI+0x1e>
   10ea4:	2000      	movs	r0, #0
   10ea6:	f00d fb8d 	bl	1e5c4 <sym_2XHWCFCONWNVOJMSX36K54RLWKHKBPZWGYV3IRI+0x4>
   10eaa:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
   10eae:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   10eb2:	f8c8 1308 	str.w	r1, [r8, #776]	; 0x308
   10eb6:	2600      	movs	r6, #0
   10eb8:	f8c8 6100 	str.w	r6, [r8, #256]	; 0x100
   10ebc:	f8c8 6104 	str.w	r6, [r8, #260]	; 0x104
   10ec0:	f8c8 610c 	str.w	r6, [r8, #268]	; 0x10c
   10ec4:	f8c8 6110 	str.w	r6, [r8, #272]	; 0x110
   10ec8:	4c14      	ldr	r4, [pc, #80]	; (10f1c <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0xa0>)
   10eca:	7066      	strb	r6, [r4, #1]
   10ecc:	88a8      	ldrh	r0, [r5, #4]
   10ece:	81a0      	strh	r0, [r4, #12]
   10ed0:	f00d fbcd 	bl	1e66e <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>
   10ed4:	2701      	movs	r7, #1
   10ed6:	b108      	cbz	r0, 10edc <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x60>
   10ed8:	70e7      	strb	r7, [r4, #3]
   10eda:	7067      	strb	r7, [r4, #1]
   10edc:	2101      	movs	r1, #1
   10ede:	4640      	mov	r0, r8
   10ee0:	f00d fbb7 	bl	1e652 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
   10ee4:	b108      	cbz	r0, 10eea <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x6e>
   10ee6:	f000 f895 	bl	11014 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
   10eea:	f240 50f5 	movw	r0, #1525	; 0x5f5
   10eee:	81e0      	strh	r0, [r4, #14]
   10ef0:	4628      	mov	r0, r5
   10ef2:	f7ff fe97 	bl	10c24 <MPSL_IRQ_CLOCK_Handler+0x1d4>
   10ef6:	7267      	strb	r7, [r4, #9]
   10ef8:	2000      	movs	r0, #0
   10efa:	f00d fb63 	bl	1e5c4 <sym_2XHWCFCONWNVOJMSX36K54RLWKHKBPZWGYV3IRI+0x4>
   10efe:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
   10f02:	4630      	mov	r0, r6
   10f04:	f8c1 7100 	str.w	r7, [r1, #256]	; 0x100
   10f08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10f0c:	2900      	cmp	r1, #0
   10f0e:	d0fb      	beq.n	10f08 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
   10f10:	2920      	cmp	r1, #32
   10f12:	d8f9      	bhi.n	10f08 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
   10f14:	78a9      	ldrb	r1, [r5, #2]
   10f16:	2921      	cmp	r1, #33	; 0x21
   10f18:	d9c1      	bls.n	10e9e <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x22>
   10f1a:	e7f5      	b.n	10f08 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
   10f1c:	20000058 	.word	0x20000058

00010f20 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>:
   10f20:	4801      	ldr	r0, [pc, #4]	; (10f28 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY+0x8>)
   10f22:	8980      	ldrh	r0, [r0, #12]
   10f24:	4770      	bx	lr
   10f26:	0000      	.short	0x0000
   10f28:	20000058 	.word	0x20000058

00010f2c <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA>:
   10f2c:	b510      	push	{r4, lr}
   10f2e:	480d      	ldr	r0, [pc, #52]	; (10f64 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
   10f30:	f00d fbfe 	bl	1e730 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
   10f34:	490b      	ldr	r1, [pc, #44]	; (10f64 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
   10f36:	3908      	subs	r1, #8
   10f38:	b148      	cbz	r0, 10f4e <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x22>
   10f3a:	2001      	movs	r0, #1
   10f3c:	7008      	strb	r0, [r1, #0]
   10f3e:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
   10f42:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
   10f46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10f4a:	f7ff bf59 	b.w	10e00 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
   10f4e:	7a88      	ldrb	r0, [r1, #10]
   10f50:	2802      	cmp	r0, #2
   10f52:	d101      	bne.n	10f58 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x2c>
   10f54:	f7ff fdc0 	bl	10ad8 <MPSL_IRQ_CLOCK_Handler+0x88>
   10f58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10f5c:	4801      	ldr	r0, [pc, #4]	; (10f64 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
   10f5e:	f00d bbfe 	b.w	1e75e <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
   10f62:	0000      	.short	0x0000
   10f64:	20000060 	.word	0x20000060

00010f68 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>:
   10f68:	4802      	ldr	r0, [pc, #8]	; (10f74 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xc>)
   10f6a:	7a80      	ldrb	r0, [r0, #10]
   10f6c:	2800      	cmp	r0, #0
   10f6e:	d000      	beq.n	10f72 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xa>
   10f70:	2001      	movs	r0, #1
   10f72:	4770      	bx	lr
   10f74:	20000058 	.word	0x20000058

00010f78 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>:
   10f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10f7a:	4d1f      	ldr	r5, [pc, #124]	; (10ff8 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
   10f7c:	7ae8      	ldrb	r0, [r5, #11]
   10f7e:	2800      	cmp	r0, #0
   10f80:	d10f      	bne.n	10fa2 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
   10f82:	7e28      	ldrb	r0, [r5, #24]
   10f84:	f000 0003 	and.w	r0, r0, #3
   10f88:	f00d fb7f 	bl	1e68a <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
   10f8c:	2800      	cmp	r0, #0
   10f8e:	d008      	beq.n	10fa2 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
   10f90:	f3ef 8110 	mrs	r1, PRIMASK
   10f94:	b672      	cpsid	i
   10f96:	f7ff ffe7 	bl	10f68 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>
   10f9a:	b118      	cbz	r0, 10fa4 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2c>
   10f9c:	2900      	cmp	r1, #0
   10f9e:	d100      	bne.n	10fa2 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
   10fa0:	b662      	cpsie	i
   10fa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10fa4:	2601      	movs	r6, #1
   10fa6:	72ae      	strb	r6, [r5, #10]
   10fa8:	b901      	cbnz	r1, 10fac <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x34>
   10faa:	b662      	cpsie	i
   10fac:	2018      	movs	r0, #24
   10fae:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
   10fb2:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
   10fb6:	61a6      	str	r6, [r4, #24]
   10fb8:	f44f 7020 	mov.w	r0, #640	; 0x280
   10fbc:	f8ad 0000 	strh.w	r0, [sp]
   10fc0:	f8bd 0000 	ldrh.w	r0, [sp]
   10fc4:	1e41      	subs	r1, r0, #1
   10fc6:	f8ad 1000 	strh.w	r1, [sp]
   10fca:	d2f9      	bcs.n	10fc0 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x48>
   10fcc:	2700      	movs	r7, #0
   10fce:	f8c4 710c 	str.w	r7, [r4, #268]	; 0x10c
   10fd2:	f8c4 7110 	str.w	r7, [r4, #272]	; 0x110
   10fd6:	4808      	ldr	r0, [pc, #32]	; (10ff8 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
   10fd8:	3008      	adds	r0, #8
   10fda:	f00d fbbc 	bl	1e756 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
   10fde:	702f      	strb	r7, [r5, #0]
   10fe0:	f7ff fd7a 	bl	10ad8 <MPSL_IRQ_CLOCK_Handler+0x88>
   10fe4:	6166      	str	r6, [r4, #20]
   10fe6:	7968      	ldrb	r0, [r5, #5]
   10fe8:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   10fec:	f8c4 0538 	str.w	r0, [r4, #1336]	; 0x538
   10ff0:	2018      	movs	r0, #24
   10ff2:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
   10ff6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10ff8:	20000058 	.word	0x20000058

00010ffc <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>:
   10ffc:	b510      	push	{r4, lr}
   10ffe:	4c04      	ldr	r4, [pc, #16]	; (11010 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x14>)
   11000:	7e20      	ldrb	r0, [r4, #24]
   11002:	f000 0003 	and.w	r0, r0, #3
   11006:	f00d fb40 	bl	1e68a <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
   1100a:	2800      	cmp	r0, #0
   1100c:	d0f8      	beq.n	11000 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x4>
   1100e:	bd10      	pop	{r4, pc}
   11010:	20000058 	.word	0x20000058

00011014 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>:
   11014:	4901      	ldr	r1, [pc, #4]	; (1101c <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA+0x8>)
   11016:	2001      	movs	r0, #1
   11018:	7008      	strb	r0, [r1, #0]
   1101a:	4770      	bx	lr
   1101c:	200003d1 	.word	0x200003d1

00011020 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>:
   11020:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   11024:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
   11028:	b918      	cbnz	r0, 11032 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x12>
   1102a:	4803      	ldr	r0, [pc, #12]	; (11038 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x18>)
   1102c:	7800      	ldrb	r0, [r0, #0]
   1102e:	2800      	cmp	r0, #0
   11030:	d000      	beq.n	11034 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x14>
   11032:	2001      	movs	r0, #1
   11034:	4770      	bx	lr
   11036:	0000      	.short	0x0000
   11038:	200003d1 	.word	0x200003d1

0001103c <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>:
   1103c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   11040:	2101      	movs	r1, #1
   11042:	6041      	str	r1, [r0, #4]
   11044:	2100      	movs	r1, #0
   11046:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
   1104a:	4801      	ldr	r0, [pc, #4]	; (11050 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ+0x14>)
   1104c:	7001      	strb	r1, [r0, #0]
   1104e:	4770      	bx	lr
   11050:	200003d1 	.word	0x200003d1

00011054 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>:
   11054:	4802      	ldr	r0, [pc, #8]	; (11060 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0xc>)
   11056:	6800      	ldr	r0, [r0, #0]
   11058:	f000 0003 	and.w	r0, r0, #3
   1105c:	4770      	bx	lr
   1105e:	0000      	.short	0x0000
   11060:	4000041c 	.word	0x4000041c
   11064:	b510      	push	{r4, lr}
   11066:	b131      	cbz	r1, 11076 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x22>
   11068:	2901      	cmp	r1, #1
   1106a:	d007      	beq.n	1107c <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x28>
   1106c:	f240 3102 	movw	r1, #770	; 0x302
   11070:	a005      	add	r0, pc, #20	; (adr r0, 11088 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x34>)
   11072:	f000 f821 	bl	110b8 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>
   11076:	f8d0 0414 	ldr.w	r0, [r0, #1044]	; 0x414
   1107a:	e001      	b.n	11080 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x2c>
   1107c:	f8d0 0408 	ldr.w	r0, [r0, #1032]	; 0x408
   11080:	f000 0001 	and.w	r0, r0, #1
   11084:	bd10      	pop	{r4, pc}
   11086:	0000      	.short	0x0000
   11088:	5f66726e 	.word	0x5f66726e
   1108c:	636f6c63 	.word	0x636f6c63
   11090:	00682e6b 	.word	0x00682e6b
   11094:	f3bf 8f4f 	dsb	sy
   11098:	4805      	ldr	r0, [pc, #20]	; (110b0 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x5c>)
   1109a:	6801      	ldr	r1, [r0, #0]
   1109c:	4a05      	ldr	r2, [pc, #20]	; (110b4 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x60>)
   1109e:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
   110a2:	4311      	orrs	r1, r2
   110a4:	6001      	str	r1, [r0, #0]
   110a6:	f3bf 8f4f 	dsb	sy
   110aa:	bf00      	nop
   110ac:	e7fd      	b.n	110aa <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x56>
   110ae:	0000      	.short	0x0000
   110b0:	e000ed0c 	.word	0xe000ed0c
   110b4:	05fa0004 	.word	0x05fa0004

000110b8 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>:
   110b8:	b672      	cpsid	i
   110ba:	4a03      	ldr	r2, [pc, #12]	; (110c8 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x10>)
   110bc:	6852      	ldr	r2, [r2, #4]
   110be:	b102      	cbz	r2, 110c2 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0xa>
   110c0:	4790      	blx	r2
   110c2:	f7ff ffe7 	bl	11094 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x40>
   110c6:	0000      	.short	0x0000
   110c8:	20000078 	.word	0x20000078
   110cc:	4806      	ldr	r0, [pc, #24]	; (110e8 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x30>)
   110ce:	b510      	push	{r4, lr}
   110d0:	2100      	movs	r1, #0
   110d2:	6001      	str	r1, [r0, #0]
   110d4:	2101      	movs	r1, #1
   110d6:	6001      	str	r1, [r0, #0]
   110d8:	4608      	mov	r0, r1
   110da:	f00d fafd 	bl	1e6d8 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
   110de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   110e2:	2001      	movs	r0, #1
   110e4:	f00d baeb 	b.w	1e6be <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
   110e8:	40001ffc 	.word	0x40001ffc
   110ec:	4807      	ldr	r0, [pc, #28]	; (1110c <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x54>)
   110ee:	b510      	push	{r4, lr}
   110f0:	2101      	movs	r1, #1
   110f2:	6041      	str	r1, [r0, #4]
   110f4:	1e89      	subs	r1, r1, #2
   110f6:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
   110fa:	200c      	movs	r0, #12
   110fc:	f00d faec 	bl	1e6d8 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
   11100:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   11104:	200c      	movs	r0, #12
   11106:	f00d bada 	b.w	1e6be <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
   1110a:	0000      	.short	0x0000
   1110c:	4000c000 	.word	0x4000c000

00011110 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>:
   11110:	b50e      	push	{r1, r2, r3, lr}
   11112:	b672      	cpsid	i
   11114:	4a0f      	ldr	r2, [pc, #60]	; (11154 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x44>)
   11116:	6855      	ldr	r5, [r2, #4]
   11118:	b1d5      	cbz	r5, 11150 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x40>
   1111a:	2200      	movs	r2, #0
   1111c:	4603      	mov	r3, r0
   1111e:	466e      	mov	r6, sp
   11120:	240a      	movs	r4, #10
   11122:	e003      	b.n	1112c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x1c>
   11124:	fbb0 f0f4 	udiv	r0, r0, r4
   11128:	1c52      	adds	r2, r2, #1
   1112a:	b2d2      	uxtb	r2, r2
   1112c:	2800      	cmp	r0, #0
   1112e:	d1f9      	bne.n	11124 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x14>
   11130:	54b0      	strb	r0, [r6, r2]
   11132:	e009      	b.n	11148 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x38>
   11134:	fbb3 f0f4 	udiv	r0, r3, r4
   11138:	fb04 3010 	mls	r0, r4, r0, r3
   1113c:	fbb3 f3f4 	udiv	r3, r3, r4
   11140:	1e52      	subs	r2, r2, #1
   11142:	b2d2      	uxtb	r2, r2
   11144:	3030      	adds	r0, #48	; 0x30
   11146:	54b0      	strb	r0, [r6, r2]
   11148:	2a00      	cmp	r2, #0
   1114a:	d1f3      	bne.n	11134 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x24>
   1114c:	4630      	mov	r0, r6
   1114e:	47a8      	blx	r5
   11150:	f7ff ffa0 	bl	11094 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x40>
   11154:	20000078 	.word	0x20000078

00011158 <mpsl_init>:
   11158:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1115c:	4c18      	ldr	r4, [pc, #96]	; (111c0 <mpsl_init+0x68>)
   1115e:	4606      	mov	r6, r0
   11160:	4617      	mov	r7, r2
   11162:	7860      	ldrb	r0, [r4, #1]
   11164:	460d      	mov	r5, r1
   11166:	b118      	cbz	r0, 11170 <mpsl_init+0x18>
   11168:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1116c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11170:	f7fc fba0 	bl	d8b4 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA>
   11174:	b906      	cbnz	r6, 11178 <mpsl_init+0x20>
   11176:	4e13      	ldr	r6, [pc, #76]	; (111c4 <mpsl_init+0x6c>)
   11178:	6067      	str	r7, [r4, #4]
   1117a:	7025      	strb	r5, [r4, #0]
   1117c:	f7ff ffa6 	bl	110cc <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x14>
   11180:	f7ff ffb4 	bl	110ec <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x34>
   11184:	4630      	mov	r0, r6
   11186:	f7ff fe79 	bl	10e7c <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>
   1118a:	0006      	movs	r6, r0
   1118c:	d1ee      	bne.n	1116c <mpsl_init+0x14>
   1118e:	f7fe fe3f 	bl	fe10 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>
   11192:	f7ff fef1 	bl	10f78 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
   11196:	f00d f95e 	bl	1e456 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>
   1119a:	4628      	mov	r0, r5
   1119c:	f00d fa8f 	bl	1e6be <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
   111a0:	2001      	movs	r0, #1
   111a2:	2d00      	cmp	r5, #0
   111a4:	db09      	blt.n	111ba <mpsl_init+0x62>
   111a6:	f005 011f 	and.w	r1, r5, #31
   111aa:	fa00 f101 	lsl.w	r1, r0, r1
   111ae:	096a      	lsrs	r2, r5, #5
   111b0:	0092      	lsls	r2, r2, #2
   111b2:	f102 22e0 	add.w	r2, r2, #3758153728	; 0xe000e000
   111b6:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
   111ba:	7060      	strb	r0, [r4, #1]
   111bc:	4630      	mov	r0, r6
   111be:	e7d5      	b.n	1116c <mpsl_init+0x14>
   111c0:	20000078 	.word	0x20000078
   111c4:	0001e6fa 	.word	0x0001e6fa

000111c8 <mpsl_is_initialized>:
   111c8:	4801      	ldr	r0, [pc, #4]	; (111d0 <mpsl_is_initialized+0x8>)
   111ca:	7840      	ldrb	r0, [r0, #1]
   111cc:	4770      	bx	lr
   111ce:	0000      	.short	0x0000
   111d0:	20000078 	.word	0x20000078

000111d4 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>:
   111d4:	4807      	ldr	r0, [pc, #28]	; (111f4 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x20>)
   111d6:	f990 0000 	ldrsb.w	r0, [r0]
   111da:	2800      	cmp	r0, #0
   111dc:	db09      	blt.n	111f2 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x1e>
   111de:	f000 021f 	and.w	r2, r0, #31
   111e2:	2101      	movs	r1, #1
   111e4:	4091      	lsls	r1, r2
   111e6:	0940      	lsrs	r0, r0, #5
   111e8:	0080      	lsls	r0, r0, #2
   111ea:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   111ee:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
   111f2:	4770      	bx	lr
   111f4:	20000078 	.word	0x20000078

000111f8 <mpsl_temperature_get>:
   111f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   111fc:	2601      	movs	r6, #1
   111fe:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
   11202:	0331      	lsls	r1, r6, #12
   11204:	f04f 0800 	mov.w	r8, #0
   11208:	4640      	mov	r0, r8
   1120a:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
   1120e:	f3bf 8f4f 	dsb	sy
   11212:	f3bf 8f6f 	isb	sy
   11216:	4c16      	ldr	r4, [pc, #88]	; (11270 <mpsl_temperature_get+0x78>)
   11218:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
   1121c:	200c      	movs	r0, #12
   1121e:	f00d fa7a 	bl	1e716 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
   11222:	4d14      	ldr	r5, [pc, #80]	; (11274 <mpsl_temperature_get+0x7c>)
   11224:	6828      	ldr	r0, [r5, #0]
   11226:	43c0      	mvns	r0, r0
   11228:	f340 1700 	sbfx	r7, r0, #4, #1
   1122c:	6828      	ldr	r0, [r5, #0]
   1122e:	f040 0010 	orr.w	r0, r0, #16
   11232:	6028      	str	r0, [r5, #0]
   11234:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
   11238:	6026      	str	r6, [r4, #0]
   1123a:	1c7f      	adds	r7, r7, #1
   1123c:	e002      	b.n	11244 <mpsl_temperature_get+0x4c>
   1123e:	bf00      	nop
   11240:	f000 f8a0 	bl	11384 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
   11244:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
   11248:	2800      	cmp	r0, #0
   1124a:	d0f9      	beq.n	11240 <mpsl_temperature_get+0x48>
   1124c:	b91f      	cbnz	r7, 11256 <mpsl_temperature_get+0x5e>
   1124e:	6828      	ldr	r0, [r5, #0]
   11250:	f020 0010 	bic.w	r0, r0, #16
   11254:	6028      	str	r0, [r5, #0]
   11256:	4808      	ldr	r0, [pc, #32]	; (11278 <mpsl_temperature_get+0x80>)
   11258:	6805      	ldr	r5, [r0, #0]
   1125a:	6066      	str	r6, [r4, #4]
   1125c:	f8c4 6308 	str.w	r6, [r4, #776]	; 0x308
   11260:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
   11264:	200c      	movs	r0, #12
   11266:	f00d fa56 	bl	1e716 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
   1126a:	4628      	mov	r0, r5
   1126c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11270:	4000c000 	.word	0x4000c000
   11274:	e000ed10 	.word	0xe000ed10
   11278:	4000c508 	.word	0x4000c508

0001127c <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>:
   1127c:	b510      	push	{r4, lr}
   1127e:	4602      	mov	r2, r0
   11280:	2005      	movs	r0, #5
   11282:	490c      	ldr	r1, [pc, #48]	; (112b4 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x38>)
   11284:	e004      	b.n	11290 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x14>
   11286:	bf00      	nop
   11288:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
   1128c:	791b      	ldrb	r3, [r3, #4]
   1128e:	b133      	cbz	r3, 1129e <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x22>
   11290:	1e40      	subs	r0, r0, #1
   11292:	b2c0      	uxtb	r0, r0
   11294:	d2f8      	bcs.n	11288 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0xc>
   11296:	2148      	movs	r1, #72	; 0x48
   11298:	2069      	movs	r0, #105	; 0x69
   1129a:	f7ff ff39 	bl	11110 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   1129e:	f841 2030 	str.w	r2, [r1, r0, lsl #3]
   112a2:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
   112a6:	2200      	movs	r2, #0
   112a8:	714a      	strb	r2, [r1, #5]
   112aa:	718a      	strb	r2, [r1, #6]
   112ac:	2201      	movs	r2, #1
   112ae:	710a      	strb	r2, [r1, #4]
   112b0:	bd10      	pop	{r4, pc}
   112b2:	0000      	.short	0x0000
   112b4:	2000146c 	.word	0x2000146c

000112b8 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>:
   112b8:	b510      	push	{r4, lr}
   112ba:	2805      	cmp	r0, #5
   112bc:	d301      	bcc.n	112c2 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0xa>
   112be:	2158      	movs	r1, #88	; 0x58
   112c0:	e006      	b.n	112d0 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x18>
   112c2:	490a      	ldr	r1, [pc, #40]	; (112ec <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x34>)
   112c4:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
   112c8:	7901      	ldrb	r1, [r0, #4]
   112ca:	2901      	cmp	r1, #1
   112cc:	d003      	beq.n	112d6 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x1e>
   112ce:	2159      	movs	r1, #89	; 0x59
   112d0:	2069      	movs	r0, #105	; 0x69
   112d2:	f7ff ff1d 	bl	11110 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   112d6:	7941      	ldrb	r1, [r0, #5]
   112d8:	7982      	ldrb	r2, [r0, #6]
   112da:	1c49      	adds	r1, r1, #1
   112dc:	b2c9      	uxtb	r1, r1
   112de:	428a      	cmp	r2, r1
   112e0:	d000      	beq.n	112e4 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x2c>
   112e2:	7141      	strb	r1, [r0, #5]
   112e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   112e8:	f7ff bf74 	b.w	111d4 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>
   112ec:	2000146c 	.word	0x2000146c

000112f0 <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY>:
   112f0:	b510      	push	{r4, lr}
   112f2:	2805      	cmp	r0, #5
   112f4:	d303      	bcc.n	112fe <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY+0xe>
   112f6:	214f      	movs	r1, #79	; 0x4f
   112f8:	2069      	movs	r0, #105	; 0x69
   112fa:	f7ff ff09 	bl	11110 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   112fe:	4a03      	ldr	r2, [pc, #12]	; (1130c <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY+0x1c>)
   11300:	2100      	movs	r1, #0
   11302:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
   11306:	7101      	strb	r1, [r0, #4]
   11308:	bd10      	pop	{r4, pc}
   1130a:	0000      	.short	0x0000
   1130c:	2000146c 	.word	0x2000146c

00011310 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>:
   11310:	b570      	push	{r4, r5, r6, lr}
   11312:	2505      	movs	r5, #5
   11314:	4e0e      	ldr	r6, [pc, #56]	; (11350 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x40>)
   11316:	4c0f      	ldr	r4, [pc, #60]	; (11354 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x44>)
   11318:	e016      	b.n	11348 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
   1131a:	7821      	ldrb	r1, [r4, #0]
   1131c:	eb06 00c1 	add.w	r0, r6, r1, lsl #3
   11320:	7902      	ldrb	r2, [r0, #4]
   11322:	2a01      	cmp	r2, #1
   11324:	d108      	bne.n	11338 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
   11326:	7942      	ldrb	r2, [r0, #5]
   11328:	7983      	ldrb	r3, [r0, #6]
   1132a:	429a      	cmp	r2, r3
   1132c:	d004      	beq.n	11338 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
   1132e:	7942      	ldrb	r2, [r0, #5]
   11330:	7182      	strb	r2, [r0, #6]
   11332:	f856 0031 	ldr.w	r0, [r6, r1, lsl #3]
   11336:	4780      	blx	r0
   11338:	7820      	ldrb	r0, [r4, #0]
   1133a:	1c40      	adds	r0, r0, #1
   1133c:	b2c0      	uxtb	r0, r0
   1133e:	7020      	strb	r0, [r4, #0]
   11340:	2805      	cmp	r0, #5
   11342:	d301      	bcc.n	11348 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
   11344:	2000      	movs	r0, #0
   11346:	7020      	strb	r0, [r4, #0]
   11348:	1e6d      	subs	r5, r5, #1
   1134a:	b2ed      	uxtb	r5, r5
   1134c:	d2e5      	bcs.n	1131a <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0xa>
   1134e:	bd70      	pop	{r4, r5, r6, pc}
   11350:	2000146c 	.word	0x2000146c
   11354:	200003d2 	.word	0x200003d2

00011358 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>:
   11358:	b500      	push	{lr}
   1135a:	f00d fa0b 	bl	1e774 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
   1135e:	b940      	cbnz	r0, 11372 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
   11360:	f00d fa12 	bl	1e788 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
   11364:	b928      	cbnz	r0, 11372 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
   11366:	f00d fa26 	bl	1e7b6 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
   1136a:	b910      	cbnz	r0, 11372 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
   1136c:	f00d fa37 	bl	1e7de <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
   11370:	b108      	cbz	r0, 11376 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1e>
   11372:	4802      	ldr	r0, [pc, #8]	; (1137c <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x24>)
   11374:	bd00      	pop	{pc}
   11376:	4802      	ldr	r0, [pc, #8]	; (11380 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x28>)
   11378:	bd00      	pop	{pc}
   1137a:	0000      	.short	0x0000
   1137c:	4000050c 	.word	0x4000050c
   11380:	4001e700 	.word	0x4001e700

00011384 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>:
   11384:	b510      	push	{r4, lr}
   11386:	f00d fa2a 	bl	1e7de <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
   1138a:	b330      	cbz	r0, 113da <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x56>
   1138c:	f3ef 8010 	mrs	r0, PRIMASK
   11390:	b1c8      	cbz	r0, 113c6 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x42>
   11392:	2100      	movs	r1, #0
   11394:	b672      	cpsid	i
   11396:	4812      	ldr	r0, [pc, #72]	; (113e0 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x5c>)
   11398:	6802      	ldr	r2, [r0, #0]
   1139a:	6803      	ldr	r3, [r0, #0]
   1139c:	f3c2 1200 	ubfx	r2, r2, #4, #1
   113a0:	f043 0310 	orr.w	r3, r3, #16
   113a4:	6003      	str	r3, [r0, #0]
   113a6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
   113aa:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
   113ae:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
   113b2:	431c      	orrs	r4, r3
   113b4:	d000      	beq.n	113b8 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x34>
   113b6:	bf40      	sev
   113b8:	bf20      	wfe
   113ba:	bf00      	nop
   113bc:	bf00      	nop
   113be:	bf00      	nop
   113c0:	bf00      	nop
   113c2:	b112      	cbz	r2, 113ca <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x46>
   113c4:	e005      	b.n	113d2 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x4e>
   113c6:	2101      	movs	r1, #1
   113c8:	e7e4      	b.n	11394 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x10>
   113ca:	6802      	ldr	r2, [r0, #0]
   113cc:	f022 0210 	bic.w	r2, r2, #16
   113d0:	6002      	str	r2, [r0, #0]
   113d2:	2900      	cmp	r1, #0
   113d4:	d000      	beq.n	113d8 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x54>
   113d6:	b662      	cpsie	i
   113d8:	bd10      	pop	{r4, pc}
   113da:	bf20      	wfe
   113dc:	bd10      	pop	{r4, pc}
   113de:	0000      	.short	0x0000
   113e0:	e000ed10 	.word	0xe000ed10

000113e4 <mpsl_cx_granted_ops_get>:
   113e4:	4901      	ldr	r1, [pc, #4]	; (113ec <mpsl_cx_granted_ops_get+0x8>)
   113e6:	6809      	ldr	r1, [r1, #0]
   113e8:	6889      	ldr	r1, [r1, #8]
   113ea:	4708      	bx	r1
   113ec:	20000080 	.word	0x20000080

000113f0 <mpsl_cx_register_callback>:
   113f0:	4901      	ldr	r1, [pc, #4]	; (113f8 <mpsl_cx_register_callback+0x8>)
   113f2:	6809      	ldr	r1, [r1, #0]
   113f4:	6909      	ldr	r1, [r1, #16]
   113f6:	4708      	bx	r1
   113f8:	20000080 	.word	0x20000080

000113fc <mpsl_cx_release>:
   113fc:	4801      	ldr	r0, [pc, #4]	; (11404 <mpsl_cx_release+0x8>)
   113fe:	6800      	ldr	r0, [r0, #0]
   11400:	6840      	ldr	r0, [r0, #4]
   11402:	4700      	bx	r0
   11404:	20000080 	.word	0x20000080

00011408 <mpsl_cx_request>:
   11408:	4901      	ldr	r1, [pc, #4]	; (11410 <mpsl_cx_request+0x8>)
   1140a:	6809      	ldr	r1, [r1, #0]
   1140c:	6809      	ldr	r1, [r1, #0]
   1140e:	4708      	bx	r1
   11410:	20000080 	.word	0x20000080

00011414 <sym_OW4FCVYV7CD5K552B5EATVXKXK5HNDFX7JEYSUI>:
   11414:	0001ea27 0001ea1f 0001ea13 0001ea23     '...........#...
   11424:	0001ea1b 4c0eb570 28007860 7820d117     ....p..L`x.(.. x
   11434:	28012500 2002d106 69207020 6920b110     .%.(...  p i.. i
   11444:	61254780 28037820 7025d109 28006920     .G%a x.(..%p i.(
   11454:	6860d005 47806940 47806920 bd706125     ..`h@i.G i.G%ap.
   11464:	20000084                                ... 

00011468 <sym_24DWUIEE2POS3GYSEVA4IAL4G7TGCCCJXT6D5AA>:
   11468:	b510      	push	{r4, lr}
   1146a:	4c08      	ldr	r4, [pc, #32]	; (1148c <sym_24DWUIEE2POS3GYSEVA4IAL4G7TGCCCJXT6D5AA+0x24>)
   1146c:	7820      	ldrb	r0, [r4, #0]
   1146e:	2802      	cmp	r0, #2
   11470:	d002      	beq.n	11478 <sym_24DWUIEE2POS3GYSEVA4IAL4G7TGCCCJXT6D5AA+0x10>
   11472:	7820      	ldrb	r0, [r4, #0]
   11474:	2803      	cmp	r0, #3
   11476:	d102      	bne.n	1147e <sym_24DWUIEE2POS3GYSEVA4IAL4G7TGCCCJXT6D5AA+0x16>
   11478:	6860      	ldr	r0, [r4, #4]
   1147a:	6880      	ldr	r0, [r0, #8]
   1147c:	4780      	blx	r0
   1147e:	2000      	movs	r0, #0
   11480:	70a0      	strb	r0, [r4, #2]
   11482:	7060      	strb	r0, [r4, #1]
   11484:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   11488:	f7ff bfce 	b.w	11428 <sym_OW4FCVYV7CD5K552B5EATVXKXK5HNDFX7JEYSUI+0x14>
   1148c:	20000084 	.word	0x20000084

00011490 <sym_TSTNWLRH7RAXHHT2FC4R3RPI2WC3O7TXKBYGVCI>:
   11490:	4802      	ldr	r0, [pc, #8]	; (1149c <sym_TSTNWLRH7RAXHHT2FC4R3RPI2WC3O7TXKBYGVCI+0xc>)
   11492:	7800      	ldrb	r0, [r0, #0]
   11494:	2800      	cmp	r0, #0
   11496:	d000      	beq.n	1149a <sym_TSTNWLRH7RAXHHT2FC4R3RPI2WC3O7TXKBYGVCI+0xa>
   11498:	2001      	movs	r0, #1
   1149a:	4770      	bx	lr
   1149c:	20000084 	.word	0x20000084

000114a0 <sym_GNQQQFEWM5SWEGVB5JHP7HYAZGI4CDQXSGHR4SQ>:
   114a0:	b538      	push	{r3, r4, r5, lr}
   114a2:	4604      	mov	r4, r0
   114a4:	2805      	cmp	r0, #5
   114a6:	d304      	bcc.n	114b2 <sym_GNQQQFEWM5SWEGVB5JHP7HYAZGI4CDQXSGHR4SQ+0x12>
   114a8:	f240 113d 	movw	r1, #317	; 0x13d
   114ac:	2068      	movs	r0, #104	; 0x68
   114ae:	f7ff fe2f 	bl	11110 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   114b2:	f7ff ffb9 	bl	11428 <sym_OW4FCVYV7CD5K552B5EATVXKXK5HNDFX7JEYSUI+0x14>
   114b6:	4d10      	ldr	r5, [pc, #64]	; (114f8 <sym_GNQQQFEWM5SWEGVB5JHP7HYAZGI4CDQXSGHR4SQ+0x58>)
   114b8:	2001      	movs	r0, #1
   114ba:	7068      	strb	r0, [r5, #1]
   114bc:	7828      	ldrb	r0, [r5, #0]
   114be:	2802      	cmp	r0, #2
   114c0:	d116      	bne.n	114f0 <sym_GNQQQFEWM5SWEGVB5JHP7HYAZGI4CDQXSGHR4SQ+0x50>
   114c2:	6868      	ldr	r0, [r5, #4]
   114c4:	68c1      	ldr	r1, [r0, #12]
   114c6:	4620      	mov	r0, r4
   114c8:	4788      	blx	r1
   114ca:	490c      	ldr	r1, [pc, #48]	; (114fc <sym_GNQQQFEWM5SWEGVB5JHP7HYAZGI4CDQXSGHR4SQ+0x5c>)
   114cc:	eb01 0244 	add.w	r2, r1, r4, lsl #1
   114d0:	7852      	ldrb	r2, [r2, #1]
   114d2:	4282      	cmp	r2, r0
   114d4:	d30d      	bcc.n	114f2 <sym_GNQQQFEWM5SWEGVB5JHP7HYAZGI4CDQXSGHR4SQ+0x52>
   114d6:	78a8      	ldrb	r0, [r5, #2]
   114d8:	2801      	cmp	r0, #1
   114da:	d00a      	beq.n	114f2 <sym_GNQQQFEWM5SWEGVB5JHP7HYAZGI4CDQXSGHR4SQ+0x52>
   114dc:	f811 0014 	ldrb.w	r0, [r1, r4, lsl #1]
   114e0:	f88d 0000 	strb.w	r0, [sp]
   114e4:	f88d 4001 	strb.w	r4, [sp, #1]
   114e8:	6868      	ldr	r0, [r5, #4]
   114ea:	6801      	ldr	r1, [r0, #0]
   114ec:	4668      	mov	r0, sp
   114ee:	4788      	blx	r1
   114f0:	bd38      	pop	{r3, r4, r5, pc}
   114f2:	2001      	movs	r0, #1
   114f4:	e7f4      	b.n	114e0 <sym_GNQQQFEWM5SWEGVB5JHP7HYAZGI4CDQXSGHR4SQ+0x40>
   114f6:	0000      	.short	0x0000
   114f8:	20000084 	.word	0x20000084
   114fc:	20001866 	.word	0x20001866

00011500 <sym_65YCAVBDKPZHZGRZXNQZCLS62UDJXZDBEFWVSII>:
   11500:	4905      	ldr	r1, [pc, #20]	; (11518 <sym_65YCAVBDKPZHZGRZXNQZCLS62UDJXZDBEFWVSII+0x18>)
   11502:	780a      	ldrb	r2, [r1, #0]
   11504:	2a02      	cmp	r2, #2
   11506:	d004      	beq.n	11512 <sym_65YCAVBDKPZHZGRZXNQZCLS62UDJXZDBEFWVSII+0x12>
   11508:	780a      	ldrb	r2, [r1, #0]
   1150a:	2a03      	cmp	r2, #3
   1150c:	d001      	beq.n	11512 <sym_65YCAVBDKPZHZGRZXNQZCLS62UDJXZDBEFWVSII+0x12>
   1150e:	2000      	movs	r0, #0
   11510:	4770      	bx	lr
   11512:	6849      	ldr	r1, [r1, #4]
   11514:	6909      	ldr	r1, [r1, #16]
   11516:	4708      	bx	r1
   11518:	20000084 	.word	0x20000084

0001151c <sym_H2AKPOL4Q6GKGQJVBUBWLPO3RBNKXXQE2HSOELQ>:
   1151c:	b510      	push	{r4, lr}
   1151e:	b158      	cbz	r0, 11538 <sym_H2AKPOL4Q6GKGQJVBUBWLPO3RBNKXXQE2HSOELQ+0x1c>
   11520:	4908      	ldr	r1, [pc, #32]	; (11544 <sym_H2AKPOL4Q6GKGQJVBUBWLPO3RBNKXXQE2HSOELQ+0x28>)
   11522:	780a      	ldrb	r2, [r1, #0]
   11524:	2a02      	cmp	r2, #2
   11526:	d002      	beq.n	1152e <sym_H2AKPOL4Q6GKGQJVBUBWLPO3RBNKXXQE2HSOELQ+0x12>
   11528:	780a      	ldrb	r2, [r1, #0]
   1152a:	2a03      	cmp	r2, #3
   1152c:	d109      	bne.n	11542 <sym_H2AKPOL4Q6GKGQJVBUBWLPO3RBNKXXQE2HSOELQ+0x26>
   1152e:	6849      	ldr	r1, [r1, #4]
   11530:	6849      	ldr	r1, [r1, #4]
   11532:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   11536:	4708      	bx	r1
   11538:	f240 1153 	movw	r1, #339	; 0x153
   1153c:	2068      	movs	r0, #104	; 0x68
   1153e:	f7ff fde7 	bl	11110 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   11542:	bd10      	pop	{r4, pc}
   11544:	20000084 	.word	0x20000084

00011548 <sym_FLYO2O6PDDEK6WCFFGJRAPCMRB5FFHTEEHI4Z2Q>:
   11548:	4901      	ldr	r1, [pc, #4]	; (11550 <sym_FLYO2O6PDDEK6WCFFGJRAPCMRB5FFHTEEHI4Z2Q+0x8>)
   1154a:	2001      	movs	r0, #1
   1154c:	7088      	strb	r0, [r1, #2]
   1154e:	4770      	bx	lr
   11550:	20000084 	.word	0x20000084

00011554 <sym_UCUZCD3IIQBIFBTQEAMBH3ROVF42G3OC6HCQXWQ>:
   11554:	4805      	ldr	r0, [pc, #20]	; (1156c <sym_UCUZCD3IIQBIFBTQEAMBH3ROVF42G3OC6HCQXWQ+0x18>)
   11556:	7801      	ldrb	r1, [r0, #0]
   11558:	2902      	cmp	r1, #2
   1155a:	d004      	beq.n	11566 <sym_UCUZCD3IIQBIFBTQEAMBH3ROVF42G3OC6HCQXWQ+0x12>
   1155c:	7801      	ldrb	r1, [r0, #0]
   1155e:	2903      	cmp	r1, #3
   11560:	d001      	beq.n	11566 <sym_UCUZCD3IIQBIFBTQEAMBH3ROVF42G3OC6HCQXWQ+0x12>
   11562:	2000      	movs	r0, #0
   11564:	4770      	bx	lr
   11566:	6840      	ldr	r0, [r0, #4]
   11568:	6980      	ldr	r0, [r0, #24]
   1156a:	4700      	bx	r0
   1156c:	20000084 	.word	0x20000084

00011570 <sym_NIQMZN22R7GGCSNM3BZ25GTCR6D457XB3DIUGWA>:
   11570:	0001ea4b 0001ea83 0001ea6d 0001ea5b     K.......m...[...
   11580:	0001ea67 0001ea55 0001ea49 0001ea47     g...U...I...G...
   11590:	0001ea7f 0001ea73 0001ea61 0001ea4f     ....s...a...O...
   115a0:	0001ea41 0001ea39 0001ea3d 0001ea33     A...9...=...3...

000115b0 <mpsl_fem_disable>:
   115b0:	4801      	ldr	r0, [pc, #4]	; (115b8 <mpsl_fem_disable+0x8>)
   115b2:	6800      	ldr	r0, [r0, #0]
   115b4:	6800      	ldr	r0, [r0, #0]
   115b6:	4700      	bx	r0
   115b8:	20000098 	.word	0x20000098

000115bc <mpsl_fem_lna_configuration_clear>:
   115bc:	4801      	ldr	r0, [pc, #4]	; (115c4 <mpsl_fem_lna_configuration_clear+0x8>)
   115be:	6800      	ldr	r0, [r0, #0]
   115c0:	6940      	ldr	r0, [r0, #20]
   115c2:	4700      	bx	r0
   115c4:	20000098 	.word	0x20000098

000115c8 <mpsl_fem_lna_configuration_set>:
   115c8:	4a01      	ldr	r2, [pc, #4]	; (115d0 <mpsl_fem_lna_configuration_set+0x8>)
   115ca:	6812      	ldr	r2, [r2, #0]
   115cc:	68d2      	ldr	r2, [r2, #12]
   115ce:	4710      	bx	r2
   115d0:	20000098 	.word	0x20000098

000115d4 <mpsl_fem_lna_is_configured>:
   115d4:	4901      	ldr	r1, [pc, #4]	; (115dc <mpsl_fem_lna_is_configured+0x8>)
   115d6:	6809      	ldr	r1, [r1, #0]
   115d8:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
   115da:	4708      	bx	r1
   115dc:	20000098 	.word	0x20000098

000115e0 <mpsl_fem_pa_configuration_clear>:
   115e0:	4801      	ldr	r0, [pc, #4]	; (115e8 <mpsl_fem_pa_configuration_clear+0x8>)
   115e2:	6800      	ldr	r0, [r0, #0]
   115e4:	6900      	ldr	r0, [r0, #16]
   115e6:	4700      	bx	r0
   115e8:	20000098 	.word	0x20000098

000115ec <mpsl_fem_pa_configuration_set>:
   115ec:	4a01      	ldr	r2, [pc, #4]	; (115f4 <mpsl_fem_pa_configuration_set+0x8>)
   115ee:	6812      	ldr	r2, [r2, #0]
   115f0:	6892      	ldr	r2, [r2, #8]
   115f2:	4710      	bx	r2
   115f4:	20000098 	.word	0x20000098

000115f8 <mpsl_fem_pa_gain_set>:
   115f8:	4901      	ldr	r1, [pc, #4]	; (11600 <mpsl_fem_pa_gain_set+0x8>)
   115fa:	6809      	ldr	r1, [r1, #0]
   115fc:	6a49      	ldr	r1, [r1, #36]	; 0x24
   115fe:	4708      	bx	r1
   11600:	20000098 	.word	0x20000098

00011604 <mpsl_fem_pa_is_configured>:
   11604:	4901      	ldr	r1, [pc, #4]	; (1160c <mpsl_fem_pa_is_configured+0x8>)
   11606:	6809      	ldr	r1, [r1, #0]
   11608:	6a89      	ldr	r1, [r1, #40]	; 0x28
   1160a:	4708      	bx	r1
   1160c:	20000098 	.word	0x20000098

00011610 <mpsl_fem_tx_power_split>:
   11610:	4b01      	ldr	r3, [pc, #4]	; (11618 <mpsl_fem_tx_power_split+0x8>)
   11612:	681b      	ldr	r3, [r3, #0]
   11614:	685b      	ldr	r3, [r3, #4]
   11616:	4718      	bx	r3
   11618:	20000098 	.word	0x20000098

0001161c <mpsl_fem_device_config_254_apply_get>:
   1161c:	4801      	ldr	r0, [pc, #4]	; (11624 <mpsl_fem_device_config_254_apply_get+0x8>)
   1161e:	7800      	ldrb	r0, [r0, #0]
   11620:	4770      	bx	lr
   11622:	0000      	.short	0x0000
   11624:	200003d3 	.word	0x200003d3
   11628:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   1162a:	4c14      	ldr	r4, [pc, #80]	; (1167c <mpsl_fem_device_config_254_apply_get+0x60>)
   1162c:	7a20      	ldrb	r0, [r4, #8]
   1162e:	f88d 0001 	strb.w	r0, [sp, #1]
   11632:	79e0      	ldrb	r0, [r4, #7]
   11634:	f88d 0000 	strb.w	r0, [sp]
   11638:	79a0      	ldrb	r0, [r4, #6]
   1163a:	f8ad 0004 	strh.w	r0, [sp, #4]
   1163e:	7960      	ldrb	r0, [r4, #5]
   11640:	f8ad 0002 	strh.w	r0, [sp, #2]
   11644:	4668      	mov	r0, sp
   11646:	f009 fff7 	bl	1b638 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>
   1164a:	b108      	cbz	r0, 11650 <mpsl_fem_device_config_254_apply_get+0x34>
   1164c:	2190      	movs	r1, #144	; 0x90
   1164e:	e010      	b.n	11672 <mpsl_fem_device_config_254_apply_get+0x56>
   11650:	68e0      	ldr	r0, [r4, #12]
   11652:	9002      	str	r0, [sp, #8]
   11654:	a802      	add	r0, sp, #8
   11656:	f00a f805 	bl	1b664 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>
   1165a:	b108      	cbz	r0, 11660 <mpsl_fem_device_config_254_apply_get+0x44>
   1165c:	2194      	movs	r1, #148	; 0x94
   1165e:	e008      	b.n	11672 <mpsl_fem_device_config_254_apply_get+0x56>
   11660:	4807      	ldr	r0, [pc, #28]	; (11680 <mpsl_fem_device_config_254_apply_get+0x64>)
   11662:	6800      	ldr	r0, [r0, #0]
   11664:	9003      	str	r0, [sp, #12]
   11666:	a803      	add	r0, sp, #12
   11668:	f011 f8c4 	bl	227f4 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
   1166c:	2800      	cmp	r0, #0
   1166e:	d003      	beq.n	11678 <mpsl_fem_device_config_254_apply_get+0x5c>
   11670:	2198      	movs	r1, #152	; 0x98
   11672:	2003      	movs	r0, #3
   11674:	f000 f984 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   11678:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
   1167a:	0000      	.short	0x0000
   1167c:	20001494 	.word	0x20001494
   11680:	00011a88 	.word	0x00011a88
   11684:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
   11686:	4605      	mov	r5, r0
   11688:	6800      	ldr	r0, [r0, #0]
   1168a:	460c      	mov	r4, r1
   1168c:	1cc0      	adds	r0, r0, #3
   1168e:	f020 0003 	bic.w	r0, r0, #3
   11692:	6028      	str	r0, [r5, #0]
   11694:	2000      	movs	r0, #0
   11696:	9000      	str	r0, [sp, #0]
   11698:	9001      	str	r0, [sp, #4]
   1169a:	9002      	str	r0, [sp, #8]
   1169c:	7808      	ldrb	r0, [r1, #0]
   1169e:	f88d 0001 	strb.w	r0, [sp, #1]
   116a2:	7848      	ldrb	r0, [r1, #1]
   116a4:	f88d 0002 	strb.w	r0, [sp, #2]
   116a8:	7888      	ldrb	r0, [r1, #2]
   116aa:	f88d 0003 	strb.w	r0, [sp, #3]
   116ae:	78c8      	ldrb	r0, [r1, #3]
   116b0:	f88d 0004 	strb.w	r0, [sp, #4]
   116b4:	7920      	ldrb	r0, [r4, #4]
   116b6:	f88d 0005 	strb.w	r0, [sp, #5]
   116ba:	7da0      	ldrb	r0, [r4, #22]
   116bc:	f88d 0006 	strb.w	r0, [sp, #6]
   116c0:	7ee0      	ldrb	r0, [r4, #27]
   116c2:	f88d 0008 	strb.w	r0, [sp, #8]
   116c6:	4f31      	ldr	r7, [pc, #196]	; (1178c <mpsl_fem_device_config_254_apply_get+0x170>)
   116c8:	7f20      	ldrb	r0, [r4, #28]
   116ca:	f88d 0009 	strb.w	r0, [sp, #9]
   116ce:	7978      	ldrb	r0, [r7, #5]
   116d0:	4616      	mov	r6, r2
   116d2:	b110      	cbz	r0, 116da <mpsl_fem_device_config_254_apply_get+0xbe>
   116d4:	7920      	ldrb	r0, [r4, #4]
   116d6:	f88d 0007 	strb.w	r0, [sp, #7]
   116da:	b10e      	cbz	r6, 116e0 <mpsl_fem_device_config_254_apply_get+0xc4>
   116dc:	2000      	movs	r0, #0
   116de:	e000      	b.n	116e2 <mpsl_fem_device_config_254_apply_get+0xc6>
   116e0:	6828      	ldr	r0, [r5, #0]
   116e2:	4669      	mov	r1, sp
   116e4:	f000 fb7e 	bl	11de4 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>
   116e8:	6829      	ldr	r1, [r5, #0]
   116ea:	4408      	add	r0, r1
   116ec:	6028      	str	r0, [r5, #0]
   116ee:	78a1      	ldrb	r1, [r4, #2]
   116f0:	b141      	cbz	r1, 11704 <mpsl_fem_device_config_254_apply_get+0xe8>
   116f2:	8a63      	ldrh	r3, [r4, #18]
   116f4:	78e2      	ldrb	r2, [r4, #3]
   116f6:	b106      	cbz	r6, 116fa <mpsl_fem_device_config_254_apply_get+0xde>
   116f8:	2000      	movs	r0, #0
   116fa:	f000 fe79 	bl	123f0 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ>
   116fe:	6829      	ldr	r1, [r5, #0]
   11700:	4408      	add	r0, r1
   11702:	6028      	str	r0, [r5, #0]
   11704:	78f8      	ldrb	r0, [r7, #3]
   11706:	b178      	cbz	r0, 11728 <mpsl_fem_device_config_254_apply_get+0x10c>
   11708:	7c21      	ldrb	r1, [r4, #16]
   1170a:	b169      	cbz	r1, 11728 <mpsl_fem_device_config_254_apply_get+0x10c>
   1170c:	7938      	ldrb	r0, [r7, #4]
   1170e:	b108      	cbz	r0, 11714 <mpsl_fem_device_config_254_apply_get+0xf8>
   11710:	22ff      	movs	r2, #255	; 0xff
   11712:	e000      	b.n	11716 <mpsl_fem_device_config_254_apply_get+0xfa>
   11714:	2225      	movs	r2, #37	; 0x25
   11716:	b10e      	cbz	r6, 1171c <mpsl_fem_device_config_254_apply_get+0x100>
   11718:	2000      	movs	r0, #0
   1171a:	e000      	b.n	1171e <mpsl_fem_device_config_254_apply_get+0x102>
   1171c:	6828      	ldr	r0, [r5, #0]
   1171e:	f000 feef 	bl	12500 <sym_JKTUFSDBLEJK3JCIOVWBB4AVHFNXLCVLU47RLVA>
   11722:	6829      	ldr	r1, [r5, #0]
   11724:	4408      	add	r0, r1
   11726:	6028      	str	r0, [r5, #0]
   11728:	7920      	ldrb	r0, [r4, #4]
   1172a:	b168      	cbz	r0, 11748 <mpsl_fem_device_config_254_apply_get+0x12c>
   1172c:	6828      	ldr	r0, [r5, #0]
   1172e:	1cc0      	adds	r0, r0, #3
   11730:	f020 0003 	bic.w	r0, r0, #3
   11734:	6028      	str	r0, [r5, #0]
   11736:	7d22      	ldrb	r2, [r4, #20]
   11738:	7921      	ldrb	r1, [r4, #4]
   1173a:	b106      	cbz	r6, 1173e <mpsl_fem_device_config_254_apply_get+0x122>
   1173c:	2000      	movs	r0, #0
   1173e:	f00a fb7f 	bl	1be40 <sym_5U52OLHW5BTVCP2BD6UAUWBCBDJG46EBSAKZZ6I>
   11742:	6829      	ldr	r1, [r5, #0]
   11744:	4408      	add	r0, r1
   11746:	6028      	str	r0, [r5, #0]
   11748:	7d60      	ldrb	r0, [r4, #21]
   1174a:	b160      	cbz	r0, 11766 <mpsl_fem_device_config_254_apply_get+0x14a>
   1174c:	6828      	ldr	r0, [r5, #0]
   1174e:	1cc0      	adds	r0, r0, #3
   11750:	f020 0003 	bic.w	r0, r0, #3
   11754:	6028      	str	r0, [r5, #0]
   11756:	7d61      	ldrb	r1, [r4, #21]
   11758:	b106      	cbz	r6, 1175c <mpsl_fem_device_config_254_apply_get+0x140>
   1175a:	2000      	movs	r0, #0
   1175c:	f000 fef8 	bl	12550 <sym_V2ER27M3Z2LLE4VYOQCDQNPVPBUAHM6GAWBXY4Y>
   11760:	6829      	ldr	r1, [r5, #0]
   11762:	4408      	add	r0, r1
   11764:	6028      	str	r0, [r5, #0]
   11766:	7da0      	ldrb	r0, [r4, #22]
   11768:	2800      	cmp	r0, #0
   1176a:	d00e      	beq.n	1178a <mpsl_fem_device_config_254_apply_get+0x16e>
   1176c:	6828      	ldr	r0, [r5, #0]
   1176e:	1cc0      	adds	r0, r0, #3
   11770:	f020 0003 	bic.w	r0, r0, #3
   11774:	6028      	str	r0, [r5, #0]
   11776:	7e23      	ldrb	r3, [r4, #24]
   11778:	7de2      	ldrb	r2, [r4, #23]
   1177a:	7da1      	ldrb	r1, [r4, #22]
   1177c:	b106      	cbz	r6, 11780 <mpsl_fem_device_config_254_apply_get+0x164>
   1177e:	2000      	movs	r0, #0
   11780:	f000 ff26 	bl	125d0 <sym_DOCCP4AFKLIVAXFLTAV6GACHWGPJHRTYWD3IDTI>
   11784:	6829      	ldr	r1, [r5, #0]
   11786:	4408      	add	r0, r1
   11788:	6028      	str	r0, [r5, #0]
   1178a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   1178c:	2000009c 	.word	0x2000009c

00011790 <sdc_build_revision_get>:
   11790:	b510      	push	{r4, lr}
   11792:	b128      	cbz	r0, 117a0 <sdc_build_revision_get+0x10>
   11794:	2214      	movs	r2, #20
   11796:	4904      	ldr	r1, [pc, #16]	; (117a8 <sdc_build_revision_get+0x18>)
   11798:	f00d f861 	bl	1e85e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   1179c:	2000      	movs	r0, #0
   1179e:	bd10      	pop	{r4, pc}
   117a0:	f06f 0015 	mvn.w	r0, #21
   117a4:	bd10      	pop	{r4, pc}
   117a6:	0000      	.short	0x0000
   117a8:	00011aac 	.word	0x00011aac

000117ac <sdc_cfg_set>:
   117ac:	b570      	push	{r4, r5, r6, lr}
   117ae:	f06f 052c 	mvn.w	r5, #44	; 0x2c
   117b2:	bb98      	cbnz	r0, 1181c <sdc_cfg_set+0x70>
   117b4:	4c30      	ldr	r4, [pc, #192]	; (11878 <sdc_cfg_set+0xcc>)
   117b6:	7860      	ldrb	r0, [r4, #1]
   117b8:	b108      	cbz	r0, 117be <sdc_cfg_set+0x12>
   117ba:	11a8      	asrs	r0, r5, #6
   117bc:	bd70      	pop	{r4, r5, r6, pc}
   117be:	b319      	cbz	r1, 11808 <sdc_cfg_set+0x5c>
   117c0:	f06f 0015 	mvn.w	r0, #21
   117c4:	2a00      	cmp	r2, #0
   117c6:	d0f9      	beq.n	117bc <sdc_cfg_set+0x10>
   117c8:	4b2c      	ldr	r3, [pc, #176]	; (1187c <sdc_cfg_set+0xd0>)
   117ca:	290c      	cmp	r1, #12
   117cc:	d24f      	bcs.n	1186e <sdc_cfg_set+0xc2>
   117ce:	e8df f001 	tbb	[pc, r1]
   117d2:	064e      	.short	0x064e
   117d4:	1f1c0c09 	.word	0x1f1c0c09
   117d8:	3726342c 	.word	0x3726342c
   117dc:	3f3a      	.short	0x3f3a
   117de:	7810      	ldrb	r0, [r2, #0]
   117e0:	7018      	strb	r0, [r3, #0]
   117e2:	e039      	b.n	11858 <sdc_cfg_set+0xac>
   117e4:	7810      	ldrb	r0, [r2, #0]
   117e6:	7058      	strb	r0, [r3, #1]
   117e8:	e036      	b.n	11858 <sdc_cfg_set+0xac>
   117ea:	7891      	ldrb	r1, [r2, #2]
   117ec:	2900      	cmp	r1, #0
   117ee:	d0e5      	beq.n	117bc <sdc_cfg_set+0x10>
   117f0:	78d1      	ldrb	r1, [r2, #3]
   117f2:	2900      	cmp	r1, #0
   117f4:	d0e2      	beq.n	117bc <sdc_cfg_set+0x10>
   117f6:	7811      	ldrb	r1, [r2, #0]
   117f8:	291b      	cmp	r1, #27
   117fa:	d3df      	bcc.n	117bc <sdc_cfg_set+0x10>
   117fc:	7851      	ldrb	r1, [r2, #1]
   117fe:	291b      	cmp	r1, #27
   11800:	d3dc      	bcc.n	117bc <sdc_cfg_set+0x10>
   11802:	6810      	ldr	r0, [r2, #0]
   11804:	f8c3 0005 	str.w	r0, [r3, #5]
   11808:	e026      	b.n	11858 <sdc_cfg_set+0xac>
   1180a:	6810      	ldr	r0, [r2, #0]
   1180c:	60d8      	str	r0, [r3, #12]
   1180e:	e023      	b.n	11858 <sdc_cfg_set+0xac>
   11810:	7811      	ldrb	r1, [r2, #0]
   11812:	78da      	ldrb	r2, [r3, #3]
   11814:	4291      	cmp	r1, r2
   11816:	d3d1      	bcc.n	117bc <sdc_cfg_set+0x10>
   11818:	7099      	strb	r1, [r3, #2]
   1181a:	e01d      	b.n	11858 <sdc_cfg_set+0xac>
   1181c:	e027      	b.n	1186e <sdc_cfg_set+0xc2>
   1181e:	7811      	ldrb	r1, [r2, #0]
   11820:	789a      	ldrb	r2, [r3, #2]
   11822:	4291      	cmp	r1, r2
   11824:	d8ca      	bhi.n	117bc <sdc_cfg_set+0x10>
   11826:	70d9      	strb	r1, [r3, #3]
   11828:	e016      	b.n	11858 <sdc_cfg_set+0xac>
   1182a:	78e1      	ldrb	r1, [r4, #3]
   1182c:	b111      	cbz	r1, 11834 <sdc_cfg_set+0x88>
   1182e:	7811      	ldrb	r1, [r2, #0]
   11830:	2902      	cmp	r1, #2
   11832:	d3c3      	bcc.n	117bc <sdc_cfg_set+0x10>
   11834:	7810      	ldrb	r0, [r2, #0]
   11836:	7418      	strb	r0, [r3, #16]
   11838:	e00e      	b.n	11858 <sdc_cfg_set+0xac>
   1183a:	8810      	ldrh	r0, [r2, #0]
   1183c:	8258      	strh	r0, [r3, #18]
   1183e:	e00b      	b.n	11858 <sdc_cfg_set+0xac>
   11840:	7810      	ldrb	r0, [r2, #0]
   11842:	7118      	strb	r0, [r3, #4]
   11844:	e008      	b.n	11858 <sdc_cfg_set+0xac>
   11846:	7811      	ldrb	r1, [r2, #0]
   11848:	2902      	cmp	r1, #2
   1184a:	d3b7      	bcc.n	117bc <sdc_cfg_set+0x10>
   1184c:	7519      	strb	r1, [r3, #20]
   1184e:	e003      	b.n	11858 <sdc_cfg_set+0xac>
   11850:	7811      	ldrb	r1, [r2, #0]
   11852:	2908      	cmp	r1, #8
   11854:	d8b2      	bhi.n	117bc <sdc_cfg_set+0x10>
   11856:	7559      	strb	r1, [r3, #21]
   11858:	2201      	movs	r2, #1
   1185a:	4908      	ldr	r1, [pc, #32]	; (1187c <sdc_cfg_set+0xd0>)
   1185c:	2000      	movs	r0, #0
   1185e:	f00d f92c 	bl	1eaba <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x2e>
   11862:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
   11866:	db04      	blt.n	11872 <sdc_cfg_set+0xc6>
   11868:	f06f 000b 	mvn.w	r0, #11
   1186c:	bd70      	pop	{r4, r5, r6, pc}
   1186e:	4628      	mov	r0, r5
   11870:	bd70      	pop	{r4, r5, r6, pc}
   11872:	2101      	movs	r1, #1
   11874:	70a1      	strb	r1, [r4, #2]
   11876:	bd70      	pop	{r4, r5, r6, pc}
   11878:	2000009c 	.word	0x2000009c
   1187c:	20001494 	.word	0x20001494

00011880 <sdc_disable>:
   11880:	b510      	push	{r4, lr}
   11882:	4c07      	ldr	r4, [pc, #28]	; (118a0 <sdc_disable+0x20>)
   11884:	7860      	ldrb	r0, [r4, #1]
   11886:	b120      	cbz	r0, 11892 <sdc_disable+0x12>
   11888:	f00a fa28 	bl	1bcdc <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>
   1188c:	7820      	ldrb	r0, [r4, #0]
   1188e:	f7ff fd2f 	bl	112f0 <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY>
   11892:	f000 ff0d 	bl	126b0 <sym_T2WGCKXTT3AQKC37WUCKG6LFMKIXXWS3R6ESLQQ>
   11896:	f000 ffe7 	bl	12868 <sym_CXUREOIXUAF7MRG6VYXVKEGUS4V3G7OLURYVMAI>
   1189a:	2000      	movs	r0, #0
   1189c:	7060      	strb	r0, [r4, #1]
   1189e:	bd10      	pop	{r4, pc}
   118a0:	2000009c 	.word	0x2000009c

000118a4 <sdc_enable>:
   118a4:	b570      	push	{r4, r5, r6, lr}
   118a6:	460c      	mov	r4, r1
   118a8:	0005      	movs	r5, r0
   118aa:	d019      	beq.n	118e0 <sdc_enable+0x3c>
   118ac:	b1c4      	cbz	r4, 118e0 <sdc_enable+0x3c>
   118ae:	f000 f923 	bl	11af8 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>
   118b2:	b1c0      	cbz	r0, 118e6 <sdc_enable+0x42>
   118b4:	4628      	mov	r0, r5
   118b6:	f7ff fce1 	bl	1127c <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
   118ba:	4d0c      	ldr	r5, [pc, #48]	; (118ec <sdc_enable+0x48>)
   118bc:	2200      	movs	r2, #0
   118be:	490c      	ldr	r1, [pc, #48]	; (118f0 <sdc_enable+0x4c>)
   118c0:	7028      	strb	r0, [r5, #0]
   118c2:	4620      	mov	r0, r4
   118c4:	f00d f8f9 	bl	1eaba <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x2e>
   118c8:	f011 fe32 	bl	23530 <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>
   118cc:	2100      	movs	r1, #0
   118ce:	7828      	ldrb	r0, [r5, #0]
   118d0:	f00a f9e6 	bl	1bca0 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>
   118d4:	f7ff fea8 	bl	11628 <mpsl_fem_device_config_254_apply_get+0xc>
   118d8:	2001      	movs	r0, #1
   118da:	7068      	strb	r0, [r5, #1]
   118dc:	2000      	movs	r0, #0
   118de:	bd70      	pop	{r4, r5, r6, pc}
   118e0:	f06f 0015 	mvn.w	r0, #21
   118e4:	bd70      	pop	{r4, r5, r6, pc}
   118e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   118ea:	bd70      	pop	{r4, r5, r6, pc}
   118ec:	2000009c 	.word	0x2000009c
   118f0:	20001494 	.word	0x20001494

000118f4 <sdc_init>:
   118f4:	b530      	push	{r4, r5, lr}
   118f6:	b089      	sub	sp, #36	; 0x24
   118f8:	0005      	movs	r5, r0
   118fa:	d00c      	beq.n	11916 <sdc_init+0x22>
   118fc:	f7ff fc64 	bl	111c8 <mpsl_is_initialized>
   11900:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   11904:	b120      	cbz	r0, 11910 <sdc_init+0x1c>
   11906:	f7ff fb0b 	bl	10f20 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
   1190a:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
   1190e:	d905      	bls.n	1191c <sdc_init+0x28>
   11910:	4620      	mov	r0, r4
   11912:	b009      	add	sp, #36	; 0x24
   11914:	bd30      	pop	{r4, r5, pc}
   11916:	f06f 0015 	mvn.w	r0, #21
   1191a:	e7fa      	b.n	11912 <sdc_init+0x1e>
   1191c:	4c13      	ldr	r4, [pc, #76]	; (1196c <sdc_init+0x78>)
   1191e:	4814      	ldr	r0, [pc, #80]	; (11970 <sdc_init+0x7c>)
   11920:	60a5      	str	r5, [r4, #8]
   11922:	f000 fa2d 	bl	11d80 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>
   11926:	2000      	movs	r0, #0
   11928:	7060      	strb	r0, [r4, #1]
   1192a:	70a0      	strb	r0, [r4, #2]
   1192c:	70e0      	strb	r0, [r4, #3]
   1192e:	7120      	strb	r0, [r4, #4]
   11930:	7160      	strb	r0, [r4, #5]
   11932:	2220      	movs	r2, #32
   11934:	490f      	ldr	r1, [pc, #60]	; (11974 <sdc_init+0x80>)
   11936:	4668      	mov	r0, sp
   11938:	f00c ff91 	bl	1e85e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   1193c:	2220      	movs	r2, #32
   1193e:	4669      	mov	r1, sp
   11940:	480d      	ldr	r0, [pc, #52]	; (11978 <sdc_init+0x84>)
   11942:	f00c ff8c 	bl	1e85e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   11946:	f3ef 8410 	mrs	r4, PRIMASK
   1194a:	b672      	cpsid	i
   1194c:	f06f 000c 	mvn.w	r0, #12
   11950:	f000 febc 	bl	126cc <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>
   11954:	4809      	ldr	r0, [pc, #36]	; (1197c <sdc_init+0x88>)
   11956:	f000 ff93 	bl	12880 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>
   1195a:	b118      	cbz	r0, 11964 <sdc_init+0x70>
   1195c:	21ab      	movs	r1, #171	; 0xab
   1195e:	2003      	movs	r0, #3
   11960:	f000 f80e 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   11964:	b904      	cbnz	r4, 11968 <sdc_init+0x74>
   11966:	b662      	cpsie	i
   11968:	2000      	movs	r0, #0
   1196a:	e7d2      	b.n	11912 <sdc_init+0x1e>
   1196c:	2000009c 	.word	0x2000009c
   11970:	00011629 	.word	0x00011629
   11974:	00011a8c 	.word	0x00011a8c
   11978:	20001494 	.word	0x20001494
   1197c:	00011b25 	.word	0x00011b25

00011980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>:
   11980:	b50e      	push	{r1, r2, r3, lr}
   11982:	b672      	cpsid	i
   11984:	4a15      	ldr	r2, [pc, #84]	; (119dc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x5c>)
   11986:	6895      	ldr	r5, [r2, #8]
   11988:	b1dd      	cbz	r5, 119c2 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x42>
   1198a:	2200      	movs	r2, #0
   1198c:	4603      	mov	r3, r0
   1198e:	466e      	mov	r6, sp
   11990:	240a      	movs	r4, #10
   11992:	e003      	b.n	1199c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x1c>
   11994:	fbb0 f0f4 	udiv	r0, r0, r4
   11998:	1c52      	adds	r2, r2, #1
   1199a:	b2d2      	uxtb	r2, r2
   1199c:	2800      	cmp	r0, #0
   1199e:	d1f9      	bne.n	11994 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x14>
   119a0:	54b0      	strb	r0, [r6, r2]
   119a2:	e00a      	b.n	119ba <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x3a>
   119a4:	b2d8      	uxtb	r0, r3
   119a6:	fbb0 f7f4 	udiv	r7, r0, r4
   119aa:	fbb3 f3f4 	udiv	r3, r3, r4
   119ae:	fb04 0017 	mls	r0, r4, r7, r0
   119b2:	1e52      	subs	r2, r2, #1
   119b4:	b2d2      	uxtb	r2, r2
   119b6:	3030      	adds	r0, #48	; 0x30
   119b8:	54b0      	strb	r0, [r6, r2]
   119ba:	2a00      	cmp	r2, #0
   119bc:	d1f2      	bne.n	119a4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x24>
   119be:	4630      	mov	r0, r6
   119c0:	47a8      	blx	r5
   119c2:	f3bf 8f4f 	dsb	sy
   119c6:	4806      	ldr	r0, [pc, #24]	; (119e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x60>)
   119c8:	6801      	ldr	r1, [r0, #0]
   119ca:	4a06      	ldr	r2, [pc, #24]	; (119e4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x64>)
   119cc:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
   119d0:	4311      	orrs	r1, r2
   119d2:	6001      	str	r1, [r0, #0]
   119d4:	f3bf 8f4f 	dsb	sy
   119d8:	bf00      	nop
   119da:	e7fd      	b.n	119d8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x58>
   119dc:	2000009c 	.word	0x2000009c
   119e0:	e000ed0c 	.word	0xe000ed0c
   119e4:	05fa0004 	.word	0x05fa0004

000119e8 <sdc_support_dle_peripheral>:
   119e8:	4806      	ldr	r0, [pc, #24]	; (11a04 <sdc_support_dle_peripheral+0x1c>)
   119ea:	b510      	push	{r4, lr}
   119ec:	7881      	ldrb	r1, [r0, #2]
   119ee:	7840      	ldrb	r0, [r0, #1]
   119f0:	4301      	orrs	r1, r0
   119f2:	d002      	beq.n	119fa <sdc_support_dle_peripheral+0x12>
   119f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   119f8:	bd10      	pop	{r4, pc}
   119fa:	f009 fe69 	bl	1b6d0 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI>
   119fe:	2000      	movs	r0, #0
   11a00:	bd10      	pop	{r4, pc}
   11a02:	0000      	.short	0x0000
   11a04:	2000009c 	.word	0x2000009c

00011a08 <sdc_support_ext_adv>:
   11a08:	4806      	ldr	r0, [pc, #24]	; (11a24 <sdc_support_ext_adv+0x1c>)
   11a0a:	b510      	push	{r4, lr}
   11a0c:	7881      	ldrb	r1, [r0, #2]
   11a0e:	7840      	ldrb	r0, [r0, #1]
   11a10:	4301      	orrs	r1, r0
   11a12:	d002      	beq.n	11a1a <sdc_support_ext_adv+0x12>
   11a14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   11a18:	bd10      	pop	{r4, pc}
   11a1a:	f00a f96d 	bl	1bcf8 <sym_QPSGGC6LIDS7QWN3UK6QRANELMYXU35MAVBCJFQ>
   11a1e:	2000      	movs	r0, #0
   11a20:	bd10      	pop	{r4, pc}
   11a22:	0000      	.short	0x0000
   11a24:	2000009c 	.word	0x2000009c

00011a28 <sdc_support_le_2m_phy>:
   11a28:	4806      	ldr	r0, [pc, #24]	; (11a44 <sdc_support_le_2m_phy+0x1c>)
   11a2a:	b510      	push	{r4, lr}
   11a2c:	7881      	ldrb	r1, [r0, #2]
   11a2e:	7840      	ldrb	r0, [r0, #1]
   11a30:	4301      	orrs	r1, r0
   11a32:	d002      	beq.n	11a3a <sdc_support_le_2m_phy+0x12>
   11a34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   11a38:	bd10      	pop	{r4, pc}
   11a3a:	f011 f8fd 	bl	22c38 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A>
   11a3e:	2000      	movs	r0, #0
   11a40:	bd10      	pop	{r4, pc}
   11a42:	0000      	.short	0x0000
   11a44:	2000009c 	.word	0x2000009c

00011a48 <sdc_support_peripheral>:
   11a48:	4806      	ldr	r0, [pc, #24]	; (11a64 <sdc_support_peripheral+0x1c>)
   11a4a:	b510      	push	{r4, lr}
   11a4c:	7881      	ldrb	r1, [r0, #2]
   11a4e:	7840      	ldrb	r0, [r0, #1]
   11a50:	4301      	orrs	r1, r0
   11a52:	d002      	beq.n	11a5a <sdc_support_peripheral+0x12>
   11a54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   11a58:	bd10      	pop	{r4, pc}
   11a5a:	f00a f95f 	bl	1bd1c <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA>
   11a5e:	2000      	movs	r0, #0
   11a60:	bd10      	pop	{r4, pc}
   11a62:	0000      	.short	0x0000
   11a64:	2000009c 	.word	0x2000009c

00011a68 <sdc_support_phy_update_peripheral>:
   11a68:	4806      	ldr	r0, [pc, #24]	; (11a84 <sdc_support_phy_update_peripheral+0x1c>)
   11a6a:	b510      	push	{r4, lr}
   11a6c:	7881      	ldrb	r1, [r0, #2]
   11a6e:	7840      	ldrb	r0, [r0, #1]
   11a70:	4301      	orrs	r1, r0
   11a72:	d002      	beq.n	11a7a <sdc_support_phy_update_peripheral+0x12>
   11a74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   11a78:	bd10      	pop	{r4, pc}
   11a7a:	f011 f91f 	bl	22cbc <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA>
   11a7e:	2000      	movs	r0, #0
   11a80:	bd10      	pop	{r4, pc}
   11a82:	0000      	.short	0x0000
   11a84:	2000009c 	.word	0x2000009c
   11a88:	00000001 	.word	0x00000001
   11a8c:	00010101 	.word	0x00010101
   11a90:	031b1b00 	.word	0x031b1b00
   11a94:	00000002 	.word	0x00000002
   11a98:	00001d4c 	.word	0x00001d4c
   11a9c:	001f0003 	.word	0x001f0003
   11aa0:	01000002 	.word	0x01000002
   11aa4:	00010000 	.word	0x00010000
   11aa8:	00000000 	.word	0x00000000
   11aac:	2a41906d 	.word	0x2a41906d
   11ab0:	17ade838 	.word	0x17ade838
   11ab4:	3803a529 	.word	0x3803a529
   11ab8:	85d72739 	.word	0x85d72739
   11abc:	e1d8851f 	.word	0xe1d8851f

00011ac0 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>:
   11ac0:	4a05      	ldr	r2, [pc, #20]	; (11ad8 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0x18>)
   11ac2:	b510      	push	{r4, lr}
   11ac4:	6852      	ldr	r2, [r2, #4]
   11ac6:	b112      	cbz	r2, 11ace <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0xe>
   11ac8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   11acc:	4710      	bx	r2
   11ace:	2192      	movs	r1, #146	; 0x92
   11ad0:	2004      	movs	r0, #4
   11ad2:	f7ff ff55 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   11ad6:	0000      	.short	0x0000
   11ad8:	200014b4 	.word	0x200014b4

00011adc <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>:
   11adc:	4a05      	ldr	r2, [pc, #20]	; (11af4 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0x18>)
   11ade:	b510      	push	{r4, lr}
   11ae0:	6892      	ldr	r2, [r2, #8]
   11ae2:	b112      	cbz	r2, 11aea <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0xe>
   11ae4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   11ae8:	4710      	bx	r2
   11aea:	2198      	movs	r1, #152	; 0x98
   11aec:	2004      	movs	r0, #4
   11aee:	f7ff ff47 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   11af2:	0000      	.short	0x0000
   11af4:	200014b4 	.word	0x200014b4

00011af8 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>:
   11af8:	4805      	ldr	r0, [pc, #20]	; (11b10 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x18>)
   11afa:	6801      	ldr	r1, [r0, #0]
   11afc:	b129      	cbz	r1, 11b0a <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
   11afe:	6841      	ldr	r1, [r0, #4]
   11b00:	b119      	cbz	r1, 11b0a <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
   11b02:	6880      	ldr	r0, [r0, #8]
   11b04:	b108      	cbz	r0, 11b0a <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
   11b06:	2001      	movs	r0, #1
   11b08:	4770      	bx	lr
   11b0a:	2000      	movs	r0, #0
   11b0c:	4770      	bx	lr
   11b0e:	0000      	.short	0x0000
   11b10:	200014b4 	.word	0x200014b4

00011b14 <sdc_rand_source_register>:
   11b14:	4902      	ldr	r1, [pc, #8]	; (11b20 <sdc_rand_source_register+0xc>)
   11b16:	c80d      	ldmia	r0, {r0, r2, r3}
   11b18:	e881 000d 	stmia.w	r1, {r0, r2, r3}
   11b1c:	2000      	movs	r0, #0
   11b1e:	4770      	bx	lr
   11b20:	200014b4 	.word	0x200014b4

00011b24 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI>:
   11b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11b26:	4c12      	ldr	r4, [pc, #72]	; (11b70 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x4c>)
   11b28:	2600      	movs	r6, #0
   11b2a:	6825      	ldr	r5, [r4, #0]
   11b2c:	e011      	b.n	11b52 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
   11b2e:	9800      	ldr	r0, [sp, #0]
   11b30:	2802      	cmp	r0, #2
   11b32:	d002      	beq.n	11b3a <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x16>
   11b34:	2803      	cmp	r0, #3
   11b36:	d10c      	bne.n	11b52 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
   11b38:	e006      	b.n	11b48 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x24>
   11b3a:	6820      	ldr	r0, [r4, #0]
   11b3c:	b110      	cbz	r0, 11b44 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x20>
   11b3e:	2000      	movs	r0, #0
   11b40:	6026      	str	r6, [r4, #0]
   11b42:	e005      	b.n	11b50 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2c>
   11b44:	2128      	movs	r1, #40	; 0x28
   11b46:	e00c      	b.n	11b62 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
   11b48:	6820      	ldr	r0, [r4, #0]
   11b4a:	b168      	cbz	r0, 11b68 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x44>
   11b4c:	2001      	movs	r0, #1
   11b4e:	6026      	str	r6, [r4, #0]
   11b50:	47a8      	blx	r5
   11b52:	4668      	mov	r0, sp
   11b54:	f000 fe5a 	bl	1280c <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>
   11b58:	2800      	cmp	r0, #0
   11b5a:	d0e8      	beq.n	11b2e <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa>
   11b5c:	2805      	cmp	r0, #5
   11b5e:	d005      	beq.n	11b6c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x48>
   11b60:	2135      	movs	r1, #53	; 0x35
   11b62:	2004      	movs	r0, #4
   11b64:	f7ff ff0c 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   11b68:	212d      	movs	r1, #45	; 0x2d
   11b6a:	e7fa      	b.n	11b62 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
   11b6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11b6e:	0000      	.short	0x0000
   11b70:	200000a8 	.word	0x200000a8

00011b74 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A>:
   11b74:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
   11b78:	4c29      	ldr	r4, [pc, #164]	; (11c20 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xac>)
   11b7a:	4605      	mov	r5, r0
   11b7c:	1d00      	adds	r0, r0, #4
   11b7e:	f504 7784 	add.w	r7, r4, #264	; 0x108
   11b82:	60a0      	str	r0, [r4, #8]
   11b84:	7838      	ldrb	r0, [r7, #0]
   11b86:	b158      	cbz	r0, 11ba0 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x2c>
   11b88:	78ba      	ldrb	r2, [r7, #2]
   11b8a:	463c      	mov	r4, r7
   11b8c:	1c79      	adds	r1, r7, #1
   11b8e:	4628      	mov	r0, r5
   11b90:	1c92      	adds	r2, r2, #2
   11b92:	f00c fe64 	bl	1e85e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   11b96:	2000      	movs	r0, #0
   11b98:	7020      	strb	r0, [r4, #0]
   11b9a:	2004      	movs	r0, #4
   11b9c:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
   11ba0:	481f      	ldr	r0, [pc, #124]	; (11c20 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xac>)
   11ba2:	f002 fd0b 	bl	145bc <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>
   11ba6:	4606      	mov	r6, r0
   11ba8:	2802      	cmp	r0, #2
   11baa:	d002      	beq.n	11bb2 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x3e>
   11bac:	2e04      	cmp	r6, #4
   11bae:	d005      	beq.n	11bbc <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x48>
   11bb0:	e026      	b.n	11c00 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x8c>
   11bb2:	491b      	ldr	r1, [pc, #108]	; (11c20 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xac>)
   11bb4:	4628      	mov	r0, r5
   11bb6:	f00c ffd6 	bl	1eb66 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>
   11bba:	e021      	b.n	11c00 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x8c>
   11bbc:	7820      	ldrb	r0, [r4, #0]
   11bbe:	2814      	cmp	r0, #20
   11bc0:	d104      	bne.n	11bcc <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x58>
   11bc2:	210a      	movs	r1, #10
   11bc4:	203e      	movs	r0, #62	; 0x3e
   11bc6:	f000 f82d 	bl	11c24 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xb0>
   11bca:	b118      	cbz	r0, 11bd4 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x60>
   11bcc:	7820      	ldrb	r0, [r4, #0]
   11bce:	280a      	cmp	r0, #10
   11bd0:	d005      	beq.n	11bde <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x6a>
   11bd2:	e009      	b.n	11be8 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x74>
   11bd4:	4912      	ldr	r1, [pc, #72]	; (11c20 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xac>)
   11bd6:	4628      	mov	r0, r5
   11bd8:	f00d fb77 	bl	1f2ca <sym_3TBFCFZXCYDY6GUKVOWTISOQWWIRT2CJTYIBX5Y>
   11bdc:	e00a      	b.n	11bf4 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x80>
   11bde:	2105      	movs	r1, #5
   11be0:	203e      	movs	r0, #62	; 0x3e
   11be2:	f000 f81f 	bl	11c24 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xb0>
   11be6:	b168      	cbz	r0, 11c04 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x90>
   11be8:	490d      	ldr	r1, [pc, #52]	; (11c20 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xac>)
   11bea:	4628      	mov	r0, r5
   11bec:	f00c ffe9 	bl	1ebc2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>
   11bf0:	2800      	cmp	r0, #0
   11bf2:	d0c7      	beq.n	11b84 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x10>
   11bf4:	78a9      	ldrb	r1, [r5, #2]
   11bf6:	7828      	ldrb	r0, [r5, #0]
   11bf8:	f000 f814 	bl	11c24 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xb0>
   11bfc:	2800      	cmp	r0, #0
   11bfe:	d0c1      	beq.n	11b84 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x10>
   11c00:	4630      	mov	r0, r6
   11c02:	e7cb      	b.n	11b9c <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x28>
   11c04:	88a0      	ldrh	r0, [r4, #4]
   11c06:	f8ad 0000 	strh.w	r0, [sp]
   11c0a:	a901      	add	r1, sp, #4
   11c0c:	4668      	mov	r0, sp
   11c0e:	f00d fcbf 	bl	1f590 <sdc_hci_cmd_le_long_term_key_request_negative_reply>
   11c12:	2800      	cmp	r0, #0
   11c14:	d0b6      	beq.n	11b84 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x10>
   11c16:	21aa      	movs	r1, #170	; 0xaa
   11c18:	2008      	movs	r0, #8
   11c1a:	f7ff feb1 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   11c1e:	0000      	.short	0x0000
   11c20:	200014c0 	.word	0x200014c0
   11c24:	b570      	push	{r4, r5, r6, lr}
   11c26:	460c      	mov	r4, r1
   11c28:	4605      	mov	r5, r0
   11c2a:	f000 f84b 	bl	11cc4 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>
   11c2e:	2800      	cmp	r0, #0
   11c30:	d002      	beq.n	11c38 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xc4>
   11c32:	2d3e      	cmp	r5, #62	; 0x3e
   11c34:	d001      	beq.n	11c3a <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xc6>
   11c36:	2001      	movs	r0, #1
   11c38:	bd70      	pop	{r4, r5, r6, pc}
   11c3a:	2c12      	cmp	r4, #18
   11c3c:	d106      	bne.n	11c4c <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xd8>
   11c3e:	4806      	ldr	r0, [pc, #24]	; (11c58 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xe4>)
   11c40:	7801      	ldrb	r1, [r0, #0]
   11c42:	2902      	cmp	r1, #2
   11c44:	d002      	beq.n	11c4c <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xd8>
   11c46:	7840      	ldrb	r0, [r0, #1]
   11c48:	2800      	cmp	r0, #0
   11c4a:	d0f5      	beq.n	11c38 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xc4>
   11c4c:	4620      	mov	r0, r4
   11c4e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   11c52:	f000 b849 	b.w	11ce8 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>
   11c56:	0000      	.short	0x0000
   11c58:	200003d4 	.word	0x200003d4

00011c5c <sym_Q4MVB6BAYYKAN3YZ2SZEJW6V5OITCIHY2IOHXKY>:
   11c5c:	4901      	ldr	r1, [pc, #4]	; (11c64 <sym_Q4MVB6BAYYKAN3YZ2SZEJW6V5OITCIHY2IOHXKY+0x8>)
   11c5e:	7048      	strb	r0, [r1, #1]
   11c60:	4770      	bx	lr
   11c62:	0000      	.short	0x0000
   11c64:	200003d4 	.word	0x200003d4
   11c68:	b570      	push	{r4, r5, r6, lr}
   11c6a:	780a      	ldrb	r2, [r1, #0]
   11c6c:	7082      	strb	r2, [r0, #2]
   11c6e:	b33a      	cbz	r2, 11cc0 <sym_Q4MVB6BAYYKAN3YZ2SZEJW6V5OITCIHY2IOHXKY+0x64>
   11c70:	2a01      	cmp	r2, #1
   11c72:	d825      	bhi.n	11cc0 <sym_Q4MVB6BAYYKAN3YZ2SZEJW6V5OITCIHY2IOHXKY+0x64>
   11c74:	2313      	movs	r3, #19
   11c76:	7003      	strb	r3, [r0, #0]
   11c78:	2300      	movs	r3, #0
   11c7a:	e00a      	b.n	11c92 <sym_Q4MVB6BAYYKAN3YZ2SZEJW6V5OITCIHY2IOHXKY+0x36>
   11c7c:	eb01 0443 	add.w	r4, r1, r3, lsl #1
   11c80:	eb00 0543 	add.w	r5, r0, r3, lsl #1
   11c84:	78a6      	ldrb	r6, [r4, #2]
   11c86:	70ee      	strb	r6, [r5, #3]
   11c88:	8864      	ldrh	r4, [r4, #2]
   11c8a:	0a24      	lsrs	r4, r4, #8
   11c8c:	1c5b      	adds	r3, r3, #1
   11c8e:	712c      	strb	r4, [r5, #4]
   11c90:	b2db      	uxtb	r3, r3
   11c92:	4293      	cmp	r3, r2
   11c94:	d3f2      	bcc.n	11c7c <sym_Q4MVB6BAYYKAN3YZ2SZEJW6V5OITCIHY2IOHXKY+0x20>
   11c96:	2300      	movs	r3, #0
   11c98:	e00b      	b.n	11cb2 <sym_Q4MVB6BAYYKAN3YZ2SZEJW6V5OITCIHY2IOHXKY+0x56>
   11c9a:	bf00      	nop
   11c9c:	eb01 0543 	add.w	r5, r1, r3, lsl #1
   11ca0:	eb00 0443 	add.w	r4, r0, r3, lsl #1
   11ca4:	792e      	ldrb	r6, [r5, #4]
   11ca6:	7166      	strb	r6, [r4, #5]
   11ca8:	88ad      	ldrh	r5, [r5, #4]
   11caa:	0a2d      	lsrs	r5, r5, #8
   11cac:	1c5b      	adds	r3, r3, #1
   11cae:	71a5      	strb	r5, [r4, #6]
   11cb0:	b2db      	uxtb	r3, r3
   11cb2:	4293      	cmp	r3, r2
   11cb4:	d3f2      	bcc.n	11c9c <sym_Q4MVB6BAYYKAN3YZ2SZEJW6V5OITCIHY2IOHXKY+0x40>
   11cb6:	2101      	movs	r1, #1
   11cb8:	eb01 0082 	add.w	r0, r1, r2, lsl #2
   11cbc:	b2c0      	uxtb	r0, r0
   11cbe:	bd70      	pop	{r4, r5, r6, pc}
   11cc0:	2000      	movs	r0, #0
   11cc2:	bd70      	pop	{r4, r5, r6, pc}

00011cc4 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>:
   11cc4:	2840      	cmp	r0, #64	; 0x40
   11cc6:	d203      	bcs.n	11cd0 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0xc>
   11cc8:	1e40      	subs	r0, r0, #1
   11cca:	b2c1      	uxtb	r1, r0
   11ccc:	4805      	ldr	r0, [pc, #20]	; (11ce4 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x20>)
   11cce:	e005      	b.n	11cdc <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x18>
   11cd0:	28ff      	cmp	r0, #255	; 0xff
   11cd2:	d005      	beq.n	11ce0 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x1c>
   11cd4:	3840      	subs	r0, #64	; 0x40
   11cd6:	b2c1      	uxtb	r1, r0
   11cd8:	4802      	ldr	r0, [pc, #8]	; (11ce4 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x20>)
   11cda:	3008      	adds	r0, #8
   11cdc:	f00d bb1f 	b.w	1f31e <sym_3TBFCFZXCYDY6GUKVOWTISOQWWIRT2CJTYIBX5Y+0x54>
   11ce0:	2001      	movs	r0, #1
   11ce2:	4770      	bx	lr
   11ce4:	200000ac 	.word	0x200000ac

00011ce8 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>:
   11ce8:	1e40      	subs	r0, r0, #1
   11cea:	b2c1      	uxtb	r1, r0
   11cec:	4801      	ldr	r0, [pc, #4]	; (11cf4 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ+0xc>)
   11cee:	f00d bb16 	b.w	1f31e <sym_3TBFCFZXCYDY6GUKVOWTISOQWWIRT2CJTYIBX5Y+0x54>
   11cf2:	0000      	.short	0x0000
   11cf4:	200000bc 	.word	0x200000bc

00011cf8 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>:
   11cf8:	4902      	ldr	r1, [pc, #8]	; (11d04 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ+0xc>)
   11cfa:	6802      	ldr	r2, [r0, #0]
   11cfc:	610a      	str	r2, [r1, #16]
   11cfe:	6840      	ldr	r0, [r0, #4]
   11d00:	6148      	str	r0, [r1, #20]
   11d02:	4770      	bx	lr
   11d04:	200000ac 	.word	0x200000ac

00011d08 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>:
   11d08:	4905      	ldr	r1, [pc, #20]	; (11d20 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x18>)
   11d0a:	6802      	ldr	r2, [r0, #0]
   11d0c:	600a      	str	r2, [r1, #0]
   11d0e:	6840      	ldr	r0, [r0, #4]
   11d10:	f442 228c 	orr.w	r2, r2, #286720	; 0x46000
   11d14:	600a      	str	r2, [r1, #0]
   11d16:	4a03      	ldr	r2, [pc, #12]	; (11d24 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x1c>)
   11d18:	4310      	orrs	r0, r2
   11d1a:	6048      	str	r0, [r1, #4]
   11d1c:	4770      	bx	lr
   11d1e:	0000      	.short	0x0000
   11d20:	200000ac 	.word	0x200000ac
   11d24:	024007f8 	.word	0x024007f8

00011d28 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA>:
   11d28:	4902      	ldr	r1, [pc, #8]	; (11d34 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA+0xc>)
   11d2a:	6802      	ldr	r2, [r0, #0]
   11d2c:	608a      	str	r2, [r1, #8]
   11d2e:	6840      	ldr	r0, [r0, #4]
   11d30:	60c8      	str	r0, [r1, #12]
   11d32:	4770      	bx	lr
   11d34:	200000ac 	.word	0x200000ac

00011d38 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>:
   11d38:	4807      	ldr	r0, [pc, #28]	; (11d58 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ+0x20>)
   11d3a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   11d3e:	2200      	movs	r2, #0
   11d40:	6001      	str	r1, [r0, #0]
   11d42:	0cc9      	lsrs	r1, r1, #19
   11d44:	6041      	str	r1, [r0, #4]
   11d46:	f100 0108 	add.w	r1, r0, #8
   11d4a:	201f      	movs	r0, #31
   11d4c:	600a      	str	r2, [r1, #0]
   11d4e:	604a      	str	r2, [r1, #4]
   11d50:	3108      	adds	r1, #8
   11d52:	e9c1 0200 	strd	r0, r2, [r1]
   11d56:	4770      	bx	lr
   11d58:	200000ac 	.word	0x200000ac

00011d5c <sdc_hci_cmd_cb_reset>:
   11d5c:	b510      	push	{r4, lr}
   11d5e:	f7ff ffeb 	bl	11d38 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>
   11d62:	2000      	movs	r0, #0
   11d64:	f7ff ff7a 	bl	11c5c <sym_Q4MVB6BAYYKAN3YZ2SZEJW6V5OITCIHY2IOHXKY>
   11d68:	f010 feca 	bl	22b00 <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>
   11d6c:	4604      	mov	r4, r0
   11d6e:	4803      	ldr	r0, [pc, #12]	; (11d7c <sdc_hci_cmd_cb_reset+0x20>)
   11d70:	6800      	ldr	r0, [r0, #0]
   11d72:	b100      	cbz	r0, 11d76 <sdc_hci_cmd_cb_reset+0x1a>
   11d74:	4780      	blx	r0
   11d76:	4620      	mov	r0, r4
   11d78:	bd10      	pop	{r4, pc}
   11d7a:	0000      	.short	0x0000
   11d7c:	200000c4 	.word	0x200000c4

00011d80 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>:
   11d80:	4901      	ldr	r1, [pc, #4]	; (11d88 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ+0x8>)
   11d82:	6008      	str	r0, [r1, #0]
   11d84:	4770      	bx	lr
   11d86:	0000      	.short	0x0000
   11d88:	200000c4 	.word	0x200000c4

00011d8c <sdc_hci_cmd_vs_zephyr_read_version_info>:
   11d8c:	2102      	movs	r1, #2
   11d8e:	8001      	strh	r1, [r0, #0]
   11d90:	8041      	strh	r1, [r0, #2]
   11d92:	2100      	movs	r1, #0
   11d94:	7101      	strb	r1, [r0, #4]
   11d96:	216d      	movs	r1, #109	; 0x6d
   11d98:	7141      	strb	r1, [r0, #5]
   11d9a:	f244 1190 	movw	r1, #16784	; 0x4190
   11d9e:	80c1      	strh	r1, [r0, #6]
   11da0:	4901      	ldr	r1, [pc, #4]	; (11da8 <sdc_hci_cmd_vs_zephyr_read_version_info+0x1c>)
   11da2:	6081      	str	r1, [r0, #8]
   11da4:	2000      	movs	r0, #0
   11da6:	4770      	bx	lr
   11da8:	ade8382a 	.word	0xade8382a

00011dac <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>:
   11dac:	b510      	push	{r4, lr}
   11dae:	2809      	cmp	r0, #9
   11db0:	d304      	bcc.n	11dbc <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI+0x10>
   11db2:	f44f 7101 	mov.w	r1, #516	; 0x204
   11db6:	2017      	movs	r0, #23
   11db8:	f7ff fde2 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   11dbc:	4901      	ldr	r1, [pc, #4]	; (11dc4 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI+0x18>)
   11dbe:	5c08      	ldrb	r0, [r1, r0]
   11dc0:	bd10      	pop	{r4, pc}
   11dc2:	0000      	.short	0x0000
   11dc4:	200016cc 	.word	0x200016cc

00011dc8 <sym_U5M5ICZ7T3JIJRQNTPYBHZSWROAVS7HIKZONU4A>:
   11dc8:	4a05      	ldr	r2, [pc, #20]	; (11de0 <sym_U5M5ICZ7T3JIJRQNTPYBHZSWROAVS7HIKZONU4A+0x18>)
   11dca:	b510      	push	{r4, lr}
   11dcc:	5c51      	ldrb	r1, [r2, r1]
   11dce:	4281      	cmp	r1, r0
   11dd0:	d804      	bhi.n	11ddc <sym_U5M5ICZ7T3JIJRQNTPYBHZSWROAVS7HIKZONU4A+0x14>
   11dd2:	f240 21b3 	movw	r1, #691	; 0x2b3
   11dd6:	2017      	movs	r0, #23
   11dd8:	f7ff fdd2 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   11ddc:	b2c0      	uxtb	r0, r0
   11dde:	bd10      	pop	{r4, pc}
   11de0:	200016cc 	.word	0x200016cc

00011de4 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>:
   11de4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   11de8:	4604      	mov	r4, r0
   11dea:	788a      	ldrb	r2, [r1, #2]
   11dec:	7848      	ldrb	r0, [r1, #1]
   11dee:	4402      	add	r2, r0
   11df0:	2aff      	cmp	r2, #255	; 0xff
   11df2:	d902      	bls.n	11dfa <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x16>
   11df4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
   11df8:	e020      	b.n	11e3c <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x58>
   11dfa:	780a      	ldrb	r2, [r1, #0]
   11dfc:	4282      	cmp	r2, r0
   11dfe:	d902      	bls.n	11e06 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x22>
   11e00:	f44f 71d9 	mov.w	r1, #434	; 0x1b2
   11e04:	e01a      	b.n	11e3c <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x58>
   11e06:	9400      	str	r4, [sp, #0]
   11e08:	b1dc      	cbz	r4, 11e42 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x5e>
   11e0a:	2600      	movs	r6, #0
   11e0c:	f891 8001 	ldrb.w	r8, [r1, #1]
   11e10:	f891 c002 	ldrb.w	ip, [r1, #2]
   11e14:	7a08      	ldrb	r0, [r1, #8]
   11e16:	eb0c 0208 	add.w	r2, ip, r8
   11e1a:	4681      	mov	r9, r0
   11e1c:	4410      	add	r0, r2
   11e1e:	7a4b      	ldrb	r3, [r1, #9]
   11e20:	794a      	ldrb	r2, [r1, #5]
   11e22:	4418      	add	r0, r3
   11e24:	b2c5      	uxtb	r5, r0
   11e26:	42aa      	cmp	r2, r5
   11e28:	d900      	bls.n	11e2c <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x48>
   11e2a:	4615      	mov	r5, r2
   11e2c:	78c8      	ldrb	r0, [r1, #3]
   11e2e:	42a8      	cmp	r0, r5
   11e30:	d900      	bls.n	11e34 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x50>
   11e32:	4605      	mov	r5, r0
   11e34:	07a7      	lsls	r7, r4, #30
   11e36:	d006      	beq.n	11e46 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x62>
   11e38:	f240 11cb 	movw	r1, #459	; 0x1cb
   11e3c:	2017      	movs	r0, #23
   11e3e:	f7ff fd9f 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   11e42:	2601      	movs	r6, #1
   11e44:	e7e2      	b.n	11e0c <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x28>
   11e46:	4f1a      	ldr	r7, [pc, #104]	; (11eb0 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0xcc>)
   11e48:	f887 8000 	strb.w	r8, [r7]
   11e4c:	f887 c001 	strb.w	ip, [r7, #1]
   11e50:	70b8      	strb	r0, [r7, #2]
   11e52:	7908      	ldrb	r0, [r1, #4]
   11e54:	70f8      	strb	r0, [r7, #3]
   11e56:	713a      	strb	r2, [r7, #4]
   11e58:	7988      	ldrb	r0, [r1, #6]
   11e5a:	7178      	strb	r0, [r7, #5]
   11e5c:	79c8      	ldrb	r0, [r1, #7]
   11e5e:	71b8      	strb	r0, [r7, #6]
   11e60:	f887 9007 	strb.w	r9, [r7, #7]
   11e64:	723b      	strb	r3, [r7, #8]
   11e66:	4631      	mov	r1, r6
   11e68:	4668      	mov	r0, sp
   11e6a:	f000 f91b 	bl	120a4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd4>
   11e6e:	2100      	movs	r1, #0
   11e70:	460b      	mov	r3, r1
   11e72:	9800      	ldr	r0, [sp, #0]
   11e74:	1cc0      	adds	r0, r0, #3
   11e76:	f020 0003 	bic.w	r0, r0, #3
   11e7a:	9000      	str	r0, [sp, #0]
   11e7c:	b966      	cbnz	r6, 11e98 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0xb4>
   11e7e:	eb07 0281 	add.w	r2, r7, r1, lsl #2
   11e82:	6310      	str	r0, [r2, #48]	; 0x30
   11e84:	2000      	movs	r0, #0
   11e86:	e005      	b.n	11e94 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0xb0>
   11e88:	f8d2 c030 	ldr.w	ip, [r2, #48]	; 0x30
   11e8c:	f84c 3020 	str.w	r3, [ip, r0, lsl #2]
   11e90:	1c40      	adds	r0, r0, #1
   11e92:	b2c0      	uxtb	r0, r0
   11e94:	42a8      	cmp	r0, r5
   11e96:	d3f7      	bcc.n	11e88 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0xa4>
   11e98:	9800      	ldr	r0, [sp, #0]
   11e9a:	1c49      	adds	r1, r1, #1
   11e9c:	eb00 0085 	add.w	r0, r0, r5, lsl #2
   11ea0:	b2c9      	uxtb	r1, r1
   11ea2:	9000      	str	r0, [sp, #0]
   11ea4:	2909      	cmp	r1, #9
   11ea6:	d3e4      	bcc.n	11e72 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x8e>
   11ea8:	1b00      	subs	r0, r0, r4
   11eaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   11eae:	0000      	.short	0x0000
   11eb0:	200016cc 	.word	0x200016cc

00011eb4 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>:
   11eb4:	b570      	push	{r4, r5, r6, lr}
   11eb6:	4604      	mov	r4, r0
   11eb8:	7985      	ldrb	r5, [r0, #6]
   11eba:	f000 f92f 	bl	1211c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x14c>
   11ebe:	4602      	mov	r2, r0
   11ec0:	480c      	ldr	r0, [pc, #48]	; (11ef4 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x40>)
   11ec2:	79e1      	ldrb	r1, [r4, #7]
   11ec4:	eb00 0085 	add.w	r0, r0, r5, lsl #2
   11ec8:	e00e      	b.n	11ee8 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x34>
   11eca:	6b03      	ldr	r3, [r0, #48]	; 0x30
   11ecc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   11ed0:	b143      	cbz	r3, 11ee4 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x30>
   11ed2:	1c4a      	adds	r2, r1, #1
   11ed4:	71e2      	strb	r2, [r4, #7]
   11ed6:	80a1      	strh	r1, [r4, #4]
   11ed8:	6b00      	ldr	r0, [r0, #48]	; 0x30
   11eda:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
   11ede:	6020      	str	r0, [r4, #0]
   11ee0:	2000      	movs	r0, #0
   11ee2:	bd70      	pop	{r4, r5, r6, pc}
   11ee4:	1c49      	adds	r1, r1, #1
   11ee6:	b2c9      	uxtb	r1, r1
   11ee8:	4291      	cmp	r1, r2
   11eea:	d3ee      	bcc.n	11eca <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x16>
   11eec:	71e1      	strb	r1, [r4, #7]
   11eee:	2005      	movs	r0, #5
   11ef0:	bd70      	pop	{r4, r5, r6, pc}
   11ef2:	0000      	.short	0x0000
   11ef4:	200016cc 	.word	0x200016cc

00011ef8 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ>:
   11ef8:	b4f0      	push	{r4, r5, r6, r7}
   11efa:	4605      	mov	r5, r0
   11efc:	b111      	cbz	r1, 11f04 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0xc>
   11efe:	2000      	movs	r0, #0
   11f00:	b938      	cbnz	r0, 11f12 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x1a>
   11f02:	e001      	b.n	11f08 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x10>
   11f04:	2001      	movs	r0, #1
   11f06:	e7fb      	b.n	11f00 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x8>
   11f08:	2901      	cmp	r1, #1
   11f0a:	d002      	beq.n	11f12 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x1a>
   11f0c:	2000      	movs	r0, #0
   11f0e:	b938      	cbnz	r0, 11f20 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x28>
   11f10:	e001      	b.n	11f16 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x1e>
   11f12:	2001      	movs	r0, #1
   11f14:	e7fb      	b.n	11f0e <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x16>
   11f16:	2902      	cmp	r1, #2
   11f18:	d002      	beq.n	11f20 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x28>
   11f1a:	2000      	movs	r0, #0
   11f1c:	b938      	cbnz	r0, 11f2e <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x36>
   11f1e:	e001      	b.n	11f24 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x2c>
   11f20:	2001      	movs	r0, #1
   11f22:	e7fb      	b.n	11f1c <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x24>
   11f24:	2903      	cmp	r1, #3
   11f26:	d002      	beq.n	11f2e <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x36>
   11f28:	2000      	movs	r0, #0
   11f2a:	b938      	cbnz	r0, 11f3c <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x44>
   11f2c:	e001      	b.n	11f32 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x3a>
   11f2e:	2001      	movs	r0, #1
   11f30:	e7fb      	b.n	11f2a <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x32>
   11f32:	2904      	cmp	r1, #4
   11f34:	d002      	beq.n	11f3c <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x44>
   11f36:	2000      	movs	r0, #0
   11f38:	b938      	cbnz	r0, 11f4a <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x52>
   11f3a:	e001      	b.n	11f40 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x48>
   11f3c:	2001      	movs	r0, #1
   11f3e:	e7fb      	b.n	11f38 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x40>
   11f40:	2907      	cmp	r1, #7
   11f42:	d002      	beq.n	11f4a <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x52>
   11f44:	2000      	movs	r0, #0
   11f46:	b938      	cbnz	r0, 11f58 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x60>
   11f48:	e001      	b.n	11f4e <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x56>
   11f4a:	2001      	movs	r0, #1
   11f4c:	e7fb      	b.n	11f46 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x4e>
   11f4e:	2908      	cmp	r1, #8
   11f50:	d002      	beq.n	11f58 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x60>
   11f52:	2000      	movs	r0, #0
   11f54:	b938      	cbnz	r0, 11f66 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x6e>
   11f56:	e001      	b.n	11f5c <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x64>
   11f58:	2001      	movs	r0, #1
   11f5a:	e7fb      	b.n	11f54 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x5c>
   11f5c:	2905      	cmp	r1, #5
   11f5e:	d002      	beq.n	11f66 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x6e>
   11f60:	2000      	movs	r0, #0
   11f62:	b978      	cbnz	r0, 11f84 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x8c>
   11f64:	e001      	b.n	11f6a <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x72>
   11f66:	2001      	movs	r0, #1
   11f68:	e7fb      	b.n	11f62 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x6a>
   11f6a:	2906      	cmp	r1, #6
   11f6c:	d00a      	beq.n	11f84 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x8c>
   11f6e:	2000      	movs	r0, #0
   11f70:	2800      	cmp	r0, #0
   11f72:	d026      	beq.n	11fc2 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0xca>
   11f74:	4f15      	ldr	r7, [pc, #84]	; (11fcc <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0xd4>)
   11f76:	2300      	movs	r3, #0
   11f78:	2901      	cmp	r1, #1
   11f7a:	7838      	ldrb	r0, [r7, #0]
   11f7c:	d004      	beq.n	11f88 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x90>
   11f7e:	2908      	cmp	r1, #8
   11f80:	d004      	beq.n	11f8c <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x94>
   11f82:	e005      	b.n	11f90 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x98>
   11f84:	2001      	movs	r0, #1
   11f86:	e7f3      	b.n	11f70 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x78>
   11f88:	4603      	mov	r3, r0
   11f8a:	e001      	b.n	11f90 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x98>
   11f8c:	787a      	ldrb	r2, [r7, #1]
   11f8e:	1883      	adds	r3, r0, r2
   11f90:	eb07 0681 	add.w	r6, r7, r1, lsl #2
   11f94:	2200      	movs	r2, #0
   11f96:	f64f 74ff 	movw	r4, #65535	; 0xffff
   11f9a:	5c7f      	ldrb	r7, [r7, r1]
   11f9c:	e00a      	b.n	11fb4 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0xbc>
   11f9e:	18d0      	adds	r0, r2, r3
   11fa0:	f8d6 c030 	ldr.w	ip, [r6, #48]	; 0x30
   11fa4:	b280      	uxth	r0, r0
   11fa6:	f85c c020 	ldr.w	ip, [ip, r0, lsl #2]
   11faa:	f1bc 0f00 	cmp.w	ip, #0
   11fae:	d004      	beq.n	11fba <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0xc2>
   11fb0:	1c52      	adds	r2, r2, #1
   11fb2:	b292      	uxth	r2, r2
   11fb4:	4297      	cmp	r7, r2
   11fb6:	d8f2      	bhi.n	11f9e <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0xa6>
   11fb8:	4620      	mov	r0, r4
   11fba:	8028      	strh	r0, [r5, #0]
   11fbc:	42a0      	cmp	r0, r4
   11fbe:	d102      	bne.n	11fc6 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0xce>
   11fc0:	2000      	movs	r0, #0
   11fc2:	bcf0      	pop	{r4, r5, r6, r7}
   11fc4:	4770      	bx	lr
   11fc6:	bcf0      	pop	{r4, r5, r6, r7}
   11fc8:	f000 b834 	b.w	12034 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x64>
   11fcc:	200016cc 	.word	0x200016cc

00011fd0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>:
   11fd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11fd4:	4607      	mov	r7, r0
   11fd6:	f5a0 407f 	sub.w	r0, r0, #65280	; 0xff00
   11fda:	460c      	mov	r4, r1
   11fdc:	f243 0602 	movw	r6, #12290	; 0x3002
   11fe0:	38ff      	subs	r0, #255	; 0xff
   11fe2:	d020      	beq.n	12026 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x56>
   11fe4:	2c09      	cmp	r4, #9
   11fe6:	d302      	bcc.n	11fee <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x1e>
   11fe8:	2007      	movs	r0, #7
   11fea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11fee:	4638      	mov	r0, r7
   11ff0:	f000 f848 	bl	12084 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xb4>
   11ff4:	0005      	movs	r5, r0
   11ff6:	d016      	beq.n	12026 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x56>
   11ff8:	480c      	ldr	r0, [pc, #48]	; (1202c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x5c>)
   11ffa:	4629      	mov	r1, r5
   11ffc:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
   12000:	4638      	mov	r0, r7
   12002:	4790      	blx	r2
   12004:	480a      	ldr	r0, [pc, #40]	; (12030 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x60>)
   12006:	2100      	movs	r1, #0
   12008:	eb00 0684 	add.w	r6, r0, r4, lsl #2
   1200c:	6b30      	ldr	r0, [r6, #48]	; 0x30
   1200e:	f840 1027 	str.w	r1, [r0, r7, lsl #2]
   12012:	4620      	mov	r0, r4
   12014:	f000 f878 	bl	12108 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x138>
   12018:	4602      	mov	r2, r0
   1201a:	4629      	mov	r1, r5
   1201c:	68f0      	ldr	r0, [r6, #12]
   1201e:	f00d fd80 	bl	1fb22 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
   12022:	2000      	movs	r0, #0
   12024:	e7e1      	b.n	11fea <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x1a>
   12026:	4630      	mov	r0, r6
   12028:	e7df      	b.n	11fea <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x1a>
   1202a:	0000      	.short	0x0000
   1202c:	00012160 	.word	0x00012160
   12030:	200016cc 	.word	0x200016cc
   12034:	b570      	push	{r4, r5, r6, lr}
   12036:	460e      	mov	r6, r1
   12038:	4605      	mov	r5, r0
   1203a:	f00d fdac 	bl	1fb96 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0x14>
   1203e:	b158      	cbz	r0, 12058 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x88>
   12040:	480f      	ldr	r0, [pc, #60]	; (12080 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xb0>)
   12042:	eb00 0486 	add.w	r4, r0, r6, lsl #2
   12046:	6b20      	ldr	r0, [r4, #48]	; 0x30
   12048:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
   1204c:	b138      	cbz	r0, 1205e <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x8e>
   1204e:	f240 118b 	movw	r1, #395	; 0x18b
   12052:	2017      	movs	r0, #23
   12054:	f7ff fc94 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   12058:	f44f 71c5 	mov.w	r1, #394	; 0x18a
   1205c:	e7f9      	b.n	12052 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x82>
   1205e:	68e0      	ldr	r0, [r4, #12]
   12060:	2800      	cmp	r0, #0
   12062:	d00b      	beq.n	1207c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xac>
   12064:	4630      	mov	r0, r6
   12066:	f000 f84f 	bl	12108 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x138>
   1206a:	4601      	mov	r1, r0
   1206c:	68e0      	ldr	r0, [r4, #12]
   1206e:	f00d fd00 	bl	1fa72 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
   12072:	2800      	cmp	r0, #0
   12074:	d002      	beq.n	1207c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xac>
   12076:	6b21      	ldr	r1, [r4, #48]	; 0x30
   12078:	f841 0025 	str.w	r0, [r1, r5, lsl #2]
   1207c:	bd70      	pop	{r4, r5, r6, pc}
   1207e:	0000      	.short	0x0000
   12080:	200016cc 	.word	0x200016cc
   12084:	b570      	push	{r4, r5, r6, lr}
   12086:	460c      	mov	r4, r1
   12088:	4605      	mov	r5, r0
   1208a:	f00d fd84 	bl	1fb96 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0x14>
   1208e:	2800      	cmp	r0, #0
   12090:	d005      	beq.n	1209e <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xce>
   12092:	4803      	ldr	r0, [pc, #12]	; (120a0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd0>)
   12094:	eb00 0084 	add.w	r0, r0, r4, lsl #2
   12098:	6b00      	ldr	r0, [r0, #48]	; 0x30
   1209a:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
   1209e:	bd70      	pop	{r4, r5, r6, pc}
   120a0:	200016cc 	.word	0x200016cc
   120a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   120a8:	4f16      	ldr	r7, [pc, #88]	; (12104 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x134>)
   120aa:	4688      	mov	r8, r1
   120ac:	4605      	mov	r5, r0
   120ae:	2400      	movs	r4, #0
   120b0:	6828      	ldr	r0, [r5, #0]
   120b2:	1cc0      	adds	r0, r0, #3
   120b4:	f020 0003 	bic.w	r0, r0, #3
   120b8:	6028      	str	r0, [r5, #0]
   120ba:	4620      	mov	r0, r4
   120bc:	f000 f824 	bl	12108 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x138>
   120c0:	5d39      	ldrb	r1, [r7, r4]
   120c2:	4341      	muls	r1, r0
   120c4:	f1b8 0f00 	cmp.w	r8, #0
   120c8:	d001      	beq.n	120ce <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xfe>
   120ca:	2000      	movs	r0, #0
   120cc:	e000      	b.n	120d0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x100>
   120ce:	6828      	ldr	r0, [r5, #0]
   120d0:	9000      	str	r0, [sp, #0]
   120d2:	b118      	cbz	r0, 120dc <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x10c>
   120d4:	2600      	movs	r6, #0
   120d6:	b11e      	cbz	r6, 120e0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x110>
   120d8:	2000      	movs	r0, #0
   120da:	e002      	b.n	120e2 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x112>
   120dc:	2601      	movs	r6, #1
   120de:	e7fa      	b.n	120d6 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x106>
   120e0:	4668      	mov	r0, sp
   120e2:	f00d fcf7 	bl	1fad4 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
   120e6:	b91e      	cbnz	r6, 120f0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x120>
   120e8:	eb07 0184 	add.w	r1, r7, r4, lsl #2
   120ec:	9a00      	ldr	r2, [sp, #0]
   120ee:	60ca      	str	r2, [r1, #12]
   120f0:	6829      	ldr	r1, [r5, #0]
   120f2:	1c64      	adds	r4, r4, #1
   120f4:	4408      	add	r0, r1
   120f6:	b2e4      	uxtb	r4, r4
   120f8:	6028      	str	r0, [r5, #0]
   120fa:	2c09      	cmp	r4, #9
   120fc:	d3d8      	bcc.n	120b0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xe0>
   120fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   12102:	0000      	.short	0x0000
   12104:	200016cc 	.word	0x200016cc
   12108:	4903      	ldr	r1, [pc, #12]	; (12118 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x148>)
   1210a:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
   1210e:	f64f 71fc 	movw	r1, #65532	; 0xfffc
   12112:	1cc0      	adds	r0, r0, #3
   12114:	4008      	ands	r0, r1
   12116:	4770      	bx	lr
   12118:	00012184 	.word	0x00012184
   1211c:	4b0f      	ldr	r3, [pc, #60]	; (1215c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x18c>)
   1211e:	7818      	ldrb	r0, [r3, #0]
   12120:	7859      	ldrb	r1, [r3, #1]
   12122:	4408      	add	r0, r1
   12124:	7a19      	ldrb	r1, [r3, #8]
   12126:	4408      	add	r0, r1
   12128:	b2c2      	uxtb	r2, r0
   1212a:	7898      	ldrb	r0, [r3, #2]
   1212c:	4282      	cmp	r2, r0
   1212e:	d300      	bcc.n	12132 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x162>
   12130:	4610      	mov	r0, r2
   12132:	78d9      	ldrb	r1, [r3, #3]
   12134:	4288      	cmp	r0, r1
   12136:	d200      	bcs.n	1213a <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x16a>
   12138:	4608      	mov	r0, r1
   1213a:	791a      	ldrb	r2, [r3, #4]
   1213c:	4290      	cmp	r0, r2
   1213e:	d200      	bcs.n	12142 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x172>
   12140:	4610      	mov	r0, r2
   12142:	7959      	ldrb	r1, [r3, #5]
   12144:	4288      	cmp	r0, r1
   12146:	d200      	bcs.n	1214a <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x17a>
   12148:	4608      	mov	r0, r1
   1214a:	799a      	ldrb	r2, [r3, #6]
   1214c:	4290      	cmp	r0, r2
   1214e:	d200      	bcs.n	12152 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x182>
   12150:	4610      	mov	r0, r2
   12152:	79d9      	ldrb	r1, [r3, #7]
   12154:	4288      	cmp	r0, r1
   12156:	d200      	bcs.n	1215a <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x18a>
   12158:	4608      	mov	r0, r1
   1215a:	4770      	bx	lr
   1215c:	200016cc 	.word	0x200016cc
   12160:	00021c29 	.word	0x00021c29
   12164:	00021981 	.word	0x00021981
   12168:	00020ee3 	.word	0x00020ee3
   1216c:	0002345f 	.word	0x0002345f
   12170:	0002350d 	.word	0x0002350d
   12174:	0002350b 	.word	0x0002350b
   12178:	0002352f 	.word	0x0002352f
   1217c:	00021dbf 	.word	0x00021dbf
   12180:	00021c2d 	.word	0x00021c2d
   12184:	03700318 	.word	0x03700318
   12188:	00900160 	.word	0x00900160
   1218c:	00b800a8 	.word	0x00b800a8
   12190:	00780014 	.word	0x00780014
   12194:	00000058 	.word	0x00000058

00012198 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>:
   12198:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1219c:	4c24      	ldr	r4, [pc, #144]	; (12230 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x98>)
   1219e:	4606      	mov	r6, r0
   121a0:	b081      	sub	sp, #4
   121a2:	6820      	ldr	r0, [r4, #0]
   121a4:	469a      	mov	sl, r3
   121a6:	4693      	mov	fp, r2
   121a8:	b158      	cbz	r0, 121c2 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x2a>
   121aa:	7a01      	ldrb	r1, [r0, #8]
   121ac:	42b1      	cmp	r1, r6
   121ae:	d903      	bls.n	121b8 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x20>
   121b0:	6840      	ldr	r0, [r0, #4]
   121b2:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
   121b6:	b140      	cbz	r0, 121ca <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x32>
   121b8:	f243 0002 	movw	r0, #12290	; 0x3002
   121bc:	b005      	add	sp, #20
   121be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   121c2:	21a5      	movs	r1, #165	; 0xa5
   121c4:	2018      	movs	r0, #24
   121c6:	f7ff fbdb 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   121ca:	4619      	mov	r1, r3
   121cc:	9802      	ldr	r0, [sp, #8]
   121ce:	f00d fd05 	bl	1fbdc <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x32>
   121d2:	4680      	mov	r8, r0
   121d4:	4658      	mov	r0, fp
   121d6:	990e      	ldr	r1, [sp, #56]	; 0x38
   121d8:	f00d fcf6 	bl	1fbc8 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1e>
   121dc:	4605      	mov	r5, r0
   121de:	eb08 0005 	add.w	r0, r8, r5
   121e2:	1d00      	adds	r0, r0, #4
   121e4:	b287      	uxth	r7, r0
   121e6:	6820      	ldr	r0, [r4, #0]
   121e8:	46a1      	mov	r9, r4
   121ea:	4639      	mov	r1, r7
   121ec:	6800      	ldr	r0, [r0, #0]
   121ee:	f00d fc40 	bl	1fa72 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
   121f2:	0004      	movs	r4, r0
   121f4:	d01a      	beq.n	1222c <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x94>
   121f6:	8067      	strh	r7, [r4, #2]
   121f8:	8025      	strh	r5, [r4, #0]
   121fa:	4629      	mov	r1, r5
   121fc:	1d20      	adds	r0, r4, #4
   121fe:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   12200:	4607      	mov	r7, r0
   12202:	465a      	mov	r2, fp
   12204:	2309      	movs	r3, #9
   12206:	9500      	str	r5, [sp, #0]
   12208:	f00d fba5 	bl	1f956 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
   1220c:	8820      	ldrh	r0, [r4, #0]
   1220e:	4641      	mov	r1, r8
   12210:	4438      	add	r0, r7
   12212:	230a      	movs	r3, #10
   12214:	9a02      	ldr	r2, [sp, #8]
   12216:	f8cd a000 	str.w	sl, [sp]
   1221a:	f00d fb9c 	bl	1f956 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
   1221e:	f8d9 0000 	ldr.w	r0, [r9]
   12222:	6840      	ldr	r0, [r0, #4]
   12224:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
   12228:	2000      	movs	r0, #0
   1222a:	e7c7      	b.n	121bc <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
   1222c:	2004      	movs	r0, #4
   1222e:	e7c5      	b.n	121bc <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
   12230:	200000c8 	.word	0x200000c8

00012234 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>:
   12234:	b570      	push	{r4, r5, r6, lr}
   12236:	4c14      	ldr	r4, [pc, #80]	; (12288 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x54>)
   12238:	6823      	ldr	r3, [r4, #0]
   1223a:	b18b      	cbz	r3, 12260 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x2c>
   1223c:	7a19      	ldrb	r1, [r3, #8]
   1223e:	4281      	cmp	r1, r0
   12240:	d912      	bls.n	12268 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
   12242:	685a      	ldr	r2, [r3, #4]
   12244:	f852 1020 	ldr.w	r1, [r2, r0, lsl #2]
   12248:	b171      	cbz	r1, 12268 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
   1224a:	2500      	movs	r5, #0
   1224c:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
   12250:	884a      	ldrh	r2, [r1, #2]
   12252:	6818      	ldr	r0, [r3, #0]
   12254:	f00d fc65 	bl	1fb22 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
   12258:	6821      	ldr	r1, [r4, #0]
   1225a:	2000      	movs	r0, #0
   1225c:	7a0a      	ldrb	r2, [r1, #8]
   1225e:	e00c      	b.n	1227a <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x46>
   12260:	21c6      	movs	r1, #198	; 0xc6
   12262:	2018      	movs	r0, #24
   12264:	f7ff fb8c 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   12268:	f243 0002 	movw	r0, #12290	; 0x3002
   1226c:	bd70      	pop	{r4, r5, r6, pc}
   1226e:	684b      	ldr	r3, [r1, #4]
   12270:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   12274:	b933      	cbnz	r3, 12284 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x50>
   12276:	1c40      	adds	r0, r0, #1
   12278:	b2c0      	uxtb	r0, r0
   1227a:	4282      	cmp	r2, r0
   1227c:	d8f7      	bhi.n	1226e <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x3a>
   1227e:	6808      	ldr	r0, [r1, #0]
   12280:	f00d fc44 	bl	1fb0c <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>
   12284:	2000      	movs	r0, #0
   12286:	bd70      	pop	{r4, r5, r6, pc}
   12288:	200000c8 	.word	0x200000c8

0001228c <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>:
   1228c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12290:	460d      	mov	r5, r1
   12292:	0004      	movs	r4, r0
   12294:	4690      	mov	r8, r2
   12296:	f04f 0600 	mov.w	r6, #0
   1229a:	d006      	beq.n	122aa <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x1e>
   1229c:	2700      	movs	r7, #0
   1229e:	07a0      	lsls	r0, r4, #30
   122a0:	d005      	beq.n	122ae <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x22>
   122a2:	2186      	movs	r1, #134	; 0x86
   122a4:	2018      	movs	r0, #24
   122a6:	f7ff fb6b 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   122aa:	2701      	movs	r7, #1
   122ac:	e7f7      	b.n	1229e <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x12>
   122ae:	b1cd      	cbz	r5, 122e4 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x58>
   122b0:	4611      	mov	r1, r2
   122b2:	2000      	movs	r0, #0
   122b4:	f00d fc0e 	bl	1fad4 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
   122b8:	300c      	adds	r0, #12
   122ba:	eb00 0685 	add.w	r6, r0, r5, lsl #2
   122be:	b98f      	cbnz	r7, 122e4 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x58>
   122c0:	4f0a      	ldr	r7, [pc, #40]	; (122ec <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x60>)
   122c2:	f104 000c 	add.w	r0, r4, #12
   122c6:	00aa      	lsls	r2, r5, #2
   122c8:	603c      	str	r4, [r7, #0]
   122ca:	7225      	strb	r5, [r4, #8]
   122cc:	6060      	str	r0, [r4, #4]
   122ce:	eb00 0085 	add.w	r0, r0, r5, lsl #2
   122d2:	6020      	str	r0, [r4, #0]
   122d4:	2100      	movs	r1, #0
   122d6:	6860      	ldr	r0, [r4, #4]
   122d8:	f00c fb3b 	bl	1e952 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
   122dc:	4641      	mov	r1, r8
   122de:	6838      	ldr	r0, [r7, #0]
   122e0:	f00d fbf8 	bl	1fad4 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
   122e4:	4630      	mov	r0, r6
   122e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   122ea:	0000      	.short	0x0000
   122ec:	200000c8 	.word	0x200000c8

000122f0 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA>:
   122f0:	b570      	push	{r4, r5, r6, lr}
   122f2:	4d08      	ldr	r5, [pc, #32]	; (12314 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x24>)
   122f4:	6828      	ldr	r0, [r5, #0]
   122f6:	2800      	cmp	r0, #0
   122f8:	d00a      	beq.n	12310 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x20>
   122fa:	2400      	movs	r4, #0
   122fc:	e004      	b.n	12308 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x18>
   122fe:	4620      	mov	r0, r4
   12300:	f7ff ff98 	bl	12234 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>
   12304:	1c64      	adds	r4, r4, #1
   12306:	b2e4      	uxtb	r4, r4
   12308:	6828      	ldr	r0, [r5, #0]
   1230a:	7a00      	ldrb	r0, [r0, #8]
   1230c:	42a0      	cmp	r0, r4
   1230e:	d8f6      	bhi.n	122fe <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0xe>
   12310:	bd70      	pop	{r4, r5, r6, pc}
   12312:	0000      	.short	0x0000
   12314:	200000c8 	.word	0x200000c8

00012318 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>:
   12318:	4909      	ldr	r1, [pc, #36]	; (12340 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x28>)
   1231a:	b510      	push	{r4, lr}
   1231c:	4602      	mov	r2, r0
   1231e:	6809      	ldr	r1, [r1, #0]
   12320:	2000      	movs	r0, #0
   12322:	b149      	cbz	r1, 12338 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x20>
   12324:	7a0b      	ldrb	r3, [r1, #8]
   12326:	4293      	cmp	r3, r2
   12328:	d905      	bls.n	12336 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
   1232a:	6849      	ldr	r1, [r1, #4]
   1232c:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
   12330:	2900      	cmp	r1, #0
   12332:	d000      	beq.n	12336 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
   12334:	1d08      	adds	r0, r1, #4
   12336:	bd10      	pop	{r4, pc}
   12338:	21ec      	movs	r1, #236	; 0xec
   1233a:	2018      	movs	r0, #24
   1233c:	f7ff fb20 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   12340:	200000c8 	.word	0x200000c8

00012344 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>:
   12344:	490a      	ldr	r1, [pc, #40]	; (12370 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x2c>)
   12346:	b510      	push	{r4, lr}
   12348:	4602      	mov	r2, r0
   1234a:	6809      	ldr	r1, [r1, #0]
   1234c:	2000      	movs	r0, #0
   1234e:	b159      	cbz	r1, 12368 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x24>
   12350:	7a0b      	ldrb	r3, [r1, #8]
   12352:	4293      	cmp	r3, r2
   12354:	d907      	bls.n	12366 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
   12356:	6849      	ldr	r1, [r1, #4]
   12358:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
   1235c:	2900      	cmp	r1, #0
   1235e:	d002      	beq.n	12366 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
   12360:	f831 0b04 	ldrh.w	r0, [r1], #4
   12364:	4408      	add	r0, r1
   12366:	bd10      	pop	{r4, pc}
   12368:	21fa      	movs	r1, #250	; 0xfa
   1236a:	2018      	movs	r0, #24
   1236c:	f7ff fb08 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   12370:	200000c8 	.word	0x200000c8
   12374:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12378:	4e1c      	ldr	r6, [pc, #112]	; (123ec <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0xa8>)
   1237a:	6845      	ldr	r5, [r0, #4]
   1237c:	4604      	mov	r4, r0
   1237e:	2200      	movs	r2, #0
   12380:	b1a1      	cbz	r1, 123ac <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x68>
   12382:	2001      	movs	r0, #1
   12384:	7060      	strb	r0, [r4, #1]
   12386:	8870      	ldrh	r0, [r6, #2]
   12388:	0883      	lsrs	r3, r0, #2
   1238a:	2000      	movs	r0, #0
   1238c:	eb04 0140 	add.w	r1, r4, r0, lsl #1
   12390:	eb04 0680 	add.w	r6, r4, r0, lsl #2
   12394:	830a      	strh	r2, [r1, #24]
   12396:	840b      	strh	r3, [r1, #32]
   12398:	fb00 5103 	mla	r1, r0, r3, r5
   1239c:	6071      	str	r1, [r6, #4]
   1239e:	1821      	adds	r1, r4, r0
   123a0:	1c40      	adds	r0, r0, #1
   123a2:	750a      	strb	r2, [r1, #20]
   123a4:	2804      	cmp	r0, #4
   123a6:	d3f1      	bcc.n	1238c <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x48>
   123a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   123ac:	7062      	strb	r2, [r4, #1]
   123ae:	2000      	movs	r0, #0
   123b0:	eb04 0140 	add.w	r1, r4, r0, lsl #1
   123b4:	830a      	strh	r2, [r1, #24]
   123b6:	840a      	strh	r2, [r1, #32]
   123b8:	eb04 0180 	add.w	r1, r4, r0, lsl #2
   123bc:	604a      	str	r2, [r1, #4]
   123be:	1821      	adds	r1, r4, r0
   123c0:	1c40      	adds	r0, r0, #1
   123c2:	750a      	strb	r2, [r1, #20]
   123c4:	2804      	cmp	r0, #4
   123c6:	d3f3      	bcc.n	123b0 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x6c>
   123c8:	8870      	ldrh	r0, [r6, #2]
   123ca:	f00d fc86 	bl	1fcda <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x130>
   123ce:	4607      	mov	r7, r0
   123d0:	8870      	ldrh	r0, [r6, #2]
   123d2:	f00d fc89 	bl	1fce8 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x13e>
   123d6:	6065      	str	r5, [r4, #4]
   123d8:	8420      	strh	r0, [r4, #32]
   123da:	1829      	adds	r1, r5, r0
   123dc:	60a1      	str	r1, [r4, #8]
   123de:	8467      	strh	r7, [r4, #34]	; 0x22
   123e0:	60e5      	str	r5, [r4, #12]
   123e2:	84a0      	strh	r0, [r4, #36]	; 0x24
   123e4:	6121      	str	r1, [r4, #16]
   123e6:	84e7      	strh	r7, [r4, #38]	; 0x26
   123e8:	e7de      	b.n	123a8 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x64>
   123ea:	0000      	.short	0x0000
   123ec:	200000cc 	.word	0x200000cc

000123f0 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ>:
   123f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   123f4:	b168      	cbz	r0, 12412 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x22>
   123f6:	2600      	movs	r6, #0
   123f8:	4411      	add	r1, r2
   123fa:	f8df 809c 	ldr.w	r8, [pc, #156]	; 12498 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0xa8>
   123fe:	b2cf      	uxtb	r7, r1
   12400:	2400      	movs	r4, #0
   12402:	f888 7000 	strb.w	r7, [r8]
   12406:	0781      	lsls	r1, r0, #30
   12408:	d005      	beq.n	12416 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x26>
   1240a:	214e      	movs	r1, #78	; 0x4e
   1240c:	2009      	movs	r0, #9
   1240e:	f7ff fab7 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   12412:	2601      	movs	r6, #1
   12414:	e7f0      	b.n	123f8 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x8>
   12416:	2b1f      	cmp	r3, #31
   12418:	d804      	bhi.n	12424 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x34>
   1241a:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1241e:	ea01 0583 	and.w	r5, r1, r3, lsl #2
   12422:	e009      	b.n	12438 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x48>
   12424:	0059      	lsls	r1, r3, #1
   12426:	2bff      	cmp	r3, #255	; 0xff
   12428:	d90c      	bls.n	12444 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x54>
   1242a:	f103 02ff 	add.w	r2, r3, #255	; 0xff
   1242e:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
   12432:	d200      	bcs.n	12436 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x46>
   12434:	4611      	mov	r1, r2
   12436:	b28d      	uxth	r5, r1
   12438:	f64f 71fc 	movw	r1, #65532	; 0xfffc
   1243c:	1ced      	adds	r5, r5, #3
   1243e:	400d      	ands	r5, r1
   12440:	b136      	cbz	r6, 12450 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x60>
   12442:	e009      	b.n	12458 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x68>
   12444:	227c      	movs	r2, #124	; 0x7c
   12446:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
   1244a:	d3f4      	bcc.n	12436 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x46>
   1244c:	217c      	movs	r1, #124	; 0x7c
   1244e:	e7f2      	b.n	12436 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x46>
   12450:	f8c8 0004 	str.w	r0, [r8, #4]
   12454:	f8a8 5002 	strh.w	r5, [r8, #2]
   12458:	eb07 0187 	add.w	r1, r7, r7, lsl #2
   1245c:	eb04 02c1 	add.w	r2, r4, r1, lsl #3
   12460:	2100      	movs	r1, #0
   12462:	f04f 0901 	mov.w	r9, #1
   12466:	e00f      	b.n	12488 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x98>
   12468:	b95e      	cbnz	r6, 12482 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x92>
   1246a:	f8d8 4004 	ldr.w	r4, [r8, #4]
   1246e:	eb01 0381 	add.w	r3, r1, r1, lsl #2
   12472:	eb00 0c02 	add.w	ip, r0, r2
   12476:	f804 9033 	strb.w	r9, [r4, r3, lsl #3]
   1247a:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
   1247e:	f8c3 c004 	str.w	ip, [r3, #4]
   12482:	1c49      	adds	r1, r1, #1
   12484:	442a      	add	r2, r5
   12486:	b2c9      	uxtb	r1, r1
   12488:	42b9      	cmp	r1, r7
   1248a:	d3ed      	bcc.n	12468 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x78>
   1248c:	1dd2      	adds	r2, r2, #7
   1248e:	f022 0007 	bic.w	r0, r2, #7
   12492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   12496:	0000      	.short	0x0000
   12498:	200000cc 	.word	0x200000cc

0001249c <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ>:
   1249c:	b570      	push	{r4, r5, r6, lr}
   1249e:	4811      	ldr	r0, [pc, #68]	; (124e4 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x48>)
   124a0:	2400      	movs	r4, #0
   124a2:	4621      	mov	r1, r4
   124a4:	7802      	ldrb	r2, [r0, #0]
   124a6:	e00c      	b.n	124c2 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x26>
   124a8:	6845      	ldr	r5, [r0, #4]
   124aa:	eb01 0381 	add.w	r3, r1, r1, lsl #2
   124ae:	f815 3033 	ldrb.w	r3, [r5, r3, lsl #3]
   124b2:	b123      	cbz	r3, 124be <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x22>
   124b4:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   124b8:	eb05 04c1 	add.w	r4, r5, r1, lsl #3
   124bc:	e003      	b.n	124c6 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x2a>
   124be:	1c49      	adds	r1, r1, #1
   124c0:	b2c9      	uxtb	r1, r1
   124c2:	4291      	cmp	r1, r2
   124c4:	d3f0      	bcc.n	124a8 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0xc>
   124c6:	b144      	cbz	r4, 124da <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x3e>
   124c8:	2500      	movs	r5, #0
   124ca:	70a5      	strb	r5, [r4, #2]
   124cc:	2101      	movs	r1, #1
   124ce:	4620      	mov	r0, r4
   124d0:	f7ff ff50 	bl	12374 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x30>
   124d4:	7025      	strb	r5, [r4, #0]
   124d6:	4620      	mov	r0, r4
   124d8:	bd70      	pop	{r4, r5, r6, pc}
   124da:	21a9      	movs	r1, #169	; 0xa9
   124dc:	2009      	movs	r0, #9
   124de:	f7ff fa4f 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   124e2:	0000      	.short	0x0000
   124e4:	200000cc 	.word	0x200000cc

000124e8 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ>:
   124e8:	4804      	ldr	r0, [pc, #16]	; (124fc <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x14>)
   124ea:	b510      	push	{r4, lr}
   124ec:	8840      	ldrh	r0, [r0, #2]
   124ee:	0884      	lsrs	r4, r0, #2
   124f0:	f00d fbfa 	bl	1fce8 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x13e>
   124f4:	4284      	cmp	r4, r0
   124f6:	d300      	bcc.n	124fa <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x12>
   124f8:	4620      	mov	r0, r4
   124fa:	bd10      	pop	{r4, pc}
   124fc:	200000cc 	.word	0x200000cc

00012500 <sym_JKTUFSDBLEJK3JCIOVWBB4AVHFNXLCVLU47RLVA>:
   12500:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   12504:	460c      	mov	r4, r1
   12506:	4607      	mov	r7, r0
   12508:	4616      	mov	r6, r2
   1250a:	212e      	movs	r1, #46	; 0x2e
   1250c:	4610      	mov	r0, r2
   1250e:	460d      	mov	r5, r1
   12510:	4622      	mov	r2, r4
   12512:	f00d fa69 	bl	1f9e8 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
   12516:	4680      	mov	r8, r0
   12518:	b157      	cbz	r7, 12530 <sym_JKTUFSDBLEJK3JCIOVWBB4AVHFNXLCVLU47RLVA+0x30>
   1251a:	4638      	mov	r0, r7
   1251c:	4641      	mov	r1, r8
   1251e:	4632      	mov	r2, r6
   12520:	462b      	mov	r3, r5
   12522:	9400      	str	r4, [sp, #0]
   12524:	f00d fa17 	bl	1f956 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
   12528:	4803      	ldr	r0, [pc, #12]	; (12538 <sym_JKTUFSDBLEJK3JCIOVWBB4AVHFNXLCVLU47RLVA+0x38>)
   1252a:	6047      	str	r7, [r0, #4]
   1252c:	7004      	strb	r4, [r0, #0]
   1252e:	7046      	strb	r6, [r0, #1]
   12530:	4640      	mov	r0, r8
   12532:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   12536:	0000      	.short	0x0000
   12538:	200000d4 	.word	0x200000d4

0001253c <sym_4BWYV6G4KVCKUYOBWE3RR7UUW2WCKQUGSW3GHWI>:
   1253c:	4b03      	ldr	r3, [pc, #12]	; (1254c <sym_4BWYV6G4KVCKUYOBWE3RR7UUW2WCKQUGSW3GHWI+0x10>)
   1253e:	2100      	movs	r1, #0
   12540:	7818      	ldrb	r0, [r3, #0]
   12542:	ebc0 02c0 	rsb	r2, r0, r0, lsl #3
   12546:	6858      	ldr	r0, [r3, #4]
   12548:	f00c ba03 	b.w	1e952 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
   1254c:	200000dc 	.word	0x200000dc

00012550 <sym_V2ER27M3Z2LLE4VYOQCDQNPVPBUAHM6GAWBXY4Y>:
   12550:	b510      	push	{r4, lr}
   12552:	460c      	mov	r4, r1
   12554:	b110      	cbz	r0, 1255c <sym_V2ER27M3Z2LLE4VYOQCDQNPVPBUAHM6GAWBXY4Y+0xc>
   12556:	2200      	movs	r2, #0
   12558:	b112      	cbz	r2, 12560 <sym_V2ER27M3Z2LLE4VYOQCDQNPVPBUAHM6GAWBXY4Y+0x10>
   1255a:	e00c      	b.n	12576 <sym_V2ER27M3Z2LLE4VYOQCDQNPVPBUAHM6GAWBXY4Y+0x26>
   1255c:	2201      	movs	r2, #1
   1255e:	e7fb      	b.n	12558 <sym_V2ER27M3Z2LLE4VYOQCDQNPVPBUAHM6GAWBXY4Y+0x8>
   12560:	0781      	lsls	r1, r0, #30
   12562:	d003      	beq.n	1256c <sym_V2ER27M3Z2LLE4VYOQCDQNPVPBUAHM6GAWBXY4Y+0x1c>
   12564:	2120      	movs	r1, #32
   12566:	2041      	movs	r0, #65	; 0x41
   12568:	f7ff fa0a 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1256c:	4903      	ldr	r1, [pc, #12]	; (1257c <sym_V2ER27M3Z2LLE4VYOQCDQNPVPBUAHM6GAWBXY4Y+0x2c>)
   1256e:	6048      	str	r0, [r1, #4]
   12570:	700c      	strb	r4, [r1, #0]
   12572:	f7ff ffe3 	bl	1253c <sym_4BWYV6G4KVCKUYOBWE3RR7UUW2WCKQUGSW3GHWI>
   12576:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
   1257a:	bd10      	pop	{r4, pc}
   1257c:	200000dc 	.word	0x200000dc
   12580:	b510      	push	{r4, lr}
   12582:	460c      	mov	r4, r1
   12584:	2105      	movs	r1, #5
   12586:	f7ff fc1f 	bl	11dc8 <sym_U5M5ICZ7T3JIJRQNTPYBHZSWROAVS7HIKZONU4A>
   1258a:	b11c      	cbz	r4, 12594 <sym_V2ER27M3Z2LLE4VYOQCDQNPVPBUAHM6GAWBXY4Y+0x44>
   1258c:	2135      	movs	r1, #53	; 0x35
   1258e:	2019      	movs	r0, #25
   12590:	f7ff f9f6 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   12594:	4904      	ldr	r1, [pc, #16]	; (125a8 <sym_V2ER27M3Z2LLE4VYOQCDQNPVPBUAHM6GAWBXY4Y+0x58>)
   12596:	780a      	ldrb	r2, [r1, #0]
   12598:	884b      	ldrh	r3, [r1, #2]
   1259a:	435a      	muls	r2, r3
   1259c:	888b      	ldrh	r3, [r1, #4]
   1259e:	6889      	ldr	r1, [r1, #8]
   125a0:	fb00 2003 	mla	r0, r0, r3, r2
   125a4:	4408      	add	r0, r1
   125a6:	bd10      	pop	{r4, pc}
   125a8:	200000e4 	.word	0x200000e4
   125ac:	b510      	push	{r4, lr}
   125ae:	460c      	mov	r4, r1
   125b0:	2105      	movs	r1, #5
   125b2:	f7ff fc09 	bl	11dc8 <sym_U5M5ICZ7T3JIJRQNTPYBHZSWROAVS7HIKZONU4A>
   125b6:	b11c      	cbz	r4, 125c0 <sym_V2ER27M3Z2LLE4VYOQCDQNPVPBUAHM6GAWBXY4Y+0x70>
   125b8:	2125      	movs	r1, #37	; 0x25
   125ba:	2019      	movs	r0, #25
   125bc:	f7ff f9e0 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   125c0:	4902      	ldr	r1, [pc, #8]	; (125cc <sym_V2ER27M3Z2LLE4VYOQCDQNPVPBUAHM6GAWBXY4Y+0x7c>)
   125c2:	688a      	ldr	r2, [r1, #8]
   125c4:	8849      	ldrh	r1, [r1, #2]
   125c6:	fb00 2001 	mla	r0, r0, r1, r2
   125ca:	bd10      	pop	{r4, pc}
   125cc:	200000e4 	.word	0x200000e4

000125d0 <sym_DOCCP4AFKLIVAXFLTAV6GACHWGPJHRTYWD3IDTI>:
   125d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   125d4:	4688      	mov	r8, r1
   125d6:	4604      	mov	r4, r0
   125d8:	461e      	mov	r6, r3
   125da:	4691      	mov	r9, r2
   125dc:	20ff      	movs	r0, #255	; 0xff
   125de:	2103      	movs	r1, #3
   125e0:	f00d fa02 	bl	1f9e8 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
   125e4:	1cc0      	adds	r0, r0, #3
   125e6:	f64f 7afc 	movw	sl, #65532	; 0xfffc
   125ea:	ea00 070a 	and.w	r7, r0, sl
   125ee:	2500      	movs	r5, #0
   125f0:	b13e      	cbz	r6, 12602 <sym_DOCCP4AFKLIVAXFLTAV6GACHWGPJHRTYWD3IDTI+0x32>
   125f2:	20ff      	movs	r0, #255	; 0xff
   125f4:	210d      	movs	r1, #13
   125f6:	4632      	mov	r2, r6
   125f8:	f00d f9f6 	bl	1f9e8 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
   125fc:	1cc0      	adds	r0, r0, #3
   125fe:	ea00 050a 	and.w	r5, r0, sl
   12602:	b33c      	cbz	r4, 12654 <sym_DOCCP4AFKLIVAXFLTAV6GACHWGPJHRTYWD3IDTI+0x84>
   12604:	07a0      	lsls	r0, r4, #30
   12606:	d003      	beq.n	12610 <sym_DOCCP4AFKLIVAXFLTAV6GACHWGPJHRTYWD3IDTI+0x40>
   12608:	214e      	movs	r1, #78	; 0x4e
   1260a:	2019      	movs	r0, #25
   1260c:	f7ff f9b8 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   12610:	4813      	ldr	r0, [pc, #76]	; (12660 <sym_DOCCP4AFKLIVAXFLTAV6GACHWGPJHRTYWD3IDTI+0x90>)
   12612:	6084      	str	r4, [r0, #8]
   12614:	f880 8000 	strb.w	r8, [r0]
   12618:	8047      	strh	r7, [r0, #2]
   1261a:	8085      	strh	r5, [r0, #4]
   1261c:	2400      	movs	r4, #0
   1261e:	e017      	b.n	12650 <sym_DOCCP4AFKLIVAXFLTAV6GACHWGPJHRTYWD3IDTI+0x80>
   12620:	2100      	movs	r1, #0
   12622:	4620      	mov	r0, r4
   12624:	f7ff ffc2 	bl	125ac <sym_V2ER27M3Z2LLE4VYOQCDQNPVPBUAHM6GAWBXY4Y+0x5c>
   12628:	4639      	mov	r1, r7
   1262a:	22ff      	movs	r2, #255	; 0xff
   1262c:	2303      	movs	r3, #3
   1262e:	f8cd 9000 	str.w	r9, [sp]
   12632:	f00d f990 	bl	1f956 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
   12636:	b14e      	cbz	r6, 1264c <sym_DOCCP4AFKLIVAXFLTAV6GACHWGPJHRTYWD3IDTI+0x7c>
   12638:	2100      	movs	r1, #0
   1263a:	4620      	mov	r0, r4
   1263c:	f7ff ffa0 	bl	12580 <sym_V2ER27M3Z2LLE4VYOQCDQNPVPBUAHM6GAWBXY4Y+0x30>
   12640:	4629      	mov	r1, r5
   12642:	22ff      	movs	r2, #255	; 0xff
   12644:	230d      	movs	r3, #13
   12646:	9600      	str	r6, [sp, #0]
   12648:	f00d f985 	bl	1f956 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
   1264c:	1c64      	adds	r4, r4, #1
   1264e:	b2a4      	uxth	r4, r4
   12650:	4544      	cmp	r4, r8
   12652:	d3e5      	bcc.n	12620 <sym_DOCCP4AFKLIVAXFLTAV6GACHWGPJHRTYWD3IDTI+0x50>
   12654:	1978      	adds	r0, r7, r5
   12656:	fb00 f008 	mul.w	r0, r0, r8
   1265a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1265e:	0000      	.short	0x0000
   12660:	200000e4 	.word	0x200000e4
   12664:	b530      	push	{r4, r5, lr}
   12666:	490d      	ldr	r1, [pc, #52]	; (1269c <sym_DOCCP4AFKLIVAXFLTAV6GACHWGPJHRTYWD3IDTI+0xcc>)
   12668:	2001      	movs	r0, #1
   1266a:	6048      	str	r0, [r1, #4]
   1266c:	1e82      	subs	r2, r0, #2
   1266e:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   12672:	490b      	ldr	r1, [pc, #44]	; (126a0 <sym_DOCCP4AFKLIVAXFLTAV6GACHWGPJHRTYWD3IDTI+0xd0>)
   12674:	6088      	str	r0, [r1, #8]
   12676:	2300      	movs	r3, #0
   12678:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
   1267c:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   12680:	4c08      	ldr	r4, [pc, #32]	; (126a4 <sym_DOCCP4AFKLIVAXFLTAV6GACHWGPJHRTYWD3IDTI+0xd4>)
   12682:	6023      	str	r3, [r4, #0]
   12684:	1d25      	adds	r5, r4, #4
   12686:	6028      	str	r0, [r5, #0]
   12688:	6088      	str	r0, [r1, #8]
   1268a:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   1268e:	6023      	str	r3, [r4, #0]
   12690:	6028      	str	r0, [r5, #0]
   12692:	4906      	ldr	r1, [pc, #24]	; (126ac <sym_DOCCP4AFKLIVAXFLTAV6GACHWGPJHRTYWD3IDTI+0xdc>)
   12694:	4804      	ldr	r0, [pc, #16]	; (126a8 <sym_DOCCP4AFKLIVAXFLTAV6GACHWGPJHRTYWD3IDTI+0xd8>)
   12696:	6008      	str	r0, [r1, #0]
   12698:	bd30      	pop	{r4, r5, pc}
   1269a:	0000      	.short	0x0000
   1269c:	4000e000 	.word	0x4000e000
   126a0:	4000f000 	.word	0x4000f000
   126a4:	4000f500 	.word	0x4000f500
   126a8:	3ff60000 	.word	0x3ff60000
   126ac:	4001f508 	.word	0x4001f508

000126b0 <sym_T2WGCKXTT3AQKC37WUCKG6LFMKIXXWS3R6ESLQQ>:
   126b0:	b510      	push	{r4, lr}
   126b2:	f7ff ffd7 	bl	12664 <sym_DOCCP4AFKLIVAXFLTAV6GACHWGPJHRTYWD3IDTI+0x94>
   126b6:	f00d fbec 	bl	1fe92 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x42>
   126ba:	4903      	ldr	r1, [pc, #12]	; (126c8 <sym_T2WGCKXTT3AQKC37WUCKG6LFMKIXXWS3R6ESLQQ+0x18>)
   126bc:	4801      	ldr	r0, [pc, #4]	; (126c4 <sym_T2WGCKXTT3AQKC37WUCKG6LFMKIXXWS3R6ESLQQ+0x14>)
   126be:	6008      	str	r0, [r1, #0]
   126c0:	bd10      	pop	{r4, pc}
   126c2:	0000      	.short	0x0000
   126c4:	3ff60000 	.word	0x3ff60000
   126c8:	4001f508 	.word	0x4001f508

000126cc <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>:
   126cc:	b510      	push	{r4, lr}
   126ce:	4604      	mov	r4, r0
   126d0:	f7ff ffc8 	bl	12664 <sym_DOCCP4AFKLIVAXFLTAV6GACHWGPJHRTYWD3IDTI+0x94>
   126d4:	f00d fbdd 	bl	1fe92 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x42>
   126d8:	f000 f888 	bl	127ec <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>
   126dc:	4905      	ldr	r1, [pc, #20]	; (126f4 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x28>)
   126de:	4804      	ldr	r0, [pc, #16]	; (126f0 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x24>)
   126e0:	6008      	str	r0, [r1, #0]
   126e2:	4620      	mov	r0, r4
   126e4:	f000 f8b8 	bl	12858 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>
   126e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   126ec:	f000 b8dc 	b.w	128a8 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>
   126f0:	3ff60000 	.word	0x3ff60000
   126f4:	4001f508 	.word	0x4001f508
   126f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   126fc:	4682      	mov	sl, r0
   126fe:	4838      	ldr	r0, [pc, #224]	; (127e0 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x114>)
   12700:	f00c f816 	bl	1e730 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
   12704:	f8df b0d8 	ldr.w	fp, [pc, #216]	; 127e0 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x114>
   12708:	b128      	cbz	r0, 12716 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x4a>
   1270a:	2601      	movs	r6, #1
   1270c:	f10b 0001 	add.w	r0, fp, #1
   12710:	21ff      	movs	r1, #255	; 0xff
   12712:	7001      	strb	r1, [r0, #0]
   12714:	e000      	b.n	12718 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x4c>
   12716:	2600      	movs	r6, #0
   12718:	f44f 7580 	mov.w	r5, #256	; 0x100
   1271c:	4c31      	ldr	r4, [pc, #196]	; (127e4 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x118>)
   1271e:	f04f 0800 	mov.w	r8, #0
   12722:	1d2f      	adds	r7, r5, #4
   12724:	2101      	movs	r1, #1
   12726:	6061      	str	r1, [r4, #4]
   12728:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
   1272c:	f8c4 8104 	str.w	r8, [r4, #260]	; 0x104
   12730:	f8c4 a504 	str.w	sl, [r4, #1284]	; 0x504
   12734:	6021      	str	r1, [r4, #0]
   12736:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 127e8 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x11c>
   1273a:	e01c      	b.n	12776 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xaa>
   1273c:	f8d9 0000 	ldr.w	r0, [r9]
   12740:	06c0      	lsls	r0, r0, #27
   12742:	d518      	bpl.n	12776 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xaa>
   12744:	200e      	movs	r0, #14
   12746:	f00d fbb3 	bl	1feb0 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x60>
   1274a:	f3ef 8010 	mrs	r0, PRIMASK
   1274e:	9000      	str	r0, [sp, #0]
   12750:	b672      	cpsid	i
   12752:	2103      	movs	r1, #3
   12754:	4620      	mov	r0, r4
   12756:	f8c4 1304 	str.w	r1, [r4, #772]	; 0x304
   1275a:	4629      	mov	r1, r5
   1275c:	f00d fbb5 	bl	1feca <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
   12760:	b930      	cbnz	r0, 12770 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xa4>
   12762:	4639      	mov	r1, r7
   12764:	4620      	mov	r0, r4
   12766:	f00d fbb0 	bl	1feca <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
   1276a:	b908      	cbnz	r0, 12770 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xa4>
   1276c:	f7fe fe0a 	bl	11384 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
   12770:	9800      	ldr	r0, [sp, #0]
   12772:	b900      	cbnz	r0, 12776 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xaa>
   12774:	b662      	cpsie	i
   12776:	4629      	mov	r1, r5
   12778:	4620      	mov	r0, r4
   1277a:	f00d fba6 	bl	1feca <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
   1277e:	b928      	cbnz	r0, 1278c <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xc0>
   12780:	4639      	mov	r1, r7
   12782:	4620      	mov	r0, r4
   12784:	f00d fba1 	bl	1feca <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
   12788:	2800      	cmp	r0, #0
   1278a:	d0d7      	beq.n	1273c <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x70>
   1278c:	4639      	mov	r1, r7
   1278e:	4620      	mov	r0, r4
   12790:	f00d fb9b 	bl	1feca <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
   12794:	2800      	cmp	r0, #0
   12796:	d1c5      	bne.n	12724 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x58>
   12798:	bb06      	cbnz	r6, 127dc <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x110>
   1279a:	f89b 1001 	ldrb.w	r1, [fp, #1]
   1279e:	f88d 1000 	strb.w	r1, [sp]
   127a2:	9900      	ldr	r1, [sp, #0]
   127a4:	9100      	str	r1, [sp, #0]
   127a6:	f89d 1000 	ldrb.w	r1, [sp]
   127aa:	b109      	cbz	r1, 127b0 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xe4>
   127ac:	2501      	movs	r5, #1
   127ae:	e000      	b.n	127b2 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xe6>
   127b0:	2500      	movs	r5, #0
   127b2:	f10b 0001 	add.w	r0, fp, #1
   127b6:	f880 8000 	strb.w	r8, [r0]
   127ba:	2003      	movs	r0, #3
   127bc:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
   127c0:	f8c4 8104 	str.w	r8, [r4, #260]	; 0x104
   127c4:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
   127c8:	200e      	movs	r0, #14
   127ca:	f00d fb71 	bl	1feb0 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x60>
   127ce:	4804      	ldr	r0, [pc, #16]	; (127e0 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x114>)
   127d0:	f00b ffc5 	bl	1e75e <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
   127d4:	b115      	cbz	r5, 127dc <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x110>
   127d6:	2011      	movs	r0, #17
   127d8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   127dc:	2000      	movs	r0, #0
   127de:	e7fb      	b.n	127d8 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x10c>
   127e0:	200003d6 	.word	0x200003d6
   127e4:	4000e000 	.word	0x4000e000
   127e8:	e000ed10 	.word	0xe000ed10

000127ec <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>:
   127ec:	b510      	push	{r4, lr}
   127ee:	4806      	ldr	r0, [pc, #24]	; (12808 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x1c>)
   127f0:	f00b ffb1 	bl	1e756 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
   127f4:	b118      	cbz	r0, 127fe <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x12>
   127f6:	2127      	movs	r1, #39	; 0x27
   127f8:	201d      	movs	r0, #29
   127fa:	f7ff f8c1 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   127fe:	4802      	ldr	r0, [pc, #8]	; (12808 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x1c>)
   12800:	2100      	movs	r1, #0
   12802:	7041      	strb	r1, [r0, #1]
   12804:	bd10      	pop	{r4, pc}
   12806:	0000      	.short	0x0000
   12808:	200003d6 	.word	0x200003d6

0001280c <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>:
   1280c:	b570      	push	{r4, r5, r6, lr}
   1280e:	4911      	ldr	r1, [pc, #68]	; (12854 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x48>)
   12810:	680a      	ldr	r2, [r1, #0]
   12812:	b1ea      	cbz	r2, 12850 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x44>
   12814:	2300      	movs	r3, #0
   12816:	461d      	mov	r5, r3
   12818:	2401      	movs	r4, #1
   1281a:	684a      	ldr	r2, [r1, #4]
   1281c:	1c52      	adds	r2, r2, #1
   1281e:	604a      	str	r2, [r1, #4]
   12820:	2a0c      	cmp	r2, #12
   12822:	d300      	bcc.n	12826 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x1a>
   12824:	604d      	str	r5, [r1, #4]
   12826:	790e      	ldrb	r6, [r1, #4]
   12828:	fa04 f206 	lsl.w	r2, r4, r6
   1282c:	680e      	ldr	r6, [r1, #0]
   1282e:	4216      	tst	r6, r2
   12830:	d00b      	beq.n	1284a <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x3e>
   12832:	f3ef 8310 	mrs	r3, PRIMASK
   12836:	b672      	cpsid	i
   12838:	680c      	ldr	r4, [r1, #0]
   1283a:	4394      	bics	r4, r2
   1283c:	600c      	str	r4, [r1, #0]
   1283e:	b903      	cbnz	r3, 12842 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x36>
   12840:	b662      	cpsie	i
   12842:	6849      	ldr	r1, [r1, #4]
   12844:	6001      	str	r1, [r0, #0]
   12846:	2000      	movs	r0, #0
   12848:	bd70      	pop	{r4, r5, r6, pc}
   1284a:	1c5b      	adds	r3, r3, #1
   1284c:	2b0c      	cmp	r3, #12
   1284e:	d3e4      	bcc.n	1281a <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0xe>
   12850:	2005      	movs	r0, #5
   12852:	bd70      	pop	{r4, r5, r6, pc}
   12854:	200000f0 	.word	0x200000f0

00012858 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>:
   12858:	4802      	ldr	r0, [pc, #8]	; (12864 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI+0xc>)
   1285a:	2100      	movs	r1, #0
   1285c:	6001      	str	r1, [r0, #0]
   1285e:	6041      	str	r1, [r0, #4]
   12860:	4770      	bx	lr
   12862:	0000      	.short	0x0000
   12864:	200000f0 	.word	0x200000f0

00012868 <sym_CXUREOIXUAF7MRG6VYXVKEGUS4V3G7OLURYVMAI>:
   12868:	b510      	push	{r4, lr}
   1286a:	4c04      	ldr	r4, [pc, #16]	; (1287c <sym_CXUREOIXUAF7MRG6VYXVKEGUS4V3G7OLURYVMAI+0x14>)
   1286c:	7820      	ldrb	r0, [r4, #0]
   1286e:	28ff      	cmp	r0, #255	; 0xff
   12870:	d003      	beq.n	1287a <sym_CXUREOIXUAF7MRG6VYXVKEGUS4V3G7OLURYVMAI+0x12>
   12872:	f7fe fd3d 	bl	112f0 <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY>
   12876:	20ff      	movs	r0, #255	; 0xff
   12878:	7020      	strb	r0, [r4, #0]
   1287a:	bd10      	pop	{r4, pc}
   1287c:	20000000 	.word	0x20000000

00012880 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>:
   12880:	b510      	push	{r4, lr}
   12882:	4c08      	ldr	r4, [pc, #32]	; (128a4 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x24>)
   12884:	7861      	ldrb	r1, [r4, #1]
   12886:	b109      	cbz	r1, 1288c <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0xc>
   12888:	200f      	movs	r0, #15
   1288a:	bd10      	pop	{r4, pc}
   1288c:	f7fe fcf6 	bl	1127c <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
   12890:	7020      	strb	r0, [r4, #0]
   12892:	28ff      	cmp	r0, #255	; 0xff
   12894:	d001      	beq.n	1289a <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x1a>
   12896:	2000      	movs	r0, #0
   12898:	bd10      	pop	{r4, pc}
   1289a:	2178      	movs	r1, #120	; 0x78
   1289c:	201f      	movs	r0, #31
   1289e:	f7ff f86f 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   128a2:	0000      	.short	0x0000
   128a4:	20000000 	.word	0x20000000

000128a8 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>:
   128a8:	4901      	ldr	r1, [pc, #4]	; (128b0 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI+0x8>)
   128aa:	2000      	movs	r0, #0
   128ac:	7048      	strb	r0, [r1, #1]
   128ae:	4770      	bx	lr
   128b0:	20000000 	.word	0x20000000

000128b4 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>:
   128b4:	4905      	ldr	r1, [pc, #20]	; (128cc <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI+0x18>)
   128b6:	8e8a      	ldrh	r2, [r1, #52]	; 0x34
   128b8:	4282      	cmp	r2, r0
   128ba:	bf18      	it	ne
   128bc:	4770      	bxne	lr
   128be:	2000      	movs	r0, #0
   128c0:	f881 0032 	strb.w	r0, [r1, #50]	; 0x32
   128c4:	f64f 70ff 	movw	r0, #65535	; 0xffff
   128c8:	8688      	strh	r0, [r1, #52]	; 0x34
   128ca:	4770      	bx	lr
   128cc:	20001820 	.word	0x20001820

000128d0 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY>:
   128d0:	4806      	ldr	r0, [pc, #24]	; (128ec <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x1c>)
   128d2:	4a07      	ldr	r2, [pc, #28]	; (128f0 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x20>)
   128d4:	8e81      	ldrh	r1, [r0, #52]	; 0x34
   128d6:	8852      	ldrh	r2, [r2, #2]
   128d8:	4291      	cmp	r1, r2
   128da:	d105      	bne.n	128e8 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x18>
   128dc:	f890 0032 	ldrb.w	r0, [r0, #50]	; 0x32
   128e0:	2800      	cmp	r0, #0
   128e2:	bf1c      	itt	ne
   128e4:	2000      	movne	r0, #0
   128e6:	4770      	bxne	lr
   128e8:	2001      	movs	r0, #1
   128ea:	4770      	bx	lr
   128ec:	20001820 	.word	0x20001820
   128f0:	200003c0 	.word	0x200003c0

000128f4 <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I>:
   128f4:	4901      	ldr	r1, [pc, #4]	; (128fc <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I+0x8>)
   128f6:	8048      	strh	r0, [r1, #2]
   128f8:	4770      	bx	lr
   128fa:	0000      	.short	0x0000
   128fc:	200003c0 	.word	0x200003c0

00012900 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>:
   12900:	4808      	ldr	r0, [pc, #32]	; (12924 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x24>)
   12902:	4a09      	ldr	r2, [pc, #36]	; (12928 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x28>)
   12904:	8e81      	ldrh	r1, [r0, #52]	; 0x34
   12906:	8852      	ldrh	r2, [r2, #2]
   12908:	4291      	cmp	r1, r2
   1290a:	d109      	bne.n	12920 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x20>
   1290c:	f64f 71ff 	movw	r1, #65535	; 0xffff
   12910:	8681      	strh	r1, [r0, #52]	; 0x34
   12912:	f810 1f32 	ldrb.w	r1, [r0, #50]!
   12916:	b119      	cbz	r1, 12920 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x20>
   12918:	2100      	movs	r1, #0
   1291a:	7001      	strb	r1, [r0, #0]
   1291c:	2001      	movs	r0, #1
   1291e:	4770      	bx	lr
   12920:	2000      	movs	r0, #0
   12922:	4770      	bx	lr
   12924:	20001820 	.word	0x20001820
   12928:	200003c0 	.word	0x200003c0

0001292c <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA>:
   1292c:	4907      	ldr	r1, [pc, #28]	; (1294c <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x20>)
   1292e:	f101 0032 	add.w	r0, r1, #50	; 0x32
   12932:	f891 2032 	ldrb.w	r2, [r1, #50]	; 0x32
   12936:	2a01      	cmp	r2, #1
   12938:	bf04      	itt	eq
   1293a:	2000      	moveq	r0, #0
   1293c:	4770      	bxeq	lr
   1293e:	2201      	movs	r2, #1
   12940:	7002      	strb	r2, [r0, #0]
   12942:	4803      	ldr	r0, [pc, #12]	; (12950 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x24>)
   12944:	8800      	ldrh	r0, [r0, #0]
   12946:	8688      	strh	r0, [r1, #52]	; 0x34
   12948:	4610      	mov	r0, r2
   1294a:	4770      	bx	lr
   1294c:	20001820 	.word	0x20001820
   12950:	200003c0 	.word	0x200003c0

00012954 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>:
   12954:	4907      	ldr	r1, [pc, #28]	; (12974 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x20>)
   12956:	4b08      	ldr	r3, [pc, #32]	; (12978 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x24>)
   12958:	8e8a      	ldrh	r2, [r1, #52]	; 0x34
   1295a:	885b      	ldrh	r3, [r3, #2]
   1295c:	429a      	cmp	r2, r3
   1295e:	d106      	bne.n	1296e <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x1a>
   12960:	f891 2032 	ldrb.w	r2, [r1, #50]	; 0x32
   12964:	2a00      	cmp	r2, #0
   12966:	bf1e      	ittt	ne
   12968:	6001      	strne	r1, [r0, #0]
   1296a:	2001      	movne	r0, #1
   1296c:	4770      	bxne	lr
   1296e:	2000      	movs	r0, #0
   12970:	4770      	bx	lr
   12972:	0000      	.short	0x0000
   12974:	20001820 	.word	0x20001820
   12978:	200003c0 	.word	0x200003c0

0001297c <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI>:
   1297c:	4909      	ldr	r1, [pc, #36]	; (129a4 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x28>)
   1297e:	8e8a      	ldrh	r2, [r1, #52]	; 0x34
   12980:	f5a2 437f 	sub.w	r3, r2, #65280	; 0xff00
   12984:	3bff      	subs	r3, #255	; 0xff
   12986:	d003      	beq.n	12990 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x14>
   12988:	2100      	movs	r1, #0
   1298a:	6001      	str	r1, [r0, #0]
   1298c:	4608      	mov	r0, r1
   1298e:	4770      	bx	lr
   12990:	f891 2032 	ldrb.w	r2, [r1, #50]	; 0x32
   12994:	4903      	ldr	r1, [pc, #12]	; (129a4 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x28>)
   12996:	2a01      	cmp	r2, #1
   12998:	bf1a      	itte	ne
   1299a:	6001      	strne	r1, [r0, #0]
   1299c:	2001      	movne	r0, #1
   1299e:	2000      	moveq	r0, #0
   129a0:	4770      	bx	lr
   129a2:	0000      	.short	0x0000
   129a4:	20001820 	.word	0x20001820

000129a8 <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY>:
   129a8:	4901      	ldr	r1, [pc, #4]	; (129b0 <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY+0x8>)
   129aa:	8008      	strh	r0, [r1, #0]
   129ac:	4770      	bx	lr
   129ae:	0000      	.short	0x0000
   129b0:	200003c0 	.word	0x200003c0

000129b4 <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY>:
   129b4:	4905      	ldr	r1, [pc, #20]	; (129cc <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY+0x18>)
   129b6:	2000      	movs	r0, #0
   129b8:	f881 0032 	strb.w	r0, [r1, #50]	; 0x32
   129bc:	f64f 70ff 	movw	r0, #65535	; 0xffff
   129c0:	8688      	strh	r0, [r1, #52]	; 0x34
   129c2:	4903      	ldr	r1, [pc, #12]	; (129d0 <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY+0x1c>)
   129c4:	8008      	strh	r0, [r1, #0]
   129c6:	8048      	strh	r0, [r1, #2]
   129c8:	4770      	bx	lr
   129ca:	0000      	.short	0x0000
   129cc:	20001820 	.word	0x20001820
   129d0:	200003c0 	.word	0x200003c0

000129d4 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>:
   129d4:	4905      	ldr	r1, [pc, #20]	; (129ec <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x18>)
   129d6:	2000      	movs	r0, #0
   129d8:	f881 0032 	strb.w	r0, [r1, #50]	; 0x32
   129dc:	f64f 70ff 	movw	r0, #65535	; 0xffff
   129e0:	8688      	strh	r0, [r1, #52]	; 0x34
   129e2:	4903      	ldr	r1, [pc, #12]	; (129f0 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x1c>)
   129e4:	8008      	strh	r0, [r1, #0]
   129e6:	8048      	strh	r0, [r1, #2]
   129e8:	4770      	bx	lr
   129ea:	0000      	.short	0x0000
   129ec:	20001820 	.word	0x20001820
   129f0:	200003c0 	.word	0x200003c0

000129f4 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>:
   129f4:	4a0a      	ldr	r2, [pc, #40]	; (12a20 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x2c>)
   129f6:	b110      	cbz	r0, 129fe <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0xa>
   129f8:	2801      	cmp	r0, #1
   129fa:	d007      	beq.n	12a0c <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x18>
   129fc:	e00e      	b.n	12a1c <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
   129fe:	7850      	ldrb	r0, [r2, #1]
   12a00:	b160      	cbz	r0, 12a1c <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
   12a02:	f8d2 0002 	ldr.w	r0, [r2, #2]
   12a06:	6008      	str	r0, [r1, #0]
   12a08:	88d0      	ldrh	r0, [r2, #6]
   12a0a:	e004      	b.n	12a16 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x22>
   12a0c:	7810      	ldrb	r0, [r2, #0]
   12a0e:	b128      	cbz	r0, 12a1c <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
   12a10:	6890      	ldr	r0, [r2, #8]
   12a12:	6008      	str	r0, [r1, #0]
   12a14:	8990      	ldrh	r0, [r2, #12]
   12a16:	8088      	strh	r0, [r1, #4]
   12a18:	2001      	movs	r0, #1
   12a1a:	4770      	bx	lr
   12a1c:	2000      	movs	r0, #0
   12a1e:	4770      	bx	lr
   12a20:	200003d8 	.word	0x200003d8

00012a24 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>:
   12a24:	4a09      	ldr	r2, [pc, #36]	; (12a4c <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x28>)
   12a26:	2301      	movs	r3, #1
   12a28:	b140      	cbz	r0, 12a3c <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x18>
   12a2a:	2801      	cmp	r0, #1
   12a2c:	bf18      	it	ne
   12a2e:	4770      	bxne	lr
   12a30:	7013      	strb	r3, [r2, #0]
   12a32:	6808      	ldr	r0, [r1, #0]
   12a34:	6090      	str	r0, [r2, #8]
   12a36:	8888      	ldrh	r0, [r1, #4]
   12a38:	8190      	strh	r0, [r2, #12]
   12a3a:	4770      	bx	lr
   12a3c:	7053      	strb	r3, [r2, #1]
   12a3e:	6808      	ldr	r0, [r1, #0]
   12a40:	f8c2 0002 	str.w	r0, [r2, #2]
   12a44:	8888      	ldrh	r0, [r1, #4]
   12a46:	80d0      	strh	r0, [r2, #6]
   12a48:	4770      	bx	lr
   12a4a:	0000      	.short	0x0000
   12a4c:	200003d8 	.word	0x200003d8

00012a50 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>:
   12a50:	4906      	ldr	r1, [pc, #24]	; (12a6c <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x1c>)
   12a52:	b110      	cbz	r0, 12a5a <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xa>
   12a54:	2801      	cmp	r0, #1
   12a56:	d003      	beq.n	12a60 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x10>
   12a58:	e006      	b.n	12a68 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x18>
   12a5a:	7848      	ldrb	r0, [r1, #1]
   12a5c:	b910      	cbnz	r0, 12a64 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x14>
   12a5e:	e003      	b.n	12a68 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x18>
   12a60:	7808      	ldrb	r0, [r1, #0]
   12a62:	b108      	cbz	r0, 12a68 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x18>
   12a64:	2001      	movs	r0, #1
   12a66:	4770      	bx	lr
   12a68:	2000      	movs	r0, #0
   12a6a:	4770      	bx	lr
   12a6c:	200003d8 	.word	0x200003d8

00012a70 <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I>:
   12a70:	4901      	ldr	r1, [pc, #4]	; (12a78 <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I+0x8>)
   12a72:	7708      	strb	r0, [r1, #28]
   12a74:	4770      	bx	lr
   12a76:	0000      	.short	0x0000
   12a78:	20000eba 	.word	0x20000eba

00012a7c <sym_IHWHOAENEU2EYZP2UWQTUC6SSXGS5NNQSIFSEAQ>:
   12a7c:	4801      	ldr	r0, [pc, #4]	; (12a84 <sym_IHWHOAENEU2EYZP2UWQTUC6SSXGS5NNQSIFSEAQ+0x8>)
   12a7e:	78c0      	ldrb	r0, [r0, #3]
   12a80:	4770      	bx	lr
   12a82:	0000      	.short	0x0000
   12a84:	200000f8 	.word	0x200000f8

00012a88 <sym_Q3RLGT2MQM6S4H2ODVJHPDU44HGSYVXJV7676ZY>:
   12a88:	4801      	ldr	r0, [pc, #4]	; (12a90 <sym_Q3RLGT2MQM6S4H2ODVJHPDU44HGSYVXJV7676ZY+0x8>)
   12a8a:	7900      	ldrb	r0, [r0, #4]
   12a8c:	4770      	bx	lr
   12a8e:	0000      	.short	0x0000
   12a90:	200000f8 	.word	0x200000f8

00012a94 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA>:
   12a94:	b570      	push	{r4, r5, r6, lr}
   12a96:	4c08      	ldr	r4, [pc, #32]	; (12ab8 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x24>)
   12a98:	4605      	mov	r5, r0
   12a9a:	7820      	ldrb	r0, [r4, #0]
   12a9c:	b118      	cbz	r0, 12aa6 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x12>
   12a9e:	21c5      	movs	r1, #197	; 0xc5
   12aa0:	2027      	movs	r0, #39	; 0x27
   12aa2:	f7fe ff6d 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   12aa6:	4905      	ldr	r1, [pc, #20]	; (12abc <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x28>)
   12aa8:	2000      	movs	r0, #0
   12aaa:	7708      	strb	r0, [r1, #28]
   12aac:	2101      	movs	r1, #1
   12aae:	4804      	ldr	r0, [pc, #16]	; (12ac0 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x2c>)
   12ab0:	f00d ff2d 	bl	2090e <sym_IGXXIFMDOTCDOLQAILBV5BXIU5R6AALP5I4HZGQ>
   12ab4:	62e5      	str	r5, [r4, #44]	; 0x2c
   12ab6:	bd70      	pop	{r4, r5, r6, pc}
   12ab8:	200000f8 	.word	0x200000f8
   12abc:	20000eba 	.word	0x20000eba
   12ac0:	20000e88 	.word	0x20000e88

00012ac4 <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA>:
   12ac4:	4901      	ldr	r1, [pc, #4]	; (12acc <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA+0x8>)
   12ac6:	2001      	movs	r0, #1
   12ac8:	7188      	strb	r0, [r1, #6]
   12aca:	4770      	bx	lr
   12acc:	200000f8 	.word	0x200000f8

00012ad0 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q>:
   12ad0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12ad4:	4df5      	ldr	r5, [pc, #980]	; (12eac <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x3dc>)
   12ad6:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
   12ada:	782c      	ldrb	r4, [r5, #0]
   12adc:	2c00      	cmp	r4, #0
   12ade:	d165      	bne.n	12bac <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xdc>
   12ae0:	2a00      	cmp	r2, #0
   12ae2:	bf1c      	itt	ne
   12ae4:	2b00      	cmpne	r3, #0
   12ae6:	f1bc 0f00 	cmpne.w	ip, #0
   12aea:	d05f      	beq.n	12bac <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xdc>
   12aec:	f8c5 c01c 	str.w	ip, [r5, #28]
   12af0:	e9c5 010e 	strd	r0, r1, [r5, #56]	; 0x38
   12af4:	f04f 0000 	mov.w	r0, #0
   12af8:	e9c5 2305 	strd	r2, r3, [r5, #20]
   12afc:	71a8      	strb	r0, [r5, #6]
   12afe:	7168      	strb	r0, [r5, #5]
   12b00:	70e8      	strb	r0, [r5, #3]
   12b02:	70a8      	strb	r0, [r5, #2]
   12b04:	7128      	strb	r0, [r5, #4]
   12b06:	f8df 83a8 	ldr.w	r8, [pc, #936]	; 12eb0 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x3e0>
   12b0a:	81a8      	strh	r0, [r5, #12]
   12b0c:	81e8      	strh	r0, [r5, #14]
   12b0e:	f8d8 0004 	ldr.w	r0, [r8, #4]
   12b12:	f100 06a0 	add.w	r6, r0, #160	; 0xa0
   12b16:	4604      	mov	r4, r0
   12b18:	f00a f83e 	bl	1cb98 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
   12b1c:	f009 fb48 	bl	1c1b0 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
   12b20:	f994 0072 	ldrsb.w	r0, [r4, #114]	; 0x72
   12b24:	f00a f8d4 	bl	1ccd0 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
   12b28:	6a20      	ldr	r0, [r4, #32]
   12b2a:	f00a fb23 	bl	1d174 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
   12b2e:	69a0      	ldr	r0, [r4, #24]
   12b30:	f00a fb16 	bl	1d160 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
   12b34:	f896 002b 	ldrb.w	r0, [r6, #43]	; 0x2b
   12b38:	f00a fb56 	bl	1d1e8 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
   12b3c:	f898 0000 	ldrb.w	r0, [r8]
   12b40:	f641 594c 	movw	r9, #7500	; 0x1d4c
   12b44:	2800      	cmp	r0, #0
   12b46:	d036      	beq.n	12bb6 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xe6>
   12b48:	2004      	movs	r0, #4
   12b4a:	f7fe fca9 	bl	114a0 <sym_GNQQQFEWM5SWEGVB5JHP7HYAZGI4CDQXSGHR4SQ>
   12b4e:	6960      	ldr	r0, [r4, #20]
   12b50:	4548      	cmp	r0, r9
   12b52:	bf28      	it	cs
   12b54:	2096      	movcs	r0, #150	; 0x96
   12b56:	d203      	bcs.n	12b60 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x90>
   12b58:	2001      	movs	r0, #1
   12b5a:	f00a fae9 	bl	1d130 <sym_VLV66Y4WSZXQCNOAJYFTKZXZ4LIVJF5RFO44B5Q>
   12b5e:	204d      	movs	r0, #77	; 0x4d
   12b60:	f009 ff5c 	bl	1ca1c <sym_2ORM7WHEENMS7XIJEHICWP3BYWWMKP4MLHSFBTY>
   12b64:	f8d8 0004 	ldr.w	r0, [r8, #4]
   12b68:	f890 0296 	ldrb.w	r0, [r0, #662]	; 0x296
   12b6c:	2800      	cmp	r0, #0
   12b6e:	bf18      	it	ne
   12b70:	f009 ff44 	blne	1c9fc <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI>
   12b74:	f894 106f 	ldrb.w	r1, [r4, #111]	; 0x6f
   12b78:	2001      	movs	r0, #1
   12b7a:	f009 fd8d 	bl	1c698 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
   12b7e:	2800      	cmp	r0, #0
   12b80:	bf08      	it	eq
   12b82:	e8bd 8ff8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12b86:	48cb      	ldr	r0, [pc, #812]	; (12eb4 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x3e4>)
   12b88:	f009 fec6 	bl	1c918 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
   12b8c:	8820      	ldrh	r0, [r4, #0]
   12b8e:	f7ff fbd9 	bl	12344 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
   12b92:	6328      	str	r0, [r5, #48]	; 0x30
   12b94:	8820      	ldrh	r0, [r4, #0]
   12b96:	f7ff fbbf 	bl	12318 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
   12b9a:	6368      	str	r0, [r5, #52]	; 0x34
   12b9c:	f894 007b 	ldrb.w	r0, [r4, #123]	; 0x7b
   12ba0:	f88d 0000 	strb.w	r0, [sp]
   12ba4:	f89d 0000 	ldrb.w	r0, [sp]
   12ba8:	bb70      	cbnz	r0, 12c08 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x138>
   12baa:	e01b      	b.n	12be4 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x114>
   12bac:	f240 111d 	movw	r1, #285	; 0x11d
   12bb0:	2027      	movs	r0, #39	; 0x27
   12bb2:	f7fe fee5 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   12bb6:	2003      	movs	r0, #3
   12bb8:	f7fe fc72 	bl	114a0 <sym_GNQQQFEWM5SWEGVB5JHP7HYAZGI4CDQXSGHR4SQ>
   12bbc:	6960      	ldr	r0, [r4, #20]
   12bbe:	4548      	cmp	r0, r9
   12bc0:	bf28      	it	cs
   12bc2:	2096      	movcs	r0, #150	; 0x96
   12bc4:	d203      	bcs.n	12bce <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xfe>
   12bc6:	2001      	movs	r0, #1
   12bc8:	f00a fab2 	bl	1d130 <sym_VLV66Y4WSZXQCNOAJYFTKZXZ4LIVJF5RFO44B5Q>
   12bcc:	204d      	movs	r0, #77	; 0x4d
   12bce:	f009 ff25 	bl	1ca1c <sym_2ORM7WHEENMS7XIJEHICWP3BYWWMKP4MLHSFBTY>
   12bd2:	f894 106e 	ldrb.w	r1, [r4, #110]	; 0x6e
   12bd6:	2000      	movs	r0, #0
   12bd8:	f009 fd5e 	bl	1c698 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
   12bdc:	2800      	cmp	r0, #0
   12bde:	d1d2      	bne.n	12b86 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xb6>
   12be0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12be4:	6f60      	ldr	r0, [r4, #116]	; 0x74
   12be6:	b178      	cbz	r0, 12c08 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x138>
   12be8:	f8b6 0042 	ldrh.w	r0, [r6, #66]	; 0x42
   12bec:	89b1      	ldrh	r1, [r6, #12]
   12bee:	4288      	cmp	r0, r1
   12bf0:	d10a      	bne.n	12c08 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x138>
   12bf2:	f8b4 1078 	ldrh.w	r1, [r4, #120]	; 0x78
   12bf6:	2201      	movs	r2, #1
   12bf8:	4408      	add	r0, r1
   12bfa:	f8a6 0042 	strh.w	r0, [r6, #66]	; 0x42
   12bfe:	f894 007a 	ldrb.w	r0, [r4, #122]	; 0x7a
   12c02:	6f61      	ldr	r1, [r4, #116]	; 0x74
   12c04:	f7fd f944 	bl	fe90 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ>
   12c08:	f106 0180 	add.w	r1, r6, #128	; 0x80
   12c0c:	48aa      	ldr	r0, [pc, #680]	; (12eb8 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x3e8>)
   12c0e:	e891 100e 	ldmia.w	r1, {r1, r2, r3, ip}
   12c12:	f500 7784 	add.w	r7, r0, #264	; 0x108
   12c16:	e887 100e 	stmia.w	r7, {r1, r2, r3, ip}
   12c1a:	f8d6 1090 	ldr.w	r1, [r6, #144]	; 0x90
   12c1e:	f8c0 1121 	str.w	r1, [r0, #289]	; 0x121
   12c22:	f8d6 1094 	ldr.w	r1, [r6, #148]	; 0x94
   12c26:	f8c0 1125 	str.w	r1, [r0, #293]	; 0x125
   12c2a:	f8d8 0004 	ldr.w	r0, [r8, #4]
   12c2e:	2701      	movs	r7, #1
   12c30:	f100 02a0 	add.w	r2, r0, #160	; 0xa0
   12c34:	f890 10b5 	ldrb.w	r1, [r0, #181]	; 0xb5
   12c38:	2927      	cmp	r1, #39	; 0x27
   12c3a:	bf1e      	ittt	ne
   12c3c:	2928      	cmpne	r1, #40	; 0x28
   12c3e:	f892 c016 	ldrbne.w	ip, [r2, #22]
   12c42:	f1bc 0f27 	cmpne.w	ip, #39	; 0x27
   12c46:	d00b      	beq.n	12c60 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x190>
   12c48:	f04f 0208 	mov.w	r2, #8
   12c4c:	f04f 0302 	mov.w	r3, #2
   12c50:	2922      	cmp	r1, #34	; 0x22
   12c52:	bf18      	it	ne
   12c54:	2923      	cmpne	r1, #35	; 0x23
   12c56:	d02d      	beq.n	12cb4 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1e4>
   12c58:	f1bc 0f25 	cmp.w	ip, #37	; 0x25
   12c5c:	d051      	beq.n	12d02 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x232>
   12c5e:	e080      	b.n	12d62 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x292>
   12c60:	f898 1000 	ldrb.w	r1, [r8]
   12c64:	2900      	cmp	r1, #0
   12c66:	f890 106e 	ldrb.w	r1, [r0, #110]	; 0x6e
   12c6a:	d012      	beq.n	12c92 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1c2>
   12c6c:	f890 0346 	ldrb.w	r0, [r0, #838]	; 0x346
   12c70:	2800      	cmp	r0, #0
   12c72:	d07a      	beq.n	12d6a <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x29a>
   12c74:	2908      	cmp	r1, #8
   12c76:	bf18      	it	ne
   12c78:	2904      	cmpne	r1, #4
   12c7a:	d06f      	beq.n	12d5c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x28c>
   12c7c:	2808      	cmp	r0, #8
   12c7e:	bf18      	it	ne
   12c80:	2804      	cmpne	r0, #4
   12c82:	d06b      	beq.n	12d5c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x28c>
   12c84:	2901      	cmp	r1, #1
   12c86:	bf18      	it	ne
   12c88:	2801      	cmpne	r0, #1
   12c8a:	d056      	beq.n	12d3a <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x26a>
   12c8c:	f04f 0102 	mov.w	r1, #2
   12c90:	e06b      	b.n	12d6a <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x29a>
   12c92:	f890 02d2 	ldrb.w	r0, [r0, #722]	; 0x2d2
   12c96:	2800      	cmp	r0, #0
   12c98:	d067      	beq.n	12d6a <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x29a>
   12c9a:	2908      	cmp	r1, #8
   12c9c:	bf18      	it	ne
   12c9e:	2904      	cmpne	r1, #4
   12ca0:	d05c      	beq.n	12d5c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x28c>
   12ca2:	2808      	cmp	r0, #8
   12ca4:	bf18      	it	ne
   12ca6:	2804      	cmpne	r0, #4
   12ca8:	d058      	beq.n	12d5c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x28c>
   12caa:	2901      	cmp	r1, #1
   12cac:	bf18      	it	ne
   12cae:	2801      	cmpne	r0, #1
   12cb0:	d043      	beq.n	12d3a <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x26a>
   12cb2:	e7eb      	b.n	12c8c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1bc>
   12cb4:	f1bc 0f25 	cmp.w	ip, #37	; 0x25
   12cb8:	d023      	beq.n	12d02 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x232>
   12cba:	f898 1000 	ldrb.w	r1, [r8]
   12cbe:	b3e9      	cbz	r1, 12d3c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x26c>
   12cc0:	f890 106e 	ldrb.w	r1, [r0, #110]	; 0x6e
   12cc4:	f890 0156 	ldrb.w	r0, [r0, #342]	; 0x156
   12cc8:	f010 0f04 	tst.w	r0, #4
   12ccc:	bf18      	it	ne
   12cce:	4610      	movne	r0, r2
   12cd0:	d00c      	beq.n	12cec <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x21c>
   12cd2:	2908      	cmp	r1, #8
   12cd4:	bf18      	it	ne
   12cd6:	2904      	cmpne	r1, #4
   12cd8:	d040      	beq.n	12d5c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x28c>
   12cda:	2808      	cmp	r0, #8
   12cdc:	bf18      	it	ne
   12cde:	2804      	cmpne	r0, #4
   12ce0:	d03c      	beq.n	12d5c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x28c>
   12ce2:	2901      	cmp	r1, #1
   12ce4:	bf18      	it	ne
   12ce6:	2801      	cmpne	r0, #1
   12ce8:	d027      	beq.n	12d3a <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x26a>
   12cea:	e7cf      	b.n	12c8c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1bc>
   12cec:	f010 0f01 	tst.w	r0, #1
   12cf0:	bf18      	it	ne
   12cf2:	4638      	movne	r0, r7
   12cf4:	d1ed      	bne.n	12cd2 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x202>
   12cf6:	f010 0f02 	tst.w	r0, #2
   12cfa:	bf18      	it	ne
   12cfc:	4618      	movne	r0, r3
   12cfe:	d1e8      	bne.n	12cd2 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x202>
   12d00:	e033      	b.n	12d6a <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x29a>
   12d02:	f898 1000 	ldrb.w	r1, [r8]
   12d06:	b1c9      	cbz	r1, 12d3c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x26c>
   12d08:	f890 106e 	ldrb.w	r1, [r0, #110]	; 0x6e
   12d0c:	f890 c156 	ldrb.w	ip, [r0, #342]	; 0x156
   12d10:	f890 0067 	ldrb.w	r0, [r0, #103]	; 0x67
   12d14:	ea0c 0000 	and.w	r0, ip, r0
   12d18:	f010 0f04 	tst.w	r0, #4
   12d1c:	bf18      	it	ne
   12d1e:	4610      	movne	r0, r2
   12d20:	d010      	beq.n	12d44 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x274>
   12d22:	2908      	cmp	r1, #8
   12d24:	bf18      	it	ne
   12d26:	2904      	cmpne	r1, #4
   12d28:	d018      	beq.n	12d5c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x28c>
   12d2a:	2808      	cmp	r0, #8
   12d2c:	bf18      	it	ne
   12d2e:	2804      	cmpne	r0, #4
   12d30:	d014      	beq.n	12d5c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x28c>
   12d32:	2901      	cmp	r1, #1
   12d34:	bf18      	it	ne
   12d36:	2801      	cmpne	r0, #1
   12d38:	d1a8      	bne.n	12c8c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1bc>
   12d3a:	e000      	b.n	12d3e <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x26e>
   12d3c:	e011      	b.n	12d62 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x292>
   12d3e:	f04f 0101 	mov.w	r1, #1
   12d42:	e012      	b.n	12d6a <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x29a>
   12d44:	f010 0f01 	tst.w	r0, #1
   12d48:	bf18      	it	ne
   12d4a:	4638      	movne	r0, r7
   12d4c:	d1e9      	bne.n	12d22 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x252>
   12d4e:	f010 0f02 	tst.w	r0, #2
   12d52:	bf18      	it	ne
   12d54:	4618      	movne	r0, r3
   12d56:	d1e4      	bne.n	12d22 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x252>
   12d58:	e007      	b.n	12d6a <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x29a>
   12d5a:	e7ff      	b.n	12d5c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x28c>
   12d5c:	f04f 0108 	mov.w	r1, #8
   12d60:	e003      	b.n	12d6a <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x29a>
   12d62:	f890 106e 	ldrb.w	r1, [r0, #110]	; 0x6e
   12d66:	2904      	cmp	r1, #4
   12d68:	d0f8      	beq.n	12d5c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x28c>
   12d6a:	8fa0      	ldrh	r0, [r4, #60]	; 0x3c
   12d6c:	f011 0f0c 	tst.w	r1, #12
   12d70:	bf18      	it	ne
   12d72:	f44f 6029 	movne.w	r0, #2704	; 0xa90
   12d76:	f00d fa42 	bl	201fe <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
   12d7a:	8f21      	ldrh	r1, [r4, #56]	; 0x38
   12d7c:	4281      	cmp	r1, r0
   12d7e:	bf38      	it	cc
   12d80:	4608      	movcc	r0, r1
   12d82:	7228      	strb	r0, [r5, #8]
   12d84:	f894 106f 	ldrb.w	r1, [r4, #111]	; 0x6f
   12d88:	f8b4 0042 	ldrh.w	r0, [r4, #66]	; 0x42
   12d8c:	f896 b01b 	ldrb.w	fp, [r6, #27]
   12d90:	f8b4 a040 	ldrh.w	sl, [r4, #64]	; 0x40
   12d94:	2908      	cmp	r1, #8
   12d96:	d030      	beq.n	12dfa <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x32a>
   12d98:	f00d fa31 	bl	201fe <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
   12d9c:	f1bb 0f00 	cmp.w	fp, #0
   12da0:	bf04      	itt	eq
   12da2:	1d00      	addeq	r0, r0, #4
   12da4:	b280      	uxtheq	r0, r0
   12da6:	4582      	cmp	sl, r0
   12da8:	bf38      	it	cc
   12daa:	4650      	movcc	r0, sl
   12dac:	b2c2      	uxtb	r2, r0
   12dae:	726a      	strb	r2, [r5, #9]
   12db0:	7ef1      	ldrb	r1, [r6, #27]
   12db2:	2900      	cmp	r1, #0
   12db4:	bf14      	ite	ne
   12db6:	2004      	movne	r0, #4
   12db8:	2000      	moveq	r0, #0
   12dba:	4410      	add	r0, r2
   12dbc:	71e8      	strb	r0, [r5, #7]
   12dbe:	f898 3000 	ldrb.w	r3, [r8]
   12dc2:	483e      	ldr	r0, [pc, #248]	; (12ebc <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x3ec>)
   12dc4:	b1eb      	cbz	r3, 12e02 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x332>
   12dc6:	b3e9      	cbz	r1, 12e44 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x374>
   12dc8:	7607      	strb	r7, [r0, #24]
   12dca:	e9d6 131e 	ldrd	r1, r3, [r6, #120]	; 0x78
   12dce:	e9c0 1304 	strd	r1, r3, [r0, #16]
   12dd2:	f894 106f 	ldrb.w	r1, [r4, #111]	; 0x6f
   12dd6:	2001      	movs	r0, #1
   12dd8:	2901      	cmp	r1, #1
   12dda:	bf08      	it	eq
   12ddc:	2300      	moveq	r3, #0
   12dde:	d03d      	beq.n	12e5c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x38c>
   12de0:	2902      	cmp	r1, #2
   12de2:	bf08      	it	eq
   12de4:	2301      	moveq	r3, #1
   12de6:	d039      	beq.n	12e5c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x38c>
   12de8:	2904      	cmp	r1, #4
   12dea:	bf08      	it	eq
   12dec:	2303      	moveq	r3, #3
   12dee:	d035      	beq.n	12e5c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x38c>
   12df0:	2908      	cmp	r1, #8
   12df2:	bf08      	it	eq
   12df4:	2302      	moveq	r3, #2
   12df6:	d031      	beq.n	12e5c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x38c>
   12df8:	e021      	b.n	12e3e <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x36e>
   12dfa:	2104      	movs	r1, #4
   12dfc:	f00d f9ff 	bl	201fe <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
   12e00:	e7cc      	b.n	12d9c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x2cc>
   12e02:	7eb1      	ldrb	r1, [r6, #26]
   12e04:	b331      	cbz	r1, 12e54 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x384>
   12e06:	7607      	strb	r7, [r0, #24]
   12e08:	e9d6 121c 	ldrd	r1, r2, [r6, #112]	; 0x70
   12e0c:	e9c0 1204 	strd	r1, r2, [r0, #16]
   12e10:	6960      	ldr	r0, [r4, #20]
   12e12:	4548      	cmp	r0, r9
   12e14:	bf2c      	ite	cs
   12e16:	2000      	movcs	r0, #0
   12e18:	2004      	movcc	r0, #4
   12e1a:	f894 106e 	ldrb.w	r1, [r4, #110]	; 0x6e
   12e1e:	2901      	cmp	r1, #1
   12e20:	bf08      	it	eq
   12e22:	2300      	moveq	r3, #0
   12e24:	d012      	beq.n	12e4c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x37c>
   12e26:	2902      	cmp	r1, #2
   12e28:	bf08      	it	eq
   12e2a:	2301      	moveq	r3, #1
   12e2c:	d00e      	beq.n	12e4c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x37c>
   12e2e:	2904      	cmp	r1, #4
   12e30:	bf08      	it	eq
   12e32:	2303      	moveq	r3, #3
   12e34:	d00a      	beq.n	12e4c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x37c>
   12e36:	2908      	cmp	r1, #8
   12e38:	bf08      	it	eq
   12e3a:	2302      	moveq	r3, #2
   12e3c:	d006      	beq.n	12e4c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x37c>
   12e3e:	f240 411a 	movw	r1, #1050	; 0x41a
   12e42:	e000      	b.n	12e46 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x376>
   12e44:	e00d      	b.n	12e62 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x392>
   12e46:	2006      	movs	r0, #6
   12e48:	f7fe fd9a 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   12e4c:	22fb      	movs	r2, #251	; 0xfb
   12e4e:	491b      	ldr	r1, [pc, #108]	; (12ebc <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x3ec>)
   12e50:	f009 f8e6 	bl	1c020 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA>
   12e54:	2001      	movs	r0, #1
   12e56:	f000 fca7 	bl	137a8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x780>
   12e5a:	e005      	b.n	12e68 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x398>
   12e5c:	4917      	ldr	r1, [pc, #92]	; (12ebc <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x3ec>)
   12e5e:	f009 f8df 	bl	1c020 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA>
   12e62:	2001      	movs	r0, #1
   12e64:	f000 fc32 	bl	136cc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6a4>
   12e68:	4815      	ldr	r0, [pc, #84]	; (12ec0 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x3f0>)
   12e6a:	6800      	ldr	r0, [r0, #0]
   12e6c:	2803      	cmp	r0, #3
   12e6e:	bf18      	it	ne
   12e70:	280b      	cmpne	r0, #11
   12e72:	d015      	beq.n	12ea0 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x3d0>
   12e74:	4810      	ldr	r0, [pc, #64]	; (12eb8 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x3e8>)
   12e76:	f04f 0100 	mov.w	r1, #0
   12e7a:	f8c0 1162 	str.w	r1, [r0, #354]	; 0x162
   12e7e:	f8c0 1166 	str.w	r1, [r0, #358]	; 0x166
   12e82:	f8c0 116a 	str.w	r1, [r0, #362]	; 0x16a
   12e86:	f8a0 116e 	strh.w	r1, [r0, #366]	; 0x16e
   12e8a:	f500 70b1 	add.w	r0, r0, #354	; 0x162
   12e8e:	89b1      	ldrh	r1, [r6, #12]
   12e90:	8041      	strh	r1, [r0, #2]
   12e92:	8821      	ldrh	r1, [r4, #0]
   12e94:	8001      	strh	r1, [r0, #0]
   12e96:	f896 102b 	ldrb.w	r1, [r6, #43]	; 0x2b
   12e9a:	7101      	strb	r1, [r0, #4]
   12e9c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12ea0:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
   12ea4:	f04f 0027 	mov.w	r0, #39	; 0x27
   12ea8:	f7fe fd6a 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   12eac:	200000f8 	.word	0x200000f8
   12eb0:	20000130 	.word	0x20000130
   12eb4:	000139d8 	.word	0x000139d8
   12eb8:	20000d58 	.word	0x20000d58
   12ebc:	20000e60 	.word	0x20000e60
   12ec0:	40001550 	.word	0x40001550

00012ec4 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>:
   12ec4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   12ec8:	4d4b      	ldr	r5, [pc, #300]	; (12ff8 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x134>)
   12eca:	0006      	movs	r6, r0
   12ecc:	468a      	mov	sl, r1
   12ece:	4849      	ldr	r0, [pc, #292]	; (12ff4 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x130>)
   12ed0:	6a69      	ldr	r1, [r5, #36]	; 0x24
   12ed2:	b082      	sub	sp, #8
   12ed4:	6840      	ldr	r0, [r0, #4]
   12ed6:	f891 9001 	ldrb.w	r9, [r1, #1]
   12eda:	f100 04a0 	add.w	r4, r0, #160	; 0xa0
   12ede:	f04f 0700 	mov.w	r7, #0
   12ee2:	bf14      	ite	ne
   12ee4:	2e01      	cmpne	r6, #1
   12ee6:	706f      	strbeq	r7, [r5, #1]
   12ee8:	7868      	ldrb	r0, [r5, #1]
   12eea:	f04f 0801 	mov.w	r8, #1
   12eee:	b150      	cbz	r0, 12f06 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x42>
   12ef0:	2801      	cmp	r0, #1
   12ef2:	d03a      	beq.n	12f6a <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xa6>
   12ef4:	2802      	cmp	r0, #2
   12ef6:	d05c      	beq.n	12fb2 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xee>
   12ef8:	2803      	cmp	r0, #3
   12efa:	d070      	beq.n	12fde <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x11a>
   12efc:	f240 411d 	movw	r1, #1053	; 0x41d
   12f00:	2027      	movs	r0, #39	; 0x27
   12f02:	f7fe fd3d 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   12f06:	2e01      	cmp	r6, #1
   12f08:	d01c      	beq.n	12f44 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x80>
   12f0a:	6aa8      	ldr	r0, [r5, #40]	; 0x28
   12f0c:	2800      	cmp	r0, #0
   12f0e:	d04b      	beq.n	12fa8 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xe4>
   12f10:	896a      	ldrh	r2, [r5, #10]
   12f12:	1cd2      	adds	r2, r2, #3
   12f14:	f00b fca3 	bl	1e85e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   12f18:	6aa8      	ldr	r0, [r5, #40]	; 0x28
   12f1a:	6268      	str	r0, [r5, #36]	; 0x24
   12f1c:	aa01      	add	r2, sp, #4
   12f1e:	4669      	mov	r1, sp
   12f20:	6b68      	ldr	r0, [r5, #52]	; 0x34
   12f22:	f00c fc86 	bl	1f832 <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA>
   12f26:	9800      	ldr	r0, [sp, #0]
   12f28:	f00c fc36 	bl	1f798 <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>
   12f2c:	f8ca 0000 	str.w	r0, [sl]
   12f30:	2201      	movs	r2, #1
   12f32:	4649      	mov	r1, r9
   12f34:	6b68      	ldr	r0, [r5, #52]	; 0x34
   12f36:	f00c fbe6 	bl	1f706 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>
   12f3a:	2e02      	cmp	r6, #2
   12f3c:	bf04      	itt	eq
   12f3e:	b002      	addeq	sp, #8
   12f40:	e8bd 87f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   12f44:	e9d4 021e 	ldrd	r0, r2, [r4, #120]	; 0x78
   12f48:	1c41      	adds	r1, r0, #1
   12f4a:	f142 0000 	adc.w	r0, r2, #0
   12f4e:	e9c4 101e 	strd	r1, r0, [r4, #120]	; 0x78
   12f52:	7c20      	ldrb	r0, [r4, #16]
   12f54:	2801      	cmp	r0, #1
   12f56:	d103      	bne.n	12f60 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x9c>
   12f58:	7427      	strb	r7, [r4, #16]
   12f5a:	b002      	add	sp, #8
   12f5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   12f60:	f884 8010 	strb.w	r8, [r4, #16]
   12f64:	b002      	add	sp, #8
   12f66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   12f6a:	2e01      	cmp	r6, #1
   12f6c:	d011      	beq.n	12f92 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xce>
   12f6e:	6aa8      	ldr	r0, [r5, #40]	; 0x28
   12f70:	b1d0      	cbz	r0, 12fa8 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xe4>
   12f72:	896a      	ldrh	r2, [r5, #10]
   12f74:	1cd2      	adds	r2, r2, #3
   12f76:	f00b fc72 	bl	1e85e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   12f7a:	6aa8      	ldr	r0, [r5, #40]	; 0x28
   12f7c:	6268      	str	r0, [r5, #36]	; 0x24
   12f7e:	2200      	movs	r2, #0
   12f80:	4649      	mov	r1, r9
   12f82:	6b68      	ldr	r0, [r5, #52]	; 0x34
   12f84:	f00c fbbf 	bl	1f706 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>
   12f88:	2e02      	cmp	r6, #2
   12f8a:	bf04      	itt	eq
   12f8c:	b002      	addeq	sp, #8
   12f8e:	e8bd 87f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   12f92:	e9d4 021e 	ldrd	r0, r2, [r4, #120]	; 0x78
   12f96:	1c41      	adds	r1, r0, #1
   12f98:	f142 0000 	adc.w	r0, r2, #0
   12f9c:	e9c4 101e 	strd	r1, r0, [r4, #120]	; 0x78
   12fa0:	7c20      	ldrb	r0, [r4, #16]
   12fa2:	2801      	cmp	r0, #1
   12fa4:	d1dc      	bne.n	12f60 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x9c>
   12fa6:	e7d7      	b.n	12f58 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x94>
   12fa8:	f240 4163 	movw	r1, #1123	; 0x463
   12fac:	2027      	movs	r0, #39	; 0x27
   12fae:	f7fe fce7 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   12fb2:	2e01      	cmp	r6, #1
   12fb4:	d007      	beq.n	12fc6 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x102>
   12fb6:	6b68      	ldr	r0, [r5, #52]	; 0x34
   12fb8:	f00c fd57 	bl	1fa6a <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>
   12fbc:	2e02      	cmp	r6, #2
   12fbe:	bf04      	itt	eq
   12fc0:	b002      	addeq	sp, #8
   12fc2:	e8bd 87f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   12fc6:	e9d4 101e 	ldrd	r1, r0, [r4, #120]	; 0x78
   12fca:	1c49      	adds	r1, r1, #1
   12fcc:	f140 0000 	adc.w	r0, r0, #0
   12fd0:	e9c4 101e 	strd	r1, r0, [r4, #120]	; 0x78
   12fd4:	7c20      	ldrb	r0, [r4, #16]
   12fd6:	2801      	cmp	r0, #1
   12fd8:	d1c2      	bne.n	12f60 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x9c>
   12fda:	e7bd      	b.n	12f58 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x94>
   12fdc:	e7ff      	b.n	12fde <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x11a>
   12fde:	2e01      	cmp	r6, #1
   12fe0:	bf04      	itt	eq
   12fe2:	b002      	addeq	sp, #8
   12fe4:	e8bd 87f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   12fe8:	6b68      	ldr	r0, [r5, #52]	; 0x34
   12fea:	b002      	add	sp, #8
   12fec:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   12ff0:	f00c bd3b 	b.w	1fa6a <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>
   12ff4:	20000130 	.word	0x20000130
   12ff8:	200000f8 	.word	0x200000f8

00012ffc <sym_ZWLSMB33C6NPFOBZGVPV4PN4UKQGSPLLR4WLDFI>:
   12ffc:	4802      	ldr	r0, [pc, #8]	; (13008 <sym_ZWLSMB33C6NPFOBZGVPV4PN4UKQGSPLLR4WLDFI+0xc>)
   12ffe:	89c0      	ldrh	r0, [r0, #14]
   13000:	f3c0 2080 	ubfx	r0, r0, #10, #1
   13004:	4770      	bx	lr
   13006:	0000      	.short	0x0000
   13008:	200000f8 	.word	0x200000f8

0001300c <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>:
   1300c:	4804      	ldr	r0, [pc, #16]	; (13020 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0x14>)
   1300e:	7800      	ldrb	r0, [r0, #0]
   13010:	2800      	cmp	r0, #0
   13012:	bf1c      	itt	ne
   13014:	200c      	movne	r0, #12
   13016:	4770      	bxne	lr
   13018:	2000      	movs	r0, #0
   1301a:	4902      	ldr	r1, [pc, #8]	; (13024 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0x18>)
   1301c:	7708      	strb	r0, [r1, #28]
   1301e:	4770      	bx	lr
   13020:	200000f8 	.word	0x200000f8
   13024:	20000eba 	.word	0x20000eba

00013028 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ>:
   13028:	b538      	push	{r3, r4, r5, lr}
   1302a:	481a      	ldr	r0, [pc, #104]	; (13094 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>)
   1302c:	7801      	ldrb	r1, [r0, #0]
   1302e:	f100 0438 	add.w	r4, r0, #56	; 0x38
   13032:	b149      	cbz	r1, 13048 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x20>
   13034:	7821      	ldrb	r1, [r4, #0]
   13036:	7800      	ldrb	r0, [r0, #0]
   13038:	b149      	cbz	r1, 1304e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x26>
   1303a:	2802      	cmp	r0, #2
   1303c:	d00e      	beq.n	1305c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x34>
   1303e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
   13042:	2027      	movs	r0, #39	; 0x27
   13044:	f7fe fc9c 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   13048:	f000 faa8 	bl	1359c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x574>
   1304c:	e00b      	b.n	13066 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3e>
   1304e:	2801      	cmp	r0, #1
   13050:	d009      	beq.n	13066 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3e>
   13052:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
   13056:	2027      	movs	r0, #39	; 0x27
   13058:	f7fe fc92 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1305c:	6860      	ldr	r0, [r4, #4]
   1305e:	f8d0 02a8 	ldr.w	r0, [r0, #680]	; 0x2a8
   13062:	f009 fc6f 	bl	1c944 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA>
   13066:	6860      	ldr	r0, [r4, #4]
   13068:	f890 107b 	ldrb.w	r1, [r0, #123]	; 0x7b
   1306c:	f88d 1000 	strb.w	r1, [sp]
   13070:	f89d 1000 	ldrb.w	r1, [sp]
   13074:	2900      	cmp	r1, #0
   13076:	bf18      	it	ne
   13078:	bd38      	popne	{r3, r4, r5, pc}
   1307a:	6f41      	ldr	r1, [r0, #116]	; 0x74
   1307c:	2900      	cmp	r1, #0
   1307e:	bf08      	it	eq
   13080:	bd38      	popeq	{r3, r4, r5, pc}
   13082:	f890 007a 	ldrb.w	r0, [r0, #122]	; 0x7a
   13086:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1308a:	2200      	movs	r2, #0
   1308c:	4611      	mov	r1, r2
   1308e:	f7fc beff 	b.w	fe90 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ>
   13092:	0000      	.short	0x0000
   13094:	200000f8 	.word	0x200000f8
   13098:	2000      	movs	r0, #0
   1309a:	7048      	strb	r0, [r1, #1]
   1309c:	202d      	movs	r0, #45	; 0x2d
   1309e:	7008      	strb	r0, [r1, #0]
   130a0:	4806      	ldr	r0, [pc, #24]	; (130bc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x94>)
   130a2:	f8d0 2170 	ldr.w	r2, [r0, #368]	; 0x170
   130a6:	604a      	str	r2, [r1, #4]
   130a8:	f8d0 2174 	ldr.w	r2, [r0, #372]	; 0x174
   130ac:	608a      	str	r2, [r1, #8]
   130ae:	f8d0 2178 	ldr.w	r2, [r0, #376]	; 0x178
   130b2:	60ca      	str	r2, [r1, #12]
   130b4:	f8b0 017c 	ldrh.w	r0, [r0, #380]	; 0x17c
   130b8:	8208      	strh	r0, [r1, #16]
   130ba:	4770      	bx	lr
   130bc:	20000d58 	.word	0x20000d58
   130c0:	2901      	cmp	r1, #1
   130c2:	bf84      	itt	hi
   130c4:	2001      	movhi	r0, #1
   130c6:	4770      	bxhi	lr
   130c8:	b570      	push	{r4, r5, r6, lr}
   130ca:	4c1b      	ldr	r4, [pc, #108]	; (13138 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x110>)
   130cc:	4605      	mov	r5, r0
   130ce:	69a1      	ldr	r1, [r4, #24]
   130d0:	4788      	blx	r1
   130d2:	2800      	cmp	r0, #0
   130d4:	d02c      	beq.n	13130 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x108>
   130d6:	7960      	ldrb	r0, [r4, #5]
   130d8:	bb50      	cbnz	r0, 13130 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x108>
   130da:	f104 0038 	add.w	r0, r4, #56	; 0x38
   130de:	7801      	ldrb	r1, [r0, #0]
   130e0:	2900      	cmp	r1, #0
   130e2:	bf08      	it	eq
   130e4:	2d01      	cmpeq	r5, #1
   130e6:	d001      	beq.n	130ec <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xc4>
   130e8:	b321      	cbz	r1, 13134 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x10c>
   130ea:	bb1d      	cbnz	r5, 13134 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x10c>
   130ec:	4813      	ldr	r0, [pc, #76]	; (1313c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x114>)
   130ee:	7802      	ldrb	r2, [r0, #0]
   130f0:	f012 0f10 	tst.w	r2, #16
   130f4:	d106      	bne.n	13104 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xdc>
   130f6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   130f8:	7800      	ldrb	r0, [r0, #0]
   130fa:	f010 0f10 	tst.w	r0, #16
   130fe:	bf08      	it	eq
   13100:	2001      	moveq	r0, #1
   13102:	d001      	beq.n	13108 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xe0>
   13104:	f04f 0000 	mov.w	r0, #0
   13108:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1310a:	b923      	cbnz	r3, 13116 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xee>
   1310c:	8963      	ldrh	r3, [r4, #10]
   1310e:	b113      	cbz	r3, 13116 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xee>
   13110:	f012 0f10 	tst.w	r2, #16
   13114:	d00c      	beq.n	13130 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x108>
   13116:	2900      	cmp	r1, #0
   13118:	bf1c      	itt	ne
   1311a:	7b21      	ldrbne	r1, [r4, #12]
   1311c:	f011 0f02 	tstne.w	r1, #2
   13120:	d003      	beq.n	1312a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x102>
   13122:	6a21      	ldr	r1, [r4, #32]
   13124:	78c9      	ldrb	r1, [r1, #3]
   13126:	2902      	cmp	r1, #2
   13128:	d004      	beq.n	13134 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x10c>
   1312a:	89a1      	ldrh	r1, [r4, #12]
   1312c:	4308      	orrs	r0, r1
   1312e:	d001      	beq.n	13134 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x10c>
   13130:	2001      	movs	r0, #1
   13132:	bd70      	pop	{r4, r5, r6, pc}
   13134:	2000      	movs	r0, #0
   13136:	bd70      	pop	{r4, r5, r6, pc}
   13138:	200000f8 	.word	0x200000f8
   1313c:	20000108 	.word	0x20000108
   13140:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13144:	f8df 8328 	ldr.w	r8, [pc, #808]	; 13470 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x448>
   13148:	4682      	mov	sl, r0
   1314a:	b083      	sub	sp, #12
   1314c:	f8d8 0004 	ldr.w	r0, [r8, #4]
   13150:	f04f 0900 	mov.w	r9, #0
   13154:	f1a8 0538 	sub.w	r5, r8, #56	; 0x38
   13158:	f100 07a0 	add.w	r7, r0, #160	; 0xa0
   1315c:	f88d 9000 	strb.w	r9, [sp]
   13160:	f8cd 9008 	str.w	r9, [sp, #8]
   13164:	f8cd 9004 	str.w	r9, [sp, #4]
   13168:	7828      	ldrb	r0, [r5, #0]
   1316a:	464e      	mov	r6, r9
   1316c:	2802      	cmp	r0, #2
   1316e:	d004      	beq.n	1317a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x152>
   13170:	f240 41ee 	movw	r1, #1262	; 0x4ee
   13174:	2027      	movs	r0, #39	; 0x27
   13176:	f7fe fc03 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1317a:	7ba8      	ldrb	r0, [r5, #14]
   1317c:	f010 0f40 	tst.w	r0, #64	; 0x40
   13180:	d107      	bne.n	13192 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x16a>
   13182:	2040      	movs	r0, #64	; 0x40
   13184:	696a      	ldr	r2, [r5, #20]
   13186:	2100      	movs	r1, #0
   13188:	4790      	blx	r2
   1318a:	89e8      	ldrh	r0, [r5, #14]
   1318c:	f040 0040 	orr.w	r0, r0, #64	; 0x40
   13190:	81e8      	strh	r0, [r5, #14]
   13192:	7ef8      	ldrb	r0, [r7, #27]
   13194:	f1ba 0f00 	cmp.w	sl, #0
   13198:	f000 80d3 	beq.w	13342 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x31a>
   1319c:	f04f 0b01 	mov.w	fp, #1
   131a0:	b1a0      	cbz	r0, 131cc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1a4>
   131a2:	f009 f843 	bl	1c22c <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI>
   131a6:	f009 f81d 	bl	1c1e4 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA>
   131aa:	b978      	cbnz	r0, 131cc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1a4>
   131ac:	6a68      	ldr	r0, [r5, #36]	; 0x24
   131ae:	7841      	ldrb	r1, [r0, #1]
   131b0:	b161      	cbz	r1, 131cc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1a4>
   131b2:	7800      	ldrb	r0, [r0, #0]
   131b4:	7c39      	ldrb	r1, [r7, #16]
   131b6:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   131ba:	4288      	cmp	r0, r1
   131bc:	d106      	bne.n	131cc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1a4>
   131be:	f885 b002 	strb.w	fp, [r5, #2]
   131c2:	f000 f9eb 	bl	1359c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x574>
   131c6:	b005      	add	sp, #20
   131c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   131cc:	6a68      	ldr	r0, [r5, #36]	; 0x24
   131ce:	7841      	ldrb	r1, [r0, #1]
   131d0:	8169      	strh	r1, [r5, #10]
   131d2:	2900      	cmp	r1, #0
   131d4:	bf08      	it	eq
   131d6:	62ae      	streq	r6, [r5, #40]	; 0x28
   131d8:	d003      	beq.n	131e2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1ba>
   131da:	6b68      	ldr	r0, [r5, #52]	; 0x34
   131dc:	f00c fc12 	bl	1fa04 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>
   131e0:	62a8      	str	r0, [r5, #40]	; 0x28
   131e2:	89e8      	ldrh	r0, [r5, #14]
   131e4:	f440 7080 	orr.w	r0, r0, #256	; 0x100
   131e8:	81e8      	strh	r0, [r5, #14]
   131ea:	6a68      	ldr	r0, [r5, #36]	; 0x24
   131ec:	7bf9      	ldrb	r1, [r7, #15]
   131ee:	7800      	ldrb	r0, [r0, #0]
   131f0:	f3c0 0080 	ubfx	r0, r0, #2, #1
   131f4:	4288      	cmp	r0, r1
   131f6:	bf08      	it	eq
   131f8:	f04f 0901 	moveq.w	r9, #1
   131fc:	d047      	beq.n	1328e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x266>
   131fe:	f8d8 0004 	ldr.w	r0, [r8, #4]
   13202:	a902      	add	r1, sp, #8
   13204:	f100 04a0 	add.w	r4, r0, #160	; 0xa0
   13208:	f890 00ae 	ldrb.w	r0, [r0, #174]	; 0xae
   1320c:	2800      	cmp	r0, #0
   1320e:	d03a      	beq.n	13286 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x25e>
   13210:	2802      	cmp	r0, #2
   13212:	d10b      	bne.n	1322c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x204>
   13214:	6b28      	ldr	r0, [r5, #48]	; 0x30
   13216:	f00c fa4e 	bl	1f6b6 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA>
   1321a:	2800      	cmp	r0, #0
   1321c:	d04a      	beq.n	132b4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x28c>
   1321e:	e9d4 101c 	ldrd	r1, r0, [r4, #112]	; 0x70
   13222:	1c49      	adds	r1, r1, #1
   13224:	f140 0000 	adc.w	r0, r0, #0
   13228:	e9c4 101c 	strd	r1, r0, [r4, #112]	; 0x70
   1322c:	73a6      	strb	r6, [r4, #14]
   1322e:	f898 0000 	ldrb.w	r0, [r8]
   13232:	2800      	cmp	r0, #0
   13234:	bf1c      	itt	ne
   13236:	7aa0      	ldrbne	r0, [r4, #10]
   13238:	2800      	cmpne	r0, #0
   1323a:	d009      	beq.n	13250 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x228>
   1323c:	72a6      	strb	r6, [r4, #10]
   1323e:	89aa      	ldrh	r2, [r5, #12]
   13240:	4631      	mov	r1, r6
   13242:	f042 0210 	orr.w	r2, r2, #16
   13246:	81aa      	strh	r2, [r5, #12]
   13248:	696a      	ldr	r2, [r5, #20]
   1324a:	f04f 0010 	mov.w	r0, #16
   1324e:	4790      	blx	r2
   13250:	7a60      	ldrb	r0, [r4, #9]
   13252:	b190      	cbz	r0, 1327a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x252>
   13254:	7266      	strb	r6, [r4, #9]
   13256:	f7ff fb53 	bl	12900 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>
   1325a:	b388      	cbz	r0, 132c0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x298>
   1325c:	89aa      	ldrh	r2, [r5, #12]
   1325e:	2008      	movs	r0, #8
   13260:	f042 0208 	orr.w	r2, r2, #8
   13264:	81aa      	strh	r2, [r5, #12]
   13266:	696a      	ldr	r2, [r5, #20]
   13268:	2100      	movs	r1, #0
   1326a:	4790      	blx	r2
   1326c:	e9d4 101c 	ldrd	r1, r0, [r4, #112]	; 0x70
   13270:	1c49      	adds	r1, r1, #1
   13272:	f140 0000 	adc.w	r0, r0, #0
   13276:	e9c4 101c 	strd	r1, r0, [r4, #112]	; 0x70
   1327a:	7be0      	ldrb	r0, [r4, #15]
   1327c:	2801      	cmp	r0, #1
   1327e:	bf0c      	ite	eq
   13280:	73e6      	strbeq	r6, [r4, #15]
   13282:	f884 b00f 	strbne.w	fp, [r4, #15]
   13286:	89e8      	ldrh	r0, [r5, #14]
   13288:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
   1328c:	81e8      	strh	r0, [r5, #14]
   1328e:	6a68      	ldr	r0, [r5, #36]	; 0x24
   13290:	7c39      	ldrb	r1, [r7, #16]
   13292:	7800      	ldrb	r0, [r0, #0]
   13294:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   13298:	4288      	cmp	r0, r1
   1329a:	d122      	bne.n	132e2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2ba>
   1329c:	f001 fd5a 	bl	14d54 <sym_VLZYODAV2LKRVZ5U6Q4CDF3UFZES3VV342R37AI>
   132a0:	b1e0      	cbz	r0, 132dc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2b4>
   132a2:	6a68      	ldr	r0, [r5, #36]	; 0x24
   132a4:	7801      	ldrb	r1, [r0, #0]
   132a6:	f001 0103 	and.w	r1, r1, #3
   132aa:	2901      	cmp	r1, #1
   132ac:	bf18      	it	ne
   132ae:	2902      	cmpne	r1, #2
   132b0:	d00b      	beq.n	132ca <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2a2>
   132b2:	e013      	b.n	132dc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2b4>
   132b4:	f240 31b9 	movw	r1, #953	; 0x3b9
   132b8:	f04f 0027 	mov.w	r0, #39	; 0x27
   132bc:	f7fe fb60 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   132c0:	f44f 7174 	mov.w	r1, #976	; 0x3d0
   132c4:	2027      	movs	r0, #39	; 0x27
   132c6:	f7fe fb5b 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   132ca:	7840      	ldrb	r0, [r0, #1]
   132cc:	79e9      	ldrb	r1, [r5, #7]
   132ce:	4288      	cmp	r0, r1
   132d0:	d904      	bls.n	132dc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2b4>
   132d2:	7968      	ldrb	r0, [r5, #5]
   132d4:	f040 0010 	orr.w	r0, r0, #16
   132d8:	7168      	strb	r0, [r5, #5]
   132da:	e002      	b.n	132e2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2ba>
   132dc:	4668      	mov	r0, sp
   132de:	f000 f9a5 	bl	1362c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x604>
   132e2:	7eb8      	ldrb	r0, [r7, #26]
   132e4:	b3c8      	cbz	r0, 1335a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x332>
   132e6:	f898 1000 	ldrb.w	r1, [r8]
   132ea:	f8d8 0004 	ldr.w	r0, [r8, #4]
   132ee:	2900      	cmp	r1, #0
   132f0:	bf0c      	ite	eq
   132f2:	2201      	moveq	r2, #1
   132f4:	2200      	movne	r2, #0
   132f6:	495f      	ldr	r1, [pc, #380]	; (13474 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x44c>)
   132f8:	760a      	strb	r2, [r1, #24]
   132fa:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
   132fe:	e9c1 2304 	strd	r2, r3, [r1, #16]
   13302:	6941      	ldr	r1, [r0, #20]
   13304:	f641 524c 	movw	r2, #7500	; 0x1d4c
   13308:	4291      	cmp	r1, r2
   1330a:	bf34      	ite	cc
   1330c:	f04f 0c04 	movcc.w	ip, #4
   13310:	f04f 0c00 	movcs.w	ip, #0
   13314:	f890 006e 	ldrb.w	r0, [r0, #110]	; 0x6e
   13318:	2801      	cmp	r0, #1
   1331a:	bf08      	it	eq
   1331c:	2300      	moveq	r3, #0
   1331e:	d01d      	beq.n	1335c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x334>
   13320:	2802      	cmp	r0, #2
   13322:	bf08      	it	eq
   13324:	2301      	moveq	r3, #1
   13326:	d019      	beq.n	1335c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x334>
   13328:	2804      	cmp	r0, #4
   1332a:	bf08      	it	eq
   1332c:	2303      	moveq	r3, #3
   1332e:	d015      	beq.n	1335c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x334>
   13330:	2808      	cmp	r0, #8
   13332:	bf08      	it	eq
   13334:	2302      	moveq	r3, #2
   13336:	d011      	beq.n	1335c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x334>
   13338:	f240 411a 	movw	r1, #1050	; 0x41a
   1333c:	2006      	movs	r0, #6
   1333e:	f7fe fb1f 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   13342:	2800      	cmp	r0, #0
   13344:	bf18      	it	ne
   13346:	f008 ff6b 	blne	1c220 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA>
   1334a:	78e8      	ldrb	r0, [r5, #3]
   1334c:	1c40      	adds	r0, r0, #1
   1334e:	70e8      	strb	r0, [r5, #3]
   13350:	89e8      	ldrh	r0, [r5, #14]
   13352:	f440 7000 	orr.w	r0, r0, #512	; 0x200
   13356:	81e8      	strh	r0, [r5, #14]
   13358:	e7c3      	b.n	132e2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2ba>
   1335a:	e004      	b.n	13366 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x33e>
   1335c:	22fb      	movs	r2, #251	; 0xfb
   1335e:	4945      	ldr	r1, [pc, #276]	; (13474 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x44c>)
   13360:	4660      	mov	r0, ip
   13362:	f008 fe5d 	bl	1c020 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA>
   13366:	4c44      	ldr	r4, [pc, #272]	; (13478 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x450>)
   13368:	9804      	ldr	r0, [sp, #16]
   1336a:	f04f 0b00 	mov.w	fp, #0
   1336e:	b920      	cbnz	r0, 1337a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x352>
   13370:	78e9      	ldrb	r1, [r5, #3]
   13372:	2001      	movs	r0, #1
   13374:	f7ff fea4 	bl	130c0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x98>
   13378:	b358      	cbz	r0, 133d2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3aa>
   1337a:	f009 fedf 	bl	1d13c <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ>
   1337e:	f89d 0000 	ldrb.w	r0, [sp]
   13382:	b118      	cbz	r0, 1338c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x364>
   13384:	a901      	add	r1, sp, #4
   13386:	2000      	movs	r0, #0
   13388:	f7ff fd9c 	bl	12ec4 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
   1338c:	89b8      	ldrh	r0, [r7, #12]
   1338e:	f1b9 0f00 	cmp.w	r9, #0
   13392:	d00d      	beq.n	133b0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x388>
   13394:	b940      	cbnz	r0, 133a8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x380>
   13396:	f898 0000 	ldrb.w	r0, [r8]
   1339a:	b128      	cbz	r0, 133a8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x380>
   1339c:	88e0      	ldrh	r0, [r4, #6]
   1339e:	2800      	cmp	r0, #0
   133a0:	bf04      	itt	eq
   133a2:	8920      	ldrheq	r0, [r4, #8]
   133a4:	2800      	cmpeq	r0, #0
   133a6:	d003      	beq.n	133b0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x388>
   133a8:	8960      	ldrh	r0, [r4, #10]
   133aa:	f100 0001 	add.w	r0, r0, #1
   133ae:	8160      	strh	r0, [r4, #10]
   133b0:	f1ba 0f00 	cmp.w	sl, #0
   133b4:	d007      	beq.n	133c6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x39e>
   133b6:	88e0      	ldrh	r0, [r4, #6]
   133b8:	1c40      	adds	r0, r0, #1
   133ba:	80e0      	strh	r0, [r4, #6]
   133bc:	70ee      	strb	r6, [r5, #3]
   133be:	482c      	ldr	r0, [pc, #176]	; (13470 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x448>)
   133c0:	f001 fe7a 	bl	150b8 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA>
   133c4:	e002      	b.n	133cc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3a4>
   133c6:	8920      	ldrh	r0, [r4, #8]
   133c8:	1c40      	adds	r0, r0, #1
   133ca:	8120      	strh	r0, [r4, #8]
   133cc:	f04f 0b01 	mov.w	fp, #1
   133d0:	e030      	b.n	13434 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x40c>
   133d2:	f89d 0000 	ldrb.w	r0, [sp]
   133d6:	b118      	cbz	r0, 133e0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b8>
   133d8:	a901      	add	r1, sp, #4
   133da:	2001      	movs	r0, #1
   133dc:	f7ff fd72 	bl	12ec4 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
   133e0:	2000      	movs	r0, #0
   133e2:	f000 f9e1 	bl	137a8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x780>
   133e6:	f89d 0000 	ldrb.w	r0, [sp]
   133ea:	b118      	cbz	r0, 133f4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3cc>
   133ec:	a901      	add	r1, sp, #4
   133ee:	2002      	movs	r0, #2
   133f0:	f7ff fd68 	bl	12ec4 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
   133f4:	89b8      	ldrh	r0, [r7, #12]
   133f6:	f1b9 0f00 	cmp.w	r9, #0
   133fa:	d00d      	beq.n	13418 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3f0>
   133fc:	b940      	cbnz	r0, 13410 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3e8>
   133fe:	f898 0000 	ldrb.w	r0, [r8]
   13402:	b128      	cbz	r0, 13410 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3e8>
   13404:	88e0      	ldrh	r0, [r4, #6]
   13406:	2800      	cmp	r0, #0
   13408:	bf04      	itt	eq
   1340a:	8920      	ldrheq	r0, [r4, #8]
   1340c:	2800      	cmpeq	r0, #0
   1340e:	d003      	beq.n	13418 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3f0>
   13410:	8960      	ldrh	r0, [r4, #10]
   13412:	f100 0001 	add.w	r0, r0, #1
   13416:	8160      	strh	r0, [r4, #10]
   13418:	f1ba 0f00 	cmp.w	sl, #0
   1341c:	d007      	beq.n	1342e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x406>
   1341e:	88e0      	ldrh	r0, [r4, #6]
   13420:	1c40      	adds	r0, r0, #1
   13422:	80e0      	strh	r0, [r4, #6]
   13424:	70ee      	strb	r6, [r5, #3]
   13426:	4812      	ldr	r0, [pc, #72]	; (13470 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x448>)
   13428:	f001 fe46 	bl	150b8 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA>
   1342c:	e002      	b.n	13434 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x40c>
   1342e:	8920      	ldrh	r0, [r4, #8]
   13430:	1c40      	adds	r0, r0, #1
   13432:	8120      	strh	r0, [r4, #8]
   13434:	9802      	ldr	r0, [sp, #8]
   13436:	b140      	cbz	r0, 1344a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x422>
   13438:	f00c f9ae 	bl	1f798 <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>
   1343c:	f8d8 1004 	ldr.w	r1, [r8, #4]
   13440:	1c40      	adds	r0, r0, #1
   13442:	7206      	strb	r6, [r0, #8]
   13444:	220d      	movs	r2, #13
   13446:	f001 f881 	bl	1454c <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
   1344a:	9801      	ldr	r0, [sp, #4]
   1344c:	b138      	cbz	r0, 1345e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x436>
   1344e:	f8d8 1004 	ldr.w	r1, [r8, #4]
   13452:	f100 0208 	add.w	r2, r0, #8
   13456:	7016      	strb	r6, [r2, #0]
   13458:	2227      	movs	r2, #39	; 0x27
   1345a:	f001 f877 	bl	1454c <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
   1345e:	f1bb 0f00 	cmp.w	fp, #0
   13462:	bf18      	it	ne
   13464:	f000 f89a 	blne	1359c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x574>
   13468:	b005      	add	sp, #20
   1346a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1346e:	0000      	.short	0x0000
   13470:	20000130 	.word	0x20000130
   13474:	20000e60 	.word	0x20000e60
   13478:	20000eba 	.word	0x20000eba
   1347c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   13480:	4e44      	ldr	r6, [pc, #272]	; (13594 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x56c>)
   13482:	4680      	mov	r8, r0
   13484:	f1a6 0538 	sub.w	r5, r6, #56	; 0x38
   13488:	6870      	ldr	r0, [r6, #4]
   1348a:	460f      	mov	r7, r1
   1348c:	f100 04a0 	add.w	r4, r0, #160	; 0xa0
   13490:	7828      	ldrb	r0, [r5, #0]
   13492:	2801      	cmp	r0, #1
   13494:	d004      	beq.n	134a0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x478>
   13496:	f240 4172 	movw	r1, #1138	; 0x472
   1349a:	2027      	movs	r0, #39	; 0x27
   1349c:	f7fe fa70 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   134a0:	7a20      	ldrb	r0, [r4, #8]
   134a2:	f04f 0901 	mov.w	r9, #1
   134a6:	b168      	cbz	r0, 134c4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x49c>
   134a8:	2100      	movs	r1, #0
   134aa:	7221      	strb	r1, [r4, #8]
   134ac:	89aa      	ldrh	r2, [r5, #12]
   134ae:	2004      	movs	r0, #4
   134b0:	f042 0204 	orr.w	r2, r2, #4
   134b4:	81aa      	strh	r2, [r5, #12]
   134b6:	696a      	ldr	r2, [r5, #20]
   134b8:	4790      	blx	r2
   134ba:	7830      	ldrb	r0, [r6, #0]
   134bc:	2800      	cmp	r0, #0
   134be:	bf18      	it	ne
   134c0:	f884 900a 	strbne.w	r9, [r4, #10]
   134c4:	6a29      	ldr	r1, [r5, #32]
   134c6:	f04f 0a03 	mov.w	sl, #3
   134ca:	7808      	ldrb	r0, [r1, #0]
   134cc:	ea3a 0000 	bics.w	r0, sl, r0
   134d0:	d10d      	bne.n	134ee <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4c6>
   134d2:	7ba0      	ldrb	r0, [r4, #14]
   134d4:	b9a0      	cbnz	r0, 13500 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4d8>
   134d6:	89aa      	ldrh	r2, [r5, #12]
   134d8:	2002      	movs	r0, #2
   134da:	f042 0202 	orr.w	r2, r2, #2
   134de:	81aa      	strh	r2, [r5, #12]
   134e0:	696a      	ldr	r2, [r5, #20]
   134e2:	4790      	blx	r2
   134e4:	6a28      	ldr	r0, [r5, #32]
   134e6:	7800      	ldrb	r0, [r0, #0]
   134e8:	ea3a 0000 	bics.w	r0, sl, r0
   134ec:	d008      	beq.n	13500 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4d8>
   134ee:	6a28      	ldr	r0, [r5, #32]
   134f0:	7840      	ldrb	r0, [r0, #1]
   134f2:	2800      	cmp	r0, #0
   134f4:	bf0e      	itee	eq
   134f6:	f884 900e 	strbeq.w	r9, [r4, #14]
   134fa:	2002      	movne	r0, #2
   134fc:	73a0      	strbne	r0, [r4, #14]
   134fe:	e001      	b.n	13504 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4dc>
   13500:	f884 a00e 	strb.w	sl, [r4, #14]
   13504:	7ee0      	ldrb	r0, [r4, #27]
   13506:	2800      	cmp	r0, #0
   13508:	d032      	beq.n	13570 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x548>
   1350a:	7830      	ldrb	r0, [r6, #0]
   1350c:	7a6d      	ldrb	r5, [r5, #9]
   1350e:	f8d6 9004 	ldr.w	r9, [r6, #4]
   13512:	2800      	cmp	r0, #0
   13514:	bf0c      	ite	eq
   13516:	2001      	moveq	r0, #1
   13518:	2000      	movne	r0, #0
   1351a:	f080 0101 	eor.w	r1, r0, #1
   1351e:	481e      	ldr	r0, [pc, #120]	; (13598 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x570>)
   13520:	7601      	strb	r1, [r0, #24]
   13522:	e9d4 121e 	ldrd	r1, r2, [r4, #120]	; 0x78
   13526:	e9c0 1204 	strd	r1, r2, [r0, #16]
   1352a:	f001 fc13 	bl	14d54 <sym_VLZYODAV2LKRVZ5U6Q4CDF3UFZES3VV342R37AI>
   1352e:	2800      	cmp	r0, #0
   13530:	bf18      	it	ne
   13532:	2d2b      	cmpne	r5, #43	; 0x2b
   13534:	bf38      	it	cc
   13536:	252b      	movcc	r5, #43	; 0x2b
   13538:	2001      	movs	r0, #1
   1353a:	f899 106f 	ldrb.w	r1, [r9, #111]	; 0x6f
   1353e:	2901      	cmp	r1, #1
   13540:	bf08      	it	eq
   13542:	2300      	moveq	r3, #0
   13544:	d010      	beq.n	13568 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x540>
   13546:	2902      	cmp	r1, #2
   13548:	bf08      	it	eq
   1354a:	2301      	moveq	r3, #1
   1354c:	d00c      	beq.n	13568 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x540>
   1354e:	2904      	cmp	r1, #4
   13550:	bf08      	it	eq
   13552:	2303      	moveq	r3, #3
   13554:	d008      	beq.n	13568 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x540>
   13556:	2908      	cmp	r1, #8
   13558:	bf08      	it	eq
   1355a:	2302      	moveq	r3, #2
   1355c:	d004      	beq.n	13568 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x540>
   1355e:	f240 411a 	movw	r1, #1050	; 0x41a
   13562:	2006      	movs	r0, #6
   13564:	f7fe fa0c 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   13568:	462a      	mov	r2, r5
   1356a:	490b      	ldr	r1, [pc, #44]	; (13598 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x570>)
   1356c:	f008 fd58 	bl	1c020 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA>
   13570:	ea37 0008 	bics.w	r0, r7, r8
   13574:	d004      	beq.n	13580 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x558>
   13576:	2100      	movs	r1, #0
   13578:	4608      	mov	r0, r1
   1357a:	f7ff fda1 	bl	130c0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x98>
   1357e:	b118      	cbz	r0, 13588 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x560>
   13580:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   13584:	f000 b80a 	b.w	1359c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x574>
   13588:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1358c:	2000      	movs	r0, #0
   1358e:	f000 b89d 	b.w	136cc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6a4>
   13592:	0000      	.short	0x0000
   13594:	20000130 	.word	0x20000130
   13598:	20000e60 	.word	0x20000e60
   1359c:	b510      	push	{r4, lr}
   1359e:	f008 ff11 	bl	1c3c4 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
   135a2:	f008 fe05 	bl	1c1b0 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
   135a6:	4c13      	ldr	r4, [pc, #76]	; (135f4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5cc>)
   135a8:	2100      	movs	r1, #0
   135aa:	6962      	ldr	r2, [r4, #20]
   135ac:	89e0      	ldrh	r0, [r4, #14]
   135ae:	4790      	blx	r2
   135b0:	4811      	ldr	r0, [pc, #68]	; (135f8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5d0>)
   135b2:	7f01      	ldrb	r1, [r0, #28]
   135b4:	b1b1      	cbz	r1, 135e4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5bc>
   135b6:	f5a0 71b1 	sub.w	r1, r0, #354	; 0x162
   135ba:	f8d1 2162 	ldr.w	r2, [r1, #354]	; 0x162
   135be:	f8c1 2170 	str.w	r2, [r1, #368]	; 0x170
   135c2:	f8d1 2166 	ldr.w	r2, [r1, #358]	; 0x166
   135c6:	f8c1 2174 	str.w	r2, [r1, #372]	; 0x174
   135ca:	f8d1 216a 	ldr.w	r2, [r1, #362]	; 0x16a
   135ce:	f8c1 2178 	str.w	r2, [r1, #376]	; 0x178
   135d2:	f8b1 216e 	ldrh.w	r2, [r1, #366]	; 0x16e
   135d6:	f8a1 217c 	strh.w	r2, [r1, #380]	; 0x17c
   135da:	2221      	movs	r2, #33	; 0x21
   135dc:	4907      	ldr	r1, [pc, #28]	; (135fc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5d4>)
   135de:	301d      	adds	r0, #29
   135e0:	f000 ffb4 	bl	1454c <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
   135e4:	69e2      	ldr	r2, [r4, #28]
   135e6:	7961      	ldrb	r1, [r4, #5]
   135e8:	78a0      	ldrb	r0, [r4, #2]
   135ea:	4790      	blx	r2
   135ec:	2000      	movs	r0, #0
   135ee:	7020      	strb	r0, [r4, #0]
   135f0:	bd10      	pop	{r4, pc}
   135f2:	0000      	.short	0x0000
   135f4:	200000f8 	.word	0x200000f8
   135f8:	20000eba 	.word	0x20000eba
   135fc:	00013099 	.word	0x00013099
   13600:	4808      	ldr	r0, [pc, #32]	; (13624 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5fc>)
   13602:	b510      	push	{r4, lr}
   13604:	7800      	ldrb	r0, [r0, #0]
   13606:	2802      	cmp	r0, #2
   13608:	d004      	beq.n	13614 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5ec>
   1360a:	f240 211e 	movw	r1, #542	; 0x21e
   1360e:	2027      	movs	r0, #39	; 0x27
   13610:	f7fe f9b6 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   13614:	4904      	ldr	r1, [pc, #16]	; (13628 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x600>)
   13616:	2001      	movs	r0, #1
   13618:	7308      	strb	r0, [r1, #12]
   1361a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1361e:	f7ff bfbd 	b.w	1359c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x574>
   13622:	0000      	.short	0x0000
   13624:	200000f8 	.word	0x200000f8
   13628:	20000eba 	.word	0x20000eba
   1362c:	b570      	push	{r4, r5, r6, lr}
   1362e:	4920      	ldr	r1, [pc, #128]	; (136b0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x688>)
   13630:	4a20      	ldr	r2, [pc, #128]	; (136b4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x68c>)
   13632:	2501      	movs	r5, #1
   13634:	6849      	ldr	r1, [r1, #4]
   13636:	f101 04a0 	add.w	r4, r1, #160	; 0xa0
   1363a:	6a51      	ldr	r1, [r2, #36]	; 0x24
   1363c:	780b      	ldrb	r3, [r1, #0]
   1363e:	f003 0303 	and.w	r3, r3, #3
   13642:	2b01      	cmp	r3, #1
   13644:	bf18      	it	ne
   13646:	2b02      	cmpne	r3, #2
   13648:	d00e      	beq.n	13668 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x640>
   1364a:	2b03      	cmp	r3, #3
   1364c:	d128      	bne.n	136a0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x678>
   1364e:	7225      	strb	r5, [r4, #8]
   13650:	89d3      	ldrh	r3, [r2, #14]
   13652:	4628      	mov	r0, r5
   13654:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   13658:	81d3      	strh	r3, [r2, #14]
   1365a:	8993      	ldrh	r3, [r2, #12]
   1365c:	f043 0301 	orr.w	r3, r3, #1
   13660:	8193      	strh	r3, [r2, #12]
   13662:	6952      	ldr	r2, [r2, #20]
   13664:	4790      	blx	r2
   13666:	e01b      	b.n	136a0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x678>
   13668:	7849      	ldrb	r1, [r1, #1]
   1366a:	b1c9      	cbz	r1, 136a0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x678>
   1366c:	89d3      	ldrh	r3, [r2, #14]
   1366e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   13672:	81d3      	strh	r3, [r2, #14]
   13674:	6a93      	ldr	r3, [r2, #40]	; 0x28
   13676:	2b00      	cmp	r3, #0
   13678:	bf08      	it	eq
   1367a:	bd70      	popeq	{r4, r5, r6, pc}
   1367c:	29fb      	cmp	r1, #251	; 0xfb
   1367e:	d80a      	bhi.n	13696 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x66e>
   13680:	7991      	ldrb	r1, [r2, #6]
   13682:	2900      	cmp	r1, #0
   13684:	bf04      	itt	eq
   13686:	7005      	strbeq	r5, [r0, #0]
   13688:	bd70      	popeq	{r4, r5, r6, pc}
   1368a:	2020      	movs	r0, #32
   1368c:	6952      	ldr	r2, [r2, #20]
   1368e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   13692:	2100      	movs	r1, #0
   13694:	4710      	bx	r2
   13696:	7950      	ldrb	r0, [r2, #5]
   13698:	f040 0010 	orr.w	r0, r0, #16
   1369c:	7150      	strb	r0, [r2, #5]
   1369e:	bd70      	pop	{r4, r5, r6, pc}
   136a0:	7c20      	ldrb	r0, [r4, #16]
   136a2:	2801      	cmp	r0, #1
   136a4:	bf06      	itte	eq
   136a6:	2000      	moveq	r0, #0
   136a8:	7420      	strbeq	r0, [r4, #16]
   136aa:	7425      	strbne	r5, [r4, #16]
   136ac:	bd70      	pop	{r4, r5, r6, pc}
   136ae:	0000      	.short	0x0000
   136b0:	20000130 	.word	0x20000130
   136b4:	200000f8 	.word	0x200000f8
   136b8:	4803      	ldr	r0, [pc, #12]	; (136c8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6a0>)
   136ba:	7800      	ldrb	r0, [r0, #0]
   136bc:	2800      	cmp	r0, #0
   136be:	bf08      	it	eq
   136c0:	4770      	bxeq	lr
   136c2:	f7ff bf6b 	b.w	1359c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x574>
   136c6:	0000      	.short	0x0000
   136c8:	200000f8 	.word	0x200000f8
   136cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   136d0:	4f32      	ldr	r7, [pc, #200]	; (1379c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x774>)
   136d2:	4606      	mov	r6, r0
   136d4:	f1a7 0538 	sub.w	r5, r7, #56	; 0x38
   136d8:	687c      	ldr	r4, [r7, #4]
   136da:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
   136dc:	f104 08a0 	add.w	r8, r4, #160	; 0xa0
   136e0:	6268      	str	r0, [r5, #36]	; 0x24
   136e2:	f001 fb37 	bl	14d54 <sym_VLZYODAV2LKRVZ5U6Q4CDF3UFZES3VV342R37AI>
   136e6:	2800      	cmp	r0, #0
   136e8:	bf08      	it	eq
   136ea:	79e8      	ldrbeq	r0, [r5, #7]
   136ec:	d010      	beq.n	13710 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6e8>
   136ee:	6878      	ldr	r0, [r7, #4]
   136f0:	f890 10bb 	ldrb.w	r1, [r0, #187]	; 0xbb
   136f4:	2900      	cmp	r1, #0
   136f6:	bf14      	ite	ne
   136f8:	2004      	movne	r0, #4
   136fa:	2000      	moveq	r0, #0
   136fc:	f100 022b 	add.w	r2, r0, #43	; 0x2b
   13700:	79e8      	ldrb	r0, [r5, #7]
   13702:	4282      	cmp	r2, r0
   13704:	d904      	bls.n	13710 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6e8>
   13706:	2900      	cmp	r1, #0
   13708:	bf14      	ite	ne
   1370a:	2004      	movne	r0, #4
   1370c:	2000      	moveq	r0, #0
   1370e:	302b      	adds	r0, #43	; 0x2b
   13710:	2e00      	cmp	r6, #0
   13712:	bf08      	it	eq
   13714:	28ff      	cmpeq	r0, #255	; 0xff
   13716:	d105      	bne.n	13724 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6fc>
   13718:	f894 106f 	ldrb.w	r1, [r4, #111]	; 0x6f
   1371c:	f894 206e 	ldrb.w	r2, [r4, #110]	; 0x6e
   13720:	4291      	cmp	r1, r2
   13722:	d003      	beq.n	1372c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x704>
   13724:	f894 106f 	ldrb.w	r1, [r4, #111]	; 0x6f
   13728:	f009 fd2a 	bl	1d180 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ>
   1372c:	f898 001b 	ldrb.w	r0, [r8, #27]
   13730:	b1a8      	cbz	r0, 1375e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x736>
   13732:	481b      	ldr	r0, [pc, #108]	; (137a0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x778>)
   13734:	f009 fad8 	bl	1cce8 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
   13738:	7838      	ldrb	r0, [r7, #0]
   1373a:	2800      	cmp	r0, #0
   1373c:	bf0c      	ite	eq
   1373e:	2001      	moveq	r0, #1
   13740:	2000      	movne	r0, #0
   13742:	f080 0101 	eor.w	r1, r0, #1
   13746:	4817      	ldr	r0, [pc, #92]	; (137a4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x77c>)
   13748:	7601      	strb	r1, [r0, #24]
   1374a:	e9d8 121e 	ldrd	r1, r2, [r8, #120]	; 0x78
   1374e:	e9c0 1204 	strd	r1, r2, [r0, #16]
   13752:	f5a0 7184 	sub.w	r1, r0, #264	; 0x108
   13756:	6a68      	ldr	r0, [r5, #36]	; 0x24
   13758:	f008 fcca 	bl	1c0f0 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA>
   1375c:	e004      	b.n	13768 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x740>
   1375e:	6a68      	ldr	r0, [r5, #36]	; 0x24
   13760:	f009 fac2 	bl	1cce8 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
   13764:	f008 fd24 	bl	1c1b0 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
   13768:	b93e      	cbnz	r6, 1377a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x752>
   1376a:	f894 006f 	ldrb.w	r0, [r4, #111]	; 0x6f
   1376e:	f010 000c 	ands.w	r0, r0, #12
   13772:	bf18      	it	ne
   13774:	2028      	movne	r0, #40	; 0x28
   13776:	f009 f91b 	bl	1c9b0 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
   1377a:	6960      	ldr	r0, [r4, #20]
   1377c:	f641 514c 	movw	r1, #7500	; 0x1d4c
   13780:	4288      	cmp	r0, r1
   13782:	f894 206e 	ldrb.w	r2, [r4, #110]	; 0x6e
   13786:	f04f 0100 	mov.w	r1, #0
   1378a:	bf34      	ite	cc
   1378c:	2001      	movcc	r0, #1
   1378e:	2000      	movcs	r0, #0
   13790:	f009 fc6a 	bl	1d068 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
   13794:	2002      	movs	r0, #2
   13796:	7028      	strb	r0, [r5, #0]
   13798:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1379c:	20000130 	.word	0x20000130
   137a0:	20000d58 	.word	0x20000d58
   137a4:	20000e60 	.word	0x20000e60
   137a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   137ac:	4f86      	ldr	r7, [pc, #536]	; (139c8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x9a0>)
   137ae:	b083      	sub	sp, #12
   137b0:	f04f 0900 	mov.w	r9, #0
   137b4:	687d      	ldr	r5, [r7, #4]
   137b6:	f1a7 0a18 	sub.w	sl, r7, #24
   137ba:	f105 06a0 	add.w	r6, r5, #160	; 0xa0
   137be:	f88d 9000 	strb.w	r9, [sp]
   137c2:	4680      	mov	r8, r0
   137c4:	f001 fac6 	bl	14d54 <sym_VLZYODAV2LKRVZ5U6Q4CDF3UFZES3VV342R37AI>
   137c8:	f1a7 0438 	sub.w	r4, r7, #56	; 0x38
   137cc:	2800      	cmp	r0, #0
   137ce:	bf08      	it	eq
   137d0:	79e0      	ldrbeq	r0, [r4, #7]
   137d2:	d010      	beq.n	137f6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7ce>
   137d4:	6878      	ldr	r0, [r7, #4]
   137d6:	f890 10bb 	ldrb.w	r1, [r0, #187]	; 0xbb
   137da:	2900      	cmp	r1, #0
   137dc:	bf14      	ite	ne
   137de:	2004      	movne	r0, #4
   137e0:	2000      	moveq	r0, #0
   137e2:	f100 022b 	add.w	r2, r0, #43	; 0x2b
   137e6:	79e0      	ldrb	r0, [r4, #7]
   137e8:	4282      	cmp	r2, r0
   137ea:	d904      	bls.n	137f6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7ce>
   137ec:	2900      	cmp	r1, #0
   137ee:	bf14      	ite	ne
   137f0:	2004      	movne	r0, #4
   137f2:	2000      	moveq	r0, #0
   137f4:	302b      	adds	r0, #43	; 0x2b
   137f6:	f1b8 0f00 	cmp.w	r8, #0
   137fa:	bf08      	it	eq
   137fc:	28ff      	cmpeq	r0, #255	; 0xff
   137fe:	d105      	bne.n	1380c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7e4>
   13800:	f895 006f 	ldrb.w	r0, [r5, #111]	; 0x6f
   13804:	f895 106e 	ldrb.w	r1, [r5, #110]	; 0x6e
   13808:	4288      	cmp	r0, r1
   1380a:	d004      	beq.n	13816 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7ee>
   1380c:	20ff      	movs	r0, #255	; 0xff
   1380e:	f895 106e 	ldrb.w	r1, [r5, #110]	; 0x6e
   13812:	f009 fcb5 	bl	1d180 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ>
   13816:	7bb0      	ldrb	r0, [r6, #14]
   13818:	f8df b1b0 	ldr.w	fp, [pc, #432]	; 139cc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x9a4>
   1381c:	f04f 0801 	mov.w	r8, #1
   13820:	b150      	cbz	r0, 13838 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x810>
   13822:	2801      	cmp	r0, #1
   13824:	d031      	beq.n	1388a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x862>
   13826:	2802      	cmp	r0, #2
   13828:	d042      	beq.n	138b0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x888>
   1382a:	2803      	cmp	r0, #3
   1382c:	d050      	beq.n	138d0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x8a8>
   1382e:	f240 21d5 	movw	r1, #725	; 0x2d5
   13832:	2027      	movs	r0, #39	; 0x27
   13834:	f7fe f8a4 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   13838:	7a20      	ldrb	r0, [r4, #8]
   1383a:	f8ad 0004 	strh.w	r0, [sp, #4]
   1383e:	f8a5 0054 	strh.w	r0, [r5, #84]	; 0x54
   13842:	4650      	mov	r0, sl
   13844:	f7ff f886 	bl	12954 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
   13848:	b1a8      	cbz	r0, 13876 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x84e>
   1384a:	89a2      	ldrh	r2, [r4, #12]
   1384c:	6a21      	ldr	r1, [r4, #32]
   1384e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   13852:	81a2      	strh	r2, [r4, #12]
   13854:	6962      	ldr	r2, [r4, #20]
   13856:	2080      	movs	r0, #128	; 0x80
   13858:	4790      	blx	r2
   1385a:	f886 8009 	strb.w	r8, [r6, #9]
   1385e:	f8da 0000 	ldr.w	r0, [sl]
   13862:	78c0      	ldrb	r0, [r0, #3]
   13864:	281b      	cmp	r0, #27
   13866:	d13c      	bne.n	138e2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x8ba>
   13868:	f04f 0101 	mov.w	r1, #1
   1386c:	f105 0010 	add.w	r0, r5, #16
   13870:	f009 ffa0 	bl	1d7b4 <sym_FY64OI6JRV3CK6UZDJBVOPA33ZIK3BGBMGMWYKA>
   13874:	e035      	b.n	138e2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x8ba>
   13876:	466a      	mov	r2, sp
   13878:	a901      	add	r1, sp, #4
   1387a:	6b20      	ldr	r0, [r4, #48]	; 0x30
   1387c:	f00c f841 	bl	1f902 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI>
   13880:	6220      	str	r0, [r4, #32]
   13882:	b110      	cbz	r0, 1388a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x862>
   13884:	f896 1055 	ldrb.w	r1, [r6, #85]	; 0x55
   13888:	b111      	cbz	r1, 13890 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x868>
   1388a:	f8c4 b020 	str.w	fp, [r4, #32]
   1388e:	e028      	b.n	138e2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x8ba>
   13890:	f89d 1000 	ldrb.w	r1, [sp]
   13894:	b931      	cbnz	r1, 138a4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x87c>
   13896:	f8a0 9000 	strh.w	r9, [r0]
   1389a:	f880 9002 	strb.w	r9, [r0, #2]
   1389e:	2101      	movs	r1, #1
   138a0:	f00d f835 	bl	2090e <sym_IGXXIFMDOTCDOLQAILBV5BXIU5R6AALP5I4HZGQ>
   138a4:	f8bd 1004 	ldrh.w	r1, [sp, #4]
   138a8:	6a20      	ldr	r0, [r4, #32]
   138aa:	f00c ffa7 	bl	207fc <sym_7YTCAQN5IYKWCY5F36IVGAEEQIOP6X7YL63LRUI>
   138ae:	e018      	b.n	138e2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x8ba>
   138b0:	f8b5 0054 	ldrh.w	r0, [r5, #84]	; 0x54
   138b4:	f8ad 0004 	strh.w	r0, [sp, #4]
   138b8:	466a      	mov	r2, sp
   138ba:	a901      	add	r1, sp, #4
   138bc:	6b20      	ldr	r0, [r4, #48]	; 0x30
   138be:	f00c f820 	bl	1f902 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI>
   138c2:	6220      	str	r0, [r4, #32]
   138c4:	b968      	cbnz	r0, 138e2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x8ba>
   138c6:	f240 21bf 	movw	r1, #703	; 0x2bf
   138ca:	2027      	movs	r0, #39	; 0x27
   138cc:	f7fe f858 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   138d0:	4650      	mov	r0, sl
   138d2:	f7ff f83f 	bl	12954 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
   138d6:	b368      	cbz	r0, 13934 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x90c>
   138d8:	f8da 0000 	ldr.w	r0, [sl]
   138dc:	78c0      	ldrb	r0, [r0, #3]
   138de:	281b      	cmp	r0, #27
   138e0:	d0c2      	beq.n	13868 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x840>
   138e2:	6a20      	ldr	r0, [r4, #32]
   138e4:	f04f 0308 	mov.w	r3, #8
   138e8:	f04f 0a03 	mov.w	sl, #3
   138ec:	7801      	ldrb	r1, [r0, #0]
   138ee:	f001 01f7 	and.w	r1, r1, #247	; 0xf7
   138f2:	7001      	strb	r1, [r0, #0]
   138f4:	7bf2      	ldrb	r2, [r6, #15]
   138f6:	ea03 02c2 	and.w	r2, r3, r2, lsl #3
   138fa:	ea41 0102 	orr.w	r1, r1, r2
   138fe:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
   13902:	7001      	strb	r1, [r0, #0]
   13904:	7c32      	ldrb	r2, [r6, #16]
   13906:	f04f 0304 	mov.w	r3, #4
   1390a:	ea03 0282 	and.w	r2, r3, r2, lsl #2
   1390e:	ea41 0102 	orr.w	r1, r1, r2
   13912:	f001 01ef 	and.w	r1, r1, #239	; 0xef
   13916:	7001      	strb	r1, [r0, #0]
   13918:	ea3a 0101 	bics.w	r1, sl, r1
   1391c:	bf04      	itt	eq
   1391e:	78c0      	ldrbeq	r0, [r0, #3]
   13920:	2802      	cmpeq	r0, #2
   13922:	d015      	beq.n	13950 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x928>
   13924:	6b20      	ldr	r0, [r4, #48]	; 0x30
   13926:	f00b ffc6 	bl	1f8b6 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY>
   1392a:	2800      	cmp	r0, #0
   1392c:	bf18      	it	ne
   1392e:	46c1      	movne	r9, r8
   13930:	d005      	beq.n	1393e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x916>
   13932:	e00d      	b.n	13950 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x928>
   13934:	f44f 7132 	mov.w	r1, #712	; 0x2c8
   13938:	2027      	movs	r0, #39	; 0x27
   1393a:	f7fe f821 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1393e:	6a20      	ldr	r0, [r4, #32]
   13940:	7800      	ldrb	r0, [r0, #0]
   13942:	ea3a 0000 	bics.w	r0, sl, r0
   13946:	d003      	beq.n	13950 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x928>
   13948:	f7fe ffc2 	bl	128d0 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY>
   1394c:	f080 0901 	eor.w	r9, r0, #1
   13950:	6a20      	ldr	r0, [r4, #32]
   13952:	7801      	ldrb	r1, [r0, #0]
   13954:	ea41 1109 	orr.w	r1, r1, r9, lsl #4
   13958:	7001      	strb	r1, [r0, #0]
   1395a:	7eb1      	ldrb	r1, [r6, #26]
   1395c:	2900      	cmp	r1, #0
   1395e:	bf1c      	itt	ne
   13960:	7841      	ldrbne	r1, [r0, #1]
   13962:	2900      	cmpne	r1, #0
   13964:	d013      	beq.n	1398e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x966>
   13966:	481a      	ldr	r0, [pc, #104]	; (139d0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x9a8>)
   13968:	f009 f9be 	bl	1cce8 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
   1396c:	7838      	ldrb	r0, [r7, #0]
   1396e:	2800      	cmp	r0, #0
   13970:	bf0c      	ite	eq
   13972:	2101      	moveq	r1, #1
   13974:	2100      	movne	r1, #0
   13976:	4817      	ldr	r0, [pc, #92]	; (139d4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x9ac>)
   13978:	7601      	strb	r1, [r0, #24]
   1397a:	e9d6 121c 	ldrd	r1, r2, [r6, #112]	; 0x70
   1397e:	e9c0 1204 	strd	r1, r2, [r0, #16]
   13982:	f5a0 7084 	sub.w	r0, r0, #264	; 0x108
   13986:	6a21      	ldr	r1, [r4, #32]
   13988:	f008 fbb2 	bl	1c0f0 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA>
   1398c:	e003      	b.n	13996 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x96e>
   1398e:	f009 f9ab 	bl	1cce8 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
   13992:	f008 fc0d 	bl	1c1b0 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
   13996:	6968      	ldr	r0, [r5, #20]
   13998:	f641 514c 	movw	r1, #7500	; 0x1d4c
   1399c:	4288      	cmp	r0, r1
   1399e:	f895 206f 	ldrb.w	r2, [r5, #111]	; 0x6f
   139a2:	f04f 0101 	mov.w	r1, #1
   139a6:	bf34      	ite	cc
   139a8:	2001      	movcc	r0, #1
   139aa:	2000      	movcs	r0, #0
   139ac:	f009 fb5c 	bl	1d068 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
   139b0:	f884 8004 	strb.w	r8, [r4, #4]
   139b4:	6a20      	ldr	r0, [r4, #32]
   139b6:	8801      	ldrh	r1, [r0, #0]
   139b8:	8221      	strh	r1, [r4, #16]
   139ba:	7880      	ldrb	r0, [r0, #2]
   139bc:	74a0      	strb	r0, [r4, #18]
   139be:	f884 8000 	strb.w	r8, [r4]
   139c2:	b003      	add	sp, #12
   139c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   139c8:	20000130 	.word	0x20000130
   139cc:	20000e88 	.word	0x20000e88
   139d0:	20000d58 	.word	0x20000d58
   139d4:	20000e60 	.word	0x20000e60
   139d8:	00013601 	.word	0x00013601
   139dc:	00013141 	.word	0x00013141
   139e0:	0001347d 	.word	0x0001347d
   139e4:	000136b9 	.word	0x000136b9

000139e8 <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>:
   139e8:	4602      	mov	r2, r0
   139ea:	4807      	ldr	r0, [pc, #28]	; (13a08 <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA+0x20>)
   139ec:	b510      	push	{r4, lr}
   139ee:	7800      	ldrb	r0, [r0, #0]
   139f0:	b138      	cbz	r0, 13a02 <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA+0x1a>
   139f2:	4806      	ldr	r0, [pc, #24]	; (13a0c <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA+0x24>)
   139f4:	7881      	ldrb	r1, [r0, #2]
   139f6:	b121      	cbz	r1, 13a02 <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA+0x1a>
   139f8:	1cc0      	adds	r0, r0, #3
   139fa:	f008 fa63 	bl	1bec4 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>
   139fe:	2001      	movs	r0, #1
   13a00:	bd10      	pop	{r4, pc}
   13a02:	2000      	movs	r0, #0
   13a04:	bd10      	pop	{r4, pc}
   13a06:	0000      	.short	0x0000
   13a08:	200003c4 	.word	0x200003c4
   13a0c:	20001870 	.word	0x20001870

00013a10 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>:
   13a10:	4800      	ldr	r0, [pc, #0]	; (13a14 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI+0x4>)
   13a12:	4770      	bx	lr
   13a14:	20001a43 	.word	0x20001a43

00013a18 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>:
   13a18:	4904      	ldr	r1, [pc, #16]	; (13a2c <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x14>)
   13a1a:	788a      	ldrb	r2, [r1, #2]
   13a1c:	4282      	cmp	r2, r0
   13a1e:	bf86      	itte	hi
   13a20:	4408      	addhi	r0, r1
   13a22:	f890 0143 	ldrbhi.w	r0, [r0, #323]	; 0x143
   13a26:	2000      	movls	r0, #0
   13a28:	4770      	bx	lr
   13a2a:	0000      	.short	0x0000
   13a2c:	20001870 	.word	0x20001870

00013a30 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>:
   13a30:	4904      	ldr	r1, [pc, #16]	; (13a44 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x14>)
   13a32:	788a      	ldrb	r2, [r1, #2]
   13a34:	4282      	cmp	r2, r0
   13a36:	bf86      	itte	hi
   13a38:	eb01 1000 	addhi.w	r0, r1, r0, lsl #4
   13a3c:	3083      	addhi	r0, #131	; 0x83
   13a3e:	2000      	movls	r0, #0
   13a40:	4770      	bx	lr
   13a42:	0000      	.short	0x0000
   13a44:	20001870 	.word	0x20001870

00013a48 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>:
   13a48:	4a05      	ldr	r2, [pc, #20]	; (13a60 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA+0x18>)
   13a4a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   13a4e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
   13a52:	6802      	ldr	r2, [r0, #0]
   13a54:	f8c1 210b 	str.w	r2, [r1, #267]	; 0x10b
   13a58:	8880      	ldrh	r0, [r0, #4]
   13a5a:	f8a1 010f 	strh.w	r0, [r1, #271]	; 0x10f
   13a5e:	4770      	bx	lr
   13a60:	20001870 	.word	0x20001870

00013a64 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>:
   13a64:	4904      	ldr	r1, [pc, #16]	; (13a78 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x14>)
   13a66:	788a      	ldrb	r2, [r1, #2]
   13a68:	4282      	cmp	r2, r0
   13a6a:	bf86      	itte	hi
   13a6c:	eb01 1000 	addhi.w	r0, r1, r0, lsl #4
   13a70:	1cc0      	addhi	r0, r0, #3
   13a72:	2000      	movls	r0, #0
   13a74:	4770      	bx	lr
   13a76:	0000      	.short	0x0000
   13a78:	20001870 	.word	0x20001870

00013a7c <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>:
   13a7c:	b510      	push	{r4, lr}
   13a7e:	f240 12d3 	movw	r2, #467	; 0x1d3
   13a82:	2100      	movs	r1, #0
   13a84:	4807      	ldr	r0, [pc, #28]	; (13aa4 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x28>)
   13a86:	f00a ff64 	bl	1e952 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
   13a8a:	2208      	movs	r2, #8
   13a8c:	21ff      	movs	r1, #255	; 0xff
   13a8e:	4806      	ldr	r0, [pc, #24]	; (13aa8 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x2c>)
   13a90:	f00a ff5f 	bl	1e952 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
   13a94:	4805      	ldr	r0, [pc, #20]	; (13aac <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x30>)
   13a96:	2100      	movs	r1, #0
   13a98:	7001      	strb	r1, [r0, #0]
   13a9a:	7041      	strb	r1, [r0, #1]
   13a9c:	f44f 7161 	mov.w	r1, #900	; 0x384
   13aa0:	8041      	strh	r1, [r0, #2]
   13aa2:	bd10      	pop	{r4, pc}
   13aa4:	20001870 	.word	0x20001870
   13aa8:	200003c8 	.word	0x200003c8
   13aac:	200003c4 	.word	0x200003c4

00013ab0 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>:
   13ab0:	4b0b      	ldr	r3, [pc, #44]	; (13ae0 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x30>)
   13ab2:	f893 c002 	ldrb.w	ip, [r3, #2]
   13ab6:	4584      	cmp	ip, r0
   13ab8:	bf9c      	itt	ls
   13aba:	2000      	movls	r0, #0
   13abc:	4770      	bxls	lr
   13abe:	4418      	add	r0, r3
   13ac0:	f890 0103 	ldrb.w	r0, [r0, #259]	; 0x103
   13ac4:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   13ac8:	f890 3153 	ldrb.w	r3, [r0, #339]	; 0x153
   13acc:	700b      	strb	r3, [r1, #0]
   13ace:	f8d0 1154 	ldr.w	r1, [r0, #340]	; 0x154
   13ad2:	6011      	str	r1, [r2, #0]
   13ad4:	f8b0 0158 	ldrh.w	r0, [r0, #344]	; 0x158
   13ad8:	8090      	strh	r0, [r2, #4]
   13ada:	2001      	movs	r0, #1
   13adc:	4770      	bx	lr
   13ade:	0000      	.short	0x0000
   13ae0:	20001870 	.word	0x20001870

00013ae4 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI>:
   13ae4:	4907      	ldr	r1, [pc, #28]	; (13b04 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI+0x20>)
   13ae6:	788a      	ldrb	r2, [r1, #2]
   13ae8:	4282      	cmp	r2, r0
   13aea:	bf9c      	itt	ls
   13aec:	2000      	movls	r0, #0
   13aee:	4770      	bxls	lr
   13af0:	4408      	add	r0, r1
   13af2:	f890 0103 	ldrb.w	r0, [r0, #259]	; 0x103
   13af6:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
   13afa:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
   13afe:	f000 0001 	and.w	r0, r0, #1
   13b02:	4770      	bx	lr
   13b04:	20001870 	.word	0x20001870

00013b08 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>:
   13b08:	b510      	push	{r4, lr}
   13b0a:	f000 f921 	bl	13d50 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
   13b0e:	2810      	cmp	r0, #16
   13b10:	d014      	beq.n	13b3c <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x34>
   13b12:	4a0b      	ldr	r2, [pc, #44]	; (13b40 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x38>)
   13b14:	4601      	mov	r1, r0
   13b16:	2000      	movs	r0, #0
   13b18:	f892 c002 	ldrb.w	ip, [r2, #2]
   13b1c:	f1bc 0f00 	cmp.w	ip, #0
   13b20:	d90c      	bls.n	13b3c <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x34>
   13b22:	1813      	adds	r3, r2, r0
   13b24:	f893 3103 	ldrb.w	r3, [r3, #259]	; 0x103
   13b28:	428b      	cmp	r3, r1
   13b2a:	d103      	bne.n	13b34 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x2c>
   13b2c:	2810      	cmp	r0, #16
   13b2e:	bf18      	it	ne
   13b30:	bd10      	popne	{r4, pc}
   13b32:	e003      	b.n	13b3c <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x34>
   13b34:	1c40      	adds	r0, r0, #1
   13b36:	b2c0      	uxtb	r0, r0
   13b38:	4584      	cmp	ip, r0
   13b3a:	d8f2      	bhi.n	13b22 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x1a>
   13b3c:	2008      	movs	r0, #8
   13b3e:	bd10      	pop	{r4, pc}
   13b40:	20001870 	.word	0x20001870

00013b44 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>:
   13b44:	4801      	ldr	r0, [pc, #4]	; (13b4c <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY+0x8>)
   13b46:	8840      	ldrh	r0, [r0, #2]
   13b48:	4770      	bx	lr
   13b4a:	0000      	.short	0x0000
   13b4c:	200003c4 	.word	0x200003c4

00013b50 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI>:
   13b50:	4906      	ldr	r1, [pc, #24]	; (13b6c <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x1c>)
   13b52:	788a      	ldrb	r2, [r1, #2]
   13b54:	4282      	cmp	r2, r0
   13b56:	d906      	bls.n	13b66 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x16>
   13b58:	4408      	add	r0, r1
   13b5a:	f890 013b 	ldrb.w	r0, [r0, #315]	; 0x13b
   13b5e:	2800      	cmp	r0, #0
   13b60:	bf04      	itt	eq
   13b62:	2001      	moveq	r0, #1
   13b64:	4770      	bxeq	lr
   13b66:	2000      	movs	r0, #0
   13b68:	4770      	bx	lr
   13b6a:	0000      	.short	0x0000
   13b6c:	20001870 	.word	0x20001870

00013b70 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ>:
   13b70:	b570      	push	{r4, r5, r6, lr}
   13b72:	460d      	mov	r5, r1
   13b74:	4604      	mov	r4, r0
   13b76:	f000 f8eb 	bl	13d50 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
   13b7a:	4a1a      	ldr	r2, [pc, #104]	; (13be4 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x74>)
   13b7c:	2810      	cmp	r0, #16
   13b7e:	d014      	beq.n	13baa <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x3a>
   13b80:	eb02 01c0 	add.w	r1, r2, r0, lsl #3
   13b84:	f891 015a 	ldrb.w	r0, [r1, #346]	; 0x15a
   13b88:	f010 0f01 	tst.w	r0, #1
   13b8c:	bf1c      	itt	ne
   13b8e:	2001      	movne	r0, #1
   13b90:	bd70      	popne	{r4, r5, r6, pc}
   13b92:	7850      	ldrb	r0, [r2, #1]
   13b94:	2808      	cmp	r0, #8
   13b96:	bf3c      	itt	cc
   13b98:	2001      	movcc	r0, #1
   13b9a:	f881 015a 	strbcc.w	r0, [r1, #346]	; 0x15a
   13b9e:	d21e      	bcs.n	13bde <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x6e>
   13ba0:	7850      	ldrb	r0, [r2, #1]
   13ba2:	1c40      	adds	r0, r0, #1
   13ba4:	7050      	strb	r0, [r2, #1]
   13ba6:	2001      	movs	r0, #1
   13ba8:	bd70      	pop	{r4, r5, r6, pc}
   13baa:	7850      	ldrb	r0, [r2, #1]
   13bac:	2808      	cmp	r0, #8
   13bae:	d216      	bcs.n	13bde <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x6e>
   13bb0:	7813      	ldrb	r3, [r2, #0]
   13bb2:	2001      	movs	r0, #1
   13bb4:	1c59      	adds	r1, r3, #1
   13bb6:	7011      	strb	r1, [r2, #0]
   13bb8:	2b10      	cmp	r3, #16
   13bba:	d303      	bcc.n	13bc4 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x54>
   13bbc:	2146      	movs	r1, #70	; 0x46
   13bbe:	2028      	movs	r0, #40	; 0x28
   13bc0:	f7fd fede 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   13bc4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   13bc8:	6829      	ldr	r1, [r5, #0]
   13bca:	f8c3 1154 	str.w	r1, [r3, #340]	; 0x154
   13bce:	88a9      	ldrh	r1, [r5, #4]
   13bd0:	f8a3 1158 	strh.w	r1, [r3, #344]	; 0x158
   13bd4:	f883 4153 	strb.w	r4, [r3, #339]	; 0x153
   13bd8:	f883 015a 	strb.w	r0, [r3, #346]	; 0x15a
   13bdc:	e7e0      	b.n	13ba0 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x30>
   13bde:	2000      	movs	r0, #0
   13be0:	bd70      	pop	{r4, r5, r6, pc}
   13be2:	0000      	.short	0x0000
   13be4:	20001870 	.word	0x20001870

00013be8 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY>:
   13be8:	4901      	ldr	r1, [pc, #4]	; (13bf0 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x8>)
   13bea:	7048      	strb	r0, [r1, #1]
   13bec:	4770      	bx	lr
   13bee:	0000      	.short	0x0000
   13bf0:	200003c4 	.word	0x200003c4

00013bf4 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY>:
   13bf4:	b470      	push	{r4, r5, r6}
   13bf6:	482b      	ldr	r0, [pc, #172]	; (13ca4 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0xb0>)
   13bf8:	2500      	movs	r5, #0
   13bfa:	7801      	ldrb	r1, [r0, #0]
   13bfc:	1e49      	subs	r1, r1, #1
   13bfe:	b24b      	sxtb	r3, r1
   13c00:	2b00      	cmp	r3, #0
   13c02:	db46      	blt.n	13c92 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x9e>
   13c04:	eb00 01c3 	add.w	r1, r0, r3, lsl #3
   13c08:	f891 115a 	ldrb.w	r1, [r1, #346]	; 0x15a
   13c0c:	f011 0f01 	tst.w	r1, #1
   13c10:	d03b      	beq.n	13c8a <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x96>
   13c12:	7842      	ldrb	r2, [r0, #1]
   13c14:	b2d9      	uxtb	r1, r3
   13c16:	1e52      	subs	r2, r2, #1
   13c18:	7042      	strb	r2, [r0, #1]
   13c1a:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
   13c1e:	f882 515a 	strb.w	r5, [r2, #346]	; 0x15a
   13c22:	f890 c002 	ldrb.w	ip, [r0, #2]
   13c26:	2200      	movs	r2, #0
   13c28:	f1bc 0f00 	cmp.w	ip, #0
   13c2c:	d90b      	bls.n	13c46 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x52>
   13c2e:	1884      	adds	r4, r0, r2
   13c30:	f894 6103 	ldrb.w	r6, [r4, #259]	; 0x103
   13c34:	428e      	cmp	r6, r1
   13c36:	d102      	bne.n	13c3e <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x4a>
   13c38:	2a10      	cmp	r2, #16
   13c3a:	d126      	bne.n	13c8a <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x96>
   13c3c:	e003      	b.n	13c46 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x52>
   13c3e:	1c52      	adds	r2, r2, #1
   13c40:	b2d2      	uxtb	r2, r2
   13c42:	4594      	cmp	ip, r2
   13c44:	d8f3      	bhi.n	13c2e <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x3a>
   13c46:	7802      	ldrb	r2, [r0, #0]
   13c48:	1e52      	subs	r2, r2, #1
   13c4a:	b2d2      	uxtb	r2, r2
   13c4c:	7002      	strb	r2, [r0, #0]
   13c4e:	428a      	cmp	r2, r1
   13c50:	d01b      	beq.n	13c8a <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x96>
   13c52:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
   13c56:	eb00 0cc1 	add.w	ip, r0, r1, lsl #3
   13c5a:	f8d2 4153 	ldr.w	r4, [r2, #339]	; 0x153
   13c5e:	f8cc 4153 	str.w	r4, [ip, #339]	; 0x153
   13c62:	f8d2 2157 	ldr.w	r2, [r2, #343]	; 0x157
   13c66:	f8cc 2157 	str.w	r2, [ip, #343]	; 0x157
   13c6a:	7884      	ldrb	r4, [r0, #2]
   13c6c:	f890 c000 	ldrb.w	ip, [r0]
   13c70:	2200      	movs	r2, #0
   13c72:	2c00      	cmp	r4, #0
   13c74:	d909      	bls.n	13c8a <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x96>
   13c76:	1886      	adds	r6, r0, r2
   13c78:	f896 6103 	ldrb.w	r6, [r6, #259]	; 0x103
   13c7c:	4566      	cmp	r6, ip
   13c7e:	d10c      	bne.n	13c9a <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0xa6>
   13c80:	2a10      	cmp	r2, #16
   13c82:	bf1c      	itt	ne
   13c84:	4402      	addne	r2, r0
   13c86:	f882 1103 	strbne.w	r1, [r2, #259]	; 0x103
   13c8a:	1e59      	subs	r1, r3, #1
   13c8c:	b24b      	sxtb	r3, r1
   13c8e:	2b00      	cmp	r3, #0
   13c90:	dab8      	bge.n	13c04 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x10>
   13c92:	4805      	ldr	r0, [pc, #20]	; (13ca8 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0xb4>)
   13c94:	7045      	strb	r5, [r0, #1]
   13c96:	bc70      	pop	{r4, r5, r6}
   13c98:	4770      	bx	lr
   13c9a:	1c52      	adds	r2, r2, #1
   13c9c:	b2d2      	uxtb	r2, r2
   13c9e:	4294      	cmp	r4, r2
   13ca0:	d8e9      	bhi.n	13c76 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x82>
   13ca2:	e7f2      	b.n	13c8a <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x96>
   13ca4:	20001870 	.word	0x20001870
   13ca8:	200003c4 	.word	0x200003c4

00013cac <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY>:
   13cac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13cb0:	4d25      	ldr	r5, [pc, #148]	; (13d48 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x9c>)
   13cb2:	2600      	movs	r6, #0
   13cb4:	4634      	mov	r4, r6
   13cb6:	7828      	ldrb	r0, [r5, #0]
   13cb8:	2800      	cmp	r0, #0
   13cba:	bf8c      	ite	hi
   13cbc:	4f23      	ldrhi	r7, [pc, #140]	; (13d4c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa0>)
   13cbe:	e8bd 81f0 	ldmials.w	sp!, {r4, r5, r6, r7, r8, pc}
   13cc2:	bf00      	nop
   13cc4:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
   13cc8:	f890 115a 	ldrb.w	r1, [r0, #346]	; 0x15a
   13ccc:	f011 0f01 	tst.w	r1, #1
   13cd0:	d032      	beq.n	13d38 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x8c>
   13cd2:	78aa      	ldrb	r2, [r5, #2]
   13cd4:	2100      	movs	r1, #0
   13cd6:	4623      	mov	r3, r4
   13cd8:	2a00      	cmp	r2, #0
   13cda:	d909      	bls.n	13cf0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x44>
   13cdc:	eb05 0c01 	add.w	ip, r5, r1
   13ce0:	f89c c103 	ldrb.w	ip, [ip, #259]	; 0x103
   13ce4:	459c      	cmp	ip, r3
   13ce6:	d004      	beq.n	13cf2 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x46>
   13ce8:	1c49      	adds	r1, r1, #1
   13cea:	b2c9      	uxtb	r1, r1
   13cec:	428a      	cmp	r2, r1
   13cee:	d8f5      	bhi.n	13cdc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x30>
   13cf0:	2110      	movs	r1, #16
   13cf2:	428a      	cmp	r2, r1
   13cf4:	bf86      	itte	hi
   13cf6:	eb05 1201 	addhi.w	r2, r5, r1, lsl #4
   13cfa:	1cd3      	addhi	r3, r2, #3
   13cfc:	2300      	movls	r3, #0
   13cfe:	2200      	movs	r2, #0
   13d00:	2910      	cmp	r1, #16
   13d02:	d00c      	beq.n	13d1e <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x72>
   13d04:	eb05 0c01 	add.w	ip, r5, r1
   13d08:	f89c 813b 	ldrb.w	r8, [ip, #315]	; 0x13b
   13d0c:	f1b8 0f01 	cmp.w	r8, #1
   13d10:	d004      	beq.n	13d1c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x70>
   13d12:	f89c c14b 	ldrb.w	ip, [ip, #331]	; 0x14b
   13d16:	f1bc 0f00 	cmp.w	ip, #0
   13d1a:	d000      	beq.n	13d1e <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x72>
   13d1c:	2201      	movs	r2, #1
   13d1e:	1e52      	subs	r2, r2, #1
   13d20:	4213      	tst	r3, r2
   13d22:	d109      	bne.n	13d38 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x8c>
   13d24:	55b9      	strb	r1, [r7, r6]
   13d26:	f890 2153 	ldrb.w	r2, [r0, #339]	; 0x153
   13d2a:	f500 71aa 	add.w	r1, r0, #340	; 0x154
   13d2e:	4630      	mov	r0, r6
   13d30:	1c73      	adds	r3, r6, #1
   13d32:	b2de      	uxtb	r6, r3
   13d34:	f009 fda2 	bl	1d87c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>
   13d38:	1c60      	adds	r0, r4, #1
   13d3a:	b2c4      	uxtb	r4, r0
   13d3c:	7828      	ldrb	r0, [r5, #0]
   13d3e:	42a0      	cmp	r0, r4
   13d40:	d8c0      	bhi.n	13cc4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x18>
   13d42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13d46:	0000      	.short	0x0000
   13d48:	20001870 	.word	0x20001870
   13d4c:	200003c8 	.word	0x200003c8
   13d50:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   13d54:	4b20      	ldr	r3, [pc, #128]	; (13dd8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x12c>)
   13d56:	4602      	mov	r2, r0
   13d58:	2000      	movs	r0, #0
   13d5a:	f893 8000 	ldrb.w	r8, [r3]
   13d5e:	f1b8 0f00 	cmp.w	r8, #0
   13d62:	d934      	bls.n	13dce <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x122>
   13d64:	780f      	ldrb	r7, [r1, #0]
   13d66:	784e      	ldrb	r6, [r1, #1]
   13d68:	788d      	ldrb	r5, [r1, #2]
   13d6a:	78cc      	ldrb	r4, [r1, #3]
   13d6c:	f891 c004 	ldrb.w	ip, [r1, #4]
   13d70:	f891 a005 	ldrb.w	sl, [r1, #5]
   13d74:	eb03 01c0 	add.w	r1, r3, r0, lsl #3
   13d78:	f891 9153 	ldrb.w	r9, [r1, #339]	; 0x153
   13d7c:	f891 b154 	ldrb.w	fp, [r1, #340]	; 0x154
   13d80:	ea82 0909 	eor.w	r9, r2, r9
   13d84:	ea87 0b0b 	eor.w	fp, r7, fp
   13d88:	44d9      	add	r9, fp
   13d8a:	f891 b155 	ldrb.w	fp, [r1, #341]	; 0x155
   13d8e:	ea86 0b0b 	eor.w	fp, r6, fp
   13d92:	44d9      	add	r9, fp
   13d94:	f891 b156 	ldrb.w	fp, [r1, #342]	; 0x156
   13d98:	ea85 0b0b 	eor.w	fp, r5, fp
   13d9c:	44d9      	add	r9, fp
   13d9e:	f891 b157 	ldrb.w	fp, [r1, #343]	; 0x157
   13da2:	ea84 0b0b 	eor.w	fp, r4, fp
   13da6:	44d9      	add	r9, fp
   13da8:	f891 b158 	ldrb.w	fp, [r1, #344]	; 0x158
   13dac:	f891 1159 	ldrb.w	r1, [r1, #345]	; 0x159
   13db0:	ea8c 0b0b 	eor.w	fp, ip, fp
   13db4:	44d9      	add	r9, fp
   13db6:	ea8a 0101 	eor.w	r1, sl, r1
   13dba:	eb11 0f09 	cmn.w	r1, r9
   13dbe:	bf04      	itt	eq
   13dc0:	e8bd 0ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   13dc4:	4770      	bxeq	lr
   13dc6:	1c40      	adds	r0, r0, #1
   13dc8:	b2c0      	uxtb	r0, r0
   13dca:	4580      	cmp	r8, r0
   13dcc:	d8d2      	bhi.n	13d74 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc8>
   13dce:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   13dd2:	2010      	movs	r0, #16
   13dd4:	4770      	bx	lr
   13dd6:	0000      	.short	0x0000
   13dd8:	20001870 	.word	0x20001870
   13ddc:	4925      	ldr	r1, [pc, #148]	; (13e74 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1c8>)
   13dde:	b410      	push	{r4}
   13de0:	784a      	ldrb	r2, [r1, #1]
   13de2:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
   13de6:	1e52      	subs	r2, r2, #1
   13de8:	704a      	strb	r2, [r1, #1]
   13dea:	2200      	movs	r2, #0
   13dec:	f883 215a 	strb.w	r2, [r3, #346]	; 0x15a
   13df0:	f891 c002 	ldrb.w	ip, [r1, #2]
   13df4:	f1bc 0f00 	cmp.w	ip, #0
   13df8:	d90d      	bls.n	13e16 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x16a>
   13dfa:	188b      	adds	r3, r1, r2
   13dfc:	f893 4103 	ldrb.w	r4, [r3, #259]	; 0x103
   13e00:	4284      	cmp	r4, r0
   13e02:	d104      	bne.n	13e0e <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x162>
   13e04:	2a10      	cmp	r2, #16
   13e06:	bf1c      	itt	ne
   13e08:	bc10      	popne	{r4}
   13e0a:	4770      	bxne	lr
   13e0c:	e003      	b.n	13e16 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x16a>
   13e0e:	1c52      	adds	r2, r2, #1
   13e10:	b2d2      	uxtb	r2, r2
   13e12:	4594      	cmp	ip, r2
   13e14:	d8f1      	bhi.n	13dfa <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x14e>
   13e16:	780a      	ldrb	r2, [r1, #0]
   13e18:	1e52      	subs	r2, r2, #1
   13e1a:	b2d2      	uxtb	r2, r2
   13e1c:	700a      	strb	r2, [r1, #0]
   13e1e:	4282      	cmp	r2, r0
   13e20:	bf04      	itt	eq
   13e22:	bc10      	popeq	{r4}
   13e24:	4770      	bxeq	lr
   13e26:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
   13e2a:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   13e2e:	f8d2 c153 	ldr.w	ip, [r2, #339]	; 0x153
   13e32:	f8c3 c153 	str.w	ip, [r3, #339]	; 0x153
   13e36:	f8d2 2157 	ldr.w	r2, [r2, #343]	; 0x157
   13e3a:	f8c3 2157 	str.w	r2, [r3, #343]	; 0x157
   13e3e:	788c      	ldrb	r4, [r1, #2]
   13e40:	f891 c000 	ldrb.w	ip, [r1]
   13e44:	2200      	movs	r2, #0
   13e46:	2c00      	cmp	r4, #0
   13e48:	bf9c      	itt	ls
   13e4a:	bc10      	popls	{r4}
   13e4c:	4770      	bxls	lr
   13e4e:	188b      	adds	r3, r1, r2
   13e50:	f893 3103 	ldrb.w	r3, [r3, #259]	; 0x103
   13e54:	4563      	cmp	r3, ip
   13e56:	d106      	bne.n	13e66 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1ba>
   13e58:	2a10      	cmp	r2, #16
   13e5a:	bf1c      	itt	ne
   13e5c:	4411      	addne	r1, r2
   13e5e:	f881 0103 	strbne.w	r0, [r1, #259]	; 0x103
   13e62:	bc10      	pop	{r4}
   13e64:	4770      	bx	lr
   13e66:	1c52      	adds	r2, r2, #1
   13e68:	b2d2      	uxtb	r2, r2
   13e6a:	4294      	cmp	r4, r2
   13e6c:	d8ef      	bhi.n	13e4e <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1a2>
   13e6e:	bc10      	pop	{r4}
   13e70:	4770      	bx	lr
   13e72:	0000      	.short	0x0000
   13e74:	20001870 	.word	0x20001870

00013e78 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>:
   13e78:	b570      	push	{r4, r5, r6, lr}
   13e7a:	b08c      	sub	sp, #48	; 0x30
   13e7c:	f100 0410 	add.w	r4, r0, #16
   13e80:	461d      	mov	r5, r3
   13e82:	4616      	mov	r6, r2
   13e84:	f10d 3cff 	add.w	ip, sp, #4294967295	; 0xffffffff
   13e88:	f05f 0008 	movs.w	r0, #8
   13e8c:	f814 2c01 	ldrb.w	r2, [r4, #-1]
   13e90:	f88c 2001 	strb.w	r2, [ip, #1]
   13e94:	f814 2d02 	ldrb.w	r2, [r4, #-2]!
   13e98:	f80c 2f02 	strb.w	r2, [ip, #2]!
   13e9c:	1e40      	subs	r0, r0, #1
   13e9e:	d1f5      	bne.n	13e8c <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x14>
   13ea0:	f101 0c10 	add.w	ip, r1, #16
   13ea4:	466c      	mov	r4, sp
   13ea6:	f10d 010f 	add.w	r1, sp, #15
   13eaa:	2008      	movs	r0, #8
   13eac:	f81c 2c01 	ldrb.w	r2, [ip, #-1]
   13eb0:	704a      	strb	r2, [r1, #1]
   13eb2:	f81c 2d02 	ldrb.w	r2, [ip, #-2]!
   13eb6:	f801 2f02 	strb.w	r2, [r1, #2]!
   13eba:	1e40      	subs	r0, r0, #1
   13ebc:	d1f6      	bne.n	13eac <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x34>
   13ebe:	4620      	mov	r0, r4
   13ec0:	f00c f810 	bl	1fee4 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
   13ec4:	b17e      	cbz	r6, 13ee6 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x6e>
   13ec6:	1e6a      	subs	r2, r5, #1
   13ec8:	f104 0030 	add.w	r0, r4, #48	; 0x30
   13ecc:	f05f 0108 	movs.w	r1, #8
   13ed0:	f810 3c01 	ldrb.w	r3, [r0, #-1]
   13ed4:	7053      	strb	r3, [r2, #1]
   13ed6:	f810 3d02 	ldrb.w	r3, [r0, #-2]!
   13eda:	f802 3f02 	strb.w	r3, [r2, #2]!
   13ede:	1e49      	subs	r1, r1, #1
   13ee0:	d1f6      	bne.n	13ed0 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x58>
   13ee2:	b00c      	add	sp, #48	; 0x30
   13ee4:	bd70      	pop	{r4, r5, r6, pc}
   13ee6:	9808      	ldr	r0, [sp, #32]
   13ee8:	6028      	str	r0, [r5, #0]
   13eea:	9809      	ldr	r0, [sp, #36]	; 0x24
   13eec:	6068      	str	r0, [r5, #4]
   13eee:	980a      	ldr	r0, [sp, #40]	; 0x28
   13ef0:	60a8      	str	r0, [r5, #8]
   13ef2:	980b      	ldr	r0, [sp, #44]	; 0x2c
   13ef4:	60e8      	str	r0, [r5, #12]
   13ef6:	b00c      	add	sp, #48	; 0x30
   13ef8:	bd70      	pop	{r4, r5, r6, pc}
	...

00013efc <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>:
   13efc:	b570      	push	{r4, r5, r6, lr}
   13efe:	4604      	mov	r4, r0
   13f00:	2601      	movs	r6, #1
   13f02:	b179      	cbz	r1, 13f24 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x28>
   13f04:	4a54      	ldr	r2, [pc, #336]	; (14058 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x15c>)
   13f06:	2500      	movs	r5, #0
   13f08:	2901      	cmp	r1, #1
   13f0a:	d029      	beq.n	13f60 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x64>
   13f0c:	2902      	cmp	r1, #2
   13f0e:	d072      	beq.n	13ff6 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xfa>
   13f10:	2903      	cmp	r1, #3
   13f12:	bf18      	it	ne
   13f14:	bd70      	popne	{r4, r5, r6, pc}
   13f16:	f104 01be 	add.w	r1, r4, #190	; 0xbe
   13f1a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   13f1e:	30bd      	adds	r0, #189	; 0xbd
   13f20:	f00c ba4d 	b.w	203be <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>
   13f24:	f44f 725c 	mov.w	r2, #880	; 0x370
   13f28:	2100      	movs	r1, #0
   13f2a:	f00a fd12 	bl	1e952 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
   13f2e:	f884 60bd 	strb.w	r6, [r4, #189]	; 0xbd
   13f32:	4a4a      	ldr	r2, [pc, #296]	; (1405c <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x160>)
   13f34:	f8c4 2106 	str.w	r2, [r4, #262]	; 0x106
   13f38:	2207      	movs	r2, #7
   13f3a:	f8c4 210a 	str.w	r2, [r4, #266]	; 0x10a
   13f3e:	f894 2106 	ldrb.w	r2, [r4, #262]	; 0x106
   13f42:	20fe      	movs	r0, #254	; 0xfe
   13f44:	f022 0204 	bic.w	r2, r2, #4
   13f48:	f884 2106 	strb.w	r2, [r4, #262]	; 0x106
   13f4c:	f884 013c 	strb.w	r0, [r4, #316]	; 0x13c
   13f50:	207f      	movs	r0, #127	; 0x7f
   13f52:	f884 00b1 	strb.w	r0, [r4, #177]	; 0xb1
   13f56:	f64f 70ff 	movw	r0, #65535	; 0xffff
   13f5a:	f8a4 007e 	strh.w	r0, [r4, #126]	; 0x7e
   13f5e:	bd70      	pop	{r4, r5, r6, pc}
   13f60:	f8a4 52ae 	strh.w	r5, [r4, #686]	; 0x2ae
   13f64:	f884 52a3 	strb.w	r5, [r4, #675]	; 0x2a3
   13f68:	6960      	ldr	r0, [r4, #20]
   13f6a:	493d      	ldr	r1, [pc, #244]	; (14060 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x164>)
   13f6c:	fbb2 f2f0 	udiv	r2, r2, r0
   13f70:	4401      	add	r1, r0
   13f72:	fbb1 f1f0 	udiv	r1, r1, r0
   13f76:	f8c4 10dc 	str.w	r1, [r4, #220]	; 0xdc
   13f7a:	f640 31b8 	movw	r1, #3000	; 0xbb8
   13f7e:	f8a4 10e0 	strh.w	r1, [r4, #224]	; 0xe0
   13f82:	8be3      	ldrh	r3, [r4, #30]
   13f84:	f8a4 50e6 	strh.w	r5, [r4, #230]	; 0xe6
   13f88:	f8b4 c0ea 	ldrh.w	ip, [r4, #234]	; 0xea
   13f8c:	1c52      	adds	r2, r2, #1
   13f8e:	fb0c fc00 	mul.w	ip, ip, r0
   13f92:	fbbc fcf0 	udiv	ip, ip, r0
   13f96:	f8a4 c0ea 	strh.w	ip, [r4, #234]	; 0xea
   13f9a:	f240 2c71 	movw	ip, #625	; 0x271
   13f9e:	fb03 f30c 	mul.w	r3, r3, ip
   13fa2:	eb00 1303 	add.w	r3, r0, r3, lsl #4
   13fa6:	1e5b      	subs	r3, r3, #1
   13fa8:	fbb3 f3f0 	udiv	r3, r3, r0
   13fac:	f8a4 30e8 	strh.w	r3, [r4, #232]	; 0xe8
   13fb0:	f8a4 20ee 	strh.w	r2, [r4, #238]	; 0xee
   13fb4:	4a2b      	ldr	r2, [pc, #172]	; (14064 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x168>)
   13fb6:	f104 01a0 	add.w	r1, r4, #160	; 0xa0
   13fba:	eb00 1202 	add.w	r2, r0, r2, lsl #4
   13fbe:	1e52      	subs	r2, r2, #1
   13fc0:	fbb2 f2f0 	udiv	r2, r2, r0
   13fc4:	63ca      	str	r2, [r1, #60]	; 0x3c
   13fc6:	6b8a      	ldr	r2, [r1, #56]	; 0x38
   13fc8:	4342      	muls	r2, r0
   13fca:	fbb2 f0f0 	udiv	r0, r2, r0
   13fce:	6388      	str	r0, [r1, #56]	; 0x38
   13fd0:	311e      	adds	r1, #30
   13fd2:	1e48      	subs	r0, r1, #1
   13fd4:	f00c f9f3 	bl	203be <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>
   13fd8:	f00a fc1d 	bl	1e816 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
   13fdc:	b138      	cbz	r0, 13fee <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xf2>
   13fde:	69a0      	ldr	r0, [r4, #24]
   13fe0:	f000 ff38 	bl	14e54 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY>
   13fe4:	2800      	cmp	r0, #0
   13fe6:	bf04      	itt	eq
   13fe8:	f884 6296 	strbeq.w	r6, [r4, #662]	; 0x296
   13fec:	bd70      	popeq	{r4, r5, r6, pc}
   13fee:	f884 5296 	strb.w	r5, [r4, #662]	; 0x296
   13ff2:	bd70      	pop	{r4, r5, r6, pc}
   13ff4:	e7ff      	b.n	13ff6 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xfa>
   13ff6:	f8d4 134c 	ldr.w	r1, [r4, #844]	; 0x34c
   13ffa:	f8b4 c352 	ldrh.w	ip, [r4, #850]	; 0x352
   13ffe:	6963      	ldr	r3, [r4, #20]
   14000:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
   14004:	f8a4 50e6 	strh.w	r5, [r4, #230]	; 0xe6
   14008:	f8b4 40ea 	ldrh.w	r4, [r4, #234]	; 0xea
   1400c:	fbb2 f2f1 	udiv	r2, r2, r1
   14010:	435c      	muls	r4, r3
   14012:	fbb4 f4f1 	udiv	r4, r4, r1
   14016:	f8a0 404a 	strh.w	r4, [r0, #74]	; 0x4a
   1401a:	f240 2471 	movw	r4, #625	; 0x271
   1401e:	fb0c fc04 	mul.w	ip, ip, r4
   14022:	eb01 1c0c 	add.w	ip, r1, ip, lsl #4
   14026:	f1ac 0c01 	sub.w	ip, ip, #1
   1402a:	fbbc fcf1 	udiv	ip, ip, r1
   1402e:	f8a0 c048 	strh.w	ip, [r0, #72]	; 0x48
   14032:	1c52      	adds	r2, r2, #1
   14034:	f8a0 204e 	strh.w	r2, [r0, #78]	; 0x4e
   14038:	f8b0 2040 	ldrh.w	r2, [r0, #64]	; 0x40
   1403c:	4362      	muls	r2, r4
   1403e:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   14042:	1e52      	subs	r2, r2, #1
   14044:	fbb2 f2f1 	udiv	r2, r2, r1
   14048:	63c2      	str	r2, [r0, #60]	; 0x3c
   1404a:	6b82      	ldr	r2, [r0, #56]	; 0x38
   1404c:	435a      	muls	r2, r3
   1404e:	fbb2 f1f1 	udiv	r1, r2, r1
   14052:	6381      	str	r1, [r0, #56]	; 0x38
   14054:	bd70      	pop	{r4, r5, r6, pc}
   14056:	0000      	.short	0x0000
   14058:	02625a00 	.word	0x02625a00
   1405c:	3004492f 	.word	0x3004492f
   14060:	01c9c37f 	.word	0x01c9c37f
   14064:	001c9c38 	.word	0x001c9c38

00014068 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q>:
   14068:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
   1406c:	4604      	mov	r4, r0
   1406e:	4690      	mov	r8, r2
   14070:	468a      	mov	sl, r1
   14072:	f04f 0901 	mov.w	r9, #1
   14076:	4608      	mov	r0, r1
   14078:	f00c fc23 	bl	208c2 <sym_IMNEYE333DZSYFXBOKOMWVRET5JB5STH5YU7A5A>
   1407c:	4605      	mov	r5, r0
   1407e:	4650      	mov	r0, sl
   14080:	f00c fc21 	bl	208c6 <sym_UA37MSV2DKCYXYIDDSBDMFEEGPUD3YMYMAH3IEI>
   14084:	4607      	mov	r7, r0
   14086:	f010 0f01 	tst.w	r0, #1
   1408a:	bf18      	it	ne
   1408c:	2601      	movne	r6, #1
   1408e:	d02b      	beq.n	140e8 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x80>
   14090:	f015 0f01 	tst.w	r5, #1
   14094:	bf18      	it	ne
   14096:	f04f 0b01 	movne.w	fp, #1
   1409a:	d030      	beq.n	140fe <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x96>
   1409c:	ea56 000b 	orrs.w	r0, r6, fp
   140a0:	bf08      	it	eq
   140a2:	f04f 0900 	moveq.w	r9, #0
   140a6:	f007 fe93 	bl	1bdd0 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   140aa:	4238      	tst	r0, r7
   140ac:	bf08      	it	eq
   140ae:	2600      	moveq	r6, #0
   140b0:	f007 fe8e 	bl	1bdd0 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   140b4:	4228      	tst	r0, r5
   140b6:	bf08      	it	eq
   140b8:	f04f 0b00 	moveq.w	fp, #0
   140bc:	f894 006e 	ldrb.w	r0, [r4, #110]	; 0x6e
   140c0:	42b0      	cmp	r0, r6
   140c2:	bf0c      	ite	eq
   140c4:	2000      	moveq	r0, #0
   140c6:	4630      	movne	r0, r6
   140c8:	f888 0000 	strb.w	r0, [r8]
   140cc:	f894 106f 	ldrb.w	r1, [r4, #111]	; 0x6f
   140d0:	4559      	cmp	r1, fp
   140d2:	bf08      	it	eq
   140d4:	f04f 0b00 	moveq.w	fp, #0
   140d8:	f888 b001 	strb.w	fp, [r8, #1]
   140dc:	2800      	cmp	r0, #0
   140de:	bf08      	it	eq
   140e0:	f1bb 0f00 	cmpeq.w	fp, #0
   140e4:	d128      	bne.n	14138 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0xd0>
   140e6:	e018      	b.n	1411a <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0xb2>
   140e8:	f010 0f02 	tst.w	r0, #2
   140ec:	bf18      	it	ne
   140ee:	2602      	movne	r6, #2
   140f0:	d1ce      	bne.n	14090 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x28>
   140f2:	f017 0f04 	tst.w	r7, #4
   140f6:	bf14      	ite	ne
   140f8:	2608      	movne	r6, #8
   140fa:	2600      	moveq	r6, #0
   140fc:	e7c8      	b.n	14090 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x28>
   140fe:	f015 0f02 	tst.w	r5, #2
   14102:	bf18      	it	ne
   14104:	f04f 0b02 	movne.w	fp, #2
   14108:	d1c8      	bne.n	1409c <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x34>
   1410a:	f015 0f04 	tst.w	r5, #4
   1410e:	bf14      	ite	ne
   14110:	f04f 0b08 	movne.w	fp, #8
   14114:	f04f 0b00 	moveq.w	fp, #0
   14118:	e7c0      	b.n	1409c <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x34>
   1411a:	4650      	mov	r0, sl
   1411c:	f00c fbc0 	bl	208a0 <sym_FVNWXAKGSIJN4YGWC4O4B4H2WPPILAIKB7LLDVI>
   14120:	f8b4 10ac 	ldrh.w	r1, [r4, #172]	; 0xac
   14124:	1a40      	subs	r0, r0, r1
   14126:	b200      	sxth	r0, r0
   14128:	f647 71fe 	movw	r1, #32766	; 0x7ffe
   1412c:	4288      	cmp	r0, r1
   1412e:	dc01      	bgt.n	14134 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0xcc>
   14130:	2800      	cmp	r0, #0
   14132:	dc01      	bgt.n	14138 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0xd0>
   14134:	f04f 0900 	mov.w	r9, #0
   14138:	b116      	cbz	r6, 14140 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0xd8>
   1413a:	2e08      	cmp	r6, #8
   1413c:	d010      	beq.n	14160 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0xf8>
   1413e:	e01f      	b.n	14180 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x118>
   14140:	f894 006e 	ldrb.w	r0, [r4, #110]	; 0x6e
   14144:	2801      	cmp	r0, #1
   14146:	bf18      	it	ne
   14148:	2802      	cmpne	r0, #2
   1414a:	d019      	beq.n	14180 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x118>
   1414c:	2804      	cmp	r0, #4
   1414e:	bf18      	it	ne
   14150:	2808      	cmpne	r0, #8
   14152:	d005      	beq.n	14160 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0xf8>
   14154:	f44f 7134 	mov.w	r1, #720	; 0x2d0
   14158:	f04f 0006 	mov.w	r0, #6
   1415c:	f7fd fc10 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   14160:	f894 0154 	ldrb.w	r0, [r4, #340]	; 0x154
   14164:	2801      	cmp	r0, #1
   14166:	d10b      	bne.n	14180 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x118>
   14168:	f8b4 0158 	ldrh.w	r0, [r4, #344]	; 0x158
   1416c:	2801      	cmp	r0, #1
   1416e:	f894 006e 	ldrb.w	r0, [r4, #110]	; 0x6e
   14172:	d008      	beq.n	14186 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x11e>
   14174:	2808      	cmp	r0, #8
   14176:	d003      	beq.n	14180 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x118>
   14178:	f05f 0008 	movs.w	r0, #8
   1417c:	f888 0000 	strb.w	r0, [r8]
   14180:	4648      	mov	r0, r9
   14182:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
   14186:	2804      	cmp	r0, #4
   14188:	bf18      	it	ne
   1418a:	2004      	movne	r0, #4
   1418c:	d1f6      	bne.n	1417c <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x114>
   1418e:	e7f3      	b.n	14178 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x110>

00014190 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>:
   14190:	b430      	push	{r4, r5}
   14192:	2200      	movs	r2, #0
   14194:	f1a1 0c01 	sub.w	ip, r1, #1
   14198:	f1bc 0f00 	cmp.w	ip, #0
   1419c:	dd12      	ble.n	141c4 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x34>
   1419e:	1e43      	subs	r3, r0, #1
   141a0:	f011 0f01 	tst.w	r1, #1
   141a4:	bf08      	it	eq
   141a6:	f813 2f01 	ldrbeq.w	r2, [r3, #1]!
   141aa:	785c      	ldrb	r4, [r3, #1]
   141ac:	ea5f 0c6c 	movs.w	ip, ip, asr #1
   141b0:	d008      	beq.n	141c4 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x34>
   141b2:	bf00      	nop
   141b4:	f813 5f02 	ldrb.w	r5, [r3, #2]!
   141b8:	4322      	orrs	r2, r4
   141ba:	785c      	ldrb	r4, [r3, #1]
   141bc:	432a      	orrs	r2, r5
   141be:	f1bc 0c01 	subs.w	ip, ip, #1
   141c2:	d1f7      	bne.n	141b4 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x24>
   141c4:	1e49      	subs	r1, r1, #1
   141c6:	bf5c      	itt	pl
   141c8:	5c40      	ldrbpl	r0, [r0, r1]
   141ca:	4302      	orrpl	r2, r0
   141cc:	2a00      	cmp	r2, #0
   141ce:	bf0c      	ite	eq
   141d0:	2001      	moveq	r0, #1
   141d2:	2000      	movne	r0, #0
   141d4:	bc30      	pop	{r4, r5}
   141d6:	4770      	bx	lr

000141d8 <sym_RQLOJUGFCKCS5YSXHMF5LIHXPBLO5AO63KQE3GQ>:
   141d8:	4907      	ldr	r1, [pc, #28]	; (141f8 <sym_RQLOJUGFCKCS5YSXHMF5LIHXPBLO5AO63KQE3GQ+0x20>)
   141da:	b508      	push	{r3, lr}
   141dc:	7809      	ldrb	r1, [r1, #0]
   141de:	f88d 1000 	strb.w	r1, [sp]
   141e2:	f89d 1000 	ldrb.w	r1, [sp]
   141e6:	2900      	cmp	r1, #0
   141e8:	bf1c      	itt	ne
   141ea:	2000      	movne	r0, #0
   141ec:	bd08      	popne	{r3, pc}
   141ee:	4903      	ldr	r1, [pc, #12]	; (141fc <sym_RQLOJUGFCKCS5YSXHMF5LIHXPBLO5AO63KQE3GQ+0x24>)
   141f0:	f00f f9c7 	bl	23582 <sym_VCM3BICZ5QLCEBBK5263KDY2XJT4MJLUF43FCFA>
   141f4:	2001      	movs	r0, #1
   141f6:	bd08      	pop	{r3, pc}
   141f8:	200003e6 	.word	0x200003e6
   141fc:	200003e7 	.word	0x200003e7

00014200 <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ>:
   14200:	b510      	push	{r4, lr}
   14202:	4c05      	ldr	r4, [pc, #20]	; (14218 <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ+0x18>)
   14204:	21ff      	movs	r1, #255	; 0xff
   14206:	7021      	strb	r1, [r4, #0]
   14208:	4601      	mov	r1, r0
   1420a:	1c60      	adds	r0, r4, #1
   1420c:	f00f f9b9 	bl	23582 <sym_VCM3BICZ5QLCEBBK5263KDY2XJT4MJLUF43FCFA>
   14210:	2000      	movs	r0, #0
   14212:	7020      	strb	r0, [r4, #0]
   14214:	bd10      	pop	{r4, pc}
   14216:	0000      	.short	0x0000
   14218:	200003e6 	.word	0x200003e6

0001421c <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ>:
   1421c:	b570      	push	{r4, r5, r6, lr}
   1421e:	ea81 4111 	eor.w	r1, r1, r1, lsr #16
   14222:	b289      	uxth	r1, r1
   14224:	7ac4      	ldrb	r4, [r0, #11]
   14226:	404a      	eors	r2, r1
   14228:	f05f 0300 	movs.w	r3, #0
   1422c:	f002 0cff 	and.w	ip, r2, #255	; 0xff
   14230:	0a12      	lsrs	r2, r2, #8
   14232:	fa92 f2a2 	rbit	r2, r2
   14236:	fa9c fcac 	rbit	ip, ip
   1423a:	0e12      	lsrs	r2, r2, #24
   1423c:	ea4f 6c1c 	mov.w	ip, ip, lsr #24
   14240:	ea4c 2202 	orr.w	r2, ip, r2, lsl #8
   14244:	eb02 1202 	add.w	r2, r2, r2, lsl #4
   14248:	1c5b      	adds	r3, r3, #1
   1424a:	440a      	add	r2, r1
   1424c:	b2db      	uxtb	r3, r3
   1424e:	b292      	uxth	r2, r2
   14250:	2b03      	cmp	r3, #3
   14252:	d3eb      	bcc.n	1422c <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x10>
   14254:	f8df c084 	ldr.w	ip, [pc, #132]	; 142dc <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0xc0>
   14258:	4051      	eors	r1, r2
   1425a:	4663      	mov	r3, ip
   1425c:	2200      	movs	r2, #0
   1425e:	fbe1 320c 	umlal	r3, r2, r1, ip
   14262:	0912      	lsrs	r2, r2, #4
   14264:	f06f 0324 	mvn.w	r3, #36	; 0x24
   14268:	fb02 1203 	mla	r2, r2, r3, r1
   1426c:	b2d2      	uxtb	r2, r2
   1426e:	eb00 03d2 	add.w	r3, r0, r2, lsr #3
   14272:	f002 0c07 	and.w	ip, r2, #7
   14276:	785d      	ldrb	r5, [r3, #1]
   14278:	2301      	movs	r3, #1
   1427a:	fa03 fc0c 	lsl.w	ip, r3, ip
   1427e:	ea15 0f0c 	tst.w	r5, ip
   14282:	bf1c      	itt	ne
   14284:	4610      	movne	r0, r2
   14286:	bd70      	popne	{r4, r5, r6, pc}
   14288:	4361      	muls	r1, r4
   1428a:	0c09      	lsrs	r1, r1, #16
   1428c:	1c49      	adds	r1, r1, #1
   1428e:	b2c9      	uxtb	r1, r1
   14290:	f05f 0400 	movs.w	r4, #0
   14294:	eb00 0c04 	add.w	ip, r0, r4
   14298:	f89c 2006 	ldrb.w	r2, [ip, #6]
   1429c:	428a      	cmp	r2, r1
   1429e:	bf27      	ittee	cs
   142a0:	2200      	movcs	r2, #0
   142a2:	f89c c001 	ldrbcs.w	ip, [ip, #1]
   142a6:	1a89      	subcc	r1, r1, r2
   142a8:	b2c9      	uxtbcc	r1, r1
   142aa:	d30b      	bcc.n	142c4 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0xa8>
   142ac:	fa03 f502 	lsl.w	r5, r3, r2
   142b0:	ea1c 0f05 	tst.w	ip, r5
   142b4:	bf1c      	itt	ne
   142b6:	1e49      	subne	r1, r1, #1
   142b8:	b2c9      	uxtbne	r1, r1
   142ba:	b159      	cbz	r1, 142d4 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0xb8>
   142bc:	1c52      	adds	r2, r2, #1
   142be:	b2d2      	uxtb	r2, r2
   142c0:	2a08      	cmp	r2, #8
   142c2:	d3f3      	bcc.n	142ac <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x90>
   142c4:	1c62      	adds	r2, r4, #1
   142c6:	b2d4      	uxtb	r4, r2
   142c8:	2c05      	cmp	r4, #5
   142ca:	d3e3      	bcc.n	14294 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x78>
   142cc:	21f9      	movs	r1, #249	; 0xf9
   142ce:	2046      	movs	r0, #70	; 0x46
   142d0:	f7fd fb56 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   142d4:	eb02 00c4 	add.w	r0, r2, r4, lsl #3
   142d8:	b2c0      	uxtb	r0, r0
   142da:	bd70      	pop	{r4, r5, r6, pc}
   142dc:	6eb3e453 	.word	0x6eb3e453

000142e0 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA>:
   142e0:	b570      	push	{r4, r5, r6, lr}
   142e2:	4604      	mov	r4, r0
   142e4:	f890 0028 	ldrb.w	r0, [r0, #40]	; 0x28
   142e8:	b108      	cbz	r0, 142ee <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0xe>
   142ea:	2825      	cmp	r0, #37	; 0x25
   142ec:	d901      	bls.n	142f2 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x12>
   142ee:	2012      	movs	r0, #18
   142f0:	bd70      	pop	{r4, r5, r6, pc}
   142f2:	2a00      	cmp	r2, #0
   142f4:	bf04      	itt	eq
   142f6:	2000      	moveq	r0, #0
   142f8:	bd70      	popeq	{r4, r5, r6, pc}
   142fa:	7f60      	ldrb	r0, [r4, #29]
   142fc:	b110      	cbz	r0, 14304 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x24>
   142fe:	2801      	cmp	r0, #1
   14300:	d050      	beq.n	143a4 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0xc4>
   14302:	e047      	b.n	14394 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0xb4>
   14304:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
   14308:	f894 1029 	ldrb.w	r1, [r4, #41]	; 0x29
   1430c:	4b2a      	ldr	r3, [pc, #168]	; (143b8 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0xd8>)
   1430e:	fb01 0002 	mla	r0, r1, r2, r0
   14312:	2500      	movs	r5, #0
   14314:	461a      	mov	r2, r3
   14316:	4629      	mov	r1, r5
   14318:	fbe0 2103 	umlal	r2, r1, r0, r3
   1431c:	0909      	lsrs	r1, r1, #4
   1431e:	f06f 0224 	mvn.w	r2, #36	; 0x24
   14322:	fb01 0002 	mla	r0, r1, r2, r0
   14326:	b2c0      	uxtb	r0, r0
   14328:	eb04 02d0 	add.w	r2, r4, r0, lsr #3
   1432c:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
   14330:	f000 0107 	and.w	r1, r0, #7
   14334:	7f92      	ldrb	r2, [r2, #30]
   14336:	2301      	movs	r3, #1
   14338:	fa03 f101 	lsl.w	r1, r3, r1
   1433c:	420a      	tst	r2, r1
   1433e:	bf1e      	ittt	ne
   14340:	f884 002b 	strbne.w	r0, [r4, #43]	; 0x2b
   14344:	4628      	movne	r0, r5
   14346:	bd70      	popne	{r4, r5, r6, pc}
   14348:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
   1434c:	fbb0 f2f1 	udiv	r2, r0, r1
   14350:	fb01 0012 	mls	r0, r1, r2, r0
   14354:	1c40      	adds	r0, r0, #1
   14356:	b2c1      	uxtb	r1, r0
   14358:	f05f 0000 	movs.w	r0, #0
   1435c:	eb04 0c00 	add.w	ip, r4, r0
   14360:	f89c 2023 	ldrb.w	r2, [ip, #35]	; 0x23
   14364:	428a      	cmp	r2, r1
   14366:	bf27      	ittee	cs
   14368:	2200      	movcs	r2, #0
   1436a:	f89c c01e 	ldrbcs.w	ip, [ip, #30]
   1436e:	1a89      	subcc	r1, r1, r2
   14370:	b2c9      	uxtbcc	r1, r1
   14372:	d30b      	bcc.n	1438c <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0xac>
   14374:	fa03 f602 	lsl.w	r6, r3, r2
   14378:	ea1c 0f06 	tst.w	ip, r6
   1437c:	bf1c      	itt	ne
   1437e:	1e49      	subne	r1, r1, #1
   14380:	b2c9      	uxtbne	r1, r1
   14382:	b149      	cbz	r1, 14398 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0xb8>
   14384:	1c52      	adds	r2, r2, #1
   14386:	b2d2      	uxtb	r2, r2
   14388:	2a08      	cmp	r2, #8
   1438a:	d3f3      	bcc.n	14374 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x94>
   1438c:	1c40      	adds	r0, r0, #1
   1438e:	b2c0      	uxtb	r0, r0
   14390:	2805      	cmp	r0, #5
   14392:	d3e3      	bcc.n	1435c <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x7c>
   14394:	201f      	movs	r0, #31
   14396:	bd70      	pop	{r4, r5, r6, pc}
   14398:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
   1439c:	f884 002b 	strb.w	r0, [r4, #43]	; 0x2b
   143a0:	4628      	mov	r0, r5
   143a2:	bd70      	pop	{r4, r5, r6, pc}
   143a4:	89a2      	ldrh	r2, [r4, #12]
   143a6:	6989      	ldr	r1, [r1, #24]
   143a8:	f104 001d 	add.w	r0, r4, #29
   143ac:	f7ff ff36 	bl	1421c <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ>
   143b0:	f884 002b 	strb.w	r0, [r4, #43]	; 0x2b
   143b4:	2000      	movs	r0, #0
   143b6:	bd70      	pop	{r4, r5, r6, pc}
   143b8:	6eb3e453 	.word	0x6eb3e453

000143bc <sym_3S3ZPZTS3JKT3LR3P6QZ3KOW4P72YQZEIQOYGSA>:
   143bc:	7841      	ldrb	r1, [r0, #1]
   143be:	b141      	cbz	r1, 143d2 <sym_3S3ZPZTS3JKT3LR3P6QZ3KOW4P72YQZEIQOYGSA+0x16>
   143c0:	78c0      	ldrb	r0, [r0, #3]
   143c2:	282b      	cmp	r0, #43	; 0x2b
   143c4:	d203      	bcs.n	143ce <sym_3S3ZPZTS3JKT3LR3P6QZ3KOW4P72YQZEIQOYGSA+0x12>
   143c6:	4a04      	ldr	r2, [pc, #16]	; (143d8 <sym_3S3ZPZTS3JKT3LR3P6QZ3KOW4P72YQZEIQOYGSA+0x1c>)
   143c8:	5c10      	ldrb	r0, [r2, r0]
   143ca:	4288      	cmp	r0, r1
   143cc:	d101      	bne.n	143d2 <sym_3S3ZPZTS3JKT3LR3P6QZ3KOW4P72YQZEIQOYGSA+0x16>
   143ce:	2001      	movs	r0, #1
   143d0:	4770      	bx	lr
   143d2:	2000      	movs	r0, #0
   143d4:	4770      	bx	lr
   143d6:	0000      	.short	0x0000
   143d8:	00023612 	.word	0x00023612

000143dc <sym_U3LPDM4ZN7F4EBRA6GBYBEUAHXDWZU7U4P3OZRQ>:
   143dc:	b510      	push	{r4, lr}
   143de:	2201      	movs	r2, #1
   143e0:	70c1      	strb	r1, [r0, #3]
   143e2:	292b      	cmp	r1, #43	; 0x2b
   143e4:	bf3c      	itt	cc
   143e6:	4a06      	ldrcc	r2, [pc, #24]	; (14400 <sym_U3LPDM4ZN7F4EBRA6GBYBEUAHXDWZU7U4P3OZRQ+0x24>)
   143e8:	5c52      	ldrbcc	r2, [r2, r1]
   143ea:	d306      	bcc.n	143fa <sym_U3LPDM4ZN7F4EBRA6GBYBEUAHXDWZU7U4P3OZRQ+0x1e>
   143ec:	29ff      	cmp	r1, #255	; 0xff
   143ee:	d004      	beq.n	143fa <sym_U3LPDM4ZN7F4EBRA6GBYBEUAHXDWZU7U4P3OZRQ+0x1e>
   143f0:	f44f 618f 	mov.w	r1, #1144	; 0x478
   143f4:	202a      	movs	r0, #42	; 0x2a
   143f6:	f7fd fac3 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   143fa:	7042      	strb	r2, [r0, #1]
   143fc:	bd10      	pop	{r4, pc}
   143fe:	0000      	.short	0x0000
   14400:	00023612 	.word	0x00023612

00014404 <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA>:
   14404:	4904      	ldr	r1, [pc, #16]	; (14418 <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA+0x14>)
   14406:	7d89      	ldrb	r1, [r1, #22]
   14408:	f001 0104 	and.w	r1, r1, #4
   1440c:	4308      	orrs	r0, r1
   1440e:	bf0c      	ite	eq
   14410:	2001      	moveq	r0, #1
   14412:	2000      	movne	r0, #0
   14414:	4770      	bx	lr
   14416:	0000      	.short	0x0000
   14418:	20001720 	.word	0x20001720

0001441c <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I>:
   1441c:	4803      	ldr	r0, [pc, #12]	; (1442c <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I+0x10>)
   1441e:	7d80      	ldrb	r0, [r0, #22]
   14420:	f010 0f02 	tst.w	r0, #2
   14424:	bf0c      	ite	eq
   14426:	2001      	moveq	r0, #1
   14428:	2000      	movne	r0, #0
   1442a:	4770      	bx	lr
   1442c:	20001720 	.word	0x20001720

00014430 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY>:
   14430:	4803      	ldr	r0, [pc, #12]	; (14440 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x10>)
   14432:	7d80      	ldrb	r0, [r0, #22]
   14434:	f010 0f01 	tst.w	r0, #1
   14438:	bf0c      	ite	eq
   1443a:	2001      	moveq	r0, #1
   1443c:	2000      	movne	r0, #0
   1443e:	4770      	bx	lr
   14440:	20001720 	.word	0x20001720

00014444 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA>:
   14444:	b510      	push	{r4, lr}
   14446:	7901      	ldrb	r1, [r0, #4]
   14448:	b181      	cbz	r1, 1446c <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x28>
   1444a:	2901      	cmp	r1, #1
   1444c:	bf1c      	itt	ne
   1444e:	2000      	movne	r0, #0
   14450:	bd10      	popne	{r4, pc}
   14452:	8842      	ldrh	r2, [r0, #2]
   14454:	6883      	ldr	r3, [r0, #8]
   14456:	8800      	ldrh	r0, [r0, #0]
   14458:	f05f 0101 	movs.w	r1, #1
   1445c:	f000 f80c 	bl	14478 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x34>
   14460:	2800      	cmp	r0, #0
   14462:	bf08      	it	eq
   14464:	f000 f868 	bleq	14538 <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q>
   14468:	2001      	movs	r0, #1
   1446a:	bd10      	pop	{r4, pc}
   1446c:	8842      	ldrh	r2, [r0, #2]
   1446e:	6883      	ldr	r3, [r0, #8]
   14470:	8800      	ldrh	r0, [r0, #0]
   14472:	2102      	movs	r1, #2
   14474:	e7f2      	b.n	1445c <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x18>
   14476:	0000      	movs	r0, r0
   14478:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1447c:	b085      	sub	sp, #20
   1447e:	4688      	mov	r8, r1
   14480:	4699      	mov	r9, r3
   14482:	4615      	mov	r5, r2
   14484:	4606      	mov	r6, r0
   14486:	a902      	add	r1, sp, #8
   14488:	f00b fdd6 	bl	20038 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   1448c:	2800      	cmp	r0, #0
   1448e:	d149      	bne.n	14524 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xe0>
   14490:	9803      	ldr	r0, [sp, #12]
   14492:	2d00      	cmp	r5, #0
   14494:	f100 04a0 	add.w	r4, r0, #160	; 0xa0
   14498:	bf04      	itt	eq
   1449a:	2001      	moveq	r0, #1
   1449c:	7720      	strbeq	r0, [r4, #28]
   1449e:	d041      	beq.n	14524 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xe0>
   144a0:	4630      	mov	r0, r6
   144a2:	f7fd ff4f 	bl	12344 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
   144a6:	0007      	movs	r7, r0
   144a8:	d00c      	beq.n	144c4 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x80>
   144aa:	4629      	mov	r1, r5
   144ac:	f00b f9d6 	bl	1f85c <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY>
   144b0:	0001      	movs	r1, r0
   144b2:	d003      	beq.n	144bc <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x78>
   144b4:	481f      	ldr	r0, [pc, #124]	; (14534 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xf0>)
   144b6:	8840      	ldrh	r0, [r0, #2]
   144b8:	4285      	cmp	r5, r0
   144ba:	d907      	bls.n	144cc <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x88>
   144bc:	b005      	add	sp, #20
   144be:	2000      	movs	r0, #0
   144c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   144c4:	2168      	movs	r1, #104	; 0x68
   144c6:	202b      	movs	r0, #43	; 0x2b
   144c8:	f7fd fa5a 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   144cc:	466a      	mov	r2, sp
   144ce:	4638      	mov	r0, r7
   144d0:	f00b f9bd 	bl	1f84e <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
   144d4:	9800      	ldr	r0, [sp, #0]
   144d6:	2600      	movs	r6, #0
   144d8:	8006      	strh	r6, [r0, #0]
   144da:	7086      	strb	r6, [r0, #2]
   144dc:	7f21      	ldrb	r1, [r4, #28]
   144de:	2900      	cmp	r1, #0
   144e0:	bf18      	it	ne
   144e2:	f04f 0802 	movne.w	r8, #2
   144e6:	4641      	mov	r1, r8
   144e8:	f00c fa11 	bl	2090e <sym_IGXXIFMDOTCDOLQAILBV5BXIU5R6AALP5I4HZGQ>
   144ec:	9800      	ldr	r0, [sp, #0]
   144ee:	462a      	mov	r2, r5
   144f0:	4649      	mov	r1, r9
   144f2:	1cc0      	adds	r0, r0, #3
   144f4:	f00a f9b3 	bl	1e85e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   144f8:	4629      	mov	r1, r5
   144fa:	4638      	mov	r0, r7
   144fc:	f00b f963 	bl	1f7c6 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ>
   14500:	b1a0      	cbz	r0, 1452c <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xe8>
   14502:	f89d 0008 	ldrb.w	r0, [sp, #8]
   14506:	b160      	cbz	r0, 14522 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xde>
   14508:	9803      	ldr	r0, [sp, #12]
   1450a:	f890 02a2 	ldrb.w	r0, [r0, #674]	; 0x2a2
   1450e:	b128      	cbz	r0, 1451c <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xd8>
   14510:	9803      	ldr	r0, [sp, #12]
   14512:	f880 62a2 	strb.w	r6, [r0, #674]	; 0x2a2
   14516:	9803      	ldr	r0, [sp, #12]
   14518:	f00d f8a3 	bl	21662 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y>
   1451c:	9803      	ldr	r0, [sp, #12]
   1451e:	f8a0 629a 	strh.w	r6, [r0, #666]	; 0x29a
   14522:	7726      	strb	r6, [r4, #28]
   14524:	b005      	add	sp, #20
   14526:	2001      	movs	r0, #1
   14528:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1452c:	217d      	movs	r1, #125	; 0x7d
   1452e:	202b      	movs	r0, #43	; 0x2b
   14530:	f7fd fa26 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   14534:	20001720 	.word	0x20001720

00014538 <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q>:
   14538:	2202      	movs	r2, #2
   1453a:	4902      	ldr	r1, [pc, #8]	; (14544 <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q+0xc>)
   1453c:	4802      	ldr	r0, [pc, #8]	; (14548 <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q+0x10>)
   1453e:	f000 b805 	b.w	1454c <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
   14542:	0000      	.short	0x0000
   14544:	00020b9f 	.word	0x00020b9f
   14548:	20001777 	.word	0x20001777

0001454c <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>:
   1454c:	b538      	push	{r3, r4, r5, lr}
   1454e:	b328      	cbz	r0, 1459c <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA+0x50>
   14550:	7a03      	ldrb	r3, [r0, #8]
   14552:	f88d 3000 	strb.w	r3, [sp]
   14556:	f89d 3000 	ldrb.w	r3, [sp]
   1455a:	2b00      	cmp	r3, #0
   1455c:	bf18      	it	ne
   1455e:	bd38      	popne	{r3, r4, r5, pc}
   14560:	6041      	str	r1, [r0, #4]
   14562:	f100 0108 	add.w	r1, r0, #8
   14566:	700a      	strb	r2, [r1, #0]
   14568:	f3ef 8110 	mrs	r1, PRIMASK
   1456c:	b672      	cpsid	i
   1456e:	4b11      	ldr	r3, [pc, #68]	; (145b4 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA+0x68>)
   14570:	6003      	str	r3, [r0, #0]
   14572:	1f1a      	subs	r2, r3, #4
   14574:	f8d2 c004 	ldr.w	ip, [r2, #4]
   14578:	f89c c008 	ldrb.w	ip, [ip, #8]
   1457c:	f88d c000 	strb.w	ip, [sp]
   14580:	f8dd c000 	ldr.w	ip, [sp]
   14584:	f8cd c000 	str.w	ip, [sp]
   14588:	f89d 4000 	ldrb.w	r4, [sp]
   1458c:	2c01      	cmp	r4, #1
   1458e:	bf14      	ite	ne
   14590:	6813      	ldrne	r3, [r2, #0]
   14592:	6013      	streq	r3, [r2, #0]
   14594:	6018      	str	r0, [r3, #0]
   14596:	6010      	str	r0, [r2, #0]
   14598:	b931      	cbnz	r1, 145a8 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA+0x5c>
   1459a:	e004      	b.n	145a6 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA+0x5a>
   1459c:	f44f 6192 	mov.w	r1, #1168	; 0x490
   145a0:	2010      	movs	r0, #16
   145a2:	f7fd f9ed 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   145a6:	b662      	cpsie	i
   145a8:	4803      	ldr	r0, [pc, #12]	; (145b8 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA+0x6c>)
   145aa:	7800      	ldrb	r0, [r0, #0]
   145ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   145b0:	f7fc be82 	b.w	112b8 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
   145b4:	20001798 	.word	0x20001798
   145b8:	200003ec 	.word	0x200003ec

000145bc <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>:
   145bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   145c0:	f8df b414 	ldr.w	fp, [pc, #1044]	; 149d8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x41c>
   145c4:	2701      	movs	r7, #1
   145c6:	b087      	sub	sp, #28
   145c8:	4605      	mov	r5, r0
   145ca:	2600      	movs	r6, #0
   145cc:	f8db 0004 	ldr.w	r0, [fp, #4]
   145d0:	7a00      	ldrb	r0, [r0, #8]
   145d2:	f88d 0000 	strb.w	r0, [sp]
   145d6:	9800      	ldr	r0, [sp, #0]
   145d8:	9000      	str	r0, [sp, #0]
   145da:	f89d 1000 	ldrb.w	r1, [sp]
   145de:	2927      	cmp	r1, #39	; 0x27
   145e0:	d108      	bne.n	145f4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x38>
   145e2:	48fe      	ldr	r0, [pc, #1016]	; (149dc <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x420>)
   145e4:	7dc1      	ldrb	r1, [r0, #23]
   145e6:	b129      	cbz	r1, 145f4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x38>
   145e8:	8b00      	ldrh	r0, [r0, #24]
   145ea:	2800      	cmp	r0, #0
   145ec:	bf04      	itt	eq
   145ee:	b007      	addeq	sp, #28
   145f0:	e8bd 8ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   145f4:	4630      	mov	r0, r6
   145f6:	f8db 4004 	ldr.w	r4, [fp, #4]
   145fa:	7a21      	ldrb	r1, [r4, #8]
   145fc:	f88d 1000 	strb.w	r1, [sp]
   14600:	9900      	ldr	r1, [sp, #0]
   14602:	9100      	str	r1, [sp, #0]
   14604:	f89d 2000 	ldrb.w	r2, [sp]
   14608:	2a01      	cmp	r2, #1
   1460a:	bf08      	it	eq
   1460c:	4604      	moveq	r4, r0
   1460e:	d011      	beq.n	14634 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x78>
   14610:	f3ef 8110 	mrs	r1, PRIMASK
   14614:	b672      	cpsid	i
   14616:	6822      	ldr	r2, [r4, #0]
   14618:	f8cb 2004 	str.w	r2, [fp, #4]
   1461c:	b901      	cbnz	r1, 14620 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x64>
   1461e:	b662      	cpsie	i
   14620:	7a21      	ldrb	r1, [r4, #8]
   14622:	f88d 1000 	strb.w	r1, [sp]
   14626:	9900      	ldr	r1, [sp, #0]
   14628:	9100      	str	r1, [sp, #0]
   1462a:	f89d 2000 	ldrb.w	r2, [sp]
   1462e:	2a00      	cmp	r2, #0
   14630:	bf08      	it	eq
   14632:	4638      	moveq	r0, r7
   14634:	2800      	cmp	r0, #0
   14636:	d1dd      	bne.n	145f4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x38>
   14638:	b304      	cbz	r4, 1467c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xc0>
   1463a:	7a20      	ldrb	r0, [r4, #8]
   1463c:	f88d 0000 	strb.w	r0, [sp]
   14640:	f89d 8000 	ldrb.w	r8, [sp]
   14644:	f1a8 0002 	sub.w	r0, r8, #2
   14648:	2829      	cmp	r0, #41	; 0x29
   1464a:	f080 8290 	bcs.w	14b6e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x5b2>
   1464e:	e8df f000 	tbb	[pc, r0]
   14652:	fe19      	.short	0xfe19
   14654:	fefd2d81 	.word	0xfefd2d81
   14658:	fefefcfe 	.word	0xfefefcfe
   1465c:	fbfefefe 	.word	0xfbfefefe
   14660:	fefefd2d 	.word	0xfefefd2d
   14664:	6141fd2d 	.word	0x6141fd2d
   14668:	7070fe41 	.word	0x7070fe41
   1466c:	fefe2dfe 	.word	0xfefe2dfe
   14670:	f82df9fa 	.word	0xf82df9fa
   14674:	f5f6f725 	.word	0xf5f6f725
   14678:	00393939 	.word	0x00393939
   1467c:	b007      	add	sp, #28
   1467e:	2000      	movs	r0, #0
   14680:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14684:	6862      	ldr	r2, [r4, #4]
   14686:	b922      	cbnz	r2, 14692 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xd6>
   14688:	f240 318a 	movw	r1, #906	; 0x38a
   1468c:	2010      	movs	r0, #16
   1468e:	f7fd f977 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   14692:	4629      	mov	r1, r5
   14694:	4620      	mov	r0, r4
   14696:	4790      	blx	r2
   14698:	7226      	strb	r6, [r4, #8]
   1469a:	e00f      	b.n	146bc <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x100>
   1469c:	6862      	ldr	r2, [r4, #4]
   1469e:	2a00      	cmp	r2, #0
   146a0:	d1f7      	bne.n	14692 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xd6>
   146a2:	f240 3193 	movw	r1, #915	; 0x393
   146a6:	2010      	movs	r0, #16
   146a8:	f7fd f96a 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   146ac:	48cc      	ldr	r0, [pc, #816]	; (149e0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x424>)
   146ae:	6803      	ldr	r3, [r0, #0]
   146b0:	b11b      	cbz	r3, 146ba <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xfe>
   146b2:	6860      	ldr	r0, [r4, #4]
   146b4:	4642      	mov	r2, r8
   146b6:	4629      	mov	r1, r5
   146b8:	4798      	blx	r3
   146ba:	7226      	strb	r6, [r4, #8]
   146bc:	b007      	add	sp, #28
   146be:	2004      	movs	r0, #4
   146c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   146c4:	6862      	ldr	r2, [r4, #4]
   146c6:	2a00      	cmp	r2, #0
   146c8:	d1e3      	bne.n	14692 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xd6>
   146ca:	f240 31af 	movw	r1, #943	; 0x3af
   146ce:	2010      	movs	r0, #16
   146d0:	f7fd f956 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   146d4:	48c3      	ldr	r0, [pc, #780]	; (149e4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x428>)
   146d6:	6803      	ldr	r3, [r0, #0]
   146d8:	2b00      	cmp	r3, #0
   146da:	bf04      	itt	eq
   146dc:	46b1      	moveq	r9, r6
   146de:	7226      	strbeq	r6, [r4, #8]
   146e0:	d0ec      	beq.n	146bc <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x100>
   146e2:	6867      	ldr	r7, [r4, #4]
   146e4:	4642      	mov	r2, r8
   146e6:	4629      	mov	r1, r5
   146e8:	4638      	mov	r0, r7
   146ea:	4798      	blx	r3
   146ec:	7828      	ldrb	r0, [r5, #0]
   146ee:	281b      	cmp	r0, #27
   146f0:	d003      	beq.n	146fa <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x13e>
   146f2:	2819      	cmp	r0, #25
   146f4:	d10c      	bne.n	14710 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x154>
   146f6:	7928      	ldrb	r0, [r5, #4]
   146f8:	b150      	cbz	r0, 14710 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x154>
   146fa:	8938      	ldrh	r0, [r7, #8]
   146fc:	2104      	movs	r1, #4
   146fe:	f7fd fc67 	bl	11fd0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
   14702:	2800      	cmp	r0, #0
   14704:	d0da      	beq.n	146bc <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x100>
   14706:	f44f 7171 	mov.w	r1, #964	; 0x3c4
   1470a:	2010      	movs	r0, #16
   1470c:	f7fd f938 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   14710:	7226      	strb	r6, [r4, #8]
   14712:	e7d3      	b.n	146bc <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x100>
   14714:	48b4      	ldr	r0, [pc, #720]	; (149e8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x42c>)
   14716:	6803      	ldr	r3, [r0, #0]
   14718:	2b00      	cmp	r3, #0
   1471a:	bf04      	itt	eq
   1471c:	46b1      	moveq	r9, r6
   1471e:	7226      	strbeq	r6, [r4, #8]
   14720:	d0cc      	beq.n	146bc <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x100>
   14722:	6860      	ldr	r0, [r4, #4]
   14724:	2200      	movs	r2, #0
   14726:	4629      	mov	r1, r5
   14728:	4798      	blx	r3
   1472a:	b007      	add	sp, #28
   1472c:	2004      	movs	r0, #4
   1472e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14732:	48ae      	ldr	r0, [pc, #696]	; (149ec <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x430>)
   14734:	6803      	ldr	r3, [r0, #0]
   14736:	2b00      	cmp	r3, #0
   14738:	bf04      	itt	eq
   1473a:	46b1      	moveq	r9, r6
   1473c:	7226      	strbeq	r6, [r4, #8]
   1473e:	d0bd      	beq.n	146bc <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x100>
   14740:	6860      	ldr	r0, [r4, #4]
   14742:	4642      	mov	r2, r8
   14744:	4629      	mov	r1, r5
   14746:	4798      	blx	r3
   14748:	f1b8 0f1b 	cmp.w	r8, #27
   1474c:	bf1c      	itt	ne
   1474e:	46b1      	movne	r9, r6
   14750:	7226      	strbne	r6, [r4, #8]
   14752:	e7b3      	b.n	146bc <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x100>
   14754:	48a6      	ldr	r0, [pc, #664]	; (149f0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x434>)
   14756:	6803      	ldr	r3, [r0, #0]
   14758:	2b00      	cmp	r3, #0
   1475a:	bf04      	itt	eq
   1475c:	46b1      	moveq	r9, r6
   1475e:	7226      	strbeq	r6, [r4, #8]
   14760:	d0ac      	beq.n	146bc <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x100>
   14762:	2204      	movs	r2, #4
   14764:	4629      	mov	r1, r5
   14766:	2000      	movs	r0, #0
   14768:	4798      	blx	r3
   1476a:	f007 faab 	bl	1bcc4 <sym_ZT5CPONXDAFRAB5RWMA6LXPAT5TEFYV2YKU6P6A>
   1476e:	2800      	cmp	r0, #0
   14770:	d0a4      	beq.n	146bc <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x100>
   14772:	7828      	ldrb	r0, [r5, #0]
   14774:	2805      	cmp	r0, #5
   14776:	d003      	beq.n	14780 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1c4>
   14778:	21bf      	movs	r1, #191	; 0xbf
   1477a:	2010      	movs	r0, #16
   1477c:	f7fd f900 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   14780:	7ba8      	ldrb	r0, [r5, #14]
   14782:	f010 0f10 	tst.w	r0, #16
   14786:	d028      	beq.n	147da <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x21e>
   14788:	1d28      	adds	r0, r5, #4
   1478a:	4c9a      	ldr	r4, [pc, #616]	; (149f4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x438>)
   1478c:	c80f      	ldmia	r0, {r0, r1, r2, r3}
   1478e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   14792:	e9d5 0105 	ldrd	r0, r1, [r5, #20]
   14796:	69ea      	ldr	r2, [r5, #28]
   14798:	6120      	str	r0, [r4, #16]
   1479a:	e9c4 1205 	strd	r1, r2, [r4, #20]
   1479e:	7b2a      	ldrb	r2, [r5, #12]
   147a0:	f105 0120 	add.w	r1, r5, #32
   147a4:	f104 001c 	add.w	r0, r4, #28
   147a8:	f00a f859 	bl	1e85e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   147ac:	7aa0      	ldrb	r0, [r4, #10]
   147ae:	f010 0f04 	tst.w	r0, #4
   147b2:	d002      	beq.n	147ba <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1fe>
   147b4:	7ce0      	ldrb	r0, [r4, #19]
   147b6:	28fe      	cmp	r0, #254	; 0xfe
   147b8:	d013      	beq.n	147e2 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x226>
   147ba:	f04f 0804 	mov.w	r8, #4
   147be:	f885 8000 	strb.w	r8, [r5]
   147c2:	4621      	mov	r1, r4
   147c4:	1d28      	adds	r0, r5, #4
   147c6:	f00e fee1 	bl	2358c <sym_LZ2C54IT4LHTBXT53TEJK4VNCXFB5NWZJY2LS7Y>
   147ca:	7aa0      	ldrb	r0, [r4, #10]
   147cc:	f010 0f08 	tst.w	r0, #8
   147d0:	bf18      	it	ne
   147d2:	f885 800e 	strbne.w	r8, [r5, #14]
   147d6:	d13c      	bne.n	14852 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x296>
   147d8:	e01b      	b.n	14812 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x256>
   147da:	21c0      	movs	r1, #192	; 0xc0
   147dc:	2010      	movs	r0, #16
   147de:	f7fd f8cf 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   147e2:	2013      	movs	r0, #19
   147e4:	7028      	strb	r0, [r5, #0]
   147e6:	7820      	ldrb	r0, [r4, #0]
   147e8:	7128      	strb	r0, [r5, #4]
   147ea:	716f      	strb	r7, [r5, #5]
   147ec:	7860      	ldrb	r0, [r4, #1]
   147ee:	71a8      	strb	r0, [r5, #6]
   147f0:	f8d4 0002 	ldr.w	r0, [r4, #2]
   147f4:	f8c5 0007 	str.w	r0, [r5, #7]
   147f8:	88e0      	ldrh	r0, [r4, #6]
   147fa:	f8a5 000b 	strh.w	r0, [r5, #11]
   147fe:	20fe      	movs	r0, #254	; 0xfe
   14800:	7368      	strb	r0, [r5, #13]
   14802:	6960      	ldr	r0, [r4, #20]
   14804:	f8c5 000e 	str.w	r0, [r5, #14]
   14808:	8b20      	ldrh	r0, [r4, #24]
   1480a:	8268      	strh	r0, [r5, #18]
   1480c:	7a60      	ldrb	r0, [r4, #9]
   1480e:	7528      	strb	r0, [r5, #20]
   14810:	e754      	b.n	146bc <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x100>
   14812:	f010 0f01 	tst.w	r0, #1
   14816:	bf1c      	itt	ne
   14818:	f010 0f02 	tstne.w	r0, #2
   1481c:	73ae      	strbne	r6, [r5, #14]
   1481e:	d118      	bne.n	14852 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x296>
   14820:	f010 0f04 	tst.w	r0, #4
   14824:	bf18      	it	ne
   14826:	73af      	strbne	r7, [r5, #14]
   14828:	d113      	bne.n	14852 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x296>
   1482a:	f010 0f01 	tst.w	r0, #1
   1482e:	d118      	bne.n	14862 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x2a6>
   14830:	f010 0f02 	tst.w	r0, #2
   14834:	bf18      	it	ne
   14836:	2002      	movne	r0, #2
   14838:	d013      	beq.n	14862 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x2a6>
   1483a:	e009      	b.n	14850 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x294>
   1483c:	e178      	b.n	14b30 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x574>
   1483e:	e15d      	b.n	14afc <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x540>
   14840:	e153      	b.n	14aea <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x52e>
   14842:	e18f      	b.n	14b64 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x5a8>
   14844:	e16b      	b.n	14b1e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x562>
   14846:	e184      	b.n	14b52 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x596>
   14848:	e191      	b.n	14b6e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x5b2>
   1484a:	e15f      	b.n	14b0c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x550>
   1484c:	e019      	b.n	14882 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x2c6>
   1484e:	e021      	b.n	14894 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x2d8>
   14850:	73a8      	strb	r0, [r5, #14]
   14852:	7a22      	ldrb	r2, [r4, #8]
   14854:	2a1f      	cmp	r2, #31
   14856:	d90e      	bls.n	14876 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x2ba>
   14858:	f44f 7182 	mov.w	r1, #260	; 0x104
   1485c:	2010      	movs	r0, #16
   1485e:	f7fd f88f 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   14862:	f010 0f03 	tst.w	r0, #3
   14866:	bf08      	it	eq
   14868:	2003      	moveq	r0, #3
   1486a:	d0e6      	beq.n	1483a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x27e>
   1486c:	f240 1101 	movw	r1, #257	; 0x101
   14870:	2010      	movs	r0, #16
   14872:	f7fd f885 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   14876:	4960      	ldr	r1, [pc, #384]	; (149f8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x43c>)
   14878:	f105 000f 	add.w	r0, r5, #15
   1487c:	f009 ffef 	bl	1e85e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   14880:	e71c      	b.n	146bc <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x100>
   14882:	6862      	ldr	r2, [r4, #4]
   14884:	2a00      	cmp	r2, #0
   14886:	f47f af04 	bne.w	14692 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xd6>
   1488a:	f240 4103 	movw	r1, #1027	; 0x403
   1488e:	2010      	movs	r0, #16
   14890:	f7fd f876 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   14894:	6860      	ldr	r0, [r4, #4]
   14896:	b188      	cbz	r0, 148bc <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x300>
   14898:	9000      	str	r0, [sp, #0]
   1489a:	f100 09a0 	add.w	r9, r0, #160	; 0xa0
   1489e:	f500 71c8 	add.w	r1, r0, #400	; 0x190
   148a2:	f8b0 a000 	ldrh.w	sl, [r0]
   148a6:	4640      	mov	r0, r8
   148a8:	f1b8 0f12 	cmp.w	r8, #18
   148ac:	d070      	beq.n	14990 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x3d4>
   148ae:	dc0a      	bgt.n	148c6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x30a>
   148b0:	2803      	cmp	r0, #3
   148b2:	d00e      	beq.n	148d2 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x316>
   148b4:	f1b8 0f0d 	cmp.w	r8, #13
   148b8:	d022      	beq.n	14900 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x344>
   148ba:	e0bf      	b.n	14a3c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x480>
   148bc:	f240 210b 	movw	r1, #523	; 0x20b
   148c0:	2010      	movs	r0, #16
   148c2:	f7fd f85d 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   148c6:	281e      	cmp	r0, #30
   148c8:	d064      	beq.n	14994 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x3d8>
   148ca:	f1b8 0f1f 	cmp.w	r8, #31
   148ce:	d030      	beq.n	14932 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x376>
   148d0:	e0b4      	b.n	14a3c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x480>
   148d2:	f1b9 0f00 	cmp.w	r9, #0
   148d6:	d00d      	beq.n	148f4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x338>
   148d8:	706e      	strb	r6, [r5, #1]
   148da:	702f      	strb	r7, [r5, #0]
   148dc:	712e      	strb	r6, [r5, #4]
   148de:	f8a5 a005 	strh.w	sl, [r5, #5]
   148e2:	f899 0061 	ldrb.w	r0, [r9, #97]	; 0x61
   148e6:	71e8      	strb	r0, [r5, #7]
   148e8:	f8b9 0062 	ldrh.w	r0, [r9, #98]	; 0x62
   148ec:	8128      	strh	r0, [r5, #8]
   148ee:	f8b9 0064 	ldrh.w	r0, [r9, #100]	; 0x64
   148f2:	8168      	strh	r0, [r5, #10]
   148f4:	f1b8 0f0d 	cmp.w	r8, #13
   148f8:	bf1c      	itt	ne
   148fa:	46b1      	movne	r9, r6
   148fc:	7226      	strbne	r6, [r4, #8]
   148fe:	e6dd      	b.n	146bc <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x100>
   14900:	4650      	mov	r0, sl
   14902:	f7fd fd1f 	bl	12344 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
   14906:	b178      	cbz	r0, 14928 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x36c>
   14908:	706e      	strb	r6, [r5, #1]
   1490a:	210f      	movs	r1, #15
   1490c:	7029      	strb	r1, [r5, #0]
   1490e:	f8a5 a006 	strh.w	sl, [r5, #6]
   14912:	812f      	strh	r7, [r5, #8]
   14914:	712f      	strb	r7, [r5, #4]
   14916:	2100      	movs	r1, #0
   14918:	f00b f848 	bl	1f9ac <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
   1491c:	f1b8 0f0d 	cmp.w	r8, #13
   14920:	bf1c      	itt	ne
   14922:	46b1      	movne	r9, r6
   14924:	7226      	strbne	r6, [r4, #8]
   14926:	e6c9      	b.n	146bc <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x100>
   14928:	f240 1153 	movw	r1, #339	; 0x153
   1492c:	2010      	movs	r0, #16
   1492e:	f7fd f827 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   14932:	f7ff fd7d 	bl	14430 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY>
   14936:	b360      	cbz	r0, 14992 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x3d6>
   14938:	7226      	strb	r6, [r4, #8]
   1493a:	4650      	mov	r0, sl
   1493c:	f8ad a000 	strh.w	sl, [sp]
   14940:	a902      	add	r1, sp, #8
   14942:	f00b fb79 	bl	20038 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   14946:	b120      	cbz	r0, 14952 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x396>
   14948:	f240 1125 	movw	r1, #293	; 0x125
   1494c:	2010      	movs	r0, #16
   1494e:	f7fd f817 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   14952:	9803      	ldr	r0, [sp, #12]
   14954:	f890 106a 	ldrb.w	r1, [r0, #106]	; 0x6a
   14958:	f88d 1002 	strb.w	r1, [sp, #2]
   1495c:	f890 106b 	ldrb.w	r1, [r0, #107]	; 0x6b
   14960:	f88d 1003 	strb.w	r1, [sp, #3]
   14964:	f8b0 006c 	ldrh.w	r0, [r0, #108]	; 0x6c
   14968:	f8ad 0004 	strh.w	r0, [sp, #4]
   1496c:	2102      	movs	r1, #2
   1496e:	4668      	mov	r0, sp
   14970:	f00e f8ed 	bl	22b4e <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>
   14974:	b120      	cbz	r0, 14980 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x3c4>
   14976:	f240 113b 	movw	r1, #315	; 0x13b
   1497a:	2010      	movs	r0, #16
   1497c:	f7fd f800 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   14980:	f1b8 0f0d 	cmp.w	r8, #13
   14984:	bf1c      	itt	ne
   14986:	46b1      	movne	r9, r6
   14988:	7226      	strbne	r6, [r4, #8]
   1498a:	f47f ae1f 	bne.w	145cc <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x10>
   1498e:	e695      	b.n	146bc <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x100>
   14990:	e045      	b.n	14a1e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x462>
   14992:	e033      	b.n	149fc <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x440>
   14994:	f7ff fd42 	bl	1441c <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I>
   14998:	b380      	cbz	r0, 149fc <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x440>
   1499a:	7226      	strb	r6, [r4, #8]
   1499c:	a903      	add	r1, sp, #12
   1499e:	4650      	mov	r0, sl
   149a0:	f00d fef2 	bl	22788 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>
   149a4:	b120      	cbz	r0, 149b0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x3f4>
   149a6:	f44f 71a1 	mov.w	r1, #322	; 0x142
   149aa:	2010      	movs	r0, #16
   149ac:	f7fc ffe8 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   149b0:	f8ad a000 	strh.w	sl, [sp]
   149b4:	f8bd 0012 	ldrh.w	r0, [sp, #18]
   149b8:	f8ad 0002 	strh.w	r0, [sp, #2]
   149bc:	f8bd 0014 	ldrh.w	r0, [sp, #20]
   149c0:	f8ad 0004 	strh.w	r0, [sp, #4]
   149c4:	f8bd 000e 	ldrh.w	r0, [sp, #14]
   149c8:	f8ad 0006 	strh.w	r0, [sp, #6]
   149cc:	f8bd 0010 	ldrh.w	r0, [sp, #16]
   149d0:	f8ad 0008 	strh.w	r0, [sp, #8]
   149d4:	4668      	mov	r0, sp
   149d6:	e012      	b.n	149fe <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x442>
   149d8:	20001794 	.word	0x20001794
   149dc:	20001720 	.word	0x20001720
   149e0:	20000138 	.word	0x20000138
   149e4:	2000014c 	.word	0x2000014c
   149e8:	20000144 	.word	0x20000144
   149ec:	20000148 	.word	0x20000148
   149f0:	20000150 	.word	0x20000150
   149f4:	2000173c 	.word	0x2000173c
   149f8:	20001758 	.word	0x20001758
   149fc:	e01e      	b.n	14a3c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x480>
   149fe:	f00d ff07 	bl	22810 <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>
   14a02:	b120      	cbz	r0, 14a0e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x452>
   14a04:	f240 114b 	movw	r1, #331	; 0x14b
   14a08:	2010      	movs	r0, #16
   14a0a:	f7fc ffb9 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   14a0e:	f1b8 0f0d 	cmp.w	r8, #13
   14a12:	bf1c      	itt	ne
   14a14:	46b1      	movne	r9, r6
   14a16:	7226      	strbne	r6, [r4, #8]
   14a18:	f47f add8 	bne.w	145cc <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x10>
   14a1c:	e64e      	b.n	146bc <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x100>
   14a1e:	f891 002c 	ldrb.w	r0, [r1, #44]	; 0x2c
   14a22:	f000 0001 	and.w	r0, r0, #1
   14a26:	f7ff fced 	bl	14404 <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA>
   14a2a:	b1b8      	cbz	r0, 14a5c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x4a0>
   14a2c:	f1b8 0f0d 	cmp.w	r8, #13
   14a30:	bf1c      	itt	ne
   14a32:	46b1      	movne	r9, r6
   14a34:	7226      	strbne	r6, [r4, #8]
   14a36:	f47f adc9 	bne.w	145cc <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x10>
   14a3a:	e63f      	b.n	146bc <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x100>
   14a3c:	f1b8 0f0a 	cmp.w	r8, #10
   14a40:	d011      	beq.n	14a66 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x4aa>
   14a42:	484d      	ldr	r0, [pc, #308]	; (14b78 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x5bc>)
   14a44:	6803      	ldr	r3, [r0, #0]
   14a46:	b11b      	cbz	r3, 14a50 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x494>
   14a48:	6860      	ldr	r0, [r4, #4]
   14a4a:	4642      	mov	r2, r8
   14a4c:	4629      	mov	r1, r5
   14a4e:	4798      	blx	r3
   14a50:	f1b8 0f0d 	cmp.w	r8, #13
   14a54:	bf1c      	itt	ne
   14a56:	46b1      	movne	r9, r6
   14a58:	7226      	strbne	r6, [r4, #8]
   14a5a:	e62f      	b.n	146bc <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x100>
   14a5c:	4846      	ldr	r0, [pc, #280]	; (14b78 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x5bc>)
   14a5e:	6803      	ldr	r3, [r0, #0]
   14a60:	2b00      	cmp	r3, #0
   14a62:	d1f1      	bne.n	14a48 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x48c>
   14a64:	e7f4      	b.n	14a50 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x494>
   14a66:	4650      	mov	r0, sl
   14a68:	f7fd fc56 	bl	12318 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
   14a6c:	f00a fe1f 	bl	1f6ae <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>
   14a70:	b1f0      	cbz	r0, 14ab0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x4f4>
   14a72:	4650      	mov	r0, sl
   14a74:	f7fd ff1e 	bl	128b4 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
   14a78:	2100      	movs	r1, #0
   14a7a:	4650      	mov	r0, sl
   14a7c:	f7fd faa8 	bl	11fd0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
   14a80:	2101      	movs	r1, #1
   14a82:	4650      	mov	r0, sl
   14a84:	f7fd faa4 	bl	11fd0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
   14a88:	4f3c      	ldr	r7, [pc, #240]	; (14b7c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x5c0>)
   14a8a:	6838      	ldr	r0, [r7, #0]
   14a8c:	b1f8      	cbz	r0, 14ace <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x512>
   14a8e:	9800      	ldr	r0, [sp, #0]
   14a90:	2104      	movs	r1, #4
   14a92:	f8b0 807e 	ldrh.w	r8, [r0, #126]	; 0x7e
   14a96:	4640      	mov	r0, r8
   14a98:	f00b f873 	bl	1fb82 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   14a9c:	b1b8      	cbz	r0, 14ace <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x512>
   14a9e:	6839      	ldr	r1, [r7, #0]
   14aa0:	3050      	adds	r0, #80	; 0x50
   14aa2:	4788      	blx	r1
   14aa4:	b148      	cbz	r0, 14aba <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x4fe>
   14aa6:	f44f 718a 	mov.w	r1, #276	; 0x114
   14aaa:	2010      	movs	r0, #16
   14aac:	f7fc ff68 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   14ab0:	f44f 7113 	mov.w	r1, #588	; 0x24c
   14ab4:	2010      	movs	r0, #16
   14ab6:	f7fc ff63 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   14aba:	2104      	movs	r1, #4
   14abc:	4640      	mov	r0, r8
   14abe:	f7fd fa87 	bl	11fd0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
   14ac2:	b120      	cbz	r0, 14ace <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x512>
   14ac4:	f240 1115 	movw	r1, #277	; 0x115
   14ac8:	2010      	movs	r0, #16
   14aca:	f7fc ff59 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   14ace:	f1b9 0f00 	cmp.w	r9, #0
   14ad2:	d008      	beq.n	14ae6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x52a>
   14ad4:	706e      	strb	r6, [r5, #1]
   14ad6:	200c      	movs	r0, #12
   14ad8:	7028      	strb	r0, [r5, #0]
   14ada:	712e      	strb	r6, [r5, #4]
   14adc:	f8a5 a005 	strh.w	sl, [r5, #5]
   14ae0:	f899 0035 	ldrb.w	r0, [r9, #53]	; 0x35
   14ae4:	71e8      	strb	r0, [r5, #7]
   14ae6:	7226      	strb	r6, [r4, #8]
   14ae8:	e5e8      	b.n	146bc <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x100>
   14aea:	6862      	ldr	r2, [r4, #4]
   14aec:	2a00      	cmp	r2, #0
   14aee:	f47f add0 	bne.w	14692 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xd6>
   14af2:	f240 412b 	movw	r1, #1067	; 0x42b
   14af6:	2010      	movs	r0, #16
   14af8:	f7fc ff42 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   14afc:	706e      	strb	r6, [r5, #1]
   14afe:	201c      	movs	r0, #28
   14b00:	7028      	strb	r0, [r5, #0]
   14b02:	f8d4 0009 	ldr.w	r0, [r4, #9]
   14b06:	6068      	str	r0, [r5, #4]
   14b08:	7226      	strb	r6, [r4, #8]
   14b0a:	e5d7      	b.n	146bc <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x100>
   14b0c:	6862      	ldr	r2, [r4, #4]
   14b0e:	2a00      	cmp	r2, #0
   14b10:	f47f adbf 	bne.w	14692 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xd6>
   14b14:	f240 413d 	movw	r1, #1085	; 0x43d
   14b18:	2010      	movs	r0, #16
   14b1a:	f7fc ff31 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   14b1e:	6862      	ldr	r2, [r4, #4]
   14b20:	2a00      	cmp	r2, #0
   14b22:	f47f adb6 	bne.w	14692 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xd6>
   14b26:	f240 4147 	movw	r1, #1095	; 0x447
   14b2a:	2010      	movs	r0, #16
   14b2c:	f7fc ff28 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   14b30:	4813      	ldr	r0, [pc, #76]	; (14b80 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x5c4>)
   14b32:	6802      	ldr	r2, [r0, #0]
   14b34:	b122      	cbz	r2, 14b40 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x584>
   14b36:	6860      	ldr	r0, [r4, #4]
   14b38:	b130      	cbz	r0, 14b48 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x58c>
   14b3a:	8800      	ldrh	r0, [r0, #0]
   14b3c:	4629      	mov	r1, r5
   14b3e:	4790      	blx	r2
   14b40:	b007      	add	sp, #28
   14b42:	2002      	movs	r0, #2
   14b44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14b48:	f44f 618a 	mov.w	r1, #1104	; 0x450
   14b4c:	2010      	movs	r0, #16
   14b4e:	f7fc ff17 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   14b52:	6862      	ldr	r2, [r4, #4]
   14b54:	2a00      	cmp	r2, #0
   14b56:	f47f ad9c 	bne.w	14692 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xd6>
   14b5a:	f240 415d 	movw	r1, #1117	; 0x45d
   14b5e:	2010      	movs	r0, #16
   14b60:	f7fc ff0e 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   14b64:	706e      	strb	r6, [r5, #1]
   14b66:	202f      	movs	r0, #47	; 0x2f
   14b68:	7028      	strb	r0, [r5, #0]
   14b6a:	7226      	strb	r6, [r4, #8]
   14b6c:	e5a6      	b.n	146bc <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x100>
   14b6e:	f240 416b 	movw	r1, #1131	; 0x46b
   14b72:	2010      	movs	r0, #16
   14b74:	f7fc ff04 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   14b78:	20000140 	.word	0x20000140
   14b7c:	20000154 	.word	0x20000154
   14b80:	2000013c 	.word	0x2000013c

00014b84 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA>:
   14b84:	490a      	ldr	r1, [pc, #40]	; (14bb0 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0x2c>)
   14b86:	b510      	push	{r4, lr}
   14b88:	7008      	strb	r0, [r1, #0]
   14b8a:	480a      	ldr	r0, [pc, #40]	; (14bb4 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0x30>)
   14b8c:	2100      	movs	r1, #0
   14b8e:	6581      	str	r1, [r0, #88]	; 0x58
   14b90:	65c1      	str	r1, [r0, #92]	; 0x5c
   14b92:	6601      	str	r1, [r0, #96]	; 0x60
   14b94:	6641      	str	r1, [r0, #100]	; 0x64
   14b96:	221b      	movs	r2, #27
   14b98:	303b      	adds	r0, #59	; 0x3b
   14b9a:	f009 feda 	bl	1e952 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
   14b9e:	4a06      	ldr	r2, [pc, #24]	; (14bb8 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0x34>)
   14ba0:	1f11      	subs	r1, r2, #4
   14ba2:	f101 000c 	add.w	r0, r1, #12
   14ba6:	2301      	movs	r3, #1
   14ba8:	604a      	str	r2, [r1, #4]
   14baa:	7003      	strb	r3, [r0, #0]
   14bac:	600a      	str	r2, [r1, #0]
   14bae:	bd10      	pop	{r4, pc}
   14bb0:	200003ec 	.word	0x200003ec
   14bb4:	2000173c 	.word	0x2000173c
   14bb8:	20001798 	.word	0x20001798

00014bbc <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ>:
   14bbc:	4809      	ldr	r0, [pc, #36]	; (14be4 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x28>)
   14bbe:	b510      	push	{r4, lr}
   14bc0:	2100      	movs	r1, #0
   14bc2:	6581      	str	r1, [r0, #88]	; 0x58
   14bc4:	65c1      	str	r1, [r0, #92]	; 0x5c
   14bc6:	6601      	str	r1, [r0, #96]	; 0x60
   14bc8:	6641      	str	r1, [r0, #100]	; 0x64
   14bca:	221b      	movs	r2, #27
   14bcc:	303b      	adds	r0, #59	; 0x3b
   14bce:	f009 fec0 	bl	1e952 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
   14bd2:	4a05      	ldr	r2, [pc, #20]	; (14be8 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x2c>)
   14bd4:	1f11      	subs	r1, r2, #4
   14bd6:	f101 000c 	add.w	r0, r1, #12
   14bda:	2301      	movs	r3, #1
   14bdc:	604a      	str	r2, [r1, #4]
   14bde:	7003      	strb	r3, [r0, #0]
   14be0:	600a      	str	r2, [r1, #0]
   14be2:	bd10      	pop	{r4, pc}
   14be4:	2000173c 	.word	0x2000173c
   14be8:	20001798 	.word	0x20001798

00014bec <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q>:
   14bec:	4902      	ldr	r1, [pc, #8]	; (14bf8 <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q+0xc>)
   14bee:	4801      	ldr	r0, [pc, #4]	; (14bf4 <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q+0x8>)
   14bf0:	6008      	str	r0, [r1, #0]
   14bf2:	4770      	bx	lr
   14bf4:	00020fa5 	.word	0x00020fa5
   14bf8:	20000138 	.word	0x20000138

00014bfc <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q>:
   14bfc:	4905      	ldr	r1, [pc, #20]	; (14c14 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x18>)
   14bfe:	4804      	ldr	r0, [pc, #16]	; (14c10 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x14>)
   14c00:	6008      	str	r0, [r1, #0]
   14c02:	4906      	ldr	r1, [pc, #24]	; (14c1c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x20>)
   14c04:	4804      	ldr	r0, [pc, #16]	; (14c18 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1c>)
   14c06:	6008      	str	r0, [r1, #0]
   14c08:	4906      	ldr	r1, [pc, #24]	; (14c24 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x28>)
   14c0a:	4805      	ldr	r0, [pc, #20]	; (14c20 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x24>)
   14c0c:	6008      	str	r0, [r1, #0]
   14c0e:	4770      	bx	lr
   14c10:	00020fa5 	.word	0x00020fa5
   14c14:	20000138 	.word	0x20000138
   14c18:	00020a37 	.word	0x00020a37
   14c1c:	20000140 	.word	0x20000140
   14c20:	00014c29 	.word	0x00014c29
   14c24:	2000013c 	.word	0x2000013c
   14c28:	b538      	push	{r3, r4, r5, lr}
   14c2a:	000c      	movs	r4, r1
   14c2c:	d016      	beq.n	14c5c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x60>
   14c2e:	8020      	strh	r0, [r4, #0]
   14c30:	2100      	movs	r1, #0
   14c32:	7161      	strb	r1, [r4, #5]
   14c34:	f7fd fb70 	bl	12318 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
   14c38:	4605      	mov	r5, r0
   14c3a:	f00a fde8 	bl	1f80e <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>
   14c3e:	0001      	movs	r1, r0
   14c40:	d011      	beq.n	14c66 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x6a>
   14c42:	466a      	mov	r2, sp
   14c44:	4628      	mov	r0, r5
   14c46:	f00a fe02 	bl	1f84e <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
   14c4a:	8060      	strh	r0, [r4, #2]
   14c4c:	b180      	cbz	r0, 14c70 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x74>
   14c4e:	28fb      	cmp	r0, #251	; 0xfb
   14c50:	d913      	bls.n	14c7a <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x7e>
   14c52:	f240 21c2 	movw	r1, #706	; 0x2c2
   14c56:	2010      	movs	r0, #16
   14c58:	f7fc fe92 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   14c5c:	f240 21b1 	movw	r1, #689	; 0x2b1
   14c60:	2010      	movs	r0, #16
   14c62:	f7fc fe8d 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   14c66:	f240 21ba 	movw	r1, #698	; 0x2ba
   14c6a:	2010      	movs	r0, #16
   14c6c:	f7fc fe88 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   14c70:	f240 21bf 	movw	r1, #703	; 0x2bf
   14c74:	2010      	movs	r0, #16
   14c76:	f7fc fe83 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   14c7a:	9800      	ldr	r0, [sp, #0]
   14c7c:	f00b fde5 	bl	2084a <sym_VV6G4PHP6ULWM4Y2LJJIOETDZSUFDXGJCHBQNZI>
   14c80:	2801      	cmp	r0, #1
   14c82:	bf18      	it	ne
   14c84:	2802      	cmpne	r0, #2
   14c86:	d005      	beq.n	14c94 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x98>
   14c88:	f240 21d3 	movw	r1, #723	; 0x2d3
   14c8c:	f04f 0010 	mov.w	r0, #16
   14c90:	f7fc fe76 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   14c94:	7120      	strb	r0, [r4, #4]
   14c96:	68a0      	ldr	r0, [r4, #8]
   14c98:	b1b0      	cbz	r0, 14cc8 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xcc>
   14c9a:	9900      	ldr	r1, [sp, #0]
   14c9c:	8862      	ldrh	r2, [r4, #2]
   14c9e:	1cc9      	adds	r1, r1, #3
   14ca0:	f009 fddd 	bl	1e85e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   14ca4:	4628      	mov	r0, r5
   14ca6:	f00a fd79 	bl	1f79c <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>
   14caa:	b190      	cbz	r0, 14cd2 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xd6>
   14cac:	2100      	movs	r1, #0
   14cae:	4628      	mov	r0, r5
   14cb0:	f00a fe7c 	bl	1f9ac <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
   14cb4:	b190      	cbz	r0, 14cdc <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xe0>
   14cb6:	480c      	ldr	r0, [pc, #48]	; (14ce8 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xec>)
   14cb8:	7dc1      	ldrb	r1, [r0, #23]
   14cba:	2900      	cmp	r1, #0
   14cbc:	bf08      	it	eq
   14cbe:	bd38      	popeq	{r3, r4, r5, pc}
   14cc0:	8b01      	ldrh	r1, [r0, #24]
   14cc2:	1e49      	subs	r1, r1, #1
   14cc4:	8301      	strh	r1, [r0, #24]
   14cc6:	bd38      	pop	{r3, r4, r5, pc}
   14cc8:	f44f 7137 	mov.w	r1, #732	; 0x2dc
   14ccc:	2010      	movs	r0, #16
   14cce:	f7fc fe57 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   14cd2:	f240 21e1 	movw	r1, #737	; 0x2e1
   14cd6:	2010      	movs	r0, #16
   14cd8:	f7fc fe52 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   14cdc:	f240 21e6 	movw	r1, #742	; 0x2e6
   14ce0:	2010      	movs	r0, #16
   14ce2:	f7fc fe4d 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   14ce6:	0000      	.short	0x0000
   14ce8:	20001720 	.word	0x20001720

00014cec <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>:
   14cec:	b430      	push	{r4, r5}
   14cee:	f890 506e 	ldrb.w	r5, [r0, #110]	; 0x6e
   14cf2:	888c      	ldrh	r4, [r1, #4]
   14cf4:	f8b1 c008 	ldrh.w	ip, [r1, #8]
   14cf8:	f015 0f0c 	tst.w	r5, #12
   14cfc:	d01b      	beq.n	14d36 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY+0x4a>
   14cfe:	bf00      	nop
   14d00:	f5b4 6f29 	cmp.w	r4, #2704	; 0xa90
   14d04:	bf98      	it	ls
   14d06:	f44f 6429 	movls.w	r4, #2704	; 0xa90
   14d0a:	f890 506f 	ldrb.w	r5, [r0, #111]	; 0x6f
   14d0e:	f015 0f0c 	tst.w	r5, #12
   14d12:	d017      	beq.n	14d44 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY+0x58>
   14d14:	f5bc 6f29 	cmp.w	ip, #2704	; 0xa90
   14d18:	bf98      	it	ls
   14d1a:	f44f 6c29 	movls.w	ip, #2704	; 0xa90
   14d1e:	884a      	ldrh	r2, [r1, #2]
   14d20:	88c9      	ldrh	r1, [r1, #6]
   14d22:	f8a0 204c 	strh.w	r2, [r0, #76]	; 0x4c
   14d26:	f8a0 1050 	strh.w	r1, [r0, #80]	; 0x50
   14d2a:	f8a0 404e 	strh.w	r4, [r0, #78]	; 0x4e
   14d2e:	f8a0 c052 	strh.w	ip, [r0, #82]	; 0x52
   14d32:	bc30      	pop	{r4, r5}
   14d34:	4770      	bx	lr
   14d36:	2b00      	cmp	r3, #0
   14d38:	bf1c      	itt	ne
   14d3a:	7815      	ldrbne	r5, [r2, #0]
   14d3c:	f015 0f0c 	tstne.w	r5, #12
   14d40:	d1de      	bne.n	14d00 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY+0x14>
   14d42:	e7e2      	b.n	14d0a <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY+0x1e>
   14d44:	2b00      	cmp	r3, #0
   14d46:	bf1c      	itt	ne
   14d48:	7852      	ldrbne	r2, [r2, #1]
   14d4a:	f012 0f0c 	tstne.w	r2, #12
   14d4e:	d1e1      	bne.n	14d14 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY+0x28>
   14d50:	e7e5      	b.n	14d1e <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY+0x32>
	...

00014d54 <sym_VLZYODAV2LKRVZ5U6Q4CDF3UFZES3VV342R37AI>:
   14d54:	4801      	ldr	r0, [pc, #4]	; (14d5c <sym_VLZYODAV2LKRVZ5U6Q4CDF3UFZES3VV342R37AI+0x8>)
   14d56:	7800      	ldrb	r0, [r0, #0]
   14d58:	4770      	bx	lr
   14d5a:	0000      	.short	0x0000
   14d5c:	200003ed 	.word	0x200003ed
   14d60:	b470      	push	{r4, r5, r6}
   14d62:	f8b0 c038 	ldrh.w	ip, [r0, #56]	; 0x38
   14d66:	f012 0f0c 	tst.w	r2, #12
   14d6a:	f44f 7574 	mov.w	r5, #976	; 0x3d0
   14d6e:	bf1c      	itt	ne
   14d70:	eb05 1c8c 	addne.w	ip, r5, ip, lsl #6
   14d74:	fa1f fc8c 	uxthne.w	ip, ip
   14d78:	d007      	beq.n	14d8a <sym_VLZYODAV2LKRVZ5U6Q4CDF3UFZES3VV342R37AI+0x36>
   14d7a:	bf00      	nop
   14d7c:	f012 0f0c 	tst.w	r2, #12
   14d80:	bf18      	it	ne
   14d82:	f44f 6429 	movne.w	r4, #2704	; 0xa90
   14d86:	d114      	bne.n	14db2 <sym_VLZYODAV2LKRVZ5U6Q4CDF3UFZES3VV342R37AI+0x5e>
   14d88:	e00c      	b.n	14da4 <sym_VLZYODAV2LKRVZ5U6Q4CDF3UFZES3VV342R37AI+0x50>
   14d8a:	2a02      	cmp	r2, #2
   14d8c:	bf07      	ittee	eq
   14d8e:	ea4f 0c8c 	moveq.w	ip, ip, lsl #2
   14d92:	f10c 0c3c 	addeq.w	ip, ip, #60	; 0x3c
   14d96:	ea4f 0ccc 	movne.w	ip, ip, lsl #3
   14d9a:	f10c 0c70 	addne.w	ip, ip, #112	; 0x70
   14d9e:	fa1f fc8c 	uxth.w	ip, ip
   14da2:	e7eb      	b.n	14d7c <sym_VLZYODAV2LKRVZ5U6Q4CDF3UFZES3VV342R37AI+0x28>
   14da4:	f8b0 604e 	ldrh.w	r6, [r0, #78]	; 0x4e
   14da8:	f8b0 404a 	ldrh.w	r4, [r0, #74]	; 0x4a
   14dac:	42a6      	cmp	r6, r4
   14dae:	bf38      	it	cc
   14db0:	4634      	movcc	r4, r6
   14db2:	4564      	cmp	r4, ip
   14db4:	bf38      	it	cc
   14db6:	46a4      	movcc	ip, r4
   14db8:	f8b0 4040 	ldrh.w	r4, [r0, #64]	; 0x40
   14dbc:	f013 0f0c 	tst.w	r3, #12
   14dc0:	bf1c      	itt	ne
   14dc2:	eb05 1484 	addne.w	r4, r5, r4, lsl #6
   14dc6:	b2a4      	uxthne	r4, r4
   14dc8:	d007      	beq.n	14dda <sym_VLZYODAV2LKRVZ5U6Q4CDF3UFZES3VV342R37AI+0x86>
   14dca:	bf00      	nop
   14dcc:	f013 0f0c 	tst.w	r3, #12
   14dd0:	bf18      	it	ne
   14dd2:	f44f 6529 	movne.w	r5, #2704	; 0xa90
   14dd6:	d10f      	bne.n	14df8 <sym_VLZYODAV2LKRVZ5U6Q4CDF3UFZES3VV342R37AI+0xa4>
   14dd8:	e007      	b.n	14dea <sym_VLZYODAV2LKRVZ5U6Q4CDF3UFZES3VV342R37AI+0x96>
   14dda:	2b02      	cmp	r3, #2
   14ddc:	bf07      	ittee	eq
   14dde:	00a4      	lsleq	r4, r4, #2
   14de0:	343c      	addeq	r4, #60	; 0x3c
   14de2:	00e4      	lslne	r4, r4, #3
   14de4:	3470      	addne	r4, #112	; 0x70
   14de6:	b2a4      	uxth	r4, r4
   14de8:	e7f0      	b.n	14dcc <sym_VLZYODAV2LKRVZ5U6Q4CDF3UFZES3VV342R37AI+0x78>
   14dea:	f8b0 5052 	ldrh.w	r5, [r0, #82]	; 0x52
   14dee:	f8b0 0048 	ldrh.w	r0, [r0, #72]	; 0x48
   14df2:	4285      	cmp	r5, r0
   14df4:	bf28      	it	cs
   14df6:	4605      	movcs	r5, r0
   14df8:	42a5      	cmp	r5, r4
   14dfa:	bf38      	it	cc
   14dfc:	462c      	movcc	r4, r5
   14dfe:	4814      	ldr	r0, [pc, #80]	; (14e50 <sym_VLZYODAV2LKRVZ5U6Q4CDF3UFZES3VV342R37AI+0xfc>)
   14e00:	7800      	ldrb	r0, [r0, #0]
   14e02:	b198      	cbz	r0, 14e2c <sym_VLZYODAV2LKRVZ5U6Q4CDF3UFZES3VV342R37AI+0xd8>
   14e04:	f013 0f0c 	tst.w	r3, #12
   14e08:	bf18      	it	ne
   14e0a:	f44f 6069 	movne.w	r0, #3728	; 0xe90
   14e0e:	d013      	beq.n	14e38 <sym_VLZYODAV2LKRVZ5U6Q4CDF3UFZES3VV342R37AI+0xe4>
   14e10:	4284      	cmp	r4, r0
   14e12:	bf28      	it	cs
   14e14:	4620      	movcs	r0, r4
   14e16:	4604      	mov	r4, r0
   14e18:	f012 0f0c 	tst.w	r2, #12
   14e1c:	bf18      	it	ne
   14e1e:	f44f 6069 	movne.w	r0, #3728	; 0xe90
   14e22:	d00f      	beq.n	14e44 <sym_VLZYODAV2LKRVZ5U6Q4CDF3UFZES3VV342R37AI+0xf0>
   14e24:	4584      	cmp	ip, r0
   14e26:	bf28      	it	cs
   14e28:	4660      	movcs	r0, ip
   14e2a:	4684      	mov	ip, r0
   14e2c:	eb0c 0004 	add.w	r0, ip, r4
   14e30:	bc70      	pop	{r4, r5, r6}
   14e32:	4408      	add	r0, r1
   14e34:	1d80      	adds	r0, r0, #6
   14e36:	4770      	bx	lr
   14e38:	2b02      	cmp	r3, #2
   14e3a:	bf0c      	ite	eq
   14e3c:	20e8      	moveq	r0, #232	; 0xe8
   14e3e:	f44f 70e4 	movne.w	r0, #456	; 0x1c8
   14e42:	e7e5      	b.n	14e10 <sym_VLZYODAV2LKRVZ5U6Q4CDF3UFZES3VV342R37AI+0xbc>
   14e44:	2a02      	cmp	r2, #2
   14e46:	bf0c      	ite	eq
   14e48:	20e8      	moveq	r0, #232	; 0xe8
   14e4a:	f44f 70e4 	movne.w	r0, #456	; 0x1c8
   14e4e:	e7e9      	b.n	14e24 <sym_VLZYODAV2LKRVZ5U6Q4CDF3UFZES3VV342R37AI+0xd0>
   14e50:	200003ed 	.word	0x200003ed

00014e54 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY>:
   14e54:	b470      	push	{r4, r5, r6}
   14e56:	f06f 021f 	mvn.w	r2, #31
   14e5a:	0c01      	lsrs	r1, r0, #16
   14e5c:	ea02 2590 	and.w	r5, r2, r0, lsr #10
   14e60:	231f      	movs	r3, #31
   14e62:	f5a1 40aa 	sub.w	r0, r1, #21760	; 0x5500
   14e66:	3854      	subs	r0, #84	; 0x54
   14e68:	bf1c      	itt	ne
   14e6a:	f5a1 40aa 	subne.w	r0, r1, #21760	; 0x5500
   14e6e:	f1b0 0055 	subsne.w	r0, r0, #85	; 0x55
   14e72:	d009      	beq.n	14e88 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x34>
   14e74:	f5a1 5028 	sub.w	r0, r1, #10752	; 0x2a00
   14e78:	38aa      	subs	r0, #170	; 0xaa
   14e7a:	bf1e      	ittt	ne
   14e7c:	f5a1 402a 	subne.w	r0, r1, #43520	; 0xaa00
   14e80:	f1b0 00aa 	subsne.w	r0, r0, #170	; 0xaa
   14e84:	2001      	movne	r0, #1
   14e86:	d100      	bne.n	14e8a <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x36>
   14e88:	2000      	movs	r0, #0
   14e8a:	f04f 0c00 	mov.w	ip, #0
   14e8e:	4662      	mov	r2, ip
   14e90:	ea4f 040c 	mov.w	r4, ip
   14e94:	ea8c 0601 	eor.w	r6, ip, r1
   14e98:	43f6      	mvns	r6, r6
   14e9a:	4316      	orrs	r6, r2
   14e9c:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
   14ea0:	d011      	beq.n	14ec6 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x72>
   14ea2:	f005 0601 	and.w	r6, r5, #1
   14ea6:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
   14eaa:	ea4c 3cc6 	orr.w	ip, ip, r6, lsl #15
   14eae:	f003 0601 	and.w	r6, r3, #1
   14eb2:	0852      	lsrs	r2, r2, #1
   14eb4:	086d      	lsrs	r5, r5, #1
   14eb6:	085b      	lsrs	r3, r3, #1
   14eb8:	1c64      	adds	r4, r4, #1
   14eba:	ea42 32c6 	orr.w	r2, r2, r6, lsl #15
   14ebe:	2c16      	cmp	r4, #22
   14ec0:	d3e8      	bcc.n	14e94 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x40>
   14ec2:	bc70      	pop	{r4, r5, r6}
   14ec4:	4770      	bx	lr
   14ec6:	bc70      	pop	{r4, r5, r6}
   14ec8:	2000      	movs	r0, #0
   14eca:	4770      	bx	lr

00014ecc <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI>:
   14ecc:	b510      	push	{r4, lr}
   14ece:	4c0c      	ldr	r4, [pc, #48]	; (14f00 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x34>)
   14ed0:	2108      	movs	r1, #8
   14ed2:	4620      	mov	r0, r4
   14ed4:	f7fc fe02 	bl	11adc <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
   14ed8:	6820      	ldr	r0, [r4, #0]
   14eda:	2800      	cmp	r0, #0
   14edc:	bf04      	itt	eq
   14ede:	6860      	ldreq	r0, [r4, #4]
   14ee0:	2800      	cmpeq	r0, #0
   14ee2:	d0f5      	beq.n	14ed0 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x4>
   14ee4:	4c07      	ldr	r4, [pc, #28]	; (14f04 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x38>)
   14ee6:	bf00      	nop
   14ee8:	f04f 0108 	mov.w	r1, #8
   14eec:	4620      	mov	r0, r4
   14eee:	f7fc fdf5 	bl	11adc <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
   14ef2:	6820      	ldr	r0, [r4, #0]
   14ef4:	2800      	cmp	r0, #0
   14ef6:	bf04      	itt	eq
   14ef8:	6860      	ldreq	r0, [r4, #4]
   14efa:	2800      	cmpeq	r0, #0
   14efc:	d0f4      	beq.n	14ee8 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x1c>
   14efe:	bd10      	pop	{r4, pc}
   14f00:	20000158 	.word	0x20000158
   14f04:	20000160 	.word	0x20000160

00014f08 <sym_K5GMJMBHBYPRCUIWKNEXGPSNQEZKEMBAP4JWHBQ>:
   14f08:	4a09      	ldr	r2, [pc, #36]	; (14f30 <sym_K5GMJMBHBYPRCUIWKNEXGPSNQEZKEMBAP4JWHBQ+0x28>)
   14f0a:	480a      	ldr	r0, [pc, #40]	; (14f34 <sym_K5GMJMBHBYPRCUIWKNEXGPSNQEZKEMBAP4JWHBQ+0x2c>)
   14f0c:	e9d2 1300 	ldrd	r1, r3, [r2]
   14f10:	4348      	muls	r0, r1
   14f12:	404b      	eors	r3, r1
   14f14:	ea83 11b1 	eor.w	r1, r3, r1, ror #6
   14f18:	ea81 2143 	eor.w	r1, r1, r3, lsl #9
   14f1c:	6011      	str	r1, [r2, #0]
   14f1e:	ea4f 60f0 	mov.w	r0, r0, ror #27
   14f22:	ea4f 41f3 	mov.w	r1, r3, ror #19
   14f26:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   14f2a:	6051      	str	r1, [r2, #4]
   14f2c:	4770      	bx	lr
   14f2e:	0000      	.short	0x0000
   14f30:	20000158 	.word	0x20000158
   14f34:	9e3779bb 	.word	0x9e3779bb

00014f38 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY>:
   14f38:	4a09      	ldr	r2, [pc, #36]	; (14f60 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0x28>)
   14f3a:	480a      	ldr	r0, [pc, #40]	; (14f64 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0x2c>)
   14f3c:	e9d2 1300 	ldrd	r1, r3, [r2]
   14f40:	4348      	muls	r0, r1
   14f42:	404b      	eors	r3, r1
   14f44:	ea83 11b1 	eor.w	r1, r3, r1, ror #6
   14f48:	ea81 2143 	eor.w	r1, r1, r3, lsl #9
   14f4c:	6011      	str	r1, [r2, #0]
   14f4e:	ea4f 60f0 	mov.w	r0, r0, ror #27
   14f52:	ea4f 41f3 	mov.w	r1, r3, ror #19
   14f56:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   14f5a:	6051      	str	r1, [r2, #4]
   14f5c:	4770      	bx	lr
   14f5e:	0000      	.short	0x0000
   14f60:	20000160 	.word	0x20000160
   14f64:	9e3779bb 	.word	0x9e3779bb

00014f68 <sym_7ABLLIXUF3HMINU3DLWXJDVBNAU7RSUXPXZ3RFQ>:
   14f68:	b570      	push	{r4, r5, r6, lr}
   14f6a:	7802      	ldrb	r2, [r0, #0]
   14f6c:	2a00      	cmp	r2, #0
   14f6e:	bf0c      	ite	eq
   14f70:	2501      	moveq	r5, #1
   14f72:	2500      	movne	r5, #0
   14f74:	6840      	ldr	r0, [r0, #4]
   14f76:	1d0e      	adds	r6, r1, #4
   14f78:	f100 04a0 	add.w	r4, r0, #160	; 0xa0
   14f7c:	b13d      	cbz	r5, 14f8e <sym_7ABLLIXUF3HMINU3DLWXJDVBNAU7RSUXPXZ3RFQ+0x26>
   14f7e:	2300      	movs	r3, #0
   14f80:	7da2      	ldrb	r2, [r4, #22]
   14f82:	4619      	mov	r1, r3
   14f84:	4620      	mov	r0, r4
   14f86:	f00b f8a2 	bl	200ce <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   14f8a:	b120      	cbz	r0, 14f96 <sym_7ABLLIXUF3HMINU3DLWXJDVBNAU7RSUXPXZ3RFQ+0x2e>
   14f8c:	e005      	b.n	14f9a <sym_7ABLLIXUF3HMINU3DLWXJDVBNAU7RSUXPXZ3RFQ+0x32>
   14f8e:	7920      	ldrb	r0, [r4, #4]
   14f90:	f010 0f01 	tst.w	r0, #1
   14f94:	d001      	beq.n	14f9a <sym_7ABLLIXUF3HMINU3DLWXJDVBNAU7RSUXPXZ3RFQ+0x32>
   14f96:	2001      	movs	r0, #1
   14f98:	bd70      	pop	{r4, r5, r6, pc}
   14f9a:	6830      	ldr	r0, [r6, #0]
   14f9c:	4a0e      	ldr	r2, [pc, #56]	; (14fd8 <sym_7ABLLIXUF3HMINU3DLWXJDVBNAU7RSUXPXZ3RFQ+0x70>)
   14f9e:	7931      	ldrb	r1, [r6, #4]
   14fa0:	4010      	ands	r0, r2
   14fa2:	f8c4 0066 	str.w	r0, [r4, #102]	; 0x66
   14fa6:	f001 0107 	and.w	r1, r1, #7
   14faa:	f8c4 106a 	str.w	r1, [r4, #106]	; 0x6a
   14fae:	2000      	movs	r0, #0
   14fb0:	f8a4 0052 	strh.w	r0, [r4, #82]	; 0x52
   14fb4:	b12d      	cbz	r5, 14fc2 <sym_7ABLLIXUF3HMINU3DLWXJDVBNAU7RSUXPXZ3RFQ+0x5a>
   14fb6:	2001      	movs	r0, #1
   14fb8:	f884 0054 	strb.w	r0, [r4, #84]	; 0x54
   14fbc:	2004      	movs	r0, #4
   14fbe:	75a0      	strb	r0, [r4, #22]
   14fc0:	e008      	b.n	14fd4 <sym_7ABLLIXUF3HMINU3DLWXJDVBNAU7RSUXPXZ3RFQ+0x6c>
   14fc2:	f894 0054 	ldrb.w	r0, [r4, #84]	; 0x54
   14fc6:	1c40      	adds	r0, r0, #1
   14fc8:	f884 0054 	strb.w	r0, [r4, #84]	; 0x54
   14fcc:	6860      	ldr	r0, [r4, #4]
   14fce:	f040 0001 	orr.w	r0, r0, #1
   14fd2:	6060      	str	r0, [r4, #4]
   14fd4:	2000      	movs	r0, #0
   14fd6:	bd70      	pop	{r4, r5, r6, pc}
   14fd8:	3304492f 	.word	0x3304492f

00014fdc <sym_CYYZ5DA5UWAE37FM7XP643I473QUSWWZ2MS7OLY>:
   14fdc:	b510      	push	{r4, lr}
   14fde:	1d04      	adds	r4, r0, #4
   14fe0:	f006 fef0 	bl	1bdc4 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
   14fe4:	4a03      	ldr	r2, [pc, #12]	; (14ff4 <sym_CYYZ5DA5UWAE37FM7XP643I473QUSWWZ2MS7OLY+0x18>)
   14fe6:	f001 0107 	and.w	r1, r1, #7
   14fea:	4010      	ands	r0, r2
   14fec:	6020      	str	r0, [r4, #0]
   14fee:	6061      	str	r1, [r4, #4]
   14ff0:	bd10      	pop	{r4, pc}
   14ff2:	0000      	.short	0x0000
   14ff4:	3304492f 	.word	0x3304492f

00014ff8 <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI>:
   14ff8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   14ffc:	7803      	ldrb	r3, [r0, #0]
   14ffe:	4606      	mov	r6, r0
   15000:	2b00      	cmp	r3, #0
   15002:	bf0c      	ite	eq
   15004:	f04f 0801 	moveq.w	r8, #1
   15008:	f04f 0800 	movne.w	r8, #0
   1500c:	6877      	ldr	r7, [r6, #4]
   1500e:	f101 0904 	add.w	r9, r1, #4
   15012:	f107 04a0 	add.w	r4, r7, #160	; 0xa0
   15016:	f507 75c8 	add.w	r5, r7, #400	; 0x190
   1501a:	f897 20b5 	ldrb.w	r2, [r7, #181]	; 0xb5
   1501e:	2107      	movs	r1, #7
   15020:	4620      	mov	r0, r4
   15022:	f00b f854 	bl	200ce <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   15026:	2800      	cmp	r0, #0
   15028:	bf04      	itt	eq
   1502a:	2001      	moveq	r0, #1
   1502c:	e8bd 87f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   15030:	f899 1004 	ldrb.w	r1, [r9, #4]
   15034:	f8d9 0000 	ldr.w	r0, [r9]
   15038:	4a13      	ldr	r2, [pc, #76]	; (15088 <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI+0x90>)
   1503a:	f001 0107 	and.w	r1, r1, #7
   1503e:	4010      	ands	r0, r2
   15040:	f8c4 0066 	str.w	r0, [r4, #102]	; 0x66
   15044:	2000      	movs	r0, #0
   15046:	f8c4 106a 	str.w	r1, [r4, #106]	; 0x6a
   1504a:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
   1504e:	7560      	strb	r0, [r4, #21]
   15050:	8839      	ldrh	r1, [r7, #0]
   15052:	f8a5 106c 	strh.w	r1, [r5, #108]	; 0x6c
   15056:	f885 006a 	strb.w	r0, [r5, #106]	; 0x6a
   1505a:	f8d9 1000 	ldr.w	r1, [r9]
   1505e:	f8c5 106e 	str.w	r1, [r5, #110]	; 0x6e
   15062:	f8d9 1004 	ldr.w	r1, [r9, #4]
   15066:	f8c5 1072 	str.w	r1, [r5, #114]	; 0x72
   1506a:	f1b8 0f00 	cmp.w	r8, #0
   1506e:	bf1c      	itt	ne
   15070:	6871      	ldrne	r1, [r6, #4]
   15072:	f881 015b 	strbne.w	r0, [r1, #347]	; 0x15b
   15076:	2207      	movs	r2, #7
   15078:	f105 0060 	add.w	r0, r5, #96	; 0x60
   1507c:	6871      	ldr	r1, [r6, #4]
   1507e:	f7ff fa65 	bl	1454c <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
   15082:	2000      	movs	r0, #0
   15084:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   15088:	3304492f 	.word	0x3304492f

0001508c <sym_KQ4RAL3HW3LUBE4EKZDESO77BJMQRXFGP63ANLQ>:
   1508c:	b570      	push	{r4, r5, r6, lr}
   1508e:	6840      	ldr	r0, [r0, #4]
   15090:	1d0c      	adds	r4, r1, #4
   15092:	f100 05a0 	add.w	r5, r0, #160	; 0xa0
   15096:	f006 fe95 	bl	1bdc4 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
   1509a:	4a06      	ldr	r2, [pc, #24]	; (150b4 <sym_KQ4RAL3HW3LUBE4EKZDESO77BJMQRXFGP63ANLQ+0x28>)
   1509c:	f001 0107 	and.w	r1, r1, #7
   150a0:	4010      	ands	r0, r2
   150a2:	f895 2066 	ldrb.w	r2, [r5, #102]	; 0x66
   150a6:	4002      	ands	r2, r0
   150a8:	f362 0007 	bfi	r0, r2, #0, #8
   150ac:	6020      	str	r0, [r4, #0]
   150ae:	6061      	str	r1, [r4, #4]
   150b0:	bd70      	pop	{r4, r5, r6, pc}
   150b2:	0000      	.short	0x0000
   150b4:	3304492f 	.word	0x3304492f

000150b8 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA>:
   150b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   150ba:	6845      	ldr	r5, [r0, #4]
   150bc:	4606      	mov	r6, r0
   150be:	f105 07a0 	add.w	r7, r5, #160	; 0xa0
   150c2:	463c      	mov	r4, r7
   150c4:	4668      	mov	r0, sp
   150c6:	f008 f841 	bl	1d14c <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
   150ca:	2300      	movs	r3, #0
   150cc:	2800      	cmp	r0, #0
   150ce:	bf02      	ittt	eq
   150d0:	207f      	moveq	r0, #127	; 0x7f
   150d2:	7460      	strbeq	r0, [r4, #17]
   150d4:	bdf8      	popeq	{r3, r4, r5, r6, r7, pc}
   150d6:	f99d 2000 	ldrsb.w	r2, [sp]
   150da:	7462      	strb	r2, [r4, #17]
   150dc:	f894 002b 	ldrb.w	r0, [r4, #43]	; 0x2b
   150e0:	4922      	ldr	r1, [pc, #136]	; (1516c <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xb4>)
   150e2:	74a0      	strb	r0, [r4, #18]
   150e4:	6820      	ldr	r0, [r4, #0]
   150e6:	6809      	ldr	r1, [r1, #0]
   150e8:	f5c1 5c80 	rsb	ip, r1, #4096	; 0x1000
   150ec:	fb0c fc02 	mul.w	ip, ip, r2
   150f0:	4348      	muls	r0, r1
   150f2:	eb0c 3020 	add.w	r0, ip, r0, asr #12
   150f6:	6020      	str	r0, [r4, #0]
   150f8:	f994 1013 	ldrsb.w	r1, [r4, #19]
   150fc:	2000      	movs	r0, #0
   150fe:	1a51      	subs	r1, r2, r1
   15100:	bf48      	it	mi
   15102:	4249      	negmi	r1, r1
   15104:	f895 c02d 	ldrb.w	ip, [r5, #45]	; 0x2d
   15108:	458c      	cmp	ip, r1
   1510a:	dc10      	bgt.n	1512e <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x76>
   1510c:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
   15110:	d00d      	beq.n	1512e <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x76>
   15112:	7d21      	ldrb	r1, [r4, #20]
   15114:	1c49      	adds	r1, r1, #1
   15116:	b2c9      	uxtb	r1, r1
   15118:	7521      	strb	r1, [r4, #20]
   1511a:	f895 c02e 	ldrb.w	ip, [r5, #46]	; 0x2e
   1511e:	4561      	cmp	r1, ip
   15120:	d802      	bhi.n	15128 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x70>
   15122:	7ce1      	ldrb	r1, [r4, #19]
   15124:	297f      	cmp	r1, #127	; 0x7f
   15126:	d102      	bne.n	1512e <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x76>
   15128:	74e2      	strb	r2, [r4, #19]
   1512a:	7523      	strb	r3, [r4, #20]
   1512c:	2001      	movs	r0, #1
   1512e:	f895 102c 	ldrb.w	r1, [r5, #44]	; 0x2c
   15132:	2901      	cmp	r1, #1
   15134:	bf18      	it	ne
   15136:	bdf8      	popne	{r3, r4, r5, r6, r7, pc}
   15138:	2800      	cmp	r0, #0
   1513a:	bf08      	it	eq
   1513c:	bdf8      	popeq	{r3, r4, r5, r6, r7, pc}
   1513e:	6871      	ldr	r1, [r6, #4]
   15140:	f501 70c8 	add.w	r0, r1, #400	; 0x190
   15144:	f891 2198 	ldrb.w	r2, [r1, #408]	; 0x198
   15148:	f88d 2000 	strb.w	r2, [sp]
   1514c:	f89d 2000 	ldrb.w	r2, [sp]
   15150:	2a00      	cmp	r2, #0
   15152:	bf18      	it	ne
   15154:	bdf8      	popne	{r3, r4, r5, r6, r7, pc}
   15156:	882a      	ldrh	r2, [r5, #0]
   15158:	8142      	strh	r2, [r0, #10]
   1515a:	7c7a      	ldrb	r2, [r7, #17]
   1515c:	7302      	strb	r2, [r0, #12]
   1515e:	7cba      	ldrb	r2, [r7, #18]
   15160:	7342      	strb	r2, [r0, #13]
   15162:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   15166:	221c      	movs	r2, #28
   15168:	f7ff b9f0 	b.w	1454c <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
   1516c:	20000168 	.word	0x20000168

00015170 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ>:
   15170:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15174:	4604      	mov	r4, r0
   15176:	7c80      	ldrb	r0, [r0, #18]
   15178:	2800      	cmp	r0, #0
   1517a:	bf16      	itet	ne
   1517c:	2802      	cmpne	r0, #2
   1517e:	2000      	moveq	r0, #0
   15180:	2001      	movne	r0, #1
   15182:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
   15186:	b318      	cbz	r0, 151d0 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x60>
   15188:	7e60      	ldrb	r0, [r4, #25]
   1518a:	b368      	cbz	r0, 151e8 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x78>
   1518c:	f8d4 0013 	ldr.w	r0, [r4, #19]
   15190:	f8c4 0069 	str.w	r0, [r4, #105]	; 0x69
   15194:	f8b4 0017 	ldrh.w	r0, [r4, #23]
   15198:	f8a4 006d 	strh.w	r0, [r4, #109]	; 0x6d
   1519c:	7ca0      	ldrb	r0, [r4, #18]
   1519e:	2802      	cmp	r0, #2
   151a0:	bf16      	itet	ne
   151a2:	2803      	cmpne	r0, #3
   151a4:	2101      	moveq	r1, #1
   151a6:	2100      	movne	r1, #0
   151a8:	76a1      	strb	r1, [r4, #26]
   151aa:	f04f 0008 	mov.w	r0, #8
   151ae:	76e0      	strb	r0, [r4, #27]
   151b0:	f894 0068 	ldrb.w	r0, [r4, #104]	; 0x68
   151b4:	f04f 0701 	mov.w	r7, #1
   151b8:	f04f 0800 	mov.w	r8, #0
   151bc:	2801      	cmp	r0, #1
   151be:	bf04      	itt	eq
   151c0:	f894 206e 	ldrbeq.w	r2, [r4, #110]	; 0x6e
   151c4:	f012 0fc0 	tsteq.w	r2, #192	; 0xc0
   151c8:	d01b      	beq.n	15202 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x92>
   151ca:	2801      	cmp	r0, #1
   151cc:	d011      	beq.n	151f2 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x82>
   151ce:	e016      	b.n	151fe <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x8e>
   151d0:	f104 0169 	add.w	r1, r4, #105	; 0x69
   151d4:	2000      	movs	r0, #0
   151d6:	f7fd fc0d 	bl	129f4 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
   151da:	2800      	cmp	r0, #0
   151dc:	d1de      	bne.n	1519c <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x2c>
   151de:	f44f 6197 	mov.w	r1, #1208	; 0x4b8
   151e2:	202d      	movs	r0, #45	; 0x2d
   151e4:	f7fc fbcc 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   151e8:	f240 41bc 	movw	r1, #1212	; 0x4bc
   151ec:	202d      	movs	r0, #45	; 0x2d
   151ee:	f7fc fbc7 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   151f2:	f894 006e 	ldrb.w	r0, [r4, #110]	; 0x6e
   151f6:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   151fa:	2840      	cmp	r0, #64	; 0x40
   151fc:	d001      	beq.n	15202 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x92>
   151fe:	2000      	movs	r0, #0
   15200:	e000      	b.n	15204 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x94>
   15202:	2001      	movs	r0, #1
   15204:	7720      	strb	r0, [r4, #28]
   15206:	b131      	cbz	r1, 15216 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0xa6>
   15208:	f894 006f 	ldrb.w	r0, [r4, #111]	; 0x6f
   1520c:	f104 0170 	add.w	r1, r4, #112	; 0x70
   15210:	f7fe fc7a 	bl	13b08 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
   15214:	76e0      	strb	r0, [r4, #27]
   15216:	f7fe fc95 	bl	13b44 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>
   1521a:	4937      	ldr	r1, [pc, #220]	; (152f8 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x188>)
   1521c:	fba0 6501 	umull	r6, r5, r0, r1
   15220:	f7fa fe54 	bl	fecc <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
   15224:	1980      	adds	r0, r0, r6
   15226:	4169      	adcs	r1, r5
   15228:	e9c4 0118 	strd	r0, r1, [r4, #96]	; 0x60
   1522c:	2600      	movs	r6, #0
   1522e:	7ee0      	ldrb	r0, [r4, #27]
   15230:	f7fe fbfe 	bl	13a30 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>
   15234:	4605      	mov	r5, r0
   15236:	7ea0      	ldrb	r0, [r4, #26]
   15238:	2800      	cmp	r0, #0
   1523a:	bf18      	it	ne
   1523c:	2d00      	cmpne	r5, #0
   1523e:	d003      	beq.n	15248 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0xd8>
   15240:	7ee0      	ldrb	r0, [r4, #27]
   15242:	f7fe fbe9 	bl	13a18 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>
   15246:	b158      	cbz	r0, 15260 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0xf0>
   15248:	f894 0082 	ldrb.w	r0, [r4, #130]	; 0x82
   1524c:	2800      	cmp	r0, #0
   1524e:	bf1c      	itt	ne
   15250:	7f20      	ldrbne	r0, [r4, #28]
   15252:	2800      	cmpne	r0, #0
   15254:	d01d      	beq.n	15292 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x122>
   15256:	f894 0068 	ldrb.w	r0, [r4, #104]	; 0x68
   1525a:	2801      	cmp	r0, #1
   1525c:	d00e      	beq.n	1527c <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x10c>
   1525e:	e013      	b.n	15288 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x118>
   15260:	f884 7068 	strb.w	r7, [r4, #104]	; 0x68
   15264:	4632      	mov	r2, r6
   15266:	f104 0169 	add.w	r1, r4, #105	; 0x69
   1526a:	4628      	mov	r0, r5
   1526c:	f00a fe7c 	bl	1ff68 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
   15270:	7ee1      	ldrb	r1, [r4, #27]
   15272:	f104 0069 	add.w	r0, r4, #105	; 0x69
   15276:	f7fe fbe7 	bl	13a48 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>
   1527a:	e00a      	b.n	15292 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x122>
   1527c:	f894 006e 	ldrb.w	r0, [r4, #110]	; 0x6e
   15280:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   15284:	2840      	cmp	r0, #64	; 0x40
   15286:	d02f      	beq.n	152e8 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x178>
   15288:	4641      	mov	r1, r8
   1528a:	f104 0069 	add.w	r0, r4, #105	; 0x69
   1528e:	f00a fe5a 	bl	1ff46 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>
   15292:	f884 8076 	strb.w	r8, [r4, #118]	; 0x76
   15296:	78a0      	ldrb	r0, [r4, #2]
   15298:	f010 0f04 	tst.w	r0, #4
   1529c:	bf08      	it	eq
   1529e:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
   152a2:	2600      	movs	r6, #0
   152a4:	7ee0      	ldrb	r0, [r4, #27]
   152a6:	f7fe fbdd 	bl	13a64 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
   152aa:	0005      	movs	r5, r0
   152ac:	bf08      	it	eq
   152ae:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
   152b2:	2110      	movs	r1, #16
   152b4:	f7fe ff6c 	bl	14190 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
   152b8:	2800      	cmp	r0, #0
   152ba:	bf18      	it	ne
   152bc:	e8bd 81f0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, pc}
   152c0:	f884 7076 	strb.w	r7, [r4, #118]	; 0x76
   152c4:	4632      	mov	r2, r6
   152c6:	f104 0177 	add.w	r1, r4, #119	; 0x77
   152ca:	4628      	mov	r0, r5
   152cc:	f00a fe4c 	bl	1ff68 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
   152d0:	f104 0177 	add.w	r1, r4, #119	; 0x77
   152d4:	4c09      	ldr	r4, [pc, #36]	; (152fc <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x18c>)
   152d6:	68a0      	ldr	r0, [r4, #8]
   152d8:	f00b fa01 	bl	206de <sym_M7NFHAM4FWTXSZMPV3DTHM2V6JD26AKK4R2A6YI>
   152dc:	68a0      	ldr	r0, [r4, #8]
   152de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   152e2:	2101      	movs	r1, #1
   152e4:	f00b ba02 	b.w	206ec <sym_NAGMMCXDNSRJLJ55T6DS4CG2FNZEN6Y562ZTFRY>
   152e8:	f7fe fb92 	bl	13a10 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>
   152ec:	4632      	mov	r2, r6
   152ee:	f104 0169 	add.w	r1, r4, #105	; 0x69
   152f2:	f00a fe39 	bl	1ff68 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
   152f6:	e7cc      	b.n	15292 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x122>
   152f8:	000f4240 	.word	0x000f4240
   152fc:	2000016c 	.word	0x2000016c

00015300 <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>:
   15300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15302:	4604      	mov	r4, r0
   15304:	460d      	mov	r5, r1
   15306:	3030      	adds	r0, #48	; 0x30
   15308:	f00b ffe5 	bl	212d6 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
   1530c:	f8b4 c002 	ldrh.w	ip, [r4, #2]
   15310:	f3cc 1100 	ubfx	r1, ip, #4, #1
   15314:	b129      	cbz	r1, 15322 <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY+0x22>
   15316:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1531a:	2228      	movs	r2, #40	; 0x28
   1531c:	4661      	mov	r1, ip
   1531e:	f002 bc61 	b.w	17be4 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>
   15322:	f3cc 0140 	ubfx	r1, ip, #1, #1
   15326:	2900      	cmp	r1, #0
   15328:	bf14      	ite	ne
   1532a:	f8b4 605c 	ldrhne.w	r6, [r4, #92]	; 0x5c
   1532e:	f8b4 6054 	ldrheq.w	r6, [r4, #84]	; 0x54
   15332:	7921      	ldrb	r1, [r4, #4]
   15334:	4a1d      	ldr	r2, [pc, #116]	; (153ac <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY+0xac>)
   15336:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1533a:	2908      	cmp	r1, #8
   1533c:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
   15340:	f202 32e7 	addw	r2, r2, #999	; 0x3e7
   15344:	fbb2 f7f3 	udiv	r7, r2, r3
   15348:	bf08      	it	eq
   1534a:	2340      	moveq	r3, #64	; 0x40
   1534c:	d00a      	beq.n	15364 <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY+0x64>
   1534e:	2904      	cmp	r1, #4
   15350:	bf08      	it	eq
   15352:	2310      	moveq	r3, #16
   15354:	d006      	beq.n	15364 <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY+0x64>
   15356:	2902      	cmp	r1, #2
   15358:	bf07      	ittee	eq
   1535a:	2304      	moveq	r3, #4
   1535c:	2212      	moveq	r2, #18
   1535e:	2308      	movne	r3, #8
   15360:	2219      	movne	r2, #25
   15362:	e000      	b.n	15366 <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY+0x66>
   15364:	2214      	movs	r2, #20
   15366:	fb13 f202 	smulbb	r2, r3, r2
   1536a:	2908      	cmp	r1, #8
   1536c:	bf08      	it	eq
   1536e:	2340      	moveq	r3, #64	; 0x40
   15370:	d019      	beq.n	153a6 <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY+0xa6>
   15372:	2904      	cmp	r1, #4
   15374:	bf08      	it	eq
   15376:	232e      	moveq	r3, #46	; 0x2e
   15378:	d015      	beq.n	153a6 <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY+0xa6>
   1537a:	2300      	movs	r3, #0
   1537c:	2902      	cmp	r1, #2
   1537e:	bf0c      	ite	eq
   15380:	2118      	moveq	r1, #24
   15382:	2128      	movne	r1, #40	; 0x28
   15384:	4419      	add	r1, r3
   15386:	4411      	add	r1, r2
   15388:	fb11 7100 	smlabb	r1, r1, r0, r7
   1538c:	f06f 027f 	mvn.w	r2, #127	; 0x7f
   15390:	eb02 10c0 	add.w	r0, r2, r0, lsl #7
   15394:	4401      	add	r1, r0
   15396:	f8cd c000 	str.w	ip, [sp]
   1539a:	7962      	ldrb	r2, [r4, #5]
   1539c:	462b      	mov	r3, r5
   1539e:	4630      	mov	r0, r6
   153a0:	f001 fef8 	bl	17194 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xdbc>
   153a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   153a6:	f44f 71a8 	mov.w	r1, #336	; 0x150
   153aa:	e7eb      	b.n	15384 <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY+0x84>
   153ac:	00017b80 	.word	0x00017b80

000153b0 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA>:
   153b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   153b4:	4680      	mov	r8, r0
   153b6:	b08f      	sub	sp, #60	; 0x3c
   153b8:	460c      	mov	r4, r1
   153ba:	69c2      	ldr	r2, [r0, #28]
   153bc:	e9d8 0105 	ldrd	r0, r1, [r8, #20]
   153c0:	e9d8 7600 	ldrd	r7, r6, [r8]
   153c4:	e9d8 a903 	ldrd	sl, r9, [r8, #12]
   153c8:	9205      	str	r2, [sp, #20]
   153ca:	e9cd 0103 	strd	r0, r1, [sp, #12]
   153ce:	e9d8 0108 	ldrd	r0, r1, [r8, #32]
   153d2:	f8d8 2028 	ldr.w	r2, [r8, #40]	; 0x28
   153d6:	e9cd 0106 	strd	r0, r1, [sp, #24]
   153da:	9208      	str	r2, [sp, #32]
   153dc:	a801      	add	r0, sp, #4
   153de:	f00c f823 	bl	21428 <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>
   153e2:	7aa0      	ldrb	r0, [r4, #10]
   153e4:	f360 4917 	bfi	r9, r0, #16, #8
   153e8:	7820      	ldrb	r0, [r4, #0]
   153ea:	f360 0707 	bfi	r7, r0, #0, #8
   153ee:	f8b4 0001 	ldrh.w	r0, [r4, #1]
   153f2:	f8ad 0000 	strh.w	r0, [sp]
   153f6:	f89d 0000 	ldrb.w	r0, [sp]
   153fa:	f000 0101 	and.w	r1, r0, #1
   153fe:	f3c0 0240 	ubfx	r2, r0, #1, #1
   15402:	ea41 0142 	orr.w	r1, r1, r2, lsl #1
   15406:	f3c0 0280 	ubfx	r2, r0, #2, #1
   1540a:	ea41 0182 	orr.w	r1, r1, r2, lsl #2
   1540e:	f3c0 02c0 	ubfx	r2, r0, #3, #1
   15412:	ea41 01c2 	orr.w	r1, r1, r2, lsl #3
   15416:	f3c0 1200 	ubfx	r2, r0, #4, #1
   1541a:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
   1541e:	f3c0 1240 	ubfx	r2, r0, #5, #1
   15422:	ea41 1142 	orr.w	r1, r1, r2, lsl #5
   15426:	f3c0 1080 	ubfx	r0, r0, #6, #1
   1542a:	ea41 1b80 	orr.w	fp, r1, r0, lsl #6
   1542e:	7d20      	ldrb	r0, [r4, #20]
   15430:	f36b 471f 	bfi	r7, fp, #16, #16
   15434:	2801      	cmp	r0, #1
   15436:	bf18      	it	ne
   15438:	2802      	cmpne	r0, #2
   1543a:	d003      	beq.n	15444 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x94>
   1543c:	2803      	cmp	r0, #3
   1543e:	bf08      	it	eq
   15440:	2008      	moveq	r0, #8
   15442:	d10e      	bne.n	15462 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xb2>
   15444:	7861      	ldrb	r1, [r4, #1]
   15446:	f360 0607 	bfi	r6, r0, #0, #8
   1544a:	f011 0f10 	tst.w	r1, #16
   1544e:	d10f      	bne.n	15470 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xc0>
   15450:	7da1      	ldrb	r1, [r4, #22]
   15452:	2901      	cmp	r1, #1
   15454:	bf18      	it	ne
   15456:	2902      	cmpne	r1, #2
   15458:	d008      	beq.n	1546c <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xbc>
   1545a:	2903      	cmp	r1, #3
   1545c:	bf08      	it	eq
   1545e:	2108      	moveq	r1, #8
   15460:	d004      	beq.n	1546c <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xbc>
   15462:	f240 21e2 	movw	r1, #738	; 0x2e2
   15466:	2006      	movs	r0, #6
   15468:	f7fc fa8a 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1546c:	f361 260f 	bfi	r6, r1, #8, #8
   15470:	f3ca 4107 	ubfx	r1, sl, #16, #8
   15474:	2901      	cmp	r1, #1
   15476:	d008      	beq.n	1548a <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xda>
   15478:	7a61      	ldrb	r1, [r4, #9]
   1547a:	a801      	add	r0, sp, #4
   1547c:	f00b ffaf 	bl	213de <sym_YZ554N3225FHWC7CK3UNRUMI3O4SGFLKXVRCFXA>
   15480:	7d20      	ldrb	r0, [r4, #20]
   15482:	2101      	movs	r1, #1
   15484:	2802      	cmp	r0, #2
   15486:	d10f      	bne.n	154a8 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf8>
   15488:	e00b      	b.n	154a2 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf2>
   1548a:	2104      	movs	r1, #4
   1548c:	2808      	cmp	r0, #8
   1548e:	bf08      	it	eq
   15490:	f361 0607 	bfieq	r6, r1, #0, #8
   15494:	f3c6 2007 	ubfx	r0, r6, #8, #8
   15498:	2808      	cmp	r0, #8
   1549a:	bf08      	it	eq
   1549c:	f361 260f 	bfieq	r6, r1, #8, #8
   154a0:	e7ea      	b.n	15478 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xc8>
   154a2:	7d60      	ldrb	r0, [r4, #21]
   154a4:	1c40      	adds	r0, r0, #1
   154a6:	b2c1      	uxtb	r1, r0
   154a8:	7ea0      	ldrb	r0, [r4, #26]
   154aa:	1c40      	adds	r0, r0, #1
   154ac:	b2c2      	uxtb	r2, r0
   154ae:	a801      	add	r0, sp, #4
   154b0:	f00b fefa 	bl	212a8 <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y>
   154b4:	0c38      	lsrs	r0, r7, #16
   154b6:	f010 0f08 	tst.w	r0, #8
   154ba:	f04f 0500 	mov.w	r5, #0
   154be:	d124      	bne.n	1550a <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x15a>
   154c0:	a801      	add	r0, sp, #4
   154c2:	f00b ff08 	bl	212d6 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
   154c6:	7861      	ldrb	r1, [r4, #1]
   154c8:	f011 0f10 	tst.w	r1, #16
   154cc:	d07f      	beq.n	155ce <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x21e>
   154ce:	2228      	movs	r2, #40	; 0x28
   154d0:	4659      	mov	r1, fp
   154d2:	f002 fb87 	bl	17be4 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>
   154d6:	bf00      	nop
   154d8:	f240 2171 	movw	r1, #625	; 0x271
   154dc:	f200 20d9 	addw	r0, r0, #729	; 0x2d9
   154e0:	fbb0 f0f1 	udiv	r0, r0, r1
   154e4:	fb00 f501 	mul.w	r5, r0, r1
   154e8:	f8d4 0002 	ldr.w	r0, [r4, #2]
   154ec:	f240 2271 	movw	r2, #625	; 0x271
   154f0:	0a00      	lsrs	r0, r0, #8
   154f2:	4341      	muls	r1, r0
   154f4:	f8d4 0005 	ldr.w	r0, [r4, #5]
   154f8:	0a00      	lsrs	r0, r0, #8
   154fa:	4350      	muls	r0, r2
   154fc:	428d      	cmp	r5, r1
   154fe:	bf98      	it	ls
   15500:	460d      	movls	r5, r1
   15502:	d902      	bls.n	1550a <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x15a>
   15504:	4285      	cmp	r5, r0
   15506:	bf88      	it	hi
   15508:	4605      	movhi	r5, r0
   1550a:	7ca0      	ldrb	r0, [r4, #18]
   1550c:	f360 290f 	bfi	r9, r0, #8, #8
   15510:	7e20      	ldrb	r0, [r4, #24]
   15512:	2801      	cmp	r0, #1
   15514:	bf18      	it	ne
   15516:	2000      	movne	r0, #0
   15518:	f360 0a07 	bfi	sl, r0, #0, #8
   1551c:	f8d8 004c 	ldr.w	r0, [r8, #76]	; 0x4c
   15520:	f00a fbee 	bl	1fd00 <sym_RIJIFYF46ZRKFDPA3GKV7WCH2VGEUEP6MVN4JFI>
   15524:	4683      	mov	fp, r0
   15526:	f8d8 004c 	ldr.w	r0, [r8, #76]	; 0x4c
   1552a:	f00a fc91 	bl	1fe50 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ>
   1552e:	4583      	cmp	fp, r0
   15530:	bf28      	it	cs
   15532:	4658      	movcs	r0, fp
   15534:	b198      	cbz	r0, 1555e <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x1ae>
   15536:	a901      	add	r1, sp, #4
   15538:	910a      	str	r1, [sp, #40]	; 0x28
   1553a:	0c39      	lsrs	r1, r7, #16
   1553c:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c
   15540:	f88d 6034 	strb.w	r6, [sp, #52]	; 0x34
   15544:	0a31      	lsrs	r1, r6, #8
   15546:	f88d 1035 	strb.w	r1, [sp, #53]	; 0x35
   1554a:	950c      	str	r5, [sp, #48]	; 0x30
   1554c:	a90a      	add	r1, sp, #40	; 0x28
   1554e:	f002 f869 	bl	17624 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x124c>
   15552:	2800      	cmp	r0, #0
   15554:	bf02      	ittt	eq
   15556:	2045      	moveq	r0, #69	; 0x45
   15558:	b00f      	addeq	sp, #60	; 0x3c
   1555a:	e8bd 8ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1555e:	f8c8 a00c 	str.w	sl, [r8, #12]
   15562:	f8c8 7000 	str.w	r7, [r8]
   15566:	e9c8 6501 	strd	r6, r5, [r8, #4]
   1556a:	e9dd 0103 	ldrd	r0, r1, [sp, #12]
   1556e:	9a05      	ldr	r2, [sp, #20]
   15570:	f8c8 9010 	str.w	r9, [r8, #16]
   15574:	f8c8 201c 	str.w	r2, [r8, #28]
   15578:	e9c8 0105 	strd	r0, r1, [r8, #20]
   1557c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   15580:	9a08      	ldr	r2, [sp, #32]
   15582:	f8c8 2028 	str.w	r2, [r8, #40]	; 0x28
   15586:	e9c8 0108 	strd	r0, r1, [r8, #32]
   1558a:	9801      	ldr	r0, [sp, #4]
   1558c:	f8c8 0030 	str.w	r0, [r8, #48]	; 0x30
   15590:	f8bd 0008 	ldrh.w	r0, [sp, #8]
   15594:	f8a8 0034 	strh.w	r0, [r8, #52]	; 0x34
   15598:	7ae0      	ldrb	r0, [r4, #11]
   1559a:	2800      	cmp	r0, #0
   1559c:	bf16      	itet	ne
   1559e:	2802      	cmpne	r0, #2
   155a0:	2000      	moveq	r0, #0
   155a2:	2001      	movne	r0, #1
   155a4:	f888 006f 	strb.w	r0, [r8, #111]	; 0x6f
   155a8:	68e0      	ldr	r0, [r4, #12]
   155aa:	f8c8 0070 	str.w	r0, [r8, #112]	; 0x70
   155ae:	8a20      	ldrh	r0, [r4, #16]
   155b0:	f8a8 0074 	strh.w	r0, [r8, #116]	; 0x74
   155b4:	7de0      	ldrb	r0, [r4, #23]
   155b6:	f898 1046 	ldrb.w	r1, [r8, #70]	; 0x46
   155ba:	f360 1107 	bfi	r1, r0, #4, #4
   155be:	f888 1046 	strb.w	r1, [r8, #70]	; 0x46
   155c2:	b00f      	add	sp, #60	; 0x3c
   155c4:	f04f 0000 	mov.w	r0, #0
   155c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   155cc:	e7ff      	b.n	155ce <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x21e>
   155ce:	4603      	mov	r3, r0
   155d0:	b2f0      	uxtb	r0, r6
   155d2:	4921      	ldr	r1, [pc, #132]	; (15658 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x2a8>)
   155d4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   155d8:	2808      	cmp	r0, #8
   155da:	f831 1010 	ldrh.w	r1, [r1, r0, lsl #1]
   155de:	f201 31e7 	addw	r1, r1, #999	; 0x3e7
   155e2:	fbb1 f2f2 	udiv	r2, r1, r2
   155e6:	bf08      	it	eq
   155e8:	f04f 0c40 	moveq.w	ip, #64	; 0x40
   155ec:	d00d      	beq.n	1560a <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x25a>
   155ee:	2804      	cmp	r0, #4
   155f0:	bf08      	it	eq
   155f2:	f04f 0c10 	moveq.w	ip, #16
   155f6:	d008      	beq.n	1560a <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x25a>
   155f8:	2802      	cmp	r0, #2
   155fa:	bf07      	ittee	eq
   155fc:	f04f 0c04 	moveq.w	ip, #4
   15600:	2112      	moveq	r1, #18
   15602:	f04f 0c08 	movne.w	ip, #8
   15606:	2119      	movne	r1, #25
   15608:	e000      	b.n	1560c <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x25c>
   1560a:	2114      	movs	r1, #20
   1560c:	fb1c f101 	smulbb	r1, ip, r1
   15610:	2808      	cmp	r0, #8
   15612:	bf08      	it	eq
   15614:	2540      	moveq	r5, #64	; 0x40
   15616:	d01b      	beq.n	15650 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x2a0>
   15618:	2804      	cmp	r0, #4
   1561a:	bf08      	it	eq
   1561c:	252e      	moveq	r5, #46	; 0x2e
   1561e:	d017      	beq.n	15650 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x2a0>
   15620:	2802      	cmp	r0, #2
   15622:	bf0c      	ite	eq
   15624:	2018      	moveq	r0, #24
   15626:	2028      	movne	r0, #40	; 0x28
   15628:	4428      	add	r0, r5
   1562a:	4408      	add	r0, r1
   1562c:	fb10 2003 	smlabb	r0, r0, r3, r2
   15630:	f06f 017f 	mvn.w	r1, #127	; 0x7f
   15634:	eb01 11c3 	add.w	r1, r1, r3, lsl #7
   15638:	1845      	adds	r5, r0, r1
   1563a:	f7fc ff55 	bl	124e8 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ>
   1563e:	0c39      	lsrs	r1, r7, #16
   15640:	9100      	str	r1, [sp, #0]
   15642:	f3c6 2207 	ubfx	r2, r6, #8, #8
   15646:	2301      	movs	r3, #1
   15648:	4629      	mov	r1, r5
   1564a:	f001 fda3 	bl	17194 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xdbc>
   1564e:	e743      	b.n	154d8 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x128>
   15650:	f44f 70a8 	mov.w	r0, #336	; 0x150
   15654:	e7e8      	b.n	15628 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x278>
   15656:	0000      	.short	0x0000
   15658:	00017b80 	.word	0x00017b80

0001565c <sym_FSDCMX3C6Q67T66V54TUJDLMC4XSLM7ZTOTYRDI>:
   1565c:	4902      	ldr	r1, [pc, #8]	; (15668 <sym_FSDCMX3C6Q67T66V54TUJDLMC4XSLM7ZTOTYRDI+0xc>)
   1565e:	4801      	ldr	r0, [pc, #4]	; (15664 <sym_FSDCMX3C6Q67T66V54TUJDLMC4XSLM7ZTOTYRDI+0x8>)
   15660:	60c8      	str	r0, [r1, #12]
   15662:	4770      	bx	lr
   15664:	00017bcc 	.word	0x00017bcc
   15668:	2000016c 	.word	0x2000016c

0001566c <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY>:
   1566c:	4a11      	ldr	r2, [pc, #68]	; (156b4 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x48>)
   1566e:	b510      	push	{r4, lr}
   15670:	2100      	movs	r1, #0
   15672:	7011      	strb	r1, [r2, #0]
   15674:	4c10      	ldr	r4, [pc, #64]	; (156b8 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x4c>)
   15676:	60a0      	str	r0, [r4, #8]
   15678:	7810      	ldrb	r0, [r2, #0]
   1567a:	b120      	cbz	r0, 15686 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x1a>
   1567c:	f44f 714b 	mov.w	r1, #812	; 0x32c
   15680:	202d      	movs	r0, #45	; 0x2d
   15682:	f7fc f97d 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   15686:	6011      	str	r1, [r2, #0]
   15688:	6051      	str	r1, [r2, #4]
   1568a:	6091      	str	r1, [r2, #8]
   1568c:	60d1      	str	r1, [r2, #12]
   1568e:	6111      	str	r1, [r2, #16]
   15690:	6151      	str	r1, [r2, #20]
   15692:	6191      	str	r1, [r2, #24]
   15694:	61d1      	str	r1, [r2, #28]
   15696:	6211      	str	r1, [r2, #32]
   15698:	f006 fe52 	bl	1c340 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
   1569c:	f006 fc2a 	bl	1bef4 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
   156a0:	68e0      	ldr	r0, [r4, #12]
   156a2:	2800      	cmp	r0, #0
   156a4:	bf18      	it	ne
   156a6:	bd10      	popne	{r4, pc}
   156a8:	f240 312f 	movw	r1, #815	; 0x32f
   156ac:	202d      	movs	r0, #45	; 0x2d
   156ae:	f7fc f967 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   156b2:	0000      	.short	0x0000
   156b4:	200017a4 	.word	0x200017a4
   156b8:	2000016c 	.word	0x2000016c

000156bc <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A>:
   156bc:	4902      	ldr	r1, [pc, #8]	; (156c8 <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A+0xc>)
   156be:	6048      	str	r0, [r1, #4]
   156c0:	68c9      	ldr	r1, [r1, #12]
   156c2:	6809      	ldr	r1, [r1, #0]
   156c4:	4708      	bx	r1
   156c6:	0000      	.short	0x0000
   156c8:	2000016c 	.word	0x2000016c

000156cc <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>:
   156cc:	490b      	ldr	r1, [pc, #44]	; (156fc <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0x30>)
   156ce:	b510      	push	{r4, lr}
   156d0:	7808      	ldrb	r0, [r1, #0]
   156d2:	2800      	cmp	r0, #0
   156d4:	bf18      	it	ne
   156d6:	240c      	movne	r4, #12
   156d8:	d001      	beq.n	156de <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0x12>
   156da:	4620      	mov	r0, r4
   156dc:	bd10      	pop	{r4, pc}
   156de:	2400      	movs	r4, #0
   156e0:	600c      	str	r4, [r1, #0]
   156e2:	604c      	str	r4, [r1, #4]
   156e4:	608c      	str	r4, [r1, #8]
   156e6:	60cc      	str	r4, [r1, #12]
   156e8:	610c      	str	r4, [r1, #16]
   156ea:	614c      	str	r4, [r1, #20]
   156ec:	618c      	str	r4, [r1, #24]
   156ee:	61cc      	str	r4, [r1, #28]
   156f0:	620c      	str	r4, [r1, #32]
   156f2:	f006 fe25 	bl	1c340 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
   156f6:	f006 fbfd 	bl	1bef4 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
   156fa:	e7ee      	b.n	156da <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0xe>
   156fc:	200017a4 	.word	0x200017a4

00015700 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I>:
   15700:	4905      	ldr	r1, [pc, #20]	; (15718 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x18>)
   15702:	b510      	push	{r4, lr}
   15704:	7809      	ldrb	r1, [r1, #0]
   15706:	2901      	cmp	r1, #1
   15708:	bf1c      	itt	ne
   1570a:	2000      	movne	r0, #0
   1570c:	bd10      	popne	{r4, pc}
   1570e:	f001 ff21 	bl	17554 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x117c>
   15712:	2000      	movs	r0, #0
   15714:	bd10      	pop	{r4, pc}
   15716:	0000      	.short	0x0000
   15718:	200017a4 	.word	0x200017a4

0001571c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY>:
   1571c:	4904      	ldr	r1, [pc, #16]	; (15730 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x14>)
   1571e:	4803      	ldr	r0, [pc, #12]	; (1572c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>)
   15720:	6008      	str	r0, [r1, #0]
   15722:	4905      	ldr	r1, [pc, #20]	; (15738 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1c>)
   15724:	4803      	ldr	r0, [pc, #12]	; (15734 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x18>)
   15726:	6008      	str	r0, [r1, #0]
   15728:	4770      	bx	lr
   1572a:	0000      	.short	0x0000
   1572c:	00017979 	.word	0x00017979
   15730:	20000180 	.word	0x20000180
   15734:	000177fd 	.word	0x000177fd
   15738:	2000017c 	.word	0x2000017c
   1573c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   15740:	000d      	movs	r5, r1
   15742:	4604      	mov	r4, r0
   15744:	d016      	beq.n	15774 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x58>
   15746:	f104 0030 	add.w	r0, r4, #48	; 0x30
   1574a:	f00b fe4a 	bl	213e2 <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
   1574e:	b938      	cbnz	r0, 15760 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x44>
   15750:	78a0      	ldrb	r0, [r4, #2]
   15752:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   15756:	b188      	cbz	r0, 1577c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x60>
   15758:	f104 0030 	add.w	r0, r4, #48	; 0x30
   1575c:	f00b fe6c 	bl	21438 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>
   15760:	f104 0030 	add.w	r0, r4, #48	; 0x30
   15764:	f00b fdf8 	bl	21358 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>
   15768:	f007 fd3e 	bl	1d1e8 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
   1576c:	7921      	ldrb	r1, [r4, #4]
   1576e:	2025      	movs	r0, #37	; 0x25
   15770:	f007 fd06 	bl	1d180 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ>
   15774:	f894 1076 	ldrb.w	r1, [r4, #118]	; 0x76
   15778:	b94d      	cbnz	r5, 1578e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x72>
   1577a:	e004      	b.n	15786 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x6a>
   1577c:	4620      	mov	r0, r4
   1577e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   15782:	f001 bee7 	b.w	17554 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x117c>
   15786:	2200      	movs	r2, #0
   15788:	4620      	mov	r0, r4
   1578a:	f001 f895 	bl	168b8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4e0>
   1578e:	4e2b      	ldr	r6, [pc, #172]	; (1583c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x120>)
   15790:	68b0      	ldr	r0, [r6, #8]
   15792:	78c1      	ldrb	r1, [r0, #3]
   15794:	f011 0f3f 	tst.w	r1, #63	; 0x3f
   15798:	bf14      	ite	ne
   1579a:	2201      	movne	r2, #1
   1579c:	2200      	moveq	r2, #0
   1579e:	7901      	ldrb	r1, [r0, #4]
   157a0:	f011 0110 	ands.w	r1, r1, #16
   157a4:	bf18      	it	ne
   157a6:	2101      	movne	r1, #1
   157a8:	4211      	tst	r1, r2
   157aa:	d014      	beq.n	157d6 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xba>
   157ac:	f00a ff03 	bl	205b6 <sym_275CZPEXZ5GILHAL7XLHAN4U4MKDK6NWLUA2SLI>
   157b0:	4607      	mov	r7, r0
   157b2:	f104 0030 	add.w	r0, r4, #48	; 0x30
   157b6:	f00b fe14 	bl	213e2 <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
   157ba:	1c40      	adds	r0, r0, #1
   157bc:	b2c2      	uxtb	r2, r0
   157be:	4620      	mov	r0, r4
   157c0:	7921      	ldrb	r1, [r4, #4]
   157c2:	463b      	mov	r3, r7
   157c4:	f001 fc72 	bl	170ac <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xcd4>
   157c8:	9000      	str	r0, [sp, #0]
   157ca:	2303      	movs	r3, #3
   157cc:	2204      	movs	r2, #4
   157ce:	4669      	mov	r1, sp
   157d0:	68b0      	ldr	r0, [r6, #8]
   157d2:	f00a fecd 	bl	20570 <sym_DEQ52UXGGOG3CBHCSM5ZCBFPFTNN2OZ3BBWERRI>
   157d6:	4f1a      	ldr	r7, [pc, #104]	; (15840 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x124>)
   157d8:	b345      	cbz	r5, 1582c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x110>
   157da:	68bd      	ldr	r5, [r7, #8]
   157dc:	68b0      	ldr	r0, [r6, #8]
   157de:	f00a feea 	bl	205b6 <sym_275CZPEXZ5GILHAL7XLHAN4U4MKDK6NWLUA2SLI>
   157e2:	4680      	mov	r8, r0
   157e4:	f104 0030 	add.w	r0, r4, #48	; 0x30
   157e8:	f00b fd75 	bl	212d6 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
   157ec:	4681      	mov	r9, r0
   157ee:	f104 0030 	add.w	r0, r4, #48	; 0x30
   157f2:	f00b fdf6 	bl	213e2 <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
   157f6:	eba9 0000 	sub.w	r0, r9, r0
   157fa:	1e40      	subs	r0, r0, #1
   157fc:	b2c1      	uxtb	r1, r0
   157fe:	7920      	ldrb	r0, [r4, #4]
   15800:	4642      	mov	r2, r8
   15802:	f00b fe1e 	bl	21442 <sym_CVNRAJRARP4LQF4UWJ6MJU4AFS4X36ZOCWFPBEA>
   15806:	4405      	add	r5, r0
   15808:	78a0      	ldrb	r0, [r4, #2]
   1580a:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   1580e:	b140      	cbz	r0, 15822 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x106>
   15810:	6878      	ldr	r0, [r7, #4]
   15812:	2101      	movs	r1, #1
   15814:	4405      	add	r5, r0
   15816:	4620      	mov	r0, r4
   15818:	f7ff fd72 	bl	15300 <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>
   1581c:	4428      	add	r0, r5
   1581e:	f8c4 0120 	str.w	r0, [r4, #288]	; 0x120
   15822:	7922      	ldrb	r2, [r4, #4]
   15824:	4629      	mov	r1, r5
   15826:	2000      	movs	r0, #0
   15828:	f007 faac 	bl	1cd84 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>
   1582c:	68b0      	ldr	r0, [r6, #8]
   1582e:	f007 fa5b 	bl	1cce8 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
   15832:	2006      	movs	r0, #6
   15834:	7038      	strb	r0, [r7, #0]
   15836:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1583a:	0000      	.short	0x0000
   1583c:	2000016c 	.word	0x2000016c
   15840:	200017a4 	.word	0x200017a4
   15844:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15848:	4e70      	ldr	r6, [pc, #448]	; (15a0c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2f0>)
   1584a:	000f      	movs	r7, r1
   1584c:	4604      	mov	r4, r0
   1584e:	d027      	beq.n	158a0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x184>
   15850:	f104 0030 	add.w	r0, r4, #48	; 0x30
   15854:	f00b fdc5 	bl	213e2 <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
   15858:	b9c0      	cbnz	r0, 1588c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x170>
   1585a:	78a0      	ldrb	r0, [r4, #2]
   1585c:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   15860:	2800      	cmp	r0, #0
   15862:	d038      	beq.n	158d6 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1ba>
   15864:	f104 0030 	add.w	r0, r4, #48	; 0x30
   15868:	f00b fd35 	bl	212d6 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
   1586c:	4605      	mov	r5, r0
   1586e:	f104 0030 	add.w	r0, r4, #48	; 0x30
   15872:	f00b fdb6 	bl	213e2 <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
   15876:	1a28      	subs	r0, r5, r0
   15878:	b2c0      	uxtb	r0, r0
   1587a:	f00b fdfd 	bl	21478 <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>
   1587e:	6871      	ldr	r1, [r6, #4]
   15880:	4408      	add	r0, r1
   15882:	6070      	str	r0, [r6, #4]
   15884:	f104 0030 	add.w	r0, r4, #48	; 0x30
   15888:	f00b fdd6 	bl	21438 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>
   1588c:	f104 0030 	add.w	r0, r4, #48	; 0x30
   15890:	f00b fd62 	bl	21358 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>
   15894:	f007 fca8 	bl	1d1e8 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
   15898:	7921      	ldrb	r1, [r4, #4]
   1589a:	2025      	movs	r0, #37	; 0x25
   1589c:	f007 fc70 	bl	1d180 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ>
   158a0:	4d5b      	ldr	r5, [pc, #364]	; (15a10 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2f4>)
   158a2:	f894 8076 	ldrb.w	r8, [r4, #118]	; 0x76
   158a6:	2100      	movs	r1, #0
   158a8:	68a8      	ldr	r0, [r5, #8]
   158aa:	8001      	strh	r1, [r0, #0]
   158ac:	7801      	ldrb	r1, [r0, #0]
   158ae:	f001 01df 	and.w	r1, r1, #223	; 0xdf
   158b2:	7001      	strb	r1, [r0, #0]
   158b4:	8861      	ldrh	r1, [r4, #2]
   158b6:	2913      	cmp	r1, #19
   158b8:	d02d      	beq.n	15916 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1fa>
   158ba:	dc11      	bgt.n	158e0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1c4>
   158bc:	2910      	cmp	r1, #16
   158be:	bf08      	it	eq
   158c0:	2102      	moveq	r1, #2
   158c2:	d03d      	beq.n	15940 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x224>
   158c4:	2912      	cmp	r1, #18
   158c6:	bf08      	it	eq
   158c8:	2106      	moveq	r1, #6
   158ca:	d039      	beq.n	15940 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x224>
   158cc:	f240 6172 	movw	r1, #1650	; 0x672
   158d0:	202d      	movs	r0, #45	; 0x2d
   158d2:	f7fc f855 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   158d6:	4620      	mov	r0, r4
   158d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   158dc:	f001 be3a 	b.w	17554 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x117c>
   158e0:	2915      	cmp	r1, #21
   158e2:	bf18      	it	ne
   158e4:	291d      	cmpne	r1, #29
   158e6:	d1f1      	bne.n	158cc <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1b0>
   158e8:	f04f 0101 	mov.w	r1, #1
   158ec:	f00a fed5 	bl	2069a <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>
   158f0:	68a8      	ldr	r0, [r5, #8]
   158f2:	f1b8 0f00 	cmp.w	r8, #0
   158f6:	7801      	ldrb	r1, [r0, #0]
   158f8:	f001 01df 	and.w	r1, r1, #223	; 0xdf
   158fc:	f041 0120 	orr.w	r1, r1, #32
   15900:	7001      	strb	r1, [r0, #0]
   15902:	d013      	beq.n	1592c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x210>
   15904:	f104 0177 	add.w	r1, r4, #119	; 0x77
   15908:	f00a fee9 	bl	206de <sym_M7NFHAM4FWTXSZMPV3DTHM2V6JD26AKK4R2A6YI>
   1590c:	2101      	movs	r1, #1
   1590e:	68a8      	ldr	r0, [r5, #8]
   15910:	f00a feec 	bl	206ec <sym_NAGMMCXDNSRJLJ55T6DS4CG2FNZEN6Y562ZTFRY>
   15914:	e016      	b.n	15944 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x228>
   15916:	2100      	movs	r1, #0
   15918:	f00a febf 	bl	2069a <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>
   1591c:	68a8      	ldr	r0, [r5, #8]
   1591e:	7801      	ldrb	r1, [r0, #0]
   15920:	f001 01df 	and.w	r1, r1, #223	; 0xdf
   15924:	f041 0120 	orr.w	r1, r1, #32
   15928:	7001      	strb	r1, [r0, #0]
   1592a:	e00b      	b.n	15944 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x228>
   1592c:	f104 0170 	add.w	r1, r4, #112	; 0x70
   15930:	f00a fed5 	bl	206de <sym_M7NFHAM4FWTXSZMPV3DTHM2V6JD26AKK4R2A6YI>
   15934:	f894 106f 	ldrb.w	r1, [r4, #111]	; 0x6f
   15938:	68a8      	ldr	r0, [r5, #8]
   1593a:	f00a fed7 	bl	206ec <sym_NAGMMCXDNSRJLJ55T6DS4CG2FNZEN6Y562ZTFRY>
   1593e:	e001      	b.n	15944 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x228>
   15940:	f00a feab 	bl	2069a <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>
   15944:	46a0      	mov	r8, r4
   15946:	f104 0169 	add.w	r1, r4, #105	; 0x69
   1594a:	68a8      	ldr	r0, [r5, #8]
   1594c:	f00a fed7 	bl	206fe <sym_UDZO6WOEWJ2CNEYVP45GSHBVFT4OP6GEANP3NQY>
   15950:	f898 1068 	ldrb.w	r1, [r8, #104]	; 0x68
   15954:	68a8      	ldr	r0, [r5, #8]
   15956:	f00a fed9 	bl	2070c <sym_YBOODJ7VBLXRRILCBQXIORIXU3GHRAYK6WULLQY>
   1595a:	8860      	ldrh	r0, [r4, #2]
   1595c:	281d      	cmp	r0, #29
   1595e:	bf18      	it	ne
   15960:	2815      	cmpne	r0, #21
   15962:	d005      	beq.n	15970 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x254>
   15964:	f894 2054 	ldrb.w	r2, [r4, #84]	; 0x54
   15968:	6d21      	ldr	r1, [r4, #80]	; 0x50
   1596a:	68a8      	ldr	r0, [r5, #8]
   1596c:	f00a fe85 	bl	2067a <sym_252O2EYK5FIXU63T5SACWK2VO6UFAQRM77ITNFA>
   15970:	68a8      	ldr	r0, [r5, #8]
   15972:	f007 f9b9 	bl	1cce8 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
   15976:	2004      	movs	r0, #4
   15978:	7030      	strb	r0, [r6, #0]
   1597a:	b327      	cbz	r7, 159c6 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2aa>
   1597c:	8860      	ldrh	r0, [r4, #2]
   1597e:	2810      	cmp	r0, #16
   15980:	d031      	beq.n	159e6 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2ca>
   15982:	f104 0030 	add.w	r0, r4, #48	; 0x30
   15986:	68b5      	ldr	r5, [r6, #8]
   15988:	f00b fca5 	bl	212d6 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
   1598c:	4607      	mov	r7, r0
   1598e:	f104 0030 	add.w	r0, r4, #48	; 0x30
   15992:	f00b fd26 	bl	213e2 <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
   15996:	1a38      	subs	r0, r7, r0
   15998:	1e40      	subs	r0, r0, #1
   1599a:	b2c0      	uxtb	r0, r0
   1599c:	8861      	ldrh	r1, [r4, #2]
   1599e:	2228      	movs	r2, #40	; 0x28
   159a0:	f002 f946 	bl	17c30 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I>
   159a4:	4405      	add	r5, r0
   159a6:	78a0      	ldrb	r0, [r4, #2]
   159a8:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   159ac:	b130      	cbz	r0, 159bc <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2a0>
   159ae:	6870      	ldr	r0, [r6, #4]
   159b0:	4405      	add	r5, r0
   159b2:	f00b fd65 	bl	21480 <sym_USXJ3USYRHE5AVFUSG2J2G7QDHRASPG75ESP25A>
   159b6:	4428      	add	r0, r5
   159b8:	f8c4 0120 	str.w	r0, [r4, #288]	; 0x120
   159bc:	7922      	ldrb	r2, [r4, #4]
   159be:	4629      	mov	r1, r5
   159c0:	2000      	movs	r0, #0
   159c2:	f007 f9df 	bl	1cd84 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>
   159c6:	8860      	ldrh	r0, [r4, #2]
   159c8:	2813      	cmp	r0, #19
   159ca:	d015      	beq.n	159f8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2dc>
   159cc:	dc10      	bgt.n	159f0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2d4>
   159ce:	2810      	cmp	r0, #16
   159d0:	bf08      	it	eq
   159d2:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
   159d6:	2812      	cmp	r0, #18
   159d8:	d00e      	beq.n	159f8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2dc>
   159da:	bf00      	nop
   159dc:	f640 51b8 	movw	r1, #3512	; 0xdb8
   159e0:	202d      	movs	r0, #45	; 0x2d
   159e2:	f7fb ffcd 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   159e6:	7921      	ldrb	r1, [r4, #4]
   159e8:	2000      	movs	r0, #0
   159ea:	f006 fd9b 	bl	1c524 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>
   159ee:	e7ea      	b.n	159c6 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2aa>
   159f0:	2815      	cmp	r0, #21
   159f2:	bf18      	it	ne
   159f4:	281d      	cmpne	r0, #29
   159f6:	d1f1      	bne.n	159dc <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2c0>
   159f8:	7922      	ldrb	r2, [r4, #4]
   159fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   159fe:	f04f 0101 	mov.w	r1, #1
   15a02:	f04f 0000 	mov.w	r0, #0
   15a06:	f007 bb2f 	b.w	1d068 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
   15a0a:	0000      	.short	0x0000
   15a0c:	200017a4 	.word	0x200017a4
   15a10:	2000016c 	.word	0x2000016c
   15a14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   15a18:	4604      	mov	r4, r0
   15a1a:	b082      	sub	sp, #8
   15a1c:	460e      	mov	r6, r1
   15a1e:	f890 0044 	ldrb.w	r0, [r0, #68]	; 0x44
   15a22:	f007 fbe1 	bl	1d1e8 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
   15a26:	7961      	ldrb	r1, [r4, #5]
   15a28:	20ff      	movs	r0, #255	; 0xff
   15a2a:	f007 fba9 	bl	1d180 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ>
   15a2e:	4d89      	ldr	r5, [pc, #548]	; (15c54 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x538>)
   15a30:	4f89      	ldr	r7, [pc, #548]	; (15c58 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x53c>)
   15a32:	f04f 0800 	mov.w	r8, #0
   15a36:	b166      	cbz	r6, 15a52 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x336>
   15a38:	7962      	ldrb	r2, [r4, #5]
   15a3a:	f44f 71a5 	mov.w	r1, #330	; 0x14a
   15a3e:	2000      	movs	r0, #0
   15a40:	f007 fad8 	bl	1cff4 <sym_X2OPELT6OFJBU77R5R7QDKLXQUDKTQW6IEUFVIQ>
   15a44:	78a0      	ldrb	r0, [r4, #2]
   15a46:	f010 0f03 	tst.w	r0, #3
   15a4a:	d042      	beq.n	15ad2 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x3b6>
   15a4c:	2e00      	cmp	r6, #0
   15a4e:	d03b      	beq.n	15ac8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x3ac>
   15a50:	e03f      	b.n	15ad2 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x3b6>
   15a52:	68a8      	ldr	r0, [r5, #8]
   15a54:	f00a fdaf 	bl	205b6 <sym_275CZPEXZ5GILHAL7XLHAN4U4MKDK6NWLUA2SLI>
   15a58:	4682      	mov	sl, r0
   15a5a:	f894 9004 	ldrb.w	r9, [r4, #4]
   15a5e:	f104 0030 	add.w	r0, r4, #48	; 0x30
   15a62:	f00b fc38 	bl	212d6 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
   15a66:	4601      	mov	r1, r0
   15a68:	f1b9 0f08 	cmp.w	r9, #8
   15a6c:	bf04      	itt	eq
   15a6e:	f44f 72c8 	moveq.w	r2, #400	; 0x190
   15a72:	2340      	moveq	r3, #64	; 0x40
   15a74:	d00f      	beq.n	15a96 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x37a>
   15a76:	f1b9 0f04 	cmp.w	r9, #4
   15a7a:	bf04      	itt	eq
   15a7c:	f44f 72bf 	moveq.w	r2, #382	; 0x17e
   15a80:	2310      	moveq	r3, #16
   15a82:	d008      	beq.n	15a96 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x37a>
   15a84:	f1b9 0f02 	cmp.w	r9, #2
   15a88:	bf07      	ittee	eq
   15a8a:	f108 0218 	addeq.w	r2, r8, #24
   15a8e:	2304      	moveq	r3, #4
   15a90:	f108 0228 	addne.w	r2, r8, #40	; 0x28
   15a94:	2308      	movne	r3, #8
   15a96:	f10a 0005 	add.w	r0, sl, #5
   15a9a:	fb10 2003 	smlabb	r0, r0, r3, r2
   15a9e:	68ba      	ldr	r2, [r7, #8]
   15aa0:	fb01 2000 	mla	r0, r1, r0, r2
   15aa4:	22ca      	movs	r2, #202	; 0xca
   15aa6:	eb02 11c1 	add.w	r1, r2, r1, lsl #7
   15aaa:	4408      	add	r0, r1
   15aac:	6138      	str	r0, [r7, #16]
   15aae:	78a1      	ldrb	r1, [r4, #2]
   15ab0:	f3c1 01c0 	ubfx	r1, r1, #3, #1
   15ab4:	b111      	cbz	r1, 15abc <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x3a0>
   15ab6:	6879      	ldr	r1, [r7, #4]
   15ab8:	4408      	add	r0, r1
   15aba:	6138      	str	r0, [r7, #16]
   15abc:	4601      	mov	r1, r0
   15abe:	7962      	ldrb	r2, [r4, #5]
   15ac0:	2000      	movs	r0, #0
   15ac2:	f007 f95f 	bl	1cd84 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>
   15ac6:	e7bd      	b.n	15a44 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x328>
   15ac8:	7962      	ldrb	r2, [r4, #5]
   15aca:	2101      	movs	r1, #1
   15acc:	2000      	movs	r0, #0
   15ace:	f007 facb 	bl	1d068 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
   15ad2:	f894 1076 	ldrb.w	r1, [r4, #118]	; 0x76
   15ad6:	4620      	mov	r0, r4
   15ad8:	2e00      	cmp	r6, #0
   15ada:	d07d      	beq.n	15bd8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x4bc>
   15adc:	8861      	ldrh	r1, [r4, #2]
   15ade:	4646      	mov	r6, r8
   15ae0:	f3c1 0040 	ubfx	r0, r1, #1, #1
   15ae4:	2800      	cmp	r0, #0
   15ae6:	bf08      	it	eq
   15ae8:	f048 0608 	orreq.w	r6, r8, #8
   15aec:	f011 0f40 	tst.w	r1, #64	; 0x40
   15af0:	bf18      	it	ne
   15af2:	f046 0640 	orrne.w	r6, r6, #64	; 0x40
   15af6:	2800      	cmp	r0, #0
   15af8:	bf19      	ittee	ne
   15afa:	f8d4 a058 	ldrne.w	sl, [r4, #88]	; 0x58
   15afe:	f8b4 905c 	ldrhne.w	r9, [r4, #92]	; 0x5c
   15b02:	f8d4 a050 	ldreq.w	sl, [r4, #80]	; 0x50
   15b06:	f8b4 9054 	ldrheq.w	r9, [r4, #84]	; 0x54
   15b0a:	68a8      	ldr	r0, [r5, #8]
   15b0c:	2107      	movs	r1, #7
   15b0e:	f8a0 8000 	strh.w	r8, [r0]
   15b12:	f00a fdc2 	bl	2069a <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>
   15b16:	2100      	movs	r1, #0
   15b18:	68a8      	ldr	r0, [r5, #8]
   15b1a:	f00a fc82 	bl	20422 <sym_IUN5SW63ODKDFPSGCV4FO7HO5IPKZTFTURF2JKI>
   15b1e:	2200      	movs	r2, #0
   15b20:	4631      	mov	r1, r6
   15b22:	68a8      	ldr	r0, [r5, #8]
   15b24:	f00a fc86 	bl	20434 <sym_WLQ6YP4CLBLEMT6X4SKN2P2RM7K53RQFGIL5RPY>
   15b28:	f016 0f08 	tst.w	r6, #8
   15b2c:	d016      	beq.n	15b5c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x440>
   15b2e:	f8b4 1045 	ldrh.w	r1, [r4, #69]	; 0x45
   15b32:	f8bd 0000 	ldrh.w	r0, [sp]
   15b36:	2302      	movs	r3, #2
   15b38:	f361 000b 	bfi	r0, r1, #0, #12
   15b3c:	f8ad 0000 	strh.w	r0, [sp]
   15b40:	f894 0046 	ldrb.w	r0, [r4, #70]	; 0x46
   15b44:	2203      	movs	r2, #3
   15b46:	0901      	lsrs	r1, r0, #4
   15b48:	f89d 0001 	ldrb.w	r0, [sp, #1]
   15b4c:	f361 1007 	bfi	r0, r1, #4, #4
   15b50:	f88d 0001 	strb.w	r0, [sp, #1]
   15b54:	4669      	mov	r1, sp
   15b56:	68a8      	ldr	r0, [r5, #8]
   15b58:	f00a fd0a 	bl	20570 <sym_DEQ52UXGGOG3CBHCSM5ZCBFPFTNN2OZ3BBWERRI>
   15b5c:	68a8      	ldr	r0, [r5, #8]
   15b5e:	f00a fca9 	bl	204b4 <sym_PBUYHYNPX6UVR3SOSML43PVJV4TB32DZKPBWZSI>
   15b62:	89ba      	ldrh	r2, [r7, #12]
   15b64:	f1c0 00fe 	rsb	r0, r0, #254	; 0xfe
   15b68:	eba9 0102 	sub.w	r1, r9, r2
   15b6c:	4281      	cmp	r1, r0
   15b6e:	bfa8      	it	ge
   15b70:	4601      	movge	r1, r0
   15b72:	f001 08ff 	and.w	r8, r1, #255	; 0xff
   15b76:	eb02 0008 	add.w	r0, r2, r8
   15b7a:	4548      	cmp	r0, r9
   15b7c:	d23e      	bcs.n	15bfc <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x4e0>
   15b7e:	f046 0110 	orr.w	r1, r6, #16
   15b82:	2200      	movs	r2, #0
   15b84:	68a8      	ldr	r0, [r5, #8]
   15b86:	f00a fc55 	bl	20434 <sym_WLQ6YP4CLBLEMT6X4SKN2P2RM7K53RQFGIL5RPY>
   15b8a:	68a8      	ldr	r0, [r5, #8]
   15b8c:	f00a fc92 	bl	204b4 <sym_PBUYHYNPX6UVR3SOSML43PVJV4TB32DZKPBWZSI>
   15b90:	89b9      	ldrh	r1, [r7, #12]
   15b92:	f1c0 00fe 	rsb	r0, r0, #254	; 0xfe
   15b96:	eba9 0101 	sub.w	r1, r9, r1
   15b9a:	4281      	cmp	r1, r0
   15b9c:	bfa8      	it	ge
   15b9e:	4601      	movge	r1, r0
   15ba0:	f001 08ff 	and.w	r8, r1, #255	; 0xff
   15ba4:	68a8      	ldr	r0, [r5, #8]
   15ba6:	f00a fcdf 	bl	20568 <sym_APJRNOYIPVVMXANZL7N72BAJ3R7XI267X7HUSZY>
   15baa:	4440      	add	r0, r8
   15bac:	1c40      	adds	r0, r0, #1
   15bae:	b2c6      	uxtb	r6, r0
   15bb0:	f8b4 0048 	ldrh.w	r0, [r4, #72]	; 0x48
   15bb4:	68b9      	ldr	r1, [r7, #8]
   15bb6:	1840      	adds	r0, r0, r1
   15bb8:	f8d4 1140 	ldr.w	r1, [r4, #320]	; 0x140
   15bbc:	1840      	adds	r0, r0, r1
   15bbe:	b282      	uxth	r2, r0
   15bc0:	f104 0169 	add.w	r1, r4, #105	; 0x69
   15bc4:	f104 0036 	add.w	r0, r4, #54	; 0x36
   15bc8:	f7fe fb28 	bl	1421c <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ>
   15bcc:	f884 0044 	strb.w	r0, [r4, #68]	; 0x44
   15bd0:	7961      	ldrb	r1, [r4, #5]
   15bd2:	4633      	mov	r3, r6
   15bd4:	2201      	movs	r2, #1
   15bd6:	e000      	b.n	15bda <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x4be>
   15bd8:	e037      	b.n	15c4a <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x52e>
   15bda:	4620      	mov	r0, r4
   15bdc:	f001 fa66 	bl	170ac <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xcd4>
   15be0:	9000      	str	r0, [sp, #0]
   15be2:	f8bd 0000 	ldrh.w	r0, [sp]
   15be6:	f89d 1002 	ldrb.w	r1, [sp, #2]
   15bea:	2303      	movs	r3, #3
   15bec:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
   15bf0:	9001      	str	r0, [sp, #4]
   15bf2:	2204      	movs	r2, #4
   15bf4:	a901      	add	r1, sp, #4
   15bf6:	68a8      	ldr	r0, [r5, #8]
   15bf8:	f00a fcba 	bl	20570 <sym_DEQ52UXGGOG3CBHCSM5ZCBFPFTNN2OZ3BBWERRI>
   15bfc:	78a0      	ldrb	r0, [r4, #2]
   15bfe:	f010 0f40 	tst.w	r0, #64	; 0x40
   15c02:	d00e      	beq.n	15c22 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x506>
   15c04:	f994 2010 	ldrsb.w	r2, [r4, #16]
   15c08:	f894 1044 	ldrb.w	r1, [r4, #68]	; 0x44
   15c0c:	7960      	ldrb	r0, [r4, #5]
   15c0e:	f00d fc9a 	bl	23546 <sym_WCPWOVVEASSG4MEQ4OYZCASM4KFKZK6VT6CIMIA>
   15c12:	f88d 0000 	strb.w	r0, [sp]
   15c16:	2301      	movs	r3, #1
   15c18:	2206      	movs	r2, #6
   15c1a:	4669      	mov	r1, sp
   15c1c:	68a8      	ldr	r0, [r5, #8]
   15c1e:	f00a fca7 	bl	20570 <sym_DEQ52UXGGOG3CBHCSM5ZCBFPFTNN2OZ3BBWERRI>
   15c22:	89b8      	ldrh	r0, [r7, #12]
   15c24:	4642      	mov	r2, r8
   15c26:	eb00 010a 	add.w	r1, r0, sl
   15c2a:	68a8      	ldr	r0, [r5, #8]
   15c2c:	f00a fbe2 	bl	203f4 <sym_CFSAKL745S6L7NUIQWHEM5VF373WPPG5ELNMOCA>
   15c30:	89b8      	ldrh	r0, [r7, #12]
   15c32:	4440      	add	r0, r8
   15c34:	81b8      	strh	r0, [r7, #12]
   15c36:	68a8      	ldr	r0, [r5, #8]
   15c38:	f007 f856 	bl	1cce8 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
   15c3c:	2007      	movs	r0, #7
   15c3e:	7038      	strb	r0, [r7, #0]
   15c40:	2001      	movs	r0, #1
   15c42:	7078      	strb	r0, [r7, #1]
   15c44:	b002      	add	sp, #8
   15c46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   15c4a:	2201      	movs	r2, #1
   15c4c:	f000 fe34 	bl	168b8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4e0>
   15c50:	e7f1      	b.n	15c36 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x51a>
   15c52:	0000      	.short	0x0000
   15c54:	2000016c 	.word	0x2000016c
   15c58:	200017a4 	.word	0x200017a4
   15c5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   15c60:	4e49      	ldr	r6, [pc, #292]	; (15d88 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x66c>)
   15c62:	4681      	mov	r9, r0
   15c64:	7830      	ldrb	r0, [r6, #0]
   15c66:	2802      	cmp	r0, #2
   15c68:	bf1c      	itt	ne
   15c6a:	7830      	ldrbne	r0, [r6, #0]
   15c6c:	2803      	cmpne	r0, #3
   15c6e:	d005      	beq.n	15c7c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x560>
   15c70:	f640 5129 	movw	r1, #3369	; 0xd29
   15c74:	f04f 002d 	mov.w	r0, #45	; 0x2d
   15c78:	f7fb fe82 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   15c7c:	4c43      	ldr	r4, [pc, #268]	; (15d8c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x670>)
   15c7e:	6865      	ldr	r5, [r4, #4]
   15c80:	7b28      	ldrb	r0, [r5, #12]
   15c82:	b140      	cbz	r0, 15c96 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x57a>
   15c84:	f105 0047 	add.w	r0, r5, #71	; 0x47
   15c88:	f007 fa60 	bl	1d14c <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
   15c8c:	2800      	cmp	r0, #0
   15c8e:	bf04      	itt	eq
   15c90:	207f      	moveq	r0, #127	; 0x7f
   15c92:	f885 0047 	strbeq.w	r0, [r5, #71]	; 0x47
   15c96:	f8d4 c008 	ldr.w	ip, [r4, #8]
   15c9a:	6861      	ldr	r1, [r4, #4]
   15c9c:	f04f 0800 	mov.w	r8, #0
   15ca0:	f89c 0000 	ldrb.w	r0, [ip]
   15ca4:	6a0a      	ldr	r2, [r1, #32]
   15ca6:	f000 070f 	and.w	r7, r0, #15
   15caa:	2a00      	cmp	r2, #0
   15cac:	bf18      	it	ne
   15cae:	f892 8073 	ldrbne.w	r8, [r2, #115]	; 0x73
   15cb2:	f1b9 0f00 	cmp.w	r9, #0
   15cb6:	d04b      	beq.n	15d50 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x634>
   15cb8:	f101 0369 	add.w	r3, r1, #105	; 0x69
   15cbc:	f891 2068 	ldrb.w	r2, [r1, #104]	; 0x68
   15cc0:	09c0      	lsrs	r0, r0, #7
   15cc2:	f10c 0109 	add.w	r1, ip, #9
   15cc6:	f00a f917 	bl	1fef8 <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
   15cca:	2800      	cmp	r0, #0
   15ccc:	d040      	beq.n	15d50 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x634>
   15cce:	6865      	ldr	r5, [r4, #4]
   15cd0:	2f05      	cmp	r7, #5
   15cd2:	d11f      	bne.n	15d14 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x5f8>
   15cd4:	68a0      	ldr	r0, [r4, #8]
   15cd6:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
   15cda:	f000 001f 	and.w	r0, r0, #31
   15cde:	2810      	cmp	r0, #16
   15ce0:	d918      	bls.n	15d14 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x5f8>
   15ce2:	7be8      	ldrb	r0, [r5, #15]
   15ce4:	b1b0      	cbz	r0, 15d14 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x5f8>
   15ce6:	20ff      	movs	r0, #255	; 0xff
   15ce8:	f88d 0000 	strb.w	r0, [sp]
   15cec:	466a      	mov	r2, sp
   15cee:	2105      	movs	r1, #5
   15cf0:	4628      	mov	r0, r5
   15cf2:	f001 f953 	bl	16f9c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xbc4>
   15cf6:	b358      	cbz	r0, 15d50 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x634>
   15cf8:	68a0      	ldr	r0, [r4, #8]
   15cfa:	2222      	movs	r2, #34	; 0x22
   15cfc:	1cc1      	adds	r1, r0, #3
   15cfe:	f105 00e9 	add.w	r0, r5, #233	; 0xe9
   15d02:	f008 fdac 	bl	1e85e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   15d06:	2222      	movs	r2, #34	; 0x22
   15d08:	4629      	mov	r1, r5
   15d0a:	f105 00e0 	add.w	r0, r5, #224	; 0xe0
   15d0e:	f7fe fc1d 	bl	1454c <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
   15d12:	e01d      	b.n	15d50 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x634>
   15d14:	4641      	mov	r1, r8
   15d16:	68a0      	ldr	r0, [r4, #8]
   15d18:	f00a fc4f 	bl	205ba <sym_33X4NJAF5ERGJDTOD7NIRDMR4KT4JWBGAGRR5WQ>
   15d1c:	b1c0      	cbz	r0, 15d50 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x634>
   15d1e:	7832      	ldrb	r2, [r6, #0]
   15d20:	6860      	ldr	r0, [r4, #4]
   15d22:	4639      	mov	r1, r7
   15d24:	2a02      	cmp	r2, #2
   15d26:	bf1c      	itt	ne
   15d28:	7832      	ldrbne	r2, [r6, #0]
   15d2a:	2a03      	cmpne	r2, #3
   15d2c:	d005      	beq.n	15d3a <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x61e>
   15d2e:	f640 5102 	movw	r1, #3330	; 0xd02
   15d32:	f04f 002d 	mov.w	r0, #45	; 0x2d
   15d36:	f7fb fe23 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   15d3a:	68e2      	ldr	r2, [r4, #12]
   15d3c:	7833      	ldrb	r3, [r6, #0]
   15d3e:	6952      	ldr	r2, [r2, #20]
   15d40:	f06f 0c07 	mvn.w	ip, #7
   15d44:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
   15d48:	58d2      	ldr	r2, [r2, r3]
   15d4a:	4790      	blx	r2
   15d4c:	4605      	mov	r5, r0
   15d4e:	e000      	b.n	15d52 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x636>
   15d50:	2501      	movs	r5, #1
   15d52:	7bb0      	ldrb	r0, [r6, #14]
   15d54:	b118      	cbz	r0, 15d5e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x642>
   15d56:	f006 faf3 	bl	1c340 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
   15d5a:	f006 f8cb 	bl	1bef4 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
   15d5e:	2d00      	cmp	r5, #0
   15d60:	bf08      	it	eq
   15d62:	e8bd 83f8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   15d66:	6860      	ldr	r0, [r4, #4]
   15d68:	f00b fb9c 	bl	214a4 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>
   15d6c:	b138      	cbz	r0, 15d7e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x662>
   15d6e:	f006 fb29 	bl	1c3c4 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
   15d72:	68e0      	ldr	r0, [r4, #12]
   15d74:	6880      	ldr	r0, [r0, #8]
   15d76:	b001      	add	sp, #4
   15d78:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   15d7c:	4700      	bx	r0
   15d7e:	6860      	ldr	r0, [r4, #4]
   15d80:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   15d84:	f001 bbe6 	b.w	17554 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x117c>
   15d88:	200017a4 	.word	0x200017a4
   15d8c:	2000016c 	.word	0x2000016c
   15d90:	b530      	push	{r4, r5, lr}
   15d92:	b083      	sub	sp, #12
   15d94:	2903      	cmp	r1, #3
   15d96:	d002      	beq.n	15d9e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x682>
   15d98:	2905      	cmp	r1, #5
   15d9a:	d072      	beq.n	15e82 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x766>
   15d9c:	e06d      	b.n	15e7a <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x75e>
   15d9e:	4604      	mov	r4, r0
   15da0:	20ff      	movs	r0, #255	; 0xff
   15da2:	f88d 0008 	strb.w	r0, [sp, #8]
   15da6:	aa02      	add	r2, sp, #8
   15da8:	2103      	movs	r1, #3
   15daa:	4620      	mov	r0, r4
   15dac:	f001 f8f6 	bl	16f9c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xbc4>
   15db0:	2800      	cmp	r0, #0
   15db2:	d062      	beq.n	15e7a <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x75e>
   15db4:	7b20      	ldrb	r0, [r4, #12]
   15db6:	4d37      	ldr	r5, [pc, #220]	; (15e94 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x778>)
   15db8:	2800      	cmp	r0, #0
   15dba:	d03c      	beq.n	15e36 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x71a>
   15dbc:	f894 00d6 	ldrb.w	r0, [r4, #214]	; 0xd6
   15dc0:	f88d 0000 	strb.w	r0, [sp]
   15dc4:	f89d 0000 	ldrb.w	r0, [sp]
   15dc8:	bba8      	cbnz	r0, 15e36 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x71a>
   15dca:	f89d 0008 	ldrb.w	r0, [sp, #8]
   15dce:	7821      	ldrb	r1, [r4, #0]
   15dd0:	f884 10d7 	strb.w	r1, [r4, #215]	; 0xd7
   15dd4:	28ff      	cmp	r0, #255	; 0xff
   15dd6:	d011      	beq.n	15dfc <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x6e0>
   15dd8:	f104 02d9 	add.w	r2, r4, #217	; 0xd9
   15ddc:	1e51      	subs	r1, r2, #1
   15dde:	f7fd fe67 	bl	13ab0 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
   15de2:	b130      	cbz	r0, 15df2 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x6d6>
   15de4:	f894 00d8 	ldrb.w	r0, [r4, #216]	; 0xd8
   15de8:	f040 0102 	orr.w	r1, r0, #2
   15dec:	f884 10d8 	strb.w	r1, [r4, #216]	; 0xd8
   15df0:	e012      	b.n	15e18 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x6fc>
   15df2:	f241 0102 	movw	r1, #4098	; 0x1002
   15df6:	202d      	movs	r0, #45	; 0x2d
   15df8:	f7fb fdc2 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   15dfc:	68a8      	ldr	r0, [r5, #8]
   15dfe:	7801      	ldrb	r1, [r0, #0]
   15e00:	f3c1 1280 	ubfx	r2, r1, #6, #1
   15e04:	f884 20d8 	strb.w	r2, [r4, #216]	; 0xd8
   15e08:	f8d0 2003 	ldr.w	r2, [r0, #3]
   15e0c:	f8c4 20d9 	str.w	r2, [r4, #217]	; 0xd9
   15e10:	f8b0 0007 	ldrh.w	r0, [r0, #7]
   15e14:	f8a4 00dd 	strh.w	r0, [r4, #221]	; 0xdd
   15e18:	f994 0047 	ldrsb.w	r0, [r4, #71]	; 0x47
   15e1c:	287f      	cmp	r0, #127	; 0x7f
   15e1e:	d027      	beq.n	15e70 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x754>
   15e20:	f884 00df 	strb.w	r0, [r4, #223]	; 0xdf
   15e24:	217f      	movs	r1, #127	; 0x7f
   15e26:	f884 1047 	strb.w	r1, [r4, #71]	; 0x47
   15e2a:	221d      	movs	r2, #29
   15e2c:	4621      	mov	r1, r4
   15e2e:	f104 00ce 	add.w	r0, r4, #206	; 0xce
   15e32:	f7fe fb8b 	bl	1454c <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
   15e36:	68a8      	ldr	r0, [r5, #8]
   15e38:	2100      	movs	r1, #0
   15e3a:	8001      	strh	r1, [r0, #0]
   15e3c:	2104      	movs	r1, #4
   15e3e:	f00a fc2c 	bl	2069a <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>
   15e42:	f104 0169 	add.w	r1, r4, #105	; 0x69
   15e46:	68a8      	ldr	r0, [r5, #8]
   15e48:	f00a fc59 	bl	206fe <sym_UDZO6WOEWJ2CNEYVP45GSHBVFT4OP6GEANP3NQY>
   15e4c:	f894 1068 	ldrb.w	r1, [r4, #104]	; 0x68
   15e50:	68a8      	ldr	r0, [r5, #8]
   15e52:	f00a fc5b 	bl	2070c <sym_YBOODJ7VBLXRRILCBQXIORIXU3GHRAYK6WULLQY>
   15e56:	f894 205c 	ldrb.w	r2, [r4, #92]	; 0x5c
   15e5a:	6da1      	ldr	r1, [r4, #88]	; 0x58
   15e5c:	68a8      	ldr	r0, [r5, #8]
   15e5e:	f00a fc5e 	bl	2071e <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI>
   15e62:	490d      	ldr	r1, [pc, #52]	; (15e98 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x77c>)
   15e64:	2005      	movs	r0, #5
   15e66:	7008      	strb	r0, [r1, #0]
   15e68:	68a8      	ldr	r0, [r5, #8]
   15e6a:	f006 ff3d 	bl	1cce8 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
   15e6e:	e00e      	b.n	15e8e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x772>
   15e70:	f640 616b 	movw	r1, #3691	; 0xe6b
   15e74:	202d      	movs	r0, #45	; 0x2d
   15e76:	f7fb fd83 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   15e7a:	b003      	add	sp, #12
   15e7c:	2001      	movs	r0, #1
   15e7e:	bd30      	pop	{r4, r5, pc}
   15e80:	e7ff      	b.n	15e82 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x766>
   15e82:	4906      	ldr	r1, [pc, #24]	; (15e9c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x780>)
   15e84:	6809      	ldr	r1, [r1, #0]
   15e86:	b111      	cbz	r1, 15e8e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x772>
   15e88:	4788      	blx	r1
   15e8a:	2800      	cmp	r0, #0
   15e8c:	d0f5      	beq.n	15e7a <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x75e>
   15e8e:	b003      	add	sp, #12
   15e90:	2000      	movs	r0, #0
   15e92:	bd30      	pop	{r4, r5, pc}
   15e94:	2000016c 	.word	0x2000016c
   15e98:	200017a4 	.word	0x200017a4
   15e9c:	20000180 	.word	0x20000180
   15ea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15ea4:	b08b      	sub	sp, #44	; 0x2c
   15ea6:	2903      	cmp	r1, #3
   15ea8:	d008      	beq.n	15ebc <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x7a0>
   15eaa:	2905      	cmp	r1, #5
   15eac:	f000 80f4 	beq.w	16098 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x97c>
   15eb0:	f001 fb50 	bl	17554 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x117c>
   15eb4:	b00b      	add	sp, #44	; 0x2c
   15eb6:	2000      	movs	r0, #0
   15eb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15ebc:	4604      	mov	r4, r0
   15ebe:	20ff      	movs	r0, #255	; 0xff
   15ec0:	f88d 0010 	strb.w	r0, [sp, #16]
   15ec4:	aa04      	add	r2, sp, #16
   15ec6:	2103      	movs	r1, #3
   15ec8:	4620      	mov	r0, r4
   15eca:	f001 f867 	bl	16f9c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xbc4>
   15ece:	2800      	cmp	r0, #0
   15ed0:	f000 80de 	beq.w	16090 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x974>
   15ed4:	7b20      	ldrb	r0, [r4, #12]
   15ed6:	4e77      	ldr	r6, [pc, #476]	; (160b4 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x998>)
   15ed8:	2800      	cmp	r0, #0
   15eda:	d03c      	beq.n	15f56 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x83a>
   15edc:	f894 00d6 	ldrb.w	r0, [r4, #214]	; 0xd6
   15ee0:	f88d 0000 	strb.w	r0, [sp]
   15ee4:	f89d 0000 	ldrb.w	r0, [sp]
   15ee8:	bba8      	cbnz	r0, 15f56 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x83a>
   15eea:	f89d 0010 	ldrb.w	r0, [sp, #16]
   15eee:	7821      	ldrb	r1, [r4, #0]
   15ef0:	f884 10d7 	strb.w	r1, [r4, #215]	; 0xd7
   15ef4:	28ff      	cmp	r0, #255	; 0xff
   15ef6:	d011      	beq.n	15f1c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x800>
   15ef8:	f104 02d9 	add.w	r2, r4, #217	; 0xd9
   15efc:	1e51      	subs	r1, r2, #1
   15efe:	f7fd fdd7 	bl	13ab0 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
   15f02:	b130      	cbz	r0, 15f12 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x7f6>
   15f04:	f894 00d8 	ldrb.w	r0, [r4, #216]	; 0xd8
   15f08:	f040 0102 	orr.w	r1, r0, #2
   15f0c:	f884 10d8 	strb.w	r1, [r4, #216]	; 0xd8
   15f10:	e012      	b.n	15f38 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x81c>
   15f12:	f241 0102 	movw	r1, #4098	; 0x1002
   15f16:	202d      	movs	r0, #45	; 0x2d
   15f18:	f7fb fd32 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   15f1c:	68b0      	ldr	r0, [r6, #8]
   15f1e:	7801      	ldrb	r1, [r0, #0]
   15f20:	f3c1 1280 	ubfx	r2, r1, #6, #1
   15f24:	f884 20d8 	strb.w	r2, [r4, #216]	; 0xd8
   15f28:	f8d0 2003 	ldr.w	r2, [r0, #3]
   15f2c:	f8c4 20d9 	str.w	r2, [r4, #217]	; 0xd9
   15f30:	f8b0 0007 	ldrh.w	r0, [r0, #7]
   15f34:	f8a4 00dd 	strh.w	r0, [r4, #221]	; 0xdd
   15f38:	f994 0047 	ldrsb.w	r0, [r4, #71]	; 0x47
   15f3c:	287f      	cmp	r0, #127	; 0x7f
   15f3e:	d07d      	beq.n	1603c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x920>
   15f40:	f884 00df 	strb.w	r0, [r4, #223]	; 0xdf
   15f44:	217f      	movs	r1, #127	; 0x7f
   15f46:	f884 1047 	strb.w	r1, [r4, #71]	; 0x47
   15f4a:	221d      	movs	r2, #29
   15f4c:	4621      	mov	r1, r4
   15f4e:	f104 00ce 	add.w	r0, r4, #206	; 0xce
   15f52:	f7fe fafb 	bl	1454c <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
   15f56:	78a0      	ldrb	r0, [r4, #2]
   15f58:	4625      	mov	r5, r4
   15f5a:	f3c0 1a80 	ubfx	sl, r0, #6, #1
   15f5e:	4856      	ldr	r0, [pc, #344]	; (160b8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x99c>)
   15f60:	f1ba 0f00 	cmp.w	sl, #0
   15f64:	6840      	ldr	r0, [r0, #4]
   15f66:	b2c0      	uxtb	r0, r0
   15f68:	bf14      	ite	ne
   15f6a:	f040 0940 	orrne.w	r9, r0, #64	; 0x40
   15f6e:	f020 0940 	biceq.w	r9, r0, #64	; 0x40
   15f72:	2100      	movs	r1, #0
   15f74:	68b0      	ldr	r0, [r6, #8]
   15f76:	8001      	strh	r1, [r0, #0]
   15f78:	2107      	movs	r1, #7
   15f7a:	f00a fb8e 	bl	2069a <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>
   15f7e:	2100      	movs	r1, #0
   15f80:	68b0      	ldr	r0, [r6, #8]
   15f82:	f00a fa4e 	bl	20422 <sym_IUN5SW63ODKDFPSGCV4FO7HO5IPKZTFTURF2JKI>
   15f86:	2200      	movs	r2, #0
   15f88:	4649      	mov	r1, r9
   15f8a:	68b0      	ldr	r0, [r6, #8]
   15f8c:	f00a fa52 	bl	20434 <sym_WLQ6YP4CLBLEMT6X4SKN2P2RM7K53RQFGIL5RPY>
   15f90:	2306      	movs	r3, #6
   15f92:	2200      	movs	r2, #0
   15f94:	f105 0169 	add.w	r1, r5, #105	; 0x69
   15f98:	68b0      	ldr	r0, [r6, #8]
   15f9a:	f00a fae9 	bl	20570 <sym_DEQ52UXGGOG3CBHCSM5ZCBFPFTNN2OZ3BBWERRI>
   15f9e:	f895 1068 	ldrb.w	r1, [r5, #104]	; 0x68
   15fa2:	68b0      	ldr	r0, [r6, #8]
   15fa4:	f00a fbb2 	bl	2070c <sym_YBOODJ7VBLXRRILCBQXIORIXU3GHRAYK6WULLQY>
   15fa8:	68b0      	ldr	r0, [r6, #8]
   15faa:	f00a fa83 	bl	204b4 <sym_PBUYHYNPX6UVR3SOSML43PVJV4TB32DZKPBWZSI>
   15fae:	f8b5 105c 	ldrh.w	r1, [r5, #92]	; 0x5c
   15fb2:	f1c0 00fe 	rsb	r0, r0, #254	; 0xfe
   15fb6:	4281      	cmp	r1, r0
   15fb8:	bfb8      	it	lt
   15fba:	4608      	movlt	r0, r1
   15fbc:	b2c7      	uxtb	r7, r0
   15fbe:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 160bc <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x9a0>
   15fc2:	42b9      	cmp	r1, r7
   15fc4:	d939      	bls.n	1603a <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x91e>
   15fc6:	1ef8      	subs	r0, r7, #3
   15fc8:	b2c7      	uxtb	r7, r0
   15fca:	f049 0b10 	orr.w	fp, r9, #16
   15fce:	2200      	movs	r2, #0
   15fd0:	4659      	mov	r1, fp
   15fd2:	68b0      	ldr	r0, [r6, #8]
   15fd4:	f00a fa2e 	bl	20434 <sym_WLQ6YP4CLBLEMT6X4SKN2P2RM7K53RQFGIL5RPY>
   15fd8:	68b0      	ldr	r0, [r6, #8]
   15fda:	f00a fac5 	bl	20568 <sym_APJRNOYIPVVMXANZL7N72BAJ3R7XI267X7HUSZY>
   15fde:	4438      	add	r0, r7
   15fe0:	1c40      	adds	r0, r0, #1
   15fe2:	f000 09ff 	and.w	r9, r0, #255	; 0xff
   15fe6:	f8b5 0048 	ldrh.w	r0, [r5, #72]	; 0x48
   15fea:	f8d8 1008 	ldr.w	r1, [r8, #8]
   15fee:	1840      	adds	r0, r0, r1
   15ff0:	f8d5 1140 	ldr.w	r1, [r5, #320]	; 0x140
   15ff4:	1840      	adds	r0, r0, r1
   15ff6:	b282      	uxth	r2, r0
   15ff8:	f105 0169 	add.w	r1, r5, #105	; 0x69
   15ffc:	f105 0036 	add.w	r0, r5, #54	; 0x36
   16000:	f7fe f90c 	bl	1421c <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ>
   16004:	f885 0044 	strb.w	r0, [r5, #68]	; 0x44
   16008:	7969      	ldrb	r1, [r5, #5]
   1600a:	464b      	mov	r3, r9
   1600c:	2201      	movs	r2, #1
   1600e:	4628      	mov	r0, r5
   16010:	f001 f84c 	bl	170ac <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xcd4>
   16014:	9001      	str	r0, [sp, #4]
   16016:	f8bd 0004 	ldrh.w	r0, [sp, #4]
   1601a:	f89d 1006 	ldrb.w	r1, [sp, #6]
   1601e:	2303      	movs	r3, #3
   16020:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
   16024:	9008      	str	r0, [sp, #32]
   16026:	2204      	movs	r2, #4
   16028:	a908      	add	r1, sp, #32
   1602a:	68b0      	ldr	r0, [r6, #8]
   1602c:	f00a faa0 	bl	20570 <sym_DEQ52UXGGOG3CBHCSM5ZCBFPFTNN2OZ3BBWERRI>
   16030:	2200      	movs	r2, #0
   16032:	4659      	mov	r1, fp
   16034:	68b0      	ldr	r0, [r6, #8]
   16036:	f00a f9fd 	bl	20434 <sym_WLQ6YP4CLBLEMT6X4SKN2P2RM7K53RQFGIL5RPY>
   1603a:	e000      	b.n	1603e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x922>
   1603c:	e023      	b.n	16086 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x96a>
   1603e:	f1ba 0f00 	cmp.w	sl, #0
   16042:	d00e      	beq.n	16062 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x946>
   16044:	f995 2010 	ldrsb.w	r2, [r5, #16]
   16048:	f895 1044 	ldrb.w	r1, [r5, #68]	; 0x44
   1604c:	7968      	ldrb	r0, [r5, #5]
   1604e:	f00d fa7a 	bl	23546 <sym_WCPWOVVEASSG4MEQ4OYZCASM4KFKZK6VT6CIMIA>
   16052:	f88d 0004 	strb.w	r0, [sp, #4]
   16056:	2301      	movs	r3, #1
   16058:	2206      	movs	r2, #6
   1605a:	a901      	add	r1, sp, #4
   1605c:	68b0      	ldr	r0, [r6, #8]
   1605e:	f00a fa87 	bl	20570 <sym_DEQ52UXGGOG3CBHCSM5ZCBFPFTNN2OZ3BBWERRI>
   16062:	463a      	mov	r2, r7
   16064:	6da9      	ldr	r1, [r5, #88]	; 0x58
   16066:	68b0      	ldr	r0, [r6, #8]
   16068:	f00a f9c4 	bl	203f4 <sym_CFSAKL745S6L7NUIQWHEM5VF373WPPG5ELNMOCA>
   1606c:	f8a8 700c 	strh.w	r7, [r8, #12]
   16070:	7961      	ldrb	r1, [r4, #5]
   16072:	20ff      	movs	r0, #255	; 0xff
   16074:	f007 f884 	bl	1d180 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ>
   16078:	2008      	movs	r0, #8
   1607a:	f888 0000 	strb.w	r0, [r8]
   1607e:	68b0      	ldr	r0, [r6, #8]
   16080:	f006 fe32 	bl	1cce8 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
   16084:	e012      	b.n	160ac <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x990>
   16086:	f640 616b 	movw	r1, #3691	; 0xe6b
   1608a:	202d      	movs	r0, #45	; 0x2d
   1608c:	f7fb fc78 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   16090:	4620      	mov	r0, r4
   16092:	f001 fa5f 	bl	17554 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x117c>
   16096:	e009      	b.n	160ac <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x990>
   16098:	4909      	ldr	r1, [pc, #36]	; (160c0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x9a4>)
   1609a:	6809      	ldr	r1, [r1, #0]
   1609c:	b131      	cbz	r1, 160ac <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x990>
   1609e:	4788      	blx	r1
   160a0:	2800      	cmp	r0, #0
   160a2:	bf02      	ittt	eq
   160a4:	2001      	moveq	r0, #1
   160a6:	b00b      	addeq	sp, #44	; 0x2c
   160a8:	e8bd 8ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   160ac:	2000      	movs	r0, #0
   160ae:	b00b      	add	sp, #44	; 0x2c
   160b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   160b4:	2000016c 	.word	0x2000016c
   160b8:	00017b70 	.word	0x00017b70
   160bc:	200017a4 	.word	0x200017a4
   160c0:	2000017c 	.word	0x2000017c
   160c4:	4a09      	ldr	r2, [pc, #36]	; (160ec <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x9d0>)
   160c6:	0003      	movs	r3, r0
   160c8:	6850      	ldr	r0, [r2, #4]
   160ca:	d001      	beq.n	160d0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x9b4>
   160cc:	f001 ba42 	b.w	17554 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x117c>
   160d0:	2900      	cmp	r1, #0
   160d2:	bf08      	it	eq
   160d4:	4770      	bxeq	lr
   160d6:	68d1      	ldr	r1, [r2, #12]
   160d8:	4a05      	ldr	r2, [pc, #20]	; (160f0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x9d4>)
   160da:	6909      	ldr	r1, [r1, #16]
   160dc:	7812      	ldrb	r2, [r2, #0]
   160de:	f06f 030f 	mvn.w	r3, #15
   160e2:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   160e6:	5889      	ldr	r1, [r1, r2]
   160e8:	4708      	bx	r1
   160ea:	0000      	.short	0x0000
   160ec:	2000016c 	.word	0x2000016c
   160f0:	200017a4 	.word	0x200017a4
   160f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   160f8:	4604      	mov	r4, r0
   160fa:	4601      	mov	r1, r0
   160fc:	2210      	movs	r2, #16
   160fe:	3086      	adds	r0, #134	; 0x86
   16100:	f7fe fa24 	bl	1454c <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
   16104:	2205      	movs	r2, #5
   16106:	4621      	mov	r1, r4
   16108:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   1610c:	f7fe fa1e 	bl	1454c <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
   16110:	f8b4 5092 	ldrh.w	r5, [r4, #146]	; 0x92
   16114:	f894 7090 	ldrb.w	r7, [r4, #144]	; 0x90
   16118:	f005 fdd4 	bl	1bcc4 <sym_ZT5CPONXDAFRAB5RWMA6LXPAT5TEFYV2YKU6P6A>
   1611c:	2600      	movs	r6, #0
   1611e:	b9a8      	cbnz	r0, 1614c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xa30>
   16120:	7821      	ldrb	r1, [r4, #0]
   16122:	f884 10bb 	strb.w	r1, [r4, #187]	; 0xbb
   16126:	f8a4 50bc 	strh.w	r5, [r4, #188]	; 0xbc
   1612a:	f884 70ba 	strb.w	r7, [r4, #186]	; 0xba
   1612e:	7b60      	ldrb	r0, [r4, #13]
   16130:	2800      	cmp	r0, #0
   16132:	bf1a      	itte	ne
   16134:	f894 0048 	ldrbne.w	r0, [r4, #72]	; 0x48
   16138:	f884 00be 	strbne.w	r0, [r4, #190]	; 0xbe
   1613c:	f884 60be 	strbeq.w	r6, [r4, #190]	; 0xbe
   16140:	2214      	movs	r2, #20
   16142:	4621      	mov	r1, r4
   16144:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
   16148:	f7fe fa00 	bl	1454c <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
   1614c:	4804      	ldr	r0, [pc, #16]	; (16160 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xa44>)
   1614e:	7006      	strb	r6, [r0, #0]
   16150:	4621      	mov	r1, r4
   16152:	6a20      	ldr	r0, [r4, #32]
   16154:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   16158:	2202      	movs	r2, #2
   1615a:	f002 b847 	b.w	181ec <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ>
   1615e:	0000      	.short	0x0000
   16160:	200017a4 	.word	0x200017a4
   16164:	b570      	push	{r4, r5, r6, lr}
   16166:	4d1c      	ldr	r5, [pc, #112]	; (161d8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xabc>)
   16168:	2101      	movs	r1, #1
   1616a:	4604      	mov	r4, r0
   1616c:	70a9      	strb	r1, [r5, #2]
   1616e:	3030      	adds	r0, #48	; 0x30
   16170:	f00b f937 	bl	213e2 <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
   16174:	b128      	cbz	r0, 16182 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xa66>
   16176:	4620      	mov	r0, r4
   16178:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1617c:	2101      	movs	r1, #1
   1617e:	f7ff badd 	b.w	1573c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x20>
   16182:	8860      	ldrh	r0, [r4, #2]
   16184:	f3c0 1100 	ubfx	r1, r0, #4, #1
   16188:	bb09      	cbnz	r1, 161ce <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xab2>
   1618a:	78a9      	ldrb	r1, [r5, #2]
   1618c:	b1f9      	cbz	r1, 161ce <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xab2>
   1618e:	f8b4 1054 	ldrh.w	r1, [r4, #84]	; 0x54
   16192:	2900      	cmp	r1, #0
   16194:	bf08      	it	eq
   16196:	f010 0f01 	tsteq.w	r0, #1
   1619a:	d112      	bne.n	161c2 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xaa6>
   1619c:	f010 0f02 	tst.w	r0, #2
   161a0:	bf08      	it	eq
   161a2:	f010 0f20 	tsteq.w	r0, #32
   161a6:	d10c      	bne.n	161c2 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xaa6>
   161a8:	6968      	ldr	r0, [r5, #20]
   161aa:	b120      	cbz	r0, 161b6 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xa9a>
   161ac:	f100 0040 	add.w	r0, r0, #64	; 0x40
   161b0:	f00d f968 	bl	23484 <sym_LNQ5OSSHLT2KR4OBXPN76EEGODICLRS65ENGIUY>
   161b4:	b928      	cbnz	r0, 161c2 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xaa6>
   161b6:	69a8      	ldr	r0, [r5, #24]
   161b8:	b148      	cbz	r0, 161ce <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xab2>
   161ba:	3040      	adds	r0, #64	; 0x40
   161bc:	f00d f962 	bl	23484 <sym_LNQ5OSSHLT2KR4OBXPN76EEGODICLRS65ENGIUY>
   161c0:	b128      	cbz	r0, 161ce <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xab2>
   161c2:	4620      	mov	r0, r4
   161c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   161c8:	2100      	movs	r1, #0
   161ca:	f7ff bc23 	b.w	15a14 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2f8>
   161ce:	4620      	mov	r0, r4
   161d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   161d4:	f001 b9be 	b.w	17554 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x117c>
   161d8:	200017a4 	.word	0x200017a4
   161dc:	b570      	push	{r4, r5, r6, lr}
   161de:	4604      	mov	r4, r0
   161e0:	8840      	ldrh	r0, [r0, #2]
   161e2:	2810      	cmp	r0, #16
   161e4:	d010      	beq.n	16208 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xaec>
   161e6:	4d11      	ldr	r5, [pc, #68]	; (1622c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xb10>)
   161e8:	7ba8      	ldrb	r0, [r5, #14]
   161ea:	b120      	cbz	r0, 161f6 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xada>
   161ec:	f005 feac 	bl	1bf48 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>
   161f0:	2040      	movs	r0, #64	; 0x40
   161f2:	f006 f8b3 	bl	1c35c <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>
   161f6:	480e      	ldr	r0, [pc, #56]	; (16230 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xb14>)
   161f8:	6880      	ldr	r0, [r0, #8]
   161fa:	f006 fd75 	bl	1cce8 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
   161fe:	78a0      	ldrb	r0, [r4, #2]
   16200:	f010 0f04 	tst.w	r0, #4
   16204:	d10b      	bne.n	1621e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xb02>
   16206:	e005      	b.n	16214 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xaf8>
   16208:	4620      	mov	r0, r4
   1620a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1620e:	2101      	movs	r1, #1
   16210:	f7ff bb18 	b.w	15844 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x128>
   16214:	2100      	movs	r1, #0
   16216:	7922      	ldrb	r2, [r4, #4]
   16218:	4608      	mov	r0, r1
   1621a:	f006 ff25 	bl	1d068 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
   1621e:	2000      	movs	r0, #0
   16220:	f006 fbc6 	bl	1c9b0 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
   16224:	2002      	movs	r0, #2
   16226:	7028      	strb	r0, [r5, #0]
   16228:	bd70      	pop	{r4, r5, r6, pc}
   1622a:	0000      	.short	0x0000
   1622c:	200017a4 	.word	0x200017a4
   16230:	2000016c 	.word	0x2000016c
   16234:	b510      	push	{r4, lr}
   16236:	4c08      	ldr	r4, [pc, #32]	; (16258 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xb3c>)
   16238:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
   1623c:	89a1      	ldrh	r1, [r4, #12]
   1623e:	4291      	cmp	r1, r2
   16240:	d005      	beq.n	1624e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xb32>
   16242:	2101      	movs	r1, #1
   16244:	f7ff fbe6 	bl	15a14 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2f8>
   16248:	2008      	movs	r0, #8
   1624a:	7020      	strb	r0, [r4, #0]
   1624c:	bd10      	pop	{r4, pc}
   1624e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   16252:	f001 b97f 	b.w	17554 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x117c>
   16256:	0000      	.short	0x0000
   16258:	200017a4 	.word	0x200017a4
   1625c:	b570      	push	{r4, r5, r6, lr}
   1625e:	4604      	mov	r4, r0
   16260:	8840      	ldrh	r0, [r0, #2]
   16262:	4d21      	ldr	r5, [pc, #132]	; (162e8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xbcc>)
   16264:	f3c0 0140 	ubfx	r1, r0, #1, #1
   16268:	2900      	cmp	r1, #0
   1626a:	bf08      	it	eq
   1626c:	f010 0f01 	tsteq.w	r0, #1
   16270:	d02a      	beq.n	162c8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xbac>
   16272:	f04f 0100 	mov.w	r1, #0
   16276:	7962      	ldrb	r2, [r4, #5]
   16278:	4608      	mov	r0, r1
   1627a:	f006 fef5 	bl	1d068 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
   1627e:	78a0      	ldrb	r0, [r4, #2]
   16280:	f3c0 0040 	ubfx	r0, r0, #1, #1
   16284:	2800      	cmp	r0, #0
   16286:	bf14      	ite	ne
   16288:	200c      	movne	r0, #12
   1628a:	2022      	moveq	r0, #34	; 0x22
   1628c:	7961      	ldrb	r1, [r4, #5]
   1628e:	f006 ff77 	bl	1d180 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ>
   16292:	2003      	movs	r0, #3
   16294:	7028      	strb	r0, [r5, #0]
   16296:	7ba8      	ldrb	r0, [r5, #14]
   16298:	b148      	cbz	r0, 162ae <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xb92>
   1629a:	f005 fe55 	bl	1bf48 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>
   1629e:	7960      	ldrb	r0, [r4, #5]
   162a0:	f010 0f0c 	tst.w	r0, #12
   162a4:	bf0c      	ite	eq
   162a6:	2040      	moveq	r0, #64	; 0x40
   162a8:	2045      	movne	r0, #69	; 0x45
   162aa:	f006 f857 	bl	1c35c <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>
   162ae:	7960      	ldrb	r0, [r4, #5]
   162b0:	f010 000c 	ands.w	r0, r0, #12
   162b4:	bf18      	it	ne
   162b6:	2028      	movne	r0, #40	; 0x28
   162b8:	f006 fb7a 	bl	1c9b0 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
   162bc:	480b      	ldr	r0, [pc, #44]	; (162ec <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xbd0>)
   162be:	6880      	ldr	r0, [r0, #8]
   162c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   162c4:	f006 bd10 	b.w	1cce8 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
   162c8:	89a8      	ldrh	r0, [r5, #12]
   162ca:	f8b4 1054 	ldrh.w	r1, [r4, #84]	; 0x54
   162ce:	4288      	cmp	r0, r1
   162d0:	d104      	bne.n	162dc <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xbc0>
   162d2:	4620      	mov	r0, r4
   162d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   162d8:	f001 b93c 	b.w	17554 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x117c>
   162dc:	4620      	mov	r0, r4
   162de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   162e2:	2101      	movs	r1, #1
   162e4:	f7ff bb96 	b.w	15a14 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2f8>
   162e8:	200017a4 	.word	0x200017a4
   162ec:	2000016c 	.word	0x2000016c
   162f0:	b570      	push	{r4, r5, r6, lr}
   162f2:	4c1f      	ldr	r4, [pc, #124]	; (16370 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xc54>)
   162f4:	6865      	ldr	r5, [r4, #4]
   162f6:	7b28      	ldrb	r0, [r5, #12]
   162f8:	b140      	cbz	r0, 1630c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xbf0>
   162fa:	f105 0047 	add.w	r0, r5, #71	; 0x47
   162fe:	f006 ff25 	bl	1d14c <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
   16302:	2800      	cmp	r0, #0
   16304:	bf04      	itt	eq
   16306:	207f      	moveq	r0, #127	; 0x7f
   16308:	f885 0047 	strbeq.w	r0, [r5, #71]	; 0x47
   1630c:	4d19      	ldr	r5, [pc, #100]	; (16374 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xc58>)
   1630e:	7ba8      	ldrb	r0, [r5, #14]
   16310:	b118      	cbz	r0, 1631a <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xbfe>
   16312:	f006 f815 	bl	1c340 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
   16316:	f005 fded 	bl	1bef4 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
   1631a:	6860      	ldr	r0, [r4, #4]
   1631c:	f00b f8c2 	bl	214a4 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>
   16320:	b1a8      	cbz	r0, 1634e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xc32>
   16322:	6860      	ldr	r0, [r4, #4]
   16324:	8841      	ldrh	r1, [r0, #2]
   16326:	f3c1 1200 	ubfx	r2, r1, #4, #1
   1632a:	2a00      	cmp	r2, #0
   1632c:	bf04      	itt	eq
   1632e:	f3c1 01c0 	ubfxeq	r1, r1, #3, #1
   16332:	2900      	cmpeq	r1, #0
   16334:	d00b      	beq.n	1634e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xc32>
   16336:	7829      	ldrb	r1, [r5, #0]
   16338:	2902      	cmp	r1, #2
   1633a:	bf1c      	itt	ne
   1633c:	7829      	ldrbne	r1, [r5, #0]
   1633e:	2903      	cmpne	r1, #3
   16340:	d00a      	beq.n	16358 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xc3c>
   16342:	f640 4137 	movw	r1, #3127	; 0xc37
   16346:	f04f 002d 	mov.w	r0, #45	; 0x2d
   1634a:	f7fb fb19 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1634e:	6860      	ldr	r0, [r4, #4]
   16350:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   16354:	f001 b8fe 	b.w	17554 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x117c>
   16358:	68e1      	ldr	r1, [r4, #12]
   1635a:	782a      	ldrb	r2, [r5, #0]
   1635c:	68c9      	ldr	r1, [r1, #12]
   1635e:	f06f 0307 	mvn.w	r3, #7
   16362:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   16366:	5889      	ldr	r1, [r1, r2]
   16368:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1636c:	4708      	bx	r1
   1636e:	0000      	.short	0x0000
   16370:	2000016c 	.word	0x2000016c
   16374:	200017a4 	.word	0x200017a4
   16378:	b570      	push	{r4, r5, r6, lr}
   1637a:	4604      	mov	r4, r0
   1637c:	8841      	ldrh	r1, [r0, #2]
   1637e:	2000      	movs	r0, #0
   16380:	2909      	cmp	r1, #9
   16382:	bf18      	it	ne
   16384:	bd70      	popne	{r4, r5, r6, pc}
   16386:	4d13      	ldr	r5, [pc, #76]	; (163d4 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xcb8>)
   16388:	81a8      	strh	r0, [r5, #12]
   1638a:	7068      	strb	r0, [r5, #1]
   1638c:	2101      	movs	r1, #1
   1638e:	4620      	mov	r0, r4
   16390:	f7fe ffb6 	bl	15300 <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>
   16394:	6869      	ldr	r1, [r5, #4]
   16396:	4408      	add	r0, r1
   16398:	6068      	str	r0, [r5, #4]
   1639a:	f8b4 0048 	ldrh.w	r0, [r4, #72]	; 0x48
   1639e:	1c40      	adds	r0, r0, #1
   163a0:	f8a4 0048 	strh.w	r0, [r4, #72]	; 0x48
   163a4:	f7fe fdb0 	bl	14f08 <sym_K5GMJMBHBYPRCUIWKNEXGPSNQEZKEMBAP4JWHBQ>
   163a8:	f44f 717f 	mov.w	r1, #1020	; 0x3fc
   163ac:	fbb0 f2f1 	udiv	r2, r0, r1
   163b0:	fb01 0012 	mls	r0, r1, r2, r0
   163b4:	6869      	ldr	r1, [r5, #4]
   163b6:	2200      	movs	r2, #0
   163b8:	4408      	add	r0, r1
   163ba:	6068      	str	r0, [r5, #4]
   163bc:	f894 1076 	ldrb.w	r1, [r4, #118]	; 0x76
   163c0:	4620      	mov	r0, r4
   163c2:	f000 fa79 	bl	168b8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4e0>
   163c6:	4620      	mov	r0, r4
   163c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   163cc:	2101      	movs	r1, #1
   163ce:	f7ff b9b5 	b.w	1573c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x20>
   163d2:	0000      	.short	0x0000
   163d4:	200017a4 	.word	0x200017a4

000163d8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ>:
   163d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   163dc:	4dab      	ldr	r5, [pc, #684]	; (1668c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2b4>)
   163de:	4604      	mov	r4, r0
   163e0:	b089      	sub	sp, #36	; 0x24
   163e2:	7828      	ldrb	r0, [r5, #0]
   163e4:	2800      	cmp	r0, #0
   163e6:	d17d      	bne.n	164e4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x10c>
   163e8:	7820      	ldrb	r0, [r4, #0]
   163ea:	28ff      	cmp	r0, #255	; 0xff
   163ec:	d07a      	beq.n	164e4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x10c>
   163ee:	2000      	movs	r0, #0
   163f0:	81a8      	strh	r0, [r5, #12]
   163f2:	6068      	str	r0, [r5, #4]
   163f4:	7068      	strb	r0, [r5, #1]
   163f6:	70a8      	strb	r0, [r5, #2]
   163f8:	f884 0081 	strb.w	r0, [r4, #129]	; 0x81
   163fc:	48a4      	ldr	r0, [pc, #656]	; (16690 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2b8>)
   163fe:	ae04      	add	r6, sp, #16
   16400:	4fa4      	ldr	r7, [pc, #656]	; (16694 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2bc>)
   16402:	c80f      	ldmia	r0, {r0, r1, r2, r3}
   16404:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
   16408:	68f8      	ldr	r0, [r7, #12]
   1640a:	6840      	ldr	r0, [r0, #4]
   1640c:	9007      	str	r0, [sp, #28]
   1640e:	a804      	add	r0, sp, #16
   16410:	f006 fa82 	bl	1c918 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
   16414:	f006 fbc0 	bl	1cb98 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
   16418:	f007 fa68 	bl	1d8ec <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY>
   1641c:	f005 ff90 	bl	1c340 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
   16420:	f005 fd68 	bl	1bef4 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
   16424:	489c      	ldr	r0, [pc, #624]	; (16698 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2c0>)
   16426:	f006 fe9b 	bl	1d160 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
   1642a:	489c      	ldr	r0, [pc, #624]	; (1669c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2c4>)
   1642c:	f006 fea2 	bl	1d174 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
   16430:	2000      	movs	r0, #0
   16432:	f7fb f835 	bl	114a0 <sym_GNQQQFEWM5SWEGVB5JHP7HYAZGI4CDQXSGHR4SQ>
   16436:	f104 0030 	add.w	r0, r4, #48	; 0x30
   1643a:	f00a fffd 	bl	21438 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>
   1643e:	f104 0030 	add.w	r0, r4, #48	; 0x30
   16442:	f00a ff89 	bl	21358 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>
   16446:	f006 fecf 	bl	1d1e8 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
   1644a:	7921      	ldrb	r1, [r4, #4]
   1644c:	2025      	movs	r0, #37	; 0x25
   1644e:	f006 fe97 	bl	1d180 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ>
   16452:	f994 0010 	ldrsb.w	r0, [r4, #16]
   16456:	f006 fc3b 	bl	1ccd0 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
   1645a:	7921      	ldrb	r1, [r4, #4]
   1645c:	2000      	movs	r0, #0
   1645e:	f006 f91b 	bl	1c698 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
   16462:	2601      	movs	r6, #1
   16464:	60a8      	str	r0, [r5, #8]
   16466:	2800      	cmp	r0, #0
   16468:	bf01      	itttt	eq
   1646a:	702e      	strbeq	r6, [r5, #0]
   1646c:	2000      	moveq	r0, #0
   1646e:	b009      	addeq	sp, #36	; 0x24
   16470:	e8bd 8ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16474:	f104 0150 	add.w	r1, r4, #80	; 0x50
   16478:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
   1647a:	f009 fcb7 	bl	1fdec <sym_VPXIA5P4C72CY3ME4ZVXBADOKEG5S4C7Z7QZZFA>
   1647e:	4681      	mov	r9, r0
   16480:	f104 0158 	add.w	r1, r4, #88	; 0x58
   16484:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
   16486:	f009 fcb4 	bl	1fdf2 <sym_MF4WRTQNYFRYRFGW7FZUI3ZAYNQZ5EQ54QSK6JQ>
   1648a:	4680      	mov	r8, r0
   1648c:	f1b9 0f00 	cmp.w	r9, #0
   16490:	bf1c      	itt	ne
   16492:	f894 0024 	ldrbne.w	r0, [r4, #36]	; 0x24
   16496:	2800      	cmpne	r0, #0
   16498:	d04f      	beq.n	1653a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x162>
   1649a:	bf00      	nop
   1649c:	f04f 0a01 	mov.w	sl, #1
   164a0:	7f20      	ldrb	r0, [r4, #28]
   164a2:	2800      	cmp	r0, #0
   164a4:	bf01      	itttt	eq
   164a6:	7ea0      	ldrbeq	r0, [r4, #26]
   164a8:	2800      	cmpeq	r0, #0
   164aa:	78a0      	ldrbeq	r0, [r4, #2]
   164ac:	f010 0f04 	tsteq.w	r0, #4
   164b0:	d074      	beq.n	1659c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1c4>
   164b2:	e9d4 0118 	ldrd	r0, r1, [r4, #96]	; 0x60
   164b6:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   164ba:	ea81 0102 	eor.w	r1, r1, r2
   164be:	ea71 0000 	orns	r0, r1, r0
   164c2:	d008      	beq.n	164d6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xfe>
   164c4:	f7f9 fd02 	bl	fecc <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
   164c8:	4602      	mov	r2, r0
   164ca:	e9d4 3018 	ldrd	r3, r0, [r4, #96]	; 0x60
   164ce:	1ad2      	subs	r2, r2, r3
   164d0:	eb71 0000 	sbcs.w	r0, r1, r0
   164d4:	d202      	bcs.n	164dc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x104>
   164d6:	f1ba 0f00 	cmp.w	sl, #0
   164da:	d079      	beq.n	165d0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1f8>
   164dc:	f7fd fb32 	bl	13b44 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>
   164e0:	496f      	ldr	r1, [pc, #444]	; (166a0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2c8>)
   164e2:	e000      	b.n	164e6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x10e>
   164e4:	e025      	b.n	16532 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x15a>
   164e6:	fba0 ba01 	umull	fp, sl, r0, r1
   164ea:	f7f9 fcef 	bl	fecc <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
   164ee:	eb10 000b 	adds.w	r0, r0, fp
   164f2:	eb41 010a 	adc.w	r1, r1, sl
   164f6:	e9c4 0118 	strd	r0, r1, [r4, #96]	; 0x60
   164fa:	f04f 0b01 	mov.w	fp, #1
   164fe:	7ee0      	ldrb	r0, [r4, #27]
   16500:	f7fd fa96 	bl	13a30 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>
   16504:	4682      	mov	sl, r0
   16506:	7ea0      	ldrb	r0, [r4, #26]
   16508:	2800      	cmp	r0, #0
   1650a:	bf18      	it	ne
   1650c:	f1ba 0f00 	cmpne.w	sl, #0
   16510:	d003      	beq.n	1651a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x142>
   16512:	7ee0      	ldrb	r0, [r4, #27]
   16514:	f7fd fa80 	bl	13a18 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>
   16518:	b1c8      	cbz	r0, 1654e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x176>
   1651a:	f894 0082 	ldrb.w	r0, [r4, #130]	; 0x82
   1651e:	2800      	cmp	r0, #0
   16520:	bf1c      	itt	ne
   16522:	7f20      	ldrbne	r0, [r4, #28]
   16524:	2800      	cmpne	r0, #0
   16526:	d02b      	beq.n	16580 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1a8>
   16528:	f894 0068 	ldrb.w	r0, [r4, #104]	; 0x68
   1652c:	2801      	cmp	r0, #1
   1652e:	d01c      	beq.n	1656a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x192>
   16530:	e021      	b.n	16576 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x19e>
   16532:	b009      	add	sp, #36	; 0x24
   16534:	200c      	movs	r0, #12
   16536:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1653a:	f1b8 0f00 	cmp.w	r8, #0
   1653e:	bf1a      	itte	ne
   16540:	f894 0025 	ldrbne.w	r0, [r4, #37]	; 0x25
   16544:	2800      	cmpne	r0, #0
   16546:	f04f 0a00 	moveq.w	sl, #0
   1654a:	d1a7      	bne.n	1649c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xc4>
   1654c:	e7a8      	b.n	164a0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xc8>
   1654e:	4632      	mov	r2, r6
   16550:	f884 6068 	strb.w	r6, [r4, #104]	; 0x68
   16554:	f104 0169 	add.w	r1, r4, #105	; 0x69
   16558:	4650      	mov	r0, sl
   1655a:	f009 fd05 	bl	1ff68 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
   1655e:	7ee1      	ldrb	r1, [r4, #27]
   16560:	f104 0069 	add.w	r0, r4, #105	; 0x69
   16564:	f7fd fa70 	bl	13a48 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>
   16568:	e00a      	b.n	16580 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1a8>
   1656a:	f894 006e 	ldrb.w	r0, [r4, #110]	; 0x6e
   1656e:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   16572:	2840      	cmp	r0, #64	; 0x40
   16574:	d013      	beq.n	1659e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1c6>
   16576:	4659      	mov	r1, fp
   16578:	f104 0069 	add.w	r0, r4, #105	; 0x69
   1657c:	f009 fce3 	bl	1ff46 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>
   16580:	78a0      	ldrb	r0, [r4, #2]
   16582:	f010 0f04 	tst.w	r0, #4
   16586:	d023      	beq.n	165d0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1f8>
   16588:	7ee0      	ldrb	r0, [r4, #27]
   1658a:	f7fd fa6b 	bl	13a64 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
   1658e:	ea5f 0a00 	movs.w	sl, r0
   16592:	d01d      	beq.n	165d0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1f8>
   16594:	2110      	movs	r1, #16
   16596:	f7fd fdfb 	bl	14190 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
   1659a:	b140      	cbz	r0, 165ae <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1d6>
   1659c:	e018      	b.n	165d0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1f8>
   1659e:	f7fd fa37 	bl	13a10 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>
   165a2:	4632      	mov	r2, r6
   165a4:	f104 0169 	add.w	r1, r4, #105	; 0x69
   165a8:	f009 fcde 	bl	1ff68 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
   165ac:	e7e8      	b.n	16580 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1a8>
   165ae:	4632      	mov	r2, r6
   165b0:	f884 6076 	strb.w	r6, [r4, #118]	; 0x76
   165b4:	f104 0177 	add.w	r1, r4, #119	; 0x77
   165b8:	4650      	mov	r0, sl
   165ba:	f009 fcd5 	bl	1ff68 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
   165be:	f104 0177 	add.w	r1, r4, #119	; 0x77
   165c2:	68b8      	ldr	r0, [r7, #8]
   165c4:	f00a f88b 	bl	206de <sym_M7NFHAM4FWTXSZMPV3DTHM2V6JD26AKK4R2A6YI>
   165c8:	2101      	movs	r1, #1
   165ca:	68b8      	ldr	r0, [r7, #8]
   165cc:	f00a f88e 	bl	206ec <sym_NAGMMCXDNSRJLJ55T6DS4CG2FNZEN6Y562ZTFRY>
   165d0:	f894 1084 	ldrb.w	r1, [r4, #132]	; 0x84
   165d4:	ea49 0008 	orr.w	r0, r9, r8
   165d8:	f88d 1000 	strb.w	r1, [sp]
   165dc:	f89d 1000 	ldrb.w	r1, [sp]
   165e0:	2900      	cmp	r1, #0
   165e2:	bf18      	it	ne
   165e4:	2101      	movne	r1, #1
   165e6:	4308      	orrs	r0, r1
   165e8:	d019      	beq.n	1661e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x246>
   165ea:	78a0      	ldrb	r0, [r4, #2]
   165ec:	f3c0 1000 	ubfx	r0, r0, #4, #1
   165f0:	2800      	cmp	r0, #0
   165f2:	bf04      	itt	eq
   165f4:	f8b4 0045 	ldrheq.w	r0, [r4, #69]	; 0x45
   165f8:	f3c0 060b 	ubfxeq	r6, r0, #0, #12
   165fc:	d10f      	bne.n	1661e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x246>
   165fe:	bf00      	nop
   16600:	f7fe fc82 	bl	14f08 <sym_K5GMJMBHBYPRCUIWKNEXGPSNQEZKEMBAP4JWHBQ>
   16604:	f3c0 000b 	ubfx	r0, r0, #0, #12
   16608:	42b0      	cmp	r0, r6
   1660a:	d0f9      	beq.n	16600 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x228>
   1660c:	f8b4 1045 	ldrh.w	r1, [r4, #69]	; 0x45
   16610:	f360 010b 	bfi	r1, r0, #0, #12
   16614:	f8a4 1045 	strh.w	r1, [r4, #69]	; 0x45
   16618:	2000      	movs	r0, #0
   1661a:	f884 0084 	strb.w	r0, [r4, #132]	; 0x84
   1661e:	f7fd fb45 	bl	13cac <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY>
   16622:	68b8      	ldr	r0, [r7, #8]
   16624:	1cc0      	adds	r0, r0, #3
   16626:	f7fd f9df 	bl	139e8 <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>
   1662a:	73a8      	strb	r0, [r5, #14]
   1662c:	78a0      	ldrb	r0, [r4, #2]
   1662e:	f010 0f01 	tst.w	r0, #1
   16632:	d027      	beq.n	16684 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2ac>
   16634:	481b      	ldr	r0, [pc, #108]	; (166a4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2cc>)
   16636:	e9d0 1002 	ldrd	r1, r0, [r0, #8]
   1663a:	e9cd 1002 	strd	r1, r0, [sp, #8]
   1663e:	20ff      	movs	r0, #255	; 0xff
   16640:	7728      	strb	r0, [r5, #28]
   16642:	a802      	add	r0, sp, #8
   16644:	6a26      	ldr	r6, [r4, #32]
   16646:	f7fb fc35 	bl	11eb4 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
   1664a:	b9d8      	cbnz	r0, 16684 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2ac>
   1664c:	9c02      	ldr	r4, [sp, #8]
   1664e:	42b4      	cmp	r4, r6
   16650:	d013      	beq.n	1667a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2a2>
   16652:	7a72      	ldrb	r2, [r6, #9]
   16654:	7a60      	ldrb	r0, [r4, #9]
   16656:	f106 030a 	add.w	r3, r6, #10
   1665a:	f104 010a 	add.w	r1, r4, #10
   1665e:	f009 fc4b 	bl	1fef8 <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
   16662:	b150      	cbz	r0, 1667a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2a2>
   16664:	78a0      	ldrb	r0, [r4, #2]
   16666:	7728      	strb	r0, [r5, #28]
   16668:	f8d4 0003 	ldr.w	r0, [r4, #3]
   1666c:	f8c5 001d 	str.w	r0, [r5, #29]
   16670:	f8b4 0007 	ldrh.w	r0, [r4, #7]
   16674:	f8a5 0021 	strh.w	r0, [r5, #33]	; 0x21
   16678:	e004      	b.n	16684 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2ac>
   1667a:	a802      	add	r0, sp, #8
   1667c:	f7fb fc1a 	bl	11eb4 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
   16680:	2800      	cmp	r0, #0
   16682:	d0e3      	beq.n	1664c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x274>
   16684:	b009      	add	sp, #36	; 0x24
   16686:	2000      	movs	r0, #0
   16688:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1668c:	200017a4 	.word	0x200017a4
   16690:	00017b94 	.word	0x00017b94
   16694:	2000016c 	.word	0x2000016c
   16698:	8e89bed6 	.word	0x8e89bed6
   1669c:	00555555 	.word	0x00555555
   166a0:	000f4240 	.word	0x000f4240
   166a4:	00017b70 	.word	0x00017b70
   166a8:	b570      	push	{r4, r5, r6, lr}
   166aa:	b082      	sub	sp, #8
   166ac:	4604      	mov	r4, r0
   166ae:	f7ff fe93 	bl	163d8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ>
   166b2:	2800      	cmp	r0, #0
   166b4:	bf1c      	itt	ne
   166b6:	b002      	addne	sp, #8
   166b8:	bd70      	popne	{r4, r5, r6, pc}
   166ba:	7820      	ldrb	r0, [r4, #0]
   166bc:	2103      	movs	r1, #3
   166be:	f009 fa60 	bl	1fb82 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   166c2:	4d22      	ldr	r5, [pc, #136]	; (1674c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x374>)
   166c4:	2105      	movs	r1, #5
   166c6:	6168      	str	r0, [r5, #20]
   166c8:	7820      	ldrb	r0, [r4, #0]
   166ca:	f009 fa5a 	bl	1fb82 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   166ce:	61a8      	str	r0, [r5, #24]
   166d0:	6969      	ldr	r1, [r5, #20]
   166d2:	2900      	cmp	r1, #0
   166d4:	bf18      	it	ne
   166d6:	2800      	cmpne	r0, #0
   166d8:	d005      	beq.n	166e6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x30e>
   166da:	f640 2194 	movw	r1, #2708	; 0xa94
   166de:	f04f 002d 	mov.w	r0, #45	; 0x2d
   166e2:	f7fb f94d 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   166e6:	7828      	ldrb	r0, [r5, #0]
   166e8:	2801      	cmp	r0, #1
   166ea:	d02b      	beq.n	16744 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x36c>
   166ec:	f894 0083 	ldrb.w	r0, [r4, #131]	; 0x83
   166f0:	2600      	movs	r6, #0
   166f2:	b150      	cbz	r0, 1670a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x332>
   166f4:	4668      	mov	r0, sp
   166f6:	f7fd fd6f 	bl	141d8 <sym_RQLOJUGFCKCS5YSXHMF5LIHXPBLO5AO63KQE3GQ>
   166fa:	b130      	cbz	r0, 1670a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x332>
   166fc:	4669      	mov	r1, sp
   166fe:	f104 0036 	add.w	r0, r4, #54	; 0x36
   16702:	f009 fe5c 	bl	203be <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>
   16706:	f884 6083 	strb.w	r6, [r4, #131]	; 0x83
   1670a:	f8b4 0048 	ldrh.w	r0, [r4, #72]	; 0x48
   1670e:	68a9      	ldr	r1, [r5, #8]
   16710:	1840      	adds	r0, r0, r1
   16712:	f8d4 1140 	ldr.w	r1, [r4, #320]	; 0x140
   16716:	1840      	adds	r0, r0, r1
   16718:	b282      	uxth	r2, r0
   1671a:	f104 0169 	add.w	r1, r4, #105	; 0x69
   1671e:	f104 0036 	add.w	r0, r4, #54	; 0x36
   16722:	f7fd fd7b 	bl	1421c <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ>
   16726:	f884 0044 	strb.w	r0, [r4, #68]	; 0x44
   1672a:	78a0      	ldrb	r0, [r4, #2]
   1672c:	f04f 0100 	mov.w	r1, #0
   16730:	f3c0 1000 	ubfx	r0, r0, #4, #1
   16734:	2800      	cmp	r0, #0
   16736:	4620      	mov	r0, r4
   16738:	d002      	beq.n	16740 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x368>
   1673a:	f7ff f883 	bl	15844 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x128>
   1673e:	e001      	b.n	16744 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x36c>
   16740:	f7fe fffc 	bl	1573c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x20>
   16744:	b002      	add	sp, #8
   16746:	2000      	movs	r0, #0
   16748:	bd70      	pop	{r4, r5, r6, pc}
   1674a:	0000      	.short	0x0000
   1674c:	200017a4 	.word	0x200017a4
   16750:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16754:	4e56      	ldr	r6, [pc, #344]	; (168b0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4d8>)
   16756:	4c57      	ldr	r4, [pc, #348]	; (168b4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4dc>)
   16758:	6875      	ldr	r5, [r6, #4]
   1675a:	7820      	ldrb	r0, [r4, #0]
   1675c:	2700      	movs	r7, #0
   1675e:	2800      	cmp	r0, #0
   16760:	bf08      	it	eq
   16762:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
   16766:	7820      	ldrb	r0, [r4, #0]
   16768:	2802      	cmp	r0, #2
   1676a:	bf1c      	itt	ne
   1676c:	7820      	ldrbne	r0, [r4, #0]
   1676e:	2803      	cmpne	r0, #3
   16770:	d111      	bne.n	16796 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3be>
   16772:	7b28      	ldrb	r0, [r5, #12]
   16774:	b148      	cbz	r0, 1678a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3b2>
   16776:	46a8      	mov	r8, r5
   16778:	f105 0047 	add.w	r0, r5, #71	; 0x47
   1677c:	f006 fce6 	bl	1d14c <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
   16780:	2800      	cmp	r0, #0
   16782:	bf04      	itt	eq
   16784:	207f      	moveq	r0, #127	; 0x7f
   16786:	f888 0047 	strbeq.w	r0, [r8, #71]	; 0x47
   1678a:	7ba0      	ldrb	r0, [r4, #14]
   1678c:	b118      	cbz	r0, 16796 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3be>
   1678e:	f005 fdd7 	bl	1c340 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
   16792:	f005 fbaf 	bl	1bef4 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
   16796:	f7fa fe67 	bl	11468 <sym_24DWUIEE2POS3GYSEVA4IAL4G7TGCCCJXT6D5AA>
   1679a:	7830      	ldrb	r0, [r6, #0]
   1679c:	2800      	cmp	r0, #0
   1679e:	d07c      	beq.n	1689a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4c2>
   167a0:	4628      	mov	r0, r5
   167a2:	f00a fe7f 	bl	214a4 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>
   167a6:	2800      	cmp	r0, #0
   167a8:	d07c      	beq.n	168a4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4cc>
   167aa:	6870      	ldr	r0, [r6, #4]
   167ac:	8841      	ldrh	r1, [r0, #2]
   167ae:	f3c1 02c0 	ubfx	r2, r1, #3, #1
   167b2:	b35a      	cbz	r2, 1680c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x434>
   167b4:	2909      	cmp	r1, #9
   167b6:	d004      	beq.n	167c2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3ea>
   167b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   167bc:	2101      	movs	r1, #1
   167be:	f7ff b841 	b.w	15844 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x128>
   167c2:	81a7      	strh	r7, [r4, #12]
   167c4:	4605      	mov	r5, r0
   167c6:	7067      	strb	r7, [r4, #1]
   167c8:	2101      	movs	r1, #1
   167ca:	f7fe fd99 	bl	15300 <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>
   167ce:	6861      	ldr	r1, [r4, #4]
   167d0:	4408      	add	r0, r1
   167d2:	6060      	str	r0, [r4, #4]
   167d4:	f8b5 0048 	ldrh.w	r0, [r5, #72]	; 0x48
   167d8:	1c40      	adds	r0, r0, #1
   167da:	f8a5 0048 	strh.w	r0, [r5, #72]	; 0x48
   167de:	f7fe fb93 	bl	14f08 <sym_K5GMJMBHBYPRCUIWKNEXGPSNQEZKEMBAP4JWHBQ>
   167e2:	f44f 717f 	mov.w	r1, #1020	; 0x3fc
   167e6:	fbb0 f2f1 	udiv	r2, r0, r1
   167ea:	fb01 0012 	mls	r0, r1, r2, r0
   167ee:	6861      	ldr	r1, [r4, #4]
   167f0:	2200      	movs	r2, #0
   167f2:	4408      	add	r0, r1
   167f4:	6060      	str	r0, [r4, #4]
   167f6:	f895 1076 	ldrb.w	r1, [r5, #118]	; 0x76
   167fa:	4628      	mov	r0, r5
   167fc:	f000 f85c 	bl	168b8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4e0>
   16800:	6870      	ldr	r0, [r6, #4]
   16802:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   16806:	2101      	movs	r1, #1
   16808:	f7fe bf98 	b.w	1573c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x20>
   1680c:	7862      	ldrb	r2, [r4, #1]
   1680e:	b11a      	cbz	r2, 16818 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x440>
   16810:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   16814:	f000 be9e 	b.w	17554 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x117c>
   16818:	f3c1 1100 	ubfx	r1, r1, #4, #1
   1681c:	b179      	cbz	r1, 1683e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x466>
   1681e:	4604      	mov	r4, r0
   16820:	3030      	adds	r0, #48	; 0x30
   16822:	f00a fdde 	bl	213e2 <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
   16826:	b128      	cbz	r0, 16834 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x45c>
   16828:	4620      	mov	r0, r4
   1682a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1682e:	2101      	movs	r1, #1
   16830:	f7ff b808 	b.w	15844 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x128>
   16834:	4620      	mov	r0, r4
   16836:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1683a:	f000 be8b 	b.w	17554 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x117c>
   1683e:	4605      	mov	r5, r0
   16840:	3030      	adds	r0, #48	; 0x30
   16842:	f00a fdce 	bl	213e2 <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
   16846:	b128      	cbz	r0, 16854 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x47c>
   16848:	4628      	mov	r0, r5
   1684a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1684e:	2101      	movs	r1, #1
   16850:	f7fe bf74 	b.w	1573c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x20>
   16854:	8868      	ldrh	r0, [r5, #2]
   16856:	f3c0 1100 	ubfx	r1, r0, #4, #1
   1685a:	b9f1      	cbnz	r1, 1689a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4c2>
   1685c:	78a1      	ldrb	r1, [r4, #2]
   1685e:	b1e1      	cbz	r1, 1689a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4c2>
   16860:	f8b5 1054 	ldrh.w	r1, [r5, #84]	; 0x54
   16864:	2900      	cmp	r1, #0
   16866:	bf08      	it	eq
   16868:	f010 0f01 	tsteq.w	r0, #1
   1686c:	d112      	bne.n	16894 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4bc>
   1686e:	f010 0f02 	tst.w	r0, #2
   16872:	bf08      	it	eq
   16874:	f010 0f20 	tsteq.w	r0, #32
   16878:	d10c      	bne.n	16894 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4bc>
   1687a:	6960      	ldr	r0, [r4, #20]
   1687c:	b120      	cbz	r0, 16888 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4b0>
   1687e:	f100 0040 	add.w	r0, r0, #64	; 0x40
   16882:	f00c fdff 	bl	23484 <sym_LNQ5OSSHLT2KR4OBXPN76EEGODICLRS65ENGIUY>
   16886:	b928      	cbnz	r0, 16894 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4bc>
   16888:	69a0      	ldr	r0, [r4, #24]
   1688a:	b130      	cbz	r0, 1689a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4c2>
   1688c:	3040      	adds	r0, #64	; 0x40
   1688e:	f00c fdf9 	bl	23484 <sym_LNQ5OSSHLT2KR4OBXPN76EEGODICLRS65ENGIUY>
   16892:	b110      	cbz	r0, 1689a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4c2>
   16894:	2100      	movs	r1, #0
   16896:	4628      	mov	r0, r5
   16898:	e000      	b.n	1689c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4c4>
   1689a:	e003      	b.n	168a4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4cc>
   1689c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   168a0:	f7ff b8b8 	b.w	15a14 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2f8>
   168a4:	4628      	mov	r0, r5
   168a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   168aa:	f000 be53 	b.w	17554 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x117c>
   168ae:	0000      	.short	0x0000
   168b0:	2000016c 	.word	0x2000016c
   168b4:	200017a4 	.word	0x200017a4
   168b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   168bc:	b08d      	sub	sp, #52	; 0x34
   168be:	4604      	mov	r4, r0
   168c0:	2000      	movs	r0, #0
   168c2:	468a      	mov	sl, r1
   168c4:	9006      	str	r0, [sp, #24]
   168c6:	8861      	ldrh	r1, [r4, #2]
   168c8:	4690      	mov	r8, r2
   168ca:	4683      	mov	fp, r0
   168cc:	f011 0f03 	tst.w	r1, #3
   168d0:	d00f      	beq.n	168f2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x51a>
   168d2:	f011 0f01 	tst.w	r1, #1
   168d6:	f001 0002 	and.w	r0, r1, #2
   168da:	d005      	beq.n	168e8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x510>
   168dc:	2800      	cmp	r0, #0
   168de:	bf08      	it	eq
   168e0:	f04f 0b01 	moveq.w	fp, #1
   168e4:	d005      	beq.n	168f2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x51a>
   168e6:	e00e      	b.n	16906 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x52e>
   168e8:	2800      	cmp	r0, #0
   168ea:	bf18      	it	ne
   168ec:	f04f 0b02 	movne.w	fp, #2
   168f0:	d009      	beq.n	16906 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x52e>
   168f2:	2700      	movs	r7, #0
   168f4:	4eff      	ldr	r6, [pc, #1020]	; (16cf4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x91c>)
   168f6:	460d      	mov	r5, r1
   168f8:	f011 0f01 	tst.w	r1, #1
   168fc:	f001 0002 	and.w	r0, r1, #2
   16900:	d015      	beq.n	1692e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x556>
   16902:	b128      	cbz	r0, 16910 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x538>
   16904:	e017      	b.n	16936 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x55e>
   16906:	f240 619f 	movw	r1, #1695	; 0x69f
   1690a:	202d      	movs	r0, #45	; 0x2d
   1690c:	f7fb f838 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   16910:	f015 0f04 	tst.w	r5, #4
   16914:	d00f      	beq.n	16936 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x55e>
   16916:	f047 0008 	orr.w	r0, r7, #8
   1691a:	f1b8 0f00 	cmp.w	r8, #0
   1691e:	bf0e      	itee	eq
   16920:	f040 0910 	orreq.w	r9, r0, #16
   16924:	f040 0001 	orrne.w	r0, r0, #1
   16928:	f040 0902 	orrne.w	r9, r0, #2
   1692c:	e0e0      	b.n	16af0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x718>
   1692e:	b110      	cbz	r0, 16936 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x55e>
   16930:	f015 0f04 	tst.w	r5, #4
   16934:	d00f      	beq.n	16956 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x57e>
   16936:	48ef      	ldr	r0, [pc, #956]	; (16cf4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x91c>)
   16938:	f015 0f07 	tst.w	r5, #7
   1693c:	6940      	ldr	r0, [r0, #20]
   1693e:	d011      	beq.n	16964 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x58c>
   16940:	f015 0f01 	tst.w	r5, #1
   16944:	f005 0202 	and.w	r2, r5, #2
   16948:	d067      	beq.n	16a1a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x642>
   1694a:	2a00      	cmp	r2, #0
   1694c:	bf08      	it	eq
   1694e:	f015 0f04 	tsteq.w	r5, #4
   16952:	d04f      	beq.n	169f4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x61c>
   16954:	e06f      	b.n	16a36 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x65e>
   16956:	f1b8 0f00 	cmp.w	r8, #0
   1695a:	bf18      	it	ne
   1695c:	f047 0909 	orrne.w	r9, r7, #9
   16960:	d152      	bne.n	16a08 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x630>
   16962:	e065      	b.n	16a30 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x658>
   16964:	f1b8 0f00 	cmp.w	r8, #0
   16968:	d007      	beq.n	1697a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5a2>
   1696a:	f047 0908 	orr.w	r9, r7, #8
   1696e:	b378      	cbz	r0, 169d0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5f8>
   16970:	3040      	adds	r0, #64	; 0x40
   16972:	f00c fd87 	bl	23484 <sym_LNQ5OSSHLT2KR4OBXPN76EEGODICLRS65ENGIUY>
   16976:	b358      	cbz	r0, 169d0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5f8>
   16978:	e031      	b.n	169de <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x606>
   1697a:	f8b4 2054 	ldrh.w	r2, [r4, #84]	; 0x54
   1697e:	2a00      	cmp	r2, #0
   16980:	bf08      	it	eq
   16982:	f011 0f01 	tsteq.w	r1, #1
   16986:	d111      	bne.n	169ac <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5d4>
   16988:	f011 0f02 	tst.w	r1, #2
   1698c:	bf08      	it	eq
   1698e:	f011 0f20 	tsteq.w	r1, #32
   16992:	d10b      	bne.n	169ac <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5d4>
   16994:	b120      	cbz	r0, 169a0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5c8>
   16996:	f100 0040 	add.w	r0, r0, #64	; 0x40
   1699a:	f00c fd73 	bl	23484 <sym_LNQ5OSSHLT2KR4OBXPN76EEGODICLRS65ENGIUY>
   1699e:	b928      	cbnz	r0, 169ac <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5d4>
   169a0:	69b0      	ldr	r0, [r6, #24]
   169a2:	b148      	cbz	r0, 169b8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5e0>
   169a4:	3040      	adds	r0, #64	; 0x40
   169a6:	f00c fd6d 	bl	23484 <sym_LNQ5OSSHLT2KR4OBXPN76EEGODICLRS65ENGIUY>
   169aa:	b128      	cbz	r0, 169b8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5e0>
   169ac:	f047 0918 	orr.w	r9, r7, #24
   169b0:	f015 0f20 	tst.w	r5, #32
   169b4:	d003      	beq.n	169be <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5e6>
   169b6:	e09b      	b.n	16af0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x718>
   169b8:	f047 0901 	orr.w	r9, r7, #1
   169bc:	e098      	b.n	16af0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x718>
   169be:	7920      	ldrb	r0, [r4, #4]
   169c0:	f010 000c 	ands.w	r0, r0, #12
   169c4:	bf18      	it	ne
   169c6:	2001      	movne	r0, #1
   169c8:	43c0      	mvns	r0, r0
   169ca:	f360 0900 	bfi	r9, r0, #0, #1
   169ce:	e08f      	b.n	16af0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x718>
   169d0:	e7ff      	b.n	169d2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5fa>
   169d2:	69b0      	ldr	r0, [r6, #24]
   169d4:	b128      	cbz	r0, 169e2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x60a>
   169d6:	3040      	adds	r0, #64	; 0x40
   169d8:	f00c fd54 	bl	23484 <sym_LNQ5OSSHLT2KR4OBXPN76EEGODICLRS65ENGIUY>
   169dc:	b108      	cbz	r0, 169e2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x60a>
   169de:	f049 0920 	orr.w	r9, r9, #32
   169e2:	f015 0f20 	tst.w	r5, #32
   169e6:	d10f      	bne.n	16a08 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x630>
   169e8:	7920      	ldrb	r0, [r4, #4]
   169ea:	f010 000c 	ands.w	r0, r0, #12
   169ee:	d07d      	beq.n	16aec <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x714>
   169f0:	2001      	movs	r0, #1
   169f2:	e07b      	b.n	16aec <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x714>
   169f4:	f047 0008 	orr.w	r0, r7, #8
   169f8:	f1b8 0f00 	cmp.w	r8, #0
   169fc:	d005      	beq.n	16a0a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x632>
   169fe:	7921      	ldrb	r1, [r4, #4]
   16a00:	2902      	cmp	r1, #2
   16a02:	d007      	beq.n	16a14 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x63c>
   16a04:	f040 0901 	orr.w	r9, r0, #1
   16a08:	e072      	b.n	16af0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x718>
   16a0a:	7921      	ldrb	r1, [r4, #4]
   16a0c:	f040 0010 	orr.w	r0, r0, #16
   16a10:	2902      	cmp	r1, #2
   16a12:	d0f7      	beq.n	16a04 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x62c>
   16a14:	f020 0901 	bic.w	r9, r0, #1
   16a18:	e06a      	b.n	16af0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x718>
   16a1a:	2a00      	cmp	r2, #0
   16a1c:	bf18      	it	ne
   16a1e:	f015 0f04 	tstne.w	r5, #4
   16a22:	d008      	beq.n	16a36 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x65e>
   16a24:	f1b8 0f00 	cmp.w	r8, #0
   16a28:	bf18      	it	ne
   16a2a:	f047 090b 	orrne.w	r9, r7, #11
   16a2e:	d15f      	bne.n	16af0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x718>
   16a30:	f047 0918 	orr.w	r9, r7, #24
   16a34:	e05c      	b.n	16af0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x718>
   16a36:	f015 0f03 	tst.w	r5, #3
   16a3a:	d160      	bne.n	16afe <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x726>
   16a3c:	f015 0f04 	tst.w	r5, #4
   16a40:	d05d      	beq.n	16afe <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x726>
   16a42:	f1b8 0f00 	cmp.w	r8, #0
   16a46:	d007      	beq.n	16a58 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x680>
   16a48:	f047 0908 	orr.w	r9, r7, #8
   16a4c:	b3b8      	cbz	r0, 16abe <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6e6>
   16a4e:	3040      	adds	r0, #64	; 0x40
   16a50:	f00c fd18 	bl	23484 <sym_LNQ5OSSHLT2KR4OBXPN76EEGODICLRS65ENGIUY>
   16a54:	b398      	cbz	r0, 16abe <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6e6>
   16a56:	e03a      	b.n	16ace <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6f6>
   16a58:	f8b4 2054 	ldrh.w	r2, [r4, #84]	; 0x54
   16a5c:	2a00      	cmp	r2, #0
   16a5e:	bf08      	it	eq
   16a60:	f011 0f01 	tsteq.w	r1, #1
   16a64:	d111      	bne.n	16a8a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6b2>
   16a66:	f011 0f02 	tst.w	r1, #2
   16a6a:	bf08      	it	eq
   16a6c:	f011 0f20 	tsteq.w	r1, #32
   16a70:	d10b      	bne.n	16a8a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6b2>
   16a72:	b120      	cbz	r0, 16a7e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6a6>
   16a74:	f100 0040 	add.w	r0, r0, #64	; 0x40
   16a78:	f00c fd04 	bl	23484 <sym_LNQ5OSSHLT2KR4OBXPN76EEGODICLRS65ENGIUY>
   16a7c:	b928      	cbnz	r0, 16a8a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6b2>
   16a7e:	69b0      	ldr	r0, [r6, #24]
   16a80:	b188      	cbz	r0, 16aa6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6ce>
   16a82:	3040      	adds	r0, #64	; 0x40
   16a84:	f00c fcfe 	bl	23484 <sym_LNQ5OSSHLT2KR4OBXPN76EEGODICLRS65ENGIUY>
   16a88:	b168      	cbz	r0, 16aa6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6ce>
   16a8a:	f047 0918 	orr.w	r9, r7, #24
   16a8e:	f015 0f20 	tst.w	r5, #32
   16a92:	d00b      	beq.n	16aac <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6d4>
   16a94:	7920      	ldrb	r0, [r4, #4]
   16a96:	f010 000c 	ands.w	r0, r0, #12
   16a9a:	bf18      	it	ne
   16a9c:	2001      	movne	r0, #1
   16a9e:	43c0      	mvns	r0, r0
   16aa0:	f360 0941 	bfi	r9, r0, #1, #1
   16aa4:	e024      	b.n	16af0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x718>
   16aa6:	f047 0903 	orr.w	r9, r7, #3
   16aaa:	e021      	b.n	16af0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x718>
   16aac:	7920      	ldrb	r0, [r4, #4]
   16aae:	f010 000c 	ands.w	r0, r0, #12
   16ab2:	bf18      	it	ne
   16ab4:	2001      	movne	r0, #1
   16ab6:	43c0      	mvns	r0, r0
   16ab8:	f360 0900 	bfi	r9, r0, #0, #1
   16abc:	e7ea      	b.n	16a94 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6bc>
   16abe:	e000      	b.n	16ac2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6ea>
   16ac0:	e014      	b.n	16aec <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x714>
   16ac2:	69b0      	ldr	r0, [r6, #24]
   16ac4:	b128      	cbz	r0, 16ad2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6fa>
   16ac6:	3040      	adds	r0, #64	; 0x40
   16ac8:	f00c fcdc 	bl	23484 <sym_LNQ5OSSHLT2KR4OBXPN76EEGODICLRS65ENGIUY>
   16acc:	b108      	cbz	r0, 16ad2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6fa>
   16ace:	f049 0920 	orr.w	r9, r9, #32
   16ad2:	7920      	ldrb	r0, [r4, #4]
   16ad4:	f010 010c 	ands.w	r1, r0, #12
   16ad8:	bf18      	it	ne
   16ada:	2101      	movne	r1, #1
   16adc:	f361 0941 	bfi	r9, r1, #1, #1
   16ae0:	f015 0f20 	tst.w	r5, #32
   16ae4:	d104      	bne.n	16af0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x718>
   16ae6:	f010 000c 	ands.w	r0, r0, #12
   16aea:	d181      	bne.n	169f0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x618>
   16aec:	f360 0900 	bfi	r9, r0, #0, #1
   16af0:	f015 0f40 	tst.w	r5, #64	; 0x40
   16af4:	d02f      	beq.n	16b56 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x77e>
   16af6:	f1b8 0f00 	cmp.w	r8, #0
   16afa:	d005      	beq.n	16b08 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x730>
   16afc:	e029      	b.n	16b52 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x77a>
   16afe:	f240 7142 	movw	r1, #1858	; 0x742
   16b02:	202d      	movs	r0, #45	; 0x2d
   16b04:	f7fa ff3c 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   16b08:	f8b4 0054 	ldrh.w	r0, [r4, #84]	; 0x54
   16b0c:	2800      	cmp	r0, #0
   16b0e:	bf04      	itt	eq
   16b10:	8860      	ldrheq	r0, [r4, #2]
   16b12:	f010 0f01 	tsteq.w	r0, #1
   16b16:	d118      	bne.n	16b4a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x772>
   16b18:	f010 0f02 	tst.w	r0, #2
   16b1c:	bf08      	it	eq
   16b1e:	f010 0f20 	tsteq.w	r0, #32
   16b22:	d112      	bne.n	16b4a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x772>
   16b24:	6970      	ldr	r0, [r6, #20]
   16b26:	b120      	cbz	r0, 16b32 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x75a>
   16b28:	f100 0040 	add.w	r0, r0, #64	; 0x40
   16b2c:	f00c fcaa 	bl	23484 <sym_LNQ5OSSHLT2KR4OBXPN76EEGODICLRS65ENGIUY>
   16b30:	b958      	cbnz	r0, 16b4a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x772>
   16b32:	69b0      	ldr	r0, [r6, #24]
   16b34:	b118      	cbz	r0, 16b3e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x766>
   16b36:	3040      	adds	r0, #64	; 0x40
   16b38:	f00c fca4 	bl	23484 <sym_LNQ5OSSHLT2KR4OBXPN76EEGODICLRS65ENGIUY>
   16b3c:	b928      	cbnz	r0, 16b4a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x772>
   16b3e:	f015 0f01 	tst.w	r5, #1
   16b42:	bf08      	it	eq
   16b44:	f015 0f02 	tsteq.w	r5, #2
   16b48:	d003      	beq.n	16b52 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x77a>
   16b4a:	7920      	ldrb	r0, [r4, #4]
   16b4c:	f010 0f0c 	tst.w	r0, #12
   16b50:	d101      	bne.n	16b56 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x77e>
   16b52:	f049 0940 	orr.w	r9, r9, #64	; 0x40
   16b56:	4f68      	ldr	r7, [pc, #416]	; (16cf8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x920>)
   16b58:	f04f 0100 	mov.w	r1, #0
   16b5c:	464d      	mov	r5, r9
   16b5e:	68b8      	ldr	r0, [r7, #8]
   16b60:	f1b8 0f00 	cmp.w	r8, #0
   16b64:	8001      	strh	r1, [r0, #0]
   16b66:	7801      	ldrb	r1, [r0, #0]
   16b68:	f001 01df 	and.w	r1, r1, #223	; 0xdf
   16b6c:	7001      	strb	r1, [r0, #0]
   16b6e:	f04f 0107 	mov.w	r1, #7
   16b72:	d03a      	beq.n	16bea <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x812>
   16b74:	f009 fd91 	bl	2069a <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>
   16b78:	69b0      	ldr	r0, [r6, #24]
   16b7a:	b150      	cbz	r0, 16b92 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x7ba>
   16b7c:	3040      	adds	r0, #64	; 0x40
   16b7e:	f00c fc81 	bl	23484 <sym_LNQ5OSSHLT2KR4OBXPN76EEGODICLRS65ENGIUY>
   16b82:	b130      	cbz	r0, 16b92 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x7ba>
   16b84:	69b0      	ldr	r0, [r6, #24]
   16b86:	f890 00a9 	ldrb.w	r0, [r0, #169]	; 0xa9
   16b8a:	2800      	cmp	r0, #0
   16b8c:	bf1c      	itt	ne
   16b8e:	200a      	movne	r0, #10
   16b90:	9006      	strne	r0, [sp, #24]
   16b92:	4659      	mov	r1, fp
   16b94:	68b8      	ldr	r0, [r7, #8]
   16b96:	f009 fc44 	bl	20422 <sym_IUN5SW63ODKDFPSGCV4FO7HO5IPKZTFTURF2JKI>
   16b9a:	4629      	mov	r1, r5
   16b9c:	9a06      	ldr	r2, [sp, #24]
   16b9e:	68b8      	ldr	r0, [r7, #8]
   16ba0:	f009 fc48 	bl	20434 <sym_WLQ6YP4CLBLEMT6X4SKN2P2RM7K53RQFGIL5RPY>
   16ba4:	f015 0f01 	tst.w	r5, #1
   16ba8:	d00b      	beq.n	16bc2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x7ea>
   16baa:	2306      	movs	r3, #6
   16bac:	2200      	movs	r2, #0
   16bae:	f104 0169 	add.w	r1, r4, #105	; 0x69
   16bb2:	68b8      	ldr	r0, [r7, #8]
   16bb4:	f009 fcdc 	bl	20570 <sym_DEQ52UXGGOG3CBHCSM5ZCBFPFTNN2OZ3BBWERRI>
   16bb8:	f894 1068 	ldrb.w	r1, [r4, #104]	; 0x68
   16bbc:	68b8      	ldr	r0, [r7, #8]
   16bbe:	f009 fda5 	bl	2070c <sym_YBOODJ7VBLXRRILCBQXIORIXU3GHRAYK6WULLQY>
   16bc2:	f015 0f02 	tst.w	r5, #2
   16bc6:	d01c      	beq.n	16c02 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x82a>
   16bc8:	68b8      	ldr	r0, [r7, #8]
   16bca:	f1ba 0f00 	cmp.w	sl, #0
   16bce:	f04f 0306 	mov.w	r3, #6
   16bd2:	f04f 0201 	mov.w	r2, #1
   16bd6:	d00b      	beq.n	16bf0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x818>
   16bd8:	f104 0177 	add.w	r1, r4, #119	; 0x77
   16bdc:	f009 fcc8 	bl	20570 <sym_DEQ52UXGGOG3CBHCSM5ZCBFPFTNN2OZ3BBWERRI>
   16be0:	2101      	movs	r1, #1
   16be2:	68b8      	ldr	r0, [r7, #8]
   16be4:	f009 fd82 	bl	206ec <sym_NAGMMCXDNSRJLJ55T6DS4CG2FNZEN6Y562ZTFRY>
   16be8:	e00b      	b.n	16c02 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x82a>
   16bea:	f009 fd56 	bl	2069a <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>
   16bee:	e7d0      	b.n	16b92 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x7ba>
   16bf0:	f104 0170 	add.w	r1, r4, #112	; 0x70
   16bf4:	f009 fcbc 	bl	20570 <sym_DEQ52UXGGOG3CBHCSM5ZCBFPFTNN2OZ3BBWERRI>
   16bf8:	f894 106f 	ldrb.w	r1, [r4, #111]	; 0x6f
   16bfc:	68b8      	ldr	r0, [r7, #8]
   16bfe:	f009 fd75 	bl	206ec <sym_NAGMMCXDNSRJLJ55T6DS4CG2FNZEN6Y562ZTFRY>
   16c02:	f015 0f04 	tst.w	r5, #4
   16c06:	d004      	beq.n	16c12 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x83a>
   16c08:	f640 0192 	movw	r1, #2194	; 0x892
   16c0c:	202d      	movs	r0, #45	; 0x2d
   16c0e:	f7fa feb7 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   16c12:	f015 0f08 	tst.w	r5, #8
   16c16:	d018      	beq.n	16c4a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x872>
   16c18:	2000      	movs	r0, #0
   16c1a:	9008      	str	r0, [sp, #32]
   16c1c:	f8b4 0045 	ldrh.w	r0, [r4, #69]	; 0x45
   16c20:	f8bd 1020 	ldrh.w	r1, [sp, #32]
   16c24:	2302      	movs	r3, #2
   16c26:	f360 010b 	bfi	r1, r0, #0, #12
   16c2a:	f8ad 1020 	strh.w	r1, [sp, #32]
   16c2e:	f894 0046 	ldrb.w	r0, [r4, #70]	; 0x46
   16c32:	2203      	movs	r2, #3
   16c34:	0901      	lsrs	r1, r0, #4
   16c36:	f89d 0021 	ldrb.w	r0, [sp, #33]	; 0x21
   16c3a:	f361 1007 	bfi	r0, r1, #4, #4
   16c3e:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
   16c42:	a908      	add	r1, sp, #32
   16c44:	68b8      	ldr	r0, [r7, #8]
   16c46:	f009 fc93 	bl	20570 <sym_DEQ52UXGGOG3CBHCSM5ZCBFPFTNN2OZ3BBWERRI>
   16c4a:	f015 0f20 	tst.w	r5, #32
   16c4e:	d07c      	beq.n	16d4a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x972>
   16c50:	e9d4 1050 	ldrd	r1, r0, [r4, #320]	; 0x140
   16c54:	e9cd 0109 	strd	r0, r1, [sp, #36]	; 0x24
   16c58:	69b0      	ldr	r0, [r6, #24]
   16c5a:	2800      	cmp	r0, #0
   16c5c:	bf0c      	ite	eq
   16c5e:	f8d6 9014 	ldreq.w	r9, [r6, #20]
   16c62:	4681      	movne	r9, r0
   16c64:	e9d9 ab18 	ldrd	sl, fp, [r9, #96]	; 0x60
   16c68:	d013      	beq.n	16c92 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x8ba>
   16c6a:	f100 0040 	add.w	r0, r0, #64	; 0x40
   16c6e:	f00c fc09 	bl	23484 <sym_LNQ5OSSHLT2KR4OBXPN76EEGODICLRS65ENGIUY>
   16c72:	b170      	cbz	r0, 16c92 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x8ba>
   16c74:	69b0      	ldr	r0, [r6, #24]
   16c76:	f890 00a9 	ldrb.w	r0, [r0, #169]	; 0xa9
   16c7a:	2800      	cmp	r0, #0
   16c7c:	bf1c      	itt	ne
   16c7e:	f899 0054 	ldrbne.w	r0, [r9, #84]	; 0x54
   16c82:	2800      	cmpne	r0, #0
   16c84:	d005      	beq.n	16c92 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x8ba>
   16c86:	f8d9 1048 	ldr.w	r1, [r9, #72]	; 0x48
   16c8a:	eb11 0a0a 	adds.w	sl, r1, sl
   16c8e:	f14b 0b00 	adc.w	fp, fp, #0
   16c92:	f899 0010 	ldrb.w	r0, [r9, #16]
   16c96:	4919      	ldr	r1, [pc, #100]	; (16cfc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x924>)
   16c98:	6932      	ldr	r2, [r6, #16]
   16c9a:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
   16c9e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   16ca2:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
   16ca6:	fbb0 f0f1 	udiv	r0, r0, r1
   16caa:	17c1      	asrs	r1, r0, #31
   16cac:	eb10 000a 	adds.w	r0, r0, sl
   16cb0:	e9dd ac09 	ldrd	sl, ip, [sp, #36]	; 0x24
   16cb4:	eb41 030b 	adc.w	r3, r1, fp
   16cb8:	eb12 0c0c 	adds.w	ip, r2, ip
   16cbc:	f14a 0100 	adc.w	r1, sl, #0
   16cc0:	ebb0 000c 	subs.w	r0, r0, ip
   16cc4:	f8d4 c134 	ldr.w	ip, [r4, #308]	; 0x134
   16cc8:	eb63 0101 	sbc.w	r1, r3, r1
   16ccc:	ebac 0202 	sub.w	r2, ip, r2
   16cd0:	ea4f 7ce2 	mov.w	ip, r2, asr #31
   16cd4:	2301      	movs	r3, #1
   16cd6:	1a12      	subs	r2, r2, r0
   16cd8:	eb7c 0201 	sbcs.w	r2, ip, r1
   16cdc:	bfa8      	it	ge
   16cde:	2300      	movge	r3, #0
   16ce0:	f89d 2005 	ldrb.w	r2, [sp, #5]
   16ce4:	f8df c018 	ldr.w	ip, [pc, #24]	; 16d00 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x928>
   16ce8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   16cec:	f88d 2005 	strb.w	r2, [sp, #5]
   16cf0:	e008      	b.n	16d04 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x92c>
   16cf2:	0000      	.short	0x0000
   16cf4:	200017a4 	.word	0x200017a4
   16cf8:	2000016c 	.word	0x2000016c
   16cfc:	00017b80 	.word	0x00017b80
   16d00:	00257fff 	.word	0x00257fff
   16d04:	f04f 0a00 	mov.w	sl, #0
   16d08:	ebbc 0c00 	subs.w	ip, ip, r0
   16d0c:	eb7a 0c01 	sbcs.w	ip, sl, r1
   16d10:	bfb8      	it	lt
   16d12:	2300      	movlt	r3, #0
   16d14:	f5b0 3c70 	subs.w	ip, r0, #245760	; 0x3c000
   16d18:	f171 0100 	sbcs.w	r1, r1, #0
   16d1c:	db1d      	blt.n	16d5a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x982>
   16d1e:	2b00      	cmp	r3, #0
   16d20:	bf1c      	itt	ne
   16d22:	f042 0120 	orrne.w	r1, r2, #32
   16d26:	f88d 1005 	strbne.w	r1, [sp, #5]
   16d2a:	d016      	beq.n	16d5a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x982>
   16d2c:	b2c9      	uxtb	r1, r1
   16d2e:	f3c1 1140 	ubfx	r1, r1, #5, #1
   16d32:	2900      	cmp	r1, #0
   16d34:	bf08      	it	eq
   16d36:	211e      	moveq	r1, #30
   16d38:	d004      	beq.n	16d44 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x96c>
   16d3a:	2900      	cmp	r1, #0
   16d3c:	bf18      	it	ne
   16d3e:	f44f 7196 	movne.w	r1, #300	; 0x12c
   16d42:	d057      	beq.n	16df4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xa1c>
   16d44:	fbb0 f0f1 	udiv	r0, r0, r1
   16d48:	e000      	b.n	16d4c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x974>
   16d4a:	e04f      	b.n	16dec <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xa14>
   16d4c:	f8bd 1004 	ldrh.w	r1, [sp, #4]
   16d50:	f360 010c 	bfi	r1, r0, #0, #13
   16d54:	f8ad 1004 	strh.w	r1, [sp, #4]
   16d58:	e00b      	b.n	16d72 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x99a>
   16d5a:	f022 0120 	bic.w	r1, r2, #32
   16d5e:	f88d 1005 	strb.w	r1, [sp, #5]
   16d62:	2b00      	cmp	r3, #0
   16d64:	d1e2      	bne.n	16d2c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x954>
   16d66:	f8bd 0004 	ldrh.w	r0, [sp, #4]
   16d6a:	f400 4060 	and.w	r0, r0, #57344	; 0xe000
   16d6e:	f8ad 0004 	strh.w	r0, [sp, #4]
   16d72:	f8d9 1048 	ldr.w	r1, [r9, #72]	; 0x48
   16d76:	f240 40e2 	movw	r0, #1250	; 0x4e2
   16d7a:	fbb1 f0f0 	udiv	r0, r1, r0
   16d7e:	f8ad 0006 	strh.w	r0, [sp, #6]
   16d82:	f899 3018 	ldrb.w	r3, [r9, #24]
   16d86:	f8d9 2015 	ldr.w	r2, [r9, #21]
   16d8a:	f899 1019 	ldrb.w	r1, [r9, #25]
   16d8e:	f363 621f 	bfi	r2, r3, #24, #8
   16d92:	f8dd 0009 	ldr.w	r0, [sp, #9]
   16d96:	f8dd 3005 	ldr.w	r3, [sp, #5]
   16d9a:	f361 601c 	bfi	r0, r1, #24, #5
   16d9e:	f362 631f 	bfi	r3, r2, #24, #8
   16da2:	0a11      	lsrs	r1, r2, #8
   16da4:	f361 0017 	bfi	r0, r1, #0, #24
   16da8:	f8cd 3005 	str.w	r3, [sp, #5]
   16dac:	f8cd 0009 	str.w	r0, [sp, #9]
   16db0:	f005 f83e 	bl	1be30 <sym_W6QCODUONZ7VOOA5DU2R7RKAJUNWNTC3INZ7OGY>
   16db4:	4601      	mov	r1, r0
   16db6:	f89d 000c 	ldrb.w	r0, [sp, #12]
   16dba:	f361 1047 	bfi	r0, r1, #5, #3
   16dbe:	f88d 000c 	strb.w	r0, [sp, #12]
   16dc2:	f89d 0005 	ldrb.w	r0, [sp, #5]
   16dc6:	f020 0080 	bic.w	r0, r0, #128	; 0x80
   16dca:	f88d 0005 	strb.w	r0, [sp, #5]
   16dce:	f8d9 0000 	ldr.w	r0, [r9]
   16dd2:	f8cd 000d 	str.w	r0, [sp, #13]
   16dd6:	f8d9 0004 	ldr.w	r0, [r9, #4]
   16dda:	9904      	ldr	r1, [sp, #16]
   16ddc:	f360 211f 	bfi	r1, r0, #8, #24
   16de0:	9104      	str	r1, [sp, #16]
   16de2:	f8b9 0052 	ldrh.w	r0, [r9, #82]	; 0x52
   16de6:	1c40      	adds	r0, r0, #1
   16de8:	f8ad 0014 	strh.w	r0, [sp, #20]
   16dec:	f1b8 0f01 	cmp.w	r8, #1
   16df0:	d161      	bne.n	16eb6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xade>
   16df2:	e004      	b.n	16dfe <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xa26>
   16df4:	f240 3149 	movw	r1, #841	; 0x349
   16df8:	2006      	movs	r0, #6
   16dfa:	f7fa fdc1 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   16dfe:	f8b4 0054 	ldrh.w	r0, [r4, #84]	; 0x54
   16e02:	b3e8      	cbz	r0, 16e80 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xaa8>
   16e04:	78a0      	ldrb	r0, [r4, #2]
   16e06:	f3c0 0040 	ubfx	r0, r0, #1, #1
   16e0a:	bbc8      	cbnz	r0, 16e80 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xaa8>
   16e0c:	68b8      	ldr	r0, [r7, #8]
   16e0e:	f009 fbab 	bl	20568 <sym_APJRNOYIPVVMXANZL7N72BAJ3R7XI267X7HUSZY>
   16e12:	1c40      	adds	r0, r0, #1
   16e14:	f000 0aff 	and.w	sl, r0, #255	; 0xff
   16e18:	f8b4 2054 	ldrh.w	r2, [r4, #84]	; 0x54
   16e1c:	89b0      	ldrh	r0, [r6, #12]
   16e1e:	1a11      	subs	r1, r2, r0
   16e20:	f1ca 00ff 	rsb	r0, sl, #255	; 0xff
   16e24:	4281      	cmp	r1, r0
   16e26:	bfb8      	it	lt
   16e28:	4608      	movlt	r0, r1
   16e2a:	f000 09ff 	and.w	r9, r0, #255	; 0xff
   16e2e:	454a      	cmp	r2, r9
   16e30:	d939      	bls.n	16ea6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xace>
   16e32:	78a0      	ldrb	r0, [r4, #2]
   16e34:	f010 0f01 	tst.w	r0, #1
   16e38:	d135      	bne.n	16ea6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xace>
   16e3a:	f045 0510 	orr.w	r5, r5, #16
   16e3e:	4629      	mov	r1, r5
   16e40:	9a06      	ldr	r2, [sp, #24]
   16e42:	68b8      	ldr	r0, [r7, #8]
   16e44:	f009 faf6 	bl	20434 <sym_WLQ6YP4CLBLEMT6X4SKN2P2RM7K53RQFGIL5RPY>
   16e48:	f1a9 0103 	sub.w	r1, r9, #3
   16e4c:	f001 09ff 	and.w	r9, r1, #255	; 0xff
   16e50:	f10a 0003 	add.w	r0, sl, #3
   16e54:	4448      	add	r0, r9
   16e56:	f000 0aff 	and.w	sl, r0, #255	; 0xff
   16e5a:	f8b4 1048 	ldrh.w	r1, [r4, #72]	; 0x48
   16e5e:	68b0      	ldr	r0, [r6, #8]
   16e60:	1808      	adds	r0, r1, r0
   16e62:	f8d4 1140 	ldr.w	r1, [r4, #320]	; 0x140
   16e66:	1840      	adds	r0, r0, r1
   16e68:	b282      	uxth	r2, r0
   16e6a:	f104 0169 	add.w	r1, r4, #105	; 0x69
   16e6e:	f104 0036 	add.w	r0, r4, #54	; 0x36
   16e72:	f7fd f9d3 	bl	1421c <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ>
   16e76:	f884 0044 	strb.w	r0, [r4, #68]	; 0x44
   16e7a:	7961      	ldrb	r1, [r4, #5]
   16e7c:	4653      	mov	r3, sl
   16e7e:	e000      	b.n	16e82 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xaaa>
   16e80:	e019      	b.n	16eb6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xade>
   16e82:	2201      	movs	r2, #1
   16e84:	4620      	mov	r0, r4
   16e86:	f000 f911 	bl	170ac <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xcd4>
   16e8a:	9006      	str	r0, [sp, #24]
   16e8c:	f8bd 0018 	ldrh.w	r0, [sp, #24]
   16e90:	f89d 101a 	ldrb.w	r1, [sp, #26]
   16e94:	2303      	movs	r3, #3
   16e96:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
   16e9a:	900a      	str	r0, [sp, #40]	; 0x28
   16e9c:	2204      	movs	r2, #4
   16e9e:	a90a      	add	r1, sp, #40	; 0x28
   16ea0:	68b8      	ldr	r0, [r7, #8]
   16ea2:	f009 fb65 	bl	20570 <sym_DEQ52UXGGOG3CBHCSM5ZCBFPFTNN2OZ3BBWERRI>
   16ea6:	464a      	mov	r2, r9
   16ea8:	6d21      	ldr	r1, [r4, #80]	; 0x50
   16eaa:	68b8      	ldr	r0, [r7, #8]
   16eac:	f009 faa2 	bl	203f4 <sym_CFSAKL745S6L7NUIQWHEM5VF373WPPG5ELNMOCA>
   16eb0:	89b0      	ldrh	r0, [r6, #12]
   16eb2:	4448      	add	r0, r9
   16eb4:	81b0      	strh	r0, [r6, #12]
   16eb6:	f015 0f20 	tst.w	r5, #32
   16eba:	d005      	beq.n	16ec8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xaf0>
   16ebc:	2312      	movs	r3, #18
   16ebe:	2205      	movs	r2, #5
   16ec0:	a901      	add	r1, sp, #4
   16ec2:	68b8      	ldr	r0, [r7, #8]
   16ec4:	f009 fb54 	bl	20570 <sym_DEQ52UXGGOG3CBHCSM5ZCBFPFTNN2OZ3BBWERRI>
   16ec8:	f015 0f40 	tst.w	r5, #64	; 0x40
   16ecc:	d013      	beq.n	16ef6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xb1e>
   16ece:	f1b8 0f00 	cmp.w	r8, #0
   16ed2:	bf1c      	itt	ne
   16ed4:	7965      	ldrbne	r5, [r4, #5]
   16ed6:	f894 1044 	ldrbne.w	r1, [r4, #68]	; 0x44
   16eda:	d056      	beq.n	16f8a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xbb2>
   16edc:	f994 2010 	ldrsb.w	r2, [r4, #16]
   16ee0:	4628      	mov	r0, r5
   16ee2:	f00c fb30 	bl	23546 <sym_WCPWOVVEASSG4MEQ4OYZCASM4KFKZK6VT6CIMIA>
   16ee6:	f88d 0018 	strb.w	r0, [sp, #24]
   16eea:	2301      	movs	r3, #1
   16eec:	2206      	movs	r2, #6
   16eee:	a906      	add	r1, sp, #24
   16ef0:	68b8      	ldr	r0, [r7, #8]
   16ef2:	f009 fb3d 	bl	20570 <sym_DEQ52UXGGOG3CBHCSM5ZCBFPFTNN2OZ3BBWERRI>
   16ef6:	69b0      	ldr	r0, [r6, #24]
   16ef8:	b3e0      	cbz	r0, 16f74 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xb9c>
   16efa:	3040      	adds	r0, #64	; 0x40
   16efc:	f00c fac2 	bl	23484 <sym_LNQ5OSSHLT2KR4OBXPN76EEGODICLRS65ENGIUY>
   16f00:	b3c0      	cbz	r0, 16f74 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xb9c>
   16f02:	69b0      	ldr	r0, [r6, #24]
   16f04:	f890 00a9 	ldrb.w	r0, [r0, #169]	; 0xa9
   16f08:	b3a0      	cbz	r0, 16f74 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xb9c>
   16f0a:	2107      	movs	r1, #7
   16f0c:	68b8      	ldr	r0, [r7, #8]
   16f0e:	f009 fac9 	bl	204a4 <sym_H3NF7V2EYDGPUFAQEJQIA2BFAJPUZD343N5IYHY>
   16f12:	2109      	movs	r1, #9
   16f14:	7001      	strb	r1, [r0, #0]
   16f16:	2132      	movs	r1, #50	; 0x32
   16f18:	7041      	strb	r1, [r0, #1]
   16f1a:	69b1      	ldr	r1, [r6, #24]
   16f1c:	f891 1090 	ldrb.w	r1, [r1, #144]	; 0x90
   16f20:	7081      	strb	r1, [r0, #2]
   16f22:	69b1      	ldr	r1, [r6, #24]
   16f24:	f8b1 1090 	ldrh.w	r1, [r1, #144]	; 0x90
   16f28:	0a09      	lsrs	r1, r1, #8
   16f2a:	70c1      	strb	r1, [r0, #3]
   16f2c:	69b1      	ldr	r1, [r6, #24]
   16f2e:	f8d1 1090 	ldr.w	r1, [r1, #144]	; 0x90
   16f32:	0c09      	lsrs	r1, r1, #16
   16f34:	7101      	strb	r1, [r0, #4]
   16f36:	69b1      	ldr	r1, [r6, #24]
   16f38:	f8d1 1090 	ldr.w	r1, [r1, #144]	; 0x90
   16f3c:	0e09      	lsrs	r1, r1, #24
   16f3e:	7141      	strb	r1, [r0, #5]
   16f40:	69b1      	ldr	r1, [r6, #24]
   16f42:	f891 10a1 	ldrb.w	r1, [r1, #161]	; 0xa1
   16f46:	7181      	strb	r1, [r0, #6]
   16f48:	69b1      	ldr	r1, [r6, #24]
   16f4a:	f8d1 2094 	ldr.w	r2, [r1, #148]	; 0x94
   16f4e:	f240 41e2 	movw	r1, #1250	; 0x4e2
   16f52:	fbb2 f2f1 	udiv	r2, r2, r1
   16f56:	71c2      	strb	r2, [r0, #7]
   16f58:	69b2      	ldr	r2, [r6, #24]
   16f5a:	f8d2 2098 	ldr.w	r2, [r2, #152]	; 0x98
   16f5e:	fbb2 f1f1 	udiv	r1, r2, r1
   16f62:	7201      	strb	r1, [r0, #8]
   16f64:	69b1      	ldr	r1, [r6, #24]
   16f66:	4a0c      	ldr	r2, [pc, #48]	; (16f98 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xbc0>)
   16f68:	f8d1 109c 	ldr.w	r1, [r1, #156]	; 0x9c
   16f6c:	fba2 2101 	umull	r2, r1, r2, r1
   16f70:	08c9      	lsrs	r1, r1, #3
   16f72:	7241      	strb	r1, [r0, #9]
   16f74:	2000      	movs	r0, #0
   16f76:	2800      	cmp	r0, #0
   16f78:	bf04      	itt	eq
   16f7a:	b00d      	addeq	sp, #52	; 0x34
   16f7c:	e8bd 8ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16f80:	f640 01fb 	movw	r1, #2299	; 0x8fb
   16f84:	202d      	movs	r0, #45	; 0x2d
   16f86:	f7fa fcfb 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   16f8a:	7925      	ldrb	r5, [r4, #4]
   16f8c:	f104 0030 	add.w	r0, r4, #48	; 0x30
   16f90:	f00a f9b1 	bl	212f6 <sym_PNT32LSDJE46MSUTWPAH2HUWQRO5OFWDB3SHPSY>
   16f94:	4601      	mov	r1, r0
   16f96:	e7a1      	b.n	16edc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xb04>
   16f98:	10624dd3 	.word	0x10624dd3
   16f9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16fa0:	4690      	mov	r8, r2
   16fa2:	460d      	mov	r5, r1
   16fa4:	4604      	mov	r4, r0
   16fa6:	2903      	cmp	r1, #3
   16fa8:	bf1b      	ittet	ne
   16faa:	f894 0080 	ldrbne.w	r0, [r4, #128]	; 0x80
   16fae:	2800      	cmpne	r0, #0
   16fb0:	f04f 0900 	moveq.w	r9, #0
   16fb4:	f04f 0901 	movne.w	r9, #1
   16fb8:	f005 f9f6 	bl	1c3a8 <sym_BNUQ5CI25DXEDLVOULTXPCKLL6P4CJJYO4G535I>
   16fbc:	4606      	mov	r6, r0
   16fbe:	2d03      	cmp	r5, #3
   16fc0:	d008      	beq.n	16fd4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xbfc>
   16fc2:	2701      	movs	r7, #1
   16fc4:	2d05      	cmp	r5, #5
   16fc6:	bf02      	ittt	eq
   16fc8:	78a0      	ldrbeq	r0, [r4, #2]
   16fca:	f010 0001 	andseq.w	r0, r0, #1
   16fce:	e8bd 87f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   16fd2:	e007      	b.n	16fe4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xc0c>
   16fd4:	78a0      	ldrb	r0, [r4, #2]
   16fd6:	2702      	movs	r7, #2
   16fd8:	f3c0 0040 	ubfx	r0, r0, #1, #1
   16fdc:	2800      	cmp	r0, #0
   16fde:	bf08      	it	eq
   16fe0:	e8bd 87f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   16fe4:	f1b9 0f00 	cmp.w	r9, #0
   16fe8:	d159      	bne.n	1709e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xcc6>
   16fea:	482e      	ldr	r0, [pc, #184]	; (170a4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xccc>)
   16fec:	7b80      	ldrb	r0, [r0, #14]
   16fee:	b140      	cbz	r0, 17002 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xc2a>
   16ff0:	f008 fff4 	bl	1ffdc <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>
   16ff4:	f888 0000 	strb.w	r0, [r8]
   16ff8:	28ff      	cmp	r0, #255	; 0xff
   16ffa:	d002      	beq.n	17002 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xc2a>
   16ffc:	f7fc fd72 	bl	13ae4 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI>
   17000:	4306      	orrs	r6, r0
   17002:	4d29      	ldr	r5, [pc, #164]	; (170a8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xcd0>)
   17004:	f894 206f 	ldrb.w	r2, [r4, #111]	; 0x6f
   17008:	f104 0370 	add.w	r3, r4, #112	; 0x70
   1700c:	68a9      	ldr	r1, [r5, #8]
   1700e:	f811 0b03 	ldrb.w	r0, [r1], #3
   17012:	f3c0 1080 	ubfx	r0, r0, #6, #1
   17016:	f008 ff6f 	bl	1fef8 <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
   1701a:	f898 1000 	ldrb.w	r1, [r8]
   1701e:	29ff      	cmp	r1, #255	; 0xff
   17020:	d004      	beq.n	1702c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xc54>
   17022:	b9b8      	cbnz	r0, 17054 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xc7c>
   17024:	7ee0      	ldrb	r0, [r4, #27]
   17026:	4288      	cmp	r0, r1
   17028:	d116      	bne.n	17058 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xc80>
   1702a:	e013      	b.n	17054 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xc7c>
   1702c:	b1a0      	cbz	r0, 17058 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xc80>
   1702e:	68a9      	ldr	r1, [r5, #8]
   17030:	f811 0b03 	ldrb.w	r0, [r1], #3
   17034:	f3c0 1080 	ubfx	r0, r0, #6, #1
   17038:	f7fc fd66 	bl	13b08 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
   1703c:	4680      	mov	r8, r0
   1703e:	f7fc fd87 	bl	13b50 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI>
   17042:	b138      	cbz	r0, 17054 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xc7c>
   17044:	4640      	mov	r0, r8
   17046:	f7fc fd0d 	bl	13a64 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
   1704a:	b118      	cbz	r0, 17054 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xc7c>
   1704c:	2110      	movs	r1, #16
   1704e:	f7fd f89f 	bl	14190 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
   17052:	b108      	cbz	r0, 17058 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xc80>
   17054:	2001      	movs	r0, #1
   17056:	e000      	b.n	1705a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xc82>
   17058:	2000      	movs	r0, #0
   1705a:	78a1      	ldrb	r1, [r4, #2]
   1705c:	f011 0f04 	tst.w	r1, #4
   17060:	d001      	beq.n	17066 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xc8e>
   17062:	b1e0      	cbz	r0, 1709e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xcc6>
   17064:	e018      	b.n	17098 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xcc0>
   17066:	b9be      	cbnz	r6, 17098 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xcc0>
   17068:	7c60      	ldrb	r0, [r4, #17]
   1706a:	2800      	cmp	r0, #0
   1706c:	bf18      	it	ne
   1706e:	42b8      	cmpne	r0, r7
   17070:	d115      	bne.n	1709e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xcc6>
   17072:	68a9      	ldr	r1, [r5, #8]
   17074:	f811 0b03 	ldrb.w	r0, [r1], #3
   17078:	f3c0 1080 	ubfx	r0, r0, #6, #1
   1707c:	f7fc fd44 	bl	13b08 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
   17080:	4604      	mov	r4, r0
   17082:	f7fc fd65 	bl	13b50 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI>
   17086:	b138      	cbz	r0, 17098 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xcc0>
   17088:	4620      	mov	r0, r4
   1708a:	f7fc fceb 	bl	13a64 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
   1708e:	b118      	cbz	r0, 17098 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xcc0>
   17090:	2110      	movs	r1, #16
   17092:	f7fd f87d 	bl	14190 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
   17096:	b110      	cbz	r0, 1709e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xcc6>
   17098:	2001      	movs	r0, #1
   1709a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1709e:	2000      	movs	r0, #0
   170a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   170a4:	200017a4 	.word	0x200017a4
   170a8:	2000016c 	.word	0x2000016c
   170ac:	b508      	push	{r3, lr}
   170ae:	f04f 0c00 	mov.w	ip, #0
   170b2:	f8cd c000 	str.w	ip, [sp]
   170b6:	2908      	cmp	r1, #8
   170b8:	bf04      	itt	eq
   170ba:	f44f 71c8 	moveq.w	r1, #400	; 0x190
   170be:	f04f 0c40 	moveq.w	ip, #64	; 0x40
   170c2:	d010      	beq.n	170e6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xd0e>
   170c4:	2904      	cmp	r1, #4
   170c6:	bf04      	itt	eq
   170c8:	f44f 71bf 	moveq.w	r1, #382	; 0x17e
   170cc:	f04f 0c10 	moveq.w	ip, #16
   170d0:	d009      	beq.n	170e6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xd0e>
   170d2:	2902      	cmp	r1, #2
   170d4:	bf07      	ittee	eq
   170d6:	f10c 0118 	addeq.w	r1, ip, #24
   170da:	f04f 0c04 	moveq.w	ip, #4
   170de:	f10c 0128 	addne.w	r1, ip, #40	; 0x28
   170e2:	f04f 0c08 	movne.w	ip, #8
   170e6:	1d5b      	adds	r3, r3, #5
   170e8:	fb13 130c 	smlabb	r3, r3, ip, r1
   170ec:	f890 c044 	ldrb.w	ip, [r0, #68]	; 0x44
   170f0:	f89d 1000 	ldrb.w	r1, [sp]
   170f4:	f36c 0105 	bfi	r1, ip, #0, #6
   170f8:	f041 0140 	orr.w	r1, r1, #64	; 0x40
   170fc:	f88d 1000 	strb.w	r1, [sp]
   17100:	7940      	ldrb	r0, [r0, #5]
   17102:	2801      	cmp	r0, #1
   17104:	d00b      	beq.n	1711e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xd46>
   17106:	2802      	cmp	r0, #2
   17108:	d010      	beq.n	1712c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xd54>
   1710a:	2804      	cmp	r0, #4
   1710c:	bf18      	it	ne
   1710e:	2808      	cmpne	r0, #8
   17110:	d012      	beq.n	17138 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xd60>
   17112:	f240 71b2 	movw	r1, #1970	; 0x7b2
   17116:	f04f 002d 	mov.w	r0, #45	; 0x2d
   1711a:	f7fa fc31 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1711e:	f89d 0002 	ldrb.w	r0, [sp, #2]
   17122:	f020 00e0 	bic.w	r0, r0, #224	; 0xe0
   17126:	f88d 0002 	strb.w	r0, [sp, #2]
   1712a:	e00c      	b.n	17146 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xd6e>
   1712c:	f89d 0002 	ldrb.w	r0, [sp, #2]
   17130:	f020 00e0 	bic.w	r0, r0, #224	; 0xe0
   17134:	3020      	adds	r0, #32
   17136:	e004      	b.n	17142 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xd6a>
   17138:	f89d 0002 	ldrb.w	r0, [sp, #2]
   1713c:	f020 00e0 	bic.w	r0, r0, #224	; 0xe0
   17140:	3040      	adds	r0, #64	; 0x40
   17142:	f88d 0002 	strb.w	r0, [sp, #2]
   17146:	20ca      	movs	r0, #202	; 0xca
   17148:	eb00 10c2 	add.w	r0, r0, r2, lsl #7
   1714c:	fb03 0002 	mla	r0, r3, r2, r0
   17150:	4a0e      	ldr	r2, [pc, #56]	; (1718c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xdb4>)
   17152:	4290      	cmp	r0, r2
   17154:	d304      	bcc.n	17160 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xd88>
   17156:	f240 71c6 	movw	r1, #1990	; 0x7c6
   1715a:	202d      	movs	r0, #45	; 0x2d
   1715c:	f7fa fc10 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   17160:	f021 0180 	bic.w	r1, r1, #128	; 0x80
   17164:	f88d 1000 	strb.w	r1, [sp]
   17168:	4909      	ldr	r1, [pc, #36]	; (17190 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xdb8>)
   1716a:	fba1 1000 	umull	r1, r0, r1, r0
   1716e:	f8bd 1001 	ldrh.w	r1, [sp, #1]
   17172:	0900      	lsrs	r0, r0, #4
   17174:	f360 010c 	bfi	r1, r0, #0, #13
   17178:	f8ad 1001 	strh.w	r1, [sp, #1]
   1717c:	f8bd 0000 	ldrh.w	r0, [sp]
   17180:	f89d 1002 	ldrb.w	r1, [sp, #2]
   17184:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
   17188:	bd08      	pop	{r3, pc}
   1718a:	0000      	.short	0x0000
   1718c:	0003bfc4 	.word	0x0003bfc4
   17190:	88888889 	.word	0x88888889
   17194:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17198:	4604      	mov	r4, r0
   1719a:	980a      	ldr	r0, [sp, #40]	; 0x28
   1719c:	f000 0a01 	and.w	sl, r0, #1
   171a0:	f3c0 0b40 	ubfx	fp, r0, #1, #1
   171a4:	f104 0026 	add.w	r0, r4, #38	; 0x26
   171a8:	28ff      	cmp	r0, #255	; 0xff
   171aa:	bf28      	it	cs
   171ac:	20ff      	movcs	r0, #255	; 0xff
   171ae:	300a      	adds	r0, #10
   171b0:	b280      	uxth	r0, r0
   171b2:	28ff      	cmp	r0, #255	; 0xff
   171b4:	bf28      	it	cs
   171b6:	20ff      	movcs	r0, #255	; 0xff
   171b8:	ea5a 0e0b 	orrs.w	lr, sl, fp
   171bc:	f1a4 0cd9 	sub.w	ip, r4, #217	; 0xd9
   171c0:	fa1f fc8c 	uxth.w	ip, ip
   171c4:	f10c 05f6 	add.w	r5, ip, #246	; 0xf6
   171c8:	f244 2655 	movw	r6, #16981	; 0x4255
   171cc:	fb05 f506 	mul.w	r5, r5, r6
   171d0:	ea4f 5595 	mov.w	r5, r5, lsr #22
   171d4:	9500      	str	r5, [sp, #0]
   171d6:	fb0c f506 	mul.w	r5, ip, r6
   171da:	ea4f 5895 	mov.w	r8, r5, lsr #22
   171de:	f008 05ff 	and.w	r5, r8, #255	; 0xff
   171e2:	f06f 06f6 	mvn.w	r6, #246	; 0xf6
   171e6:	fb15 f506 	smulbb	r5, r5, r6
   171ea:	eb05 070c 	add.w	r7, r5, ip
   171ee:	f107 0c08 	add.w	ip, r7, #8
   171f2:	fa1f fc8c 	uxth.w	ip, ip
   171f6:	f10c 0905 	add.w	r9, ip, #5
   171fa:	f04f 0c00 	mov.w	ip, #0
   171fe:	f44f 75c8 	mov.w	r5, #400	; 0x190
   17202:	f44f 76bf 	mov.w	r6, #382	; 0x17e
   17206:	f501 71a5 	add.w	r1, r1, #330	; 0x14a
   1720a:	f000 8116 	beq.w	1743a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1062>
   1720e:	f1bb 0f00 	cmp.w	fp, #0
   17212:	d017      	beq.n	17244 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xe6c>
   17214:	2a08      	cmp	r2, #8
   17216:	bf04      	itt	eq
   17218:	46ab      	moveq	fp, r5
   1721a:	2040      	moveq	r0, #64	; 0x40
   1721c:	d00c      	beq.n	17238 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xe60>
   1721e:	2a04      	cmp	r2, #4
   17220:	bf04      	itt	eq
   17222:	46b3      	moveq	fp, r6
   17224:	2010      	moveq	r0, #16
   17226:	d007      	beq.n	17238 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xe60>
   17228:	2a02      	cmp	r2, #2
   1722a:	bf07      	ittee	eq
   1722c:	f10c 0b18 	addeq.w	fp, ip, #24
   17230:	2004      	moveq	r0, #4
   17232:	f10c 0b28 	addne.w	fp, ip, #40	; 0x28
   17236:	2008      	movne	r0, #8
   17238:	eb00 0e80 	add.w	lr, r0, r0, lsl #2
   1723c:	eb0e 1080 	add.w	r0, lr, r0, lsl #6
   17240:	4458      	add	r0, fp
   17242:	e01a      	b.n	1727a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xea2>
   17244:	b1db      	cbz	r3, 1727e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xea6>
   17246:	2a08      	cmp	r2, #8
   17248:	bf04      	itt	eq
   1724a:	4628      	moveq	r0, r5
   1724c:	f04f 0b40 	moveq.w	fp, #64	; 0x40
   17250:	d00f      	beq.n	17272 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xe9a>
   17252:	2a04      	cmp	r2, #4
   17254:	bf04      	itt	eq
   17256:	4630      	moveq	r0, r6
   17258:	f04f 0b10 	moveq.w	fp, #16
   1725c:	d009      	beq.n	17272 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xe9a>
   1725e:	2a02      	cmp	r2, #2
   17260:	bf07      	ittee	eq
   17262:	f10c 0018 	addeq.w	r0, ip, #24
   17266:	f04f 0b04 	moveq.w	fp, #4
   1726a:	f10c 0028 	addne.w	r0, ip, #40	; 0x28
   1726e:	f04f 0b08 	movne.w	fp, #8
   17272:	eb0b 1b8b 	add.w	fp, fp, fp, lsl #6
   17276:	eb00 008b 	add.w	r0, r0, fp, lsl #2
   1727a:	4408      	add	r0, r1
   1727c:	e019      	b.n	172b2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xeda>
   1727e:	2a08      	cmp	r2, #8
   17280:	bf04      	itt	eq
   17282:	46ab      	moveq	fp, r5
   17284:	f04f 0e40 	moveq.w	lr, #64	; 0x40
   17288:	d00f      	beq.n	172aa <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xed2>
   1728a:	2a04      	cmp	r2, #4
   1728c:	bf04      	itt	eq
   1728e:	46b3      	moveq	fp, r6
   17290:	f04f 0e10 	moveq.w	lr, #16
   17294:	d009      	beq.n	172aa <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xed2>
   17296:	2a02      	cmp	r2, #2
   17298:	bf07      	ittee	eq
   1729a:	f10c 0b18 	addeq.w	fp, ip, #24
   1729e:	f04f 0e04 	moveq.w	lr, #4
   172a2:	f10c 0b28 	addne.w	fp, ip, #40	; 0x28
   172a6:	f04f 0e08 	movne.w	lr, #8
   172aa:	1d40      	adds	r0, r0, #5
   172ac:	fb00 100e 	mla	r0, r0, lr, r1
   172b0:	4458      	add	r0, fp
   172b2:	309c      	adds	r0, #156	; 0x9c
   172b4:	f002 010c 	and.w	r1, r2, #12
   172b8:	2900      	cmp	r1, #0
   172ba:	bf18      	it	ne
   172bc:	2128      	movne	r1, #40	; 0x28
   172be:	4408      	add	r0, r1
   172c0:	bf18      	it	ne
   172c2:	f500 6035 	addne.w	r0, r0, #2896	; 0xb50
   172c6:	d117      	bne.n	172f8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xf20>
   172c8:	2a08      	cmp	r2, #8
   172ca:	bf04      	itt	eq
   172cc:	46ab      	moveq	fp, r5
   172ce:	2140      	moveq	r1, #64	; 0x40
   172d0:	d00c      	beq.n	172ec <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xf14>
   172d2:	2a04      	cmp	r2, #4
   172d4:	bf04      	itt	eq
   172d6:	46b3      	moveq	fp, r6
   172d8:	2110      	moveq	r1, #16
   172da:	d007      	beq.n	172ec <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xf14>
   172dc:	2a02      	cmp	r2, #2
   172de:	bf07      	ittee	eq
   172e0:	f10c 0b18 	addeq.w	fp, ip, #24
   172e4:	2104      	moveq	r1, #4
   172e6:	f10c 0b28 	addne.w	fp, ip, #40	; 0x28
   172ea:	2108      	movne	r1, #8
   172ec:	ebc1 0ec1 	rsb	lr, r1, r1, lsl #3
   172f0:	eb0e 1141 	add.w	r1, lr, r1, lsl #5
   172f4:	4459      	add	r1, fp
   172f6:	4408      	add	r0, r1
   172f8:	3098      	adds	r0, #152	; 0x98
   172fa:	f1ba 0f00 	cmp.w	sl, #0
   172fe:	d018      	beq.n	17332 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xf5a>
   17300:	2a08      	cmp	r2, #8
   17302:	bf08      	it	eq
   17304:	2140      	moveq	r1, #64	; 0x40
   17306:	d00c      	beq.n	17322 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xf4a>
   17308:	2a04      	cmp	r2, #4
   1730a:	bf04      	itt	eq
   1730c:	4635      	moveq	r5, r6
   1730e:	2110      	moveq	r1, #16
   17310:	d007      	beq.n	17322 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xf4a>
   17312:	2a02      	cmp	r2, #2
   17314:	bf07      	ittee	eq
   17316:	f10c 0518 	addeq.w	r5, ip, #24
   1731a:	2104      	moveq	r1, #4
   1731c:	f10c 0528 	addne.w	r5, ip, #40	; 0x28
   17320:	2108      	movne	r1, #8
   17322:	eb01 0241 	add.w	r2, r1, r1, lsl #1
   17326:	eb02 1101 	add.w	r1, r2, r1, lsl #4
   1732a:	4429      	add	r1, r5
   1732c:	4408      	add	r0, r1
   1732e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17332:	b1db      	cbz	r3, 1736c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xf94>
   17334:	2a08      	cmp	r2, #8
   17336:	bf04      	itt	eq
   17338:	4629      	moveq	r1, r5
   1733a:	f04f 0a40 	moveq.w	sl, #64	; 0x40
   1733e:	d00f      	beq.n	17360 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xf88>
   17340:	2a04      	cmp	r2, #4
   17342:	bf04      	itt	eq
   17344:	4631      	moveq	r1, r6
   17346:	f04f 0a10 	moveq.w	sl, #16
   1734a:	d009      	beq.n	17360 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xf88>
   1734c:	2a02      	cmp	r2, #2
   1734e:	bf07      	ittee	eq
   17350:	f10c 0118 	addeq.w	r1, ip, #24
   17354:	f04f 0a04 	moveq.w	sl, #4
   17358:	f10c 0128 	addne.w	r1, ip, #40	; 0x28
   1735c:	f04f 0a08 	movne.w	sl, #8
   17360:	eb0a 1a8a 	add.w	sl, sl, sl, lsl #6
   17364:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   17368:	4408      	add	r0, r1
   1736a:	e01f      	b.n	173ac <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xfd4>
   1736c:	f104 010e 	add.w	r1, r4, #14
   17370:	29ff      	cmp	r1, #255	; 0xff
   17372:	bf28      	it	cs
   17374:	21ff      	movcs	r1, #255	; 0xff
   17376:	b289      	uxth	r1, r1
   17378:	2a08      	cmp	r2, #8
   1737a:	bf04      	itt	eq
   1737c:	46aa      	moveq	sl, r5
   1737e:	f04f 0b40 	moveq.w	fp, #64	; 0x40
   17382:	d00f      	beq.n	173a4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xfcc>
   17384:	2a04      	cmp	r2, #4
   17386:	bf04      	itt	eq
   17388:	46b2      	moveq	sl, r6
   1738a:	f04f 0b10 	moveq.w	fp, #16
   1738e:	d009      	beq.n	173a4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xfcc>
   17390:	2a02      	cmp	r2, #2
   17392:	bf07      	ittee	eq
   17394:	f10c 0a18 	addeq.w	sl, ip, #24
   17398:	f04f 0b04 	moveq.w	fp, #4
   1739c:	f10c 0a28 	addne.w	sl, ip, #40	; 0x28
   173a0:	f04f 0b08 	movne.w	fp, #8
   173a4:	1d49      	adds	r1, r1, #5
   173a6:	fb01 000b 	mla	r0, r1, fp, r0
   173aa:	4450      	add	r0, sl
   173ac:	2cd9      	cmp	r4, #217	; 0xd9
   173ae:	bf98      	it	ls
   173b0:	e8bd 8ff8 	ldmials.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   173b4:	b193      	cbz	r3, 173dc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1004>
   173b6:	9900      	ldr	r1, [sp, #0]
   173b8:	2a08      	cmp	r2, #8
   173ba:	d07d      	beq.n	174b8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x10e0>
   173bc:	2a04      	cmp	r2, #4
   173be:	d07c      	beq.n	174ba <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x10e2>
   173c0:	2a02      	cmp	r2, #2
   173c2:	d07b      	beq.n	174bc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x10e4>
   173c4:	e080      	b.n	174c8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x10f0>
   173c6:	bf00      	nop
   173c8:	eb02 1282 	add.w	r2, r2, r2, lsl #6
   173cc:	eb05 0282 	add.w	r2, r5, r2, lsl #2
   173d0:	f502 72a5 	add.w	r2, r2, #330	; 0x14a
   173d4:	fb01 0002 	mla	r0, r1, r2, r0
   173d8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   173dc:	f008 01ff 	and.w	r1, r8, #255	; 0xff
   173e0:	2a08      	cmp	r2, #8
   173e2:	bf04      	itt	eq
   173e4:	462b      	moveq	r3, r5
   173e6:	2440      	moveq	r4, #64	; 0x40
   173e8:	d00c      	beq.n	17404 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x102c>
   173ea:	2a04      	cmp	r2, #4
   173ec:	bf04      	itt	eq
   173ee:	4633      	moveq	r3, r6
   173f0:	2410      	moveq	r4, #16
   173f2:	d007      	beq.n	17404 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x102c>
   173f4:	2a02      	cmp	r2, #2
   173f6:	bf07      	ittee	eq
   173f8:	f10c 0318 	addeq.w	r3, ip, #24
   173fc:	2404      	moveq	r4, #4
   173fe:	f10c 0328 	addne.w	r3, ip, #40	; 0x28
   17402:	2408      	movne	r4, #8
   17404:	eb04 1484 	add.w	r4, r4, r4, lsl #6
   17408:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   1740c:	f503 73a5 	add.w	r3, r3, #330	; 0x14a
   17410:	fb01 0003 	mla	r0, r1, r3, r0
   17414:	0439      	lsls	r1, r7, #16
   17416:	0c09      	lsrs	r1, r1, #16
   17418:	bf08      	it	eq
   1741a:	e8bd 8ff8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1741e:	2a08      	cmp	r2, #8
   17420:	d07e      	beq.n	17520 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1148>
   17422:	2a04      	cmp	r2, #4
   17424:	d07d      	beq.n	17522 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x114a>
   17426:	2a02      	cmp	r2, #2
   17428:	d07c      	beq.n	17524 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x114c>
   1742a:	e085      	b.n	17538 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1160>
   1742c:	fb09 0001 	mla	r0, r9, r1, r0
   17430:	4428      	add	r0, r5
   17432:	f500 70a5 	add.w	r0, r0, #330	; 0x14a
   17436:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1743a:	b1db      	cbz	r3, 17474 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x109c>
   1743c:	2a08      	cmp	r2, #8
   1743e:	bf04      	itt	eq
   17440:	4628      	moveq	r0, r5
   17442:	f04f 0a40 	moveq.w	sl, #64	; 0x40
   17446:	d00f      	beq.n	17468 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1090>
   17448:	2a04      	cmp	r2, #4
   1744a:	bf04      	itt	eq
   1744c:	4630      	moveq	r0, r6
   1744e:	f04f 0a10 	moveq.w	sl, #16
   17452:	d009      	beq.n	17468 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1090>
   17454:	2a02      	cmp	r2, #2
   17456:	bf07      	ittee	eq
   17458:	f10c 0018 	addeq.w	r0, ip, #24
   1745c:	f04f 0a04 	moveq.w	sl, #4
   17460:	f10c 0028 	addne.w	r0, ip, #40	; 0x28
   17464:	f04f 0a08 	movne.w	sl, #8
   17468:	eb0a 1a8a 	add.w	sl, sl, sl, lsl #6
   1746c:	eb00 008a 	add.w	r0, r0, sl, lsl #2
   17470:	4408      	add	r0, r1
   17472:	e019      	b.n	174a8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x10d0>
   17474:	2a08      	cmp	r2, #8
   17476:	bf04      	itt	eq
   17478:	46aa      	moveq	sl, r5
   1747a:	f04f 0b40 	moveq.w	fp, #64	; 0x40
   1747e:	d00f      	beq.n	174a0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x10c8>
   17480:	2a04      	cmp	r2, #4
   17482:	bf04      	itt	eq
   17484:	46b2      	moveq	sl, r6
   17486:	f04f 0b10 	moveq.w	fp, #16
   1748a:	d009      	beq.n	174a0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x10c8>
   1748c:	2a02      	cmp	r2, #2
   1748e:	bf07      	ittee	eq
   17490:	f10c 0a18 	addeq.w	sl, ip, #24
   17494:	f04f 0b04 	moveq.w	fp, #4
   17498:	f10c 0a28 	addne.w	sl, ip, #40	; 0x28
   1749c:	f04f 0b08 	movne.w	fp, #8
   174a0:	1d40      	adds	r0, r0, #5
   174a2:	fb00 100b 	mla	r0, r0, fp, r1
   174a6:	4450      	add	r0, sl
   174a8:	2cd9      	cmp	r4, #217	; 0xd9
   174aa:	bf98      	it	ls
   174ac:	e8bd 8ff8 	ldmials.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   174b0:	b1bb      	cbz	r3, 174e2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x110a>
   174b2:	9900      	ldr	r1, [sp, #0]
   174b4:	2a08      	cmp	r2, #8
   174b6:	e002      	b.n	174be <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x10e6>
   174b8:	e00d      	b.n	174d6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x10fe>
   174ba:	e009      	b.n	174d0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x10f8>
   174bc:	e00d      	b.n	174da <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1102>
   174be:	d00a      	beq.n	174d6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x10fe>
   174c0:	2a04      	cmp	r2, #4
   174c2:	d005      	beq.n	174d0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x10f8>
   174c4:	2a02      	cmp	r2, #2
   174c6:	d008      	beq.n	174da <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1102>
   174c8:	f10c 0528 	add.w	r5, ip, #40	; 0x28
   174cc:	2208      	movs	r2, #8
   174ce:	e77b      	b.n	173c8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xff0>
   174d0:	4635      	mov	r5, r6
   174d2:	2210      	movs	r2, #16
   174d4:	e778      	b.n	173c8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xff0>
   174d6:	2240      	movs	r2, #64	; 0x40
   174d8:	e776      	b.n	173c8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xff0>
   174da:	f10c 0518 	add.w	r5, ip, #24
   174de:	2204      	movs	r2, #4
   174e0:	e772      	b.n	173c8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xff0>
   174e2:	f008 01ff 	and.w	r1, r8, #255	; 0xff
   174e6:	2a08      	cmp	r2, #8
   174e8:	bf04      	itt	eq
   174ea:	462b      	moveq	r3, r5
   174ec:	2440      	moveq	r4, #64	; 0x40
   174ee:	d00c      	beq.n	1750a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1132>
   174f0:	2a04      	cmp	r2, #4
   174f2:	bf04      	itt	eq
   174f4:	4633      	moveq	r3, r6
   174f6:	2410      	moveq	r4, #16
   174f8:	d007      	beq.n	1750a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1132>
   174fa:	2a02      	cmp	r2, #2
   174fc:	bf07      	ittee	eq
   174fe:	f10c 0318 	addeq.w	r3, ip, #24
   17502:	2404      	moveq	r4, #4
   17504:	f10c 0328 	addne.w	r3, ip, #40	; 0x28
   17508:	2408      	movne	r4, #8
   1750a:	eb04 1484 	add.w	r4, r4, r4, lsl #6
   1750e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   17512:	f503 73a5 	add.w	r3, r3, #330	; 0x14a
   17516:	fb01 0003 	mla	r0, r1, r3, r0
   1751a:	0439      	lsls	r1, r7, #16
   1751c:	0c09      	lsrs	r1, r1, #16
   1751e:	e002      	b.n	17526 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x114e>
   17520:	e011      	b.n	17546 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x116e>
   17522:	e00d      	b.n	17540 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1168>
   17524:	e011      	b.n	1754a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1172>
   17526:	bf08      	it	eq
   17528:	e8bd 8ff8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1752c:	2a08      	cmp	r2, #8
   1752e:	d00a      	beq.n	17546 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x116e>
   17530:	2a04      	cmp	r2, #4
   17532:	d005      	beq.n	17540 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1168>
   17534:	2a02      	cmp	r2, #2
   17536:	d008      	beq.n	1754a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1172>
   17538:	f10c 0528 	add.w	r5, ip, #40	; 0x28
   1753c:	2108      	movs	r1, #8
   1753e:	e775      	b.n	1742c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1054>
   17540:	4635      	mov	r5, r6
   17542:	2110      	movs	r1, #16
   17544:	e772      	b.n	1742c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1054>
   17546:	2140      	movs	r1, #64	; 0x40
   17548:	e770      	b.n	1742c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1054>
   1754a:	f10c 0518 	add.w	r5, ip, #24
   1754e:	2104      	movs	r1, #4
   17550:	e76c      	b.n	1742c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1054>
   17552:	0000      	movs	r0, r0
   17554:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17558:	4604      	mov	r4, r0
   1755a:	f8b0 0048 	ldrh.w	r0, [r0, #72]	; 0x48
   1755e:	4e30      	ldr	r6, [pc, #192]	; (17620 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1248>)
   17560:	1c40      	adds	r0, r0, #1
   17562:	f8a4 0048 	strh.w	r0, [r4, #72]	; 0x48
   17566:	7bb0      	ldrb	r0, [r6, #14]
   17568:	2500      	movs	r5, #0
   1756a:	b120      	cbz	r0, 17576 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x119e>
   1756c:	f004 fee8 	bl	1c340 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
   17570:	f004 fcc0 	bl	1bef4 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
   17574:	73b5      	strb	r5, [r6, #14]
   17576:	7035      	strb	r5, [r6, #0]
   17578:	f894 0081 	ldrb.w	r0, [r4, #129]	; 0x81
   1757c:	b128      	cbz	r0, 1758a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x11b2>
   1757e:	4620      	mov	r0, r4
   17580:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   17584:	2101      	movs	r1, #1
   17586:	f009 bfa2 	b.w	214ce <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>
   1758a:	7b60      	ldrb	r0, [r4, #13]
   1758c:	2800      	cmp	r0, #0
   1758e:	d040      	beq.n	17612 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x123a>
   17590:	f8b4 1048 	ldrh.w	r1, [r4, #72]	; 0x48
   17594:	4288      	cmp	r0, r1
   17596:	d83c      	bhi.n	17612 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x123a>
   17598:	2101      	movs	r1, #1
   1759a:	4620      	mov	r0, r4
   1759c:	f009 ff97 	bl	214ce <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>
   175a0:	78a0      	ldrb	r0, [r4, #2]
   175a2:	f010 0f01 	tst.w	r0, #1
   175a6:	d020      	beq.n	175ea <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1212>
   175a8:	6a20      	ldr	r0, [r4, #32]
   175aa:	2643      	movs	r6, #67	; 0x43
   175ac:	8807      	ldrh	r7, [r0, #0]
   175ae:	f004 fb89 	bl	1bcc4 <sym_ZT5CPONXDAFRAB5RWMA6LXPAT5TEFYV2YKU6P6A>
   175b2:	2800      	cmp	r0, #0
   175b4:	bf18      	it	ne
   175b6:	e8bd 81f0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, pc}
   175ba:	7820      	ldrb	r0, [r4, #0]
   175bc:	f884 00bb 	strb.w	r0, [r4, #187]	; 0xbb
   175c0:	f8a4 70bc 	strh.w	r7, [r4, #188]	; 0xbc
   175c4:	f884 60ba 	strb.w	r6, [r4, #186]	; 0xba
   175c8:	7b60      	ldrb	r0, [r4, #13]
   175ca:	b910      	cbnz	r0, 175d2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x11fa>
   175cc:	f884 50be 	strb.w	r5, [r4, #190]	; 0xbe
   175d0:	e003      	b.n	175da <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1202>
   175d2:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
   175d6:	f884 00be 	strb.w	r0, [r4, #190]	; 0xbe
   175da:	4621      	mov	r1, r4
   175dc:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
   175e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   175e4:	2214      	movs	r2, #20
   175e6:	f7fc bfb1 	b.w	1454c <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
   175ea:	f64f 77ff 	movw	r7, #65535	; 0xffff
   175ee:	2643      	movs	r6, #67	; 0x43
   175f0:	f004 fb68 	bl	1bcc4 <sym_ZT5CPONXDAFRAB5RWMA6LXPAT5TEFYV2YKU6P6A>
   175f4:	2800      	cmp	r0, #0
   175f6:	bf18      	it	ne
   175f8:	e8bd 81f0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, pc}
   175fc:	7820      	ldrb	r0, [r4, #0]
   175fe:	f884 00bb 	strb.w	r0, [r4, #187]	; 0xbb
   17602:	f8a4 70bc 	strh.w	r7, [r4, #188]	; 0xbc
   17606:	f884 60ba 	strb.w	r6, [r4, #186]	; 0xba
   1760a:	7b60      	ldrb	r0, [r4, #13]
   1760c:	2800      	cmp	r0, #0
   1760e:	d1e0      	bne.n	175d2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x11fa>
   17610:	e7dc      	b.n	175cc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x11f4>
   17612:	4620      	mov	r0, r4
   17614:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   17618:	2100      	movs	r1, #0
   1761a:	f009 bf58 	b.w	214ce <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>
   1761e:	0000      	.short	0x0000
   17620:	200017a4 	.word	0x200017a4
   17624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17626:	790a      	ldrb	r2, [r1, #4]
   17628:	f012 0f18 	tst.w	r2, #24
   1762c:	d15e      	bne.n	176ec <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1314>
   1762e:	4605      	mov	r5, r0
   17630:	000c      	movs	r4, r1
   17632:	d028      	beq.n	17686 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x12ae>
   17634:	6820      	ldr	r0, [r4, #0]
   17636:	2800      	cmp	r0, #0
   17638:	d02a      	beq.n	17690 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x12b8>
   1763a:	f009 fe4c 	bl	212d6 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
   1763e:	7b23      	ldrb	r3, [r4, #12]
   17640:	7b62      	ldrb	r2, [r4, #13]
   17642:	2b04      	cmp	r3, #4
   17644:	bf08      	it	eq
   17646:	2308      	moveq	r3, #8
   17648:	2a04      	cmp	r2, #4
   1764a:	bf08      	it	eq
   1764c:	2208      	moveq	r2, #8
   1764e:	492a      	ldr	r1, [pc, #168]	; (176f8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1320>)
   17650:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
   17654:	2b08      	cmp	r3, #8
   17656:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
   1765a:	f201 31e7 	addw	r1, r1, #999	; 0x3e7
   1765e:	fbb1 f7fc 	udiv	r7, r1, ip
   17662:	bf08      	it	eq
   17664:	f04f 0c40 	moveq.w	ip, #64	; 0x40
   17668:	d017      	beq.n	1769a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x12c2>
   1766a:	2b04      	cmp	r3, #4
   1766c:	bf08      	it	eq
   1766e:	f04f 0c10 	moveq.w	ip, #16
   17672:	d012      	beq.n	1769a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x12c2>
   17674:	2b02      	cmp	r3, #2
   17676:	bf07      	ittee	eq
   17678:	f04f 0c04 	moveq.w	ip, #4
   1767c:	2112      	moveq	r1, #18
   1767e:	f04f 0c08 	movne.w	ip, #8
   17682:	2119      	movne	r1, #25
   17684:	e00a      	b.n	1769c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x12c4>
   17686:	f240 410a 	movw	r1, #1034	; 0x40a
   1768a:	202d      	movs	r0, #45	; 0x2d
   1768c:	f7fa f978 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   17690:	f240 410b 	movw	r1, #1035	; 0x40b
   17694:	202d      	movs	r0, #45	; 0x2d
   17696:	f7fa f973 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1769a:	2114      	movs	r1, #20
   1769c:	fb1c f101 	smulbb	r1, ip, r1
   176a0:	2600      	movs	r6, #0
   176a2:	2b08      	cmp	r3, #8
   176a4:	bf08      	it	eq
   176a6:	f04f 0c40 	moveq.w	ip, #64	; 0x40
   176aa:	d021      	beq.n	176f0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1318>
   176ac:	2b04      	cmp	r3, #4
   176ae:	bf08      	it	eq
   176b0:	f04f 0c2e 	moveq.w	ip, #46	; 0x2e
   176b4:	d01c      	beq.n	176f0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1318>
   176b6:	46b4      	mov	ip, r6
   176b8:	2b02      	cmp	r3, #2
   176ba:	bf0c      	ite	eq
   176bc:	2318      	moveq	r3, #24
   176be:	2328      	movne	r3, #40	; 0x28
   176c0:	4463      	add	r3, ip
   176c2:	4419      	add	r1, r3
   176c4:	fb11 7100 	smlabb	r1, r1, r0, r7
   176c8:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   176cc:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
   176d0:	4401      	add	r1, r0
   176d2:	88a0      	ldrh	r0, [r4, #4]
   176d4:	9000      	str	r0, [sp, #0]
   176d6:	2300      	movs	r3, #0
   176d8:	4628      	mov	r0, r5
   176da:	f7ff fd5b 	bl	17194 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xdbc>
   176de:	68a1      	ldr	r1, [r4, #8]
   176e0:	f200 100b 	addw	r0, r0, #267	; 0x10b
   176e4:	4281      	cmp	r1, r0
   176e6:	bf3c      	itt	cc
   176e8:	4630      	movcc	r0, r6
   176ea:	bdf8      	popcc	{r3, r4, r5, r6, r7, pc}
   176ec:	2001      	movs	r0, #1
   176ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   176f0:	f44f 73a8 	mov.w	r3, #336	; 0x150
   176f4:	e7e4      	b.n	176c0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x12e8>
   176f6:	0000      	.short	0x0000
   176f8:	00017b80 	.word	0x00017b80
   176fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   176fe:	4604      	mov	r4, r0
   17700:	f890 008e 	ldrb.w	r0, [r0, #142]	; 0x8e
   17704:	4616      	mov	r6, r2
   17706:	460d      	mov	r5, r1
   17708:	f88d 0000 	strb.w	r0, [sp]
   1770c:	f89d 0000 	ldrb.w	r0, [sp]
   17710:	b120      	cbz	r0, 1771c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1344>
   17712:	f640 416b 	movw	r1, #3179	; 0xc6b
   17716:	202d      	movs	r0, #45	; 0x2d
   17718:	f7fa f932 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1771c:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
   17720:	8828      	ldrh	r0, [r5, #0]
   17722:	f8a4 0092 	strh.w	r0, [r4, #146]	; 0x92
   17726:	2b00      	cmp	r3, #0
   17728:	bf18      	it	ne
   1772a:	bdf8      	popne	{r3, r4, r5, r6, r7, pc}
   1772c:	6968      	ldr	r0, [r5, #20]
   1772e:	f008 fca7 	bl	20080 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
   17732:	f8a4 00a8 	strh.w	r0, [r4, #168]	; 0xa8
   17736:	8ba8      	ldrh	r0, [r5, #28]
   17738:	f8a4 00aa 	strh.w	r0, [r4, #170]	; 0xaa
   1773c:	8be8      	ldrh	r0, [r5, #30]
   1773e:	f8a4 00ac 	strh.w	r0, [r4, #172]	; 0xac
   17742:	f895 0297 	ldrb.w	r0, [r5, #663]	; 0x297
   17746:	f884 00ae 	strb.w	r0, [r4, #174]	; 0xae
   1774a:	7ea0      	ldrb	r0, [r4, #26]
   1774c:	2100      	movs	r1, #0
   1774e:	b148      	cbz	r0, 17764 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x138c>
   17750:	f894 0068 	ldrb.w	r0, [r4, #104]	; 0x68
   17754:	2801      	cmp	r0, #1
   17756:	d105      	bne.n	17764 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x138c>
   17758:	f894 006e 	ldrb.w	r0, [r4, #110]	; 0x6e
   1775c:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   17760:	2840      	cmp	r0, #64	; 0x40
   17762:	d02e      	beq.n	177c2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x13ea>
   17764:	f894 0082 	ldrb.w	r0, [r4, #130]	; 0x82
   17768:	b140      	cbz	r0, 1777c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x13a4>
   1776a:	f894 0068 	ldrb.w	r0, [r4, #104]	; 0x68
   1776e:	2801      	cmp	r0, #1
   17770:	bf04      	itt	eq
   17772:	f894 006e 	ldrbeq.w	r0, [r4, #110]	; 0x6e
   17776:	f010 0fc0 	tsteq.w	r0, #192	; 0xc0
   1777a:	d022      	beq.n	177c2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x13ea>
   1777c:	f8c4 109c 	str.w	r1, [r4, #156]	; 0x9c
   17780:	f8a4 10a0 	strh.w	r1, [r4, #160]	; 0xa0
   17784:	481c      	ldr	r0, [pc, #112]	; (177f8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1420>)
   17786:	2eff      	cmp	r6, #255	; 0xff
   17788:	6880      	ldr	r0, [r0, #8]
   1778a:	7801      	ldrb	r1, [r0, #0]
   1778c:	f3c1 1180 	ubfx	r1, r1, #6, #1
   17790:	f884 1095 	strb.w	r1, [r4, #149]	; 0x95
   17794:	f8d0 1003 	ldr.w	r1, [r0, #3]
   17798:	d021      	beq.n	177de <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1406>
   1779a:	f8c4 10a2 	str.w	r1, [r4, #162]	; 0xa2
   1779e:	f8b0 0007 	ldrh.w	r0, [r0, #7]
   177a2:	f8a4 00a6 	strh.w	r0, [r4, #166]	; 0xa6
   177a6:	f104 0296 	add.w	r2, r4, #150	; 0x96
   177aa:	1e51      	subs	r1, r2, #1
   177ac:	4630      	mov	r0, r6
   177ae:	f7fc f97f 	bl	13ab0 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
   177b2:	b178      	cbz	r0, 177d4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x13fc>
   177b4:	f894 0095 	ldrb.w	r0, [r4, #149]	; 0x95
   177b8:	f040 0002 	orr.w	r0, r0, #2
   177bc:	f884 0095 	strb.w	r0, [r4, #149]	; 0x95
   177c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   177c2:	f8d4 0069 	ldr.w	r0, [r4, #105]	; 0x69
   177c6:	f8c4 009c 	str.w	r0, [r4, #156]	; 0x9c
   177ca:	f8b4 006d 	ldrh.w	r0, [r4, #109]	; 0x6d
   177ce:	f8a4 00a0 	strh.w	r0, [r4, #160]	; 0xa0
   177d2:	e7d7      	b.n	17784 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x13ac>
   177d4:	f640 418c 	movw	r1, #3212	; 0xc8c
   177d8:	202d      	movs	r0, #45	; 0x2d
   177da:	f7fa f8d1 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   177de:	f8c4 1096 	str.w	r1, [r4, #150]	; 0x96
   177e2:	f8b0 0007 	ldrh.w	r0, [r0, #7]
   177e6:	f8a4 009a 	strh.w	r0, [r4, #154]	; 0x9a
   177ea:	f104 00a2 	add.w	r0, r4, #162	; 0xa2
   177ee:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   177f2:	f00b bed4 	b.w	2359e <sym_IBALR6WOCZYA342JRYG44MFHRUIKXGWY4MGXZLY>
   177f6:	0000      	.short	0x0000
   177f8:	2000016c 	.word	0x2000016c
   177fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17800:	b083      	sub	sp, #12
   17802:	4e5a      	ldr	r6, [pc, #360]	; (1796c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1594>)
   17804:	f04f 0aff 	mov.w	sl, #255	; 0xff
   17808:	4604      	mov	r4, r0
   1780a:	f88d a000 	strb.w	sl, [sp]
   1780e:	68b0      	ldr	r0, [r6, #8]
   17810:	f04f 0b01 	mov.w	fp, #1
   17814:	466a      	mov	r2, sp
   17816:	7801      	ldrb	r1, [r0, #0]
   17818:	f3c1 1880 	ubfx	r8, r1, #6, #1
   1781c:	f8d0 1003 	ldr.w	r1, [r0, #3]
   17820:	9101      	str	r1, [sp, #4]
   17822:	f8b0 0007 	ldrh.w	r0, [r0, #7]
   17826:	f8ad 0008 	strh.w	r0, [sp, #8]
   1782a:	2105      	movs	r1, #5
   1782c:	4620      	mov	r0, r4
   1782e:	f7ff fbb5 	bl	16f9c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xbc4>
   17832:	2800      	cmp	r0, #0
   17834:	d07e      	beq.n	17934 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x155c>
   17836:	68b0      	ldr	r0, [r6, #8]
   17838:	6a25      	ldr	r5, [r4, #32]
   1783a:	7967      	ldrb	r7, [r4, #5]
   1783c:	f8d0 100f 	ldr.w	r1, [r0, #15]
   17840:	61a9      	str	r1, [r5, #24]
   17842:	f8d0 1013 	ldr.w	r1, [r0, #19]
   17846:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   1784a:	6229      	str	r1, [r5, #32]
   1784c:	f8b0 0019 	ldrh.w	r0, [r0, #25]
   17850:	f008 fc0a 	bl	20068 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
   17854:	4681      	mov	r9, r0
   17856:	6168      	str	r0, [r5, #20]
   17858:	68b0      	ldr	r0, [r6, #8]
   1785a:	4649      	mov	r1, r9
   1785c:	7d80      	ldrb	r0, [r0, #22]
   1785e:	f008 fd9d 	bl	2039c <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
   17862:	8528      	strh	r0, [r5, #40]	; 0x28
   17864:	68b0      	ldr	r0, [r6, #8]
   17866:	4649      	mov	r1, r9
   17868:	f8b0 0017 	ldrh.w	r0, [r0, #23]
   1786c:	f008 fd8d 	bl	2038a <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>
   17870:	6268      	str	r0, [r5, #36]	; 0x24
   17872:	68b0      	ldr	r0, [r6, #8]
   17874:	f8b0 101b 	ldrh.w	r1, [r0, #27]
   17878:	83a9      	strh	r1, [r5, #28]
   1787a:	f8b0 101d 	ldrh.w	r1, [r0, #29]
   1787e:	83e9      	strh	r1, [r5, #30]
   17880:	f100 011f 	add.w	r1, r0, #31
   17884:	f105 00be 	add.w	r0, r5, #190	; 0xbe
   17888:	f00b fe7b 	bl	23582 <sym_VCM3BICZ5QLCEBBK5263KDY2XJT4MJLUF43FCFA>
   1788c:	68b0      	ldr	r0, [r6, #8]
   1788e:	f890 1024 	ldrb.w	r1, [r0, #36]	; 0x24
   17892:	f001 011f 	and.w	r1, r1, #31
   17896:	f885 10c9 	strb.w	r1, [r5, #201]	; 0xc9
   1789a:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
   1789e:	0940      	lsrs	r0, r0, #5
   178a0:	f885 0297 	strb.w	r0, [r5, #663]	; 0x297
   178a4:	f885 706e 	strb.w	r7, [r5, #110]	; 0x6e
   178a8:	f105 0066 	add.w	r0, r5, #102	; 0x66
   178ac:	f885 706f 	strb.w	r7, [r5, #111]	; 0x6f
   178b0:	f880 a00a 	strb.w	sl, [r0, #10]
   178b4:	f017 0f0c 	tst.w	r7, #12
   178b8:	bf0c      	ite	eq
   178ba:	2100      	moveq	r1, #0
   178bc:	2101      	movne	r1, #1
   178be:	f105 0030 	add.w	r0, r5, #48	; 0x30
   178c2:	f009 fa3c 	bl	20d3e <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>
   178c6:	7c20      	ldrb	r0, [r4, #16]
   178c8:	f885 0072 	strb.w	r0, [r5, #114]	; 0x72
   178cc:	2300      	movs	r3, #0
   178ce:	f89d 2000 	ldrb.w	r2, [sp]
   178d2:	4620      	mov	r0, r4
   178d4:	6a21      	ldr	r1, [r4, #32]
   178d6:	f7ff ff11 	bl	176fc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1324>
   178da:	6a20      	ldr	r0, [r4, #32]
   178dc:	2201      	movs	r2, #1
   178de:	8801      	ldrh	r1, [r0, #0]
   178e0:	f8a4 10ca 	strh.w	r1, [r4, #202]	; 0xca
   178e4:	f890 10bd 	ldrb.w	r1, [r0, #189]	; 0xbd
   178e8:	f884 10cc 	strb.w	r1, [r4, #204]	; 0xcc
   178ec:	4621      	mov	r1, r4
   178ee:	f000 fc7d 	bl	181ec <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ>
   178f2:	481f      	ldr	r0, [pc, #124]	; (17970 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1598>)
   178f4:	2100      	movs	r1, #0
   178f6:	ad01      	add	r5, sp, #4
   178f8:	6807      	ldr	r7, [r0, #0]
   178fa:	68b0      	ldr	r0, [r6, #8]
   178fc:	8001      	strh	r1, [r0, #0]
   178fe:	2108      	movs	r1, #8
   17900:	f008 fecb 	bl	2069a <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>
   17904:	2100      	movs	r1, #0
   17906:	68b0      	ldr	r0, [r6, #8]
   17908:	f008 fd8b 	bl	20422 <sym_IUN5SW63ODKDFPSGCV4FO7HO5IPKZTFTURF2JKI>
   1790c:	2200      	movs	r2, #0
   1790e:	4639      	mov	r1, r7
   17910:	68b0      	ldr	r0, [r6, #8]
   17912:	f008 fd8f 	bl	20434 <sym_WLQ6YP4CLBLEMT6X4SKN2P2RM7K53RQFGIL5RPY>
   17916:	2306      	movs	r3, #6
   17918:	2200      	movs	r2, #0
   1791a:	f104 0169 	add.w	r1, r4, #105	; 0x69
   1791e:	68b0      	ldr	r0, [r6, #8]
   17920:	f008 fe26 	bl	20570 <sym_DEQ52UXGGOG3CBHCSM5ZCBFPFTNN2OZ3BBWERRI>
   17924:	f894 1068 	ldrb.w	r1, [r4, #104]	; 0x68
   17928:	68b0      	ldr	r0, [r6, #8]
   1792a:	f008 feef 	bl	2070c <sym_YBOODJ7VBLXRRILCBQXIORIXU3GHRAYK6WULLQY>
   1792e:	4641      	mov	r1, r8
   17930:	68b0      	ldr	r0, [r6, #8]
   17932:	e000      	b.n	17936 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x155e>
   17934:	e012      	b.n	1795c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1584>
   17936:	f008 fed9 	bl	206ec <sym_NAGMMCXDNSRJLJ55T6DS4CG2FNZEN6Y562ZTFRY>
   1793a:	2306      	movs	r3, #6
   1793c:	2201      	movs	r2, #1
   1793e:	4629      	mov	r1, r5
   17940:	68b0      	ldr	r0, [r6, #8]
   17942:	f008 fe15 	bl	20570 <sym_DEQ52UXGGOG3CBHCSM5ZCBFPFTNN2OZ3BBWERRI>
   17946:	7961      	ldrb	r1, [r4, #5]
   17948:	20ff      	movs	r0, #255	; 0xff
   1794a:	f005 fc19 	bl	1d180 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ>
   1794e:	68b0      	ldr	r0, [r6, #8]
   17950:	f005 f9ca 	bl	1cce8 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
   17954:	4907      	ldr	r1, [pc, #28]	; (17974 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x159c>)
   17956:	2009      	movs	r0, #9
   17958:	7008      	strb	r0, [r1, #0]
   1795a:	e002      	b.n	17962 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x158a>
   1795c:	4620      	mov	r0, r4
   1795e:	f7ff fdf9 	bl	17554 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x117c>
   17962:	b003      	add	sp, #12
   17964:	4658      	mov	r0, fp
   17966:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1796a:	0000      	.short	0x0000
   1796c:	2000016c 	.word	0x2000016c
   17970:	00017b70 	.word	0x00017b70
   17974:	200017a4 	.word	0x200017a4
   17978:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1797c:	f04f 0bff 	mov.w	fp, #255	; 0xff
   17980:	4604      	mov	r4, r0
   17982:	f04f 0a01 	mov.w	sl, #1
   17986:	f88d b000 	strb.w	fp, [sp]
   1798a:	466a      	mov	r2, sp
   1798c:	2105      	movs	r1, #5
   1798e:	f7ff fb05 	bl	16f9c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xbc4>
   17992:	b170      	cbz	r0, 179b2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x15da>
   17994:	4e5a      	ldr	r6, [pc, #360]	; (17b00 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1728>)
   17996:	f8df 8164 	ldr.w	r8, [pc, #356]	; 17afc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1724>
   1799a:	68b1      	ldr	r1, [r6, #8]
   1799c:	f898 201c 	ldrb.w	r2, [r8, #28]
   179a0:	f108 031d 	add.w	r3, r8, #29
   179a4:	f811 0b03 	ldrb.w	r0, [r1], #3
   179a8:	f3c0 1080 	ubfx	r0, r0, #6, #1
   179ac:	f008 faa4 	bl	1fef8 <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
   179b0:	b120      	cbz	r0, 179bc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x15e4>
   179b2:	f04f 0a00 	mov.w	sl, #0
   179b6:	4650      	mov	r0, sl
   179b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   179bc:	68b0      	ldr	r0, [r6, #8]
   179be:	6a21      	ldr	r1, [r4, #32]
   179c0:	2701      	movs	r7, #1
   179c2:	7803      	ldrb	r3, [r0, #0]
   179c4:	f891 20bd 	ldrb.w	r2, [r1, #189]	; 0xbd
   179c8:	f3c3 1340 	ubfx	r3, r3, #5, #1
   179cc:	401a      	ands	r2, r3
   179ce:	f881 20bd 	strb.w	r2, [r1, #189]	; 0xbd
   179d2:	6a25      	ldr	r5, [r4, #32]
   179d4:	f8d0 100f 	ldr.w	r1, [r0, #15]
   179d8:	61a9      	str	r1, [r5, #24]
   179da:	f8d0 1013 	ldr.w	r1, [r0, #19]
   179de:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   179e2:	6229      	str	r1, [r5, #32]
   179e4:	f8b0 0019 	ldrh.w	r0, [r0, #25]
   179e8:	f008 fb3e 	bl	20068 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
   179ec:	4681      	mov	r9, r0
   179ee:	6168      	str	r0, [r5, #20]
   179f0:	68b0      	ldr	r0, [r6, #8]
   179f2:	4649      	mov	r1, r9
   179f4:	7d80      	ldrb	r0, [r0, #22]
   179f6:	f008 fcd1 	bl	2039c <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
   179fa:	8528      	strh	r0, [r5, #40]	; 0x28
   179fc:	68b0      	ldr	r0, [r6, #8]
   179fe:	4649      	mov	r1, r9
   17a00:	f8b0 0017 	ldrh.w	r0, [r0, #23]
   17a04:	f008 fcc1 	bl	2038a <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>
   17a08:	6268      	str	r0, [r5, #36]	; 0x24
   17a0a:	68b0      	ldr	r0, [r6, #8]
   17a0c:	f8b0 101b 	ldrh.w	r1, [r0, #27]
   17a10:	83a9      	strh	r1, [r5, #28]
   17a12:	f8b0 101d 	ldrh.w	r1, [r0, #29]
   17a16:	83e9      	strh	r1, [r5, #30]
   17a18:	f100 011f 	add.w	r1, r0, #31
   17a1c:	f105 00be 	add.w	r0, r5, #190	; 0xbe
   17a20:	f00b fdaf 	bl	23582 <sym_VCM3BICZ5QLCEBBK5263KDY2XJT4MJLUF43FCFA>
   17a24:	68b0      	ldr	r0, [r6, #8]
   17a26:	f890 1024 	ldrb.w	r1, [r0, #36]	; 0x24
   17a2a:	f001 011f 	and.w	r1, r1, #31
   17a2e:	f885 10c9 	strb.w	r1, [r5, #201]	; 0xc9
   17a32:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
   17a36:	0940      	lsrs	r0, r0, #5
   17a38:	f885 0297 	strb.w	r0, [r5, #663]	; 0x297
   17a3c:	f885 706e 	strb.w	r7, [r5, #110]	; 0x6e
   17a40:	f105 0066 	add.w	r0, r5, #102	; 0x66
   17a44:	f885 706f 	strb.w	r7, [r5, #111]	; 0x6f
   17a48:	f880 b00a 	strb.w	fp, [r0, #10]
   17a4c:	2700      	movs	r7, #0
   17a4e:	4639      	mov	r1, r7
   17a50:	3836      	subs	r0, #54	; 0x36
   17a52:	f009 f974 	bl	20d3e <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>
   17a56:	7c20      	ldrb	r0, [r4, #16]
   17a58:	f885 0072 	strb.w	r0, [r5, #114]	; 0x72
   17a5c:	2300      	movs	r3, #0
   17a5e:	f89d 2000 	ldrb.w	r2, [sp]
   17a62:	4620      	mov	r0, r4
   17a64:	6a21      	ldr	r1, [r4, #32]
   17a66:	f7ff fe49 	bl	176fc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1324>
   17a6a:	2210      	movs	r2, #16
   17a6c:	4621      	mov	r1, r4
   17a6e:	f104 0086 	add.w	r0, r4, #134	; 0x86
   17a72:	f7fc fd6b 	bl	1454c <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
   17a76:	6a20      	ldr	r0, [r4, #32]
   17a78:	2205      	movs	r2, #5
   17a7a:	8801      	ldrh	r1, [r0, #0]
   17a7c:	f8a4 10ca 	strh.w	r1, [r4, #202]	; 0xca
   17a80:	f890 00bd 	ldrb.w	r0, [r0, #189]	; 0xbd
   17a84:	f884 00cc 	strb.w	r0, [r4, #204]	; 0xcc
   17a88:	4621      	mov	r1, r4
   17a8a:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   17a8e:	f7fc fd5d 	bl	1454c <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
   17a92:	6a20      	ldr	r0, [r4, #32]
   17a94:	2500      	movs	r5, #0
   17a96:	f8b0 9000 	ldrh.w	r9, [r0]
   17a9a:	f004 f913 	bl	1bcc4 <sym_ZT5CPONXDAFRAB5RWMA6LXPAT5TEFYV2YKU6P6A>
   17a9e:	b9a8      	cbnz	r0, 17acc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x16f4>
   17aa0:	7821      	ldrb	r1, [r4, #0]
   17aa2:	f884 10bb 	strb.w	r1, [r4, #187]	; 0xbb
   17aa6:	f8a4 90bc 	strh.w	r9, [r4, #188]	; 0xbc
   17aaa:	f884 50ba 	strb.w	r5, [r4, #186]	; 0xba
   17aae:	7b60      	ldrb	r0, [r4, #13]
   17ab0:	2800      	cmp	r0, #0
   17ab2:	bf1a      	itte	ne
   17ab4:	f894 0048 	ldrbne.w	r0, [r4, #72]	; 0x48
   17ab8:	f884 00be 	strbne.w	r0, [r4, #190]	; 0xbe
   17abc:	f884 70be 	strbeq.w	r7, [r4, #190]	; 0xbe
   17ac0:	2214      	movs	r2, #20
   17ac2:	4621      	mov	r1, r4
   17ac4:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
   17ac8:	f7fc fd40 	bl	1454c <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
   17acc:	f888 7000 	strb.w	r7, [r8]
   17ad0:	2200      	movs	r2, #0
   17ad2:	4621      	mov	r1, r4
   17ad4:	6a20      	ldr	r0, [r4, #32]
   17ad6:	f000 fb89 	bl	181ec <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ>
   17ada:	68b0      	ldr	r0, [r6, #8]
   17adc:	6a21      	ldr	r1, [r4, #32]
   17ade:	f8d0 2003 	ldr.w	r2, [r0, #3]
   17ae2:	f8c1 2003 	str.w	r2, [r1, #3]
   17ae6:	f8b0 2007 	ldrh.w	r2, [r0, #7]
   17aea:	f8a1 2007 	strh.w	r2, [r1, #7]
   17aee:	7800      	ldrb	r0, [r0, #0]
   17af0:	6a21      	ldr	r1, [r4, #32]
   17af2:	f3c0 1080 	ubfx	r0, r0, #6, #1
   17af6:	7088      	strb	r0, [r1, #2]
   17af8:	e75d      	b.n	179b6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x15de>
   17afa:	0000      	.short	0x0000
   17afc:	200017a4 	.word	0x200017a4
   17b00:	2000016c 	.word	0x2000016c
   17b04:	b570      	push	{r4, r5, r6, lr}
   17b06:	4e18      	ldr	r6, [pc, #96]	; (17b68 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1790>)
   17b08:	2100      	movs	r1, #0
   17b0a:	6870      	ldr	r0, [r6, #4]
   17b0c:	8842      	ldrh	r2, [r0, #2]
   17b0e:	2a09      	cmp	r2, #9
   17b10:	d004      	beq.n	17b1c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1744>
   17b12:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   17b16:	2101      	movs	r1, #1
   17b18:	f7fd be94 	b.w	15844 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x128>
   17b1c:	4c13      	ldr	r4, [pc, #76]	; (17b6c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1794>)
   17b1e:	4605      	mov	r5, r0
   17b20:	81a1      	strh	r1, [r4, #12]
   17b22:	7061      	strb	r1, [r4, #1]
   17b24:	2101      	movs	r1, #1
   17b26:	f7fd fbeb 	bl	15300 <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>
   17b2a:	6861      	ldr	r1, [r4, #4]
   17b2c:	4408      	add	r0, r1
   17b2e:	6060      	str	r0, [r4, #4]
   17b30:	f8b5 0048 	ldrh.w	r0, [r5, #72]	; 0x48
   17b34:	1c40      	adds	r0, r0, #1
   17b36:	f8a5 0048 	strh.w	r0, [r5, #72]	; 0x48
   17b3a:	f7fd f9e5 	bl	14f08 <sym_K5GMJMBHBYPRCUIWKNEXGPSNQEZKEMBAP4JWHBQ>
   17b3e:	f44f 717f 	mov.w	r1, #1020	; 0x3fc
   17b42:	fbb0 f2f1 	udiv	r2, r0, r1
   17b46:	fb01 0012 	mls	r0, r1, r2, r0
   17b4a:	6861      	ldr	r1, [r4, #4]
   17b4c:	2200      	movs	r2, #0
   17b4e:	4408      	add	r0, r1
   17b50:	6060      	str	r0, [r4, #4]
   17b52:	f895 1076 	ldrb.w	r1, [r5, #118]	; 0x76
   17b56:	4628      	mov	r0, r5
   17b58:	f7fe feae 	bl	168b8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4e0>
   17b5c:	6870      	ldr	r0, [r6, #4]
   17b5e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   17b62:	2101      	movs	r1, #1
   17b64:	f7fd bdea 	b.w	1573c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x20>
   17b68:	2000016c 	.word	0x2000016c
   17b6c:	200017a4 	.word	0x200017a4
   17b70:	00000003 	.word	0x00000003
   17b74:	00000001 	.word	0x00000001
   17b78:	00000000 	.word	0x00000000
   17b7c:	00010000 	.word	0x00010000
   17b80:	a62c0000 	.word	0xa62c0000
   17b84:	0000a1e0 	.word	0x0000a1e0
   17b88:	0000a820 	.word	0x0000a820
   17b8c:	00000000 	.word	0x00000000
   17b90:	0000a820 	.word	0x0000a820
   17b94:	000162f1 	.word	0x000162f1
   17b98:	00015c5d 	.word	0x00015c5d
   17b9c:	000160c5 	.word	0x000160c5
   17ba0:	00000000 	.word	0x00000000
   17ba4:	00015d91 	.word	0x00015d91
   17ba8:	00015ea1 	.word	0x00015ea1
   17bac:	000161dd 	.word	0x000161dd
   17bb0:	0002129d 	.word	0x0002129d
   17bb4:	00016165 	.word	0x00016165
   17bb8:	0001625d 	.word	0x0001625d
   17bbc:	00016235 	.word	0x00016235
   17bc0:	000160f5 	.word	0x000160f5
   17bc4:	000212a3 	.word	0x000212a3
   17bc8:	00016379 	.word	0x00016379
   17bcc:	000166a9 	.word	0x000166a9
   17bd0:	00016751 	.word	0x00016751
   17bd4:	00017b05 	.word	0x00017b05
   17bd8:	00017bc4 	.word	0x00017bc4
   17bdc:	00017bac 	.word	0x00017bac
   17be0:	00017ba4 	.word	0x00017ba4

00017be4 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>:
   17be4:	b510      	push	{r4, lr}
   17be6:	1e42      	subs	r2, r0, #1
   17be8:	2a02      	cmp	r2, #2
   17bea:	d903      	bls.n	17bf4 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x10>
   17bec:	21ca      	movs	r1, #202	; 0xca
   17bee:	202f      	movs	r0, #47	; 0x2f
   17bf0:	f7f9 fec6 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   17bf4:	1e40      	subs	r0, r0, #1
   17bf6:	2910      	cmp	r1, #16
   17bf8:	bf02      	ittt	eq
   17bfa:	490a      	ldreq	r1, [pc, #40]	; (17c24 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x40>)
   17bfc:	f831 0010 	ldrheq.w	r0, [r1, r0, lsl #1]
   17c00:	bd10      	popeq	{r4, pc}
   17c02:	2912      	cmp	r1, #18
   17c04:	bf14      	ite	ne
   17c06:	2913      	cmpne	r1, #19
   17c08:	4907      	ldreq	r1, [pc, #28]	; (17c28 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x44>)
   17c0a:	d007      	beq.n	17c1c <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x38>
   17c0c:	2915      	cmp	r1, #21
   17c0e:	bf08      	it	eq
   17c10:	4906      	ldreq	r1, [pc, #24]	; (17c2c <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x48>)
   17c12:	d003      	beq.n	17c1c <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x38>
   17c14:	21d8      	movs	r1, #216	; 0xd8
   17c16:	202f      	movs	r0, #47	; 0x2f
   17c18:	f7f9 feb2 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   17c1c:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
   17c20:	bd10      	pop	{r4, pc}
   17c22:	0000      	.short	0x0000
   17c24:	00021498 	.word	0x00021498
   17c28:	00021492 	.word	0x00021492
   17c2c:	0002149e 	.word	0x0002149e

00017c30 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I>:
   17c30:	1e42      	subs	r2, r0, #1
   17c32:	b510      	push	{r4, lr}
   17c34:	b2d2      	uxtb	r2, r2
   17c36:	2a01      	cmp	r2, #1
   17c38:	d905      	bls.n	17c46 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x16>
   17c3a:	291d      	cmp	r1, #29
   17c3c:	d01e      	beq.n	17c7c <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x4c>
   17c3e:	21ee      	movs	r1, #238	; 0xee
   17c40:	202f      	movs	r0, #47	; 0x2f
   17c42:	f7f9 fe9d 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   17c46:	2913      	cmp	r1, #19
   17c48:	d014      	beq.n	17c74 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x44>
   17c4a:	dc08      	bgt.n	17c5e <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x2e>
   17c4c:	2910      	cmp	r1, #16
   17c4e:	bf02      	ittt	eq
   17c50:	480d      	ldreq	r0, [pc, #52]	; (17c88 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x58>)
   17c52:	f830 0012 	ldrheq.w	r0, [r0, r2, lsl #1]
   17c56:	bd10      	popeq	{r4, pc}
   17c58:	2912      	cmp	r1, #18
   17c5a:	d00b      	beq.n	17c74 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x44>
   17c5c:	e005      	b.n	17c6a <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x3a>
   17c5e:	2915      	cmp	r1, #21
   17c60:	bf08      	it	eq
   17c62:	480a      	ldreq	r0, [pc, #40]	; (17c8c <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x5c>)
   17c64:	d007      	beq.n	17c76 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x46>
   17c66:	291d      	cmp	r1, #29
   17c68:	d008      	beq.n	17c7c <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x4c>
   17c6a:	f44f 7181 	mov.w	r1, #258	; 0x102
   17c6e:	202f      	movs	r0, #47	; 0x2f
   17c70:	f7f9 fe86 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   17c74:	4806      	ldr	r0, [pc, #24]	; (17c90 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x60>)
   17c76:	f830 0012 	ldrh.w	r0, [r0, r2, lsl #1]
   17c7a:	bd10      	pop	{r4, pc}
   17c7c:	f240 315a 	movw	r1, #858	; 0x35a
   17c80:	fb10 f001 	smulbb	r0, r0, r1
   17c84:	bd10      	pop	{r4, pc}
   17c86:	0000      	.short	0x0000
   17c88:	00021486 	.word	0x00021486
   17c8c:	0002148e 	.word	0x0002148e
   17c90:	0002148a 	.word	0x0002148a

00017c94 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY>:
   17c94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   17c98:	4604      	mov	r4, r0
   17c9a:	f890 0128 	ldrb.w	r0, [r0, #296]	; 0x128
   17c9e:	b083      	sub	sp, #12
   17ca0:	4616      	mov	r6, r2
   17ca2:	460f      	mov	r7, r1
   17ca4:	bb40      	cbnz	r0, 17cf8 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x64>
   17ca6:	4621      	mov	r1, r4
   17ca8:	486a      	ldr	r0, [pc, #424]	; (17e54 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x1c0>)
   17caa:	f7f7 fee1 	bl	fa70 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
   17cae:	4605      	mov	r5, r0
   17cb0:	2820      	cmp	r0, #32
   17cb2:	d021      	beq.n	17cf8 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x64>
   17cb4:	2250      	movs	r2, #80	; 0x50
   17cb6:	2100      	movs	r1, #0
   17cb8:	f504 7088 	add.w	r0, r4, #272	; 0x110
   17cbc:	f006 fe49 	bl	1e952 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
   17cc0:	f884 5110 	strb.w	r5, [r4, #272]	; 0x110
   17cc4:	f04f 0801 	mov.w	r8, #1
   17cc8:	f8c4 7114 	str.w	r7, [r4, #276]	; 0x114
   17ccc:	f884 8128 	strb.w	r8, [r4, #296]	; 0x128
   17cd0:	b137      	cbz	r7, 17ce0 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x4c>
   17cd2:	f7fd f931 	bl	14f38 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY>
   17cd6:	f000 0007 	and.w	r0, r0, #7
   17cda:	1c40      	adds	r0, r0, #1
   17cdc:	f887 02c4 	strb.w	r0, [r7, #708]	; 0x2c4
   17ce0:	4620      	mov	r0, r4
   17ce2:	f009 fa58 	bl	21196 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
   17ce6:	2800      	cmp	r0, #0
   17ce8:	bf08      	it	eq
   17cea:	2584      	moveq	r5, #132	; 0x84
   17cec:	d029      	beq.n	17d42 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xae>
   17cee:	4620      	mov	r0, r4
   17cf0:	f009 fa43 	bl	2117a <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
   17cf4:	b120      	cbz	r0, 17d00 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x6c>
   17cf6:	e00a      	b.n	17d0e <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x7a>
   17cf8:	b003      	add	sp, #12
   17cfa:	200c      	movs	r0, #12
   17cfc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   17d00:	4620      	mov	r0, r4
   17d02:	f009 fa4c 	bl	2119e <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
   17d06:	2800      	cmp	r0, #0
   17d08:	bf08      	it	eq
   17d0a:	255b      	moveq	r5, #91	; 0x5b
   17d0c:	d000      	beq.n	17d10 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x7c>
   17d0e:	2562      	movs	r5, #98	; 0x62
   17d10:	4668      	mov	r0, sp
   17d12:	f7f9 fc77 	bl	11604 <mpsl_fem_pa_is_configured>
   17d16:	f89d 0000 	ldrb.w	r0, [sp]
   17d1a:	2800      	cmp	r0, #0
   17d1c:	bf14      	ite	ne
   17d1e:	2701      	movne	r7, #1
   17d20:	2700      	moveq	r7, #0
   17d22:	a801      	add	r0, sp, #4
   17d24:	f7f9 fc56 	bl	115d4 <mpsl_fem_lna_is_configured>
   17d28:	f89d 0004 	ldrb.w	r0, [sp, #4]
   17d2c:	2800      	cmp	r0, #0
   17d2e:	bf18      	it	ne
   17d30:	2001      	movne	r0, #1
   17d32:	4338      	orrs	r0, r7
   17d34:	bf18      	it	ne
   17d36:	350a      	addne	r5, #10
   17d38:	f7f9 fbaa 	bl	11490 <sym_TSTNWLRH7RAXHHT2FC4R3RPI2WC3O7TXKBYGVCI>
   17d3c:	2800      	cmp	r0, #0
   17d3e:	bf18      	it	ne
   17d40:	3518      	addne	r5, #24
   17d42:	f8a4 5138 	strh.w	r5, [r4, #312]	; 0x138
   17d46:	2002      	movs	r0, #2
   17d48:	f884 013a 	strb.w	r0, [r4, #314]	; 0x13a
   17d4c:	f884 813b 	strb.w	r8, [r4, #315]	; 0x13b
   17d50:	2500      	movs	r5, #0
   17d52:	f884 5130 	strb.w	r5, [r4, #304]	; 0x130
   17d56:	f006 fc1b 	bl	1e590 <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>
   17d5a:	4607      	mov	r7, r0
   17d5c:	f8b4 9138 	ldrh.w	r9, [r4, #312]	; 0x138
   17d60:	f7f9 f82c 	bl	10dbc <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
   17d64:	454f      	cmp	r7, r9
   17d66:	bf98      	it	ls
   17d68:	464f      	movls	r7, r9
   17d6a:	4438      	add	r0, r7
   17d6c:	30cc      	adds	r0, #204	; 0xcc
   17d6e:	b287      	uxth	r7, r0
   17d70:	4620      	mov	r0, r4
   17d72:	f009 fa0c 	bl	2118e <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
   17d76:	b378      	cbz	r0, 17dd8 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x144>
   17d78:	f00b fb57 	bl	2342a <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>
   17d7c:	f500 60cd 	add.w	r0, r0, #1640	; 0x668
   17d80:	b281      	uxth	r1, r0
   17d82:	4630      	mov	r0, r6
   17d84:	f006 fc3c 	bl	1e600 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
   17d88:	4430      	add	r0, r6
   17d8a:	f8c4 0134 	str.w	r0, [r4, #308]	; 0x134
   17d8e:	f7f8 f89d 	bl	fecc <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
   17d92:	19c0      	adds	r0, r0, r7
   17d94:	4169      	adcs	r1, r5
   17d96:	e9c4 0150 	strd	r0, r1, [r4, #320]	; 0x140
   17d9a:	f884 8118 	strb.w	r8, [r4, #280]	; 0x118
   17d9e:	84e5      	strh	r5, [r4, #38]	; 0x26
   17da0:	4620      	mov	r0, r4
   17da2:	f009 f9ee 	bl	21182 <sym_4BHBBQGG3Z4AATH4MTZL2WFYY6WPEFHF75U64WQ>
   17da6:	b148      	cbz	r0, 17dbc <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x128>
   17da8:	4620      	mov	r0, r4
   17daa:	2101      	movs	r1, #1
   17dac:	f7fd faa8 	bl	15300 <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>
   17db0:	f500 7096 	add.w	r0, r0, #300	; 0x12c
   17db4:	1a30      	subs	r0, r6, r0
   17db6:	f5a0 707f 	sub.w	r0, r0, #1020	; 0x3fc
   17dba:	e005      	b.n	17dc8 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x134>
   17dbc:	2001      	movs	r0, #1
   17dbe:	f009 fb5b 	bl	21478 <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>
   17dc2:	f500 7096 	add.w	r0, r0, #300	; 0x12c
   17dc6:	1a30      	subs	r0, r6, r0
   17dc8:	f8c4 011c 	str.w	r0, [r4, #284]	; 0x11c
   17dcc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   17dd0:	0841      	lsrs	r1, r0, #1
   17dd2:	e9c4 0154 	strd	r0, r1, [r4, #336]	; 0x150
   17dd6:	e027      	b.n	17e28 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x194>
   17dd8:	e7ff      	b.n	17dda <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x146>
   17dda:	4620      	mov	r0, r4
   17ddc:	2100      	movs	r1, #0
   17dde:	f7fd fa8f 	bl	15300 <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>
   17de2:	f8df 8074 	ldr.w	r8, [pc, #116]	; 17e58 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x1c4>
   17de6:	f500 7096 	add.w	r0, r0, #300	; 0x12c
   17dea:	f8c4 0134 	str.w	r0, [r4, #308]	; 0x134
   17dee:	f8b8 1004 	ldrh.w	r1, [r8, #4]
   17df2:	2000      	movs	r0, #0
   17df4:	b139      	cbz	r1, 17e06 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x172>
   17df6:	f7fd f89f 	bl	14f38 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY>
   17dfa:	f8b8 1004 	ldrh.w	r1, [r8, #4]
   17dfe:	fbb0 f2f1 	udiv	r2, r0, r1
   17e02:	fb01 0012 	mls	r0, r1, r2, r0
   17e06:	4407      	add	r7, r0
   17e08:	f7f8 f860 	bl	fecc <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
   17e0c:	19c0      	adds	r0, r0, r7
   17e0e:	4169      	adcs	r1, r5
   17e10:	2e00      	cmp	r6, #0
   17e12:	e9c4 0150 	strd	r0, r1, [r4, #320]	; 0x140
   17e16:	bf04      	itt	eq
   17e18:	f04f 30ff 	moveq.w	r0, #4294967295	; 0xffffffff
   17e1c:	0841      	lsreq	r1, r0, #1
   17e1e:	d001      	beq.n	17e24 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x190>
   17e20:	1980      	adds	r0, r0, r6
   17e22:	4169      	adcs	r1, r5
   17e24:	e9c4 0154 	strd	r0, r1, [r4, #336]	; 0x150
   17e28:	f894 0110 	ldrb.w	r0, [r4, #272]	; 0x110
   17e2c:	f504 7198 	add.w	r1, r4, #304	; 0x130
   17e30:	f7f7 f880 	bl	ef34 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
   17e34:	b148      	cbz	r0, 17e4a <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x1b6>
   17e36:	f8a4 5148 	strh.w	r5, [r4, #328]	; 0x148
   17e3a:	2100      	movs	r1, #0
   17e3c:	4620      	mov	r0, r4
   17e3e:	f009 f9d9 	bl	211f4 <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>
   17e42:	b003      	add	sp, #12
   17e44:	2000      	movs	r0, #0
   17e46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   17e4a:	f240 11e7 	movw	r1, #487	; 0x1e7
   17e4e:	2030      	movs	r0, #48	; 0x30
   17e50:	f7f9 fd96 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   17e54:	0002174b 	.word	0x0002174b
   17e58:	20000184 	.word	0x20000184

00017e5c <sym_YZMCMF2VDK5EZ5GH5K4G77V4XY7KHBJNPGELPVQ>:
   17e5c:	4901      	ldr	r1, [pc, #4]	; (17e64 <sym_YZMCMF2VDK5EZ5GH5K4G77V4XY7KHBJNPGELPVQ+0x8>)
   17e5e:	8088      	strh	r0, [r1, #4]
   17e60:	4770      	bx	lr
   17e62:	0000      	.short	0x0000
   17e64:	20000184 	.word	0x20000184

00017e68 <sym_4O3EP57XWWWRY57PVJMDKXNE25ZWFBDV6LLBFQQ>:
   17e68:	4805      	ldr	r0, [pc, #20]	; (17e80 <sym_4O3EP57XWWWRY57PVJMDKXNE25ZWFBDV6LLBFQQ+0x18>)
   17e6a:	2100      	movs	r1, #0
   17e6c:	7001      	strb	r1, [r0, #0]
   17e6e:	2201      	movs	r2, #1
   17e70:	7082      	strb	r2, [r0, #2]
   17e72:	7041      	strb	r1, [r0, #1]
   17e74:	f242 7110 	movw	r1, #10000	; 0x2710
   17e78:	8081      	strh	r1, [r0, #4]
   17e7a:	f000 b803 	b.w	17e84 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q>
   17e7e:	0000      	.short	0x0000
   17e80:	20000184 	.word	0x20000184

00017e84 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q>:
   17e84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   17e88:	4e41      	ldr	r6, [pc, #260]	; (17f90 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0x10c>)
   17e8a:	b085      	sub	sp, #20
   17e8c:	e9d6 0102 	ldrd	r0, r1, [r6, #8]
   17e90:	e9cd 0100 	strd	r0, r1, [sp]
   17e94:	4668      	mov	r0, sp
   17e96:	f7fa f80d 	bl	11eb4 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
   17e9a:	2701      	movs	r7, #1
   17e9c:	2500      	movs	r5, #0
   17e9e:	bb10      	cbnz	r0, 17ee6 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0x62>
   17ea0:	9c00      	ldr	r4, [sp, #0]
   17ea2:	f894 0128 	ldrb.w	r0, [r4, #296]	; 0x128
   17ea6:	b1c8      	cbz	r0, 17edc <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0x58>
   17ea8:	f884 7158 	strb.w	r7, [r4, #344]	; 0x158
   17eac:	2101      	movs	r1, #1
   17eae:	4620      	mov	r0, r4
   17eb0:	f009 f9a0 	bl	211f4 <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>
   17eb4:	f894 0128 	ldrb.w	r0, [r4, #296]	; 0x128
   17eb8:	b180      	cbz	r0, 17edc <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0x58>
   17eba:	f894 0110 	ldrb.w	r0, [r4, #272]	; 0x110
   17ebe:	f7f7 fb5b 	bl	f578 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>
   17ec2:	f894 0110 	ldrb.w	r0, [r4, #272]	; 0x110
   17ec6:	f7f7 fcbb 	bl	f840 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
   17eca:	f894 0110 	ldrb.w	r0, [r4, #272]	; 0x110
   17ece:	f7f7 fc95 	bl	f7fc <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
   17ed2:	2800      	cmp	r0, #0
   17ed4:	bf18      	it	ne
   17ed6:	f884 5128 	strbne.w	r5, [r4, #296]	; 0x128
   17eda:	d00f      	beq.n	17efc <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0x78>
   17edc:	4668      	mov	r0, sp
   17ede:	f7f9 ffe9 	bl	11eb4 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
   17ee2:	2800      	cmp	r0, #0
   17ee4:	d0dc      	beq.n	17ea0 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0x1c>
   17ee6:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 17f94 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0x110>
   17eea:	f888 7001 	strb.w	r7, [r8, #1]
   17eee:	e9d6 0100 	ldrd	r0, r1, [r6]
   17ef2:	f64f 77ff 	movw	r7, #65535	; 0xffff
   17ef6:	e9cd 0102 	strd	r0, r1, [sp, #8]
   17efa:	e027      	b.n	17f4c <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0xc8>
   17efc:	f44f 7101 	mov.w	r1, #516	; 0x204
   17f00:	2030      	movs	r0, #48	; 0x30
   17f02:	f7f9 fd3d 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   17f06:	9802      	ldr	r0, [sp, #8]
   17f08:	2800      	cmp	r0, #0
   17f0a:	bf1c      	itt	ne
   17f0c:	f890 12d4 	ldrbne.w	r1, [r0, #724]	; 0x2d4
   17f10:	2900      	cmpne	r1, #0
   17f12:	d01b      	beq.n	17f4c <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0xc8>
   17f14:	8800      	ldrh	r0, [r0, #0]
   17f16:	42b8      	cmp	r0, r7
   17f18:	bf18      	it	ne
   17f1a:	f04f 0920 	movne.w	r9, #32
   17f1e:	d030      	beq.n	17f82 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0xfe>
   17f20:	2101      	movs	r1, #1
   17f22:	f007 fe2e 	bl	1fb82 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   17f26:	0004      	movs	r4, r0
   17f28:	d016      	beq.n	17f58 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0xd4>
   17f2a:	f894 031c 	ldrb.w	r0, [r4, #796]	; 0x31c
   17f2e:	f7f7 fc87 	bl	f840 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
   17f32:	f884 52d4 	strb.w	r5, [r4, #724]	; 0x2d4
   17f36:	f894 031c 	ldrb.w	r0, [r4, #796]	; 0x31c
   17f3a:	f7f7 fc5f 	bl	f7fc <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
   17f3e:	f884 931c 	strb.w	r9, [r4, #796]	; 0x31c
   17f42:	e9d6 0100 	ldrd	r0, r1, [r6]
   17f46:	e9cd 0102 	strd	r0, r1, [sp, #8]
   17f4a:	e015      	b.n	17f78 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0xf4>
   17f4c:	a802      	add	r0, sp, #8
   17f4e:	f7f9 ffb1 	bl	11eb4 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
   17f52:	2800      	cmp	r0, #0
   17f54:	d0d7      	beq.n	17f06 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0x82>
   17f56:	e014      	b.n	17f82 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0xfe>
   17f58:	f240 111f 	movw	r1, #287	; 0x11f
   17f5c:	2030      	movs	r0, #48	; 0x30
   17f5e:	f7f9 fd0f 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   17f62:	9802      	ldr	r0, [sp, #8]
   17f64:	2800      	cmp	r0, #0
   17f66:	bf1c      	itt	ne
   17f68:	f890 12d4 	ldrbne.w	r1, [r0, #724]	; 0x2d4
   17f6c:	2900      	cmpne	r1, #0
   17f6e:	d003      	beq.n	17f78 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0xf4>
   17f70:	8800      	ldrh	r0, [r0, #0]
   17f72:	42b8      	cmp	r0, r7
   17f74:	d1d4      	bne.n	17f20 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0x9c>
   17f76:	e004      	b.n	17f82 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0xfe>
   17f78:	a802      	add	r0, sp, #8
   17f7a:	f7f9 ff9b 	bl	11eb4 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
   17f7e:	2800      	cmp	r0, #0
   17f80:	d0ef      	beq.n	17f62 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0xde>
   17f82:	f888 5001 	strb.w	r5, [r8, #1]
   17f86:	b005      	add	sp, #20
   17f88:	2000      	movs	r0, #0
   17f8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   17f8e:	0000      	.short	0x0000
   17f90:	00018d08 	.word	0x00018d08
   17f94:	20000184 	.word	0x20000184

00017f98 <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI>:
   17f98:	4901      	ldr	r1, [pc, #4]	; (17fa0 <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI+0x8>)
   17f9a:	7008      	strb	r0, [r1, #0]
   17f9c:	4770      	bx	lr
   17f9e:	0000      	.short	0x0000
   17fa0:	20000184 	.word	0x20000184

00017fa4 <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA>:
   17fa4:	4908      	ldr	r1, [pc, #32]	; (17fc8 <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA+0x24>)
   17fa6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   17faa:	fbb1 f1f2 	udiv	r1, r1, r2
   17fae:	b510      	push	{r4, lr}
   17fb0:	f201 11d7 	addw	r1, r1, #471	; 0x1d7
   17fb4:	f008 fee7 	bl	20d86 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>
   17fb8:	f5b0 6f29 	cmp.w	r0, #2704	; 0xa90
   17fbc:	bf28      	it	cs
   17fbe:	f44f 6029 	movcs.w	r0, #2704	; 0xa90
   17fc2:	b280      	uxth	r0, r0
   17fc4:	bd10      	pop	{r4, pc}
   17fc6:	0000      	.short	0x0000
   17fc8:	0001527d 	.word	0x0001527d

00017fcc <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY>:
   17fcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17fd0:	4c14      	ldr	r4, [pc, #80]	; (18024 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x58>)
   17fd2:	4607      	mov	r7, r0
   17fd4:	e9d4 5802 	ldrd	r5, r8, [r4, #8]
   17fd8:	f004 fd76 	bl	1cac8 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>
   17fdc:	4606      	mov	r6, r0
   17fde:	7820      	ldrb	r0, [r4, #0]
   17fe0:	b128      	cbz	r0, 17fee <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x22>
   17fe2:	4632      	mov	r2, r6
   17fe4:	4641      	mov	r1, r8
   17fe6:	4628      	mov	r0, r5
   17fe8:	f008 f85b 	bl	200a2 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ>
   17fec:	4605      	mov	r5, r0
   17fee:	68a0      	ldr	r0, [r4, #8]
   17ff0:	4285      	cmp	r5, r0
   17ff2:	d005      	beq.n	18000 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x34>
   17ff4:	6921      	ldr	r1, [r4, #16]
   17ff6:	1a28      	subs	r0, r5, r0
   17ff8:	4408      	add	r0, r1
   17ffa:	6120      	str	r0, [r4, #16]
   17ffc:	f7f7 fe7a 	bl	fcf4 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
   18000:	60a5      	str	r5, [r4, #8]
   18002:	42ae      	cmp	r6, r5
   18004:	d80a      	bhi.n	1801c <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x50>
   18006:	6978      	ldr	r0, [r7, #20]
   18008:	f641 514c 	movw	r1, #7500	; 0x1d4c
   1800c:	4281      	cmp	r1, r0
   1800e:	bf9c      	itt	ls
   18010:	7860      	ldrbls	r0, [r4, #1]
   18012:	2800      	cmpls	r0, #0
   18014:	bf04      	itt	eq
   18016:	2001      	moveq	r0, #1
   18018:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
   1801c:	f04f 0000 	mov.w	r0, #0
   18020:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   18024:	20000184 	.word	0x20000184

00018028 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>:
   18028:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1802c:	2500      	movs	r5, #0
   1802e:	4604      	mov	r4, r0
   18030:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
   18034:	2906      	cmp	r1, #6
   18036:	f080 80cf 	bcs.w	181d8 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x1b0>
   1803a:	e8df f001 	tbb	[pc, r1]
   1803e:	9a07      	.short	0x9a07
   18040:	b39f9803 	.word	0xb39f9803
   18044:	2004      	movs	r0, #4
   18046:	f884 02d4 	strb.w	r0, [r4, #724]	; 0x2d4
   1804a:	e084      	b.n	18156 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x12e>
   1804c:	f8d4 0324 	ldr.w	r0, [r4, #804]	; 0x324
   18050:	2800      	cmp	r0, #0
   18052:	bf1c      	itt	ne
   18054:	f894 02ea 	ldrbne.w	r0, [r4, #746]	; 0x2ea
   18058:	2800      	cmpne	r0, #0
   1805a:	d06a      	beq.n	18132 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x10a>
   1805c:	f894 02d4 	ldrb.w	r0, [r4, #724]	; 0x2d4
   18060:	2803      	cmp	r0, #3
   18062:	d166      	bne.n	18132 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x10a>
   18064:	f894 606f 	ldrb.w	r6, [r4, #111]	; 0x6f
   18068:	f00b f9df 	bl	2342a <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>
   1806c:	4601      	mov	r1, r0
   1806e:	f894 0297 	ldrb.w	r0, [r4, #663]	; 0x297
   18072:	280c      	cmp	r0, #12
   18074:	d304      	bcc.n	18080 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x58>
   18076:	f240 3183 	movw	r1, #899	; 0x383
   1807a:	2006      	movs	r0, #6
   1807c:	f7f9 fc80 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   18080:	4a58      	ldr	r2, [pc, #352]	; (181e4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x1bc>)
   18082:	f832 0010 	ldrh.w	r0, [r2, r0, lsl #1]
   18086:	4401      	add	r1, r0
   18088:	f500 60c8 	add.w	r0, r0, #1600	; 0x640
   1808c:	fa1f fa80 	uxth.w	sl, r0
   18090:	fa1f f881 	uxth.w	r8, r1
   18094:	4630      	mov	r0, r6
   18096:	f004 fe21 	bl	1ccdc <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
   1809a:	f8d4 1324 	ldr.w	r1, [r4, #804]	; 0x324
   1809e:	f016 0f0c 	tst.w	r6, #12
   180a2:	eba1 0900 	sub.w	r9, r1, r0
   180a6:	bf0a      	itet	eq
   180a8:	4630      	moveq	r0, r6
   180aa:	f64e 2060 	movwne	r0, #60000	; 0xea60
   180ae:	f004 fe63 	bleq	1cd78 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   180b2:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
   180b6:	fbb0 f0f7 	udiv	r0, r0, r7
   180ba:	eba9 0900 	sub.w	r9, r9, r0
   180be:	4630      	mov	r0, r6
   180c0:	f004 fe0c 	bl	1ccdc <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
   180c4:	f8d4 12a8 	ldr.w	r1, [r4, #680]	; 0x2a8
   180c8:	f016 0f0c 	tst.w	r6, #12
   180cc:	eba1 0b00 	sub.w	fp, r1, r0
   180d0:	bf0a      	itet	eq
   180d2:	4630      	moveq	r0, r6
   180d4:	f64e 2060 	movwne	r0, #60000	; 0xea60
   180d8:	f004 fe4e 	bleq	1cd78 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   180dc:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
   180e0:	4408      	add	r0, r1
   180e2:	fbb0 f0f7 	udiv	r0, r0, r7
   180e6:	ebab 0000 	sub.w	r0, fp, r0
   180ea:	f1a0 0160 	sub.w	r1, r0, #96	; 0x60
   180ee:	fb01 f108 	mul.w	r1, r1, r8
   180f2:	fbb1 f1fa 	udiv	r1, r1, sl
   180f6:	2229      	movs	r2, #41	; 0x29
   180f8:	eb02 0050 	add.w	r0, r2, r0, lsr #1
   180fc:	3160      	adds	r1, #96	; 0x60
   180fe:	eba0 0251 	sub.w	r2, r0, r1, lsr #1
   18102:	eb00 0051 	add.w	r0, r0, r1, lsr #1
   18106:	454a      	cmp	r2, r9
   18108:	d801      	bhi.n	1810e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xe6>
   1810a:	4548      	cmp	r0, r9
   1810c:	d201      	bcs.n	18112 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xea>
   1810e:	f7f8 ff0d 	bl	10f2c <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA>
   18112:	4641      	mov	r1, r8
   18114:	6960      	ldr	r0, [r4, #20]
   18116:	f006 fa73 	bl	1e600 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
   1811a:	6961      	ldr	r1, [r4, #20]
   1811c:	f641 524c 	movw	r2, #7500	; 0x1d4c
   18120:	4291      	cmp	r1, r2
   18122:	bf34      	ite	cc
   18124:	2102      	movcc	r1, #2
   18126:	2100      	movcs	r1, #0
   18128:	4408      	add	r0, r1
   1812a:	f8c4 02dc 	str.w	r0, [r4, #732]	; 0x2dc
   1812e:	f884 52ea 	strb.w	r5, [r4, #746]	; 0x2ea
   18132:	482d      	ldr	r0, [pc, #180]	; (181e8 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x1c0>)
   18134:	7840      	ldrb	r0, [r0, #1]
   18136:	2800      	cmp	r0, #0
   18138:	d184      	bne.n	18044 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x1c>
   1813a:	9500      	str	r5, [sp, #0]
   1813c:	f8b4 129c 	ldrh.w	r1, [r4, #668]	; 0x29c
   18140:	2301      	movs	r3, #1
   18142:	2200      	movs	r2, #0
   18144:	4620      	mov	r0, r4
   18146:	f000 f927 	bl	18398 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1ac>
   1814a:	b120      	cbz	r0, 18156 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x12e>
   1814c:	f44f 61d7 	mov.w	r1, #1720	; 0x6b8
   18150:	2030      	movs	r0, #48	; 0x30
   18152:	f7f9 fc15 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   18156:	f004 fcc3 	bl	1cae0 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>
   1815a:	f7f7 fcb1 	bl	fac0 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
   1815e:	f8a4 531a 	strh.w	r5, [r4, #794]	; 0x31a
   18162:	f8b4 00ac 	ldrh.w	r0, [r4, #172]	; 0xac
   18166:	f8a4 02e6 	strh.w	r0, [r4, #742]	; 0x2e6
   1816a:	f884 52e9 	strb.w	r5, [r4, #745]	; 0x2e9
   1816e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18172:	2003      	movs	r0, #3
   18174:	f884 02d4 	strb.w	r0, [r4, #724]	; 0x2d4
   18178:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1817c:	f004 fcaa 	bl	1cad4 <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI>
   18180:	f8c4 0324 	str.w	r0, [r4, #804]	; 0x324
   18184:	f894 006f 	ldrb.w	r0, [r4, #111]	; 0x6f
   18188:	f004 fda8 	bl	1ccdc <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
   1818c:	f8d4 1324 	ldr.w	r1, [r4, #804]	; 0x324
   18190:	1a09      	subs	r1, r1, r0
   18192:	4815      	ldr	r0, [pc, #84]	; (181e8 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x1c0>)
   18194:	6882      	ldr	r2, [r0, #8]
   18196:	440a      	add	r2, r1
   18198:	6082      	str	r2, [r0, #8]
   1819a:	68c2      	ldr	r2, [r0, #12]
   1819c:	4411      	add	r1, r2
   1819e:	60c1      	str	r1, [r0, #12]
   181a0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   181a4:	4625      	mov	r5, r4
   181a6:	f894 406f 	ldrb.w	r4, [r4, #111]	; 0x6f
   181aa:	4620      	mov	r0, r4
   181ac:	f004 fde4 	bl	1cd78 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   181b0:	f64d 7141 	movw	r1, #57153	; 0xdf41
   181b4:	4408      	add	r0, r1
   181b6:	fbb0 f0f7 	udiv	r0, r0, r7
   181ba:	f014 010c 	ands.w	r1, r4, #12
   181be:	bf18      	it	ne
   181c0:	2128      	movne	r1, #40	; 0x28
   181c2:	4408      	add	r0, r1
   181c4:	f100 02bc 	add.w	r2, r0, #188	; 0xbc
   181c8:	4628      	mov	r0, r5
   181ca:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   181ce:	f240 111b 	movw	r1, #283	; 0x11b
   181d2:	f008 bd97 	b.w	20d04 <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY>
   181d6:	bf00      	nop
   181d8:	f240 7143 	movw	r1, #1859	; 0x743
   181dc:	2030      	movs	r0, #48	; 0x30
   181de:	f7f9 fbcf 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   181e2:	0000      	.short	0x0000
   181e4:	00018d44 	.word	0x00018d44
   181e8:	20000184 	.word	0x20000184

000181ec <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ>:
   181ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   181f0:	2600      	movs	r6, #0
   181f2:	460c      	mov	r4, r1
   181f4:	4681      	mov	r9, r0
   181f6:	2701      	movs	r7, #1
   181f8:	b142      	cbz	r2, 1820c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x20>
   181fa:	2a01      	cmp	r2, #1
   181fc:	d063      	beq.n	182c6 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xda>
   181fe:	2a02      	cmp	r2, #2
   18200:	d067      	beq.n	182d2 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xe6>
   18202:	f240 716d 	movw	r1, #1901	; 0x76d
   18206:	2030      	movs	r0, #48	; 0x30
   18208:	f7f9 fbba 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1820c:	f004 fc5c 	bl	1cac8 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>
   18210:	f884 6118 	strb.w	r6, [r4, #280]	; 0x118
   18214:	4682      	mov	sl, r0
   18216:	e9d4 5850 	ldrd	r5, r8, [r4, #320]	; 0x140
   1821a:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
   1821e:	f880 62a7 	strb.w	r6, [r0, #679]	; 0x2a7
   18222:	f884 6128 	strb.w	r6, [r4, #296]	; 0x128
   18226:	f884 7129 	strb.w	r7, [r4, #297]	; 0x129
   1822a:	2101      	movs	r1, #1
   1822c:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
   18230:	f7fb fe64 	bl	13efc <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
   18234:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
   18238:	f8c0 5308 	str.w	r5, [r0, #776]	; 0x308
   1823c:	f8c0 830c 	str.w	r8, [r0, #780]	; 0x30c
   18240:	f8d4 1114 	ldr.w	r1, [r4, #276]	; 0x114
   18244:	f894 0110 	ldrb.w	r0, [r4, #272]	; 0x110
   18248:	f881 031c 	strb.w	r0, [r1, #796]	; 0x31c
   1824c:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
   18250:	f8c0 a320 	str.w	sl, [r0, #800]	; 0x320
   18254:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
   18258:	e9c0 58c4 	strd	r5, r8, [r0, #784]	; 0x310
   1825c:	f8d4 5114 	ldr.w	r5, [r4, #276]	; 0x114
   18260:	f885 62d4 	strb.w	r6, [r5, #724]	; 0x2d4
   18264:	2300      	movs	r3, #0
   18266:	f8a5 6318 	strh.w	r6, [r5, #792]	; 0x318
   1826a:	461a      	mov	r2, r3
   1826c:	4619      	mov	r1, r3
   1826e:	4628      	mov	r0, r5
   18270:	9600      	str	r6, [sp, #0]
   18272:	f000 f891 	bl	18398 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1ac>
   18276:	2800      	cmp	r0, #0
   18278:	d161      	bne.n	1833e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x152>
   1827a:	f8c5 62d0 	str.w	r6, [r5, #720]	; 0x2d0
   1827e:	f8c5 62c8 	str.w	r6, [r5, #712]	; 0x2c8
   18282:	f885 72d4 	strb.w	r7, [r5, #724]	; 0x2d4
   18286:	f8a5 62e6 	strh.w	r6, [r5, #742]	; 0x2e6
   1828a:	f8a5 62e4 	strh.w	r6, [r5, #740]	; 0x2e4
   1828e:	f885 62e9 	strb.w	r6, [r5, #745]	; 0x2e9
   18292:	f8b5 00ac 	ldrh.w	r0, [r5, #172]	; 0xac
   18296:	1e40      	subs	r0, r0, #1
   18298:	f8a5 00ac 	strh.w	r0, [r5, #172]	; 0xac
   1829c:	f8a5 631a 	strh.w	r6, [r5, #794]	; 0x31a
   182a0:	f004 fc1e 	bl	1cae0 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>
   182a4:	f7f7 fc0c 	bl	fac0 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
   182a8:	f894 0110 	ldrb.w	r0, [r4, #272]	; 0x110
   182ac:	464a      	mov	r2, r9
   182ae:	4939      	ldr	r1, [pc, #228]	; (18394 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1a8>)
   182b0:	f7f7 fa94 	bl	f7dc <sym_MLZNDMDYRI6WNTNQ4RIQGPD423CK7RT4YVI5CAI>
   182b4:	2800      	cmp	r0, #0
   182b6:	bf18      	it	ne
   182b8:	e8bd 8ff8 	ldmiane.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   182bc:	f240 7156 	movw	r1, #1878	; 0x756
   182c0:	2030      	movs	r0, #48	; 0x30
   182c2:	f7f9 fb5d 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   182c6:	f004 fbff 	bl	1cac8 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>
   182ca:	f8c9 0320 	str.w	r0, [r9, #800]	; 0x320
   182ce:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   182d2:	f8d9 a320 	ldr.w	sl, [r9, #800]	; 0x320
   182d6:	f884 6118 	strb.w	r6, [r4, #280]	; 0x118
   182da:	e9d4 5850 	ldrd	r5, r8, [r4, #320]	; 0x140
   182de:	f8d4 1114 	ldr.w	r1, [r4, #276]	; 0x114
   182e2:	2001      	movs	r0, #1
   182e4:	f881 02a7 	strb.w	r0, [r1, #679]	; 0x2a7
   182e8:	f884 6128 	strb.w	r6, [r4, #296]	; 0x128
   182ec:	f884 7129 	strb.w	r7, [r4, #297]	; 0x129
   182f0:	2101      	movs	r1, #1
   182f2:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
   182f6:	f7fb fe01 	bl	13efc <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
   182fa:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
   182fe:	f8c0 5308 	str.w	r5, [r0, #776]	; 0x308
   18302:	f8c0 830c 	str.w	r8, [r0, #780]	; 0x30c
   18306:	f8d4 1114 	ldr.w	r1, [r4, #276]	; 0x114
   1830a:	f894 0110 	ldrb.w	r0, [r4, #272]	; 0x110
   1830e:	f881 031c 	strb.w	r0, [r1, #796]	; 0x31c
   18312:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
   18316:	f8c0 a320 	str.w	sl, [r0, #800]	; 0x320
   1831a:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
   1831e:	e9c0 58c4 	strd	r5, r8, [r0, #784]	; 0x310
   18322:	f8d4 5114 	ldr.w	r5, [r4, #276]	; 0x114
   18326:	f885 62d4 	strb.w	r6, [r5, #724]	; 0x2d4
   1832a:	2300      	movs	r3, #0
   1832c:	f8a5 6318 	strh.w	r6, [r5, #792]	; 0x318
   18330:	461a      	mov	r2, r3
   18332:	4619      	mov	r1, r3
   18334:	4628      	mov	r0, r5
   18336:	9600      	str	r6, [sp, #0]
   18338:	f000 f82e 	bl	18398 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1ac>
   1833c:	b120      	cbz	r0, 18348 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x15c>
   1833e:	f44f 7106 	mov.w	r1, #536	; 0x218
   18342:	2030      	movs	r0, #48	; 0x30
   18344:	f7f9 fb1c 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   18348:	f8c5 62d0 	str.w	r6, [r5, #720]	; 0x2d0
   1834c:	f8c5 62c8 	str.w	r6, [r5, #712]	; 0x2c8
   18350:	f885 72d4 	strb.w	r7, [r5, #724]	; 0x2d4
   18354:	f8a5 62e6 	strh.w	r6, [r5, #742]	; 0x2e6
   18358:	f8a5 62e4 	strh.w	r6, [r5, #740]	; 0x2e4
   1835c:	f885 62e9 	strb.w	r6, [r5, #745]	; 0x2e9
   18360:	f8b5 00ac 	ldrh.w	r0, [r5, #172]	; 0xac
   18364:	1e40      	subs	r0, r0, #1
   18366:	f8a5 00ac 	strh.w	r0, [r5, #172]	; 0xac
   1836a:	f8a5 631a 	strh.w	r6, [r5, #794]	; 0x31a
   1836e:	f004 fbb7 	bl	1cae0 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>
   18372:	f7f7 fba5 	bl	fac0 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
   18376:	f894 0110 	ldrb.w	r0, [r4, #272]	; 0x110
   1837a:	464a      	mov	r2, r9
   1837c:	4905      	ldr	r1, [pc, #20]	; (18394 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1a8>)
   1837e:	f7f7 fa2d 	bl	f7dc <sym_MLZNDMDYRI6WNTNQ4RIQGPD423CK7RT4YVI5CAI>
   18382:	2800      	cmp	r0, #0
   18384:	bf18      	it	ne
   18386:	e8bd 8ff8 	ldmiane.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1838a:	f240 7167 	movw	r1, #1895	; 0x767
   1838e:	2030      	movs	r0, #48	; 0x30
   18390:	f7f9 faf6 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   18394:	00018a41 	.word	0x00018a41
   18398:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1839c:	b08f      	sub	sp, #60	; 0x3c
   1839e:	4604      	mov	r4, r0
   183a0:	2000      	movs	r0, #0
   183a2:	9002      	str	r0, [sp, #8]
   183a4:	f894 006f 	ldrb.w	r0, [r4, #111]	; 0x6f
   183a8:	469b      	mov	fp, r3
   183aa:	4689      	mov	r9, r1
   183ac:	930b      	str	r3, [sp, #44]	; 0x2c
   183ae:	9007      	str	r0, [sp, #28]
   183b0:	f00b f83b 	bl	2342a <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>
   183b4:	4601      	mov	r1, r0
   183b6:	f894 0297 	ldrb.w	r0, [r4, #663]	; 0x297
   183ba:	280c      	cmp	r0, #12
   183bc:	d275      	bcs.n	184aa <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x2be>
   183be:	4afb      	ldr	r2, [pc, #1004]	; (187ac <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5c0>)
   183c0:	f832 0010 	ldrh.w	r0, [r2, r0, lsl #1]
   183c4:	4408      	add	r0, r1
   183c6:	b285      	uxth	r5, r0
   183c8:	f894 00b6 	ldrb.w	r0, [r4, #182]	; 0xb6
   183cc:	280f      	cmp	r0, #15
   183ce:	bf0c      	ite	eq
   183d0:	2001      	moveq	r0, #1
   183d2:	2000      	movne	r0, #0
   183d4:	9008      	str	r0, [sp, #32]
   183d6:	9811      	ldr	r0, [sp, #68]	; 0x44
   183d8:	2800      	cmp	r0, #0
   183da:	bf04      	itt	eq
   183dc:	f894 02d4 	ldrbeq.w	r0, [r4, #724]	; 0x2d4
   183e0:	2803      	cmpeq	r0, #3
   183e2:	d128      	bne.n	18436 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x24a>
   183e4:	9808      	ldr	r0, [sp, #32]
   183e6:	b330      	cbz	r0, 18436 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x24a>
   183e8:	f8b4 0344 	ldrh.w	r0, [r4, #836]	; 0x344
   183ec:	4548      	cmp	r0, r9
   183ee:	d122      	bne.n	18436 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x24a>
   183f0:	f8d4 02dc 	ldr.w	r0, [r4, #732]	; 0x2dc
   183f4:	f8c4 02c8 	str.w	r0, [r4, #712]	; 0x2c8
   183f8:	6960      	ldr	r0, [r4, #20]
   183fa:	f8c4 02cc 	str.w	r0, [r4, #716]	; 0x2cc
   183fe:	f8b4 031a 	ldrh.w	r0, [r4, #794]	; 0x31a
   18402:	f8b4 12ae 	ldrh.w	r1, [r4, #686]	; 0x2ae
   18406:	4408      	add	r0, r1
   18408:	f8c4 02d0 	str.w	r0, [r4, #720]	; 0x2d0
   1840c:	4620      	mov	r0, r4
   1840e:	f009 fa86 	bl	2191e <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ>
   18412:	f8d4 0348 	ldr.w	r0, [r4, #840]	; 0x348
   18416:	6260      	str	r0, [r4, #36]	; 0x24
   18418:	f8b4 0346 	ldrh.w	r0, [r4, #838]	; 0x346
   1841c:	8520      	strh	r0, [r4, #40]	; 0x28
   1841e:	f8d4 034c 	ldr.w	r0, [r4, #844]	; 0x34c
   18422:	6160      	str	r0, [r4, #20]
   18424:	f8b4 0350 	ldrh.w	r0, [r4, #848]	; 0x350
   18428:	83a0      	strh	r0, [r4, #28]
   1842a:	f8b4 0352 	ldrh.w	r0, [r4, #850]	; 0x352
   1842e:	83e0      	strh	r0, [r4, #30]
   18430:	2002      	movs	r0, #2
   18432:	f884 02d4 	strb.w	r0, [r4, #724]	; 0x2d4
   18436:	f8b4 00ac 	ldrh.w	r0, [r4, #172]	; 0xac
   1843a:	f504 763c 	add.w	r6, r4, #752	; 0x2f0
   1843e:	eba9 0000 	sub.w	r0, r9, r0
   18442:	fa0f f880 	sxth.w	r8, r0
   18446:	f8b4 0318 	ldrh.w	r0, [r4, #792]	; 0x318
   1844a:	eba9 0000 	sub.w	r0, r9, r0
   1844e:	b207      	sxth	r7, r0
   18450:	2f00      	cmp	r7, #0
   18452:	da0b      	bge.n	1846c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x280>
   18454:	f8d4 0308 	ldr.w	r0, [r4, #776]	; 0x308
   18458:	f8d4 130c 	ldr.w	r1, [r4, #780]	; 0x30c
   1845c:	4647      	mov	r7, r8
   1845e:	e9c4 01c4 	strd	r0, r1, [r4, #784]	; 0x310
   18462:	2001      	movs	r0, #1
   18464:	900b      	str	r0, [sp, #44]	; 0x2c
   18466:	2000      	movs	r0, #0
   18468:	f884 02eb 	strb.w	r0, [r4, #747]	; 0x2eb
   1846c:	48d0      	ldr	r0, [pc, #832]	; (187b0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5c4>)
   1846e:	f04f 0a00 	mov.w	sl, #0
   18472:	7880      	ldrb	r0, [r0, #2]
   18474:	2800      	cmp	r0, #0
   18476:	d07c      	beq.n	18572 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x386>
   18478:	f7f8 fd76 	bl	10f68 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>
   1847c:	2800      	cmp	r0, #0
   1847e:	d078      	beq.n	18572 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x386>
   18480:	f8b4 02c0 	ldrh.w	r0, [r4, #704]	; 0x2c0
   18484:	2802      	cmp	r0, #2
   18486:	d37c      	bcc.n	18582 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x396>
   18488:	f894 02d4 	ldrb.w	r0, [r4, #724]	; 0x2d4
   1848c:	2802      	cmp	r0, #2
   1848e:	d078      	beq.n	18582 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x396>
   18490:	f894 02ea 	ldrb.w	r0, [r4, #746]	; 0x2ea
   18494:	2800      	cmp	r0, #0
   18496:	d174      	bne.n	18582 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x396>
   18498:	6960      	ldr	r0, [r4, #20]
   1849a:	f641 514c 	movw	r1, #7500	; 0x1d4c
   1849e:	4288      	cmp	r0, r1
   184a0:	d36f      	bcc.n	18582 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x396>
   184a2:	f894 1297 	ldrb.w	r1, [r4, #663]	; 0x297
   184a6:	290c      	cmp	r1, #12
   184a8:	d304      	bcc.n	184b4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x2c8>
   184aa:	f240 3183 	movw	r1, #899	; 0x383
   184ae:	2006      	movs	r0, #6
   184b0:	f7f9 fa66 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   184b4:	4abd      	ldr	r2, [pc, #756]	; (187ac <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5c0>)
   184b6:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
   184ba:	f894 22d4 	ldrb.w	r2, [r4, #724]	; 0x2d4
   184be:	f501 61c8 	add.w	r1, r1, #1600	; 0x640
   184c2:	b289      	uxth	r1, r1
   184c4:	460d      	mov	r5, r1
   184c6:	2a01      	cmp	r2, #1
   184c8:	d016      	beq.n	184f8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x30c>
   184ca:	f006 f899 	bl	1e600 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
   184ce:	4601      	mov	r1, r0
   184d0:	6962      	ldr	r2, [r4, #20]
   184d2:	f641 504c 	movw	r0, #7500	; 0x1d4c
   184d6:	4282      	cmp	r2, r0
   184d8:	bf2c      	ite	cs
   184da:	2000      	movcs	r0, #0
   184dc:	2002      	movcc	r0, #2
   184de:	4408      	add	r0, r1
   184e0:	f8b4 22ae 	ldrh.w	r2, [r4, #686]	; 0x2ae
   184e4:	4442      	add	r2, r8
   184e6:	1bd1      	subs	r1, r2, r7
   184e8:	f8d4 22dc 	ldr.w	r2, [r4, #732]	; 0x2dc
   184ec:	f8c4 02dc 	str.w	r0, [r4, #732]	; 0x2dc
   184f0:	1a82      	subs	r2, r0, r2
   184f2:	fb01 aa02 	mla	sl, r1, r2, sl
   184f6:	e041      	b.n	1857c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x390>
   184f8:	f894 00b9 	ldrb.w	r0, [r4, #185]	; 0xb9
   184fc:	2803      	cmp	r0, #3
   184fe:	d054      	beq.n	185aa <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3be>
   18500:	f894 106f 	ldrb.w	r1, [r4, #111]	; 0x6f
   18504:	f894 02a7 	ldrb.w	r0, [r4, #679]	; 0x2a7
   18508:	f007 feb8 	bl	2027c <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>
   1850c:	6a61      	ldr	r1, [r4, #36]	; 0x24
   1850e:	4408      	add	r0, r1
   18510:	9006      	str	r0, [sp, #24]
   18512:	4629      	mov	r1, r5
   18514:	f8d4 02cc 	ldr.w	r0, [r4, #716]	; 0x2cc
   18518:	f006 f872 	bl	1e600 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
   1851c:	f8d4 22c8 	ldr.w	r2, [r4, #712]	; 0x2c8
   18520:	f8d4 12d0 	ldr.w	r1, [r4, #720]	; 0x2d0
   18524:	1a82      	subs	r2, r0, r2
   18526:	fb01 aa02 	mla	sl, r1, r2, sl
   1852a:	f8c4 02c8 	str.w	r0, [r4, #712]	; 0x2c8
   1852e:	4629      	mov	r1, r5
   18530:	9806      	ldr	r0, [sp, #24]
   18532:	f006 f865 	bl	1e600 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
   18536:	f8d4 12d8 	ldr.w	r1, [r4, #728]	; 0x2d8
   1853a:	f8c4 02d8 	str.w	r0, [r4, #728]	; 0x2d8
   1853e:	1a41      	subs	r1, r0, r1
   18540:	448a      	add	sl, r1
   18542:	4629      	mov	r1, r5
   18544:	6960      	ldr	r0, [r4, #20]
   18546:	f006 f85b 	bl	1e600 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
   1854a:	6962      	ldr	r2, [r4, #20]
   1854c:	f641 514c 	movw	r1, #7500	; 0x1d4c
   18550:	428a      	cmp	r2, r1
   18552:	bf34      	ite	cc
   18554:	2102      	movcc	r1, #2
   18556:	2100      	movcs	r1, #0
   18558:	4408      	add	r0, r1
   1855a:	f8b4 22ae 	ldrh.w	r2, [r4, #686]	; 0x2ae
   1855e:	4442      	add	r2, r8
   18560:	1bd1      	subs	r1, r2, r7
   18562:	f8d4 22d0 	ldr.w	r2, [r4, #720]	; 0x2d0
   18566:	1a89      	subs	r1, r1, r2
   18568:	f8d4 22dc 	ldr.w	r2, [r4, #732]	; 0x2dc
   1856c:	1a82      	subs	r2, r0, r2
   1856e:	1e49      	subs	r1, r1, #1
   18570:	e000      	b.n	18574 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x388>
   18572:	e006      	b.n	18582 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x396>
   18574:	fb01 aa02 	mla	sl, r1, r2, sl
   18578:	f8c4 02dc 	str.w	r0, [r4, #732]	; 0x2dc
   1857c:	2001      	movs	r0, #1
   1857e:	f884 02ea 	strb.w	r0, [r4, #746]	; 0x2ea
   18582:	f8cd a010 	str.w	sl, [sp, #16]
   18586:	f894 02d4 	ldrb.w	r0, [r4, #724]	; 0x2d4
   1858a:	f24a 3aa1 	movw	sl, #41889	; 0xa3a1
   1858e:	b190      	cbz	r0, 185b6 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3ca>
   18590:	2801      	cmp	r0, #1
   18592:	f000 810f 	beq.w	187b4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5c8>
   18596:	2802      	cmp	r0, #2
   18598:	d07d      	beq.n	18696 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4aa>
   1859a:	2803      	cmp	r0, #3
   1859c:	f000 813c 	beq.w	18818 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x62c>
   185a0:	f240 5146 	movw	r1, #1350	; 0x546
   185a4:	2030      	movs	r0, #48	; 0x30
   185a6:	f7f9 f9eb 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   185aa:	6a61      	ldr	r1, [r4, #36]	; 0x24
   185ac:	f8d4 02cc 	ldr.w	r0, [r4, #716]	; 0x2cc
   185b0:	4408      	add	r0, r1
   185b2:	9006      	str	r0, [sp, #24]
   185b4:	e7ad      	b.n	18512 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x326>
   185b6:	f894 106f 	ldrb.w	r1, [r4, #111]	; 0x6f
   185ba:	f894 02a7 	ldrb.w	r0, [r4, #679]	; 0x2a7
   185be:	f007 fe5d 	bl	2027c <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>
   185c2:	4607      	mov	r7, r0
   185c4:	6a60      	ldr	r0, [r4, #36]	; 0x24
   185c6:	4629      	mov	r1, r5
   185c8:	4438      	add	r0, r7
   185ca:	f006 f819 	bl	1e600 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
   185ce:	f8c4 02d8 	str.w	r0, [r4, #728]	; 0x2d8
   185d2:	4629      	mov	r1, r5
   185d4:	6960      	ldr	r0, [r4, #20]
   185d6:	f006 f813 	bl	1e600 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
   185da:	6962      	ldr	r2, [r4, #20]
   185dc:	f641 514c 	movw	r1, #7500	; 0x1d4c
   185e0:	428a      	cmp	r2, r1
   185e2:	bf34      	ite	cc
   185e4:	2102      	movcc	r1, #2
   185e6:	2100      	movcs	r1, #0
   185e8:	4408      	add	r0, r1
   185ea:	f8c4 02dc 	str.w	r0, [r4, #732]	; 0x2dc
   185ee:	a901      	add	r1, sp, #4
   185f0:	a807      	add	r0, sp, #28
   185f2:	f004 f989 	bl	1c908 <sym_LSYZDZOMTD6BKKRX25HIBNLFKSFDXBS3PS4UKOY>
   185f6:	e9d4 01c4 	ldrd	r0, r1, [r4, #784]	; 0x310
   185fa:	9b01      	ldr	r3, [sp, #4]
   185fc:	9a07      	ldr	r2, [sp, #28]
   185fe:	f7f7 fc77 	bl	fef0 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ>
   18602:	9006      	str	r0, [sp, #24]
   18604:	f894 506f 	ldrb.w	r5, [r4, #111]	; 0x6f
   18608:	4628      	mov	r0, r5
   1860a:	f004 fbb5 	bl	1cd78 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   1860e:	f64d 7141 	movw	r1, #57153	; 0xdf41
   18612:	4408      	add	r0, r1
   18614:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
   18618:	fbb0 f0f8 	udiv	r0, r0, r8
   1861c:	f015 010c 	ands.w	r1, r5, #12
   18620:	bf18      	it	ne
   18622:	2128      	movne	r1, #40	; 0x28
   18624:	4408      	add	r0, r1
   18626:	f100 02bc 	add.w	r2, r0, #188	; 0xbc
   1862a:	f240 111b 	movw	r1, #283	; 0x11b
   1862e:	4620      	mov	r0, r4
   18630:	f008 fb68 	bl	20d04 <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY>
   18634:	f8d4 0320 	ldr.w	r0, [r4, #800]	; 0x320
   18638:	9002      	str	r0, [sp, #8]
   1863a:	f894 006f 	ldrb.w	r0, [r4, #111]	; 0x6f
   1863e:	f004 fb9b 	bl	1cd78 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   18642:	4450      	add	r0, sl
   18644:	fbb0 f0f8 	udiv	r0, r0, r8
   18648:	6a61      	ldr	r1, [r4, #36]	; 0x24
   1864a:	9a02      	ldr	r2, [sp, #8]
   1864c:	4439      	add	r1, r7
   1864e:	1a08      	subs	r0, r1, r0
   18650:	f8d4 12d8 	ldr.w	r1, [r4, #728]	; 0x2d8
   18654:	1a40      	subs	r0, r0, r1
   18656:	4410      	add	r0, r2
   18658:	9a06      	ldr	r2, [sp, #24]
   1865a:	3820      	subs	r0, #32
   1865c:	1a80      	subs	r0, r0, r2
   1865e:	9002      	str	r0, [sp, #8]
   18660:	0048      	lsls	r0, r1, #1
   18662:	8d21      	ldrh	r1, [r4, #40]	; 0x28
   18664:	3060      	adds	r0, #96	; 0x60
   18666:	f894 506f 	ldrb.w	r5, [r4, #111]	; 0x6f
   1866a:	1847      	adds	r7, r0, r1
   1866c:	f015 0f0c 	tst.w	r5, #12
   18670:	bf0a      	itet	eq
   18672:	4628      	moveq	r0, r5
   18674:	f64e 2060 	movwne	r0, #60000	; 0xea60
   18678:	f004 fb7e 	bleq	1cd78 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   1867c:	4450      	add	r0, sl
   1867e:	fbb0 f8f8 	udiv	r8, r0, r8
   18682:	4628      	mov	r0, r5
   18684:	f004 fb2a 	bl	1ccdc <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
   18688:	4440      	add	r0, r8
   1868a:	4438      	add	r0, r7
   1868c:	f100 0122 	add.w	r1, r0, #34	; 0x22
   18690:	4847      	ldr	r0, [pc, #284]	; (187b0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5c4>)
   18692:	6141      	str	r1, [r0, #20]
   18694:	e000      	b.n	18698 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4ac>
   18696:	e00c      	b.n	186b2 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4c6>
   18698:	f8d4 0320 	ldr.w	r0, [r4, #800]	; 0x320
   1869c:	9902      	ldr	r1, [sp, #8]
   1869e:	1a08      	subs	r0, r1, r0
   186a0:	f5b0 7fec 	cmp.w	r0, #472	; 0x1d8
   186a4:	f080 8133 	bcs.w	1890e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x722>
   186a8:	f240 41df 	movw	r1, #1247	; 0x4df
   186ac:	2030      	movs	r0, #48	; 0x30
   186ae:	f7f9 f967 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   186b2:	6a61      	ldr	r1, [r4, #36]	; 0x24
   186b4:	f8d4 02cc 	ldr.w	r0, [r4, #716]	; 0x2cc
   186b8:	4408      	add	r0, r1
   186ba:	4629      	mov	r1, r5
   186bc:	f005 ffa0 	bl	1e600 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
   186c0:	f8c4 02d8 	str.w	r0, [r4, #728]	; 0x2d8
   186c4:	4629      	mov	r1, r5
   186c6:	6960      	ldr	r0, [r4, #20]
   186c8:	f005 ff9a 	bl	1e600 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
   186cc:	6962      	ldr	r2, [r4, #20]
   186ce:	f641 514c 	movw	r1, #7500	; 0x1d4c
   186d2:	428a      	cmp	r2, r1
   186d4:	bf34      	ite	cc
   186d6:	2102      	movcc	r1, #2
   186d8:	2100      	movcs	r1, #0
   186da:	4408      	add	r0, r1
   186dc:	f8c4 02dc 	str.w	r0, [r4, #732]	; 0x2dc
   186e0:	f894 506f 	ldrb.w	r5, [r4, #111]	; 0x6f
   186e4:	4628      	mov	r0, r5
   186e6:	f004 fb47 	bl	1cd78 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   186ea:	f64d 7141 	movw	r1, #57153	; 0xdf41
   186ee:	4401      	add	r1, r0
   186f0:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
   186f4:	fbb1 f0f8 	udiv	r0, r1, r8
   186f8:	f015 010c 	ands.w	r1, r5, #12
   186fc:	bf18      	it	ne
   186fe:	2128      	movne	r1, #40	; 0x28
   18700:	4408      	add	r0, r1
   18702:	f100 02bc 	add.w	r2, r0, #188	; 0xbc
   18706:	f240 111b 	movw	r1, #283	; 0x11b
   1870a:	4620      	mov	r0, r4
   1870c:	f008 fafa 	bl	20d04 <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY>
   18710:	f8b4 02ae 	ldrh.w	r0, [r4, #686]	; 0x2ae
   18714:	b9e0      	cbnz	r0, 18750 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x564>
   18716:	f1bb 0f00 	cmp.w	fp, #0
   1871a:	d019      	beq.n	18750 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x564>
   1871c:	f894 506f 	ldrb.w	r5, [r4, #111]	; 0x6f
   18720:	4628      	mov	r0, r5
   18722:	f004 fb29 	bl	1cd78 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   18726:	eb00 010a 	add.w	r1, r0, sl
   1872a:	fbb1 f0f8 	udiv	r0, r1, r8
   1872e:	f8d4 12d8 	ldr.w	r1, [r4, #728]	; 0x2d8
   18732:	6a62      	ldr	r2, [r4, #36]	; 0x24
   18734:	4408      	add	r0, r1
   18736:	f8d4 12cc 	ldr.w	r1, [r4, #716]	; 0x2cc
   1873a:	4411      	add	r1, r2
   1873c:	1a0f      	subs	r7, r1, r0
   1873e:	4628      	mov	r0, r5
   18740:	f004 facc 	bl	1ccdc <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
   18744:	f8d4 1324 	ldr.w	r1, [r4, #804]	; 0x324
   18748:	1a08      	subs	r0, r1, r0
   1874a:	4438      	add	r0, r7
   1874c:	3820      	subs	r0, #32
   1874e:	e006      	b.n	1875e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x572>
   18750:	6a61      	ldr	r1, [r4, #36]	; 0x24
   18752:	f8d4 02cc 	ldr.w	r0, [r4, #716]	; 0x2cc
   18756:	4408      	add	r0, r1
   18758:	f8d4 12d8 	ldr.w	r1, [r4, #728]	; 0x2d8
   1875c:	1a40      	subs	r0, r0, r1
   1875e:	9002      	str	r0, [sp, #8]
   18760:	f8d4 22d0 	ldr.w	r2, [r4, #720]	; 0x2d0
   18764:	f8d4 12c8 	ldr.w	r1, [r4, #712]	; 0x2c8
   18768:	f8d4 02d8 	ldr.w	r0, [r4, #728]	; 0x2d8
   1876c:	f894 506f 	ldrb.w	r5, [r4, #111]	; 0x6f
   18770:	fb01 0002 	mla	r0, r1, r2, r0
   18774:	0040      	lsls	r0, r0, #1
   18776:	8d21      	ldrh	r1, [r4, #40]	; 0x28
   18778:	3060      	adds	r0, #96	; 0x60
   1877a:	1847      	adds	r7, r0, r1
   1877c:	f015 0f0c 	tst.w	r5, #12
   18780:	bf0a      	itet	eq
   18782:	4628      	moveq	r0, r5
   18784:	f64e 2060 	movwne	r0, #60000	; 0xea60
   18788:	f004 faf6 	bleq	1cd78 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   1878c:	eb00 010a 	add.w	r1, r0, sl
   18790:	fbb1 f8f8 	udiv	r8, r1, r8
   18794:	4628      	mov	r0, r5
   18796:	f004 faa1 	bl	1ccdc <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
   1879a:	4905      	ldr	r1, [pc, #20]	; (187b0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5c4>)
   1879c:	4440      	add	r0, r8
   1879e:	4438      	add	r0, r7
   187a0:	6148      	str	r0, [r1, #20]
   187a2:	2001      	movs	r0, #1
   187a4:	f884 02d4 	strb.w	r0, [r4, #724]	; 0x2d4
   187a8:	e0b1      	b.n	1890e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x722>
   187aa:	0000      	.short	0x0000
   187ac:	00018d44 	.word	0x00018d44
   187b0:	20000184 	.word	0x20000184
   187b4:	6961      	ldr	r1, [r4, #20]
   187b6:	f8d4 02dc 	ldr.w	r0, [r4, #732]	; 0x2dc
   187ba:	1a09      	subs	r1, r1, r0
   187bc:	4379      	muls	r1, r7
   187be:	9102      	str	r1, [sp, #8]
   187c0:	f8b4 12ae 	ldrh.w	r1, [r4, #686]	; 0x2ae
   187c4:	f8d4 c2c8 	ldr.w	ip, [r4, #712]	; 0x2c8
   187c8:	eb01 0208 	add.w	r2, r1, r8
   187cc:	f8d4 12d0 	ldr.w	r1, [r4, #720]	; 0x2d0
   187d0:	f8d4 32d8 	ldr.w	r3, [r4, #728]	; 0x2d8
   187d4:	1a52      	subs	r2, r2, r1
   187d6:	fb0c 3101 	mla	r1, ip, r1, r3
   187da:	1e52      	subs	r2, r2, #1
   187dc:	fb02 1000 	mla	r0, r2, r0, r1
   187e0:	0040      	lsls	r0, r0, #1
   187e2:	8d21      	ldrh	r1, [r4, #40]	; 0x28
   187e4:	3060      	adds	r0, #96	; 0x60
   187e6:	f894 506f 	ldrb.w	r5, [r4, #111]	; 0x6f
   187ea:	1847      	adds	r7, r0, r1
   187ec:	f015 0f0c 	tst.w	r5, #12
   187f0:	bf0a      	itet	eq
   187f2:	4628      	moveq	r0, r5
   187f4:	f64e 2060 	movwne	r0, #60000	; 0xea60
   187f8:	f004 fabe 	bleq	1cd78 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   187fc:	eb00 010a 	add.w	r1, r0, sl
   18800:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   18804:	fbb1 f8f0 	udiv	r8, r1, r0
   18808:	4628      	mov	r0, r5
   1880a:	f004 fa67 	bl	1ccdc <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
   1880e:	498a      	ldr	r1, [pc, #552]	; (18a38 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x84c>)
   18810:	4440      	add	r0, r8
   18812:	4438      	add	r0, r7
   18814:	6148      	str	r0, [r1, #20]
   18816:	e07a      	b.n	1890e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x722>
   18818:	6960      	ldr	r0, [r4, #20]
   1881a:	4378      	muls	r0, r7
   1881c:	9002      	str	r0, [sp, #8]
   1881e:	f1bb 0f00 	cmp.w	fp, #0
   18822:	d007      	beq.n	18834 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x648>
   18824:	f8b4 12ae 	ldrh.w	r1, [r4, #686]	; 0x2ae
   18828:	2900      	cmp	r1, #0
   1882a:	bf04      	itt	eq
   1882c:	2100      	moveq	r1, #0
   1882e:	f884 12eb 	strbeq.w	r1, [r4, #747]	; 0x2eb
   18832:	d003      	beq.n	1883c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x650>
   18834:	f894 12eb 	ldrb.w	r1, [r4, #747]	; 0x2eb
   18838:	2900      	cmp	r1, #0
   1883a:	d168      	bne.n	1890e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x722>
   1883c:	f8d4 12dc 	ldr.w	r1, [r4, #732]	; 0x2dc
   18840:	fb07 0011 	mls	r0, r7, r1, r0
   18844:	9002      	str	r0, [sp, #8]
   18846:	f894 00b5 	ldrb.w	r0, [r4, #181]	; 0xb5
   1884a:	2827      	cmp	r0, #39	; 0x27
   1884c:	bf1c      	itt	ne
   1884e:	f894 00b6 	ldrbne.w	r0, [r4, #182]	; 0xb6
   18852:	2827      	cmpne	r0, #39	; 0x27
   18854:	d10b      	bne.n	1886e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x682>
   18856:	f8b4 0344 	ldrh.w	r0, [r4, #836]	; 0x344
   1885a:	eba9 0000 	sub.w	r0, r9, r0
   1885e:	b200      	sxth	r0, r0
   18860:	2800      	cmp	r0, #0
   18862:	db04      	blt.n	1886e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x682>
   18864:	f894 0347 	ldrb.w	r0, [r4, #839]	; 0x347
   18868:	2800      	cmp	r0, #0
   1886a:	bf18      	it	ne
   1886c:	9007      	strne	r0, [sp, #28]
   1886e:	980b      	ldr	r0, [sp, #44]	; 0x2c
   18870:	b308      	cbz	r0, 188b6 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x6ca>
   18872:	f8b4 02ae 	ldrh.w	r0, [r4, #686]	; 0x2ae
   18876:	b9f0      	cbnz	r0, 188b6 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x6ca>
   18878:	f8d4 0324 	ldr.w	r0, [r4, #804]	; 0x324
   1887c:	2800      	cmp	r0, #0
   1887e:	d07c      	beq.n	1897a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x78e>
   18880:	f894 006f 	ldrb.w	r0, [r4, #111]	; 0x6f
   18884:	f010 0f0c 	tst.w	r0, #12
   18888:	bf14      	ite	ne
   1888a:	f64e 2060 	movwne	r0, #60000	; 0xea60
   1888e:	f004 fa73 	bleq	1cd78 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   18892:	eb00 010a 	add.w	r1, r0, sl
   18896:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   1889a:	fbb1 f0f0 	udiv	r0, r1, r0
   1889e:	9902      	ldr	r1, [sp, #8]
   188a0:	1a0d      	subs	r5, r1, r0
   188a2:	f894 006f 	ldrb.w	r0, [r4, #111]	; 0x6f
   188a6:	f004 fa19 	bl	1ccdc <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
   188aa:	f8d4 1324 	ldr.w	r1, [r4, #804]	; 0x324
   188ae:	1a08      	subs	r0, r1, r0
   188b0:	4428      	add	r0, r5
   188b2:	3820      	subs	r0, #32
   188b4:	9002      	str	r0, [sp, #8]
   188b6:	f8b4 02ae 	ldrh.w	r0, [r4, #686]	; 0x2ae
   188ba:	f8d4 12dc 	ldr.w	r1, [r4, #732]	; 0x2dc
   188be:	4440      	add	r0, r8
   188c0:	4348      	muls	r0, r1
   188c2:	0040      	lsls	r0, r0, #1
   188c4:	9d07      	ldr	r5, [sp, #28]
   188c6:	f100 0760 	add.w	r7, r0, #96	; 0x60
   188ca:	f015 0f0c 	tst.w	r5, #12
   188ce:	bf0a      	itet	eq
   188d0:	4628      	moveq	r0, r5
   188d2:	f64e 2060 	movwne	r0, #60000	; 0xea60
   188d6:	f004 fa4f 	bleq	1cd78 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   188da:	eb00 010a 	add.w	r1, r0, sl
   188de:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   188e2:	fbb1 f8f0 	udiv	r8, r1, r0
   188e6:	4628      	mov	r0, r5
   188e8:	f004 f9f8 	bl	1ccdc <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
   188ec:	eb08 0100 	add.w	r1, r8, r0
   188f0:	19c8      	adds	r0, r1, r7
   188f2:	4951      	ldr	r1, [pc, #324]	; (18a38 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x84c>)
   188f4:	6148      	str	r0, [r1, #20]
   188f6:	6960      	ldr	r0, [r4, #20]
   188f8:	f641 514c 	movw	r1, #7500	; 0x1d4c
   188fc:	4288      	cmp	r0, r1
   188fe:	d206      	bcs.n	1890e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x722>
   18900:	ab02      	add	r3, sp, #8
   18902:	4a4e      	ldr	r2, [pc, #312]	; (18a3c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x850>)
   18904:	4639      	mov	r1, r7
   18906:	f007 fd2f 	bl	20368 <sym_OTIPANP3Q7VLW2BQGLZZUUDNR5HBSAYXJSFAKKA>
   1890a:	f884 02eb 	strb.w	r0, [r4, #747]	; 0x2eb
   1890e:	9902      	ldr	r1, [sp, #8]
   18910:	9804      	ldr	r0, [sp, #16]
   18912:	4a49      	ldr	r2, [pc, #292]	; (18a38 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x84c>)
   18914:	1a08      	subs	r0, r1, r0
   18916:	9002      	str	r0, [sp, #8]
   18918:	f8d4 32dc 	ldr.w	r3, [r4, #732]	; 0x2dc
   1891c:	6960      	ldr	r0, [r4, #20]
   1891e:	6951      	ldr	r1, [r2, #20]
   18920:	1ac0      	subs	r0, r0, r3
   18922:	f2a0 1089 	subw	r0, r0, #393	; 0x189
   18926:	6190      	str	r0, [r2, #24]
   18928:	4281      	cmp	r1, r0
   1892a:	bf98      	it	ls
   1892c:	4608      	movls	r0, r1
   1892e:	2500      	movs	r5, #0
   18930:	f8c4 02a8 	str.w	r0, [r4, #680]	; 0x2a8
   18934:	7035      	strb	r5, [r6, #0]
   18936:	2064      	movs	r0, #100	; 0x64
   18938:	8130      	strh	r0, [r6, #8]
   1893a:	e9d4 12c4 	ldrd	r1, r2, [r4, #784]	; 0x310
   1893e:	9802      	ldr	r0, [sp, #8]
   18940:	1808      	adds	r0, r1, r0
   18942:	eb42 0105 	adc.w	r1, r2, r5
   18946:	e9c6 0104 	strd	r0, r1, [r6, #16]
   1894a:	f104 0030 	add.w	r0, r4, #48	; 0x30
   1894e:	f008 f9d7 	bl	20d00 <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
   18952:	f8d4 12a8 	ldr.w	r1, [r4, #680]	; 0x2a8
   18956:	4408      	add	r0, r1
   18958:	6070      	str	r0, [r6, #4]
   1895a:	e9d6 0104 	ldrd	r0, r1, [r6, #16]
   1895e:	e9c4 01c4 	strd	r0, r1, [r4, #784]	; 0x310
   18962:	f8a4 9318 	strh.w	r9, [r4, #792]	; 0x318
   18966:	f000 f9f9 	bl	18d5c <sym_UFX5YQMS76OVX4LZ7T6GRG5R56NF5732ZNTZZJA>
   1896a:	b110      	cbz	r0, 18972 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x786>
   1896c:	6870      	ldr	r0, [r6, #4]
   1896e:	301e      	adds	r0, #30
   18970:	6070      	str	r0, [r6, #4]
   18972:	72b5      	strb	r5, [r6, #10]
   18974:	f8b4 0298 	ldrh.w	r0, [r4, #664]	; 0x298
   18978:	e000      	b.n	1897c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x790>
   1897a:	e039      	b.n	189f0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x804>
   1897c:	eba0 0009 	sub.w	r0, r0, r9
   18980:	b200      	sxth	r0, r0
   18982:	2800      	cmp	r0, #0
   18984:	bfc4      	itt	gt
   18986:	2002      	movgt	r0, #2
   18988:	72b0      	strbgt	r0, [r6, #10]
   1898a:	9808      	ldr	r0, [sp, #32]
   1898c:	b378      	cbz	r0, 189ee <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x802>
   1898e:	f1bb 0f00 	cmp.w	fp, #0
   18992:	d01d      	beq.n	189d0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x7e4>
   18994:	f8b4 12c0 	ldrh.w	r1, [r4, #704]	; 0x2c0
   18998:	2900      	cmp	r1, #0
   1899a:	bf0c      	ite	eq
   1899c:	2000      	moveq	r0, #0
   1899e:	f8b4 02c2 	ldrhne.w	r0, [r4, #706]	; 0x2c2
   189a2:	f8a4 02c2 	strh.w	r0, [r4, #706]	; 0x2c2
   189a6:	f894 22c4 	ldrb.w	r2, [r4, #708]	; 0x2c4
   189aa:	1c40      	adds	r0, r0, #1
   189ac:	4350      	muls	r0, r2
   189ae:	4288      	cmp	r0, r1
   189b0:	d20e      	bcs.n	189d0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x7e4>
   189b2:	7ab0      	ldrb	r0, [r6, #10]
   189b4:	b160      	cbz	r0, 189d0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x7e4>
   189b6:	72b5      	strb	r5, [r6, #10]
   189b8:	f8b4 02c2 	ldrh.w	r0, [r4, #706]	; 0x2c2
   189bc:	1c40      	adds	r0, r0, #1
   189be:	f8a4 02c2 	strh.w	r0, [r4, #706]	; 0x2c2
   189c2:	f7fc faa1 	bl	14f08 <sym_K5GMJMBHBYPRCUIWKNEXGPSNQEZKEMBAP4JWHBQ>
   189c6:	f000 0007 	and.w	r0, r0, #7
   189ca:	1c40      	adds	r0, r0, #1
   189cc:	f884 02c4 	strb.w	r0, [r4, #708]	; 0x2c4
   189d0:	f894 031c 	ldrb.w	r0, [r4, #796]	; 0x31c
   189d4:	4631      	mov	r1, r6
   189d6:	f7f6 faad 	bl	ef34 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
   189da:	b338      	cbz	r0, 18a2c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x840>
   189dc:	9811      	ldr	r0, [sp, #68]	; 0x44
   189de:	f080 0001 	eor.w	r0, r0, #1
   189e2:	f884 02e8 	strb.w	r0, [r4, #744]	; 0x2e8
   189e6:	b013      	add	sp, #76	; 0x4c
   189e8:	2000      	movs	r0, #0
   189ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   189ee:	e004      	b.n	189fa <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x80e>
   189f0:	f240 5131 	movw	r1, #1329	; 0x531
   189f4:	2030      	movs	r0, #48	; 0x30
   189f6:	f7f8 ffc3 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   189fa:	f1bb 0f00 	cmp.w	fp, #0
   189fe:	d1c9      	bne.n	18994 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x7a8>
   18a00:	f894 02d4 	ldrb.w	r0, [r4, #724]	; 0x2d4
   18a04:	2800      	cmp	r0, #0
   18a06:	d0e3      	beq.n	189d0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x7e4>
   18a08:	f8d4 12dc 	ldr.w	r1, [r4, #732]	; 0x2dc
   18a0c:	6960      	ldr	r0, [r4, #20]
   18a0e:	1a41      	subs	r1, r0, r1
   18a10:	4630      	mov	r0, r6
   18a12:	f007 fc67 	bl	202e4 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
   18a16:	0400      	lsls	r0, r0, #16
   18a18:	0c00      	lsrs	r0, r0, #16
   18a1a:	d0d9      	beq.n	189d0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x7e4>
   18a1c:	991c      	ldr	r1, [sp, #112]	; 0x70
   18a1e:	2900      	cmp	r1, #0
   18a20:	bf18      	it	ne
   18a22:	8008      	strhne	r0, [r1, #0]
   18a24:	2001      	movs	r0, #1
   18a26:	b013      	add	sp, #76	; 0x4c
   18a28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18a2c:	f240 518f 	movw	r1, #1423	; 0x58f
   18a30:	2030      	movs	r0, #48	; 0x30
   18a32:	f7f8 ffa5 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   18a36:	0000      	.short	0x0000
   18a38:	20000184 	.word	0x20000184
   18a3c:	20000198 	.word	0x20000198
   18a40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18a44:	b082      	sub	sp, #8
   18a46:	0004      	movs	r4, r0
   18a48:	d00b      	beq.n	18a62 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x876>
   18a4a:	2720      	movs	r7, #32
   18a4c:	2600      	movs	r6, #0
   18a4e:	2909      	cmp	r1, #9
   18a50:	f080 8154 	bcs.w	18cfc <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xb10>
   18a54:	e8df f001 	tbb	[pc, r1]
   18a58:	73736909 	.word	0x73736909
   18a5c:	fafbfc6e 	.word	0xfafbfc6e
   18a60:	00f9      	.short	0x00f9
   18a62:	2196      	movs	r1, #150	; 0x96
   18a64:	2030      	movs	r0, #48	; 0x30
   18a66:	f7f8 ff8b 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   18a6a:	f8c4 6324 	str.w	r6, [r4, #804]	; 0x324
   18a6e:	f894 12e8 	ldrb.w	r1, [r4, #744]	; 0x2e8
   18a72:	4620      	mov	r0, r4
   18a74:	b1a9      	cbz	r1, 18aa2 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x8b6>
   18a76:	f8b0 12e6 	ldrh.w	r1, [r0, #742]	; 0x2e6
   18a7a:	f8b0 20ac 	ldrh.w	r2, [r0, #172]	; 0xac
   18a7e:	4291      	cmp	r1, r2
   18a80:	d109      	bne.n	18a96 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x8aa>
   18a82:	f8b0 129c 	ldrh.w	r1, [r0, #668]	; 0x29c
   18a86:	1a89      	subs	r1, r1, r2
   18a88:	f8a0 129e 	strh.w	r1, [r0, #670]	; 0x29e
   18a8c:	f8b0 129c 	ldrh.w	r1, [r0, #668]	; 0x29c
   18a90:	f8a0 10ac 	strh.w	r1, [r0, #172]	; 0xac
   18a94:	e010      	b.n	18ab8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x8cc>
   18a96:	1a89      	subs	r1, r1, r2
   18a98:	f8a0 129e 	strh.w	r1, [r0, #670]	; 0x29e
   18a9c:	f8b0 12e6 	ldrh.w	r1, [r0, #742]	; 0x2e6
   18aa0:	e008      	b.n	18ab4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x8c8>
   18aa2:	f8b0 12e4 	ldrh.w	r1, [r0, #740]	; 0x2e4
   18aa6:	f8b0 20ac 	ldrh.w	r2, [r0, #172]	; 0xac
   18aaa:	1a89      	subs	r1, r1, r2
   18aac:	f8a0 129e 	strh.w	r1, [r0, #670]	; 0x29e
   18ab0:	f8b0 12e4 	ldrh.w	r1, [r0, #740]	; 0x2e4
   18ab4:	f8a0 10ac 	strh.w	r1, [r0, #172]	; 0xac
   18ab8:	e9d0 12c0 	ldrd	r1, r2, [r0, #768]	; 0x300
   18abc:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
   18ac0:	f8c0 230c 	str.w	r2, [r0, #780]	; 0x30c
   18ac4:	f000 fa00 	bl	18ec8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA>
   18ac8:	f005 fd62 	bl	1e590 <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>
   18acc:	2864      	cmp	r0, #100	; 0x64
   18ace:	bf98      	it	ls
   18ad0:	2064      	movls	r0, #100	; 0x64
   18ad2:	f894 106f 	ldrb.w	r1, [r4, #111]	; 0x6f
   18ad6:	f001 010c 	and.w	r1, r1, #12
   18ada:	2900      	cmp	r1, #0
   18adc:	bf18      	it	ne
   18ade:	2128      	movne	r1, #40	; 0x28
   18ae0:	4408      	add	r0, r1
   18ae2:	f8d4 12dc 	ldr.w	r1, [r4, #732]	; 0x2dc
   18ae6:	f200 1083 	addw	r0, r0, #387	; 0x183
   18aea:	eb01 0600 	add.w	r6, r1, r0
   18aee:	4620      	mov	r0, r4
   18af0:	bf14      	ite	ne
   18af2:	2128      	movne	r1, #40	; 0x28
   18af4:	2100      	moveq	r1, #0
   18af6:	f201 12e7 	addw	r2, r1, #487	; 0x1e7
   18afa:	6b01      	ldr	r1, [r0, #48]	; 0x30
   18afc:	f008 f886 	bl	20c0c <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>
   18b00:	4605      	mov	r5, r0
   18b02:	4632      	mov	r2, r6
   18b04:	4620      	mov	r0, r4
   18b06:	6961      	ldr	r1, [r4, #20]
   18b08:	f008 f880 	bl	20c0c <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>
   18b0c:	497d      	ldr	r1, [pc, #500]	; (18d04 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xb18>)
   18b0e:	4285      	cmp	r5, r0
   18b10:	60c8      	str	r0, [r1, #12]
   18b12:	bf38      	it	cc
   18b14:	4628      	movcc	r0, r5
   18b16:	6088      	str	r0, [r1, #8]
   18b18:	f8d4 02f4 	ldr.w	r0, [r4, #756]	; 0x2f4
   18b1c:	38ac      	subs	r0, #172	; 0xac
   18b1e:	6108      	str	r0, [r1, #16]
   18b20:	b002      	add	sp, #8
   18b22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   18b26:	f7f7 b8e5 	b.w	fcf4 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
   18b2a:	b002      	add	sp, #8
   18b2c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   18b30:	f000 bafa 	b.w	19128 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY>
   18b34:	b002      	add	sp, #8
   18b36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   18b3a:	f004 bb5b 	b.w	1d1f4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
   18b3e:	f7f7 f9c5 	bl	fecc <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
   18b42:	f8d4 2308 	ldr.w	r2, [r4, #776]	; 0x308
   18b46:	f8d4 330c 	ldr.w	r3, [r4, #780]	; 0x30c
   18b4a:	1a80      	subs	r0, r0, r2
   18b4c:	eb61 0103 	sbc.w	r1, r1, r3
   18b50:	2200      	movs	r2, #0
   18b52:	4613      	mov	r3, r2
   18b54:	1a12      	subs	r2, r2, r0
   18b56:	eb73 0201 	sbcs.w	r2, r3, r1
   18b5a:	db04      	blt.n	18b66 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x97a>
   18b5c:	f240 610c 	movw	r1, #1548	; 0x60c
   18b60:	2030      	movs	r0, #48	; 0x30
   18b62:	f7f8 ff0d 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   18b66:	1c42      	adds	r2, r0, #1
   18b68:	f171 0100 	sbcs.w	r1, r1, #0
   18b6c:	db04      	blt.n	18b78 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x98c>
   18b6e:	f240 610d 	movw	r1, #1549	; 0x60d
   18b72:	2030      	movs	r0, #48	; 0x30
   18b74:	f7f8 ff04 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   18b78:	6961      	ldr	r1, [r4, #20]
   18b7a:	2900      	cmp	r1, #0
   18b7c:	bf14      	ite	ne
   18b7e:	fbb0 f0f1 	udivne	r0, r0, r1
   18b82:	4630      	moveq	r0, r6
   18b84:	f894 10b6 	ldrb.w	r1, [r4, #182]	; 0xb6
   18b88:	290f      	cmp	r1, #15
   18b8a:	d015      	beq.n	18bb8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x9cc>
   18b8c:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	; 0xac
   18b90:	f8b4 12e6 	ldrh.w	r1, [r4, #742]	; 0x2e6
   18b94:	1813      	adds	r3, r2, r0
   18b96:	1acb      	subs	r3, r1, r3
   18b98:	b21b      	sxth	r3, r3
   18b9a:	2b00      	cmp	r3, #0
   18b9c:	bfae      	itee	ge
   18b9e:	1c48      	addge	r0, r1, #1
   18ba0:	1c40      	addlt	r0, r0, #1
   18ba2:	4410      	addlt	r0, r2
   18ba4:	f8a4 02e6 	strh.w	r0, [r4, #742]	; 0x2e6
   18ba8:	f894 02e9 	ldrb.w	r0, [r4, #745]	; 0x2e9
   18bac:	f88d 0000 	strb.w	r0, [sp]
   18bb0:	f89d 0000 	ldrb.w	r0, [sp]
   18bb4:	b978      	cbnz	r0, 18bd6 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x9ea>
   18bb6:	e005      	b.n	18bc4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x9d8>
   18bb8:	f8b4 02e6 	ldrh.w	r0, [r4, #742]	; 0x2e6
   18bbc:	1c40      	adds	r0, r0, #1
   18bbe:	f8a4 02e6 	strh.w	r0, [r4, #742]	; 0x2e6
   18bc2:	e008      	b.n	18bd6 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x9ea>
   18bc4:	f8b4 02e6 	ldrh.w	r0, [r4, #742]	; 0x2e6
   18bc8:	f8b4 129c 	ldrh.w	r1, [r4, #668]	; 0x29c
   18bcc:	4288      	cmp	r0, r1
   18bce:	bf04      	itt	eq
   18bd0:	1c40      	addeq	r0, r0, #1
   18bd2:	f8a4 02e6 	strheq.w	r0, [r4, #742]	; 0x2e6
   18bd6:	f8b4 031a 	ldrh.w	r0, [r4, #794]	; 0x31a
   18bda:	f10d 0804 	add.w	r8, sp, #4
   18bde:	1c40      	adds	r0, r0, #1
   18be0:	f8a4 031a 	strh.w	r0, [r4, #794]	; 0x31a
   18be4:	f8b4 00e8 	ldrh.w	r0, [r4, #232]	; 0xe8
   18be8:	f8b4 10e6 	ldrh.w	r1, [r4, #230]	; 0xe6
   18bec:	1a40      	subs	r0, r0, r1
   18bee:	f8b4 10ac 	ldrh.w	r1, [r4, #172]	; 0xac
   18bf2:	1e40      	subs	r0, r0, #1
   18bf4:	4408      	add	r0, r1
   18bf6:	b285      	uxth	r5, r0
   18bf8:	e049      	b.n	18c8e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xaa2>
   18bfa:	2300      	movs	r3, #0
   18bfc:	461a      	mov	r2, r3
   18bfe:	4620      	mov	r0, r4
   18c00:	f8cd 8000 	str.w	r8, [sp]
   18c04:	f7ff fbc8 	bl	18398 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1ac>
   18c08:	b130      	cbz	r0, 18c18 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xa2c>
   18c0a:	2801      	cmp	r0, #1
   18c0c:	d028      	beq.n	18c60 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xa74>
   18c0e:	f240 614c 	movw	r1, #1612	; 0x64c
   18c12:	2030      	movs	r0, #48	; 0x30
   18c14:	f7f8 feb4 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   18c18:	6f60      	ldr	r0, [r4, #116]	; 0x74
   18c1a:	2800      	cmp	r0, #0
   18c1c:	bf04      	itt	eq
   18c1e:	b002      	addeq	sp, #8
   18c20:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
   18c24:	f8b4 02e6 	ldrh.w	r0, [r4, #742]	; 0x2e6
   18c28:	f8b4 20e2 	ldrh.w	r2, [r4, #226]	; 0xe2
   18c2c:	1a80      	subs	r0, r0, r2
   18c2e:	b201      	sxth	r1, r0
   18c30:	2900      	cmp	r1, #0
   18c32:	bfdc      	itt	le
   18c34:	b002      	addle	sp, #8
   18c36:	e8bd 81f0 	ldmiale.w	sp!, {r4, r5, r6, r7, r8, pc}
   18c3a:	f8b4 0078 	ldrh.w	r0, [r4, #120]	; 0x78
   18c3e:	4401      	add	r1, r0
   18c40:	1e49      	subs	r1, r1, #1
   18c42:	fb91 f1f0 	sdiv	r1, r1, r0
   18c46:	b289      	uxth	r1, r1
   18c48:	e003      	b.n	18c52 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xa66>
   18c4a:	e053      	b.n	18cf4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xb08>
   18c4c:	e03f      	b.n	18cce <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xae2>
   18c4e:	e036      	b.n	18cbe <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xad2>
   18c50:	e054      	b.n	18cfc <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xb10>
   18c52:	fb01 2000 	mla	r0, r1, r0, r2
   18c56:	f8a4 00e2 	strh.w	r0, [r4, #226]	; 0xe2
   18c5a:	b002      	add	sp, #8
   18c5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   18c60:	f8b4 02e6 	ldrh.w	r0, [r4, #742]	; 0x2e6
   18c64:	f8b4 1298 	ldrh.w	r1, [r4, #664]	; 0x298
   18c68:	1a42      	subs	r2, r0, r1
   18c6a:	b212      	sxth	r2, r2
   18c6c:	2a00      	cmp	r2, #0
   18c6e:	da09      	bge.n	18c84 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xa98>
   18c70:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   18c74:	4402      	add	r2, r0
   18c76:	1aaa      	subs	r2, r5, r2
   18c78:	b212      	sxth	r2, r2
   18c7a:	2a00      	cmp	r2, #0
   18c7c:	bfb8      	it	lt
   18c7e:	f8a4 12e6 	strhlt.w	r1, [r4, #742]	; 0x2e6
   18c82:	db04      	blt.n	18c8e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xaa2>
   18c84:	f8bd 1004 	ldrh.w	r1, [sp, #4]
   18c88:	4408      	add	r0, r1
   18c8a:	f8a4 02e6 	strh.w	r0, [r4, #742]	; 0x2e6
   18c8e:	f8b4 12e6 	ldrh.w	r1, [r4, #742]	; 0x2e6
   18c92:	1a68      	subs	r0, r5, r1
   18c94:	b200      	sxth	r0, r0
   18c96:	2800      	cmp	r0, #0
   18c98:	daaf      	bge.n	18bfa <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xa0e>
   18c9a:	f894 00b9 	ldrb.w	r0, [r4, #185]	; 0xb9
   18c9e:	2800      	cmp	r0, #0
   18ca0:	bf0c      	ite	eq
   18ca2:	203e      	moveq	r0, #62	; 0x3e
   18ca4:	2008      	movne	r0, #8
   18ca6:	f884 00d5 	strb.w	r0, [r4, #213]	; 0xd5
   18caa:	220a      	movs	r2, #10
   18cac:	4621      	mov	r1, r4
   18cae:	f104 00cc 	add.w	r0, r4, #204	; 0xcc
   18cb2:	f7fb fc4b 	bl	1454c <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
   18cb6:	4620      	mov	r0, r4
   18cb8:	f008 fe64 	bl	21984 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ>
   18cbc:	e00f      	b.n	18cde <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xaf2>
   18cbe:	2001      	movs	r0, #1
   18cc0:	f7f5 ff42 	bl	eb48 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI>
   18cc4:	b002      	add	sp, #8
   18cc6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   18cca:	f007 b985 	b.w	1ffd8 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q>
   18cce:	f894 02d4 	ldrb.w	r0, [r4, #724]	; 0x2d4
   18cd2:	2804      	cmp	r0, #4
   18cd4:	d003      	beq.n	18cde <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xaf2>
   18cd6:	21b8      	movs	r1, #184	; 0xb8
   18cd8:	2030      	movs	r0, #48	; 0x30
   18cda:	f7f8 fe51 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   18cde:	f884 62d4 	strb.w	r6, [r4, #724]	; 0x2d4
   18ce2:	f894 031c 	ldrb.w	r0, [r4, #796]	; 0x31c
   18ce6:	f7f6 fd89 	bl	f7fc <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
   18cea:	f884 731c 	strb.w	r7, [r4, #796]	; 0x31c
   18cee:	b002      	add	sp, #8
   18cf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   18cf4:	21be      	movs	r1, #190	; 0xbe
   18cf6:	2030      	movs	r0, #48	; 0x30
   18cf8:	f7f8 fe42 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   18cfc:	21c2      	movs	r1, #194	; 0xc2
   18cfe:	2030      	movs	r0, #48	; 0x30
   18d00:	f7f8 fe3e 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   18d04:	20000184 	.word	0x20000184
   18d08:	00000000 	.word	0x00000000
   18d0c:	00010000 	.word	0x00010000
   18d10:	00000000 	.word	0x00000000
   18d14:	00020000 	.word	0x00020000
   18d18:	00000000 	.word	0x00000000
   18d1c:	00020000 	.word	0x00020000
   18d20:	00000000 	.word	0x00000000
   18d24:	00001e14 	.word	0x00001e14
   18d28:	00001130 	.word	0x00001130
   18d2c:	00000000 	.word	0x00000000
   18d30:	0000ea60 	.word	0x0000ea60
	...
   18d40:	0000ea60 	.word	0x0000ea60
   18d44:	00fa01f4 	.word	0x00fa01f4
   18d48:	00640096 	.word	0x00640096
   18d4c:	0032004b 	.word	0x0032004b
   18d50:	0014001e 	.word	0x0014001e
   18d54:	0005000a 	.word	0x0005000a
   18d58:	00010002 	.word	0x00010002

00018d5c <sym_UFX5YQMS76OVX4LZ7T6GRG5R56NF5732ZNTZZJA>:
   18d5c:	4802      	ldr	r0, [pc, #8]	; (18d68 <sym_UFX5YQMS76OVX4LZ7T6GRG5R56NF5732ZNTZZJA+0xc>)
   18d5e:	6900      	ldr	r0, [r0, #16]
   18d60:	2800      	cmp	r0, #0
   18d62:	bf18      	it	ne
   18d64:	2001      	movne	r0, #1
   18d66:	4770      	bx	lr
   18d68:	200001a0 	.word	0x200001a0

00018d6c <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI>:
   18d6c:	4806      	ldr	r0, [pc, #24]	; (18d88 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x1c>)
   18d6e:	4905      	ldr	r1, [pc, #20]	; (18d84 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x18>)
   18d70:	6501      	str	r1, [r0, #80]	; 0x50
   18d72:	4906      	ldr	r1, [pc, #24]	; (18d8c <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x20>)
   18d74:	6541      	str	r1, [r0, #84]	; 0x54
   18d76:	4807      	ldr	r0, [pc, #28]	; (18d94 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x28>)
   18d78:	4905      	ldr	r1, [pc, #20]	; (18d90 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x24>)
   18d7a:	6501      	str	r1, [r0, #80]	; 0x50
   18d7c:	4906      	ldr	r1, [pc, #24]	; (18d98 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x2c>)
   18d7e:	6541      	str	r1, [r0, #84]	; 0x54
   18d80:	4770      	bx	lr
   18d82:	0000      	.short	0x0000
   18d84:	0001a621 	.word	0x0001a621
   18d88:	200001c0 	.word	0x200001c0
   18d8c:	0001a715 	.word	0x0001a715
   18d90:	00021a3f 	.word	0x00021a3f
   18d94:	2000026c 	.word	0x2000026c
   18d98:	0001afe1 	.word	0x0001afe1

00018d9c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA>:
   18d9c:	481f      	ldr	r0, [pc, #124]	; (18e1c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x80>)
   18d9e:	2100      	movs	r1, #0
   18da0:	6101      	str	r1, [r0, #16]
   18da2:	6141      	str	r1, [r0, #20]
   18da4:	7081      	strb	r1, [r0, #2]
   18da6:	481f      	ldr	r0, [pc, #124]	; (18e24 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x88>)
   18da8:	491d      	ldr	r1, [pc, #116]	; (18e20 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x84>)
   18daa:	6081      	str	r1, [r0, #8]
   18dac:	491e      	ldr	r1, [pc, #120]	; (18e28 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x8c>)
   18dae:	6041      	str	r1, [r0, #4]
   18db0:	491e      	ldr	r1, [pc, #120]	; (18e2c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x90>)
   18db2:	6001      	str	r1, [r0, #0]
   18db4:	491e      	ldr	r1, [pc, #120]	; (18e30 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x94>)
   18db6:	6281      	str	r1, [r0, #40]	; 0x28
   18db8:	491e      	ldr	r1, [pc, #120]	; (18e34 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x98>)
   18dba:	62c1      	str	r1, [r0, #44]	; 0x2c
   18dbc:	491e      	ldr	r1, [pc, #120]	; (18e38 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x9c>)
   18dbe:	60c1      	str	r1, [r0, #12]
   18dc0:	491e      	ldr	r1, [pc, #120]	; (18e3c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xa0>)
   18dc2:	6181      	str	r1, [r0, #24]
   18dc4:	491e      	ldr	r1, [pc, #120]	; (18e40 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xa4>)
   18dc6:	6301      	str	r1, [r0, #48]	; 0x30
   18dc8:	491e      	ldr	r1, [pc, #120]	; (18e44 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xa8>)
   18dca:	6201      	str	r1, [r0, #32]
   18dcc:	491e      	ldr	r1, [pc, #120]	; (18e48 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xac>)
   18dce:	64c1      	str	r1, [r0, #76]	; 0x4c
   18dd0:	491e      	ldr	r1, [pc, #120]	; (18e4c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xb0>)
   18dd2:	6481      	str	r1, [r0, #72]	; 0x48
   18dd4:	491e      	ldr	r1, [pc, #120]	; (18e50 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xb4>)
   18dd6:	6441      	str	r1, [r0, #68]	; 0x44
   18dd8:	491e      	ldr	r1, [pc, #120]	; (18e54 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xb8>)
   18dda:	6341      	str	r1, [r0, #52]	; 0x34
   18ddc:	491e      	ldr	r1, [pc, #120]	; (18e58 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xbc>)
   18dde:	61c1      	str	r1, [r0, #28]
   18de0:	491e      	ldr	r1, [pc, #120]	; (18e5c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xc0>)
   18de2:	6241      	str	r1, [r0, #36]	; 0x24
   18de4:	481f      	ldr	r0, [pc, #124]	; (18e64 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xc8>)
   18de6:	491e      	ldr	r1, [pc, #120]	; (18e60 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xc4>)
   18de8:	6081      	str	r1, [r0, #8]
   18dea:	491f      	ldr	r1, [pc, #124]	; (18e68 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xcc>)
   18dec:	61c1      	str	r1, [r0, #28]
   18dee:	491f      	ldr	r1, [pc, #124]	; (18e6c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xd0>)
   18df0:	6241      	str	r1, [r0, #36]	; 0x24
   18df2:	491f      	ldr	r1, [pc, #124]	; (18e70 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xd4>)
   18df4:	62c1      	str	r1, [r0, #44]	; 0x2c
   18df6:	491f      	ldr	r1, [pc, #124]	; (18e74 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xd8>)
   18df8:	6101      	str	r1, [r0, #16]
   18dfa:	491f      	ldr	r1, [pc, #124]	; (18e78 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xdc>)
   18dfc:	6141      	str	r1, [r0, #20]
   18dfe:	491f      	ldr	r1, [pc, #124]	; (18e7c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xe0>)
   18e00:	6441      	str	r1, [r0, #68]	; 0x44
   18e02:	491f      	ldr	r1, [pc, #124]	; (18e80 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xe4>)
   18e04:	6341      	str	r1, [r0, #52]	; 0x34
   18e06:	491f      	ldr	r1, [pc, #124]	; (18e84 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xe8>)
   18e08:	6181      	str	r1, [r0, #24]
   18e0a:	491f      	ldr	r1, [pc, #124]	; (18e88 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xec>)
   18e0c:	6301      	str	r1, [r0, #48]	; 0x30
   18e0e:	491f      	ldr	r1, [pc, #124]	; (18e8c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xf0>)
   18e10:	6481      	str	r1, [r0, #72]	; 0x48
   18e12:	491f      	ldr	r1, [pc, #124]	; (18e90 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xf4>)
   18e14:	64c1      	str	r1, [r0, #76]	; 0x4c
   18e16:	491f      	ldr	r1, [pc, #124]	; (18e94 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xf8>)
   18e18:	6381      	str	r1, [r0, #56]	; 0x38
   18e1a:	4770      	bx	lr
   18e1c:	200001a0 	.word	0x200001a0
   18e20:	0001ad25 	.word	0x0001ad25
   18e24:	200001c0 	.word	0x200001c0
   18e28:	0001a3c1 	.word	0x0001a3c1
   18e2c:	0001a431 	.word	0x0001a431
   18e30:	0001a7ed 	.word	0x0001a7ed
   18e34:	000219fd 	.word	0x000219fd
   18e38:	0001a4fd 	.word	0x0001a4fd
   18e3c:	0001ace5 	.word	0x0001ace5
   18e40:	0001aeed 	.word	0x0001aeed
   18e44:	0001a5c5 	.word	0x0001a5c5
   18e48:	000219cd 	.word	0x000219cd
   18e4c:	0001a7b1 	.word	0x0001a7b1
   18e50:	0001ab99 	.word	0x0001ab99
   18e54:	0001ac41 	.word	0x0001ac41
   18e58:	0001ad61 	.word	0x0001ad61
   18e5c:	0001a5d1 	.word	0x0001a5d1
   18e60:	00021bc7 	.word	0x00021bc7
   18e64:	2000026c 	.word	0x2000026c
   18e68:	0001b0b5 	.word	0x0001b0b5
   18e6c:	00021a3b 	.word	0x00021a3b
   18e70:	00021a93 	.word	0x00021a93
   18e74:	00021a15 	.word	0x00021a15
   18e78:	00021b27 	.word	0x00021b27
   18e7c:	0001b069 	.word	0x0001b069
   18e80:	00021b05 	.word	0x00021b05
   18e84:	00021b45 	.word	0x00021b45
   18e88:	0001b139 	.word	0x0001b139
   18e8c:	00021a69 	.word	0x00021a69
   18e90:	0001b035 	.word	0x0001b035
   18e94:	00021b23 	.word	0x00021b23

00018e98 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI>:
   18e98:	4806      	ldr	r0, [pc, #24]	; (18eb4 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x1c>)
   18e9a:	4905      	ldr	r1, [pc, #20]	; (18eb0 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x18>)
   18e9c:	6581      	str	r1, [r0, #88]	; 0x58
   18e9e:	4906      	ldr	r1, [pc, #24]	; (18eb8 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x20>)
   18ea0:	6601      	str	r1, [r0, #96]	; 0x60
   18ea2:	4807      	ldr	r0, [pc, #28]	; (18ec0 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x28>)
   18ea4:	4905      	ldr	r1, [pc, #20]	; (18ebc <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x24>)
   18ea6:	6581      	str	r1, [r0, #88]	; 0x58
   18ea8:	4906      	ldr	r1, [pc, #24]	; (18ec4 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x2c>)
   18eaa:	65c1      	str	r1, [r0, #92]	; 0x5c
   18eac:	4770      	bx	lr
   18eae:	0000      	.short	0x0000
   18eb0:	0001a84d 	.word	0x0001a84d
   18eb4:	200001c0 	.word	0x200001c0
   18eb8:	0001a939 	.word	0x0001a939
   18ebc:	00021ab9 	.word	0x00021ab9
   18ec0:	2000026c 	.word	0x2000026c
   18ec4:	00021ae3 	.word	0x00021ae3

00018ec8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA>:
   18ec8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   18ecc:	4c8e      	ldr	r4, [pc, #568]	; (19108 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x240>)
   18ece:	2101      	movs	r1, #1
   18ed0:	f1a4 0518 	sub.w	r5, r4, #24
   18ed4:	7021      	strb	r1, [r4, #0]
   18ed6:	2600      	movs	r6, #0
   18ed8:	6060      	str	r0, [r4, #4]
   18eda:	80ae      	strh	r6, [r5, #4]
   18edc:	70ee      	strb	r6, [r5, #3]
   18ede:	702e      	strb	r6, [r5, #0]
   18ee0:	f880 12a3 	strb.w	r1, [r0, #675]	; 0x2a3
   18ee4:	8800      	ldrh	r0, [r0, #0]
   18ee6:	f7f9 fa2d 	bl	12344 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
   18eea:	0007      	movs	r7, r0
   18eec:	d010      	beq.n	18f10 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x48>
   18eee:	6860      	ldr	r0, [r4, #4]
   18ef0:	8800      	ldrh	r0, [r0, #0]
   18ef2:	f7f9 fd59 	bl	129a8 <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY>
   18ef6:	6860      	ldr	r0, [r4, #4]
   18ef8:	8800      	ldrh	r0, [r0, #0]
   18efa:	f7f9 fcfb 	bl	128f4 <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I>
   18efe:	6860      	ldr	r0, [r4, #4]
   18f00:	f8b0 129a 	ldrh.w	r1, [r0, #666]	; 0x29a
   18f04:	b1c1      	cbz	r1, 18f38 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x70>
   18f06:	f890 113c 	ldrb.w	r1, [r0, #316]	; 0x13c
   18f0a:	29fe      	cmp	r1, #254	; 0xfe
   18f0c:	d005      	beq.n	18f1a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x52>
   18f0e:	e018      	b.n	18f42 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7a>
   18f10:	f640 41dc 	movw	r1, #3292	; 0xcdc
   18f14:	2031      	movs	r0, #49	; 0x31
   18f16:	f7f8 fd33 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   18f1a:	f890 1148 	ldrb.w	r1, [r0, #328]	; 0x148
   18f1e:	f88d 1000 	strb.w	r1, [sp]
   18f22:	f89d 1000 	ldrb.w	r1, [sp]
   18f26:	b189      	cbz	r1, 18f4c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x84>
   18f28:	f890 20b7 	ldrb.w	r2, [r0, #183]	; 0xb7
   18f2c:	2301      	movs	r3, #1
   18f2e:	4619      	mov	r1, r3
   18f30:	30a0      	adds	r0, #160	; 0xa0
   18f32:	f007 f8cc 	bl	200ce <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   18f36:	b188      	cbz	r0, 18f5c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x94>
   18f38:	6860      	ldr	r0, [r4, #4]
   18f3a:	f890 013c 	ldrb.w	r0, [r0, #316]	; 0x13c
   18f3e:	28fe      	cmp	r0, #254	; 0xfe
   18f40:	d004      	beq.n	18f4c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x84>
   18f42:	6860      	ldr	r0, [r4, #4]
   18f44:	f890 013c 	ldrb.w	r0, [r0, #316]	; 0x13c
   18f48:	f000 fc1e 	bl	19788 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x660>
   18f4c:	6861      	ldr	r1, [r4, #4]
   18f4e:	f891 02a5 	ldrb.w	r0, [r1, #677]	; 0x2a5
   18f52:	2800      	cmp	r0, #0
   18f54:	bf18      	it	ne
   18f56:	80ee      	strhne	r6, [r5, #6]
   18f58:	d11f      	bne.n	18f9a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd2>
   18f5a:	e00f      	b.n	18f7c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb4>
   18f5c:	6860      	ldr	r0, [r4, #4]
   18f5e:	f8a0 60ea 	strh.w	r6, [r0, #234]	; 0xea
   18f62:	f890 1149 	ldrb.w	r1, [r0, #329]	; 0x149
   18f66:	f880 113e 	strb.w	r1, [r0, #318]	; 0x13e
   18f6a:	2100      	movs	r1, #0
   18f6c:	2002      	movs	r0, #2
   18f6e:	f001 f91b 	bl	1a1a8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1080>
   18f72:	6860      	ldr	r0, [r4, #4]
   18f74:	f880 62a2 	strb.w	r6, [r0, #674]	; 0x2a2
   18f78:	2002      	movs	r0, #2
   18f7a:	e7e5      	b.n	18f48 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x80>
   18f7c:	f891 020e 	ldrb.w	r0, [r1, #526]	; 0x20e
   18f80:	f88d 0000 	strb.w	r0, [sp]
   18f84:	f89d 0000 	ldrb.w	r0, [sp]
   18f88:	b928      	cbnz	r0, 18f96 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xce>
   18f8a:	8d48      	ldrh	r0, [r1, #42]	; 0x2a
   18f8c:	8b8a      	ldrh	r2, [r1, #28]
   18f8e:	4290      	cmp	r0, r2
   18f90:	bf88      	it	hi
   18f92:	80e8      	strhhi	r0, [r5, #6]
   18f94:	d801      	bhi.n	18f9a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd2>
   18f96:	8b88      	ldrh	r0, [r1, #28]
   18f98:	80e8      	strh	r0, [r5, #6]
   18f9a:	f8b1 029e 	ldrh.w	r0, [r1, #670]	; 0x29e
   18f9e:	1e40      	subs	r0, r0, #1
   18fa0:	fa1f f880 	uxth.w	r8, r0
   18fa4:	f8b1 02a0 	ldrh.w	r0, [r1, #672]	; 0x2a0
   18fa8:	4440      	add	r0, r8
   18faa:	f8a1 02a0 	strh.w	r0, [r1, #672]	; 0x2a0
   18fae:	f8b1 00e6 	ldrh.w	r0, [r1, #230]	; 0xe6
   18fb2:	4440      	add	r0, r8
   18fb4:	f8a1 00e6 	strh.w	r0, [r1, #230]	; 0xe6
   18fb8:	f891 00bb 	ldrb.w	r0, [r1, #187]	; 0xbb
   18fbc:	b940      	cbnz	r0, 18fd0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x108>
   18fbe:	f891 20b6 	ldrb.w	r2, [r1, #182]	; 0xb6
   18fc2:	f101 00a0 	add.w	r0, r1, #160	; 0xa0
   18fc6:	2301      	movs	r3, #1
   18fc8:	2106      	movs	r1, #6
   18fca:	f007 f880 	bl	200ce <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   18fce:	b128      	cbz	r0, 18fdc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x114>
   18fd0:	6860      	ldr	r0, [r4, #4]
   18fd2:	f8d0 10d8 	ldr.w	r1, [r0, #216]	; 0xd8
   18fd6:	4441      	add	r1, r8
   18fd8:	f8c0 10d8 	str.w	r1, [r0, #216]	; 0xd8
   18fdc:	6861      	ldr	r1, [r4, #4]
   18fde:	f8b1 029a 	ldrh.w	r0, [r1, #666]	; 0x29a
   18fe2:	2801      	cmp	r0, #1
   18fe4:	bf9c      	itt	ls
   18fe6:	1c40      	addls	r0, r0, #1
   18fe8:	f8a1 029a 	strhls.w	r0, [r1, #666]	; 0x29a
   18fec:	f1b8 0f00 	cmp.w	r8, #0
   18ff0:	bf18      	it	ne
   18ff2:	f881 62ac 	strbne.w	r6, [r1, #684]	; 0x2ac
   18ff6:	f881 62a2 	strb.w	r6, [r1, #674]	; 0x2a2
   18ffa:	f8b1 229e 	ldrh.w	r2, [r1, #670]	; 0x29e
   18ffe:	f101 00a0 	add.w	r0, r1, #160	; 0xa0
   19002:	f7fb f96d 	bl	142e0 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA>
   19006:	b120      	cbz	r0, 19012 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14a>
   19008:	f640 5123 	movw	r1, #3363	; 0xd23
   1900c:	2031      	movs	r0, #49	; 0x31
   1900e:	f7f8 fcb7 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   19012:	6862      	ldr	r2, [r4, #4]
   19014:	f892 00b6 	ldrb.w	r0, [r2, #182]	; 0xb6
   19018:	280c      	cmp	r0, #12
   1901a:	bf18      	it	ne
   1901c:	280d      	cmpne	r0, #13
   1901e:	d119      	bne.n	19054 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18c>
   19020:	f8b2 10ac 	ldrh.w	r1, [r2, #172]	; 0xac
   19024:	f8b2 3344 	ldrh.w	r3, [r2, #836]	; 0x344
   19028:	eba1 0103 	sub.w	r1, r1, r3
   1902c:	b209      	sxth	r1, r1
   1902e:	2900      	cmp	r1, #0
   19030:	db10      	blt.n	19054 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18c>
   19032:	f202 3146 	addw	r1, r2, #838	; 0x346
   19036:	f102 00be 	add.w	r0, r2, #190	; 0xbe
   1903a:	f00a faa2 	bl	23582 <sym_VCM3BICZ5QLCEBBK5263KDY2XJT4MJLUF43FCFA>
   1903e:	2103      	movs	r1, #3
   19040:	6860      	ldr	r0, [r4, #4]
   19042:	f7fa ff5b 	bl	13efc <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
   19046:	6860      	ldr	r0, [r4, #4]
   19048:	f880 60b6 	strb.w	r6, [r0, #182]	; 0xb6
   1904c:	21ff      	movs	r1, #255	; 0xff
   1904e:	f880 110e 	strb.w	r1, [r0, #270]	; 0x10e
   19052:	e027      	b.n	190a4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1dc>
   19054:	2827      	cmp	r0, #39	; 0x27
   19056:	d111      	bne.n	1907c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b4>
   19058:	f8b2 00ac 	ldrh.w	r0, [r2, #172]	; 0xac
   1905c:	f8b2 1344 	ldrh.w	r1, [r2, #836]	; 0x344
   19060:	1a40      	subs	r0, r0, r1
   19062:	b200      	sxth	r0, r0
   19064:	2800      	cmp	r0, #0
   19066:	db09      	blt.n	1907c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b4>
   19068:	f882 60b6 	strb.w	r6, [r2, #182]	; 0xb6
   1906c:	f001 f914 	bl	1a298 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1170>
   19070:	2800      	cmp	r0, #0
   19072:	6860      	ldr	r0, [r4, #4]
   19074:	f880 6154 	strb.w	r6, [r0, #340]	; 0x154
   19078:	d114      	bne.n	190a4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1dc>
   1907a:	e03e      	b.n	190fa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x232>
   1907c:	f892 00b5 	ldrb.w	r0, [r2, #181]	; 0xb5
   19080:	2827      	cmp	r0, #39	; 0x27
   19082:	bf18      	it	ne
   19084:	2829      	cmpne	r0, #41	; 0x29
   19086:	d10d      	bne.n	190a4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1dc>
   19088:	f8b2 00ac 	ldrh.w	r0, [r2, #172]	; 0xac
   1908c:	f8b2 1344 	ldrh.w	r1, [r2, #836]	; 0x344
   19090:	eba0 0001 	sub.w	r0, r0, r1
   19094:	b200      	sxth	r0, r0
   19096:	2800      	cmp	r0, #0
   19098:	db04      	blt.n	190a4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1dc>
   1909a:	f882 60b5 	strb.w	r6, [r2, #181]	; 0xb5
   1909e:	f001 f8fb 	bl	1a298 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1170>
   190a2:	b350      	cbz	r0, 190fa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x232>
   190a4:	4638      	mov	r0, r7
   190a6:	f006 fb02 	bl	1f6ae <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>
   190aa:	2800      	cmp	r0, #0
   190ac:	6860      	ldr	r0, [r4, #4]
   190ae:	bf17      	itett	ne
   190b0:	f890 02a6 	ldrbne.w	r0, [r0, #678]	; 0x2a6
   190b4:	f880 62a6 	strbeq.w	r6, [r0, #678]	; 0x2a6
   190b8:	2800      	cmpne	r0, #0
   190ba:	e8bd 83f8 	ldmiane.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   190be:	4813      	ldr	r0, [pc, #76]	; (1910c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x244>)
   190c0:	9000      	str	r0, [sp, #0]
   190c2:	e9d5 0106 	ldrd	r0, r1, [r5, #24]
   190c6:	4b12      	ldr	r3, [pc, #72]	; (19110 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x248>)
   190c8:	4a12      	ldr	r2, [pc, #72]	; (19114 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x24c>)
   190ca:	f7f9 fd01 	bl	12ad0 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q>
   190ce:	6969      	ldr	r1, [r5, #20]
   190d0:	2900      	cmp	r1, #0
   190d2:	bf1c      	itt	ne
   190d4:	7868      	ldrbne	r0, [r5, #1]
   190d6:	f003 f94d 	blne	1c374 <sym_JSHLXOVZJZP3KPTLSJTCXHNIGRQ2VOB7UW7IQAA>
   190da:	6860      	ldr	r0, [r4, #4]
   190dc:	2301      	movs	r3, #1
   190de:	2105      	movs	r1, #5
   190e0:	f890 20b6 	ldrb.w	r2, [r0, #182]	; 0xb6
   190e4:	30a0      	adds	r0, #160	; 0xa0
   190e6:	f006 fff2 	bl	200ce <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   190ea:	2800      	cmp	r0, #0
   190ec:	bf08      	it	eq
   190ee:	e8bd 83f8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   190f2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   190f6:	f7f9 bce5 	b.w	12ac4 <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA>
   190fa:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   190fe:	2100      	movs	r1, #0
   19100:	4608      	mov	r0, r1
   19102:	f000 bc4d 	b.w	199a0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x878>
   19106:	0000      	.short	0x0000
   19108:	200001b8 	.word	0x200001b8
   1910c:	000199a1 	.word	0x000199a1
   19110:	00019145 	.word	0x00019145
   19114:	0001a1e1 	.word	0x0001a1e1

00019118 <sym_OTZAOT4DEZSL3R4MXRNUS2BIBKPPCOEO2SMZYAI>:
   19118:	4802      	ldr	r0, [pc, #8]	; (19124 <sym_OTZAOT4DEZSL3R4MXRNUS2BIBKPPCOEO2SMZYAI+0xc>)
   1911a:	2100      	movs	r1, #0
   1911c:	6101      	str	r1, [r0, #16]
   1911e:	6141      	str	r1, [r0, #20]
   19120:	4608      	mov	r0, r1
   19122:	4770      	bx	lr
   19124:	200001a0 	.word	0x200001a0

00019128 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY>:
   19128:	4805      	ldr	r0, [pc, #20]	; (19140 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x18>)
   1912a:	6840      	ldr	r0, [r0, #4]
   1912c:	f890 02a6 	ldrb.w	r0, [r0, #678]	; 0x2a6
   19130:	b118      	cbz	r0, 1913a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x12>
   19132:	2100      	movs	r1, #0
   19134:	4608      	mov	r0, r1
   19136:	f000 bc33 	b.w	199a0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x878>
   1913a:	f7f9 bf75 	b.w	13028 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ>
   1913e:	0000      	.short	0x0000
   19140:	200001b8 	.word	0x200001b8
   19144:	490f      	ldr	r1, [pc, #60]	; (19184 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x5c>)
   19146:	4602      	mov	r2, r0
   19148:	78c8      	ldrb	r0, [r1, #3]
   1914a:	b9c8      	cbnz	r0, 19180 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x58>
   1914c:	f101 0018 	add.w	r0, r1, #24
   19150:	6840      	ldr	r0, [r0, #4]
   19152:	b14a      	cbz	r2, 19168 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x40>
   19154:	7909      	ldrb	r1, [r1, #4]
   19156:	f011 0f08 	tst.w	r1, #8
   1915a:	d003      	beq.n	19164 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x3c>
   1915c:	f890 00b7 	ldrb.w	r0, [r0, #183]	; 0xb7
   19160:	2809      	cmp	r0, #9
   19162:	d00d      	beq.n	19180 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x58>
   19164:	2001      	movs	r0, #1
   19166:	4770      	bx	lr
   19168:	6941      	ldr	r1, [r0, #20]
   1916a:	f641 524c 	movw	r2, #7500	; 0x1d4c
   1916e:	4291      	cmp	r1, r2
   19170:	d306      	bcc.n	19180 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x58>
   19172:	f8b0 2054 	ldrh.w	r2, [r0, #84]	; 0x54
   19176:	8f01      	ldrh	r1, [r0, #56]	; 0x38
   19178:	4291      	cmp	r1, r2
   1917a:	d301      	bcc.n	19180 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x58>
   1917c:	f7fe bf26 	b.w	17fcc <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY>
   19180:	2000      	movs	r0, #0
   19182:	4770      	bx	lr
   19184:	200001a0 	.word	0x200001a0
   19188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1918a:	4cfd      	ldr	r4, [pc, #1012]	; (19580 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x458>)
   1918c:	6861      	ldr	r1, [r4, #4]
   1918e:	f891 213c 	ldrb.w	r2, [r1, #316]	; 0x13c
   19192:	2afe      	cmp	r2, #254	; 0xfe
   19194:	bf0c      	ite	eq
   19196:	2800      	cmpeq	r0, #0
   19198:	bdf8      	popne	{r3, r4, r5, r6, r7, pc}
   1919a:	f891 20b7 	ldrb.w	r2, [r1, #183]	; 0xb7
   1919e:	f101 00a0 	add.w	r0, r1, #160	; 0xa0
   191a2:	f04f 0301 	mov.w	r3, #1
   191a6:	4619      	mov	r1, r3
   191a8:	f006 ff91 	bl	200ce <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   191ac:	2800      	cmp	r0, #0
   191ae:	bf18      	it	ne
   191b0:	bdf8      	popne	{r3, r4, r5, r6, r7, pc}
   191b2:	6860      	ldr	r0, [r4, #4]
   191b4:	f890 1148 	ldrb.w	r1, [r0, #328]	; 0x148
   191b8:	f88d 1000 	strb.w	r1, [sp]
   191bc:	f89d 1000 	ldrb.w	r1, [sp]
   191c0:	2500      	movs	r5, #0
   191c2:	b159      	cbz	r1, 191dc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xb4>
   191c4:	f8a0 50ea 	strh.w	r5, [r0, #234]	; 0xea
   191c8:	f890 1149 	ldrb.w	r1, [r0, #329]	; 0x149
   191cc:	f880 113e 	strb.w	r1, [r0, #318]	; 0x13e
   191d0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   191d4:	2100      	movs	r1, #0
   191d6:	2002      	movs	r0, #2
   191d8:	f000 bfe6 	b.w	1a1a8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1080>
   191dc:	f890 20b6 	ldrb.w	r2, [r0, #182]	; 0xb6
   191e0:	2301      	movs	r3, #1
   191e2:	2104      	movs	r1, #4
   191e4:	30a0      	adds	r0, #160	; 0xa0
   191e6:	f006 ff72 	bl	200ce <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   191ea:	0006      	movs	r6, r0
   191ec:	6860      	ldr	r0, [r4, #4]
   191ee:	f04f 0702 	mov.w	r7, #2
   191f2:	d00c      	beq.n	1920e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xe6>
   191f4:	f890 10b6 	ldrb.w	r1, [r0, #182]	; 0xb6
   191f8:	2913      	cmp	r1, #19
   191fa:	d07a      	beq.n	192f2 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1ca>
   191fc:	2917      	cmp	r1, #23
   191fe:	d079      	beq.n	192f4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1cc>
   19200:	2918      	cmp	r1, #24
   19202:	d078      	beq.n	192f6 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1ce>
   19204:	291e      	cmp	r1, #30
   19206:	f000 811f 	beq.w	19448 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x320>
   1920a:	f000 b941 	b.w	19490 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x368>
   1920e:	f8d0 10a4 	ldr.w	r1, [r0, #164]	; 0xa4
   19212:	f011 0f01 	tst.w	r1, #1
   19216:	d005      	beq.n	19224 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xfc>
   19218:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1921c:	2101      	movs	r1, #1
   1921e:	2009      	movs	r0, #9
   19220:	f000 bfc2 	b.w	1a1a8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1080>
   19224:	f011 0f02 	tst.w	r1, #2
   19228:	d00b      	beq.n	19242 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x11a>
   1922a:	2101      	movs	r1, #1
   1922c:	200c      	movs	r0, #12
   1922e:	f000 ffbb 	bl	1a1a8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1080>
   19232:	6860      	ldr	r0, [r4, #4]
   19234:	f890 10f7 	ldrb.w	r1, [r0, #247]	; 0xf7
   19238:	f041 0101 	orr.w	r1, r1, #1
   1923c:	f880 10f7 	strb.w	r1, [r0, #247]	; 0xf7
   19240:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   19242:	f011 0f04 	tst.w	r1, #4
   19246:	d005      	beq.n	19254 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x12c>
   19248:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1924c:	2101      	movs	r1, #1
   1924e:	2013      	movs	r0, #19
   19250:	f000 bfaa 	b.w	1a1a8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1080>
   19254:	f011 0f08 	tst.w	r1, #8
   19258:	d009      	beq.n	1926e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x146>
   1925a:	f890 1138 	ldrb.w	r1, [r0, #312]	; 0x138
   1925e:	f880 113e 	strb.w	r1, [r0, #318]	; 0x13e
   19262:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   19266:	2101      	movs	r1, #1
   19268:	2007      	movs	r0, #7
   1926a:	f000 bf9d 	b.w	1a1a8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1080>
   1926e:	f011 0f80 	tst.w	r1, #128	; 0x80
   19272:	d005      	beq.n	19280 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x158>
   19274:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   19278:	2101      	movs	r1, #1
   1927a:	201b      	movs	r0, #27
   1927c:	f000 bf94 	b.w	1a1a8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1080>
   19280:	f011 0f30 	tst.w	r1, #48	; 0x30
   19284:	d052      	beq.n	1932c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x204>
   19286:	f890 114b 	ldrb.w	r1, [r0, #331]	; 0x14b
   1928a:	f88d 1000 	strb.w	r1, [sp]
   1928e:	f89d 1000 	ldrb.w	r1, [sp]
   19292:	2900      	cmp	r1, #0
   19294:	d17e      	bne.n	19394 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x26c>
   19296:	f890 114a 	ldrb.w	r1, [r0, #330]	; 0x14a
   1929a:	f88d 1000 	strb.w	r1, [sp]
   1929e:	f89d 1000 	ldrb.w	r1, [sp]
   192a2:	b1c9      	cbz	r1, 192d8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1b0>
   192a4:	f890 10b6 	ldrb.w	r1, [r0, #182]	; 0xb6
   192a8:	2927      	cmp	r1, #39	; 0x27
   192aa:	bf1b      	ittet	ne
   192ac:	f890 10b5 	ldrbne.w	r1, [r0, #181]	; 0xb5
   192b0:	2927      	cmpne	r1, #39	; 0x27
   192b2:	2301      	moveq	r3, #1
   192b4:	2300      	movne	r3, #0
   192b6:	f200 3246 	addw	r2, r0, #838	; 0x346
   192ba:	f500 71a5 	add.w	r1, r0, #330	; 0x14a
   192be:	f7fb fd15 	bl	14cec <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>
   192c2:	6860      	ldr	r0, [r4, #4]
   192c4:	f8d0 10a4 	ldr.w	r1, [r0, #164]	; 0xa4
   192c8:	f021 0120 	bic.w	r1, r1, #32
   192cc:	f041 0110 	orr.w	r1, r1, #16
   192d0:	f8c0 10a4 	str.w	r1, [r0, #164]	; 0xa4
   192d4:	f880 514a 	strb.w	r5, [r0, #330]	; 0x14a
   192d8:	6860      	ldr	r0, [r4, #4]
   192da:	f890 10a4 	ldrb.w	r1, [r0, #164]	; 0xa4
   192de:	f011 0f10 	tst.w	r1, #16
   192e2:	d057      	beq.n	19394 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x26c>
   192e4:	f007 fcab 	bl	20c3e <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
   192e8:	6863      	ldr	r3, [r4, #4]
   192ea:	f893 0064 	ldrb.w	r0, [r3, #100]	; 0x64
   192ee:	2801      	cmp	r0, #1
   192f0:	e002      	b.n	192f8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1d0>
   192f2:	e024      	b.n	1933e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x216>
   192f4:	e029      	b.n	1934a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x222>
   192f6:	e068      	b.n	193ca <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x2a2>
   192f8:	bf08      	it	eq
   192fa:	f883 7064 	strbeq.w	r7, [r3, #100]	; 0x64
   192fe:	d006      	beq.n	1930e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1e6>
   19300:	f503 72d4 	add.w	r2, r3, #424	; 0x1a8
   19304:	f103 0130 	add.w	r1, r3, #48	; 0x30
   19308:	8818      	ldrh	r0, [r3, #0]
   1930a:	f007 fc4f 	bl	20bac <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
   1930e:	6860      	ldr	r0, [r4, #4]
   19310:	f8b0 104e 	ldrh.w	r1, [r0, #78]	; 0x4e
   19314:	f8a0 113e 	strh.w	r1, [r0, #318]	; 0x13e
   19318:	f8b0 1052 	ldrh.w	r1, [r0, #82]	; 0x52
   1931c:	f8a0 1140 	strh.w	r1, [r0, #320]	; 0x140
   19320:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   19324:	2101      	movs	r1, #1
   19326:	2015      	movs	r0, #21
   19328:	f000 bf3e 	b.w	1a1a8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1080>
   1932c:	f011 0f40 	tst.w	r1, #64	; 0x40
   19330:	d030      	beq.n	19394 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x26c>
   19332:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   19336:	2101      	movs	r1, #1
   19338:	2024      	movs	r0, #36	; 0x24
   1933a:	f000 bf35 	b.w	1a1a8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1080>
   1933e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   19342:	2101      	movs	r1, #1
   19344:	200b      	movs	r0, #11
   19346:	f000 bf2f 	b.w	1a1a8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1080>
   1934a:	f890 1142 	ldrb.w	r1, [r0, #322]	; 0x142
   1934e:	2908      	cmp	r1, #8
   19350:	d20d      	bcs.n	1936e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x246>
   19352:	f501 722e 	add.w	r2, r1, #696	; 0x2b8
   19356:	f1c1 0108 	rsb	r1, r1, #8
   1935a:	b2c9      	uxtb	r1, r1
   1935c:	4410      	add	r0, r2
   1935e:	f7f8 fbaf 	bl	11ac0 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
   19362:	6861      	ldr	r1, [r4, #4]
   19364:	f891 2142 	ldrb.w	r2, [r1, #322]	; 0x142
   19368:	4410      	add	r0, r2
   1936a:	f881 0142 	strb.w	r0, [r1, #322]	; 0x142
   1936e:	6862      	ldr	r2, [r4, #4]
   19370:	f892 0142 	ldrb.w	r0, [r2, #322]	; 0x142
   19374:	f1a0 0108 	sub.w	r1, r0, #8
   19378:	2904      	cmp	r1, #4
   1937a:	d211      	bcs.n	193a0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x278>
   1937c:	1f03      	subs	r3, r0, #4
   1937e:	3808      	subs	r0, #8
   19380:	f1c0 0004 	rsb	r0, r0, #4
   19384:	b2c1      	uxtb	r1, r0
   19386:	f503 7098 	add.w	r0, r3, #304	; 0x130
   1938a:	4410      	add	r0, r2
   1938c:	f7f8 fb98 	bl	11ac0 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
   19390:	6861      	ldr	r1, [r4, #4]
   19392:	e000      	b.n	19396 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x26e>
   19394:	e05e      	b.n	19454 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x32c>
   19396:	f891 2142 	ldrb.w	r2, [r1, #322]	; 0x142
   1939a:	4410      	add	r0, r2
   1939c:	f881 0142 	strb.w	r0, [r1, #322]	; 0x142
   193a0:	6860      	ldr	r0, [r4, #4]
   193a2:	f890 1142 	ldrb.w	r1, [r0, #322]	; 0x142
   193a6:	290c      	cmp	r1, #12
   193a8:	bf38      	it	cc
   193aa:	bdf8      	popcc	{r3, r4, r5, r6, r7, pc}
   193ac:	d005      	beq.n	193ba <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x292>
   193ae:	f640 1135 	movw	r1, #2357	; 0x935
   193b2:	f04f 0031 	mov.w	r0, #49	; 0x31
   193b6:	f7f8 fae3 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   193ba:	f880 5142 	strb.w	r5, [r0, #322]	; 0x142
   193be:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   193c2:	2101      	movs	r1, #1
   193c4:	2004      	movs	r0, #4
   193c6:	f000 beef 	b.w	1a1a8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1080>
   193ca:	f890 1328 	ldrb.w	r1, [r0, #808]	; 0x328
   193ce:	2901      	cmp	r1, #1
   193d0:	d00b      	beq.n	193ea <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x2c2>
   193d2:	2902      	cmp	r1, #2
   193d4:	bf18      	it	ne
   193d6:	bdf8      	popne	{r3, r4, r5, r6, r7, pc}
   193d8:	f890 10f6 	ldrb.w	r1, [r0, #246]	; 0xf6
   193dc:	b1f9      	cbz	r1, 1941e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x2f6>
   193de:	2106      	movs	r1, #6
   193e0:	f880 113e 	strb.w	r1, [r0, #318]	; 0x13e
   193e4:	2101      	movs	r1, #1
   193e6:	2002      	movs	r0, #2
   193e8:	e028      	b.n	1943c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x314>
   193ea:	f890 128f 	ldrb.w	r1, [r0, #655]	; 0x28f
   193ee:	f88d 1000 	strb.w	r1, [sp]
   193f2:	f89d 1000 	ldrb.w	r1, [sp]
   193f6:	2900      	cmp	r1, #0
   193f8:	bf18      	it	ne
   193fa:	bdf8      	popne	{r3, r4, r5, r6, r7, pc}
   193fc:	f500 7390 	add.w	r3, r0, #288	; 0x120
   19400:	f500 712c 	add.w	r1, r0, #688	; 0x2b0
   19404:	2200      	movs	r2, #0
   19406:	f200 3029 	addw	r0, r0, #809	; 0x329
   1940a:	f7fa fd35 	bl	13e78 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>
   1940e:	2101      	movs	r1, #1
   19410:	2005      	movs	r0, #5
   19412:	f000 fec9 	bl	1a1a8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1080>
   19416:	6860      	ldr	r0, [r4, #4]
   19418:	f880 5328 	strb.w	r5, [r0, #808]	; 0x328
   1941c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1941e:	2103      	movs	r1, #3
   19420:	2206      	movs	r2, #6
   19422:	f880 113b 	strb.w	r1, [r0, #315]	; 0x13b
   19426:	f880 213a 	strb.w	r2, [r0, #314]	; 0x13a
   1942a:	f890 0106 	ldrb.w	r0, [r0, #262]	; 0x106
   1942e:	0880      	lsrs	r0, r0, #2
   19430:	f010 0f01 	tst.w	r0, #1
   19434:	bf14      	ite	ne
   19436:	2011      	movne	r0, #17
   19438:	200d      	moveq	r0, #13
   1943a:	2101      	movs	r1, #1
   1943c:	f000 feb4 	bl	1a1a8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1080>
   19440:	6860      	ldr	r0, [r4, #4]
   19442:	f880 5328 	strb.w	r5, [r0, #808]	; 0x328
   19446:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   19448:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1944c:	2101      	movs	r1, #1
   1944e:	2006      	movs	r0, #6
   19450:	f000 beaa 	b.w	1a1a8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1080>
   19454:	6860      	ldr	r0, [r4, #4]
   19456:	f890 10b6 	ldrb.w	r1, [r0, #182]	; 0xb6
   1945a:	2924      	cmp	r1, #36	; 0x24
   1945c:	d009      	beq.n	19472 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x34a>
   1945e:	292c      	cmp	r1, #44	; 0x2c
   19460:	d02f      	beq.n	194c2 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x39a>
   19462:	2930      	cmp	r1, #48	; 0x30
   19464:	d114      	bne.n	19490 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x368>
   19466:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1946a:	2101      	movs	r1, #1
   1946c:	2011      	movs	r0, #17
   1946e:	f000 be9b 	b.w	1a1a8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1080>
   19472:	f890 1154 	ldrb.w	r1, [r0, #340]	; 0x154
   19476:	2902      	cmp	r1, #2
   19478:	d01d      	beq.n	194b6 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x38e>
   1947a:	f890 1154 	ldrb.w	r1, [r0, #340]	; 0x154
   1947e:	2901      	cmp	r1, #1
   19480:	d106      	bne.n	19490 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x368>
   19482:	f890 0155 	ldrb.w	r0, [r0, #341]	; 0x155
   19486:	f88d 0000 	strb.w	r0, [sp]
   1948a:	f89d 0000 	ldrb.w	r0, [sp]
   1948e:	b190      	cbz	r0, 194b6 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x38e>
   19490:	6860      	ldr	r0, [r4, #4]
   19492:	2301      	movs	r3, #1
   19494:	2100      	movs	r1, #0
   19496:	f890 20b5 	ldrb.w	r2, [r0, #181]	; 0xb5
   1949a:	30a0      	adds	r0, #160	; 0xa0
   1949c:	f006 fe17 	bl	200ce <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   194a0:	b1f8      	cbz	r0, 194e2 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x3ba>
   194a2:	6860      	ldr	r0, [r4, #4]
   194a4:	2301      	movs	r3, #1
   194a6:	2104      	movs	r1, #4
   194a8:	f890 20b6 	ldrb.w	r2, [r0, #182]	; 0xb6
   194ac:	30a0      	adds	r0, #160	; 0xa0
   194ae:	f006 fe0e 	bl	200ce <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   194b2:	b160      	cbz	r0, 194ce <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x3a6>
   194b4:	e015      	b.n	194e2 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x3ba>
   194b6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   194ba:	2101      	movs	r1, #1
   194bc:	2017      	movs	r0, #23
   194be:	f000 be73 	b.w	1a1a8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1080>
   194c2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   194c6:	2101      	movs	r1, #1
   194c8:	2020      	movs	r0, #32
   194ca:	f000 be6d 	b.w	1a1a8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1080>
   194ce:	6860      	ldr	r0, [r4, #4]
   194d0:	f890 00e4 	ldrb.w	r0, [r0, #228]	; 0xe4
   194d4:	b128      	cbz	r0, 194e2 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x3ba>
   194d6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   194da:	2100      	movs	r1, #0
   194dc:	2012      	movs	r0, #18
   194de:	f000 be63 	b.w	1a1a8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1080>
   194e2:	6860      	ldr	r0, [r4, #4]
   194e4:	f890 20b5 	ldrb.w	r2, [r0, #181]	; 0xb5
   194e8:	2a0b      	cmp	r2, #11
   194ea:	d016      	beq.n	1951a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x3f2>
   194ec:	2e00      	cmp	r6, #0
   194ee:	bf18      	it	ne
   194f0:	bdf8      	popne	{r3, r4, r5, r6, r7, pc}
   194f2:	2301      	movs	r3, #1
   194f4:	2100      	movs	r1, #0
   194f6:	30a0      	adds	r0, #160	; 0xa0
   194f8:	f006 fde9 	bl	200ce <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   194fc:	2800      	cmp	r0, #0
   194fe:	f000 8122 	beq.w	19746 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x61e>
   19502:	6860      	ldr	r0, [r4, #4]
   19504:	f890 115b 	ldrb.w	r1, [r0, #347]	; 0x15b
   19508:	b189      	cbz	r1, 1952e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x406>
   1950a:	2100      	movs	r1, #0
   1950c:	200e      	movs	r0, #14
   1950e:	f000 fe4b 	bl	1a1a8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1080>
   19512:	6860      	ldr	r0, [r4, #4]
   19514:	f880 515b 	strb.w	r5, [r0, #347]	; 0x15b
   19518:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1951a:	f890 1139 	ldrb.w	r1, [r0, #313]	; 0x139
   1951e:	f880 113e 	strb.w	r1, [r0, #318]	; 0x13e
   19522:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   19526:	2100      	movs	r1, #0
   19528:	2007      	movs	r0, #7
   1952a:	f000 be3d 	b.w	1a1a8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1080>
   1952e:	f890 115a 	ldrb.w	r1, [r0, #346]	; 0x15a
   19532:	b121      	cbz	r1, 1953e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x416>
   19534:	f890 10f7 	ldrb.w	r1, [r0, #247]	; 0xf7
   19538:	f011 0f03 	tst.w	r1, #3
   1953c:	d012      	beq.n	19564 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x43c>
   1953e:	f890 114a 	ldrb.w	r1, [r0, #330]	; 0x14a
   19542:	f88d 1000 	strb.w	r1, [sp]
   19546:	f89d 1000 	ldrb.w	r1, [sp]
   1954a:	b131      	cbz	r1, 1955a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x432>
   1954c:	f890 114b 	ldrb.w	r1, [r0, #331]	; 0x14b
   19550:	f88d 1000 	strb.w	r1, [sp]
   19554:	f89d 1000 	ldrb.w	r1, [sp]
   19558:	b1a1      	cbz	r1, 19584 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x45c>
   1955a:	f890 1154 	ldrb.w	r1, [r0, #340]	; 0x154
   1955e:	2901      	cmp	r1, #1
   19560:	d13f      	bne.n	195e2 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x4ba>
   19562:	e02f      	b.n	195c4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x49c>
   19564:	2100      	movs	r1, #0
   19566:	200c      	movs	r0, #12
   19568:	f000 fe1e 	bl	1a1a8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1080>
   1956c:	6860      	ldr	r0, [r4, #4]
   1956e:	f890 10f7 	ldrb.w	r1, [r0, #247]	; 0xf7
   19572:	f041 0101 	orr.w	r1, r1, #1
   19576:	f880 10f7 	strb.w	r1, [r0, #247]	; 0xf7
   1957a:	f880 515a 	strb.w	r5, [r0, #346]	; 0x15a
   1957e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   19580:	200001b8 	.word	0x200001b8
   19584:	f890 10b6 	ldrb.w	r1, [r0, #182]	; 0xb6
   19588:	2927      	cmp	r1, #39	; 0x27
   1958a:	bf1d      	ittte	ne
   1958c:	f890 10b5 	ldrbne.w	r1, [r0, #181]	; 0xb5
   19590:	2927      	cmpne	r1, #39	; 0x27
   19592:	2300      	movne	r3, #0
   19594:	2301      	moveq	r3, #1
   19596:	f200 3246 	addw	r2, r0, #838	; 0x346
   1959a:	f500 71a5 	add.w	r1, r0, #330	; 0x14a
   1959e:	f7fb fba5 	bl	14cec <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>
   195a2:	6860      	ldr	r0, [r4, #4]
   195a4:	f880 514a 	strb.w	r5, [r0, #330]	; 0x14a
   195a8:	2100      	movs	r1, #0
   195aa:	2014      	movs	r0, #20
   195ac:	f000 fdfc 	bl	1a1a8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1080>
   195b0:	6860      	ldr	r0, [r4, #4]
   195b2:	f8b0 104e 	ldrh.w	r1, [r0, #78]	; 0x4e
   195b6:	f8a0 113e 	strh.w	r1, [r0, #318]	; 0x13e
   195ba:	f8b0 1052 	ldrh.w	r1, [r0, #82]	; 0x52
   195be:	f8a0 1140 	strh.w	r1, [r0, #320]	; 0x140
   195c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   195c4:	f890 1155 	ldrb.w	r1, [r0, #341]	; 0x155
   195c8:	f88d 1000 	strb.w	r1, [sp]
   195cc:	f89d 1000 	ldrb.w	r1, [sp]
   195d0:	b939      	cbnz	r1, 195e2 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x4ba>
   195d2:	f890 20b6 	ldrb.w	r2, [r0, #182]	; 0xb6
   195d6:	2301      	movs	r3, #1
   195d8:	210b      	movs	r1, #11
   195da:	30a0      	adds	r0, #160	; 0xa0
   195dc:	f006 fd77 	bl	200ce <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   195e0:	b168      	cbz	r0, 195fe <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x4d6>
   195e2:	6860      	ldr	r0, [r4, #4]
   195e4:	f890 1188 	ldrb.w	r1, [r0, #392]	; 0x188
   195e8:	f88d 1000 	strb.w	r1, [sp]
   195ec:	f89d 1000 	ldrb.w	r1, [sp]
   195f0:	b399      	cbz	r1, 1965a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x532>
   195f2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   195f6:	2100      	movs	r1, #0
   195f8:	2023      	movs	r0, #35	; 0x23
   195fa:	f000 bdd5 	b.w	1a1a8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1080>
   195fe:	6860      	ldr	r0, [r4, #4]
   19600:	f890 106e 	ldrb.w	r1, [r0, #110]	; 0x6e
   19604:	2901      	cmp	r1, #1
   19606:	bf08      	it	eq
   19608:	2201      	moveq	r2, #1
   1960a:	d00f      	beq.n	1962c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x504>
   1960c:	2902      	cmp	r1, #2
   1960e:	bf08      	it	eq
   19610:	2202      	moveq	r2, #2
   19612:	d00b      	beq.n	1962c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x504>
   19614:	2904      	cmp	r1, #4
   19616:	bf14      	ite	ne
   19618:	2908      	cmpne	r1, #8
   1961a:	2203      	moveq	r2, #3
   1961c:	d006      	beq.n	1962c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x504>
   1961e:	bf00      	nop
   19620:	f44f 7134 	mov.w	r1, #720	; 0x2d0
   19624:	f04f 0006 	mov.w	r0, #6
   19628:	f7f8 f9aa 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1962c:	f890 306f 	ldrb.w	r3, [r0, #111]	; 0x6f
   19630:	2b01      	cmp	r3, #1
   19632:	bf18      	it	ne
   19634:	2b02      	cmpne	r3, #2
   19636:	d004      	beq.n	19642 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x51a>
   19638:	2b04      	cmp	r3, #4
   1963a:	bf14      	ite	ne
   1963c:	2b08      	cmpne	r3, #8
   1963e:	2303      	moveq	r3, #3
   19640:	d1ee      	bne.n	19620 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x4f8>
   19642:	f890 c156 	ldrb.w	ip, [r0, #342]	; 0x156
   19646:	2a01      	cmp	r2, #1
   19648:	d008      	beq.n	1965c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x534>
   1964a:	2a02      	cmp	r2, #2
   1964c:	d00a      	beq.n	19664 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x53c>
   1964e:	2a03      	cmp	r2, #3
   19650:	bf08      	it	eq
   19652:	f1bc 0f04 	cmpeq.w	ip, #4
   19656:	d008      	beq.n	1966a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x542>
   19658:	e017      	b.n	1968a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x562>
   1965a:	e040      	b.n	196de <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x5b6>
   1965c:	f1bc 0f01 	cmp.w	ip, #1
   19660:	d113      	bne.n	1968a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x562>
   19662:	e002      	b.n	1966a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x542>
   19664:	f1bc 0f02 	cmp.w	ip, #2
   19668:	d10f      	bne.n	1968a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x562>
   1966a:	f890 2157 	ldrb.w	r2, [r0, #343]	; 0x157
   1966e:	2b01      	cmp	r3, #1
   19670:	d006      	beq.n	19680 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x558>
   19672:	2b02      	cmp	r3, #2
   19674:	d007      	beq.n	19686 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x55e>
   19676:	2b03      	cmp	r3, #3
   19678:	bf08      	it	eq
   1967a:	2a04      	cmpeq	r2, #4
   1967c:	d00e      	beq.n	1969c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x574>
   1967e:	e004      	b.n	1968a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x562>
   19680:	2a01      	cmp	r2, #1
   19682:	d102      	bne.n	1968a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x562>
   19684:	e00a      	b.n	1969c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x574>
   19686:	2a02      	cmp	r2, #2
   19688:	d008      	beq.n	1969c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x574>
   1968a:	f890 20b6 	ldrb.w	r2, [r0, #182]	; 0xb6
   1968e:	2301      	movs	r3, #1
   19690:	2103      	movs	r1, #3
   19692:	30a0      	adds	r0, #160	; 0xa0
   19694:	f006 fd1b 	bl	200ce <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   19698:	bb80      	cbnz	r0, 196fc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x5d4>
   1969a:	e011      	b.n	196c0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x598>
   1969c:	f8b0 30ac 	ldrh.w	r3, [r0, #172]	; 0xac
   196a0:	f500 7251 	add.w	r2, r0, #836	; 0x344
   196a4:	f8b0 0158 	ldrh.w	r0, [r0, #344]	; 0x158
   196a8:	f006 fe01 	bl	202ae <sym_CB3FDFEUY3F2NWFVYZOUMB3I5QKHLDIUWWP26EA>
   196ac:	b120      	cbz	r0, 196b8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x590>
   196ae:	6861      	ldr	r1, [r4, #4]
   196b0:	2029      	movs	r0, #41	; 0x29
   196b2:	f881 00b5 	strb.w	r0, [r1, #181]	; 0xb5
   196b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   196b8:	2000      	movs	r0, #0
   196ba:	f000 fe4b 	bl	1a354 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x122c>
   196be:	e042      	b.n	19746 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x61e>
   196c0:	6860      	ldr	r0, [r4, #4]
   196c2:	2301      	movs	r3, #1
   196c4:	2102      	movs	r1, #2
   196c6:	f890 20b6 	ldrb.w	r2, [r0, #182]	; 0xb6
   196ca:	30a0      	adds	r0, #160	; 0xa0
   196cc:	f006 fcff 	bl	200ce <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   196d0:	b9a0      	cbnz	r0, 196fc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x5d4>
   196d2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   196d6:	2100      	movs	r1, #0
   196d8:	2016      	movs	r0, #22
   196da:	f000 bd65 	b.w	1a1a8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1080>
   196de:	f890 1184 	ldrb.w	r1, [r0, #388]	; 0x184
   196e2:	f88d 1000 	strb.w	r1, [sp]
   196e6:	f89d 1000 	ldrb.w	r1, [sp]
   196ea:	b141      	cbz	r1, 196fe <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x5d6>
   196ec:	2100      	movs	r1, #0
   196ee:	2025      	movs	r0, #37	; 0x25
   196f0:	f000 fd5a 	bl	1a1a8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1080>
   196f4:	6860      	ldr	r0, [r4, #4]
   196f6:	f880 5184 	strb.w	r5, [r0, #388]	; 0x184
   196fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   196fc:	e023      	b.n	19746 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x61e>
   196fe:	f890 118c 	ldrb.w	r1, [r0, #396]	; 0x18c
   19702:	f88d 1000 	strb.w	r1, [sp]
   19706:	f89d 1000 	ldrb.w	r1, [sp]
   1970a:	b129      	cbz	r1, 19718 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x5f0>
   1970c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   19710:	2100      	movs	r1, #0
   19712:	2022      	movs	r0, #34	; 0x22
   19714:	f000 bd48 	b.w	1a1a8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1080>
   19718:	f890 115c 	ldrb.w	r1, [r0, #348]	; 0x15c
   1971c:	f88d 1000 	strb.w	r1, [sp]
   19720:	f89d 1000 	ldrb.w	r1, [sp]
   19724:	b179      	cbz	r1, 19746 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x61e>
   19726:	4b17      	ldr	r3, [pc, #92]	; (19784 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x65c>)
   19728:	f890 2160 	ldrb.w	r2, [r0, #352]	; 0x160
   1972c:	f200 1161 	addw	r1, r0, #353	; 0x161
   19730:	681b      	ldr	r3, [r3, #0]
   19732:	4813      	ldr	r0, [pc, #76]	; (19780 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x658>)
   19734:	4798      	blx	r3
   19736:	b1e8      	cbz	r0, 19774 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x64c>
   19738:	2801      	cmp	r0, #1
   1973a:	d004      	beq.n	19746 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x61e>
   1973c:	2802      	cmp	r0, #2
   1973e:	bf04      	itt	eq
   19740:	6860      	ldreq	r0, [r4, #4]
   19742:	f880 515c 	strbeq.w	r5, [r0, #348]	; 0x15c
   19746:	6860      	ldr	r0, [r4, #4]
   19748:	2301      	movs	r3, #1
   1974a:	2100      	movs	r1, #0
   1974c:	f890 20b5 	ldrb.w	r2, [r0, #181]	; 0xb5
   19750:	30a0      	adds	r0, #160	; 0xa0
   19752:	f006 fcbc 	bl	200ce <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   19756:	2800      	cmp	r0, #0
   19758:	bf08      	it	eq
   1975a:	bdf8      	popeq	{r3, r4, r5, r6, r7, pc}
   1975c:	6860      	ldr	r0, [r4, #4]
   1975e:	f890 033c 	ldrb.w	r0, [r0, #828]	; 0x33c
   19762:	2800      	cmp	r0, #0
   19764:	bf08      	it	eq
   19766:	bdf8      	popeq	{r3, r4, r5, r6, r7, pc}
   19768:	2100      	movs	r1, #0
   1976a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1976e:	20ff      	movs	r0, #255	; 0xff
   19770:	f000 bd1a 	b.w	1a1a8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1080>
   19774:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   19778:	2100      	movs	r1, #0
   1977a:	201c      	movs	r0, #28
   1977c:	f000 bd14 	b.w	1a1a8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1080>
   19780:	200001b8 	.word	0x200001b8
   19784:	20000320 	.word	0x20000320
   19788:	b570      	push	{r4, r5, r6, lr}
   1978a:	b082      	sub	sp, #8
   1978c:	4605      	mov	r5, r0
   1978e:	4668      	mov	r0, sp
   19790:	f7f9 f8f4 	bl	1297c <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI>
   19794:	b330      	cbz	r0, 197e4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x6bc>
   19796:	2232      	movs	r2, #50	; 0x32
   19798:	2100      	movs	r1, #0
   1979a:	9800      	ldr	r0, [sp, #0]
   1979c:	f005 f8d9 	bl	1e952 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
   197a0:	9e00      	ldr	r6, [sp, #0]
   197a2:	2103      	movs	r1, #3
   197a4:	4630      	mov	r0, r6
   197a6:	f007 f8b2 	bl	2090e <sym_IGXXIFMDOTCDOLQAILBV5BXIU5R6AALP5I4HZGQ>
   197aa:	9800      	ldr	r0, [sp, #0]
   197ac:	7801      	ldrb	r1, [r0, #0]
   197ae:	f001 01ef 	and.w	r1, r1, #239	; 0xef
   197b2:	7001      	strb	r1, [r0, #0]
   197b4:	4629      	mov	r1, r5
   197b6:	f7fa fe11 	bl	143dc <sym_U3LPDM4ZN7F4EBRA6GBYBEUAHXDWZU7U4P3OZRQ>
   197ba:	2100      	movs	r1, #0
   197bc:	4c77      	ldr	r4, [pc, #476]	; (1999c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x874>)
   197be:	2d13      	cmp	r5, #19
   197c0:	f000 80e0 	beq.w	19984 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x85c>
   197c4:	dc13      	bgt.n	197ee <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x6c6>
   197c6:	f1a5 0002 	sub.w	r0, r5, #2
   197ca:	2811      	cmp	r0, #17
   197cc:	d229      	bcs.n	19822 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x6fa>
   197ce:	e8df f000 	tbb	[pc, r0]
   197d2:	282d      	.short	0x282d
   197d4:	2dd9d95a 	.word	0x2dd9d95a
   197d8:	d9286728 	.word	0xd9286728
   197dc:	28b63f45 	.word	0x28b63f45
   197e0:	00d93228 	.word	0x00d93228
   197e4:	f640 314c 	movw	r1, #2892	; 0xb4c
   197e8:	2031      	movs	r0, #49	; 0x31
   197ea:	f7f8 f8c9 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   197ee:	2d20      	cmp	r5, #32
   197f0:	d074      	beq.n	198dc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x7b4>
   197f2:	dc0a      	bgt.n	1980a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x6e2>
   197f4:	f1a5 0014 	sub.w	r0, r5, #20
   197f8:	2809      	cmp	r0, #9
   197fa:	d212      	bcs.n	19822 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x6fa>
   197fc:	e8df f000 	tbb	[pc, r0]
   19800:	8c395555 	.word	0x8c395555
   19804:	70111111 	.word	0x70111111
   19808:	00a9      	.short	0x00a9
   1980a:	2d24      	cmp	r5, #36	; 0x24
   1980c:	d067      	beq.n	198de <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x7b6>
   1980e:	dc04      	bgt.n	1981a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x6f2>
   19810:	2d22      	cmp	r5, #34	; 0x22
   19812:	d07c      	beq.n	1990e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x7e6>
   19814:	2d23      	cmp	r5, #35	; 0x23
   19816:	d062      	beq.n	198de <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x7b6>
   19818:	e003      	b.n	19822 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x6fa>
   1981a:	2d25      	cmp	r5, #37	; 0x25
   1981c:	d05f      	beq.n	198de <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x7b6>
   1981e:	2dff      	cmp	r5, #255	; 0xff
   19820:	d076      	beq.n	19910 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x7e8>
   19822:	f640 31e3 	movw	r1, #3043	; 0xbe3
   19826:	2031      	movs	r0, #49	; 0x31
   19828:	f7f8 f8aa 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1982c:	6861      	ldr	r1, [r4, #4]
   1982e:	9800      	ldr	r0, [sp, #0]
   19830:	f891 113e 	ldrb.w	r1, [r1, #318]	; 0x13e
   19834:	e010      	b.n	19858 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x730>
   19836:	6860      	ldr	r0, [r4, #4]
   19838:	f890 113b 	ldrb.w	r1, [r0, #315]	; 0x13b
   1983c:	9800      	ldr	r0, [sp, #0]
   1983e:	f007 f846 	bl	208ce <sym_YMBI57OSTLFK65WQKT7WKM26EFMSOHLSMFNNR4I>
   19842:	6860      	ldr	r0, [r4, #4]
   19844:	f890 113a 	ldrb.w	r1, [r0, #314]	; 0x13a
   19848:	9800      	ldr	r0, [sp, #0]
   1984a:	f007 f844 	bl	208d6 <sym_HAHVMCZ4V2U4G5KM2JOTYBKS4GFM72EJZRT7M3A>
   1984e:	e099      	b.n	19984 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x85c>
   19850:	6861      	ldr	r1, [r4, #4]
   19852:	9800      	ldr	r0, [sp, #0]
   19854:	f891 113a 	ldrb.w	r1, [r1, #314]	; 0x13a
   19858:	7101      	strb	r1, [r0, #4]
   1985a:	e093      	b.n	19984 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x85c>
   1985c:	9800      	ldr	r0, [sp, #0]
   1985e:	220c      	movs	r2, #12
   19860:	7102      	strb	r2, [r0, #4]
   19862:	2259      	movs	r2, #89	; 0x59
   19864:	7142      	strb	r2, [r0, #5]
   19866:	7181      	strb	r1, [r0, #6]
   19868:	21fa      	movs	r1, #250	; 0xfa
   1986a:	71c1      	strb	r1, [r0, #7]
   1986c:	2111      	movs	r1, #17
   1986e:	7201      	strb	r1, [r0, #8]
   19870:	e088      	b.n	19984 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x85c>
   19872:	6861      	ldr	r1, [r4, #4]
   19874:	9800      	ldr	r0, [sp, #0]
   19876:	f891 1156 	ldrb.w	r1, [r1, #342]	; 0x156
   1987a:	7101      	strb	r1, [r0, #4]
   1987c:	6861      	ldr	r1, [r4, #4]
   1987e:	f891 1157 	ldrb.w	r1, [r1, #343]	; 0x157
   19882:	7141      	strb	r1, [r0, #5]
   19884:	e07e      	b.n	19984 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x85c>
   19886:	6860      	ldr	r0, [r4, #4]
   19888:	f500 712e 	add.w	r1, r0, #696	; 0x2b8
   1988c:	9800      	ldr	r0, [sp, #0]
   1988e:	f006 ffd5 	bl	2083c <sym_5WHAN4NH6PZY7VV5KTN53CABJRWXR3RJHHTA7KA>
   19892:	6860      	ldr	r0, [r4, #4]
   19894:	f500 719a 	add.w	r1, r0, #308	; 0x134
   19898:	9800      	ldr	r0, [sp, #0]
   1989a:	f006 ffcc 	bl	20836 <sym_RGBMWS6T65LAWR3HOVV5354MKQCATDBBY34XWQA>
   1989e:	e071      	b.n	19984 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x85c>
   198a0:	483e      	ldr	r0, [pc, #248]	; (1999c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x874>)
   198a2:	9900      	ldr	r1, [sp, #0]
   198a4:	f7fb fbf2 	bl	1508c <sym_KQ4RAL3HW3LUBE4EKZDESO77BJMQRXFGP63ANLQ>
   198a8:	e06c      	b.n	19984 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x85c>
   198aa:	6860      	ldr	r0, [r4, #4]
   198ac:	f8b0 1050 	ldrh.w	r1, [r0, #80]	; 0x50
   198b0:	9800      	ldr	r0, [sp, #0]
   198b2:	f007 f834 	bl	2091e <sym_XW2AJRDPRGLPOQ7S6SBIDHJSPT737QJRC7LOWOI>
   198b6:	6860      	ldr	r0, [r4, #4]
   198b8:	f8b0 1140 	ldrh.w	r1, [r0, #320]	; 0x140
   198bc:	9800      	ldr	r0, [sp, #0]
   198be:	f007 f832 	bl	20926 <sym_LKCMUIZAJSOHIZE54V37DJ4ULJ25HGEY7F7ST5I>
   198c2:	6860      	ldr	r0, [r4, #4]
   198c4:	f8b0 104c 	ldrh.w	r1, [r0, #76]	; 0x4c
   198c8:	9800      	ldr	r0, [sp, #0]
   198ca:	f007 f830 	bl	2092e <sym_5NOMYYLIL22YATRZCGPQVOYH6BFSDNIEMEEMIZA>
   198ce:	6860      	ldr	r0, [r4, #4]
   198d0:	f8b0 113e 	ldrh.w	r1, [r0, #318]	; 0x13e
   198d4:	9800      	ldr	r0, [sp, #0]
   198d6:	f007 f82e 	bl	20936 <sym_BD2MQHSWE7QNCT7DV5JGZCA5J2QIL2T6RGRVJ3Y>
   198da:	e053      	b.n	19984 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x85c>
   198dc:	e040      	b.n	19960 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x838>
   198de:	e032      	b.n	19946 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x81e>
   198e0:	9101      	str	r1, [sp, #4]
   198e2:	2101      	movs	r1, #1
   198e4:	4630      	mov	r0, r6
   198e6:	f006 fff8 	bl	208da <sym_ML7UWXB7GWXTGW6UFCU3UDXHGUNWX35NXVW5QIA>
   198ea:	6860      	ldr	r0, [r4, #4]
   198ec:	f810 2f10 	ldrb.w	r2, [r0, #16]!
   198f0:	2a03      	cmp	r2, #3
   198f2:	bf08      	it	eq
   198f4:	2200      	moveq	r2, #0
   198f6:	f89d 1004 	ldrb.w	r1, [sp, #4]
   198fa:	7840      	ldrb	r0, [r0, #1]
   198fc:	f362 1187 	bfi	r1, r2, #6, #2
   19900:	f360 0104 	bfi	r1, r0, #0, #5
   19904:	f88d 1004 	strb.w	r1, [sp, #4]
   19908:	a901      	add	r1, sp, #4
   1990a:	4630      	mov	r0, r6
   1990c:	e001      	b.n	19912 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x7ea>
   1990e:	e02c      	b.n	1996a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x842>
   19910:	e030      	b.n	19974 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x84c>
   19912:	f006 ffeb 	bl	208ec <sym_2FLKUHSSL5LZIVHHB4YVAFHCUF4O55YZBH5NHWQ>
   19916:	e035      	b.n	19984 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x85c>
   19918:	6860      	ldr	r0, [r4, #4]
   1991a:	f890 1154 	ldrb.w	r1, [r0, #340]	; 0x154
   1991e:	2901      	cmp	r1, #1
   19920:	9900      	ldr	r1, [sp, #0]
   19922:	bf14      	ite	ne
   19924:	f890 006a 	ldrbne.w	r0, [r0, #106]	; 0x6a
   19928:	f890 0156 	ldrbeq.w	r0, [r0, #342]	; 0x156
   1992c:	7108      	strb	r0, [r1, #4]
   1992e:	6860      	ldr	r0, [r4, #4]
   19930:	bf14      	ite	ne
   19932:	f890 006b 	ldrbne.w	r0, [r0, #107]	; 0x6b
   19936:	f890 0157 	ldrbeq.w	r0, [r0, #343]	; 0x157
   1993a:	7148      	strb	r0, [r1, #5]
   1993c:	e022      	b.n	19984 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x85c>
   1993e:	9800      	ldr	r0, [sp, #0]
   19940:	f7fb fb4c 	bl	14fdc <sym_CYYZ5DA5UWAE37FM7XP643I473QUSWWZ2MS7OLY>
   19944:	e01e      	b.n	19984 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x85c>
   19946:	4a15      	ldr	r2, [pc, #84]	; (1999c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x874>)
   19948:	4628      	mov	r0, r5
   1994a:	9900      	ldr	r1, [sp, #0]
   1994c:	f008 fa75 	bl	21e3a <sym_AZ6XAECCLUET3DKKERIWSDCXWVDVHFLFKGSXVGQ>
   19950:	e018      	b.n	19984 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x85c>
   19952:	6860      	ldr	r0, [r4, #4]
   19954:	f200 1161 	addw	r1, r0, #353	; 0x161
   19958:	9800      	ldr	r0, [sp, #0]
   1995a:	f006 ff93 	bl	20884 <sym_LDFW4OY5TOKCR2MMH4J6WIDM27FFMWUGGCVUBSQ>
   1995e:	e011      	b.n	19984 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x85c>
   19960:	490e      	ldr	r1, [pc, #56]	; (1999c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x874>)
   19962:	9800      	ldr	r0, [sp, #0]
   19964:	f008 fa2c 	bl	21dc0 <sym_YLWMRLNANVVW4ZQEHNNCF7HKVQD7RQVYQHK7H3Y>
   19968:	e00c      	b.n	19984 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x85c>
   1996a:	490c      	ldr	r1, [pc, #48]	; (1999c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x874>)
   1996c:	9800      	ldr	r0, [sp, #0]
   1996e:	f008 fa52 	bl	21e16 <sym_UEPRO7A35Z75LB2PPJ4VSGI4I7C3AOKO4ZR5U5A>
   19972:	e007      	b.n	19984 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x85c>
   19974:	6860      	ldr	r0, [r4, #4]
   19976:	f890 233f 	ldrb.w	r2, [r0, #831]	; 0x33f
   1997a:	f8d0 1340 	ldr.w	r1, [r0, #832]	; 0x340
   1997e:	9800      	ldr	r0, [sp, #0]
   19980:	f006 ffb7 	bl	208f2 <sym_EHH4TL4V6XWVDGG5OCXTIQQT5C4OFTGXZXSIJAA>
   19984:	f7f8 ffd2 	bl	1292c <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA>
   19988:	2800      	cmp	r0, #0
   1998a:	bf1c      	itt	ne
   1998c:	b002      	addne	sp, #8
   1998e:	bd70      	popne	{r4, r5, r6, pc}
   19990:	f640 31e7 	movw	r1, #3047	; 0xbe7
   19994:	2031      	movs	r0, #49	; 0x31
   19996:	f7f7 fff3 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1999a:	0000      	.short	0x0000
   1999c:	200001b8 	.word	0x200001b8
   199a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   199a4:	4cff      	ldr	r4, [pc, #1020]	; (19da4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xc7c>)
   199a6:	4683      	mov	fp, r0
   199a8:	b087      	sub	sp, #28
   199aa:	6860      	ldr	r0, [r4, #4]
   199ac:	4689      	mov	r9, r1
   199ae:	8800      	ldrh	r0, [r0, #0]
   199b0:	f7f8 fcc8 	bl	12344 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
   199b4:	9005      	str	r0, [sp, #20]
   199b6:	b170      	cbz	r0, 199d6 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x8ae>
   199b8:	f1a4 0618 	sub.w	r6, r4, #24
   199bc:	f04f 0500 	mov.w	r5, #0
   199c0:	88b0      	ldrh	r0, [r6, #4]
   199c2:	f410 7f80 	tst.w	r0, #256	; 0x100
   199c6:	6860      	ldr	r0, [r4, #4]
   199c8:	bf1c      	itt	ne
   199ca:	f8a0 50e6 	strhne.w	r5, [r0, #230]	; 0xe6
   199ce:	f880 52ac 	strbne.w	r5, [r0, #684]	; 0x2ac
   199d2:	d005      	beq.n	199e0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x8b8>
   199d4:	e009      	b.n	199ea <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x8c2>
   199d6:	f640 61d2 	movw	r1, #3794	; 0xed2
   199da:	2031      	movs	r0, #49	; 0x31
   199dc:	f7f7 ffd0 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   199e0:	f8b0 10e6 	ldrh.w	r1, [r0, #230]	; 0xe6
   199e4:	1c49      	adds	r1, r1, #1
   199e6:	f8a0 10e6 	strh.w	r1, [r0, #230]	; 0xe6
   199ea:	6860      	ldr	r0, [r4, #4]
   199ec:	f04f 0a01 	mov.w	sl, #1
   199f0:	f890 10bb 	ldrb.w	r1, [r0, #187]	; 0xbb
   199f4:	b939      	cbnz	r1, 19a06 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x8de>
   199f6:	f890 20b6 	ldrb.w	r2, [r0, #182]	; 0xb6
   199fa:	2301      	movs	r3, #1
   199fc:	2106      	movs	r1, #6
   199fe:	30a0      	adds	r0, #160	; 0xa0
   19a00:	f006 fb65 	bl	200ce <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   19a04:	b340      	cbz	r0, 19a58 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x930>
   19a06:	88b0      	ldrh	r0, [r6, #4]
   19a08:	f410 6f00 	tst.w	r0, #2048	; 0x800
   19a0c:	d007      	beq.n	19a1e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x8f6>
   19a0e:	6860      	ldr	r0, [r4, #4]
   19a10:	f890 10bb 	ldrb.w	r1, [r0, #187]	; 0xbb
   19a14:	2900      	cmp	r1, #0
   19a16:	bf18      	it	ne
   19a18:	f8c0 50d8 	strne.w	r5, [r0, #216]	; 0xd8
   19a1c:	d11c      	bne.n	19a58 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x930>
   19a1e:	6861      	ldr	r1, [r4, #4]
   19a20:	f8d1 00d8 	ldr.w	r0, [r1, #216]	; 0xd8
   19a24:	1c40      	adds	r0, r0, #1
   19a26:	f8c1 00d8 	str.w	r0, [r1, #216]	; 0xd8
   19a2a:	f8d1 20dc 	ldr.w	r2, [r1, #220]	; 0xdc
   19a2e:	4282      	cmp	r2, r0
   19a30:	bf2c      	ite	cs
   19a32:	1a13      	subcs	r3, r2, r0
   19a34:	2300      	movcc	r3, #0
   19a36:	f8b6 c006 	ldrh.w	ip, [r6, #6]
   19a3a:	f10c 0c05 	add.w	ip, ip, #5
   19a3e:	4563      	cmp	r3, ip
   19a40:	bf98      	it	ls
   19a42:	f881 a0e4 	strbls.w	sl, [r1, #228]	; 0xe4
   19a46:	4290      	cmp	r0, r2
   19a48:	d306      	bcc.n	19a58 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x930>
   19a4a:	f501 70cf 	add.w	r0, r1, #414	; 0x19e
   19a4e:	220e      	movs	r2, #14
   19a50:	f8c1 50d8 	str.w	r5, [r1, #216]	; 0xd8
   19a54:	f7fa fd7a 	bl	1454c <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
   19a58:	88b0      	ldrh	r0, [r6, #4]
   19a5a:	f04f 0802 	mov.w	r8, #2
   19a5e:	f410 7f40 	tst.w	r0, #768	; 0x300
   19a62:	d011      	beq.n	19a88 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x960>
   19a64:	6860      	ldr	r0, [r4, #4]
   19a66:	f890 10b9 	ldrb.w	r1, [r0, #185]	; 0xb9
   19a6a:	b111      	cbz	r1, 19a72 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x94a>
   19a6c:	2903      	cmp	r1, #3
   19a6e:	d006      	beq.n	19a7e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x956>
   19a70:	e00a      	b.n	19a88 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x960>
   19a72:	f880 a0b9 	strb.w	sl, [r0, #185]	; 0xb9
   19a76:	2101      	movs	r1, #1
   19a78:	f7fe fad6 	bl	18028 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
   19a7c:	e004      	b.n	19a88 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x960>
   19a7e:	f880 80b9 	strb.w	r8, [r0, #185]	; 0xb9
   19a82:	2101      	movs	r1, #1
   19a84:	f7fe fad0 	bl	18028 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
   19a88:	6860      	ldr	r0, [r4, #4]
   19a8a:	f890 10b9 	ldrb.w	r1, [r0, #185]	; 0xb9
   19a8e:	2901      	cmp	r1, #1
   19a90:	d105      	bne.n	19a9e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x976>
   19a92:	88b1      	ldrh	r1, [r6, #4]
   19a94:	f411 6f80 	tst.w	r1, #1024	; 0x400
   19a98:	bf18      	it	ne
   19a9a:	f880 80b9 	strbne.w	r8, [r0, #185]	; 0xb9
   19a9e:	f1bb 0f00 	cmp.w	fp, #0
   19aa2:	f040 82aa 	bne.w	19ffa <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xed2>
   19aa6:	88b1      	ldrh	r1, [r6, #4]
   19aa8:	f011 0f40 	tst.w	r1, #64	; 0x40
   19aac:	bf18      	it	ne
   19aae:	f8a0 52c0 	strhne.w	r5, [r0, #704]	; 0x2c0
   19ab2:	d104      	bne.n	19abe <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x996>
   19ab4:	f8b0 22c0 	ldrh.w	r2, [r0, #704]	; 0x2c0
   19ab8:	1c52      	adds	r2, r2, #1
   19aba:	f8a0 22c0 	strh.w	r2, [r0, #704]	; 0x2c0
   19abe:	ea5f 0709 	movs.w	r7, r9
   19ac2:	f040 80fa 	bne.w	19cba <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xb92>
   19ac6:	f011 0f08 	tst.w	r1, #8
   19aca:	d056      	beq.n	19b7a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xa52>
   19acc:	f890 113c 	ldrb.w	r1, [r0, #316]	; 0x13c
   19ad0:	291c      	cmp	r1, #28
   19ad2:	d008      	beq.n	19ae6 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x9be>
   19ad4:	2922      	cmp	r1, #34	; 0x22
   19ad6:	bf04      	itt	eq
   19ad8:	f500 71c6 	addeq.w	r1, r0, #396	; 0x18c
   19adc:	700d      	strbeq	r5, [r1, #0]
   19ade:	d00b      	beq.n	19af8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x9d0>
   19ae0:	29fe      	cmp	r1, #254	; 0xfe
   19ae2:	d018      	beq.n	19b16 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x9ee>
   19ae4:	e008      	b.n	19af8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x9d0>
   19ae6:	f500 71ae 	add.w	r1, r0, #348	; 0x15c
   19aea:	700d      	strb	r5, [r1, #0]
   19aec:	f880 50b5 	strb.w	r5, [r0, #181]	; 0xb5
   19af0:	f880 50f0 	strb.w	r5, [r0, #240]	; 0xf0
   19af4:	f8a0 50ec 	strh.w	r5, [r0, #236]	; 0xec
   19af8:	21fe      	movs	r1, #254	; 0xfe
   19afa:	f880 113c 	strb.w	r1, [r0, #316]	; 0x13c
   19afe:	f890 10b6 	ldrb.w	r1, [r0, #182]	; 0xb6
   19b02:	291c      	cmp	r1, #28
   19b04:	d00c      	beq.n	19b20 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x9f8>
   19b06:	bf00      	nop
   19b08:	f890 10b5 	ldrb.w	r1, [r0, #181]	; 0xb5
   19b0c:	2922      	cmp	r1, #34	; 0x22
   19b0e:	d019      	beq.n	19b44 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xa1c>
   19b10:	2931      	cmp	r1, #49	; 0x31
   19b12:	d023      	beq.n	19b5c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xa34>
   19b14:	e028      	b.n	19b68 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xa40>
   19b16:	f640 01cd 	movw	r1, #2253	; 0x8cd
   19b1a:	2031      	movs	r0, #49	; 0x31
   19b1c:	f7f7 ff30 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   19b20:	f880 50f5 	strb.w	r5, [r0, #245]	; 0xf5
   19b24:	f890 10f4 	ldrb.w	r1, [r0, #244]	; 0xf4
   19b28:	1e49      	subs	r1, r1, #1
   19b2a:	b249      	sxtb	r1, r1
   19b2c:	f880 10f4 	strb.w	r1, [r0, #244]	; 0xf4
   19b30:	2900      	cmp	r1, #0
   19b32:	bfa8      	it	ge
   19b34:	f880 50b6 	strbge.w	r5, [r0, #182]	; 0xb6
   19b38:	dae6      	bge.n	19b08 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x9e0>
   19b3a:	f240 11f3 	movw	r1, #499	; 0x1f3
   19b3e:	2031      	movs	r0, #49	; 0x31
   19b40:	f7f7 ff1e 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   19b44:	f890 00b6 	ldrb.w	r0, [r0, #182]	; 0xb6
   19b48:	f006 fb3b 	bl	201c2 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
   19b4c:	2800      	cmp	r0, #0
   19b4e:	bf14      	ite	ne
   19b50:	202f      	movne	r0, #47	; 0x2f
   19b52:	2023      	moveq	r0, #35	; 0x23
   19b54:	6861      	ldr	r1, [r4, #4]
   19b56:	f881 00b5 	strb.w	r0, [r1, #181]	; 0xb5
   19b5a:	e005      	b.n	19b68 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xa40>
   19b5c:	f880 a33d 	strb.w	sl, [r0, #829]	; 0x33d
   19b60:	f880 50b5 	strb.w	r5, [r0, #181]	; 0xb5
   19b64:	f880 50f0 	strb.w	r5, [r0, #240]	; 0xf0
   19b68:	6860      	ldr	r0, [r4, #4]
   19b6a:	f890 10b7 	ldrb.w	r1, [r0, #183]	; 0xb7
   19b6e:	2909      	cmp	r1, #9
   19b70:	bf04      	itt	eq
   19b72:	f886 8000 	strbeq.w	r8, [r6]
   19b76:	f880 813c 	strbeq.w	r8, [r0, #316]	; 0x13c
   19b7a:	7930      	ldrb	r0, [r6, #4]
   19b7c:	f010 0f01 	tst.w	r0, #1
   19b80:	d061      	beq.n	19c46 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xb1e>
   19b82:	68f0      	ldr	r0, [r6, #12]
   19b84:	2301      	movs	r3, #1
   19b86:	2105      	movs	r1, #5
   19b88:	78c7      	ldrb	r7, [r0, #3]
   19b8a:	6860      	ldr	r0, [r4, #4]
   19b8c:	f890 20b6 	ldrb.w	r2, [r0, #182]	; 0xb6
   19b90:	30a0      	adds	r0, #160	; 0xa0
   19b92:	f006 fa9c 	bl	200ce <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   19b96:	b158      	cbz	r0, 19bb0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xa88>
   19b98:	1eb8      	subs	r0, r7, #2
   19b9a:	280a      	cmp	r0, #10
   19b9c:	d206      	bcs.n	19bac <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xa84>
   19b9e:	e8df f000 	tbb	[pc, r0]
   19ba2:	0707      	.short	0x0707
   19ba4:	07070505 	.word	0x07070505
   19ba8:	07070505 	.word	0x07070505
   19bac:	2708      	movs	r7, #8
   19bae:	e084      	b.n	19cba <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xb92>
   19bb0:	68f0      	ldr	r0, [r6, #12]
   19bb2:	f7fa fc03 	bl	143bc <sym_3S3ZPZTS3JKT3LR3P6QZ3KOW4P72YQZEIQOYGSA>
   19bb6:	b138      	cbz	r0, 19bc8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xaa0>
   19bb8:	68f0      	ldr	r0, [r6, #12]
   19bba:	78c7      	ldrb	r7, [r0, #3]
   19bbc:	2f00      	cmp	r7, #0
   19bbe:	bf1c      	itt	ne
   19bc0:	2f01      	cmpne	r7, #1
   19bc2:	2f16      	cmpne	r7, #22
   19bc4:	d005      	beq.n	19bd2 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xaaa>
   19bc6:	e01a      	b.n	19bfe <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xad6>
   19bc8:	4876      	ldr	r0, [pc, #472]	; (19da4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xc7c>)
   19bca:	f000 fd07 	bl	1a5dc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x14b4>
   19bce:	4607      	mov	r7, r0
   19bd0:	e02c      	b.n	19c2c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xb04>
   19bd2:	6860      	ldr	r0, [r4, #4]
   19bd4:	f890 00b5 	ldrb.w	r0, [r0, #181]	; 0xb5
   19bd8:	f006 faf3 	bl	201c2 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
   19bdc:	b178      	cbz	r0, 19bfe <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xad6>
   19bde:	6861      	ldr	r1, [r4, #4]
   19be0:	f891 00b5 	ldrb.w	r0, [r1, #181]	; 0xb5
   19be4:	2822      	cmp	r0, #34	; 0x22
   19be6:	d00a      	beq.n	19bfe <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xad6>
   19be8:	2823      	cmp	r0, #35	; 0x23
   19bea:	bf04      	itt	eq
   19bec:	202f      	moveq	r0, #47	; 0x2f
   19bee:	f881 00b5 	strbeq.w	r0, [r1, #181]	; 0xb5
   19bf2:	d004      	beq.n	19bfe <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xad6>
   19bf4:	2f16      	cmp	r7, #22
   19bf6:	bf0c      	ite	eq
   19bf8:	2720      	moveq	r7, #32
   19bfa:	4647      	movne	r7, r8
   19bfc:	e05d      	b.n	19cba <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xb92>
   19bfe:	2f2b      	cmp	r7, #43	; 0x2b
   19c00:	d206      	bcs.n	19c10 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xae8>
   19c02:	4869      	ldr	r0, [pc, #420]	; (19da8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xc80>)
   19c04:	f850 1027 	ldr.w	r1, [r0, r7, lsl #2]
   19c08:	b111      	cbz	r1, 19c10 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xae8>
   19c0a:	4866      	ldr	r0, [pc, #408]	; (19da4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xc7c>)
   19c0c:	4788      	blx	r1
   19c0e:	e018      	b.n	19c42 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xb1a>
   19c10:	4864      	ldr	r0, [pc, #400]	; (19da4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xc7c>)
   19c12:	2fff      	cmp	r7, #255	; 0xff
   19c14:	d00c      	beq.n	19c30 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xb08>
   19c16:	f000 fce1 	bl	1a5dc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x14b4>
   19c1a:	4607      	mov	r7, r0
   19c1c:	6860      	ldr	r0, [r4, #4]
   19c1e:	e9d0 1246 	ldrd	r1, r2, [r0, #280]	; 0x118
   19c22:	1c49      	adds	r1, r1, #1
   19c24:	f142 0200 	adc.w	r2, r2, #0
   19c28:	e9c0 1246 	strd	r1, r2, [r0, #280]	; 0x118
   19c2c:	b15f      	cbz	r7, 19c46 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xb1e>
   19c2e:	e044      	b.n	19cba <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xb92>
   19c30:	6931      	ldr	r1, [r6, #16]
   19c32:	b121      	cbz	r1, 19c3e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xb16>
   19c34:	6840      	ldr	r0, [r0, #4]
   19c36:	2700      	movs	r7, #0
   19c38:	f880 a33e 	strb.w	sl, [r0, #830]	; 0x33e
   19c3c:	e7ee      	b.n	19c1c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xaf4>
   19c3e:	f000 fccd 	bl	1a5dc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x14b4>
   19c42:	4607      	mov	r7, r0
   19c44:	e7ea      	b.n	19c1c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xaf4>
   19c46:	7930      	ldrb	r0, [r6, #4]
   19c48:	f010 0f04 	tst.w	r0, #4
   19c4c:	d00d      	beq.n	19c6a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xb42>
   19c4e:	6860      	ldr	r0, [r4, #4]
   19c50:	f890 10b7 	ldrb.w	r1, [r0, #183]	; 0xb7
   19c54:	2908      	cmp	r1, #8
   19c56:	bf08      	it	eq
   19c58:	f886 a000 	strbeq.w	sl, [r6]
   19c5c:	f890 10b6 	ldrb.w	r1, [r0, #182]	; 0xb6
   19c60:	292e      	cmp	r1, #46	; 0x2e
   19c62:	bf04      	itt	eq
   19c64:	30a0      	addeq	r0, #160	; 0xa0
   19c66:	f001 faf1 	bleq	1b24c <sym_VLYLJO4IHKZ5KFL533HO4BOMGGZO5JX3I36W5OY>
   19c6a:	7930      	ldrb	r0, [r6, #4]
   19c6c:	f010 0f02 	tst.w	r0, #2
   19c70:	d017      	beq.n	19ca2 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xb7a>
   19c72:	68b0      	ldr	r0, [r6, #8]
   19c74:	78c0      	ldrb	r0, [r0, #3]
   19c76:	282b      	cmp	r0, #43	; 0x2b
   19c78:	d206      	bcs.n	19c88 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xb60>
   19c7a:	494c      	ldr	r1, [pc, #304]	; (19dac <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xc84>)
   19c7c:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
   19c80:	b111      	cbz	r1, 19c88 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xb60>
   19c82:	4848      	ldr	r0, [pc, #288]	; (19da4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xc7c>)
   19c84:	4788      	blx	r1
   19c86:	e00c      	b.n	19ca2 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xb7a>
   19c88:	28ff      	cmp	r0, #255	; 0xff
   19c8a:	d004      	beq.n	19c96 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xb6e>
   19c8c:	f640 01c1 	movw	r1, #2241	; 0x8c1
   19c90:	2031      	movs	r0, #49	; 0x31
   19c92:	f7f7 fe75 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   19c96:	6860      	ldr	r0, [r4, #4]
   19c98:	2131      	movs	r1, #49	; 0x31
   19c9a:	f880 10b5 	strb.w	r1, [r0, #181]	; 0xb5
   19c9e:	f880 533c 	strb.w	r5, [r0, #828]	; 0x33c
   19ca2:	7930      	ldrb	r0, [r6, #4]
   19ca4:	f010 0f10 	tst.w	r0, #16
   19ca8:	d007      	beq.n	19cba <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xb92>
   19caa:	6860      	ldr	r0, [r4, #4]
   19cac:	f890 10b6 	ldrb.w	r1, [r0, #182]	; 0xb6
   19cb0:	290c      	cmp	r1, #12
   19cb2:	bf04      	itt	eq
   19cb4:	210d      	moveq	r1, #13
   19cb6:	f880 10b6 	strbeq.w	r1, [r0, #182]	; 0xb6
   19cba:	78f0      	ldrb	r0, [r6, #3]
   19cbc:	f010 0f08 	tst.w	r0, #8
   19cc0:	d018      	beq.n	19cf4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xbcc>
   19cc2:	6860      	ldr	r0, [r4, #4]
   19cc4:	2301      	movs	r3, #1
   19cc6:	2105      	movs	r1, #5
   19cc8:	f890 20b6 	ldrb.w	r2, [r0, #182]	; 0xb6
   19ccc:	30a0      	adds	r0, #160	; 0xa0
   19cce:	f006 f9fe 	bl	200ce <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   19cd2:	2800      	cmp	r0, #0
   19cd4:	bf18      	it	ne
   19cd6:	2708      	movne	r7, #8
   19cd8:	d10c      	bne.n	19cf4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xbcc>
   19cda:	4669      	mov	r1, sp
   19cdc:	9500      	str	r5, [sp, #0]
   19cde:	f7f9 f8f1 	bl	12ec4 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
   19ce2:	9800      	ldr	r0, [sp, #0]
   19ce4:	b130      	cbz	r0, 19cf4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xbcc>
   19ce6:	f100 0108 	add.w	r1, r0, #8
   19cea:	700d      	strb	r5, [r1, #0]
   19cec:	2227      	movs	r2, #39	; 0x27
   19cee:	6861      	ldr	r1, [r4, #4]
   19cf0:	f7fa fc2c 	bl	1454c <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
   19cf4:	6930      	ldr	r0, [r6, #16]
   19cf6:	ea47 0909 	orr.w	r9, r7, r9
   19cfa:	b3e8      	cbz	r0, 19d78 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xc50>
   19cfc:	9500      	str	r5, [sp, #0]
   19cfe:	9501      	str	r5, [sp, #4]
   19d00:	9502      	str	r5, [sp, #8]
   19d02:	9503      	str	r5, [sp, #12]
   19d04:	9504      	str	r5, [sp, #16]
   19d06:	6860      	ldr	r0, [r4, #4]
   19d08:	f890 006f 	ldrb.w	r0, [r0, #111]	; 0x6f
   19d0c:	f003 f834 	bl	1cd78 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   19d10:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   19d14:	f500 70fa 	add.w	r0, r0, #500	; 0x1f4
   19d18:	fbb0 f7f1 	udiv	r7, r0, r1
   19d1c:	6860      	ldr	r0, [r4, #4]
   19d1e:	f890 006f 	ldrb.w	r0, [r0, #111]	; 0x6f
   19d22:	f002 ffdb 	bl	1ccdc <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
   19d26:	4438      	add	r0, r7
   19d28:	f8ad 0006 	strh.w	r0, [sp, #6]
   19d2c:	6860      	ldr	r0, [r4, #4]
   19d2e:	8801      	ldrh	r1, [r0, #0]
   19d30:	f8ad 1000 	strh.w	r1, [sp]
   19d34:	f8b0 10ac 	ldrh.w	r1, [r0, #172]	; 0xac
   19d38:	f8ad 1004 	strh.w	r1, [sp, #4]
   19d3c:	6940      	ldr	r0, [r0, #20]
   19d3e:	f006 f99f 	bl	20080 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
   19d42:	f8ad 0002 	strh.w	r0, [sp, #2]
   19d46:	6860      	ldr	r0, [r4, #4]
   19d48:	f890 033e 	ldrb.w	r0, [r0, #830]	; 0x33e
   19d4c:	b130      	cbz	r0, 19d5c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xc34>
   19d4e:	68f0      	ldr	r0, [r6, #12]
   19d50:	1cc1      	adds	r1, r0, #3
   19d52:	9103      	str	r1, [sp, #12]
   19d54:	f006 fd77 	bl	20846 <sym_SNSRF2OD5RKCBMNHGEBC4PQLTEZDLFXABEHWJNQ>
   19d58:	f88d 0010 	strb.w	r0, [sp, #16]
   19d5c:	6860      	ldr	r0, [r4, #4]
   19d5e:	f890 033d 	ldrb.w	r0, [r0, #829]	; 0x33d
   19d62:	f88d 0008 	strb.w	r0, [sp, #8]
   19d66:	6931      	ldr	r1, [r6, #16]
   19d68:	4668      	mov	r0, sp
   19d6a:	4788      	blx	r1
   19d6c:	6860      	ldr	r0, [r4, #4]
   19d6e:	f880 533e 	strb.w	r5, [r0, #830]	; 0x33e
   19d72:	f880 533d 	strb.w	r5, [r0, #829]	; 0x33d
   19d76:	e000      	b.n	19d7a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xc52>
   19d78:	e029      	b.n	19dce <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xca6>
   19d7a:	9903      	ldr	r1, [sp, #12]
   19d7c:	b339      	cbz	r1, 19dce <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xca6>
   19d7e:	f890 133c 	ldrb.w	r1, [r0, #828]	; 0x33c
   19d82:	bb21      	cbnz	r1, 19dce <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xca6>
   19d84:	f890 10b5 	ldrb.w	r1, [r0, #181]	; 0xb5
   19d88:	2931      	cmp	r1, #49	; 0x31
   19d8a:	d020      	beq.n	19dce <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xca6>
   19d8c:	f89d 1010 	ldrb.w	r1, [sp, #16]
   19d90:	9a03      	ldr	r2, [sp, #12]
   19d92:	b1e1      	cbz	r1, 19dce <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xca6>
   19d94:	7813      	ldrb	r3, [r2, #0]
   19d96:	2bff      	cmp	r3, #255	; 0xff
   19d98:	d00e      	beq.n	19db8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xc90>
   19d9a:	2b07      	cmp	r3, #7
   19d9c:	bf04      	itt	eq
   19d9e:	2902      	cmpeq	r1, #2
   19da0:	7851      	ldrbeq	r1, [r2, #1]
   19da2:	e005      	b.n	19db0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xc88>
   19da4:	200001b8 	.word	0x200001b8
   19da8:	200001c0 	.word	0x200001c0
   19dac:	2000026c 	.word	0x2000026c
   19db0:	bf08      	it	eq
   19db2:	29ff      	cmpeq	r1, #255	; 0xff
   19db4:	d002      	beq.n	19dbc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xc94>
   19db6:	e00a      	b.n	19dce <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xca6>
   19db8:	291b      	cmp	r1, #27
   19dba:	d808      	bhi.n	19dce <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xca6>
   19dbc:	f880 a33c 	strb.w	sl, [r0, #828]	; 0x33c
   19dc0:	9903      	ldr	r1, [sp, #12]
   19dc2:	f8c0 1340 	str.w	r1, [r0, #832]	; 0x340
   19dc6:	f89d 1010 	ldrb.w	r1, [sp, #16]
   19dca:	f880 133f 	strb.w	r1, [r0, #831]	; 0x33f
   19dce:	4648      	mov	r0, r9
   19dd0:	f7ff f9da 	bl	19188 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x60>
   19dd4:	6867      	ldr	r7, [r4, #4]
   19dd6:	f8b7 02a0 	ldrh.w	r0, [r7, #672]	; 0x2a0
   19dda:	1c40      	adds	r0, r0, #1
   19ddc:	f8a7 02a0 	strh.w	r0, [r7, #672]	; 0x2a0
   19de0:	f897 02a4 	ldrb.w	r0, [r7, #676]	; 0x2a4
   19de4:	b130      	cbz	r0, 19df4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xccc>
   19de6:	f7f9 f909 	bl	12ffc <sym_ZWLSMB33C6NPFOBZGVPV4PN4UKQGSPLLR4WLDFI>
   19dea:	2800      	cmp	r0, #0
   19dec:	bf18      	it	ne
   19dee:	f8a7 52a0 	strhne.w	r5, [r7, #672]	; 0x2a0
   19df2:	e018      	b.n	19e26 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xcfe>
   19df4:	f7f8 fe48 	bl	12a88 <sym_Q3RLGT2MQM6S4H2ODVJHPDU44HGSYVXJV7676ZY>
   19df8:	b130      	cbz	r0, 19e08 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xce0>
   19dfa:	6860      	ldr	r0, [r4, #4]
   19dfc:	f890 02a6 	ldrb.w	r0, [r0, #678]	; 0x2a6
   19e00:	2800      	cmp	r0, #0
   19e02:	bf08      	it	eq
   19e04:	f8a7 52a0 	strheq.w	r5, [r7, #672]	; 0x2a0
   19e08:	f7f8 fe38 	bl	12a7c <sym_IHWHOAENEU2EYZP2UWQTUC6SSXGS5NNQSIFSEAQ>
   19e0c:	b158      	cbz	r0, 19e26 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xcfe>
   19e0e:	f897 02ac 	ldrb.w	r0, [r7, #684]	; 0x2ac
   19e12:	1c40      	adds	r0, r0, #1
   19e14:	b2c0      	uxtb	r0, r0
   19e16:	f887 02ac 	strb.w	r0, [r7, #684]	; 0x2ac
   19e1a:	2802      	cmp	r0, #2
   19e1c:	bf84      	itt	hi
   19e1e:	f8a7 52a0 	strhhi.w	r5, [r7, #672]	; 0x2a0
   19e22:	f887 52ac 	strbhi.w	r5, [r7, #684]	; 0x2ac
   19e26:	6860      	ldr	r0, [r4, #4]
   19e28:	2301      	movs	r3, #1
   19e2a:	2100      	movs	r1, #0
   19e2c:	f890 20b6 	ldrb.w	r2, [r0, #182]	; 0xb6
   19e30:	30a0      	adds	r0, #160	; 0xa0
   19e32:	f006 f94c 	bl	200ce <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   19e36:	b920      	cbnz	r0, 19e42 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xd1a>
   19e38:	6860      	ldr	r0, [r4, #4]
   19e3a:	f890 00b6 	ldrb.w	r0, [r0, #182]	; 0xb6
   19e3e:	280d      	cmp	r0, #13
   19e40:	d15c      	bne.n	19efc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xdd4>
   19e42:	6860      	ldr	r0, [r4, #4]
   19e44:	2301      	movs	r3, #1
   19e46:	2100      	movs	r1, #0
   19e48:	f890 20b5 	ldrb.w	r2, [r0, #181]	; 0xb5
   19e4c:	30a0      	adds	r0, #160	; 0xa0
   19e4e:	f006 f93e 	bl	200ce <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   19e52:	b3e0      	cbz	r0, 19ece <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xda6>
   19e54:	6860      	ldr	r0, [r4, #4]
   19e56:	2301      	movs	r3, #1
   19e58:	2100      	movs	r1, #0
   19e5a:	f890 20b7 	ldrb.w	r2, [r0, #183]	; 0xb7
   19e5e:	30a0      	adds	r0, #160	; 0xa0
   19e60:	f006 f935 	bl	200ce <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   19e64:	b398      	cbz	r0, 19ece <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xda6>
   19e66:	6860      	ldr	r0, [r4, #4]
   19e68:	f890 10b9 	ldrb.w	r1, [r0, #185]	; 0xb9
   19e6c:	2902      	cmp	r1, #2
   19e6e:	bf04      	itt	eq
   19e70:	f890 02ac 	ldrbeq.w	r0, [r0, #684]	; 0x2ac
   19e74:	2800      	cmpeq	r0, #0
   19e76:	d141      	bne.n	19efc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xdd4>
   19e78:	9805      	ldr	r0, [sp, #20]
   19e7a:	f005 fc18 	bl	1f6ae <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>
   19e7e:	b330      	cbz	r0, 19ece <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xda6>
   19e80:	6861      	ldr	r1, [r4, #4]
   19e82:	f891 013c 	ldrb.w	r0, [r1, #316]	; 0x13c
   19e86:	28fe      	cmp	r0, #254	; 0xfe
   19e88:	d138      	bne.n	19efc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xdd4>
   19e8a:	f8b1 029a 	ldrh.w	r0, [r1, #666]	; 0x29a
   19e8e:	2801      	cmp	r0, #1
   19e90:	d934      	bls.n	19efc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xdd4>
   19e92:	f881 a2a2 	strb.w	sl, [r1, #674]	; 0x2a2
   19e96:	f8b1 00e8 	ldrh.w	r0, [r1, #232]	; 0xe8
   19e9a:	f8b1 20e6 	ldrh.w	r2, [r1, #230]	; 0xe6
   19e9e:	1e83      	subs	r3, r0, #2
   19ea0:	429a      	cmp	r2, r3
   19ea2:	bfaf      	iteee	ge
   19ea4:	2001      	movge	r0, #1
   19ea6:	1a80      	sublt	r0, r0, r2
   19ea8:	1e40      	sublt	r0, r0, #1
   19eaa:	b280      	uxthlt	r0, r0
   19eac:	f8b1 22a0 	ldrh.w	r2, [r1, #672]	; 0x2a0
   19eb0:	88f3      	ldrh	r3, [r6, #6]
   19eb2:	429a      	cmp	r2, r3
   19eb4:	bf2f      	iteee	cs
   19eb6:	2201      	movcs	r2, #1
   19eb8:	1a9a      	subcc	r2, r3, r2
   19eba:	1c52      	addcc	r2, r2, #1
   19ebc:	b292      	uxthcc	r2, r2
   19ebe:	4290      	cmp	r0, r2
   19ec0:	bf88      	it	hi
   19ec2:	4610      	movhi	r0, r2
   19ec4:	2801      	cmp	r0, #1
   19ec6:	bf08      	it	eq
   19ec8:	f881 52a2 	strbeq.w	r5, [r1, #674]	; 0x2a2
   19ecc:	e000      	b.n	19ed0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xda8>
   19ece:	e015      	b.n	19efc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xdd4>
   19ed0:	f891 207b 	ldrb.w	r2, [r1, #123]	; 0x7b
   19ed4:	f88d 2000 	strb.w	r2, [sp]
   19ed8:	f89d 2000 	ldrb.w	r2, [sp]
   19edc:	b992      	cbnz	r2, 19f04 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xddc>
   19ede:	6f4a      	ldr	r2, [r1, #116]	; 0x74
   19ee0:	b182      	cbz	r2, 19f04 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xddc>
   19ee2:	f8b1 20e2 	ldrh.w	r2, [r1, #226]	; 0xe2
   19ee6:	f8b1 10ac 	ldrh.w	r1, [r1, #172]	; 0xac
   19eea:	1a51      	subs	r1, r2, r1
   19eec:	b209      	sxth	r1, r1
   19eee:	2900      	cmp	r1, #0
   19ef0:	dd08      	ble.n	19f04 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xddc>
   19ef2:	4281      	cmp	r1, r0
   19ef4:	bfd8      	it	le
   19ef6:	4608      	movle	r0, r1
   19ef8:	b280      	uxth	r0, r0
   19efa:	e003      	b.n	19f04 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xddc>
   19efc:	6861      	ldr	r1, [r4, #4]
   19efe:	2001      	movs	r0, #1
   19f00:	f881 52a2 	strb.w	r5, [r1, #674]	; 0x2a2
   19f04:	78b1      	ldrb	r1, [r6, #2]
   19f06:	2900      	cmp	r1, #0
   19f08:	bf18      	it	ne
   19f0a:	2801      	cmpne	r0, #1
   19f0c:	bf9c      	itt	ls
   19f0e:	6861      	ldrls	r1, [r4, #4]
   19f10:	f881 52a6 	strbls.w	r5, [r1, #678]	; 0x2a6
   19f14:	d903      	bls.n	19f1e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xdf6>
   19f16:	6860      	ldr	r0, [r4, #4]
   19f18:	f880 a2a6 	strb.w	sl, [r0, #678]	; 0x2a6
   19f1c:	2001      	movs	r0, #1
   19f1e:	6861      	ldr	r1, [r4, #4]
   19f20:	f8b1 20ac 	ldrh.w	r2, [r1, #172]	; 0xac
   19f24:	4410      	add	r0, r2
   19f26:	b280      	uxth	r0, r0
   19f28:	f8a1 029c 	strh.w	r0, [r1, #668]	; 0x29c
   19f2c:	f891 30b9 	ldrb.w	r3, [r1, #185]	; 0xb9
   19f30:	2b00      	cmp	r3, #0
   19f32:	bf18      	it	ne
   19f34:	2b01      	cmpne	r3, #1
   19f36:	d009      	beq.n	19f4c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xe24>
   19f38:	2b02      	cmp	r3, #2
   19f3a:	bf18      	it	ne
   19f3c:	2b03      	cmpne	r3, #3
   19f3e:	d008      	beq.n	19f52 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xe2a>
   19f40:	f640 4159 	movw	r1, #3161	; 0xc59
   19f44:	f04f 0031 	mov.w	r0, #49	; 0x31
   19f48:	f7f7 fd1a 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   19f4c:	f8a1 0298 	strh.w	r0, [r1, #664]	; 0x298
   19f50:	e053      	b.n	19ffa <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xed2>
   19f52:	f891 30b7 	ldrb.w	r3, [r1, #183]	; 0xb7
   19f56:	2b09      	cmp	r3, #9
   19f58:	d022      	beq.n	19fa0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xe78>
   19f5a:	f8b1 00e6 	ldrh.w	r0, [r1, #230]	; 0xe6
   19f5e:	f8b1 20e8 	ldrh.w	r2, [r1, #232]	; 0xe8
   19f62:	2700      	movs	r7, #0
   19f64:	1c83      	adds	r3, r0, #2
   19f66:	429a      	cmp	r2, r3
   19f68:	d306      	bcc.n	19f78 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xe50>
   19f6a:	1a10      	subs	r0, r2, r0
   19f6c:	1e80      	subs	r0, r0, #2
   19f6e:	0407      	lsls	r7, r0, #16
   19f70:	0c3f      	lsrs	r7, r7, #16
   19f72:	bf1c      	itt	ne
   19f74:	1e78      	subne	r0, r7, #1
   19f76:	b287      	uxthne	r7, r0
   19f78:	f891 00e4 	ldrb.w	r0, [r1, #228]	; 0xe4
   19f7c:	b158      	cbz	r0, 19f96 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xe6e>
   19f7e:	f891 20b5 	ldrb.w	r2, [r1, #181]	; 0xb5
   19f82:	f101 00a0 	add.w	r0, r1, #160	; 0xa0
   19f86:	2301      	movs	r3, #1
   19f88:	2109      	movs	r1, #9
   19f8a:	f006 f8a0 	bl	200ce <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   19f8e:	2800      	cmp	r0, #0
   19f90:	bf08      	it	eq
   19f92:	2700      	moveq	r7, #0
   19f94:	d02b      	beq.n	19fee <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xec6>
   19f96:	6860      	ldr	r0, [r4, #4]
   19f98:	f890 10bb 	ldrb.w	r1, [r0, #187]	; 0xbb
   19f9c:	b999      	cbnz	r1, 19fc6 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xe9e>
   19f9e:	e00a      	b.n	19fb6 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xe8e>
   19fa0:	f8b1 30e6 	ldrh.w	r3, [r1, #230]	; 0xe6
   19fa4:	2b03      	cmp	r3, #3
   19fa6:	d3d1      	bcc.n	19f4c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xe24>
   19fa8:	f8b1 00e8 	ldrh.w	r0, [r1, #232]	; 0xe8
   19fac:	4410      	add	r0, r2
   19fae:	1c40      	adds	r0, r0, #1
   19fb0:	f8a1 0298 	strh.w	r0, [r1, #664]	; 0x298
   19fb4:	e021      	b.n	19ffa <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xed2>
   19fb6:	f890 20b6 	ldrb.w	r2, [r0, #182]	; 0xb6
   19fba:	2301      	movs	r3, #1
   19fbc:	2106      	movs	r1, #6
   19fbe:	30a0      	adds	r0, #160	; 0xa0
   19fc0:	f006 f885 	bl	200ce <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   19fc4:	b178      	cbz	r0, 19fe6 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xebe>
   19fc6:	6862      	ldr	r2, [r4, #4]
   19fc8:	2000      	movs	r0, #0
   19fca:	f8d2 10dc 	ldr.w	r1, [r2, #220]	; 0xdc
   19fce:	f8d2 20d8 	ldr.w	r2, [r2, #216]	; 0xd8
   19fd2:	1c93      	adds	r3, r2, #2
   19fd4:	4299      	cmp	r1, r3
   19fd6:	d303      	bcc.n	19fe0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xeb8>
   19fd8:	1a88      	subs	r0, r1, r2
   19fda:	1e80      	subs	r0, r0, #2
   19fdc:	bf18      	it	ne
   19fde:	1e40      	subne	r0, r0, #1
   19fe0:	42b8      	cmp	r0, r7
   19fe2:	bf38      	it	cc
   19fe4:	b287      	uxthcc	r7, r0
   19fe6:	2f00      	cmp	r7, #0
   19fe8:	bf1c      	itt	ne
   19fea:	1e78      	subne	r0, r7, #1
   19fec:	b287      	uxthne	r7, r0
   19fee:	6860      	ldr	r0, [r4, #4]
   19ff0:	f8b0 129c 	ldrh.w	r1, [r0, #668]	; 0x29c
   19ff4:	4439      	add	r1, r7
   19ff6:	f8a0 1298 	strh.w	r1, [r0, #664]	; 0x298
   19ffa:	7930      	ldrb	r0, [r6, #4]
   19ffc:	f3c0 1080 	ubfx	r0, r0, #6, #1
   1a000:	2800      	cmp	r0, #0
   1a002:	6860      	ldr	r0, [r4, #4]
   1a004:	bf18      	it	ne
   1a006:	f8a0 52ae 	strhne.w	r5, [r0, #686]	; 0x2ae
   1a00a:	d106      	bne.n	1a01a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xef2>
   1a00c:	f8b0 12ae 	ldrh.w	r1, [r0, #686]	; 0x2ae
   1a010:	f8b0 229e 	ldrh.w	r2, [r0, #670]	; 0x29e
   1a014:	4411      	add	r1, r2
   1a016:	f8a0 12ae 	strh.w	r1, [r0, #686]	; 0x2ae
   1a01a:	6860      	ldr	r0, [r4, #4]
   1a01c:	f890 1148 	ldrb.w	r1, [r0, #328]	; 0x148
   1a020:	f88d 1000 	strb.w	r1, [sp]
   1a024:	f89d 1000 	ldrb.w	r1, [sp]
   1a028:	b939      	cbnz	r1, 1a03a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xf12>
   1a02a:	f890 20b7 	ldrb.w	r2, [r0, #183]	; 0xb7
   1a02e:	2301      	movs	r3, #1
   1a030:	4619      	mov	r1, r3
   1a032:	30a0      	adds	r0, #160	; 0xa0
   1a034:	f006 f84b 	bl	200ce <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   1a038:	b138      	cbz	r0, 1a04a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xf22>
   1a03a:	6860      	ldr	r0, [r4, #4]
   1a03c:	f8b0 10ea 	ldrh.w	r1, [r0, #234]	; 0xea
   1a040:	f8b0 229e 	ldrh.w	r2, [r0, #670]	; 0x29e
   1a044:	4411      	add	r1, r2
   1a046:	f8a0 10ea 	strh.w	r1, [r0, #234]	; 0xea
   1a04a:	6861      	ldr	r1, [r4, #4]
   1a04c:	f891 00f0 	ldrb.w	r0, [r1, #240]	; 0xf0
   1a050:	b130      	cbz	r0, 1a060 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xf38>
   1a052:	f8b1 20ec 	ldrh.w	r2, [r1, #236]	; 0xec
   1a056:	f8b1 329e 	ldrh.w	r3, [r1, #670]	; 0x29e
   1a05a:	441a      	add	r2, r3
   1a05c:	f8a1 20ec 	strh.w	r2, [r1, #236]	; 0xec
   1a060:	f991 20f4 	ldrsb.w	r2, [r1, #244]	; 0xf4
   1a064:	2a00      	cmp	r2, #0
   1a066:	dd06      	ble.n	1a076 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xf4e>
   1a068:	f8b1 30f2 	ldrh.w	r3, [r1, #242]	; 0xf2
   1a06c:	f8b1 c29e 	ldrh.w	ip, [r1, #670]	; 0x29e
   1a070:	4463      	add	r3, ip
   1a072:	f8a1 30f2 	strh.w	r3, [r1, #242]	; 0xf2
   1a076:	273d      	movs	r7, #61	; 0x3d
   1a078:	f1bb 0f00 	cmp.w	fp, #0
   1a07c:	bf18      	it	ne
   1a07e:	f881 70d5 	strbne.w	r7, [r1, #213]	; 0xd5
   1a082:	d11d      	bne.n	1a0c0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xf98>
   1a084:	7833      	ldrb	r3, [r6, #0]
   1a086:	2b02      	cmp	r3, #2
   1a088:	d014      	beq.n	1a0b4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xf8c>
   1a08a:	2b01      	cmp	r3, #1
   1a08c:	bf08      	it	eq
   1a08e:	f891 00b8 	ldrbeq.w	r0, [r1, #184]	; 0xb8
   1a092:	d054      	beq.n	1a13e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1016>
   1a094:	f1b9 0f00 	cmp.w	r9, #0
   1a098:	d034      	beq.n	1a104 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xfdc>
   1a09a:	f101 00cc 	add.w	r0, r1, #204	; 0xcc
   1a09e:	220a      	movs	r2, #10
   1a0a0:	f7fa fa54 	bl	1454c <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
   1a0a4:	f019 0f10 	tst.w	r9, #16
   1a0a8:	d010      	beq.n	1a0cc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xfa4>
   1a0aa:	6861      	ldr	r1, [r4, #4]
   1a0ac:	201e      	movs	r0, #30
   1a0ae:	f881 00d5 	strb.w	r0, [r1, #213]	; 0xd5
   1a0b2:	e057      	b.n	1a164 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x103c>
   1a0b4:	f891 013e 	ldrb.w	r0, [r1, #318]	; 0x13e
   1a0b8:	2806      	cmp	r0, #6
   1a0ba:	bf18      	it	ne
   1a0bc:	2016      	movne	r0, #22
   1a0be:	e03e      	b.n	1a13e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1016>
   1a0c0:	f101 00cc 	add.w	r0, r1, #204	; 0xcc
   1a0c4:	220a      	movs	r2, #10
   1a0c6:	f7fa fa41 	bl	1454c <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
   1a0ca:	e04b      	b.n	1a164 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x103c>
   1a0cc:	f019 0f08 	tst.w	r9, #8
   1a0d0:	bf1c      	itt	ne
   1a0d2:	6860      	ldrne	r0, [r4, #4]
   1a0d4:	f880 70d5 	strbne.w	r7, [r0, #213]	; 0xd5
   1a0d8:	d144      	bne.n	1a164 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x103c>
   1a0da:	f019 0f20 	tst.w	r9, #32
   1a0de:	d004      	beq.n	1a0ea <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xfc2>
   1a0e0:	6861      	ldr	r1, [r4, #4]
   1a0e2:	2023      	movs	r0, #35	; 0x23
   1a0e4:	f881 00d5 	strb.w	r0, [r1, #213]	; 0xd5
   1a0e8:	e03c      	b.n	1a164 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x103c>
   1a0ea:	f019 0f03 	tst.w	r9, #3
   1a0ee:	d004      	beq.n	1a0fa <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xfd2>
   1a0f0:	6861      	ldr	r1, [r4, #4]
   1a0f2:	202a      	movs	r0, #42	; 0x2a
   1a0f4:	f881 00d5 	strb.w	r0, [r1, #213]	; 0xd5
   1a0f8:	e034      	b.n	1a164 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x103c>
   1a0fa:	f640 51e9 	movw	r1, #3561	; 0xde9
   1a0fe:	2031      	movs	r0, #49	; 0x31
   1a100:	f7f7 fc3e 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1a104:	b128      	cbz	r0, 1a112 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xfea>
   1a106:	f8b1 00ec 	ldrh.w	r0, [r1, #236]	; 0xec
   1a10a:	f8b1 30ee 	ldrh.w	r3, [r1, #238]	; 0xee
   1a10e:	4298      	cmp	r0, r3
   1a110:	d214      	bcs.n	1a13c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1014>
   1a112:	2a00      	cmp	r2, #0
   1a114:	dd05      	ble.n	1a122 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xffa>
   1a116:	f8b1 00f2 	ldrh.w	r0, [r1, #242]	; 0xf2
   1a11a:	f8b1 20ee 	ldrh.w	r2, [r1, #238]	; 0xee
   1a11e:	4290      	cmp	r0, r2
   1a120:	d20c      	bcs.n	1a13c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1014>
   1a122:	f8b1 20ea 	ldrh.w	r2, [r1, #234]	; 0xea
   1a126:	f8b1 00e8 	ldrh.w	r0, [r1, #232]	; 0xe8
   1a12a:	4282      	cmp	r2, r0
   1a12c:	d30a      	bcc.n	1a144 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x101c>
   1a12e:	f891 2148 	ldrb.w	r2, [r1, #328]	; 0x148
   1a132:	f88d 2000 	strb.w	r2, [sp]
   1a136:	f89d 2000 	ldrb.w	r2, [sp]
   1a13a:	b11a      	cbz	r2, 1a144 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x101c>
   1a13c:	2022      	movs	r0, #34	; 0x22
   1a13e:	f881 00d5 	strb.w	r0, [r1, #213]	; 0xd5
   1a142:	e7bd      	b.n	1a0c0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xf98>
   1a144:	f891 20b9 	ldrb.w	r2, [r1, #185]	; 0xb9
   1a148:	b132      	cbz	r2, 1a158 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1030>
   1a14a:	f8b1 20e6 	ldrh.w	r2, [r1, #230]	; 0xe6
   1a14e:	4282      	cmp	r2, r0
   1a150:	bf28      	it	cs
   1a152:	2008      	movcs	r0, #8
   1a154:	d2f3      	bcs.n	1a13e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1016>
   1a156:	e005      	b.n	1a164 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x103c>
   1a158:	f8b1 00e6 	ldrh.w	r0, [r1, #230]	; 0xe6
   1a15c:	2806      	cmp	r0, #6
   1a15e:	bf28      	it	cs
   1a160:	203e      	movcs	r0, #62	; 0x3e
   1a162:	d2ec      	bcs.n	1a13e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1016>
   1a164:	6860      	ldr	r0, [r4, #4]
   1a166:	f890 10d4 	ldrb.w	r1, [r0, #212]	; 0xd4
   1a16a:	f88d 1000 	strb.w	r1, [sp]
   1a16e:	f89d 1000 	ldrb.w	r1, [sp]
   1a172:	b171      	cbz	r1, 1a192 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x106a>
   1a174:	f880 50b5 	strb.w	r5, [r0, #181]	; 0xb5
   1a178:	f880 50b6 	strb.w	r5, [r0, #182]	; 0xb6
   1a17c:	f880 50b9 	strb.w	r5, [r0, #185]	; 0xb9
   1a180:	f890 12a3 	ldrb.w	r1, [r0, #675]	; 0x2a3
   1a184:	2900      	cmp	r1, #0
   1a186:	bf0c      	ite	eq
   1a188:	2103      	moveq	r1, #3
   1a18a:	2102      	movne	r1, #2
   1a18c:	f7fd ff4c 	bl	18028 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
   1a190:	e002      	b.n	1a198 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1070>
   1a192:	2100      	movs	r1, #0
   1a194:	f7fd ff48 	bl	18028 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
   1a198:	6860      	ldr	r0, [r4, #4]
   1a19a:	f880 52a3 	strb.w	r5, [r0, #675]	; 0x2a3
   1a19e:	b007      	add	sp, #28
   1a1a0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a1a4:	f7f8 bbac 	b.w	12900 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>
   1a1a8:	4a0c      	ldr	r2, [pc, #48]	; (1a1dc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x10b4>)
   1a1aa:	b510      	push	{r4, lr}
   1a1ac:	6852      	ldr	r2, [r2, #4]
   1a1ae:	f892 313c 	ldrb.w	r3, [r2, #316]	; 0x13c
   1a1b2:	2bfe      	cmp	r3, #254	; 0xfe
   1a1b4:	d004      	beq.n	1a1c0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1098>
   1a1b6:	f640 31ec 	movw	r1, #3052	; 0xbec
   1a1ba:	2031      	movs	r0, #49	; 0x31
   1a1bc:	f7f7 fbe0 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1a1c0:	f882 013c 	strb.w	r0, [r2, #316]	; 0x13c
   1a1c4:	2000      	movs	r0, #0
   1a1c6:	2901      	cmp	r1, #1
   1a1c8:	bf04      	itt	eq
   1a1ca:	f8a2 00f2 	strheq.w	r0, [r2, #242]	; 0xf2
   1a1ce:	bd10      	popeq	{r4, pc}
   1a1d0:	f8a2 00ec 	strh.w	r0, [r2, #236]	; 0xec
   1a1d4:	2001      	movs	r0, #1
   1a1d6:	f882 00f0 	strb.w	r0, [r2, #240]	; 0xf0
   1a1da:	bd10      	pop	{r4, pc}
   1a1dc:	200001b8 	.word	0x200001b8
   1a1e0:	b570      	push	{r4, r5, r6, lr}
   1a1e2:	4b2c      	ldr	r3, [pc, #176]	; (1a294 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x116c>)
   1a1e4:	4602      	mov	r2, r0
   1a1e6:	8898      	ldrh	r0, [r3, #4]
   1a1e8:	4310      	orrs	r0, r2
   1a1ea:	8098      	strh	r0, [r3, #4]
   1a1ec:	f103 0018 	add.w	r0, r3, #24
   1a1f0:	2a40      	cmp	r2, #64	; 0x40
   1a1f2:	6840      	ldr	r0, [r0, #4]
   1a1f4:	d011      	beq.n	1a21a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x10f2>
   1a1f6:	f012 0f02 	tst.w	r2, #2
   1a1fa:	f04f 0400 	mov.w	r4, #0
   1a1fe:	f04f 0c01 	mov.w	ip, #1
   1a202:	f002 0501 	and.w	r5, r2, #1
   1a206:	d00d      	beq.n	1a224 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x10fc>
   1a208:	2d00      	cmp	r5, #0
   1a20a:	bf08      	it	eq
   1a20c:	6099      	streq	r1, [r3, #8]
   1a20e:	d026      	beq.n	1a25e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1136>
   1a210:	f640 613f 	movw	r1, #3647	; 0xe3f
   1a214:	2031      	movs	r0, #49	; 0x31
   1a216:	f7f7 fbb3 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1a21a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1a21e:	2104      	movs	r1, #4
   1a220:	f7fd bf02 	b.w	18028 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
   1a224:	b1b5      	cbz	r5, 1a254 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x112c>
   1a226:	60d9      	str	r1, [r3, #12]
   1a228:	78c9      	ldrb	r1, [r1, #3]
   1a22a:	2906      	cmp	r1, #6
   1a22c:	d009      	beq.n	1a242 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x111a>
   1a22e:	290b      	cmp	r1, #11
   1a230:	bf01      	itttt	eq
   1a232:	f890 10b6 	ldrbeq.w	r1, [r0, #182]	; 0xb6
   1a236:	2914      	cmpeq	r1, #20
   1a238:	f880 40ba 	strbeq.w	r4, [r0, #186]	; 0xba
   1a23c:	f880 c0f6 	strbeq.w	ip, [r0, #246]	; 0xf6
   1a240:	e008      	b.n	1a254 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x112c>
   1a242:	f890 10b6 	ldrb.w	r1, [r0, #182]	; 0xb6
   1a246:	291a      	cmp	r1, #26
   1a248:	d104      	bne.n	1a254 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x112c>
   1a24a:	2100      	movs	r1, #0
   1a24c:	e9c0 1144 	strd	r1, r1, [r0, #272]	; 0x110
   1a250:	f880 c0ba 	strb.w	ip, [r0, #186]	; 0xba
   1a254:	f012 0f02 	tst.w	r2, #2
   1a258:	bf18      	it	ne
   1a25a:	6899      	ldrne	r1, [r3, #8]
   1a25c:	d013      	beq.n	1a286 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x115e>
   1a25e:	78c9      	ldrb	r1, [r1, #3]
   1a260:	2905      	cmp	r1, #5
   1a262:	d007      	beq.n	1a274 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x114c>
   1a264:	290b      	cmp	r1, #11
   1a266:	bf02      	ittt	eq
   1a268:	f890 10b6 	ldrbeq.w	r1, [r0, #182]	; 0xb6
   1a26c:	2913      	cmpeq	r1, #19
   1a26e:	f880 40bb 	strbeq.w	r4, [r0, #187]	; 0xbb
   1a272:	e008      	b.n	1a286 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x115e>
   1a274:	f890 10b6 	ldrb.w	r1, [r0, #182]	; 0xb6
   1a278:	2918      	cmp	r1, #24
   1a27a:	d104      	bne.n	1a286 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x115e>
   1a27c:	2100      	movs	r1, #0
   1a27e:	e9c0 1146 	strd	r1, r1, [r0, #280]	; 0x118
   1a282:	f880 c0bb 	strb.w	ip, [r0, #187]	; 0xbb
   1a286:	f012 0f20 	tst.w	r2, #32
   1a28a:	bf1c      	itt	ne
   1a28c:	2008      	movne	r0, #8
   1a28e:	70d8      	strbne	r0, [r3, #3]
   1a290:	bd70      	pop	{r4, r5, r6, pc}
   1a292:	0000      	.short	0x0000
   1a294:	200001a0 	.word	0x200001a0
   1a298:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a29c:	4c2c      	ldr	r4, [pc, #176]	; (1a350 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1228>)
   1a29e:	2501      	movs	r5, #1
   1a2a0:	6862      	ldr	r2, [r4, #4]
   1a2a2:	f892 1346 	ldrb.w	r1, [r2, #838]	; 0x346
   1a2a6:	2900      	cmp	r1, #0
   1a2a8:	bf14      	ite	ne
   1a2aa:	2701      	movne	r7, #1
   1a2ac:	2700      	moveq	r7, #0
   1a2ae:	f892 0347 	ldrb.w	r0, [r2, #839]	; 0x347
   1a2b2:	2800      	cmp	r0, #0
   1a2b4:	bf14      	ite	ne
   1a2b6:	2601      	movne	r6, #1
   1a2b8:	2600      	moveq	r6, #0
   1a2ba:	2f00      	cmp	r7, #0
   1a2bc:	bf08      	it	eq
   1a2be:	f892 106e 	ldrbeq.w	r1, [r2, #110]	; 0x6e
   1a2c2:	2e00      	cmp	r6, #0
   1a2c4:	bf08      	it	eq
   1a2c6:	f892 006f 	ldrbeq.w	r0, [r2, #111]	; 0x6f
   1a2ca:	f102 0366 	add.w	r3, r2, #102	; 0x66
   1a2ce:	f882 106e 	strb.w	r1, [r2, #110]	; 0x6e
   1a2d2:	f882 006f 	strb.w	r0, [r2, #111]	; 0x6f
   1a2d6:	20ff      	movs	r0, #255	; 0xff
   1a2d8:	7298      	strb	r0, [r3, #10]
   1a2da:	4610      	mov	r0, r2
   1a2dc:	f007 feaf 	bl	2203e <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY>
   1a2e0:	6860      	ldr	r0, [r4, #4]
   1a2e2:	f890 0154 	ldrb.w	r0, [r0, #340]	; 0x154
   1a2e6:	2801      	cmp	r0, #1
   1a2e8:	d003      	beq.n	1a2f2 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x11ca>
   1a2ea:	2f00      	cmp	r7, #0
   1a2ec:	bf08      	it	eq
   1a2ee:	2e00      	cmpeq	r6, #0
   1a2f0:	d003      	beq.n	1a2fa <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x11d2>
   1a2f2:	f04f 0000 	mov.w	r0, #0
   1a2f6:	f000 f82d 	bl	1a354 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x122c>
   1a2fa:	6860      	ldr	r0, [r4, #4]
   1a2fc:	3030      	adds	r0, #48	; 0x30
   1a2fe:	f006 fcff 	bl	20d00 <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
   1a302:	4606      	mov	r6, r0
   1a304:	2105      	movs	r1, #5
   1a306:	6860      	ldr	r0, [r4, #4]
   1a308:	f7fd fe8e 	bl	18028 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
   1a30c:	6860      	ldr	r0, [r4, #4]
   1a30e:	3030      	adds	r0, #48	; 0x30
   1a310:	f006 fcf6 	bl	20d00 <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
   1a314:	4607      	mov	r7, r0
   1a316:	42be      	cmp	r6, r7
   1a318:	d20b      	bcs.n	1a332 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x120a>
   1a31a:	f7f4 fd03 	bl	ed24 <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA>
   1a31e:	4601      	mov	r1, r0
   1a320:	1bb8      	subs	r0, r7, r6
   1a322:	2865      	cmp	r0, #101	; 0x65
   1a324:	bf38      	it	cc
   1a326:	2065      	movcc	r0, #101	; 0x65
   1a328:	f7f4 fc1e 	bl	eb68 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
   1a32c:	2800      	cmp	r0, #0
   1a32e:	bf18      	it	ne
   1a330:	2500      	movne	r5, #0
   1a332:	6860      	ldr	r0, [r4, #4]
   1a334:	f006 fc83 	bl	20c3e <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
   1a338:	b138      	cbz	r0, 1a34a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1222>
   1a33a:	6863      	ldr	r3, [r4, #4]
   1a33c:	f503 72d4 	add.w	r2, r3, #424	; 0x1a8
   1a340:	f103 0130 	add.w	r1, r3, #48	; 0x30
   1a344:	8818      	ldrh	r0, [r3, #0]
   1a346:	f006 fc31 	bl	20bac <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
   1a34a:	4628      	mov	r0, r5
   1a34c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1a350:	200001b8 	.word	0x200001b8
   1a354:	b510      	push	{r4, lr}
   1a356:	4c19      	ldr	r4, [pc, #100]	; (1a3bc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1294>)
   1a358:	6861      	ldr	r1, [r4, #4]
   1a35a:	880a      	ldrh	r2, [r1, #0]
   1a35c:	f8a1 21ec 	strh.w	r2, [r1, #492]	; 0x1ec
   1a360:	f881 01ea 	strb.w	r0, [r1, #490]	; 0x1ea
   1a364:	f891 006e 	ldrb.w	r0, [r1, #110]	; 0x6e
   1a368:	2801      	cmp	r0, #1
   1a36a:	bf18      	it	ne
   1a36c:	2802      	cmpne	r0, #2
   1a36e:	d00b      	beq.n	1a388 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1260>
   1a370:	2804      	cmp	r0, #4
   1a372:	bf14      	ite	ne
   1a374:	2808      	cmpne	r0, #8
   1a376:	2003      	moveq	r0, #3
   1a378:	d006      	beq.n	1a388 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1260>
   1a37a:	bf00      	nop
   1a37c:	f44f 7134 	mov.w	r1, #720	; 0x2d0
   1a380:	f04f 0006 	mov.w	r0, #6
   1a384:	f7f7 fafc 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1a388:	f881 01ee 	strb.w	r0, [r1, #494]	; 0x1ee
   1a38c:	f891 006f 	ldrb.w	r0, [r1, #111]	; 0x6f
   1a390:	2801      	cmp	r0, #1
   1a392:	bf18      	it	ne
   1a394:	2802      	cmpne	r0, #2
   1a396:	d004      	beq.n	1a3a2 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x127a>
   1a398:	2804      	cmp	r0, #4
   1a39a:	bf14      	ite	ne
   1a39c:	2808      	cmpne	r0, #8
   1a39e:	2003      	moveq	r0, #3
   1a3a0:	d1ec      	bne.n	1a37c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1254>
   1a3a2:	f881 01ef 	strb.w	r0, [r1, #495]	; 0x1ef
   1a3a6:	f501 70f0 	add.w	r0, r1, #480	; 0x1e0
   1a3aa:	f04f 0213 	mov.w	r2, #19
   1a3ae:	f7fa f8cd 	bl	1454c <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
   1a3b2:	6861      	ldr	r1, [r4, #4]
   1a3b4:	2000      	movs	r0, #0
   1a3b6:	f881 0154 	strb.w	r0, [r1, #340]	; 0x154
   1a3ba:	bd10      	pop	{r4, pc}
   1a3bc:	200001b8 	.word	0x200001b8
   1a3c0:	b570      	push	{r4, r5, r6, lr}
   1a3c2:	4604      	mov	r4, r0
   1a3c4:	6840      	ldr	r0, [r0, #4]
   1a3c6:	2301      	movs	r3, #1
   1a3c8:	2100      	movs	r1, #0
   1a3ca:	f890 20b6 	ldrb.w	r2, [r0, #182]	; 0xb6
   1a3ce:	30a0      	adds	r0, #160	; 0xa0
   1a3d0:	f005 fe7d 	bl	200ce <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   1a3d4:	2800      	cmp	r0, #0
   1a3d6:	bf04      	itt	eq
   1a3d8:	2001      	moveq	r0, #1
   1a3da:	bd70      	popeq	{r4, r5, r6, pc}
   1a3dc:	4d13      	ldr	r5, [pc, #76]	; (1a42c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1304>)
   1a3de:	68e8      	ldr	r0, [r5, #12]
   1a3e0:	f006 f9d3 	bl	2078a <sym_E5LV7NLJGDBOOHT3XI7LZP4SJ6B3AVX5ZM7II3A>
   1a3e4:	4601      	mov	r1, r0
   1a3e6:	6860      	ldr	r0, [r4, #4]
   1a3e8:	f8a0 1344 	strh.w	r1, [r0, #836]	; 0x344
   1a3ec:	6860      	ldr	r0, [r4, #4]
   1a3ee:	f8b0 20ac 	ldrh.w	r2, [r0, #172]	; 0xac
   1a3f2:	1a89      	subs	r1, r1, r2
   1a3f4:	b209      	sxth	r1, r1
   1a3f6:	f647 72fe 	movw	r2, #32766	; 0x7ffe
   1a3fa:	428a      	cmp	r2, r1
   1a3fc:	bfa8      	it	ge
   1a3fe:	2900      	cmpge	r1, #0
   1a400:	dd09      	ble.n	1a416 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x12ee>
   1a402:	f200 3146 	addw	r1, r0, #838	; 0x346
   1a406:	68e8      	ldr	r0, [r5, #12]
   1a408:	f006 f9ba 	bl	20780 <sym_7VZW6MQYCHJNYQ6F4AFCRRJSPXBVUQDDS4RU32Y>
   1a40c:	6861      	ldr	r1, [r4, #4]
   1a40e:	200c      	movs	r0, #12
   1a410:	f881 00b6 	strb.w	r0, [r1, #182]	; 0xb6
   1a414:	e008      	b.n	1a428 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1300>
   1a416:	2128      	movs	r1, #40	; 0x28
   1a418:	f880 10d5 	strb.w	r1, [r0, #213]	; 0xd5
   1a41c:	6861      	ldr	r1, [r4, #4]
   1a41e:	220a      	movs	r2, #10
   1a420:	f101 00cc 	add.w	r0, r1, #204	; 0xcc
   1a424:	f7fa f892 	bl	1454c <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
   1a428:	2000      	movs	r0, #0
   1a42a:	bd70      	pop	{r4, r5, r6, pc}
   1a42c:	200001a0 	.word	0x200001a0
   1a430:	b570      	push	{r4, r5, r6, lr}
   1a432:	4604      	mov	r4, r0
   1a434:	6840      	ldr	r0, [r0, #4]
   1a436:	2301      	movs	r3, #1
   1a438:	2100      	movs	r1, #0
   1a43a:	f890 20b6 	ldrb.w	r2, [r0, #182]	; 0xb6
   1a43e:	30a0      	adds	r0, #160	; 0xa0
   1a440:	f005 fe45 	bl	200ce <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   1a444:	2800      	cmp	r0, #0
   1a446:	bf04      	itt	eq
   1a448:	2001      	moveq	r0, #1
   1a44a:	bd70      	popeq	{r4, r5, r6, pc}
   1a44c:	6860      	ldr	r0, [r4, #4]
   1a44e:	4d2a      	ldr	r5, [pc, #168]	; (1a4f8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x13d0>)
   1a450:	f890 1073 	ldrb.w	r1, [r0, #115]	; 0x73
   1a454:	68e8      	ldr	r0, [r5, #12]
   1a456:	f006 f99b 	bl	20790 <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A>
   1a45a:	2800      	cmp	r0, #0
   1a45c:	d03b      	beq.n	1a4d6 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x13ae>
   1a45e:	68ea      	ldr	r2, [r5, #12]
   1a460:	6861      	ldr	r1, [r4, #4]
   1a462:	f8b2 000d 	ldrh.w	r0, [r2, #13]
   1a466:	f8a1 0344 	strh.w	r0, [r1, #836]	; 0x344
   1a46a:	6861      	ldr	r1, [r4, #4]
   1a46c:	f8b1 30ac 	ldrh.w	r3, [r1, #172]	; 0xac
   1a470:	1ac0      	subs	r0, r0, r3
   1a472:	b200      	sxth	r0, r0
   1a474:	f647 73fe 	movw	r3, #32766	; 0x7ffe
   1a478:	4283      	cmp	r3, r0
   1a47a:	bfa8      	it	ge
   1a47c:	2800      	cmpge	r0, #0
   1a47e:	dd2f      	ble.n	1a4e0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x13b8>
   1a480:	4610      	mov	r0, r2
   1a482:	f006 f9b2 	bl	207ea <sym_GII4UQLGDHD6D5DSTGUIOYZXEEJFVPTQQUWUNII>
   1a486:	f005 fdef 	bl	20068 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
   1a48a:	4606      	mov	r6, r0
   1a48c:	6860      	ldr	r0, [r4, #4]
   1a48e:	4631      	mov	r1, r6
   1a490:	f8c0 634c 	str.w	r6, [r0, #844]	; 0x34c
   1a494:	68e8      	ldr	r0, [r5, #12]
   1a496:	7900      	ldrb	r0, [r0, #4]
   1a498:	f005 ff80 	bl	2039c <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
   1a49c:	6861      	ldr	r1, [r4, #4]
   1a49e:	f8a1 0346 	strh.w	r0, [r1, #838]	; 0x346
   1a4a2:	68e8      	ldr	r0, [r5, #12]
   1a4a4:	4631      	mov	r1, r6
   1a4a6:	f8b0 0005 	ldrh.w	r0, [r0, #5]
   1a4aa:	f005 ff6e 	bl	2038a <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>
   1a4ae:	6861      	ldr	r1, [r4, #4]
   1a4b0:	f8c1 0348 	str.w	r0, [r1, #840]	; 0x348
   1a4b4:	68e8      	ldr	r0, [r5, #12]
   1a4b6:	f006 f99b 	bl	207f0 <sym_MD56XYITEHSLIFIRQT26SWOCASBX33AYW4XGGWY>
   1a4ba:	6861      	ldr	r1, [r4, #4]
   1a4bc:	f8a1 0350 	strh.w	r0, [r1, #848]	; 0x350
   1a4c0:	68e8      	ldr	r0, [r5, #12]
   1a4c2:	f006 f998 	bl	207f6 <sym_EKDQHRHOWISU7QCQSGE4X3J4VBX22VVETALDGWI>
   1a4c6:	6861      	ldr	r1, [r4, #4]
   1a4c8:	f8a1 0352 	strh.w	r0, [r1, #850]	; 0x352
   1a4cc:	6861      	ldr	r1, [r4, #4]
   1a4ce:	200f      	movs	r0, #15
   1a4d0:	f881 00b6 	strb.w	r0, [r1, #182]	; 0xb6
   1a4d4:	e00d      	b.n	1a4f2 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x13ca>
   1a4d6:	4620      	mov	r0, r4
   1a4d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1a4dc:	f000 b87e 	b.w	1a5dc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x14b4>
   1a4e0:	2028      	movs	r0, #40	; 0x28
   1a4e2:	f881 00d5 	strb.w	r0, [r1, #213]	; 0xd5
   1a4e6:	6861      	ldr	r1, [r4, #4]
   1a4e8:	220a      	movs	r2, #10
   1a4ea:	f101 00cc 	add.w	r0, r1, #204	; 0xcc
   1a4ee:	f7fa f82d 	bl	1454c <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
   1a4f2:	2000      	movs	r0, #0
   1a4f4:	bd70      	pop	{r4, r5, r6, pc}
   1a4f6:	0000      	.short	0x0000
   1a4f8:	200001a0 	.word	0x200001a0
   1a4fc:	b538      	push	{r3, r4, r5, lr}
   1a4fe:	4604      	mov	r4, r0
   1a500:	6840      	ldr	r0, [r0, #4]
   1a502:	2301      	movs	r3, #1
   1a504:	2100      	movs	r1, #0
   1a506:	f890 20b6 	ldrb.w	r2, [r0, #182]	; 0xb6
   1a50a:	30a0      	adds	r0, #160	; 0xa0
   1a50c:	f005 fddf 	bl	200ce <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   1a510:	b970      	cbnz	r0, 1a530 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1408>
   1a512:	6860      	ldr	r0, [r4, #4]
   1a514:	f890 20b6 	ldrb.w	r2, [r0, #182]	; 0xb6
   1a518:	2a15      	cmp	r2, #21
   1a51a:	d009      	beq.n	1a530 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1408>
   1a51c:	2301      	movs	r3, #1
   1a51e:	2105      	movs	r1, #5
   1a520:	30a0      	adds	r0, #160	; 0xa0
   1a522:	f005 fdd4 	bl	200ce <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   1a526:	2800      	cmp	r0, #0
   1a528:	bf0c      	ite	eq
   1a52a:	2001      	moveq	r0, #1
   1a52c:	2008      	movne	r0, #8
   1a52e:	bd38      	pop	{r3, r4, r5, pc}
   1a530:	6860      	ldr	r0, [r4, #4]
   1a532:	f890 00f6 	ldrb.w	r0, [r0, #246]	; 0xf6
   1a536:	b948      	cbnz	r0, 1a54c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1424>
   1a538:	481f      	ldr	r0, [pc, #124]	; (1a5b8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1490>)
   1a53a:	2100      	movs	r1, #0
   1a53c:	6840      	ldr	r0, [r0, #4]
   1a53e:	f8a0 10f2 	strh.w	r1, [r0, #242]	; 0xf2
   1a542:	f890 10f4 	ldrb.w	r1, [r0, #244]	; 0xf4
   1a546:	1c49      	adds	r1, r1, #1
   1a548:	f880 10f4 	strb.w	r1, [r0, #244]	; 0xf4
   1a54c:	6860      	ldr	r0, [r4, #4]
   1a54e:	4d1b      	ldr	r5, [pc, #108]	; (1a5bc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1494>)
   1a550:	f500 712c 	add.w	r1, r0, #688	; 0x2b0
   1a554:	68e8      	ldr	r0, [r5, #12]
   1a556:	f006 f967 	bl	20828 <sym_3BQBYKVQGWCA6VF5GDIUVXGAPLPPXRSSEFO5TXA>
   1a55a:	6860      	ldr	r0, [r4, #4]
   1a55c:	f500 7198 	add.w	r1, r0, #304	; 0x130
   1a560:	68e8      	ldr	r0, [r5, #12]
   1a562:	f006 f958 	bl	20816 <sym_NILDTLWW7AYBRN5PYE72ILWSBBVUBN4Y5FF3XQQ>
   1a566:	6860      	ldr	r0, [r4, #4]
   1a568:	f890 135c 	ldrb.w	r1, [r0, #860]	; 0x35c
   1a56c:	f88d 1000 	strb.w	r1, [sp]
   1a570:	f89d 1000 	ldrb.w	r1, [sp]
   1a574:	b121      	cbz	r1, 1a580 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1458>
   1a576:	f240 3117 	movw	r1, #791	; 0x317
   1a57a:	2031      	movs	r0, #49	; 0x31
   1a57c:	f7f7 fa00 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1a580:	8801      	ldrh	r1, [r0, #0]
   1a582:	f8a0 135e 	strh.w	r1, [r0, #862]	; 0x35e
   1a586:	6860      	ldr	r0, [r4, #4]
   1a588:	f500 7158 	add.w	r1, r0, #864	; 0x360
   1a58c:	68e8      	ldr	r0, [r5, #12]
   1a58e:	f006 f946 	bl	2081e <sym_7LJR6S4GQKSUMWIUG2FRZAKXFD3RUBQ6FOHJMZQ>
   1a592:	6860      	ldr	r0, [r4, #4]
   1a594:	f500 715a 	add.w	r1, r0, #872	; 0x368
   1a598:	68e8      	ldr	r0, [r5, #12]
   1a59a:	f006 f939 	bl	20810 <sym_FIJW4TR7AWR6OLWCHL3HTVQSVWXOS6T6XISXCQQ>
   1a59e:	6860      	ldr	r0, [r4, #4]
   1a5a0:	2209      	movs	r2, #9
   1a5a2:	4907      	ldr	r1, [pc, #28]	; (1a5c0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1498>)
   1a5a4:	f500 7055 	add.w	r0, r0, #852	; 0x354
   1a5a8:	f7f9 ffd0 	bl	1454c <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
   1a5ac:	6861      	ldr	r1, [r4, #4]
   1a5ae:	2017      	movs	r0, #23
   1a5b0:	f881 00b6 	strb.w	r0, [r1, #182]	; 0xb6
   1a5b4:	2000      	movs	r0, #0
   1a5b6:	bd38      	pop	{r3, r4, r5, pc}
   1a5b8:	200001b8 	.word	0x200001b8
   1a5bc:	200001a0 	.word	0x200001a0
   1a5c0:	000219a5 	.word	0x000219a5
   1a5c4:	4901      	ldr	r1, [pc, #4]	; (1a5cc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x14a4>)
   1a5c6:	68c9      	ldr	r1, [r1, #12]
   1a5c8:	f7fa bcce 	b.w	14f68 <sym_7ABLLIXUF3HMINU3DLWXJDVBNAU7RSUXPXZ3RFQ>
   1a5cc:	200001a0 	.word	0x200001a0
   1a5d0:	4901      	ldr	r1, [pc, #4]	; (1a5d8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x14b0>)
   1a5d2:	68c9      	ldr	r1, [r1, #12]
   1a5d4:	f7fa bd10 	b.w	14ff8 <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI>
   1a5d8:	200001a0 	.word	0x200001a0
   1a5dc:	6842      	ldr	r2, [r0, #4]
   1a5de:	f8d2 10a4 	ldr.w	r1, [r2, #164]	; 0xa4
   1a5e2:	f011 0f08 	tst.w	r1, #8
   1a5e6:	bf1c      	itt	ne
   1a5e8:	2001      	movne	r0, #1
   1a5ea:	4770      	bxne	lr
   1a5ec:	f041 0108 	orr.w	r1, r1, #8
   1a5f0:	f8c2 10a4 	str.w	r1, [r2, #164]	; 0xa4
   1a5f4:	6840      	ldr	r0, [r0, #4]
   1a5f6:	4908      	ldr	r1, [pc, #32]	; (1a618 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x14f0>)
   1a5f8:	68c9      	ldr	r1, [r1, #12]
   1a5fa:	78c9      	ldrb	r1, [r1, #3]
   1a5fc:	f880 1138 	strb.w	r1, [r0, #312]	; 0x138
   1a600:	4806      	ldr	r0, [pc, #24]	; (1a61c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x14f4>)
   1a602:	2100      	movs	r1, #0
   1a604:	6840      	ldr	r0, [r0, #4]
   1a606:	f8a0 10f2 	strh.w	r1, [r0, #242]	; 0xf2
   1a60a:	f890 10f4 	ldrb.w	r1, [r0, #244]	; 0xf4
   1a60e:	1c49      	adds	r1, r1, #1
   1a610:	f880 10f4 	strb.w	r1, [r0, #244]	; 0xf4
   1a614:	2000      	movs	r0, #0
   1a616:	4770      	bx	lr
   1a618:	200001a0 	.word	0x200001a0
   1a61c:	200001b8 	.word	0x200001b8
   1a620:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1a624:	4605      	mov	r5, r0
   1a626:	6840      	ldr	r0, [r0, #4]
   1a628:	f890 00a4 	ldrb.w	r0, [r0, #164]	; 0xa4
   1a62c:	f010 0f30 	tst.w	r0, #48	; 0x30
   1a630:	bf1c      	itt	ne
   1a632:	2001      	movne	r0, #1
   1a634:	e8bd 83f8 	ldmiane.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1a638:	4c35      	ldr	r4, [pc, #212]	; (1a710 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x15e8>)
   1a63a:	68e0      	ldr	r0, [r4, #12]
   1a63c:	f006 f911 	bl	20862 <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY>
   1a640:	b388      	cbz	r0, 1a6a6 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x157e>
   1a642:	68e0      	ldr	r0, [r4, #12]
   1a644:	f006 f907 	bl	20856 <sym_BWPZYUAKR5BUOCM2NWAMEPWQB6GIJXBPUENADMI>
   1a648:	4606      	mov	r6, r0
   1a64a:	68e0      	ldr	r0, [r4, #12]
   1a64c:	f006 f907 	bl	2085e <sym_M5NXXZSYW5XYDZUQUOZMKSTD6GIS5XZ7Y4SKNVI>
   1a650:	4680      	mov	r8, r0
   1a652:	68e0      	ldr	r0, [r4, #12]
   1a654:	f006 f8fd 	bl	20852 <sym_PHCTC5YUX44NFLNJCEBJKKRAYHGUKTS4AC5GMAI>
   1a658:	4607      	mov	r7, r0
   1a65a:	68e0      	ldr	r0, [r4, #12]
   1a65c:	f006 f8fd 	bl	2085a <sym_QDD7GI62CPYTU4DR5RMOF6JH72V5L65ZJXU3VAA>
   1a660:	4601      	mov	r1, r0
   1a662:	9600      	str	r6, [sp, #0]
   1a664:	6868      	ldr	r0, [r5, #4]
   1a666:	4643      	mov	r3, r8
   1a668:	463a      	mov	r2, r7
   1a66a:	3030      	adds	r0, #48	; 0x30
   1a66c:	f006 fb96 	bl	20d9c <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>
   1a670:	7920      	ldrb	r0, [r4, #4]
   1a672:	f104 0618 	add.w	r6, r4, #24
   1a676:	f010 0f02 	tst.w	r0, #2
   1a67a:	d003      	beq.n	1a684 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x155c>
   1a67c:	68a0      	ldr	r0, [r4, #8]
   1a67e:	78c0      	ldrb	r0, [r0, #3]
   1a680:	2814      	cmp	r0, #20
   1a682:	d016      	beq.n	1a6b2 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x158a>
   1a684:	6868      	ldr	r0, [r5, #4]
   1a686:	f890 10b5 	ldrb.w	r1, [r0, #181]	; 0xb5
   1a68a:	291f      	cmp	r1, #31
   1a68c:	d011      	beq.n	1a6b2 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x158a>
   1a68e:	f890 1064 	ldrb.w	r1, [r0, #100]	; 0x64
   1a692:	2901      	cmp	r1, #1
   1a694:	d019      	beq.n	1a6ca <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x15a2>
   1a696:	f890 114b 	ldrb.w	r1, [r0, #331]	; 0x14b
   1a69a:	f88d 1000 	strb.w	r1, [sp]
   1a69e:	f89d 1000 	ldrb.w	r1, [sp]
   1a6a2:	b159      	cbz	r1, 1a6bc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1594>
   1a6a4:	e011      	b.n	1a6ca <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x15a2>
   1a6a6:	e7ff      	b.n	1a6a8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1580>
   1a6a8:	4628      	mov	r0, r5
   1a6aa:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1a6ae:	f7ff bf95 	b.w	1a5dc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x14b4>
   1a6b2:	6869      	ldr	r1, [r5, #4]
   1a6b4:	2001      	movs	r0, #1
   1a6b6:	f881 0064 	strb.w	r0, [r1, #100]	; 0x64
   1a6ba:	e006      	b.n	1a6ca <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x15a2>
   1a6bc:	f890 114a 	ldrb.w	r1, [r0, #330]	; 0x14a
   1a6c0:	f88d 1000 	strb.w	r1, [sp]
   1a6c4:	f89d 1000 	ldrb.w	r1, [sp]
   1a6c8:	b139      	cbz	r1, 1a6da <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x15b2>
   1a6ca:	6868      	ldr	r0, [r5, #4]
   1a6cc:	f8d0 10a4 	ldr.w	r1, [r0, #164]	; 0xa4
   1a6d0:	f041 0110 	orr.w	r1, r1, #16
   1a6d4:	f8c0 10a4 	str.w	r1, [r0, #164]	; 0xa4
   1a6d8:	e00d      	b.n	1a6f6 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x15ce>
   1a6da:	f8d0 10a4 	ldr.w	r1, [r0, #164]	; 0xa4
   1a6de:	f041 0120 	orr.w	r1, r1, #32
   1a6e2:	f8c0 10a4 	str.w	r1, [r0, #164]	; 0xa4
   1a6e6:	6873      	ldr	r3, [r6, #4]
   1a6e8:	f503 72df 	add.w	r2, r3, #446	; 0x1be
   1a6ec:	f103 0130 	add.w	r1, r3, #48	; 0x30
   1a6f0:	8818      	ldrh	r0, [r3, #0]
   1a6f2:	f006 fb5b 	bl	20dac <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I>
   1a6f6:	6870      	ldr	r0, [r6, #4]
   1a6f8:	2100      	movs	r1, #0
   1a6fa:	f8a0 10f2 	strh.w	r1, [r0, #242]	; 0xf2
   1a6fe:	f890 10f4 	ldrb.w	r1, [r0, #244]	; 0xf4
   1a702:	1c49      	adds	r1, r1, #1
   1a704:	f880 10f4 	strb.w	r1, [r0, #244]	; 0xf4
   1a708:	2000      	movs	r0, #0
   1a70a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1a70e:	0000      	.short	0x0000
   1a710:	200001a0 	.word	0x200001a0
   1a714:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1a718:	4604      	mov	r4, r0
   1a71a:	6840      	ldr	r0, [r0, #4]
   1a71c:	2301      	movs	r3, #1
   1a71e:	210a      	movs	r1, #10
   1a720:	f890 20b5 	ldrb.w	r2, [r0, #181]	; 0xb5
   1a724:	30a0      	adds	r0, #160	; 0xa0
   1a726:	f005 fcd2 	bl	200ce <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   1a72a:	2800      	cmp	r0, #0
   1a72c:	bf04      	itt	eq
   1a72e:	2001      	moveq	r0, #1
   1a730:	e8bd 83f8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1a734:	4d1c      	ldr	r5, [pc, #112]	; (1a7a8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1680>)
   1a736:	68e8      	ldr	r0, [r5, #12]
   1a738:	f006 f893 	bl	20862 <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY>
   1a73c:	b1c8      	cbz	r0, 1a772 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x164a>
   1a73e:	68e8      	ldr	r0, [r5, #12]
   1a740:	f006 f889 	bl	20856 <sym_BWPZYUAKR5BUOCM2NWAMEPWQB6GIJXBPUENADMI>
   1a744:	4606      	mov	r6, r0
   1a746:	68e8      	ldr	r0, [r5, #12]
   1a748:	f006 f889 	bl	2085e <sym_M5NXXZSYW5XYDZUQUOZMKSTD6GIS5XZ7Y4SKNVI>
   1a74c:	4607      	mov	r7, r0
   1a74e:	68e8      	ldr	r0, [r5, #12]
   1a750:	f006 f87f 	bl	20852 <sym_PHCTC5YUX44NFLNJCEBJKKRAYHGUKTS4AC5GMAI>
   1a754:	4680      	mov	r8, r0
   1a756:	68e8      	ldr	r0, [r5, #12]
   1a758:	f006 f87f 	bl	2085a <sym_QDD7GI62CPYTU4DR5RMOF6JH72V5L65ZJXU3VAA>
   1a75c:	4601      	mov	r1, r0
   1a75e:	9600      	str	r6, [sp, #0]
   1a760:	6860      	ldr	r0, [r4, #4]
   1a762:	463b      	mov	r3, r7
   1a764:	4642      	mov	r2, r8
   1a766:	3030      	adds	r0, #48	; 0x30
   1a768:	f006 fb18 	bl	20d9c <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>
   1a76c:	6860      	ldr	r0, [r4, #4]
   1a76e:	f006 fa66 	bl	20c3e <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
   1a772:	6861      	ldr	r1, [r4, #4]
   1a774:	2000      	movs	r0, #0
   1a776:	f881 00f0 	strb.w	r0, [r1, #240]	; 0xf0
   1a77a:	6861      	ldr	r1, [r4, #4]
   1a77c:	f881 00b5 	strb.w	r0, [r1, #181]	; 0xb5
   1a780:	480a      	ldr	r0, [pc, #40]	; (1a7ac <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1684>)
   1a782:	6843      	ldr	r3, [r0, #4]
   1a784:	f893 0064 	ldrb.w	r0, [r3, #100]	; 0x64
   1a788:	2801      	cmp	r0, #1
   1a78a:	bf04      	itt	eq
   1a78c:	2002      	moveq	r0, #2
   1a78e:	f883 0064 	strbeq.w	r0, [r3, #100]	; 0x64
   1a792:	d006      	beq.n	1a7a2 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x167a>
   1a794:	f503 72d4 	add.w	r2, r3, #424	; 0x1a8
   1a798:	f103 0130 	add.w	r1, r3, #48	; 0x30
   1a79c:	8818      	ldrh	r0, [r3, #0]
   1a79e:	f006 fa05 	bl	20bac <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
   1a7a2:	2000      	movs	r0, #0
   1a7a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1a7a8:	200001a0 	.word	0x200001a0
   1a7ac:	200001b8 	.word	0x200001b8
   1a7b0:	6841      	ldr	r1, [r0, #4]
   1a7b2:	f891 10a4 	ldrb.w	r1, [r1, #164]	; 0xa4
   1a7b6:	f011 0f04 	tst.w	r1, #4
   1a7ba:	bf1c      	itt	ne
   1a7bc:	2001      	movne	r0, #1
   1a7be:	4770      	bxne	lr
   1a7c0:	2200      	movs	r2, #0
   1a7c2:	4909      	ldr	r1, [pc, #36]	; (1a7e8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x16c0>)
   1a7c4:	6849      	ldr	r1, [r1, #4]
   1a7c6:	f8a1 20f2 	strh.w	r2, [r1, #242]	; 0xf2
   1a7ca:	f891 20f4 	ldrb.w	r2, [r1, #244]	; 0xf4
   1a7ce:	1c52      	adds	r2, r2, #1
   1a7d0:	f881 20f4 	strb.w	r2, [r1, #244]	; 0xf4
   1a7d4:	6840      	ldr	r0, [r0, #4]
   1a7d6:	f8d0 10a4 	ldr.w	r1, [r0, #164]	; 0xa4
   1a7da:	f041 0104 	orr.w	r1, r1, #4
   1a7de:	f8c0 10a4 	str.w	r1, [r0, #164]	; 0xa4
   1a7e2:	2000      	movs	r0, #0
   1a7e4:	4770      	bx	lr
   1a7e6:	0000      	.short	0x0000
   1a7e8:	200001b8 	.word	0x200001b8
   1a7ec:	b510      	push	{r4, lr}
   1a7ee:	4604      	mov	r4, r0
   1a7f0:	6840      	ldr	r0, [r0, #4]
   1a7f2:	2301      	movs	r3, #1
   1a7f4:	2100      	movs	r1, #0
   1a7f6:	f890 20b6 	ldrb.w	r2, [r0, #182]	; 0xb6
   1a7fa:	30a0      	adds	r0, #160	; 0xa0
   1a7fc:	f005 fc67 	bl	200ce <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   1a800:	2800      	cmp	r0, #0
   1a802:	6860      	ldr	r0, [r4, #4]
   1a804:	d014      	beq.n	1a830 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1708>
   1a806:	f890 00bb 	ldrb.w	r0, [r0, #187]	; 0xbb
   1a80a:	2800      	cmp	r0, #0
   1a80c:	bf08      	it	eq
   1a80e:	bd10      	popeq	{r4, pc}
   1a810:	2100      	movs	r1, #0
   1a812:	480d      	ldr	r0, [pc, #52]	; (1a848 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1720>)
   1a814:	6840      	ldr	r0, [r0, #4]
   1a816:	f8a0 10f2 	strh.w	r1, [r0, #242]	; 0xf2
   1a81a:	f890 10f4 	ldrb.w	r1, [r0, #244]	; 0xf4
   1a81e:	1c49      	adds	r1, r1, #1
   1a820:	f880 10f4 	strb.w	r1, [r0, #244]	; 0xf4
   1a824:	6861      	ldr	r1, [r4, #4]
   1a826:	2013      	movs	r0, #19
   1a828:	f881 00b6 	strb.w	r0, [r1, #182]	; 0xb6
   1a82c:	2000      	movs	r0, #0
   1a82e:	bd10      	pop	{r4, pc}
   1a830:	f890 20b6 	ldrb.w	r2, [r0, #182]	; 0xb6
   1a834:	2301      	movs	r3, #1
   1a836:	2105      	movs	r1, #5
   1a838:	30a0      	adds	r0, #160	; 0xa0
   1a83a:	f005 fc48 	bl	200ce <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   1a83e:	2800      	cmp	r0, #0
   1a840:	bf14      	ite	ne
   1a842:	2008      	movne	r0, #8
   1a844:	2001      	moveq	r0, #1
   1a846:	bd10      	pop	{r4, pc}
   1a848:	200001b8 	.word	0x200001b8
   1a84c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a84e:	4604      	mov	r4, r0
   1a850:	6840      	ldr	r0, [r0, #4]
   1a852:	2301      	movs	r3, #1
   1a854:	210b      	movs	r1, #11
   1a856:	f890 20b6 	ldrb.w	r2, [r0, #182]	; 0xb6
   1a85a:	30a0      	adds	r0, #160	; 0xa0
   1a85c:	f005 fc37 	bl	200ce <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   1a860:	2800      	cmp	r0, #0
   1a862:	d12d      	bne.n	1a8c0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1798>
   1a864:	6860      	ldr	r0, [r4, #4]
   1a866:	2301      	movs	r3, #1
   1a868:	2100      	movs	r1, #0
   1a86a:	f890 20b6 	ldrb.w	r2, [r0, #182]	; 0xb6
   1a86e:	30a0      	adds	r0, #160	; 0xa0
   1a870:	f005 fc2d 	bl	200ce <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   1a874:	2800      	cmp	r0, #0
   1a876:	bf04      	itt	eq
   1a878:	2001      	moveq	r0, #1
   1a87a:	bdf8      	popeq	{r3, r4, r5, r6, r7, pc}
   1a87c:	6860      	ldr	r0, [r4, #4]
   1a87e:	f890 00b5 	ldrb.w	r0, [r0, #181]	; 0xb5
   1a882:	2827      	cmp	r0, #39	; 0x27
   1a884:	d01c      	beq.n	1a8c0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1798>
   1a886:	4d2b      	ldr	r5, [pc, #172]	; (1a934 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x180c>)
   1a888:	68e8      	ldr	r0, [r5, #12]
   1a88a:	f005 ffff 	bl	2088c <sym_PBCQYO46QLEABI4SERHQCHCGDP6NXKCTAYVE53Y>
   1a88e:	b1c8      	cbz	r0, 1a8c4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x179c>
   1a890:	68e8      	ldr	r0, [r5, #12]
   1a892:	6862      	ldr	r2, [r4, #4]
   1a894:	7941      	ldrb	r1, [r0, #5]
   1a896:	f001 0107 	and.w	r1, r1, #7
   1a89a:	f882 1067 	strb.w	r1, [r2, #103]	; 0x67
   1a89e:	7900      	ldrb	r0, [r0, #4]
   1a8a0:	f000 0107 	and.w	r1, r0, #7
   1a8a4:	6860      	ldr	r0, [r4, #4]
   1a8a6:	f880 1066 	strb.w	r1, [r0, #102]	; 0x66
   1a8aa:	6860      	ldr	r0, [r4, #4]
   1a8ac:	f890 2155 	ldrb.w	r2, [r0, #341]	; 0x155
   1a8b0:	f88d 2000 	strb.w	r2, [sp]
   1a8b4:	f89d 2000 	ldrb.w	r2, [sp]
   1a8b8:	2600      	movs	r6, #0
   1a8ba:	3518      	adds	r5, #24
   1a8bc:	b13a      	cbz	r2, 1a8ce <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x17a6>
   1a8be:	e02a      	b.n	1a916 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x17ee>
   1a8c0:	2020      	movs	r0, #32
   1a8c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1a8c4:	4620      	mov	r0, r4
   1a8c6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1a8ca:	f7ff be87 	b.w	1a5dc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x14b4>
   1a8ce:	f890 2154 	ldrb.w	r2, [r0, #340]	; 0x154
   1a8d2:	2a01      	cmp	r2, #1
   1a8d4:	d01f      	beq.n	1a916 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x17ee>
   1a8d6:	f890 c06f 	ldrb.w	ip, [r0, #111]	; 0x6f
   1a8da:	f890 3067 	ldrb.w	r3, [r0, #103]	; 0x67
   1a8de:	f100 026e 	add.w	r2, r0, #110	; 0x6e
   1a8e2:	458c      	cmp	ip, r1
   1a8e4:	bf01      	itttt	eq
   1a8e6:	7811      	ldrbeq	r1, [r2, #0]
   1a8e8:	4299      	cmpeq	r1, r3
   1a8ea:	2102      	moveq	r1, #2
   1a8ec:	f880 1154 	strbeq.w	r1, [r0, #340]	; 0x154
   1a8f0:	d011      	beq.n	1a916 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x17ee>
   1a8f2:	6869      	ldr	r1, [r5, #4]
   1a8f4:	f501 70ee 	add.w	r0, r1, #476	; 0x1dc
   1a8f8:	880a      	ldrh	r2, [r1, #0]
   1a8fa:	f820 2b02 	strh.w	r2, [r0], #2
   1a8fe:	f891 2066 	ldrb.w	r2, [r1, #102]	; 0x66
   1a902:	f800 2b01 	strb.w	r2, [r0], #1
   1a906:	f891 2067 	ldrb.w	r2, [r1, #103]	; 0x67
   1a90a:	f800 290d 	strb.w	r2, [r0], #-13
   1a90e:	f04f 021f 	mov.w	r2, #31
   1a912:	f7f9 fe1b 	bl	1454c <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
   1a916:	6861      	ldr	r1, [r4, #4]
   1a918:	2024      	movs	r0, #36	; 0x24
   1a91a:	f881 00b6 	strb.w	r0, [r1, #182]	; 0xb6
   1a91e:	6868      	ldr	r0, [r5, #4]
   1a920:	f8a0 60f2 	strh.w	r6, [r0, #242]	; 0xf2
   1a924:	f890 10f4 	ldrb.w	r1, [r0, #244]	; 0xf4
   1a928:	1c49      	adds	r1, r1, #1
   1a92a:	f880 10f4 	strb.w	r1, [r0, #244]	; 0xf4
   1a92e:	2000      	movs	r0, #0
   1a930:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1a932:	0000      	.short	0x0000
   1a934:	200001a0 	.word	0x200001a0
   1a938:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a93c:	4604      	mov	r4, r0
   1a93e:	6840      	ldr	r0, [r0, #4]
   1a940:	f890 10b5 	ldrb.w	r1, [r0, #181]	; 0xb5
   1a944:	2923      	cmp	r1, #35	; 0x23
   1a946:	bf0c      	ite	eq
   1a948:	2501      	moveq	r5, #1
   1a94a:	2500      	movne	r5, #0
   1a94c:	f890 10b6 	ldrb.w	r1, [r0, #182]	; 0xb6
   1a950:	2925      	cmp	r1, #37	; 0x25
   1a952:	bf08      	it	eq
   1a954:	f100 07b6 	addeq.w	r7, r0, #182	; 0xb6
   1a958:	d006      	beq.n	1a968 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1840>
   1a95a:	2d00      	cmp	r5, #0
   1a95c:	bf12      	itee	ne
   1a95e:	f100 07b5 	addne.w	r7, r0, #181	; 0xb5
   1a962:	2002      	moveq	r0, #2
   1a964:	e8bd 8ff8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a968:	f8df a228 	ldr.w	sl, [pc, #552]	; 1ab94 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1a6c>
   1a96c:	f8da 000c 	ldr.w	r0, [sl, #12]
   1a970:	f005 ff98 	bl	208a4 <sym_A6H6572F75Y3NWHNM7XTQ5XKFPHT472D7ZS7PFQ>
   1a974:	f10a 0618 	add.w	r6, sl, #24
   1a978:	f04f 0b01 	mov.w	fp, #1
   1a97c:	f04f 0900 	mov.w	r9, #0
   1a980:	2800      	cmp	r0, #0
   1a982:	d059      	beq.n	1aa38 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1910>
   1a984:	f8da 800c 	ldr.w	r8, [sl, #12]
   1a988:	4640      	mov	r0, r8
   1a98a:	f005 ff9a 	bl	208c2 <sym_IMNEYE333DZSYFXBOKOMWVRET5JB5STH5YU7A5A>
   1a98e:	9000      	str	r0, [sp, #0]
   1a990:	4640      	mov	r0, r8
   1a992:	f005 ff98 	bl	208c6 <sym_UA37MSV2DKCYXYIDDSBDMFEEGPUD3YMYMAH3IEI>
   1a996:	4680      	mov	r8, r0
   1a998:	f005 fc61 	bl	2025e <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
   1a99c:	0001      	movs	r1, r0
   1a99e:	d01f      	beq.n	1a9e0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x18b8>
   1a9a0:	6872      	ldr	r2, [r6, #4]
   1a9a2:	f892 006e 	ldrb.w	r0, [r2, #110]	; 0x6e
   1a9a6:	4288      	cmp	r0, r1
   1a9a8:	d01a      	beq.n	1a9e0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x18b8>
   1a9aa:	f892 3154 	ldrb.w	r3, [r2, #340]	; 0x154
   1a9ae:	2b01      	cmp	r3, #1
   1a9b0:	d02c      	beq.n	1aa0c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x18e4>
   1a9b2:	f892 306a 	ldrb.w	r3, [r2, #106]	; 0x6a
   1a9b6:	ea13 0f08 	tst.w	r3, r8
   1a9ba:	d03d      	beq.n	1aa38 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1910>
   1a9bc:	2d00      	cmp	r5, #0
   1a9be:	bf04      	itt	eq
   1a9c0:	f892 2067 	ldrbeq.w	r2, [r2, #103]	; 0x67
   1a9c4:	ea12 0f08 	tsteq.w	r2, r8
   1a9c8:	d10a      	bne.n	1a9e0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x18b8>
   1a9ca:	b328      	cbz	r0, 1aa18 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x18f0>
   1a9cc:	2804      	cmp	r0, #4
   1a9ce:	bf18      	it	ne
   1a9d0:	2904      	cmpne	r1, #4
   1a9d2:	d026      	beq.n	1aa22 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x18fa>
   1a9d4:	2808      	cmp	r0, #8
   1a9d6:	bf18      	it	ne
   1a9d8:	2908      	cmpne	r1, #8
   1a9da:	d025      	beq.n	1aa28 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1900>
   1a9dc:	4288      	cmp	r0, r1
   1a9de:	d82b      	bhi.n	1aa38 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1910>
   1a9e0:	f8dd 8000 	ldr.w	r8, [sp]
   1a9e4:	4640      	mov	r0, r8
   1a9e6:	f005 fc3a 	bl	2025e <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
   1a9ea:	0001      	movs	r1, r0
   1a9ec:	d045      	beq.n	1aa7a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1952>
   1a9ee:	6870      	ldr	r0, [r6, #4]
   1a9f0:	f890 206f 	ldrb.w	r2, [r0, #111]	; 0x6f
   1a9f4:	428a      	cmp	r2, r1
   1a9f6:	d040      	beq.n	1aa7a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1952>
   1a9f8:	f890 1154 	ldrb.w	r1, [r0, #340]	; 0x154
   1a9fc:	2901      	cmp	r1, #1
   1a9fe:	d016      	beq.n	1aa2e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1906>
   1aa00:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
   1aa04:	ea10 0f08 	tst.w	r0, r8
   1aa08:	d016      	beq.n	1aa38 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1910>
   1aa0a:	e036      	b.n	1aa7a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1952>
   1aa0c:	f892 3156 	ldrb.w	r3, [r2, #342]	; 0x156
   1aa10:	ea13 0f08 	tst.w	r3, r8
   1aa14:	d1d2      	bne.n	1a9bc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1894>
   1aa16:	e00f      	b.n	1aa38 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1910>
   1aa18:	f240 1193 	movw	r1, #403	; 0x193
   1aa1c:	2006      	movs	r0, #6
   1aa1e:	f7f6 ffaf 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1aa22:	4288      	cmp	r0, r1
   1aa24:	d308      	bcc.n	1aa38 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1910>
   1aa26:	e7db      	b.n	1a9e0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x18b8>
   1aa28:	4288      	cmp	r0, r1
   1aa2a:	d305      	bcc.n	1aa38 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1910>
   1aa2c:	e7d8      	b.n	1a9e0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x18b8>
   1aa2e:	f890 0157 	ldrb.w	r0, [r0, #343]	; 0x157
   1aa32:	ea10 0f08 	tst.w	r0, r8
   1aa36:	d120      	bne.n	1aa7a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1952>
   1aa38:	6860      	ldr	r0, [r4, #4]
   1aa3a:	f04f 0800 	mov.w	r8, #0
   1aa3e:	f890 1154 	ldrb.w	r1, [r0, #340]	; 0x154
   1aa42:	2901      	cmp	r1, #1
   1aa44:	bf0a      	itet	eq
   1aa46:	201e      	moveq	r0, #30
   1aa48:	f880 9154 	strbne.w	r9, [r0, #340]	; 0x154
   1aa4c:	f7ff fc82 	bleq	1a354 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x122c>
   1aa50:	b3cd      	cbz	r5, 1aac6 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x199e>
   1aa52:	f8da 000c 	ldr.w	r0, [sl, #12]
   1aa56:	6861      	ldr	r1, [r4, #4]
   1aa58:	78c0      	ldrb	r0, [r0, #3]
   1aa5a:	f881 0139 	strb.w	r0, [r1, #313]	; 0x139
   1aa5e:	fa0b f000 	lsl.w	r0, fp, r0
   1aa62:	6861      	ldr	r1, [r4, #4]
   1aa64:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
   1aa68:	d02f      	beq.n	1aaca <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x19a2>
   1aa6a:	200b      	movs	r0, #11
   1aa6c:	f881 00b5 	strb.w	r0, [r1, #181]	; 0xb5
   1aa70:	6860      	ldr	r0, [r4, #4]
   1aa72:	f890 00f0 	ldrb.w	r0, [r0, #240]	; 0xf0
   1aa76:	b338      	cbz	r0, 1aac8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x19a0>
   1aa78:	e040      	b.n	1aafc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x19d4>
   1aa7a:	466a      	mov	r2, sp
   1aa7c:	6860      	ldr	r0, [r4, #4]
   1aa7e:	f8da 100c 	ldr.w	r1, [sl, #12]
   1aa82:	f7f9 faf1 	bl	14068 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q>
   1aa86:	b3e0      	cbz	r0, 1ab02 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x19da>
   1aa88:	f8da 000c 	ldr.w	r0, [sl, #12]
   1aa8c:	f005 ff08 	bl	208a0 <sym_FVNWXAKGSIJN4YGWC4O4B4H2WPPILAIKB7LLDVI>
   1aa90:	4601      	mov	r1, r0
   1aa92:	6860      	ldr	r0, [r4, #4]
   1aa94:	f8a0 1344 	strh.w	r1, [r0, #836]	; 0x344
   1aa98:	6860      	ldr	r0, [r4, #4]
   1aa9a:	f8b0 20ac 	ldrh.w	r2, [r0, #172]	; 0xac
   1aa9e:	1a89      	subs	r1, r1, r2
   1aaa0:	b209      	sxth	r1, r1
   1aaa2:	f647 72fe 	movw	r2, #32766	; 0x7ffe
   1aaa6:	428a      	cmp	r2, r1
   1aaa8:	bfa8      	it	ge
   1aaaa:	2900      	cmpge	r1, #0
   1aaac:	dd50      	ble.n	1ab50 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1a28>
   1aaae:	f89d 1000 	ldrb.w	r1, [sp]
   1aab2:	f880 1346 	strb.w	r1, [r0, #838]	; 0x346
   1aab6:	6861      	ldr	r1, [r4, #4]
   1aab8:	f89d 0001 	ldrb.w	r0, [sp, #1]
   1aabc:	f881 0347 	strb.w	r0, [r1, #839]	; 0x347
   1aac0:	2027      	movs	r0, #39	; 0x27
   1aac2:	7038      	strb	r0, [r7, #0]
   1aac4:	e04d      	b.n	1ab62 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1a3a>
   1aac6:	e00a      	b.n	1aade <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x19b6>
   1aac8:	e004      	b.n	1aad4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x19ac>
   1aaca:	f240 4163 	movw	r1, #1123	; 0x463
   1aace:	2031      	movs	r0, #49	; 0x31
   1aad0:	f7f6 ff56 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1aad4:	f240 416b 	movw	r1, #1131	; 0x46b
   1aad8:	2031      	movs	r0, #49	; 0x31
   1aada:	f7f6 ff51 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1aade:	f887 9000 	strb.w	r9, [r7]
   1aae2:	6871      	ldr	r1, [r6, #4]
   1aae4:	f891 00f4 	ldrb.w	r0, [r1, #244]	; 0xf4
   1aae8:	1e40      	subs	r0, r0, #1
   1aaea:	b240      	sxtb	r0, r0
   1aaec:	f881 00f4 	strb.w	r0, [r1, #244]	; 0xf4
   1aaf0:	2800      	cmp	r0, #0
   1aaf2:	db47      	blt.n	1ab84 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1a5c>
   1aaf4:	4620      	mov	r0, r4
   1aaf6:	f7ff fd71 	bl	1a5dc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x14b4>
   1aafa:	4680      	mov	r8, r0
   1aafc:	4640      	mov	r0, r8
   1aafe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ab02:	e7ff      	b.n	1ab04 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x19dc>
   1ab04:	6860      	ldr	r0, [r4, #4]
   1ab06:	f890 1154 	ldrb.w	r1, [r0, #340]	; 0x154
   1ab0a:	2901      	cmp	r1, #1
   1ab0c:	bf18      	it	ne
   1ab0e:	f880 9154 	strbne.w	r9, [r0, #340]	; 0x154
   1ab12:	d007      	beq.n	1ab24 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x19fc>
   1ab14:	6860      	ldr	r0, [r4, #4]
   1ab16:	f100 01b6 	add.w	r1, r0, #182	; 0xb6
   1ab1a:	42b9      	cmp	r1, r7
   1ab1c:	bf08      	it	eq
   1ab1e:	f880 90b6 	strbeq.w	r9, [r0, #182]	; 0xb6
   1ab22:	e01e      	b.n	1ab62 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1a3a>
   1ab24:	f8b0 30ac 	ldrh.w	r3, [r0, #172]	; 0xac
   1ab28:	f500 7251 	add.w	r2, r0, #836	; 0x344
   1ab2c:	f890 106e 	ldrb.w	r1, [r0, #110]	; 0x6e
   1ab30:	f8b0 0158 	ldrh.w	r0, [r0, #344]	; 0x158
   1ab34:	f005 fbbb 	bl	202ae <sym_CB3FDFEUY3F2NWFVYZOUMB3I5QKHLDIUWWP26EA>
   1ab38:	b120      	cbz	r0, 1ab44 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1a1c>
   1ab3a:	6861      	ldr	r1, [r4, #4]
   1ab3c:	2029      	movs	r0, #41	; 0x29
   1ab3e:	f881 00b5 	strb.w	r0, [r1, #181]	; 0xb5
   1ab42:	e7e7      	b.n	1ab14 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x19ec>
   1ab44:	2000      	movs	r0, #0
   1ab46:	f7ff fc05 	bl	1a354 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x122c>
   1ab4a:	f887 9000 	strb.w	r9, [r7]
   1ab4e:	e7e1      	b.n	1ab14 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x19ec>
   1ab50:	2128      	movs	r1, #40	; 0x28
   1ab52:	f880 10d5 	strb.w	r1, [r0, #213]	; 0xd5
   1ab56:	6861      	ldr	r1, [r4, #4]
   1ab58:	220a      	movs	r2, #10
   1ab5a:	f101 00cc 	add.w	r0, r1, #204	; 0xcc
   1ab5e:	f7f9 fcf5 	bl	1454c <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
   1ab62:	6860      	ldr	r0, [r4, #4]
   1ab64:	f100 01b6 	add.w	r1, r0, #182	; 0xb6
   1ab68:	42b9      	cmp	r1, r7
   1ab6a:	bf18      	it	ne
   1ab6c:	f880 90f0 	strbne.w	r9, [r0, #240]	; 0xf0
   1ab70:	d10d      	bne.n	1ab8e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1a66>
   1ab72:	6871      	ldr	r1, [r6, #4]
   1ab74:	f891 00f4 	ldrb.w	r0, [r1, #244]	; 0xf4
   1ab78:	1e40      	subs	r0, r0, #1
   1ab7a:	b240      	sxtb	r0, r0
   1ab7c:	f881 00f4 	strb.w	r0, [r1, #244]	; 0xf4
   1ab80:	2800      	cmp	r0, #0
   1ab82:	da04      	bge.n	1ab8e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1a66>
   1ab84:	f240 11f3 	movw	r1, #499	; 0x1f3
   1ab88:	2031      	movs	r0, #49	; 0x31
   1ab8a:	f7f6 fef9 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1ab8e:	2000      	movs	r0, #0
   1ab90:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ab94:	200001a0 	.word	0x200001a0
   1ab98:	b570      	push	{r4, r5, r6, lr}
   1ab9a:	6840      	ldr	r0, [r0, #4]
   1ab9c:	4d25      	ldr	r5, [pc, #148]	; (1ac34 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1b0c>)
   1ab9e:	f890 1106 	ldrb.w	r1, [r0, #262]	; 0x106
   1aba2:	f041 0104 	orr.w	r1, r1, #4
   1aba6:	f880 1106 	strb.w	r1, [r0, #262]	; 0x106
   1abaa:	68e8      	ldr	r0, [r5, #12]
   1abac:	f005 fe8d 	bl	208ca <sym_65MVSHFHYY3W6LGERKUEYJPJ7ENCODZZSM2L7CQ>
   1abb0:	4604      	mov	r4, r0
   1abb2:	68e8      	ldr	r0, [r5, #12]
   1abb4:	f005 fe8d 	bl	208d2 <sym_MR2HDMT6FMX7P5HJAUSXDTOYNLKDM5AILMXKYDY>
   1abb8:	4601      	mov	r1, r0
   1abba:	4620      	mov	r0, r4
   1abbc:	2400      	movs	r4, #0
   1abbe:	2823      	cmp	r0, #35	; 0x23
   1abc0:	d028      	beq.n	1ac14 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1aec>
   1abc2:	dc05      	bgt.n	1abd0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1aa8>
   1abc4:	4d1c      	ldr	r5, [pc, #112]	; (1ac38 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1b10>)
   1abc6:	2816      	cmp	r0, #22
   1abc8:	d007      	beq.n	1abda <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1ab2>
   1abca:	2820      	cmp	r0, #32
   1abcc:	d027      	beq.n	1ac1e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1af6>
   1abce:	e02f      	b.n	1ac30 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1b08>
   1abd0:	2824      	cmp	r0, #36	; 0x24
   1abd2:	bf18      	it	ne
   1abd4:	2825      	cmpne	r0, #37	; 0x25
   1abd6:	d12b      	bne.n	1ac30 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1b08>
   1abd8:	e01c      	b.n	1ac14 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1aec>
   1abda:	6868      	ldr	r0, [r5, #4]
   1abdc:	f890 20b5 	ldrb.w	r2, [r0, #181]	; 0xb5
   1abe0:	2a23      	cmp	r2, #35	; 0x23
   1abe2:	bf08      	it	eq
   1abe4:	4608      	moveq	r0, r1
   1abe6:	d00c      	beq.n	1ac02 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1ada>
   1abe8:	2a2f      	cmp	r2, #47	; 0x2f
   1abea:	d121      	bne.n	1ac30 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1b08>
   1abec:	f890 20b6 	ldrb.w	r2, [r0, #182]	; 0xb6
   1abf0:	2301      	movs	r3, #1
   1abf2:	210b      	movs	r1, #11
   1abf4:	30a0      	adds	r0, #160	; 0xa0
   1abf6:	f005 fa6a 	bl	200ce <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   1abfa:	2800      	cmp	r0, #0
   1abfc:	bf08      	it	eq
   1abfe:	202a      	moveq	r0, #42	; 0x2a
   1ac00:	d101      	bne.n	1ac06 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1ade>
   1ac02:	f7ff fba7 	bl	1a354 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x122c>
   1ac06:	6869      	ldr	r1, [r5, #4]
   1ac08:	2000      	movs	r0, #0
   1ac0a:	f881 00b5 	strb.w	r0, [r1, #181]	; 0xb5
   1ac0e:	f881 00f0 	strb.w	r0, [r1, #240]	; 0xf0
   1ac12:	e00d      	b.n	1ac30 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1b08>
   1ac14:	4a09      	ldr	r2, [pc, #36]	; (1ac3c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1b14>)
   1ac16:	6812      	ldr	r2, [r2, #0]
   1ac18:	b152      	cbz	r2, 1ac30 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1b08>
   1ac1a:	4790      	blx	r2
   1ac1c:	e007      	b.n	1ac2e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1b06>
   1ac1e:	686a      	ldr	r2, [r5, #4]
   1ac20:	f102 03a0 	add.w	r3, r2, #160	; 0xa0
   1ac24:	460a      	mov	r2, r1
   1ac26:	4601      	mov	r1, r0
   1ac28:	4618      	mov	r0, r3
   1ac2a:	f000 fb2d 	bl	1b288 <sym_EL223BILUJWMS5MXXVJZFJZDY7WL7XPCLRINOVA>
   1ac2e:	4604      	mov	r4, r0
   1ac30:	4620      	mov	r0, r4
   1ac32:	bd70      	pop	{r4, r5, r6, pc}
   1ac34:	200001a0 	.word	0x200001a0
   1ac38:	200001b8 	.word	0x200001b8
   1ac3c:	20000318 	.word	0x20000318
   1ac40:	b570      	push	{r4, r5, r6, lr}
   1ac42:	4d26      	ldr	r5, [pc, #152]	; (1acdc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1bb4>)
   1ac44:	4824      	ldr	r0, [pc, #144]	; (1acd8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1bb0>)
   1ac46:	686b      	ldr	r3, [r5, #4]
   1ac48:	68c0      	ldr	r0, [r0, #12]
   1ac4a:	f893 20b5 	ldrb.w	r2, [r3, #181]	; 0xb5
   1ac4e:	7901      	ldrb	r1, [r0, #4]
   1ac50:	2a23      	cmp	r2, #35	; 0x23
   1ac52:	bf1a      	itte	ne
   1ac54:	4610      	movne	r0, r2
   1ac56:	2a2f      	cmpne	r2, #47	; 0x2f
   1ac58:	2016      	moveq	r0, #22
   1ac5a:	d003      	beq.n	1ac64 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1b3c>
   1ac5c:	2a2a      	cmp	r2, #42	; 0x2a
   1ac5e:	bf0c      	ite	eq
   1ac60:	2023      	moveq	r0, #35	; 0x23
   1ac62:	20fe      	movne	r0, #254	; 0xfe
   1ac64:	2400      	movs	r4, #0
   1ac66:	2823      	cmp	r0, #35	; 0x23
   1ac68:	d027      	beq.n	1acba <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1b92>
   1ac6a:	dc04      	bgt.n	1ac76 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1b4e>
   1ac6c:	2816      	cmp	r0, #22
   1ac6e:	d007      	beq.n	1ac80 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1b58>
   1ac70:	2820      	cmp	r0, #32
   1ac72:	d027      	beq.n	1acc4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1b9c>
   1ac74:	e02d      	b.n	1acd2 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1baa>
   1ac76:	2824      	cmp	r0, #36	; 0x24
   1ac78:	bf18      	it	ne
   1ac7a:	2825      	cmpne	r0, #37	; 0x25
   1ac7c:	d129      	bne.n	1acd2 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1baa>
   1ac7e:	e01c      	b.n	1acba <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1b92>
   1ac80:	4608      	mov	r0, r1
   1ac82:	2a23      	cmp	r2, #35	; 0x23
   1ac84:	d002      	beq.n	1ac8c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1b64>
   1ac86:	2a2f      	cmp	r2, #47	; 0x2f
   1ac88:	d003      	beq.n	1ac92 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1b6a>
   1ac8a:	e022      	b.n	1acd2 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1baa>
   1ac8c:	f7ff fb62 	bl	1a354 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x122c>
   1ac90:	e00c      	b.n	1acac <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1b84>
   1ac92:	f893 20b6 	ldrb.w	r2, [r3, #182]	; 0xb6
   1ac96:	f103 00a0 	add.w	r0, r3, #160	; 0xa0
   1ac9a:	2301      	movs	r3, #1
   1ac9c:	210b      	movs	r1, #11
   1ac9e:	f005 fa16 	bl	200ce <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   1aca2:	2800      	cmp	r0, #0
   1aca4:	bf04      	itt	eq
   1aca6:	202a      	moveq	r0, #42	; 0x2a
   1aca8:	f7ff fb54 	bleq	1a354 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x122c>
   1acac:	2000      	movs	r0, #0
   1acae:	6869      	ldr	r1, [r5, #4]
   1acb0:	f881 00b5 	strb.w	r0, [r1, #181]	; 0xb5
   1acb4:	f881 00f0 	strb.w	r0, [r1, #240]	; 0xf0
   1acb8:	e00b      	b.n	1acd2 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1baa>
   1acba:	4a09      	ldr	r2, [pc, #36]	; (1ace0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1bb8>)
   1acbc:	6812      	ldr	r2, [r2, #0]
   1acbe:	b142      	cbz	r2, 1acd2 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1baa>
   1acc0:	4790      	blx	r2
   1acc2:	e005      	b.n	1acd0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1ba8>
   1acc4:	460a      	mov	r2, r1
   1acc6:	4601      	mov	r1, r0
   1acc8:	f103 00a0 	add.w	r0, r3, #160	; 0xa0
   1accc:	f000 fadc 	bl	1b288 <sym_EL223BILUJWMS5MXXVJZFJZDY7WL7XPCLRINOVA>
   1acd0:	4604      	mov	r4, r0
   1acd2:	4620      	mov	r0, r4
   1acd4:	bd70      	pop	{r4, r5, r6, pc}
   1acd6:	0000      	.short	0x0000
   1acd8:	200001a0 	.word	0x200001a0
   1acdc:	200001b8 	.word	0x200001b8
   1ace0:	20000318 	.word	0x20000318
   1ace4:	b510      	push	{r4, lr}
   1ace6:	6841      	ldr	r1, [r0, #4]
   1ace8:	f891 10b6 	ldrb.w	r1, [r1, #182]	; 0xb6
   1acec:	291a      	cmp	r1, #26
   1acee:	bf1c      	itt	ne
   1acf0:	2002      	movne	r0, #2
   1acf2:	bd10      	popne	{r4, pc}
   1acf4:	490a      	ldr	r1, [pc, #40]	; (1ad20 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1bf8>)
   1acf6:	684a      	ldr	r2, [r1, #4]
   1acf8:	f892 10f4 	ldrb.w	r1, [r2, #244]	; 0xf4
   1acfc:	1e49      	subs	r1, r1, #1
   1acfe:	b249      	sxtb	r1, r1
   1ad00:	f882 10f4 	strb.w	r1, [r2, #244]	; 0xf4
   1ad04:	2900      	cmp	r1, #0
   1ad06:	da04      	bge.n	1ad12 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1bea>
   1ad08:	f240 11f3 	movw	r1, #499	; 0x1f3
   1ad0c:	2031      	movs	r0, #49	; 0x31
   1ad0e:	f7f6 fe37 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1ad12:	6840      	ldr	r0, [r0, #4]
   1ad14:	211e      	movs	r1, #30
   1ad16:	f880 10b6 	strb.w	r1, [r0, #182]	; 0xb6
   1ad1a:	2000      	movs	r0, #0
   1ad1c:	bd10      	pop	{r4, pc}
   1ad1e:	0000      	.short	0x0000
   1ad20:	200001b8 	.word	0x200001b8
   1ad24:	b510      	push	{r4, lr}
   1ad26:	4604      	mov	r4, r0
   1ad28:	6840      	ldr	r0, [r0, #4]
   1ad2a:	2301      	movs	r3, #1
   1ad2c:	4619      	mov	r1, r3
   1ad2e:	f890 20b7 	ldrb.w	r2, [r0, #183]	; 0xb7
   1ad32:	30a0      	adds	r0, #160	; 0xa0
   1ad34:	f005 f9cb 	bl	200ce <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   1ad38:	2800      	cmp	r0, #0
   1ad3a:	bf1c      	itt	ne
   1ad3c:	2000      	movne	r0, #0
   1ad3e:	bd10      	popne	{r4, pc}
   1ad40:	4806      	ldr	r0, [pc, #24]	; (1ad5c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1c34>)
   1ad42:	68c0      	ldr	r0, [r0, #12]
   1ad44:	f005 fdfb 	bl	2093e <sym_AFBV6ZWWJ5TP5BBQPAY4D2XGGYVLQVI65FY6JPY>
   1ad48:	6861      	ldr	r1, [r4, #4]
   1ad4a:	f881 00b8 	strb.w	r0, [r1, #184]	; 0xb8
   1ad4e:	6861      	ldr	r1, [r4, #4]
   1ad50:	2008      	movs	r0, #8
   1ad52:	f881 00b7 	strb.w	r0, [r1, #183]	; 0xb7
   1ad56:	2000      	movs	r0, #0
   1ad58:	bd10      	pop	{r4, pc}
   1ad5a:	0000      	.short	0x0000
   1ad5c:	200001a0 	.word	0x200001a0
   1ad60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ad64:	4f5f      	ldr	r7, [pc, #380]	; (1aee4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1dbc>)
   1ad66:	4604      	mov	r4, r0
   1ad68:	f107 0c18 	add.w	ip, r7, #24
   1ad6c:	68f8      	ldr	r0, [r7, #12]
   1ad6e:	2600      	movs	r6, #0
   1ad70:	f8dc 1004 	ldr.w	r1, [ip, #4]
   1ad74:	7903      	ldrb	r3, [r0, #4]
   1ad76:	6860      	ldr	r0, [r4, #4]
   1ad78:	f04f 0801 	mov.w	r8, #1
   1ad7c:	4635      	mov	r5, r6
   1ad7e:	f890 20b5 	ldrb.w	r2, [r0, #181]	; 0xb5
   1ad82:	2b16      	cmp	r3, #22
   1ad84:	d05a      	beq.n	1ae3c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1d14>
   1ad86:	dc08      	bgt.n	1ad9a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1c72>
   1ad88:	2b0e      	cmp	r3, #14
   1ad8a:	d00d      	beq.n	1ada8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1c80>
   1ad8c:	2b12      	cmp	r3, #18
   1ad8e:	d021      	beq.n	1add4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1cac>
   1ad90:	2b14      	cmp	r3, #20
   1ad92:	bf08      	it	eq
   1ad94:	2a1f      	cmpeq	r2, #31
   1ad96:	d030      	beq.n	1adfa <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1cd2>
   1ad98:	e0a0      	b.n	1aedc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1db4>
   1ad9a:	2b17      	cmp	r3, #23
   1ad9c:	d06e      	beq.n	1ae7c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1d54>
   1ad9e:	2b23      	cmp	r3, #35	; 0x23
   1ada0:	d07e      	beq.n	1aea0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1d78>
   1ada2:	2bff      	cmp	r3, #255	; 0xff
   1ada4:	d07d      	beq.n	1aea2 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1d7a>
   1ada6:	e099      	b.n	1aedc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1db4>
   1ada8:	2a04      	cmp	r2, #4
   1adaa:	d146      	bne.n	1ae3a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1d12>
   1adac:	f880 50b5 	strb.w	r5, [r0, #181]	; 0xb5
   1adb0:	6860      	ldr	r0, [r4, #4]
   1adb2:	2207      	movs	r2, #7
   1adb4:	f880 50f0 	strb.w	r5, [r0, #240]	; 0xf0
   1adb8:	6860      	ldr	r0, [r4, #4]
   1adba:	f8a0 50ec 	strh.w	r5, [r0, #236]	; 0xec
   1adbe:	8808      	ldrh	r0, [r1, #0]
   1adc0:	f8a1 01fc 	strh.w	r0, [r1, #508]	; 0x1fc
   1adc4:	201a      	movs	r0, #26
   1adc6:	f881 01fa 	strb.w	r0, [r1, #506]	; 0x1fa
   1adca:	f501 70f8 	add.w	r0, r1, #496	; 0x1f0
   1adce:	f7f9 fbbd 	bl	1454c <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
   1add2:	e083      	b.n	1aedc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1db4>
   1add4:	2a11      	cmp	r2, #17
   1add6:	d130      	bne.n	1ae3a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1d12>
   1add8:	2301      	movs	r3, #1
   1adda:	2109      	movs	r1, #9
   1addc:	30a0      	adds	r0, #160	; 0xa0
   1adde:	f005 f976 	bl	200ce <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   1ade2:	2800      	cmp	r0, #0
   1ade4:	d07a      	beq.n	1aedc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1db4>
   1ade6:	6860      	ldr	r0, [r4, #4]
   1ade8:	f880 50e4 	strb.w	r5, [r0, #228]	; 0xe4
   1adec:	6860      	ldr	r0, [r4, #4]
   1adee:	f880 50f0 	strb.w	r5, [r0, #240]	; 0xf0
   1adf2:	6860      	ldr	r0, [r4, #4]
   1adf4:	f880 50b5 	strb.w	r5, [r0, #181]	; 0xb5
   1adf8:	e070      	b.n	1aedc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1db4>
   1adfa:	f880 50b5 	strb.w	r5, [r0, #181]	; 0xb5
   1adfe:	6860      	ldr	r0, [r4, #4]
   1ae00:	f880 50f0 	strb.w	r5, [r0, #240]	; 0xf0
   1ae04:	6860      	ldr	r0, [r4, #4]
   1ae06:	f8a0 50ec 	strh.w	r5, [r0, #236]	; 0xec
   1ae0a:	6860      	ldr	r0, [r4, #4]
   1ae0c:	f890 1106 	ldrb.w	r1, [r0, #262]	; 0x106
   1ae10:	f021 0120 	bic.w	r1, r1, #32
   1ae14:	f880 1106 	strb.w	r1, [r0, #262]	; 0x106
   1ae18:	f8dc 3004 	ldr.w	r3, [ip, #4]
   1ae1c:	f893 0064 	ldrb.w	r0, [r3, #100]	; 0x64
   1ae20:	2801      	cmp	r0, #1
   1ae22:	bf04      	itt	eq
   1ae24:	2002      	moveq	r0, #2
   1ae26:	f883 0064 	strbeq.w	r0, [r3, #100]	; 0x64
   1ae2a:	d057      	beq.n	1aedc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1db4>
   1ae2c:	f503 72d4 	add.w	r2, r3, #424	; 0x1a8
   1ae30:	f103 0130 	add.w	r1, r3, #48	; 0x30
   1ae34:	8818      	ldrh	r0, [r3, #0]
   1ae36:	f005 feb9 	bl	20bac <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
   1ae3a:	e04f      	b.n	1aedc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1db4>
   1ae3c:	2a23      	cmp	r2, #35	; 0x23
   1ae3e:	bf18      	it	ne
   1ae40:	2a2f      	cmpne	r2, #47	; 0x2f
   1ae42:	d14b      	bne.n	1aedc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1db4>
   1ae44:	f880 50b5 	strb.w	r5, [r0, #181]	; 0xb5
   1ae48:	6860      	ldr	r0, [r4, #4]
   1ae4a:	f880 50f0 	strb.w	r5, [r0, #240]	; 0xf0
   1ae4e:	6860      	ldr	r0, [r4, #4]
   1ae50:	f8a0 50ec 	strh.w	r5, [r0, #236]	; 0xec
   1ae54:	6860      	ldr	r0, [r4, #4]
   1ae56:	f890 10b6 	ldrb.w	r1, [r0, #182]	; 0xb6
   1ae5a:	2924      	cmp	r1, #36	; 0x24
   1ae5c:	d03e      	beq.n	1aedc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1db4>
   1ae5e:	f890 1107 	ldrb.w	r1, [r0, #263]	; 0x107
   1ae62:	f021 0101 	bic.w	r1, r1, #1
   1ae66:	f880 1107 	strb.w	r1, [r0, #263]	; 0x107
   1ae6a:	6860      	ldr	r0, [r4, #4]
   1ae6c:	f021 0108 	bic.w	r1, r1, #8
   1ae70:	f880 1107 	strb.w	r1, [r0, #263]	; 0x107
   1ae74:	201a      	movs	r0, #26
   1ae76:	f7ff fa6d 	bl	1a354 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x122c>
   1ae7a:	e02f      	b.n	1aedc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1db4>
   1ae7c:	f890 20b6 	ldrb.w	r2, [r0, #182]	; 0xb6
   1ae80:	2a25      	cmp	r2, #37	; 0x25
   1ae82:	d12b      	bne.n	1aedc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1db4>
   1ae84:	f880 50b6 	strb.w	r5, [r0, #182]	; 0xb6
   1ae88:	f891 00f4 	ldrb.w	r0, [r1, #244]	; 0xf4
   1ae8c:	1e40      	subs	r0, r0, #1
   1ae8e:	b240      	sxtb	r0, r0
   1ae90:	f881 00f4 	strb.w	r0, [r1, #244]	; 0xf4
   1ae94:	2800      	cmp	r0, #0
   1ae96:	da07      	bge.n	1aea8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1d80>
   1ae98:	f240 11f3 	movw	r1, #499	; 0x1f3
   1ae9c:	2031      	movs	r0, #49	; 0x31
   1ae9e:	e001      	b.n	1aea4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1d7c>
   1aea0:	e00e      	b.n	1aec0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1d98>
   1aea2:	e016      	b.n	1aed2 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1daa>
   1aea4:	f7f6 fd6c 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1aea8:	6860      	ldr	r0, [r4, #4]
   1aeaa:	f890 0154 	ldrb.w	r0, [r0, #340]	; 0x154
   1aeae:	2801      	cmp	r0, #1
   1aeb0:	bf04      	itt	eq
   1aeb2:	2000      	moveq	r0, #0
   1aeb4:	f7ff fa4e 	bleq	1a354 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x122c>
   1aeb8:	6860      	ldr	r0, [r4, #4]
   1aeba:	f880 5154 	strb.w	r5, [r0, #340]	; 0x154
   1aebe:	e00d      	b.n	1aedc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1db4>
   1aec0:	2a2a      	cmp	r2, #42	; 0x2a
   1aec2:	d10b      	bne.n	1aedc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1db4>
   1aec4:	4808      	ldr	r0, [pc, #32]	; (1aee8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1dc0>)
   1aec6:	6801      	ldr	r1, [r0, #0]
   1aec8:	2900      	cmp	r1, #0
   1aeca:	bf1c      	itt	ne
   1aecc:	4620      	movne	r0, r4
   1aece:	4788      	blxne	r1
   1aed0:	e004      	b.n	1aedc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1db4>
   1aed2:	6939      	ldr	r1, [r7, #16]
   1aed4:	2900      	cmp	r1, #0
   1aed6:	bf18      	it	ne
   1aed8:	f880 833e 	strbne.w	r8, [r0, #830]	; 0x33e
   1aedc:	4630      	mov	r0, r6
   1aede:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1aee2:	0000      	.short	0x0000
   1aee4:	200001a0 	.word	0x200001a0
   1aee8:	2000031c 	.word	0x2000031c
   1aeec:	b570      	push	{r4, r5, r6, lr}
   1aeee:	4604      	mov	r4, r0
   1aef0:	6840      	ldr	r0, [r0, #4]
   1aef2:	f890 10a4 	ldrb.w	r1, [r0, #164]	; 0xa4
   1aef6:	f011 0f02 	tst.w	r1, #2
   1aefa:	d00a      	beq.n	1af12 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1dea>
   1aefc:	f890 20b5 	ldrb.w	r2, [r0, #181]	; 0xb5
   1af00:	2301      	movs	r3, #1
   1af02:	2108      	movs	r1, #8
   1af04:	30a0      	adds	r0, #160	; 0xa0
   1af06:	f005 f8e2 	bl	200ce <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   1af0a:	2800      	cmp	r0, #0
   1af0c:	bf04      	itt	eq
   1af0e:	2001      	moveq	r0, #1
   1af10:	bd70      	popeq	{r4, r5, r6, pc}
   1af12:	6860      	ldr	r0, [r4, #4]
   1af14:	f890 00f7 	ldrb.w	r0, [r0, #247]	; 0xf7
   1af18:	f010 0f02 	tst.w	r0, #2
   1af1c:	d118      	bne.n	1af50 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1e28>
   1af1e:	4d2e      	ldr	r5, [pc, #184]	; (1afd8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1eb0>)
   1af20:	68e8      	ldr	r0, [r5, #12]
   1af22:	f005 fd0e 	bl	20942 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI>
   1af26:	6861      	ldr	r1, [r4, #4]
   1af28:	f881 0101 	strb.w	r0, [r1, #257]	; 0x101
   1af2c:	68e8      	ldr	r0, [r5, #12]
   1af2e:	6862      	ldr	r2, [r4, #4]
   1af30:	f8b0 1005 	ldrh.w	r1, [r0, #5]
   1af34:	f8a2 1102 	strh.w	r1, [r2, #258]	; 0x102
   1af38:	6861      	ldr	r1, [r4, #4]
   1af3a:	f8b0 0007 	ldrh.w	r0, [r0, #7]
   1af3e:	f8a1 0104 	strh.w	r0, [r1, #260]	; 0x104
   1af42:	6860      	ldr	r0, [r4, #4]
   1af44:	f890 10f7 	ldrb.w	r1, [r0, #247]	; 0xf7
   1af48:	f041 0102 	orr.w	r1, r1, #2
   1af4c:	f880 10f7 	strb.w	r1, [r0, #247]	; 0xf7
   1af50:	6860      	ldr	r0, [r4, #4]
   1af52:	f04f 0500 	mov.w	r5, #0
   1af56:	f890 10f7 	ldrb.w	r1, [r0, #247]	; 0xf7
   1af5a:	f011 0f01 	tst.w	r1, #1
   1af5e:	d11c      	bne.n	1af9a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1e72>
   1af60:	f8d0 10a4 	ldr.w	r1, [r0, #164]	; 0xa4
   1af64:	f011 0f02 	tst.w	r1, #2
   1af68:	d004      	beq.n	1af74 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1e4c>
   1af6a:	f240 3155 	movw	r1, #853	; 0x355
   1af6e:	2031      	movs	r0, #49	; 0x31
   1af70:	f7f6 fd06 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1af74:	f041 0102 	orr.w	r1, r1, #2
   1af78:	f8c0 10a4 	str.w	r1, [r0, #164]	; 0xa4
   1af7c:	4817      	ldr	r0, [pc, #92]	; (1afdc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1eb4>)
   1af7e:	6840      	ldr	r0, [r0, #4]
   1af80:	f8a0 50f2 	strh.w	r5, [r0, #242]	; 0xf2
   1af84:	f890 10f4 	ldrb.w	r1, [r0, #244]	; 0xf4
   1af88:	1c49      	adds	r1, r1, #1
   1af8a:	f880 10f4 	strb.w	r1, [r0, #244]	; 0xf4
   1af8e:	6860      	ldr	r0, [r4, #4]
   1af90:	f890 00f7 	ldrb.w	r0, [r0, #247]	; 0xf7
   1af94:	f010 0f01 	tst.w	r0, #1
   1af98:	d005      	beq.n	1afa6 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1e7e>
   1af9a:	6861      	ldr	r1, [r4, #4]
   1af9c:	2203      	movs	r2, #3
   1af9e:	f101 00f8 	add.w	r0, r1, #248	; 0xf8
   1afa2:	f7f9 fad3 	bl	1454c <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
   1afa6:	6860      	ldr	r0, [r4, #4]
   1afa8:	f890 10b5 	ldrb.w	r1, [r0, #181]	; 0xb5
   1afac:	2907      	cmp	r1, #7
   1afae:	d104      	bne.n	1afba <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1e92>
   1afb0:	f880 50b5 	strb.w	r5, [r0, #181]	; 0xb5
   1afb4:	6860      	ldr	r0, [r4, #4]
   1afb6:	f880 50f0 	strb.w	r5, [r0, #240]	; 0xf0
   1afba:	6860      	ldr	r0, [r4, #4]
   1afbc:	f890 115a 	ldrb.w	r1, [r0, #346]	; 0x15a
   1afc0:	b141      	cbz	r1, 1afd4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1eac>
   1afc2:	f880 515a 	strb.w	r5, [r0, #346]	; 0x15a
   1afc6:	6860      	ldr	r0, [r4, #4]
   1afc8:	f890 10b5 	ldrb.w	r1, [r0, #181]	; 0xb5
   1afcc:	2900      	cmp	r1, #0
   1afce:	bf08      	it	eq
   1afd0:	f880 50f0 	strbeq.w	r5, [r0, #240]	; 0xf0
   1afd4:	2000      	movs	r0, #0
   1afd6:	bd70      	pop	{r4, r5, r6, pc}
   1afd8:	200001a0 	.word	0x200001a0
   1afdc:	200001b8 	.word	0x200001b8
   1afe0:	b510      	push	{r4, lr}
   1afe2:	6841      	ldr	r1, [r0, #4]
   1afe4:	f8d1 00a4 	ldr.w	r0, [r1, #164]	; 0xa4
   1afe8:	f010 0f10 	tst.w	r0, #16
   1afec:	d007      	beq.n	1affe <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1ed6>
   1afee:	f010 0f20 	tst.w	r0, #32
   1aff2:	d009      	beq.n	1b008 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1ee0>
   1aff4:	f44f 6105 	mov.w	r1, #2128	; 0x850
   1aff8:	2031      	movs	r0, #49	; 0x31
   1affa:	f7f6 fcc1 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1affe:	f640 014f 	movw	r1, #2127	; 0x84f
   1b002:	2031      	movs	r0, #49	; 0x31
   1b004:	f7f6 fcbc 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1b008:	f020 0010 	bic.w	r0, r0, #16
   1b00c:	f8c1 00a4 	str.w	r0, [r1, #164]	; 0xa4
   1b010:	4807      	ldr	r0, [pc, #28]	; (1b030 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1f08>)
   1b012:	6841      	ldr	r1, [r0, #4]
   1b014:	f891 00f4 	ldrb.w	r0, [r1, #244]	; 0xf4
   1b018:	1e40      	subs	r0, r0, #1
   1b01a:	b240      	sxtb	r0, r0
   1b01c:	f881 00f4 	strb.w	r0, [r1, #244]	; 0xf4
   1b020:	2800      	cmp	r0, #0
   1b022:	bfa8      	it	ge
   1b024:	bd10      	popge	{r4, pc}
   1b026:	f240 11f3 	movw	r1, #499	; 0x1f3
   1b02a:	2031      	movs	r0, #49	; 0x31
   1b02c:	f7f6 fca8 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1b030:	200001b8 	.word	0x200001b8
   1b034:	b510      	push	{r4, lr}
   1b036:	6840      	ldr	r0, [r0, #4]
   1b038:	f8d0 10a4 	ldr.w	r1, [r0, #164]	; 0xa4
   1b03c:	f021 0104 	bic.w	r1, r1, #4
   1b040:	f8c0 10a4 	str.w	r1, [r0, #164]	; 0xa4
   1b044:	4807      	ldr	r0, [pc, #28]	; (1b064 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1f3c>)
   1b046:	6841      	ldr	r1, [r0, #4]
   1b048:	f891 00f4 	ldrb.w	r0, [r1, #244]	; 0xf4
   1b04c:	1e40      	subs	r0, r0, #1
   1b04e:	b240      	sxtb	r0, r0
   1b050:	f881 00f4 	strb.w	r0, [r1, #244]	; 0xf4
   1b054:	2800      	cmp	r0, #0
   1b056:	bfa8      	it	ge
   1b058:	bd10      	popge	{r4, pc}
   1b05a:	f240 11f3 	movw	r1, #499	; 0x1f3
   1b05e:	2031      	movs	r0, #49	; 0x31
   1b060:	f7f6 fc8e 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1b064:	200001b8 	.word	0x200001b8
   1b068:	b510      	push	{r4, lr}
   1b06a:	6840      	ldr	r0, [r0, #4]
   1b06c:	f890 10b6 	ldrb.w	r1, [r0, #182]	; 0xb6
   1b070:	2930      	cmp	r1, #48	; 0x30
   1b072:	d00a      	beq.n	1b08a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1f62>
   1b074:	2918      	cmp	r1, #24
   1b076:	bf02      	ittt	eq
   1b078:	211c      	moveq	r1, #28
   1b07a:	f880 10b6 	strbeq.w	r1, [r0, #182]	; 0xb6
   1b07e:	bd10      	popeq	{r4, pc}
   1b080:	f240 71ee 	movw	r1, #2030	; 0x7ee
   1b084:	2031      	movs	r0, #49	; 0x31
   1b086:	f7f6 fc7b 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1b08a:	2100      	movs	r1, #0
   1b08c:	f880 10b6 	strb.w	r1, [r0, #182]	; 0xb6
   1b090:	4807      	ldr	r0, [pc, #28]	; (1b0b0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1f88>)
   1b092:	6841      	ldr	r1, [r0, #4]
   1b094:	f891 00f4 	ldrb.w	r0, [r1, #244]	; 0xf4
   1b098:	1e40      	subs	r0, r0, #1
   1b09a:	b240      	sxtb	r0, r0
   1b09c:	f881 00f4 	strb.w	r0, [r1, #244]	; 0xf4
   1b0a0:	2800      	cmp	r0, #0
   1b0a2:	bfa8      	it	ge
   1b0a4:	bd10      	popge	{r4, pc}
   1b0a6:	f240 11f3 	movw	r1, #499	; 0x1f3
   1b0aa:	2031      	movs	r0, #49	; 0x31
   1b0ac:	f7f6 fc68 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1b0b0:	200001b8 	.word	0x200001b8
   1b0b4:	491e      	ldr	r1, [pc, #120]	; (1b130 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x2008>)
   1b0b6:	b510      	push	{r4, lr}
   1b0b8:	6889      	ldr	r1, [r1, #8]
   1b0ba:	2200      	movs	r2, #0
   1b0bc:	790b      	ldrb	r3, [r1, #4]
   1b0be:	6841      	ldr	r1, [r0, #4]
   1b0c0:	f891 c0b5 	ldrb.w	ip, [r1, #181]	; 0xb5
   1b0c4:	f1bc 0f0b 	cmp.w	ip, #11
   1b0c8:	bf04      	itt	eq
   1b0ca:	f891 c139 	ldrbeq.w	ip, [r1, #313]	; 0x139
   1b0ce:	459c      	cmpeq	ip, r3
   1b0d0:	d105      	bne.n	1b0de <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1fb6>
   1b0d2:	f881 20b5 	strb.w	r2, [r1, #181]	; 0xb5
   1b0d6:	6840      	ldr	r0, [r0, #4]
   1b0d8:	f880 20f0 	strb.w	r2, [r0, #240]	; 0xf0
   1b0dc:	bd10      	pop	{r4, pc}
   1b0de:	f8d1 c0a4 	ldr.w	ip, [r1, #164]	; 0xa4
   1b0e2:	f01c 0f08 	tst.w	ip, #8
   1b0e6:	d014      	beq.n	1b112 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1fea>
   1b0e8:	f02c 0008 	bic.w	r0, ip, #8
   1b0ec:	f8c1 00a4 	str.w	r0, [r1, #164]	; 0xa4
   1b0f0:	4810      	ldr	r0, [pc, #64]	; (1b134 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x200c>)
   1b0f2:	6841      	ldr	r1, [r0, #4]
   1b0f4:	f891 00f4 	ldrb.w	r0, [r1, #244]	; 0xf4
   1b0f8:	f1a0 0001 	sub.w	r0, r0, #1
   1b0fc:	b240      	sxtb	r0, r0
   1b0fe:	f881 00f4 	strb.w	r0, [r1, #244]	; 0xf4
   1b102:	2800      	cmp	r0, #0
   1b104:	bfa8      	it	ge
   1b106:	bd10      	popge	{r4, pc}
   1b108:	f240 11f3 	movw	r1, #499	; 0x1f3
   1b10c:	2031      	movs	r0, #49	; 0x31
   1b10e:	f7f6 fc37 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1b112:	2bff      	cmp	r3, #255	; 0xff
   1b114:	d004      	beq.n	1b120 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1ff8>
   1b116:	f240 719c 	movw	r1, #1948	; 0x79c
   1b11a:	2031      	movs	r0, #49	; 0x31
   1b11c:	f7f6 fc30 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1b120:	2331      	movs	r3, #49	; 0x31
   1b122:	f881 30b5 	strb.w	r3, [r1, #181]	; 0xb5
   1b126:	6840      	ldr	r0, [r0, #4]
   1b128:	f880 233c 	strb.w	r2, [r0, #828]	; 0x33c
   1b12c:	bd10      	pop	{r4, pc}
   1b12e:	0000      	.short	0x0000
   1b130:	200001a0 	.word	0x200001a0
   1b134:	200001b8 	.word	0x200001b8
   1b138:	b510      	push	{r4, lr}
   1b13a:	4604      	mov	r4, r0
   1b13c:	6840      	ldr	r0, [r0, #4]
   1b13e:	f890 10f7 	ldrb.w	r1, [r0, #247]	; 0xf7
   1b142:	f011 0f02 	tst.w	r1, #2
   1b146:	d01b      	beq.n	1b180 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x2058>
   1b148:	2100      	movs	r1, #0
   1b14a:	f880 10f0 	strb.w	r1, [r0, #240]	; 0xf0
   1b14e:	6860      	ldr	r0, [r4, #4]
   1b150:	f880 115a 	strb.w	r1, [r0, #346]	; 0x15a
   1b154:	6860      	ldr	r0, [r4, #4]
   1b156:	f890 00a4 	ldrb.w	r0, [r0, #164]	; 0xa4
   1b15a:	f010 0f02 	tst.w	r0, #2
   1b15e:	bf08      	it	eq
   1b160:	bd10      	popeq	{r4, pc}
   1b162:	4814      	ldr	r0, [pc, #80]	; (1b1b4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x208c>)
   1b164:	6841      	ldr	r1, [r0, #4]
   1b166:	f891 00f4 	ldrb.w	r0, [r1, #244]	; 0xf4
   1b16a:	1e40      	subs	r0, r0, #1
   1b16c:	b240      	sxtb	r0, r0
   1b16e:	f881 00f4 	strb.w	r0, [r1, #244]	; 0xf4
   1b172:	2800      	cmp	r0, #0
   1b174:	da16      	bge.n	1b1a4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x207c>
   1b176:	f240 11f3 	movw	r1, #499	; 0x1f3
   1b17a:	2031      	movs	r0, #49	; 0x31
   1b17c:	f7f6 fc00 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1b180:	f890 20b5 	ldrb.w	r2, [r0, #181]	; 0xb5
   1b184:	2301      	movs	r3, #1
   1b186:	2100      	movs	r1, #0
   1b188:	30a0      	adds	r0, #160	; 0xa0
   1b18a:	f004 ffa0 	bl	200ce <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   1b18e:	b120      	cbz	r0, 1b19a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x2072>
   1b190:	6861      	ldr	r1, [r4, #4]
   1b192:	2007      	movs	r0, #7
   1b194:	f881 00b5 	strb.w	r0, [r1, #181]	; 0xb5
   1b198:	e7dc      	b.n	1b154 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x202c>
   1b19a:	f640 0127 	movw	r1, #2087	; 0x827
   1b19e:	2031      	movs	r0, #49	; 0x31
   1b1a0:	f7f6 fbee 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1b1a4:	6860      	ldr	r0, [r4, #4]
   1b1a6:	f8d0 10a4 	ldr.w	r1, [r0, #164]	; 0xa4
   1b1aa:	f021 0102 	bic.w	r1, r1, #2
   1b1ae:	f8c0 10a4 	str.w	r1, [r0, #164]	; 0xa4
   1b1b2:	bd10      	pop	{r4, pc}
   1b1b4:	200001b8 	.word	0x200001b8

0001b1b8 <sym_C6DXC74AFTZZCXMRWBEAHQAQL3FVDNYSC45JP5Q>:
   1b1b8:	4802      	ldr	r0, [pc, #8]	; (1b1c4 <sym_C6DXC74AFTZZCXMRWBEAHQAQL3FVDNYSC45JP5Q+0xc>)
   1b1ba:	6840      	ldr	r0, [r0, #4]
   1b1bc:	f890 0058 	ldrb.w	r0, [r0, #88]	; 0x58
   1b1c0:	4770      	bx	lr
   1b1c2:	0000      	.short	0x0000
   1b1c4:	20000324 	.word	0x20000324

0001b1c8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA>:
   1b1c8:	480c      	ldr	r0, [pc, #48]	; (1b1fc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x34>)
   1b1ca:	6841      	ldr	r1, [r0, #4]
   1b1cc:	f891 0058 	ldrb.w	r0, [r1, #88]	; 0x58
   1b1d0:	2803      	cmp	r0, #3
   1b1d2:	d004      	beq.n	1b1de <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x16>
   1b1d4:	2801      	cmp	r0, #1
   1b1d6:	bf18      	it	ne
   1b1d8:	2802      	cmpne	r0, #2
   1b1da:	d007      	beq.n	1b1ec <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x24>
   1b1dc:	e004      	b.n	1b1e8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x20>
   1b1de:	f891 005a 	ldrb.w	r0, [r1, #90]	; 0x5a
   1b1e2:	2801      	cmp	r0, #1
   1b1e4:	bf08      	it	eq
   1b1e6:	4770      	bxeq	lr
   1b1e8:	2000      	movs	r0, #0
   1b1ea:	4770      	bx	lr
   1b1ec:	f891 0059 	ldrb.w	r0, [r1, #89]	; 0x59
   1b1f0:	2801      	cmp	r0, #1
   1b1f2:	bf14      	ite	ne
   1b1f4:	2803      	cmpne	r0, #3
   1b1f6:	2001      	moveq	r0, #1
   1b1f8:	d1f6      	bne.n	1b1e8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x20>
   1b1fa:	4770      	bx	lr
   1b1fc:	20000324 	.word	0x20000324

0001b200 <sym_O5ZKMVYIIKH3EAJRECXZFOUFXDW4MCMBS67KZZI>:
   1b200:	4901      	ldr	r1, [pc, #4]	; (1b208 <sym_O5ZKMVYIIKH3EAJRECXZFOUFXDW4MCMBS67KZZI+0x8>)
   1b202:	7048      	strb	r0, [r1, #1]
   1b204:	4770      	bx	lr
   1b206:	0000      	.short	0x0000
   1b208:	20000fb0 	.word	0x20000fb0

0001b20c <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI>:
   1b20c:	b570      	push	{r4, r5, r6, lr}
   1b20e:	4605      	mov	r5, r0
   1b210:	480a      	ldr	r0, [pc, #40]	; (1b23c <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x30>)
   1b212:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   1b216:	fbb0 f4f1 	udiv	r4, r0, r1
   1b21a:	f006 fce6 	bl	21bea <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x266>
   1b21e:	306b      	adds	r0, #107	; 0x6b
   1b220:	b280      	uxth	r0, r0
   1b222:	4420      	add	r0, r4
   1b224:	f100 01bc 	add.w	r1, r0, #188	; 0xbc
   1b228:	4628      	mov	r0, r5
   1b22a:	f005 fdac 	bl	20d86 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>
   1b22e:	f5b0 6f29 	cmp.w	r0, #2704	; 0xa90
   1b232:	bf28      	it	cs
   1b234:	f44f 6029 	movcs.w	r0, #2704	; 0xa90
   1b238:	b280      	uxth	r0, r0
   1b23a:	bd70      	pop	{r4, r5, r6, pc}
   1b23c:	000122f9 	.word	0x000122f9

0001b240 <sym_6A56LMFOW5CXUIKYPP4TFUBTCQL6RLVLTWUNNWQ>:
   1b240:	4801      	ldr	r0, [pc, #4]	; (1b248 <sym_6A56LMFOW5CXUIKYPP4TFUBTCQL6RLVLTWUNNWQ+0x8>)
   1b242:	7800      	ldrb	r0, [r0, #0]
   1b244:	4770      	bx	lr
   1b246:	0000      	.short	0x0000
   1b248:	20000fc0 	.word	0x20000fc0

0001b24c <sym_VLYLJO4IHKZ5KFL533HO4BOMGGZO5JX3I36W5OY>:
   1b24c:	b510      	push	{r4, lr}
   1b24e:	2100      	movs	r1, #0
   1b250:	7581      	strb	r1, [r0, #22]
   1b252:	f8b0 00a4 	ldrh.w	r0, [r0, #164]	; 0xa4
   1b256:	2107      	movs	r1, #7
   1b258:	f004 fc93 	bl	1fb82 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   1b25c:	b140      	cbz	r0, 1b270 <sym_VLYLJO4IHKZ5KFL533HO4BOMGGZO5JX3I36W5OY+0x24>
   1b25e:	6f00      	ldr	r0, [r0, #112]	; 0x70
   1b260:	b158      	cbz	r0, 1b27a <sym_VLYLJO4IHKZ5KFL533HO4BOMGGZO5JX3I36W5OY+0x2e>
   1b262:	222a      	movs	r2, #42	; 0x2a
   1b264:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1b268:	4906      	ldr	r1, [pc, #24]	; (1b284 <sym_VLYLJO4IHKZ5KFL533HO4BOMGGZO5JX3I36W5OY+0x38>)
   1b26a:	304e      	adds	r0, #78	; 0x4e
   1b26c:	f7f9 b96e 	b.w	1454c <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
   1b270:	f240 21b9 	movw	r1, #697	; 0x2b9
   1b274:	2013      	movs	r0, #19
   1b276:	f7f6 fb83 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1b27a:	f240 21bb 	movw	r1, #699	; 0x2bb
   1b27e:	2013      	movs	r0, #19
   1b280:	f7f6 fb7e 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1b284:	00021c2f 	.word	0x00021c2f

0001b288 <sym_EL223BILUJWMS5MXXVJZFJZDY7WL7XPCLRINOVA>:
   1b288:	b510      	push	{r4, lr}
   1b28a:	4614      	mov	r4, r2
   1b28c:	2920      	cmp	r1, #32
   1b28e:	bf07      	ittee	eq
   1b290:	7d81      	ldrbeq	r1, [r0, #22]
   1b292:	292d      	cmpeq	r1, #45	; 0x2d
   1b294:	2002      	movne	r0, #2
   1b296:	bd10      	popne	{r4, pc}
   1b298:	f04f 0100 	mov.w	r1, #0
   1b29c:	7581      	strb	r1, [r0, #22]
   1b29e:	f8a0 1052 	strh.w	r1, [r0, #82]	; 0x52
   1b2a2:	f890 1054 	ldrb.w	r1, [r0, #84]	; 0x54
   1b2a6:	f1a1 0101 	sub.w	r1, r1, #1
   1b2aa:	b249      	sxtb	r1, r1
   1b2ac:	f880 1054 	strb.w	r1, [r0, #84]	; 0x54
   1b2b0:	2900      	cmp	r1, #0
   1b2b2:	da04      	bge.n	1b2be <sym_EL223BILUJWMS5MXXVJZFJZDY7WL7XPCLRINOVA+0x36>
   1b2b4:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
   1b2b8:	2013      	movs	r0, #19
   1b2ba:	f7f6 fb61 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1b2be:	f8b0 00a4 	ldrh.w	r0, [r0, #164]	; 0xa4
   1b2c2:	2107      	movs	r1, #7
   1b2c4:	f004 fc5d 	bl	1fb82 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   1b2c8:	b150      	cbz	r0, 1b2e0 <sym_EL223BILUJWMS5MXXVJZFJZDY7WL7XPCLRINOVA+0x58>
   1b2ca:	6f00      	ldr	r0, [r0, #112]	; 0x70
   1b2cc:	b168      	cbz	r0, 1b2ea <sym_EL223BILUJWMS5MXXVJZFJZDY7WL7XPCLRINOVA+0x62>
   1b2ce:	f880 404d 	strb.w	r4, [r0, #77]	; 0x4d
   1b2d2:	2228      	movs	r2, #40	; 0x28
   1b2d4:	4907      	ldr	r1, [pc, #28]	; (1b2f4 <sym_EL223BILUJWMS5MXXVJZFJZDY7WL7XPCLRINOVA+0x6c>)
   1b2d6:	3044      	adds	r0, #68	; 0x44
   1b2d8:	f7f9 f938 	bl	1454c <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
   1b2dc:	2000      	movs	r0, #0
   1b2de:	bd10      	pop	{r4, pc}
   1b2e0:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
   1b2e4:	2013      	movs	r0, #19
   1b2e6:	f7f6 fb4b 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1b2ea:	f44f 71ef 	mov.w	r1, #478	; 0x1de
   1b2ee:	2013      	movs	r0, #19
   1b2f0:	f7f6 fb46 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1b2f4:	00021ca3 	.word	0x00021ca3

0001b2f8 <sym_I732BH4NXXB6CLIZXDAFDSMHDSVEYZLNAFI3W2Q>:
   1b2f8:	b51c      	push	{r2, r3, r4, lr}
   1b2fa:	2000      	movs	r0, #0
   1b2fc:	f000 fce8 	bl	1bcd0 <sym_4GYPMR5DNSPTTPCK56HLK457TQWWCRBKTZ6GK7Q>
   1b300:	490a      	ldr	r1, [pc, #40]	; (1b32c <sym_I732BH4NXXB6CLIZXDAFDSMHDSVEYZLNAFI3W2Q+0x34>)
   1b302:	2400      	movs	r4, #0
   1b304:	e9d1 010e 	ldrd	r0, r1, [r1, #56]	; 0x38
   1b308:	e9cd 0100 	strd	r0, r1, [sp]
   1b30c:	e007      	b.n	1b31e <sym_I732BH4NXXB6CLIZXDAFDSMHDSVEYZLNAFI3W2Q+0x26>
   1b30e:	bf00      	nop
   1b310:	f8bd 1004 	ldrh.w	r1, [sp, #4]
   1b314:	9800      	ldr	r0, [sp, #0]
   1b316:	f007 fedf 	bl	230d8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x41c>
   1b31a:	b100      	cbz	r0, 1b31e <sym_I732BH4NXXB6CLIZXDAFDSMHDSVEYZLNAFI3W2Q+0x26>
   1b31c:	4604      	mov	r4, r0
   1b31e:	4668      	mov	r0, sp
   1b320:	f7f6 fdc8 	bl	11eb4 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
   1b324:	2800      	cmp	r0, #0
   1b326:	d0f3      	beq.n	1b310 <sym_I732BH4NXXB6CLIZXDAFDSMHDSVEYZLNAFI3W2Q+0x18>
   1b328:	4620      	mov	r0, r4
   1b32a:	bd1c      	pop	{r2, r3, r4, pc}
   1b32c:	0001bc50 	.word	0x0001bc50

0001b330 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>:
   1b330:	4903      	ldr	r1, [pc, #12]	; (1b340 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA+0x10>)
   1b332:	884a      	ldrh	r2, [r1, #2]
   1b334:	8002      	strh	r2, [r0, #0]
   1b336:	7809      	ldrb	r1, [r1, #0]
   1b338:	7081      	strb	r1, [r0, #2]
   1b33a:	2000      	movs	r0, #0
   1b33c:	4770      	bx	lr
   1b33e:	0000      	.short	0x0000
   1b340:	20001720 	.word	0x20001720

0001b344 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY>:
   1b344:	b53e      	push	{r1, r2, r3, r4, r5, lr}
   1b346:	460c      	mov	r4, r1
   1b348:	4605      	mov	r5, r0
   1b34a:	8800      	ldrh	r0, [r0, #0]
   1b34c:	4669      	mov	r1, sp
   1b34e:	f004 fe73 	bl	20038 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   1b352:	2200      	movs	r2, #0
   1b354:	b128      	cbz	r0, 1b362 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY+0x1e>
   1b356:	f8c4 2002 	str.w	r2, [r4, #2]
   1b35a:	71a2      	strb	r2, [r4, #6]
   1b35c:	8022      	strh	r2, [r4, #0]
   1b35e:	2002      	movs	r0, #2
   1b360:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   1b362:	9901      	ldr	r1, [sp, #4]
   1b364:	f111 01a0 	adds.w	r1, r1, #160	; 0xa0
   1b368:	f881 206e 	strb.w	r2, [r1, #110]	; 0x6e
   1b36c:	f8d1 001e 	ldr.w	r0, [r1, #30]
   1b370:	f8c4 0002 	str.w	r0, [r4, #2]
   1b374:	f891 0022 	ldrb.w	r0, [r1, #34]	; 0x22
   1b378:	71a0      	strb	r0, [r4, #6]
   1b37a:	8828      	ldrh	r0, [r5, #0]
   1b37c:	8020      	strh	r0, [r4, #0]
   1b37e:	f891 006e 	ldrb.w	r0, [r1, #110]	; 0x6e
   1b382:	f88d 0008 	strb.w	r0, [sp, #8]
   1b386:	9802      	ldr	r0, [sp, #8]
   1b388:	9002      	str	r0, [sp, #8]
   1b38a:	f89d 0008 	ldrb.w	r0, [sp, #8]
   1b38e:	2800      	cmp	r0, #0
   1b390:	d1ea      	bne.n	1b368 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY+0x24>
   1b392:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0001b394 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A>:
   1b394:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
   1b396:	460d      	mov	r5, r1
   1b398:	4606      	mov	r6, r0
   1b39a:	8800      	ldrh	r0, [r0, #0]
   1b39c:	4669      	mov	r1, sp
   1b39e:	f004 fe4b 	bl	20038 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   1b3a2:	2800      	cmp	r0, #0
   1b3a4:	d11a      	bne.n	1b3dc <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x48>
   1b3a6:	f8dd 4004 	ldr.w	r4, [sp, #4]
   1b3aa:	2700      	movs	r7, #0
   1b3ac:	f884 7070 	strb.w	r7, [r4, #112]	; 0x70
   1b3b0:	f814 0f6e 	ldrb.w	r0, [r4, #110]!
   1b3b4:	f007 fc9d 	bl	22cf2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x36>
   1b3b8:	70a8      	strb	r0, [r5, #2]
   1b3ba:	7860      	ldrb	r0, [r4, #1]
   1b3bc:	f007 fc99 	bl	22cf2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x36>
   1b3c0:	70e8      	strb	r0, [r5, #3]
   1b3c2:	78a0      	ldrb	r0, [r4, #2]
   1b3c4:	f88d 0008 	strb.w	r0, [sp, #8]
   1b3c8:	9802      	ldr	r0, [sp, #8]
   1b3ca:	9002      	str	r0, [sp, #8]
   1b3cc:	f89d 0008 	ldrb.w	r0, [sp, #8]
   1b3d0:	3c6e      	subs	r4, #110	; 0x6e
   1b3d2:	2800      	cmp	r0, #0
   1b3d4:	d1ea      	bne.n	1b3ac <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x18>
   1b3d6:	8830      	ldrh	r0, [r6, #0]
   1b3d8:	8028      	strh	r0, [r5, #0]
   1b3da:	2000      	movs	r0, #0
   1b3dc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

0001b3e0 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q>:
   1b3e0:	4903      	ldr	r1, [pc, #12]	; (1b3f0 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q+0x10>)
   1b3e2:	888a      	ldrh	r2, [r1, #4]
   1b3e4:	8002      	strh	r2, [r0, #0]
   1b3e6:	88c9      	ldrh	r1, [r1, #6]
   1b3e8:	8041      	strh	r1, [r0, #2]
   1b3ea:	2000      	movs	r0, #0
   1b3ec:	4770      	bx	lr
   1b3ee:	0000      	.short	0x0000
   1b3f0:	20001856 	.word	0x20001856

0001b3f4 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA>:
   1b3f4:	b53e      	push	{r1, r2, r3, r4, r5, lr}
   1b3f6:	2400      	movs	r4, #0
   1b3f8:	a902      	add	r1, sp, #8
   1b3fa:	f88d 4004 	strb.w	r4, [sp, #4]
   1b3fe:	f88d 4008 	strb.w	r4, [sp, #8]
   1b402:	9100      	str	r1, [sp, #0]
   1b404:	7882      	ldrb	r2, [r0, #2]
   1b406:	7841      	ldrb	r1, [r0, #1]
   1b408:	7800      	ldrb	r0, [r0, #0]
   1b40a:	ab01      	add	r3, sp, #4
   1b40c:	f007 ff6e 	bl	232ec <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x630>
   1b410:	2800      	cmp	r0, #0
   1b412:	d112      	bne.n	1b43a <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x46>
   1b414:	f89d 0004 	ldrb.w	r0, [sp, #4]
   1b418:	f007 fd5e 	bl	22ed8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x21c>
   1b41c:	b170      	cbz	r0, 1b43c <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x48>
   1b41e:	f89d 0008 	ldrb.w	r0, [sp, #8]
   1b422:	f007 fd59 	bl	22ed8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x21c>
   1b426:	b148      	cbz	r0, 1b43c <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x48>
   1b428:	4805      	ldr	r0, [pc, #20]	; (1b440 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x4c>)
   1b42a:	f89d 1004 	ldrb.w	r1, [sp, #4]
   1b42e:	7481      	strb	r1, [r0, #18]
   1b430:	f89d 1008 	ldrb.w	r1, [sp, #8]
   1b434:	74c1      	strb	r1, [r0, #19]
   1b436:	8284      	strh	r4, [r0, #20]
   1b438:	2000      	movs	r0, #0
   1b43a:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   1b43c:	2011      	movs	r0, #17
   1b43e:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   1b440:	20001720 	.word	0x20001720

0001b444 <sym_D6MVGRLHYJG252OE4SOFHNIQS6JTUDSSXUELC5I>:
   1b444:	b57c      	push	{r2, r3, r4, r5, r6, lr}
   1b446:	4604      	mov	r4, r0
   1b448:	2000      	movs	r0, #0
   1b44a:	f000 fc41 	bl	1bcd0 <sym_4GYPMR5DNSPTTPCK56HLK457TQWWCRBKTZ6GK7Q>
   1b44e:	7860      	ldrb	r0, [r4, #1]
   1b450:	b300      	cbz	r0, 1b494 <sym_D6MVGRLHYJG252OE4SOFHNIQS6JTUDSSXUELC5I+0x50>
   1b452:	2500      	movs	r5, #0
   1b454:	e018      	b.n	1b488 <sym_D6MVGRLHYJG252OE4SOFHNIQS6JTUDSSXUELC5I+0x44>
   1b456:	bf00      	nop
   1b458:	eb04 0685 	add.w	r6, r4, r5, lsl #2
   1b45c:	2102      	movs	r1, #2
   1b45e:	78b0      	ldrb	r0, [r6, #2]
   1b460:	f004 fb8f 	bl	1fb82 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   1b464:	b120      	cbz	r0, 1b470 <sym_D6MVGRLHYJG252OE4SOFHNIQS6JTUDSSXUELC5I+0x2c>
   1b466:	7821      	ldrb	r1, [r4, #0]
   1b468:	2901      	cmp	r1, #1
   1b46a:	d003      	beq.n	1b474 <sym_D6MVGRLHYJG252OE4SOFHNIQS6JTUDSSXUELC5I+0x30>
   1b46c:	b131      	cbz	r1, 1b47c <sym_D6MVGRLHYJG252OE4SOFHNIQS6JTUDSSXUELC5I+0x38>
   1b46e:	e00f      	b.n	1b490 <sym_D6MVGRLHYJG252OE4SOFHNIQS6JTUDSSXUELC5I+0x4c>
   1b470:	2042      	movs	r0, #66	; 0x42
   1b472:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   1b474:	1cb1      	adds	r1, r6, #2
   1b476:	f000 fa77 	bl	1b968 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ>
   1b47a:	e001      	b.n	1b480 <sym_D6MVGRLHYJG252OE4SOFHNIQS6JTUDSSXUELC5I+0x3c>
   1b47c:	f007 fe77 	bl	2316e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x4b2>
   1b480:	2800      	cmp	r0, #0
   1b482:	d1f6      	bne.n	1b472 <sym_D6MVGRLHYJG252OE4SOFHNIQS6JTUDSSXUELC5I+0x2e>
   1b484:	1c6d      	adds	r5, r5, #1
   1b486:	b2ed      	uxtb	r5, r5
   1b488:	7860      	ldrb	r0, [r4, #1]
   1b48a:	42a8      	cmp	r0, r5
   1b48c:	d8e4      	bhi.n	1b458 <sym_D6MVGRLHYJG252OE4SOFHNIQS6JTUDSSXUELC5I+0x14>
   1b48e:	e014      	b.n	1b4ba <sym_D6MVGRLHYJG252OE4SOFHNIQS6JTUDSSXUELC5I+0x76>
   1b490:	2012      	movs	r0, #18
   1b492:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   1b494:	7820      	ldrb	r0, [r4, #0]
   1b496:	2800      	cmp	r0, #0
   1b498:	d1fa      	bne.n	1b490 <sym_D6MVGRLHYJG252OE4SOFHNIQS6JTUDSSXUELC5I+0x4c>
   1b49a:	4909      	ldr	r1, [pc, #36]	; (1b4c0 <sym_D6MVGRLHYJG252OE4SOFHNIQS6JTUDSSXUELC5I+0x7c>)
   1b49c:	e9d1 0110 	ldrd	r0, r1, [r1, #64]	; 0x40
   1b4a0:	e9cd 0100 	strd	r0, r1, [sp]
   1b4a4:	e004      	b.n	1b4b0 <sym_D6MVGRLHYJG252OE4SOFHNIQS6JTUDSSXUELC5I+0x6c>
   1b4a6:	9800      	ldr	r0, [sp, #0]
   1b4a8:	f007 fe61 	bl	2316e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x4b2>
   1b4ac:	2800      	cmp	r0, #0
   1b4ae:	d1f0      	bne.n	1b492 <sym_D6MVGRLHYJG252OE4SOFHNIQS6JTUDSSXUELC5I+0x4e>
   1b4b0:	4668      	mov	r0, sp
   1b4b2:	f7f6 fcff 	bl	11eb4 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
   1b4b6:	2800      	cmp	r0, #0
   1b4b8:	d0f5      	beq.n	1b4a6 <sym_D6MVGRLHYJG252OE4SOFHNIQS6JTUDSSXUELC5I+0x62>
   1b4ba:	2000      	movs	r0, #0
   1b4bc:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   1b4be:	0000      	.short	0x0000
   1b4c0:	0001bc50 	.word	0x0001bc50

0001b4c4 <sym_THCISJNP2ER2HFLUHGJZXHIPWIUIL2ZENNEO5RI>:
   1b4c4:	b57c      	push	{r2, r3, r4, r5, r6, lr}
   1b4c6:	4604      	mov	r4, r0
   1b4c8:	f004 fd9e 	bl	20008 <sym_J5GU2YSZI45UA3YHIJMMX6SWAYPKQ5HXJLXKPXY>
   1b4cc:	b148      	cbz	r0, 1b4e2 <sym_THCISJNP2ER2HFLUHGJZXHIPWIUIL2ZENNEO5RI+0x1e>
   1b4ce:	4620      	mov	r0, r4
   1b4d0:	f7f8 fe96 	bl	14200 <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ>
   1b4d4:	4c1d      	ldr	r4, [pc, #116]	; (1b54c <sym_THCISJNP2ER2HFLUHGJZXHIPWIUIL2ZENNEO5RI+0x88>)
   1b4d6:	25ff      	movs	r5, #255	; 0xff
   1b4d8:	e9d4 0106 	ldrd	r0, r1, [r4, #24]
   1b4dc:	e9cd 0100 	strd	r0, r1, [sp]
   1b4e0:	e004      	b.n	1b4ec <sym_THCISJNP2ER2HFLUHGJZXHIPWIUIL2ZENNEO5RI+0x28>
   1b4e2:	2012      	movs	r0, #18
   1b4e4:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   1b4e6:	9800      	ldr	r0, [sp, #0]
   1b4e8:	f880 52cc 	strb.w	r5, [r0, #716]	; 0x2cc
   1b4ec:	4668      	mov	r0, sp
   1b4ee:	f7f6 fce1 	bl	11eb4 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
   1b4f2:	2800      	cmp	r0, #0
   1b4f4:	d0f7      	beq.n	1b4e6 <sym_THCISJNP2ER2HFLUHGJZXHIPWIUIL2ZENNEO5RI+0x22>
   1b4f6:	e9d4 0108 	ldrd	r0, r1, [r4, #32]
   1b4fa:	2601      	movs	r6, #1
   1b4fc:	e9cd 0100 	strd	r0, r1, [sp]
   1b500:	e002      	b.n	1b508 <sym_THCISJNP2ER2HFLUHGJZXHIPWIUIL2ZENNEO5RI+0x44>
   1b502:	9800      	ldr	r0, [sp, #0]
   1b504:	f880 6083 	strb.w	r6, [r0, #131]	; 0x83
   1b508:	4668      	mov	r0, sp
   1b50a:	f7f6 fcd3 	bl	11eb4 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
   1b50e:	2800      	cmp	r0, #0
   1b510:	d0f7      	beq.n	1b502 <sym_THCISJNP2ER2HFLUHGJZXHIPWIUIL2ZENNEO5RI+0x3e>
   1b512:	e9d4 010a 	ldrd	r0, r1, [r4, #40]	; 0x28
   1b516:	e9cd 0100 	strd	r0, r1, [sp]
   1b51a:	e002      	b.n	1b522 <sym_THCISJNP2ER2HFLUHGJZXHIPWIUIL2ZENNEO5RI+0x5e>
   1b51c:	9800      	ldr	r0, [sp, #0]
   1b51e:	f880 5030 	strb.w	r5, [r0, #48]	; 0x30
   1b522:	4668      	mov	r0, sp
   1b524:	f7f6 fcc6 	bl	11eb4 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
   1b528:	2800      	cmp	r0, #0
   1b52a:	d0f7      	beq.n	1b51c <sym_THCISJNP2ER2HFLUHGJZXHIPWIUIL2ZENNEO5RI+0x58>
   1b52c:	e9d4 010c 	ldrd	r0, r1, [r4, #48]	; 0x30
   1b530:	e9cd 0100 	strd	r0, r1, [sp]
   1b534:	e002      	b.n	1b53c <sym_THCISJNP2ER2HFLUHGJZXHIPWIUIL2ZENNEO5RI+0x78>
   1b536:	9800      	ldr	r0, [sp, #0]
   1b538:	f880 5030 	strb.w	r5, [r0, #48]	; 0x30
   1b53c:	4668      	mov	r0, sp
   1b53e:	f7f6 fcb9 	bl	11eb4 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
   1b542:	2800      	cmp	r0, #0
   1b544:	d0f7      	beq.n	1b536 <sym_THCISJNP2ER2HFLUHGJZXHIPWIUIL2ZENNEO5RI+0x72>
   1b546:	2000      	movs	r0, #0
   1b548:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   1b54a:	0000      	.short	0x0000
   1b54c:	0001bc50 	.word	0x0001bc50

0001b550 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI>:
   1b550:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
   1b554:	460e      	mov	r6, r1
   1b556:	4605      	mov	r5, r0
   1b558:	7807      	ldrb	r7, [r0, #0]
   1b55a:	f007 fc57 	bl	22e0c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x150>
   1b55e:	2800      	cmp	r0, #0
   1b560:	d10a      	bne.n	1b578 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>
   1b562:	4628      	mov	r0, r5
   1b564:	f007 fc18 	bl	22d98 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xdc>
   1b568:	2800      	cmp	r0, #0
   1b56a:	d105      	bne.n	1b578 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>
   1b56c:	2002      	movs	r0, #2
   1b56e:	f7f6 fc1d 	bl	11dac <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
   1b572:	4287      	cmp	r7, r0
   1b574:	d302      	bcc.n	1b57c <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x2c>
   1b576:	2007      	movs	r0, #7
   1b578:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
   1b57c:	2102      	movs	r1, #2
   1b57e:	4638      	mov	r0, r7
   1b580:	f004 faff 	bl	1fb82 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   1b584:	0004      	movs	r4, r0
   1b586:	d003      	beq.n	1b590 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x40>
   1b588:	f006 f868 	bl	2165c <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
   1b58c:	bb68      	cbnz	r0, 1b5ea <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x9a>
   1b58e:	e00b      	b.n	1b5a8 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x58>
   1b590:	2102      	movs	r1, #2
   1b592:	4638      	mov	r0, r7
   1b594:	f004 faeb 	bl	1fb6e <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>
   1b598:	0004      	movs	r4, r0
   1b59a:	d011      	beq.n	1b5c0 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x70>
   1b59c:	4825      	ldr	r0, [pc, #148]	; (1b634 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0xe4>)
   1b59e:	f990 1000 	ldrsb.w	r1, [r0]
   1b5a2:	4620      	mov	r0, r4
   1b5a4:	f005 fca2 	bl	20eec <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>
   1b5a8:	4638      	mov	r0, r7
   1b5aa:	f007 fd86 	bl	230ba <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3fe>
   1b5ae:	b1f0      	cbz	r0, 1b5ee <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x9e>
   1b5b0:	3040      	adds	r0, #64	; 0x40
   1b5b2:	f007 ff57 	bl	23464 <sym_QCXUEKCKOZOTI5QRBCIDVHO5YKM3SRTXLZTJKAQ>
   1b5b6:	b1d0      	cbz	r0, 1b5ee <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x9e>
   1b5b8:	7868      	ldrb	r0, [r5, #1]
   1b5ba:	07c1      	lsls	r1, r0, #31
   1b5bc:	d10b      	bne.n	1b5d6 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x86>
   1b5be:	e004      	b.n	1b5ca <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x7a>
   1b5c0:	f241 3162 	movw	r1, #4962	; 0x1362
   1b5c4:	2039      	movs	r0, #57	; 0x39
   1b5c6:	f7f6 f9db 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1b5ca:	0781      	lsls	r1, r0, #30
   1b5cc:	d403      	bmi.n	1b5d6 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x86>
   1b5ce:	06c1      	lsls	r1, r0, #27
   1b5d0:	d401      	bmi.n	1b5d6 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x86>
   1b5d2:	0680      	lsls	r0, r0, #26
   1b5d4:	d501      	bpl.n	1b5da <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x8a>
   1b5d6:	2012      	movs	r0, #18
   1b5d8:	e7ce      	b.n	1b578 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>
   1b5da:	4620      	mov	r0, r4
   1b5dc:	f005 fdfc 	bl	211d8 <sym_4HDCBJCT2JOHNORERPDEH2A3V47FOX6NCTAKLUA>
   1b5e0:	f007 fb87 	bl	22cf2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x36>
   1b5e4:	7da9      	ldrb	r1, [r5, #22]
   1b5e6:	4288      	cmp	r0, r1
   1b5e8:	d001      	beq.n	1b5ee <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x9e>
   1b5ea:	200c      	movs	r0, #12
   1b5ec:	e7c4      	b.n	1b578 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>
   1b5ee:	4620      	mov	r0, r4
   1b5f0:	f005 fdd9 	bl	211a6 <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>
   1b5f4:	7030      	strb	r0, [r6, #0]
   1b5f6:	74e8      	strb	r0, [r5, #19]
   1b5f8:	4629      	mov	r1, r5
   1b5fa:	4620      	mov	r0, r4
   1b5fc:	f7f9 fed8 	bl	153b0 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA>
   1b600:	4606      	mov	r6, r0
   1b602:	7e68      	ldrb	r0, [r5, #25]
   1b604:	b1a0      	cbz	r0, 1b630 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0xe0>
   1b606:	b99e      	cbnz	r6, 1b630 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0xe0>
   1b608:	2200      	movs	r2, #0
   1b60a:	4668      	mov	r0, sp
   1b60c:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   1b60e:	f004 fb7a 	bl	1fd06 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
   1b612:	2200      	movs	r2, #0
   1b614:	2101      	movs	r1, #1
   1b616:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
   1b618:	f004 fbee 	bl	1fdf8 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
   1b61c:	2204      	movs	r2, #4
   1b61e:	4668      	mov	r0, sp
   1b620:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   1b622:	f004 fb70 	bl	1fd06 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
   1b626:	2200      	movs	r2, #0
   1b628:	4611      	mov	r1, r2
   1b62a:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
   1b62c:	f004 fbe4 	bl	1fdf8 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
   1b630:	4630      	mov	r0, r6
   1b632:	e7a1      	b.n	1b578 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>
   1b634:	20000334 	.word	0x20000334

0001b638 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>:
   1b638:	7801      	ldrb	r1, [r0, #0]
   1b63a:	b171      	cbz	r1, 1b65a <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
   1b63c:	7841      	ldrb	r1, [r0, #1]
   1b63e:	b161      	cbz	r1, 1b65a <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
   1b640:	8841      	ldrh	r1, [r0, #2]
   1b642:	291b      	cmp	r1, #27
   1b644:	d309      	bcc.n	1b65a <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
   1b646:	8881      	ldrh	r1, [r0, #4]
   1b648:	291b      	cmp	r1, #27
   1b64a:	d306      	bcc.n	1b65a <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
   1b64c:	4904      	ldr	r1, [pc, #16]	; (1b660 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x28>)
   1b64e:	6802      	ldr	r2, [r0, #0]
   1b650:	600a      	str	r2, [r1, #0]
   1b652:	8880      	ldrh	r0, [r0, #4]
   1b654:	8088      	strh	r0, [r1, #4]
   1b656:	2000      	movs	r0, #0
   1b658:	4770      	bx	lr
   1b65a:	2012      	movs	r0, #18
   1b65c:	4770      	bx	lr
   1b65e:	0000      	.short	0x0000
   1b660:	20001720 	.word	0x20001720

0001b664 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>:
   1b664:	6800      	ldr	r0, [r0, #0]
   1b666:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   1b66a:	d303      	bcc.n	1b674 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x10>
   1b66c:	4902      	ldr	r1, [pc, #8]	; (1b678 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x14>)
   1b66e:	6088      	str	r0, [r1, #8]
   1b670:	2000      	movs	r0, #0
   1b672:	4770      	bx	lr
   1b674:	2012      	movs	r0, #18
   1b676:	4770      	bx	lr
   1b678:	20001720 	.word	0x20001720

0001b67c <sym_RWX3ARC7RXCSYIP35ROTG7DUC5BPFDQF4B6XSYQ>:
   1b67c:	b57c      	push	{r2, r3, r4, r5, r6, lr}
   1b67e:	4605      	mov	r5, r0
   1b680:	7800      	ldrb	r0, [r0, #0]
   1b682:	b198      	cbz	r0, 1b6ac <sym_RWX3ARC7RXCSYIP35ROTG7DUC5BPFDQF4B6XSYQ+0x30>
   1b684:	4668      	mov	r0, sp
   1b686:	f7f5 ffbd 	bl	11604 <mpsl_fem_pa_is_configured>
   1b68a:	f89d 0000 	ldrb.w	r0, [sp]
   1b68e:	b108      	cbz	r0, 1b694 <sym_RWX3ARC7RXCSYIP35ROTG7DUC5BPFDQF4B6XSYQ+0x18>
   1b690:	2401      	movs	r4, #1
   1b692:	e000      	b.n	1b696 <sym_RWX3ARC7RXCSYIP35ROTG7DUC5BPFDQF4B6XSYQ+0x1a>
   1b694:	2400      	movs	r4, #0
   1b696:	a801      	add	r0, sp, #4
   1b698:	f7f5 ff9c 	bl	115d4 <mpsl_fem_lna_is_configured>
   1b69c:	f89d 0004 	ldrb.w	r0, [sp, #4]
   1b6a0:	b100      	cbz	r0, 1b6a4 <sym_RWX3ARC7RXCSYIP35ROTG7DUC5BPFDQF4B6XSYQ+0x28>
   1b6a2:	2001      	movs	r0, #1
   1b6a4:	4304      	orrs	r4, r0
   1b6a6:	d001      	beq.n	1b6ac <sym_RWX3ARC7RXCSYIP35ROTG7DUC5BPFDQF4B6XSYQ+0x30>
   1b6a8:	200c      	movs	r0, #12
   1b6aa:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   1b6ac:	4902      	ldr	r1, [pc, #8]	; (1b6b8 <sym_RWX3ARC7RXCSYIP35ROTG7DUC5BPFDQF4B6XSYQ+0x3c>)
   1b6ae:	7828      	ldrb	r0, [r5, #0]
   1b6b0:	7208      	strb	r0, [r1, #8]
   1b6b2:	2000      	movs	r0, #0
   1b6b4:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   1b6b6:	0000      	.short	0x0000
   1b6b8:	20001856 	.word	0x20001856

0001b6bc <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>:
   1b6bc:	4a03      	ldr	r2, [pc, #12]	; (1b6cc <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x10>)
   1b6be:	e9d2 1204 	ldrd	r1, r2, [r2, #16]
   1b6c2:	6001      	str	r1, [r0, #0]
   1b6c4:	6042      	str	r2, [r0, #4]
   1b6c6:	2000      	movs	r0, #0
   1b6c8:	4770      	bx	lr
   1b6ca:	0000      	.short	0x0000
   1b6cc:	0001bc50 	.word	0x0001bc50

0001b6d0 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI>:
   1b6d0:	b510      	push	{r4, lr}
   1b6d2:	2005      	movs	r0, #5
   1b6d4:	f000 fb6a 	bl	1bdac <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>
   1b6d8:	f7fd fb48 	bl	18d6c <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI>
   1b6dc:	4902      	ldr	r1, [pc, #8]	; (1b6e8 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x18>)
   1b6de:	4801      	ldr	r0, [pc, #4]	; (1b6e4 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x14>)
   1b6e0:	6048      	str	r0, [r1, #4]
   1b6e2:	bd10      	pop	{r4, pc}
   1b6e4:	0001b719 	.word	0x0001b719
   1b6e8:	20000334 	.word	0x20000334
   1b6ec:	b51c      	push	{r2, r3, r4, lr}
   1b6ee:	4909      	ldr	r1, [pc, #36]	; (1b714 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x44>)
   1b6f0:	e9d1 0100 	ldrd	r0, r1, [r1]
   1b6f4:	e9cd 0100 	strd	r0, r1, [sp]
   1b6f8:	e005      	b.n	1b706 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x36>
   1b6fa:	9800      	ldr	r0, [sp, #0]
   1b6fc:	f005 ffae 	bl	2165c <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
   1b700:	b108      	cbz	r0, 1b706 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x36>
   1b702:	2001      	movs	r0, #1
   1b704:	bd1c      	pop	{r2, r3, r4, pc}
   1b706:	4668      	mov	r0, sp
   1b708:	f7f6 fbd4 	bl	11eb4 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
   1b70c:	2800      	cmp	r0, #0
   1b70e:	d0f4      	beq.n	1b6fa <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x2a>
   1b710:	2000      	movs	r0, #0
   1b712:	bd1c      	pop	{r2, r3, r4, pc}
   1b714:	0001bc50 	.word	0x0001bc50
   1b718:	e92d 43fe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, lr}
   1b71c:	4613      	mov	r3, r2
   1b71e:	4a34      	ldr	r2, [pc, #208]	; (1b7f0 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x120>)
   1b720:	460f      	mov	r7, r1
   1b722:	f8b0 1058 	ldrh.w	r1, [r0, #88]	; 0x58
   1b726:	8815      	ldrh	r5, [r2, #0]
   1b728:	f8b0 4056 	ldrh.w	r4, [r0, #86]	; 0x56
   1b72c:	428d      	cmp	r5, r1
   1b72e:	d300      	bcc.n	1b732 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x62>
   1b730:	460d      	mov	r5, r1
   1b732:	8891      	ldrh	r1, [r2, #4]
   1b734:	42a1      	cmp	r1, r4
   1b736:	d200      	bcs.n	1b73a <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x6a>
   1b738:	460c      	mov	r4, r1
   1b73a:	8851      	ldrh	r1, [r2, #2]
   1b73c:	f44f 6c29 	mov.w	ip, #2704	; 0xa90
   1b740:	4561      	cmp	r1, ip
   1b742:	d300      	bcc.n	1b746 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x76>
   1b744:	4661      	mov	r1, ip
   1b746:	88d6      	ldrh	r6, [r2, #6]
   1b748:	f640 0248 	movw	r2, #2120	; 0x848
   1b74c:	4566      	cmp	r6, ip
   1b74e:	d201      	bcs.n	1b754 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x84>
   1b750:	4296      	cmp	r6, r2
   1b752:	d300      	bcc.n	1b756 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x86>
   1b754:	4616      	mov	r6, r2
   1b756:	4291      	cmp	r1, r2
   1b758:	d300      	bcc.n	1b75c <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x8c>
   1b75a:	4611      	mov	r1, r2
   1b75c:	4688      	mov	r8, r1
   1b75e:	f44f 72a4 	mov.w	r2, #328	; 0x148
   1b762:	2c1b      	cmp	r4, #27
   1b764:	d001      	beq.n	1b76a <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x9a>
   1b766:	4296      	cmp	r6, r2
   1b768:	d103      	bne.n	1b772 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xa2>
   1b76a:	2d1b      	cmp	r5, #27
   1b76c:	d03e      	beq.n	1b7ec <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x11c>
   1b76e:	4590      	cmp	r8, r2
   1b770:	d03c      	beq.n	1b7ec <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x11c>
   1b772:	466a      	mov	r2, sp
   1b774:	4619      	mov	r1, r3
   1b776:	f007 fbd1 	bl	22f1c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x260>
   1b77a:	f8bd 0006 	ldrh.w	r0, [sp, #6]
   1b77e:	42a8      	cmp	r0, r5
   1b780:	d800      	bhi.n	1b784 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xb4>
   1b782:	4605      	mov	r5, r0
   1b784:	80fd      	strh	r5, [r7, #6]
   1b786:	f8bd 0008 	ldrh.w	r0, [sp, #8]
   1b78a:	4641      	mov	r1, r8
   1b78c:	4540      	cmp	r0, r8
   1b78e:	d900      	bls.n	1b792 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xc2>
   1b790:	4608      	mov	r0, r1
   1b792:	8138      	strh	r0, [r7, #8]
   1b794:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   1b798:	42a1      	cmp	r1, r4
   1b79a:	d800      	bhi.n	1b79e <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xce>
   1b79c:	460c      	mov	r4, r1
   1b79e:	807c      	strh	r4, [r7, #2]
   1b7a0:	f8bd 1004 	ldrh.w	r1, [sp, #4]
   1b7a4:	42b1      	cmp	r1, r6
   1b7a6:	d800      	bhi.n	1b7aa <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xda>
   1b7a8:	460e      	mov	r6, r1
   1b7aa:	80be      	strh	r6, [r7, #4]
   1b7ac:	21ff      	movs	r1, #255	; 0xff
   1b7ae:	7039      	strb	r1, [r7, #0]
   1b7b0:	3d1b      	subs	r5, #27
   1b7b2:	2de0      	cmp	r5, #224	; 0xe0
   1b7b4:	d902      	bls.n	1b7bc <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xec>
   1b7b6:	f640 51a2 	movw	r1, #3490	; 0xda2
   1b7ba:	e014      	b.n	1b7e6 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x116>
   1b7bc:	3c1b      	subs	r4, #27
   1b7be:	2ce0      	cmp	r4, #224	; 0xe0
   1b7c0:	d902      	bls.n	1b7c8 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xf8>
   1b7c2:	f640 51a4 	movw	r1, #3492	; 0xda4
   1b7c6:	e00e      	b.n	1b7e6 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x116>
   1b7c8:	f640 1148 	movw	r1, #2376	; 0x948
   1b7cc:	f5a0 70a4 	sub.w	r0, r0, #328	; 0x148
   1b7d0:	4288      	cmp	r0, r1
   1b7d2:	d902      	bls.n	1b7da <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x10a>
   1b7d4:	f640 51a6 	movw	r1, #3494	; 0xda6
   1b7d8:	e005      	b.n	1b7e6 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x116>
   1b7da:	f5a6 76a4 	sub.w	r6, r6, #328	; 0x148
   1b7de:	428e      	cmp	r6, r1
   1b7e0:	d904      	bls.n	1b7ec <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x11c>
   1b7e2:	f640 51a8 	movw	r1, #3496	; 0xda8
   1b7e6:	2039      	movs	r0, #57	; 0x39
   1b7e8:	f7f6 f8ca 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1b7ec:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}
   1b7f0:	20001856 	.word	0x20001856
   1b7f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b7f8:	461d      	mov	r5, r3
   1b7fa:	e9dd 4706 	ldrd	r4, r7, [sp, #24]
   1b7fe:	f1a1 0c06 	sub.w	ip, r1, #6
   1b802:	f640 437a 	movw	r3, #3194	; 0xc7a
   1b806:	9e08      	ldr	r6, [sp, #32]
   1b808:	459c      	cmp	ip, r3
   1b80a:	d805      	bhi.n	1b818 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x148>
   1b80c:	f1a2 0c06 	sub.w	ip, r2, #6
   1b810:	459c      	cmp	ip, r3
   1b812:	d801      	bhi.n	1b818 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x148>
   1b814:	2301      	movs	r3, #1
   1b816:	e000      	b.n	1b81a <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x14a>
   1b818:	2300      	movs	r3, #0
   1b81a:	b120      	cbz	r0, 1b826 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x156>
   1b81c:	f890 0073 	ldrb.w	r0, [r0, #115]	; 0x73
   1b820:	b168      	cbz	r0, 1b83e <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x16e>
   1b822:	b96b      	cbnz	r3, 1b840 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x170>
   1b824:	e002      	b.n	1b82c <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x15c>
   1b826:	4815      	ldr	r0, [pc, #84]	; (1b87c <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x1ac>)
   1b828:	7a00      	ldrb	r0, [r0, #8]
   1b82a:	e7f9      	b.n	1b820 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x150>
   1b82c:	f6a1 5001 	subw	r0, r1, #3329	; 0xd01
   1b830:	2806      	cmp	r0, #6
   1b832:	d821      	bhi.n	1b878 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x1a8>
   1b834:	f6a2 5001 	subw	r0, r2, #3329	; 0xd01
   1b838:	2806      	cmp	r0, #6
   1b83a:	d901      	bls.n	1b840 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x170>
   1b83c:	e01c      	b.n	1b878 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x1a8>
   1b83e:	b1db      	cbz	r3, 1b878 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x1a8>
   1b840:	4291      	cmp	r1, r2
   1b842:	d819      	bhi.n	1b878 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x1a8>
   1b844:	f5b5 7ffa 	cmp.w	r5, #500	; 0x1f4
   1b848:	d216      	bcs.n	1b878 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x1a8>
   1b84a:	f1a4 000a 	sub.w	r0, r4, #10
   1b84e:	f640 4176 	movw	r1, #3190	; 0xc76
   1b852:	4288      	cmp	r0, r1
   1b854:	d810      	bhi.n	1b878 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x1a8>
   1b856:	4610      	mov	r0, r2
   1b858:	f004 fc06 	bl	20068 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
   1b85c:	1c6d      	adds	r5, r5, #1
   1b85e:	4368      	muls	r0, r5
   1b860:	f240 2171 	movw	r1, #625	; 0x271
   1b864:	0040      	lsls	r0, r0, #1
   1b866:	434c      	muls	r4, r1
   1b868:	ebb0 1f04 	cmp.w	r0, r4, lsl #4
   1b86c:	d204      	bcs.n	1b878 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x1a8>
   1b86e:	42b7      	cmp	r7, r6
   1b870:	d802      	bhi.n	1b878 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x1a8>
   1b872:	2001      	movs	r0, #1
   1b874:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1b878:	2000      	movs	r0, #0
   1b87a:	e7fb      	b.n	1b874 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x1a4>
   1b87c:	20001856 	.word	0x20001856
   1b880:	b510      	push	{r4, lr}
   1b882:	4810      	ldr	r0, [pc, #64]	; (1b8c4 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x1f4>)
   1b884:	2100      	movs	r1, #0
   1b886:	4a10      	ldr	r2, [pc, #64]	; (1b8c8 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x1f8>)
   1b888:	75c1      	strb	r1, [r0, #23]
   1b88a:	8301      	strh	r1, [r0, #24]
   1b88c:	231b      	movs	r3, #27
   1b88e:	8013      	strh	r3, [r2, #0]
   1b890:	f44f 74a4 	mov.w	r4, #328	; 0x148
   1b894:	8054      	strh	r4, [r2, #2]
   1b896:	8093      	strh	r3, [r2, #4]
   1b898:	80d4      	strh	r4, [r2, #6]
   1b89a:	7481      	strb	r1, [r0, #18]
   1b89c:	74c1      	strb	r1, [r0, #19]
   1b89e:	7251      	strb	r1, [r2, #9]
   1b8a0:	2403      	movs	r4, #3
   1b8a2:	7004      	strb	r4, [r0, #0]
   1b8a4:	2402      	movs	r4, #2
   1b8a6:	7044      	strb	r4, [r0, #1]
   1b8a8:	8043      	strh	r3, [r0, #2]
   1b8aa:	8083      	strh	r3, [r0, #4]
   1b8ac:	f640 63a6 	movw	r3, #3750	; 0xea6
   1b8b0:	6083      	str	r3, [r0, #8]
   1b8b2:	005b      	lsls	r3, r3, #1
   1b8b4:	60c3      	str	r3, [r0, #12]
   1b8b6:	7211      	strb	r1, [r2, #8]
   1b8b8:	7291      	strb	r1, [r2, #10]
   1b8ba:	7581      	strb	r1, [r0, #22]
   1b8bc:	7401      	strb	r1, [r0, #16]
   1b8be:	4803      	ldr	r0, [pc, #12]	; (1b8cc <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x1fc>)
   1b8c0:	7001      	strb	r1, [r0, #0]
   1b8c2:	bd10      	pop	{r4, pc}
   1b8c4:	20001720 	.word	0x20001720
   1b8c8:	20001856 	.word	0x20001856
   1b8cc:	2000033c 	.word	0x2000033c
   1b8d0:	b530      	push	{r4, r5, lr}
   1b8d2:	b087      	sub	sp, #28
   1b8d4:	4605      	mov	r5, r0
   1b8d6:	8808      	ldrh	r0, [r1, #0]
   1b8d8:	f8ad 0004 	strh.w	r0, [sp, #4]
   1b8dc:	4813      	ldr	r0, [pc, #76]	; (1b92c <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x25c>)
   1b8de:	460c      	mov	r4, r1
   1b8e0:	ab03      	add	r3, sp, #12
   1b8e2:	7c81      	ldrb	r1, [r0, #18]
   1b8e4:	f88d 1006 	strb.w	r1, [sp, #6]
   1b8e8:	7cc1      	ldrb	r1, [r0, #19]
   1b8ea:	f88d 1007 	strb.w	r1, [sp, #7]
   1b8ee:	8a80      	ldrh	r0, [r0, #20]
   1b8f0:	f8ad 0008 	strh.w	r0, [sp, #8]
   1b8f4:	a804      	add	r0, sp, #16
   1b8f6:	9000      	str	r0, [sp, #0]
   1b8f8:	aa01      	add	r2, sp, #4
   1b8fa:	4621      	mov	r1, r4
   1b8fc:	4628      	mov	r0, r5
   1b8fe:	f007 fb47 	bl	22f90 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2d4>
   1b902:	0005      	movs	r5, r0
   1b904:	d110      	bne.n	1b928 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x258>
   1b906:	f89d 000c 	ldrb.w	r0, [sp, #12]
   1b90a:	f88d 0014 	strb.w	r0, [sp, #20]
   1b90e:	f89d 0010 	ldrb.w	r0, [sp, #16]
   1b912:	f88d 0015 	strb.w	r0, [sp, #21]
   1b916:	f8bd 0008 	ldrh.w	r0, [sp, #8]
   1b91a:	f8ad 0016 	strh.w	r0, [sp, #22]
   1b91e:	a905      	add	r1, sp, #20
   1b920:	4620      	mov	r0, r4
   1b922:	f004 fc98 	bl	20256 <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
   1b926:	4628      	mov	r0, r5
   1b928:	b007      	add	sp, #28
   1b92a:	bd30      	pop	{r4, r5, pc}
   1b92c:	20001720 	.word	0x20001720
   1b930:	b510      	push	{r4, lr}
   1b932:	2102      	movs	r1, #2
   1b934:	2000      	movs	r0, #0
   1b936:	f004 f924 	bl	1fb82 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   1b93a:	0004      	movs	r4, r0
   1b93c:	d10a      	bne.n	1b954 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x284>
   1b93e:	2102      	movs	r1, #2
   1b940:	f004 f915 	bl	1fb6e <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>
   1b944:	0004      	movs	r4, r0
   1b946:	d007      	beq.n	1b958 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x288>
   1b948:	4806      	ldr	r0, [pc, #24]	; (1b964 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x294>)
   1b94a:	f990 1000 	ldrsb.w	r1, [r0]
   1b94e:	4620      	mov	r0, r4
   1b950:	f005 facc 	bl	20eec <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>
   1b954:	4620      	mov	r0, r4
   1b956:	bd10      	pop	{r4, pc}
   1b958:	f240 2167 	movw	r1, #615	; 0x267
   1b95c:	2039      	movs	r0, #57	; 0x39
   1b95e:	f7f6 f80f 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1b962:	0000      	.short	0x0000
   1b964:	20000334 	.word	0x20000334

0001b968 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ>:
   1b968:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   1b96c:	460c      	mov	r4, r1
   1b96e:	4680      	mov	r8, r0
   1b970:	4605      	mov	r5, r0
   1b972:	f005 fc1b 	bl	211ac <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
   1b976:	b198      	cbz	r0, 1b9a0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x38>
   1b978:	4628      	mov	r0, r5
   1b97a:	f005 fc08 	bl	2118e <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
   1b97e:	b130      	cbz	r0, 1b98e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x26>
   1b980:	f8b4 1001 	ldrh.w	r1, [r4, #1]
   1b984:	2012      	movs	r0, #18
   1b986:	2900      	cmp	r1, #0
   1b988:	d00b      	beq.n	1b9a2 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
   1b98a:	2980      	cmp	r1, #128	; 0x80
   1b98c:	d809      	bhi.n	1b9a2 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
   1b98e:	4628      	mov	r0, r5
   1b990:	f005 fbc2 	bl	21118 <sym_JWG2K5Z2IDS7IGZ34EUMCNHIOV34425FH263YQQ>
   1b994:	b140      	cbz	r0, 1b9a8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x40>
   1b996:	4640      	mov	r0, r8
   1b998:	f005 fa70 	bl	20e7c <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y>
   1b99c:	b130      	cbz	r0, 1b9ac <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x44>
   1b99e:	e00a      	b.n	1b9b6 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x4e>
   1b9a0:	2042      	movs	r0, #66	; 0x42
   1b9a2:	b004      	add	sp, #16
   1b9a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1b9a8:	200c      	movs	r0, #12
   1b9aa:	e7fa      	b.n	1b9a2 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
   1b9ac:	4640      	mov	r0, r8
   1b9ae:	f005 fbe0 	bl	21172 <sym_TPWVJBQKX2TXZDZ4IZ6XDJYVEDFBPIX3TMZMRCQ>
   1b9b2:	2800      	cmp	r0, #0
   1b9b4:	d066      	beq.n	1ba84 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x11c>
   1b9b6:	4640      	mov	r0, r8
   1b9b8:	f005 fe50 	bl	2165c <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
   1b9bc:	2800      	cmp	r0, #0
   1b9be:	d1f3      	bne.n	1b9a8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x40>
   1b9c0:	4640      	mov	r0, r8
   1b9c2:	f005 fa78 	bl	20eb6 <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ>
   1b9c6:	2800      	cmp	r0, #0
   1b9c8:	d1ee      	bne.n	1b9a8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x40>
   1b9ca:	4640      	mov	r0, r8
   1b9cc:	f7f9 fbd0 	bl	15170 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ>
   1b9d0:	f8b4 6001 	ldrh.w	r6, [r4, #1]
   1b9d4:	f242 7010 	movw	r0, #10000	; 0x2710
   1b9d8:	4346      	muls	r6, r0
   1b9da:	78e1      	ldrb	r1, [r4, #3]
   1b9dc:	4640      	mov	r0, r8
   1b9de:	f005 fb92 	bl	21106 <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y>
   1b9e2:	7820      	ldrb	r0, [r4, #0]
   1b9e4:	f007 fb69 	bl	230ba <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3fe>
   1b9e8:	4d63      	ldr	r5, [pc, #396]	; (1bb78 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x210>)
   1b9ea:	b198      	cbz	r0, 1ba14 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xac>
   1b9ec:	4c63      	ldr	r4, [pc, #396]	; (1bb7c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x214>)
   1b9ee:	6821      	ldr	r1, [r4, #0]
   1b9f0:	b181      	cbz	r1, 1ba14 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xac>
   1b9f2:	3040      	adds	r0, #64	; 0x40
   1b9f4:	4607      	mov	r7, r0
   1b9f6:	f007 fd35 	bl	23464 <sym_QCXUEKCKOZOTI5QRBCIDVHO5YKM3SRTXLZTJKAQ>
   1b9fa:	b158      	cbz	r0, 1ba14 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xac>
   1b9fc:	4638      	mov	r0, r7
   1b9fe:	f007 fd41 	bl	23484 <sym_LNQ5OSSHLT2KR4OBXPN76EEGODICLRS65ENGIUY>
   1ba02:	b938      	cbnz	r0, 1ba14 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xac>
   1ba04:	6822      	ldr	r2, [r4, #0]
   1ba06:	4638      	mov	r0, r7
   1ba08:	68e9      	ldr	r1, [r5, #12]
   1ba0a:	4790      	blx	r2
   1ba0c:	b110      	cbz	r0, 1ba14 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xac>
   1ba0e:	f241 51ab 	movw	r1, #5547	; 0x15ab
   1ba12:	e096      	b.n	1bb42 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1da>
   1ba14:	4640      	mov	r0, r8
   1ba16:	f005 fbb0 	bl	2117a <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
   1ba1a:	b148      	cbz	r0, 1ba30 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xc8>
   1ba1c:	4640      	mov	r0, r8
   1ba1e:	f005 fbb6 	bl	2118e <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
   1ba22:	4f57      	ldr	r7, [pc, #348]	; (1bb80 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x218>)
   1ba24:	b180      	cbz	r0, 1ba48 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xe0>
   1ba26:	4640      	mov	r0, r8
   1ba28:	f005 fbb5 	bl	21196 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
   1ba2c:	b150      	cbz	r0, 1ba44 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xdc>
   1ba2e:	e00b      	b.n	1ba48 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xe0>
   1ba30:	4632      	mov	r2, r6
   1ba32:	2100      	movs	r1, #0
   1ba34:	4640      	mov	r0, r8
   1ba36:	f7fc f92d 	bl	17c94 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY>
   1ba3a:	2800      	cmp	r0, #0
   1ba3c:	d0b1      	beq.n	1b9a2 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
   1ba3e:	f241 51b5 	movw	r1, #5557	; 0x15b5
   1ba42:	e07e      	b.n	1bb42 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1da>
   1ba44:	7a38      	ldrb	r0, [r7, #8]
   1ba46:	b1e8      	cbz	r0, 1ba84 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x11c>
   1ba48:	2101      	movs	r1, #1
   1ba4a:	a801      	add	r0, sp, #4
   1ba4c:	f7f6 fa54 	bl	11ef8 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ>
   1ba50:	0004      	movs	r4, r0
   1ba52:	d060      	beq.n	1bb16 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1ae>
   1ba54:	2100      	movs	r1, #0
   1ba56:	f7f8 fa51 	bl	13efc <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
   1ba5a:	f8bd 0004 	ldrh.w	r0, [sp, #4]
   1ba5e:	8020      	strh	r0, [r4, #0]
   1ba60:	4621      	mov	r1, r4
   1ba62:	4640      	mov	r0, r8
   1ba64:	f005 fbba 	bl	211dc <sym_4FKJZF4AXR7RHM7IPPZMVUWU7W6MFHLX726TPNY>
   1ba68:	f000 f9ac 	bl	1bdc4 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
   1ba6c:	0940      	lsrs	r0, r0, #5
   1ba6e:	ea40 60c1 	orr.w	r0, r0, r1, lsl #27
   1ba72:	07c0      	lsls	r0, r0, #31
   1ba74:	f104 0030 	add.w	r0, r4, #48	; 0x30
   1ba78:	d006      	beq.n	1ba88 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x120>
   1ba7a:	886a      	ldrh	r2, [r5, #2]
   1ba7c:	88a9      	ldrh	r1, [r5, #4]
   1ba7e:	84c2      	strh	r2, [r0, #38]	; 0x26
   1ba80:	8501      	strh	r1, [r0, #40]	; 0x28
   1ba82:	e004      	b.n	1ba8e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x126>
   1ba84:	2012      	movs	r0, #18
   1ba86:	e78c      	b.n	1b9a2 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
   1ba88:	211b      	movs	r1, #27
   1ba8a:	84c1      	strh	r1, [r0, #38]	; 0x26
   1ba8c:	8501      	strh	r1, [r0, #40]	; 0x28
   1ba8e:	f000 f999 	bl	1bdc4 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
   1ba92:	0788      	lsls	r0, r1, #30
   1ba94:	d506      	bpl.n	1baa4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x13c>
   1ba96:	2001      	movs	r0, #1
   1ba98:	f88d 0008 	strb.w	r0, [sp, #8]
   1ba9c:	a802      	add	r0, sp, #8
   1ba9e:	9403      	str	r4, [sp, #12]
   1baa0:	f006 fa57 	bl	21f52 <sym_5FDRWQI6XUFWVRIX2PMRPNDHWCIMAZ67SSGSRVI>
   1baa4:	7a38      	ldrb	r0, [r7, #8]
   1baa6:	b100      	cbz	r0, 1baaa <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x142>
   1baa8:	2001      	movs	r0, #1
   1baaa:	f884 0073 	strb.w	r0, [r4, #115]	; 0x73
   1baae:	4835      	ldr	r0, [pc, #212]	; (1bb84 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x21c>)
   1bab0:	6802      	ldr	r2, [r0, #0]
   1bab2:	b182      	cbz	r2, 1bad6 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x16e>
   1bab4:	4832      	ldr	r0, [pc, #200]	; (1bb80 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x218>)
   1bab6:	4621      	mov	r1, r4
   1bab8:	300a      	adds	r0, #10
   1baba:	4790      	blx	r2
   1babc:	0007      	movs	r7, r0
   1babe:	d00a      	beq.n	1bad6 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x16e>
   1bac0:	2101      	movs	r1, #1
   1bac2:	f8bd 0004 	ldrh.w	r0, [sp, #4]
   1bac6:	f7f6 fa83 	bl	11fd0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
   1baca:	b110      	cbz	r0, 1bad2 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x16a>
   1bacc:	f241 51f4 	movw	r1, #5620	; 0x15f4
   1bad0:	e037      	b.n	1bb42 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1da>
   1bad2:	4638      	mov	r0, r7
   1bad4:	e765      	b.n	1b9a2 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
   1bad6:	68a8      	ldr	r0, [r5, #8]
   1bad8:	6320      	str	r0, [r4, #48]	; 0x30
   1bada:	f894 0073 	ldrb.w	r0, [r4, #115]	; 0x73
   1bade:	b110      	cbz	r0, 1bae6 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x17e>
   1bae0:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
   1bae4:	e001      	b.n	1baea <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x182>
   1bae6:	f641 574c 	movw	r7, #7500	; 0x1d4c
   1baea:	4640      	mov	r0, r8
   1baec:	f005 fb53 	bl	21196 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
   1baf0:	b910      	cbnz	r0, 1baf8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x190>
   1baf2:	4640      	mov	r0, r8
   1baf4:	f005 fb70 	bl	211d8 <sym_4HDCBJCT2JOHNORERPDEH2A3V47FOX6NCTAKLUA>
   1baf8:	4621      	mov	r1, r4
   1bafa:	2001      	movs	r0, #1
   1bafc:	6167      	str	r7, [r4, #20]
   1bafe:	f7ff fee7 	bl	1b8d0 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x200>
   1bb02:	b150      	cbz	r0, 1bb1a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1b2>
   1bb04:	2101      	movs	r1, #1
   1bb06:	f8bd 0004 	ldrh.w	r0, [sp, #4]
   1bb0a:	f7f6 fa61 	bl	11fd0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
   1bb0e:	b110      	cbz	r0, 1bb16 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1ae>
   1bb10:	f241 6117 	movw	r1, #5655	; 0x1617
   1bb14:	e015      	b.n	1bb42 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1da>
   1bb16:	2009      	movs	r0, #9
   1bb18:	e743      	b.n	1b9a2 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
   1bb1a:	7868      	ldrb	r0, [r5, #1]
   1bb1c:	9000      	str	r0, [sp, #0]
   1bb1e:	782b      	ldrb	r3, [r5, #0]
   1bb20:	88aa      	ldrh	r2, [r5, #4]
   1bb22:	8869      	ldrh	r1, [r5, #2]
   1bb24:	8820      	ldrh	r0, [r4, #0]
   1bb26:	f7f6 fb37 	bl	12198 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>
   1bb2a:	b110      	cbz	r0, 1bb32 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1ca>
   1bb2c:	f241 6122 	movw	r1, #5666	; 0x1622
   1bb30:	e007      	b.n	1bb42 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1da>
   1bb32:	4632      	mov	r2, r6
   1bb34:	4621      	mov	r1, r4
   1bb36:	4640      	mov	r0, r8
   1bb38:	f7fc f8ac 	bl	17c94 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY>
   1bb3c:	b120      	cbz	r0, 1bb48 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1e0>
   1bb3e:	f241 6124 	movw	r1, #5668	; 0x1624
   1bb42:	2039      	movs	r0, #57	; 0x39
   1bb44:	f7f5 ff1c 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1bb48:	480f      	ldr	r0, [pc, #60]	; (1bb88 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x220>)
   1bb4a:	6843      	ldr	r3, [r0, #4]
   1bb4c:	b123      	cbz	r3, 1bb58 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1f0>
   1bb4e:	2200      	movs	r2, #0
   1bb50:	f504 71a5 	add.w	r1, r4, #330	; 0x14a
   1bb54:	4620      	mov	r0, r4
   1bb56:	4798      	blx	r3
   1bb58:	f000 f934 	bl	1bdc4 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
   1bb5c:	0f40      	lsrs	r0, r0, #29
   1bb5e:	ea40 00c1 	orr.w	r0, r0, r1, lsl #3
   1bb62:	07c0      	lsls	r0, r0, #31
   1bb64:	d006      	beq.n	1bb74 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x20c>
   1bb66:	4809      	ldr	r0, [pc, #36]	; (1bb8c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x224>)
   1bb68:	6802      	ldr	r2, [r0, #0]
   1bb6a:	b11a      	cbz	r2, 1bb74 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x20c>
   1bb6c:	f8bd 1004 	ldrh.w	r1, [sp, #4]
   1bb70:	4620      	mov	r0, r4
   1bb72:	4790      	blx	r2
   1bb74:	2000      	movs	r0, #0
   1bb76:	e714      	b.n	1b9a2 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
   1bb78:	20001720 	.word	0x20001720
   1bb7c:	20000344 	.word	0x20000344
   1bb80:	20001856 	.word	0x20001856
   1bb84:	20000350 	.word	0x20000350
   1bb88:	20000334 	.word	0x20000334
   1bb8c:	2000034c 	.word	0x2000034c
   1bb90:	b570      	push	{r4, r5, r6, lr}
   1bb92:	4c0f      	ldr	r4, [pc, #60]	; (1bbd0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x268>)
   1bb94:	4605      	mov	r5, r0
   1bb96:	6820      	ldr	r0, [r4, #0]
   1bb98:	2800      	cmp	r0, #0
   1bb9a:	d017      	beq.n	1bbcc <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x264>
   1bb9c:	2104      	movs	r1, #4
   1bb9e:	4628      	mov	r0, r5
   1bba0:	f003 ffef 	bl	1fb82 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   1bba4:	2800      	cmp	r0, #0
   1bba6:	d011      	beq.n	1bbcc <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x264>
   1bba8:	6821      	ldr	r1, [r4, #0]
   1bbaa:	3050      	adds	r0, #80	; 0x50
   1bbac:	4788      	blx	r1
   1bbae:	b110      	cbz	r0, 1bbb6 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x24e>
   1bbb0:	f44f 6181 	mov.w	r1, #1032	; 0x408
   1bbb4:	e007      	b.n	1bbc6 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x25e>
   1bbb6:	2104      	movs	r1, #4
   1bbb8:	4628      	mov	r0, r5
   1bbba:	f7f6 fa09 	bl	11fd0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
   1bbbe:	2800      	cmp	r0, #0
   1bbc0:	d004      	beq.n	1bbcc <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x264>
   1bbc2:	f240 4109 	movw	r1, #1033	; 0x409
   1bbc6:	2039      	movs	r0, #57	; 0x39
   1bbc8:	f7f5 feda 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1bbcc:	bd70      	pop	{r4, r5, r6, pc}
   1bbce:	0000      	.short	0x0000
   1bbd0:	20000348 	.word	0x20000348
   1bbd4:	b51c      	push	{r2, r3, r4, lr}
   1bbd6:	f007 fabf 	bl	23158 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x49c>
   1bbda:	b110      	cbz	r0, 1bbe2 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x27a>
   1bbdc:	f7ff faf4 	bl	1b1c8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA>
   1bbe0:	b970      	cbnz	r0, 1bc00 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x298>
   1bbe2:	490c      	ldr	r1, [pc, #48]	; (1bc14 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2ac>)
   1bbe4:	e9d1 0102 	ldrd	r0, r1, [r1, #8]
   1bbe8:	e9cd 0100 	strd	r0, r1, [sp]
   1bbec:	e00a      	b.n	1bc04 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x29c>
   1bbee:	9c00      	ldr	r4, [sp, #0]
   1bbf0:	4620      	mov	r0, r4
   1bbf2:	f005 fd33 	bl	2165c <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
   1bbf6:	b128      	cbz	r0, 1bc04 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x29c>
   1bbf8:	4620      	mov	r0, r4
   1bbfa:	f005 fb4a 	bl	21292 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y>
   1bbfe:	b108      	cbz	r0, 1bc04 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x29c>
   1bc00:	2001      	movs	r0, #1
   1bc02:	bd1c      	pop	{r2, r3, r4, pc}
   1bc04:	4668      	mov	r0, sp
   1bc06:	f7f6 f955 	bl	11eb4 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
   1bc0a:	2800      	cmp	r0, #0
   1bc0c:	d0ef      	beq.n	1bbee <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x286>
   1bc0e:	2000      	movs	r0, #0
   1bc10:	bd1c      	pop	{r2, r3, r4, pc}
   1bc12:	0000      	.short	0x0000
   1bc14:	0001bc50 	.word	0x0001bc50
   1bc18:	b510      	push	{r4, lr}
   1bc1a:	4604      	mov	r4, r0
   1bc1c:	88c1      	ldrh	r1, [r0, #6]
   1bc1e:	8880      	ldrh	r0, [r0, #4]
   1bc20:	f007 f96e 	bl	22f00 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x244>
   1bc24:	2800      	cmp	r0, #0
   1bc26:	d10f      	bne.n	1bc48 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2e0>
   1bc28:	8861      	ldrh	r1, [r4, #2]
   1bc2a:	8820      	ldrh	r0, [r4, #0]
   1bc2c:	f007 f968 	bl	22f00 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x244>
   1bc30:	2800      	cmp	r0, #0
   1bc32:	d109      	bne.n	1bc48 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2e0>
   1bc34:	4805      	ldr	r0, [pc, #20]	; (1bc4c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2e4>)
   1bc36:	88a1      	ldrh	r1, [r4, #4]
   1bc38:	8081      	strh	r1, [r0, #4]
   1bc3a:	8821      	ldrh	r1, [r4, #0]
   1bc3c:	8001      	strh	r1, [r0, #0]
   1bc3e:	88e1      	ldrh	r1, [r4, #6]
   1bc40:	80c1      	strh	r1, [r0, #6]
   1bc42:	8861      	ldrh	r1, [r4, #2]
   1bc44:	8041      	strh	r1, [r0, #2]
   1bc46:	2000      	movs	r0, #0
   1bc48:	bd10      	pop	{r4, pc}
   1bc4a:	0000      	.short	0x0000
   1bc4c:	20001856 	.word	0x20001856
   1bc50:	00000000 	.word	0x00000000
   1bc54:	00020000 	.word	0x00020000
   1bc58:	00000000 	.word	0x00000000
   1bc5c:	00020000 	.word	0x00020000
   1bc60:	0c11fa0c 	.word	0x0c11fa0c
   1bc64:	11fa0059 	.word	0x11fa0059
	...
   1bc74:	00020000 	.word	0x00020000
   1bc78:	00000000 	.word	0x00000000
   1bc7c:	00030000 	.word	0x00030000
   1bc80:	00000000 	.word	0x00000000
   1bc84:	00050000 	.word	0x00050000
   1bc88:	00000000 	.word	0x00000000
   1bc8c:	00020000 	.word	0x00020000
   1bc90:	00000000 	.word	0x00000000
   1bc94:	00020000 	.word	0x00020000
   1bc98:	00000000 	.word	0x00000000
   1bc9c:	00040000 	.word	0x00040000

0001bca0 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>:
   1bca0:	b510      	push	{r4, lr}
   1bca2:	460c      	mov	r4, r1
   1bca4:	f7f8 ff6e 	bl	14b84 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA>
   1bca8:	4805      	ldr	r0, [pc, #20]	; (1bcc0 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ+0x20>)
   1bcaa:	6044      	str	r4, [r0, #4]
   1bcac:	6880      	ldr	r0, [r0, #8]
   1bcae:	f007 fb94 	bl	233da <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x71e>
   1bcb2:	f006 ff4a 	bl	22b4a <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>
   1bcb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1bcba:	f7f9 b907 	b.w	14ecc <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI>
   1bcbe:	0000      	.short	0x0000
   1bcc0:	20000354 	.word	0x20000354

0001bcc4 <sym_ZT5CPONXDAFRAB5RWMA6LXPAT5TEFYV2YKU6P6A>:
   1bcc4:	4801      	ldr	r0, [pc, #4]	; (1bccc <sym_ZT5CPONXDAFRAB5RWMA6LXPAT5TEFYV2YKU6P6A+0x8>)
   1bcc6:	7800      	ldrb	r0, [r0, #0]
   1bcc8:	4770      	bx	lr
   1bcca:	0000      	.short	0x0000
   1bccc:	20000354 	.word	0x20000354

0001bcd0 <sym_4GYPMR5DNSPTTPCK56HLK457TQWWCRBKTZ6GK7Q>:
   1bcd0:	4901      	ldr	r1, [pc, #4]	; (1bcd8 <sym_4GYPMR5DNSPTTPCK56HLK457TQWWCRBKTZ6GK7Q+0x8>)
   1bcd2:	7008      	strb	r0, [r1, #0]
   1bcd4:	4770      	bx	lr
   1bcd6:	0000      	.short	0x0000
   1bcd8:	20000354 	.word	0x20000354

0001bcdc <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>:
   1bcdc:	b510      	push	{r4, lr}
   1bcde:	4c05      	ldr	r4, [pc, #20]	; (1bcf4 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA+0x18>)
   1bce0:	68e0      	ldr	r0, [r4, #12]
   1bce2:	f007 fb7a 	bl	233da <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x71e>
   1bce6:	6920      	ldr	r0, [r4, #16]
   1bce8:	f007 fb77 	bl	233da <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x71e>
   1bcec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1bcf0:	f006 bfd4 	b.w	22c9c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>
   1bcf4:	20000354 	.word	0x20000354

0001bcf8 <sym_QPSGGC6LIDS7QWN3UK6QRANELMYXU35MAVBCJFQ>:
   1bcf8:	b510      	push	{r4, lr}
   1bcfa:	4905      	ldr	r1, [pc, #20]	; (1bd10 <sym_QPSGGC6LIDS7QWN3UK6QRANELMYXU35MAVBCJFQ+0x18>)
   1bcfc:	4805      	ldr	r0, [pc, #20]	; (1bd14 <sym_QPSGGC6LIDS7QWN3UK6QRANELMYXU35MAVBCJFQ+0x1c>)
   1bcfe:	f007 fb5f 	bl	233c0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x704>
   1bd02:	4804      	ldr	r0, [pc, #16]	; (1bd14 <sym_QPSGGC6LIDS7QWN3UK6QRANELMYXU35MAVBCJFQ+0x1c>)
   1bd04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1bd08:	4903      	ldr	r1, [pc, #12]	; (1bd18 <sym_QPSGGC6LIDS7QWN3UK6QRANELMYXU35MAVBCJFQ+0x20>)
   1bd0a:	1d00      	adds	r0, r0, #4
   1bd0c:	f007 bb58 	b.w	233c0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x704>
   1bd10:	20000368 	.word	0x20000368
   1bd14:	2000035c 	.word	0x2000035c
   1bd18:	20000370 	.word	0x20000370

0001bd1c <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA>:
   1bd1c:	b510      	push	{r4, lr}
   1bd1e:	4908      	ldr	r1, [pc, #32]	; (1bd40 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x24>)
   1bd20:	4808      	ldr	r0, [pc, #32]	; (1bd44 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
   1bd22:	f007 fb4d 	bl	233c0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x704>
   1bd26:	4807      	ldr	r0, [pc, #28]	; (1bd44 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
   1bd28:	4907      	ldr	r1, [pc, #28]	; (1bd48 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x2c>)
   1bd2a:	1d00      	adds	r0, r0, #4
   1bd2c:	f007 fb48 	bl	233c0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x704>
   1bd30:	4804      	ldr	r0, [pc, #16]	; (1bd44 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
   1bd32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1bd36:	4905      	ldr	r1, [pc, #20]	; (1bd4c <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x30>)
   1bd38:	3008      	adds	r0, #8
   1bd3a:	f007 bb41 	b.w	233c0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x704>
   1bd3e:	0000      	.short	0x0000
   1bd40:	20000380 	.word	0x20000380
   1bd44:	2000035c 	.word	0x2000035c
   1bd48:	20000388 	.word	0x20000388
   1bd4c:	20000378 	.word	0x20000378

0001bd50 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI>:
   1bd50:	4801      	ldr	r0, [pc, #4]	; (1bd58 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x8>)
   1bd52:	7840      	ldrb	r0, [r0, #1]
   1bd54:	4770      	bx	lr
   1bd56:	0000      	.short	0x0000
   1bd58:	20000354 	.word	0x20000354
   1bd5c:	b510      	push	{r4, lr}
   1bd5e:	f7fc f883 	bl	17e68 <sym_4O3EP57XWWWRY57PVJMDKXNE25ZWFBDV6LLBFQQ>
   1bd62:	4803      	ldr	r0, [pc, #12]	; (1bd70 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x20>)
   1bd64:	f7f9 fc82 	bl	1566c <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY>
   1bd68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1bd6c:	f7f8 bf3e 	b.w	14bec <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q>
   1bd70:	20001a53 	.word	0x20001a53
   1bd74:	b510      	push	{r4, lr}
   1bd76:	f7f6 fe1d 	bl	129b4 <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY>
   1bd7a:	4803      	ldr	r0, [pc, #12]	; (1bd88 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x38>)
   1bd7c:	f7f6 fe8a 	bl	12a94 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA>
   1bd80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1bd84:	f007 bb13 	b.w	233ae <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x6f2>
   1bd88:	20001a53 	.word	0x20001a53
   1bd8c:	4906      	ldr	r1, [pc, #24]	; (1bda8 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x58>)
   1bd8e:	b510      	push	{r4, lr}
   1bd90:	2001      	movs	r0, #1
   1bd92:	7048      	strb	r0, [r1, #1]
   1bd94:	f7f9 fcc2 	bl	1571c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY>
   1bd98:	f7fd f800 	bl	18d9c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA>
   1bd9c:	f7ff ffea 	bl	1bd74 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x24>
   1bda0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1bda4:	f7f8 bf2a 	b.w	14bfc <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q>
   1bda8:	20000354 	.word	0x20000354

0001bdac <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>:
   1bdac:	4a04      	ldr	r2, [pc, #16]	; (1bdc0 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY+0x14>)
   1bdae:	08c1      	lsrs	r1, r0, #3
   1bdb0:	f000 0307 	and.w	r3, r0, #7
   1bdb4:	2001      	movs	r0, #1
   1bdb6:	4098      	lsls	r0, r3
   1bdb8:	5c53      	ldrb	r3, [r2, r1]
   1bdba:	4303      	orrs	r3, r0
   1bdbc:	5453      	strb	r3, [r2, r1]
   1bdbe:	4770      	bx	lr
   1bdc0:	20000020 	.word	0x20000020

0001bdc4 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>:
   1bdc4:	4901      	ldr	r1, [pc, #4]	; (1bdcc <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ+0x8>)
   1bdc6:	e9d1 0100 	ldrd	r0, r1, [r1]
   1bdca:	4770      	bx	lr
   1bdcc:	20000020 	.word	0x20000020

0001bdd0 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>:
   1bdd0:	4909      	ldr	r1, [pc, #36]	; (1bdf8 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ+0x28>)
   1bdd2:	8808      	ldrh	r0, [r1, #0]
   1bdd4:	7909      	ldrb	r1, [r1, #4]
   1bdd6:	0ac2      	lsrs	r2, r0, #11
   1bdd8:	0a00      	lsrs	r0, r0, #8
   1bdda:	ea42 5241 	orr.w	r2, r2, r1, lsl #21
   1bdde:	ea40 6001 	orr.w	r0, r0, r1, lsl #24
   1bde2:	07d2      	lsls	r2, r2, #31
   1bde4:	f000 0001 	and.w	r0, r0, #1
   1bde8:	1800      	adds	r0, r0, r0
   1bdea:	ea40 7252 	orr.w	r2, r0, r2, lsr #29
   1bdee:	b2d0      	uxtb	r0, r2
   1bdf0:	f040 0001 	orr.w	r0, r0, #1
   1bdf4:	4770      	bx	lr
   1bdf6:	0000      	.short	0x0000
   1bdf8:	20000020 	.word	0x20000020

0001bdfc <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA>:
   1bdfc:	b510      	push	{r4, lr}
   1bdfe:	f7f5 f88f 	bl	10f20 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
   1be02:	2200      	movs	r2, #0
   1be04:	4b08      	ldr	r3, [pc, #32]	; (1be28 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x2c>)
   1be06:	4611      	mov	r1, r2
   1be08:	f833 4021 	ldrh.w	r4, [r3, r1, lsl #2]
   1be0c:	4284      	cmp	r4, r0
   1be0e:	d303      	bcc.n	1be18 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x1c>
   1be10:	eb03 0081 	add.w	r0, r3, r1, lsl #2
   1be14:	7882      	ldrb	r2, [r0, #2]
   1be16:	e003      	b.n	1be20 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x24>
   1be18:	1c49      	adds	r1, r1, #1
   1be1a:	b2c9      	uxtb	r1, r1
   1be1c:	290c      	cmp	r1, #12
   1be1e:	d3f3      	bcc.n	1be08 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0xc>
   1be20:	4802      	ldr	r0, [pc, #8]	; (1be2c <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x30>)
   1be22:	7002      	strb	r2, [r0, #0]
   1be24:	bd10      	pop	{r4, pc}
   1be26:	0000      	.short	0x0000
   1be28:	0002342e 	.word	0x0002342e
   1be2c:	200003ee 	.word	0x200003ee

0001be30 <sym_W6QCODUONZ7VOOA5DU2R7RKAJUNWNTC3INZ7OGY>:
   1be30:	4802      	ldr	r0, [pc, #8]	; (1be3c <sym_W6QCODUONZ7VOOA5DU2R7RKAJUNWNTC3INZ7OGY+0xc>)
   1be32:	7800      	ldrb	r0, [r0, #0]
   1be34:	f000 0007 	and.w	r0, r0, #7
   1be38:	4770      	bx	lr
   1be3a:	0000      	.short	0x0000
   1be3c:	200003ee 	.word	0x200003ee

0001be40 <sym_5U52OLHW5BTVCP2BD6UAUWBCBDJG46EBSAKZZ6I>:
   1be40:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1be44:	460f      	mov	r7, r1
   1be46:	4605      	mov	r5, r0
   1be48:	2115      	movs	r1, #21
   1be4a:	4690      	mov	r8, r2
   1be4c:	460e      	mov	r6, r1
   1be4e:	20ff      	movs	r0, #255	; 0xff
   1be50:	f003 fdca 	bl	1f9e8 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
   1be54:	f64f 71fc 	movw	r1, #65532	; 0xfffc
   1be58:	1cc0      	adds	r0, r0, #3
   1be5a:	ea00 0401 	and.w	r4, r0, r1
   1be5e:	b30d      	cbz	r5, 1bea4 <sym_5U52OLHW5BTVCP2BD6UAUWBCBDJG46EBSAKZZ6I+0x64>
   1be60:	f8df 904c 	ldr.w	r9, [pc, #76]	; 1beb0 <sym_5U52OLHW5BTVCP2BD6UAUWBCBDJG46EBSAKZZ6I+0x70>
   1be64:	fb04 5307 	mla	r3, r4, r7, r5
   1be68:	e9c9 5301 	strd	r5, r3, [r9, #4]
   1be6c:	f8a9 4000 	strh.w	r4, [r9]
   1be70:	00fa      	lsls	r2, r7, #3
   1be72:	2100      	movs	r1, #0
   1be74:	4618      	mov	r0, r3
   1be76:	f002 fd6c 	bl	1e952 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
   1be7a:	2500      	movs	r5, #0
   1be7c:	46aa      	mov	sl, r5
   1be7e:	e00f      	b.n	1bea0 <sym_5U52OLHW5BTVCP2BD6UAUWBCBDJG46EBSAKZZ6I+0x60>
   1be80:	4628      	mov	r0, r5
   1be82:	f000 f817 	bl	1beb4 <sym_5U52OLHW5BTVCP2BD6UAUWBCBDJG46EBSAKZZ6I+0x74>
   1be86:	4621      	mov	r1, r4
   1be88:	22ff      	movs	r2, #255	; 0xff
   1be8a:	4633      	mov	r3, r6
   1be8c:	f8cd 8000 	str.w	r8, [sp]
   1be90:	f003 fd61 	bl	1f956 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
   1be94:	f8d9 1008 	ldr.w	r1, [r9, #8]
   1be98:	f801 a035 	strb.w	sl, [r1, r5, lsl #3]
   1be9c:	1c6d      	adds	r5, r5, #1
   1be9e:	b2ad      	uxth	r5, r5
   1bea0:	42bd      	cmp	r5, r7
   1bea2:	d3ed      	bcc.n	1be80 <sym_5U52OLHW5BTVCP2BD6UAUWBCBDJG46EBSAKZZ6I+0x40>
   1bea4:	3408      	adds	r4, #8
   1bea6:	fb04 f007 	mul.w	r0, r4, r7
   1beaa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1beae:	0000      	.short	0x0000
   1beb0:	20000390 	.word	0x20000390
   1beb4:	4902      	ldr	r1, [pc, #8]	; (1bec0 <sym_5U52OLHW5BTVCP2BD6UAUWBCBDJG46EBSAKZZ6I+0x80>)
   1beb6:	684a      	ldr	r2, [r1, #4]
   1beb8:	8809      	ldrh	r1, [r1, #0]
   1beba:	fb00 2001 	mla	r0, r0, r1, r2
   1bebe:	4770      	bx	lr
   1bec0:	20000390 	.word	0x20000390

0001bec4 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>:
   1bec4:	b570      	push	{r4, r5, r6, lr}
   1bec6:	4605      	mov	r5, r0
   1bec8:	4616      	mov	r6, r2
   1beca:	460c      	mov	r4, r1
   1becc:	2002      	movs	r0, #2
   1bece:	f000 fa09 	bl	1c2e4 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
   1bed2:	4905      	ldr	r1, [pc, #20]	; (1bee8 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x24>)
   1bed4:	2001      	movs	r0, #1
   1bed6:	7008      	strb	r0, [r1, #0]
   1bed8:	4904      	ldr	r1, [pc, #16]	; (1beec <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x28>)
   1beda:	1ef0      	subs	r0, r6, #3
   1bedc:	6008      	str	r0, [r1, #0]
   1bede:	4804      	ldr	r0, [pc, #16]	; (1bef0 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
   1bee0:	6005      	str	r5, [r0, #0]
   1bee2:	1f00      	subs	r0, r0, #4
   1bee4:	6004      	str	r4, [r0, #0]
   1bee6:	bd70      	pop	{r4, r5, r6, pc}
   1bee8:	200003ef 	.word	0x200003ef
   1beec:	4000f510 	.word	0x4000f510
   1bef0:	4000f508 	.word	0x4000f508

0001bef4 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>:
   1bef4:	4810      	ldr	r0, [pc, #64]	; (1bf38 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x44>)
   1bef6:	7801      	ldrb	r1, [r0, #0]
   1bef8:	b1a9      	cbz	r1, 1bf26 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x32>
   1befa:	4a10      	ldr	r2, [pc, #64]	; (1bf3c <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x48>)
   1befc:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
   1bf00:	6011      	str	r1, [r2, #0]
   1bf02:	490f      	ldr	r1, [pc, #60]	; (1bf40 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x4c>)
   1bf04:	f8d1 3100 	ldr.w	r3, [r1, #256]	; 0x100
   1bf08:	2200      	movs	r2, #0
   1bf0a:	2b00      	cmp	r3, #0
   1bf0c:	bf1c      	itt	ne
   1bf0e:	f8d1 3104 	ldrne.w	r3, [r1, #260]	; 0x104
   1bf12:	2b00      	cmpne	r3, #0
   1bf14:	d002      	beq.n	1bf1c <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x28>
   1bf16:	f8d1 1108 	ldr.w	r1, [r1, #264]	; 0x108
   1bf1a:	b141      	cbz	r1, 1bf2e <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x3a>
   1bf1c:	7042      	strb	r2, [r0, #1]
   1bf1e:	f04f 0110 	mov.w	r1, #16
   1bf22:	7081      	strb	r1, [r0, #2]
   1bf24:	7002      	strb	r2, [r0, #0]
   1bf26:	f04f 0000 	mov.w	r0, #0
   1bf2a:	f000 b9db 	b.w	1c2e4 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
   1bf2e:	2101      	movs	r1, #1
   1bf30:	7041      	strb	r1, [r0, #1]
   1bf32:	4904      	ldr	r1, [pc, #16]	; (1bf44 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x50>)
   1bf34:	6809      	ldr	r1, [r1, #0]
   1bf36:	e7f4      	b.n	1bf22 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x2e>
   1bf38:	200003ef 	.word	0x200003ef
   1bf3c:	4001f508 	.word	0x4001f508
   1bf40:	4000f000 	.word	0x4000f000
   1bf44:	4000f400 	.word	0x4000f400

0001bf48 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>:
   1bf48:	b510      	push	{r4, lr}
   1bf4a:	2002      	movs	r0, #2
   1bf4c:	f000 f9ca 	bl	1c2e4 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
   1bf50:	4907      	ldr	r1, [pc, #28]	; (1bf70 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x28>)
   1bf52:	2001      	movs	r0, #1
   1bf54:	7008      	strb	r0, [r1, #0]
   1bf56:	4907      	ldr	r1, [pc, #28]	; (1bf74 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x2c>)
   1bf58:	2000      	movs	r0, #0
   1bf5a:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
   1bf5e:	f8c1 0104 	str.w	r0, [r1, #260]	; 0x104
   1bf62:	f8c1 0108 	str.w	r0, [r1, #264]	; 0x108
   1bf66:	4904      	ldr	r1, [pc, #16]	; (1bf78 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x30>)
   1bf68:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
   1bf6c:	6008      	str	r0, [r1, #0]
   1bf6e:	bd10      	pop	{r4, pc}
   1bf70:	200003ef 	.word	0x200003ef
   1bf74:	4000f000 	.word	0x4000f000
   1bf78:	4001f504 	.word	0x4001f504

0001bf7c <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>:
   1bf7c:	4803      	ldr	r0, [pc, #12]	; (1bf8c <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA+0x10>)
   1bf7e:	2100      	movs	r1, #0
   1bf80:	7001      	strb	r1, [r0, #0]
   1bf82:	7041      	strb	r1, [r0, #1]
   1bf84:	2110      	movs	r1, #16
   1bf86:	7081      	strb	r1, [r0, #2]
   1bf88:	4770      	bx	lr
   1bf8a:	0000      	.short	0x0000
   1bf8c:	200003ef 	.word	0x200003ef

0001bf90 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>:
   1bf90:	480c      	ldr	r0, [pc, #48]	; (1bfc4 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x34>)
   1bf92:	7801      	ldrb	r1, [r0, #0]
   1bf94:	2900      	cmp	r1, #0
   1bf96:	bf04      	itt	eq
   1bf98:	7880      	ldrbeq	r0, [r0, #2]
   1bf9a:	4770      	bxeq	lr
   1bf9c:	480a      	ldr	r0, [pc, #40]	; (1bfc8 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x38>)
   1bf9e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1bfa2:	2900      	cmp	r1, #0
   1bfa4:	bf1c      	itt	ne
   1bfa6:	f8d0 1104 	ldrne.w	r1, [r0, #260]	; 0x104
   1bfaa:	2900      	cmpne	r1, #0
   1bfac:	d002      	beq.n	1bfb4 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x24>
   1bfae:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
   1bfb2:	b110      	cbz	r0, 1bfba <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x2a>
   1bfb4:	f04f 0010 	mov.w	r0, #16
   1bfb8:	4770      	bx	lr
   1bfba:	4804      	ldr	r0, [pc, #16]	; (1bfcc <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x3c>)
   1bfbc:	6800      	ldr	r0, [r0, #0]
   1bfbe:	b2c0      	uxtb	r0, r0
   1bfc0:	4770      	bx	lr
   1bfc2:	0000      	.short	0x0000
   1bfc4:	200003ef 	.word	0x200003ef
   1bfc8:	4000f000 	.word	0x4000f000
   1bfcc:	4000f400 	.word	0x4000f400

0001bfd0 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>:
   1bfd0:	4811      	ldr	r0, [pc, #68]	; (1c018 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x48>)
   1bfd2:	b510      	push	{r4, lr}
   1bfd4:	7802      	ldrb	r2, [r0, #0]
   1bfd6:	4b11      	ldr	r3, [pc, #68]	; (1c01c <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x4c>)
   1bfd8:	7840      	ldrb	r0, [r0, #1]
   1bfda:	21c8      	movs	r1, #200	; 0xc8
   1bfdc:	1e49      	subs	r1, r1, #1
   1bfde:	b2c9      	uxtb	r1, r1
   1bfe0:	b15a      	cbz	r2, 1bffa <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x2a>
   1bfe2:	f8d3 c100 	ldr.w	ip, [r3, #256]	; 0x100
   1bfe6:	f1bc 0f00 	cmp.w	ip, #0
   1bfea:	d00c      	beq.n	1c006 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x36>
   1bfec:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
   1bff0:	b138      	cbz	r0, 1c002 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x32>
   1bff2:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
   1bff6:	b160      	cbz	r0, 1c012 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x42>
   1bff8:	e003      	b.n	1c002 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x32>
   1bffa:	2802      	cmp	r0, #2
   1bffc:	d003      	beq.n	1c006 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x36>
   1bffe:	2801      	cmp	r0, #1
   1c000:	d007      	beq.n	1c012 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x42>
   1c002:	2000      	movs	r0, #0
   1c004:	bd10      	pop	{r4, pc}
   1c006:	2900      	cmp	r1, #0
   1c008:	d1e8      	bne.n	1bfdc <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0xc>
   1c00a:	21b1      	movs	r1, #177	; 0xb1
   1c00c:	203b      	movs	r0, #59	; 0x3b
   1c00e:	f7f5 fcb7 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1c012:	2001      	movs	r0, #1
   1c014:	bd10      	pop	{r4, pc}
   1c016:	0000      	.short	0x0000
   1c018:	200003ef 	.word	0x200003ef
   1c01c:	4000f000 	.word	0x4000f000

0001c020 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA>:
   1c020:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c024:	4604      	mov	r4, r0
   1c026:	461e      	mov	r6, r3
   1c028:	4617      	mov	r7, r2
   1c02a:	4688      	mov	r8, r1
   1c02c:	2001      	movs	r0, #1
   1c02e:	f000 f959 	bl	1c2e4 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
   1c032:	4d23      	ldr	r5, [pc, #140]	; (1c0c0 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0xa0>)
   1c034:	4823      	ldr	r0, [pc, #140]	; (1c0c4 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0xa4>)
   1c036:	f004 0103 	and.w	r1, r4, #3
   1c03a:	712e      	strb	r6, [r5, #4]
   1c03c:	6800      	ldr	r0, [r0, #0]
   1c03e:	0432      	lsls	r2, r6, #16
   1c040:	f361 0007 	bfi	r0, r1, #0, #8
   1c044:	f366 200f 	bfi	r0, r6, #8, #8
   1c048:	0c00      	lsrs	r0, r0, #16
   1c04a:	4e1f      	ldr	r6, [pc, #124]	; (1c0c8 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0xa8>)
   1c04c:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
   1c050:	4308      	orrs	r0, r1
   1c052:	f8c6 0504 	str.w	r0, [r6, #1284]	; 0x504
   1c056:	481d      	ldr	r0, [pc, #116]	; (1c0cc <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0xac>)
   1c058:	f8c0 8000 	str.w	r8, [r0]
   1c05c:	f002 fbbf 	bl	1e7de <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
   1c060:	b928      	cbnz	r0, 1c06e <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x4e>
   1c062:	481b      	ldr	r0, [pc, #108]	; (1c0d0 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0xb0>)
   1c064:	6801      	ldr	r1, [r0, #0]
   1c066:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
   1c06a:	4339      	orrs	r1, r7
   1c06c:	6001      	str	r1, [r0, #0]
   1c06e:	491a      	ldr	r1, [pc, #104]	; (1c0d8 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0xb8>)
   1c070:	4818      	ldr	r0, [pc, #96]	; (1c0d4 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0xb4>)
   1c072:	6008      	str	r0, [r1, #0]
   1c074:	4919      	ldr	r1, [pc, #100]	; (1c0dc <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0xbc>)
   1c076:	481a      	ldr	r0, [pc, #104]	; (1c0e0 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0xc0>)
   1c078:	2c00      	cmp	r4, #0
   1c07a:	bf18      	it	ne
   1c07c:	2c04      	cmpne	r4, #4
   1c07e:	d104      	bne.n	1c08a <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x6a>
   1c080:	f8c0 1510 	str.w	r1, [r0, #1296]	; 0x510
   1c084:	4917      	ldr	r1, [pc, #92]	; (1c0e4 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0xc4>)
   1c086:	f8c0 1514 	str.w	r1, [r0, #1300]	; 0x514
   1c08a:	2c01      	cmp	r4, #1
   1c08c:	d105      	bne.n	1c09a <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x7a>
   1c08e:	4916      	ldr	r1, [pc, #88]	; (1c0e8 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0xc8>)
   1c090:	f8c0 1510 	str.w	r1, [r0, #1296]	; 0x510
   1c094:	4915      	ldr	r1, [pc, #84]	; (1c0ec <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0xcc>)
   1c096:	f8c0 1514 	str.w	r1, [r0, #1300]	; 0x514
   1c09a:	2001      	movs	r0, #1
   1c09c:	7068      	strb	r0, [r5, #1]
   1c09e:	70ec      	strb	r4, [r5, #3]
   1c0a0:	2c00      	cmp	r4, #0
   1c0a2:	bf1e      	ittt	ne
   1c0a4:	2c01      	cmpne	r4, #1
   1c0a6:	2c02      	cmpne	r4, #2
   1c0a8:	e8bd 81f0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, pc}
   1c0ac:	7028      	strb	r0, [r5, #0]
   1c0ae:	f04f 0100 	mov.w	r1, #0
   1c0b2:	f8c6 1100 	str.w	r1, [r6, #256]	; 0x100
   1c0b6:	f8c6 1200 	str.w	r1, [r6, #512]	; 0x200
   1c0ba:	6030      	str	r0, [r6, #0]
   1c0bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1c0c0:	200003f2 	.word	0x200003f2
   1c0c4:	0001c2ac 	.word	0x0001c2ac
   1c0c8:	4000f000 	.word	0x4000f000
   1c0cc:	4000f508 	.word	0x4000f508
   1c0d0:	4000f518 	.word	0x4000f518
   1c0d4:	02020000 	.word	0x02020000
   1c0d8:	4001f508 	.word	0x4001f508
   1c0dc:	4000f100 	.word	0x4000f100
   1c0e0:	4001f088 	.word	0x4001f088
   1c0e4:	4000f004 	.word	0x4000f004
   1c0e8:	40001150 	.word	0x40001150
   1c0ec:	4000f00c 	.word	0x4000f00c

0001c0f0 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA>:
   1c0f0:	b570      	push	{r4, r5, r6, lr}
   1c0f2:	4a27      	ldr	r2, [pc, #156]	; (1c190 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0xa0>)
   1c0f4:	7853      	ldrb	r3, [r2, #1]
   1c0f6:	b1d3      	cbz	r3, 1c12e <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x3e>
   1c0f8:	4b26      	ldr	r3, [pc, #152]	; (1c194 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0xa4>)
   1c0fa:	6019      	str	r1, [r3, #0]
   1c0fc:	1d19      	adds	r1, r3, #4
   1c0fe:	6008      	str	r0, [r1, #0]
   1c100:	2101      	movs	r1, #1
   1c102:	7091      	strb	r1, [r2, #2]
   1c104:	4610      	mov	r0, r2
   1c106:	78d5      	ldrb	r5, [r2, #3]
   1c108:	f890 c000 	ldrb.w	ip, [r0]
   1c10c:	4c22      	ldr	r4, [pc, #136]	; (1c198 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0xa8>)
   1c10e:	4823      	ldr	r0, [pc, #140]	; (1c19c <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0xac>)
   1c110:	2300      	movs	r3, #0
   1c112:	b195      	cbz	r5, 1c13a <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x4a>
   1c114:	2d04      	cmp	r5, #4
   1c116:	d027      	beq.n	1c168 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x78>
   1c118:	f1bc 0f00 	cmp.w	ip, #0
   1c11c:	d02b      	beq.n	1c176 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x86>
   1c11e:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
   1c122:	7910      	ldrb	r0, [r2, #4]
   1c124:	2802      	cmp	r0, #2
   1c126:	bf18      	it	ne
   1c128:	2803      	cmpne	r0, #3
   1c12a:	d028      	beq.n	1c17e <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x8e>
   1c12c:	e02d      	b.n	1c18a <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x9a>
   1c12e:	f44f 71c2 	mov.w	r1, #388	; 0x184
   1c132:	f04f 003c 	mov.w	r0, #60	; 0x3c
   1c136:	f7f5 fc23 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1c13a:	f1bc 0f00 	cmp.w	ip, #0
   1c13e:	d00f      	beq.n	1c160 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x70>
   1c140:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
   1c144:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   1c148:	6022      	str	r2, [r4, #0]
   1c14a:	f8d0 2100 	ldr.w	r2, [r0, #256]	; 0x100
   1c14e:	2a00      	cmp	r2, #0
   1c150:	bf08      	it	eq
   1c152:	bd70      	popeq	{r4, r5, r6, pc}
   1c154:	6041      	str	r1, [r0, #4]
   1c156:	4912      	ldr	r1, [pc, #72]	; (1c1a0 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0xb0>)
   1c158:	f44f 3000 	mov.w	r0, #131072	; 0x20000
   1c15c:	6008      	str	r0, [r1, #0]
   1c15e:	bd70      	pop	{r4, r5, r6, pc}
   1c160:	21b3      	movs	r1, #179	; 0xb3
   1c162:	203c      	movs	r0, #60	; 0x3c
   1c164:	f7f5 fc0c 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1c168:	7011      	strb	r1, [r2, #0]
   1c16a:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
   1c16e:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
   1c172:	6001      	str	r1, [r0, #0]
   1c174:	bd70      	pop	{r4, r5, r6, pc}
   1c176:	21c6      	movs	r1, #198	; 0xc6
   1c178:	203c      	movs	r0, #60	; 0x3c
   1c17a:	f7f5 fc01 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1c17e:	4809      	ldr	r0, [pc, #36]	; (1c1a4 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0xb4>)
   1c180:	f8c0 3150 	str.w	r3, [r0, #336]	; 0x150
   1c184:	4808      	ldr	r0, [pc, #32]	; (1c1a8 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0xb8>)
   1c186:	2103      	movs	r1, #3
   1c188:	6001      	str	r1, [r0, #0]
   1c18a:	4808      	ldr	r0, [pc, #32]	; (1c1ac <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0xbc>)
   1c18c:	6020      	str	r0, [r4, #0]
   1c18e:	bd70      	pop	{r4, r5, r6, pc}
   1c190:	200003f2 	.word	0x200003f2
   1c194:	4000f50c 	.word	0x4000f50c
   1c198:	4001f504 	.word	0x4001f504
   1c19c:	4000f000 	.word	0x4000f000
   1c1a0:	4001f508 	.word	0x4001f508
   1c1a4:	40001000 	.word	0x40001000
   1c1a8:	4000f51c 	.word	0x4000f51c
   1c1ac:	02020000 	.word	0x02020000

0001c1b0 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>:
   1c1b0:	4905      	ldr	r1, [pc, #20]	; (1c1c8 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x18>)
   1c1b2:	2000      	movs	r0, #0
   1c1b4:	780a      	ldrb	r2, [r1, #0]
   1c1b6:	b11a      	cbz	r2, 1c1c0 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x10>
   1c1b8:	4b05      	ldr	r3, [pc, #20]	; (1c1d0 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x20>)
   1c1ba:	4a04      	ldr	r2, [pc, #16]	; (1c1cc <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x1c>)
   1c1bc:	601a      	str	r2, [r3, #0]
   1c1be:	7008      	strb	r0, [r1, #0]
   1c1c0:	7048      	strb	r0, [r1, #1]
   1c1c2:	7088      	strb	r0, [r1, #2]
   1c1c4:	4770      	bx	lr
   1c1c6:	0000      	.short	0x0000
   1c1c8:	200003f2 	.word	0x200003f2
   1c1cc:	02020000 	.word	0x02020000
   1c1d0:	4001f508 	.word	0x4001f508

0001c1d4 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>:
   1c1d4:	4802      	ldr	r0, [pc, #8]	; (1c1e0 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY+0xc>)
   1c1d6:	2100      	movs	r1, #0
   1c1d8:	7001      	strb	r1, [r0, #0]
   1c1da:	7041      	strb	r1, [r0, #1]
   1c1dc:	7081      	strb	r1, [r0, #2]
   1c1de:	4770      	bx	lr
   1c1e0:	200003f2 	.word	0x200003f2

0001c1e4 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA>:
   1c1e4:	480b      	ldr	r0, [pc, #44]	; (1c214 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x30>)
   1c1e6:	b510      	push	{r4, lr}
   1c1e8:	7800      	ldrb	r0, [r0, #0]
   1c1ea:	b148      	cbz	r0, 1c200 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x1c>
   1c1ec:	480a      	ldr	r0, [pc, #40]	; (1c218 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x34>)
   1c1ee:	f8d0 0104 	ldr.w	r0, [r0, #260]	; 0x104
   1c1f2:	b150      	cbz	r0, 1c20a <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x26>
   1c1f4:	4809      	ldr	r0, [pc, #36]	; (1c21c <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x38>)
   1c1f6:	6800      	ldr	r0, [r0, #0]
   1c1f8:	2800      	cmp	r0, #0
   1c1fa:	bf18      	it	ne
   1c1fc:	2001      	movne	r0, #1
   1c1fe:	bd10      	pop	{r4, pc}
   1c200:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
   1c204:	203c      	movs	r0, #60	; 0x3c
   1c206:	f7f5 fbbb 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1c20a:	f240 11eb 	movw	r1, #491	; 0x1eb
   1c20e:	203c      	movs	r0, #60	; 0x3c
   1c210:	f7f5 fbb6 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1c214:	200003f2 	.word	0x200003f2
   1c218:	4000f000 	.word	0x4000f000
   1c21c:	4000f400 	.word	0x4000f400

0001c220 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA>:
   1c220:	4901      	ldr	r1, [pc, #4]	; (1c228 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA+0x8>)
   1c222:	2001      	movs	r0, #1
   1c224:	6088      	str	r0, [r1, #8]
   1c226:	4770      	bx	lr
   1c228:	4000f000 	.word	0x4000f000

0001c22c <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI>:
   1c22c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c230:	481b      	ldr	r0, [pc, #108]	; (1c2a0 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x74>)
   1c232:	7800      	ldrb	r0, [r0, #0]
   1c234:	b1d8      	cbz	r0, 1c26e <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x42>
   1c236:	4c1b      	ldr	r4, [pc, #108]	; (1c2a4 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x78>)
   1c238:	f8d4 0104 	ldr.w	r0, [r4, #260]	; 0x104
   1c23c:	2800      	cmp	r0, #0
   1c23e:	bf18      	it	ne
   1c240:	e8bd 81f0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, pc}
   1c244:	2002      	movs	r0, #2
   1c246:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
   1c24a:	4f17      	ldr	r7, [pc, #92]	; (1c2a8 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x7c>)
   1c24c:	6838      	ldr	r0, [r7, #0]
   1c24e:	f3c0 1800 	ubfx	r8, r0, #4, #1
   1c252:	6838      	ldr	r0, [r7, #0]
   1c254:	f040 0010 	orr.w	r0, r0, #16
   1c258:	6038      	str	r0, [r7, #0]
   1c25a:	f8d4 0104 	ldr.w	r0, [r4, #260]	; 0x104
   1c25e:	2800      	cmp	r0, #0
   1c260:	bf04      	itt	eq
   1c262:	f44f 4500 	moveq.w	r5, #32768	; 0x8000
   1c266:	f04f 26e0 	moveq.w	r6, #3758153728	; 0xe000e000
   1c26a:	d10d      	bne.n	1c288 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x5c>
   1c26c:	e004      	b.n	1c278 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x4c>
   1c26e:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
   1c272:	203c      	movs	r0, #60	; 0x3c
   1c274:	f7f5 fb84 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1c278:	f8c6 5280 	str.w	r5, [r6, #640]	; 0x280
   1c27c:	f7f5 f882 	bl	11384 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
   1c280:	f8d4 0104 	ldr.w	r0, [r4, #260]	; 0x104
   1c284:	2800      	cmp	r0, #0
   1c286:	d0f7      	beq.n	1c278 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x4c>
   1c288:	f1b8 0f00 	cmp.w	r8, #0
   1c28c:	d103      	bne.n	1c296 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x6a>
   1c28e:	6838      	ldr	r0, [r7, #0]
   1c290:	f020 0010 	bic.w	r0, r0, #16
   1c294:	6038      	str	r0, [r7, #0]
   1c296:	2002      	movs	r0, #2
   1c298:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
   1c29c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1c2a0:	200003f2 	.word	0x200003f2
   1c2a4:	4000f000 	.word	0x4000f000
   1c2a8:	e000ed10 	.word	0xe000ed10
   1c2ac:	00010000 	.word	0x00010000

0001c2b0 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>:
   1c2b0:	b510      	push	{r4, lr}
   1c2b2:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
   1c2b6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   1c2ba:	2000      	movs	r0, #0
   1c2bc:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
   1c2c0:	f3bf 8f4f 	dsb	sy
   1c2c4:	f3bf 8f6f 	isb	sy
   1c2c8:	4904      	ldr	r1, [pc, #16]	; (1c2dc <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x2c>)
   1c2ca:	6008      	str	r0, [r1, #0]
   1c2cc:	6008      	str	r0, [r1, #0]
   1c2ce:	f7ff ff6f 	bl	1c1b0 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
   1c2d2:	4903      	ldr	r1, [pc, #12]	; (1c2e0 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x30>)
   1c2d4:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
   1c2d8:	6008      	str	r0, [r1, #0]
   1c2da:	bd10      	pop	{r4, pc}
   1c2dc:	4000f500 	.word	0x4000f500
   1c2e0:	4001f508 	.word	0x4001f508

0001c2e4 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>:
   1c2e4:	b570      	push	{r4, r5, r6, lr}
   1c2e6:	4c11      	ldr	r4, [pc, #68]	; (1c32c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x48>)
   1c2e8:	4605      	mov	r5, r0
   1c2ea:	2000      	movs	r0, #0
   1c2ec:	6020      	str	r0, [r4, #0]
   1c2ee:	6020      	str	r0, [r4, #0]
   1c2f0:	f7ff ff5e 	bl	1c1b0 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
   1c2f4:	490e      	ldr	r1, [pc, #56]	; (1c330 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x4c>)
   1c2f6:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
   1c2fa:	6008      	str	r0, [r1, #0]
   1c2fc:	2d00      	cmp	r5, #0
   1c2fe:	bf08      	it	eq
   1c300:	bd70      	popeq	{r4, r5, r6, pc}
   1c302:	480c      	ldr	r0, [pc, #48]	; (1c334 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x50>)
   1c304:	490c      	ldr	r1, [pc, #48]	; (1c338 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x54>)
   1c306:	2d01      	cmp	r5, #1
   1c308:	bf04      	itt	eq
   1c30a:	2202      	moveq	r2, #2
   1c30c:	6022      	streq	r2, [r4, #0]
   1c30e:	d00b      	beq.n	1c328 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x44>
   1c310:	2d02      	cmp	r5, #2
   1c312:	d003      	beq.n	1c31c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x38>
   1c314:	2182      	movs	r1, #130	; 0x82
   1c316:	203d      	movs	r0, #61	; 0x3d
   1c318:	f7f5 fb32 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1c31c:	2203      	movs	r2, #3
   1c31e:	6022      	str	r2, [r4, #0]
   1c320:	6008      	str	r0, [r1, #0]
   1c322:	4906      	ldr	r1, [pc, #24]	; (1c33c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x58>)
   1c324:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
   1c328:	6008      	str	r0, [r1, #0]
   1c32a:	bd70      	pop	{r4, r5, r6, pc}
   1c32c:	4000f500 	.word	0x4000f500
   1c330:	4001f508 	.word	0x4001f508
   1c334:	20001b55 	.word	0x20001b55
   1c338:	4000f514 	.word	0x4000f514
   1c33c:	4001f504 	.word	0x4001f504

0001c340 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>:
   1c340:	4805      	ldr	r0, [pc, #20]	; (1c358 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y+0x18>)
   1c342:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
   1c346:	f021 0140 	bic.w	r1, r1, #64	; 0x40
   1c34a:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
   1c34e:	2100      	movs	r1, #0
   1c350:	f8c0 1560 	str.w	r1, [r0, #1376]	; 0x560
   1c354:	4770      	bx	lr
   1c356:	0000      	.short	0x0000
   1c358:	40001000 	.word	0x40001000

0001c35c <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>:
   1c35c:	4904      	ldr	r1, [pc, #16]	; (1c370 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY+0x14>)
   1c35e:	f8c1 0560 	str.w	r0, [r1, #1376]	; 0x560
   1c362:	f8d1 0200 	ldr.w	r0, [r1, #512]	; 0x200
   1c366:	f040 0040 	orr.w	r0, r0, #64	; 0x40
   1c36a:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
   1c36e:	4770      	bx	lr
   1c370:	40001000 	.word	0x40001000

0001c374 <sym_JSHLXOVZJZP3KPTLSJTCXHNIGRQ2VOB7UW7IQAA>:
   1c374:	00c2      	lsls	r2, r0, #3
   1c376:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   1c37a:	f502 32f8 	add.w	r2, r2, #126976	; 0x1f000
   1c37e:	4b07      	ldr	r3, [pc, #28]	; (1c39c <sym_JSHLXOVZJZP3KPTLSJTCXHNIGRQ2VOB7UW7IQAA+0x28>)
   1c380:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
   1c384:	f8c2 1514 	str.w	r1, [r2, #1300]	; 0x514
   1c388:	2101      	movs	r1, #1
   1c38a:	fa01 f000 	lsl.w	r0, r1, r0
   1c38e:	4904      	ldr	r1, [pc, #16]	; (1c3a0 <sym_JSHLXOVZJZP3KPTLSJTCXHNIGRQ2VOB7UW7IQAA+0x2c>)
   1c390:	6008      	str	r0, [r1, #0]
   1c392:	4904      	ldr	r1, [pc, #16]	; (1c3a4 <sym_JSHLXOVZJZP3KPTLSJTCXHNIGRQ2VOB7UW7IQAA+0x30>)
   1c394:	6b0a      	ldr	r2, [r1, #48]	; 0x30
   1c396:	4310      	orrs	r0, r2
   1c398:	6308      	str	r0, [r1, #48]	; 0x30
   1c39a:	4770      	bx	lr
   1c39c:	40001104 	.word	0x40001104
   1c3a0:	4001f504 	.word	0x4001f504
   1c3a4:	200017d8 	.word	0x200017d8

0001c3a8 <sym_BNUQ5CI25DXEDLVOULTXPCKLL6P4CJJYO4G535I>:
   1c3a8:	4801      	ldr	r0, [pc, #4]	; (1c3b0 <sym_BNUQ5CI25DXEDLVOULTXPCKLL6P4CJJYO4G535I+0x8>)
   1c3aa:	f890 002a 	ldrb.w	r0, [r0, #42]	; 0x2a
   1c3ae:	4770      	bx	lr
   1c3b0:	200017d8 	.word	0x200017d8

0001c3b4 <sym_DRIMECVE2FH7O6C2LQ25QRVJOICPHLA5GC6TM2I>:
   1c3b4:	4902      	ldr	r1, [pc, #8]	; (1c3c0 <sym_DRIMECVE2FH7O6C2LQ25QRVJOICPHLA5GC6TM2I+0xc>)
   1c3b6:	5c08      	ldrb	r0, [r1, r0]
   1c3b8:	f500 6016 	add.w	r0, r0, #2400	; 0x960
   1c3bc:	4770      	bx	lr
   1c3be:	0000      	.short	0x0000
   1c3c0:	0001db64 	.word	0x0001db64

0001c3c4 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>:
   1c3c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c3c8:	f7f5 f84e 	bl	11468 <sym_24DWUIEE2POS3GYSEVA4IAL4G7TGCCCJXT6D5AA>
   1c3cc:	f7f5 f8c2 	bl	11554 <sym_UCUZCD3IIQBIFBTQEAMBH3ROVF42G3OC6HCQXWQ>
   1c3d0:	4c4d      	ldr	r4, [pc, #308]	; (1c508 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x144>)
   1c3d2:	4680      	mov	r8, r0
   1c3d4:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
   1c3d8:	f010 0f10 	tst.w	r0, #16
   1c3dc:	bf14      	ite	ne
   1c3de:	f04f 0901 	movne.w	r9, #1
   1c3e2:	f04f 0900 	moveq.w	r9, #0
   1c3e6:	2010      	movs	r0, #16
   1c3e8:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
   1c3ec:	2002      	movs	r0, #2
   1c3ee:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
   1c3f2:	4d46      	ldr	r5, [pc, #280]	; (1c50c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x148>)
   1c3f4:	f8df a118 	ldr.w	sl, [pc, #280]	; 1c510 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x14c>
   1c3f8:	2600      	movs	r6, #0
   1c3fa:	f885 6034 	strb.w	r6, [r5, #52]	; 0x34
   1c3fe:	f44f 2060 	mov.w	r0, #917504	; 0xe0000
   1c402:	f8ca 0000 	str.w	r0, [sl]
   1c406:	f8d4 0550 	ldr.w	r0, [r4, #1360]	; 0x550
   1c40a:	f04f 0701 	mov.w	r7, #1
   1c40e:	f010 0fff 	tst.w	r0, #255	; 0xff
   1c412:	d016      	beq.n	1c442 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x7e>
   1c414:	20ff      	movs	r0, #255	; 0xff
   1c416:	f88d 0000 	strb.w	r0, [sp]
   1c41a:	f8c4 6110 	str.w	r6, [r4, #272]	; 0x110
   1c41e:	6127      	str	r7, [r4, #16]
   1c420:	e005      	b.n	1c42e <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x6a>
   1c422:	bf00      	nop
   1c424:	f89d 0000 	ldrb.w	r0, [sp]
   1c428:	1e40      	subs	r0, r0, #1
   1c42a:	f88d 0000 	strb.w	r0, [sp]
   1c42e:	f89d 1000 	ldrb.w	r1, [sp]
   1c432:	b119      	cbz	r1, 1c43c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x78>
   1c434:	f8d4 0110 	ldr.w	r0, [r4, #272]	; 0x110
   1c438:	2800      	cmp	r0, #0
   1c43a:	d0f3      	beq.n	1c424 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x60>
   1c43c:	f89d 0000 	ldrb.w	r0, [sp]
   1c440:	b140      	cbz	r0, 1c454 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x90>
   1c442:	8ba8      	ldrh	r0, [r5, #28]
   1c444:	2896      	cmp	r0, #150	; 0x96
   1c446:	d324      	bcc.n	1c492 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0xce>
   1c448:	7a68      	ldrb	r0, [r5, #9]
   1c44a:	2801      	cmp	r0, #1
   1c44c:	d007      	beq.n	1c45e <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x9a>
   1c44e:	2802      	cmp	r0, #2
   1c450:	d012      	beq.n	1c478 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0xb4>
   1c452:	e01e      	b.n	1c492 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0xce>
   1c454:	f640 018f 	movw	r1, #2191	; 0x88f
   1c458:	203e      	movs	r0, #62	; 0x3e
   1c45a:	f7f5 fa91 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1c45e:	f7f5 f8bf 	bl	115e0 <mpsl_fem_pa_configuration_clear>
   1c462:	2800      	cmp	r0, #0
   1c464:	bf18      	it	ne
   1c466:	f1b0 3fff 	cmpne.w	r0, #4294967295	; 0xffffffff
   1c46a:	d012      	beq.n	1c492 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0xce>
   1c46c:	f44f 610a 	mov.w	r1, #2208	; 0x8a0
   1c470:	f04f 003e 	mov.w	r0, #62	; 0x3e
   1c474:	f7f5 fa84 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1c478:	f7f5 f8a0 	bl	115bc <mpsl_fem_lna_configuration_clear>
   1c47c:	2800      	cmp	r0, #0
   1c47e:	bf18      	it	ne
   1c480:	f1b0 3fff 	cmpne.w	r0, #4294967295	; 0xffffffff
   1c484:	d005      	beq.n	1c492 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0xce>
   1c486:	f640 01a6 	movw	r1, #2214	; 0x8a6
   1c48a:	f04f 003e 	mov.w	r0, #62	; 0x3e
   1c48e:	f7f5 fa77 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1c492:	f8c4 6110 	str.w	r6, [r4, #272]	; 0x110
   1c496:	2000      	movs	r0, #0
   1c498:	f001 fa2e 	bl	1d8f8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
   1c49c:	71ee      	strb	r6, [r5, #7]
   1c49e:	722e      	strb	r6, [r5, #8]
   1c4a0:	726e      	strb	r6, [r5, #9]
   1c4a2:	f895 0044 	ldrb.w	r0, [r5, #68]	; 0x44
   1c4a6:	b1e0      	cbz	r0, 1c4e2 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x11e>
   1c4a8:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
   1c4ac:	f420 1080 	bic.w	r0, r0, #1048576	; 0x100000
   1c4b0:	f040 0002 	orr.w	r0, r0, #2
   1c4b4:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
   1c4b8:	f44f 2080 	mov.w	r0, #262144	; 0x40000
   1c4bc:	f8ca 0000 	str.w	r0, [sl]
   1c4c0:	4914      	ldr	r1, [pc, #80]	; (1c514 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x150>)
   1c4c2:	2000      	movs	r0, #0
   1c4c4:	680a      	ldr	r2, [r1, #0]
   1c4c6:	f360 4213 	bfi	r2, r0, #16, #4
   1c4ca:	600a      	str	r2, [r1, #0]
   1c4cc:	6968      	ldr	r0, [r5, #20]
   1c4ce:	4912      	ldr	r1, [pc, #72]	; (1c518 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x154>)
   1c4d0:	f020 0003 	bic.w	r0, r0, #3
   1c4d4:	6168      	str	r0, [r5, #20]
   1c4d6:	6008      	str	r0, [r1, #0]
   1c4d8:	4911      	ldr	r1, [pc, #68]	; (1c520 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x15c>)
   1c4da:	4810      	ldr	r0, [pc, #64]	; (1c51c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x158>)
   1c4dc:	6008      	str	r0, [r1, #0]
   1c4de:	f885 6044 	strb.w	r6, [r5, #68]	; 0x44
   1c4e2:	f1b9 0f00 	cmp.w	r9, #0
   1c4e6:	bf1c      	itt	ne
   1c4e8:	2010      	movne	r0, #16
   1c4ea:	f8c4 0304 	strne.w	r0, [r4, #772]	; 0x304
   1c4ee:	f1b8 0f00 	cmp.w	r8, #0
   1c4f2:	bf18      	it	ne
   1c4f4:	6127      	strne	r7, [r4, #16]
   1c4f6:	f895 0045 	ldrb.w	r0, [r5, #69]	; 0x45
   1c4fa:	2800      	cmp	r0, #0
   1c4fc:	bf1c      	itt	ne
   1c4fe:	6127      	strne	r7, [r4, #16]
   1c500:	f885 6045 	strbne.w	r6, [r5, #69]	; 0x45
   1c504:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c508:	40001000 	.word	0x40001000
   1c50c:	200017d8 	.word	0x200017d8
   1c510:	4001f508 	.word	0x4001f508
   1c514:	40001514 	.word	0x40001514
   1c518:	40001900 	.word	0x40001900
   1c51c:	00023280 	.word	0x00023280
   1c520:	40001910 	.word	0x40001910

0001c524 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>:
   1c524:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1c528:	4c54      	ldr	r4, [pc, #336]	; (1c67c <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x158>)
   1c52a:	4605      	mov	r5, r0
   1c52c:	b087      	sub	sp, #28
   1c52e:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
   1c532:	4689      	mov	r9, r1
   1c534:	f010 0f01 	tst.w	r0, #1
   1c538:	d013      	beq.n	1c562 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x3e>
   1c53a:	2d00      	cmp	r5, #0
   1c53c:	bf0c      	ite	eq
   1c53e:	2004      	moveq	r0, #4
   1c540:	2002      	movne	r0, #2
   1c542:	f88d 0014 	strb.w	r0, [sp, #20]
   1c546:	2000      	movs	r0, #0
   1c548:	f88d 0015 	strb.w	r0, [sp, #21]
   1c54c:	f88d 0016 	strb.w	r0, [sp, #22]
   1c550:	a805      	add	r0, sp, #20
   1c552:	f7f4 ff59 	bl	11408 <mpsl_cx_request>
   1c556:	b148      	cbz	r0, 1c56c <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x48>
   1c558:	f640 21b4 	movw	r1, #2740	; 0xab4
   1c55c:	203e      	movs	r0, #62	; 0x3e
   1c55e:	f7f5 fa0f 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1c562:	f240 717c 	movw	r1, #1916	; 0x77c
   1c566:	203e      	movs	r0, #62	; 0x3e
   1c568:	f7f5 fa0a 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1c56c:	4e44      	ldr	r6, [pc, #272]	; (1c680 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x15c>)
   1c56e:	f8d6 0200 	ldr.w	r0, [r6, #512]	; 0x200
   1c572:	f040 0001 	orr.w	r0, r0, #1
   1c576:	f8c6 0200 	str.w	r0, [r6, #512]	; 0x200
   1c57a:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
   1c57e:	f04f 0802 	mov.w	r8, #2
   1c582:	f040 0002 	orr.w	r0, r0, #2
   1c586:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
   1c58a:	2701      	movs	r7, #1
   1c58c:	b115      	cbz	r5, 1c594 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x70>
   1c58e:	2d01      	cmp	r5, #1
   1c590:	d006      	beq.n	1c5a0 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x7c>
   1c592:	e00b      	b.n	1c5ac <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x88>
   1c594:	4648      	mov	r0, r9
   1c596:	f001 fa6d 	bl	1da74 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x188>
   1c59a:	7267      	strb	r7, [r4, #9]
   1c59c:	6037      	str	r7, [r6, #0]
   1c59e:	e005      	b.n	1c5ac <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x88>
   1c5a0:	4648      	mov	r0, r9
   1c5a2:	f001 f9e3 	bl	1d96c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x80>
   1c5a6:	f884 8009 	strb.w	r8, [r4, #9]
   1c5aa:	6077      	str	r7, [r6, #4]
   1c5ac:	4835      	ldr	r0, [pc, #212]	; (1c684 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x160>)
   1c5ae:	64c7      	str	r7, [r0, #76]	; 0x4c
   1c5b0:	4835      	ldr	r0, [pc, #212]	; (1c688 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x164>)
   1c5b2:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
   1c5b6:	8ba1      	ldrh	r1, [r4, #28]
   1c5b8:	2996      	cmp	r1, #150	; 0x96
   1c5ba:	d32e      	bcc.n	1c61a <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0xf6>
   1c5bc:	4933      	ldr	r1, [pc, #204]	; (1c68c <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x168>)
   1c5be:	b135      	cbz	r5, 1c5ce <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0xaa>
   1c5c0:	2d01      	cmp	r5, #1
   1c5c2:	d017      	beq.n	1c5f4 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0xd0>
   1c5c4:	f44f 61ec 	mov.w	r1, #1888	; 0x760
   1c5c8:	203e      	movs	r0, #62	; 0x3e
   1c5ca:	f7f5 f9d9 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1c5ce:	f100 0228 	add.w	r2, r0, #40	; 0x28
   1c5d2:	e9c1 0202 	strd	r0, r2, [r1, #8]
   1c5d6:	492e      	ldr	r1, [pc, #184]	; (1c690 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x16c>)
   1c5d8:	482c      	ldr	r0, [pc, #176]	; (1c68c <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x168>)
   1c5da:	f7f5 f807 	bl	115ec <mpsl_fem_pa_configuration_set>
   1c5de:	2800      	cmp	r0, #0
   1c5e0:	bf18      	it	ne
   1c5e2:	f1b0 3fff 	cmpne.w	r0, #4294967295	; 0xffffffff
   1c5e6:	d018      	beq.n	1c61a <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0xf6>
   1c5e8:	f240 714f 	movw	r1, #1871	; 0x74f
   1c5ec:	f04f 003e 	mov.w	r0, #62	; 0x3e
   1c5f0:	f7f5 f9c6 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1c5f4:	f100 0229 	add.w	r2, r0, #41	; 0x29
   1c5f8:	e9c1 0202 	strd	r0, r2, [r1, #8]
   1c5fc:	4924      	ldr	r1, [pc, #144]	; (1c690 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x16c>)
   1c5fe:	4823      	ldr	r0, [pc, #140]	; (1c68c <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x168>)
   1c600:	f7f4 ffe2 	bl	115c8 <mpsl_fem_lna_configuration_set>
   1c604:	2800      	cmp	r0, #0
   1c606:	bf18      	it	ne
   1c608:	f1b0 3fff 	cmpne.w	r0, #4294967295	; 0xffffffff
   1c60c:	d005      	beq.n	1c61a <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0xf6>
   1c60e:	f240 715c 	movw	r1, #1884	; 0x75c
   1c612:	f04f 003e 	mov.w	r0, #62	; 0x3e
   1c616:	f7f5 f9b3 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1c61a:	f88d 8000 	strb.w	r8, [sp]
   1c61e:	2d00      	cmp	r5, #0
   1c620:	bf0c      	ite	eq
   1c622:	2001      	moveq	r0, #1
   1c624:	2000      	movne	r0, #0
   1c626:	f88d 0001 	strb.w	r0, [sp, #1]
   1c62a:	4668      	mov	r0, sp
   1c62c:	f7f4 ff76 	bl	1151c <sym_H2AKPOL4Q6GKGQJVBUBWLPO3RBNKXXQE2HSOELQ>
   1c630:	a805      	add	r0, sp, #20
   1c632:	f7f4 fed7 	bl	113e4 <mpsl_cx_granted_ops_get>
   1c636:	b120      	cbz	r0, 1c642 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x11e>
   1c638:	f640 21d4 	movw	r1, #2772	; 0xad4
   1c63c:	203e      	movs	r0, #62	; 0x3e
   1c63e:	f7f5 f99f 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1c642:	7a61      	ldrb	r1, [r4, #9]
   1c644:	f89d 0014 	ldrb.w	r0, [sp, #20]
   1c648:	2901      	cmp	r1, #1
   1c64a:	bf08      	it	eq
   1c64c:	ea27 0090 	biceq.w	r0, r7, r0, lsr #2
   1c650:	d004      	beq.n	1c65c <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x138>
   1c652:	2902      	cmp	r1, #2
   1c654:	bf14      	ite	ne
   1c656:	2000      	movne	r0, #0
   1c658:	ea27 0050 	biceq.w	r0, r7, r0, lsr #1
   1c65c:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
   1c660:	2800      	cmp	r0, #0
   1c662:	bf04      	itt	eq
   1c664:	b007      	addeq	sp, #28
   1c666:	e8bd 83f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1c66a:	f44f 1060 	mov.w	r0, #3670016	; 0x380000
   1c66e:	4909      	ldr	r1, [pc, #36]	; (1c694 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x170>)
   1c670:	6008      	str	r0, [r1, #0]
   1c672:	6137      	str	r7, [r6, #16]
   1c674:	b007      	add	sp, #28
   1c676:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1c67a:	0000      	.short	0x0000
   1c67c:	200017d8 	.word	0x200017d8
   1c680:	40001000 	.word	0x40001000
   1c684:	40008000 	.word	0x40008000
   1c688:	4000800c 	.word	0x4000800c
   1c68c:	200003a4 	.word	0x200003a4
   1c690:	0001db8c 	.word	0x0001db8c
   1c694:	4001f508 	.word	0x4001f508

0001c698 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>:
   1c698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c69c:	4c90      	ldr	r4, [pc, #576]	; (1c8e0 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x248>)
   1c69e:	0005      	movs	r5, r0
   1c6a0:	b087      	sub	sp, #28
   1c6a2:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
   1c6a6:	460f      	mov	r7, r1
   1c6a8:	f040 0002 	orr.w	r0, r0, #2
   1c6ac:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
   1c6b0:	bf0c      	ite	eq
   1c6b2:	2004      	moveq	r0, #4
   1c6b4:	2002      	movne	r0, #2
   1c6b6:	f88d 0000 	strb.w	r0, [sp]
   1c6ba:	f04f 0a00 	mov.w	sl, #0
   1c6be:	f88d a001 	strb.w	sl, [sp, #1]
   1c6c2:	f88d a002 	strb.w	sl, [sp, #2]
   1c6c6:	4668      	mov	r0, sp
   1c6c8:	f7f4 fe9e 	bl	11408 <mpsl_cx_request>
   1c6cc:	b120      	cbz	r0, 1c6d8 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x40>
   1c6ce:	f640 21b4 	movw	r1, #2740	; 0xab4
   1c6d2:	203e      	movs	r0, #62	; 0x3e
   1c6d4:	f7f5 f954 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1c6d8:	f8df b208 	ldr.w	fp, [pc, #520]	; 1c8e4 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x24c>
   1c6dc:	4e82      	ldr	r6, [pc, #520]	; (1c8e8 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x250>)
   1c6de:	f04f 0800 	mov.w	r8, #0
   1c6e2:	f04f 0901 	mov.w	r9, #1
   1c6e6:	b115      	cbz	r5, 1c6ee <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x56>
   1c6e8:	2d01      	cmp	r5, #1
   1c6ea:	d020      	beq.n	1c72e <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x96>
   1c6ec:	e037      	b.n	1c75e <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xc6>
   1c6ee:	4638      	mov	r0, r7
   1c6f0:	f001 f9c0 	bl	1da74 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x188>
   1c6f4:	f884 9009 	strb.w	r9, [r4, #9]
   1c6f8:	79e0      	ldrb	r0, [r4, #7]
   1c6fa:	2801      	cmp	r0, #1
   1c6fc:	d105      	bne.n	1c70a <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x72>
   1c6fe:	f8d6 0200 	ldr.w	r0, [r6, #512]	; 0x200
   1c702:	f040 0008 	orr.w	r0, r0, #8
   1c706:	f8c6 0200 	str.w	r0, [r6, #512]	; 0x200
   1c70a:	6b20      	ldr	r0, [r4, #48]	; 0x30
   1c70c:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
   1c710:	6320      	str	r0, [r4, #48]	; 0x30
   1c712:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   1c716:	f8cb 0000 	str.w	r0, [fp]
   1c71a:	4874      	ldr	r0, [pc, #464]	; (1c8ec <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x254>)
   1c71c:	f830 0017 	ldrh.w	r0, [r0, r7, lsl #1]
   1c720:	f500 71fa 	add.w	r1, r0, #500	; 0x1f4
   1c724:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   1c728:	fbb1 f8f0 	udiv	r8, r1, r0
   1c72c:	e017      	b.n	1c75e <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xc6>
   1c72e:	4638      	mov	r0, r7
   1c730:	f001 f91c 	bl	1d96c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x80>
   1c734:	2002      	movs	r0, #2
   1c736:	7260      	strb	r0, [r4, #9]
   1c738:	79e0      	ldrb	r0, [r4, #7]
   1c73a:	2801      	cmp	r0, #1
   1c73c:	d105      	bne.n	1c74a <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xb2>
   1c73e:	f8d6 0200 	ldr.w	r0, [r6, #512]	; 0x200
   1c742:	f040 0004 	orr.w	r0, r0, #4
   1c746:	f8c6 0200 	str.w	r0, [r6, #512]	; 0x200
   1c74a:	6b20      	ldr	r0, [r4, #48]	; 0x30
   1c74c:	f440 1000 	orr.w	r0, r0, #2097152	; 0x200000
   1c750:	6320      	str	r0, [r4, #48]	; 0x30
   1c752:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
   1c756:	f8cb 0000 	str.w	r0, [fp]
   1c75a:	f04f 0829 	mov.w	r8, #41	; 0x29
   1c75e:	79e0      	ldrb	r0, [r4, #7]
   1c760:	2800      	cmp	r0, #0
   1c762:	bf04      	itt	eq
   1c764:	f894 0034 	ldrbeq.w	r0, [r4, #52]	; 0x34
   1c768:	f040 0002 	orreq.w	r0, r0, #2
   1c76c:	d006      	beq.n	1c77c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xe4>
   1c76e:	2801      	cmp	r0, #1
   1c770:	bf04      	itt	eq
   1c772:	f894 0034 	ldrbeq.w	r0, [r4, #52]	; 0x34
   1c776:	f040 0004 	orreq.w	r0, r0, #4
   1c77a:	d101      	bne.n	1c780 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xe8>
   1c77c:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
   1c780:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
   1c784:	f8df b168 	ldr.w	fp, [pc, #360]	; 1c8f0 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x258>
   1c788:	f010 0f01 	tst.w	r0, #1
   1c78c:	d029      	beq.n	1c7e2 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x14a>
   1c78e:	f010 0f02 	tst.w	r0, #2
   1c792:	d016      	beq.n	1c7c2 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x12a>
   1c794:	f8d6 0200 	ldr.w	r0, [r6, #512]	; 0x200
   1c798:	f040 0001 	orr.w	r0, r0, #1
   1c79c:	f8c6 0200 	str.w	r0, [r6, #512]	; 0x200
   1c7a0:	f8d6 0550 	ldr.w	r0, [r6, #1360]	; 0x550
   1c7a4:	b2c0      	uxtb	r0, r0
   1c7a6:	280b      	cmp	r0, #11
   1c7a8:	bf18      	it	ne
   1c7aa:	280a      	cmpne	r0, #10
   1c7ac:	d003      	beq.n	1c7b6 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x11e>
   1c7ae:	2803      	cmp	r0, #3
   1c7b0:	bf18      	it	ne
   1c7b2:	2802      	cmpne	r0, #2
   1c7b4:	d115      	bne.n	1c7e2 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x14a>
   1c7b6:	f240 613e 	movw	r1, #1598	; 0x63e
   1c7ba:	f04f 003e 	mov.w	r0, #62	; 0x3e
   1c7be:	f7f5 f8df 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1c7c2:	f010 0f04 	tst.w	r0, #4
   1c7c6:	d00c      	beq.n	1c7e2 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x14a>
   1c7c8:	494b      	ldr	r1, [pc, #300]	; (1c8f8 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x260>)
   1c7ca:	484a      	ldr	r0, [pc, #296]	; (1c8f4 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x25c>)
   1c7cc:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
   1c7d0:	f8db 0140 	ldr.w	r0, [fp, #320]	; 0x140
   1c7d4:	b128      	cbz	r0, 1c7e2 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x14a>
   1c7d6:	f240 6146 	movw	r1, #1606	; 0x646
   1c7da:	f04f 003e 	mov.w	r0, #62	; 0x3e
   1c7de:	f7f5 f8cf 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1c7e2:	f001 fecc 	bl	1e57e <sym_F77FUTRRLLWPYDS7BBANG2WE3C4EDMYMAPNI54A>
   1c7e6:	b128      	cbz	r0, 1c7f4 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x15c>
   1c7e8:	f7ff fdec 	bl	1c3c4 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
   1c7ec:	b007      	add	sp, #28
   1c7ee:	2000      	movs	r0, #0
   1c7f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c7f4:	f001 fed5 	bl	1e5a2 <sym_5POQORD6JKUMWUFK7EQMHJRVL6FP7FFCXP7FODA>
   1c7f8:	f88d a004 	strb.w	sl, [sp, #4]
   1c7fc:	2d00      	cmp	r5, #0
   1c7fe:	bf14      	ite	ne
   1c800:	2100      	movne	r1, #0
   1c802:	2101      	moveq	r1, #1
   1c804:	f88d 1005 	strb.w	r1, [sp, #5]
   1c808:	e9cd b002 	strd	fp, r0, [sp, #8]
   1c80c:	eb0b 0080 	add.w	r0, fp, r0, lsl #2
   1c810:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
   1c814:	9004      	str	r0, [sp, #16]
   1c816:	bf18      	it	ne
   1c818:	f649 71ba 	movwne	r1, #40890	; 0x9fba
   1c81c:	d104      	bne.n	1c828 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x190>
   1c81e:	4833      	ldr	r0, [pc, #204]	; (1c8ec <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x254>)
   1c820:	f830 0017 	ldrh.w	r0, [r0, r7, lsl #1]
   1c824:	f500 7116 	add.w	r1, r0, #600	; 0x258
   1c828:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   1c82c:	fbb1 f0f0 	udiv	r0, r1, r0
   1c830:	9005      	str	r0, [sp, #20]
   1c832:	a801      	add	r0, sp, #4
   1c834:	f7f4 fe72 	bl	1151c <sym_H2AKPOL4Q6GKGQJVBUBWLPO3RBNKXXQE2HSOELQ>
   1c838:	8ba1      	ldrh	r1, [r4, #28]
   1c83a:	2000      	movs	r0, #0
   1c83c:	2996      	cmp	r1, #150	; 0x96
   1c83e:	d32c      	bcc.n	1c89a <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x202>
   1c840:	492e      	ldr	r1, [pc, #184]	; (1c8fc <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x264>)
   1c842:	b135      	cbz	r5, 1c852 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x1ba>
   1c844:	2d01      	cmp	r5, #1
   1c846:	d016      	beq.n	1c876 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x1de>
   1c848:	f44f 61ec 	mov.w	r1, #1888	; 0x760
   1c84c:	203e      	movs	r0, #62	; 0x3e
   1c84e:	f7f5 f897 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1c852:	2228      	movs	r2, #40	; 0x28
   1c854:	e9c1 0202 	strd	r0, r2, [r1, #8]
   1c858:	4929      	ldr	r1, [pc, #164]	; (1c900 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x268>)
   1c85a:	4828      	ldr	r0, [pc, #160]	; (1c8fc <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x264>)
   1c85c:	f7f4 fec6 	bl	115ec <mpsl_fem_pa_configuration_set>
   1c860:	2800      	cmp	r0, #0
   1c862:	bf18      	it	ne
   1c864:	f1b0 3fff 	cmpne.w	r0, #4294967295	; 0xffffffff
   1c868:	d017      	beq.n	1c89a <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x202>
   1c86a:	f240 714f 	movw	r1, #1871	; 0x74f
   1c86e:	f04f 003e 	mov.w	r0, #62	; 0x3e
   1c872:	f7f5 f885 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1c876:	2229      	movs	r2, #41	; 0x29
   1c878:	e9c1 0202 	strd	r0, r2, [r1, #8]
   1c87c:	4920      	ldr	r1, [pc, #128]	; (1c900 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x268>)
   1c87e:	481f      	ldr	r0, [pc, #124]	; (1c8fc <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x264>)
   1c880:	f7f4 fea2 	bl	115c8 <mpsl_fem_lna_configuration_set>
   1c884:	2800      	cmp	r0, #0
   1c886:	bf18      	it	ne
   1c888:	f1b0 3fff 	cmpne.w	r0, #4294967295	; 0xffffffff
   1c88c:	d005      	beq.n	1c89a <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x202>
   1c88e:	f240 715c 	movw	r1, #1884	; 0x75c
   1c892:	f04f 003e 	mov.w	r0, #62	; 0x3e
   1c896:	f7f5 f873 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1c89a:	a806      	add	r0, sp, #24
   1c89c:	f7f4 fda2 	bl	113e4 <mpsl_cx_granted_ops_get>
   1c8a0:	b120      	cbz	r0, 1c8ac <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x214>
   1c8a2:	f640 21d4 	movw	r1, #2772	; 0xad4
   1c8a6:	203e      	movs	r0, #62	; 0x3e
   1c8a8:	f7f5 f86a 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1c8ac:	7a61      	ldrb	r1, [r4, #9]
   1c8ae:	f89d 0018 	ldrb.w	r0, [sp, #24]
   1c8b2:	2901      	cmp	r1, #1
   1c8b4:	bf08      	it	eq
   1c8b6:	ea29 0090 	biceq.w	r0, r9, r0, lsr #2
   1c8ba:	d004      	beq.n	1c8c6 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x22e>
   1c8bc:	2902      	cmp	r1, #2
   1c8be:	bf14      	ite	ne
   1c8c0:	2000      	movne	r0, #0
   1c8c2:	ea29 0050 	biceq.w	r0, r9, r0, lsr #1
   1c8c6:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
   1c8ca:	b128      	cbz	r0, 1c8d8 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x240>
   1c8cc:	490d      	ldr	r1, [pc, #52]	; (1c904 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x26c>)
   1c8ce:	f44f 1060 	mov.w	r0, #3670016	; 0x380000
   1c8d2:	6008      	str	r0, [r1, #0]
   1c8d4:	f8c6 9010 	str.w	r9, [r6, #16]
   1c8d8:	b007      	add	sp, #28
   1c8da:	4640      	mov	r0, r8
   1c8dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c8e0:	200017d8 	.word	0x200017d8
   1c8e4:	4001f504 	.word	0x4001f504
   1c8e8:	40001000 	.word	0x40001000
   1c8ec:	0001db52 	.word	0x0001db52
   1c8f0:	40008000 	.word	0x40008000
   1c8f4:	40001008 	.word	0x40001008
   1c8f8:	4001f098 	.word	0x4001f098
   1c8fc:	200003a4 	.word	0x200003a4
   1c900:	0001db8c 	.word	0x0001db8c
   1c904:	4001f508 	.word	0x4001f508

0001c908 <sym_LSYZDZOMTD6BKKRX25HIBNLFKSFDXBS3PS4UKOY>:
   1c908:	4a02      	ldr	r2, [pc, #8]	; (1c914 <sym_LSYZDZOMTD6BKKRX25HIBNLFKSFDXBS3PS4UKOY+0xc>)
   1c90a:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
   1c90c:	6003      	str	r3, [r0, #0]
   1c90e:	6c10      	ldr	r0, [r2, #64]	; 0x40
   1c910:	6008      	str	r0, [r1, #0]
   1c912:	4770      	bx	lr
   1c914:	200017d8 	.word	0x200017d8

0001c918 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>:
   1c918:	b510      	push	{r4, lr}
   1c91a:	4604      	mov	r4, r0
   1c91c:	4807      	ldr	r0, [pc, #28]	; (1c93c <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI+0x24>)
   1c91e:	f7f4 fd67 	bl	113f0 <mpsl_cx_register_callback>
   1c922:	b120      	cbz	r0, 1c92e <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI+0x16>
   1c924:	f640 110f 	movw	r1, #2319	; 0x90f
   1c928:	203e      	movs	r0, #62	; 0x3e
   1c92a:	f7f5 f829 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1c92e:	e894 100e 	ldmia.w	r4, {r1, r2, r3, ip}
   1c932:	4803      	ldr	r0, [pc, #12]	; (1c940 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI+0x28>)
   1c934:	e880 100e 	stmia.w	r0, {r1, r2, r3, ip}
   1c938:	bd10      	pop	{r4, pc}
   1c93a:	0000      	.short	0x0000
   1c93c:	0001d941 	.word	0x0001d941
   1c940:	200017c8 	.word	0x200017c8

0001c944 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA>:
   1c944:	4916      	ldr	r1, [pc, #88]	; (1c9a0 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x5c>)
   1c946:	b510      	push	{r4, lr}
   1c948:	6a4a      	ldr	r2, [r1, #36]	; 0x24
   1c94a:	4282      	cmp	r2, r0
   1c94c:	d304      	bcc.n	1c958 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x14>
   1c94e:	f640 111f 	movw	r1, #2335	; 0x91f
   1c952:	203e      	movs	r0, #62	; 0x3e
   1c954:	f7f5 f814 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1c958:	2201      	movs	r2, #1
   1c95a:	f8df c048 	ldr.w	ip, [pc, #72]	; 1c9a4 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x60>
   1c95e:	730a      	strb	r2, [r1, #12]
   1c960:	6108      	str	r0, [r1, #16]
   1c962:	f8cc 2044 	str.w	r2, [ip, #68]	; 0x44
   1c966:	f10c 0304 	add.w	r3, ip, #4
   1c96a:	f8d3 4540 	ldr.w	r4, [r3, #1344]	; 0x540
   1c96e:	1d64      	adds	r4, r4, #5
   1c970:	4284      	cmp	r4, r0
   1c972:	d306      	bcc.n	1c982 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x3e>
   1c974:	480c      	ldr	r0, [pc, #48]	; (1c9a8 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x64>)
   1c976:	f8d0 1104 	ldr.w	r1, [r0, #260]	; 0x104
   1c97a:	2900      	cmp	r1, #0
   1c97c:	bf08      	it	eq
   1c97e:	6102      	streq	r2, [r0, #16]
   1c980:	bd10      	pop	{r4, pc}
   1c982:	2200      	movs	r2, #0
   1c984:	f8cc 2144 	str.w	r2, [ip, #324]	; 0x144
   1c988:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
   1c98c:	6b08      	ldr	r0, [r1, #48]	; 0x30
   1c98e:	f440 0080 	orr.w	r0, r0, #4194304	; 0x400000
   1c992:	6308      	str	r0, [r1, #48]	; 0x30
   1c994:	4905      	ldr	r1, [pc, #20]	; (1c9ac <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x68>)
   1c996:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
   1c99a:	6008      	str	r0, [r1, #0]
   1c99c:	bd10      	pop	{r4, pc}
   1c99e:	0000      	.short	0x0000
   1c9a0:	200017d8 	.word	0x200017d8
   1c9a4:	40008000 	.word	0x40008000
   1c9a8:	40001000 	.word	0x40001000
   1c9ac:	4001f504 	.word	0x4001f504

0001c9b0 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>:
   1c9b0:	b510      	push	{r4, lr}
   1c9b2:	4c0f      	ldr	r4, [pc, #60]	; (1c9f0 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x40>)
   1c9b4:	4603      	mov	r3, r0
   1c9b6:	2002      	movs	r0, #2
   1c9b8:	7320      	strb	r0, [r4, #12]
   1c9ba:	f894 c029 	ldrb.w	ip, [r4, #41]	; 0x29
   1c9be:	8ba0      	ldrh	r0, [r4, #28]
   1c9c0:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
   1c9c4:	7e22      	ldrb	r2, [r4, #24]
   1c9c6:	f1bc 0f01 	cmp.w	ip, #1
   1c9ca:	d00d      	beq.n	1c9e8 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x38>
   1c9cc:	f001 f94c 	bl	1dc68 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>
   1c9d0:	6120      	str	r0, [r4, #16]
   1c9d2:	4808      	ldr	r0, [pc, #32]	; (1c9f4 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x44>)
   1c9d4:	2100      	movs	r1, #0
   1c9d6:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
   1c9da:	6921      	ldr	r1, [r4, #16]
   1c9dc:	6a60      	ldr	r0, [r4, #36]	; 0x24
   1c9de:	4408      	add	r0, r1
   1c9e0:	4905      	ldr	r1, [pc, #20]	; (1c9f8 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x48>)
   1c9e2:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
   1c9e6:	bd10      	pop	{r4, pc}
   1c9e8:	f001 f95c 	bl	1dca4 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>
   1c9ec:	e7f0      	b.n	1c9d0 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x20>
   1c9ee:	0000      	.short	0x0000
   1c9f0:	200017d8 	.word	0x200017d8
   1c9f4:	40008000 	.word	0x40008000
   1c9f8:	40008004 	.word	0x40008004

0001c9fc <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI>:
   1c9fc:	b510      	push	{r4, lr}
   1c9fe:	f001 ff0a 	bl	1e816 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
   1ca02:	2800      	cmp	r0, #0
   1ca04:	bf08      	it	eq
   1ca06:	bd10      	popeq	{r4, pc}
   1ca08:	4803      	ldr	r0, [pc, #12]	; (1ca18 <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI+0x1c>)
   1ca0a:	6801      	ldr	r1, [r0, #0]
   1ca0c:	f021 0101 	bic.w	r1, r1, #1
   1ca10:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
   1ca14:	6001      	str	r1, [r0, #0]
   1ca16:	bd10      	pop	{r4, pc}
   1ca18:	40001774 	.word	0x40001774

0001ca1c <sym_2ORM7WHEENMS7XIJEHICWP3BYWWMKP4MLHSFBTY>:
   1ca1c:	b510      	push	{r4, lr}
   1ca1e:	2896      	cmp	r0, #150	; 0x96
   1ca20:	bf9e      	ittt	ls
   1ca22:	4904      	ldrls	r1, [pc, #16]	; (1ca34 <sym_2ORM7WHEENMS7XIJEHICWP3BYWWMKP4MLHSFBTY+0x18>)
   1ca24:	8388      	strhls	r0, [r1, #28]
   1ca26:	bd10      	popls	{r4, pc}
   1ca28:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
   1ca2c:	203e      	movs	r0, #62	; 0x3e
   1ca2e:	f7f4 ffa7 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1ca32:	0000      	.short	0x0000
   1ca34:	200017d8 	.word	0x200017d8

0001ca38 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>:
   1ca38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ca3c:	2248      	movs	r2, #72	; 0x48
   1ca3e:	2100      	movs	r1, #0
   1ca40:	481d      	ldr	r0, [pc, #116]	; (1cab8 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x80>)
   1ca42:	f001 ff86 	bl	1e952 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
   1ca46:	481c      	ldr	r0, [pc, #112]	; (1cab8 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x80>)
   1ca48:	2400      	movs	r4, #0
   1ca4a:	21ff      	movs	r1, #255	; 0xff
   1ca4c:	71c4      	strb	r4, [r0, #7]
   1ca4e:	7204      	strb	r4, [r0, #8]
   1ca50:	7244      	strb	r4, [r0, #9]
   1ca52:	f880 1037 	strb.w	r1, [r0, #55]	; 0x37
   1ca56:	215f      	movs	r1, #95	; 0x5f
   1ca58:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
   1ca5c:	f001 fe94 	bl	1e788 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
   1ca60:	4f16      	ldr	r7, [pc, #88]	; (1cabc <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x84>)
   1ca62:	4d17      	ldr	r5, [pc, #92]	; (1cac0 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x88>)
   1ca64:	4e17      	ldr	r6, [pc, #92]	; (1cac4 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x8c>)
   1ca66:	b928      	cbnz	r0, 1ca74 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x3c>
   1ca68:	f001 fea5 	bl	1e7b6 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
   1ca6c:	b910      	cbnz	r0, 1ca74 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x3c>
   1ca6e:	f001 feac 	bl	1e7ca <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
   1ca72:	b140      	cbz	r0, 1ca86 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x4e>
   1ca74:	2224      	movs	r2, #36	; 0x24
   1ca76:	21ff      	movs	r1, #255	; 0xff
   1ca78:	4638      	mov	r0, r7
   1ca7a:	f001 ff6a 	bl	1e952 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
   1ca7e:	602c      	str	r4, [r5, #0]
   1ca80:	6034      	str	r4, [r6, #0]
   1ca82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1ca86:	f001 fee0 	bl	1e84a <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
   1ca8a:	b910      	cbnz	r0, 1ca92 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5a>
   1ca8c:	f001 fed3 	bl	1e836 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
   1ca90:	b140      	cbz	r0, 1caa4 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x6c>
   1ca92:	2240      	movs	r2, #64	; 0x40
   1ca94:	21ff      	movs	r1, #255	; 0xff
   1ca96:	4638      	mov	r0, r7
   1ca98:	f001 ff5b 	bl	1e952 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
   1ca9c:	602c      	str	r4, [r5, #0]
   1ca9e:	6034      	str	r4, [r6, #0]
   1caa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1caa4:	2238      	movs	r2, #56	; 0x38
   1caa6:	21ff      	movs	r1, #255	; 0xff
   1caa8:	4638      	mov	r0, r7
   1caaa:	f001 ff52 	bl	1e952 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
   1caae:	602c      	str	r4, [r5, #0]
   1cab0:	6034      	str	r4, [r6, #0]
   1cab2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1cab6:	0000      	.short	0x0000
   1cab8:	200017d8 	.word	0x200017d8
   1cabc:	40000e00 	.word	0x40000e00
   1cac0:	40000e08 	.word	0x40000e08
   1cac4:	40000e10 	.word	0x40000e10

0001cac8 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>:
   1cac8:	4801      	ldr	r0, [pc, #4]	; (1cad0 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA+0x8>)
   1caca:	6a40      	ldr	r0, [r0, #36]	; 0x24
   1cacc:	4770      	bx	lr
   1cace:	0000      	.short	0x0000
   1cad0:	200017d8 	.word	0x200017d8

0001cad4 <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI>:
   1cad4:	4801      	ldr	r0, [pc, #4]	; (1cadc <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI+0x8>)
   1cad6:	6a00      	ldr	r0, [r0, #32]
   1cad8:	4770      	bx	lr
   1cada:	0000      	.short	0x0000
   1cadc:	200017d8 	.word	0x200017d8

0001cae0 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>:
   1cae0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1cae4:	4e29      	ldr	r6, [pc, #164]	; (1cb8c <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0xac>)
   1cae6:	4c28      	ldr	r4, [pc, #160]	; (1cb88 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0xa8>)
   1cae8:	2000      	movs	r0, #0
   1caea:	f8c6 0540 	str.w	r0, [r6, #1344]	; 0x540
   1caee:	1d27      	adds	r7, r4, #4
   1caf0:	f8c7 0540 	str.w	r0, [r7, #1344]	; 0x540
   1caf4:	f8c4 0540 	str.w	r0, [r4, #1344]	; 0x540
   1caf8:	f106 0804 	add.w	r8, r6, #4
   1cafc:	f8c8 0540 	str.w	r0, [r8, #1344]	; 0x540
   1cb00:	f7ff fc60 	bl	1c3c4 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
   1cb04:	4d22      	ldr	r5, [pc, #136]	; (1cb90 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0xb0>)
   1cb06:	8ba8      	ldrh	r0, [r5, #28]
   1cb08:	2896      	cmp	r0, #150	; 0x96
   1cb0a:	d30c      	bcc.n	1cb26 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x46>
   1cb0c:	f7f4 fd50 	bl	115b0 <mpsl_fem_disable>
   1cb10:	2800      	cmp	r0, #0
   1cb12:	bf18      	it	ne
   1cb14:	f1b0 3fff 	cmpne.w	r0, #4294967295	; 0xffffffff
   1cb18:	d005      	beq.n	1cb26 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x46>
   1cb1a:	f240 516d 	movw	r1, #1389	; 0x56d
   1cb1e:	f04f 003e 	mov.w	r0, #62	; 0x3e
   1cb22:	f7f4 ff2d 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1cb26:	f7f4 fc69 	bl	113fc <mpsl_cx_release>
   1cb2a:	b120      	cbz	r0, 1cb36 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x56>
   1cb2c:	f240 5181 	movw	r1, #1409	; 0x581
   1cb30:	203e      	movs	r0, #62	; 0x3e
   1cb32:	f7f4 ff25 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1cb36:	6b28      	ldr	r0, [r5, #48]	; 0x30
   1cb38:	4916      	ldr	r1, [pc, #88]	; (1cb94 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0xb4>)
   1cb3a:	f040 6044 	orr.w	r0, r0, #205520896	; 0xc400000
   1cb3e:	6008      	str	r0, [r1, #0]
   1cb40:	2000      	movs	r0, #0
   1cb42:	6328      	str	r0, [r5, #48]	; 0x30
   1cb44:	7328      	strb	r0, [r5, #12]
   1cb46:	6268      	str	r0, [r5, #36]	; 0x24
   1cb48:	6228      	str	r0, [r5, #32]
   1cb4a:	f8c6 0540 	str.w	r0, [r6, #1344]	; 0x540
   1cb4e:	f8c7 0540 	str.w	r0, [r7, #1344]	; 0x540
   1cb52:	f8c4 0540 	str.w	r0, [r4, #1344]	; 0x540
   1cb56:	f8c8 0540 	str.w	r0, [r8, #1344]	; 0x540
   1cb5a:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
   1cb5e:	f8c4 0144 	str.w	r0, [r4, #324]	; 0x144
   1cb62:	f8c4 0140 	str.w	r0, [r4, #320]	; 0x140
   1cb66:	f8c4 014c 	str.w	r0, [r4, #332]	; 0x14c
   1cb6a:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
   1cb6e:	2002      	movs	r0, #2
   1cb70:	f8c1 0180 	str.w	r0, [r1, #384]	; 0x180
   1cb74:	f501 71c0 	add.w	r1, r1, #384	; 0x180
   1cb78:	f3bf 8f4f 	dsb	sy
   1cb7c:	f3bf 8f6f 	isb	sy
   1cb80:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
   1cb84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1cb88:	40008000 	.word	0x40008000
   1cb8c:	40008008 	.word	0x40008008
   1cb90:	200017d8 	.word	0x200017d8
   1cb94:	4001f508 	.word	0x4001f508

0001cb98 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>:
   1cb98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1cb9c:	f04f 28e0 	mov.w	r8, #3758153728	; 0xe000e000
   1cba0:	2701      	movs	r7, #1
   1cba2:	f04f 0902 	mov.w	r9, #2
   1cba6:	2500      	movs	r5, #0
   1cba8:	f8c8 9180 	str.w	r9, [r8, #384]	; 0x180
   1cbac:	f3bf 8f4f 	dsb	sy
   1cbb0:	f3bf 8f6f 	isb	sy
   1cbb4:	4c39      	ldr	r4, [pc, #228]	; (1cc9c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x104>)
   1cbb6:	f8c4 5ffc 	str.w	r5, [r4, #4092]	; 0xffc
   1cbba:	f8c4 7ffc 	str.w	r7, [r4, #4092]	; 0xffc
   1cbbe:	f001 fe1a 	bl	1e7f6 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
   1cbc2:	4e37      	ldr	r6, [pc, #220]	; (1cca0 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x108>)
   1cbc4:	b118      	cbz	r0, 1cbce <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x36>
   1cbc6:	6830      	ldr	r0, [r6, #0]
   1cbc8:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
   1cbcc:	6030      	str	r0, [r6, #0]
   1cbce:	f001 fe06 	bl	1e7de <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
   1cbd2:	b138      	cbz	r0, 1cbe4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x4c>
   1cbd4:	6830      	ldr	r0, [r6, #0]
   1cbd6:	f020 0069 	bic.w	r0, r0, #105	; 0x69
   1cbda:	f040 0096 	orr.w	r0, r0, #150	; 0x96
   1cbde:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
   1cbe2:	6030      	str	r0, [r6, #0]
   1cbe4:	f001 fe17 	bl	1e816 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
   1cbe8:	b130      	cbz	r0, 1cbf8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x60>
   1cbea:	482e      	ldr	r0, [pc, #184]	; (1cca4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x10c>)
   1cbec:	6801      	ldr	r1, [r0, #0]
   1cbee:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
   1cbf2:	f441 51b0 	orr.w	r1, r1, #5632	; 0x1600
   1cbf6:	6001      	str	r1, [r0, #0]
   1cbf8:	492c      	ldr	r1, [pc, #176]	; (1ccac <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x114>)
   1cbfa:	482b      	ldr	r0, [pc, #172]	; (1cca8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x110>)
   1cbfc:	6008      	str	r0, [r1, #0]
   1cbfe:	f7f4 fd0d 	bl	1161c <mpsl_fem_device_config_254_apply_get>
   1cc02:	b140      	cbz	r0, 1cc16 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x7e>
   1cc04:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   1cc08:	f8d0 0330 	ldr.w	r0, [r0, #816]	; 0x330
   1cc0c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   1cc10:	bf1c      	itt	ne
   1cc12:	4927      	ldrne	r1, [pc, #156]	; (1ccb0 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x118>)
   1cc14:	6008      	strne	r0, [r1, #0]
   1cc16:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
   1cc1a:	6e00      	ldr	r0, [r0, #96]	; 0x60
   1cc1c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   1cc20:	d004      	beq.n	1cc2c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x94>
   1cc22:	4924      	ldr	r1, [pc, #144]	; (1ccb4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x11c>)
   1cc24:	680a      	ldr	r2, [r1, #0]
   1cc26:	f360 4217 	bfi	r2, r0, #16, #8
   1cc2a:	600a      	str	r2, [r1, #0]
   1cc2c:	f240 1103 	movw	r1, #259	; 0x103
   1cc30:	f240 605b 	movw	r0, #1627	; 0x65b
   1cc34:	f8c4 1534 	str.w	r1, [r4, #1332]	; 0x534
   1cc38:	f8c4 0538 	str.w	r0, [r4, #1336]	; 0x538
   1cc3c:	481e      	ldr	r0, [pc, #120]	; (1ccb8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x120>)
   1cc3e:	6007      	str	r7, [r0, #0]
   1cc40:	481e      	ldr	r0, [pc, #120]	; (1ccbc <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x124>)
   1cc42:	4a1f      	ldr	r2, [pc, #124]	; (1ccc0 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x128>)
   1cc44:	2103      	movs	r1, #3
   1cc46:	7607      	strb	r7, [r0, #24]
   1cc48:	6011      	str	r1, [r2, #0]
   1cc4a:	f240 2101 	movw	r1, #513	; 0x201
   1cc4e:	f8c4 1650 	str.w	r1, [r4, #1616]	; 0x650
   1cc52:	2102      	movs	r1, #2
   1cc54:	f8c4 1200 	str.w	r1, [r4, #512]	; 0x200
   1cc58:	4a1a      	ldr	r2, [pc, #104]	; (1ccc4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x12c>)
   1cc5a:	f04f 6140 	mov.w	r1, #201326592	; 0xc000000
   1cc5e:	6011      	str	r1, [r2, #0]
   1cc60:	f1a0 0110 	sub.w	r1, r0, #16
   1cc64:	2296      	movs	r2, #150	; 0x96
   1cc66:	870d      	strh	r5, [r1, #56]	; 0x38
   1cc68:	4917      	ldr	r1, [pc, #92]	; (1ccc8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x130>)
   1cc6a:	6245      	str	r5, [r0, #36]	; 0x24
   1cc6c:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
   1cc70:	700d      	strb	r5, [r1, #0]
   1cc72:	8382      	strh	r2, [r0, #28]
   1cc74:	4a15      	ldr	r2, [pc, #84]	; (1cccc <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x134>)
   1cc76:	6812      	ldr	r2, [r2, #0]
   1cc78:	6142      	str	r2, [r0, #20]
   1cc7a:	f880 5044 	strb.w	r5, [r0, #68]	; 0x44
   1cc7e:	f8c8 9280 	str.w	r9, [r8, #640]	; 0x280
   1cc82:	2010      	movs	r0, #16
   1cc84:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
   1cc88:	f8c8 9100 	str.w	r9, [r8, #256]	; 0x100
   1cc8c:	6848      	ldr	r0, [r1, #4]
   1cc8e:	2800      	cmp	r0, #0
   1cc90:	bf08      	it	eq
   1cc92:	e8bd 87f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1cc96:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1cc9a:	4700      	bx	r0
   1cc9c:	40001000 	.word	0x40001000
   1cca0:	4000173c 	.word	0x4000173c
   1cca4:	40001740 	.word	0x40001740
   1cca8:	8900002c 	.word	0x8900002c
   1ccac:	40001778 	.word	0x40001778
   1ccb0:	4000174c 	.word	0x4000174c
   1ccb4:	4000158c 	.word	0x4000158c
   1ccb8:	40001530 	.word	0x40001530
   1ccbc:	200017d8 	.word	0x200017d8
   1ccc0:	40001510 	.word	0x40001510
   1ccc4:	4001f504 	.word	0x4001f504
   1ccc8:	2000039c 	.word	0x2000039c
   1cccc:	40001900 	.word	0x40001900

0001ccd0 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>:
   1ccd0:	4901      	ldr	r1, [pc, #4]	; (1ccd8 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA+0x8>)
   1ccd2:	7648      	strb	r0, [r1, #25]
   1ccd4:	4770      	bx	lr
   1ccd6:	0000      	.short	0x0000
   1ccd8:	200017d8 	.word	0x200017d8

0001ccdc <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>:
   1ccdc:	4901      	ldr	r1, [pc, #4]	; (1cce4 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY+0x8>)
   1ccde:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
   1cce2:	4770      	bx	lr
   1cce4:	0001dbc8 	.word	0x0001dbc8

0001cce8 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>:
   1cce8:	491e      	ldr	r1, [pc, #120]	; (1cd64 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x7c>)
   1ccea:	b510      	push	{r4, lr}
   1ccec:	f8c1 0504 	str.w	r0, [r1, #1284]	; 0x504
   1ccf0:	4a1d      	ldr	r2, [pc, #116]	; (1cd68 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x80>)
   1ccf2:	f892 0034 	ldrb.w	r0, [r2, #52]	; 0x34
   1ccf6:	f040 0001 	orr.w	r0, r0, #1
   1ccfa:	f882 0034 	strb.w	r0, [r2, #52]	; 0x34
   1ccfe:	f010 0f01 	tst.w	r0, #1
   1cd02:	bf08      	it	eq
   1cd04:	bd10      	popeq	{r4, pc}
   1cd06:	f010 0f02 	tst.w	r0, #2
   1cd0a:	d016      	beq.n	1cd3a <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x52>
   1cd0c:	f8d1 0200 	ldr.w	r0, [r1, #512]	; 0x200
   1cd10:	f040 0001 	orr.w	r0, r0, #1
   1cd14:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
   1cd18:	f8d1 0550 	ldr.w	r0, [r1, #1360]	; 0x550
   1cd1c:	b2c0      	uxtb	r0, r0
   1cd1e:	280b      	cmp	r0, #11
   1cd20:	bf18      	it	ne
   1cd22:	280a      	cmpne	r0, #10
   1cd24:	d003      	beq.n	1cd2e <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x46>
   1cd26:	2803      	cmp	r0, #3
   1cd28:	bf1c      	itt	ne
   1cd2a:	2802      	cmpne	r0, #2
   1cd2c:	bd10      	popne	{r4, pc}
   1cd2e:	f240 613e 	movw	r1, #1598	; 0x63e
   1cd32:	f04f 003e 	mov.w	r0, #62	; 0x3e
   1cd36:	f7f4 fe23 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1cd3a:	f010 0f04 	tst.w	r0, #4
   1cd3e:	bf08      	it	eq
   1cd40:	bd10      	popeq	{r4, pc}
   1cd42:	480a      	ldr	r0, [pc, #40]	; (1cd6c <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x84>)
   1cd44:	490a      	ldr	r1, [pc, #40]	; (1cd70 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x88>)
   1cd46:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
   1cd4a:	480a      	ldr	r0, [pc, #40]	; (1cd74 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x8c>)
   1cd4c:	f8d0 0140 	ldr.w	r0, [r0, #320]	; 0x140
   1cd50:	2800      	cmp	r0, #0
   1cd52:	bf08      	it	eq
   1cd54:	bd10      	popeq	{r4, pc}
   1cd56:	f240 6146 	movw	r1, #1606	; 0x646
   1cd5a:	f04f 003e 	mov.w	r0, #62	; 0x3e
   1cd5e:	f7f4 fe0f 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1cd62:	0000      	.short	0x0000
   1cd64:	40001000 	.word	0x40001000
   1cd68:	200017d8 	.word	0x200017d8
   1cd6c:	40001008 	.word	0x40001008
   1cd70:	4001f098 	.word	0x4001f098
   1cd74:	40008000 	.word	0x40008000

0001cd78 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>:
   1cd78:	4901      	ldr	r1, [pc, #4]	; (1cd80 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY+0x8>)
   1cd7a:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
   1cd7e:	4770      	bx	lr
   1cd80:	0001dbec 	.word	0x0001dbec

0001cd84 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>:
   1cd84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cd88:	b089      	sub	sp, #36	; 0x24
   1cd8a:	4690      	mov	r8, r2
   1cd8c:	460d      	mov	r5, r1
   1cd8e:	0007      	movs	r7, r0
   1cd90:	bf0c      	ite	eq
   1cd92:	2004      	moveq	r0, #4
   1cd94:	2002      	movne	r0, #2
   1cd96:	f88d 0000 	strb.w	r0, [sp]
   1cd9a:	f04f 0900 	mov.w	r9, #0
   1cd9e:	f88d 9001 	strb.w	r9, [sp, #1]
   1cda2:	f88d 9002 	strb.w	r9, [sp, #2]
   1cda6:	4668      	mov	r0, sp
   1cda8:	f7f4 fb2e 	bl	11408 <mpsl_cx_request>
   1cdac:	b120      	cbz	r0, 1cdb8 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x34>
   1cdae:	f640 21b4 	movw	r1, #2740	; 0xab4
   1cdb2:	203e      	movs	r0, #62	; 0x3e
   1cdb4:	f7f4 fde4 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1cdb8:	f8df a204 	ldr.w	sl, [pc, #516]	; 1cfc0 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x23c>
   1cdbc:	4e81      	ldr	r6, [pc, #516]	; (1cfc4 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x240>)
   1cdbe:	4c82      	ldr	r4, [pc, #520]	; (1cfc8 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x244>)
   1cdc0:	f44f 7b7a 	mov.w	fp, #1000	; 0x3e8
   1cdc4:	b137      	cbz	r7, 1cdd4 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x50>
   1cdc6:	2f01      	cmp	r7, #1
   1cdc8:	d01a      	beq.n	1ce00 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x7c>
   1cdca:	f640 0124 	movw	r1, #2084	; 0x824
   1cdce:	203e      	movs	r0, #62	; 0x3e
   1cdd0:	f7f4 fdd6 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1cdd4:	4640      	mov	r0, r8
   1cdd6:	f000 fe4d 	bl	1da74 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x188>
   1cdda:	2001      	movs	r0, #1
   1cddc:	7260      	strb	r0, [r4, #9]
   1cdde:	487b      	ldr	r0, [pc, #492]	; (1cfcc <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x248>)
   1cde0:	f830 1018 	ldrh.w	r1, [r0, r8, lsl #1]
   1cde4:	79e0      	ldrb	r0, [r4, #7]
   1cde6:	2801      	cmp	r0, #1
   1cde8:	d004      	beq.n	1cdf4 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x70>
   1cdea:	f501 71fa 	add.w	r1, r1, #500	; 0x1f4
   1cdee:	fbb1 f1fb 	udiv	r1, r1, fp
   1cdf2:	1a6d      	subs	r5, r5, r1
   1cdf4:	2800      	cmp	r0, #0
   1cdf6:	bf04      	itt	eq
   1cdf8:	4630      	moveq	r0, r6
   1cdfa:	f8ca 6514 	streq.w	r6, [sl, #1300]	; 0x514
   1cdfe:	e011      	b.n	1ce24 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xa0>
   1ce00:	4640      	mov	r0, r8
   1ce02:	f000 fdb3 	bl	1d96c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x80>
   1ce06:	2002      	movs	r0, #2
   1ce08:	7260      	strb	r0, [r4, #9]
   1ce0a:	79e1      	ldrb	r1, [r4, #7]
   1ce0c:	2901      	cmp	r1, #1
   1ce0e:	d004      	beq.n	1ce1a <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x96>
   1ce10:	f24a 10ae 	movw	r0, #41390	; 0xa1ae
   1ce14:	fbb0 f0fb 	udiv	r0, r0, fp
   1ce18:	1a2d      	subs	r5, r5, r0
   1ce1a:	486d      	ldr	r0, [pc, #436]	; (1cfd0 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x24c>)
   1ce1c:	2900      	cmp	r1, #0
   1ce1e:	bf08      	it	eq
   1ce20:	f8ca 0514 	streq.w	r0, [sl, #1300]	; 0x514
   1ce24:	496b      	ldr	r1, [pc, #428]	; (1cfd4 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x250>)
   1ce26:	f8c1 5540 	str.w	r5, [r1, #1344]	; 0x540
   1ce2a:	486b      	ldr	r0, [pc, #428]	; (1cfd8 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x254>)
   1ce2c:	f8ca 0510 	str.w	r0, [sl, #1296]	; 0x510
   1ce30:	2010      	movs	r0, #16
   1ce32:	f8c6 0304 	str.w	r0, [r6, #772]	; 0x304
   1ce36:	6b20      	ldr	r0, [r4, #48]	; 0x30
   1ce38:	4a68      	ldr	r2, [pc, #416]	; (1cfdc <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x258>)
   1ce3a:	f440 2000 	orr.w	r0, r0, #524288	; 0x80000
   1ce3e:	6320      	str	r0, [r4, #48]	; 0x30
   1ce40:	0108      	lsls	r0, r1, #4
   1ce42:	6010      	str	r0, [r2, #0]
   1ce44:	79e0      	ldrb	r0, [r4, #7]
   1ce46:	2800      	cmp	r0, #0
   1ce48:	bf04      	itt	eq
   1ce4a:	f894 0034 	ldrbeq.w	r0, [r4, #52]	; 0x34
   1ce4e:	f040 0002 	orreq.w	r0, r0, #2
   1ce52:	d006      	beq.n	1ce62 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xde>
   1ce54:	2801      	cmp	r0, #1
   1ce56:	bf04      	itt	eq
   1ce58:	f894 0034 	ldrbeq.w	r0, [r4, #52]	; 0x34
   1ce5c:	f040 0004 	orreq.w	r0, r0, #4
   1ce60:	d101      	bne.n	1ce66 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe2>
   1ce62:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
   1ce66:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
   1ce6a:	f010 0f01 	tst.w	r0, #1
   1ce6e:	d028      	beq.n	1cec2 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x13e>
   1ce70:	f010 0f02 	tst.w	r0, #2
   1ce74:	d016      	beq.n	1cea4 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x120>
   1ce76:	f8d6 0200 	ldr.w	r0, [r6, #512]	; 0x200
   1ce7a:	f040 0001 	orr.w	r0, r0, #1
   1ce7e:	f8c6 0200 	str.w	r0, [r6, #512]	; 0x200
   1ce82:	f8d6 0550 	ldr.w	r0, [r6, #1360]	; 0x550
   1ce86:	b2c0      	uxtb	r0, r0
   1ce88:	280b      	cmp	r0, #11
   1ce8a:	bf18      	it	ne
   1ce8c:	280a      	cmpne	r0, #10
   1ce8e:	d003      	beq.n	1ce98 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x114>
   1ce90:	2803      	cmp	r0, #3
   1ce92:	bf18      	it	ne
   1ce94:	2802      	cmpne	r0, #2
   1ce96:	d114      	bne.n	1cec2 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x13e>
   1ce98:	f240 613e 	movw	r1, #1598	; 0x63e
   1ce9c:	f04f 003e 	mov.w	r0, #62	; 0x3e
   1cea0:	f7f4 fd6e 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1cea4:	f010 0f04 	tst.w	r0, #4
   1cea8:	d00b      	beq.n	1cec2 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x13e>
   1ceaa:	484d      	ldr	r0, [pc, #308]	; (1cfe0 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x25c>)
   1ceac:	f8ca 0514 	str.w	r0, [sl, #1300]	; 0x514
   1ceb0:	f8d1 0140 	ldr.w	r0, [r1, #320]	; 0x140
   1ceb4:	b128      	cbz	r0, 1cec2 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x13e>
   1ceb6:	f240 6146 	movw	r1, #1606	; 0x646
   1ceba:	f04f 003e 	mov.w	r0, #62	; 0x3e
   1cebe:	f7f4 fd5f 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1cec2:	f04f 0a01 	mov.w	sl, #1
   1cec6:	f8c1 a04c 	str.w	sl, [r1, #76]	; 0x4c
   1ceca:	4846      	ldr	r0, [pc, #280]	; (1cfe4 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x260>)
   1cecc:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
   1ced0:	42a8      	cmp	r0, r5
   1ced2:	d304      	bcc.n	1cede <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x15a>
   1ced4:	f640 013a 	movw	r1, #2106	; 0x83a
   1ced8:	203e      	movs	r0, #62	; 0x3e
   1ceda:	f7f4 fd51 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1cede:	f88d 9004 	strb.w	r9, [sp, #4]
   1cee2:	2f00      	cmp	r7, #0
   1cee4:	bf0c      	ite	eq
   1cee6:	2001      	moveq	r0, #1
   1cee8:	2000      	movne	r0, #0
   1ceea:	f88d 0005 	strb.w	r0, [sp, #5]
   1ceee:	e9cd 1902 	strd	r1, r9, [sp, #8]
   1cef2:	9504      	str	r5, [sp, #16]
   1cef4:	bf03      	ittte	eq
   1cef6:	4835      	ldreq	r0, [pc, #212]	; (1cfcc <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x248>)
   1cef8:	f830 0018 	ldrheq.w	r0, [r0, r8, lsl #1]
   1cefc:	f500 7016 	addeq.w	r0, r0, #600	; 0x258
   1cf00:	f649 70ba 	movwne	r0, #40890	; 0x9fba
   1cf04:	fbb0 f0fb 	udiv	r0, r0, fp
   1cf08:	9005      	str	r0, [sp, #20]
   1cf0a:	a801      	add	r0, sp, #4
   1cf0c:	f7f4 fb06 	bl	1151c <sym_H2AKPOL4Q6GKGQJVBUBWLPO3RBNKXXQE2HSOELQ>
   1cf10:	8ba0      	ldrh	r0, [r4, #28]
   1cf12:	2896      	cmp	r0, #150	; 0x96
   1cf14:	d32e      	bcc.n	1cf74 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x1f0>
   1cf16:	4834      	ldr	r0, [pc, #208]	; (1cfe8 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x264>)
   1cf18:	b137      	cbz	r7, 1cf28 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x1a4>
   1cf1a:	2f01      	cmp	r7, #1
   1cf1c:	d017      	beq.n	1cf4e <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x1ca>
   1cf1e:	f44f 61ec 	mov.w	r1, #1888	; 0x760
   1cf22:	203e      	movs	r0, #62	; 0x3e
   1cf24:	f7f4 fd2c 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1cf28:	f105 0128 	add.w	r1, r5, #40	; 0x28
   1cf2c:	e9c0 5102 	strd	r5, r1, [r0, #8]
   1cf30:	492e      	ldr	r1, [pc, #184]	; (1cfec <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x268>)
   1cf32:	482d      	ldr	r0, [pc, #180]	; (1cfe8 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x264>)
   1cf34:	f7f4 fb5a 	bl	115ec <mpsl_fem_pa_configuration_set>
   1cf38:	2800      	cmp	r0, #0
   1cf3a:	bf18      	it	ne
   1cf3c:	f1b0 3fff 	cmpne.w	r0, #4294967295	; 0xffffffff
   1cf40:	d018      	beq.n	1cf74 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x1f0>
   1cf42:	f240 714f 	movw	r1, #1871	; 0x74f
   1cf46:	f04f 003e 	mov.w	r0, #62	; 0x3e
   1cf4a:	f7f4 fd19 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1cf4e:	f105 0129 	add.w	r1, r5, #41	; 0x29
   1cf52:	e9c0 5102 	strd	r5, r1, [r0, #8]
   1cf56:	4925      	ldr	r1, [pc, #148]	; (1cfec <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x268>)
   1cf58:	4823      	ldr	r0, [pc, #140]	; (1cfe8 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x264>)
   1cf5a:	f7f4 fb35 	bl	115c8 <mpsl_fem_lna_configuration_set>
   1cf5e:	2800      	cmp	r0, #0
   1cf60:	bf18      	it	ne
   1cf62:	f1b0 3fff 	cmpne.w	r0, #4294967295	; 0xffffffff
   1cf66:	d005      	beq.n	1cf74 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x1f0>
   1cf68:	f240 715c 	movw	r1, #1884	; 0x75c
   1cf6c:	f04f 003e 	mov.w	r0, #62	; 0x3e
   1cf70:	f7f4 fd06 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1cf74:	4668      	mov	r0, sp
   1cf76:	f7f4 fa35 	bl	113e4 <mpsl_cx_granted_ops_get>
   1cf7a:	b120      	cbz	r0, 1cf86 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x202>
   1cf7c:	f640 21d4 	movw	r1, #2772	; 0xad4
   1cf80:	203e      	movs	r0, #62	; 0x3e
   1cf82:	f7f4 fcfd 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1cf86:	7a61      	ldrb	r1, [r4, #9]
   1cf88:	f89d 0000 	ldrb.w	r0, [sp]
   1cf8c:	2901      	cmp	r1, #1
   1cf8e:	bf08      	it	eq
   1cf90:	ea2a 0090 	biceq.w	r0, sl, r0, lsr #2
   1cf94:	d004      	beq.n	1cfa0 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x21c>
   1cf96:	2902      	cmp	r1, #2
   1cf98:	bf14      	ite	ne
   1cf9a:	2000      	movne	r0, #0
   1cf9c:	ea2a 0050 	biceq.w	r0, sl, r0, lsr #1
   1cfa0:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
   1cfa4:	2800      	cmp	r0, #0
   1cfa6:	bf04      	itt	eq
   1cfa8:	b009      	addeq	sp, #36	; 0x24
   1cfaa:	e8bd 8ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cfae:	f44f 1060 	mov.w	r0, #3670016	; 0x380000
   1cfb2:	490f      	ldr	r1, [pc, #60]	; (1cff0 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x26c>)
   1cfb4:	6008      	str	r0, [r1, #0]
   1cfb6:	f8c6 a010 	str.w	sl, [r6, #16]
   1cfba:	b009      	add	sp, #36	; 0x24
   1cfbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cfc0:	4001f098 	.word	0x4001f098
   1cfc4:	40001000 	.word	0x40001000
   1cfc8:	200017d8 	.word	0x200017d8
   1cfcc:	0001db52 	.word	0x0001db52
   1cfd0:	40001004 	.word	0x40001004
   1cfd4:	40008000 	.word	0x40008000
   1cfd8:	40008140 	.word	0x40008140
   1cfdc:	4001f504 	.word	0x4001f504
   1cfe0:	40001008 	.word	0x40001008
   1cfe4:	4000800c 	.word	0x4000800c
   1cfe8:	200003a4 	.word	0x200003a4
   1cfec:	0001db8c 	.word	0x0001db8c
   1cff0:	4001f508 	.word	0x4001f508

0001cff4 <sym_X2OPELT6OFJBU77R5R7QDKLXQUDKTQW6IEUFVIQ>:
   1cff4:	b570      	push	{r4, r5, r6, lr}
   1cff6:	4c1b      	ldr	r4, [pc, #108]	; (1d064 <sym_X2OPELT6OFJBU77R5R7QDKLXQUDKTQW6IEUFVIQ+0x70>)
   1cff8:	4605      	mov	r5, r0
   1cffa:	2300      	movs	r3, #0
   1cffc:	f894 c029 	ldrb.w	ip, [r4, #41]	; 0x29
   1d000:	4616      	mov	r6, r2
   1d002:	4608      	mov	r0, r1
   1d004:	f1bc 0f00 	cmp.w	ip, #0
   1d008:	d006      	beq.n	1d018 <sym_X2OPELT6OFJBU77R5R7QDKLXQUDKTQW6IEUFVIQ+0x24>
   1d00a:	4621      	mov	r1, r4
   1d00c:	f891 1028 	ldrb.w	r1, [r1, #40]	; 0x28
   1d010:	b13d      	cbz	r5, 1d022 <sym_X2OPELT6OFJBU77R5R7QDKLXQUDKTQW6IEUFVIQ+0x2e>
   1d012:	2d01      	cmp	r5, #1
   1d014:	d012      	beq.n	1d03c <sym_X2OPELT6OFJBU77R5R7QDKLXQUDKTQW6IEUFVIQ+0x48>
   1d016:	e018      	b.n	1d04a <sym_X2OPELT6OFJBU77R5R7QDKLXQUDKTQW6IEUFVIQ+0x56>
   1d018:	f640 0153 	movw	r1, #2131	; 0x853
   1d01c:	203e      	movs	r0, #62	; 0x3e
   1d01e:	f7f4 fcaf 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1d022:	f1bc 0f01 	cmp.w	ip, #1
   1d026:	d004      	beq.n	1d032 <sym_X2OPELT6OFJBU77R5R7QDKLXQUDKTQW6IEUFVIQ+0x3e>
   1d028:	f006 faa0 	bl	2356c <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>
   1d02c:	6a61      	ldr	r1, [r4, #36]	; 0x24
   1d02e:	1843      	adds	r3, r0, r1
   1d030:	e00b      	b.n	1d04a <sym_X2OPELT6OFJBU77R5R7QDKLXQUDKTQW6IEUFVIQ+0x56>
   1d032:	f000 fe6d 	bl	1dd10 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>
   1d036:	6a61      	ldr	r1, [r4, #36]	; 0x24
   1d038:	1843      	adds	r3, r0, r1
   1d03a:	e006      	b.n	1d04a <sym_X2OPELT6OFJBU77R5R7QDKLXQUDKTQW6IEUFVIQ+0x56>
   1d03c:	f1bc 0f01 	cmp.w	ip, #1
   1d040:	d00a      	beq.n	1d058 <sym_X2OPELT6OFJBU77R5R7QDKLXQUDKTQW6IEUFVIQ+0x64>
   1d042:	f006 fa85 	bl	23550 <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>
   1d046:	6a61      	ldr	r1, [r4, #36]	; 0x24
   1d048:	1843      	adds	r3, r0, r1
   1d04a:	4632      	mov	r2, r6
   1d04c:	4628      	mov	r0, r5
   1d04e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1d052:	4619      	mov	r1, r3
   1d054:	f7ff be96 	b.w	1cd84 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>
   1d058:	f000 fe4c 	bl	1dcf4 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>
   1d05c:	6a61      	ldr	r1, [r4, #36]	; 0x24
   1d05e:	1843      	adds	r3, r0, r1
   1d060:	e7f3      	b.n	1d04a <sym_X2OPELT6OFJBU77R5R7QDKLXQUDKTQW6IEUFVIQ+0x56>
   1d062:	0000      	.short	0x0000
   1d064:	200017d8 	.word	0x200017d8

0001d068 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>:
   1d068:	b530      	push	{r4, r5, lr}
   1d06a:	4c2d      	ldr	r4, [pc, #180]	; (1d120 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0xb8>)
   1d06c:	b087      	sub	sp, #28
   1d06e:	000d      	movs	r5, r1
   1d070:	71e0      	strb	r0, [r4, #7]
   1d072:	72a2      	strb	r2, [r4, #10]
   1d074:	bf0c      	ite	eq
   1d076:	2001      	moveq	r0, #1
   1d078:	2002      	movne	r0, #2
   1d07a:	7220      	strb	r0, [r4, #8]
   1d07c:	2801      	cmp	r0, #1
   1d07e:	d006      	beq.n	1d08e <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x26>
   1d080:	2802      	cmp	r0, #2
   1d082:	d026      	beq.n	1d0d2 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x6a>
   1d084:	f640 2145 	movw	r1, #2629	; 0xa45
   1d088:	203e      	movs	r0, #62	; 0x3e
   1d08a:	f7f4 fc79 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1d08e:	7a60      	ldrb	r0, [r4, #9]
   1d090:	2802      	cmp	r0, #2
   1d092:	d11e      	bne.n	1d0d2 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x6a>
   1d094:	4610      	mov	r0, r2
   1d096:	f994 2019 	ldrsb.w	r2, [r4, #25]
   1d09a:	7ea1      	ldrb	r1, [r4, #26]
   1d09c:	ab05      	add	r3, sp, #20
   1d09e:	f000 fe61 	bl	1dd64 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ>
   1d0a2:	f99d 0014 	ldrsb.w	r0, [sp, #20]
   1d0a6:	f000 fe1f 	bl	1dce8 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>
   1d0aa:	f10d 0015 	add.w	r0, sp, #21
   1d0ae:	f7f4 faa3 	bl	115f8 <mpsl_fem_pa_gain_set>
   1d0b2:	b120      	cbz	r0, 1d0be <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x56>
   1d0b4:	f240 6115 	movw	r1, #1557	; 0x615
   1d0b8:	203e      	movs	r0, #62	; 0x3e
   1d0ba:	f7f4 fc61 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1d0be:	20ff      	movs	r0, #255	; 0xff
   1d0c0:	f884 0037 	strb.w	r0, [r4, #55]	; 0x37
   1d0c4:	4817      	ldr	r0, [pc, #92]	; (1d124 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0xbc>)
   1d0c6:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
   1d0ca:	f441 7188 	orr.w	r1, r1, #272	; 0x110
   1d0ce:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
   1d0d2:	7a62      	ldrb	r2, [r4, #9]
   1d0d4:	7e20      	ldrb	r0, [r4, #24]
   1d0d6:	2a02      	cmp	r2, #2
   1d0d8:	8ba2      	ldrh	r2, [r4, #28]
   1d0da:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   1d0de:	d016      	beq.n	1d10e <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0xa6>
   1d0e0:	4b11      	ldr	r3, [pc, #68]	; (1d128 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0xc0>)
   1d0e2:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
   1d0e6:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
   1d0ea:	fbb0 f0f1 	udiv	r0, r0, r1
   1d0ee:	4410      	add	r0, r2
   1d0f0:	2101      	movs	r1, #1
   1d0f2:	f88d 1000 	strb.w	r1, [sp]
   1d0f6:	2d00      	cmp	r5, #0
   1d0f8:	bf0c      	ite	eq
   1d0fa:	2101      	moveq	r1, #1
   1d0fc:	2100      	movne	r1, #0
   1d0fe:	f88d 1001 	strb.w	r1, [sp, #1]
   1d102:	9001      	str	r0, [sp, #4]
   1d104:	4668      	mov	r0, sp
   1d106:	f7f4 fa09 	bl	1151c <sym_H2AKPOL4Q6GKGQJVBUBWLPO3RBNKXXQE2HSOELQ>
   1d10a:	b007      	add	sp, #28
   1d10c:	bd30      	pop	{r4, r5, pc}
   1d10e:	4b07      	ldr	r3, [pc, #28]	; (1d12c <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0xc4>)
   1d110:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   1d114:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
   1d118:	fbb0 f0f1 	udiv	r0, r0, r1
   1d11c:	1a10      	subs	r0, r2, r0
   1d11e:	e7e7      	b.n	1d0f0 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x88>
   1d120:	200017d8 	.word	0x200017d8
   1d124:	40001000 	.word	0x40001000
   1d128:	0001db40 	.word	0x0001db40
   1d12c:	0001dbec 	.word	0x0001dbec

0001d130 <sym_VLV66Y4WSZXQCNOAJYFTKZXZ4LIVJF5RFO44B5Q>:
   1d130:	4901      	ldr	r1, [pc, #4]	; (1d138 <sym_VLV66Y4WSZXQCNOAJYFTKZXZ4LIVJF5RFO44B5Q+0x8>)
   1d132:	71c8      	strb	r0, [r1, #7]
   1d134:	4770      	bx	lr
   1d136:	0000      	.short	0x0000
   1d138:	200017d8 	.word	0x200017d8

0001d13c <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ>:
   1d13c:	4902      	ldr	r1, [pc, #8]	; (1d148 <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ+0xc>)
   1d13e:	2000      	movs	r0, #0
   1d140:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
   1d144:	4770      	bx	lr
   1d146:	0000      	.short	0x0000
   1d148:	40008000 	.word	0x40008000

0001d14c <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>:
   1d14c:	4903      	ldr	r1, [pc, #12]	; (1d15c <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x10>)
   1d14e:	6809      	ldr	r1, [r1, #0]
   1d150:	f001 017f 	and.w	r1, r1, #127	; 0x7f
   1d154:	4249      	negs	r1, r1
   1d156:	7001      	strb	r1, [r0, #0]
   1d158:	2001      	movs	r0, #1
   1d15a:	4770      	bx	lr
   1d15c:	40001548 	.word	0x40001548

0001d160 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>:
   1d160:	4903      	ldr	r1, [pc, #12]	; (1d170 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA+0x10>)
   1d162:	0e02      	lsrs	r2, r0, #24
   1d164:	f8c1 2524 	str.w	r2, [r1, #1316]	; 0x524
   1d168:	0200      	lsls	r0, r0, #8
   1d16a:	f8c1 051c 	str.w	r0, [r1, #1308]	; 0x51c
   1d16e:	4770      	bx	lr
   1d170:	40001000 	.word	0x40001000

0001d174 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>:
   1d174:	4901      	ldr	r1, [pc, #4]	; (1d17c <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A+0x8>)
   1d176:	f8c1 053c 	str.w	r0, [r1, #1340]	; 0x53c
   1d17a:	4770      	bx	lr
   1d17c:	40001000 	.word	0x40001000

0001d180 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ>:
   1d180:	b510      	push	{r4, lr}
   1d182:	2200      	movs	r2, #0
   1d184:	2901      	cmp	r1, #1
   1d186:	d010      	beq.n	1d1aa <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x2a>
   1d188:	2902      	cmp	r1, #2
   1d18a:	bf08      	it	eq
   1d18c:	f04f 7280 	moveq.w	r2, #16777216	; 0x1000000
   1d190:	d00b      	beq.n	1d1aa <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x2a>
   1d192:	2904      	cmp	r1, #4
   1d194:	bf14      	ite	ne
   1d196:	2908      	cmpne	r1, #8
   1d198:	f04f 42c7 	moveq.w	r2, #1669332992	; 0x63800000
   1d19c:	d005      	beq.n	1d1aa <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x2a>
   1d19e:	f240 21d9 	movw	r1, #729	; 0x2d9
   1d1a2:	f04f 003e 	mov.w	r0, #62	; 0x3e
   1d1a6:	f7f4 fbeb 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1d1aa:	f442 7184 	orr.w	r1, r2, #264	; 0x108
   1d1ae:	4a0c      	ldr	r2, [pc, #48]	; (1d1e0 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x60>)
   1d1b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1d1b4:	6011      	str	r1, [r2, #0]
   1d1b6:	f440 3040 	orr.w	r0, r0, #196608	; 0x30000
   1d1ba:	1d11      	adds	r1, r2, #4
   1d1bc:	f040 7000 	orr.w	r0, r0, #33554432	; 0x2000000
   1d1c0:	6008      	str	r0, [r1, #0]
   1d1c2:	4808      	ldr	r0, [pc, #32]	; (1d1e4 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x64>)
   1d1c4:	f8d0 0550 	ldr.w	r0, [r0, #1360]	; 0x550
   1d1c8:	b2c0      	uxtb	r0, r0
   1d1ca:	2803      	cmp	r0, #3
   1d1cc:	bf1c      	itt	ne
   1d1ce:	280b      	cmpne	r0, #11
   1d1d0:	bd10      	popne	{r4, pc}
   1d1d2:	f240 21f1 	movw	r1, #753	; 0x2f1
   1d1d6:	f04f 003e 	mov.w	r0, #62	; 0x3e
   1d1da:	f7f4 fbd1 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1d1de:	0000      	.short	0x0000
   1d1e0:	40001514 	.word	0x40001514
   1d1e4:	40001000 	.word	0x40001000

0001d1e8 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>:
   1d1e8:	4901      	ldr	r1, [pc, #4]	; (1d1f0 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI+0x8>)
   1d1ea:	7688      	strb	r0, [r1, #26]
   1d1ec:	4770      	bx	lr
   1d1ee:	0000      	.short	0x0000
   1d1f0:	200017d8 	.word	0x200017d8

0001d1f4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>:
   1d1f4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d1f8:	f8df 83f4 	ldr.w	r8, [pc, #1012]	; 1d5f0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3fc>
   1d1fc:	2701      	movs	r7, #1
   1d1fe:	f8c8 704c 	str.w	r7, [r8, #76]	; 0x4c
   1d202:	48fc      	ldr	r0, [pc, #1008]	; (1d5f4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x400>)
   1d204:	f8d0 b540 	ldr.w	fp, [r0, #1344]	; 0x540
   1d208:	f001 f9b7 	bl	1e57a <sym_6TZLBWMEWRMPI4KKAUVLC2XHUBDGXEA4B4JJJYQ>
   1d20c:	4cfa      	ldr	r4, [pc, #1000]	; (1d5f8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x404>)
   1d20e:	f8df a3ec 	ldr.w	sl, [pc, #1004]	; 1d5fc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x408>
   1d212:	4dfb      	ldr	r5, [pc, #1004]	; (1d600 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x40c>)
   1d214:	e9c4 0b0f 	strd	r0, fp, [r4, #60]	; 0x3c
   1d218:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
   1d21c:	2600      	movs	r6, #0
   1d21e:	b1d8      	cbz	r0, 1d258 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x64>
   1d220:	f8d5 0104 	ldr.w	r0, [r5, #260]	; 0x104
   1d224:	f110 0900 	adds.w	r9, r0, #0
   1d228:	bf18      	it	ne
   1d22a:	f04f 0901 	movne.w	r9, #1
   1d22e:	f8d5 0110 	ldr.w	r0, [r5, #272]	; 0x110
   1d232:	2800      	cmp	r0, #0
   1d234:	bf18      	it	ne
   1d236:	2001      	movne	r0, #1
   1d238:	ea50 0109 	orrs.w	r1, r0, r9
   1d23c:	d015      	beq.n	1d26a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x76>
   1d23e:	2180      	movs	r1, #128	; 0x80
   1d240:	f8c5 1308 	str.w	r1, [r5, #776]	; 0x308
   1d244:	0309      	lsls	r1, r1, #12
   1d246:	f8ca 1000 	str.w	r1, [sl]
   1d24a:	f884 6035 	strb.w	r6, [r4, #53]	; 0x35
   1d24e:	f090 0f01 	teq	r0, #1
   1d252:	bf18      	it	ne
   1d254:	e8bd 8ff8 	ldmiane.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d258:	8ba0      	ldrh	r0, [r4, #28]
   1d25a:	2896      	cmp	r0, #150	; 0x96
   1d25c:	d37e      	bcc.n	1d35c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x168>
   1d25e:	7a60      	ldrb	r0, [r4, #9]
   1d260:	2801      	cmp	r0, #1
   1d262:	d07c      	beq.n	1d35e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x16a>
   1d264:	2802      	cmp	r0, #2
   1d266:	d07b      	beq.n	1d360 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x16c>
   1d268:	e0ba      	b.n	1d3e0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1ec>
   1d26a:	f8d5 0100 	ldr.w	r0, [r5, #256]	; 0x100
   1d26e:	49e5      	ldr	r1, [pc, #916]	; (1d604 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x410>)
   1d270:	f8df b394 	ldr.w	fp, [pc, #916]	; 1d608 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x414>
   1d274:	b338      	cbz	r0, 1d2c6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd2>
   1d276:	f8c5 6100 	str.w	r6, [r5, #256]	; 0x100
   1d27a:	616f      	str	r7, [r5, #20]
   1d27c:	20ff      	movs	r0, #255	; 0xff
   1d27e:	9000      	str	r0, [sp, #0]
   1d280:	e002      	b.n	1d288 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x94>
   1d282:	1e40      	subs	r0, r0, #1
   1d284:	9000      	str	r0, [sp, #0]
   1d286:	d019      	beq.n	1d2bc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xc8>
   1d288:	f8d5 011c 	ldr.w	r0, [r5, #284]	; 0x11c
   1d28c:	2800      	cmp	r0, #0
   1d28e:	9800      	ldr	r0, [sp, #0]
   1d290:	d0f7      	beq.n	1d282 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x8e>
   1d292:	b198      	cbz	r0, 1d2bc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xc8>
   1d294:	6808      	ldr	r0, [r1, #0]
   1d296:	f000 0b7f 	and.w	fp, r0, #127	; 0x7f
   1d29a:	f894 0038 	ldrb.w	r0, [r4, #56]	; 0x38
   1d29e:	4558      	cmp	r0, fp
   1d2a0:	bf3c      	itt	cc
   1d2a2:	2000      	movcc	r0, #0
   1d2a4:	f000 fb28 	blcc	1d8f8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
   1d2a8:	f884 b037 	strb.w	fp, [r4, #55]	; 0x37
   1d2ac:	f8c5 611c 	str.w	r6, [r5, #284]	; 0x11c
   1d2b0:	2001      	movs	r0, #1
   1d2b2:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
   1d2b6:	642f      	str	r7, [r5, #64]	; 0x40
   1d2b8:	63af      	str	r7, [r5, #56]	; 0x38
   1d2ba:	e007      	b.n	1d2cc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd8>
   1d2bc:	f640 317b 	movw	r1, #2939	; 0xb7b
   1d2c0:	203e      	movs	r0, #62	; 0x3e
   1d2c2:	f7f4 fb5d 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1d2c6:	f1b9 0f00 	cmp.w	r9, #0
   1d2ca:	d003      	beq.n	1d2d4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe0>
   1d2cc:	f1b9 0f00 	cmp.w	r9, #0
   1d2d0:	d02a      	beq.n	1d328 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x134>
   1d2d2:	e063      	b.n	1d39c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1a8>
   1d2d4:	6808      	ldr	r0, [r1, #0]
   1d2d6:	f000 017f 	and.w	r1, r0, #127	; 0x7f
   1d2da:	f884 1037 	strb.w	r1, [r4, #55]	; 0x37
   1d2de:	f8c5 611c 	str.w	r6, [r5, #284]	; 0x11c
   1d2e2:	f894 0036 	ldrb.w	r0, [r4, #54]	; 0x36
   1d2e6:	b148      	cbz	r0, 1d2fc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x108>
   1d2e8:	f894 0038 	ldrb.w	r0, [r4, #56]	; 0x38
   1d2ec:	4288      	cmp	r0, r1
   1d2ee:	d218      	bcs.n	1d322 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x12e>
   1d2f0:	2000      	movs	r0, #0
   1d2f2:	f000 fb01 	bl	1d8f8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
   1d2f6:	642f      	str	r7, [r5, #64]	; 0x40
   1d2f8:	63af      	str	r7, [r5, #56]	; 0x38
   1d2fa:	e012      	b.n	1d322 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x12e>
   1d2fc:	48c3      	ldr	r0, [pc, #780]	; (1d60c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x418>)
   1d2fe:	6800      	ldr	r0, [r0, #0]
   1d300:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   1d304:	b282      	uxth	r2, r0
   1d306:	0c00      	lsrs	r0, r0, #16
   1d308:	4299      	cmp	r1, r3
   1d30a:	d303      	bcc.n	1d314 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x120>
   1d30c:	2a0f      	cmp	r2, #15
   1d30e:	d906      	bls.n	1d31e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x12a>
   1d310:	2802      	cmp	r0, #2
   1d312:	d204      	bcs.n	1d31e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x12a>
   1d314:	2001      	movs	r0, #1
   1d316:	f000 faef 	bl	1d8f8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
   1d31a:	642f      	str	r7, [r5, #64]	; 0x40
   1d31c:	e001      	b.n	1d322 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x12e>
   1d31e:	642f      	str	r7, [r5, #64]	; 0x40
   1d320:	63af      	str	r7, [r5, #56]	; 0x38
   1d322:	f8db 0000 	ldr.w	r0, [fp]
   1d326:	9000      	str	r0, [sp, #0]
   1d328:	2080      	movs	r0, #128	; 0x80
   1d32a:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
   1d32e:	f8c8 7040 	str.w	r7, [r8, #64]	; 0x40
   1d332:	f8d8 0540 	ldr.w	r0, [r8, #1344]	; 0x540
   1d336:	49b6      	ldr	r1, [pc, #728]	; (1d610 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x41c>)
   1d338:	f8d1 1540 	ldr.w	r1, [r1, #1344]	; 0x540
   1d33c:	f643 2298 	movw	r2, #15000	; 0x3a98
   1d340:	4410      	add	r0, r2
   1d342:	4ab4      	ldr	r2, [pc, #720]	; (1d614 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x420>)
   1d344:	4288      	cmp	r0, r1
   1d346:	d21c      	bcs.n	1d382 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x18e>
   1d348:	f8d8 0540 	ldr.w	r0, [r8, #1344]	; 0x540
   1d34c:	f242 7110 	movw	r1, #10000	; 0x2710
   1d350:	4408      	add	r0, r1
   1d352:	f8c8 0540 	str.w	r0, [r8, #1344]	; 0x540
   1d356:	f8c8 6140 	str.w	r6, [r8, #320]	; 0x140
   1d35a:	e002      	b.n	1d362 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x16e>
   1d35c:	e040      	b.n	1d3e0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1ec>
   1d35e:	e025      	b.n	1d3ac <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1b8>
   1d360:	e031      	b.n	1d3c6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1d2>
   1d362:	48ad      	ldr	r0, [pc, #692]	; (1d618 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x424>)
   1d364:	f8c0 2510 	str.w	r2, [r0, #1296]	; 0x510
   1d368:	49ac      	ldr	r1, [pc, #688]	; (1d61c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x428>)
   1d36a:	f8c0 1514 	str.w	r1, [r0, #1300]	; 0x514
   1d36e:	49ac      	ldr	r1, [pc, #688]	; (1d620 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x42c>)
   1d370:	f44f 2000 	mov.w	r0, #524288	; 0x80000
   1d374:	6008      	str	r0, [r1, #0]
   1d376:	6b20      	ldr	r0, [r4, #48]	; 0x30
   1d378:	f440 2000 	orr.w	r0, r0, #524288	; 0x80000
   1d37c:	6320      	str	r0, [r4, #48]	; 0x30
   1d37e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d382:	2000      	movs	r0, #0
   1d384:	f8c8 0540 	str.w	r0, [r8, #1344]	; 0x540
   1d388:	f8c8 6140 	str.w	r6, [r8, #320]	; 0x140
   1d38c:	2080      	movs	r0, #128	; 0x80
   1d38e:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
   1d392:	0300      	lsls	r0, r0, #12
   1d394:	f8ca 0000 	str.w	r0, [sl]
   1d398:	f8c8 6140 	str.w	r6, [r8, #320]	; 0x140
   1d39c:	2080      	movs	r0, #128	; 0x80
   1d39e:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
   1d3a2:	0300      	lsls	r0, r0, #12
   1d3a4:	f8ca 0000 	str.w	r0, [sl]
   1d3a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d3ac:	f7f4 f918 	bl	115e0 <mpsl_fem_pa_configuration_clear>
   1d3b0:	2800      	cmp	r0, #0
   1d3b2:	bf18      	it	ne
   1d3b4:	f1b0 3fff 	cmpne.w	r0, #4294967295	; 0xffffffff
   1d3b8:	d012      	beq.n	1d3e0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1ec>
   1d3ba:	f44f 610a 	mov.w	r1, #2208	; 0x8a0
   1d3be:	f04f 003e 	mov.w	r0, #62	; 0x3e
   1d3c2:	f7f4 fadd 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1d3c6:	f7f4 f8f9 	bl	115bc <mpsl_fem_lna_configuration_clear>
   1d3ca:	2800      	cmp	r0, #0
   1d3cc:	bf18      	it	ne
   1d3ce:	f1b0 3fff 	cmpne.w	r0, #4294967295	; 0xffffffff
   1d3d2:	d005      	beq.n	1d3e0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1ec>
   1d3d4:	f640 01a6 	movw	r1, #2214	; 0x8a6
   1d3d8:	f04f 003e 	mov.w	r0, #62	; 0x3e
   1d3dc:	f7f4 fad0 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1d3e0:	4986      	ldr	r1, [pc, #536]	; (1d5fc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x408>)
   1d3e2:	6b20      	ldr	r0, [r4, #48]	; 0x30
   1d3e4:	6008      	str	r0, [r1, #0]
   1d3e6:	6326      	str	r6, [r4, #48]	; 0x30
   1d3e8:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
   1d3ec:	f020 001d 	bic.w	r0, r0, #29
   1d3f0:	f420 7080 	bic.w	r0, r0, #256	; 0x100
   1d3f4:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
   1d3f8:	f884 6034 	strb.w	r6, [r4, #52]	; 0x34
   1d3fc:	7b20      	ldrb	r0, [r4, #12]
   1d3fe:	f04f 0900 	mov.w	r9, #0
   1d402:	2800      	cmp	r0, #0
   1d404:	bf1b      	ittet	ne
   1d406:	f8d8 0144 	ldrne.w	r0, [r8, #324]	; 0x144
   1d40a:	2800      	cmpne	r0, #0
   1d40c:	2000      	moveq	r0, #0
   1d40e:	2001      	movne	r0, #1
   1d410:	7a61      	ldrb	r1, [r4, #9]
   1d412:	2901      	cmp	r1, #1
   1d414:	d002      	beq.n	1d41c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x228>
   1d416:	2902      	cmp	r1, #2
   1d418:	d00a      	beq.n	1d430 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x23c>
   1d41a:	e005      	b.n	1d428 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x234>
   1d41c:	f8d5 010c 	ldr.w	r0, [r5, #268]	; 0x10c
   1d420:	2800      	cmp	r0, #0
   1d422:	bf18      	it	ne
   1d424:	f04f 0908 	movne.w	r9, #8
   1d428:	f019 0f0b 	tst.w	r9, #11
   1d42c:	d118      	bne.n	1d460 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x26c>
   1d42e:	e011      	b.n	1d454 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x260>
   1d430:	f8d5 110c 	ldr.w	r1, [r5, #268]	; 0x10c
   1d434:	2900      	cmp	r1, #0
   1d436:	bf18      	it	ne
   1d438:	f04f 0902 	movne.w	r9, #2
   1d43c:	4979      	ldr	r1, [pc, #484]	; (1d624 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x430>)
   1d43e:	6809      	ldr	r1, [r1, #0]
   1d440:	f011 0f01 	tst.w	r1, #1
   1d444:	bf08      	it	eq
   1d446:	f049 0904 	orreq.w	r9, r9, #4
   1d44a:	2800      	cmp	r0, #0
   1d44c:	bf18      	it	ne
   1d44e:	f049 0901 	orrne.w	r9, r9, #1
   1d452:	e7e9      	b.n	1d428 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x234>
   1d454:	f8d5 0110 	ldr.w	r0, [r5, #272]	; 0x110
   1d458:	2800      	cmp	r0, #0
   1d45a:	bf18      	it	ne
   1d45c:	f049 0910 	orrne.w	r9, r9, #16
   1d460:	4871      	ldr	r0, [pc, #452]	; (1d628 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x434>)
   1d462:	7800      	ldrb	r0, [r0, #0]
   1d464:	b1c0      	cbz	r0, 1d498 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2a4>
   1d466:	4871      	ldr	r0, [pc, #452]	; (1d62c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x438>)
   1d468:	6800      	ldr	r0, [r0, #0]
   1d46a:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
   1d46e:	bf1b      	ittet	ne
   1d470:	f8d5 1114 	ldrne.w	r1, [r5, #276]	; 0x114
   1d474:	2900      	cmpne	r1, #0
   1d476:	2100      	moveq	r1, #0
   1d478:	2101      	movne	r1, #1
   1d47a:	f884 102a 	strb.w	r1, [r4, #42]	; 0x2a
   1d47e:	2800      	cmp	r0, #0
   1d480:	bf1b      	ittet	ne
   1d482:	f8d5 0118 	ldrne.w	r0, [r5, #280]	; 0x118
   1d486:	2800      	cmpne	r0, #0
   1d488:	2000      	moveq	r0, #0
   1d48a:	2001      	movne	r0, #1
   1d48c:	f884 002b 	strb.w	r0, [r4, #43]	; 0x2b
   1d490:	f8d5 0410 	ldr.w	r0, [r5, #1040]	; 0x410
   1d494:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
   1d498:	f8d5 0104 	ldr.w	r0, [r5, #260]	; 0x104
   1d49c:	2800      	cmp	r0, #0
   1d49e:	bf18      	it	ne
   1d4a0:	2001      	movne	r0, #1
   1d4a2:	f88d 0000 	strb.w	r0, [sp]
   1d4a6:	f8c5 6100 	str.w	r6, [r5, #256]	; 0x100
   1d4aa:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
   1d4ae:	f8c5 6110 	str.w	r6, [r5, #272]	; 0x110
   1d4b2:	f8c5 6104 	str.w	r6, [r5, #260]	; 0x104
   1d4b6:	f8c5 6114 	str.w	r6, [r5, #276]	; 0x114
   1d4ba:	f8c5 6118 	str.w	r6, [r5, #280]	; 0x118
   1d4be:	f8c5 6108 	str.w	r6, [r5, #264]	; 0x108
   1d4c2:	f8c5 616c 	str.w	r6, [r5, #364]	; 0x16c
   1d4c6:	4668      	mov	r0, sp
   1d4c8:	f7f4 f81a 	bl	11500 <sym_65YCAVBDKPZHZGRZXNQZCLS62UDJXZDBEFWVSII>
   1d4cc:	2800      	cmp	r0, #0
   1d4ce:	bf18      	it	ne
   1d4d0:	f049 0910 	orrne.w	r9, r9, #16
   1d4d4:	f8c8 6144 	str.w	r6, [r8, #324]	; 0x144
   1d4d8:	f019 0f10 	tst.w	r9, #16
   1d4dc:	d006      	beq.n	1d4ec <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2f8>
   1d4de:	f019 0f08 	tst.w	r9, #8
   1d4e2:	bf02      	ittt	eq
   1d4e4:	7a60      	ldrbeq	r0, [r4, #9]
   1d4e6:	2801      	cmpeq	r0, #1
   1d4e8:	f049 0920 	orreq.w	r9, r9, #32
   1d4ec:	4850      	ldr	r0, [pc, #320]	; (1d630 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x43c>)
   1d4ee:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
   1d4f2:	6260      	str	r0, [r4, #36]	; 0x24
   1d4f4:	4846      	ldr	r0, [pc, #280]	; (1d610 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x41c>)
   1d4f6:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
   1d4fa:	6220      	str	r0, [r4, #32]
   1d4fc:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
   1d500:	2802      	cmp	r0, #2
   1d502:	bf1c      	itt	ne
   1d504:	7a60      	ldrbne	r0, [r4, #9]
   1d506:	2802      	cmpne	r0, #2
   1d508:	7e21      	ldrb	r1, [r4, #24]
   1d50a:	d00e      	beq.n	1d52a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x336>
   1d50c:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
   1d510:	7a62      	ldrb	r2, [r4, #9]
   1d512:	f884 2029 	strb.w	r2, [r4, #41]	; 0x29
   1d516:	7a20      	ldrb	r0, [r4, #8]
   1d518:	f04f 0a00 	mov.w	sl, #0
   1d51c:	b188      	cbz	r0, 1d542 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x34e>
   1d51e:	f019 0f11 	tst.w	r9, #17
   1d522:	d013      	beq.n	1d54c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x358>
   1d524:	f7fe ff4e 	bl	1c3c4 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
   1d528:	e03d      	b.n	1d5a6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3b2>
   1d52a:	2904      	cmp	r1, #4
   1d52c:	bf18      	it	ne
   1d52e:	2908      	cmpne	r1, #8
   1d530:	d1ec      	bne.n	1d50c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x318>
   1d532:	4840      	ldr	r0, [pc, #256]	; (1d634 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x440>)
   1d534:	6800      	ldr	r0, [r0, #0]
   1d536:	f010 0f06 	tst.w	r0, #6
   1d53a:	bf0c      	ite	eq
   1d53c:	2108      	moveq	r1, #8
   1d53e:	2104      	movne	r1, #4
   1d540:	e7e4      	b.n	1d50c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x318>
   1d542:	71e6      	strb	r6, [r4, #7]
   1d544:	7226      	strb	r6, [r4, #8]
   1d546:	7266      	strb	r6, [r4, #9]
   1d548:	7326      	strb	r6, [r4, #12]
   1d54a:	e02c      	b.n	1d5a6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3b2>
   1d54c:	2801      	cmp	r0, #1
   1d54e:	bf14      	ite	ne
   1d550:	f04f 0801 	movne.w	r8, #1
   1d554:	f04f 0800 	moveq.w	r8, #0
   1d558:	79e0      	ldrb	r0, [r4, #7]
   1d55a:	2801      	cmp	r0, #1
   1d55c:	bf18      	it	ne
   1d55e:	2000      	movne	r0, #0
   1d560:	9000      	str	r0, [sp, #0]
   1d562:	71e6      	strb	r6, [r4, #7]
   1d564:	7226      	strb	r6, [r4, #8]
   1d566:	7266      	strb	r6, [r4, #9]
   1d568:	8ba0      	ldrh	r0, [r4, #28]
   1d56a:	2300      	movs	r3, #0
   1d56c:	b3f2      	cbz	r2, 1d5ec <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3f8>
   1d56e:	f1b8 0f00 	cmp.w	r8, #0
   1d572:	d075      	beq.n	1d660 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x46c>
   1d574:	f1b8 0f00 	cmp.w	r8, #0
   1d578:	d005      	beq.n	1d586 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x392>
   1d57a:	2a01      	cmp	r2, #1
   1d57c:	d07d      	beq.n	1d67a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x486>
   1d57e:	f005 ffe7 	bl	23550 <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>
   1d582:	6a61      	ldr	r1, [r4, #36]	; 0x24
   1d584:	1843      	adds	r3, r0, r1
   1d586:	9800      	ldr	r0, [sp, #0]
   1d588:	b140      	cbz	r0, 1d59c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3a8>
   1d58a:	f10b 003b 	add.w	r0, fp, #59	; 0x3b
   1d58e:	4298      	cmp	r0, r3
   1d590:	bf92      	itee	ls
   1d592:	71e7      	strbls	r7, [r4, #7]
   1d594:	612f      	strhi	r7, [r5, #16]
   1d596:	f04f 0a01 	movhi.w	sl, #1
   1d59a:	d804      	bhi.n	1d5a6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3b2>
   1d59c:	7aa2      	ldrb	r2, [r4, #10]
   1d59e:	4619      	mov	r1, r3
   1d5a0:	4640      	mov	r0, r8
   1d5a2:	f7ff fbef 	bl	1cd84 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>
   1d5a6:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
   1d5aa:	b1e0      	cbz	r0, 1d5e6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3f2>
   1d5ac:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
   1d5b0:	f420 1080 	bic.w	r0, r0, #1048576	; 0x100000
   1d5b4:	f040 0002 	orr.w	r0, r0, #2
   1d5b8:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
   1d5bc:	490f      	ldr	r1, [pc, #60]	; (1d5fc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x408>)
   1d5be:	f44f 2080 	mov.w	r0, #262144	; 0x40000
   1d5c2:	6008      	str	r0, [r1, #0]
   1d5c4:	481c      	ldr	r0, [pc, #112]	; (1d638 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x444>)
   1d5c6:	2100      	movs	r1, #0
   1d5c8:	6802      	ldr	r2, [r0, #0]
   1d5ca:	f361 4213 	bfi	r2, r1, #16, #4
   1d5ce:	6002      	str	r2, [r0, #0]
   1d5d0:	6960      	ldr	r0, [r4, #20]
   1d5d2:	491a      	ldr	r1, [pc, #104]	; (1d63c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x448>)
   1d5d4:	f020 0003 	bic.w	r0, r0, #3
   1d5d8:	6160      	str	r0, [r4, #20]
   1d5da:	6008      	str	r0, [r1, #0]
   1d5dc:	4919      	ldr	r1, [pc, #100]	; (1d644 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x450>)
   1d5de:	4818      	ldr	r0, [pc, #96]	; (1d640 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x44c>)
   1d5e0:	6008      	str	r0, [r1, #0]
   1d5e2:	f884 6044 	strb.w	r6, [r4, #68]	; 0x44
   1d5e6:	f019 0f01 	tst.w	r9, #1
   1d5ea:	e02d      	b.n	1d648 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x454>
   1d5ec:	e033      	b.n	1d656 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x462>
   1d5ee:	e037      	b.n	1d660 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x46c>
   1d5f0:	40008000 	.word	0x40008000
   1d5f4:	4000800c 	.word	0x4000800c
   1d5f8:	200017d8 	.word	0x200017d8
   1d5fc:	4001f508 	.word	0x4001f508
   1d600:	40001000 	.word	0x40001000
   1d604:	40001548 	.word	0x40001548
   1d608:	4000111c 	.word	0x4000111c
   1d60c:	40001574 	.word	0x40001574
   1d610:	40008004 	.word	0x40008004
   1d614:	40008140 	.word	0x40008140
   1d618:	4001f098 	.word	0x4001f098
   1d61c:	40001014 	.word	0x40001014
   1d620:	4001f504 	.word	0x4001f504
   1d624:	40001400 	.word	0x40001400
   1d628:	2000039c 	.word	0x2000039c
   1d62c:	40001640 	.word	0x40001640
   1d630:	40008008 	.word	0x40008008
   1d634:	40001414 	.word	0x40001414
   1d638:	40001514 	.word	0x40001514
   1d63c:	40001900 	.word	0x40001900
   1d640:	00023280 	.word	0x00023280
   1d644:	40001910 	.word	0x40001910
   1d648:	f8df 8154 	ldr.w	r8, [pc, #340]	; 1d7a0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x5ac>
   1d64c:	d01a      	beq.n	1d684 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x490>
   1d64e:	f8d8 0000 	ldr.w	r0, [r8]
   1d652:	4780      	blx	r0
   1d654:	e04d      	b.n	1d6f2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4fe>
   1d656:	f640 0153 	movw	r1, #2131	; 0x853
   1d65a:	203e      	movs	r0, #62	; 0x3e
   1d65c:	f7f4 f990 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1d660:	2a01      	cmp	r2, #1
   1d662:	d005      	beq.n	1d670 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x47c>
   1d664:	f005 ff82 	bl	2356c <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>
   1d668:	6a61      	ldr	r1, [r4, #36]	; 0x24
   1d66a:	1843      	adds	r3, r0, r1
   1d66c:	e78b      	b.n	1d586 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x392>
   1d66e:	e004      	b.n	1d67a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x486>
   1d670:	f000 fb4e 	bl	1dd10 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>
   1d674:	6a61      	ldr	r1, [r4, #36]	; 0x24
   1d676:	1843      	adds	r3, r0, r1
   1d678:	e785      	b.n	1d586 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x392>
   1d67a:	f000 fb3b 	bl	1dcf4 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>
   1d67e:	6a61      	ldr	r1, [r4, #36]	; 0x24
   1d680:	1843      	adds	r3, r0, r1
   1d682:	e780      	b.n	1d586 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x392>
   1d684:	f019 0f02 	tst.w	r9, #2
   1d688:	d02a      	beq.n	1d6e0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4ec>
   1d68a:	f019 0f04 	tst.w	r9, #4
   1d68e:	d121      	bne.n	1d6d4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4e0>
   1d690:	f001 f8c1 	bl	1e816 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
   1d694:	b9f0      	cbnz	r0, 1d6d4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4e0>
   1d696:	f001 f8ae 	bl	1e7f6 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
   1d69a:	b9d8      	cbnz	r0, 1d6d4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4e0>
   1d69c:	4841      	ldr	r0, [pc, #260]	; (1d7a4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x5b0>)
   1d69e:	6800      	ldr	r0, [r0, #0]
   1d6a0:	f3c0 6c00 	ubfx	ip, r0, #24, #1
   1d6a4:	f3c0 5142 	ubfx	r1, r0, #21, #3
   1d6a8:	f000 030f 	and.w	r3, r0, #15
   1d6ac:	f3c0 1203 	ubfx	r2, r0, #4, #4
   1d6b0:	f3c0 2003 	ubfx	r0, r0, #8, #4
   1d6b4:	f1bc 0f00 	cmp.w	ip, #0
   1d6b8:	d00c      	beq.n	1d6d4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4e0>
   1d6ba:	2b00      	cmp	r3, #0
   1d6bc:	bf1c      	itt	ne
   1d6be:	2a00      	cmpne	r2, #0
   1d6c0:	2800      	cmpne	r0, #0
   1d6c2:	d107      	bne.n	1d6d4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4e0>
   1d6c4:	4838      	ldr	r0, [pc, #224]	; (1d7a8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x5b4>)
   1d6c6:	6800      	ldr	r0, [r0, #0]
   1d6c8:	2800      	cmp	r0, #0
   1d6ca:	bf18      	it	ne
   1d6cc:	2903      	cmpne	r1, #3
   1d6ce:	bf38      	it	cc
   1d6d0:	f049 0904 	orrcc.w	r9, r9, #4
   1d6d4:	ea27 0099 	bic.w	r0, r7, r9, lsr #2
   1d6d8:	4651      	mov	r1, sl
   1d6da:	f8d8 2004 	ldr.w	r2, [r8, #4]
   1d6de:	e007      	b.n	1d6f0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4fc>
   1d6e0:	f019 0f28 	tst.w	r9, #40	; 0x28
   1d6e4:	d005      	beq.n	1d6f2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4fe>
   1d6e6:	f8d8 2008 	ldr.w	r2, [r8, #8]
   1d6ea:	ea27 1159 	bic.w	r1, r7, r9, lsr #5
   1d6ee:	4650      	mov	r0, sl
   1d6f0:	4790      	blx	r2
   1d6f2:	f019 0f10 	tst.w	r9, #16
   1d6f6:	bf1c      	itt	ne
   1d6f8:	f8d8 000c 	ldrne.w	r0, [r8, #12]
   1d6fc:	4780      	blxne	r0
   1d6fe:	7a60      	ldrb	r0, [r4, #9]
   1d700:	2802      	cmp	r0, #2
   1d702:	d118      	bne.n	1d736 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x542>
   1d704:	7b20      	ldrb	r0, [r4, #12]
   1d706:	b1b0      	cbz	r0, 1d736 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x542>
   1d708:	2802      	cmp	r0, #2
   1d70a:	d006      	beq.n	1d71a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x526>
   1d70c:	2801      	cmp	r0, #1
   1d70e:	d035      	beq.n	1d77c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x588>
   1d710:	f640 4148 	movw	r1, #3144	; 0xc48
   1d714:	203e      	movs	r0, #62	; 0x3e
   1d716:	f7f4 f933 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1d71a:	6921      	ldr	r1, [r4, #16]
   1d71c:	6a60      	ldr	r0, [r4, #36]	; 0x24
   1d71e:	4408      	add	r0, r1
   1d720:	4922      	ldr	r1, [pc, #136]	; (1d7ac <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x5b8>)
   1d722:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
   1d726:	6b20      	ldr	r0, [r4, #48]	; 0x30
   1d728:	4921      	ldr	r1, [pc, #132]	; (1d7b0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x5bc>)
   1d72a:	f440 0080 	orr.w	r0, r0, #4194304	; 0x400000
   1d72e:	6320      	str	r0, [r4, #48]	; 0x30
   1d730:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
   1d734:	6008      	str	r0, [r1, #0]
   1d736:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
   1d73a:	2800      	cmp	r0, #0
   1d73c:	bf18      	it	ne
   1d73e:	e8bd 8ff8 	ldmiane.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d742:	f019 0f10 	tst.w	r9, #16
   1d746:	bf14      	ite	ne
   1d748:	9600      	strne	r6, [sp, #0]
   1d74a:	e8bd 8ff8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d74e:	9800      	ldr	r0, [sp, #0]
   1d750:	1c40      	adds	r0, r0, #1
   1d752:	9000      	str	r0, [sp, #0]
   1d754:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   1d758:	d01d      	beq.n	1d796 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x5a2>
   1d75a:	f8d5 0550 	ldr.w	r0, [r5, #1360]	; 0x550
   1d75e:	b2c0      	uxtb	r0, r0
   1d760:	2804      	cmp	r0, #4
   1d762:	bf18      	it	ne
   1d764:	280c      	cmpne	r0, #12
   1d766:	d0f2      	beq.n	1d74e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x55a>
   1d768:	f8c5 6110 	str.w	r6, [r5, #272]	; 0x110
   1d76c:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
   1d770:	f04f 0002 	mov.w	r0, #2
   1d774:	f8c1 0280 	str.w	r0, [r1, #640]	; 0x280
   1d778:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d77c:	6a61      	ldr	r1, [r4, #36]	; 0x24
   1d77e:	6920      	ldr	r0, [r4, #16]
   1d780:	4288      	cmp	r0, r1
   1d782:	bf84      	itt	hi
   1d784:	4909      	ldrhi	r1, [pc, #36]	; (1d7ac <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x5b8>)
   1d786:	f8c1 0540 	strhi.w	r0, [r1, #1344]	; 0x540
   1d78a:	d8cc      	bhi.n	1d726 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x532>
   1d78c:	f640 4149 	movw	r1, #3145	; 0xc49
   1d790:	203e      	movs	r0, #62	; 0x3e
   1d792:	f7f4 f8f5 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1d796:	f640 4171 	movw	r1, #3185	; 0xc71
   1d79a:	203e      	movs	r0, #62	; 0x3e
   1d79c:	f7f4 f8f0 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1d7a0:	200017c8 	.word	0x200017c8
   1d7a4:	40001450 	.word	0x40001450
   1d7a8:	40001454 	.word	0x40001454
   1d7ac:	40008004 	.word	0x40008004
   1d7b0:	4001f504 	.word	0x4001f504

0001d7b4 <sym_FY64OI6JRV3CK6UZDJBVOPA33ZIK3BGBMGMWYKA>:
   1d7b4:	b570      	push	{r4, r5, r6, lr}
   1d7b6:	4b28      	ldr	r3, [pc, #160]	; (1d858 <sym_FY64OI6JRV3CK6UZDJBVOPA33ZIK3BGBMGMWYKA+0xa4>)
   1d7b8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   1d7bc:	f022 0202 	bic.w	r2, r2, #2
   1d7c0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
   1d7c4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
   1d7c8:	4a25      	ldr	r2, [pc, #148]	; (1d860 <sym_FY64OI6JRV3CK6UZDJBVOPA33ZIK3BGBMGMWYKA+0xac>)
   1d7ca:	4b24      	ldr	r3, [pc, #144]	; (1d85c <sym_FY64OI6JRV3CK6UZDJBVOPA33ZIK3BGBMGMWYKA+0xa8>)
   1d7cc:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
   1d7d0:	4b24      	ldr	r3, [pc, #144]	; (1d864 <sym_FY64OI6JRV3CK6UZDJBVOPA33ZIK3BGBMGMWYKA+0xb0>)
   1d7d2:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
   1d7d6:	4b24      	ldr	r3, [pc, #144]	; (1d868 <sym_FY64OI6JRV3CK6UZDJBVOPA33ZIK3BGBMGMWYKA+0xb4>)
   1d7d8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   1d7dc:	601a      	str	r2, [r3, #0]
   1d7de:	7802      	ldrb	r2, [r0, #0]
   1d7e0:	2a03      	cmp	r2, #3
   1d7e2:	d004      	beq.n	1d7ee <sym_FY64OI6JRV3CK6UZDJBVOPA33ZIK3BGBMGMWYKA+0x3a>
   1d7e4:	f240 3149 	movw	r1, #841	; 0x349
   1d7e8:	203e      	movs	r0, #62	; 0x3e
   1d7ea:	f7f4 f8c9 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1d7ee:	4b22      	ldr	r3, [pc, #136]	; (1d878 <sym_FY64OI6JRV3CK6UZDJBVOPA33ZIK3BGBMGMWYKA+0xc4>)
   1d7f0:	2901      	cmp	r1, #1
   1d7f2:	f8df c078 	ldr.w	ip, [pc, #120]	; 1d86c <sym_FY64OI6JRV3CK6UZDJBVOPA33ZIK3BGBMGMWYKA+0xb8>
   1d7f6:	695a      	ldr	r2, [r3, #20]
   1d7f8:	4c1d      	ldr	r4, [pc, #116]	; (1d870 <sym_FY64OI6JRV3CK6UZDJBVOPA33ZIK3BGBMGMWYKA+0xbc>)
   1d7fa:	4d1e      	ldr	r5, [pc, #120]	; (1d874 <sym_FY64OI6JRV3CK6UZDJBVOPA33ZIK3BGBMGMWYKA+0xc0>)
   1d7fc:	7841      	ldrb	r1, [r0, #1]
   1d7fe:	f022 0203 	bic.w	r2, r2, #3
   1d802:	d015      	beq.n	1d830 <sym_FY64OI6JRV3CK6UZDJBVOPA33ZIK3BGBMGMWYKA+0x7c>
   1d804:	f8dc 6000 	ldr.w	r6, [ip]
   1d808:	2000      	movs	r0, #0
   1d80a:	f360 4613 	bfi	r6, r0, #16, #4
   1d80e:	f8cc 6000 	str.w	r6, [ip]
   1d812:	f042 0003 	orr.w	r0, r2, #3
   1d816:	6158      	str	r0, [r3, #20]
   1d818:	6020      	str	r0, [r4, #0]
   1d81a:	f001 003f 	and.w	r0, r1, #63	; 0x3f
   1d81e:	f440 504a 	orr.w	r0, r0, #12928	; 0x3280
   1d822:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
   1d826:	6028      	str	r0, [r5, #0]
   1d828:	2001      	movs	r0, #1
   1d82a:	f883 0044 	strb.w	r0, [r3, #68]	; 0x44
   1d82e:	bd70      	pop	{r4, r5, r6, pc}
   1d830:	f8dc 6000 	ldr.w	r6, [ip]
   1d834:	2008      	movs	r0, #8
   1d836:	f360 4613 	bfi	r6, r0, #16, #4
   1d83a:	f8cc 6000 	str.w	r6, [ip]
   1d83e:	f042 0003 	orr.w	r0, r2, #3
   1d842:	6158      	str	r0, [r3, #20]
   1d844:	6020      	str	r0, [r4, #0]
   1d846:	f001 003f 	and.w	r0, r1, #63	; 0x3f
   1d84a:	f440 504a 	orr.w	r0, r0, #12928	; 0x3280
   1d84e:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
   1d852:	6028      	str	r0, [r5, #0]
   1d854:	e7e8      	b.n	1d828 <sym_FY64OI6JRV3CK6UZDJBVOPA33ZIK3BGBMGMWYKA+0x74>
   1d856:	0000      	.short	0x0000
   1d858:	40001000 	.word	0x40001000
   1d85c:	4000112c 	.word	0x4000112c
   1d860:	4001f090 	.word	0x4001f090
   1d864:	40008048 	.word	0x40008048
   1d868:	4001f504 	.word	0x4001f504
   1d86c:	40001514 	.word	0x40001514
   1d870:	40001900 	.word	0x40001900
   1d874:	40001910 	.word	0x40001910
   1d878:	200017d8 	.word	0x200017d8

0001d87c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>:
   1d87c:	b510      	push	{r4, lr}
   1d87e:	4b19      	ldr	r3, [pc, #100]	; (1d8e4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x68>)
   1d880:	f8b1 c004 	ldrh.w	ip, [r1, #4]
   1d884:	eb03 0480 	add.w	r4, r3, r0, lsl #2
   1d888:	f8c4 c620 	str.w	ip, [r4, #1568]	; 0x620
   1d88c:	f891 c000 	ldrb.w	ip, [r1]
   1d890:	f8d1 1001 	ldr.w	r1, [r1, #1]
   1d894:	ea4c 2101 	orr.w	r1, ip, r1, lsl #8
   1d898:	f8c4 1600 	str.w	r1, [r4, #1536]	; 0x600
   1d89c:	4912      	ldr	r1, [pc, #72]	; (1d8e8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x6c>)
   1d89e:	f8d1 c000 	ldr.w	ip, [r1]
   1d8a2:	2101      	movs	r1, #1
   1d8a4:	fa01 f000 	lsl.w	r0, r1, r0
   1d8a8:	ea4c 0100 	orr.w	r1, ip, r0
   1d8ac:	b2c9      	uxtb	r1, r1
   1d8ae:	b132      	cbz	r2, 1d8be <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x42>
   1d8b0:	2a01      	cmp	r2, #1
   1d8b2:	d00b      	beq.n	1d8cc <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x50>
   1d8b4:	f240 51d4 	movw	r1, #1492	; 0x5d4
   1d8b8:	203e      	movs	r0, #62	; 0x3e
   1d8ba:	f7f4 f861 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1d8be:	f8d3 2640 	ldr.w	r2, [r3, #1600]	; 0x640
   1d8c2:	f3c2 2207 	ubfx	r2, r2, #8, #8
   1d8c6:	ea22 0000 	bic.w	r0, r2, r0
   1d8ca:	e005      	b.n	1d8d8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x5c>
   1d8cc:	f8d3 2640 	ldr.w	r2, [r3, #1600]	; 0x640
   1d8d0:	b2c0      	uxtb	r0, r0
   1d8d2:	f3c2 2207 	ubfx	r2, r2, #8, #8
   1d8d6:	4310      	orrs	r0, r2
   1d8d8:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
   1d8dc:	f8c3 0640 	str.w	r0, [r3, #1600]	; 0x640
   1d8e0:	bd10      	pop	{r4, pc}
   1d8e2:	0000      	.short	0x0000
   1d8e4:	40001000 	.word	0x40001000
   1d8e8:	40001640 	.word	0x40001640

0001d8ec <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY>:
   1d8ec:	4901      	ldr	r1, [pc, #4]	; (1d8f4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x8>)
   1d8ee:	2001      	movs	r0, #1
   1d8f0:	7008      	strb	r0, [r1, #0]
   1d8f2:	4770      	bx	lr
   1d8f4:	2000039c 	.word	0x2000039c
   1d8f8:	4a0e      	ldr	r2, [pc, #56]	; (1d934 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x48>)
   1d8fa:	490f      	ldr	r1, [pc, #60]	; (1d938 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x4c>)
   1d8fc:	6813      	ldr	r3, [r2, #0]
   1d8fe:	b170      	cbz	r0, 1d91e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x32>
   1d900:	f023 0382 	bic.w	r3, r3, #130	; 0x82
   1d904:	f043 037d 	orr.w	r3, r3, #125	; 0x7d
   1d908:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1d90c:	6013      	str	r3, [r2, #0]
   1d90e:	680a      	ldr	r2, [r1, #0]
   1d910:	f022 0210 	bic.w	r2, r2, #16
   1d914:	f042 0260 	orr.w	r2, r2, #96	; 0x60
   1d918:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
   1d91c:	e005      	b.n	1d92a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3e>
   1d91e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   1d922:	6013      	str	r3, [r2, #0]
   1d924:	680a      	ldr	r2, [r1, #0]
   1d926:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
   1d92a:	600a      	str	r2, [r1, #0]
   1d92c:	4903      	ldr	r1, [pc, #12]	; (1d93c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x50>)
   1d92e:	f881 0036 	strb.w	r0, [r1, #54]	; 0x36
   1d932:	4770      	bx	lr
   1d934:	4000173c 	.word	0x4000173c
   1d938:	4000177c 	.word	0x4000177c
   1d93c:	200017d8 	.word	0x200017d8
   1d940:	4908      	ldr	r1, [pc, #32]	; (1d964 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x78>)
   1d942:	7a4a      	ldrb	r2, [r1, #9]
   1d944:	2101      	movs	r1, #1
   1d946:	2a01      	cmp	r2, #1
   1d948:	bf08      	it	eq
   1d94a:	ea21 0090 	biceq.w	r0, r1, r0, lsr #2
   1d94e:	d004      	beq.n	1d95a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x6e>
   1d950:	2a02      	cmp	r2, #2
   1d952:	bf0c      	ite	eq
   1d954:	ea21 0050 	biceq.w	r0, r1, r0, lsr #1
   1d958:	4770      	bxne	lr
   1d95a:	2800      	cmp	r0, #0
   1d95c:	bf1c      	itt	ne
   1d95e:	4802      	ldrne	r0, [pc, #8]	; (1d968 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x7c>)
   1d960:	6101      	strne	r1, [r0, #16]
   1d962:	4770      	bx	lr
   1d964:	200017d8 	.word	0x200017d8
   1d968:	40001000 	.word	0x40001000
   1d96c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d96e:	4c3b      	ldr	r4, [pc, #236]	; (1da5c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x170>)
   1d970:	4605      	mov	r5, r0
   1d972:	2d01      	cmp	r5, #1
   1d974:	7620      	strb	r0, [r4, #24]
   1d976:	483a      	ldr	r0, [pc, #232]	; (1da60 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x174>)
   1d978:	bf08      	it	eq
   1d97a:	2103      	moveq	r1, #3
   1d97c:	d010      	beq.n	1d9a0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xb4>
   1d97e:	2d02      	cmp	r5, #2
   1d980:	bf08      	it	eq
   1d982:	2104      	moveq	r1, #4
   1d984:	d00c      	beq.n	1d9a0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xb4>
   1d986:	2d04      	cmp	r5, #4
   1d988:	bf08      	it	eq
   1d98a:	2106      	moveq	r1, #6
   1d98c:	d008      	beq.n	1d9a0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xb4>
   1d98e:	2d08      	cmp	r5, #8
   1d990:	bf08      	it	eq
   1d992:	2105      	moveq	r1, #5
   1d994:	d004      	beq.n	1d9a0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xb4>
   1d996:	f640 5169 	movw	r1, #3433	; 0xd69
   1d99a:	203e      	movs	r0, #62	; 0x3e
   1d99c:	f7f3 fff0 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1d9a0:	6001      	str	r1, [r0, #0]
   1d9a2:	7ea1      	ldrb	r1, [r4, #26]
   1d9a4:	482f      	ldr	r0, [pc, #188]	; (1da64 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x178>)
   1d9a6:	5c40      	ldrb	r0, [r0, r1]
   1d9a8:	f500 6016 	add.w	r0, r0, #2400	; 0x960
   1d9ac:	f5b0 6f16 	cmp.w	r0, #2400	; 0x960
   1d9b0:	bf3a      	itte	cc
   1d9b2:	f6a0 1038 	subwcc	r0, r0, #2360	; 0x938
   1d9b6:	f440 7080 	orrcc.w	r0, r0, #256	; 0x100
   1d9ba:	f5a0 6016 	subcs.w	r0, r0, #2400	; 0x960
   1d9be:	4e2a      	ldr	r6, [pc, #168]	; (1da68 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x17c>)
   1d9c0:	f8c6 0508 	str.w	r0, [r6, #1288]	; 0x508
   1d9c4:	4a29      	ldr	r2, [pc, #164]	; (1da6c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x180>)
   1d9c6:	f001 007f 	and.w	r0, r1, #127	; 0x7f
   1d9ca:	6010      	str	r0, [r2, #0]
   1d9cc:	7a20      	ldrb	r0, [r4, #8]
   1d9ce:	2801      	cmp	r0, #1
   1d9d0:	d113      	bne.n	1d9fa <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x10e>
   1d9d2:	7aa0      	ldrb	r0, [r4, #10]
   1d9d4:	f994 2019 	ldrsb.w	r2, [r4, #25]
   1d9d8:	466b      	mov	r3, sp
   1d9da:	f000 f9c3 	bl	1dd64 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ>
   1d9de:	f99d 0000 	ldrsb.w	r0, [sp]
   1d9e2:	f000 f981 	bl	1dce8 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>
   1d9e6:	f10d 0001 	add.w	r0, sp, #1
   1d9ea:	f7f3 fe05 	bl	115f8 <mpsl_fem_pa_gain_set>
   1d9ee:	b120      	cbz	r0, 1d9fa <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x10e>
   1d9f0:	f240 6115 	movw	r1, #1557	; 0x615
   1d9f4:	203e      	movs	r0, #62	; 0x3e
   1d9f6:	f7f3 ffc3 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1d9fa:	20ff      	movs	r0, #255	; 0xff
   1d9fc:	f884 0037 	strb.w	r0, [r4, #55]	; 0x37
   1da00:	f8d6 0200 	ldr.w	r0, [r6, #512]	; 0x200
   1da04:	f440 7088 	orr.w	r0, r0, #272	; 0x110
   1da08:	f8c6 0200 	str.w	r0, [r6, #512]	; 0x200
   1da0c:	f000 ff1d 	bl	1e84a <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
   1da10:	b180      	cbz	r0, 1da34 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x148>
   1da12:	f015 0f0c 	tst.w	r5, #12
   1da16:	d00a      	beq.n	1da2e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x142>
   1da18:	2001      	movs	r0, #1
   1da1a:	f8c6 0304 	str.w	r0, [r6, #772]	; 0x304
   1da1e:	f7ff ff6b 	bl	1d8f8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
   1da22:	2001      	movs	r0, #1
   1da24:	63f0      	str	r0, [r6, #60]	; 0x3c
   1da26:	6430      	str	r0, [r6, #64]	; 0x40
   1da28:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
   1da2c:	e002      	b.n	1da34 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x148>
   1da2e:	2000      	movs	r0, #0
   1da30:	f7ff ff62 	bl	1d8f8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
   1da34:	4628      	mov	r0, r5
   1da36:	f000 f8fd 	bl	1dc34 <sym_MEIHG7NCZGGHWUGVLRGXMDTZB2OODFJAGHVWGLI>
   1da3a:	f000 feec 	bl	1e816 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
   1da3e:	2800      	cmp	r0, #0
   1da40:	bf18      	it	ne
   1da42:	bdf8      	popne	{r3, r4, r5, r6, r7, pc}
   1da44:	f000 fed7 	bl	1e7f6 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
   1da48:	2800      	cmp	r0, #0
   1da4a:	bf18      	it	ne
   1da4c:	bdf8      	popne	{r3, r4, r5, r6, r7, pc}
   1da4e:	4808      	ldr	r0, [pc, #32]	; (1da70 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x184>)
   1da50:	6801      	ldr	r1, [r0, #0]
   1da52:	f441 21c0 	orr.w	r1, r1, #393216	; 0x60000
   1da56:	6001      	str	r1, [r0, #0]
   1da58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1da5a:	0000      	.short	0x0000
   1da5c:	200017d8 	.word	0x200017d8
   1da60:	40001510 	.word	0x40001510
   1da64:	0001db64 	.word	0x0001db64
   1da68:	40001000 	.word	0x40001000
   1da6c:	40001554 	.word	0x40001554
   1da70:	40001568 	.word	0x40001568
   1da74:	b538      	push	{r3, r4, r5, lr}
   1da76:	4a2c      	ldr	r2, [pc, #176]	; (1db28 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x23c>)
   1da78:	4604      	mov	r4, r0
   1da7a:	2c01      	cmp	r4, #1
   1da7c:	7610      	strb	r0, [r2, #24]
   1da7e:	482b      	ldr	r0, [pc, #172]	; (1db2c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x240>)
   1da80:	bf08      	it	eq
   1da82:	2103      	moveq	r1, #3
   1da84:	d010      	beq.n	1daa8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1bc>
   1da86:	2c02      	cmp	r4, #2
   1da88:	bf08      	it	eq
   1da8a:	2104      	moveq	r1, #4
   1da8c:	d00c      	beq.n	1daa8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1bc>
   1da8e:	2c04      	cmp	r4, #4
   1da90:	bf08      	it	eq
   1da92:	2106      	moveq	r1, #6
   1da94:	d008      	beq.n	1daa8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1bc>
   1da96:	2c08      	cmp	r4, #8
   1da98:	bf08      	it	eq
   1da9a:	2105      	moveq	r1, #5
   1da9c:	d004      	beq.n	1daa8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1bc>
   1da9e:	f640 5169 	movw	r1, #3433	; 0xd69
   1daa2:	203e      	movs	r0, #62	; 0x3e
   1daa4:	f7f3 ff6c 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1daa8:	6001      	str	r1, [r0, #0]
   1daaa:	7e91      	ldrb	r1, [r2, #26]
   1daac:	4820      	ldr	r0, [pc, #128]	; (1db30 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x244>)
   1daae:	5c40      	ldrb	r0, [r0, r1]
   1dab0:	f500 6016 	add.w	r0, r0, #2400	; 0x960
   1dab4:	f5b0 6f16 	cmp.w	r0, #2400	; 0x960
   1dab8:	bf3a      	itte	cc
   1daba:	f6a0 1038 	subwcc	r0, r0, #2360	; 0x938
   1dabe:	f440 7080 	orrcc.w	r0, r0, #256	; 0x100
   1dac2:	f5a0 6016 	subcs.w	r0, r0, #2400	; 0x960
   1dac6:	4b1b      	ldr	r3, [pc, #108]	; (1db34 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x248>)
   1dac8:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
   1dacc:	4b1a      	ldr	r3, [pc, #104]	; (1db38 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x24c>)
   1dace:	f001 007f 	and.w	r0, r1, #127	; 0x7f
   1dad2:	6018      	str	r0, [r3, #0]
   1dad4:	4620      	mov	r0, r4
   1dad6:	f992 2019 	ldrsb.w	r2, [r2, #25]
   1dada:	466b      	mov	r3, sp
   1dadc:	f000 f942 	bl	1dd64 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ>
   1dae0:	f99d 0000 	ldrsb.w	r0, [sp]
   1dae4:	f000 f900 	bl	1dce8 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>
   1dae8:	f10d 0001 	add.w	r0, sp, #1
   1daec:	f7f3 fd84 	bl	115f8 <mpsl_fem_pa_gain_set>
   1daf0:	b120      	cbz	r0, 1dafc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x210>
   1daf2:	f240 6115 	movw	r1, #1557	; 0x615
   1daf6:	203e      	movs	r0, #62	; 0x3e
   1daf8:	f7f3 ff42 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1dafc:	f000 fe8b 	bl	1e816 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
   1db00:	2800      	cmp	r0, #0
   1db02:	bf08      	it	eq
   1db04:	bd38      	popeq	{r3, r4, r5, pc}
   1db06:	4a0d      	ldr	r2, [pc, #52]	; (1db3c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x250>)
   1db08:	6811      	ldr	r1, [r2, #0]
   1db0a:	0650      	lsls	r0, r2, #25
   1db0c:	2c02      	cmp	r4, #2
   1db0e:	f8d0 0320 	ldr.w	r0, [r0, #800]	; 0x320
   1db12:	bf0c      	ite	eq
   1db14:	f3c0 6006 	ubfxeq	r0, r0, #24, #7
   1db18:	f3c0 2006 	ubfxne	r0, r0, #8, #7
   1db1c:	f421 41fe 	bic.w	r1, r1, #32512	; 0x7f00
   1db20:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
   1db24:	6010      	str	r0, [r2, #0]
   1db26:	bd38      	pop	{r3, r4, r5, pc}
   1db28:	200017d8 	.word	0x200017d8
   1db2c:	40001510 	.word	0x40001510
   1db30:	0001db64 	.word	0x0001db64
   1db34:	40001000 	.word	0x40001000
   1db38:	40001554 	.word	0x40001554
   1db3c:	40001588 	.word	0x40001588
   1db40:	05dc0000 	.word	0x05dc0000
   1db44:	000003e8 	.word	0x000003e8
	...
   1db50:	000017d4 	.word	0x000017d4
   1db54:	a1e0a62c 	.word	0xa1e0a62c
   1db58:	a8200000 	.word	0xa8200000
   1db5c:	00000000 	.word	0x00000000
   1db60:	a8200000 	.word	0xa8200000
   1db64:	0a080604 	.word	0x0a080604
   1db68:	12100e0c 	.word	0x12100e0c
   1db6c:	1c181614 	.word	0x1c181614
   1db70:	2422201e 	.word	0x2422201e
   1db74:	2c2a2826 	.word	0x2c2a2826
   1db78:	3432302e 	.word	0x3432302e
   1db7c:	3c3a3836 	.word	0x3c3a3836
   1db80:	4442403e 	.word	0x4442403e
   1db84:	4c4a4846 	.word	0x4c4a4846
   1db88:	501a024e 	.word	0x501a024e
   1db8c:	00000001 	.word	0x00000001
   1db90:	40001110 	.word	0x40001110
	...
   1dba8:	00001e14 	.word	0x00001e14
   1dbac:	00001130 	.word	0x00001130
   1dbb0:	00000000 	.word	0x00000000
   1dbb4:	0000ea60 	.word	0x0000ea60
	...
   1dbc4:	0000ea60 	.word	0x0000ea60
   1dbc8:	00000000 	.word	0x00000000
   1dbcc:	00000028 	.word	0x00000028
   1dbd0:	00000018 	.word	0x00000018
   1dbd4:	00000000 	.word	0x00000000
   1dbd8:	00000150 	.word	0x00000150
	...
   1dbe8:	00000150 	.word	0x00000150
   1dbec:	00000000 	.word	0x00000000
   1dbf0:	00001e14 	.word	0x00001e14
   1dbf4:	00001130 	.word	0x00001130
   1dbf8:	00000000 	.word	0x00000000
   1dbfc:	00005fb4 	.word	0x00005fb4
	...
   1dc0c:	0000733c 	.word	0x0000733c
   1dc10:	00000000 	.word	0x00000000
   1dc14:	00001770 	.word	0x00001770
   1dc18:	00000fa0 	.word	0x00000fa0
   1dc1c:	00000000 	.word	0x00000000
   1dc20:	0000283c 	.word	0x0000283c
	...
   1dc30:	0000283c 	.word	0x0000283c

0001dc34 <sym_MEIHG7NCZGGHWUGVLRGXMDTZB2OODFJAGHVWGLI>:
   1dc34:	b510      	push	{r4, lr}
   1dc36:	4604      	mov	r4, r0
   1dc38:	f000 fe07 	bl	1e84a <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
   1dc3c:	2800      	cmp	r0, #0
   1dc3e:	bf08      	it	eq
   1dc40:	bd10      	popeq	{r4, pc}
   1dc42:	4908      	ldr	r1, [pc, #32]	; (1dc64 <sym_MEIHG7NCZGGHWUGVLRGXMDTZB2OODFJAGHVWGLI+0x30>)
   1dc44:	2c08      	cmp	r4, #8
   1dc46:	bf18      	it	ne
   1dc48:	2c04      	cmpne	r4, #4
   1dc4a:	6808      	ldr	r0, [r1, #0]
   1dc4c:	bf03      	ittte	eq
   1dc4e:	f420 506c 	biceq.w	r0, r0, #15104	; 0x3b00
   1dc52:	f440 4044 	orreq.w	r0, r0, #50176	; 0xc400
   1dc56:	f040 4000 	orreq.w	r0, r0, #2147483648	; 0x80000000
   1dc5a:	f020 4000 	bicne.w	r0, r0, #2147483648	; 0x80000000
   1dc5e:	6008      	str	r0, [r1, #0]
   1dc60:	bd10      	pop	{r4, pc}
   1dc62:	0000      	.short	0x0000
   1dc64:	40001740 	.word	0x40001740

0001dc68 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>:
   1dc68:	b570      	push	{r4, r5, r6, lr}
   1dc6a:	4605      	mov	r5, r0
   1dc6c:	4614      	mov	r4, r2
   1dc6e:	4608      	mov	r0, r1
   1dc70:	f7ff f882 	bl	1cd78 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   1dc74:	eb05 0145 	add.w	r1, r5, r5, lsl #1
   1dc78:	ebc1 11c5 	rsb	r1, r1, r5, lsl #7
   1dc7c:	ebc0 01c1 	rsb	r1, r0, r1, lsl #3
   1dc80:	4807      	ldr	r0, [pc, #28]	; (1dca0 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA+0x38>)
   1dc82:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
   1dc86:	4408      	add	r0, r1
   1dc88:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   1dc8c:	f600 30b7 	addw	r0, r0, #2999	; 0xbb7
   1dc90:	fbb0 f5f1 	udiv	r5, r0, r1
   1dc94:	4620      	mov	r0, r4
   1dc96:	f7ff f821 	bl	1ccdc <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
   1dc9a:	4428      	add	r0, r5
   1dc9c:	1d40      	adds	r0, r0, #5
   1dc9e:	bd70      	pop	{r4, r5, r6, pc}
   1dca0:	0001dd40 	.word	0x0001dd40

0001dca4 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>:
   1dca4:	b570      	push	{r4, r5, r6, lr}
   1dca6:	f8df c03c 	ldr.w	ip, [pc, #60]	; 1dce4 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x40>
   1dcaa:	461c      	mov	r4, r3
   1dcac:	4b0c      	ldr	r3, [pc, #48]	; (1dce0 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x3c>)
   1dcae:	f83c 1011 	ldrh.w	r1, [ip, r1, lsl #1]
   1dcb2:	eb00 0c40 	add.w	ip, r0, r0, lsl #1
   1dcb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1dcba:	ebcc 10c0 	rsb	r0, ip, r0, lsl #7
   1dcbe:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
   1dcc2:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
   1dcc6:	4418      	add	r0, r3
   1dcc8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   1dccc:	fbb0 f5f1 	udiv	r5, r0, r1
   1dcd0:	4610      	mov	r0, r2
   1dcd2:	f7ff f803 	bl	1ccdc <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
   1dcd6:	4428      	add	r0, r5
   1dcd8:	4420      	add	r0, r4
   1dcda:	1d40      	adds	r0, r0, #5
   1dcdc:	bd70      	pop	{r4, r5, r6, pc}
   1dcde:	0000      	.short	0x0000
   1dce0:	0001dd40 	.word	0x0001dd40
   1dce4:	0001dd2c 	.word	0x0001dd2c

0001dce8 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>:
   1dce8:	4901      	ldr	r1, [pc, #4]	; (1dcf0 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA+0x8>)
   1dcea:	b2c0      	uxtb	r0, r0
   1dcec:	6008      	str	r0, [r1, #0]
   1dcee:	4770      	bx	lr
   1dcf0:	4000150c 	.word	0x4000150c

0001dcf4 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>:
   1dcf4:	4a05      	ldr	r2, [pc, #20]	; (1dd0c <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA+0x18>)
   1dcf6:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
   1dcfa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1dcfe:	f201 31e7 	addw	r1, r1, #999	; 0x3e7
   1dd02:	fbb1 f1f2 	udiv	r1, r1, r2
   1dd06:	4408      	add	r0, r1
   1dd08:	1e80      	subs	r0, r0, #2
   1dd0a:	4770      	bx	lr
   1dd0c:	0001dd2c 	.word	0x0001dd2c

0001dd10 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>:
   1dd10:	4a05      	ldr	r2, [pc, #20]	; (1dd28 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI+0x18>)
   1dd12:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
   1dd16:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1dd1a:	f501 717a 	add.w	r1, r1, #1000	; 0x3e8
   1dd1e:	fbb1 f1f2 	udiv	r1, r1, r2
   1dd22:	4408      	add	r0, r1
   1dd24:	4770      	bx	lr
   1dd26:	0000      	.short	0x0000
   1dd28:	0001dd2c 	.word	0x0001dd2c
   1dd2c:	05dc0000 	.word	0x05dc0000
   1dd30:	000003e8 	.word	0x000003e8
	...
   1dd3c:	000017d4 	.word	0x000017d4
   1dd40:	00000000 	.word	0x00000000
   1dd44:	00001e14 	.word	0x00001e14
   1dd48:	00001130 	.word	0x00001130
   1dd4c:	00000000 	.word	0x00000000
   1dd50:	0000ea60 	.word	0x0000ea60
	...
   1dd60:	0000ea60 	.word	0x0000ea60

0001dd64 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ>:
   1dd64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1dd68:	461e      	mov	r6, r3
   1dd6a:	4690      	mov	r8, r2
   1dd6c:	460f      	mov	r7, r1
   1dd6e:	4605      	mov	r5, r0
   1dd70:	f7ef fd9a 	bl	d8a8 <sym_3NUECOSAIC227DBCPHAP4U7EQ3UBTGANU5ASIOA>
   1dd74:	4c25      	ldr	r4, [pc, #148]	; (1de0c <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0xa8>)
   1dd76:	4681      	mov	r9, r0
   1dd78:	7820      	ldrb	r0, [r4, #0]
   1dd7a:	42a8      	cmp	r0, r5
   1dd7c:	bf04      	itt	eq
   1dd7e:	7860      	ldrbeq	r0, [r4, #1]
   1dd80:	42b8      	cmpeq	r0, r7
   1dd82:	d10b      	bne.n	1dd9c <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x38>
   1dd84:	f994 0002 	ldrsb.w	r0, [r4, #2]
   1dd88:	4540      	cmp	r0, r8
   1dd8a:	bf04      	itt	eq
   1dd8c:	78e0      	ldrbeq	r0, [r4, #3]
   1dd8e:	4548      	cmpeq	r0, r9
   1dd90:	d104      	bne.n	1dd9c <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x38>
   1dd92:	88a0      	ldrh	r0, [r4, #4]
   1dd94:	8030      	strh	r0, [r6, #0]
   1dd96:	79a0      	ldrb	r0, [r4, #6]
   1dd98:	70b0      	strb	r0, [r6, #2]
   1dd9a:	e032      	b.n	1de02 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x9e>
   1dd9c:	4642      	mov	r2, r8
   1dd9e:	2d01      	cmp	r5, #1
   1dda0:	bf08      	it	eq
   1dda2:	2000      	moveq	r0, #0
   1dda4:	d010      	beq.n	1ddc8 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x64>
   1dda6:	2d02      	cmp	r5, #2
   1dda8:	bf08      	it	eq
   1ddaa:	2001      	moveq	r0, #1
   1ddac:	d00c      	beq.n	1ddc8 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x64>
   1ddae:	2d04      	cmp	r5, #4
   1ddb0:	bf08      	it	eq
   1ddb2:	2003      	moveq	r0, #3
   1ddb4:	d008      	beq.n	1ddc8 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x64>
   1ddb6:	2d08      	cmp	r5, #8
   1ddb8:	bf08      	it	eq
   1ddba:	2002      	moveq	r0, #2
   1ddbc:	d004      	beq.n	1ddc8 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x64>
   1ddbe:	f240 415a 	movw	r1, #1114	; 0x45a
   1ddc2:	2006      	movs	r0, #6
   1ddc4:	f7f3 fddc 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1ddc8:	466b      	mov	r3, sp
   1ddca:	4639      	mov	r1, r7
   1ddcc:	f7ef fdbc 	bl	d948 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ>
   1ddd0:	b118      	cbz	r0, 1ddda <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x76>
   1ddd2:	213d      	movs	r1, #61	; 0x3d
   1ddd4:	2075      	movs	r0, #117	; 0x75
   1ddd6:	f7f3 fdd3 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1ddda:	4638      	mov	r0, r7
   1dddc:	f7fe faea 	bl	1c3b4 <sym_DRIMECVE2FH7O6C2LQ25QRVJOICPHLA5GC6TM2I>
   1dde0:	4602      	mov	r2, r0
   1dde2:	4631      	mov	r1, r6
   1dde4:	f99d 0000 	ldrsb.w	r0, [sp]
   1dde8:	f7f3 fc12 	bl	11610 <mpsl_fem_tx_power_split>
   1ddec:	71e0      	strb	r0, [r4, #7]
   1ddee:	8830      	ldrh	r0, [r6, #0]
   1ddf0:	80a0      	strh	r0, [r4, #4]
   1ddf2:	78b0      	ldrb	r0, [r6, #2]
   1ddf4:	71a0      	strb	r0, [r4, #6]
   1ddf6:	7025      	strb	r5, [r4, #0]
   1ddf8:	7067      	strb	r7, [r4, #1]
   1ddfa:	f884 8002 	strb.w	r8, [r4, #2]
   1ddfe:	f884 9003 	strb.w	r9, [r4, #3]
   1de02:	f994 0007 	ldrsb.w	r0, [r4, #7]
   1de06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1de0a:	0000      	.short	0x0000
   1de0c:	200003f7 	.word	0x200003f7

0001de10 <__udivmoddi4>:
   1de10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1de14:	4686      	mov	lr, r0
   1de16:	468c      	mov	ip, r1
   1de18:	4608      	mov	r0, r1
   1de1a:	9e08      	ldr	r6, [sp, #32]
   1de1c:	4615      	mov	r5, r2
   1de1e:	4674      	mov	r4, lr
   1de20:	4619      	mov	r1, r3
   1de22:	2b00      	cmp	r3, #0
   1de24:	f040 80c2 	bne.w	1dfac <__udivmoddi4+0x19c>
   1de28:	4285      	cmp	r5, r0
   1de2a:	fab2 f282 	clz	r2, r2
   1de2e:	d945      	bls.n	1debc <__udivmoddi4+0xac>
   1de30:	b14a      	cbz	r2, 1de46 <__udivmoddi4+0x36>
   1de32:	f1c2 0320 	rsb	r3, r2, #32
   1de36:	fa00 fc02 	lsl.w	ip, r0, r2
   1de3a:	fa2e f303 	lsr.w	r3, lr, r3
   1de3e:	4095      	lsls	r5, r2
   1de40:	ea43 0c0c 	orr.w	ip, r3, ip
   1de44:	4094      	lsls	r4, r2
   1de46:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   1de4a:	b2a8      	uxth	r0, r5
   1de4c:	fbbc f8fe 	udiv	r8, ip, lr
   1de50:	0c23      	lsrs	r3, r4, #16
   1de52:	fb0e cc18 	mls	ip, lr, r8, ip
   1de56:	fb08 f900 	mul.w	r9, r8, r0
   1de5a:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
   1de5e:	4599      	cmp	r9, r3
   1de60:	d928      	bls.n	1deb4 <__udivmoddi4+0xa4>
   1de62:	18eb      	adds	r3, r5, r3
   1de64:	f108 37ff 	add.w	r7, r8, #4294967295	; 0xffffffff
   1de68:	d204      	bcs.n	1de74 <__udivmoddi4+0x64>
   1de6a:	4599      	cmp	r9, r3
   1de6c:	d902      	bls.n	1de74 <__udivmoddi4+0x64>
   1de6e:	f1a8 0702 	sub.w	r7, r8, #2
   1de72:	442b      	add	r3, r5
   1de74:	eba3 0309 	sub.w	r3, r3, r9
   1de78:	b2a4      	uxth	r4, r4
   1de7a:	fbb3 fcfe 	udiv	ip, r3, lr
   1de7e:	fb0e 331c 	mls	r3, lr, ip, r3
   1de82:	fb0c f000 	mul.w	r0, ip, r0
   1de86:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   1de8a:	42a0      	cmp	r0, r4
   1de8c:	d914      	bls.n	1deb8 <__udivmoddi4+0xa8>
   1de8e:	192c      	adds	r4, r5, r4
   1de90:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
   1de94:	d204      	bcs.n	1dea0 <__udivmoddi4+0x90>
   1de96:	42a0      	cmp	r0, r4
   1de98:	d902      	bls.n	1dea0 <__udivmoddi4+0x90>
   1de9a:	f1ac 0302 	sub.w	r3, ip, #2
   1de9e:	442c      	add	r4, r5
   1dea0:	1a24      	subs	r4, r4, r0
   1dea2:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
   1dea6:	b11e      	cbz	r6, 1deb0 <__udivmoddi4+0xa0>
   1dea8:	40d4      	lsrs	r4, r2
   1deaa:	2300      	movs	r3, #0
   1deac:	6034      	str	r4, [r6, #0]
   1deae:	6073      	str	r3, [r6, #4]
   1deb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1deb4:	4647      	mov	r7, r8
   1deb6:	e7dd      	b.n	1de74 <__udivmoddi4+0x64>
   1deb8:	4663      	mov	r3, ip
   1deba:	e7f1      	b.n	1dea0 <__udivmoddi4+0x90>
   1debc:	bb92      	cbnz	r2, 1df24 <__udivmoddi4+0x114>
   1debe:	1b43      	subs	r3, r0, r5
   1dec0:	2101      	movs	r1, #1
   1dec2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   1dec6:	b2af      	uxth	r7, r5
   1dec8:	fbb3 fcfe 	udiv	ip, r3, lr
   1decc:	0c20      	lsrs	r0, r4, #16
   1dece:	fb0e 331c 	mls	r3, lr, ip, r3
   1ded2:	fb0c f807 	mul.w	r8, ip, r7
   1ded6:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
   1deda:	4598      	cmp	r8, r3
   1dedc:	d962      	bls.n	1dfa4 <__udivmoddi4+0x194>
   1dede:	18eb      	adds	r3, r5, r3
   1dee0:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
   1dee4:	d204      	bcs.n	1def0 <__udivmoddi4+0xe0>
   1dee6:	4598      	cmp	r8, r3
   1dee8:	d902      	bls.n	1def0 <__udivmoddi4+0xe0>
   1deea:	f1ac 0002 	sub.w	r0, ip, #2
   1deee:	442b      	add	r3, r5
   1def0:	eba3 0308 	sub.w	r3, r3, r8
   1def4:	b2a4      	uxth	r4, r4
   1def6:	fbb3 fcfe 	udiv	ip, r3, lr
   1defa:	fb0e 331c 	mls	r3, lr, ip, r3
   1defe:	fb0c f707 	mul.w	r7, ip, r7
   1df02:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   1df06:	42a7      	cmp	r7, r4
   1df08:	d94e      	bls.n	1dfa8 <__udivmoddi4+0x198>
   1df0a:	192c      	adds	r4, r5, r4
   1df0c:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
   1df10:	d204      	bcs.n	1df1c <__udivmoddi4+0x10c>
   1df12:	42a7      	cmp	r7, r4
   1df14:	d902      	bls.n	1df1c <__udivmoddi4+0x10c>
   1df16:	f1ac 0302 	sub.w	r3, ip, #2
   1df1a:	442c      	add	r4, r5
   1df1c:	1be4      	subs	r4, r4, r7
   1df1e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   1df22:	e7c0      	b.n	1dea6 <__udivmoddi4+0x96>
   1df24:	f1c2 0320 	rsb	r3, r2, #32
   1df28:	fa20 f103 	lsr.w	r1, r0, r3
   1df2c:	4095      	lsls	r5, r2
   1df2e:	4090      	lsls	r0, r2
   1df30:	fa2e f303 	lsr.w	r3, lr, r3
   1df34:	4303      	orrs	r3, r0
   1df36:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   1df3a:	b2af      	uxth	r7, r5
   1df3c:	fbb1 fcfe 	udiv	ip, r1, lr
   1df40:	fb0e 101c 	mls	r0, lr, ip, r1
   1df44:	0c19      	lsrs	r1, r3, #16
   1df46:	fb0c f807 	mul.w	r8, ip, r7
   1df4a:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
   1df4e:	4588      	cmp	r8, r1
   1df50:	fa04 f402 	lsl.w	r4, r4, r2
   1df54:	d922      	bls.n	1df9c <__udivmoddi4+0x18c>
   1df56:	1869      	adds	r1, r5, r1
   1df58:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
   1df5c:	d204      	bcs.n	1df68 <__udivmoddi4+0x158>
   1df5e:	4588      	cmp	r8, r1
   1df60:	d902      	bls.n	1df68 <__udivmoddi4+0x158>
   1df62:	f1ac 0002 	sub.w	r0, ip, #2
   1df66:	4429      	add	r1, r5
   1df68:	eba1 0108 	sub.w	r1, r1, r8
   1df6c:	b29b      	uxth	r3, r3
   1df6e:	fbb1 fcfe 	udiv	ip, r1, lr
   1df72:	fb0e 111c 	mls	r1, lr, ip, r1
   1df76:	fb0c f707 	mul.w	r7, ip, r7
   1df7a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   1df7e:	429f      	cmp	r7, r3
   1df80:	d90e      	bls.n	1dfa0 <__udivmoddi4+0x190>
   1df82:	18eb      	adds	r3, r5, r3
   1df84:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
   1df88:	d204      	bcs.n	1df94 <__udivmoddi4+0x184>
   1df8a:	429f      	cmp	r7, r3
   1df8c:	d902      	bls.n	1df94 <__udivmoddi4+0x184>
   1df8e:	f1ac 0102 	sub.w	r1, ip, #2
   1df92:	442b      	add	r3, r5
   1df94:	1bdb      	subs	r3, r3, r7
   1df96:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
   1df9a:	e792      	b.n	1dec2 <__udivmoddi4+0xb2>
   1df9c:	4660      	mov	r0, ip
   1df9e:	e7e3      	b.n	1df68 <__udivmoddi4+0x158>
   1dfa0:	4661      	mov	r1, ip
   1dfa2:	e7f7      	b.n	1df94 <__udivmoddi4+0x184>
   1dfa4:	4660      	mov	r0, ip
   1dfa6:	e7a3      	b.n	1def0 <__udivmoddi4+0xe0>
   1dfa8:	4663      	mov	r3, ip
   1dfaa:	e7b7      	b.n	1df1c <__udivmoddi4+0x10c>
   1dfac:	4283      	cmp	r3, r0
   1dfae:	d906      	bls.n	1dfbe <__udivmoddi4+0x1ae>
   1dfb0:	b916      	cbnz	r6, 1dfb8 <__udivmoddi4+0x1a8>
   1dfb2:	2100      	movs	r1, #0
   1dfb4:	4608      	mov	r0, r1
   1dfb6:	e77b      	b.n	1deb0 <__udivmoddi4+0xa0>
   1dfb8:	e9c6 e000 	strd	lr, r0, [r6]
   1dfbc:	e7f9      	b.n	1dfb2 <__udivmoddi4+0x1a2>
   1dfbe:	fab3 f783 	clz	r7, r3
   1dfc2:	b98f      	cbnz	r7, 1dfe8 <__udivmoddi4+0x1d8>
   1dfc4:	4283      	cmp	r3, r0
   1dfc6:	d301      	bcc.n	1dfcc <__udivmoddi4+0x1bc>
   1dfc8:	4572      	cmp	r2, lr
   1dfca:	d808      	bhi.n	1dfde <__udivmoddi4+0x1ce>
   1dfcc:	ebbe 0402 	subs.w	r4, lr, r2
   1dfd0:	eb60 0303 	sbc.w	r3, r0, r3
   1dfd4:	2001      	movs	r0, #1
   1dfd6:	469c      	mov	ip, r3
   1dfd8:	b91e      	cbnz	r6, 1dfe2 <__udivmoddi4+0x1d2>
   1dfda:	2100      	movs	r1, #0
   1dfdc:	e768      	b.n	1deb0 <__udivmoddi4+0xa0>
   1dfde:	4638      	mov	r0, r7
   1dfe0:	e7fa      	b.n	1dfd8 <__udivmoddi4+0x1c8>
   1dfe2:	e9c6 4c00 	strd	r4, ip, [r6]
   1dfe6:	e7f8      	b.n	1dfda <__udivmoddi4+0x1ca>
   1dfe8:	f1c7 0c20 	rsb	ip, r7, #32
   1dfec:	40bb      	lsls	r3, r7
   1dfee:	fa22 f40c 	lsr.w	r4, r2, ip
   1dff2:	431c      	orrs	r4, r3
   1dff4:	fa2e f10c 	lsr.w	r1, lr, ip
   1dff8:	fa20 f30c 	lsr.w	r3, r0, ip
   1dffc:	40b8      	lsls	r0, r7
   1dffe:	4301      	orrs	r1, r0
   1e000:	ea4f 4914 	mov.w	r9, r4, lsr #16
   1e004:	fa0e f507 	lsl.w	r5, lr, r7
   1e008:	fbb3 f8f9 	udiv	r8, r3, r9
   1e00c:	fa1f fe84 	uxth.w	lr, r4
   1e010:	fb09 3018 	mls	r0, r9, r8, r3
   1e014:	0c0b      	lsrs	r3, r1, #16
   1e016:	fb08 fa0e 	mul.w	sl, r8, lr
   1e01a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
   1e01e:	459a      	cmp	sl, r3
   1e020:	fa02 f207 	lsl.w	r2, r2, r7
   1e024:	d940      	bls.n	1e0a8 <__udivmoddi4+0x298>
   1e026:	18e3      	adds	r3, r4, r3
   1e028:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
   1e02c:	d204      	bcs.n	1e038 <__udivmoddi4+0x228>
   1e02e:	459a      	cmp	sl, r3
   1e030:	d902      	bls.n	1e038 <__udivmoddi4+0x228>
   1e032:	f1a8 0002 	sub.w	r0, r8, #2
   1e036:	4423      	add	r3, r4
   1e038:	eba3 030a 	sub.w	r3, r3, sl
   1e03c:	b289      	uxth	r1, r1
   1e03e:	fbb3 f8f9 	udiv	r8, r3, r9
   1e042:	fb09 3318 	mls	r3, r9, r8, r3
   1e046:	fb08 fe0e 	mul.w	lr, r8, lr
   1e04a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   1e04e:	458e      	cmp	lr, r1
   1e050:	d92c      	bls.n	1e0ac <__udivmoddi4+0x29c>
   1e052:	1861      	adds	r1, r4, r1
   1e054:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
   1e058:	d204      	bcs.n	1e064 <__udivmoddi4+0x254>
   1e05a:	458e      	cmp	lr, r1
   1e05c:	d902      	bls.n	1e064 <__udivmoddi4+0x254>
   1e05e:	f1a8 0302 	sub.w	r3, r8, #2
   1e062:	4421      	add	r1, r4
   1e064:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   1e068:	fba0 9802 	umull	r9, r8, r0, r2
   1e06c:	eba1 010e 	sub.w	r1, r1, lr
   1e070:	4541      	cmp	r1, r8
   1e072:	46ce      	mov	lr, r9
   1e074:	4643      	mov	r3, r8
   1e076:	d302      	bcc.n	1e07e <__udivmoddi4+0x26e>
   1e078:	d106      	bne.n	1e088 <__udivmoddi4+0x278>
   1e07a:	454d      	cmp	r5, r9
   1e07c:	d204      	bcs.n	1e088 <__udivmoddi4+0x278>
   1e07e:	ebb9 0e02 	subs.w	lr, r9, r2
   1e082:	eb68 0304 	sbc.w	r3, r8, r4
   1e086:	3801      	subs	r0, #1
   1e088:	2e00      	cmp	r6, #0
   1e08a:	d0a6      	beq.n	1dfda <__udivmoddi4+0x1ca>
   1e08c:	ebb5 020e 	subs.w	r2, r5, lr
   1e090:	eb61 0103 	sbc.w	r1, r1, r3
   1e094:	fa01 fc0c 	lsl.w	ip, r1, ip
   1e098:	fa22 f307 	lsr.w	r3, r2, r7
   1e09c:	ea4c 0303 	orr.w	r3, ip, r3
   1e0a0:	40f9      	lsrs	r1, r7
   1e0a2:	e9c6 3100 	strd	r3, r1, [r6]
   1e0a6:	e798      	b.n	1dfda <__udivmoddi4+0x1ca>
   1e0a8:	4640      	mov	r0, r8
   1e0aa:	e7c5      	b.n	1e038 <__udivmoddi4+0x228>
   1e0ac:	4643      	mov	r3, r8
   1e0ae:	e7d9      	b.n	1e064 <__udivmoddi4+0x254>
   1e0b0:	2804      	cmp	r0, #4
   1e0b2:	d202      	bcs.n	1e0ba <__udivmoddi4+0x2aa>
   1e0b4:	f04f 0028 	mov.w	r0, #40	; 0x28
   1e0b8:	4770      	bx	lr
   1e0ba:	d102      	bne.n	1e0c2 <__udivmoddi4+0x2b2>
   1e0bc:	f04f 0010 	mov.w	r0, #16
   1e0c0:	4770      	bx	lr
   1e0c2:	f04f 0000 	mov.w	r0, #0
   1e0c6:	4770      	bx	lr
   1e0c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e0cc:	000d      	movs	r5, r1
   1e0ce:	4604      	mov	r4, r0
   1e0d0:	f04f 0602 	mov.w	r6, #2
   1e0d4:	f04f 0701 	mov.w	r7, #1
   1e0d8:	d008      	beq.n	1e0ec <__udivmoddi4+0x2dc>
   1e0da:	7828      	ldrb	r0, [r5, #0]
   1e0dc:	b1d0      	cbz	r0, 1e114 <__udivmoddi4+0x304>
   1e0de:	2801      	cmp	r0, #1
   1e0e0:	d007      	beq.n	1e0f2 <__udivmoddi4+0x2e2>
   1e0e2:	2802      	cmp	r0, #2
   1e0e4:	d014      	beq.n	1e110 <__udivmoddi4+0x300>
   1e0e6:	2803      	cmp	r0, #3
   1e0e8:	d13e      	bne.n	1e168 <__udivmoddi4+0x358>
   1e0ea:	e016      	b.n	1e11a <__udivmoddi4+0x30a>
   1e0ec:	f880 7029 	strb.w	r7, [r0, #41]	; 0x29
   1e0f0:	e00e      	b.n	1e110 <__udivmoddi4+0x300>
   1e0f2:	6868      	ldr	r0, [r5, #4]
   1e0f4:	28c8      	cmp	r0, #200	; 0xc8
   1e0f6:	d303      	bcc.n	1e100 <__udivmoddi4+0x2f0>
   1e0f8:	2103      	movs	r1, #3
   1e0fa:	f7f0 fd35 	bl	eb68 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
   1e0fe:	b108      	cbz	r0, 1e104 <__udivmoddi4+0x2f4>
   1e100:	2600      	movs	r6, #0
   1e102:	e007      	b.n	1e114 <__udivmoddi4+0x304>
   1e104:	4620      	mov	r0, r4
   1e106:	6869      	ldr	r1, [r5, #4]
   1e108:	f000 f943 	bl	1e392 <__udivmoddi4+0x582>
   1e10c:	2601      	movs	r6, #1
   1e10e:	e001      	b.n	1e114 <__udivmoddi4+0x304>
   1e110:	f7ef fc68 	bl	d9e4 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x9c>
   1e114:	4630      	mov	r0, r6
   1e116:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1e11a:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
   1e11e:	2800      	cmp	r0, #0
   1e120:	d1f6      	bne.n	1e110 <__udivmoddi4+0x300>
   1e122:	6868      	ldr	r0, [r5, #4]
   1e124:	f7ef fc30 	bl	d988 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x40>
   1e128:	b1f0      	cbz	r0, 1e168 <__udivmoddi4+0x358>
   1e12a:	6869      	ldr	r1, [r5, #4]
   1e12c:	7808      	ldrb	r0, [r1, #0]
   1e12e:	b130      	cbz	r0, 1e13e <__udivmoddi4+0x32e>
   1e130:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
   1e134:	2805      	cmp	r0, #5
   1e136:	d008      	beq.n	1e14a <__udivmoddi4+0x33a>
   1e138:	f44f 71be 	mov.w	r1, #380	; 0x17c
   1e13c:	e011      	b.n	1e162 <__udivmoddi4+0x352>
   1e13e:	4620      	mov	r0, r4
   1e140:	f000 f92f 	bl	1e3a2 <__udivmoddi4+0x592>
   1e144:	f884 7025 	strb.w	r7, [r4, #37]	; 0x25
   1e148:	e7e2      	b.n	1e110 <__udivmoddi4+0x300>
   1e14a:	4620      	mov	r0, r4
   1e14c:	f000 f942 	bl	1e3d4 <__udivmoddi4+0x5c4>
   1e150:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
   1e154:	4621      	mov	r1, r4
   1e156:	f000 f80a 	bl	1e16e <__udivmoddi4+0x35e>
   1e15a:	2800      	cmp	r0, #0
   1e15c:	d1d8      	bne.n	1e110 <__udivmoddi4+0x300>
   1e15e:	f44f 71bf 	mov.w	r1, #382	; 0x17e
   1e162:	206a      	movs	r0, #106	; 0x6a
   1e164:	f7f2 ffd4 	bl	11110 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   1e168:	f884 7029 	strb.w	r7, [r4, #41]	; 0x29
   1e16c:	e7d0      	b.n	1e110 <__udivmoddi4+0x300>
   1e16e:	f7f0 bee1 	b.w	ef34 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
   1e172:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e176:	460d      	mov	r5, r1
   1e178:	0004      	movs	r4, r0
   1e17a:	d00c      	beq.n	1e196 <__udivmoddi4+0x386>
   1e17c:	f894 6028 	ldrb.w	r6, [r4, #40]	; 0x28
   1e180:	2700      	movs	r7, #0
   1e182:	2002      	movs	r0, #2
   1e184:	2d09      	cmp	r5, #9
   1e186:	d270      	bcs.n	1e26a <__udivmoddi4+0x45a>
   1e188:	e8df f005 	tbb	[pc, r5]
   1e18c:	35351108 	.word	0x35351108
   1e190:	a5887065 	.word	0xa5887065
   1e194:	0093      	.short	0x0093
   1e196:	f44f 71cb 	mov.w	r1, #406	; 0x196
   1e19a:	e0f7      	b.n	1e38c <__udivmoddi4+0x57c>
   1e19c:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
   1e1a0:	2804      	cmp	r0, #4
   1e1a2:	d07a      	beq.n	1e29a <__udivmoddi4+0x48a>
   1e1a4:	2803      	cmp	r0, #3
   1e1a6:	d0fc      	beq.n	1e1a2 <__udivmoddi4+0x392>
   1e1a8:	f240 11a1 	movw	r1, #417	; 0x1a1
   1e1ac:	e0ee      	b.n	1e38c <__udivmoddi4+0x57c>
   1e1ae:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
   1e1b2:	2804      	cmp	r0, #4
   1e1b4:	d004      	beq.n	1e1c0 <__udivmoddi4+0x3b0>
   1e1b6:	2803      	cmp	r0, #3
   1e1b8:	d002      	beq.n	1e1c0 <__udivmoddi4+0x3b0>
   1e1ba:	f240 11a5 	movw	r1, #421	; 0x1a5
   1e1be:	e0e5      	b.n	1e38c <__udivmoddi4+0x57c>
   1e1c0:	2005      	movs	r0, #5
   1e1c2:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
   1e1c6:	f884 7029 	strb.w	r7, [r4, #41]	; 0x29
   1e1ca:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
   1e1ce:	bbb0      	cbnz	r0, 1e23e <__udivmoddi4+0x42e>
   1e1d0:	2100      	movs	r1, #0
   1e1d2:	4620      	mov	r0, r4
   1e1d4:	f000 f8dd 	bl	1e392 <__udivmoddi4+0x582>
   1e1d8:	7820      	ldrb	r0, [r4, #0]
   1e1da:	2801      	cmp	r0, #1
   1e1dc:	d006      	beq.n	1e1ec <__udivmoddi4+0x3dc>
   1e1de:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
   1e1e2:	e9c4 0106 	strd	r0, r1, [r4, #24]
   1e1e6:	2100      	movs	r1, #0
   1e1e8:	6a22      	ldr	r2, [r4, #32]
   1e1ea:	e048      	b.n	1e27e <__udivmoddi4+0x46e>
   1e1ec:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
   1e1f0:	f7f0 fda8 	bl	ed44 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ>
   1e1f4:	e7f5      	b.n	1e1e2 <__udivmoddi4+0x3d2>
   1e1f6:	f894 1026 	ldrb.w	r1, [r4, #38]	; 0x26
   1e1fa:	2904      	cmp	r1, #4
   1e1fc:	d004      	beq.n	1e208 <__udivmoddi4+0x3f8>
   1e1fe:	2903      	cmp	r1, #3
   1e200:	d002      	beq.n	1e208 <__udivmoddi4+0x3f8>
   1e202:	f240 11c3 	movw	r1, #451	; 0x1c3
   1e206:	e0c1      	b.n	1e38c <__udivmoddi4+0x57c>
   1e208:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
   1e20c:	b122      	cbz	r2, 1e218 <__udivmoddi4+0x408>
   1e20e:	4621      	mov	r1, r4
   1e210:	4630      	mov	r0, r6
   1e212:	f000 f8fe 	bl	1e412 <__udivmoddi4+0x602>
   1e216:	e0b1      	b.n	1e37c <__udivmoddi4+0x56c>
   1e218:	2904      	cmp	r1, #4
   1e21a:	d000      	beq.n	1e21e <__udivmoddi4+0x40e>
   1e21c:	2001      	movs	r0, #1
   1e21e:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
   1e222:	6a22      	ldr	r2, [r4, #32]
   1e224:	2d02      	cmp	r5, #2
   1e226:	d00b      	beq.n	1e240 <__udivmoddi4+0x430>
   1e228:	2106      	movs	r1, #6
   1e22a:	4630      	mov	r0, r6
   1e22c:	4790      	blx	r2
   1e22e:	2800      	cmp	r0, #0
   1e230:	d06d      	beq.n	1e30e <__udivmoddi4+0x4fe>
   1e232:	7800      	ldrb	r0, [r0, #0]
   1e234:	2800      	cmp	r0, #0
   1e236:	d06a      	beq.n	1e30e <__udivmoddi4+0x4fe>
   1e238:	f240 11dd 	movw	r1, #477	; 0x1dd
   1e23c:	e0a6      	b.n	1e38c <__udivmoddi4+0x57c>
   1e23e:	e034      	b.n	1e2aa <__udivmoddi4+0x49a>
   1e240:	2105      	movs	r1, #5
   1e242:	4630      	mov	r0, r6
   1e244:	4790      	blx	r2
   1e246:	2800      	cmp	r0, #0
   1e248:	d07c      	beq.n	1e344 <__udivmoddi4+0x534>
   1e24a:	7800      	ldrb	r0, [r0, #0]
   1e24c:	2800      	cmp	r0, #0
   1e24e:	d079      	beq.n	1e344 <__udivmoddi4+0x534>
   1e250:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
   1e254:	e09a      	b.n	1e38c <__udivmoddi4+0x57c>
   1e256:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
   1e25a:	2805      	cmp	r0, #5
   1e25c:	d002      	beq.n	1e264 <__udivmoddi4+0x454>
   1e25e:	f44f 71f2 	mov.w	r1, #484	; 0x1e4
   1e262:	e093      	b.n	1e38c <__udivmoddi4+0x57c>
   1e264:	2102      	movs	r1, #2
   1e266:	6a22      	ldr	r2, [r4, #32]
   1e268:	e009      	b.n	1e27e <__udivmoddi4+0x46e>
   1e26a:	e07e      	b.n	1e36a <__udivmoddi4+0x55a>
   1e26c:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
   1e270:	2805      	cmp	r0, #5
   1e272:	d002      	beq.n	1e27a <__udivmoddi4+0x46a>
   1e274:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
   1e278:	e088      	b.n	1e38c <__udivmoddi4+0x57c>
   1e27a:	6a22      	ldr	r2, [r4, #32]
   1e27c:	2101      	movs	r1, #1
   1e27e:	4630      	mov	r0, r6
   1e280:	4790      	blx	r2
   1e282:	4601      	mov	r1, r0
   1e284:	4620      	mov	r0, r4
   1e286:	f7ff ff1f 	bl	1e0c8 <__udivmoddi4+0x2b8>
   1e28a:	2802      	cmp	r0, #2
   1e28c:	d076      	beq.n	1e37c <__udivmoddi4+0x56c>
   1e28e:	b3e8      	cbz	r0, 1e30c <__udivmoddi4+0x4fc>
   1e290:	2801      	cmp	r0, #1
   1e292:	d06d      	beq.n	1e370 <__udivmoddi4+0x560>
   1e294:	f240 212a 	movw	r1, #554	; 0x22a
   1e298:	e078      	b.n	1e38c <__udivmoddi4+0x57c>
   1e29a:	e071      	b.n	1e380 <__udivmoddi4+0x570>
   1e29c:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
   1e2a0:	2805      	cmp	r0, #5
   1e2a2:	d002      	beq.n	1e2aa <__udivmoddi4+0x49a>
   1e2a4:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
   1e2a8:	e070      	b.n	1e38c <__udivmoddi4+0x57c>
   1e2aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1e2ae:	f7ef bb99 	b.w	d9e4 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x9c>
   1e2b2:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
   1e2b6:	2805      	cmp	r0, #5
   1e2b8:	d002      	beq.n	1e2c0 <__udivmoddi4+0x4b0>
   1e2ba:	f240 11f5 	movw	r1, #501	; 0x1f5
   1e2be:	e065      	b.n	1e38c <__udivmoddi4+0x57c>
   1e2c0:	6a22      	ldr	r2, [r4, #32]
   1e2c2:	210a      	movs	r1, #10
   1e2c4:	4630      	mov	r0, r6
   1e2c6:	4790      	blx	r2
   1e2c8:	4601      	mov	r1, r0
   1e2ca:	4620      	mov	r0, r4
   1e2cc:	f7ff fefc 	bl	1e0c8 <__udivmoddi4+0x2b8>
   1e2d0:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
   1e2d4:	e05a      	b.n	1e38c <__udivmoddi4+0x57c>
   1e2d6:	f894 1026 	ldrb.w	r1, [r4, #38]	; 0x26
   1e2da:	2905      	cmp	r1, #5
   1e2dc:	d007      	beq.n	1e2ee <__udivmoddi4+0x4de>
   1e2de:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
   1e2e2:	b10a      	cbz	r2, 1e2e8 <__udivmoddi4+0x4d8>
   1e2e4:	2903      	cmp	r1, #3
   1e2e6:	d002      	beq.n	1e2ee <__udivmoddi4+0x4de>
   1e2e8:	f44f 71fe 	mov.w	r1, #508	; 0x1fc
   1e2ec:	e04e      	b.n	1e38c <__udivmoddi4+0x57c>
   1e2ee:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
   1e2f2:	b129      	cbz	r1, 1e300 <__udivmoddi4+0x4f0>
   1e2f4:	4621      	mov	r1, r4
   1e2f6:	4630      	mov	r0, r6
   1e2f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1e2fc:	f000 b889 	b.w	1e412 <__udivmoddi4+0x602>
   1e300:	f894 1029 	ldrb.w	r1, [r4, #41]	; 0x29
   1e304:	b199      	cbz	r1, 1e32e <__udivmoddi4+0x51e>
   1e306:	f884 7029 	strb.w	r7, [r4, #41]	; 0x29
   1e30a:	e001      	b.n	1e310 <__udivmoddi4+0x500>
   1e30c:	e033      	b.n	1e376 <__udivmoddi4+0x566>
   1e30e:	e035      	b.n	1e37c <__udivmoddi4+0x56c>
   1e310:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
   1e314:	6a22      	ldr	r2, [r4, #32]
   1e316:	2108      	movs	r1, #8
   1e318:	4630      	mov	r0, r6
   1e31a:	4790      	blx	r2
   1e31c:	2800      	cmp	r0, #0
   1e31e:	d011      	beq.n	1e344 <__udivmoddi4+0x534>
   1e320:	7800      	ldrb	r0, [r0, #0]
   1e322:	2800      	cmp	r0, #0
   1e324:	d00e      	beq.n	1e344 <__udivmoddi4+0x534>
   1e326:	f44f 7102 	mov.w	r1, #520	; 0x208
   1e32a:	e02f      	b.n	1e38c <__udivmoddi4+0x57c>
   1e32c:	e00a      	b.n	1e344 <__udivmoddi4+0x534>
   1e32e:	f894 1025 	ldrb.w	r1, [r4, #37]	; 0x25
   1e332:	b161      	cbz	r1, 1e34e <__udivmoddi4+0x53e>
   1e334:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
   1e338:	4621      	mov	r1, r4
   1e33a:	f7ff ff18 	bl	1e16e <__udivmoddi4+0x35e>
   1e33e:	b118      	cbz	r0, 1e348 <__udivmoddi4+0x538>
   1e340:	f884 7025 	strb.w	r7, [r4, #37]	; 0x25
   1e344:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1e348:	f44f 7103 	mov.w	r1, #524	; 0x20c
   1e34c:	e01e      	b.n	1e38c <__udivmoddi4+0x57c>
   1e34e:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
   1e352:	6a22      	ldr	r2, [r4, #32]
   1e354:	2107      	movs	r1, #7
   1e356:	4630      	mov	r0, r6
   1e358:	4790      	blx	r2
   1e35a:	2800      	cmp	r0, #0
   1e35c:	d0f2      	beq.n	1e344 <__udivmoddi4+0x534>
   1e35e:	7800      	ldrb	r0, [r0, #0]
   1e360:	2800      	cmp	r0, #0
   1e362:	d0ef      	beq.n	1e344 <__udivmoddi4+0x534>
   1e364:	f44f 7105 	mov.w	r1, #532	; 0x214
   1e368:	e010      	b.n	1e38c <__udivmoddi4+0x57c>
   1e36a:	f240 2119 	movw	r1, #537	; 0x219
   1e36e:	e00d      	b.n	1e38c <__udivmoddi4+0x57c>
   1e370:	2104      	movs	r1, #4
   1e372:	6a22      	ldr	r2, [r4, #32]
   1e374:	e783      	b.n	1e27e <__udivmoddi4+0x46e>
   1e376:	2103      	movs	r1, #3
   1e378:	6a22      	ldr	r2, [r4, #32]
   1e37a:	e780      	b.n	1e27e <__udivmoddi4+0x46e>
   1e37c:	2d00      	cmp	r5, #0
   1e37e:	d1e1      	bne.n	1e344 <__udivmoddi4+0x534>
   1e380:	f000 f8fd 	bl	1e57e <sym_F77FUTRRLLWPYDS7BBANG2WE3C4EDMYMAPNI54A>
   1e384:	2800      	cmp	r0, #0
   1e386:	d0dd      	beq.n	1e344 <__udivmoddi4+0x534>
   1e388:	f240 2133 	movw	r1, #563	; 0x233
   1e38c:	206a      	movs	r0, #106	; 0x6a
   1e38e:	f7f2 febf 	bl	11110 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   1e392:	4602      	mov	r2, r0
   1e394:	7803      	ldrb	r3, [r0, #0]
   1e396:	6840      	ldr	r0, [r0, #4]
   1e398:	4408      	add	r0, r1
   1e39a:	6050      	str	r0, [r2, #4]
   1e39c:	3859      	subs	r0, #89	; 0x59
   1e39e:	f7f1 bca9 	b.w	fcf4 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
   1e3a2:	2201      	movs	r2, #1
   1e3a4:	7002      	strb	r2, [r0, #0]
   1e3a6:	2200      	movs	r2, #0
   1e3a8:	72c2      	strb	r2, [r0, #11]
   1e3aa:	790a      	ldrb	r2, [r1, #4]
   1e3ac:	b172      	cbz	r2, 1e3cc <__udivmoddi4+0x5bc>
   1e3ae:	2200      	movs	r2, #0
   1e3b0:	8102      	strh	r2, [r0, #8]
   1e3b2:	794a      	ldrb	r2, [r1, #5]
   1e3b4:	b162      	cbz	r2, 1e3d0 <__udivmoddi4+0x5c0>
   1e3b6:	2203      	movs	r2, #3
   1e3b8:	7282      	strb	r2, [r0, #10]
   1e3ba:	688a      	ldr	r2, [r1, #8]
   1e3bc:	326a      	adds	r2, #106	; 0x6a
   1e3be:	6042      	str	r2, [r0, #4]
   1e3c0:	68c9      	ldr	r1, [r1, #12]
   1e3c2:	6101      	str	r1, [r0, #16]
   1e3c4:	2103      	movs	r1, #3
   1e3c6:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
   1e3ca:	4770      	bx	lr
   1e3cc:	222b      	movs	r2, #43	; 0x2b
   1e3ce:	e7ef      	b.n	1e3b0 <__udivmoddi4+0x5a0>
   1e3d0:	2202      	movs	r2, #2
   1e3d2:	e7f1      	b.n	1e3b8 <__udivmoddi4+0x5a8>
   1e3d4:	b510      	push	{r4, lr}
   1e3d6:	2200      	movs	r2, #0
   1e3d8:	7002      	strb	r2, [r0, #0]
   1e3da:	72c2      	strb	r2, [r0, #11]
   1e3dc:	790a      	ldrb	r2, [r1, #4]
   1e3de:	b1a2      	cbz	r2, 1e40a <__udivmoddi4+0x5fa>
   1e3e0:	2200      	movs	r2, #0
   1e3e2:	8102      	strh	r2, [r0, #8]
   1e3e4:	794a      	ldrb	r2, [r1, #5]
   1e3e6:	b192      	cbz	r2, 1e40e <__udivmoddi4+0x5fe>
   1e3e8:	2203      	movs	r2, #3
   1e3ea:	7282      	strb	r2, [r0, #10]
   1e3ec:	68ca      	ldr	r2, [r1, #12]
   1e3ee:	326a      	adds	r2, #106	; 0x6a
   1e3f0:	6042      	str	r2, [r0, #4]
   1e3f2:	e9d0 4206 	ldrd	r4, r2, [r0, #24]
   1e3f6:	6889      	ldr	r1, [r1, #8]
   1e3f8:	17cb      	asrs	r3, r1, #31
   1e3fa:	1861      	adds	r1, r4, r1
   1e3fc:	415a      	adcs	r2, r3
   1e3fe:	e9c0 1204 	strd	r1, r2, [r0, #16]
   1e402:	2104      	movs	r1, #4
   1e404:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
   1e408:	bd10      	pop	{r4, pc}
   1e40a:	222b      	movs	r2, #43	; 0x2b
   1e40c:	e7e9      	b.n	1e3e2 <__udivmoddi4+0x5d2>
   1e40e:	2202      	movs	r2, #2
   1e410:	e7eb      	b.n	1e3ea <__udivmoddi4+0x5da>
   1e412:	b570      	push	{r4, r5, r6, lr}
   1e414:	4605      	mov	r5, r0
   1e416:	460c      	mov	r4, r1
   1e418:	f891 0027 	ldrb.w	r0, [r1, #39]	; 0x27
   1e41c:	f7f1 f9ee 	bl	f7fc <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
   1e420:	b178      	cbz	r0, 1e442 <__udivmoddi4+0x632>
   1e422:	4620      	mov	r0, r4
   1e424:	f000 f810 	bl	1e448 <__udivmoddi4+0x638>
   1e428:	6a22      	ldr	r2, [r4, #32]
   1e42a:	2109      	movs	r1, #9
   1e42c:	4628      	mov	r0, r5
   1e42e:	4790      	blx	r2
   1e430:	2800      	cmp	r0, #0
   1e432:	d008      	beq.n	1e446 <__udivmoddi4+0x636>
   1e434:	7800      	ldrb	r0, [r0, #0]
   1e436:	2800      	cmp	r0, #0
   1e438:	d005      	beq.n	1e446 <__udivmoddi4+0x636>
   1e43a:	21dc      	movs	r1, #220	; 0xdc
   1e43c:	206a      	movs	r0, #106	; 0x6a
   1e43e:	f7f2 fe67 	bl	11110 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   1e442:	21d8      	movs	r1, #216	; 0xd8
   1e444:	e7fa      	b.n	1e43c <__udivmoddi4+0x62c>
   1e446:	bd70      	pop	{r4, r5, r6, pc}
   1e448:	2100      	movs	r1, #0
   1e44a:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
   1e44e:	f800 1f24 	strb.w	r1, [r0, #36]!
   1e452:	7041      	strb	r1, [r0, #1]
   1e454:	4770      	bx	lr

0001e456 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>:
   1e456:	b570      	push	{r4, r5, r6, lr}
   1e458:	f7ef fb20 	bl	da9c <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>
   1e45c:	4605      	mov	r5, r0
   1e45e:	2400      	movs	r4, #0
   1e460:	e006      	b.n	1e470 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0x1a>
   1e462:	4620      	mov	r0, r4
   1e464:	f7ef fb20 	bl	daa8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
   1e468:	f7ff ffee 	bl	1e448 <__udivmoddi4+0x638>
   1e46c:	1c64      	adds	r4, r4, #1
   1e46e:	b2e4      	uxtb	r4, r4
   1e470:	42ac      	cmp	r4, r5
   1e472:	d3f6      	bcc.n	1e462 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0xc>
   1e474:	bd70      	pop	{r4, r5, r6, pc}

0001e476 <mpsl_timeslot_request>:
   1e476:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e47a:	460d      	mov	r5, r1
   1e47c:	f7ef fb14 	bl	daa8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
   1e480:	0004      	movs	r4, r0
   1e482:	d008      	beq.n	1e496 <mpsl_timeslot_request+0x20>
   1e484:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
   1e488:	f06f 0622 	mvn.w	r6, #34	; 0x22
   1e48c:	2801      	cmp	r0, #1
   1e48e:	d006      	beq.n	1e49e <mpsl_timeslot_request+0x28>
   1e490:	2802      	cmp	r0, #2
   1e492:	d111      	bne.n	1e4b8 <mpsl_timeslot_request+0x42>
   1e494:	e003      	b.n	1e49e <mpsl_timeslot_request+0x28>
   1e496:	f06f 0001 	mvn.w	r0, #1
   1e49a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1e49e:	f06f 0715 	mvn.w	r7, #21
   1e4a2:	b15d      	cbz	r5, 1e4bc <mpsl_timeslot_request+0x46>
   1e4a4:	4628      	mov	r0, r5
   1e4a6:	f7ef fa6f 	bl	d988 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x40>
   1e4aa:	b138      	cbz	r0, 1e4bc <mpsl_timeslot_request+0x46>
   1e4ac:	7828      	ldrb	r0, [r5, #0]
   1e4ae:	b138      	cbz	r0, 1e4c0 <mpsl_timeslot_request+0x4a>
   1e4b0:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
   1e4b4:	2802      	cmp	r0, #2
   1e4b6:	d008      	beq.n	1e4ca <mpsl_timeslot_request+0x54>
   1e4b8:	4630      	mov	r0, r6
   1e4ba:	e7ee      	b.n	1e49a <mpsl_timeslot_request+0x24>
   1e4bc:	4638      	mov	r0, r7
   1e4be:	e7ec      	b.n	1e49a <mpsl_timeslot_request+0x24>
   1e4c0:	4629      	mov	r1, r5
   1e4c2:	4620      	mov	r0, r4
   1e4c4:	f7ff ff6d 	bl	1e3a2 <__udivmoddi4+0x592>
   1e4c8:	e003      	b.n	1e4d2 <mpsl_timeslot_request+0x5c>
   1e4ca:	4629      	mov	r1, r5
   1e4cc:	4620      	mov	r0, r4
   1e4ce:	f7ff ff81 	bl	1e3d4 <__udivmoddi4+0x5c4>
   1e4d2:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
   1e4d6:	4621      	mov	r1, r4
   1e4d8:	f7ff fe49 	bl	1e16e <__udivmoddi4+0x35e>
   1e4dc:	b108      	cbz	r0, 1e4e2 <mpsl_timeslot_request+0x6c>
   1e4de:	2000      	movs	r0, #0
   1e4e0:	e7db      	b.n	1e49a <mpsl_timeslot_request+0x24>
   1e4e2:	f240 21b1 	movw	r1, #689	; 0x2b1
   1e4e6:	206a      	movs	r0, #106	; 0x6a
   1e4e8:	f7f2 fe12 	bl	11110 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>

0001e4ec <mpsl_timeslot_session_close>:
   1e4ec:	b510      	push	{r4, lr}
   1e4ee:	4604      	mov	r4, r0
   1e4f0:	f7ef fada 	bl	daa8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
   1e4f4:	0001      	movs	r1, r0
   1e4f6:	d005      	beq.n	1e504 <mpsl_timeslot_session_close+0x18>
   1e4f8:	f891 0024 	ldrb.w	r0, [r1, #36]	; 0x24
   1e4fc:	f06f 0222 	mvn.w	r2, #34	; 0x22
   1e500:	b978      	cbnz	r0, 1e522 <mpsl_timeslot_session_close+0x36>
   1e502:	e002      	b.n	1e50a <mpsl_timeslot_session_close+0x1e>
   1e504:	f06f 0001 	mvn.w	r0, #1
   1e508:	bd10      	pop	{r4, pc}
   1e50a:	f891 0026 	ldrb.w	r0, [r1, #38]	; 0x26
   1e50e:	b140      	cbz	r0, 1e522 <mpsl_timeslot_session_close+0x36>
   1e510:	2802      	cmp	r0, #2
   1e512:	d008      	beq.n	1e526 <mpsl_timeslot_session_close+0x3a>
   1e514:	2801      	cmp	r0, #1
   1e516:	d006      	beq.n	1e526 <mpsl_timeslot_session_close+0x3a>
   1e518:	2001      	movs	r0, #1
   1e51a:	f881 0024 	strb.w	r0, [r1, #36]	; 0x24
   1e51e:	2000      	movs	r0, #0
   1e520:	bd10      	pop	{r4, pc}
   1e522:	4610      	mov	r0, r2
   1e524:	bd10      	pop	{r4, pc}
   1e526:	4620      	mov	r0, r4
   1e528:	f7ff ff73 	bl	1e412 <__udivmoddi4+0x602>
   1e52c:	e7f7      	b.n	1e51e <mpsl_timeslot_session_close+0x32>

0001e52e <mpsl_timeslot_session_count_set>:
   1e52e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e532:	460e      	mov	r6, r1
   1e534:	4607      	mov	r7, r0
   1e536:	f7ef fab1 	bl	da9c <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>
   1e53a:	4605      	mov	r5, r0
   1e53c:	2400      	movs	r4, #0
   1e53e:	e00b      	b.n	1e558 <mpsl_timeslot_session_count_set+0x2a>
   1e540:	4620      	mov	r0, r4
   1e542:	f7ef fab1 	bl	daa8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
   1e546:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
   1e54a:	b118      	cbz	r0, 1e554 <mpsl_timeslot_session_count_set+0x26>
   1e54c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e550:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1e554:	1c64      	adds	r4, r4, #1
   1e556:	b2e4      	uxtb	r4, r4
   1e558:	42ac      	cmp	r4, r5
   1e55a:	d3f1      	bcc.n	1e540 <mpsl_timeslot_session_count_set+0x12>
   1e55c:	2e08      	cmp	r6, #8
   1e55e:	d902      	bls.n	1e566 <mpsl_timeslot_session_count_set+0x38>
   1e560:	f06f 0015 	mvn.w	r0, #21
   1e564:	e7f4      	b.n	1e550 <mpsl_timeslot_session_count_set+0x22>
   1e566:	b117      	cbz	r7, 1e56e <mpsl_timeslot_session_count_set+0x40>
   1e568:	4631      	mov	r1, r6
   1e56a:	4638      	mov	r0, r7
   1e56c:	e001      	b.n	1e572 <mpsl_timeslot_session_count_set+0x44>
   1e56e:	2100      	movs	r1, #0
   1e570:	4608      	mov	r0, r1
   1e572:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1e576:	f7ef ba7d 	b.w	da74 <sym_WTOZYVN52TSAPXLTHQQLG45KSAFDDSBJMHMFM6Q>

0001e57a <sym_6TZLBWMEWRMPI4KKAUVLC2XHUBDGXEA4B4JJJYQ>:
   1e57a:	f7f1 be91 	b.w	102a0 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>

0001e57e <sym_F77FUTRRLLWPYDS7BBANG2WE3C4EDMYMAPNI54A>:
   1e57e:	b510      	push	{r4, lr}
   1e580:	2000      	movs	r0, #0
   1e582:	f7f2 f9b3 	bl	108ec <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA>
   1e586:	6800      	ldr	r0, [r0, #0]
   1e588:	2800      	cmp	r0, #0
   1e58a:	bf18      	it	ne
   1e58c:	2001      	movne	r0, #1
   1e58e:	bd10      	pop	{r4, pc}

0001e590 <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>:
   1e590:	b510      	push	{r4, lr}
   1e592:	f7f2 fa45 	bl	10a20 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
   1e596:	f7f1 fcfd 	bl	ff94 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
   1e59a:	f000 f804 	bl	1e5a6 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
   1e59e:	b280      	uxth	r0, r0
   1e5a0:	bd10      	pop	{r4, pc}

0001e5a2 <sym_5POQORD6JKUMWUFK7EQMHJRVL6FP7FFCXP7FODA>:
   1e5a2:	f000 b80d 	b.w	1e5c0 <sym_2XHWCFCONWNVOJMSX36K54RLWKHKBPZWGYV3IRI>

0001e5a6 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>:
   1e5a6:	0a41      	lsrs	r1, r0, #9
   1e5a8:	f643 5209 	movw	r2, #15625	; 0x3d09
   1e5ac:	4351      	muls	r1, r2
   1e5ae:	f3c0 0008 	ubfx	r0, r0, #0, #9
   1e5b2:	fb10 f002 	smulbb	r0, r0, r2
   1e5b6:	f500 7080 	add.w	r0, r0, #256	; 0x100
   1e5ba:	eb01 2050 	add.w	r0, r1, r0, lsr #9
   1e5be:	4770      	bx	lr

0001e5c0 <sym_2XHWCFCONWNVOJMSX36K54RLWKHKBPZWGYV3IRI>:
   1e5c0:	2000      	movs	r0, #0
   1e5c2:	4770      	bx	lr
   1e5c4:	2800      	cmp	r0, #0
   1e5c6:	db09      	blt.n	1e5dc <sym_2XHWCFCONWNVOJMSX36K54RLWKHKBPZWGYV3IRI+0x1c>
   1e5c8:	f000 021f 	and.w	r2, r0, #31
   1e5cc:	2101      	movs	r1, #1
   1e5ce:	4091      	lsls	r1, r2
   1e5d0:	0940      	lsrs	r0, r0, #5
   1e5d2:	0080      	lsls	r0, r0, #2
   1e5d4:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   1e5d8:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
   1e5dc:	4770      	bx	lr
   1e5de:	2800      	cmp	r0, #0
   1e5e0:	db0d      	blt.n	1e5fe <sym_2XHWCFCONWNVOJMSX36K54RLWKHKBPZWGYV3IRI+0x3e>
   1e5e2:	f000 021f 	and.w	r2, r0, #31
   1e5e6:	2101      	movs	r1, #1
   1e5e8:	4091      	lsls	r1, r2
   1e5ea:	0940      	lsrs	r0, r0, #5
   1e5ec:	0080      	lsls	r0, r0, #2
   1e5ee:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   1e5f2:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
   1e5f6:	f3bf 8f4f 	dsb	sy
   1e5fa:	f3bf 8f6f 	isb	sy
   1e5fe:	4770      	bx	lr

0001e600 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>:
   1e600:	b570      	push	{r4, r5, r6, lr}
   1e602:	4602      	mov	r2, r0
   1e604:	2000      	movs	r0, #0
   1e606:	2900      	cmp	r1, #0
   1e608:	d01d      	beq.n	1e646 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x46>
   1e60a:	fba2 0101 	umull	r0, r1, r2, r1
   1e60e:	0a40      	lsrs	r0, r0, #9
   1e610:	ea40 50c1 	orr.w	r0, r0, r1, lsl #23
   1e614:	0a49      	lsrs	r1, r1, #9
   1e616:	1c40      	adds	r0, r0, #1
   1e618:	f141 0100 	adc.w	r1, r1, #0
   1e61c:	f240 72a1 	movw	r2, #1953	; 0x7a1
   1e620:	1883      	adds	r3, r0, r2
   1e622:	f141 0100 	adc.w	r1, r1, #0
   1e626:	1c5b      	adds	r3, r3, #1
   1e628:	f141 0400 	adc.w	r4, r1, #0
   1e62c:	2100      	movs	r1, #0
   1e62e:	f1d3 33ff 	rsbs	r3, r3, #4294967295	; 0xffffffff
   1e632:	41a1      	sbcs	r1, r4
   1e634:	d203      	bcs.n	1e63e <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x3e>
   1e636:	2172      	movs	r1, #114	; 0x72
   1e638:	206d      	movs	r0, #109	; 0x6d
   1e63a:	f7f2 fd69 	bl	11110 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   1e63e:	f500 60f4 	add.w	r0, r0, #1952	; 0x7a0
   1e642:	fbb0 f0f2 	udiv	r0, r0, r2
   1e646:	bd70      	pop	{r4, r5, r6, pc}
   1e648:	5840      	ldr	r0, [r0, r1]
   1e64a:	2800      	cmp	r0, #0
   1e64c:	d000      	beq.n	1e650 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x50>
   1e64e:	2001      	movs	r0, #1
   1e650:	4770      	bx	lr
   1e652:	f8d0 240c 	ldr.w	r2, [r0, #1036]	; 0x40c
   1e656:	f8d0 040c 	ldr.w	r0, [r0, #1036]	; 0x40c
   1e65a:	f002 0201 	and.w	r2, r2, #1
   1e65e:	03c0      	lsls	r0, r0, #15
   1e660:	d503      	bpl.n	1e66a <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x6a>
   1e662:	428a      	cmp	r2, r1
   1e664:	d101      	bne.n	1e66a <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x6a>
   1e666:	2001      	movs	r0, #1
   1e668:	4770      	bx	lr
   1e66a:	2000      	movs	r0, #0
   1e66c:	4770      	bx	lr

0001e66e <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>:
   1e66e:	b510      	push	{r4, lr}
   1e670:	2101      	movs	r1, #1
   1e672:	0788      	lsls	r0, r1, #30
   1e674:	f7f2 fcf6 	bl	11064 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
   1e678:	2800      	cmp	r0, #0
   1e67a:	d000      	beq.n	1e67e <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI+0x10>
   1e67c:	2001      	movs	r0, #1
   1e67e:	bd10      	pop	{r4, pc}

0001e680 <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>:
   1e680:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   1e684:	2101      	movs	r1, #1
   1e686:	6001      	str	r1, [r0, #0]
   1e688:	4770      	bx	lr

0001e68a <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>:
   1e68a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   1e68e:	f8d1 2418 	ldr.w	r2, [r1, #1048]	; 0x418
   1e692:	f8d1 1418 	ldr.w	r1, [r1, #1048]	; 0x418
   1e696:	f002 0203 	and.w	r2, r2, #3
   1e69a:	03c9      	lsls	r1, r1, #15
   1e69c:	d503      	bpl.n	1e6a6 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
   1e69e:	4282      	cmp	r2, r0
   1e6a0:	d101      	bne.n	1e6a6 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
   1e6a2:	2001      	movs	r0, #1
   1e6a4:	4770      	bx	lr
   1e6a6:	2000      	movs	r0, #0
   1e6a8:	4770      	bx	lr

0001e6aa <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>:
   1e6aa:	b510      	push	{r4, lr}
   1e6ac:	2100      	movs	r1, #0
   1e6ae:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   1e6b2:	f7f2 fcd7 	bl	11064 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
   1e6b6:	2800      	cmp	r0, #0
   1e6b8:	d000      	beq.n	1e6bc <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x12>
   1e6ba:	2001      	movs	r0, #1
   1e6bc:	bd10      	pop	{r4, pc}
   1e6be:	2800      	cmp	r0, #0
   1e6c0:	db09      	blt.n	1e6d6 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2c>
   1e6c2:	f000 021f 	and.w	r2, r0, #31
   1e6c6:	2101      	movs	r1, #1
   1e6c8:	4091      	lsls	r1, r2
   1e6ca:	0940      	lsrs	r0, r0, #5
   1e6cc:	0080      	lsls	r0, r0, #2
   1e6ce:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   1e6d2:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
   1e6d6:	4770      	bx	lr
   1e6d8:	2800      	cmp	r0, #0
   1e6da:	db0d      	blt.n	1e6f8 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x4e>
   1e6dc:	f000 021f 	and.w	r2, r0, #31
   1e6e0:	2101      	movs	r1, #1
   1e6e2:	4091      	lsls	r1, r2
   1e6e4:	0940      	lsrs	r0, r0, #5
   1e6e6:	0080      	lsls	r0, r0, #2
   1e6e8:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   1e6ec:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
   1e6f0:	f3bf 8f4f 	dsb	sy
   1e6f4:	f3bf 8f6f 	isb	sy
   1e6f8:	4770      	bx	lr
   1e6fa:	1000      	.short	0x1000
   1e6fc:	00fa0002 	.word	0x00fa0002
   1e700:	edb80000 	.word	0xedb80000
   1e704:	0ef2aa4d 	.word	0x0ef2aa4d
   1e708:	b5ea3202 	.word	0xb5ea3202
   1e70c:	d1502fde 	.word	0xd1502fde
   1e710:	d2b55ab7 	.word	0xd2b55ab7
   1e714:	41c7      	.short	0x41c7
   1e716:	2800      	cmp	r0, #0
   1e718:	db09      	blt.n	1e72e <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x84>
   1e71a:	f000 021f 	and.w	r2, r0, #31
   1e71e:	2101      	movs	r1, #1
   1e720:	4091      	lsls	r1, r2
   1e722:	0940      	lsrs	r0, r0, #5
   1e724:	0080      	lsls	r0, r0, #2
   1e726:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   1e72a:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
   1e72e:	4770      	bx	lr

0001e730 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>:
   1e730:	f3ef 8110 	mrs	r1, PRIMASK
   1e734:	b672      	cpsid	i
   1e736:	7802      	ldrb	r2, [r0, #0]
   1e738:	2a01      	cmp	r2, #1
   1e73a:	d001      	beq.n	1e740 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x10>
   1e73c:	2201      	movs	r2, #1
   1e73e:	e000      	b.n	1e742 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x12>
   1e740:	2200      	movs	r2, #0
   1e742:	2301      	movs	r3, #1
   1e744:	7003      	strb	r3, [r0, #0]
   1e746:	b901      	cbnz	r1, 1e74a <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x1a>
   1e748:	b662      	cpsie	i
   1e74a:	b10a      	cbz	r2, 1e750 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x20>
   1e74c:	2000      	movs	r0, #0
   1e74e:	4770      	bx	lr
   1e750:	f06f 0022 	mvn.w	r0, #34	; 0x22
   1e754:	4770      	bx	lr

0001e756 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>:
   1e756:	2100      	movs	r1, #0
   1e758:	7001      	strb	r1, [r0, #0]
   1e75a:	4608      	mov	r0, r1
   1e75c:	4770      	bx	lr

0001e75e <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>:
   1e75e:	f3ef 8110 	mrs	r1, PRIMASK
   1e762:	b672      	cpsid	i
   1e764:	2200      	movs	r2, #0
   1e766:	7002      	strb	r2, [r0, #0]
   1e768:	b901      	cbnz	r1, 1e76c <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q+0xe>
   1e76a:	b662      	cpsie	i
   1e76c:	2000      	movs	r0, #0
   1e76e:	4770      	bx	lr

0001e770 <mpsl_low_priority_process>:
   1e770:	f7f2 bdce 	b.w	11310 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>

0001e774 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>:
   1e774:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   1e778:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   1e77c:	280f      	cmp	r0, #15
   1e77e:	d001      	beq.n	1e784 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA+0x10>
   1e780:	2000      	movs	r0, #0
   1e782:	4770      	bx	lr
   1e784:	2001      	movs	r0, #1
   1e786:	4770      	bx	lr

0001e788 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>:
   1e788:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   1e78c:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   1e790:	280a      	cmp	r0, #10
   1e792:	d001      	beq.n	1e798 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY+0x10>
   1e794:	2000      	movs	r0, #0
   1e796:	4770      	bx	lr
   1e798:	2001      	movs	r0, #1
   1e79a:	4770      	bx	lr

0001e79c <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>:
   1e79c:	b500      	push	{lr}
   1e79e:	f7ff fff3 	bl	1e788 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
   1e7a2:	b120      	cbz	r0, 1e7ae <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x12>
   1e7a4:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   1e7a8:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
   1e7ac:	b108      	cbz	r0, 1e7b2 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x16>
   1e7ae:	2000      	movs	r0, #0
   1e7b0:	bd00      	pop	{pc}
   1e7b2:	2001      	movs	r0, #1
   1e7b4:	bd00      	pop	{pc}

0001e7b6 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>:
   1e7b6:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   1e7ba:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   1e7be:	280e      	cmp	r0, #14
   1e7c0:	d001      	beq.n	1e7c6 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q+0x10>
   1e7c2:	2000      	movs	r0, #0
   1e7c4:	4770      	bx	lr
   1e7c6:	2001      	movs	r0, #1
   1e7c8:	4770      	bx	lr

0001e7ca <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>:
   1e7ca:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   1e7ce:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   1e7d2:	2810      	cmp	r0, #16
   1e7d4:	d001      	beq.n	1e7da <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA+0x10>
   1e7d6:	2000      	movs	r0, #0
   1e7d8:	4770      	bx	lr
   1e7da:	2001      	movs	r0, #1
   1e7dc:	4770      	bx	lr

0001e7de <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>:
   1e7de:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   1e7e2:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   1e7e6:	2806      	cmp	r0, #6
   1e7e8:	d003      	beq.n	1e7f2 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
   1e7ea:	1c40      	adds	r0, r0, #1
   1e7ec:	d001      	beq.n	1e7f2 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
   1e7ee:	2000      	movs	r0, #0
   1e7f0:	4770      	bx	lr
   1e7f2:	2001      	movs	r0, #1
   1e7f4:	4770      	bx	lr

0001e7f6 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>:
   1e7f6:	b500      	push	{lr}
   1e7f8:	f7ff fff1 	bl	1e7de <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
   1e7fc:	b148      	cbz	r0, 1e812 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
   1e7fe:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   1e802:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
   1e806:	2806      	cmp	r0, #6
   1e808:	d303      	bcc.n	1e812 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
   1e80a:	1c40      	adds	r0, r0, #1
   1e80c:	d001      	beq.n	1e812 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
   1e80e:	2001      	movs	r0, #1
   1e810:	bd00      	pop	{pc}
   1e812:	2000      	movs	r0, #0
   1e814:	bd00      	pop	{pc}

0001e816 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>:
   1e816:	b500      	push	{lr}
   1e818:	f7ff ffe1 	bl	1e7de <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
   1e81c:	b138      	cbz	r0, 1e82e <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x18>
   1e81e:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   1e822:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
   1e826:	2806      	cmp	r0, #6
   1e828:	d303      	bcc.n	1e832 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
   1e82a:	1c40      	adds	r0, r0, #1
   1e82c:	d001      	beq.n	1e832 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
   1e82e:	2000      	movs	r0, #0
   1e830:	bd00      	pop	{pc}
   1e832:	2001      	movs	r0, #1
   1e834:	bd00      	pop	{pc}

0001e836 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>:
   1e836:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   1e83a:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   1e83e:	280d      	cmp	r0, #13
   1e840:	d001      	beq.n	1e846 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA+0x10>
   1e842:	2000      	movs	r0, #0
   1e844:	4770      	bx	lr
   1e846:	2001      	movs	r0, #1
   1e848:	4770      	bx	lr

0001e84a <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>:
   1e84a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   1e84e:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   1e852:	2808      	cmp	r0, #8
   1e854:	d001      	beq.n	1e85a <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ+0x10>
   1e856:	2000      	movs	r0, #0
   1e858:	4770      	bx	lr
   1e85a:	2001      	movs	r0, #1
   1e85c:	4770      	bx	lr

0001e85e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>:
   1e85e:	b4f0      	push	{r4, r5, r6, r7}
   1e860:	ea80 0c01 	eor.w	ip, r0, r1
   1e864:	4603      	mov	r3, r0
   1e866:	f01c 0f03 	tst.w	ip, #3
   1e86a:	d13c      	bne.n	1e8e6 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
   1e86c:	f013 0f03 	tst.w	r3, #3
   1e870:	d00b      	beq.n	1e88a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x2c>
   1e872:	2a00      	cmp	r2, #0
   1e874:	bf04      	itt	eq
   1e876:	bcf0      	popeq	{r4, r5, r6, r7}
   1e878:	4770      	bxeq	lr
   1e87a:	f811 cb01 	ldrb.w	ip, [r1], #1
   1e87e:	f803 cb01 	strb.w	ip, [r3], #1
   1e882:	1e52      	subs	r2, r2, #1
   1e884:	f013 0f03 	tst.w	r3, #3
   1e888:	d1f3      	bne.n	1e872 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x14>
   1e88a:	2a03      	cmp	r2, #3
   1e88c:	d94f      	bls.n	1e92e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
   1e88e:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   1e892:	d24c      	bcs.n	1e92e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
   1e894:	f1c2 0c00 	rsb	ip, r2, #0
   1e898:	ea4f 74ec 	mov.w	r4, ip, asr #31
   1e89c:	eb0c 7c94 	add.w	ip, ip, r4, lsr #30
   1e8a0:	ea4f 0cac 	mov.w	ip, ip, asr #2
   1e8a4:	f1cc 0c00 	rsb	ip, ip, #0
   1e8a8:	f1bc 0f00 	cmp.w	ip, #0
   1e8ac:	dd1b      	ble.n	1e8e6 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
   1e8ae:	1f0d      	subs	r5, r1, #4
   1e8b0:	1f1c      	subs	r4, r3, #4
   1e8b2:	f01c 0f01 	tst.w	ip, #1
   1e8b6:	d003      	beq.n	1e8c0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x62>
   1e8b8:	f855 6f04 	ldr.w	r6, [r5, #4]!
   1e8bc:	f844 6f04 	str.w	r6, [r4, #4]!
   1e8c0:	ea5f 066c 	movs.w	r6, ip, asr #1
   1e8c4:	d007      	beq.n	1e8d6 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x78>
   1e8c6:	686f      	ldr	r7, [r5, #4]
   1e8c8:	6067      	str	r7, [r4, #4]
   1e8ca:	f855 7f08 	ldr.w	r7, [r5, #8]!
   1e8ce:	f844 7f08 	str.w	r7, [r4, #8]!
   1e8d2:	1e76      	subs	r6, r6, #1
   1e8d4:	d1f7      	bne.n	1e8c6 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x68>
   1e8d6:	eb01 018c 	add.w	r1, r1, ip, lsl #2
   1e8da:	eb03 038c 	add.w	r3, r3, ip, lsl #2
   1e8de:	f1cc 0c00 	rsb	ip, ip, #0
   1e8e2:	eb02 028c 	add.w	r2, r2, ip, lsl #2
   1e8e6:	2a00      	cmp	r2, #0
   1e8e8:	bf04      	itt	eq
   1e8ea:	bcf0      	popeq	{r4, r5, r6, r7}
   1e8ec:	4770      	bxeq	lr
   1e8ee:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   1e8f2:	d226      	bcs.n	1e942 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
   1e8f4:	2a00      	cmp	r2, #0
   1e8f6:	bfdc      	itt	le
   1e8f8:	bcf0      	pople	{r4, r5, r6, r7}
   1e8fa:	4770      	bxle	lr
   1e8fc:	1e49      	subs	r1, r1, #1
   1e8fe:	1e5b      	subs	r3, r3, #1
   1e900:	f012 0f01 	tst.w	r2, #1
   1e904:	d003      	beq.n	1e90e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb0>
   1e906:	f811 cf01 	ldrb.w	ip, [r1, #1]!
   1e90a:	f803 cf01 	strb.w	ip, [r3, #1]!
   1e90e:	1052      	asrs	r2, r2, #1
   1e910:	bf04      	itt	eq
   1e912:	bcf0      	popeq	{r4, r5, r6, r7}
   1e914:	4770      	bxeq	lr
   1e916:	f891 c001 	ldrb.w	ip, [r1, #1]
   1e91a:	f883 c001 	strb.w	ip, [r3, #1]
   1e91e:	f811 cf02 	ldrb.w	ip, [r1, #2]!
   1e922:	f803 cf02 	strb.w	ip, [r3, #2]!
   1e926:	1e52      	subs	r2, r2, #1
   1e928:	d1f5      	bne.n	1e916 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb8>
   1e92a:	bcf0      	pop	{r4, r5, r6, r7}
   1e92c:	4770      	bx	lr
   1e92e:	2a04      	cmp	r2, #4
   1e930:	d3d9      	bcc.n	1e8e6 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
   1e932:	f851 cb04 	ldr.w	ip, [r1], #4
   1e936:	1f12      	subs	r2, r2, #4
   1e938:	f843 cb04 	str.w	ip, [r3], #4
   1e93c:	2a04      	cmp	r2, #4
   1e93e:	d2f8      	bcs.n	1e932 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd4>
   1e940:	e7d1      	b.n	1e8e6 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
   1e942:	f811 cb01 	ldrb.w	ip, [r1], #1
   1e946:	f803 cb01 	strb.w	ip, [r3], #1
   1e94a:	1e52      	subs	r2, r2, #1
   1e94c:	d1f9      	bne.n	1e942 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
   1e94e:	bcf0      	pop	{r4, r5, r6, r7}
   1e950:	4770      	bx	lr

0001e952 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>:
   1e952:	b470      	push	{r4, r5, r6}
   1e954:	4603      	mov	r3, r0
   1e956:	f001 0cff 	and.w	ip, r1, #255	; 0xff
   1e95a:	f010 0f03 	tst.w	r0, #3
   1e95e:	d009      	beq.n	1e974 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x22>
   1e960:	2a00      	cmp	r2, #0
   1e962:	bf04      	itt	eq
   1e964:	bc70      	popeq	{r4, r5, r6}
   1e966:	4770      	bxeq	lr
   1e968:	f803 cb01 	strb.w	ip, [r3], #1
   1e96c:	1e52      	subs	r2, r2, #1
   1e96e:	f013 0f03 	tst.w	r3, #3
   1e972:	d1f5      	bne.n	1e960 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xe>
   1e974:	b2c9      	uxtb	r1, r1
   1e976:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
   1e97a:	ea41 4501 	orr.w	r5, r1, r1, lsl #16
   1e97e:	2a03      	cmp	r2, #3
   1e980:	d939      	bls.n	1e9f6 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
   1e982:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   1e986:	d236      	bcs.n	1e9f6 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
   1e988:	4251      	negs	r1, r2
   1e98a:	17cc      	asrs	r4, r1, #31
   1e98c:	eb01 7194 	add.w	r1, r1, r4, lsr #30
   1e990:	1089      	asrs	r1, r1, #2
   1e992:	424e      	negs	r6, r1
   1e994:	2e00      	cmp	r6, #0
   1e996:	dd11      	ble.n	1e9bc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
   1e998:	1f19      	subs	r1, r3, #4
   1e99a:	f016 0f01 	tst.w	r6, #1
   1e99e:	bf18      	it	ne
   1e9a0:	f841 5f04 	strne.w	r5, [r1, #4]!
   1e9a4:	1074      	asrs	r4, r6, #1
   1e9a6:	d004      	beq.n	1e9b2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x60>
   1e9a8:	604d      	str	r5, [r1, #4]
   1e9aa:	f841 5f08 	str.w	r5, [r1, #8]!
   1e9ae:	1e64      	subs	r4, r4, #1
   1e9b0:	d1fa      	bne.n	1e9a8 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x56>
   1e9b2:	4271      	negs	r1, r6
   1e9b4:	eb03 0386 	add.w	r3, r3, r6, lsl #2
   1e9b8:	eb02 0281 	add.w	r2, r2, r1, lsl #2
   1e9bc:	2a00      	cmp	r2, #0
   1e9be:	bf04      	itt	eq
   1e9c0:	bc70      	popeq	{r4, r5, r6}
   1e9c2:	4770      	bxeq	lr
   1e9c4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   1e9c8:	d21d      	bcs.n	1ea06 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
   1e9ca:	2a00      	cmp	r2, #0
   1e9cc:	bfdc      	itt	le
   1e9ce:	bc70      	pople	{r4, r5, r6}
   1e9d0:	4770      	bxle	lr
   1e9d2:	1e59      	subs	r1, r3, #1
   1e9d4:	f012 0f01 	tst.w	r2, #1
   1e9d8:	bf18      	it	ne
   1e9da:	f801 cf01 	strbne.w	ip, [r1, #1]!
   1e9de:	1052      	asrs	r2, r2, #1
   1e9e0:	bf04      	itt	eq
   1e9e2:	bc70      	popeq	{r4, r5, r6}
   1e9e4:	4770      	bxeq	lr
   1e9e6:	f881 c001 	strb.w	ip, [r1, #1]
   1e9ea:	f801 cf02 	strb.w	ip, [r1, #2]!
   1e9ee:	1e52      	subs	r2, r2, #1
   1e9f0:	d1f9      	bne.n	1e9e6 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x94>
   1e9f2:	bc70      	pop	{r4, r5, r6}
   1e9f4:	4770      	bx	lr
   1e9f6:	2a04      	cmp	r2, #4
   1e9f8:	d3e0      	bcc.n	1e9bc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
   1e9fa:	1f12      	subs	r2, r2, #4
   1e9fc:	f843 5b04 	str.w	r5, [r3], #4
   1ea00:	2a04      	cmp	r2, #4
   1ea02:	d2fa      	bcs.n	1e9fa <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa8>
   1ea04:	e7da      	b.n	1e9bc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
   1ea06:	f803 cb01 	strb.w	ip, [r3], #1
   1ea0a:	1e52      	subs	r2, r2, #1
   1ea0c:	d1fb      	bne.n	1ea06 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
   1ea0e:	bc70      	pop	{r4, r5, r6}
   1ea10:	4770      	bx	lr
   1ea12:	2107      	movs	r1, #7
   1ea14:	7001      	strb	r1, [r0, #0]
   1ea16:	2000      	movs	r0, #0
   1ea18:	4770      	bx	lr
   1ea1a:	2000      	movs	r0, #0
   1ea1c:	4770      	bx	lr
   1ea1e:	2000      	movs	r0, #0
   1ea20:	4770      	bx	lr
   1ea22:	2000      	movs	r0, #0
   1ea24:	4770      	bx	lr
   1ea26:	b108      	cbz	r0, 1ea2c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xda>
   1ea28:	2000      	movs	r0, #0
   1ea2a:	4770      	bx	lr
   1ea2c:	f06f 0015 	mvn.w	r0, #21
   1ea30:	4770      	bx	lr
   1ea32:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1ea36:	4770      	bx	lr
   1ea38:	2000      	movs	r0, #0
   1ea3a:	4770      	bx	lr
   1ea3c:	2000      	movs	r0, #0
   1ea3e:	4770      	bx	lr
   1ea40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1ea44:	4770      	bx	lr
   1ea46:	4770      	bx	lr
   1ea48:	4770      	bx	lr
   1ea4a:	2000      	movs	r0, #0
   1ea4c:	4770      	bx	lr
   1ea4e:	2100      	movs	r1, #0
   1ea50:	7001      	strb	r1, [r0, #0]
   1ea52:	4770      	bx	lr
   1ea54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1ea58:	4770      	bx	lr
   1ea5a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1ea5e:	4770      	bx	lr
   1ea60:	2100      	movs	r1, #0
   1ea62:	7001      	strb	r1, [r0, #0]
   1ea64:	4770      	bx	lr
   1ea66:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1ea6a:	4770      	bx	lr
   1ea6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1ea70:	4770      	bx	lr
   1ea72:	7800      	ldrb	r0, [r0, #0]
   1ea74:	2800      	cmp	r0, #0
   1ea76:	d001      	beq.n	1ea7c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x12a>
   1ea78:	f06f 0015 	mvn.w	r0, #21
   1ea7c:	4770      	bx	lr
   1ea7e:	2000      	movs	r0, #0
   1ea80:	4770      	bx	lr
   1ea82:	2200      	movs	r2, #0
   1ea84:	f000 b802 	b.w	1ea8c <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA>

0001ea88 <mpsl_fem_init>:
   1ea88:	f7ee bf14 	b.w	d8b4 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA>

0001ea8c <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA>:
   1ea8c:	b570      	push	{r4, r5, r6, lr}
   1ea8e:	4614      	mov	r4, r2
   1ea90:	460d      	mov	r5, r1
   1ea92:	1b00      	subs	r0, r0, r4
   1ea94:	f06f 017f 	mvn.w	r1, #127	; 0x7f
   1ea98:	4288      	cmp	r0, r1
   1ea9a:	da01      	bge.n	1eaa0 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x14>
   1ea9c:	4608      	mov	r0, r1
   1ea9e:	e002      	b.n	1eaa6 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x1a>
   1eaa0:	287f      	cmp	r0, #127	; 0x7f
   1eaa2:	dd00      	ble.n	1eaa6 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x1a>
   1eaa4:	207f      	movs	r0, #127	; 0x7f
   1eaa6:	b240      	sxtb	r0, r0
   1eaa8:	f7ee ff38 	bl	d91c <mpsl_tx_power_radio_supported_power_adjust>
   1eaac:	7028      	strb	r0, [r5, #0]
   1eaae:	706c      	strb	r4, [r5, #1]
   1eab0:	2100      	movs	r1, #0
   1eab2:	4420      	add	r0, r4
   1eab4:	70a9      	strb	r1, [r5, #2]
   1eab6:	b240      	sxtb	r0, r0
   1eab8:	bd70      	pop	{r4, r5, r6, pc}
   1eaba:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1eabe:	4681      	mov	r9, r0
   1eac0:	9000      	str	r0, [sp, #0]
   1eac2:	4615      	mov	r5, r2
   1eac4:	460c      	mov	r4, r1
   1eac6:	4668      	mov	r0, sp
   1eac8:	f7f2 fddc 	bl	11684 <mpsl_fem_device_config_254_apply_get+0x68>
   1eacc:	7820      	ldrb	r0, [r4, #0]
   1eace:	7861      	ldrb	r1, [r4, #1]
   1ead0:	46a8      	mov	r8, r5
   1ead2:	2600      	movs	r6, #0
   1ead4:	4408      	add	r0, r1
   1ead6:	b2c7      	uxtb	r7, r0
   1ead8:	4635      	mov	r5, r6
   1eada:	e008      	b.n	1eaee <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x62>
   1eadc:	7a23      	ldrb	r3, [r4, #8]
   1eade:	79e2      	ldrb	r2, [r4, #7]
   1eae0:	79a1      	ldrb	r1, [r4, #6]
   1eae2:	7960      	ldrb	r0, [r4, #5]
   1eae4:	f001 f861 	bl	1fbaa <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>
   1eae8:	1c6d      	adds	r5, r5, #1
   1eaea:	4406      	add	r6, r0
   1eaec:	b2ed      	uxtb	r5, r5
   1eaee:	42bd      	cmp	r5, r7
   1eaf0:	d3f4      	bcc.n	1eadc <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x50>
   1eaf2:	9800      	ldr	r0, [sp, #0]
   1eaf4:	1cc0      	adds	r0, r0, #3
   1eaf6:	f020 0003 	bic.w	r0, r0, #3
   1eafa:	9000      	str	r0, [sp, #0]
   1eafc:	f1b8 0f00 	cmp.w	r8, #0
   1eb00:	d000      	beq.n	1eb04 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x78>
   1eb02:	2000      	movs	r0, #0
   1eb04:	4632      	mov	r2, r6
   1eb06:	4639      	mov	r1, r7
   1eb08:	f7f3 fbc0 	bl	1228c <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>
   1eb0c:	9900      	ldr	r1, [sp, #0]
   1eb0e:	4408      	add	r0, r1
   1eb10:	1dc0      	adds	r0, r0, #7
   1eb12:	f020 0007 	bic.w	r0, r0, #7
   1eb16:	9000      	str	r0, [sp, #0]
   1eb18:	eba0 0009 	sub.w	r0, r0, r9
   1eb1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001eb20 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY>:
   1eb20:	b50e      	push	{r1, r2, r3, lr}
   1eb22:	4601      	mov	r1, r0
   1eb24:	4668      	mov	r0, sp
   1eb26:	f000 f804 	bl	1eb32 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI>
   1eb2a:	4668      	mov	r0, sp
   1eb2c:	f7f5 fc8a 	bl	14444 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA>
   1eb30:	bd0e      	pop	{r1, r2, r3, pc}

0001eb32 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI>:
   1eb32:	880a      	ldrh	r2, [r1, #0]
   1eb34:	f3c2 020b 	ubfx	r2, r2, #0, #12
   1eb38:	8002      	strh	r2, [r0, #0]
   1eb3a:	884a      	ldrh	r2, [r1, #2]
   1eb3c:	8042      	strh	r2, [r0, #2]
   1eb3e:	784a      	ldrb	r2, [r1, #1]
   1eb40:	0993      	lsrs	r3, r2, #6
   1eb42:	2200      	movs	r2, #0
   1eb44:	7142      	strb	r2, [r0, #5]
   1eb46:	784b      	ldrb	r3, [r1, #1]
   1eb48:	f3c3 1301 	ubfx	r3, r3, #4, #2
   1eb4c:	b11b      	cbz	r3, 1eb56 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>
   1eb4e:	2b01      	cmp	r3, #1
   1eb50:	d005      	beq.n	1eb5e <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x2c>
   1eb52:	2b02      	cmp	r3, #2
   1eb54:	d005      	beq.n	1eb62 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x30>
   1eb56:	7102      	strb	r2, [r0, #4]
   1eb58:	1d09      	adds	r1, r1, #4
   1eb5a:	6081      	str	r1, [r0, #8]
   1eb5c:	4770      	bx	lr
   1eb5e:	2201      	movs	r2, #1
   1eb60:	e7f9      	b.n	1eb56 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>
   1eb62:	2202      	movs	r2, #2
   1eb64:	e7f7      	b.n	1eb56 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>

0001eb66 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>:
   1eb66:	b510      	push	{r4, lr}
   1eb68:	460c      	mov	r4, r1
   1eb6a:	7809      	ldrb	r1, [r1, #0]
   1eb6c:	7001      	strb	r1, [r0, #0]
   1eb6e:	7841      	ldrb	r1, [r0, #1]
   1eb70:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
   1eb74:	7041      	strb	r1, [r0, #1]
   1eb76:	8822      	ldrh	r2, [r4, #0]
   1eb78:	f3c2 2203 	ubfx	r2, r2, #8, #4
   1eb7c:	4311      	orrs	r1, r2
   1eb7e:	7041      	strb	r1, [r0, #1]
   1eb80:	78a2      	ldrb	r2, [r4, #2]
   1eb82:	7082      	strb	r2, [r0, #2]
   1eb84:	8862      	ldrh	r2, [r4, #2]
   1eb86:	f001 01cf 	and.w	r1, r1, #207	; 0xcf
   1eb8a:	0a12      	lsrs	r2, r2, #8
   1eb8c:	70c2      	strb	r2, [r0, #3]
   1eb8e:	7041      	strb	r1, [r0, #1]
   1eb90:	7922      	ldrb	r2, [r4, #4]
   1eb92:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
   1eb96:	f001 013f 	and.w	r1, r1, #63	; 0x3f
   1eb9a:	7041      	strb	r1, [r0, #1]
   1eb9c:	7962      	ldrb	r2, [r4, #5]
   1eb9e:	ea41 1182 	orr.w	r1, r1, r2, lsl #6
   1eba2:	7041      	strb	r1, [r0, #1]
   1eba4:	68a1      	ldr	r1, [r4, #8]
   1eba6:	1d02      	adds	r2, r0, #4
   1eba8:	4291      	cmp	r1, r2
   1ebaa:	d006      	beq.n	1ebba <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x54>
   1ebac:	8862      	ldrh	r2, [r4, #2]
   1ebae:	2afb      	cmp	r2, #251	; 0xfb
   1ebb0:	d300      	bcc.n	1ebb4 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x4e>
   1ebb2:	22fb      	movs	r2, #251	; 0xfb
   1ebb4:	1d00      	adds	r0, r0, #4
   1ebb6:	f7ff fe52 	bl	1e85e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   1ebba:	78a0      	ldrb	r0, [r4, #2]
   1ebbc:	1d00      	adds	r0, r0, #4
   1ebbe:	b2c0      	uxtb	r0, r0
   1ebc0:	bd10      	pop	{r4, pc}

0001ebc2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>:
   1ebc2:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ebc6:	4604      	mov	r4, r0
   1ebc8:	f891 c000 	ldrb.w	ip, [r1]
   1ebcc:	460d      	mov	r5, r1
   1ebce:	2000      	movs	r0, #0
   1ebd0:	2313      	movs	r3, #19
   1ebd2:	2601      	movs	r6, #1
   1ebd4:	223e      	movs	r2, #62	; 0x3e
   1ebd6:	2712      	movs	r7, #18
   1ebd8:	f04f 091a 	mov.w	r9, #26
   1ebdc:	f04f 0a10 	mov.w	sl, #16
   1ebe0:	f04f 0b0c 	mov.w	fp, #12
   1ebe4:	f04f 0e05 	mov.w	lr, #5
   1ebe8:	f104 010d 	add.w	r1, r4, #13
   1ebec:	f1bc 0f2e 	cmp.w	ip, #46	; 0x2e
   1ebf0:	d278      	bcs.n	1ece4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x122>
   1ebf2:	e8df f00c 	tbb	[pc, ip]
   1ebf6:	1777      	.short	0x1777
   1ebf8:	f138322f 	.word	0xf138322f
   1ebfc:	eefbf278 	.word	0xeefbf278
   1ec00:	eaebeced 	.word	0xeaebeced
   1ec04:	77e7e8e9 	.word	0x77e7e8e9
   1ec08:	e69d5a77 	.word	0xe69d5a77
   1ec0c:	e2e3e4e5 	.word	0xe2e3e4e5
   1ec10:	dedfe0e1 	.word	0xdedfe0e1
   1ec14:	dadbdcdd 	.word	0xdadbdcdd
   1ec18:	d6d7d8d9 	.word	0xd6d7d8d9
   1ec1c:	d2d3d4d5 	.word	0xd2d3d4d5
   1ec20:	cf77d0d1 	.word	0xcf77d0d1
   1ec24:	f884 b000 	strb.w	fp, [r4]
   1ec28:	7928      	ldrb	r0, [r5, #4]
   1ec2a:	70a0      	strb	r0, [r4, #2]
   1ec2c:	7968      	ldrb	r0, [r5, #5]
   1ec2e:	70e0      	strb	r0, [r4, #3]
   1ec30:	f8b5 0005 	ldrh.w	r0, [r5, #5]
   1ec34:	0a00      	lsrs	r0, r0, #8
   1ec36:	7120      	strb	r0, [r4, #4]
   1ec38:	79e8      	ldrb	r0, [r5, #7]
   1ec3a:	7160      	strb	r0, [r4, #5]
   1ec3c:	7a28      	ldrb	r0, [r5, #8]
   1ec3e:	71a0      	strb	r0, [r4, #6]
   1ec40:	8928      	ldrh	r0, [r5, #8]
   1ec42:	0a00      	lsrs	r0, r0, #8
   1ec44:	71e0      	strb	r0, [r4, #7]
   1ec46:	7aa8      	ldrb	r0, [r5, #10]
   1ec48:	7220      	strb	r0, [r4, #8]
   1ec4a:	8968      	ldrh	r0, [r5, #10]
   1ec4c:	0a00      	lsrs	r0, r0, #8
   1ec4e:	7260      	strb	r0, [r4, #9]
   1ec50:	2008      	movs	r0, #8
   1ec52:	e249      	b.n	1f0e8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x526>
   1ec54:	f884 a000 	strb.w	sl, [r4]
   1ec58:	e001      	b.n	1ec5e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x9c>
   1ec5a:	f884 9000 	strb.w	r9, [r4]
   1ec5e:	7928      	ldrb	r0, [r5, #4]
   1ec60:	70a0      	strb	r0, [r4, #2]
   1ec62:	2001      	movs	r0, #1
   1ec64:	e240      	b.n	1f0e8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x526>
   1ec66:	7022      	strb	r2, [r4, #0]
   1ec68:	2002      	movs	r0, #2
   1ec6a:	70a0      	strb	r0, [r4, #2]
   1ec6c:	f815 0f04 	ldrb.w	r0, [r5, #4]!
   1ec70:	70e0      	strb	r0, [r4, #3]
   1ec72:	7aa8      	ldrb	r0, [r5, #10]
   1ec74:	7120      	strb	r0, [r4, #4]
   1ec76:	7868      	ldrb	r0, [r5, #1]
   1ec78:	7160      	strb	r0, [r4, #5]
   1ec7a:	f8d5 0002 	ldr.w	r0, [r5, #2]
   1ec7e:	f8c4 0006 	str.w	r0, [r4, #6]
   1ec82:	88e8      	ldrh	r0, [r5, #6]
   1ec84:	8160      	strh	r0, [r4, #10]
   1ec86:	7a28      	ldrb	r0, [r5, #8]
   1ec88:	7320      	strb	r0, [r4, #12]
   1ec8a:	7a2e      	ldrb	r6, [r5, #8]
   1ec8c:	2e1f      	cmp	r6, #31
   1ec8e:	d300      	bcc.n	1ec92 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0xd0>
   1ec90:	261f      	movs	r6, #31
   1ec92:	4608      	mov	r0, r1
   1ec94:	4632      	mov	r2, r6
   1ec96:	f105 010b 	add.w	r1, r5, #11
   1ec9a:	f7ff fde0 	bl	1e85e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   1ec9e:	360d      	adds	r6, #13
   1eca0:	7a69      	ldrb	r1, [r5, #9]
   1eca2:	55a1      	strb	r1, [r4, r6]
   1eca4:	1e76      	subs	r6, r6, #1
   1eca6:	b2f0      	uxtb	r0, r6
   1eca8:	e21c      	b.n	1f0e4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x522>
   1ecaa:	7022      	strb	r2, [r4, #0]
   1ecac:	200b      	movs	r0, #11
   1ecae:	70a0      	strb	r0, [r4, #2]
   1ecb0:	7928      	ldrb	r0, [r5, #4]
   1ecb2:	70e0      	strb	r0, [r4, #3]
   1ecb4:	7968      	ldrb	r0, [r5, #5]
   1ecb6:	7120      	strb	r0, [r4, #4]
   1ecb8:	79a8      	ldrb	r0, [r5, #6]
   1ecba:	7160      	strb	r0, [r4, #5]
   1ecbc:	f8d5 0007 	ldr.w	r0, [r5, #7]
   1ecc0:	f8c4 0006 	str.w	r0, [r4, #6]
   1ecc4:	f8b5 000b 	ldrh.w	r0, [r5, #11]
   1ecc8:	8160      	strh	r0, [r4, #10]
   1ecca:	7b68      	ldrb	r0, [r5, #13]
   1eccc:	7320      	strb	r0, [r4, #12]
   1ecce:	f8d5 000e 	ldr.w	r0, [r5, #14]
   1ecd2:	f8c4 000d 	str.w	r0, [r4, #13]
   1ecd6:	8a68      	ldrh	r0, [r5, #18]
   1ecd8:	f8a4 0011 	strh.w	r0, [r4, #17]
   1ecdc:	7d28      	ldrb	r0, [r5, #20]
   1ecde:	74e0      	strb	r0, [r4, #19]
   1ece0:	4638      	mov	r0, r7
   1ece2:	e201      	b.n	1f0e8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x526>
   1ece4:	e203      	b.n	1f0ee <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x52c>
   1ece6:	7022      	strb	r2, [r4, #0]
   1ece8:	70a6      	strb	r6, [r4, #2]
   1ecea:	7928      	ldrb	r0, [r5, #4]
   1ecec:	70e0      	strb	r0, [r4, #3]
   1ecee:	79a8      	ldrb	r0, [r5, #6]
   1ecf0:	7120      	strb	r0, [r4, #4]
   1ecf2:	88e8      	ldrh	r0, [r5, #6]
   1ecf4:	0a00      	lsrs	r0, r0, #8
   1ecf6:	7160      	strb	r0, [r4, #5]
   1ecf8:	7a28      	ldrb	r0, [r5, #8]
   1ecfa:	71a0      	strb	r0, [r4, #6]
   1ecfc:	7a68      	ldrb	r0, [r5, #9]
   1ecfe:	71e0      	strb	r0, [r4, #7]
   1ed00:	f8d5 000a 	ldr.w	r0, [r5, #10]
   1ed04:	60a0      	str	r0, [r4, #8]
   1ed06:	89e8      	ldrh	r0, [r5, #14]
   1ed08:	81a0      	strh	r0, [r4, #12]
   1ed0a:	7c28      	ldrb	r0, [r5, #16]
   1ed0c:	73a0      	strb	r0, [r4, #14]
   1ed0e:	8a28      	ldrh	r0, [r5, #16]
   1ed10:	0a00      	lsrs	r0, r0, #8
   1ed12:	73e0      	strb	r0, [r4, #15]
   1ed14:	7ca8      	ldrb	r0, [r5, #18]
   1ed16:	7420      	strb	r0, [r4, #16]
   1ed18:	8a68      	ldrh	r0, [r5, #18]
   1ed1a:	0a00      	lsrs	r0, r0, #8
   1ed1c:	7460      	strb	r0, [r4, #17]
   1ed1e:	7d28      	ldrb	r0, [r5, #20]
   1ed20:	74a0      	strb	r0, [r4, #18]
   1ed22:	8aa8      	ldrh	r0, [r5, #20]
   1ed24:	0a00      	lsrs	r0, r0, #8
   1ed26:	74e0      	strb	r0, [r4, #19]
   1ed28:	7da8      	ldrb	r0, [r5, #22]
   1ed2a:	7520      	strb	r0, [r4, #20]
   1ed2c:	4618      	mov	r0, r3
   1ed2e:	e1db      	b.n	1f0e8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x526>
   1ed30:	7022      	strb	r2, [r4, #0]
   1ed32:	200a      	movs	r0, #10
   1ed34:	70a0      	strb	r0, [r4, #2]
   1ed36:	f815 0f04 	ldrb.w	r0, [r5, #4]!
   1ed3a:	70e0      	strb	r0, [r4, #3]
   1ed3c:	78a8      	ldrb	r0, [r5, #2]
   1ed3e:	7120      	strb	r0, [r4, #4]
   1ed40:	8868      	ldrh	r0, [r5, #2]
   1ed42:	0a00      	lsrs	r0, r0, #8
   1ed44:	7160      	strb	r0, [r4, #5]
   1ed46:	7928      	ldrb	r0, [r5, #4]
   1ed48:	71a0      	strb	r0, [r4, #6]
   1ed4a:	7968      	ldrb	r0, [r5, #5]
   1ed4c:	71e0      	strb	r0, [r4, #7]
   1ed4e:	f8d5 0006 	ldr.w	r0, [r5, #6]
   1ed52:	60a0      	str	r0, [r4, #8]
   1ed54:	8968      	ldrh	r0, [r5, #10]
   1ed56:	81a0      	strh	r0, [r4, #12]
   1ed58:	68e8      	ldr	r0, [r5, #12]
   1ed5a:	f8c4 000e 	str.w	r0, [r4, #14]
   1ed5e:	8a28      	ldrh	r0, [r5, #16]
   1ed60:	8260      	strh	r0, [r4, #18]
   1ed62:	f8d5 0012 	ldr.w	r0, [r5, #18]
   1ed66:	6160      	str	r0, [r4, #20]
   1ed68:	8ae8      	ldrh	r0, [r5, #22]
   1ed6a:	8320      	strh	r0, [r4, #24]
   1ed6c:	7e28      	ldrb	r0, [r5, #24]
   1ed6e:	76a0      	strb	r0, [r4, #26]
   1ed70:	8b28      	ldrh	r0, [r5, #24]
   1ed72:	0a00      	lsrs	r0, r0, #8
   1ed74:	76e0      	strb	r0, [r4, #27]
   1ed76:	7ea8      	ldrb	r0, [r5, #26]
   1ed78:	7720      	strb	r0, [r4, #28]
   1ed7a:	8b68      	ldrh	r0, [r5, #26]
   1ed7c:	0a00      	lsrs	r0, r0, #8
   1ed7e:	7760      	strb	r0, [r4, #29]
   1ed80:	7f28      	ldrb	r0, [r5, #28]
   1ed82:	77a0      	strb	r0, [r4, #30]
   1ed84:	8ba8      	ldrh	r0, [r5, #28]
   1ed86:	0a00      	lsrs	r0, r0, #8
   1ed88:	77e0      	strb	r0, [r4, #31]
   1ed8a:	7fa8      	ldrb	r0, [r5, #30]
   1ed8c:	f884 0020 	strb.w	r0, [r4, #32]
   1ed90:	201f      	movs	r0, #31
   1ed92:	e1a9      	b.n	1f0e8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x526>
   1ed94:	e281      	b.n	1f29a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x6d8>
   1ed96:	e253      	b.n	1f240 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x67e>
   1ed98:	e233      	b.n	1f202 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x640>
   1ed9a:	e260      	b.n	1f25e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x69c>
   1ed9c:	e26e      	b.n	1f27c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x6ba>
   1ed9e:	e224      	b.n	1f1ea <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x628>
   1eda0:	e211      	b.n	1f1c6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x604>
   1eda2:	e1ba      	b.n	1f11a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x558>
   1eda4:	e1af      	b.n	1f106 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x544>
   1eda6:	e1a4      	b.n	1f0f2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x530>
   1eda8:	e186      	b.n	1f0b8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x4f6>
   1edaa:	e17b      	b.n	1f0a4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x4e2>
   1edac:	e153      	b.n	1f056 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x494>
   1edae:	e14a      	b.n	1f046 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x484>
   1edb0:	e121      	b.n	1eff6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x434>
   1edb2:	e109      	b.n	1efc8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x406>
   1edb4:	e105      	b.n	1efc2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x400>
   1edb6:	e0fc      	b.n	1efb2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3f0>
   1edb8:	e0ef      	b.n	1ef9a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3d8>
   1edba:	e0e4      	b.n	1ef86 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3c4>
   1edbc:	e0cf      	b.n	1ef5e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x39c>
   1edbe:	e0d3      	b.n	1ef68 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3a6>
   1edc0:	e07a      	b.n	1eeb8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2f6>
   1edc2:	e076      	b.n	1eeb2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2f0>
   1edc4:	e08b      	b.n	1eede <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x31c>
   1edc6:	e085      	b.n	1eed4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x312>
   1edc8:	e069      	b.n	1ee9e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2dc>
   1edca:	e05d      	b.n	1ee88 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2c6>
   1edcc:	e050      	b.n	1ee70 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2ae>
   1edce:	e04d      	b.n	1ee6c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2aa>
   1edd0:	e038      	b.n	1ee44 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x282>
   1edd2:	e01d      	b.n	1ee10 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x24e>
   1edd4:	e00a      	b.n	1edec <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x22a>
   1edd6:	e000      	b.n	1edda <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x218>
   1edd8:	e08a      	b.n	1eef0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32e>
   1edda:	7022      	strb	r2, [r4, #0]
   1eddc:	2014      	movs	r0, #20
   1edde:	70a0      	strb	r0, [r4, #2]
   1ede0:	7928      	ldrb	r0, [r5, #4]
   1ede2:	70e0      	strb	r0, [r4, #3]
   1ede4:	88a8      	ldrh	r0, [r5, #4]
   1ede6:	0a00      	lsrs	r0, r0, #8
   1ede8:	7120      	strb	r0, [r4, #4]
   1edea:	e132      	b.n	1f052 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x490>
   1edec:	7022      	strb	r2, [r4, #0]
   1edee:	2004      	movs	r0, #4
   1edf0:	70a0      	strb	r0, [r4, #2]
   1edf2:	7928      	ldrb	r0, [r5, #4]
   1edf4:	70e0      	strb	r0, [r4, #3]
   1edf6:	79a8      	ldrb	r0, [r5, #6]
   1edf8:	7120      	strb	r0, [r4, #4]
   1edfa:	88e8      	ldrh	r0, [r5, #6]
   1edfc:	0a00      	lsrs	r0, r0, #8
   1edfe:	7160      	strb	r0, [r4, #5]
   1ee00:	68a8      	ldr	r0, [r5, #8]
   1ee02:	f8c4 0006 	str.w	r0, [r4, #6]
   1ee06:	68e8      	ldr	r0, [r5, #12]
   1ee08:	f8c4 000a 	str.w	r0, [r4, #10]
   1ee0c:	200c      	movs	r0, #12
   1ee0e:	e16b      	b.n	1f0e8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x526>
   1ee10:	7022      	strb	r2, [r4, #0]
   1ee12:	2003      	movs	r0, #3
   1ee14:	70a0      	strb	r0, [r4, #2]
   1ee16:	7928      	ldrb	r0, [r5, #4]
   1ee18:	70e0      	strb	r0, [r4, #3]
   1ee1a:	79a8      	ldrb	r0, [r5, #6]
   1ee1c:	7120      	strb	r0, [r4, #4]
   1ee1e:	88e8      	ldrh	r0, [r5, #6]
   1ee20:	0a00      	lsrs	r0, r0, #8
   1ee22:	7160      	strb	r0, [r4, #5]
   1ee24:	7a28      	ldrb	r0, [r5, #8]
   1ee26:	71a0      	strb	r0, [r4, #6]
   1ee28:	8928      	ldrh	r0, [r5, #8]
   1ee2a:	0a00      	lsrs	r0, r0, #8
   1ee2c:	71e0      	strb	r0, [r4, #7]
   1ee2e:	7aa8      	ldrb	r0, [r5, #10]
   1ee30:	7220      	strb	r0, [r4, #8]
   1ee32:	8968      	ldrh	r0, [r5, #10]
   1ee34:	0a00      	lsrs	r0, r0, #8
   1ee36:	7260      	strb	r0, [r4, #9]
   1ee38:	7b28      	ldrb	r0, [r5, #12]
   1ee3a:	72a0      	strb	r0, [r4, #10]
   1ee3c:	89a8      	ldrh	r0, [r5, #12]
   1ee3e:	0a00      	lsrs	r0, r0, #8
   1ee40:	72e0      	strb	r0, [r4, #11]
   1ee42:	e219      	b.n	1f278 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x6b6>
   1ee44:	7022      	strb	r2, [r4, #0]
   1ee46:	f884 e002 	strb.w	lr, [r4, #2]
   1ee4a:	7928      	ldrb	r0, [r5, #4]
   1ee4c:	70e0      	strb	r0, [r4, #3]
   1ee4e:	88a8      	ldrh	r0, [r5, #4]
   1ee50:	0a00      	lsrs	r0, r0, #8
   1ee52:	7120      	strb	r0, [r4, #4]
   1ee54:	f8d5 0006 	ldr.w	r0, [r5, #6]
   1ee58:	f8c4 0005 	str.w	r0, [r4, #5]
   1ee5c:	f8d5 000a 	ldr.w	r0, [r5, #10]
   1ee60:	f8c4 0009 	str.w	r0, [r4, #9]
   1ee64:	89e8      	ldrh	r0, [r5, #14]
   1ee66:	f8a4 000d 	strh.w	r0, [r4, #13]
   1ee6a:	e22c      	b.n	1f2c6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x704>
   1ee6c:	2011      	movs	r0, #17
   1ee6e:	e037      	b.n	1eee0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x31e>
   1ee70:	f884 e000 	strb.w	lr, [r4]
   1ee74:	7928      	ldrb	r0, [r5, #4]
   1ee76:	70a0      	strb	r0, [r4, #2]
   1ee78:	7968      	ldrb	r0, [r5, #5]
   1ee7a:	70e0      	strb	r0, [r4, #3]
   1ee7c:	f8b5 0005 	ldrh.w	r0, [r5, #5]
   1ee80:	0a00      	lsrs	r0, r0, #8
   1ee82:	7120      	strb	r0, [r4, #4]
   1ee84:	79e8      	ldrb	r0, [r5, #7]
   1ee86:	e1b9      	b.n	1f1fc <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x63a>
   1ee88:	2008      	movs	r0, #8
   1ee8a:	7020      	strb	r0, [r4, #0]
   1ee8c:	7928      	ldrb	r0, [r5, #4]
   1ee8e:	70a0      	strb	r0, [r4, #2]
   1ee90:	79a8      	ldrb	r0, [r5, #6]
   1ee92:	70e0      	strb	r0, [r4, #3]
   1ee94:	88e8      	ldrh	r0, [r5, #6]
   1ee96:	0a00      	lsrs	r0, r0, #8
   1ee98:	7120      	strb	r0, [r4, #4]
   1ee9a:	7a28      	ldrb	r0, [r5, #8]
   1ee9c:	e1ae      	b.n	1f1fc <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x63a>
   1ee9e:	2030      	movs	r0, #48	; 0x30
   1eea0:	7020      	strb	r0, [r4, #0]
   1eea2:	7928      	ldrb	r0, [r5, #4]
   1eea4:	70a0      	strb	r0, [r4, #2]
   1eea6:	79a8      	ldrb	r0, [r5, #6]
   1eea8:	70e0      	strb	r0, [r4, #3]
   1eeaa:	88e8      	ldrh	r0, [r5, #6]
   1eeac:	0a00      	lsrs	r0, r0, #8
   1eeae:	7120      	strb	r0, [r4, #4]
   1eeb0:	e085      	b.n	1efbe <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3fc>
   1eeb2:	7022      	strb	r2, [r4, #0]
   1eeb4:	2007      	movs	r0, #7
   1eeb6:	e1a7      	b.n	1f208 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x646>
   1eeb8:	7022      	strb	r2, [r4, #0]
   1eeba:	f884 b002 	strb.w	fp, [r4, #2]
   1eebe:	7928      	ldrb	r0, [r5, #4]
   1eec0:	70e0      	strb	r0, [r4, #3]
   1eec2:	79a8      	ldrb	r0, [r5, #6]
   1eec4:	7120      	strb	r0, [r4, #4]
   1eec6:	88e8      	ldrh	r0, [r5, #6]
   1eec8:	0a00      	lsrs	r0, r0, #8
   1eeca:	7160      	strb	r0, [r4, #5]
   1eecc:	7a28      	ldrb	r0, [r5, #8]
   1eece:	71a0      	strb	r0, [r4, #6]
   1eed0:	7a68      	ldrb	r0, [r5, #9]
   1eed2:	e055      	b.n	1ef80 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3be>
   1eed4:	1d29      	adds	r1, r5, #4
   1eed6:	4620      	mov	r0, r4
   1eed8:	f7f2 fec6 	bl	11c68 <sym_Q4MVB6BAYYKAN3YZ2SZEJW6V5OITCIHY2IOHXKY+0xc>
   1eedc:	e102      	b.n	1f0e4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x522>
   1eede:	2057      	movs	r0, #87	; 0x57
   1eee0:	7020      	strb	r0, [r4, #0]
   1eee2:	7928      	ldrb	r0, [r5, #4]
   1eee4:	70a0      	strb	r0, [r4, #2]
   1eee6:	88a8      	ldrh	r0, [r5, #4]
   1eee8:	0a00      	lsrs	r0, r0, #8
   1eeea:	70e0      	strb	r0, [r4, #3]
   1eeec:	2002      	movs	r0, #2
   1eeee:	e0fb      	b.n	1f0e8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x526>
   1eef0:	7022      	strb	r2, [r4, #0]
   1eef2:	220d      	movs	r2, #13
   1eef4:	70a2      	strb	r2, [r4, #2]
   1eef6:	792a      	ldrb	r2, [r5, #4]
   1eef8:	70e2      	strb	r2, [r4, #3]
   1eefa:	89ea      	ldrh	r2, [r5, #14]
   1eefc:	80a2      	strh	r2, [r4, #4]
   1eefe:	796a      	ldrb	r2, [r5, #5]
   1ef00:	71a2      	strb	r2, [r4, #6]
   1ef02:	f8d5 2006 	ldr.w	r2, [r5, #6]
   1ef06:	f8c4 2007 	str.w	r2, [r4, #7]
   1ef0a:	896a      	ldrh	r2, [r5, #10]
   1ef0c:	f8a4 200b 	strh.w	r2, [r4, #11]
   1ef10:	7c2a      	ldrb	r2, [r5, #16]
   1ef12:	4620      	mov	r0, r4
   1ef14:	7362      	strb	r2, [r4, #13]
   1ef16:	1d29      	adds	r1, r5, #4
   1ef18:	7c6a      	ldrb	r2, [r5, #17]
   1ef1a:	7382      	strb	r2, [r0, #14]
   1ef1c:	7b8a      	ldrb	r2, [r1, #14]
   1ef1e:	73c2      	strb	r2, [r0, #15]
   1ef20:	7e8a      	ldrb	r2, [r1, #26]
   1ef22:	7402      	strb	r2, [r0, #16]
   1ef24:	7a4a      	ldrb	r2, [r1, #9]
   1ef26:	7442      	strb	r2, [r0, #17]
   1ef28:	f8b1 2011 	ldrh.w	r2, [r1, #17]
   1ef2c:	f8ad 2000 	strh.w	r2, [sp]
   1ef30:	8242      	strh	r2, [r0, #18]
   1ef32:	7cca      	ldrb	r2, [r1, #19]
   1ef34:	7502      	strb	r2, [r0, #20]
   1ef36:	694a      	ldr	r2, [r1, #20]
   1ef38:	f8c0 2015 	str.w	r2, [r0, #21]
   1ef3c:	8b0a      	ldrh	r2, [r1, #24]
   1ef3e:	f8a0 2019 	strh.w	r2, [r0, #25]
   1ef42:	7a0a      	ldrb	r2, [r1, #8]
   1ef44:	76c2      	strb	r2, [r0, #27]
   1ef46:	7a0d      	ldrb	r5, [r1, #8]
   1ef48:	2de5      	cmp	r5, #229	; 0xe5
   1ef4a:	d300      	bcc.n	1ef4e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x38c>
   1ef4c:	25e5      	movs	r5, #229	; 0xe5
   1ef4e:	462a      	mov	r2, r5
   1ef50:	301c      	adds	r0, #28
   1ef52:	311c      	adds	r1, #28
   1ef54:	f7ff fc83 	bl	1e85e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   1ef58:	351a      	adds	r5, #26
   1ef5a:	b2e8      	uxtb	r0, r5
   1ef5c:	e0c2      	b.n	1f0e4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x522>
   1ef5e:	7022      	strb	r2, [r4, #0]
   1ef60:	2011      	movs	r0, #17
   1ef62:	70a0      	strb	r0, [r4, #2]
   1ef64:	4630      	mov	r0, r6
   1ef66:	e0bf      	b.n	1f0e8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x526>
   1ef68:	7022      	strb	r2, [r4, #0]
   1ef6a:	70a7      	strb	r7, [r4, #2]
   1ef6c:	7928      	ldrb	r0, [r5, #4]
   1ef6e:	70e0      	strb	r0, [r4, #3]
   1ef70:	7968      	ldrb	r0, [r5, #5]
   1ef72:	7120      	strb	r0, [r4, #4]
   1ef74:	79a8      	ldrb	r0, [r5, #6]
   1ef76:	7160      	strb	r0, [r4, #5]
   1ef78:	88e8      	ldrh	r0, [r5, #6]
   1ef7a:	0a00      	lsrs	r0, r0, #8
   1ef7c:	71a0      	strb	r0, [r4, #6]
   1ef7e:	7a28      	ldrb	r0, [r5, #8]
   1ef80:	71e0      	strb	r0, [r4, #7]
   1ef82:	2006      	movs	r0, #6
   1ef84:	e0b0      	b.n	1f0e8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x526>
   1ef86:	7022      	strb	r2, [r4, #0]
   1ef88:	200e      	movs	r0, #14
   1ef8a:	70a0      	strb	r0, [r4, #2]
   1ef8c:	220f      	movs	r2, #15
   1ef8e:	1d29      	adds	r1, r5, #4
   1ef90:	1ce0      	adds	r0, r4, #3
   1ef92:	f7ff fc64 	bl	1e85e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   1ef96:	2010      	movs	r0, #16
   1ef98:	e0a6      	b.n	1f0e8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x526>
   1ef9a:	7022      	strb	r2, [r4, #0]
   1ef9c:	200f      	movs	r0, #15
   1ef9e:	70a0      	strb	r0, [r4, #2]
   1efa0:	7aaa      	ldrb	r2, [r5, #10]
   1efa2:	1d29      	adds	r1, r5, #4
   1efa4:	1ce0      	adds	r0, r4, #3
   1efa6:	1dd2      	adds	r2, r2, #7
   1efa8:	f7ff fc59 	bl	1e85e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   1efac:	7aa8      	ldrb	r0, [r5, #10]
   1efae:	3008      	adds	r0, #8
   1efb0:	e098      	b.n	1f0e4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x522>
   1efb2:	7022      	strb	r2, [r4, #0]
   1efb4:	f884 a002 	strb.w	sl, [r4, #2]
   1efb8:	88a8      	ldrh	r0, [r5, #4]
   1efba:	f8a4 0003 	strh.w	r0, [r4, #3]
   1efbe:	2003      	movs	r0, #3
   1efc0:	e092      	b.n	1f0e8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x526>
   1efc2:	7022      	strb	r2, [r4, #0]
   1efc4:	2020      	movs	r0, #32
   1efc6:	e13e      	b.n	1f246 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x684>
   1efc8:	7022      	strb	r2, [r4, #0]
   1efca:	2021      	movs	r0, #33	; 0x21
   1efcc:	70a0      	strb	r0, [r4, #2]
   1efce:	7928      	ldrb	r0, [r5, #4]
   1efd0:	70e0      	strb	r0, [r4, #3]
   1efd2:	7968      	ldrb	r0, [r5, #5]
   1efd4:	7120      	strb	r0, [r4, #4]
   1efd6:	f8b5 0005 	ldrh.w	r0, [r5, #5]
   1efda:	0a00      	lsrs	r0, r0, #8
   1efdc:	7160      	strb	r0, [r4, #5]
   1efde:	79e8      	ldrb	r0, [r5, #7]
   1efe0:	71a0      	strb	r0, [r4, #6]
   1efe2:	7a28      	ldrb	r0, [r5, #8]
   1efe4:	71e0      	strb	r0, [r4, #7]
   1efe6:	7a68      	ldrb	r0, [r5, #9]
   1efe8:	7220      	strb	r0, [r4, #8]
   1efea:	7aa8      	ldrb	r0, [r5, #10]
   1efec:	7260      	strb	r0, [r4, #9]
   1efee:	7ae8      	ldrb	r0, [r5, #11]
   1eff0:	72a0      	strb	r0, [r4, #10]
   1eff2:	2009      	movs	r0, #9
   1eff4:	e078      	b.n	1f0e8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x526>
   1eff6:	7022      	strb	r2, [r4, #0]
   1eff8:	2018      	movs	r0, #24
   1effa:	70a0      	strb	r0, [r4, #2]
   1effc:	7928      	ldrb	r0, [r5, #4]
   1effe:	70e0      	strb	r0, [r4, #3]
   1f000:	f815 0f05 	ldrb.w	r0, [r5, #5]!
   1f004:	7120      	strb	r0, [r4, #4]
   1f006:	8828      	ldrh	r0, [r5, #0]
   1f008:	0a00      	lsrs	r0, r0, #8
   1f00a:	7160      	strb	r0, [r4, #5]
   1f00c:	78a8      	ldrb	r0, [r5, #2]
   1f00e:	71a0      	strb	r0, [r4, #6]
   1f010:	8868      	ldrh	r0, [r5, #2]
   1f012:	0a00      	lsrs	r0, r0, #8
   1f014:	71e0      	strb	r0, [r4, #7]
   1f016:	7928      	ldrb	r0, [r5, #4]
   1f018:	7220      	strb	r0, [r4, #8]
   1f01a:	88a8      	ldrh	r0, [r5, #4]
   1f01c:	0a00      	lsrs	r0, r0, #8
   1f01e:	7260      	strb	r0, [r4, #9]
   1f020:	79a8      	ldrb	r0, [r5, #6]
   1f022:	72a0      	strb	r0, [r4, #10]
   1f024:	79e8      	ldrb	r0, [r5, #7]
   1f026:	72e0      	strb	r0, [r4, #11]
   1f028:	68a8      	ldr	r0, [r5, #8]
   1f02a:	60e0      	str	r0, [r4, #12]
   1f02c:	89a8      	ldrh	r0, [r5, #12]
   1f02e:	8220      	strh	r0, [r4, #16]
   1f030:	7ba8      	ldrb	r0, [r5, #14]
   1f032:	74a0      	strb	r0, [r4, #18]
   1f034:	7be8      	ldrb	r0, [r5, #15]
   1f036:	74e0      	strb	r0, [r4, #19]
   1f038:	f8b5 000f 	ldrh.w	r0, [r5, #15]
   1f03c:	0a00      	lsrs	r0, r0, #8
   1f03e:	7520      	strb	r0, [r4, #20]
   1f040:	7c68      	ldrb	r0, [r5, #17]
   1f042:	7560      	strb	r0, [r4, #21]
   1f044:	e036      	b.n	1f0b4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x4f2>
   1f046:	7022      	strb	r2, [r4, #0]
   1f048:	2027      	movs	r0, #39	; 0x27
   1f04a:	70a0      	strb	r0, [r4, #2]
   1f04c:	88a8      	ldrh	r0, [r5, #4]
   1f04e:	f8a4 0003 	strh.w	r0, [r4, #3]
   1f052:	79a8      	ldrb	r0, [r5, #6]
   1f054:	e0d2      	b.n	1f1fc <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x63a>
   1f056:	2028      	movs	r0, #40	; 0x28
   1f058:	7022      	strb	r2, [r4, #0]
   1f05a:	70a0      	strb	r0, [r4, #2]
   1f05c:	1ce7      	adds	r7, r4, #3
   1f05e:	6868      	ldr	r0, [r5, #4]
   1f060:	2600      	movs	r6, #0
   1f062:	f8c4 0003 	str.w	r0, [r4, #3]
   1f066:	46b0      	mov	r8, r6
   1f068:	f105 0908 	add.w	r9, r5, #8
   1f06c:	e014      	b.n	1f098 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x4d6>
   1f06e:	19b8      	adds	r0, r7, r6
   1f070:	4649      	mov	r1, r9
   1f072:	1d05      	adds	r5, r0, #4
   1f074:	f851 0b04 	ldr.w	r0, [r1], #4
   1f078:	6028      	str	r0, [r5, #0]
   1f07a:	f831 0b02 	ldrh.w	r0, [r1], #2
   1f07e:	80a8      	strh	r0, [r5, #4]
   1f080:	796a      	ldrb	r2, [r5, #5]
   1f082:	1da8      	adds	r0, r5, #6
   1f084:	f7ff fbeb 	bl	1e85e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   1f088:	7968      	ldrb	r0, [r5, #5]
   1f08a:	1db6      	adds	r6, r6, #6
   1f08c:	4430      	add	r0, r6
   1f08e:	b286      	uxth	r6, r0
   1f090:	f108 0001 	add.w	r0, r8, #1
   1f094:	f000 08ff 	and.w	r8, r0, #255	; 0xff
   1f098:	78f9      	ldrb	r1, [r7, #3]
   1f09a:	4541      	cmp	r1, r8
   1f09c:	d8e7      	bhi.n	1f06e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x4ac>
   1f09e:	1d76      	adds	r6, r6, #5
   1f0a0:	b2b0      	uxth	r0, r6
   1f0a2:	e01f      	b.n	1f0e4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x522>
   1f0a4:	7022      	strb	r2, [r4, #0]
   1f0a6:	2024      	movs	r0, #36	; 0x24
   1f0a8:	70a0      	strb	r0, [r4, #2]
   1f0aa:	2213      	movs	r2, #19
   1f0ac:	1d29      	adds	r1, r5, #4
   1f0ae:	1ce0      	adds	r0, r4, #3
   1f0b0:	f7ff fbd5 	bl	1e85e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   1f0b4:	2014      	movs	r0, #20
   1f0b6:	e017      	b.n	1f0e8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x526>
   1f0b8:	7022      	strb	r2, [r4, #0]
   1f0ba:	2025      	movs	r0, #37	; 0x25
   1f0bc:	70a0      	strb	r0, [r4, #2]
   1f0be:	6868      	ldr	r0, [r5, #4]
   1f0c0:	f8c4 0003 	str.w	r0, [r4, #3]
   1f0c4:	68a8      	ldr	r0, [r5, #8]
   1f0c6:	f8c4 0007 	str.w	r0, [r4, #7]
   1f0ca:	89a8      	ldrh	r0, [r5, #12]
   1f0cc:	f8a4 000b 	strh.w	r0, [r4, #11]
   1f0d0:	1ce6      	adds	r6, r4, #3
   1f0d2:	7b22      	ldrb	r2, [r4, #12]
   1f0d4:	f105 010e 	add.w	r1, r5, #14
   1f0d8:	f104 000d 	add.w	r0, r4, #13
   1f0dc:	f7ff fbbf 	bl	1e85e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   1f0e0:	7a70      	ldrb	r0, [r6, #9]
   1f0e2:	300b      	adds	r0, #11
   1f0e4:	2800      	cmp	r0, #0
   1f0e6:	d002      	beq.n	1f0ee <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x52c>
   1f0e8:	7060      	strb	r0, [r4, #1]
   1f0ea:	1c80      	adds	r0, r0, #2
   1f0ec:	b280      	uxth	r0, r0
   1f0ee:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f0f2:	7022      	strb	r2, [r4, #0]
   1f0f4:	2026      	movs	r0, #38	; 0x26
   1f0f6:	70a0      	strb	r0, [r4, #2]
   1f0f8:	2217      	movs	r2, #23
   1f0fa:	1d29      	adds	r1, r5, #4
   1f0fc:	1ce0      	adds	r0, r4, #3
   1f0fe:	f7ff fbae 	bl	1e85e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   1f102:	2018      	movs	r0, #24
   1f104:	e7f0      	b.n	1f0e8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x526>
   1f106:	7022      	strb	r2, [r4, #0]
   1f108:	2029      	movs	r0, #41	; 0x29
   1f10a:	70a0      	strb	r0, [r4, #2]
   1f10c:	2221      	movs	r2, #33	; 0x21
   1f10e:	1d29      	adds	r1, r5, #4
   1f110:	1ce0      	adds	r0, r4, #3
   1f112:	f7ff fba4 	bl	1e85e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   1f116:	2022      	movs	r0, #34	; 0x22
   1f118:	e7e6      	b.n	1f0e8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x526>
   1f11a:	7022      	strb	r2, [r4, #0]
   1f11c:	2019      	movs	r0, #25
   1f11e:	70a0      	strb	r0, [r4, #2]
   1f120:	7928      	ldrb	r0, [r5, #4]
   1f122:	70e0      	strb	r0, [r4, #3]
   1f124:	7968      	ldrb	r0, [r5, #5]
   1f126:	7120      	strb	r0, [r4, #4]
   1f128:	f8b5 0005 	ldrh.w	r0, [r5, #5]
   1f12c:	0a00      	lsrs	r0, r0, #8
   1f12e:	7160      	strb	r0, [r4, #5]
   1f130:	88e8      	ldrh	r0, [r5, #6]
   1f132:	0a00      	lsrs	r0, r0, #8
   1f134:	71a0      	strb	r0, [r4, #6]
   1f136:	f8d5 0006 	ldr.w	r0, [r5, #6]
   1f13a:	0c00      	lsrs	r0, r0, #16
   1f13c:	71e0      	strb	r0, [r4, #7]
   1f13e:	f8d5 0006 	ldr.w	r0, [r5, #6]
   1f142:	0e00      	lsrs	r0, r0, #24
   1f144:	7220      	strb	r0, [r4, #8]
   1f146:	f8b5 0009 	ldrh.w	r0, [r5, #9]
   1f14a:	0a00      	lsrs	r0, r0, #8
   1f14c:	7260      	strb	r0, [r4, #9]
   1f14e:	f8d5 0009 	ldr.w	r0, [r5, #9]
   1f152:	0c00      	lsrs	r0, r0, #16
   1f154:	72a0      	strb	r0, [r4, #10]
   1f156:	f8d5 0009 	ldr.w	r0, [r5, #9]
   1f15a:	0e00      	lsrs	r0, r0, #24
   1f15c:	72e0      	strb	r0, [r4, #11]
   1f15e:	89a8      	ldrh	r0, [r5, #12]
   1f160:	0a00      	lsrs	r0, r0, #8
   1f162:	7320      	strb	r0, [r4, #12]
   1f164:	68e8      	ldr	r0, [r5, #12]
   1f166:	0c00      	lsrs	r0, r0, #16
   1f168:	7360      	strb	r0, [r4, #13]
   1f16a:	68e8      	ldr	r0, [r5, #12]
   1f16c:	0e00      	lsrs	r0, r0, #24
   1f16e:	73a0      	strb	r0, [r4, #14]
   1f170:	f8b5 000f 	ldrh.w	r0, [r5, #15]
   1f174:	0a00      	lsrs	r0, r0, #8
   1f176:	73e0      	strb	r0, [r4, #15]
   1f178:	f8d5 000f 	ldr.w	r0, [r5, #15]
   1f17c:	0c00      	lsrs	r0, r0, #16
   1f17e:	7420      	strb	r0, [r4, #16]
   1f180:	f8d5 000f 	ldr.w	r0, [r5, #15]
   1f184:	0e00      	lsrs	r0, r0, #24
   1f186:	7460      	strb	r0, [r4, #17]
   1f188:	7ce8      	ldrb	r0, [r5, #19]
   1f18a:	74a0      	strb	r0, [r4, #18]
   1f18c:	7d28      	ldrb	r0, [r5, #20]
   1f18e:	74e0      	strb	r0, [r4, #19]
   1f190:	7d68      	ldrb	r0, [r5, #21]
   1f192:	7520      	strb	r0, [r4, #20]
   1f194:	7da8      	ldrb	r0, [r5, #22]
   1f196:	7560      	strb	r0, [r4, #21]
   1f198:	7de8      	ldrb	r0, [r5, #23]
   1f19a:	75a0      	strb	r0, [r4, #22]
   1f19c:	7e28      	ldrb	r0, [r5, #24]
   1f19e:	75e0      	strb	r0, [r4, #23]
   1f1a0:	7e68      	ldrb	r0, [r5, #25]
   1f1a2:	7620      	strb	r0, [r4, #24]
   1f1a4:	7ea8      	ldrb	r0, [r5, #26]
   1f1a6:	7660      	strb	r0, [r4, #25]
   1f1a8:	8b68      	ldrh	r0, [r5, #26]
   1f1aa:	0a00      	lsrs	r0, r0, #8
   1f1ac:	76a0      	strb	r0, [r4, #26]
   1f1ae:	7f28      	ldrb	r0, [r5, #28]
   1f1b0:	76e0      	strb	r0, [r4, #27]
   1f1b2:	8ba8      	ldrh	r0, [r5, #28]
   1f1b4:	0a00      	lsrs	r0, r0, #8
   1f1b6:	7720      	strb	r0, [r4, #28]
   1f1b8:	7fa8      	ldrb	r0, [r5, #30]
   1f1ba:	7760      	strb	r0, [r4, #29]
   1f1bc:	8be8      	ldrh	r0, [r5, #30]
   1f1be:	0a00      	lsrs	r0, r0, #8
   1f1c0:	77a0      	strb	r0, [r4, #30]
   1f1c2:	201d      	movs	r0, #29
   1f1c4:	e790      	b.n	1f0e8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x526>
   1f1c6:	7022      	strb	r2, [r4, #0]
   1f1c8:	f884 9002 	strb.w	r9, [r4, #2]
   1f1cc:	7928      	ldrb	r0, [r5, #4]
   1f1ce:	70e0      	strb	r0, [r4, #3]
   1f1d0:	88a8      	ldrh	r0, [r5, #4]
   1f1d2:	0a00      	lsrs	r0, r0, #8
   1f1d4:	7120      	strb	r0, [r4, #4]
   1f1d6:	79a8      	ldrb	r0, [r5, #6]
   1f1d8:	7160      	strb	r0, [r4, #5]
   1f1da:	88e8      	ldrh	r0, [r5, #6]
   1f1dc:	0a00      	lsrs	r0, r0, #8
   1f1de:	71a0      	strb	r0, [r4, #6]
   1f1e0:	7a28      	ldrb	r0, [r5, #8]
   1f1e2:	71e0      	strb	r0, [r4, #7]
   1f1e4:	7a68      	ldrb	r0, [r5, #9]
   1f1e6:	7220      	strb	r0, [r4, #8]
   1f1e8:	e055      	b.n	1f296 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x6d4>
   1f1ea:	20ff      	movs	r0, #255	; 0xff
   1f1ec:	7020      	strb	r0, [r4, #0]
   1f1ee:	20a1      	movs	r0, #161	; 0xa1
   1f1f0:	70a0      	strb	r0, [r4, #2]
   1f1f2:	7928      	ldrb	r0, [r5, #4]
   1f1f4:	70e0      	strb	r0, [r4, #3]
   1f1f6:	7968      	ldrb	r0, [r5, #5]
   1f1f8:	7120      	strb	r0, [r4, #4]
   1f1fa:	2000      	movs	r0, #0
   1f1fc:	7160      	strb	r0, [r4, #5]
   1f1fe:	2004      	movs	r0, #4
   1f200:	e772      	b.n	1f0e8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x526>
   1f202:	20ff      	movs	r0, #255	; 0xff
   1f204:	7020      	strb	r0, [r4, #0]
   1f206:	20a2      	movs	r0, #162	; 0xa2
   1f208:	70a0      	strb	r0, [r4, #2]
   1f20a:	7928      	ldrb	r0, [r5, #4]
   1f20c:	70e0      	strb	r0, [r4, #3]
   1f20e:	88a8      	ldrh	r0, [r5, #4]
   1f210:	0a00      	lsrs	r0, r0, #8
   1f212:	7120      	strb	r0, [r4, #4]
   1f214:	79a8      	ldrb	r0, [r5, #6]
   1f216:	7160      	strb	r0, [r4, #5]
   1f218:	88e8      	ldrh	r0, [r5, #6]
   1f21a:	0a00      	lsrs	r0, r0, #8
   1f21c:	71a0      	strb	r0, [r4, #6]
   1f21e:	7a28      	ldrb	r0, [r5, #8]
   1f220:	71e0      	strb	r0, [r4, #7]
   1f222:	8928      	ldrh	r0, [r5, #8]
   1f224:	0a00      	lsrs	r0, r0, #8
   1f226:	7220      	strb	r0, [r4, #8]
   1f228:	7aa8      	ldrb	r0, [r5, #10]
   1f22a:	7260      	strb	r0, [r4, #9]
   1f22c:	8968      	ldrh	r0, [r5, #10]
   1f22e:	0a00      	lsrs	r0, r0, #8
   1f230:	72a0      	strb	r0, [r4, #10]
   1f232:	7b28      	ldrb	r0, [r5, #12]
   1f234:	72e0      	strb	r0, [r4, #11]
   1f236:	89a8      	ldrh	r0, [r5, #12]
   1f238:	0a00      	lsrs	r0, r0, #8
   1f23a:	7320      	strb	r0, [r4, #12]
   1f23c:	200b      	movs	r0, #11
   1f23e:	e753      	b.n	1f0e8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x526>
   1f240:	20ff      	movs	r0, #255	; 0xff
   1f242:	7020      	strb	r0, [r4, #0]
   1f244:	20a3      	movs	r0, #163	; 0xa3
   1f246:	70a0      	strb	r0, [r4, #2]
   1f248:	7928      	ldrb	r0, [r5, #4]
   1f24a:	70e0      	strb	r0, [r4, #3]
   1f24c:	88a8      	ldrh	r0, [r5, #4]
   1f24e:	0a00      	lsrs	r0, r0, #8
   1f250:	7120      	strb	r0, [r4, #4]
   1f252:	79a8      	ldrb	r0, [r5, #6]
   1f254:	7160      	strb	r0, [r4, #5]
   1f256:	79e8      	ldrb	r0, [r5, #7]
   1f258:	71a0      	strb	r0, [r4, #6]
   1f25a:	2005      	movs	r0, #5
   1f25c:	e744      	b.n	1f0e8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x526>
   1f25e:	7022      	strb	r2, [r4, #0]
   1f260:	70a3      	strb	r3, [r4, #2]
   1f262:	7928      	ldrb	r0, [r5, #4]
   1f264:	70e0      	strb	r0, [r4, #3]
   1f266:	7968      	ldrb	r0, [r5, #5]
   1f268:	7120      	strb	r0, [r4, #4]
   1f26a:	f8d5 0006 	ldr.w	r0, [r5, #6]
   1f26e:	f8c4 0005 	str.w	r0, [r4, #5]
   1f272:	8968      	ldrh	r0, [r5, #10]
   1f274:	f8a4 0009 	strh.w	r0, [r4, #9]
   1f278:	200a      	movs	r0, #10
   1f27a:	e735      	b.n	1f0e8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x526>
   1f27c:	20ff      	movs	r0, #255	; 0xff
   1f27e:	7020      	strb	r0, [r4, #0]
   1f280:	20a4      	movs	r0, #164	; 0xa4
   1f282:	70a0      	strb	r0, [r4, #2]
   1f284:	7928      	ldrb	r0, [r5, #4]
   1f286:	70e0      	strb	r0, [r4, #3]
   1f288:	88a8      	ldrh	r0, [r5, #4]
   1f28a:	0a00      	lsrs	r0, r0, #8
   1f28c:	7120      	strb	r0, [r4, #4]
   1f28e:	79a8      	ldrb	r0, [r5, #6]
   1f290:	7160      	strb	r0, [r4, #5]
   1f292:	79e8      	ldrb	r0, [r5, #7]
   1f294:	71a0      	strb	r0, [r4, #6]
   1f296:	2007      	movs	r0, #7
   1f298:	e726      	b.n	1f0e8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x526>
   1f29a:	20ff      	movs	r0, #255	; 0xff
   1f29c:	7020      	strb	r0, [r4, #0]
   1f29e:	2080      	movs	r0, #128	; 0x80
   1f2a0:	70a0      	strb	r0, [r4, #2]
   1f2a2:	88a9      	ldrh	r1, [r5, #4]
   1f2a4:	f8a4 1003 	strh.w	r1, [r4, #3]
   1f2a8:	88e9      	ldrh	r1, [r5, #6]
   1f2aa:	f8a4 1005 	strh.w	r1, [r4, #5]
   1f2ae:	7a29      	ldrb	r1, [r5, #8]
   1f2b0:	71e1      	strb	r1, [r4, #7]
   1f2b2:	8969      	ldrh	r1, [r5, #10]
   1f2b4:	8121      	strh	r1, [r4, #8]
   1f2b6:	89a9      	ldrh	r1, [r5, #12]
   1f2b8:	8161      	strh	r1, [r4, #10]
   1f2ba:	89e9      	ldrh	r1, [r5, #14]
   1f2bc:	81a1      	strh	r1, [r4, #12]
   1f2be:	7c29      	ldrb	r1, [r5, #16]
   1f2c0:	f001 0101 	and.w	r1, r1, #1
   1f2c4:	73a1      	strb	r1, [r4, #14]
   1f2c6:	200d      	movs	r0, #13
   1f2c8:	e70e      	b.n	1f0e8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x526>

0001f2ca <sym_3TBFCFZXCYDY6GUKVOWTISOQWWIRT2CJTYIBX5Y>:
   1f2ca:	223e      	movs	r2, #62	; 0x3e
   1f2cc:	7002      	strb	r2, [r0, #0]
   1f2ce:	2201      	movs	r2, #1
   1f2d0:	7082      	strb	r2, [r0, #2]
   1f2d2:	f811 2f04 	ldrb.w	r2, [r1, #4]!
   1f2d6:	70c2      	strb	r2, [r0, #3]
   1f2d8:	788a      	ldrb	r2, [r1, #2]
   1f2da:	7102      	strb	r2, [r0, #4]
   1f2dc:	884a      	ldrh	r2, [r1, #2]
   1f2de:	0a12      	lsrs	r2, r2, #8
   1f2e0:	7142      	strb	r2, [r0, #5]
   1f2e2:	790a      	ldrb	r2, [r1, #4]
   1f2e4:	7182      	strb	r2, [r0, #6]
   1f2e6:	794a      	ldrb	r2, [r1, #5]
   1f2e8:	71c2      	strb	r2, [r0, #7]
   1f2ea:	f8d1 2006 	ldr.w	r2, [r1, #6]
   1f2ee:	6082      	str	r2, [r0, #8]
   1f2f0:	894a      	ldrh	r2, [r1, #10]
   1f2f2:	8182      	strh	r2, [r0, #12]
   1f2f4:	7e0a      	ldrb	r2, [r1, #24]
   1f2f6:	7382      	strb	r2, [r0, #14]
   1f2f8:	8b0a      	ldrh	r2, [r1, #24]
   1f2fa:	0a12      	lsrs	r2, r2, #8
   1f2fc:	73c2      	strb	r2, [r0, #15]
   1f2fe:	7e8a      	ldrb	r2, [r1, #26]
   1f300:	7402      	strb	r2, [r0, #16]
   1f302:	8b4a      	ldrh	r2, [r1, #26]
   1f304:	0a12      	lsrs	r2, r2, #8
   1f306:	7442      	strb	r2, [r0, #17]
   1f308:	7f0a      	ldrb	r2, [r1, #28]
   1f30a:	7482      	strb	r2, [r0, #18]
   1f30c:	8b8a      	ldrh	r2, [r1, #28]
   1f30e:	0a12      	lsrs	r2, r2, #8
   1f310:	74c2      	strb	r2, [r0, #19]
   1f312:	7f89      	ldrb	r1, [r1, #30]
   1f314:	7501      	strb	r1, [r0, #20]
   1f316:	2113      	movs	r1, #19
   1f318:	7041      	strb	r1, [r0, #1]
   1f31a:	4608      	mov	r0, r1
   1f31c:	4770      	bx	lr
   1f31e:	094a      	lsrs	r2, r1, #5
   1f320:	f001 011f 	and.w	r1, r1, #31
   1f324:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
   1f328:	40c8      	lsrs	r0, r1
   1f32a:	f000 0001 	and.w	r0, r0, #1
   1f32e:	4770      	bx	lr

0001f330 <sdc_hci_data_put>:
   1f330:	b510      	push	{r4, lr}
   1f332:	f06f 0415 	mvn.w	r4, #21
   1f336:	b120      	cbz	r0, 1f342 <sdc_hci_data_put+0x12>
   1f338:	f7ff fbf2 	bl	1eb20 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY>
   1f33c:	b108      	cbz	r0, 1f342 <sdc_hci_data_put+0x12>
   1f33e:	2000      	movs	r0, #0
   1f340:	bd10      	pop	{r4, pc}
   1f342:	4620      	mov	r0, r4
   1f344:	bd10      	pop	{r4, pc}

0001f346 <sdc_hci_get>:
   1f346:	b510      	push	{r4, lr}
   1f348:	460c      	mov	r4, r1
   1f34a:	b130      	cbz	r0, 1f35a <sdc_hci_get+0x14>
   1f34c:	b12c      	cbz	r4, 1f35a <sdc_hci_get+0x14>
   1f34e:	f7f2 fc11 	bl	11b74 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A>
   1f352:	b128      	cbz	r0, 1f360 <sdc_hci_get+0x1a>
   1f354:	7020      	strb	r0, [r4, #0]
   1f356:	2000      	movs	r0, #0
   1f358:	bd10      	pop	{r4, pc}
   1f35a:	f06f 0015 	mvn.w	r0, #21
   1f35e:	bd10      	pop	{r4, pc}
   1f360:	f06f 0022 	mvn.w	r0, #34	; 0x22
   1f364:	bd10      	pop	{r4, pc}

0001f366 <sdc_hci_cmd_cb_read_authenticated_payload_timeout>:
   1f366:	f003 bb5f 	b.w	22a28 <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y>

0001f36a <sdc_hci_cmd_cb_read_transmit_power_level>:
   1f36a:	f003 bbb2 	b.w	22ad2 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ>

0001f36e <sdc_hci_cmd_cb_set_event_mask>:
   1f36e:	b510      	push	{r4, lr}
   1f370:	f7f2 fcca 	bl	11d08 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>
   1f374:	2000      	movs	r0, #0
   1f376:	bd10      	pop	{r4, pc}

0001f378 <sdc_hci_cmd_cb_set_event_mask_page_2>:
   1f378:	b510      	push	{r4, lr}
   1f37a:	f7f2 fcd5 	bl	11d28 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA>
   1f37e:	2000      	movs	r0, #0
   1f380:	bd10      	pop	{r4, pc}

0001f382 <sdc_hci_cmd_cb_write_authenticated_payload_timeout>:
   1f382:	f003 bbc2 	b.w	22b0a <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY>

0001f386 <sdc_hci_cmd_vs_conn_event_extend>:
   1f386:	b508      	push	{r3, lr}
   1f388:	7800      	ldrb	r0, [r0, #0]
   1f38a:	f88d 0000 	strb.w	r0, [sp]
   1f38e:	4668      	mov	r0, sp
   1f390:	f003 fa30 	bl	227f4 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
   1f394:	bd08      	pop	{r3, pc}

0001f396 <sdc_hci_cmd_vs_conn_update>:
   1f396:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   1f398:	2100      	movs	r1, #0
   1f39a:	9100      	str	r1, [sp, #0]
   1f39c:	9101      	str	r1, [sp, #4]
   1f39e:	9102      	str	r1, [sp, #8]
   1f3a0:	9103      	str	r1, [sp, #12]
   1f3a2:	f8d0 1002 	ldr.w	r1, [r0, #2]
   1f3a6:	f641 524c 	movw	r2, #7500	; 0x1d4c
   1f3aa:	4291      	cmp	r1, r2
   1f3ac:	d304      	bcc.n	1f3b8 <sdc_hci_cmd_vs_conn_update+0x22>
   1f3ae:	f240 42e2 	movw	r2, #1250	; 0x4e2
   1f3b2:	fbb1 f1f2 	udiv	r1, r1, r2
   1f3b6:	e005      	b.n	1f3c4 <sdc_hci_cmd_vs_conn_update+0x2e>
   1f3b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1f3bc:	fbb1 f1f2 	udiv	r1, r1, r2
   1f3c0:	f501 6150 	add.w	r1, r1, #3328	; 0xd00
   1f3c4:	8802      	ldrh	r2, [r0, #0]
   1f3c6:	b289      	uxth	r1, r1
   1f3c8:	f8ad 2000 	strh.w	r2, [sp]
   1f3cc:	f8ad 1002 	strh.w	r1, [sp, #2]
   1f3d0:	f8ad 1004 	strh.w	r1, [sp, #4]
   1f3d4:	88c1      	ldrh	r1, [r0, #6]
   1f3d6:	f8ad 1006 	strh.w	r1, [sp, #6]
   1f3da:	8900      	ldrh	r0, [r0, #8]
   1f3dc:	f8ad 0008 	strh.w	r0, [sp, #8]
   1f3e0:	4668      	mov	r0, sp
   1f3e2:	f002 fed9 	bl	22198 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q>
   1f3e6:	b004      	add	sp, #16
   1f3e8:	bd10      	pop	{r4, pc}

0001f3ea <sdc_hci_cmd_vs_event_length_set>:
   1f3ea:	f7fc b93b 	b.w	1b664 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>

0001f3ee <sdc_hci_cmd_vs_llpm_mode_set>:
   1f3ee:	b508      	push	{r3, lr}
   1f3f0:	7800      	ldrb	r0, [r0, #0]
   1f3f2:	f88d 0000 	strb.w	r0, [sp]
   1f3f6:	4668      	mov	r0, sp
   1f3f8:	f7fc f940 	bl	1b67c <sym_RWX3ARC7RXCSYIP35ROTG7DUC5BPFDQF4B6XSYQ>
   1f3fc:	bd08      	pop	{r3, pc}

0001f3fe <sdc_hci_cmd_vs_peripheral_latency_mode_set>:
   1f3fe:	7881      	ldrb	r1, [r0, #2]
   1f400:	8800      	ldrh	r0, [r0, #0]
   1f402:	f003 b9a5 	b.w	22750 <sym_HZRUCXEK6VH2SKHLITFSCAH5JZW3VUS5CZD2RBY>

0001f406 <sdc_hci_cmd_vs_qos_conn_event_report_enable>:
   1f406:	7800      	ldrb	r0, [r0, #0]
   1f408:	b100      	cbz	r0, 1f40c <sdc_hci_cmd_vs_qos_conn_event_report_enable+0x6>
   1f40a:	2001      	movs	r0, #1
   1f40c:	f003 b99b 	b.w	22746 <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>

0001f410 <sdc_hci_cmd_vs_set_adv_randomness>:
   1f410:	f003 b9cd 	b.w	227ae <sym_UBZJS2DDJXFBNL4D7RG3NTLQLLLCEP5IJ3L4GHI>

0001f414 <sdc_hci_cmd_vs_zephyr_read_chip_temp>:
   1f414:	b510      	push	{r4, lr}
   1f416:	4604      	mov	r4, r0
   1f418:	f7f1 feee 	bl	111f8 <mpsl_temperature_get>
   1f41c:	17c1      	asrs	r1, r0, #31
   1f41e:	eb00 7091 	add.w	r0, r0, r1, lsr #30
   1f422:	1080      	asrs	r0, r0, #2
   1f424:	287f      	cmp	r0, #127	; 0x7f
   1f426:	dd01      	ble.n	1f42c <sdc_hci_cmd_vs_zephyr_read_chip_temp+0x18>
   1f428:	207f      	movs	r0, #127	; 0x7f
   1f42a:	e004      	b.n	1f436 <sdc_hci_cmd_vs_zephyr_read_chip_temp+0x22>
   1f42c:	f06f 017e 	mvn.w	r1, #126	; 0x7e
   1f430:	4288      	cmp	r0, r1
   1f432:	da00      	bge.n	1f436 <sdc_hci_cmd_vs_zephyr_read_chip_temp+0x22>
   1f434:	4608      	mov	r0, r1
   1f436:	7020      	strb	r0, [r4, #0]
   1f438:	2000      	movs	r0, #0
   1f43a:	bd10      	pop	{r4, pc}

0001f43c <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>:
   1f43c:	b570      	push	{r4, r5, r6, lr}
   1f43e:	4605      	mov	r5, r0
   1f440:	2210      	movs	r2, #16
   1f442:	2100      	movs	r1, #0
   1f444:	f7ff fa85 	bl	1e952 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
   1f448:	2210      	movs	r2, #16
   1f44a:	2100      	movs	r1, #0
   1f44c:	f105 0010 	add.w	r0, r5, #16
   1f450:	f7ff fa7f 	bl	1e952 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
   1f454:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
   1f458:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
   1f45c:	1c40      	adds	r0, r0, #1
   1f45e:	d10b      	bne.n	1f478 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
   1f460:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
   1f464:	1c40      	adds	r0, r0, #1
   1f466:	d107      	bne.n	1f478 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
   1f468:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   1f46c:	1c40      	adds	r0, r0, #1
   1f46e:	d103      	bne.n	1f478 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
   1f470:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
   1f474:	1c40      	adds	r0, r0, #1
   1f476:	d00b      	beq.n	1f490 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x54>
   1f478:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
   1f47c:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
   1f480:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
   1f484:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
   1f488:	612a      	str	r2, [r5, #16]
   1f48a:	6168      	str	r0, [r5, #20]
   1f48c:	61a9      	str	r1, [r5, #24]
   1f48e:	61eb      	str	r3, [r5, #28]
   1f490:	2000      	movs	r0, #0
   1f492:	f7f3 fadd 	bl	12a50 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
   1f496:	b918      	cbnz	r0, 1f4a0 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x64>
   1f498:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
   1f49c:	07c0      	lsls	r0, r0, #31
   1f49e:	d118      	bne.n	1f4d2 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x96>
   1f4a0:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
   1f4a4:	1c40      	adds	r0, r0, #1
   1f4a6:	d10b      	bne.n	1f4c0 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
   1f4a8:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
   1f4ac:	1c40      	adds	r0, r0, #1
   1f4ae:	d107      	bne.n	1f4c0 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
   1f4b0:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
   1f4b4:	1c40      	adds	r0, r0, #1
   1f4b6:	d103      	bne.n	1f4c0 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
   1f4b8:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
   1f4bc:	1c40      	adds	r0, r0, #1
   1f4be:	d008      	beq.n	1f4d2 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x96>
   1f4c0:	f854 0f90 	ldr.w	r0, [r4, #144]!
   1f4c4:	6861      	ldr	r1, [r4, #4]
   1f4c6:	68a2      	ldr	r2, [r4, #8]
   1f4c8:	68e3      	ldr	r3, [r4, #12]
   1f4ca:	6028      	str	r0, [r5, #0]
   1f4cc:	6069      	str	r1, [r5, #4]
   1f4ce:	60aa      	str	r2, [r5, #8]
   1f4d0:	60eb      	str	r3, [r5, #12]
   1f4d2:	2000      	movs	r0, #0
   1f4d4:	bd70      	pop	{r4, r5, r6, pc}

0001f4d6 <sdc_hci_cmd_vs_zephyr_read_static_addresses>:
   1f4d6:	b538      	push	{r3, r4, r5, lr}
   1f4d8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   1f4dc:	4604      	mov	r4, r0
   1f4de:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
   1f4e2:	1c40      	adds	r0, r0, #1
   1f4e4:	d105      	bne.n	1f4f2 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x1c>
   1f4e6:	f8d5 00a8 	ldr.w	r0, [r5, #168]	; 0xa8
   1f4ea:	43c0      	mvns	r0, r0
   1f4ec:	0400      	lsls	r0, r0, #16
   1f4ee:	0c00      	lsrs	r0, r0, #16
   1f4f0:	d03e      	beq.n	1f570 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x9a>
   1f4f2:	f8d5 00a0 	ldr.w	r0, [r5, #160]	; 0xa0
   1f4f6:	07c0      	lsls	r0, r0, #31
   1f4f8:	d03a      	beq.n	1f570 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x9a>
   1f4fa:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
   1f4fe:	f8d5 10a8 	ldr.w	r1, [r5, #168]	; 0xa8
   1f502:	f8ad 1000 	strh.w	r1, [sp]
   1f506:	f8c4 0001 	str.w	r0, [r4, #1]
   1f50a:	f8bd 0000 	ldrh.w	r0, [sp]
   1f50e:	f8a4 0005 	strh.w	r0, [r4, #5]
   1f512:	79a0      	ldrb	r0, [r4, #6]
   1f514:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
   1f518:	71a0      	strb	r0, [r4, #6]
   1f51a:	f8d5 0090 	ldr.w	r0, [r5, #144]	; 0x90
   1f51e:	1c40      	adds	r0, r0, #1
   1f520:	d00f      	beq.n	1f542 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
   1f522:	f8d5 0094 	ldr.w	r0, [r5, #148]	; 0x94
   1f526:	1c40      	adds	r0, r0, #1
   1f528:	d00b      	beq.n	1f542 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
   1f52a:	f8d5 0098 	ldr.w	r0, [r5, #152]	; 0x98
   1f52e:	1c40      	adds	r0, r0, #1
   1f530:	d007      	beq.n	1f542 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
   1f532:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
   1f536:	1c40      	adds	r0, r0, #1
   1f538:	d003      	beq.n	1f542 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
   1f53a:	2000      	movs	r0, #0
   1f53c:	f7f3 fa88 	bl	12a50 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
   1f540:	b140      	cbz	r0, 1f554 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x7e>
   1f542:	2210      	movs	r2, #16
   1f544:	2100      	movs	r1, #0
   1f546:	1de0      	adds	r0, r4, #7
   1f548:	f7ff fa03 	bl	1e952 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
   1f54c:	2001      	movs	r0, #1
   1f54e:	7020      	strb	r0, [r4, #0]
   1f550:	2000      	movs	r0, #0
   1f552:	bd38      	pop	{r3, r4, r5, pc}
   1f554:	f855 2f90 	ldr.w	r2, [r5, #144]!
   1f558:	6869      	ldr	r1, [r5, #4]
   1f55a:	68a8      	ldr	r0, [r5, #8]
   1f55c:	68eb      	ldr	r3, [r5, #12]
   1f55e:	f8c4 2007 	str.w	r2, [r4, #7]
   1f562:	f8c4 100b 	str.w	r1, [r4, #11]
   1f566:	f8c4 000f 	str.w	r0, [r4, #15]
   1f56a:	f8c4 3013 	str.w	r3, [r4, #19]
   1f56e:	e7ed      	b.n	1f54c <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x76>
   1f570:	2000      	movs	r0, #0
   1f572:	e7ec      	b.n	1f54e <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x78>

0001f574 <sdc_hci_cmd_vs_zephyr_write_bd_addr>:
   1f574:	f003 b930 	b.w	227d8 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>

0001f578 <sdc_hci_cmd_ip_read_bd_addr>:
   1f578:	f003 ba67 	b.w	22a4a <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>

0001f57c <sdc_hci_cmd_ip_read_local_version_information>:
   1f57c:	f7fc b89e 	b.w	1b6bc <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>

0001f580 <sdc_hci_cmd_le_add_device_to_filter_accept_list>:
   1f580:	f002 bde3 	b.w	2214a <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>

0001f584 <sdc_hci_cmd_le_clear_adv_sets>:
   1f584:	f7fb beb8 	b.w	1b2f8 <sym_I732BH4NXXB6CLIZXDAFDSMHDSVEYZLNAFI3W2Q>

0001f588 <sdc_hci_cmd_le_clear_filter_accept_list>:
   1f588:	f002 bdfc 	b.w	22184 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>

0001f58c <sdc_hci_cmd_le_encrypt>:
   1f58c:	f002 be55 	b.w	2223a <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>

0001f590 <sdc_hci_cmd_le_long_term_key_request_negative_reply>:
   1f590:	8802      	ldrh	r2, [r0, #0]
   1f592:	800a      	strh	r2, [r1, #0]
   1f594:	f002 be5a 	b.w	2224c <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA>

0001f598 <sdc_hci_cmd_le_long_term_key_request_reply>:
   1f598:	8802      	ldrh	r2, [r0, #0]
   1f59a:	800a      	strh	r2, [r1, #0]
   1f59c:	f002 be6f 	b.w	2227e <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI>

0001f5a0 <sdc_hci_cmd_le_rand>:
   1f5a0:	f002 be97 	b.w	222d2 <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>

0001f5a4 <sdc_hci_cmd_le_read_adv_physical_channel_tx_power>:
   1f5a4:	f002 be9b 	b.w	222de <sym_IZN3QWH7I4A7OX5E6DK53W35W3UX25DTZ6CQ57Q>

0001f5a8 <sdc_hci_cmd_le_read_buffer_size>:
   1f5a8:	f7fb bec2 	b.w	1b330 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>

0001f5ac <sdc_hci_cmd_le_read_channel_map>:
   1f5ac:	f7fb beca 	b.w	1b344 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY>

0001f5b0 <sdc_hci_cmd_le_read_filter_accept_list_size>:
   1f5b0:	f002 bee8 	b.w	22384 <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>

0001f5b4 <sdc_hci_cmd_le_read_max_adv_data_length>:
   1f5b4:	f002 be9c 	b.w	222f0 <sym_HN6JPFYV5RALEY5SK42AILWQ3BESLOSWO6JLUAY>

0001f5b8 <sdc_hci_cmd_le_read_max_data_length>:
   1f5b8:	f002 bea4 	b.w	22304 <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A>

0001f5bc <sdc_hci_cmd_le_read_number_of_supported_adv_sets>:
   1f5bc:	f002 beab 	b.w	22316 <sym_B56D6C76IM4AAFDQEOHND3OAZFOQIH7L5TPFHMY>

0001f5c0 <sdc_hci_cmd_le_read_phy>:
   1f5c0:	f7fb bee8 	b.w	1b394 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A>

0001f5c4 <sdc_hci_cmd_le_read_remote_features>:
   1f5c4:	f002 beb2 	b.w	2232c <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI>

0001f5c8 <sdc_hci_cmd_le_read_suggested_default_data_length>:
   1f5c8:	f7fb bf0a 	b.w	1b3e0 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q>

0001f5cc <sdc_hci_cmd_le_read_transmit_power>:
   1f5cc:	f002 bed1 	b.w	22372 <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>

0001f5d0 <sdc_hci_cmd_le_remove_adv_set>:
   1f5d0:	f003 bb56 	b.w	22c80 <sym_CY26ZDKPCAPZODXUI4S7AB6G3B2EI2A66B45STA>

0001f5d4 <sdc_hci_cmd_le_remove_device_from_filter_accept_list>:
   1f5d4:	f002 beda 	b.w	2238c <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>

0001f5d8 <sdc_hci_cmd_le_set_adv_data>:
   1f5d8:	f002 bef4 	b.w	223c4 <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I>

0001f5dc <sdc_hci_cmd_le_set_adv_enable>:
   1f5dc:	f002 bf07 	b.w	223ee <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ>

0001f5e0 <sdc_hci_cmd_le_set_adv_params>:
   1f5e0:	f002 bf38 	b.w	22454 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI>

0001f5e4 <sdc_hci_cmd_le_set_adv_set_random_address>:
   1f5e4:	f002 bfad 	b.w	22542 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II>

0001f5e8 <sdc_hci_cmd_le_set_data_length>:
   1f5e8:	f002 bfc9 	b.w	2257e <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA>

0001f5ec <sdc_hci_cmd_le_set_data_related_address_changes>:
   1f5ec:	f002 bfe7 	b.w	225be <sym_QUXPDBBA3LF6URTUQCXVFN4UTAQY2K4DGZD5OMY>

0001f5f0 <sdc_hci_cmd_le_set_default_phy>:
   1f5f0:	f7fb bf00 	b.w	1b3f4 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA>

0001f5f4 <sdc_hci_cmd_le_set_event_mask>:
   1f5f4:	b510      	push	{r4, lr}
   1f5f6:	f7f2 fb7f 	bl	11cf8 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>
   1f5fa:	2000      	movs	r0, #0
   1f5fc:	bd10      	pop	{r4, pc}

0001f5fe <sdc_hci_cmd_le_set_ext_adv_data>:
   1f5fe:	f002 bff6 	b.w	225ee <sym_2DM5GQNBROHI7PDNQDIVTLWENS2Q5ZHESY5XK3A>

0001f602 <sdc_hci_cmd_le_set_ext_adv_enable>:
   1f602:	b510      	push	{r4, lr}
   1f604:	4604      	mov	r4, r0
   1f606:	2001      	movs	r0, #1
   1f608:	f7f2 fb28 	bl	11c5c <sym_Q4MVB6BAYYKAN3YZ2SZEJW6V5OITCIHY2IOHXKY>
   1f60c:	4620      	mov	r0, r4
   1f60e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1f612:	f7fb bf17 	b.w	1b444 <sym_D6MVGRLHYJG252OE4SOFHNIQS6JTUDSSXUELC5I>

0001f616 <sdc_hci_cmd_le_set_ext_adv_params>:
   1f616:	f003 b809 	b.w	2262c <sym_L45ZDH7ERT2JU2EYJULISF6MIOPRO4R2CFYVZAY>

0001f61a <sdc_hci_cmd_le_set_ext_scan_response_data>:
   1f61a:	f003 b828 	b.w	2266e <sym_D3BVO22ZDNB5P42SIYACSGDFHQS4QFSVERKUH4Q>

0001f61e <sdc_hci_cmd_le_set_host_channel_classification>:
   1f61e:	f7fb bf51 	b.w	1b4c4 <sym_THCISJNP2ER2HFLUHGJZXHIPWIUIL2ZENNEO5RI>

0001f622 <sdc_hci_cmd_le_set_phy>:
   1f622:	f003 b843 	b.w	226ac <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI>

0001f626 <sdc_hci_cmd_le_set_random_address>:
   1f626:	f003 b85a 	b.w	226de <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>

0001f62a <sdc_hci_cmd_le_set_scan_response_data>:
   1f62a:	f003 b866 	b.w	226fa <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI>

0001f62e <sdc_hci_cmd_le_write_suggested_default_data_length>:
   1f62e:	f003 b879 	b.w	22724 <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y>

0001f632 <sdc_hci_cmd_lc_disconnect>:
   1f632:	f002 bd32 	b.w	2209a <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ>

0001f636 <sdc_hci_cmd_lc_read_remote_version_information>:
   1f636:	f003 ba14 	b.w	22a62 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY>
   1f63a:	1d49      	adds	r1, r1, #5
   1f63c:	4408      	add	r0, r1
   1f63e:	4350      	muls	r0, r2
   1f640:	b280      	uxth	r0, r0
   1f642:	4770      	bx	lr
   1f644:	b570      	push	{r4, r5, r6, lr}
   1f646:	880b      	ldrh	r3, [r1, #0]
   1f648:	7cc4      	ldrb	r4, [r0, #19]
   1f64a:	f100 0618 	add.w	r6, r0, #24
   1f64e:	f3c3 050e 	ubfx	r5, r3, #0, #15
   1f652:	8802      	ldrh	r2, [r0, #0]
   1f654:	442e      	add	r6, r5
   1f656:	1d64      	adds	r4, r4, #5
   1f658:	8836      	ldrh	r6, [r6, #0]
   1f65a:	4422      	add	r2, r4
   1f65c:	b292      	uxth	r2, r2
   1f65e:	4426      	add	r6, r4
   1f660:	1e54      	subs	r4, r2, #1
   1f662:	4434      	add	r4, r6
   1f664:	fb94 f4f2 	sdiv	r4, r4, r2
   1f668:	fb02 5204 	mla	r2, r2, r4, r5
   1f66c:	8840      	ldrh	r0, [r0, #2]
   1f66e:	b292      	uxth	r2, r2
   1f670:	4290      	cmp	r0, r2
   1f672:	d903      	bls.n	1f67c <sdc_hci_cmd_lc_read_remote_version_information+0x46>
   1f674:	f403 4000 	and.w	r0, r3, #32768	; 0x8000
   1f678:	4310      	orrs	r0, r2
   1f67a:	e002      	b.n	1f682 <sdc_hci_cmd_lc_read_remote_version_information+0x4c>
   1f67c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   1f680:	4398      	bics	r0, r3
   1f682:	8008      	strh	r0, [r1, #0]
   1f684:	bd70      	pop	{r4, r5, r6, pc}
   1f686:	4288      	cmp	r0, r1
   1f688:	d101      	bne.n	1f68e <sdc_hci_cmd_lc_read_remote_version_information+0x58>
   1f68a:	2001      	movs	r0, #1
   1f68c:	4770      	bx	lr
   1f68e:	2000      	movs	r0, #0
   1f690:	4770      	bx	lr
   1f692:	0442      	lsls	r2, r0, #17
   1f694:	ebb2 4f41 	cmp.w	r2, r1, lsl #17
   1f698:	d107      	bne.n	1f6aa <sdc_hci_cmd_lc_read_remote_version_information+0x74>
   1f69a:	f400 4000 	and.w	r0, r0, #32768	; 0x8000
   1f69e:	f401 4100 	and.w	r1, r1, #32768	; 0x8000
   1f6a2:	4288      	cmp	r0, r1
   1f6a4:	d001      	beq.n	1f6aa <sdc_hci_cmd_lc_read_remote_version_information+0x74>
   1f6a6:	2001      	movs	r0, #1
   1f6a8:	4770      	bx	lr
   1f6aa:	2000      	movs	r0, #0
   1f6ac:	4770      	bx	lr

0001f6ae <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>:
   1f6ae:	88c1      	ldrh	r1, [r0, #6]
   1f6b0:	8880      	ldrh	r0, [r0, #4]
   1f6b2:	f7ff bfe8 	b.w	1f686 <sdc_hci_cmd_lc_read_remote_version_information+0x50>

0001f6b6 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA>:
   1f6b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f6ba:	460f      	mov	r7, r1
   1f6bc:	4604      	mov	r4, r0
   1f6be:	f100 0118 	add.w	r1, r0, #24
   1f6c2:	8880      	ldrh	r0, [r0, #4]
   1f6c4:	2600      	movs	r6, #0
   1f6c6:	f3c0 000e 	ubfx	r0, r0, #0, #15
   1f6ca:	1845      	adds	r5, r0, r1
   1f6cc:	603e      	str	r6, [r7, #0]
   1f6ce:	89e0      	ldrh	r0, [r4, #14]
   1f6d0:	2800      	cmp	r0, #0
   1f6d2:	d016      	beq.n	1f702 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x4c>
   1f6d4:	8961      	ldrh	r1, [r4, #10]
   1f6d6:	4408      	add	r0, r1
   1f6d8:	b280      	uxth	r0, r0
   1f6da:	8160      	strh	r0, [r4, #10]
   1f6dc:	8829      	ldrh	r1, [r5, #0]
   1f6de:	4288      	cmp	r0, r1
   1f6e0:	d905      	bls.n	1f6ee <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x38>
   1f6e2:	f44f 71a9 	mov.w	r1, #338	; 0x152
   1f6e6:	f04f 0014 	mov.w	r0, #20
   1f6ea:	f7f2 f949 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1f6ee:	d106      	bne.n	1f6fe <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x48>
   1f6f0:	f104 0104 	add.w	r1, r4, #4
   1f6f4:	4620      	mov	r0, r4
   1f6f6:	f7ff ffa5 	bl	1f644 <sdc_hci_cmd_lc_read_remote_version_information+0xe>
   1f6fa:	8166      	strh	r6, [r4, #10]
   1f6fc:	603d      	str	r5, [r7, #0]
   1f6fe:	81e6      	strh	r6, [r4, #14]
   1f700:	2001      	movs	r0, #1
   1f702:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001f706 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>:
   1f706:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f70a:	4604      	mov	r4, r0
   1f70c:	f100 0318 	add.w	r3, r0, #24
   1f710:	88c0      	ldrh	r0, [r0, #6]
   1f712:	460f      	mov	r7, r1
   1f714:	f3c0 060e 	ubfx	r6, r0, #0, #15
   1f718:	8a20      	ldrh	r0, [r4, #16]
   1f71a:	1999      	adds	r1, r3, r6
   1f71c:	b108      	cbz	r0, 1f722 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1c>
   1f71e:	42b8      	cmp	r0, r7
   1f720:	d202      	bcs.n	1f728 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x22>
   1f722:	2000      	movs	r0, #0
   1f724:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1f728:	89a0      	ldrh	r0, [r4, #12]
   1f72a:	2500      	movs	r5, #0
   1f72c:	b140      	cbz	r0, 1f740 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x3a>
   1f72e:	f8b1 c000 	ldrh.w	ip, [r1]
   1f732:	4560      	cmp	r0, ip
   1f734:	d006      	beq.n	1f744 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x3e>
   1f736:	f240 2105 	movw	r1, #517	; 0x205
   1f73a:	2014      	movs	r0, #20
   1f73c:	f7f2 f920 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1f740:	800d      	strh	r5, [r1, #0]
   1f742:	e00e      	b.n	1f762 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x5c>
   1f744:	f894 c013 	ldrb.w	ip, [r4, #19]
   1f748:	4418      	add	r0, r3
   1f74a:	f10c 0c05 	add.w	ip, ip, #5
   1f74e:	44b4      	add	ip, r6
   1f750:	4460      	add	r0, ip
   1f752:	f8b4 c014 	ldrh.w	ip, [r4, #20]
   1f756:	f820 cc03 	strh.w	ip, [r0, #-3]
   1f75a:	f894 c016 	ldrb.w	ip, [r4, #22]
   1f75e:	f800 cc01 	strb.w	ip, [r0, #-1]
   1f762:	89a0      	ldrh	r0, [r4, #12]
   1f764:	4438      	add	r0, r7
   1f766:	81a0      	strh	r0, [r4, #12]
   1f768:	8808      	ldrh	r0, [r1, #0]
   1f76a:	4438      	add	r0, r7
   1f76c:	8008      	strh	r0, [r1, #0]
   1f76e:	b12a      	cbz	r2, 1f77c <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x76>
   1f770:	1da1      	adds	r1, r4, #6
   1f772:	4620      	mov	r0, r4
   1f774:	f7ff ff66 	bl	1f644 <sdc_hci_cmd_lc_read_remote_version_information+0xe>
   1f778:	81a5      	strh	r5, [r4, #12]
   1f77a:	e00a      	b.n	1f792 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x8c>
   1f77c:	7ce0      	ldrb	r0, [r4, #19]
   1f77e:	89a1      	ldrh	r1, [r4, #12]
   1f780:	1d40      	adds	r0, r0, #5
   1f782:	4430      	add	r0, r6
   1f784:	4419      	add	r1, r3
   1f786:	4408      	add	r0, r1
   1f788:	f830 1d03 	ldrh.w	r1, [r0, #-3]!
   1f78c:	82a1      	strh	r1, [r4, #20]
   1f78e:	7880      	ldrb	r0, [r0, #2]
   1f790:	75a0      	strb	r0, [r4, #22]
   1f792:	8225      	strh	r5, [r4, #16]
   1f794:	2001      	movs	r0, #1
   1f796:	e7c5      	b.n	1f724 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1e>

0001f798 <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>:
   1f798:	1c80      	adds	r0, r0, #2
   1f79a:	4770      	bx	lr

0001f79c <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>:
   1f79c:	b510      	push	{r4, lr}
   1f79e:	4604      	mov	r4, r0
   1f7a0:	88c1      	ldrh	r1, [r0, #6]
   1f7a2:	8880      	ldrh	r0, [r0, #4]
   1f7a4:	f7ff ff6f 	bl	1f686 <sdc_hci_cmd_lc_read_remote_version_information+0x50>
   1f7a8:	b918      	cbnz	r0, 1f7b2 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x16>
   1f7aa:	8960      	ldrh	r0, [r4, #10]
   1f7ac:	b908      	cbnz	r0, 1f7b2 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x16>
   1f7ae:	89e0      	ldrh	r0, [r4, #14]
   1f7b0:	b108      	cbz	r0, 1f7b6 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x1a>
   1f7b2:	2000      	movs	r0, #0
   1f7b4:	bd10      	pop	{r4, pc}
   1f7b6:	1d21      	adds	r1, r4, #4
   1f7b8:	4620      	mov	r0, r4
   1f7ba:	f7ff ff43 	bl	1f644 <sdc_hci_cmd_lc_read_remote_version_information+0xe>
   1f7be:	2000      	movs	r0, #0
   1f7c0:	81e0      	strh	r0, [r4, #14]
   1f7c2:	2001      	movs	r0, #1
   1f7c4:	bd10      	pop	{r4, pc}

0001f7c6 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ>:
   1f7c6:	b510      	push	{r4, lr}
   1f7c8:	4604      	mov	r4, r0
   1f7ca:	f100 0318 	add.w	r3, r0, #24
   1f7ce:	88c0      	ldrh	r0, [r0, #6]
   1f7d0:	f3c0 000e 	ubfx	r0, r0, #0, #15
   1f7d4:	181a      	adds	r2, r3, r0
   1f7d6:	8820      	ldrh	r0, [r4, #0]
   1f7d8:	2845      	cmp	r0, #69	; 0x45
   1f7da:	d200      	bcs.n	1f7de <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x18>
   1f7dc:	2045      	movs	r0, #69	; 0x45
   1f7de:	4288      	cmp	r0, r1
   1f7e0:	d204      	bcs.n	1f7ec <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x26>
   1f7e2:	f240 1105 	movw	r1, #261	; 0x105
   1f7e6:	2014      	movs	r0, #20
   1f7e8:	f7f2 f8ca 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1f7ec:	7ca0      	ldrb	r0, [r4, #18]
   1f7ee:	2800      	cmp	r0, #0
   1f7f0:	d003      	beq.n	1f7fa <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x34>
   1f7f2:	8810      	ldrh	r0, [r2, #0]
   1f7f4:	4288      	cmp	r0, r1
   1f7f6:	d201      	bcs.n	1f7fc <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x36>
   1f7f8:	2000      	movs	r0, #0
   1f7fa:	bd10      	pop	{r4, pc}
   1f7fc:	8011      	strh	r1, [r2, #0]
   1f7fe:	1da1      	adds	r1, r4, #6
   1f800:	4620      	mov	r0, r4
   1f802:	f7ff ff1f 	bl	1f644 <sdc_hci_cmd_lc_read_remote_version_information+0xe>
   1f806:	2000      	movs	r0, #0
   1f808:	74a0      	strb	r0, [r4, #18]
   1f80a:	2001      	movs	r0, #1
   1f80c:	bd10      	pop	{r4, pc}

0001f80e <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>:
   1f80e:	b570      	push	{r4, r5, r6, lr}
   1f810:	4604      	mov	r4, r0
   1f812:	f100 0218 	add.w	r2, r0, #24
   1f816:	88c1      	ldrh	r1, [r0, #6]
   1f818:	8880      	ldrh	r0, [r0, #4]
   1f81a:	f3c0 030e 	ubfx	r3, r0, #0, #15
   1f81e:	18d5      	adds	r5, r2, r3
   1f820:	f7ff ff31 	bl	1f686 <sdc_hci_cmd_lc_read_remote_version_information+0x50>
   1f824:	b908      	cbnz	r0, 1f82a <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x1c>
   1f826:	8960      	ldrh	r0, [r4, #10]
   1f828:	b108      	cbz	r0, 1f82e <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x20>
   1f82a:	2000      	movs	r0, #0
   1f82c:	bd70      	pop	{r4, r5, r6, pc}
   1f82e:	4628      	mov	r0, r5
   1f830:	bd70      	pop	{r4, r5, r6, pc}

0001f832 <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA>:
   1f832:	8803      	ldrh	r3, [r0, #0]
   1f834:	2b45      	cmp	r3, #69	; 0x45
   1f836:	d200      	bcs.n	1f83a <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA+0x8>
   1f838:	2345      	movs	r3, #69	; 0x45
   1f83a:	8013      	strh	r3, [r2, #0]
   1f83c:	88c2      	ldrh	r2, [r0, #6]
   1f83e:	f3c2 030e 	ubfx	r3, r2, #0, #15
   1f842:	f100 0218 	add.w	r2, r0, #24
   1f846:	441a      	add	r2, r3
   1f848:	600a      	str	r2, [r1, #0]
   1f84a:	8980      	ldrh	r0, [r0, #12]
   1f84c:	4770      	bx	lr

0001f84e <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>:
   1f84e:	7cc0      	ldrb	r0, [r0, #19]
   1f850:	1d40      	adds	r0, r0, #5
   1f852:	4408      	add	r0, r1
   1f854:	1ec0      	subs	r0, r0, #3
   1f856:	6010      	str	r0, [r2, #0]
   1f858:	8808      	ldrh	r0, [r1, #0]
   1f85a:	4770      	bx	lr

0001f85c <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY>:
   1f85c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f860:	460e      	mov	r6, r1
   1f862:	4604      	mov	r4, r0
   1f864:	88c1      	ldrh	r1, [r0, #6]
   1f866:	f100 0818 	add.w	r8, r0, #24
   1f86a:	8900      	ldrh	r0, [r0, #8]
   1f86c:	8822      	ldrh	r2, [r4, #0]
   1f86e:	f3c1 050e 	ubfx	r5, r1, #0, #15
   1f872:	f3c0 070e 	ubfx	r7, r0, #0, #15
   1f876:	2a45      	cmp	r2, #69	; 0x45
   1f878:	d200      	bcs.n	1f87c <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x20>
   1f87a:	2245      	movs	r2, #69	; 0x45
   1f87c:	42b2      	cmp	r2, r6
   1f87e:	d203      	bcs.n	1f888 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x2c>
   1f880:	21c7      	movs	r1, #199	; 0xc7
   1f882:	2014      	movs	r0, #20
   1f884:	f7f2 f87c 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1f888:	f7ff ff03 	bl	1f692 <sdc_hci_cmd_lc_read_remote_version_information+0x5c>
   1f88c:	b110      	cbz	r0, 1f894 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x38>
   1f88e:	2000      	movs	r0, #0
   1f890:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1f894:	42af      	cmp	r7, r5
   1f896:	d908      	bls.n	1f8aa <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x4e>
   1f898:	7ce0      	ldrb	r0, [r4, #19]
   1f89a:	1b79      	subs	r1, r7, r5
   1f89c:	1d40      	adds	r0, r0, #5
   1f89e:	1a08      	subs	r0, r1, r0
   1f8a0:	4286      	cmp	r6, r0
   1f8a2:	dd02      	ble.n	1f8aa <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x4e>
   1f8a4:	2000      	movs	r0, #0
   1f8a6:	74a0      	strb	r0, [r4, #18]
   1f8a8:	e7f1      	b.n	1f88e <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x32>
   1f8aa:	eb08 0005 	add.w	r0, r8, r5
   1f8ae:	2101      	movs	r1, #1
   1f8b0:	8006      	strh	r6, [r0, #0]
   1f8b2:	74a1      	strb	r1, [r4, #18]
   1f8b4:	e7ec      	b.n	1f890 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x34>

0001f8b6 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY>:
   1f8b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1f8b8:	88c6      	ldrh	r6, [r0, #6]
   1f8ba:	8885      	ldrh	r5, [r0, #4]
   1f8bc:	4604      	mov	r4, r0
   1f8be:	f100 0218 	add.w	r2, r0, #24
   1f8c2:	f3c5 000e 	ubfx	r0, r5, #0, #15
   1f8c6:	1817      	adds	r7, r2, r0
   1f8c8:	4631      	mov	r1, r6
   1f8ca:	4628      	mov	r0, r5
   1f8cc:	f7ff fedb 	bl	1f686 <sdc_hci_cmd_lc_read_remote_version_information+0x50>
   1f8d0:	b108      	cbz	r0, 1f8d6 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x20>
   1f8d2:	2000      	movs	r0, #0
   1f8d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1f8d6:	8960      	ldrh	r0, [r4, #10]
   1f8d8:	89e1      	ldrh	r1, [r4, #14]
   1f8da:	4408      	add	r0, r1
   1f8dc:	8839      	ldrh	r1, [r7, #0]
   1f8de:	4288      	cmp	r0, r1
   1f8e0:	d201      	bcs.n	1f8e6 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x30>
   1f8e2:	2001      	movs	r0, #1
   1f8e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1f8e6:	f8ad 5000 	strh.w	r5, [sp]
   1f8ea:	4669      	mov	r1, sp
   1f8ec:	4620      	mov	r0, r4
   1f8ee:	f7ff fea9 	bl	1f644 <sdc_hci_cmd_lc_read_remote_version_information+0xe>
   1f8f2:	4631      	mov	r1, r6
   1f8f4:	f8bd 0000 	ldrh.w	r0, [sp]
   1f8f8:	f7ff fec5 	bl	1f686 <sdc_hci_cmd_lc_read_remote_version_information+0x50>
   1f8fc:	f080 0001 	eor.w	r0, r0, #1
   1f900:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001f902 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI>:
   1f902:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f906:	4617      	mov	r7, r2
   1f908:	460d      	mov	r5, r1
   1f90a:	4604      	mov	r4, r0
   1f90c:	f100 0118 	add.w	r1, r0, #24
   1f910:	88c2      	ldrh	r2, [r0, #6]
   1f912:	8880      	ldrh	r0, [r0, #4]
   1f914:	f3c0 030e 	ubfx	r3, r0, #0, #15
   1f918:	18ce      	adds	r6, r1, r3
   1f91a:	4611      	mov	r1, r2
   1f91c:	f7ff feb3 	bl	1f686 <sdc_hci_cmd_lc_read_remote_version_information+0x50>
   1f920:	b118      	cbz	r0, 1f92a <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x28>
   1f922:	2000      	movs	r0, #0
   1f924:	81e0      	strh	r0, [r4, #14]
   1f926:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1f92a:	8830      	ldrh	r0, [r6, #0]
   1f92c:	8961      	ldrh	r1, [r4, #10]
   1f92e:	7ce2      	ldrb	r2, [r4, #19]
   1f930:	1a40      	subs	r0, r0, r1
   1f932:	4411      	add	r1, r2
   1f934:	4431      	add	r1, r6
   1f936:	882a      	ldrh	r2, [r5, #0]
   1f938:	b280      	uxth	r0, r0
   1f93a:	1c89      	adds	r1, r1, #2
   1f93c:	4282      	cmp	r2, r0
   1f93e:	d900      	bls.n	1f942 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x40>
   1f940:	8028      	strh	r0, [r5, #0]
   1f942:	8960      	ldrh	r0, [r4, #10]
   1f944:	b128      	cbz	r0, 1f952 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x50>
   1f946:	2000      	movs	r0, #0
   1f948:	7038      	strb	r0, [r7, #0]
   1f94a:	8828      	ldrh	r0, [r5, #0]
   1f94c:	81e0      	strh	r0, [r4, #14]
   1f94e:	4608      	mov	r0, r1
   1f950:	e7e9      	b.n	1f926 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x24>
   1f952:	2001      	movs	r0, #1
   1f954:	e7f8      	b.n	1f948 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x46>

0001f956 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>:
   1f956:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f95a:	4615      	mov	r5, r2
   1f95c:	f8dd 8018 	ldr.w	r8, [sp, #24]
   1f960:	460f      	mov	r7, r1
   1f962:	4604      	mov	r4, r0
   1f964:	461e      	mov	r6, r3
   1f966:	4642      	mov	r2, r8
   1f968:	4619      	mov	r1, r3
   1f96a:	4628      	mov	r0, r5
   1f96c:	f000 f83c 	bl	1f9e8 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
   1f970:	4287      	cmp	r7, r0
   1f972:	d201      	bcs.n	1f978 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x22>
   1f974:	219f      	movs	r1, #159	; 0x9f
   1f976:	e013      	b.n	1f9a0 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x4a>
   1f978:	07a0      	lsls	r0, r4, #30
   1f97a:	d001      	beq.n	1f980 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x2a>
   1f97c:	21a0      	movs	r1, #160	; 0xa0
   1f97e:	e00f      	b.n	1f9a0 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x4a>
   1f980:	2218      	movs	r2, #24
   1f982:	2100      	movs	r1, #0
   1f984:	4620      	mov	r0, r4
   1f986:	f7fe ffe4 	bl	1e952 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
   1f98a:	74e6      	strb	r6, [r4, #19]
   1f98c:	4642      	mov	r2, r8
   1f98e:	4631      	mov	r1, r6
   1f990:	4628      	mov	r0, r5
   1f992:	f7ff fe52 	bl	1f63a <sdc_hci_cmd_lc_read_remote_version_information+0x4>
   1f996:	8060      	strh	r0, [r4, #2]
   1f998:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
   1f99c:	d903      	bls.n	1f9a6 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x50>
   1f99e:	21a5      	movs	r1, #165	; 0xa5
   1f9a0:	2014      	movs	r0, #20
   1f9a2:	f7f1 ffed 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1f9a6:	8025      	strh	r5, [r4, #0]
   1f9a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001f9ac <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>:
   1f9ac:	b570      	push	{r4, r5, r6, lr}
   1f9ae:	460e      	mov	r6, r1
   1f9b0:	4604      	mov	r4, r0
   1f9b2:	f100 0118 	add.w	r1, r0, #24
   1f9b6:	8900      	ldrh	r0, [r0, #8]
   1f9b8:	88a2      	ldrh	r2, [r4, #4]
   1f9ba:	f3c0 030e 	ubfx	r3, r0, #0, #15
   1f9be:	18cd      	adds	r5, r1, r3
   1f9c0:	4611      	mov	r1, r2
   1f9c2:	f7ff fe60 	bl	1f686 <sdc_hci_cmd_lc_read_remote_version_information+0x50>
   1f9c6:	b108      	cbz	r0, 1f9cc <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x20>
   1f9c8:	2000      	movs	r0, #0
   1f9ca:	bd70      	pop	{r4, r5, r6, pc}
   1f9cc:	b126      	cbz	r6, 1f9d8 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x2c>
   1f9ce:	7ce2      	ldrb	r2, [r4, #19]
   1f9d0:	1ca9      	adds	r1, r5, #2
   1f9d2:	4630      	mov	r0, r6
   1f9d4:	f7fe ff43 	bl	1e85e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   1f9d8:	882d      	ldrh	r5, [r5, #0]
   1f9da:	f104 0108 	add.w	r1, r4, #8
   1f9de:	4620      	mov	r0, r4
   1f9e0:	f7ff fe30 	bl	1f644 <sdc_hci_cmd_lc_read_remote_version_information+0xe>
   1f9e4:	4628      	mov	r0, r5
   1f9e6:	bd70      	pop	{r4, r5, r6, pc}

0001f9e8 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>:
   1f9e8:	b510      	push	{r4, lr}
   1f9ea:	4604      	mov	r4, r0
   1f9ec:	f7ff fe25 	bl	1f63a <sdc_hci_cmd_lc_read_remote_version_information+0x4>
   1f9f0:	2100      	movs	r1, #0
   1f9f2:	2c45      	cmp	r4, #69	; 0x45
   1f9f4:	d202      	bcs.n	1f9fc <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY+0x14>
   1f9f6:	f1c4 0145 	rsb	r1, r4, #69	; 0x45
   1f9fa:	b289      	uxth	r1, r1
   1f9fc:	3018      	adds	r0, #24
   1f9fe:	4408      	add	r0, r1
   1fa00:	b280      	uxth	r0, r0
   1fa02:	bd10      	pop	{r4, pc}

0001fa04 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>:
   1fa04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1fa08:	4688      	mov	r8, r1
   1fa0a:	88c1      	ldrh	r1, [r0, #6]
   1fa0c:	4604      	mov	r4, r0
   1fa0e:	8900      	ldrh	r0, [r0, #8]
   1fa10:	f3c1 050e 	ubfx	r5, r1, #0, #15
   1fa14:	f104 0618 	add.w	r6, r4, #24
   1fa18:	f3c0 070e 	ubfx	r7, r0, #0, #15
   1fa1c:	eb06 0905 	add.w	r9, r6, r5
   1fa20:	f7ff fe37 	bl	1f692 <sdc_hci_cmd_lc_read_remote_version_information+0x5c>
   1fa24:	2200      	movs	r2, #0
   1fa26:	b998      	cbnz	r0, 1fa50 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x4c>
   1fa28:	8820      	ldrh	r0, [r4, #0]
   1fa2a:	2845      	cmp	r0, #69	; 0x45
   1fa2c:	d200      	bcs.n	1fa30 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x2c>
   1fa2e:	2045      	movs	r0, #69	; 0x45
   1fa30:	42af      	cmp	r7, r5
   1fa32:	d906      	bls.n	1fa42 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x3e>
   1fa34:	7ce1      	ldrb	r1, [r4, #19]
   1fa36:	1b7b      	subs	r3, r7, r5
   1fa38:	1d49      	adds	r1, r1, #5
   1fa3a:	1a59      	subs	r1, r3, r1
   1fa3c:	4281      	cmp	r1, r0
   1fa3e:	da00      	bge.n	1fa42 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x3e>
   1fa40:	4608      	mov	r0, r1
   1fa42:	89a1      	ldrh	r1, [r4, #12]
   1fa44:	b111      	cbz	r1, 1fa4c <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x48>
   1fa46:	f8b9 3000 	ldrh.w	r3, [r9]
   1fa4a:	1ac0      	subs	r0, r0, r3
   1fa4c:	4540      	cmp	r0, r8
   1fa4e:	da03      	bge.n	1fa58 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x54>
   1fa50:	8222      	strh	r2, [r4, #16]
   1fa52:	2000      	movs	r0, #0
   1fa54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1fa58:	7ce0      	ldrb	r0, [r4, #19]
   1fa5a:	4431      	add	r1, r6
   1fa5c:	1d40      	adds	r0, r0, #5
   1fa5e:	4428      	add	r0, r5
   1fa60:	4408      	add	r0, r1
   1fa62:	f8a4 8010 	strh.w	r8, [r4, #16]
   1fa66:	1ec0      	subs	r0, r0, #3
   1fa68:	e7f4      	b.n	1fa54 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x50>

0001fa6a <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>:
   1fa6a:	2100      	movs	r1, #0
   1fa6c:	8181      	strh	r1, [r0, #12]
   1fa6e:	8201      	strh	r1, [r0, #16]
   1fa70:	4770      	bx	lr

0001fa72 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>:
   1fa72:	b570      	push	{r4, r5, r6, lr}
   1fa74:	2300      	movs	r3, #0
   1fa76:	f1a1 0208 	sub.w	r2, r1, #8
   1fa7a:	f64f 74f7 	movw	r4, #65527	; 0xfff7
   1fa7e:	42a2      	cmp	r2, r4
   1fa80:	d304      	bcc.n	1fa8c <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x1a>
   1fa82:	f240 11cd 	movw	r1, #461	; 0x1cd
   1fa86:	2015      	movs	r0, #21
   1fa88:	f7f1 ff7a 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1fa8c:	6802      	ldr	r2, [r0, #0]
   1fa8e:	b90a      	cbnz	r2, 1fa94 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x22>
   1fa90:	e01e      	b.n	1fad0 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x5e>
   1fa92:	4610      	mov	r0, r2
   1fa94:	6802      	ldr	r2, [r0, #0]
   1fa96:	8893      	ldrh	r3, [r2, #4]
   1fa98:	428b      	cmp	r3, r1
   1fa9a:	d002      	beq.n	1faa2 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x30>
   1fa9c:	6813      	ldr	r3, [r2, #0]
   1fa9e:	2b00      	cmp	r3, #0
   1faa0:	d1f7      	bne.n	1fa92 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x20>
   1faa2:	8894      	ldrh	r4, [r2, #4]
   1faa4:	4613      	mov	r3, r2
   1faa6:	428c      	cmp	r4, r1
   1faa8:	d101      	bne.n	1faae <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x3c>
   1faaa:	6811      	ldr	r1, [r2, #0]
   1faac:	e00d      	b.n	1faca <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x58>
   1faae:	f101 0508 	add.w	r5, r1, #8
   1fab2:	b2ad      	uxth	r5, r5
   1fab4:	42ac      	cmp	r4, r5
   1fab6:	d30a      	bcc.n	1face <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x5c>
   1fab8:	1a64      	subs	r4, r4, r1
   1faba:	4411      	add	r1, r2
   1fabc:	2200      	movs	r2, #0
   1fabe:	600a      	str	r2, [r1, #0]
   1fac0:	808c      	strh	r4, [r1, #4]
   1fac2:	6802      	ldr	r2, [r0, #0]
   1fac4:	6812      	ldr	r2, [r2, #0]
   1fac6:	6002      	str	r2, [r0, #0]
   1fac8:	600a      	str	r2, [r1, #0]
   1faca:	6001      	str	r1, [r0, #0]
   1facc:	e000      	b.n	1fad0 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x5e>
   1face:	2300      	movs	r3, #0
   1fad0:	4618      	mov	r0, r3
   1fad2:	bd70      	pop	{r4, r5, r6, pc}

0001fad4 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>:
   1fad4:	b510      	push	{r4, lr}
   1fad6:	000c      	movs	r4, r1
   1fad8:	d004      	beq.n	1fae4 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x10>
   1fada:	2c08      	cmp	r4, #8
   1fadc:	d207      	bcs.n	1faee <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x1a>
   1fade:	f240 1195 	movw	r1, #405	; 0x195
   1fae2:	e00a      	b.n	1fafa <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x26>
   1fae4:	b108      	cbz	r0, 1faea <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x16>
   1fae6:	2100      	movs	r1, #0
   1fae8:	6001      	str	r1, [r0, #0]
   1faea:	2000      	movs	r0, #0
   1faec:	bd10      	pop	{r4, pc}
   1faee:	b158      	cbz	r0, 1fb08 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x34>
   1faf0:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
   1faf4:	d304      	bcc.n	1fb00 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x2c>
   1faf6:	f240 11a7 	movw	r1, #423	; 0x1a7
   1fafa:	2015      	movs	r0, #21
   1fafc:	f7f1 ff40 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1fb00:	b2a1      	uxth	r1, r4
   1fb02:	6800      	ldr	r0, [r0, #0]
   1fb04:	f000 f814 	bl	1fb30 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>
   1fb08:	1d20      	adds	r0, r4, #4
   1fb0a:	bd10      	pop	{r4, pc}

0001fb0c <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>:
   1fb0c:	2100      	movs	r1, #0
   1fb0e:	6802      	ldr	r2, [r0, #0]
   1fb10:	e003      	b.n	1fb1a <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0xe>
   1fb12:	8893      	ldrh	r3, [r2, #4]
   1fb14:	6812      	ldr	r2, [r2, #0]
   1fb16:	4419      	add	r1, r3
   1fb18:	b289      	uxth	r1, r1
   1fb1a:	2a00      	cmp	r2, #0
   1fb1c:	d1f9      	bne.n	1fb12 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0x6>
   1fb1e:	f000 b807 	b.w	1fb30 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>

0001fb22 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>:
   1fb22:	2300      	movs	r3, #0
   1fb24:	600b      	str	r3, [r1, #0]
   1fb26:	808a      	strh	r2, [r1, #4]
   1fb28:	6802      	ldr	r2, [r0, #0]
   1fb2a:	600a      	str	r2, [r1, #0]
   1fb2c:	6001      	str	r1, [r0, #0]
   1fb2e:	4770      	bx	lr
   1fb30:	2300      	movs	r3, #0
   1fb32:	6043      	str	r3, [r0, #4]
   1fb34:	1d02      	adds	r2, r0, #4
   1fb36:	8101      	strh	r1, [r0, #8]
   1fb38:	6002      	str	r2, [r0, #0]
   1fb3a:	4770      	bx	lr

0001fb3c <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>:
   1fb3c:	b51c      	push	{r2, r3, r4, lr}
   1fb3e:	4604      	mov	r4, r0
   1fb40:	2000      	movs	r0, #0
   1fb42:	9001      	str	r0, [sp, #4]
   1fb44:	9000      	str	r0, [sp, #0]
   1fb46:	f88d 4006 	strb.w	r4, [sp, #6]
   1fb4a:	e00a      	b.n	1fb62 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x26>
   1fb4c:	f8bd 0004 	ldrh.w	r0, [sp, #4]
   1fb50:	4621      	mov	r1, r4
   1fb52:	f7f2 fa3d 	bl	11fd0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
   1fb56:	b120      	cbz	r0, 1fb62 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x26>
   1fb58:	f240 21a5 	movw	r1, #677	; 0x2a5
   1fb5c:	2017      	movs	r0, #23
   1fb5e:	f7f1 ff0f 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1fb62:	4668      	mov	r0, sp
   1fb64:	f7f2 f9a6 	bl	11eb4 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
   1fb68:	2800      	cmp	r0, #0
   1fb6a:	d0ef      	beq.n	1fb4c <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x10>
   1fb6c:	bd1c      	pop	{r2, r3, r4, pc}

0001fb6e <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>:
   1fb6e:	f5a0 427f 	sub.w	r2, r0, #65280	; 0xff00
   1fb72:	3aff      	subs	r2, #255	; 0xff
   1fb74:	d001      	beq.n	1fb7a <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI+0xc>
   1fb76:	2909      	cmp	r1, #9
   1fb78:	d301      	bcc.n	1fb7e <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI+0x10>
   1fb7a:	2000      	movs	r0, #0
   1fb7c:	4770      	bx	lr
   1fb7e:	f7f2 ba59 	b.w	12034 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x64>

0001fb82 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>:
   1fb82:	f5a0 427f 	sub.w	r2, r0, #65280	; 0xff00
   1fb86:	3aff      	subs	r2, #255	; 0xff
   1fb88:	d001      	beq.n	1fb8e <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0xc>
   1fb8a:	2909      	cmp	r1, #9
   1fb8c:	d301      	bcc.n	1fb92 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0x10>
   1fb8e:	2000      	movs	r0, #0
   1fb90:	4770      	bx	lr
   1fb92:	f7f2 ba77 	b.w	12084 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xb4>
   1fb96:	b510      	push	{r4, lr}
   1fb98:	4604      	mov	r4, r0
   1fb9a:	f7f2 fabf 	bl	1211c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x14c>
   1fb9e:	42a0      	cmp	r0, r4
   1fba0:	d901      	bls.n	1fba6 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0x24>
   1fba2:	2001      	movs	r0, #1
   1fba4:	bd10      	pop	{r4, pc}
   1fba6:	2000      	movs	r0, #0
   1fba8:	bd10      	pop	{r4, pc}

0001fbaa <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>:
   1fbaa:	b570      	push	{r4, r5, r6, lr}
   1fbac:	460e      	mov	r6, r1
   1fbae:	461d      	mov	r5, r3
   1fbb0:	4611      	mov	r1, r2
   1fbb2:	f000 f813 	bl	1fbdc <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x32>
   1fbb6:	4604      	mov	r4, r0
   1fbb8:	4629      	mov	r1, r5
   1fbba:	4630      	mov	r0, r6
   1fbbc:	f000 f804 	bl	1fbc8 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1e>
   1fbc0:	4420      	add	r0, r4
   1fbc2:	1d00      	adds	r0, r0, #4
   1fbc4:	b280      	uxth	r0, r0
   1fbc6:	bd70      	pop	{r4, r5, r6, pc}
   1fbc8:	b510      	push	{r4, lr}
   1fbca:	460a      	mov	r2, r1
   1fbcc:	2109      	movs	r1, #9
   1fbce:	f7ff ff0b 	bl	1f9e8 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
   1fbd2:	f64f 71fc 	movw	r1, #65532	; 0xfffc
   1fbd6:	1cc0      	adds	r0, r0, #3
   1fbd8:	4008      	ands	r0, r1
   1fbda:	bd10      	pop	{r4, pc}
   1fbdc:	b510      	push	{r4, lr}
   1fbde:	460a      	mov	r2, r1
   1fbe0:	210a      	movs	r1, #10
   1fbe2:	f7ff ff01 	bl	1f9e8 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
   1fbe6:	f64f 71fc 	movw	r1, #65532	; 0xfffc
   1fbea:	1cc0      	adds	r0, r0, #3
   1fbec:	4008      	ands	r0, r1
   1fbee:	bd10      	pop	{r4, pc}
   1fbf0:	b510      	push	{r4, lr}
   1fbf2:	4604      	mov	r4, r0
   1fbf4:	4608      	mov	r0, r1
   1fbf6:	f000 f815 	bl	1fc24 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x7a>
   1fbfa:	1821      	adds	r1, r4, r0
   1fbfc:	7d0a      	ldrb	r2, [r1, #20]
   1fbfe:	2a02      	cmp	r2, #2
   1fc00:	d008      	beq.n	1fc14 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x6a>
   1fc02:	7d49      	ldrb	r1, [r1, #21]
   1fc04:	2902      	cmp	r1, #2
   1fc06:	d009      	beq.n	1fc1c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x72>
   1fc08:	2a03      	cmp	r2, #3
   1fc0a:	d003      	beq.n	1fc14 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x6a>
   1fc0c:	2903      	cmp	r1, #3
   1fc0e:	d005      	beq.n	1fc1c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x72>
   1fc10:	2000      	movs	r0, #0
   1fc12:	bd10      	pop	{r4, pc}
   1fc14:	eb04 0040 	add.w	r0, r4, r0, lsl #1
   1fc18:	8b00      	ldrh	r0, [r0, #24]
   1fc1a:	bd10      	pop	{r4, pc}
   1fc1c:	eb04 0040 	add.w	r0, r4, r0, lsl #1
   1fc20:	8b40      	ldrh	r0, [r0, #26]
   1fc22:	bd10      	pop	{r4, pc}
   1fc24:	b108      	cbz	r0, 1fc2a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x80>
   1fc26:	2000      	movs	r0, #0
   1fc28:	4770      	bx	lr
   1fc2a:	2002      	movs	r0, #2
   1fc2c:	4770      	bx	lr
   1fc2e:	b510      	push	{r4, lr}
   1fc30:	4604      	mov	r4, r0
   1fc32:	4608      	mov	r0, r1
   1fc34:	f7ff fff6 	bl	1fc24 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x7a>
   1fc38:	eb04 0040 	add.w	r0, r4, r0, lsl #1
   1fc3c:	8b01      	ldrh	r1, [r0, #24]
   1fc3e:	b911      	cbnz	r1, 1fc46 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x9c>
   1fc40:	8b40      	ldrh	r0, [r0, #26]
   1fc42:	2800      	cmp	r0, #0
   1fc44:	d000      	beq.n	1fc48 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x9e>
   1fc46:	2001      	movs	r0, #1
   1fc48:	bd10      	pop	{r4, pc}
   1fc4a:	b538      	push	{r3, r4, r5, lr}
   1fc4c:	4604      	mov	r4, r0
   1fc4e:	7880      	ldrb	r0, [r0, #2]
   1fc50:	460d      	mov	r5, r1
   1fc52:	f88d 0000 	strb.w	r0, [sp]
   1fc56:	9800      	ldr	r0, [sp, #0]
   1fc58:	9000      	str	r0, [sp, #0]
   1fc5a:	f89d 0000 	ldrb.w	r0, [sp]
   1fc5e:	b948      	cbnz	r0, 1fc74 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xca>
   1fc60:	4610      	mov	r0, r2
   1fc62:	f7ff ffdf 	bl	1fc24 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x7a>
   1fc66:	1821      	adds	r1, r4, r0
   1fc68:	7d0a      	ldrb	r2, [r1, #20]
   1fc6a:	2a02      	cmp	r2, #2
   1fc6c:	d004      	beq.n	1fc78 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xce>
   1fc6e:	7d49      	ldrb	r1, [r1, #21]
   1fc70:	2902      	cmp	r1, #2
   1fc72:	d005      	beq.n	1fc80 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xd6>
   1fc74:	2000      	movs	r0, #0
   1fc76:	bd38      	pop	{r3, r4, r5, pc}
   1fc78:	4602      	mov	r2, r0
   1fc7a:	1c40      	adds	r0, r0, #1
   1fc7c:	b2c0      	uxtb	r0, r0
   1fc7e:	e001      	b.n	1fc84 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xda>
   1fc80:	1c41      	adds	r1, r0, #1
   1fc82:	b2ca      	uxtb	r2, r1
   1fc84:	b185      	cbz	r5, 1fca8 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xfe>
   1fc86:	1823      	adds	r3, r4, r0
   1fc88:	2100      	movs	r1, #0
   1fc8a:	eb04 0040 	add.w	r0, r4, r0, lsl #1
   1fc8e:	7519      	strb	r1, [r3, #20]
   1fc90:	8301      	strh	r1, [r0, #24]
   1fc92:	2003      	movs	r0, #3
   1fc94:	18a1      	adds	r1, r4, r2
   1fc96:	7508      	strb	r0, [r1, #20]
   1fc98:	eb04 0082 	add.w	r0, r4, r2, lsl #2
   1fc9c:	6840      	ldr	r0, [r0, #4]
   1fc9e:	6028      	str	r0, [r5, #0]
   1fca0:	eb04 0042 	add.w	r0, r4, r2, lsl #1
   1fca4:	8b00      	ldrh	r0, [r0, #24]
   1fca6:	80a8      	strh	r0, [r5, #4]
   1fca8:	2001      	movs	r0, #1
   1fcaa:	bd38      	pop	{r3, r4, r5, pc}
   1fcac:	b570      	push	{r4, r5, r6, lr}
   1fcae:	4604      	mov	r4, r0
   1fcb0:	4615      	mov	r5, r2
   1fcb2:	4608      	mov	r0, r1
   1fcb4:	f7ff ffb6 	bl	1fc24 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x7a>
   1fcb8:	1821      	adds	r1, r4, r0
   1fcba:	7d0a      	ldrb	r2, [r1, #20]
   1fcbc:	42aa      	cmp	r2, r5
   1fcbe:	d103      	bne.n	1fcc8 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x11e>
   1fcc0:	eb04 0040 	add.w	r0, r4, r0, lsl #1
   1fcc4:	8b00      	ldrh	r0, [r0, #24]
   1fcc6:	bd70      	pop	{r4, r5, r6, pc}
   1fcc8:	7d49      	ldrb	r1, [r1, #21]
   1fcca:	42a9      	cmp	r1, r5
   1fccc:	d103      	bne.n	1fcd6 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x12c>
   1fcce:	eb04 0040 	add.w	r0, r4, r0, lsl #1
   1fcd2:	8b40      	ldrh	r0, [r0, #26]
   1fcd4:	bd70      	pop	{r4, r5, r6, pc}
   1fcd6:	2000      	movs	r0, #0
   1fcd8:	bd70      	pop	{r4, r5, r6, pc}
   1fcda:	f5b0 7fff 	cmp.w	r0, #510	; 0x1fe
   1fcde:	d201      	bcs.n	1fce4 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x13a>
   1fce0:	0840      	lsrs	r0, r0, #1
   1fce2:	4770      	bx	lr
   1fce4:	20ff      	movs	r0, #255	; 0xff
   1fce6:	4770      	bx	lr
   1fce8:	b510      	push	{r4, lr}
   1fcea:	4604      	mov	r4, r0
   1fcec:	f7ff fff5 	bl	1fcda <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x130>
   1fcf0:	1a20      	subs	r0, r4, r0
   1fcf2:	f240 6172 	movw	r1, #1650	; 0x672
   1fcf6:	4288      	cmp	r0, r1
   1fcf8:	db00      	blt.n	1fcfc <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x152>
   1fcfa:	4608      	mov	r0, r1
   1fcfc:	b280      	uxth	r0, r0
   1fcfe:	bd10      	pop	{r4, pc}

0001fd00 <sym_RIJIFYF46ZRKFDPA3GKV7WCH2VGEUEP6MVN4JFI>:
   1fd00:	2101      	movs	r1, #1
   1fd02:	f7ff bf75 	b.w	1fbf0 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x46>

0001fd06 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>:
   1fd06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1fd0a:	4606      	mov	r6, r0
   1fd0c:	f342 0780 	sbfx	r7, r2, #2, #1
   1fd10:	7848      	ldrb	r0, [r1, #1]
   1fd12:	460c      	mov	r4, r1
   1fd14:	f022 0504 	bic.w	r5, r2, #4
   1fd18:	1c7f      	adds	r7, r7, #1
   1fd1a:	b100      	cbz	r0, 1fd1e <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x18>
   1fd1c:	b995      	cbnz	r5, 1fd44 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x3e>
   1fd1e:	4328      	orrs	r0, r5
   1fd20:	d010      	beq.n	1fd44 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x3e>
   1fd22:	2000      	movs	r0, #0
   1fd24:	b120      	cbz	r0, 1fd30 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x2a>
   1fd26:	b17d      	cbz	r5, 1fd48 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x42>
   1fd28:	2100      	movs	r1, #0
   1fd2a:	4620      	mov	r0, r4
   1fd2c:	f7f2 fb22 	bl	12374 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x30>
   1fd30:	20ff      	movs	r0, #255	; 0xff
   1fd32:	70a0      	strb	r0, [r4, #2]
   1fd34:	4638      	mov	r0, r7
   1fd36:	f7ff ff75 	bl	1fc24 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x7a>
   1fd3a:	1821      	adds	r1, r4, r0
   1fd3c:	7d09      	ldrb	r1, [r1, #20]
   1fd3e:	2903      	cmp	r1, #3
   1fd40:	d004      	beq.n	1fd4c <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x46>
   1fd42:	e007      	b.n	1fd54 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x4e>
   1fd44:	2001      	movs	r0, #1
   1fd46:	e7ed      	b.n	1fd24 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x1e>
   1fd48:	2101      	movs	r1, #1
   1fd4a:	e7ee      	b.n	1fd2a <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x24>
   1fd4c:	2d02      	cmp	r5, #2
   1fd4e:	d001      	beq.n	1fd54 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x4e>
   1fd50:	1c40      	adds	r0, r0, #1
   1fd52:	b2c0      	uxtb	r0, r0
   1fd54:	1822      	adds	r2, r4, r0
   1fd56:	2101      	movs	r1, #1
   1fd58:	7511      	strb	r1, [r2, #20]
   1fd5a:	eb04 0240 	add.w	r2, r4, r0, lsl #1
   1fd5e:	2100      	movs	r1, #0
   1fd60:	eb04 0080 	add.w	r0, r4, r0, lsl #2
   1fd64:	8311      	strh	r1, [r2, #24]
   1fd66:	6842      	ldr	r2, [r0, #4]
   1fd68:	70a1      	strb	r1, [r4, #2]
   1fd6a:	4633      	mov	r3, r6
   1fd6c:	f361 030f 	bfi	r3, r1, #0, #16
   1fd70:	c60c      	stmia	r6!, {r2, r3}
   1fd72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001fd76 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY>:
   1fd76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1fd7a:	4604      	mov	r4, r0
   1fd7c:	461e      	mov	r6, r3
   1fd7e:	4690      	mov	r8, r2
   1fd80:	4608      	mov	r0, r1
   1fd82:	f7ff ff4f 	bl	1fc24 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x7a>
   1fd86:	21ff      	movs	r1, #255	; 0xff
   1fd88:	70a1      	strb	r1, [r4, #2]
   1fd8a:	1821      	adds	r1, r4, r0
   1fd8c:	7d0a      	ldrb	r2, [r1, #20]
   1fd8e:	2a01      	cmp	r2, #1
   1fd90:	d004      	beq.n	1fd9c <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x26>
   1fd92:	7d49      	ldrb	r1, [r1, #21]
   1fd94:	2901      	cmp	r1, #1
   1fd96:	d10c      	bne.n	1fdb2 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x3c>
   1fd98:	1c40      	adds	r0, r0, #1
   1fd9a:	b2c0      	uxtb	r0, r0
   1fd9c:	eb04 0540 	add.w	r5, r4, r0, lsl #1
   1fda0:	2700      	movs	r7, #0
   1fda2:	8b29      	ldrh	r1, [r5, #24]
   1fda4:	8c2b      	ldrh	r3, [r5, #32]
   1fda6:	198a      	adds	r2, r1, r6
   1fda8:	429a      	cmp	r2, r3
   1fdaa:	d905      	bls.n	1fdb8 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x42>
   1fdac:	4420      	add	r0, r4
   1fdae:	832f      	strh	r7, [r5, #24]
   1fdb0:	7507      	strb	r7, [r0, #20]
   1fdb2:	2000      	movs	r0, #0
   1fdb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1fdb8:	eb04 0080 	add.w	r0, r4, r0, lsl #2
   1fdbc:	4632      	mov	r2, r6
   1fdbe:	6840      	ldr	r0, [r0, #4]
   1fdc0:	4408      	add	r0, r1
   1fdc2:	4641      	mov	r1, r8
   1fdc4:	f7fe fd4b 	bl	1e85e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   1fdc8:	8b28      	ldrh	r0, [r5, #24]
   1fdca:	4430      	add	r0, r6
   1fdcc:	8328      	strh	r0, [r5, #24]
   1fdce:	70a7      	strb	r7, [r4, #2]
   1fdd0:	2001      	movs	r0, #1
   1fdd2:	e7ef      	b.n	1fdb4 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x3e>

0001fdd4 <sym_SYX5A4D5YT7FQ4PORL5PYZ5T6BOBVEZRWNZWOOA>:
   1fdd4:	2202      	movs	r2, #2
   1fdd6:	2100      	movs	r1, #0
   1fdd8:	f7ff bf68 	b.w	1fcac <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x102>

0001fddc <sym_Z3P3D5U3YDA66QTFRMTODYQPS5XZL7N2E3M2DIY>:
   1fddc:	b510      	push	{r4, lr}
   1fdde:	2101      	movs	r1, #1
   1fde0:	f7ff ff25 	bl	1fc2e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x84>
   1fde4:	2800      	cmp	r0, #0
   1fde6:	d000      	beq.n	1fdea <sym_Z3P3D5U3YDA66QTFRMTODYQPS5XZL7N2E3M2DIY+0xe>
   1fde8:	2001      	movs	r0, #1
   1fdea:	bd10      	pop	{r4, pc}

0001fdec <sym_VPXIA5P4C72CY3ME4ZVXBADOKEG5S4C7Z7QZZFA>:
   1fdec:	2201      	movs	r2, #1
   1fdee:	f7ff bf2c 	b.w	1fc4a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xa0>

0001fdf2 <sym_MF4WRTQNYFRYRFGW7FZUI3ZAYNQZ5EQ54QSK6JQ>:
   1fdf2:	2200      	movs	r2, #0
   1fdf4:	f7ff bf29 	b.w	1fc4a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xa0>

0001fdf8 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>:
   1fdf8:	b570      	push	{r4, r5, r6, lr}
   1fdfa:	4604      	mov	r4, r0
   1fdfc:	4615      	mov	r5, r2
   1fdfe:	4608      	mov	r0, r1
   1fe00:	f7ff ff10 	bl	1fc24 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x7a>
   1fe04:	21ff      	movs	r1, #255	; 0xff
   1fe06:	70a1      	strb	r1, [r4, #2]
   1fe08:	1821      	adds	r1, r4, r0
   1fe0a:	2202      	movs	r2, #2
   1fe0c:	7d0b      	ldrb	r3, [r1, #20]
   1fe0e:	2b01      	cmp	r3, #1
   1fe10:	d007      	beq.n	1fe22 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x2a>
   1fe12:	7d4b      	ldrb	r3, [r1, #21]
   1fe14:	2b01      	cmp	r3, #1
   1fe16:	d009      	beq.n	1fe2c <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x34>
   1fe18:	f44f 718b 	mov.w	r1, #278	; 0x116
   1fe1c:	2009      	movs	r0, #9
   1fe1e:	f7f1 fdaf 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1fe22:	eb04 0040 	add.w	r0, r4, r0, lsl #1
   1fe26:	8305      	strh	r5, [r0, #24]
   1fe28:	750a      	strb	r2, [r1, #20]
   1fe2a:	e003      	b.n	1fe34 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x3c>
   1fe2c:	eb04 0040 	add.w	r0, r4, r0, lsl #1
   1fe30:	8345      	strh	r5, [r0, #26]
   1fe32:	754a      	strb	r2, [r1, #21]
   1fe34:	2000      	movs	r0, #0
   1fe36:	70a0      	strb	r0, [r4, #2]
   1fe38:	bd70      	pop	{r4, r5, r6, pc}

0001fe3a <sym_SCCFLYV5KOPRJ5S7RGDC2KDSCCHMKXYC3EQIE6A>:
   1fe3a:	2101      	movs	r1, #1
   1fe3c:	7001      	strb	r1, [r0, #0]
   1fe3e:	4770      	bx	lr

0001fe40 <sym_DPFAWTOI3GRLXCS5TV5FXLZJNKWMRLYTLT4DRFY>:
   1fe40:	2201      	movs	r2, #1
   1fe42:	4611      	mov	r1, r2
   1fe44:	f7ff bf32 	b.w	1fcac <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x102>

0001fe48 <sym_27RZBWKBTESKUPVNN3E7RHYQU6UH4RT372SK2WA>:
   1fe48:	2201      	movs	r2, #1
   1fe4a:	2100      	movs	r1, #0
   1fe4c:	f7ff bf2e 	b.w	1fcac <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x102>

0001fe50 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ>:
   1fe50:	2100      	movs	r1, #0
   1fe52:	f7ff becd 	b.w	1fbf0 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x46>
   1fe56:	2800      	cmp	r0, #0
   1fe58:	db09      	blt.n	1fe6e <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x1e>
   1fe5a:	f000 021f 	and.w	r2, r0, #31
   1fe5e:	2101      	movs	r1, #1
   1fe60:	4091      	lsls	r1, r2
   1fe62:	0940      	lsrs	r0, r0, #5
   1fe64:	0080      	lsls	r0, r0, #2
   1fe66:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   1fe6a:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
   1fe6e:	4770      	bx	lr
   1fe70:	2800      	cmp	r0, #0
   1fe72:	db0d      	blt.n	1fe90 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x40>
   1fe74:	f000 021f 	and.w	r2, r0, #31
   1fe78:	2101      	movs	r1, #1
   1fe7a:	4091      	lsls	r1, r2
   1fe7c:	0940      	lsrs	r0, r0, #5
   1fe7e:	0080      	lsls	r0, r0, #2
   1fe80:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   1fe84:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
   1fe88:	f3bf 8f4f 	dsb	sy
   1fe8c:	f3bf 8f6f 	isb	sy
   1fe90:	4770      	bx	lr
   1fe92:	b510      	push	{r4, lr}
   1fe94:	200e      	movs	r0, #14
   1fe96:	f7ff ffeb 	bl	1fe70 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x20>
   1fe9a:	200e      	movs	r0, #14
   1fe9c:	f7ff ffdb 	bl	1fe56 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x6>
   1fea0:	200f      	movs	r0, #15
   1fea2:	f7ff ffe5 	bl	1fe70 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x20>
   1fea6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1feaa:	200f      	movs	r0, #15
   1feac:	f7ff bfd3 	b.w	1fe56 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x6>
   1feb0:	2800      	cmp	r0, #0
   1feb2:	db09      	blt.n	1fec8 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x78>
   1feb4:	f000 021f 	and.w	r2, r0, #31
   1feb8:	2101      	movs	r1, #1
   1feba:	4091      	lsls	r1, r2
   1febc:	0940      	lsrs	r0, r0, #5
   1febe:	0080      	lsls	r0, r0, #2
   1fec0:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   1fec4:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
   1fec8:	4770      	bx	lr
   1feca:	5840      	ldr	r0, [r0, r1]
   1fecc:	2800      	cmp	r0, #0
   1fece:	d000      	beq.n	1fed2 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x82>
   1fed0:	2001      	movs	r0, #1
   1fed2:	4770      	bx	lr

0001fed4 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>:
   1fed4:	b510      	push	{r4, lr}
   1fed6:	4604      	mov	r4, r0
   1fed8:	4620      	mov	r0, r4
   1feda:	f7f2 fc0d 	bl	126f8 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x2c>
   1fede:	2811      	cmp	r0, #17
   1fee0:	d0fa      	beq.n	1fed8 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x4>
   1fee2:	bd10      	pop	{r4, pc}

0001fee4 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>:
   1fee4:	b510      	push	{r4, lr}
   1fee6:	f7ff fff5 	bl	1fed4 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>
   1feea:	2800      	cmp	r0, #0
   1feec:	d003      	beq.n	1fef6 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A+0x12>
   1feee:	21a0      	movs	r1, #160	; 0xa0
   1fef0:	201d      	movs	r0, #29
   1fef2:	f7f1 fd45 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1fef6:	bd10      	pop	{r4, pc}

0001fef8 <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>:
   1fef8:	4050      	eors	r0, r2
   1fefa:	780a      	ldrb	r2, [r1, #0]
   1fefc:	f893 c000 	ldrb.w	ip, [r3]
   1ff00:	ea82 020c 	eor.w	r2, r2, ip
   1ff04:	4410      	add	r0, r2
   1ff06:	784a      	ldrb	r2, [r1, #1]
   1ff08:	f893 c001 	ldrb.w	ip, [r3, #1]
   1ff0c:	ea82 020c 	eor.w	r2, r2, ip
   1ff10:	4410      	add	r0, r2
   1ff12:	788a      	ldrb	r2, [r1, #2]
   1ff14:	f893 c002 	ldrb.w	ip, [r3, #2]
   1ff18:	ea82 020c 	eor.w	r2, r2, ip
   1ff1c:	4410      	add	r0, r2
   1ff1e:	78ca      	ldrb	r2, [r1, #3]
   1ff20:	f893 c003 	ldrb.w	ip, [r3, #3]
   1ff24:	ea82 020c 	eor.w	r2, r2, ip
   1ff28:	4410      	add	r0, r2
   1ff2a:	790a      	ldrb	r2, [r1, #4]
   1ff2c:	f893 c004 	ldrb.w	ip, [r3, #4]
   1ff30:	7949      	ldrb	r1, [r1, #5]
   1ff32:	ea82 020c 	eor.w	r2, r2, ip
   1ff36:	4410      	add	r0, r2
   1ff38:	795a      	ldrb	r2, [r3, #5]
   1ff3a:	4051      	eors	r1, r2
   1ff3c:	42c1      	cmn	r1, r0
   1ff3e:	bf0c      	ite	eq
   1ff40:	2001      	moveq	r0, #1
   1ff42:	2000      	movne	r0, #0
   1ff44:	4770      	bx	lr

0001ff46 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>:
   1ff46:	b510      	push	{r4, lr}
   1ff48:	2900      	cmp	r1, #0
   1ff4a:	4604      	mov	r4, r0
   1ff4c:	f04f 0106 	mov.w	r1, #6
   1ff50:	d002      	beq.n	1ff58 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x12>
   1ff52:	f7f1 fdb5 	bl	11ac0 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
   1ff56:	e001      	b.n	1ff5c <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x16>
   1ff58:	f7f1 fdc0 	bl	11adc <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
   1ff5c:	7960      	ldrb	r0, [r4, #5]
   1ff5e:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   1ff62:	7160      	strb	r0, [r4, #5]
   1ff64:	bd10      	pop	{r4, pc}

0001ff66 <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>:
   1ff66:	4770      	bx	lr

0001ff68 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>:
   1ff68:	b530      	push	{r4, r5, lr}
   1ff6a:	460c      	mov	r4, r1
   1ff6c:	4605      	mov	r5, r0
   1ff6e:	b08d      	sub	sp, #52	; 0x34
   1ff70:	f04f 0103 	mov.w	r1, #3
   1ff74:	f104 0003 	add.w	r0, r4, #3
   1ff78:	b112      	cbz	r2, 1ff80 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x18>
   1ff7a:	f7f1 fda1 	bl	11ac0 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
   1ff7e:	e001      	b.n	1ff84 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x1c>
   1ff80:	f7f1 fdac 	bl	11adc <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
   1ff84:	7960      	ldrb	r0, [r4, #5]
   1ff86:	220d      	movs	r2, #13
   1ff88:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   1ff8c:	f040 0040 	orr.w	r0, r0, #64	; 0x40
   1ff90:	7160      	strb	r0, [r4, #5]
   1ff92:	2100      	movs	r1, #0
   1ff94:	a804      	add	r0, sp, #16
   1ff96:	f7fe fcdc 	bl	1e952 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
   1ff9a:	78e0      	ldrb	r0, [r4, #3]
   1ff9c:	f88d 001f 	strb.w	r0, [sp, #31]
   1ffa0:	7920      	ldrb	r0, [r4, #4]
   1ffa2:	f88d 001e 	strb.w	r0, [sp, #30]
   1ffa6:	7960      	ldrb	r0, [r4, #5]
   1ffa8:	f88d 001d 	strb.w	r0, [sp, #29]
   1ffac:	6828      	ldr	r0, [r5, #0]
   1ffae:	9000      	str	r0, [sp, #0]
   1ffb0:	6868      	ldr	r0, [r5, #4]
   1ffb2:	9001      	str	r0, [sp, #4]
   1ffb4:	68a8      	ldr	r0, [r5, #8]
   1ffb6:	9002      	str	r0, [sp, #8]
   1ffb8:	68e8      	ldr	r0, [r5, #12]
   1ffba:	9003      	str	r0, [sp, #12]
   1ffbc:	4668      	mov	r0, sp
   1ffbe:	f7ff ff91 	bl	1fee4 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
   1ffc2:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
   1ffc6:	7020      	strb	r0, [r4, #0]
   1ffc8:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
   1ffcc:	7060      	strb	r0, [r4, #1]
   1ffce:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
   1ffd2:	70a0      	strb	r0, [r4, #2]
   1ffd4:	b00d      	add	sp, #52	; 0x34
   1ffd6:	bd30      	pop	{r4, r5, pc}

0001ffd8 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q>:
   1ffd8:	f7f3 bae0 	b.w	1359c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x574>

0001ffdc <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>:
   1ffdc:	b510      	push	{r4, lr}
   1ffde:	f7fb fff7 	bl	1bfd0 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>
   1ffe2:	2800      	cmp	r0, #0
   1ffe4:	bf04      	itt	eq
   1ffe6:	20ff      	moveq	r0, #255	; 0xff
   1ffe8:	bd10      	popeq	{r4, pc}
   1ffea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1ffee:	f7fb bfcf 	b.w	1bf90 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>

0001fff2 <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY>:
   1fff2:	b510      	push	{r4, lr}
   1fff4:	f7f3 feac 	bl	13d50 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
   1fff8:	2810      	cmp	r0, #16
   1fffa:	bf04      	itt	eq
   1fffc:	2000      	moveq	r0, #0
   1fffe:	bd10      	popeq	{r4, pc}
   20000:	f7f3 feec 	bl	13ddc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x130>
   20004:	2001      	movs	r0, #1
   20006:	bd10      	pop	{r4, pc}

00020008 <sym_J5GU2YSZI45UA3YHIJMMX6SWAYPKQ5HXJLXKPXY>:
   20008:	b570      	push	{r4, r5, r6, lr}
   2000a:	4606      	mov	r6, r0
   2000c:	7900      	ldrb	r0, [r0, #4]
   2000e:	f030 001f 	bics.w	r0, r0, #31
   20012:	bf04      	itt	eq
   20014:	2500      	moveq	r5, #0
   20016:	462c      	moveq	r4, r5
   20018:	d10c      	bne.n	20034 <sym_J5GU2YSZI45UA3YHIJMMX6SWAYPKQ5HXJLXKPXY+0x2c>
   2001a:	5d30      	ldrb	r0, [r6, r4]
   2001c:	f000 fed5 	bl	20dca <sym_KQ7WDRFWHZIBRVZJQIHMC5NBIZUJ4NGFK5AE4FQ>
   20020:	4428      	add	r0, r5
   20022:	b2c5      	uxtb	r5, r0
   20024:	1c60      	adds	r0, r4, #1
   20026:	b2c4      	uxtb	r4, r0
   20028:	2c05      	cmp	r4, #5
   2002a:	d3f6      	bcc.n	2001a <sym_J5GU2YSZI45UA3YHIJMMX6SWAYPKQ5HXJLXKPXY+0x12>
   2002c:	2d01      	cmp	r5, #1
   2002e:	bf84      	itt	hi
   20030:	2001      	movhi	r0, #1
   20032:	bd70      	pophi	{r4, r5, r6, pc}
   20034:	2000      	movs	r0, #0
   20036:	bd70      	pop	{r4, r5, r6, pc}

00020038 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>:
   20038:	b570      	push	{r4, r5, r6, lr}
   2003a:	460c      	mov	r4, r1
   2003c:	4605      	mov	r5, r0
   2003e:	2100      	movs	r1, #0
   20040:	f7ff fd9f 	bl	1fb82 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   20044:	6060      	str	r0, [r4, #4]
   20046:	b110      	cbz	r0, 2004e <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA+0x16>
   20048:	2000      	movs	r0, #0
   2004a:	7020      	strb	r0, [r4, #0]
   2004c:	bd70      	pop	{r4, r5, r6, pc}
   2004e:	2101      	movs	r1, #1
   20050:	4628      	mov	r0, r5
   20052:	f7ff fd96 	bl	1fb82 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   20056:	6060      	str	r0, [r4, #4]
   20058:	2800      	cmp	r0, #0
   2005a:	bf04      	itt	eq
   2005c:	2002      	moveq	r0, #2
   2005e:	bd70      	popeq	{r4, r5, r6, pc}
   20060:	2001      	movs	r0, #1
   20062:	7020      	strb	r0, [r4, #0]
   20064:	2000      	movs	r0, #0
   20066:	bd70      	pop	{r4, r5, r6, pc}

00020068 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>:
   20068:	f6a0 5101 	subw	r1, r0, #3329	; 0xd01
   2006c:	2906      	cmp	r1, #6
   2006e:	bf9a      	itte	ls
   20070:	f44f 717a 	movls.w	r1, #1000	; 0x3e8
   20074:	f5a0 6050 	subls.w	r0, r0, #3328	; 0xd00
   20078:	f240 41e2 	movwhi	r1, #1250	; 0x4e2
   2007c:	4348      	muls	r0, r1
   2007e:	4770      	bx	lr

00020080 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>:
   20080:	f5a0 717a 	sub.w	r1, r0, #1000	; 0x3e8
   20084:	f241 7270 	movw	r2, #6000	; 0x1770
   20088:	4291      	cmp	r1, r2
   2008a:	bf94      	ite	ls
   2008c:	f44f 717a 	movls.w	r1, #1000	; 0x3e8
   20090:	f240 41e2 	movwhi	r1, #1250	; 0x4e2
   20094:	fbb0 f0f1 	udiv	r0, r0, r1
   20098:	bf98      	it	ls
   2009a:	f500 6050 	addls.w	r0, r0, #3328	; 0xd00
   2009e:	b280      	uxth	r0, r0
   200a0:	4770      	bx	lr

000200a2 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ>:
   200a2:	b570      	push	{r4, r5, r6, lr}
   200a4:	4604      	mov	r4, r0
   200a6:	4290      	cmp	r0, r2
   200a8:	bf28      	it	cs
   200aa:	bd70      	popcs	{r4, r5, r6, pc}
   200ac:	1b10      	subs	r0, r2, r4
   200ae:	2865      	cmp	r0, #101	; 0x65
   200b0:	d30b      	bcc.n	200ca <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x28>
   200b2:	1825      	adds	r5, r4, r0
   200b4:	428d      	cmp	r5, r1
   200b6:	d806      	bhi.n	200c6 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x24>
   200b8:	2103      	movs	r1, #3
   200ba:	f7ee fd55 	bl	eb68 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
   200be:	2800      	cmp	r0, #0
   200c0:	bf04      	itt	eq
   200c2:	4628      	moveq	r0, r5
   200c4:	bd70      	popeq	{r4, r5, r6, pc}
   200c6:	4620      	mov	r0, r4
   200c8:	bd70      	pop	{r4, r5, r6, pc}
   200ca:	2065      	movs	r0, #101	; 0x65
   200cc:	e7f1      	b.n	200b2 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x10>

000200ce <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>:
   200ce:	290e      	cmp	r1, #14
   200d0:	d26d      	bcs.n	201ae <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xe0>
   200d2:	e8df f001 	tbb	[pc, r1]
   200d6:	0a07      	.short	0x0a07
   200d8:	1f1a150f 	.word	0x1f1a150f
   200dc:	6f434036 	.word	0x6f434036
   200e0:	6461504a 	.word	0x6461504a
   200e4:	2a00      	cmp	r2, #0
   200e6:	d05f      	beq.n	201a8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xda>
   200e8:	e061      	b.n	201ae <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xe0>
   200ea:	2a08      	cmp	r2, #8
   200ec:	bf18      	it	ne
   200ee:	2a09      	cmpne	r2, #9
   200f0:	d05a      	beq.n	201a8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xda>
   200f2:	e05c      	b.n	201ae <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xe0>
   200f4:	2a0d      	cmp	r2, #13
   200f6:	bf1c      	itt	ne
   200f8:	2a0e      	cmpne	r2, #14
   200fa:	2a0c      	cmpne	r2, #12
   200fc:	d054      	beq.n	201a8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xda>
   200fe:	e056      	b.n	201ae <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xe0>
   20100:	2a0f      	cmp	r2, #15
   20102:	bf18      	it	ne
   20104:	2a10      	cmpne	r2, #16
   20106:	d04f      	beq.n	201a8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xda>
   20108:	e051      	b.n	201ae <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xe0>
   2010a:	f1a2 0012 	sub.w	r0, r2, #18
   2010e:	280c      	cmp	r0, #12
   20110:	d94a      	bls.n	201a8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xda>
   20112:	e04c      	b.n	201ae <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xe0>
   20114:	b123      	cbz	r3, 20120 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x52>
   20116:	f1a2 0013 	sub.w	r0, r2, #19
   2011a:	280b      	cmp	r0, #11
   2011c:	d944      	bls.n	201a8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xda>
   2011e:	e046      	b.n	201ae <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xe0>
   20120:	2a15      	cmp	r2, #21
   20122:	bf18      	it	ne
   20124:	2a14      	cmpne	r2, #20
   20126:	d03f      	beq.n	201a8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xda>
   20128:	f890 0056 	ldrb.w	r0, [r0, #86]	; 0x56
   2012c:	b120      	cbz	r0, 20138 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x6a>
   2012e:	2a15      	cmp	r2, #21
   20130:	d33d      	bcc.n	201ae <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xe0>
   20132:	2a1d      	cmp	r2, #29
   20134:	d938      	bls.n	201a8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xda>
   20136:	e03a      	b.n	201ae <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xe0>
   20138:	2a19      	cmp	r2, #25
   2013a:	d338      	bcc.n	201ae <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xe0>
   2013c:	2a1d      	cmp	r2, #29
   2013e:	d933      	bls.n	201a8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xda>
   20140:	e035      	b.n	201ae <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xe0>
   20142:	f1a2 0112 	sub.w	r1, r2, #18
   20146:	2903      	cmp	r1, #3
   20148:	d92e      	bls.n	201a8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xda>
   2014a:	f890 0056 	ldrb.w	r0, [r0, #86]	; 0x56
   2014e:	b310      	cbz	r0, 20196 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xc8>
   20150:	2a1e      	cmp	r2, #30
   20152:	d929      	bls.n	201a8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xda>
   20154:	e02b      	b.n	201ae <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xe0>
   20156:	2a04      	cmp	r2, #4
   20158:	d026      	beq.n	201a8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xda>
   2015a:	e028      	b.n	201ae <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xe0>
   2015c:	b113      	cbz	r3, 20164 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x96>
   2015e:	2a07      	cmp	r2, #7
   20160:	d022      	beq.n	201a8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xda>
   20162:	e024      	b.n	201ae <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xe0>
   20164:	2a01      	cmp	r2, #1
   20166:	d122      	bne.n	201ae <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xe0>
   20168:	e01e      	b.n	201a8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xda>
   2016a:	2a1f      	cmp	r2, #31
   2016c:	bf1c      	itt	ne
   2016e:	2a20      	cmpne	r2, #32
   20170:	2a21      	cmpne	r2, #33	; 0x21
   20172:	d019      	beq.n	201a8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xda>
   20174:	e01b      	b.n	201ae <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xe0>
   20176:	2a22      	cmp	r2, #34	; 0x22
   20178:	bf18      	it	ne
   2017a:	2a23      	cmpne	r2, #35	; 0x23
   2017c:	d014      	beq.n	201a8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xda>
   2017e:	2a24      	cmp	r2, #36	; 0x24
   20180:	bf18      	it	ne
   20182:	2a25      	cmpne	r2, #37	; 0x25
   20184:	d010      	beq.n	201a8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xda>
   20186:	2a26      	cmp	r2, #38	; 0x26
   20188:	bf18      	it	ne
   2018a:	2a27      	cmpne	r2, #39	; 0x27
   2018c:	d00c      	beq.n	201a8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xda>
   2018e:	2a28      	cmp	r2, #40	; 0x28
   20190:	bf18      	it	ne
   20192:	2a2f      	cmpne	r2, #47	; 0x2f
   20194:	d008      	beq.n	201a8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xda>
   20196:	e00a      	b.n	201ae <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xe0>
   20198:	2a2a      	cmp	r2, #42	; 0x2a
   2019a:	d005      	beq.n	201a8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xda>
   2019c:	e007      	b.n	201ae <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xe0>
   2019e:	2a2b      	cmp	r2, #43	; 0x2b
   201a0:	bf1c      	itt	ne
   201a2:	2a2c      	cmpne	r2, #44	; 0x2c
   201a4:	2a2d      	cmpne	r2, #45	; 0x2d
   201a6:	d102      	bne.n	201ae <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xe0>
   201a8:	f04f 0001 	mov.w	r0, #1
   201ac:	4770      	bx	lr
   201ae:	f04f 0000 	mov.w	r0, #0
   201b2:	4770      	bx	lr
   201b4:	b113      	cbz	r3, 201bc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xee>
   201b6:	2a11      	cmp	r2, #17
   201b8:	d1f9      	bne.n	201ae <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xe0>
   201ba:	e7f5      	b.n	201a8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xda>
   201bc:	2a05      	cmp	r2, #5
   201be:	d1f6      	bne.n	201ae <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xe0>
   201c0:	e7f2      	b.n	201a8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xda>

000201c2 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>:
   201c2:	280d      	cmp	r0, #13
   201c4:	bf18      	it	ne
   201c6:	280e      	cmpne	r0, #14
   201c8:	d017      	beq.n	201fa <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
   201ca:	280c      	cmp	r0, #12
   201cc:	bf18      	it	ne
   201ce:	280f      	cmpne	r0, #15
   201d0:	d013      	beq.n	201fa <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
   201d2:	2810      	cmp	r0, #16
   201d4:	bf18      	it	ne
   201d6:	2822      	cmpne	r0, #34	; 0x22
   201d8:	d00f      	beq.n	201fa <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
   201da:	2823      	cmp	r0, #35	; 0x23
   201dc:	bf18      	it	ne
   201de:	2824      	cmpne	r0, #36	; 0x24
   201e0:	d00b      	beq.n	201fa <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
   201e2:	2825      	cmp	r0, #37	; 0x25
   201e4:	bf18      	it	ne
   201e6:	2826      	cmpne	r0, #38	; 0x26
   201e8:	d007      	beq.n	201fa <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
   201ea:	2827      	cmp	r0, #39	; 0x27
   201ec:	bf18      	it	ne
   201ee:	2828      	cmpne	r0, #40	; 0x28
   201f0:	d003      	beq.n	201fa <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
   201f2:	282f      	cmp	r0, #47	; 0x2f
   201f4:	bf1c      	itt	ne
   201f6:	2000      	movne	r0, #0
   201f8:	4770      	bxne	lr
   201fa:	2001      	movs	r0, #1
   201fc:	4770      	bx	lr

000201fe <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>:
   201fe:	f011 0f0c 	tst.w	r1, #12
   20202:	d014      	beq.n	2022e <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x30>
   20204:	f001 0104 	and.w	r1, r1, #4
   20208:	2900      	cmp	r1, #0
   2020a:	bf0d      	iteet	eq
   2020c:	2240      	moveq	r2, #64	; 0x40
   2020e:	2210      	movne	r2, #16
   20210:	2196      	movne	r1, #150	; 0x96
   20212:	f44f 7116 	moveq.w	r1, #600	; 0x258
   20216:	f501 71bc 	add.w	r1, r1, #376	; 0x178
   2021a:	eba0 0301 	sub.w	r3, r0, r1
   2021e:	4288      	cmp	r0, r1
   20220:	bf82      	ittt	hi
   20222:	fb93 f0f2 	sdivhi	r0, r3, r2
   20226:	b280      	uxthhi	r0, r0
   20228:	4770      	bxhi	lr
   2022a:	2000      	movs	r0, #0
   2022c:	4770      	bx	lr
   2022e:	2902      	cmp	r1, #2
   20230:	d008      	beq.n	20244 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x46>
   20232:	2870      	cmp	r0, #112	; 0x70
   20234:	d9f9      	bls.n	2022a <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x2c>
   20236:	3870      	subs	r0, #112	; 0x70
   20238:	17c1      	asrs	r1, r0, #31
   2023a:	eb00 7051 	add.w	r0, r0, r1, lsr #29
   2023e:	f3c0 00cf 	ubfx	r0, r0, #3, #16
   20242:	4770      	bx	lr
   20244:	283c      	cmp	r0, #60	; 0x3c
   20246:	d9f0      	bls.n	2022a <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x2c>
   20248:	383c      	subs	r0, #60	; 0x3c
   2024a:	17c1      	asrs	r1, r0, #31
   2024c:	eb00 7091 	add.w	r0, r0, r1, lsr #30
   20250:	f3c0 008f 	ubfx	r0, r0, #2, #16
   20254:	4770      	bx	lr

00020256 <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>:
   20256:	6809      	ldr	r1, [r1, #0]
   20258:	f8c0 106a 	str.w	r1, [r0, #106]	; 0x6a
   2025c:	4770      	bx	lr

0002025e <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>:
   2025e:	f010 0f01 	tst.w	r0, #1
   20262:	bf1c      	itt	ne
   20264:	2001      	movne	r0, #1
   20266:	4770      	bxne	lr
   20268:	f010 0f02 	tst.w	r0, #2
   2026c:	bf1c      	itt	ne
   2026e:	2002      	movne	r0, #2
   20270:	4770      	bxne	lr
   20272:	f010 0004 	ands.w	r0, r0, #4
   20276:	bf18      	it	ne
   20278:	2008      	movne	r0, #8
   2027a:	4770      	bx	lr

0002027c <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>:
   2027c:	2901      	cmp	r1, #1
   2027e:	d008      	beq.n	20292 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x16>
   20280:	2902      	cmp	r1, #2
   20282:	d00b      	beq.n	2029c <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x20>
   20284:	2904      	cmp	r1, #4
   20286:	bf12      	itee	ne
   20288:	2908      	cmpne	r1, #8
   2028a:	f640 60a6 	movweq	r0, #3750	; 0xea6
   2028e:	4770      	bxeq	lr
   20290:	e007      	b.n	202a2 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x26>
   20292:	2800      	cmp	r0, #0
   20294:	bf04      	itt	eq
   20296:	f240 40e2 	movweq	r0, #1250	; 0x4e2
   2029a:	4770      	bxeq	lr
   2029c:	f640 10c4 	movw	r0, #2500	; 0x9c4
   202a0:	4770      	bx	lr
   202a2:	b510      	push	{r4, lr}
   202a4:	f240 31af 	movw	r1, #943	; 0x3af
   202a8:	2029      	movs	r0, #41	; 0x29
   202aa:	f7f1 fb69 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

000202ae <sym_CB3FDFEUY3F2NWFVYZOUMB3I5QKHLDIUWWP26EA>:
   202ae:	f04f 0c00 	mov.w	ip, #0
   202b2:	2908      	cmp	r1, #8
   202b4:	d002      	beq.n	202bc <sym_CB3FDFEUY3F2NWFVYZOUMB3I5QKHLDIUWWP26EA+0xe>
   202b6:	2904      	cmp	r1, #4
   202b8:	d009      	beq.n	202ce <sym_CB3FDFEUY3F2NWFVYZOUMB3I5QKHLDIUWWP26EA+0x20>
   202ba:	e011      	b.n	202e0 <sym_CB3FDFEUY3F2NWFVYZOUMB3I5QKHLDIUWWP26EA+0x32>
   202bc:	2801      	cmp	r0, #1
   202be:	d10f      	bne.n	202e0 <sym_CB3FDFEUY3F2NWFVYZOUMB3I5QKHLDIUWWP26EA+0x32>
   202c0:	2004      	movs	r0, #4
   202c2:	7090      	strb	r0, [r2, #2]
   202c4:	f882 c003 	strb.w	ip, [r2, #3]
   202c8:	8013      	strh	r3, [r2, #0]
   202ca:	2001      	movs	r0, #1
   202cc:	4770      	bx	lr
   202ce:	2801      	cmp	r0, #1
   202d0:	d006      	beq.n	202e0 <sym_CB3FDFEUY3F2NWFVYZOUMB3I5QKHLDIUWWP26EA+0x32>
   202d2:	2008      	movs	r0, #8
   202d4:	7090      	strb	r0, [r2, #2]
   202d6:	f882 c003 	strb.w	ip, [r2, #3]
   202da:	8013      	strh	r3, [r2, #0]
   202dc:	2001      	movs	r0, #1
   202de:	4770      	bx	lr
   202e0:	2000      	movs	r0, #0
   202e2:	4770      	bx	lr

000202e4 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>:
   202e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   202e8:	4607      	mov	r7, r0
   202ea:	460e      	mov	r6, r1
   202ec:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
   202f0:	f7ef f812 	bl	f318 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>
   202f4:	b1a0      	cbz	r0, 20320 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x3c>
   202f6:	b336      	cbz	r6, 20346 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x62>
   202f8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
   202fc:	1b02      	subs	r2, r0, r4
   202fe:	eb61 0305 	sbc.w	r3, r1, r5
   20302:	2000      	movs	r0, #0
   20304:	4601      	mov	r1, r0
   20306:	1a80      	subs	r0, r0, r2
   20308:	eb71 0003 	sbcs.w	r0, r1, r3
   2030c:	da1b      	bge.n	20346 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x62>
   2030e:	1c50      	adds	r0, r2, #1
   20310:	f173 0000 	sbcs.w	r0, r3, #0
   20314:	db09      	blt.n	2032a <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x46>
   20316:	f240 2129 	movw	r1, #553	; 0x229
   2031a:	2029      	movs	r0, #41	; 0x29
   2031c:	f7f1 fb30 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   20320:	f240 211f 	movw	r1, #543	; 0x21f
   20324:	2029      	movs	r0, #41	; 0x29
   20326:	f7f1 fb2b 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   2032a:	1990      	adds	r0, r2, r6
   2032c:	1e40      	subs	r0, r0, #1
   2032e:	fbb0 f1f6 	udiv	r1, r0, r6
   20332:	fb01 f006 	mul.w	r0, r1, r6
   20336:	1820      	adds	r0, r4, r0
   20338:	f145 0200 	adc.w	r2, r5, #0
   2033c:	e9c7 0204 	strd	r0, r2, [r7, #16]
   20340:	4608      	mov	r0, r1
   20342:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   20346:	2000      	movs	r0, #0
   20348:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002034c <sym_3LQGLF52CJLOKQOJSNFVLTD3CW6GGPJMARVGQNQ>:
   2034c:	2300      	movs	r3, #0
   2034e:	6383      	str	r3, [r0, #56]	; 0x38
   20350:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
   20354:	f240 2371 	movw	r3, #625	; 0x271
   20358:	435a      	muls	r2, r3
   2035a:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   2035e:	1e52      	subs	r2, r2, #1
   20360:	fbb2 f1f1 	udiv	r1, r2, r1
   20364:	63c1      	str	r1, [r0, #60]	; 0x3c
   20366:	4770      	bx	lr

00020368 <sym_OTIPANP3Q7VLW2BQGLZZUUDNR5HBSAYXJSFAKKA>:
   20368:	f2a0 1089 	subw	r0, r0, #393	; 0x189
   2036c:	4281      	cmp	r1, r0
   2036e:	bf38      	it	cc
   20370:	4608      	movcc	r0, r1
   20372:	1a08      	subs	r0, r1, r0
   20374:	6819      	ldr	r1, [r3, #0]
   20376:	0840      	lsrs	r0, r0, #1
   20378:	4401      	add	r1, r0
   2037a:	6019      	str	r1, [r3, #0]
   2037c:	6811      	ldr	r1, [r2, #0]
   2037e:	eba1 0100 	sub.w	r1, r1, r0
   20382:	6011      	str	r1, [r2, #0]
   20384:	bf18      	it	ne
   20386:	2001      	movne	r0, #1
   20388:	4770      	bx	lr

0002038a <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>:
   2038a:	f641 524c 	movw	r2, #7500	; 0x1d4c
   2038e:	4291      	cmp	r1, r2
   20390:	bf34      	ite	cc
   20392:	2164      	movcc	r1, #100	; 0x64
   20394:	f240 41e2 	movwcs	r1, #1250	; 0x4e2
   20398:	4348      	muls	r0, r1
   2039a:	4770      	bx	lr

0002039c <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>:
   2039c:	f641 524c 	movw	r2, #7500	; 0x1d4c
   203a0:	4291      	cmp	r1, r2
   203a2:	bf3e      	ittt	cc
   203a4:	2164      	movcc	r1, #100	; 0x64
   203a6:	fb10 f001 	smulbbcc	r0, r0, r1
   203aa:	4770      	bxcc	lr
   203ac:	f240 2171 	movw	r1, #625	; 0x271
   203b0:	fb10 f001 	smulbb	r0, r0, r1
   203b4:	f64f 71ff 	movw	r1, #65535	; 0xffff
   203b8:	ea01 0040 	and.w	r0, r1, r0, lsl #1
   203bc:	4770      	bx	lr

000203be <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>:
   203be:	b570      	push	{r4, r5, r6, lr}
   203c0:	4604      	mov	r4, r0
   203c2:	1c40      	adds	r0, r0, #1
   203c4:	4288      	cmp	r0, r1
   203c6:	bf18      	it	ne
   203c8:	f003 f8db 	blne	23582 <sym_VCM3BICZ5QLCEBBK5263KDY2XJT4MJLUF43FCFA>
   203cc:	7960      	ldrb	r0, [r4, #5]
   203ce:	f000 001f 	and.w	r0, r0, #31
   203d2:	7160      	strb	r0, [r4, #5]
   203d4:	2000      	movs	r0, #0
   203d6:	72e0      	strb	r0, [r4, #11]
   203d8:	4605      	mov	r5, r0
   203da:	1966      	adds	r6, r4, r5
   203dc:	7870      	ldrb	r0, [r6, #1]
   203de:	f000 fcf4 	bl	20dca <sym_KQ7WDRFWHZIBRVZJQIHMC5NBIZUJ4NGFK5AE4FQ>
   203e2:	71b0      	strb	r0, [r6, #6]
   203e4:	7ae1      	ldrb	r1, [r4, #11]
   203e6:	4408      	add	r0, r1
   203e8:	72e0      	strb	r0, [r4, #11]
   203ea:	1c68      	adds	r0, r5, #1
   203ec:	b2c5      	uxtb	r5, r0
   203ee:	2d05      	cmp	r5, #5
   203f0:	d3f3      	bcc.n	203da <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x1c>
   203f2:	bd70      	pop	{r4, r5, r6, pc}

000203f4 <sym_CFSAKL745S6L7NUIQWHEM5VF373WPPG5ELNMOCA>:
   203f4:	b570      	push	{r4, r5, r6, lr}
   203f6:	4605      	mov	r5, r0
   203f8:	78c0      	ldrb	r0, [r0, #3]
   203fa:	4616      	mov	r6, r2
   203fc:	f000 043f 	and.w	r4, r0, #63	; 0x3f
   20400:	1910      	adds	r0, r2, r4
   20402:	1c40      	adds	r0, r0, #1
   20404:	28ff      	cmp	r0, #255	; 0xff
   20406:	d904      	bls.n	20412 <sym_CFSAKL745S6L7NUIQWHEM5VF373WPPG5ELNMOCA+0x1e>
   20408:	f240 3186 	movw	r1, #902	; 0x386
   2040c:	202a      	movs	r0, #42	; 0x2a
   2040e:	f7f1 fab7 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   20412:	1928      	adds	r0, r5, r4
   20414:	1d00      	adds	r0, r0, #4
   20416:	f7fe fa22 	bl	1e85e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   2041a:	19a0      	adds	r0, r4, r6
   2041c:	1c40      	adds	r0, r0, #1
   2041e:	7068      	strb	r0, [r5, #1]
   20420:	bd70      	pop	{r4, r5, r6, pc}

00020422 <sym_IUN5SW63ODKDFPSGCV4FO7HO5IPKZTFTURF2JKI>:
   20422:	22c0      	movs	r2, #192	; 0xc0
   20424:	ea02 1181 	and.w	r1, r2, r1, lsl #6
   20428:	78c2      	ldrb	r2, [r0, #3]
   2042a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
   2042e:	4311      	orrs	r1, r2
   20430:	70c1      	strb	r1, [r0, #3]
   20432:	4770      	bx	lr

00020434 <sym_WLQ6YP4CLBLEMT6X4SKN2P2RM7K53RQFGIL5RPY>:
   20434:	b2cb      	uxtb	r3, r1
   20436:	f003 0101 	and.w	r1, r3, #1
   2043a:	f3c3 0c40 	ubfx	ip, r3, #1, #1
   2043e:	4461      	add	r1, ip
   20440:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   20444:	f3c3 0c80 	ubfx	ip, r3, #2, #1
   20448:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
   2044c:	f3c3 0cc0 	ubfx	ip, r3, #3, #1
   20450:	eb01 014c 	add.w	r1, r1, ip, lsl #1
   20454:	f3c3 1c00 	ubfx	ip, r3, #4, #1
   20458:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
   2045c:	4461      	add	r1, ip
   2045e:	f3c3 1c40 	ubfx	ip, r3, #5, #1
   20462:	eb0c 0ccc 	add.w	ip, ip, ip, lsl #3
   20466:	eb01 014c 	add.w	r1, r1, ip, lsl #1
   2046a:	f3c3 1c80 	ubfx	ip, r3, #6, #1
   2046e:	4461      	add	r1, ip
   20470:	4411      	add	r1, r2
   20472:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
   20476:	d002      	beq.n	2047e <sym_WLQ6YP4CLBLEMT6X4SKN2P2RM7K53RQFGIL5RPY+0x4a>
   20478:	1c49      	adds	r1, r1, #1
   2047a:	b2c9      	uxtb	r1, r1
   2047c:	7103      	strb	r3, [r0, #4]
   2047e:	f890 c003 	ldrb.w	ip, [r0, #3]
   20482:	f001 033f 	and.w	r3, r1, #63	; 0x3f
   20486:	f00c 0cc0 	and.w	ip, ip, #192	; 0xc0
   2048a:	ea43 030c 	orr.w	r3, r3, ip
   2048e:	70c3      	strb	r3, [r0, #3]
   20490:	1c4b      	adds	r3, r1, #1
   20492:	7043      	strb	r3, [r0, #1]
   20494:	2a00      	cmp	r2, #0
   20496:	bf08      	it	eq
   20498:	4770      	bxeq	lr
   2049a:	1e53      	subs	r3, r2, #1
   2049c:	1a89      	subs	r1, r1, r2
   2049e:	4408      	add	r0, r1
   204a0:	7103      	strb	r3, [r0, #4]
   204a2:	4770      	bx	lr

000204a4 <sym_H3NF7V2EYDGPUFAQEJQIA2BFAJPUZD343N5IYHY>:
   204a4:	b510      	push	{r4, lr}
   204a6:	4604      	mov	r4, r0
   204a8:	f000 fa4d 	bl	20946 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x4>
   204ac:	2800      	cmp	r0, #0
   204ae:	bf18      	it	ne
   204b0:	4420      	addne	r0, r4
   204b2:	bd10      	pop	{r4, pc}

000204b4 <sym_PBUYHYNPX6UVR3SOSML43PVJV4TB32DZKPBWZSI>:
   204b4:	78c1      	ldrb	r1, [r0, #3]
   204b6:	f011 023f 	ands.w	r2, r1, #63	; 0x3f
   204ba:	bf18      	it	ne
   204bc:	2201      	movne	r2, #1
   204be:	7900      	ldrb	r0, [r0, #4]
   204c0:	f010 0301 	ands.w	r3, r0, #1
   204c4:	bf18      	it	ne
   204c6:	2301      	movne	r3, #1
   204c8:	ea03 0c02 	and.w	ip, r3, r2
   204cc:	f011 0f3f 	tst.w	r1, #63	; 0x3f
   204d0:	bf14      	ite	ne
   204d2:	2301      	movne	r3, #1
   204d4:	2300      	moveq	r3, #0
   204d6:	f010 0202 	ands.w	r2, r0, #2
   204da:	bf18      	it	ne
   204dc:	2201      	movne	r2, #1
   204de:	401a      	ands	r2, r3
   204e0:	4462      	add	r2, ip
   204e2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   204e6:	ea4f 0c42 	mov.w	ip, r2, lsl #1
   204ea:	f011 0f3f 	tst.w	r1, #63	; 0x3f
   204ee:	bf14      	ite	ne
   204f0:	2301      	movne	r3, #1
   204f2:	2300      	moveq	r3, #0
   204f4:	f010 0208 	ands.w	r2, r0, #8
   204f8:	bf18      	it	ne
   204fa:	2201      	movne	r2, #1
   204fc:	401a      	ands	r2, r3
   204fe:	eb0c 0c42 	add.w	ip, ip, r2, lsl #1
   20502:	f011 023f 	ands.w	r2, r1, #63	; 0x3f
   20506:	bf18      	it	ne
   20508:	2201      	movne	r2, #1
   2050a:	f010 0304 	ands.w	r3, r0, #4
   2050e:	bf18      	it	ne
   20510:	2301      	movne	r3, #1
   20512:	401a      	ands	r2, r3
   20514:	4494      	add	ip, r2
   20516:	f011 023f 	ands.w	r2, r1, #63	; 0x3f
   2051a:	bf18      	it	ne
   2051c:	2201      	movne	r2, #1
   2051e:	f010 0320 	ands.w	r3, r0, #32
   20522:	bf18      	it	ne
   20524:	2301      	movne	r3, #1
   20526:	401a      	ands	r2, r3
   20528:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
   2052c:	eb0c 0c42 	add.w	ip, ip, r2, lsl #1
   20530:	f011 023f 	ands.w	r2, r1, #63	; 0x3f
   20534:	bf18      	it	ne
   20536:	2201      	movne	r2, #1
   20538:	f010 0310 	ands.w	r3, r0, #16
   2053c:	bf18      	it	ne
   2053e:	2301      	movne	r3, #1
   20540:	401a      	ands	r2, r3
   20542:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   20546:	4462      	add	r2, ip
   20548:	f011 013f 	ands.w	r1, r1, #63	; 0x3f
   2054c:	bf18      	it	ne
   2054e:	2101      	movne	r1, #1
   20550:	f010 0040 	ands.w	r0, r0, #64	; 0x40
   20554:	bf18      	it	ne
   20556:	2001      	movne	r0, #1
   20558:	4008      	ands	r0, r1
   2055a:	4410      	add	r0, r2
   2055c:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
   20560:	bf1c      	itt	ne
   20562:	1c40      	addne	r0, r0, #1
   20564:	b2c0      	uxtbne	r0, r0
   20566:	4770      	bx	lr

00020568 <sym_APJRNOYIPVVMXANZL7N72BAJ3R7XI267X7HUSZY>:
   20568:	78c0      	ldrb	r0, [r0, #3]
   2056a:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   2056e:	4770      	bx	lr

00020570 <sym_DEQ52UXGGOG3CBHCSM5ZCBFPFTNN2OZ3BBWERRI>:
   20570:	b570      	push	{r4, r5, r6, lr}
   20572:	461c      	mov	r4, r3
   20574:	000d      	movs	r5, r1
   20576:	4606      	mov	r6, r0
   20578:	d00c      	beq.n	20594 <sym_DEQ52UXGGOG3CBHCSM5ZCBFPFTNN2OZ3BBWERRI+0x24>
   2057a:	4611      	mov	r1, r2
   2057c:	f000 f9e3 	bl	20946 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x4>
   20580:	b168      	cbz	r0, 2059e <sym_DEQ52UXGGOG3CBHCSM5ZCBFPFTNN2OZ3BBWERRI+0x2e>
   20582:	1901      	adds	r1, r0, r4
   20584:	1f09      	subs	r1, r1, #4
   20586:	293f      	cmp	r1, #63	; 0x3f
   20588:	dd0e      	ble.n	205a8 <sym_DEQ52UXGGOG3CBHCSM5ZCBFPFTNN2OZ3BBWERRI+0x38>
   2058a:	f240 312a 	movw	r1, #810	; 0x32a
   2058e:	202a      	movs	r0, #42	; 0x2a
   20590:	f7f1 f9f6 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   20594:	f44f 714a 	mov.w	r1, #808	; 0x328
   20598:	202a      	movs	r0, #42	; 0x2a
   2059a:	f7f1 f9f1 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   2059e:	f240 3129 	movw	r1, #809	; 0x329
   205a2:	202a      	movs	r0, #42	; 0x2a
   205a4:	f7f1 f9ec 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   205a8:	4430      	add	r0, r6
   205aa:	4622      	mov	r2, r4
   205ac:	4629      	mov	r1, r5
   205ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   205b2:	f7fe b954 	b.w	1e85e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>

000205b6 <sym_275CZPEXZ5GILHAL7XLHAN4U4MKDK6NWLUA2SLI>:
   205b6:	7840      	ldrb	r0, [r0, #1]
   205b8:	4770      	bx	lr

000205ba <sym_33X4NJAF5ERGJDTOD7NIRDMR4KT4JWBGAGRR5WQ>:
   205ba:	b530      	push	{r4, r5, lr}
   205bc:	7802      	ldrb	r2, [r0, #0]
   205be:	b083      	sub	sp, #12
   205c0:	f002 020f 	and.w	r2, r2, #15
   205c4:	2a03      	cmp	r2, #3
   205c6:	d054      	beq.n	20672 <sym_33X4NJAF5ERGJDTOD7NIRDMR4KT4JWBGAGRR5WQ+0xb8>
   205c8:	2a05      	cmp	r2, #5
   205ca:	d14f      	bne.n	2066c <sym_33X4NJAF5ERGJDTOD7NIRDMR4KT4JWBGAGRR5WQ+0xb2>
   205cc:	460d      	mov	r5, r1
   205ce:	4604      	mov	r4, r0
   205d0:	f100 011f 	add.w	r1, r0, #31
   205d4:	4668      	mov	r0, sp
   205d6:	f002 ffd4 	bl	23582 <sym_VCM3BICZ5QLCEBBK5263KDY2XJT4MJLUF43FCFA>
   205da:	f89d 0004 	ldrb.w	r0, [sp, #4]
   205de:	f89d 2000 	ldrb.w	r2, [sp]
   205e2:	f000 01e0 	and.w	r1, r0, #224	; 0xe0
   205e6:	2000      	movs	r0, #0
   205e8:	f88d 1004 	strb.w	r1, [sp, #4]
   205ec:	2a00      	cmp	r2, #0
   205ee:	bf04      	itt	eq
   205f0:	f89d 2001 	ldrbeq.w	r2, [sp, #1]
   205f4:	2a00      	cmpeq	r2, #0
   205f6:	d10a      	bne.n	2060e <sym_33X4NJAF5ERGJDTOD7NIRDMR4KT4JWBGAGRR5WQ+0x54>
   205f8:	f89d 2002 	ldrb.w	r2, [sp, #2]
   205fc:	2a00      	cmp	r2, #0
   205fe:	bf01      	itttt	eq
   20600:	f89d 2003 	ldrbeq.w	r2, [sp, #3]
   20604:	2a00      	cmpeq	r2, #0
   20606:	2900      	cmpeq	r1, #0
   20608:	b003      	addeq	sp, #12
   2060a:	bf08      	it	eq
   2060c:	bd30      	popeq	{r4, r5, pc}
   2060e:	f8b4 0019 	ldrh.w	r0, [r4, #25]
   20612:	f894 c001 	ldrb.w	ip, [r4, #1]
   20616:	f8b4 201b 	ldrh.w	r2, [r4, #27]
   2061a:	f8b4 3017 	ldrh.w	r3, [r4, #23]
   2061e:	7da1      	ldrb	r1, [r4, #22]
   20620:	f1bc 0f22 	cmp.w	ip, #34	; 0x22
   20624:	d122      	bne.n	2066c <sym_33X4NJAF5ERGJDTOD7NIRDMR4KT4JWBGAGRR5WQ+0xb2>
   20626:	2d00      	cmp	r5, #0
   20628:	bf18      	it	ne
   2062a:	f5b0 6f50 	cmpne.w	r0, #3328	; 0xd00
   2062e:	d903      	bls.n	20638 <sym_33X4NJAF5ERGJDTOD7NIRDMR4KT4JWBGAGRR5WQ+0x7e>
   20630:	f640 5c07 	movw	ip, #3335	; 0xd07
   20634:	4560      	cmp	r0, ip
   20636:	d90c      	bls.n	20652 <sym_33X4NJAF5ERGJDTOD7NIRDMR4KT4JWBGAGRR5WQ+0x98>
   20638:	f1a0 0c06 	sub.w	ip, r0, #6
   2063c:	f640 457a 	movw	r5, #3194	; 0xc7a
   20640:	45ac      	cmp	ip, r5
   20642:	d813      	bhi.n	2066c <sym_33X4NJAF5ERGJDTOD7NIRDMR4KT4JWBGAGRR5WQ+0xb2>
   20644:	b191      	cbz	r1, 2066c <sym_33X4NJAF5ERGJDTOD7NIRDMR4KT4JWBGAGRR5WQ+0xb2>
   20646:	2908      	cmp	r1, #8
   20648:	bf98      	it	ls
   2064a:	4281      	cmpls	r1, r0
   2064c:	d20e      	bcs.n	2066c <sym_33X4NJAF5ERGJDTOD7NIRDMR4KT4JWBGAGRR5WQ+0xb2>
   2064e:	4298      	cmp	r0, r3
   20650:	d30c      	bcc.n	2066c <sym_33X4NJAF5ERGJDTOD7NIRDMR4KT4JWBGAGRR5WQ+0xb2>
   20652:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
   20656:	d209      	bcs.n	2066c <sym_33X4NJAF5ERGJDTOD7NIRDMR4KT4JWBGAGRR5WQ+0xb2>
   20658:	f8b4 001d 	ldrh.w	r0, [r4, #29]
   2065c:	f640 4176 	movw	r1, #3190	; 0xc76
   20660:	380a      	subs	r0, #10
   20662:	4281      	cmp	r1, r0
   20664:	d302      	bcc.n	2066c <sym_33X4NJAF5ERGJDTOD7NIRDMR4KT4JWBGAGRR5WQ+0xb2>
   20666:	b003      	add	sp, #12
   20668:	2001      	movs	r0, #1
   2066a:	bd30      	pop	{r4, r5, pc}
   2066c:	b003      	add	sp, #12
   2066e:	2000      	movs	r0, #0
   20670:	bd30      	pop	{r4, r5, pc}
   20672:	7840      	ldrb	r0, [r0, #1]
   20674:	280c      	cmp	r0, #12
   20676:	d1f9      	bne.n	2066c <sym_33X4NJAF5ERGJDTOD7NIRDMR4KT4JWBGAGRR5WQ+0xb2>
   20678:	e7f5      	b.n	20666 <sym_33X4NJAF5ERGJDTOD7NIRDMR4KT4JWBGAGRR5WQ+0xac>

0002067a <sym_252O2EYK5FIXU63T5SACWK2VO6UFAQRM77ITNFA>:
   2067a:	b570      	push	{r4, r5, r6, lr}
   2067c:	4614      	mov	r4, r2
   2067e:	4605      	mov	r5, r0
   20680:	2a1f      	cmp	r2, #31
   20682:	d903      	bls.n	2068c <sym_252O2EYK5FIXU63T5SACWK2VO6UFAQRM77ITNFA+0x12>
   20684:	21f1      	movs	r1, #241	; 0xf1
   20686:	202a      	movs	r0, #42	; 0x2a
   20688:	f7f1 f97a 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   2068c:	f105 0009 	add.w	r0, r5, #9
   20690:	f7fe f8e5 	bl	1e85e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   20694:	1da0      	adds	r0, r4, #6
   20696:	7068      	strb	r0, [r5, #1]
   20698:	bd70      	pop	{r4, r5, r6, pc}

0002069a <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>:
   2069a:	b510      	push	{r4, lr}
   2069c:	7802      	ldrb	r2, [r0, #0]
   2069e:	f001 030f 	and.w	r3, r1, #15
   206a2:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
   206a6:	431a      	orrs	r2, r3
   206a8:	7002      	strb	r2, [r0, #0]
   206aa:	2909      	cmp	r1, #9
   206ac:	d213      	bcs.n	206d6 <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA+0x3c>
   206ae:	e8df f001 	tbb	[pc, r1]
   206b2:	0705      	.short	0x0705
   206b4:	09050705 	.word	0x09050705
   206b8:	000f0b05 	.word	0x000f0b05
   206bc:	2106      	movs	r1, #6
   206be:	e008      	b.n	206d2 <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA+0x38>
   206c0:	210c      	movs	r1, #12
   206c2:	e006      	b.n	206d2 <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA+0x38>
   206c4:	2122      	movs	r1, #34	; 0x22
   206c6:	e004      	b.n	206d2 <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA+0x38>
   206c8:	2101      	movs	r1, #1
   206ca:	2200      	movs	r2, #0
   206cc:	70c2      	strb	r2, [r0, #3]
   206ce:	e000      	b.n	206d2 <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA+0x38>
   206d0:	210e      	movs	r1, #14
   206d2:	7041      	strb	r1, [r0, #1]
   206d4:	bd10      	pop	{r4, pc}
   206d6:	21ab      	movs	r1, #171	; 0xab
   206d8:	202a      	movs	r0, #42	; 0x2a
   206da:	f7f1 f951 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

000206de <sym_M7NFHAM4FWTXSZMPV3DTHM2V6JD26AKK4R2A6YI>:
   206de:	680a      	ldr	r2, [r1, #0]
   206e0:	f8c0 2009 	str.w	r2, [r0, #9]
   206e4:	8889      	ldrh	r1, [r1, #4]
   206e6:	f8a0 100d 	strh.w	r1, [r0, #13]
   206ea:	4770      	bx	lr

000206ec <sym_NAGMMCXDNSRJLJ55T6DS4CG2FNZEN6Y562ZTFRY>:
   206ec:	7802      	ldrb	r2, [r0, #0]
   206ee:	2380      	movs	r3, #128	; 0x80
   206f0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   206f4:	ea03 11c1 	and.w	r1, r3, r1, lsl #7
   206f8:	4311      	orrs	r1, r2
   206fa:	7001      	strb	r1, [r0, #0]
   206fc:	4770      	bx	lr

000206fe <sym_UDZO6WOEWJ2CNEYVP45GSHBVFT4OP6GEANP3NQY>:
   206fe:	680a      	ldr	r2, [r1, #0]
   20700:	f8c0 2003 	str.w	r2, [r0, #3]
   20704:	8889      	ldrh	r1, [r1, #4]
   20706:	f8a0 1007 	strh.w	r1, [r0, #7]
   2070a:	4770      	bx	lr

0002070c <sym_YBOODJ7VBLXRRILCBQXIORIXU3GHRAYK6WULLQY>:
   2070c:	7802      	ldrb	r2, [r0, #0]
   2070e:	2340      	movs	r3, #64	; 0x40
   20710:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
   20714:	ea03 1181 	and.w	r1, r3, r1, lsl #6
   20718:	4311      	orrs	r1, r2
   2071a:	7001      	strb	r1, [r0, #0]
   2071c:	4770      	bx	lr

0002071e <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI>:
   2071e:	b570      	push	{r4, r5, r6, lr}
   20720:	4614      	mov	r4, r2
   20722:	4605      	mov	r5, r0
   20724:	2a1f      	cmp	r2, #31
   20726:	d904      	bls.n	20732 <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI+0x14>
   20728:	f240 1113 	movw	r1, #275	; 0x113
   2072c:	202a      	movs	r0, #42	; 0x2a
   2072e:	f7f1 f927 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   20732:	f105 0009 	add.w	r0, r5, #9
   20736:	f7fe f892 	bl	1e85e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   2073a:	1da0      	adds	r0, r4, #6
   2073c:	7068      	strb	r0, [r5, #1]
   2073e:	bd70      	pop	{r4, r5, r6, pc}

00020740 <sym_HNZ6YNBDEHFBFGO4FGYZWJ2ZIELRZCSFTGHBNAA>:
   20740:	780a      	ldrb	r2, [r1, #0]
   20742:	7102      	strb	r2, [r0, #4]
   20744:	880a      	ldrh	r2, [r1, #0]
   20746:	0a12      	lsrs	r2, r2, #8
   20748:	7142      	strb	r2, [r0, #5]
   2074a:	680a      	ldr	r2, [r1, #0]
   2074c:	0c12      	lsrs	r2, r2, #16
   2074e:	7182      	strb	r2, [r0, #6]
   20750:	884a      	ldrh	r2, [r1, #2]
   20752:	0a12      	lsrs	r2, r2, #8
   20754:	71c2      	strb	r2, [r0, #7]
   20756:	f8d1 2002 	ldr.w	r2, [r1, #2]
   2075a:	0c12      	lsrs	r2, r2, #16
   2075c:	7202      	strb	r2, [r0, #8]
   2075e:	f8d1 2002 	ldr.w	r2, [r1, #2]
   20762:	0e12      	lsrs	r2, r2, #24
   20764:	7242      	strb	r2, [r0, #9]
   20766:	798a      	ldrb	r2, [r1, #6]
   20768:	7282      	strb	r2, [r0, #10]
   2076a:	88c9      	ldrh	r1, [r1, #6]
   2076c:	0a09      	lsrs	r1, r1, #8
   2076e:	72c1      	strb	r1, [r0, #11]
   20770:	4770      	bx	lr

00020772 <sym_KNRZBIFY2P43T7N5353YRUKMVJ4HQK3VLP7QLXI>:
   20772:	780a      	ldrb	r2, [r1, #0]
   20774:	7102      	strb	r2, [r0, #4]
   20776:	784a      	ldrb	r2, [r1, #1]
   20778:	7142      	strb	r2, [r0, #5]
   2077a:	7889      	ldrb	r1, [r1, #2]
   2077c:	7181      	strb	r1, [r0, #6]
   2077e:	4770      	bx	lr

00020780 <sym_7VZW6MQYCHJNYQ6F4AFCRRJSPXBVUQDDS4RU32Y>:
   20780:	1d02      	adds	r2, r0, #4
   20782:	4608      	mov	r0, r1
   20784:	4611      	mov	r1, r2
   20786:	f002 befc 	b.w	23582 <sym_VCM3BICZ5QLCEBBK5263KDY2XJT4MJLUF43FCFA>

0002078a <sym_E5LV7NLJGDBOOHT3XI7LZP4SJ6B3AVX5ZM7II3A>:
   2078a:	f8b0 0009 	ldrh.w	r0, [r0, #9]
   2078e:	4770      	bx	lr

00020790 <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A>:
   20790:	b430      	push	{r4, r5}
   20792:	f8b0 2007 	ldrh.w	r2, [r0, #7]
   20796:	f8b0 c009 	ldrh.w	ip, [r0, #9]
   2079a:	f8b0 4005 	ldrh.w	r4, [r0, #5]
   2079e:	7903      	ldrb	r3, [r0, #4]
   207a0:	f8b0 000b 	ldrh.w	r0, [r0, #11]
   207a4:	2900      	cmp	r1, #0
   207a6:	bf18      	it	ne
   207a8:	f5b2 6f50 	cmpne.w	r2, #3328	; 0xd00
   207ac:	d903      	bls.n	207b6 <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x26>
   207ae:	f640 5107 	movw	r1, #3335	; 0xd07
   207b2:	428a      	cmp	r2, r1
   207b4:	d90b      	bls.n	207ce <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x3e>
   207b6:	1f91      	subs	r1, r2, #6
   207b8:	f640 457a 	movw	r5, #3194	; 0xc7a
   207bc:	42a9      	cmp	r1, r5
   207be:	d811      	bhi.n	207e4 <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x54>
   207c0:	b183      	cbz	r3, 207e4 <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x54>
   207c2:	2b08      	cmp	r3, #8
   207c4:	bf98      	it	ls
   207c6:	4293      	cmpls	r3, r2
   207c8:	d20c      	bcs.n	207e4 <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x54>
   207ca:	42a2      	cmp	r2, r4
   207cc:	d30a      	bcc.n	207e4 <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x54>
   207ce:	f5bc 7ffa 	cmp.w	ip, #500	; 0x1f4
   207d2:	d207      	bcs.n	207e4 <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x54>
   207d4:	f640 4176 	movw	r1, #3190	; 0xc76
   207d8:	380a      	subs	r0, #10
   207da:	4281      	cmp	r1, r0
   207dc:	bf22      	ittt	cs
   207de:	2001      	movcs	r0, #1
   207e0:	bc30      	popcs	{r4, r5}
   207e2:	4770      	bxcs	lr
   207e4:	2000      	movs	r0, #0
   207e6:	bc30      	pop	{r4, r5}
   207e8:	4770      	bx	lr

000207ea <sym_GII4UQLGDHD6D5DSTGUIOYZXEEJFVPTQQUWUNII>:
   207ea:	f8b0 0007 	ldrh.w	r0, [r0, #7]
   207ee:	4770      	bx	lr

000207f0 <sym_MD56XYITEHSLIFIRQT26SWOCASBX33AYW4XGGWY>:
   207f0:	f8b0 0009 	ldrh.w	r0, [r0, #9]
   207f4:	4770      	bx	lr

000207f6 <sym_EKDQHRHOWISU7QCQSGE4X3J4VBX22VVETALDGWI>:
   207f6:	f8b0 000b 	ldrh.w	r0, [r0, #11]
   207fa:	4770      	bx	lr

000207fc <sym_7YTCAQN5IYKWCY5F36IVGAEEQIOP6X7YL63LRUI>:
   207fc:	b510      	push	{r4, lr}
   207fe:	29fb      	cmp	r1, #251	; 0xfb
   20800:	bf9c      	itt	ls
   20802:	7041      	strbls	r1, [r0, #1]
   20804:	bd10      	popls	{r4, pc}
   20806:	f240 61ac 	movw	r1, #1708	; 0x6ac
   2080a:	202a      	movs	r0, #42	; 0x2a
   2080c:	f7f1 f8b8 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

00020810 <sym_FIJW4TR7AWR6OLWCHL3HTVQSVWXOS6T6XISXCQQ>:
   20810:	8980      	ldrh	r0, [r0, #12]
   20812:	8008      	strh	r0, [r1, #0]
   20814:	4770      	bx	lr

00020816 <sym_NILDTLWW7AYBRN5PYE72ILWSBBVUBN4Y5FF3XQQ>:
   20816:	f8d0 0016 	ldr.w	r0, [r0, #22]
   2081a:	6008      	str	r0, [r1, #0]
   2081c:	4770      	bx	lr

0002081e <sym_7LJR6S4GQKSUMWIUG2FRZAKXFD3RUBQ6FOHJMZQ>:
   2081e:	6842      	ldr	r2, [r0, #4]
   20820:	600a      	str	r2, [r1, #0]
   20822:	6880      	ldr	r0, [r0, #8]
   20824:	6048      	str	r0, [r1, #4]
   20826:	4770      	bx	lr

00020828 <sym_3BQBYKVQGWCA6VF5GDIUVXGAPLPPXRSSEFO5TXA>:
   20828:	f8d0 200e 	ldr.w	r2, [r0, #14]
   2082c:	600a      	str	r2, [r1, #0]
   2082e:	f8d0 0012 	ldr.w	r0, [r0, #18]
   20832:	6048      	str	r0, [r1, #4]
   20834:	4770      	bx	lr

00020836 <sym_RGBMWS6T65LAWR3HOVV5354MKQCATDBBY34XWQA>:
   20836:	6809      	ldr	r1, [r1, #0]
   20838:	60c1      	str	r1, [r0, #12]
   2083a:	4770      	bx	lr

0002083c <sym_5WHAN4NH6PZY7VV5KTN53CABJRWXR3RJHHTA7KA>:
   2083c:	680a      	ldr	r2, [r1, #0]
   2083e:	6042      	str	r2, [r0, #4]
   20840:	6849      	ldr	r1, [r1, #4]
   20842:	6081      	str	r1, [r0, #8]
   20844:	4770      	bx	lr

00020846 <sym_SNSRF2OD5RKCBMNHGEBC4PQLTEZDLFXABEHWJNQ>:
   20846:	7840      	ldrb	r0, [r0, #1]
   20848:	4770      	bx	lr

0002084a <sym_VV6G4PHP6ULWM4Y2LJJIOETDZSUFDXGJCHBQNZI>:
   2084a:	7800      	ldrb	r0, [r0, #0]
   2084c:	f000 0003 	and.w	r0, r0, #3
   20850:	4770      	bx	lr

00020852 <sym_PHCTC5YUX44NFLNJCEBJKKRAYHGUKTS4AC5GMAI>:
   20852:	8880      	ldrh	r0, [r0, #4]
   20854:	4770      	bx	lr

00020856 <sym_BWPZYUAKR5BUOCM2NWAMEPWQB6GIJXBPUENADMI>:
   20856:	88c0      	ldrh	r0, [r0, #6]
   20858:	4770      	bx	lr

0002085a <sym_QDD7GI62CPYTU4DR5RMOF6JH72V5L65ZJXU3VAA>:
   2085a:	8900      	ldrh	r0, [r0, #8]
   2085c:	4770      	bx	lr

0002085e <sym_M5NXXZSYW5XYDZUQUOZMKSTD6GIS5XZ7Y4SKNVI>:
   2085e:	8940      	ldrh	r0, [r0, #10]
   20860:	4770      	bx	lr

00020862 <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY>:
   20862:	8901      	ldrh	r1, [r0, #8]
   20864:	291b      	cmp	r1, #27
   20866:	bf24      	itt	cs
   20868:	8941      	ldrhcs	r1, [r0, #10]
   2086a:	f5b1 7fa4 	cmpcs.w	r1, #328	; 0x148
   2086e:	d307      	bcc.n	20880 <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY+0x1e>
   20870:	8881      	ldrh	r1, [r0, #4]
   20872:	291b      	cmp	r1, #27
   20874:	bf21      	itttt	cs
   20876:	88c0      	ldrhcs	r0, [r0, #6]
   20878:	f5b0 7fa4 	cmpcs.w	r0, #328	; 0x148
   2087c:	2001      	movcs	r0, #1
   2087e:	4770      	bxcs	lr
   20880:	2000      	movs	r0, #0
   20882:	4770      	bx	lr

00020884 <sym_LDFW4OY5TOKCR2MMH4J6WIDM27FFMWUGGCVUBSQ>:
   20884:	2222      	movs	r2, #34	; 0x22
   20886:	1d00      	adds	r0, r0, #4
   20888:	f7fd bfe9 	b.w	1e85e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>

0002088c <sym_PBCQYO46QLEABI4SERHQCHCGDP6NXKCTAYVE53Y>:
   2088c:	7901      	ldrb	r1, [r0, #4]
   2088e:	f011 0f07 	tst.w	r1, #7
   20892:	bf1b      	ittet	ne
   20894:	7940      	ldrbne	r0, [r0, #5]
   20896:	f010 0f07 	tstne.w	r0, #7
   2089a:	2000      	moveq	r0, #0
   2089c:	2001      	movne	r0, #1
   2089e:	4770      	bx	lr

000208a0 <sym_FVNWXAKGSIJN4YGWC4O4B4H2WPPILAIKB7LLDVI>:
   208a0:	88c0      	ldrh	r0, [r0, #6]
   208a2:	4770      	bx	lr

000208a4 <sym_A6H6572F75Y3NWHNM7XTQ5XKFPHT472D7ZS7PFQ>:
   208a4:	7901      	ldrb	r1, [r0, #4]
   208a6:	7940      	ldrb	r0, [r0, #5]
   208a8:	f001 0107 	and.w	r1, r1, #7
   208ac:	1e4a      	subs	r2, r1, #1
   208ae:	f000 0007 	and.w	r0, r0, #7
   208b2:	4011      	ands	r1, r2
   208b4:	1e42      	subs	r2, r0, #1
   208b6:	4010      	ands	r0, r2
   208b8:	4308      	orrs	r0, r1
   208ba:	bf0c      	ite	eq
   208bc:	2001      	moveq	r0, #1
   208be:	2000      	movne	r0, #0
   208c0:	4770      	bx	lr

000208c2 <sym_IMNEYE333DZSYFXBOKOMWVRET5JB5STH5YU7A5A>:
   208c2:	7900      	ldrb	r0, [r0, #4]
   208c4:	4770      	bx	lr

000208c6 <sym_UA37MSV2DKCYXYIDDSBDMFEEGPUD3YMYMAH3IEI>:
   208c6:	7940      	ldrb	r0, [r0, #5]
   208c8:	4770      	bx	lr

000208ca <sym_65MVSHFHYY3W6LGERKUEYJPJ7ENCODZZSM2L7CQ>:
   208ca:	7900      	ldrb	r0, [r0, #4]
   208cc:	4770      	bx	lr

000208ce <sym_YMBI57OSTLFK65WQKT7WKM26EFMSOHLSMFNNR4I>:
   208ce:	7101      	strb	r1, [r0, #4]
   208d0:	4770      	bx	lr

000208d2 <sym_MR2HDMT6FMX7P5HJAUSXDTOYNLKDM5AILMXKYDY>:
   208d2:	7940      	ldrb	r0, [r0, #5]
   208d4:	4770      	bx	lr

000208d6 <sym_HAHVMCZ4V2U4G5KM2JOTYBKS4GFM72EJZRT7M3A>:
   208d6:	7141      	strb	r1, [r0, #5]
   208d8:	4770      	bx	lr

000208da <sym_ML7UWXB7GWXTGW6UFCU3UDXHGUNWX35NXVW5QIA>:
   208da:	7802      	ldrb	r2, [r0, #0]
   208dc:	2320      	movs	r3, #32
   208de:	f002 02df 	and.w	r2, r2, #223	; 0xdf
   208e2:	ea03 1141 	and.w	r1, r3, r1, lsl #5
   208e6:	4311      	orrs	r1, r2
   208e8:	7001      	strb	r1, [r0, #0]
   208ea:	4770      	bx	lr

000208ec <sym_2FLKUHSSL5LZIVHHB4YVAFHCUF4O55YZBH5NHWQ>:
   208ec:	7809      	ldrb	r1, [r1, #0]
   208ee:	7081      	strb	r1, [r0, #2]
   208f0:	4770      	bx	lr

000208f2 <sym_EHH4TL4V6XWVDGG5OCXTIQQT5C4OFTGXZXSIJAA>:
   208f2:	b510      	push	{r4, lr}
   208f4:	2a1b      	cmp	r2, #27
   208f6:	d904      	bls.n	20902 <sym_EHH4TL4V6XWVDGG5OCXTIQQT5C4OFTGXZXSIJAA+0x10>
   208f8:	f240 4182 	movw	r1, #1154	; 0x482
   208fc:	202a      	movs	r0, #42	; 0x2a
   208fe:	f7f1 f83f 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   20902:	7042      	strb	r2, [r0, #1]
   20904:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   20908:	1cc0      	adds	r0, r0, #3
   2090a:	f7fd bfa8 	b.w	1e85e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>

0002090e <sym_IGXXIFMDOTCDOLQAILBV5BXIU5R6AALP5I4HZGQ>:
   2090e:	7802      	ldrb	r2, [r0, #0]
   20910:	f001 0103 	and.w	r1, r1, #3
   20914:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
   20918:	4311      	orrs	r1, r2
   2091a:	7001      	strb	r1, [r0, #0]
   2091c:	4770      	bx	lr

0002091e <sym_XW2AJRDPRGLPOQ7S6SBIDHJSPT737QJRC7LOWOI>:
   2091e:	7101      	strb	r1, [r0, #4]
   20920:	0a09      	lsrs	r1, r1, #8
   20922:	7141      	strb	r1, [r0, #5]
   20924:	4770      	bx	lr

00020926 <sym_LKCMUIZAJSOHIZE54V37DJ4ULJ25HGEY7F7ST5I>:
   20926:	7181      	strb	r1, [r0, #6]
   20928:	0a09      	lsrs	r1, r1, #8
   2092a:	71c1      	strb	r1, [r0, #7]
   2092c:	4770      	bx	lr

0002092e <sym_5NOMYYLIL22YATRZCGPQVOYH6BFSDNIEMEEMIZA>:
   2092e:	7201      	strb	r1, [r0, #8]
   20930:	0a09      	lsrs	r1, r1, #8
   20932:	7241      	strb	r1, [r0, #9]
   20934:	4770      	bx	lr

00020936 <sym_BD2MQHSWE7QNCT7DV5JGZCA5J2QIL2T6RGRVJ3Y>:
   20936:	7281      	strb	r1, [r0, #10]
   20938:	0a09      	lsrs	r1, r1, #8
   2093a:	72c1      	strb	r1, [r0, #11]
   2093c:	4770      	bx	lr

0002093e <sym_AFBV6ZWWJ5TP5BBQPAY4D2XGGYVLQVI65FY6JPY>:
   2093e:	7900      	ldrb	r0, [r0, #4]
   20940:	4770      	bx	lr

00020942 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI>:
   20942:	7900      	ldrb	r0, [r0, #4]
   20944:	4770      	bx	lr
   20946:	78c3      	ldrb	r3, [r0, #3]
   20948:	4602      	mov	r2, r0
   2094a:	f013 003f 	ands.w	r0, r3, #63	; 0x3f
   2094e:	bf08      	it	eq
   20950:	4770      	bxeq	lr
   20952:	2005      	movs	r0, #5
   20954:	7912      	ldrb	r2, [r2, #4]
   20956:	f003 0c3f 	and.w	ip, r3, #63	; 0x3f
   2095a:	f012 0301 	ands.w	r3, r2, #1
   2095e:	bf18      	it	ne
   20960:	2301      	movne	r3, #1
   20962:	b123      	cbz	r3, 2096e <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x2c>
   20964:	2900      	cmp	r1, #0
   20966:	bf14      	ite	ne
   20968:	200b      	movne	r0, #11
   2096a:	4770      	bxeq	lr
   2096c:	e001      	b.n	20972 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x30>
   2096e:	2900      	cmp	r1, #0
   20970:	d04f      	beq.n	20a12 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0xd0>
   20972:	f012 0302 	ands.w	r3, r2, #2
   20976:	bf18      	it	ne
   20978:	2301      	movne	r3, #1
   2097a:	b123      	cbz	r3, 20986 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x44>
   2097c:	2901      	cmp	r1, #1
   2097e:	bf14      	ite	ne
   20980:	1d80      	addne	r0, r0, #6
   20982:	4770      	bxeq	lr
   20984:	e001      	b.n	2098a <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x48>
   20986:	2901      	cmp	r1, #1
   20988:	d043      	beq.n	20a12 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0xd0>
   2098a:	f012 0304 	ands.w	r3, r2, #4
   2098e:	bf18      	it	ne
   20990:	2301      	movne	r3, #1
   20992:	b123      	cbz	r3, 2099e <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x5c>
   20994:	2902      	cmp	r1, #2
   20996:	bf14      	ite	ne
   20998:	1c40      	addne	r0, r0, #1
   2099a:	4770      	bxeq	lr
   2099c:	e001      	b.n	209a2 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x60>
   2099e:	2902      	cmp	r1, #2
   209a0:	d037      	beq.n	20a12 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0xd0>
   209a2:	f012 0308 	ands.w	r3, r2, #8
   209a6:	bf18      	it	ne
   209a8:	2301      	movne	r3, #1
   209aa:	b123      	cbz	r3, 209b6 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x74>
   209ac:	2903      	cmp	r1, #3
   209ae:	bf14      	ite	ne
   209b0:	1c80      	addne	r0, r0, #2
   209b2:	4770      	bxeq	lr
   209b4:	e001      	b.n	209ba <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x78>
   209b6:	2903      	cmp	r1, #3
   209b8:	d02b      	beq.n	20a12 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0xd0>
   209ba:	f012 0310 	ands.w	r3, r2, #16
   209be:	bf18      	it	ne
   209c0:	2301      	movne	r3, #1
   209c2:	b123      	cbz	r3, 209ce <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x8c>
   209c4:	2904      	cmp	r1, #4
   209c6:	bf14      	ite	ne
   209c8:	1cc0      	addne	r0, r0, #3
   209ca:	4770      	bxeq	lr
   209cc:	e001      	b.n	209d2 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x90>
   209ce:	2904      	cmp	r1, #4
   209d0:	d01f      	beq.n	20a12 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0xd0>
   209d2:	f012 0320 	ands.w	r3, r2, #32
   209d6:	bf18      	it	ne
   209d8:	2301      	movne	r3, #1
   209da:	b12b      	cbz	r3, 209e8 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0xa6>
   209dc:	2905      	cmp	r1, #5
   209de:	bf1a      	itte	ne
   209e0:	3012      	addne	r0, #18
   209e2:	b2c0      	uxtbne	r0, r0
   209e4:	4770      	bxeq	lr
   209e6:	e001      	b.n	209ec <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0xaa>
   209e8:	2905      	cmp	r1, #5
   209ea:	d012      	beq.n	20a12 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0xd0>
   209ec:	f012 0240 	ands.w	r2, r2, #64	; 0x40
   209f0:	bf18      	it	ne
   209f2:	2201      	movne	r2, #1
   209f4:	b12a      	cbz	r2, 20a02 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0xc0>
   209f6:	2906      	cmp	r1, #6
   209f8:	bf1a      	itte	ne
   209fa:	1c40      	addne	r0, r0, #1
   209fc:	b2c0      	uxtbne	r0, r0
   209fe:	4770      	bxeq	lr
   20a00:	e001      	b.n	20a06 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0xc4>
   20a02:	2906      	cmp	r1, #6
   20a04:	d005      	beq.n	20a12 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0xd0>
   20a06:	2907      	cmp	r1, #7
   20a08:	d103      	bne.n	20a12 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0xd0>
   20a0a:	1f41      	subs	r1, r0, #5
   20a0c:	458c      	cmp	ip, r1
   20a0e:	bfc8      	it	gt
   20a10:	4770      	bxgt	lr
   20a12:	2000      	movs	r0, #0
   20a14:	4770      	bx	lr

00020a16 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>:
   20a16:	7801      	ldrb	r1, [r0, #0]
   20a18:	2900      	cmp	r1, #0
   20a1a:	bf08      	it	eq
   20a1c:	4770      	bxeq	lr
   20a1e:	6841      	ldr	r1, [r0, #4]
   20a20:	f891 22a2 	ldrb.w	r2, [r1, #674]	; 0x2a2
   20a24:	2a00      	cmp	r2, #0
   20a26:	bf08      	it	eq
   20a28:	4770      	bxeq	lr
   20a2a:	2200      	movs	r2, #0
   20a2c:	f881 22a2 	strb.w	r2, [r1, #674]	; 0x2a2
   20a30:	6840      	ldr	r0, [r0, #4]
   20a32:	f000 be16 	b.w	21662 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y>
   20a36:	b510      	push	{r4, lr}
   20a38:	b180      	cbz	r0, 20a5c <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x46>
   20a3a:	f500 73c8 	add.w	r3, r0, #400	; 0x190
   20a3e:	f04f 0c00 	mov.w	ip, #0
   20a42:	2a12      	cmp	r2, #18
   20a44:	d05e      	beq.n	20b04 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xee>
   20a46:	dc0e      	bgt.n	20a66 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x50>
   20a48:	f1a2 0207 	sub.w	r2, r2, #7
   20a4c:	2a08      	cmp	r2, #8
   20a4e:	d216      	bcs.n	20a7e <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x68>
   20a50:	e8df f002 	tbb	[pc, r2]
   20a54:	15151a43 	.word	0x15151a43
   20a58:	51152c36 	.word	0x51152c36
   20a5c:	f240 11d1 	movw	r1, #465	; 0x1d1
   20a60:	2010      	movs	r0, #16
   20a62:	f7f0 ff8d 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   20a66:	2a1c      	cmp	r2, #28
   20a68:	d06a      	beq.n	20b40 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x12a>
   20a6a:	dc04      	bgt.n	20a76 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x60>
   20a6c:	2a13      	cmp	r2, #19
   20a6e:	d071      	beq.n	20b54 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x13e>
   20a70:	2a19      	cmp	r2, #25
   20a72:	d07a      	beq.n	20b6a <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x154>
   20a74:	e003      	b.n	20a7e <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x68>
   20a76:	2a1e      	cmp	r2, #30
   20a78:	d052      	beq.n	20b20 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x10a>
   20a7a:	2a1f      	cmp	r2, #31
   20a7c:	d05c      	beq.n	20b38 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x122>
   20a7e:	f44f 71ff 	mov.w	r1, #510	; 0x1fe
   20a82:	2010      	movs	r0, #16
   20a84:	f7f0 ff7c 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   20a88:	f881 c001 	strb.w	ip, [r1, #1]
   20a8c:	2209      	movs	r2, #9
   20a8e:	700a      	strb	r2, [r1, #0]
   20a90:	f8a0 c02a 	strh.w	ip, [r0, #42]	; 0x2a
   20a94:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
   20a98:	6048      	str	r0, [r1, #4]
   20a9a:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
   20a9e:	6088      	str	r0, [r1, #8]
   20aa0:	f8b3 0088 	ldrh.w	r0, [r3, #136]	; 0x88
   20aa4:	8188      	strh	r0, [r1, #12]
   20aa6:	f881 c004 	strb.w	ip, [r1, #4]
   20aaa:	bd10      	pop	{r4, pc}
   20aac:	f881 c001 	strb.w	ip, [r1, #1]
   20ab0:	220e      	movs	r2, #14
   20ab2:	700a      	strb	r2, [r1, #0]
   20ab4:	f893 2100 	ldrb.w	r2, [r3, #256]	; 0x100
   20ab8:	710a      	strb	r2, [r1, #4]
   20aba:	8800      	ldrh	r0, [r0, #0]
   20abc:	80c8      	strh	r0, [r1, #6]
   20abe:	bd10      	pop	{r4, pc}
   20ac0:	f881 c001 	strb.w	ip, [r1, #1]
   20ac4:	220d      	movs	r2, #13
   20ac6:	700a      	strb	r2, [r1, #0]
   20ac8:	f893 2100 	ldrb.w	r2, [r3, #256]	; 0x100
   20acc:	710a      	strb	r2, [r1, #4]
   20ace:	8800      	ldrh	r0, [r0, #0]
   20ad0:	80c8      	strh	r0, [r1, #6]
   20ad2:	f893 0104 	ldrb.w	r0, [r3, #260]	; 0x104
   20ad6:	7208      	strb	r0, [r1, #8]
   20ad8:	bd10      	pop	{r4, pc}
   20ada:	f881 c001 	strb.w	ip, [r1, #1]
   20ade:	2008      	movs	r0, #8
   20ae0:	7008      	strb	r0, [r1, #0]
   20ae2:	f8d3 006a 	ldr.w	r0, [r3, #106]	; 0x6a
   20ae6:	f8d3 206e 	ldr.w	r2, [r3, #110]	; 0x6e
   20aea:	f8d3 3072 	ldr.w	r3, [r3, #114]	; 0x72
   20aee:	6048      	str	r0, [r1, #4]
   20af0:	608a      	str	r2, [r1, #8]
   20af2:	60cb      	str	r3, [r1, #12]
   20af4:	bd10      	pop	{r4, pc}
   20af6:	f881 c001 	strb.w	ip, [r1, #1]
   20afa:	2210      	movs	r2, #16
   20afc:	700a      	strb	r2, [r1, #0]
   20afe:	8800      	ldrh	r0, [r0, #0]
   20b00:	8088      	strh	r0, [r1, #4]
   20b02:	bd10      	pop	{r4, pc}
   20b04:	f881 c001 	strb.w	ip, [r1, #1]
   20b08:	2015      	movs	r0, #21
   20b0a:	7008      	strb	r0, [r1, #0]
   20b0c:	f8d3 0022 	ldr.w	r0, [r3, #34]	; 0x22
   20b10:	f8d3 2026 	ldr.w	r2, [r3, #38]	; 0x26
   20b14:	f8d3 302a 	ldr.w	r3, [r3, #42]	; 0x2a
   20b18:	6048      	str	r0, [r1, #4]
   20b1a:	608a      	str	r2, [r1, #8]
   20b1c:	60cb      	str	r3, [r1, #12]
   20b1e:	bd10      	pop	{r4, pc}
   20b20:	f881 c001 	strb.w	ip, [r1, #1]
   20b24:	202a      	movs	r0, #42	; 0x2a
   20b26:	7008      	strb	r0, [r1, #0]
   20b28:	6b98      	ldr	r0, [r3, #56]	; 0x38
   20b2a:	6048      	str	r0, [r1, #4]
   20b2c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
   20b2e:	6088      	str	r0, [r1, #8]
   20b30:	f8b3 0040 	ldrh.w	r0, [r3, #64]	; 0x40
   20b34:	8188      	strh	r0, [r1, #12]
   20b36:	bd10      	pop	{r4, pc}
   20b38:	202b      	movs	r0, #43	; 0x2b
   20b3a:	7008      	strb	r0, [r1, #0]
   20b3c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
   20b3e:	e005      	b.n	20b4c <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x136>
   20b40:	f881 c001 	strb.w	ip, [r1, #1]
   20b44:	2028      	movs	r0, #40	; 0x28
   20b46:	7008      	strb	r0, [r1, #0]
   20b48:	f8d3 000a 	ldr.w	r0, [r3, #10]
   20b4c:	6048      	str	r0, [r1, #4]
   20b4e:	bd10      	pop	{r4, pc}
   20b50:	e000      	b.n	20b54 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x13e>
   20b52:	e00a      	b.n	20b6a <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x154>
   20b54:	f881 c001 	strb.w	ip, [r1, #1]
   20b58:	2016      	movs	r0, #22
   20b5a:	7008      	strb	r0, [r1, #0]
   20b5c:	f8d3 005a 	ldr.w	r0, [r3, #90]	; 0x5a
   20b60:	6048      	str	r0, [r1, #4]
   20b62:	f8b3 005e 	ldrh.w	r0, [r3, #94]	; 0x5e
   20b66:	8108      	strh	r0, [r1, #8]
   20b68:	bd10      	pop	{r4, pc}
   20b6a:	f881 c001 	strb.w	ip, [r1, #1]
   20b6e:	221e      	movs	r2, #30
   20b70:	700a      	strb	r2, [r1, #0]
   20b72:	8800      	ldrh	r0, [r0, #0]
   20b74:	f8a1 0005 	strh.w	r0, [r1, #5]
   20b78:	f8d3 00e4 	ldr.w	r0, [r3, #228]	; 0xe4
   20b7c:	6048      	str	r0, [r1, #4]
   20b7e:	f8d3 00e8 	ldr.w	r0, [r3, #232]	; 0xe8
   20b82:	6088      	str	r0, [r1, #8]
   20b84:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
   20b88:	60c8      	str	r0, [r1, #12]
   20b8a:	f8d3 00f0 	ldr.w	r0, [r3, #240]	; 0xf0
   20b8e:	6108      	str	r0, [r1, #16]
   20b90:	f8b3 00f4 	ldrh.w	r0, [r3, #244]	; 0xf4
   20b94:	8288      	strh	r0, [r1, #20]
   20b96:	f893 00f6 	ldrb.w	r0, [r3, #246]	; 0xf6
   20b9a:	7588      	strb	r0, [r1, #22]
   20b9c:	bd10      	pop	{r4, pc}
   20b9e:	2000      	movs	r0, #0
   20ba0:	7048      	strb	r0, [r1, #1]
   20ba2:	2003      	movs	r0, #3
   20ba4:	7008      	strb	r0, [r1, #0]
   20ba6:	2001      	movs	r0, #1
   20ba8:	7108      	strb	r0, [r1, #4]
   20baa:	4770      	bx	lr

00020bac <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>:
   20bac:	b4f0      	push	{r4, r5, r6, r7}
   20bae:	8150      	strh	r0, [r2, #10]
   20bb0:	890c      	ldrh	r4, [r1, #8]
   20bb2:	4694      	mov	ip, r2
   20bb4:	8194      	strh	r4, [r2, #12]
   20bb6:	898a      	ldrh	r2, [r1, #12]
   20bb8:	f8ac 200e 	strh.w	r2, [ip, #14]
   20bbc:	8948      	ldrh	r0, [r1, #10]
   20bbe:	f8ac 0010 	strh.w	r0, [ip, #16]
   20bc2:	89cd      	ldrh	r5, [r1, #14]
   20bc4:	f8ac 5012 	strh.w	r5, [ip, #18]
   20bc8:	8dce      	ldrh	r6, [r1, #46]	; 0x2e
   20bca:	42ae      	cmp	r6, r5
   20bcc:	bf04      	itt	eq
   20bce:	8d4d      	ldrheq	r5, [r1, #42]	; 0x2a
   20bd0:	4285      	cmpeq	r5, r0
   20bd2:	d106      	bne.n	20be2 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x36>
   20bd4:	8e0d      	ldrh	r5, [r1, #48]	; 0x30
   20bd6:	4295      	cmp	r5, r2
   20bd8:	bf02      	ittt	eq
   20bda:	8d8a      	ldrheq	r2, [r1, #44]	; 0x2c
   20bdc:	42a2      	cmpeq	r2, r4
   20bde:	2200      	moveq	r2, #0
   20be0:	d001      	beq.n	20be6 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x3a>
   20be2:	f04f 0201 	mov.w	r2, #1
   20be6:	f88c 2014 	strb.w	r2, [ip, #20]
   20bea:	8548      	strh	r0, [r1, #42]	; 0x2a
   20bec:	f8bc 0012 	ldrh.w	r0, [ip, #18]
   20bf0:	85c8      	strh	r0, [r1, #46]	; 0x2e
   20bf2:	f8bc 000c 	ldrh.w	r0, [ip, #12]
   20bf6:	8588      	strh	r0, [r1, #44]	; 0x2c
   20bf8:	f8bc 000e 	ldrh.w	r0, [ip, #14]
   20bfc:	8608      	strh	r0, [r1, #48]	; 0x30
   20bfe:	bcf0      	pop	{r4, r5, r6, r7}
   20c00:	f04f 0212 	mov.w	r2, #18
   20c04:	4619      	mov	r1, r3
   20c06:	4660      	mov	r0, ip
   20c08:	f7f3 bca0 	b.w	1454c <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>

00020c0c <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>:
   20c0c:	b570      	push	{r4, r5, r6, lr}
   20c0e:	4616      	mov	r6, r2
   20c10:	460c      	mov	r4, r1
   20c12:	6942      	ldr	r2, [r0, #20]
   20c14:	2596      	movs	r5, #150	; 0x96
   20c16:	f641 514c 	movw	r1, #7500	; 0x1d4c
   20c1a:	428a      	cmp	r2, r1
   20c1c:	bf3a      	itte	cc
   20c1e:	254d      	movcc	r5, #77	; 0x4d
   20c20:	4629      	movcc	r1, r5
   20c22:	2196      	movcs	r1, #150	; 0x96
   20c24:	f890 306f 	ldrb.w	r3, [r0, #111]	; 0x6f
   20c28:	f890 206e 	ldrb.w	r2, [r0, #110]	; 0x6e
   20c2c:	f7f4 f898 	bl	14d60 <sym_VLZYODAV2LKRVZ5U6Q4CDF3UFZES3VV342R37AI+0xc>
   20c30:	4428      	add	r0, r5
   20c32:	4430      	add	r0, r6
   20c34:	42a0      	cmp	r0, r4
   20c36:	bf94      	ite	ls
   20c38:	1a20      	subls	r0, r4, r0
   20c3a:	2000      	movhi	r0, #0
   20c3c:	bd70      	pop	{r4, r5, r6, pc}

00020c3e <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>:
   20c3e:	b4f0      	push	{r4, r5, r6, r7}
   20c40:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
   20c44:	f8b0 1044 	ldrh.w	r1, [r0, #68]	; 0x44
   20c48:	8f46      	ldrh	r6, [r0, #58]	; 0x3a
   20c4a:	8fc5      	ldrh	r5, [r0, #62]	; 0x3e
   20c4c:	428a      	cmp	r2, r1
   20c4e:	bf28      	it	cs
   20c50:	460a      	movcs	r2, r1
   20c52:	f890 106f 	ldrb.w	r1, [r0, #111]	; 0x6f
   20c56:	f04f 0400 	mov.w	r4, #0
   20c5a:	f011 0f0c 	tst.w	r1, #12
   20c5e:	bf18      	it	ne
   20c60:	f44f 6129 	movne.w	r1, #2704	; 0xa90
   20c64:	d106      	bne.n	20c74 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x36>
   20c66:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
   20c6a:	f8b0 1048 	ldrh.w	r1, [r0, #72]	; 0x48
   20c6e:	428b      	cmp	r3, r1
   20c70:	bf38      	it	cc
   20c72:	4619      	movcc	r1, r3
   20c74:	8742      	strh	r2, [r0, #58]	; 0x3a
   20c76:	87c1      	strh	r1, [r0, #62]	; 0x3e
   20c78:	f8b0 c040 	ldrh.w	ip, [r0, #64]	; 0x40
   20c7c:	f8b0 3042 	ldrh.w	r3, [r0, #66]	; 0x42
   20c80:	4594      	cmp	ip, r2
   20c82:	bf38      	it	cc
   20c84:	4694      	movcc	ip, r2
   20c86:	428b      	cmp	r3, r1
   20c88:	bf38      	it	cc
   20c8a:	460b      	movcc	r3, r1
   20c8c:	f8a0 c040 	strh.w	ip, [r0, #64]	; 0x40
   20c90:	f8a0 3042 	strh.w	r3, [r0, #66]	; 0x42
   20c94:	42b2      	cmp	r2, r6
   20c96:	bf0a      	itet	eq
   20c98:	42a9      	cmpeq	r1, r5
   20c9a:	2301      	movne	r3, #1
   20c9c:	2300      	moveq	r3, #0
   20c9e:	8f05      	ldrh	r5, [r0, #56]	; 0x38
   20ca0:	f8b0 204c 	ldrh.w	r2, [r0, #76]	; 0x4c
   20ca4:	f8b0 1046 	ldrh.w	r1, [r0, #70]	; 0x46
   20ca8:	f8b0 c03c 	ldrh.w	ip, [r0, #60]	; 0x3c
   20cac:	428a      	cmp	r2, r1
   20cae:	bf28      	it	cs
   20cb0:	460a      	movcs	r2, r1
   20cb2:	f890 106e 	ldrb.w	r1, [r0, #110]	; 0x6e
   20cb6:	f011 0f0c 	tst.w	r1, #12
   20cba:	bf18      	it	ne
   20cbc:	f44f 6129 	movne.w	r1, #2704	; 0xa90
   20cc0:	d106      	bne.n	20cd0 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x92>
   20cc2:	f8b0 604e 	ldrh.w	r6, [r0, #78]	; 0x4e
   20cc6:	f8b0 104a 	ldrh.w	r1, [r0, #74]	; 0x4a
   20cca:	428e      	cmp	r6, r1
   20ccc:	bf38      	it	cc
   20cce:	4631      	movcc	r1, r6
   20cd0:	f890 6064 	ldrb.w	r6, [r0, #100]	; 0x64
   20cd4:	2e02      	cmp	r6, #2
   20cd6:	d00a      	beq.n	20cee <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0xb0>
   20cd8:	8702      	strh	r2, [r0, #56]	; 0x38
   20cda:	8781      	strh	r1, [r0, #60]	; 0x3c
   20cdc:	42aa      	cmp	r2, r5
   20cde:	bf0a      	itet	eq
   20ce0:	4561      	cmpeq	r1, ip
   20ce2:	2001      	movne	r0, #1
   20ce4:	2000      	moveq	r0, #0
   20ce6:	ea40 0003 	orr.w	r0, r0, r3
   20cea:	bcf0      	pop	{r4, r5, r6, r7}
   20cec:	4770      	bx	lr
   20cee:	4295      	cmp	r5, r2
   20cf0:	bf38      	it	cc
   20cf2:	462a      	movcc	r2, r5
   20cf4:	458c      	cmp	ip, r1
   20cf6:	bf38      	it	cc
   20cf8:	4661      	movcc	r1, ip
   20cfa:	f880 4064 	strb.w	r4, [r0, #100]	; 0x64
   20cfe:	e7eb      	b.n	20cd8 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x9a>

00020d00 <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>:
   20d00:	6840      	ldr	r0, [r0, #4]
   20d02:	4770      	bx	lr

00020d04 <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY>:
   20d04:	b570      	push	{r4, r5, r6, lr}
   20d06:	460d      	mov	r5, r1
   20d08:	4616      	mov	r6, r2
   20d0a:	6941      	ldr	r1, [r0, #20]
   20d0c:	f641 524c 	movw	r2, #7500	; 0x1d4c
   20d10:	4604      	mov	r4, r0
   20d12:	4291      	cmp	r1, r2
   20d14:	bf34      	ite	cc
   20d16:	214d      	movcc	r1, #77	; 0x4d
   20d18:	2196      	movcs	r1, #150	; 0x96
   20d1a:	f890 306f 	ldrb.w	r3, [r0, #111]	; 0x6f
   20d1e:	f890 206e 	ldrb.w	r2, [r0, #110]	; 0x6e
   20d22:	f7f4 f81d 	bl	14d60 <sym_VLZYODAV2LKRVZ5U6Q4CDF3UFZES3VV342R37AI+0xc>
   20d26:	6963      	ldr	r3, [r4, #20]
   20d28:	6b21      	ldr	r1, [r4, #48]	; 0x30
   20d2a:	4299      	cmp	r1, r3
   20d2c:	bf38      	it	cc
   20d2e:	460b      	movcc	r3, r1
   20d30:	1b59      	subs	r1, r3, r5
   20d32:	4430      	add	r0, r6
   20d34:	4288      	cmp	r0, r1
   20d36:	bf38      	it	cc
   20d38:	4608      	movcc	r0, r1
   20d3a:	6360      	str	r0, [r4, #52]	; 0x34
   20d3c:	bd70      	pop	{r4, r5, r6, pc}

00020d3e <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>:
   20d3e:	221b      	movs	r2, #27
   20d40:	8402      	strh	r2, [r0, #32]
   20d42:	8382      	strh	r2, [r0, #28]
   20d44:	82c2      	strh	r2, [r0, #22]
   20d46:	8282      	strh	r2, [r0, #20]
   20d48:	8142      	strh	r2, [r0, #10]
   20d4a:	8202      	strh	r2, [r0, #16]
   20d4c:	8102      	strh	r2, [r0, #8]
   20d4e:	8542      	strh	r2, [r0, #42]	; 0x2a
   20d50:	8582      	strh	r2, [r0, #44]	; 0x2c
   20d52:	8482      	strh	r2, [r0, #36]	; 0x24
   20d54:	b159      	cbz	r1, 20d6e <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ+0x30>
   20d56:	f44f 6129 	mov.w	r1, #2704	; 0xa90
   20d5a:	8441      	strh	r1, [r0, #34]	; 0x22
   20d5c:	83c1      	strh	r1, [r0, #30]
   20d5e:	8341      	strh	r1, [r0, #26]
   20d60:	8301      	strh	r1, [r0, #24]
   20d62:	81c1      	strh	r1, [r0, #14]
   20d64:	8241      	strh	r1, [r0, #18]
   20d66:	8181      	strh	r1, [r0, #12]
   20d68:	85c1      	strh	r1, [r0, #46]	; 0x2e
   20d6a:	8601      	strh	r1, [r0, #48]	; 0x30
   20d6c:	4770      	bx	lr
   20d6e:	f44f 71a4 	mov.w	r1, #328	; 0x148
   20d72:	8441      	strh	r1, [r0, #34]	; 0x22
   20d74:	83c1      	strh	r1, [r0, #30]
   20d76:	8341      	strh	r1, [r0, #26]
   20d78:	8301      	strh	r1, [r0, #24]
   20d7a:	81c1      	strh	r1, [r0, #14]
   20d7c:	8241      	strh	r1, [r0, #18]
   20d7e:	8181      	strh	r1, [r0, #12]
   20d80:	85c1      	strh	r1, [r0, #46]	; 0x2e
   20d82:	8601      	strh	r1, [r0, #48]	; 0x30
   20d84:	4770      	bx	lr

00020d86 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>:
   20d86:	6800      	ldr	r0, [r0, #0]
   20d88:	f101 029c 	add.w	r2, r1, #156	; 0x9c
   20d8c:	4290      	cmp	r0, r2
   20d8e:	bf9c      	itt	ls
   20d90:	2000      	movls	r0, #0
   20d92:	4770      	bxls	lr
   20d94:	1a40      	subs	r0, r0, r1
   20d96:	389c      	subs	r0, #156	; 0x9c
   20d98:	0840      	lsrs	r0, r0, #1
   20d9a:	4770      	bx	lr

00020d9c <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>:
   20d9c:	f8dd c000 	ldr.w	ip, [sp]
   20da0:	8281      	strh	r1, [r0, #20]
   20da2:	82c2      	strh	r2, [r0, #22]
   20da4:	8303      	strh	r3, [r0, #24]
   20da6:	f8a0 c01a 	strh.w	ip, [r0, #26]
   20daa:	4770      	bx	lr

00020dac <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I>:
   20dac:	8150      	strh	r0, [r2, #10]
   20dae:	8a88      	ldrh	r0, [r1, #20]
   20db0:	8190      	strh	r0, [r2, #12]
   20db2:	8ac8      	ldrh	r0, [r1, #22]
   20db4:	81d0      	strh	r0, [r2, #14]
   20db6:	8b08      	ldrh	r0, [r1, #24]
   20db8:	8210      	strh	r0, [r2, #16]
   20dba:	8b48      	ldrh	r0, [r1, #26]
   20dbc:	4694      	mov	ip, r2
   20dbe:	8250      	strh	r0, [r2, #18]
   20dc0:	221e      	movs	r2, #30
   20dc2:	4619      	mov	r1, r3
   20dc4:	4660      	mov	r0, ip
   20dc6:	f7f3 bbc1 	b.w	1454c <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>

00020dca <sym_KQ7WDRFWHZIBRVZJQIHMC5NBIZUJ4NGFK5AE4FQ>:
   20dca:	f000 0155 	and.w	r1, r0, #85	; 0x55
   20dce:	2255      	movs	r2, #85	; 0x55
   20dd0:	ea02 0050 	and.w	r0, r2, r0, lsr #1
   20dd4:	4408      	add	r0, r1
   20dd6:	f000 0133 	and.w	r1, r0, #51	; 0x33
   20dda:	2233      	movs	r2, #51	; 0x33
   20ddc:	ea02 0090 	and.w	r0, r2, r0, lsr #2
   20de0:	4408      	add	r0, r1
   20de2:	f000 010f 	and.w	r1, r0, #15
   20de6:	eb01 1010 	add.w	r0, r1, r0, lsr #4
   20dea:	4770      	bx	lr

00020dec <sym_OPCORHVHZVKAWEVWCDZOHGGLXMSL2TBGHVHNDOY>:
   20dec:	b510      	push	{r4, lr}
   20dee:	6841      	ldr	r1, [r0, #4]
   20df0:	7803      	ldrb	r3, [r0, #0]
   20df2:	f101 04a0 	add.w	r4, r1, #160	; 0xa0
   20df6:	f891 20b5 	ldrb.w	r2, [r1, #181]	; 0xb5
   20dfa:	2100      	movs	r1, #0
   20dfc:	4620      	mov	r0, r4
   20dfe:	f7ff f966 	bl	200ce <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   20e02:	2800      	cmp	r0, #0
   20e04:	bf1e      	ittt	ne
   20e06:	2004      	movne	r0, #4
   20e08:	7560      	strbne	r0, [r4, #21]
   20e0a:	bd10      	popne	{r4, pc}
   20e0c:	2188      	movs	r1, #136	; 0x88
   20e0e:	201c      	movs	r0, #28
   20e10:	f7f0 fdb6 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

00020e14 <sym_FW4JPGKXKHARAAJ7L3QR6HU5OB4PHXARNGBNCMY>:
   20e14:	b510      	push	{r4, lr}
   20e16:	4604      	mov	r4, r0
   20e18:	7800      	ldrb	r0, [r0, #0]
   20e1a:	6861      	ldr	r1, [r4, #4]
   20e1c:	b188      	cbz	r0, 20e42 <sym_FW4JPGKXKHARAAJ7L3QR6HU5OB4PHXARNGBNCMY+0x2e>
   20e1e:	f891 00a4 	ldrb.w	r0, [r1, #164]	; 0xa4
   20e22:	f010 0f01 	tst.w	r0, #1
   20e26:	d01e      	beq.n	20e66 <sym_FW4JPGKXKHARAAJ7L3QR6HU5OB4PHXARNGBNCMY+0x52>
   20e28:	f891 00f4 	ldrb.w	r0, [r1, #244]	; 0xf4
   20e2c:	1e40      	subs	r0, r0, #1
   20e2e:	b242      	sxtb	r2, r0
   20e30:	f881 20f4 	strb.w	r2, [r1, #244]	; 0xf4
   20e34:	6860      	ldr	r0, [r4, #4]
   20e36:	2a00      	cmp	r2, #0
   20e38:	da19      	bge.n	20e6e <sym_FW4JPGKXKHARAAJ7L3QR6HU5OB4PHXARNGBNCMY+0x5a>
   20e3a:	2197      	movs	r1, #151	; 0x97
   20e3c:	201c      	movs	r0, #28
   20e3e:	f7f0 fd9f 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   20e42:	f891 20b6 	ldrb.w	r2, [r1, #182]	; 0xb6
   20e46:	f101 00a0 	add.w	r0, r1, #160	; 0xa0
   20e4a:	2300      	movs	r3, #0
   20e4c:	4619      	mov	r1, r3
   20e4e:	f7ff f93e 	bl	200ce <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   20e52:	b120      	cbz	r0, 20e5e <sym_FW4JPGKXKHARAAJ7L3QR6HU5OB4PHXARNGBNCMY+0x4a>
   20e54:	6861      	ldr	r1, [r4, #4]
   20e56:	2000      	movs	r0, #0
   20e58:	f881 00f4 	strb.w	r0, [r1, #244]	; 0xf4
   20e5c:	bd10      	pop	{r4, pc}
   20e5e:	2190      	movs	r1, #144	; 0x90
   20e60:	201c      	movs	r0, #28
   20e62:	f7f0 fd8d 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   20e66:	2195      	movs	r1, #149	; 0x95
   20e68:	201c      	movs	r0, #28
   20e6a:	f7f0 fd89 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   20e6e:	f8d0 10a4 	ldr.w	r1, [r0, #164]	; 0xa4
   20e72:	f021 0101 	bic.w	r1, r1, #1
   20e76:	f8c0 10a4 	str.w	r1, [r0, #164]	; 0xa4
   20e7a:	bd10      	pop	{r4, pc}

00020e7c <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y>:
   20e7c:	b510      	push	{r4, lr}
   20e7e:	4604      	mov	r4, r0
   20e80:	7c80      	ldrb	r0, [r0, #18]
   20e82:	2802      	cmp	r0, #2
   20e84:	bf18      	it	ne
   20e86:	2803      	cmpne	r0, #3
   20e88:	d109      	bne.n	20e9e <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x22>
   20e8a:	f894 006f 	ldrb.w	r0, [r4, #111]	; 0x6f
   20e8e:	f104 0170 	add.w	r1, r4, #112	; 0x70
   20e92:	f7f2 fe39 	bl	13b08 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
   20e96:	2808      	cmp	r0, #8
   20e98:	bf1c      	itt	ne
   20e9a:	2001      	movne	r0, #1
   20e9c:	bd10      	popne	{r4, pc}
   20e9e:	7ca0      	ldrb	r0, [r4, #18]
   20ea0:	2800      	cmp	r0, #0
   20ea2:	bf1e      	ittt	ne
   20ea4:	2802      	cmpne	r0, #2
   20ea6:	7e60      	ldrbne	r0, [r4, #25]
   20ea8:	bd10      	popne	{r4, pc}
   20eaa:	f04f 0000 	mov.w	r0, #0
   20eae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   20eb2:	f7f1 bdcd 	b.w	12a50 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>

00020eb6 <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ>:
   20eb6:	b508      	push	{r3, lr}
   20eb8:	f890 108e 	ldrb.w	r1, [r0, #142]	; 0x8e
   20ebc:	f88d 1000 	strb.w	r1, [sp]
   20ec0:	f89d 1000 	ldrb.w	r1, [sp]
   20ec4:	b959      	cbnz	r1, 20ede <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ+0x28>
   20ec6:	f890 00b8 	ldrb.w	r0, [r0, #184]	; 0xb8
   20eca:	f88d 0000 	strb.w	r0, [sp]
   20ece:	f89d 0000 	ldrb.w	r0, [sp]
   20ed2:	b110      	cbz	r0, 20eda <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ+0x24>
   20ed4:	f7fa fef6 	bl	1bcc4 <sym_ZT5CPONXDAFRAB5RWMA6LXPAT5TEFYV2YKU6P6A>
   20ed8:	b108      	cbz	r0, 20ede <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ+0x28>
   20eda:	2000      	movs	r0, #0
   20edc:	bd08      	pop	{r3, pc}
   20ede:	2001      	movs	r0, #1
   20ee0:	bd08      	pop	{r3, pc}

00020ee2 <sym_2ORNMU44KG57RJ5GYPW4FCTEFWDXBHWXYAE3J6I>:
   20ee2:	20ff      	movs	r0, #255	; 0xff
   20ee4:	7008      	strb	r0, [r1, #0]
   20ee6:	6cc8      	ldr	r0, [r1, #76]	; 0x4c
   20ee8:	f7fe bfa7 	b.w	1fe3a <sym_SCCFLYV5KOPRJ5S7RGDC2KDSCCHMKXYC3EQIE6A>

00020eec <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>:
   20eec:	b530      	push	{r4, r5, lr}
   20eee:	460d      	mov	r5, r1
   20ef0:	b085      	sub	sp, #20
   20ef2:	4604      	mov	r4, r0
   20ef4:	f44f 72b0 	mov.w	r2, #352	; 0x160
   20ef8:	2100      	movs	r1, #0
   20efa:	f7fd fd2a 	bl	1e952 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
   20efe:	20ff      	movs	r0, #255	; 0xff
   20f00:	7020      	strb	r0, [r4, #0]
   20f02:	207f      	movs	r0, #127	; 0x7f
   20f04:	f884 0047 	strb.w	r0, [r4, #71]	; 0x47
   20f08:	2013      	movs	r0, #19
   20f0a:	8060      	strh	r0, [r4, #2]
   20f0c:	f242 7010 	movw	r0, #10000	; 0x2710
   20f10:	84e0      	strh	r0, [r4, #38]	; 0x26
   20f12:	f7f1 fac3 	bl	1249c <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ>
   20f16:	4601      	mov	r1, r0
   20f18:	64e0      	str	r0, [r4, #76]	; 0x4c
   20f1a:	2200      	movs	r2, #0
   20f1c:	a802      	add	r0, sp, #8
   20f1e:	f7fe fef2 	bl	1fd06 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
   20f22:	2200      	movs	r2, #0
   20f24:	2101      	movs	r1, #1
   20f26:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
   20f28:	f7fe ff66 	bl	1fdf8 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
   20f2c:	2204      	movs	r2, #4
   20f2e:	a802      	add	r0, sp, #8
   20f30:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   20f32:	f7fe fee8 	bl	1fd06 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
   20f36:	2200      	movs	r2, #0
   20f38:	4611      	mov	r1, r2
   20f3a:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
   20f3c:	f7fe ff5c 	bl	1fdf8 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
   20f40:	7425      	strb	r5, [r4, #16]
   20f42:	f104 0030 	add.w	r0, r4, #48	; 0x30
   20f46:	f000 fa6f 	bl	21428 <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>
   20f4a:	4668      	mov	r0, sp
   20f4c:	f7f3 f944 	bl	141d8 <sym_RQLOJUGFCKCS5YSXHMF5LIHXPBLO5AO63KQE3GQ>
   20f50:	b130      	cbz	r0, 20f60 <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ+0x74>
   20f52:	4669      	mov	r1, sp
   20f54:	f104 0036 	add.w	r0, r4, #54	; 0x36
   20f58:	f7ff fa31 	bl	203be <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>
   20f5c:	b005      	add	sp, #20
   20f5e:	bd30      	pop	{r4, r5, pc}
   20f60:	f240 3149 	movw	r1, #841	; 0x349
   20f64:	202d      	movs	r0, #45	; 0x2d
   20f66:	f7f0 fd0b 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

00020f6a <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY>:
   20f6a:	8840      	ldrh	r0, [r0, #2]
   20f6c:	f3c0 1100 	ubfx	r1, r0, #4, #1
   20f70:	b131      	cbz	r1, 20f80 <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY+0x16>
   20f72:	f3c0 0080 	ubfx	r0, r0, #2, #1
   20f76:	2800      	cmp	r0, #0
   20f78:	bf04      	itt	eq
   20f7a:	201f      	moveq	r0, #31
   20f7c:	4770      	bxeq	lr
   20f7e:	e002      	b.n	20f86 <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY+0x1c>
   20f80:	f3c0 0140 	ubfx	r1, r0, #1, #1
   20f84:	b109      	cbz	r1, 20f8a <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY+0x20>
   20f86:	2000      	movs	r0, #0
   20f88:	4770      	bx	lr
   20f8a:	f010 0f01 	tst.w	r0, #1
   20f8e:	bf1c      	itt	ne
   20f90:	20ee      	movne	r0, #238	; 0xee
   20f92:	4770      	bxne	lr
   20f94:	f7f1 baa8 	b.w	124e8 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ>

00020f98 <sym_UJWNE3E4RDATXEP7ML237UGTIH42KUYZYFD6XAQ>:
   20f98:	21ff      	movs	r1, #255	; 0xff
   20f9a:	f880 1084 	strb.w	r1, [r0, #132]	; 0x84
   20f9e:	4770      	bx	lr

00020fa0 <sym_2K3JTQJLCTROZQI43ERT7GF5BTQ3SMAJXYMCVJI>:
   20fa0:	f7f6 bad8 	b.w	17554 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x117c>

00020fa4 <sym_73OZ6PE62EKDTT5E6DG3KMBVHOCSVKUK4QPTCXI>:
   20fa4:	b510      	push	{r4, lr}
   20fa6:	2300      	movs	r3, #0
   20fa8:	2a14      	cmp	r2, #20
   20faa:	d04f      	beq.n	2104c <sym_73OZ6PE62EKDTT5E6DG3KMBVHOCSVKUK4QPTCXI+0xa8>
   20fac:	dc04      	bgt.n	20fb8 <sym_73OZ6PE62EKDTT5E6DG3KMBVHOCSVKUK4QPTCXI+0x14>
   20fae:	2a05      	cmp	r2, #5
   20fb0:	d018      	beq.n	20fe4 <sym_73OZ6PE62EKDTT5E6DG3KMBVHOCSVKUK4QPTCXI+0x40>
   20fb2:	2a10      	cmp	r2, #16
   20fb4:	d01d      	beq.n	20ff2 <sym_73OZ6PE62EKDTT5E6DG3KMBVHOCSVKUK4QPTCXI+0x4e>
   20fb6:	e003      	b.n	20fc0 <sym_73OZ6PE62EKDTT5E6DG3KMBVHOCSVKUK4QPTCXI+0x1c>
   20fb8:	2a1d      	cmp	r2, #29
   20fba:	d006      	beq.n	20fca <sym_73OZ6PE62EKDTT5E6DG3KMBVHOCSVKUK4QPTCXI+0x26>
   20fbc:	2a22      	cmp	r2, #34	; 0x22
   20fbe:	d06f      	beq.n	210a0 <sym_73OZ6PE62EKDTT5E6DG3KMBVHOCSVKUK4QPTCXI+0xfc>
   20fc0:	f44f 713d 	mov.w	r1, #756	; 0x2f4
   20fc4:	202d      	movs	r0, #45	; 0x2d
   20fc6:	f7f0 fcdb 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   20fca:	704b      	strb	r3, [r1, #1]
   20fcc:	2229      	movs	r2, #41	; 0x29
   20fce:	700a      	strb	r2, [r1, #0]
   20fd0:	f8d0 20d7 	ldr.w	r2, [r0, #215]	; 0xd7
   20fd4:	604a      	str	r2, [r1, #4]
   20fd6:	f8d0 20db 	ldr.w	r2, [r0, #219]	; 0xdb
   20fda:	608a      	str	r2, [r1, #8]
   20fdc:	f890 00df 	ldrb.w	r0, [r0, #223]	; 0xdf
   20fe0:	7308      	strb	r0, [r1, #12]
   20fe2:	bd10      	pop	{r4, pc}
   20fe4:	704b      	strb	r3, [r1, #1]
   20fe6:	2207      	movs	r2, #7
   20fe8:	700a      	strb	r2, [r1, #0]
   20fea:	f8d0 00ca 	ldr.w	r0, [r0, #202]	; 0xca
   20fee:	6048      	str	r0, [r1, #4]
   20ff0:	bd10      	pop	{r4, pc}
   20ff2:	704b      	strb	r3, [r1, #1]
   20ff4:	2214      	movs	r2, #20
   20ff6:	3090      	adds	r0, #144	; 0x90
   20ff8:	f801 2b04 	strb.w	r2, [r1], #4
   20ffc:	e8b0 101c 	ldmia.w	r0!, {r2, r3, r4, ip}
   21000:	e8a1 101c 	stmia.w	r1!, {r2, r3, r4, ip}
   21004:	e890 100d 	ldmia.w	r0, {r0, r2, r3, ip}
   21008:	e8a1 100d 	stmia.w	r1!, {r0, r2, r3, ip}
   2100c:	2001      	movs	r0, #1
   2100e:	f801 0c1c 	strb.w	r0, [r1, #-28]
   21012:	f811 0c20 	ldrb.w	r0, [r1, #-32]
   21016:	3924      	subs	r1, #36	; 0x24
   21018:	2800      	cmp	r0, #0
   2101a:	bf08      	it	eq
   2101c:	bd10      	popeq	{r4, pc}
   2101e:	88cc      	ldrh	r4, [r1, #6]
   21020:	2101      	movs	r1, #1
   21022:	4620      	mov	r0, r4
   21024:	f7fe fdad 	bl	1fb82 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   21028:	2800      	cmp	r0, #0
   2102a:	bf08      	it	eq
   2102c:	bd10      	popeq	{r4, pc}
   2102e:	8800      	ldrh	r0, [r0, #0]
   21030:	f7f1 fc40 	bl	128b4 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
   21034:	2101      	movs	r1, #1
   21036:	4620      	mov	r0, r4
   21038:	f7f0 ffca 	bl	11fd0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
   2103c:	2800      	cmp	r0, #0
   2103e:	bf08      	it	eq
   21040:	bd10      	popeq	{r4, pc}
   21042:	f240 216a 	movw	r1, #618	; 0x26a
   21046:	202d      	movs	r0, #45	; 0x2d
   21048:	f7f0 fc9a 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   2104c:	704b      	strb	r3, [r1, #1]
   2104e:	2217      	movs	r2, #23
   21050:	700a      	strb	r2, [r1, #0]
   21052:	f8d0 20ba 	ldr.w	r2, [r0, #186]	; 0xba
   21056:	604a      	str	r2, [r1, #4]
   21058:	f8b0 20be 	ldrh.w	r2, [r0, #190]	; 0xbe
   2105c:	810a      	strh	r2, [r1, #8]
   2105e:	790a      	ldrb	r2, [r1, #4]
   21060:	2a00      	cmp	r2, #0
   21062:	bf08      	it	eq
   21064:	bd10      	popeq	{r4, pc}
   21066:	7880      	ldrb	r0, [r0, #2]
   21068:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   2106c:	2800      	cmp	r0, #0
   2106e:	bf18      	it	ne
   21070:	bd10      	popne	{r4, pc}
   21072:	88cc      	ldrh	r4, [r1, #6]
   21074:	2101      	movs	r1, #1
   21076:	4620      	mov	r0, r4
   21078:	f7fe fd83 	bl	1fb82 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   2107c:	2800      	cmp	r0, #0
   2107e:	bf08      	it	eq
   21080:	bd10      	popeq	{r4, pc}
   21082:	8800      	ldrh	r0, [r0, #0]
   21084:	f7f1 fc16 	bl	128b4 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
   21088:	2101      	movs	r1, #1
   2108a:	4620      	mov	r0, r4
   2108c:	f7f0 ffa0 	bl	11fd0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
   21090:	2800      	cmp	r0, #0
   21092:	bf08      	it	eq
   21094:	bd10      	popeq	{r4, pc}
   21096:	f240 219a 	movw	r1, #666	; 0x29a
   2109a:	202d      	movs	r0, #45	; 0x2d
   2109c:	f7f0 fc70 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   210a0:	468c      	mov	ip, r1
   210a2:	704b      	strb	r3, [r1, #1]
   210a4:	212e      	movs	r1, #46	; 0x2e
   210a6:	f88c 1000 	strb.w	r1, [ip]
   210aa:	f100 01e9 	add.w	r1, r0, #233	; 0xe9
   210ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   210b2:	2222      	movs	r2, #34	; 0x22
   210b4:	f10c 0004 	add.w	r0, ip, #4
   210b8:	f7fd bbd1 	b.w	1e85e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>

000210bc <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>:
   210bc:	6880      	ldr	r0, [r0, #8]
   210be:	4770      	bx	lr

000210c0 <sym_GNUIHYMK3THJZQYGL7BBI74HDMHN6SBQQRVNSAY>:
   210c0:	b500      	push	{lr}
   210c2:	8842      	ldrh	r2, [r0, #2]
   210c4:	b085      	sub	sp, #20
   210c6:	f3c2 1300 	ubfx	r3, r2, #4, #1
   210ca:	468c      	mov	ip, r1
   210cc:	2b00      	cmp	r3, #0
   210ce:	bf07      	ittee	eq
   210d0:	f3c2 02c0 	ubfxeq	r2, r2, #3, #1
   210d4:	2a00      	cmpeq	r2, #0
   210d6:	2001      	movne	r0, #1
   210d8:	b005      	addne	sp, #20
   210da:	bf18      	it	ne
   210dc:	bd00      	popne	{pc}
   210de:	f100 0130 	add.w	r1, r0, #48	; 0x30
   210e2:	9100      	str	r1, [sp, #0]
   210e4:	8841      	ldrh	r1, [r0, #2]
   210e6:	f8ad 1004 	strh.w	r1, [sp, #4]
   210ea:	6881      	ldr	r1, [r0, #8]
   210ec:	9102      	str	r1, [sp, #8]
   210ee:	7901      	ldrb	r1, [r0, #4]
   210f0:	f88d 100c 	strb.w	r1, [sp, #12]
   210f4:	7940      	ldrb	r0, [r0, #5]
   210f6:	f88d 000d 	strb.w	r0, [sp, #13]
   210fa:	4669      	mov	r1, sp
   210fc:	4660      	mov	r0, ip
   210fe:	f7f6 fa91 	bl	17624 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x124c>
   21102:	b005      	add	sp, #20
   21104:	bd00      	pop	{pc}

00021106 <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y>:
   21106:	2200      	movs	r2, #0
   21108:	f8a0 2048 	strh.w	r2, [r0, #72]	; 0x48
   2110c:	8843      	ldrh	r3, [r0, #2]
   2110e:	2b1d      	cmp	r3, #29
   21110:	bf0c      	ite	eq
   21112:	7342      	strbeq	r2, [r0, #13]
   21114:	7341      	strbne	r1, [r0, #13]
   21116:	4770      	bx	lr

00021118 <sym_JWG2K5Z2IDS7IGZ34EUMCNHIOV34425FH263YQQ>:
   21118:	b510      	push	{r4, lr}
   2111a:	8841      	ldrh	r1, [r0, #2]
   2111c:	f3c1 1200 	ubfx	r2, r1, #4, #1
   21120:	b92a      	cbnz	r2, 2112e <sym_JWG2K5Z2IDS7IGZ34EUMCNHIOV34425FH263YQQ+0x16>
   21122:	f3c1 0140 	ubfx	r1, r1, #1, #1
   21126:	2900      	cmp	r1, #0
   21128:	bf18      	it	ne
   2112a:	2401      	movne	r4, #1
   2112c:	d100      	bne.n	21130 <sym_JWG2K5Z2IDS7IGZ34EUMCNHIOV34425FH263YQQ+0x18>
   2112e:	2400      	movs	r4, #0
   21130:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
   21132:	f7fe fe4f 	bl	1fdd4 <sym_SYX5A4D5YT7FQ4PORL5PYZ5T6BOBVEZRWNZWOOA>
   21136:	2800      	cmp	r0, #0
   21138:	bf18      	it	ne
   2113a:	2001      	movne	r0, #1
   2113c:	ea24 0000 	bic.w	r0, r4, r0
   21140:	f080 0001 	eor.w	r0, r0, #1
   21144:	bd10      	pop	{r4, pc}

00021146 <sym_M7OTIJAFMGS6XNOB3KIKP2PSIWVW5IRGENKBGTA>:
   21146:	b510      	push	{r4, lr}
   21148:	8840      	ldrh	r0, [r0, #2]
   2114a:	f3c0 1100 	ubfx	r1, r0, #4, #1
   2114e:	b119      	cbz	r1, 21158 <sym_M7OTIJAFMGS6XNOB3KIKP2PSIWVW5IRGENKBGTA+0x12>
   21150:	f3c0 0080 	ubfx	r0, r0, #2, #1
   21154:	b148      	cbz	r0, 2116a <sym_M7OTIJAFMGS6XNOB3KIKP2PSIWVW5IRGENKBGTA+0x24>
   21156:	e00a      	b.n	2116e <sym_M7OTIJAFMGS6XNOB3KIKP2PSIWVW5IRGENKBGTA+0x28>
   21158:	f3c0 0140 	ubfx	r1, r0, #1, #1
   2115c:	b939      	cbnz	r1, 2116e <sym_M7OTIJAFMGS6XNOB3KIKP2PSIWVW5IRGENKBGTA+0x28>
   2115e:	f010 0f01 	tst.w	r0, #1
   21162:	d102      	bne.n	2116a <sym_M7OTIJAFMGS6XNOB3KIKP2PSIWVW5IRGENKBGTA+0x24>
   21164:	f7f1 f9c0 	bl	124e8 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ>
   21168:	b108      	cbz	r0, 2116e <sym_M7OTIJAFMGS6XNOB3KIKP2PSIWVW5IRGENKBGTA+0x28>
   2116a:	2001      	movs	r0, #1
   2116c:	bd10      	pop	{r4, pc}
   2116e:	2000      	movs	r0, #0
   21170:	bd10      	pop	{r4, pc}

00021172 <sym_TPWVJBQKX2TXZDZ4IZ6XDJYVEDFBPIX3TMZMRCQ>:
   21172:	7880      	ldrb	r0, [r0, #2]
   21174:	f3c0 1040 	ubfx	r0, r0, #5, #1
   21178:	4770      	bx	lr

0002117a <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>:
   2117a:	7880      	ldrb	r0, [r0, #2]
   2117c:	f000 0001 	and.w	r0, r0, #1
   21180:	4770      	bx	lr

00021182 <sym_4BHBBQGG3Z4AATH4MTZL2WFYY6WPEFHF75U64WQ>:
   21182:	8840      	ldrh	r0, [r0, #2]
   21184:	2809      	cmp	r0, #9
   21186:	bf0c      	ite	eq
   21188:	2001      	moveq	r0, #1
   2118a:	2000      	movne	r0, #0
   2118c:	4770      	bx	lr

0002118e <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>:
   2118e:	7880      	ldrb	r0, [r0, #2]
   21190:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   21194:	4770      	bx	lr

00021196 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>:
   21196:	7880      	ldrb	r0, [r0, #2]
   21198:	f3c0 1000 	ubfx	r0, r0, #4, #1
   2119c:	4770      	bx	lr

0002119e <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>:
   2119e:	7880      	ldrb	r0, [r0, #2]
   211a0:	f3c0 0040 	ubfx	r0, r0, #1, #1
   211a4:	4770      	bx	lr

000211a6 <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>:
   211a6:	f990 0010 	ldrsb.w	r0, [r0, #16]
   211aa:	4770      	bx	lr

000211ac <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>:
   211ac:	7800      	ldrb	r0, [r0, #0]
   211ae:	28ff      	cmp	r0, #255	; 0xff
   211b0:	bf14      	ite	ne
   211b2:	2001      	movne	r0, #1
   211b4:	2000      	moveq	r0, #0
   211b6:	4770      	bx	lr

000211b8 <sym_MQQDWQQHBS7ZPZWBMOTGVNNHVXRAEPOMLYRTE3A>:
   211b8:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
   211bc:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
   211c0:	4770      	bx	lr

000211c2 <sym_UDZCFPCYSG5E2MUJ3CH3H5GF4YJLF3Y6KNH3ZRQ>:
   211c2:	680a      	ldr	r2, [r1, #0]
   211c4:	f8c0 2013 	str.w	r2, [r0, #19]
   211c8:	8889      	ldrh	r1, [r1, #4]
   211ca:	f8a0 1017 	strh.w	r1, [r0, #23]
   211ce:	2101      	movs	r1, #1
   211d0:	7641      	strb	r1, [r0, #25]
   211d2:	4770      	bx	lr

000211d4 <sym_2T6B57C7Z3NDT5ASKUJUGCCL3DBEO2AO4XX23BI>:
   211d4:	7b00      	ldrb	r0, [r0, #12]
   211d6:	4770      	bx	lr

000211d8 <sym_4HDCBJCT2JOHNORERPDEH2A3V47FOX6NCTAKLUA>:
   211d8:	7940      	ldrb	r0, [r0, #5]
   211da:	4770      	bx	lr

000211dc <sym_4FKJZF4AXR7RHM7IPPZMVUWU7W6MFHLX726TPNY>:
   211dc:	6201      	str	r1, [r0, #32]
   211de:	f890 2068 	ldrb.w	r2, [r0, #104]	; 0x68
   211e2:	724a      	strb	r2, [r1, #9]
   211e4:	f8d0 2069 	ldr.w	r2, [r0, #105]	; 0x69
   211e8:	f8c1 200a 	str.w	r2, [r1, #10]
   211ec:	f8b0 006d 	ldrh.w	r0, [r0, #109]	; 0x6d
   211f0:	81c8      	strh	r0, [r1, #14]
   211f2:	4770      	bx	lr

000211f4 <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>:
   211f4:	f880 1080 	strb.w	r1, [r0, #128]	; 0x80
   211f8:	4770      	bx	lr

000211fa <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>:
   211fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   211fe:	4604      	mov	r4, r0
   21200:	7880      	ldrb	r0, [r0, #2]
   21202:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   21206:	b158      	cbz	r0, 21220 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x26>
   21208:	233c      	movs	r3, #60	; 0x3c
   2120a:	22ff      	movs	r2, #255	; 0xff
   2120c:	4620      	mov	r0, r4
   2120e:	6a21      	ldr	r1, [r4, #32]
   21210:	f7f6 fa74 	bl	176fc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1324>
   21214:	2210      	movs	r2, #16
   21216:	4621      	mov	r1, r4
   21218:	f104 0086 	add.w	r0, r4, #134	; 0x86
   2121c:	f7f3 f996 	bl	1454c <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
   21220:	78a0      	ldrb	r0, [r4, #2]
   21222:	f04f 0500 	mov.w	r5, #0
   21226:	f010 0f01 	tst.w	r0, #1
   2122a:	d020      	beq.n	2126e <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x74>
   2122c:	6a20      	ldr	r0, [r4, #32]
   2122e:	263c      	movs	r6, #60	; 0x3c
   21230:	8807      	ldrh	r7, [r0, #0]
   21232:	f7fa fd47 	bl	1bcc4 <sym_ZT5CPONXDAFRAB5RWMA6LXPAT5TEFYV2YKU6P6A>
   21236:	b9a8      	cbnz	r0, 21264 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x6a>
   21238:	7821      	ldrb	r1, [r4, #0]
   2123a:	f884 10bb 	strb.w	r1, [r4, #187]	; 0xbb
   2123e:	f8a4 70bc 	strh.w	r7, [r4, #188]	; 0xbc
   21242:	f884 60ba 	strb.w	r6, [r4, #186]	; 0xba
   21246:	7b60      	ldrb	r0, [r4, #13]
   21248:	b910      	cbnz	r0, 21250 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x56>
   2124a:	f884 50be 	strb.w	r5, [r4, #190]	; 0xbe
   2124e:	e003      	b.n	21258 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x5e>
   21250:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
   21254:	f884 00be 	strb.w	r0, [r4, #190]	; 0xbe
   21258:	2214      	movs	r2, #20
   2125a:	4621      	mov	r1, r4
   2125c:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
   21260:	f7f3 f974 	bl	1454c <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
   21264:	2001      	movs	r0, #1
   21266:	f884 0081 	strb.w	r0, [r4, #129]	; 0x81
   2126a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2126e:	f64f 77ff 	movw	r7, #65535	; 0xffff
   21272:	263c      	movs	r6, #60	; 0x3c
   21274:	f7fa fd26 	bl	1bcc4 <sym_ZT5CPONXDAFRAB5RWMA6LXPAT5TEFYV2YKU6P6A>
   21278:	2800      	cmp	r0, #0
   2127a:	d1f3      	bne.n	21264 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x6a>
   2127c:	7821      	ldrb	r1, [r4, #0]
   2127e:	f884 10bb 	strb.w	r1, [r4, #187]	; 0xbb
   21282:	f8a4 70bc 	strh.w	r7, [r4, #188]	; 0xbc
   21286:	f884 60ba 	strb.w	r6, [r4, #186]	; 0xba
   2128a:	7b60      	ldrb	r0, [r4, #13]
   2128c:	2800      	cmp	r0, #0
   2128e:	d1df      	bne.n	21250 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x56>
   21290:	e7db      	b.n	2124a <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x50>

00021292 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y>:
   21292:	7c40      	ldrb	r0, [r0, #17]
   21294:	2800      	cmp	r0, #0
   21296:	bf18      	it	ne
   21298:	2001      	movne	r0, #1
   2129a:	4770      	bx	lr
   2129c:	2101      	movs	r1, #1
   2129e:	f7f4 bad1 	b.w	15844 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x128>
   212a2:	2101      	movs	r1, #1
   212a4:	f7f4 bace 	b.w	15844 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x128>

000212a8 <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y>:
   212a8:	b510      	push	{r4, lr}
   212aa:	7001      	strb	r1, [r0, #0]
   212ac:	7042      	strb	r2, [r0, #1]
   212ae:	7880      	ldrb	r0, [r0, #2]
   212b0:	f3c0 0380 	ubfx	r3, r0, #2, #1
   212b4:	f3c0 0c40 	ubfx	ip, r0, #1, #1
   212b8:	4463      	add	r3, ip
   212ba:	f000 0001 	and.w	r0, r0, #1
   212be:	4418      	add	r0, r3
   212c0:	fb10 f001 	smulbb	r0, r0, r1
   212c4:	fb10 f002 	smulbb	r0, r0, r2
   212c8:	28ff      	cmp	r0, #255	; 0xff
   212ca:	bf38      	it	cc
   212cc:	bd10      	popcc	{r4, pc}
   212ce:	215c      	movs	r1, #92	; 0x5c
   212d0:	202e      	movs	r0, #46	; 0x2e
   212d2:	f7f0 fb55 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

000212d6 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>:
   212d6:	7881      	ldrb	r1, [r0, #2]
   212d8:	f3c1 0280 	ubfx	r2, r1, #2, #1
   212dc:	f3c1 0340 	ubfx	r3, r1, #1, #1
   212e0:	441a      	add	r2, r3
   212e2:	f001 0101 	and.w	r1, r1, #1
   212e6:	4411      	add	r1, r2
   212e8:	7842      	ldrb	r2, [r0, #1]
   212ea:	7800      	ldrb	r0, [r0, #0]
   212ec:	fb12 f000 	smulbb	r0, r2, r0
   212f0:	4348      	muls	r0, r1
   212f2:	b2c0      	uxtb	r0, r0
   212f4:	4770      	bx	lr

000212f6 <sym_PNT32LSDJE46MSUTWPAH2HUWQRO5OFWDB3SHPSY>:
   212f6:	b510      	push	{r4, lr}
   212f8:	7941      	ldrb	r1, [r0, #5]
   212fa:	b1c9      	cbz	r1, 21330 <sym_PNT32LSDJE46MSUTWPAH2HUWQRO5OFWDB3SHPSY+0x3a>
   212fc:	7881      	ldrb	r1, [r0, #2]
   212fe:	f011 0f01 	tst.w	r1, #1
   21302:	d003      	beq.n	2130c <sym_PNT32LSDJE46MSUTWPAH2HUWQRO5OFWDB3SHPSY+0x16>
   21304:	78c2      	ldrb	r2, [r0, #3]
   21306:	f012 0f01 	tst.w	r2, #1
   2130a:	d023      	beq.n	21354 <sym_PNT32LSDJE46MSUTWPAH2HUWQRO5OFWDB3SHPSY+0x5e>
   2130c:	f011 0f02 	tst.w	r1, #2
   21310:	d003      	beq.n	2131a <sym_PNT32LSDJE46MSUTWPAH2HUWQRO5OFWDB3SHPSY+0x24>
   21312:	78c2      	ldrb	r2, [r0, #3]
   21314:	f012 0f02 	tst.w	r2, #2
   21318:	d01a      	beq.n	21350 <sym_PNT32LSDJE46MSUTWPAH2HUWQRO5OFWDB3SHPSY+0x5a>
   2131a:	f011 0f04 	tst.w	r1, #4
   2131e:	d003      	beq.n	21328 <sym_PNT32LSDJE46MSUTWPAH2HUWQRO5OFWDB3SHPSY+0x32>
   21320:	78c0      	ldrb	r0, [r0, #3]
   21322:	f010 0f04 	tst.w	r0, #4
   21326:	d00e      	beq.n	21346 <sym_PNT32LSDJE46MSUTWPAH2HUWQRO5OFWDB3SHPSY+0x50>
   21328:	2139      	movs	r1, #57	; 0x39
   2132a:	202e      	movs	r0, #46	; 0x2e
   2132c:	f7f0 fb28 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   21330:	78c1      	ldrb	r1, [r0, #3]
   21332:	f011 0f02 	tst.w	r1, #2
   21336:	d10b      	bne.n	21350 <sym_PNT32LSDJE46MSUTWPAH2HUWQRO5OFWDB3SHPSY+0x5a>
   21338:	f011 0f01 	tst.w	r1, #1
   2133c:	d10a      	bne.n	21354 <sym_PNT32LSDJE46MSUTWPAH2HUWQRO5OFWDB3SHPSY+0x5e>
   2133e:	7880      	ldrb	r0, [r0, #2]
   21340:	f010 0f04 	tst.w	r0, #4
   21344:	d001      	beq.n	2134a <sym_PNT32LSDJE46MSUTWPAH2HUWQRO5OFWDB3SHPSY+0x54>
   21346:	2027      	movs	r0, #39	; 0x27
   21348:	bd10      	pop	{r4, pc}
   2134a:	f010 0f02 	tst.w	r0, #2
   2134e:	d001      	beq.n	21354 <sym_PNT32LSDJE46MSUTWPAH2HUWQRO5OFWDB3SHPSY+0x5e>
   21350:	2026      	movs	r0, #38	; 0x26
   21352:	bd10      	pop	{r4, pc}
   21354:	2025      	movs	r0, #37	; 0x25
   21356:	bd10      	pop	{r4, pc}

00021358 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>:
   21358:	7882      	ldrb	r2, [r0, #2]
   2135a:	2100      	movs	r1, #0
   2135c:	f012 0f01 	tst.w	r2, #1
   21360:	d005      	beq.n	2136e <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x16>
   21362:	78c3      	ldrb	r3, [r0, #3]
   21364:	f013 0f01 	tst.w	r3, #1
   21368:	bf08      	it	eq
   2136a:	2101      	moveq	r1, #1
   2136c:	d010      	beq.n	21390 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x38>
   2136e:	f012 0f02 	tst.w	r2, #2
   21372:	d005      	beq.n	21380 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x28>
   21374:	78c3      	ldrb	r3, [r0, #3]
   21376:	f013 0f02 	tst.w	r3, #2
   2137a:	bf08      	it	eq
   2137c:	2102      	moveq	r1, #2
   2137e:	d007      	beq.n	21390 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x38>
   21380:	f012 0f04 	tst.w	r2, #4
   21384:	d004      	beq.n	21390 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x38>
   21386:	78c3      	ldrb	r3, [r0, #3]
   21388:	f013 0f04 	tst.w	r3, #4
   2138c:	bf08      	it	eq
   2138e:	2104      	moveq	r1, #4
   21390:	7943      	ldrb	r3, [r0, #5]
   21392:	1c5b      	adds	r3, r3, #1
   21394:	b2db      	uxtb	r3, r3
   21396:	7143      	strb	r3, [r0, #5]
   21398:	f890 c001 	ldrb.w	ip, [r0, #1]
   2139c:	4563      	cmp	r3, ip
   2139e:	d10d      	bne.n	213bc <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x64>
   213a0:	2300      	movs	r3, #0
   213a2:	7143      	strb	r3, [r0, #5]
   213a4:	f890 c003 	ldrb.w	ip, [r0, #3]
   213a8:	ea4c 0c01 	orr.w	ip, ip, r1
   213ac:	f880 c003 	strb.w	ip, [r0, #3]
   213b0:	4594      	cmp	ip, r2
   213b2:	d103      	bne.n	213bc <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x64>
   213b4:	70c3      	strb	r3, [r0, #3]
   213b6:	7902      	ldrb	r2, [r0, #4]
   213b8:	1c52      	adds	r2, r2, #1
   213ba:	7102      	strb	r2, [r0, #4]
   213bc:	2901      	cmp	r1, #1
   213be:	bf04      	itt	eq
   213c0:	2025      	moveq	r0, #37	; 0x25
   213c2:	4770      	bxeq	lr
   213c4:	2902      	cmp	r1, #2
   213c6:	bf04      	itt	eq
   213c8:	2026      	moveq	r0, #38	; 0x26
   213ca:	4770      	bxeq	lr
   213cc:	2904      	cmp	r1, #4
   213ce:	bf04      	itt	eq
   213d0:	2027      	moveq	r0, #39	; 0x27
   213d2:	4770      	bxeq	lr
   213d4:	b510      	push	{r4, lr}
   213d6:	2139      	movs	r1, #57	; 0x39
   213d8:	202e      	movs	r0, #46	; 0x2e
   213da:	f7f0 fad1 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

000213de <sym_YZ554N3225FHWC7CK3UNRUMI3O4SGFLKXVRCFXA>:
   213de:	7081      	strb	r1, [r0, #2]
   213e0:	4770      	bx	lr

000213e2 <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>:
   213e2:	b410      	push	{r4}
   213e4:	7881      	ldrb	r1, [r0, #2]
   213e6:	f3c1 0280 	ubfx	r2, r1, #2, #1
   213ea:	f3c1 0340 	ubfx	r3, r1, #1, #1
   213ee:	441a      	add	r2, r3
   213f0:	f001 0101 	and.w	r1, r1, #1
   213f4:	7843      	ldrb	r3, [r0, #1]
   213f6:	4411      	add	r1, r2
   213f8:	fb13 f201 	smulbb	r2, r3, r1
   213fc:	78c1      	ldrb	r1, [r0, #3]
   213fe:	f3c1 0c80 	ubfx	ip, r1, #2, #1
   21402:	f3c1 0440 	ubfx	r4, r1, #1, #1
   21406:	44a4      	add	ip, r4
   21408:	f001 0101 	and.w	r1, r1, #1
   2140c:	4461      	add	r1, ip
   2140e:	f890 c005 	ldrb.w	ip, [r0, #5]
   21412:	fb11 c103 	smlabb	r1, r1, r3, ip
   21416:	7803      	ldrb	r3, [r0, #0]
   21418:	7900      	ldrb	r0, [r0, #4]
   2141a:	1a18      	subs	r0, r3, r0
   2141c:	fb10 f002 	smulbb	r0, r0, r2
   21420:	1a40      	subs	r0, r0, r1
   21422:	bc10      	pop	{r4}
   21424:	b2c0      	uxtb	r0, r0
   21426:	4770      	bx	lr

00021428 <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>:
   21428:	b510      	push	{r4, lr}
   2142a:	4604      	mov	r4, r0
   2142c:	f002 f8b7 	bl	2359e <sym_IBALR6WOCZYA342JRYG44MFHRUIKXGWY4MGXZLY>
   21430:	2001      	movs	r0, #1
   21432:	7060      	strb	r0, [r4, #1]
   21434:	7020      	strb	r0, [r4, #0]
   21436:	bd10      	pop	{r4, pc}

00021438 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>:
   21438:	2100      	movs	r1, #0
   2143a:	70c1      	strb	r1, [r0, #3]
   2143c:	7141      	strb	r1, [r0, #5]
   2143e:	7101      	strb	r1, [r0, #4]
   21440:	4770      	bx	lr

00021442 <sym_CVNRAJRARP4LQF4UWJ6MJU4AFS4X36ZOCWFPBEA>:
   21442:	2808      	cmp	r0, #8
   21444:	bf04      	itt	eq
   21446:	f44f 70c8 	moveq.w	r0, #400	; 0x190
   2144a:	2340      	moveq	r3, #64	; 0x40
   2144c:	d00e      	beq.n	2146c <sym_CVNRAJRARP4LQF4UWJ6MJU4AFS4X36ZOCWFPBEA+0x2a>
   2144e:	2804      	cmp	r0, #4
   21450:	bf04      	itt	eq
   21452:	f44f 70bf 	moveq.w	r0, #382	; 0x17e
   21456:	2310      	moveq	r3, #16
   21458:	d008      	beq.n	2146c <sym_CVNRAJRARP4LQF4UWJ6MJU4AFS4X36ZOCWFPBEA+0x2a>
   2145a:	2300      	movs	r3, #0
   2145c:	2802      	cmp	r0, #2
   2145e:	bf07      	ittee	eq
   21460:	f103 0018 	addeq.w	r0, r3, #24
   21464:	2304      	moveq	r3, #4
   21466:	f103 0028 	addne.w	r0, r3, #40	; 0x28
   2146a:	2308      	movne	r3, #8
   2146c:	1d52      	adds	r2, r2, #5
   2146e:	fb02 0003 	mla	r0, r2, r3, r0
   21472:	3080      	adds	r0, #128	; 0x80
   21474:	4348      	muls	r0, r1
   21476:	4770      	bx	lr

00021478 <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>:
   21478:	f240 315a 	movw	r1, #858	; 0x35a
   2147c:	4348      	muls	r0, r1
   2147e:	4770      	bx	lr

00021480 <sym_USXJ3USYRHE5AVFUSG2J2G7QDHRASPG75ESP25A>:
   21480:	f240 20ef 	movw	r0, #751	; 0x2ef
   21484:	4770      	bx	lr
   21486:	020e      	.short	0x020e
   21488:	0630041c 	.word	0x0630041c
   2148c:	035a0c60 	.word	0x035a0c60
   21490:	05c506b4 	.word	0x05c506b4
   21494:	12250bf5 	.word	0x12250bf5
   21498:	03b101a3 	.word	0x03b101a3
   2149c:	02ef05bf 	.word	0x02ef05bf
   214a0:	09a30649 	.word	0x09a30649

000214a4 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>:
   214a4:	b510      	push	{r4, lr}
   214a6:	f890 1158 	ldrb.w	r1, [r0, #344]	; 0x158
   214aa:	2900      	cmp	r1, #0
   214ac:	bf1c      	itt	ne
   214ae:	2000      	movne	r0, #0
   214b0:	bd10      	popne	{r4, pc}
   214b2:	f890 1118 	ldrb.w	r1, [r0, #280]	; 0x118
   214b6:	2900      	cmp	r1, #0
   214b8:	bf1c      	itt	ne
   214ba:	e9d0 1247 	ldrdne	r1, r2, [r0, #284]	; 0x11c
   214be:	428a      	cmpne	r2, r1
   214c0:	bf9c      	itt	ls
   214c2:	2001      	movls	r0, #1
   214c4:	bd10      	popls	{r4, pc}
   214c6:	f7ff fe98 	bl	211fa <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>
   214ca:	2000      	movs	r0, #0
   214cc:	bd10      	pop	{r4, pc}

000214ce <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>:
   214ce:	b5f0      	push	{r4, r5, r6, r7, lr}
   214d0:	b083      	sub	sp, #12
   214d2:	2500      	movs	r5, #0
   214d4:	b131      	cbz	r1, 214e4 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x16>
   214d6:	2901      	cmp	r1, #1
   214d8:	d074      	beq.n	215c4 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0xf6>
   214da:	f240 717d 	movw	r1, #1917	; 0x77d
   214de:	2030      	movs	r0, #48	; 0x30
   214e0:	f7f0 fa4e 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   214e4:	4604      	mov	r4, r0
   214e6:	8cc0      	ldrh	r0, [r0, #38]	; 0x26
   214e8:	2600      	movs	r6, #0
   214ea:	b130      	cbz	r0, 214fa <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x2c>
   214ec:	f7f3 fd0c 	bl	14f08 <sym_K5GMJMBHBYPRCUIWKNEXGPSNQEZKEMBAP4JWHBQ>
   214f0:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
   214f2:	fbb0 f2f1 	udiv	r2, r0, r1
   214f6:	fb01 0612 	mls	r6, r1, r2, r0
   214fa:	4620      	mov	r0, r4
   214fc:	f7ff fdde 	bl	210bc <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>
   21500:	e9d4 2150 	ldrd	r2, r1, [r4, #320]	; 0x140
   21504:	4430      	add	r0, r6
   21506:	1880      	adds	r0, r0, r2
   21508:	4169      	adcs	r1, r5
   2150a:	e9c4 0150 	strd	r0, r1, [r4, #320]	; 0x140
   2150e:	f884 5130 	strb.w	r5, [r4, #304]	; 0x130
   21512:	2001      	movs	r0, #1
   21514:	f884 013b 	strb.w	r0, [r4, #315]	; 0x13b
   21518:	2002      	movs	r0, #2
   2151a:	f884 013a 	strb.w	r0, [r4, #314]	; 0x13a
   2151e:	4620      	mov	r0, r4
   21520:	f7ff fe39 	bl	21196 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
   21524:	2800      	cmp	r0, #0
   21526:	bf08      	it	eq
   21528:	2684      	moveq	r6, #132	; 0x84
   2152a:	d024      	beq.n	21576 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0xa8>
   2152c:	4620      	mov	r0, r4
   2152e:	f7ff fe24 	bl	2117a <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
   21532:	b930      	cbnz	r0, 21542 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x74>
   21534:	4620      	mov	r0, r4
   21536:	f7ff fe32 	bl	2119e <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
   2153a:	2800      	cmp	r0, #0
   2153c:	bf08      	it	eq
   2153e:	265b      	moveq	r6, #91	; 0x5b
   21540:	d000      	beq.n	21544 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x76>
   21542:	2662      	movs	r6, #98	; 0x62
   21544:	4668      	mov	r0, sp
   21546:	f7f0 f85d 	bl	11604 <mpsl_fem_pa_is_configured>
   2154a:	f89d 0000 	ldrb.w	r0, [sp]
   2154e:	2800      	cmp	r0, #0
   21550:	bf14      	ite	ne
   21552:	2701      	movne	r7, #1
   21554:	2700      	moveq	r7, #0
   21556:	a801      	add	r0, sp, #4
   21558:	f7f0 f83c 	bl	115d4 <mpsl_fem_lna_is_configured>
   2155c:	f89d 0004 	ldrb.w	r0, [sp, #4]
   21560:	2800      	cmp	r0, #0
   21562:	bf18      	it	ne
   21564:	2001      	movne	r0, #1
   21566:	4338      	orrs	r0, r7
   21568:	bf18      	it	ne
   2156a:	360a      	addne	r6, #10
   2156c:	f7ef ff90 	bl	11490 <sym_TSTNWLRH7RAXHHT2FC4R3RPI2WC3O7TXKBYGVCI>
   21570:	2800      	cmp	r0, #0
   21572:	bf18      	it	ne
   21574:	3618      	addne	r6, #24
   21576:	f8a4 6138 	strh.w	r6, [r4, #312]	; 0x138
   2157a:	f894 0158 	ldrb.w	r0, [r4, #344]	; 0x158
   2157e:	bb00      	cbnz	r0, 215c2 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0xf4>
   21580:	f8d4 1154 	ldr.w	r1, [r4, #340]	; 0x154
   21584:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   21588:	f8d4 0150 	ldr.w	r0, [r4, #336]	; 0x150
   2158c:	4051      	eors	r1, r2
   2158e:	ea71 0000 	orns	r0, r1, r0
   21592:	d018      	beq.n	215c6 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0xf8>
   21594:	4620      	mov	r0, r4
   21596:	4629      	mov	r1, r5
   21598:	f7f3 feb2 	bl	15300 <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>
   2159c:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
   215a0:	f500 7096 	add.w	r0, r0, #300	; 0x12c
   215a4:	f8d4 1144 	ldr.w	r1, [r4, #324]	; 0x144
   215a8:	1880      	adds	r0, r0, r2
   215aa:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
   215ae:	4169      	adcs	r1, r5
   215b0:	f8d4 2154 	ldr.w	r2, [r4, #340]	; 0x154
   215b4:	1a18      	subs	r0, r3, r0
   215b6:	eb72 0001 	sbcs.w	r0, r2, r1
   215ba:	d504      	bpl.n	215c6 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0xf8>
   215bc:	4620      	mov	r0, r4
   215be:	f7ff fe1c 	bl	211fa <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>
   215c2:	e007      	b.n	215d4 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x106>
   215c4:	e014      	b.n	215f0 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x122>
   215c6:	f894 0110 	ldrb.w	r0, [r4, #272]	; 0x110
   215ca:	f504 7198 	add.w	r1, r4, #304	; 0x130
   215ce:	f7ed fcb1 	bl	ef34 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
   215d2:	b140      	cbz	r0, 215e6 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x118>
   215d4:	f8a4 5148 	strh.w	r5, [r4, #328]	; 0x148
   215d8:	f7fb fa82 	bl	1cae0 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>
   215dc:	b003      	add	sp, #12
   215de:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   215e2:	f7ee ba6d 	b.w	fac0 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
   215e6:	f240 61d7 	movw	r1, #1751	; 0x6d7
   215ea:	2030      	movs	r0, #48	; 0x30
   215ec:	f7f0 f9c8 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   215f0:	f880 5118 	strb.w	r5, [r0, #280]	; 0x118
   215f4:	f7fb fa74 	bl	1cae0 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>
   215f8:	b003      	add	sp, #12
   215fa:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   215fe:	f7ee ba5f 	b.w	fac0 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>

00021602 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI>:
   21602:	b510      	push	{r4, lr}
   21604:	4604      	mov	r4, r0
   21606:	f890 0128 	ldrb.w	r0, [r0, #296]	; 0x128
   2160a:	2800      	cmp	r0, #0
   2160c:	bf08      	it	eq
   2160e:	bd10      	popeq	{r4, pc}
   21610:	2001      	movs	r0, #1
   21612:	f884 0158 	strb.w	r0, [r4, #344]	; 0x158
   21616:	4601      	mov	r1, r0
   21618:	4620      	mov	r0, r4
   2161a:	f7ff fdeb 	bl	211f4 <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>
   2161e:	f894 0128 	ldrb.w	r0, [r4, #296]	; 0x128
   21622:	b188      	cbz	r0, 21648 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI+0x46>
   21624:	f894 0110 	ldrb.w	r0, [r4, #272]	; 0x110
   21628:	f7ed ffa6 	bl	f578 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>
   2162c:	f894 0110 	ldrb.w	r0, [r4, #272]	; 0x110
   21630:	f7ee f906 	bl	f840 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
   21634:	f894 0110 	ldrb.w	r0, [r4, #272]	; 0x110
   21638:	f7ee f8e0 	bl	f7fc <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
   2163c:	2800      	cmp	r0, #0
   2163e:	bf1c      	itt	ne
   21640:	2000      	movne	r0, #0
   21642:	f884 0128 	strbne.w	r0, [r4, #296]	; 0x128
   21646:	d001      	beq.n	2164c <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI+0x4a>
   21648:	2000      	movs	r0, #0
   2164a:	bd10      	pop	{r4, pc}
   2164c:	f44f 7101 	mov.w	r1, #516	; 0x204
   21650:	2030      	movs	r0, #48	; 0x30
   21652:	f7f0 f995 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

00021656 <sym_MHDCHYAEWBCIUYGOTWRWGZEJ6XEBEBUHOO5T6WY>:
   21656:	f8d0 0114 	ldr.w	r0, [r0, #276]	; 0x114
   2165a:	4770      	bx	lr

0002165c <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>:
   2165c:	f890 0128 	ldrb.w	r0, [r0, #296]	; 0x128
   21660:	4770      	bx	lr

00021662 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y>:
   21662:	b570      	push	{r4, r5, r6, lr}
   21664:	4604      	mov	r4, r0
   21666:	f890 02a3 	ldrb.w	r0, [r0, #675]	; 0x2a3
   2166a:	b082      	sub	sp, #8
   2166c:	2800      	cmp	r0, #0
   2166e:	bf07      	ittee	eq
   21670:	f894 02d4 	ldrbeq.w	r0, [r4, #724]	; 0x2d4
   21674:	2803      	cmpeq	r0, #3
   21676:	b002      	addne	sp, #8
   21678:	bd70      	popne	{r4, r5, r6, pc}
   2167a:	f7ee fc27 	bl	fecc <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
   2167e:	f8d4 3308 	ldr.w	r3, [r4, #776]	; 0x308
   21682:	f8d4 230c 	ldr.w	r2, [r4, #780]	; 0x30c
   21686:	1ac0      	subs	r0, r0, r3
   21688:	eb61 0302 	sbc.w	r3, r1, r2
   2168c:	2200      	movs	r2, #0
   2168e:	4611      	mov	r1, r2
   21690:	1a12      	subs	r2, r2, r0
   21692:	4199      	sbcs	r1, r3
   21694:	bfa4      	itt	ge
   21696:	b002      	addge	sp, #8
   21698:	bd70      	popge	{r4, r5, r6, pc}
   2169a:	1c41      	adds	r1, r0, #1
   2169c:	f173 0100 	sbcs.w	r1, r3, #0
   216a0:	db04      	blt.n	216ac <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4a>
   216a2:	f240 51c3 	movw	r1, #1475	; 0x5c3
   216a6:	2030      	movs	r0, #48	; 0x30
   216a8:	f7f0 f96a 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   216ac:	6961      	ldr	r1, [r4, #20]
   216ae:	2900      	cmp	r1, #0
   216b0:	bf14      	ite	ne
   216b2:	fbb0 f0f1 	udivne	r0, r0, r1
   216b6:	2000      	moveq	r0, #0
   216b8:	f8b4 10ac 	ldrh.w	r1, [r4, #172]	; 0xac
   216bc:	1c40      	adds	r0, r0, #1
   216be:	4408      	add	r0, r1
   216c0:	f8a4 02e4 	strh.w	r0, [r4, #740]	; 0x2e4
   216c4:	f8b4 029c 	ldrh.w	r0, [r4, #668]	; 0x29c
   216c8:	f8b4 12e4 	ldrh.w	r1, [r4, #740]	; 0x2e4
   216cc:	1a40      	subs	r0, r0, r1
   216ce:	b200      	sxth	r0, r0
   216d0:	2800      	cmp	r0, #0
   216d2:	bfdc      	itt	le
   216d4:	b002      	addle	sp, #8
   216d6:	bd70      	pople	{r4, r5, r6, pc}
   216d8:	f894 031c 	ldrb.w	r0, [r4, #796]	; 0x31c
   216dc:	f7ed ff4c 	bl	f578 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>
   216e0:	2800      	cmp	r0, #0
   216e2:	bf04      	itt	eq
   216e4:	b002      	addeq	sp, #8
   216e6:	bd70      	popeq	{r4, r5, r6, pc}
   216e8:	20ff      	movs	r0, #255	; 0xff
   216ea:	f884 02e9 	strb.w	r0, [r4, #745]	; 0x2e9
   216ee:	f8b4 00e8 	ldrh.w	r0, [r4, #232]	; 0xe8
   216f2:	f8b4 10e6 	ldrh.w	r1, [r4, #230]	; 0xe6
   216f6:	ae01      	add	r6, sp, #4
   216f8:	1a40      	subs	r0, r0, r1
   216fa:	f8b4 10ac 	ldrh.w	r1, [r4, #172]	; 0xac
   216fe:	1e40      	subs	r0, r0, #1
   21700:	4408      	add	r0, r1
   21702:	b285      	uxth	r5, r0
   21704:	e019      	b.n	2173a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xd8>
   21706:	9600      	str	r6, [sp, #0]
   21708:	f8b4 12e4 	ldrh.w	r1, [r4, #740]	; 0x2e4
   2170c:	2300      	movs	r3, #0
   2170e:	2201      	movs	r2, #1
   21710:	4620      	mov	r0, r4
   21712:	f7f6 fe41 	bl	18398 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1ac>
   21716:	2800      	cmp	r0, #0
   21718:	bf04      	itt	eq
   2171a:	b002      	addeq	sp, #8
   2171c:	bd70      	popeq	{r4, r5, r6, pc}
   2171e:	2801      	cmp	r0, #1
   21720:	d004      	beq.n	2172c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xca>
   21722:	f240 51fc 	movw	r1, #1532	; 0x5fc
   21726:	2030      	movs	r0, #48	; 0x30
   21728:	f7f0 f92a 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   2172c:	f8b4 02e4 	ldrh.w	r0, [r4, #740]	; 0x2e4
   21730:	f8bd 1004 	ldrh.w	r1, [sp, #4]
   21734:	4408      	add	r0, r1
   21736:	f8a4 02e4 	strh.w	r0, [r4, #740]	; 0x2e4
   2173a:	f8b4 02e4 	ldrh.w	r0, [r4, #740]	; 0x2e4
   2173e:	1a28      	subs	r0, r5, r0
   21740:	b200      	sxth	r0, r0
   21742:	2800      	cmp	r0, #0
   21744:	dadf      	bge.n	21706 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xa4>
   21746:	b002      	add	sp, #8
   21748:	bd70      	pop	{r4, r5, r6, pc}
   2174a:	b5f0      	push	{r4, r5, r6, r7, lr}
   2174c:	b083      	sub	sp, #12
   2174e:	0004      	movs	r4, r0
   21750:	d00a      	beq.n	21768 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x106>
   21752:	2500      	movs	r5, #0
   21754:	2909      	cmp	r1, #9
   21756:	f080 80de 	bcs.w	21916 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2b4>
   2175a:	e8df f001 	tbb	[pc, r1]
   2175e:	1b09      	.short	0x1b09
   21760:	dc444949 	.word	0xdc444949
   21764:	00d8bbd2 	.word	0x00d8bbd2
   21768:	21ca      	movs	r1, #202	; 0xca
   2176a:	2030      	movs	r0, #48	; 0x30
   2176c:	f7f0 f908 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   21770:	4620      	mov	r0, r4
   21772:	f7f3 ffa3 	bl	156bc <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A>
   21776:	b120      	cbz	r0, 21782 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x120>
   21778:	f44f 711d 	mov.w	r1, #628	; 0x274
   2177c:	2030      	movs	r0, #48	; 0x30
   2177e:	f7f0 f8ff 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   21782:	f8d4 0134 	ldr.w	r0, [r4, #308]	; 0x134
   21786:	b003      	add	sp, #12
   21788:	f2a0 101b 	subw	r0, r0, #283	; 0x11b
   2178c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   21790:	f7ee bab0 	b.w	fcf4 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
   21794:	4620      	mov	r0, r4
   21796:	f7ff fcfa 	bl	2118e <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
   2179a:	b9c0      	cbnz	r0, 217ce <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x16c>
   2179c:	4620      	mov	r0, r4
   2179e:	2100      	movs	r1, #0
   217a0:	f7f3 fdae 	bl	15300 <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>
   217a4:	f500 7596 	add.w	r5, r0, #300	; 0x12c
   217a8:	f8d4 0134 	ldr.w	r0, [r4, #308]	; 0x134
   217ac:	42a8      	cmp	r0, r5
   217ae:	d20c      	bcs.n	217ca <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x168>
   217b0:	1a28      	subs	r0, r5, r0
   217b2:	2103      	movs	r1, #3
   217b4:	f7ed f9d8 	bl	eb68 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
   217b8:	b138      	cbz	r0, 217ca <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x168>
   217ba:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
   217be:	b003      	add	sp, #12
   217c0:	4620      	mov	r0, r4
   217c2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   217c6:	f7ff bbeb 	b.w	20fa0 <sym_2K3JTQJLCTROZQI43ERT7GF5BTQ3SMAJXYMCVJI>
   217ca:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
   217ce:	4620      	mov	r0, r4
   217d0:	f7f3 ff96 	bl	15700 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I>
   217d4:	2800      	cmp	r0, #0
   217d6:	bf04      	itt	eq
   217d8:	b003      	addeq	sp, #12
   217da:	bdf0      	popeq	{r4, r5, r6, r7, pc}
   217dc:	f240 21a7 	movw	r1, #679	; 0x2a7
   217e0:	2030      	movs	r0, #48	; 0x30
   217e2:	f7f0 f8cd 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   217e6:	b003      	add	sp, #12
   217e8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   217ec:	f7fb bd02 	b.w	1d1f4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
   217f0:	4620      	mov	r0, r4
   217f2:	f7ff fcd0 	bl	21196 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
   217f6:	2800      	cmp	r0, #0
   217f8:	bf08      	it	eq
   217fa:	2684      	moveq	r6, #132	; 0x84
   217fc:	d024      	beq.n	21848 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1e6>
   217fe:	4620      	mov	r0, r4
   21800:	f7ff fcbb 	bl	2117a <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
   21804:	b930      	cbnz	r0, 21814 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1b2>
   21806:	4620      	mov	r0, r4
   21808:	f7ff fcc9 	bl	2119e <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
   2180c:	2800      	cmp	r0, #0
   2180e:	bf08      	it	eq
   21810:	265b      	moveq	r6, #91	; 0x5b
   21812:	d000      	beq.n	21816 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1b4>
   21814:	2662      	movs	r6, #98	; 0x62
   21816:	4668      	mov	r0, sp
   21818:	f7ef fef4 	bl	11604 <mpsl_fem_pa_is_configured>
   2181c:	f89d 0000 	ldrb.w	r0, [sp]
   21820:	2800      	cmp	r0, #0
   21822:	bf14      	ite	ne
   21824:	2701      	movne	r7, #1
   21826:	2700      	moveq	r7, #0
   21828:	a801      	add	r0, sp, #4
   2182a:	f7ef fed3 	bl	115d4 <mpsl_fem_lna_is_configured>
   2182e:	f89d 0004 	ldrb.w	r0, [sp, #4]
   21832:	2800      	cmp	r0, #0
   21834:	bf18      	it	ne
   21836:	2001      	movne	r0, #1
   21838:	4338      	orrs	r0, r7
   2183a:	bf18      	it	ne
   2183c:	360a      	addne	r6, #10
   2183e:	f7ef fe27 	bl	11490 <sym_TSTNWLRH7RAXHHT2FC4R3RPI2WC3O7TXKBYGVCI>
   21842:	2800      	cmp	r0, #0
   21844:	bf18      	it	ne
   21846:	3618      	addne	r6, #24
   21848:	f8a4 6138 	strh.w	r6, [r4, #312]	; 0x138
   2184c:	f884 5130 	strb.w	r5, [r4, #304]	; 0x130
   21850:	2601      	movs	r6, #1
   21852:	f884 613b 	strb.w	r6, [r4, #315]	; 0x13b
   21856:	2100      	movs	r1, #0
   21858:	f504 7098 	add.w	r0, r4, #304	; 0x130
   2185c:	f7fe fd42 	bl	202e4 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
   21860:	f8b4 0148 	ldrh.w	r0, [r4, #328]	; 0x148
   21864:	1c40      	adds	r0, r0, #1
   21866:	280a      	cmp	r0, #10
   21868:	bf38      	it	cc
   2186a:	f8a4 0148 	strhcc.w	r0, [r4, #328]	; 0x148
   2186e:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
   21872:	b138      	cbz	r0, 21884 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x222>
   21874:	f8b4 0148 	ldrh.w	r0, [r4, #328]	; 0x148
   21878:	1c40      	adds	r0, r0, #1
   2187a:	280a      	cmp	r0, #10
   2187c:	bf28      	it	cs
   2187e:	f884 613a 	strbcs.w	r6, [r4, #314]	; 0x13a
   21882:	d202      	bcs.n	2188a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x228>
   21884:	2002      	movs	r0, #2
   21886:	f884 013a 	strb.w	r0, [r4, #314]	; 0x13a
   2188a:	f894 0158 	ldrb.w	r0, [r4, #344]	; 0x158
   2188e:	bb08      	cbnz	r0, 218d4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x272>
   21890:	f8d4 1154 	ldr.w	r1, [r4, #340]	; 0x154
   21894:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   21898:	f8d4 0150 	ldr.w	r0, [r4, #336]	; 0x150
   2189c:	4051      	eors	r1, r2
   2189e:	ea71 0000 	orns	r0, r1, r0
   218a2:	d01f      	beq.n	218e4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x282>
   218a4:	4620      	mov	r0, r4
   218a6:	4629      	mov	r1, r5
   218a8:	f7f3 fd2a 	bl	15300 <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>
   218ac:	f8d4 1140 	ldr.w	r1, [r4, #320]	; 0x140
   218b0:	f500 7096 	add.w	r0, r0, #300	; 0x12c
   218b4:	f8d4 2144 	ldr.w	r2, [r4, #324]	; 0x144
   218b8:	1840      	adds	r0, r0, r1
   218ba:	eb45 0102 	adc.w	r1, r5, r2
   218be:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
   218c2:	f8d4 3154 	ldr.w	r3, [r4, #340]	; 0x154
   218c6:	1a10      	subs	r0, r2, r0
   218c8:	eb73 0001 	sbcs.w	r0, r3, r1
   218cc:	d50a      	bpl.n	218e4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x282>
   218ce:	4620      	mov	r0, r4
   218d0:	f7ff fc93 	bl	211fa <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>
   218d4:	f894 0110 	ldrb.w	r0, [r4, #272]	; 0x110
   218d8:	f7ed ff90 	bl	f7fc <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
   218dc:	f884 5128 	strb.w	r5, [r4, #296]	; 0x128
   218e0:	b003      	add	sp, #12
   218e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   218e4:	f894 0110 	ldrb.w	r0, [r4, #272]	; 0x110
   218e8:	f504 7198 	add.w	r1, r4, #304	; 0x130
   218ec:	f7ed fb22 	bl	ef34 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
   218f0:	2800      	cmp	r0, #0
   218f2:	bf1c      	itt	ne
   218f4:	b003      	addne	sp, #12
   218f6:	bdf0      	popne	{r4, r5, r6, r7, pc}
   218f8:	f240 6191 	movw	r1, #1681	; 0x691
   218fc:	2030      	movs	r0, #48	; 0x30
   218fe:	f7f0 f83f 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   21902:	b003      	add	sp, #12
   21904:	4620      	mov	r0, r4
   21906:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   2190a:	f7ff bb49 	b.w	20fa0 <sym_2K3JTQJLCTROZQI43ERT7GF5BTQ3SMAJXYMCVJI>
   2190e:	21ea      	movs	r1, #234	; 0xea
   21910:	2030      	movs	r0, #48	; 0x30
   21912:	f7f0 f835 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   21916:	21ee      	movs	r1, #238	; 0xee
   21918:	2030      	movs	r0, #48	; 0x30
   2191a:	f7f0 f831 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0002191e <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ>:
   2191e:	b510      	push	{r4, lr}
   21920:	4604      	mov	r4, r0
   21922:	f8d0 034c 	ldr.w	r0, [r0, #844]	; 0x34c
   21926:	6961      	ldr	r1, [r4, #20]
   21928:	4288      	cmp	r0, r1
   2192a:	d109      	bne.n	21940 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x22>
   2192c:	f8b4 1350 	ldrh.w	r1, [r4, #848]	; 0x350
   21930:	8ba2      	ldrh	r2, [r4, #28]
   21932:	4291      	cmp	r1, r2
   21934:	d104      	bne.n	21940 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x22>
   21936:	f8b4 1352 	ldrh.w	r1, [r4, #850]	; 0x352
   2193a:	8be2      	ldrh	r2, [r4, #30]
   2193c:	4291      	cmp	r1, r2
   2193e:	d014      	beq.n	2196a <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x4c>
   21940:	8821      	ldrh	r1, [r4, #0]
   21942:	f8a4 1212 	strh.w	r1, [r4, #530]	; 0x212
   21946:	f7fe fb9b 	bl	20080 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
   2194a:	f8a4 0214 	strh.w	r0, [r4, #532]	; 0x214
   2194e:	f8b4 0350 	ldrh.w	r0, [r4, #848]	; 0x350
   21952:	f8a4 0216 	strh.w	r0, [r4, #534]	; 0x216
   21956:	f8b4 0352 	ldrh.w	r0, [r4, #850]	; 0x352
   2195a:	f8a4 0218 	strh.w	r0, [r4, #536]	; 0x218
   2195e:	2208      	movs	r2, #8
   21960:	4621      	mov	r1, r4
   21962:	f204 2006 	addw	r0, r4, #518	; 0x206
   21966:	f7f2 fdf1 	bl	1454c <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
   2196a:	2102      	movs	r1, #2
   2196c:	4620      	mov	r0, r4
   2196e:	f7f2 fac5 	bl	13efc <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
   21972:	2000      	movs	r0, #0
   21974:	f884 00b6 	strb.w	r0, [r4, #182]	; 0xb6
   21978:	2003      	movs	r0, #3
   2197a:	f884 00b9 	strb.w	r0, [r4, #185]	; 0xb9
   2197e:	bd10      	pop	{r4, pc}

00021980 <sym_PDDLBAI7RAK2OQ7ZHFU33L5KMJV5YKPLX5ITXAY>:
   21980:	f7f0 bc58 	b.w	12234 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>

00021984 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ>:
   21984:	2100      	movs	r1, #0
   21986:	f880 10b5 	strb.w	r1, [r0, #181]	; 0xb5
   2198a:	f880 10b6 	strb.w	r1, [r0, #182]	; 0xb6
   2198e:	f880 10b9 	strb.w	r1, [r0, #185]	; 0xb9
   21992:	f890 12a3 	ldrb.w	r1, [r0, #675]	; 0x2a3
   21996:	b111      	cbz	r1, 2199e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1a>
   21998:	2102      	movs	r1, #2
   2199a:	f7f6 bb45 	b.w	18028 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
   2199e:	2103      	movs	r1, #3
   219a0:	f7f6 bb42 	b.w	18028 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
   219a4:	2200      	movs	r2, #0
   219a6:	704a      	strb	r2, [r1, #1]
   219a8:	220a      	movs	r2, #10
   219aa:	f5a0 7055 	sub.w	r0, r0, #852	; 0x354
   219ae:	700a      	strb	r2, [r1, #0]
   219b0:	8802      	ldrh	r2, [r0, #0]
   219b2:	808a      	strh	r2, [r1, #4]
   219b4:	f8d0 2360 	ldr.w	r2, [r0, #864]	; 0x360
   219b8:	f8d0 3364 	ldr.w	r3, [r0, #868]	; 0x364
   219bc:	f8c1 2006 	str.w	r2, [r1, #6]
   219c0:	f8c1 300a 	str.w	r3, [r1, #10]
   219c4:	f8b0 0368 	ldrh.w	r0, [r0, #872]	; 0x368
   219c8:	81c8      	strh	r0, [r1, #14]
   219ca:	4770      	bx	lr
   219cc:	b510      	push	{r4, lr}
   219ce:	4604      	mov	r4, r0
   219d0:	6840      	ldr	r0, [r0, #4]
   219d2:	2301      	movs	r3, #1
   219d4:	2109      	movs	r1, #9
   219d6:	f890 20b5 	ldrb.w	r2, [r0, #181]	; 0xb5
   219da:	30a0      	adds	r0, #160	; 0xa0
   219dc:	f7fe fb77 	bl	200ce <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   219e0:	2800      	cmp	r0, #0
   219e2:	bf08      	it	eq
   219e4:	bd10      	popeq	{r4, pc}
   219e6:	2000      	movs	r0, #0
   219e8:	6861      	ldr	r1, [r4, #4]
   219ea:	f881 00e4 	strb.w	r0, [r1, #228]	; 0xe4
   219ee:	6861      	ldr	r1, [r4, #4]
   219f0:	f881 00f0 	strb.w	r0, [r1, #240]	; 0xf0
   219f4:	6861      	ldr	r1, [r4, #4]
   219f6:	f881 00b5 	strb.w	r0, [r1, #181]	; 0xb5
   219fa:	bd10      	pop	{r4, pc}
   219fc:	6840      	ldr	r0, [r0, #4]
   219fe:	f890 10b6 	ldrb.w	r1, [r0, #182]	; 0xb6
   21a02:	2914      	cmp	r1, #20
   21a04:	bf1c      	itt	ne
   21a06:	2002      	movne	r0, #2
   21a08:	4770      	bxne	lr
   21a0a:	2115      	movs	r1, #21
   21a0c:	f880 10b6 	strb.w	r1, [r0, #182]	; 0xb6
   21a10:	2000      	movs	r0, #0
   21a12:	4770      	bx	lr
   21a14:	b510      	push	{r4, lr}
   21a16:	6841      	ldr	r1, [r0, #4]
   21a18:	f891 20b6 	ldrb.w	r2, [r1, #182]	; 0xb6
   21a1c:	2a17      	cmp	r2, #23
   21a1e:	d004      	beq.n	21a2a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0xa6>
   21a20:	f240 71cc 	movw	r1, #1996	; 0x7cc
   21a24:	2031      	movs	r0, #49	; 0x31
   21a26:	f7ef ffab 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   21a2a:	2201      	movs	r2, #1
   21a2c:	f881 20f5 	strb.w	r2, [r1, #245]	; 0xf5
   21a30:	6840      	ldr	r0, [r0, #4]
   21a32:	2118      	movs	r1, #24
   21a34:	f880 10b6 	strb.w	r1, [r0, #182]	; 0xb6
   21a38:	bd10      	pop	{r4, pc}
   21a3a:	f7ff b9eb 	b.w	20e14 <sym_FW4JPGKXKHARAAJ7L3QR6HU5OB4PHXARNGBNCMY>
   21a3e:	b510      	push	{r4, lr}
   21a40:	4604      	mov	r4, r0
   21a42:	6840      	ldr	r0, [r0, #4]
   21a44:	2301      	movs	r3, #1
   21a46:	2100      	movs	r1, #0
   21a48:	f890 20b5 	ldrb.w	r2, [r0, #181]	; 0xb5
   21a4c:	30a0      	adds	r0, #160	; 0xa0
   21a4e:	f7fe fb3e 	bl	200ce <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   21a52:	b120      	cbz	r0, 21a5e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0xda>
   21a54:	6861      	ldr	r1, [r4, #4]
   21a56:	201f      	movs	r0, #31
   21a58:	f881 00b5 	strb.w	r0, [r1, #181]	; 0xb5
   21a5c:	bd10      	pop	{r4, pc}
   21a5e:	f640 0148 	movw	r1, #2120	; 0x848
   21a62:	2031      	movs	r0, #49	; 0x31
   21a64:	f7ef ff8c 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   21a68:	b510      	push	{r4, lr}
   21a6a:	4604      	mov	r4, r0
   21a6c:	6840      	ldr	r0, [r0, #4]
   21a6e:	2301      	movs	r3, #1
   21a70:	2100      	movs	r1, #0
   21a72:	f890 20b5 	ldrb.w	r2, [r0, #181]	; 0xb5
   21a76:	30a0      	adds	r0, #160	; 0xa0
   21a78:	f7fe fb29 	bl	200ce <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   21a7c:	b120      	cbz	r0, 21a88 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x104>
   21a7e:	6861      	ldr	r1, [r4, #4]
   21a80:	2011      	movs	r0, #17
   21a82:	f881 00b5 	strb.w	r0, [r1, #181]	; 0xb5
   21a86:	bd10      	pop	{r4, pc}
   21a88:	f640 013b 	movw	r1, #2107	; 0x83b
   21a8c:	2031      	movs	r0, #49	; 0x31
   21a8e:	f7ef ff77 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   21a92:	b510      	push	{r4, lr}
   21a94:	6841      	ldr	r1, [r0, #4]
   21a96:	f891 20b6 	ldrb.w	r2, [r1, #182]	; 0xb6
   21a9a:	2a13      	cmp	r2, #19
   21a9c:	d004      	beq.n	21aa8 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x124>
   21a9e:	f240 71c4 	movw	r1, #1988	; 0x7c4
   21aa2:	2031      	movs	r0, #49	; 0x31
   21aa4:	f7ef ff6c 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   21aa8:	2201      	movs	r2, #1
   21aaa:	f881 20f5 	strb.w	r2, [r1, #245]	; 0xf5
   21aae:	6840      	ldr	r0, [r0, #4]
   21ab0:	2114      	movs	r1, #20
   21ab2:	f880 10b6 	strb.w	r1, [r0, #182]	; 0xb6
   21ab6:	bd10      	pop	{r4, pc}
   21ab8:	b510      	push	{r4, lr}
   21aba:	4604      	mov	r4, r0
   21abc:	6840      	ldr	r0, [r0, #4]
   21abe:	2301      	movs	r3, #1
   21ac0:	2100      	movs	r1, #0
   21ac2:	f890 20b5 	ldrb.w	r2, [r0, #181]	; 0xb5
   21ac6:	30a0      	adds	r0, #160	; 0xa0
   21ac8:	f7fe fb01 	bl	200ce <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   21acc:	b120      	cbz	r0, 21ad8 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x154>
   21ace:	6861      	ldr	r1, [r4, #4]
   21ad0:	2022      	movs	r0, #34	; 0x22
   21ad2:	f881 00b5 	strb.w	r0, [r1, #181]	; 0xb5
   21ad6:	bd10      	pop	{r4, pc}
   21ad8:	f640 015a 	movw	r1, #2138	; 0x85a
   21adc:	2031      	movs	r0, #49	; 0x31
   21ade:	f7ef ff4f 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   21ae2:	b510      	push	{r4, lr}
   21ae4:	6841      	ldr	r1, [r0, #4]
   21ae6:	f891 00b6 	ldrb.w	r0, [r1, #182]	; 0xb6
   21aea:	2824      	cmp	r0, #36	; 0x24
   21aec:	bf11      	iteee	ne
   21aee:	2800      	cmpne	r0, #0
   21af0:	2025      	moveq	r0, #37	; 0x25
   21af2:	f881 00b6 	strbeq.w	r0, [r1, #182]	; 0xb6
   21af6:	bd10      	popeq	{r4, pc}
   21af8:	f640 0161 	movw	r1, #2145	; 0x861
   21afc:	f04f 0031 	mov.w	r0, #49	; 0x31
   21b00:	f7ef ff3e 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   21b04:	b510      	push	{r4, lr}
   21b06:	6840      	ldr	r0, [r0, #4]
   21b08:	f890 10b6 	ldrb.w	r1, [r0, #182]	; 0xb6
   21b0c:	2918      	cmp	r1, #24
   21b0e:	bf02      	ittt	eq
   21b10:	211c      	moveq	r1, #28
   21b12:	f880 10b6 	strbeq.w	r1, [r0, #182]	; 0xb6
   21b16:	bd10      	popeq	{r4, pc}
   21b18:	f240 71d9 	movw	r1, #2009	; 0x7d9
   21b1c:	2031      	movs	r0, #49	; 0x31
   21b1e:	f7ef ff2f 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   21b22:	f7ff b963 	b.w	20dec <sym_OPCORHVHZVKAWEVWCDZOHGGLXMSL2TBGHVHNDOY>
   21b26:	b510      	push	{r4, lr}
   21b28:	6840      	ldr	r0, [r0, #4]
   21b2a:	f890 10b6 	ldrb.w	r1, [r0, #182]	; 0xb6
   21b2e:	2918      	cmp	r1, #24
   21b30:	bf02      	ittt	eq
   21b32:	211a      	moveq	r1, #26
   21b34:	f880 10b6 	strbeq.w	r1, [r0, #182]	; 0xb6
   21b38:	bd10      	popeq	{r4, pc}
   21b3a:	f240 71d3 	movw	r1, #2003	; 0x7d3
   21b3e:	2031      	movs	r0, #49	; 0x31
   21b40:	f7ef ff1e 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   21b44:	b538      	push	{r3, r4, r5, lr}
   21b46:	4604      	mov	r4, r0
   21b48:	6840      	ldr	r0, [r0, #4]
   21b4a:	f890 10b6 	ldrb.w	r1, [r0, #182]	; 0xb6
   21b4e:	291e      	cmp	r1, #30
   21b50:	d004      	beq.n	21b5c <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1d8>
   21b52:	f240 71ff 	movw	r1, #2047	; 0x7ff
   21b56:	2031      	movs	r0, #49	; 0x31
   21b58:	f7ef ff12 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   21b5c:	2500      	movs	r5, #0
   21b5e:	f880 50f5 	strb.w	r5, [r0, #245]	; 0xf5
   21b62:	6860      	ldr	r0, [r4, #4]
   21b64:	f890 128f 	ldrb.w	r1, [r0, #655]	; 0x28f
   21b68:	f88d 1000 	strb.w	r1, [sp]
   21b6c:	f89d 1000 	ldrb.w	r1, [sp]
   21b70:	b121      	cbz	r1, 21b7c <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1f8>
   21b72:	f640 0103 	movw	r1, #2051	; 0x803
   21b76:	2031      	movs	r0, #49	; 0x31
   21b78:	f7ef ff02 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   21b7c:	f890 10f6 	ldrb.w	r1, [r0, #246]	; 0xf6
   21b80:	b169      	cbz	r1, 21b9e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x21a>
   21b82:	f880 50f6 	strb.w	r5, [r0, #246]	; 0xf6
   21b86:	6860      	ldr	r0, [r4, #4]
   21b88:	220c      	movs	r2, #12
   21b8a:	8801      	ldrh	r1, [r0, #0]
   21b8c:	f8a0 1292 	strh.w	r1, [r0, #658]	; 0x292
   21b90:	6860      	ldr	r0, [r4, #4]
   21b92:	f880 5290 	strb.w	r5, [r0, #656]	; 0x290
   21b96:	6861      	ldr	r1, [r4, #4]
   21b98:	f201 2087 	addw	r0, r1, #647	; 0x287
   21b9c:	e00d      	b.n	21bba <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x236>
   21b9e:	8801      	ldrh	r1, [r0, #0]
   21ba0:	f8a0 1292 	strh.w	r1, [r0, #658]	; 0x292
   21ba4:	6860      	ldr	r0, [r4, #4]
   21ba6:	220b      	movs	r2, #11
   21ba8:	f880 5290 	strb.w	r5, [r0, #656]	; 0x290
   21bac:	6861      	ldr	r1, [r4, #4]
   21bae:	2001      	movs	r0, #1
   21bb0:	f881 0294 	strb.w	r0, [r1, #660]	; 0x294
   21bb4:	6861      	ldr	r1, [r4, #4]
   21bb6:	f201 2087 	addw	r0, r1, #647	; 0x287
   21bba:	f7f2 fcc7 	bl	1454c <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
   21bbe:	6860      	ldr	r0, [r4, #4]
   21bc0:	f880 50b6 	strb.w	r5, [r0, #182]	; 0xb6
   21bc4:	bd38      	pop	{r3, r4, r5, pc}
   21bc6:	b510      	push	{r4, lr}
   21bc8:	4604      	mov	r4, r0
   21bca:	6840      	ldr	r0, [r0, #4]
   21bcc:	2301      	movs	r3, #1
   21bce:	4619      	mov	r1, r3
   21bd0:	f890 20b7 	ldrb.w	r2, [r0, #183]	; 0xb7
   21bd4:	30a0      	adds	r0, #160	; 0xa0
   21bd6:	f7fe fa7a 	bl	200ce <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   21bda:	2800      	cmp	r0, #0
   21bdc:	bf18      	it	ne
   21bde:	bd10      	popne	{r4, pc}
   21be0:	2009      	movs	r0, #9
   21be2:	6861      	ldr	r1, [r4, #4]
   21be4:	f881 00b7 	strb.w	r0, [r1, #183]	; 0xb7
   21be8:	bd10      	pop	{r4, pc}
   21bea:	b530      	push	{r4, r5, lr}
   21bec:	b083      	sub	sp, #12
   21bee:	245b      	movs	r4, #91	; 0x5b
   21bf0:	f7ef fc4e 	bl	11490 <sym_TSTNWLRH7RAXHHT2FC4R3RPI2WC3O7TXKBYGVCI>
   21bf4:	2800      	cmp	r0, #0
   21bf6:	bf18      	it	ne
   21bf8:	2473      	movne	r4, #115	; 0x73
   21bfa:	4668      	mov	r0, sp
   21bfc:	f7ef fd02 	bl	11604 <mpsl_fem_pa_is_configured>
   21c00:	f89d 0000 	ldrb.w	r0, [sp]
   21c04:	2800      	cmp	r0, #0
   21c06:	bf14      	ite	ne
   21c08:	2501      	movne	r5, #1
   21c0a:	2500      	moveq	r5, #0
   21c0c:	a801      	add	r0, sp, #4
   21c0e:	f7ef fce1 	bl	115d4 <mpsl_fem_lna_is_configured>
   21c12:	f89d 0004 	ldrb.w	r0, [sp, #4]
   21c16:	2800      	cmp	r0, #0
   21c18:	bf18      	it	ne
   21c1a:	2001      	movne	r0, #1
   21c1c:	4328      	orrs	r0, r5
   21c1e:	bf18      	it	ne
   21c20:	340a      	addne	r4, #10
   21c22:	4620      	mov	r0, r4
   21c24:	b003      	add	sp, #12
   21c26:	bd30      	pop	{r4, r5, pc}

00021c28 <sym_3AP322LX5PIMI4GVZ7JO5VXSHDSDLPGKXAH2IAI>:
   21c28:	f7f0 bb04 	b.w	12234 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>

00021c2c <sym_ML7KHO26ID5IAQG4EHQEFQ7YY4WWA5LXC5AE3GI>:
   21c2c:	4770      	bx	lr

00021c2e <sym_3J6JKRKBPIMNXA7RUY6VOWDCYHTEQ56T53I4DCQ>:
   21c2e:	b570      	push	{r4, r5, r6, lr}
   21c30:	460d      	mov	r5, r1
   21c32:	b1d0      	cbz	r0, 21c6a <sym_3J6JKRKBPIMNXA7RUY6VOWDCYHTEQ56T53I4DCQ+0x3c>
   21c34:	f1a0 044e 	sub.w	r4, r0, #78	; 0x4e
   21c38:	f830 0c2c 	ldrh.w	r0, [r0, #-44]
   21c3c:	2107      	movs	r1, #7
   21c3e:	f7fd ffa0 	bl	1fb82 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   21c42:	b1b0      	cbz	r0, 21c72 <sym_3J6JKRKBPIMNXA7RUY6VOWDCYHTEQ56T53I4DCQ+0x44>
   21c44:	2100      	movs	r1, #0
   21c46:	7069      	strb	r1, [r5, #1]
   21c48:	220c      	movs	r2, #12
   21c4a:	702a      	strb	r2, [r5, #0]
   21c4c:	7129      	strb	r1, [r5, #4]
   21c4e:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
   21c50:	f8a5 1005 	strh.w	r1, [r5, #5]
   21c54:	f894 1057 	ldrb.w	r1, [r4, #87]	; 0x57
   21c58:	71e9      	strb	r1, [r5, #7]
   21c5a:	3018      	adds	r0, #24
   21c5c:	f001 fc57 	bl	2350e <sym_E3Z4CDFMO5WO2USA7ZENUHUEO5Z5OLSF4WCS4GY>
   21c60:	b158      	cbz	r0, 21c7a <sym_3J6JKRKBPIMNXA7RUY6VOWDCYHTEQ56T53I4DCQ+0x4c>
   21c62:	211b      	movs	r1, #27
   21c64:	201a      	movs	r0, #26
   21c66:	f7ef fe8b 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   21c6a:	216b      	movs	r1, #107	; 0x6b
   21c6c:	201a      	movs	r0, #26
   21c6e:	f7ef fe87 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   21c72:	2172      	movs	r1, #114	; 0x72
   21c74:	201a      	movs	r0, #26
   21c76:	f7ef fe83 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   21c7a:	8ca0      	ldrh	r0, [r4, #36]	; 0x24
   21c7c:	2108      	movs	r1, #8
   21c7e:	f7f0 f9a7 	bl	11fd0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
   21c82:	b118      	cbz	r0, 21c8c <sym_3J6JKRKBPIMNXA7RUY6VOWDCYHTEQ56T53I4DCQ+0x5e>
   21c84:	211d      	movs	r1, #29
   21c86:	201a      	movs	r0, #26
   21c88:	f7ef fe7a 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   21c8c:	8c60      	ldrh	r0, [r4, #34]	; 0x22
   21c8e:	2107      	movs	r1, #7
   21c90:	f7f0 f99e 	bl	11fd0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
   21c94:	2800      	cmp	r0, #0
   21c96:	bf08      	it	eq
   21c98:	bd70      	popeq	{r4, r5, r6, pc}
   21c9a:	211e      	movs	r1, #30
   21c9c:	201a      	movs	r0, #26
   21c9e:	f7ef fe6f 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

00021ca2 <sym_QSBLLXJNE4J2PLB5JSA5I6DVIY2I4GGIJ5BFBGY>:
   21ca2:	b570      	push	{r4, r5, r6, lr}
   21ca4:	460c      	mov	r4, r1
   21ca6:	2800      	cmp	r0, #0
   21ca8:	d02f      	beq.n	21d0a <sym_QSBLLXJNE4J2PLB5JSA5I6DVIY2I4GGIJ5BFBGY+0x68>
   21caa:	f1a0 0544 	sub.w	r5, r0, #68	; 0x44
   21cae:	2000      	movs	r0, #0
   21cb0:	7060      	strb	r0, [r4, #1]
   21cb2:	2025      	movs	r0, #37	; 0x25
   21cb4:	7020      	strb	r0, [r4, #0]
   21cb6:	f895 004d 	ldrb.w	r0, [r5, #77]	; 0x4d
   21cba:	7120      	strb	r0, [r4, #4]
   21cbc:	8ca8      	ldrh	r0, [r5, #36]	; 0x24
   21cbe:	f8a4 0005 	strh.w	r0, [r4, #5]
   21cc2:	6868      	ldr	r0, [r5, #4]
   21cc4:	f8d4 1009 	ldr.w	r1, [r4, #9]
   21cc8:	f360 211f 	bfi	r1, r0, #8, #24
   21ccc:	f8c4 1009 	str.w	r1, [r4, #9]
   21cd0:	69a8      	ldr	r0, [r5, #24]
   21cd2:	68e1      	ldr	r1, [r4, #12]
   21cd4:	f360 211f 	bfi	r1, r0, #8, #24
   21cd8:	60e1      	str	r1, [r4, #12]
   21cda:	69e8      	ldr	r0, [r5, #28]
   21cdc:	f8d4 100f 	ldr.w	r1, [r4, #15]
   21ce0:	f360 211f 	bfi	r1, r0, #8, #24
   21ce4:	f8c4 100f 	str.w	r1, [r4, #15]
   21ce8:	f895 0032 	ldrb.w	r0, [r5, #50]	; 0x32
   21cec:	2801      	cmp	r0, #1
   21cee:	bf18      	it	ne
   21cf0:	2802      	cmpne	r0, #2
   21cf2:	d00e      	beq.n	21d12 <sym_QSBLLXJNE4J2PLB5JSA5I6DVIY2I4GGIJ5BFBGY+0x70>
   21cf4:	2804      	cmp	r0, #4
   21cf6:	bf14      	ite	ne
   21cf8:	2808      	cmpne	r0, #8
   21cfa:	2003      	moveq	r0, #3
   21cfc:	d009      	beq.n	21d12 <sym_QSBLLXJNE4J2PLB5JSA5I6DVIY2I4GGIJ5BFBGY+0x70>
   21cfe:	f44f 7134 	mov.w	r1, #720	; 0x2d0
   21d02:	f04f 0006 	mov.w	r0, #6
   21d06:	f7ef fe3b 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   21d0a:	2143      	movs	r1, #67	; 0x43
   21d0c:	201a      	movs	r0, #26
   21d0e:	f7ef fe37 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   21d12:	74e0      	strb	r0, [r4, #19]
   21d14:	f895 0033 	ldrb.w	r0, [r5, #51]	; 0x33
   21d18:	2801      	cmp	r0, #1
   21d1a:	bf18      	it	ne
   21d1c:	2802      	cmpne	r0, #2
   21d1e:	d004      	beq.n	21d2a <sym_QSBLLXJNE4J2PLB5JSA5I6DVIY2I4GGIJ5BFBGY+0x88>
   21d20:	2804      	cmp	r0, #4
   21d22:	bf14      	ite	ne
   21d24:	2808      	cmpne	r0, #8
   21d26:	2003      	moveq	r0, #3
   21d28:	d1e9      	bne.n	21cfe <sym_QSBLLXJNE4J2PLB5JSA5I6DVIY2I4GGIJ5BFBGY+0x5c>
   21d2a:	7520      	strb	r0, [r4, #20]
   21d2c:	f895 0031 	ldrb.w	r0, [r5, #49]	; 0x31
   21d30:	7560      	strb	r0, [r4, #21]
   21d32:	f895 0034 	ldrb.w	r0, [r5, #52]	; 0x34
   21d36:	75a0      	strb	r0, [r4, #22]
   21d38:	f895 0035 	ldrb.w	r0, [r5, #53]	; 0x35
   21d3c:	75e0      	strb	r0, [r4, #23]
   21d3e:	8d28      	ldrh	r0, [r5, #40]	; 0x28
   21d40:	8360      	strh	r0, [r4, #26]
   21d42:	8d68      	ldrh	r0, [r5, #42]	; 0x2a
   21d44:	83a0      	strh	r0, [r4, #28]
   21d46:	8c68      	ldrh	r0, [r5, #34]	; 0x22
   21d48:	f04f 0107 	mov.w	r1, #7
   21d4c:	f7fd ff19 	bl	1fb82 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   21d50:	b1e8      	cbz	r0, 21d8e <sym_QSBLLXJNE4J2PLB5JSA5I6DVIY2I4GGIJ5BFBGY+0xec>
   21d52:	68c1      	ldr	r1, [r0, #12]
   21d54:	f8d4 2006 	ldr.w	r2, [r4, #6]
   21d58:	f361 221f 	bfi	r2, r1, #8, #24
   21d5c:	f8c4 2006 	str.w	r2, [r4, #6]
   21d60:	7d41      	ldrb	r1, [r0, #21]
   21d62:	7621      	strb	r1, [r4, #24]
   21d64:	7d81      	ldrb	r1, [r0, #22]
   21d66:	7661      	strb	r1, [r4, #25]
   21d68:	6801      	ldr	r1, [r0, #0]
   21d6a:	f240 42e2 	movw	r2, #1250	; 0x4e2
   21d6e:	fbb1 f1f2 	udiv	r1, r1, r2
   21d72:	83e1      	strh	r1, [r4, #30]
   21d74:	f895 104d 	ldrb.w	r1, [r5, #77]	; 0x4d
   21d78:	2900      	cmp	r1, #0
   21d7a:	bf08      	it	eq
   21d7c:	bd70      	popeq	{r4, r5, r6, pc}
   21d7e:	3018      	adds	r0, #24
   21d80:	f001 fbc5 	bl	2350e <sym_E3Z4CDFMO5WO2USA7ZENUHUEO5Z5OLSF4WCS4GY>
   21d84:	b138      	cbz	r0, 21d96 <sym_QSBLLXJNE4J2PLB5JSA5I6DVIY2I4GGIJ5BFBGY+0xf4>
   21d86:	211b      	movs	r1, #27
   21d88:	201a      	movs	r0, #26
   21d8a:	f7ef fdf9 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   21d8e:	215c      	movs	r1, #92	; 0x5c
   21d90:	201a      	movs	r0, #26
   21d92:	f7ef fdf5 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   21d96:	8ca8      	ldrh	r0, [r5, #36]	; 0x24
   21d98:	2108      	movs	r1, #8
   21d9a:	f7f0 f919 	bl	11fd0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
   21d9e:	b118      	cbz	r0, 21da8 <sym_QSBLLXJNE4J2PLB5JSA5I6DVIY2I4GGIJ5BFBGY+0x106>
   21da0:	211d      	movs	r1, #29
   21da2:	201a      	movs	r0, #26
   21da4:	f7ef fdec 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   21da8:	8c68      	ldrh	r0, [r5, #34]	; 0x22
   21daa:	2107      	movs	r1, #7
   21dac:	f7f0 f910 	bl	11fd0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
   21db0:	2800      	cmp	r0, #0
   21db2:	bf08      	it	eq
   21db4:	bd70      	popeq	{r4, r5, r6, pc}
   21db6:	211e      	movs	r1, #30
   21db8:	201a      	movs	r0, #26
   21dba:	f7ef fde1 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

00021dbe <sym_DTWCF5KCRWOLS35FS4SDTLGYCHZTH2WSSG3HOYQ>:
   21dbe:	4770      	bx	lr

00021dc0 <sym_YLWMRLNANVVW4ZQEHNNCF7HKVQD7RQVYQHK7H3Y>:
   21dc0:	b510      	push	{r4, lr}
   21dc2:	4604      	mov	r4, r0
   21dc4:	6848      	ldr	r0, [r1, #4]
   21dc6:	b082      	sub	sp, #8
   21dc8:	2107      	movs	r1, #7
   21dca:	f8b0 0144 	ldrh.w	r0, [r0, #324]	; 0x144
   21dce:	f7fd fed8 	bl	1fb82 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   21dd2:	b1b0      	cbz	r0, 21e02 <sym_YLWMRLNANVVW4ZQEHNNCF7HKVQD7RQVYQHK7H3Y+0x42>
   21dd4:	6f00      	ldr	r0, [r0, #112]	; 0x70
   21dd6:	b1c8      	cbz	r0, 21e0c <sym_YLWMRLNANVVW4ZQEHNNCF7HKVQD7RQVYQHK7H3Y+0x4c>
   21dd8:	6901      	ldr	r1, [r0, #16]
   21dda:	9a00      	ldr	r2, [sp, #0]
   21ddc:	f361 0217 	bfi	r2, r1, #0, #24
   21de0:	9200      	str	r2, [sp, #0]
   21de2:	68c1      	ldr	r1, [r0, #12]
   21de4:	f8dd 2002 	ldr.w	r2, [sp, #2]
   21de8:	f361 221f 	bfi	r2, r1, #8, #24
   21dec:	f8cd 2002 	str.w	r2, [sp, #2]
   21df0:	8cc0      	ldrh	r0, [r0, #38]	; 0x26
   21df2:	f8ad 0006 	strh.w	r0, [sp, #6]
   21df6:	4669      	mov	r1, sp
   21df8:	4620      	mov	r0, r4
   21dfa:	f7fe fca1 	bl	20740 <sym_HNZ6YNBDEHFBFGO4FGYZWJ2ZIELRZCSFTGHBNAA>
   21dfe:	b002      	add	sp, #8
   21e00:	bd10      	pop	{r4, pc}
   21e02:	f44f 71db 	mov.w	r1, #438	; 0x1b6
   21e06:	2013      	movs	r0, #19
   21e08:	f7ef fdba 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   21e0c:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
   21e10:	2013      	movs	r0, #19
   21e12:	f7ef fdb5 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

00021e16 <sym_UEPRO7A35Z75LB2PPJ4VSGI4I7C3AOKO4ZR5U5A>:
   21e16:	b508      	push	{r3, lr}
   21e18:	6849      	ldr	r1, [r1, #4]
   21e1a:	f891 218e 	ldrb.w	r2, [r1, #398]	; 0x18e
   21e1e:	f88d 2000 	strb.w	r2, [sp]
   21e22:	f891 218d 	ldrb.w	r2, [r1, #397]	; 0x18d
   21e26:	f88d 2001 	strb.w	r2, [sp, #1]
   21e2a:	f891 118f 	ldrb.w	r1, [r1, #399]	; 0x18f
   21e2e:	f88d 1002 	strb.w	r1, [sp, #2]
   21e32:	4669      	mov	r1, sp
   21e34:	f7fe fc9d 	bl	20772 <sym_KNRZBIFY2P43T7N5353YRUKMVJ4HQK3VLP7QLXI>
   21e38:	bd08      	pop	{r3, pc}

00021e3a <sym_AZ6XAECCLUET3DKKERIWSDCXWVDVHFLFKGSXVGQ>:
   21e3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21e3e:	f8d2 c004 	ldr.w	ip, [r2, #4]
   21e42:	2201      	movs	r2, #1
   21e44:	2502      	movs	r5, #2
   21e46:	2603      	movs	r6, #3
   21e48:	2400      	movs	r4, #0
   21e4a:	f50c 73a4 	add.w	r3, ip, #328	; 0x148
   21e4e:	f10c 07a0 	add.w	r7, ip, #160	; 0xa0
   21e52:	2823      	cmp	r0, #35	; 0x23
   21e54:	d009      	beq.n	21e6a <sym_AZ6XAECCLUET3DKKERIWSDCXWVDVHFLFKGSXVGQ+0x30>
   21e56:	2824      	cmp	r0, #36	; 0x24
   21e58:	d028      	beq.n	21eac <sym_AZ6XAECCLUET3DKKERIWSDCXWVDVHFLFKGSXVGQ+0x72>
   21e5a:	2825      	cmp	r0, #37	; 0x25
   21e5c:	d053      	beq.n	21f06 <sym_AZ6XAECCLUET3DKKERIWSDCXWVDVHFLFKGSXVGQ+0xcc>
   21e5e:	f44f 718a 	mov.w	r1, #276	; 0x114
   21e62:	f04f 0078 	mov.w	r0, #120	; 0x78
   21e66:	f7ef fd8b 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   21e6a:	f893 0041 	ldrb.w	r0, [r3, #65]	; 0x41
   21e6e:	f010 0f01 	tst.w	r0, #1
   21e72:	bf0a      	itet	eq
   21e74:	4604      	moveq	r4, r0
   21e76:	4622      	movne	r2, r4
   21e78:	f014 0f02 	tsteq.w	r4, #2
   21e7c:	d00b      	beq.n	21e96 <sym_AZ6XAECCLUET3DKKERIWSDCXWVDVHFLFKGSXVGQ+0x5c>
   21e7e:	7108      	strb	r0, [r1, #4]
   21e80:	f893 0042 	ldrb.w	r0, [r3, #66]	; 0x42
   21e84:	7148      	strb	r0, [r1, #5]
   21e86:	eb02 0042 	add.w	r0, r2, r2, lsl #1
   21e8a:	4460      	add	r0, ip
   21e8c:	f890 0083 	ldrb.w	r0, [r0, #131]	; 0x83
   21e90:	7188      	strb	r0, [r1, #6]
   21e92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   21e96:	f010 0f04 	tst.w	r0, #4
   21e9a:	bf18      	it	ne
   21e9c:	462a      	movne	r2, r5
   21e9e:	d1ee      	bne.n	21e7e <sym_AZ6XAECCLUET3DKKERIWSDCXWVDVHFLFKGSXVGQ+0x44>
   21ea0:	f010 0f08 	tst.w	r0, #8
   21ea4:	bf18      	it	ne
   21ea6:	4632      	movne	r2, r6
   21ea8:	d1e9      	bne.n	21e7e <sym_AZ6XAECCLUET3DKKERIWSDCXWVDVHFLFKGSXVGQ+0x44>
   21eaa:	e04e      	b.n	21f4a <sym_AZ6XAECCLUET3DKKERIWSDCXWVDVHFLFKGSXVGQ+0x110>
   21eac:	f893 003d 	ldrb.w	r0, [r3, #61]	; 0x3d
   21eb0:	f010 0f01 	tst.w	r0, #1
   21eb4:	bf14      	ite	ne
   21eb6:	4622      	movne	r2, r4
   21eb8:	f010 0f02 	tsteq.w	r0, #2
   21ebc:	d018      	beq.n	21ef0 <sym_AZ6XAECCLUET3DKKERIWSDCXWVDVHFLFKGSXVGQ+0xb6>
   21ebe:	eb02 0042 	add.w	r0, r2, r2, lsl #1
   21ec2:	7d7a      	ldrb	r2, [r7, #21]
   21ec4:	4460      	add	r0, ip
   21ec6:	f100 0082 	add.w	r0, r0, #130	; 0x82
   21eca:	2a2a      	cmp	r2, #42	; 0x2a
   21ecc:	bf0c      	ite	eq
   21ece:	22ff      	moveq	r2, #255	; 0xff
   21ed0:	7882      	ldrbne	r2, [r0, #2]
   21ed2:	f890 c000 	ldrb.w	ip, [r0]
   21ed6:	f881 c004 	strb.w	ip, [r1, #4]
   21eda:	f893 c03e 	ldrb.w	ip, [r3, #62]	; 0x3e
   21ede:	f881 c005 	strb.w	ip, [r1, #5]
   21ee2:	7840      	ldrb	r0, [r0, #1]
   21ee4:	7188      	strb	r0, [r1, #6]
   21ee6:	71ca      	strb	r2, [r1, #7]
   21ee8:	f883 403c 	strb.w	r4, [r3, #60]	; 0x3c
   21eec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   21ef0:	f010 0f04 	tst.w	r0, #4
   21ef4:	bf18      	it	ne
   21ef6:	462a      	movne	r2, r5
   21ef8:	d1e1      	bne.n	21ebe <sym_AZ6XAECCLUET3DKKERIWSDCXWVDVHFLFKGSXVGQ+0x84>
   21efa:	f010 0f08 	tst.w	r0, #8
   21efe:	bf18      	it	ne
   21f00:	4632      	movne	r2, r6
   21f02:	d1dc      	bne.n	21ebe <sym_AZ6XAECCLUET3DKKERIWSDCXWVDVHFLFKGSXVGQ+0x84>
   21f04:	e021      	b.n	21f4a <sym_AZ6XAECCLUET3DKKERIWSDCXWVDVHFLFKGSXVGQ+0x110>
   21f06:	f893 003d 	ldrb.w	r0, [r3, #61]	; 0x3d
   21f0a:	f010 0f01 	tst.w	r0, #1
   21f0e:	bf0a      	itet	eq
   21f10:	4604      	moveq	r4, r0
   21f12:	4622      	movne	r2, r4
   21f14:	f014 0f02 	tsteq.w	r4, #2
   21f18:	d00d      	beq.n	21f36 <sym_AZ6XAECCLUET3DKKERIWSDCXWVDVHFLFKGSXVGQ+0xfc>
   21f1a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   21f1e:	4462      	add	r2, ip
   21f20:	7108      	strb	r0, [r1, #4]
   21f22:	f812 0f82 	ldrb.w	r0, [r2, #130]!
   21f26:	7148      	strb	r0, [r1, #5]
   21f28:	f893 003e 	ldrb.w	r0, [r3, #62]	; 0x3e
   21f2c:	7188      	strb	r0, [r1, #6]
   21f2e:	7850      	ldrb	r0, [r2, #1]
   21f30:	71c8      	strb	r0, [r1, #7]
   21f32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   21f36:	f010 0f04 	tst.w	r0, #4
   21f3a:	bf18      	it	ne
   21f3c:	462a      	movne	r2, r5
   21f3e:	d1ec      	bne.n	21f1a <sym_AZ6XAECCLUET3DKKERIWSDCXWVDVHFLFKGSXVGQ+0xe0>
   21f40:	f010 0f08 	tst.w	r0, #8
   21f44:	bf18      	it	ne
   21f46:	4632      	movne	r2, r6
   21f48:	d1e7      	bne.n	21f1a <sym_AZ6XAECCLUET3DKKERIWSDCXWVDVHFLFKGSXVGQ+0xe0>
   21f4a:	2149      	movs	r1, #73	; 0x49
   21f4c:	2078      	movs	r0, #120	; 0x78
   21f4e:	f7ef fd17 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

00021f52 <sym_5FDRWQI6XUFWVRIX2PMRPNDHWCIMAZ67SSGSRVI>:
   21f52:	b570      	push	{r4, r5, r6, lr}
   21f54:	6844      	ldr	r4, [r0, #4]
   21f56:	221b      	movs	r2, #27
   21f58:	f504 75a4 	add.w	r5, r4, #328	; 0x148
   21f5c:	2100      	movs	r1, #0
   21f5e:	f104 0082 	add.w	r0, r4, #130	; 0x82
   21f62:	f7fc fcf6 	bl	1e952 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
   21f66:	2000      	movs	r0, #0
   21f68:	63e8      	str	r0, [r5, #60]	; 0x3c
   21f6a:	6428      	str	r0, [r5, #64]	; 0x40
   21f6c:	207f      	movs	r0, #127	; 0x7f
   21f6e:	f884 008f 	strb.w	r0, [r4, #143]	; 0x8f
   21f72:	f884 0092 	strb.w	r0, [r4, #146]	; 0x92
   21f76:	f884 0095 	strb.w	r0, [r4, #149]	; 0x95
   21f7a:	f884 0098 	strb.w	r0, [r4, #152]	; 0x98
   21f7e:	f994 1072 	ldrsb.w	r1, [r4, #114]	; 0x72
   21f82:	4620      	mov	r0, r4
   21f84:	f000 f812 	bl	21fac <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY>
   21f88:	20ff      	movs	r0, #255	; 0xff
   21f8a:	f884 0084 	strb.w	r0, [r4, #132]	; 0x84
   21f8e:	f884 0090 	strb.w	r0, [r4, #144]	; 0x90
   21f92:	f884 0087 	strb.w	r0, [r4, #135]	; 0x87
   21f96:	f884 0093 	strb.w	r0, [r4, #147]	; 0x93
   21f9a:	f884 008a 	strb.w	r0, [r4, #138]	; 0x8a
   21f9e:	f884 0096 	strb.w	r0, [r4, #150]	; 0x96
   21fa2:	f884 008d 	strb.w	r0, [r4, #141]	; 0x8d
   21fa6:	f884 0099 	strb.w	r0, [r4, #153]	; 0x99
   21faa:	bd70      	pop	{r4, r5, r6, pc}

00021fac <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY>:
   21fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21fae:	460e      	mov	r6, r1
   21fb0:	4604      	mov	r4, r0
   21fb2:	207f      	movs	r0, #127	; 0x7f
   21fb4:	f640 1288 	movw	r2, #2440	; 0x988
   21fb8:	4669      	mov	r1, sp
   21fba:	f7ef fb29 	bl	11610 <mpsl_fem_tx_power_split>
   21fbe:	4607      	mov	r7, r0
   21fc0:	2500      	movs	r5, #0
   21fc2:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   21fc6:	f640 1288 	movw	r2, #2440	; 0x988
   21fca:	4669      	mov	r1, sp
   21fcc:	f7ef fb20 	bl	11610 <mpsl_fem_tx_power_split>
   21fd0:	4286      	cmp	r6, r0
   21fd2:	bf08      	it	eq
   21fd4:	2501      	moveq	r5, #1
   21fd6:	42be      	cmp	r6, r7
   21fd8:	bf08      	it	eq
   21fda:	f045 0502 	orreq.w	r5, r5, #2
   21fde:	f7f9 fef1 	bl	1bdc4 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
   21fe2:	ea4f 2c10 	mov.w	ip, r0, lsr #8
   21fe6:	2201      	movs	r2, #1
   21fe8:	ea4c 6301 	orr.w	r3, ip, r1, lsl #24
   21fec:	f013 0f01 	tst.w	r3, #1
   21ff0:	bf18      	it	ne
   21ff2:	2203      	movne	r2, #3
   21ff4:	0ac0      	lsrs	r0, r0, #11
   21ff6:	ea40 5041 	orr.w	r0, r0, r1, lsl #21
   21ffa:	f010 0f01 	tst.w	r0, #1
   21ffe:	bf18      	it	ne
   22000:	f042 020c 	orrne.w	r2, r2, #12
   22004:	f012 0f01 	tst.w	r2, #1
   22008:	bf1c      	itt	ne
   2200a:	f884 6083 	strbne.w	r6, [r4, #131]	; 0x83
   2200e:	f884 5082 	strbne.w	r5, [r4, #130]	; 0x82
   22012:	f012 0f02 	tst.w	r2, #2
   22016:	bf1c      	itt	ne
   22018:	f884 6086 	strbne.w	r6, [r4, #134]	; 0x86
   2201c:	f884 5085 	strbne.w	r5, [r4, #133]	; 0x85
   22020:	f012 0f04 	tst.w	r2, #4
   22024:	bf1c      	itt	ne
   22026:	f884 6089 	strbne.w	r6, [r4, #137]	; 0x89
   2202a:	f884 5088 	strbne.w	r5, [r4, #136]	; 0x88
   2202e:	f012 0f08 	tst.w	r2, #8
   22032:	bf1c      	itt	ne
   22034:	f884 608c 	strbne.w	r6, [r4, #140]	; 0x8c
   22038:	f884 508b 	strbne.w	r5, [r4, #139]	; 0x8b
   2203c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002203e <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY>:
   2203e:	b510      	push	{r4, lr}
   22040:	2901      	cmp	r1, #1
   22042:	bf08      	it	eq
   22044:	2100      	moveq	r1, #0
   22046:	d010      	beq.n	2206a <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x2c>
   22048:	2902      	cmp	r1, #2
   2204a:	bf08      	it	eq
   2204c:	2101      	moveq	r1, #1
   2204e:	d00c      	beq.n	2206a <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x2c>
   22050:	2904      	cmp	r1, #4
   22052:	bf08      	it	eq
   22054:	2103      	moveq	r1, #3
   22056:	d008      	beq.n	2206a <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x2c>
   22058:	2908      	cmp	r1, #8
   2205a:	bf08      	it	eq
   2205c:	2102      	moveq	r1, #2
   2205e:	d004      	beq.n	2206a <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x2c>
   22060:	f240 2176 	movw	r1, #630	; 0x276
   22064:	2078      	movs	r0, #120	; 0x78
   22066:	f7ef fc8b 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   2206a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   2206e:	4401      	add	r1, r0
   22070:	f891 1083 	ldrb.w	r1, [r1, #131]	; 0x83
   22074:	f880 1072 	strb.w	r1, [r0, #114]	; 0x72
   22078:	bd10      	pop	{r4, pc}
   2207a:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
   2207e:	f001 0107 	and.w	r1, r1, #7
   22082:	7800      	ldrb	r0, [r0, #0]
   22084:	40c8      	lsrs	r0, r1
   22086:	f000 0001 	and.w	r0, r0, #1
   2208a:	4770      	bx	lr
   2208c:	b118      	cbz	r0, 22096 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x58>
   2208e:	2802      	cmp	r0, #2
   22090:	d001      	beq.n	22096 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x58>
   22092:	2001      	movs	r0, #1
   22094:	4770      	bx	lr
   22096:	2000      	movs	r0, #0
   22098:	4770      	bx	lr

0002209a <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ>:
   2209a:	b53e      	push	{r1, r2, r3, r4, r5, lr}
   2209c:	4604      	mov	r4, r0
   2209e:	7880      	ldrb	r0, [r0, #2]
   220a0:	2500      	movs	r5, #0
   220a2:	281a      	cmp	r0, #26
   220a4:	d024      	beq.n	220f0 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x56>
   220a6:	dc0e      	bgt.n	220c6 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x2c>
   220a8:	2816      	cmp	r0, #22
   220aa:	d232      	bcs.n	22112 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x78>
   220ac:	e8df f000 	tbb	[pc, r0]
   220b0:	31313131 	.word	0x31313131
   220b4:	31312031 	.word	0x31312031
   220b8:	31313131 	.word	0x31313131
   220bc:	31313131 	.word	0x31313131
   220c0:	20313131 	.word	0x20313131
   220c4:	2020      	.short	0x2020
   220c6:	282a      	cmp	r0, #42	; 0x2a
   220c8:	d023      	beq.n	22112 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x78>
   220ca:	dc0b      	bgt.n	220e4 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x4a>
   220cc:	f1a0 001e 	sub.w	r0, r0, #30
   220d0:	280c      	cmp	r0, #12
   220d2:	d21e      	bcs.n	22112 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x78>
   220d4:	e8df f000 	tbb	[pc, r0]
   220d8:	1d1d1d1d 	.word	0x1d1d1d1d
   220dc:	1d1d1d1d 	.word	0x1d1d1d1d
   220e0:	0c1d1d1d 	.word	0x0c1d1d1d
   220e4:	383a      	subs	r0, #58	; 0x3a
   220e6:	2802      	cmp	r0, #2
   220e8:	d213      	bcs.n	22112 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x78>
   220ea:	e8df f000 	tbb	[pc, r0]
   220ee:	0112      	.short	0x0112
   220f0:	8820      	ldrh	r0, [r4, #0]
   220f2:	f5b0 6f70 	cmp.w	r0, #3840	; 0xf00
   220f6:	d20c      	bcs.n	22112 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x78>
   220f8:	4669      	mov	r1, sp
   220fa:	f7fd ff9d 	bl	20038 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   220fe:	b150      	cbz	r0, 22116 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x7c>
   22100:	8820      	ldrh	r0, [r4, #0]
   22102:	2108      	movs	r1, #8
   22104:	f7fd fd3d 	bl	1fb82 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   22108:	b1e8      	cbz	r0, 22146 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0xac>
   2210a:	4621      	mov	r1, r4
   2210c:	f000 ff63 	bl	22fd6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x31a>
   22110:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   22112:	2012      	movs	r0, #18
   22114:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   22116:	9801      	ldr	r0, [sp, #4]
   22118:	4669      	mov	r1, sp
   2211a:	f890 2148 	ldrb.w	r2, [r0, #328]	; 0x148
   2211e:	f88d 2008 	strb.w	r2, [sp, #8]
   22122:	9a02      	ldr	r2, [sp, #8]
   22124:	9202      	str	r2, [sp, #8]
   22126:	f89d 2008 	ldrb.w	r2, [sp, #8]
   2212a:	f500 70a4 	add.w	r0, r0, #328	; 0x148
   2212e:	b10a      	cbz	r2, 22134 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x9a>
   22130:	200c      	movs	r0, #12
   22132:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   22134:	78a2      	ldrb	r2, [r4, #2]
   22136:	7042      	strb	r2, [r0, #1]
   22138:	22ff      	movs	r2, #255	; 0xff
   2213a:	7002      	strb	r2, [r0, #0]
   2213c:	4608      	mov	r0, r1
   2213e:	f7fe fc6a 	bl	20a16 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>
   22142:	4628      	mov	r0, r5
   22144:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   22146:	2002      	movs	r0, #2
   22148:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0002214a <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>:
   2214a:	b510      	push	{r4, lr}
   2214c:	4604      	mov	r4, r0
   2214e:	f7f9 fd41 	bl	1bbd4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x26c>
   22152:	b108      	cbz	r0, 22158 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0xe>
   22154:	200c      	movs	r0, #12
   22156:	bd10      	pop	{r4, pc}
   22158:	7820      	ldrb	r0, [r4, #0]
   2215a:	b128      	cbz	r0, 22168 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1e>
   2215c:	2801      	cmp	r0, #1
   2215e:	d003      	beq.n	22168 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1e>
   22160:	28ff      	cmp	r0, #255	; 0xff
   22162:	d00b      	beq.n	2217c <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x32>
   22164:	2012      	movs	r0, #18
   22166:	bd10      	pop	{r4, pc}
   22168:	f7ff ff90 	bl	2208c <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x4e>
   2216c:	1c61      	adds	r1, r4, #1
   2216e:	f7f1 fcff 	bl	13b70 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ>
   22172:	b108      	cbz	r0, 22178 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x2e>
   22174:	2000      	movs	r0, #0
   22176:	bd10      	pop	{r4, pc}
   22178:	2007      	movs	r0, #7
   2217a:	bd10      	pop	{r4, pc}
   2217c:	2001      	movs	r0, #1
   2217e:	f7f1 fd33 	bl	13be8 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY>
   22182:	e7f7      	b.n	22174 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x2a>

00022184 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>:
   22184:	b510      	push	{r4, lr}
   22186:	f7f9 fd25 	bl	1bbd4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x26c>
   2218a:	b108      	cbz	r0, 22190 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI+0xc>
   2218c:	200c      	movs	r0, #12
   2218e:	bd10      	pop	{r4, pc}
   22190:	f7f1 fd30 	bl	13bf4 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY>
   22194:	2000      	movs	r0, #0
   22196:	bd10      	pop	{r4, pc}

00022198 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q>:
   22198:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2219c:	4606      	mov	r6, r0
   2219e:	f000 fd4e 	bl	22c3e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA>
   221a2:	2800      	cmp	r0, #0
   221a4:	d112      	bne.n	221cc <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x34>
   221a6:	8830      	ldrh	r0, [r6, #0]
   221a8:	2100      	movs	r1, #0
   221aa:	f7fd fcea 	bl	1fb82 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   221ae:	0004      	movs	r4, r0
   221b0:	d00e      	beq.n	221d0 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x38>
   221b2:	f000 ff56 	bl	23062 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3a6>
   221b6:	b158      	cbz	r0, 221d0 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x38>
   221b8:	f894 02d4 	ldrb.w	r0, [r4, #724]	; 0x2d4
   221bc:	f88d 0000 	strb.w	r0, [sp]
   221c0:	9800      	ldr	r0, [sp, #0]
   221c2:	9000      	str	r0, [sp, #0]
   221c4:	f89d 0000 	ldrb.w	r0, [sp]
   221c8:	b120      	cbz	r0, 221d4 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x3c>
   221ca:	203a      	movs	r0, #58	; 0x3a
   221cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   221d0:	2002      	movs	r0, #2
   221d2:	e7fb      	b.n	221cc <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x34>
   221d4:	f04f 0800 	mov.w	r8, #0
   221d8:	88b0      	ldrh	r0, [r6, #4]
   221da:	f7fd ff45 	bl	20068 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
   221de:	4605      	mov	r5, r0
   221e0:	4601      	mov	r1, r0
   221e2:	2005      	movs	r0, #5
   221e4:	f7fe f8da 	bl	2039c <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
   221e8:	4607      	mov	r7, r0
   221ea:	4629      	mov	r1, r5
   221ec:	2008      	movs	r0, #8
   221ee:	f7fe f8d5 	bl	2039c <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
   221f2:	42b8      	cmp	r0, r7
   221f4:	d301      	bcc.n	221fa <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x62>
   221f6:	42af      	cmp	r7, r5
   221f8:	d301      	bcc.n	221fe <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x66>
   221fa:	2012      	movs	r0, #18
   221fc:	e7e6      	b.n	221cc <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x34>
   221fe:	f641 504c 	movw	r0, #7500	; 0x1d4c
   22202:	4285      	cmp	r5, r0
   22204:	d209      	bcs.n	2221a <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x82>
   22206:	f894 006e 	ldrb.w	r0, [r4, #110]	; 0x6e
   2220a:	2802      	cmp	r0, #2
   2220c:	d103      	bne.n	22216 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x7e>
   2220e:	f894 006f 	ldrb.w	r0, [r4, #111]	; 0x6f
   22212:	2802      	cmp	r0, #2
   22214:	d001      	beq.n	2221a <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x82>
   22216:	200c      	movs	r0, #12
   22218:	e7d8      	b.n	221cc <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x34>
   2221a:	f8a4 72d8 	strh.w	r7, [r4, #728]	; 0x2d8
   2221e:	e9c4 85b7 	strd	r8, r5, [r4, #732]	; 0x2dc
   22222:	88f0      	ldrh	r0, [r6, #6]
   22224:	f8a4 02e4 	strh.w	r0, [r4, #740]	; 0x2e4
   22228:	8930      	ldrh	r0, [r6, #8]
   2222a:	f8a4 02e6 	strh.w	r0, [r4, #742]	; 0x2e6
   2222e:	f504 7435 	add.w	r4, r4, #724	; 0x2d4
   22232:	20ff      	movs	r0, #255	; 0xff
   22234:	7020      	strb	r0, [r4, #0]
   22236:	2000      	movs	r0, #0
   22238:	e7c8      	b.n	221cc <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x34>

0002223a <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>:
   2223a:	b510      	push	{r4, lr}
   2223c:	460b      	mov	r3, r1
   2223e:	2201      	movs	r2, #1
   22240:	f100 0110 	add.w	r1, r0, #16
   22244:	f7f1 fe18 	bl	13e78 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>
   22248:	2000      	movs	r0, #0
   2224a:	bd10      	pop	{r4, pc}

0002224c <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA>:
   2224c:	b510      	push	{r4, lr}
   2224e:	8800      	ldrh	r0, [r0, #0]
   22250:	2101      	movs	r1, #1
   22252:	f7fd fc96 	bl	1fb82 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   22256:	b118      	cbz	r0, 22260 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x14>
   22258:	f890 1328 	ldrb.w	r1, [r0, #808]	; 0x328
   2225c:	b111      	cbz	r1, 22264 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x18>
   2225e:	e007      	b.n	22270 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x24>
   22260:	2002      	movs	r0, #2
   22262:	bd10      	pop	{r4, pc}
   22264:	f890 10b6 	ldrb.w	r1, [r0, #182]	; 0xb6
   22268:	2917      	cmp	r1, #23
   2226a:	d003      	beq.n	22274 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x28>
   2226c:	2918      	cmp	r1, #24
   2226e:	d001      	beq.n	22274 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x28>
   22270:	200c      	movs	r0, #12
   22272:	bd10      	pop	{r4, pc}
   22274:	2102      	movs	r1, #2
   22276:	f880 1328 	strb.w	r1, [r0, #808]	; 0x328
   2227a:	2000      	movs	r0, #0
   2227c:	bd10      	pop	{r4, pc}

0002227e <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI>:
   2227e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22280:	4605      	mov	r5, r0
   22282:	8800      	ldrh	r0, [r0, #0]
   22284:	2101      	movs	r1, #1
   22286:	f7fd fc7c 	bl	1fb82 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   2228a:	0004      	movs	r4, r0
   2228c:	d003      	beq.n	22296 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x18>
   2228e:	f894 0328 	ldrb.w	r0, [r4, #808]	; 0x328
   22292:	b110      	cbz	r0, 2229a <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x1c>
   22294:	e011      	b.n	222ba <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x3c>
   22296:	2002      	movs	r0, #2
   22298:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2229a:	f894 00b6 	ldrb.w	r0, [r4, #182]	; 0xb6
   2229e:	2817      	cmp	r0, #23
   222a0:	d001      	beq.n	222a6 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x28>
   222a2:	2818      	cmp	r0, #24
   222a4:	d109      	bne.n	222ba <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x3c>
   222a6:	f894 035c 	ldrb.w	r0, [r4, #860]	; 0x35c
   222aa:	f88d 0000 	strb.w	r0, [sp]
   222ae:	9800      	ldr	r0, [sp, #0]
   222b0:	9000      	str	r0, [sp, #0]
   222b2:	f89d 0000 	ldrb.w	r0, [sp]
   222b6:	2601      	movs	r6, #1
   222b8:	b108      	cbz	r0, 222be <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x40>
   222ba:	200c      	movs	r0, #12
   222bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   222be:	2210      	movs	r2, #16
   222c0:	1ca9      	adds	r1, r5, #2
   222c2:	f204 3029 	addw	r0, r4, #809	; 0x329
   222c6:	f7fc faca 	bl	1e85e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   222ca:	f884 6328 	strb.w	r6, [r4, #808]	; 0x328
   222ce:	2000      	movs	r0, #0
   222d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000222d2 <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>:
   222d2:	b510      	push	{r4, lr}
   222d4:	2108      	movs	r1, #8
   222d6:	f7ef fc01 	bl	11adc <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
   222da:	2000      	movs	r0, #0
   222dc:	bd10      	pop	{r4, pc}

000222de <sym_IZN3QWH7I4A7OX5E6DK53W35W3UX25DTZ6CQ57Q>:
   222de:	b510      	push	{r4, lr}
   222e0:	4604      	mov	r4, r0
   222e2:	f7f9 fb25 	bl	1b930 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x260>
   222e6:	f7fe ff5e 	bl	211a6 <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>
   222ea:	7020      	strb	r0, [r4, #0]
   222ec:	2000      	movs	r0, #0
   222ee:	bd10      	pop	{r4, pc}

000222f0 <sym_HN6JPFYV5RALEY5SK42AILWQ3BESLOSWO6JLUAY>:
   222f0:	b510      	push	{r4, lr}
   222f2:	4604      	mov	r4, r0
   222f4:	2000      	movs	r0, #0
   222f6:	f7f9 fceb 	bl	1bcd0 <sym_4GYPMR5DNSPTTPCK56HLK457TQWWCRBKTZ6GK7Q>
   222fa:	f7f0 f8f5 	bl	124e8 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ>
   222fe:	8020      	strh	r0, [r4, #0]
   22300:	2000      	movs	r0, #0
   22302:	bd10      	pop	{r4, pc}

00022304 <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A>:
   22304:	21fb      	movs	r1, #251	; 0xfb
   22306:	8001      	strh	r1, [r0, #0]
   22308:	f44f 6229 	mov.w	r2, #2704	; 0xa90
   2230c:	8042      	strh	r2, [r0, #2]
   2230e:	8081      	strh	r1, [r0, #4]
   22310:	80c2      	strh	r2, [r0, #6]
   22312:	2000      	movs	r0, #0
   22314:	4770      	bx	lr

00022316 <sym_B56D6C76IM4AAFDQEOHND3OAZFOQIH7L5TPFHMY>:
   22316:	b510      	push	{r4, lr}
   22318:	4604      	mov	r4, r0
   2231a:	2000      	movs	r0, #0
   2231c:	f7f9 fcd8 	bl	1bcd0 <sym_4GYPMR5DNSPTTPCK56HLK457TQWWCRBKTZ6GK7Q>
   22320:	2002      	movs	r0, #2
   22322:	f7ef fd43 	bl	11dac <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
   22326:	7020      	strb	r0, [r4, #0]
   22328:	2000      	movs	r0, #0
   2232a:	bd10      	pop	{r4, pc}

0002232c <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI>:
   2232c:	b51c      	push	{r2, r3, r4, lr}
   2232e:	8800      	ldrh	r0, [r0, #0]
   22330:	4669      	mov	r1, sp
   22332:	f7fd fe81 	bl	20038 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   22336:	2800      	cmp	r0, #0
   22338:	d114      	bne.n	22364 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x38>
   2233a:	9c01      	ldr	r4, [sp, #4]
   2233c:	f89d 0000 	ldrb.w	r0, [sp]
   22340:	f504 74a4 	add.w	r4, r4, #328	; 0x148
   22344:	b918      	cbnz	r0, 2234e <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x22>
   22346:	9801      	ldr	r0, [sp, #4]
   22348:	f000 fe8b 	bl	23062 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3a6>
   2234c:	b158      	cbz	r0, 22366 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x3a>
   2234e:	f89d 0000 	ldrb.w	r0, [sp]
   22352:	2801      	cmp	r0, #1
   22354:	d103      	bne.n	2235e <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x32>
   22356:	9801      	ldr	r0, [sp, #4]
   22358:	f000 fe99 	bl	2308e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3d2>
   2235c:	b118      	cbz	r0, 22366 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x3a>
   2235e:	7ce0      	ldrb	r0, [r4, #19]
   22360:	b118      	cbz	r0, 2236a <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x3e>
   22362:	203a      	movs	r0, #58	; 0x3a
   22364:	bd1c      	pop	{r2, r3, r4, pc}
   22366:	2002      	movs	r0, #2
   22368:	bd1c      	pop	{r2, r3, r4, pc}
   2236a:	2001      	movs	r0, #1
   2236c:	74e0      	strb	r0, [r4, #19]
   2236e:	2000      	movs	r0, #0
   22370:	bd1c      	pop	{r2, r3, r4, pc}

00022372 <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>:
   22372:	b510      	push	{r4, lr}
   22374:	4604      	mov	r4, r0
   22376:	20d8      	movs	r0, #216	; 0xd8
   22378:	7020      	strb	r0, [r4, #0]
   2237a:	f000 fe29 	bl	22fd0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x314>
   2237e:	7060      	strb	r0, [r4, #1]
   22380:	2000      	movs	r0, #0
   22382:	bd10      	pop	{r4, pc}

00022384 <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>:
   22384:	2108      	movs	r1, #8
   22386:	7001      	strb	r1, [r0, #0]
   22388:	2000      	movs	r0, #0
   2238a:	4770      	bx	lr

0002238c <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>:
   2238c:	b510      	push	{r4, lr}
   2238e:	4604      	mov	r4, r0
   22390:	f7f9 fc20 	bl	1bbd4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x26c>
   22394:	b108      	cbz	r0, 2239a <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0xe>
   22396:	200c      	movs	r0, #12
   22398:	bd10      	pop	{r4, pc}
   2239a:	7820      	ldrb	r0, [r4, #0]
   2239c:	b120      	cbz	r0, 223a8 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x1c>
   2239e:	2801      	cmp	r0, #1
   223a0:	d002      	beq.n	223a8 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x1c>
   223a2:	28ff      	cmp	r0, #255	; 0xff
   223a4:	d108      	bne.n	223b8 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x2c>
   223a6:	e009      	b.n	223bc <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x30>
   223a8:	f7ff fe70 	bl	2208c <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x4e>
   223ac:	1c61      	adds	r1, r4, #1
   223ae:	f7fd fe20 	bl	1fff2 <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY>
   223b2:	b108      	cbz	r0, 223b8 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x2c>
   223b4:	2000      	movs	r0, #0
   223b6:	bd10      	pop	{r4, pc}
   223b8:	2012      	movs	r0, #18
   223ba:	bd10      	pop	{r4, pc}
   223bc:	2000      	movs	r0, #0
   223be:	f7f1 fc13 	bl	13be8 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY>
   223c2:	e7f7      	b.n	223b4 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x28>

000223c4 <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I>:
   223c4:	b51c      	push	{r2, r3, r4, lr}
   223c6:	4604      	mov	r4, r0
   223c8:	f7f9 fab2 	bl	1b930 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x260>
   223cc:	2000      	movs	r0, #0
   223ce:	f88d 0002 	strb.w	r0, [sp, #2]
   223d2:	2103      	movs	r1, #3
   223d4:	f88d 1001 	strb.w	r1, [sp, #1]
   223d8:	f814 1b01 	ldrb.w	r1, [r4], #1
   223dc:	f88d 1003 	strb.w	r1, [sp, #3]
   223e0:	f88d 0000 	strb.w	r0, [sp]
   223e4:	4668      	mov	r0, sp
   223e6:	9401      	str	r4, [sp, #4]
   223e8:	f000 fa14 	bl	22814 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY>
   223ec:	bd1c      	pop	{r2, r3, r4, pc}

000223ee <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ>:
   223ee:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   223f0:	4605      	mov	r5, r0
   223f2:	f7f9 fa9d 	bl	1b930 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x260>
   223f6:	4606      	mov	r6, r0
   223f8:	7828      	ldrb	r0, [r5, #0]
   223fa:	2400      	movs	r4, #0
   223fc:	b160      	cbz	r0, 22418 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x2a>
   223fe:	f88d 4000 	strb.w	r4, [sp]
   22402:	2001      	movs	r0, #1
   22404:	f10d 0101 	add.w	r1, sp, #1
   22408:	f7f0 faf4 	bl	129f4 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
   2240c:	b120      	cbz	r0, 22418 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x2a>
   2240e:	4668      	mov	r0, sp
   22410:	f000 f897 	bl	22542 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II>
   22414:	2800      	cmp	r0, #0
   22416:	d112      	bne.n	2243e <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x50>
   22418:	f88d 400c 	strb.w	r4, [sp, #12]
   2241c:	4630      	mov	r0, r6
   2241e:	f7fe feb6 	bl	2118e <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
   22422:	b118      	cbz	r0, 2242c <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x3e>
   22424:	2080      	movs	r0, #128	; 0x80
   22426:	f8ad 000d 	strh.w	r0, [sp, #13]
   2242a:	e001      	b.n	22430 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x42>
   2242c:	f8ad 400d 	strh.w	r4, [sp, #13]
   22430:	f88d 400f 	strb.w	r4, [sp, #15]
   22434:	7828      	ldrb	r0, [r5, #0]
   22436:	2801      	cmp	r0, #1
   22438:	d003      	beq.n	22442 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x54>
   2243a:	b138      	cbz	r0, 2244c <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x5e>
   2243c:	2012      	movs	r0, #18
   2243e:	b004      	add	sp, #16
   22440:	bd70      	pop	{r4, r5, r6, pc}
   22442:	a903      	add	r1, sp, #12
   22444:	4630      	mov	r0, r6
   22446:	f7f9 fa8f 	bl	1b968 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ>
   2244a:	e7f8      	b.n	2243e <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x50>
   2244c:	4630      	mov	r0, r6
   2244e:	f000 fe8e 	bl	2316e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x4b2>
   22452:	e7f4      	b.n	2243e <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x50>

00022454 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI>:
   22454:	b530      	push	{r4, r5, lr}
   22456:	b08b      	sub	sp, #44	; 0x2c
   22458:	4604      	mov	r4, r0
   2245a:	f7f9 fa69 	bl	1b930 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x260>
   2245e:	4602      	mov	r2, r0
   22460:	7920      	ldrb	r0, [r4, #4]
   22462:	2804      	cmp	r0, #4
   22464:	d803      	bhi.n	2246e <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x1a>
   22466:	8860      	ldrh	r0, [r4, #2]
   22468:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
   2246c:	d902      	bls.n	22474 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x20>
   2246e:	2012      	movs	r0, #18
   22470:	b00b      	add	sp, #44	; 0x2c
   22472:	bd30      	pop	{r4, r5, pc}
   22474:	2500      	movs	r5, #0
   22476:	f88d 5004 	strb.w	r5, [sp, #4]
   2247a:	7921      	ldrb	r1, [r4, #4]
   2247c:	9500      	str	r5, [sp, #0]
   2247e:	f89d 0000 	ldrb.w	r0, [sp]
   22482:	2905      	cmp	r1, #5
   22484:	f040 0010 	orr.w	r0, r0, #16
   22488:	f88d 0000 	strb.w	r0, [sp]
   2248c:	d254      	bcs.n	22538 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0xe4>
   2248e:	e8df f001 	tbb	[pc, r1]
   22492:	0803      	.short	0x0803
   22494:	000b1105 	.word	0x000b1105
   22498:	f040 0001 	orr.w	r0, r0, #1
   2249c:	f040 0002 	orr.w	r0, r0, #2
   224a0:	e006      	b.n	224b0 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x5c>
   224a2:	f040 0009 	orr.w	r0, r0, #9
   224a6:	e001      	b.n	224ac <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x58>
   224a8:	f040 0001 	orr.w	r0, r0, #1
   224ac:	f040 0004 	orr.w	r0, r0, #4
   224b0:	f88d 0000 	strb.w	r0, [sp]
   224b4:	f8bd 0000 	ldrh.w	r0, [sp]
   224b8:	9000      	str	r0, [sp, #0]
   224ba:	f8bd 0000 	ldrh.w	r0, [sp]
   224be:	f8ad 0005 	strh.w	r0, [sp, #5]
   224c2:	8821      	ldrh	r1, [r4, #0]
   224c4:	f8dd 0006 	ldr.w	r0, [sp, #6]
   224c8:	f361 201f 	bfi	r0, r1, #8, #24
   224cc:	f8cd 0006 	str.w	r0, [sp, #6]
   224d0:	8861      	ldrh	r1, [r4, #2]
   224d2:	f8dd 0009 	ldr.w	r0, [sp, #9]
   224d6:	f361 201f 	bfi	r0, r1, #8, #24
   224da:	f8cd 0009 	str.w	r0, [sp, #9]
   224de:	7b60      	ldrb	r0, [r4, #13]
   224e0:	f88d 000d 	strb.w	r0, [sp, #13]
   224e4:	7960      	ldrb	r0, [r4, #5]
   224e6:	f88d 000e 	strb.w	r0, [sp, #14]
   224ea:	79a0      	ldrb	r0, [r4, #6]
   224ec:	f88d 000f 	strb.w	r0, [sp, #15]
   224f0:	f8d4 0007 	ldr.w	r0, [r4, #7]
   224f4:	9004      	str	r0, [sp, #16]
   224f6:	f8b4 000b 	ldrh.w	r0, [r4, #11]
   224fa:	f8ad 0014 	strh.w	r0, [sp, #20]
   224fe:	7ba0      	ldrb	r0, [r4, #14]
   22500:	f88d 0016 	strb.w	r0, [sp, #22]
   22504:	207f      	movs	r0, #127	; 0x7f
   22506:	f88d 0017 	strb.w	r0, [sp, #23]
   2250a:	2001      	movs	r0, #1
   2250c:	f88d 0018 	strb.w	r0, [sp, #24]
   22510:	f88d 5019 	strb.w	r5, [sp, #25]
   22514:	f88d 001a 	strb.w	r0, [sp, #26]
   22518:	f88d 501b 	strb.w	r5, [sp, #27]
   2251c:	4610      	mov	r0, r2
   2251e:	f7fe fe59 	bl	211d4 <sym_2T6B57C7Z3NDT5ASKUJUGCCL3DBEO2AO4XX23BI>
   22522:	f88d 001c 	strb.w	r0, [sp, #28]
   22526:	f88d 501d 	strb.w	r5, [sp, #29]
   2252a:	f88d 501e 	strb.w	r5, [sp, #30]
   2252e:	a909      	add	r1, sp, #36	; 0x24
   22530:	a801      	add	r0, sp, #4
   22532:	f7f9 f80d 	bl	1b550 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI>
   22536:	e79b      	b.n	22470 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x1c>
   22538:	f241 11d5 	movw	r1, #4565	; 0x11d5
   2253c:	2039      	movs	r0, #57	; 0x39
   2253e:	f7ef fa1f 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

00022542 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II>:
   22542:	b570      	push	{r4, r5, r6, lr}
   22544:	4604      	mov	r4, r0
   22546:	7800      	ldrb	r0, [r0, #0]
   22548:	2102      	movs	r1, #2
   2254a:	f7fd fb1a 	bl	1fb82 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   2254e:	0005      	movs	r5, r0
   22550:	d007      	beq.n	22562 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x20>
   22552:	f7ff f883 	bl	2165c <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
   22556:	b160      	cbz	r0, 22572 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x30>
   22558:	4628      	mov	r0, r5
   2255a:	f7fe fe20 	bl	2119e <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
   2255e:	b110      	cbz	r0, 22566 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x24>
   22560:	e005      	b.n	2256e <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x2c>
   22562:	2042      	movs	r0, #66	; 0x42
   22564:	bd70      	pop	{r4, r5, r6, pc}
   22566:	4628      	mov	r0, r5
   22568:	f7fe fe07 	bl	2117a <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
   2256c:	b108      	cbz	r0, 22572 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x30>
   2256e:	200c      	movs	r0, #12
   22570:	bd70      	pop	{r4, r5, r6, pc}
   22572:	1c61      	adds	r1, r4, #1
   22574:	4628      	mov	r0, r5
   22576:	f7fe fe24 	bl	211c2 <sym_UDZCFPCYSG5E2MUJ3CH3H5GF4YJLF3Y6KNH3ZRQ>
   2257a:	2000      	movs	r0, #0
   2257c:	bd70      	pop	{r4, r5, r6, pc}

0002257e <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA>:
   2257e:	b50e      	push	{r1, r2, r3, lr}
   22580:	8882      	ldrh	r2, [r0, #4]
   22582:	f244 2390 	movw	r3, #17040	; 0x4290
   22586:	429a      	cmp	r2, r3
   22588:	d901      	bls.n	2258e <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x10>
   2258a:	2012      	movs	r0, #18
   2258c:	bd0e      	pop	{r1, r2, r3, pc}
   2258e:	f44f 6329 	mov.w	r3, #2704	; 0xa90
   22592:	429a      	cmp	r2, r3
   22594:	d300      	bcc.n	22598 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x1a>
   22596:	461a      	mov	r2, r3
   22598:	8803      	ldrh	r3, [r0, #0]
   2259a:	f8ad 3000 	strh.w	r3, [sp]
   2259e:	8843      	ldrh	r3, [r0, #2]
   225a0:	f8ad 3002 	strh.w	r3, [sp, #2]
   225a4:	f8ad 2004 	strh.w	r2, [sp, #4]
   225a8:	8843      	ldrh	r3, [r0, #2]
   225aa:	f8ad 3006 	strh.w	r3, [sp, #6]
   225ae:	f8ad 2008 	strh.w	r2, [sp, #8]
   225b2:	8800      	ldrh	r0, [r0, #0]
   225b4:	8008      	strh	r0, [r1, #0]
   225b6:	4668      	mov	r0, sp
   225b8:	f000 fe03 	bl	231c2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x506>
   225bc:	bd0e      	pop	{r1, r2, r3, pc}

000225be <sym_QUXPDBBA3LF6URTUQCXVFN4UTAQY2K4DGZD5OMY>:
   225be:	b510      	push	{r4, lr}
   225c0:	4604      	mov	r4, r0
   225c2:	f7f9 fb7f 	bl	1bcc4 <sym_ZT5CPONXDAFRAB5RWMA6LXPAT5TEFYV2YKU6P6A>
   225c6:	b110      	cbz	r0, 225ce <sym_QUXPDBBA3LF6URTUQCXVFN4UTAQY2K4DGZD5OMY+0x10>
   225c8:	f7f9 f9b2 	bl	1b930 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x260>
   225cc:	e004      	b.n	225d8 <sym_QUXPDBBA3LF6URTUQCXVFN4UTAQY2K4DGZD5OMY+0x1a>
   225ce:	7820      	ldrb	r0, [r4, #0]
   225d0:	2102      	movs	r1, #2
   225d2:	f7fd fad6 	bl	1fb82 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   225d6:	b140      	cbz	r0, 225ea <sym_QUXPDBBA3LF6URTUQCXVFN4UTAQY2K4DGZD5OMY+0x2c>
   225d8:	7861      	ldrb	r1, [r4, #1]
   225da:	f3c1 0240 	ubfx	r2, r1, #1, #1
   225de:	f001 0101 	and.w	r1, r1, #1
   225e2:	f7fe fde9 	bl	211b8 <sym_MQQDWQQHBS7ZPZWBMOTGVNNHVXRAEPOMLYRTE3A>
   225e6:	2000      	movs	r0, #0
   225e8:	bd10      	pop	{r4, pc}
   225ea:	2042      	movs	r0, #66	; 0x42
   225ec:	bd10      	pop	{r4, pc}

000225ee <sym_2DM5GQNBROHI7PDNQDIVTLWENS2Q5ZHESY5XK3A>:
   225ee:	b51c      	push	{r2, r3, r4, lr}
   225f0:	4604      	mov	r4, r0
   225f2:	2000      	movs	r0, #0
   225f4:	f7f9 fb6c 	bl	1bcd0 <sym_4GYPMR5DNSPTTPCK56HLK457TQWWCRBKTZ6GK7Q>
   225f8:	78e0      	ldrb	r0, [r4, #3]
   225fa:	28fb      	cmp	r0, #251	; 0xfb
   225fc:	d901      	bls.n	22602 <sym_2DM5GQNBROHI7PDNQDIVTLWENS2Q5ZHESY5XK3A+0x14>
   225fe:	2012      	movs	r0, #18
   22600:	bd1c      	pop	{r2, r3, r4, pc}
   22602:	f814 0b02 	ldrb.w	r0, [r4], #2
   22606:	f88d 0000 	strb.w	r0, [sp]
   2260a:	f814 0b02 	ldrb.w	r0, [r4], #2
   2260e:	f88d 0002 	strb.w	r0, [sp, #2]
   22612:	f814 0c03 	ldrb.w	r0, [r4, #-3]
   22616:	f88d 0001 	strb.w	r0, [sp, #1]
   2261a:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   2261e:	f88d 0003 	strb.w	r0, [sp, #3]
   22622:	4668      	mov	r0, sp
   22624:	9401      	str	r4, [sp, #4]
   22626:	f000 f8f5 	bl	22814 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY>
   2262a:	bd1c      	pop	{r2, r3, r4, pc}

0002262c <sym_L45ZDH7ERT2JU2EYJULISF6MIOPRO4R2CFYVZAY>:
   2262c:	b530      	push	{r4, r5, lr}
   2262e:	4604      	mov	r4, r0
   22630:	b087      	sub	sp, #28
   22632:	460d      	mov	r5, r1
   22634:	2000      	movs	r0, #0
   22636:	f7f9 fb4b 	bl	1bcd0 <sym_4GYPMR5DNSPTTPCK56HLK457TQWWCRBKTZ6GK7Q>
   2263a:	2219      	movs	r2, #25
   2263c:	4621      	mov	r1, r4
   2263e:	4668      	mov	r0, sp
   22640:	f7fc f90d 	bl	1e85e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   22644:	2000      	movs	r0, #0
   22646:	f88d 0019 	strb.w	r0, [sp, #25]
   2264a:	f88d 001a 	strb.w	r0, [sp, #26]
   2264e:	7d20      	ldrb	r0, [r4, #20]
   22650:	2802      	cmp	r0, #2
   22652:	d004      	beq.n	2265e <sym_L45ZDH7ERT2JU2EYJULISF6MIOPRO4R2CFYVZAY+0x32>
   22654:	7860      	ldrb	r0, [r4, #1]
   22656:	0701      	lsls	r1, r0, #28
   22658:	d504      	bpl.n	22664 <sym_L45ZDH7ERT2JU2EYJULISF6MIOPRO4R2CFYVZAY+0x38>
   2265a:	06c0      	lsls	r0, r0, #27
   2265c:	d402      	bmi.n	22664 <sym_L45ZDH7ERT2JU2EYJULISF6MIOPRO4R2CFYVZAY+0x38>
   2265e:	2012      	movs	r0, #18
   22660:	b007      	add	sp, #28
   22662:	bd30      	pop	{r4, r5, pc}
   22664:	4629      	mov	r1, r5
   22666:	4668      	mov	r0, sp
   22668:	f7f8 ff72 	bl	1b550 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI>
   2266c:	e7f8      	b.n	22660 <sym_L45ZDH7ERT2JU2EYJULISF6MIOPRO4R2CFYVZAY+0x34>

0002266e <sym_D3BVO22ZDNB5P42SIYACSGDFHQS4QFSVERKUH4Q>:
   2266e:	b51c      	push	{r2, r3, r4, lr}
   22670:	4604      	mov	r4, r0
   22672:	2000      	movs	r0, #0
   22674:	f7f9 fb2c 	bl	1bcd0 <sym_4GYPMR5DNSPTTPCK56HLK457TQWWCRBKTZ6GK7Q>
   22678:	78e0      	ldrb	r0, [r4, #3]
   2267a:	28fb      	cmp	r0, #251	; 0xfb
   2267c:	d901      	bls.n	22682 <sym_D3BVO22ZDNB5P42SIYACSGDFHQS4QFSVERKUH4Q+0x14>
   2267e:	2012      	movs	r0, #18
   22680:	bd1c      	pop	{r2, r3, r4, pc}
   22682:	f814 0b02 	ldrb.w	r0, [r4], #2
   22686:	f88d 0000 	strb.w	r0, [sp]
   2268a:	f814 0b02 	ldrb.w	r0, [r4], #2
   2268e:	f88d 0002 	strb.w	r0, [sp, #2]
   22692:	f814 0c03 	ldrb.w	r0, [r4, #-3]
   22696:	f88d 0001 	strb.w	r0, [sp, #1]
   2269a:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   2269e:	f88d 0003 	strb.w	r0, [sp, #3]
   226a2:	4668      	mov	r0, sp
   226a4:	9401      	str	r4, [sp, #4]
   226a6:	f000 f943 	bl	22930 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA>
   226aa:	bd1c      	pop	{r2, r3, r4, pc}

000226ac <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI>:
   226ac:	b53e      	push	{r1, r2, r3, r4, r5, lr}
   226ae:	4604      	mov	r4, r0
   226b0:	f10d 0007 	add.w	r0, sp, #7
   226b4:	9000      	str	r0, [sp, #0]
   226b6:	7922      	ldrb	r2, [r4, #4]
   226b8:	78e1      	ldrb	r1, [r4, #3]
   226ba:	78a0      	ldrb	r0, [r4, #2]
   226bc:	f10d 0306 	add.w	r3, sp, #6
   226c0:	f000 fe14 	bl	232ec <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x630>
   226c4:	2800      	cmp	r0, #0
   226c6:	d109      	bne.n	226dc <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI+0x30>
   226c8:	8820      	ldrh	r0, [r4, #0]
   226ca:	f8ad 0004 	strh.w	r0, [sp, #4]
   226ce:	f8b4 0005 	ldrh.w	r0, [r4, #5]
   226d2:	f8ad 0008 	strh.w	r0, [sp, #8]
   226d6:	a801      	add	r0, sp, #4
   226d8:	f000 f98c 	bl	229f4 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ>
   226dc:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

000226de <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>:
   226de:	b510      	push	{r4, lr}
   226e0:	4604      	mov	r4, r0
   226e2:	2001      	movs	r0, #1
   226e4:	f000 fb15 	bl	22d12 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x56>
   226e8:	b128      	cbz	r0, 226f6 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA+0x18>
   226ea:	4621      	mov	r1, r4
   226ec:	2001      	movs	r0, #1
   226ee:	f7f0 f999 	bl	12a24 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
   226f2:	2000      	movs	r0, #0
   226f4:	bd10      	pop	{r4, pc}
   226f6:	200c      	movs	r0, #12
   226f8:	bd10      	pop	{r4, pc}

000226fa <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI>:
   226fa:	b51c      	push	{r2, r3, r4, lr}
   226fc:	4604      	mov	r4, r0
   226fe:	f7f9 f917 	bl	1b930 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x260>
   22702:	2000      	movs	r0, #0
   22704:	f88d 0000 	strb.w	r0, [sp]
   22708:	f88d 0002 	strb.w	r0, [sp, #2]
   2270c:	2003      	movs	r0, #3
   2270e:	f88d 0001 	strb.w	r0, [sp, #1]
   22712:	f814 0b01 	ldrb.w	r0, [r4], #1
   22716:	f88d 0003 	strb.w	r0, [sp, #3]
   2271a:	4668      	mov	r0, sp
   2271c:	9401      	str	r4, [sp, #4]
   2271e:	f000 f907 	bl	22930 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA>
   22722:	bd1c      	pop	{r2, r3, r4, pc}

00022724 <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y>:
   22724:	b51c      	push	{r2, r3, r4, lr}
   22726:	8801      	ldrh	r1, [r0, #0]
   22728:	f8ad 1000 	strh.w	r1, [sp]
   2272c:	8841      	ldrh	r1, [r0, #2]
   2272e:	f8ad 1002 	strh.w	r1, [sp, #2]
   22732:	8801      	ldrh	r1, [r0, #0]
   22734:	f8ad 1004 	strh.w	r1, [sp, #4]
   22738:	8840      	ldrh	r0, [r0, #2]
   2273a:	f8ad 0006 	strh.w	r0, [sp, #6]
   2273e:	4668      	mov	r0, sp
   22740:	f7f9 fa6a 	bl	1bc18 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2b0>
   22744:	bd1c      	pop	{r2, r3, r4, pc}

00022746 <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>:
   22746:	b510      	push	{r4, lr}
   22748:	f7f0 f992 	bl	12a70 <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I>
   2274c:	2000      	movs	r0, #0
   2274e:	bd10      	pop	{r4, pc}

00022750 <sym_HZRUCXEK6VH2SKHLITFSCAH5JZW3VUS5CZD2RBY>:
   22750:	b510      	push	{r4, lr}
   22752:	460c      	mov	r4, r1
   22754:	2101      	movs	r1, #1
   22756:	f7fd fa14 	bl	1fb82 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   2275a:	b118      	cbz	r0, 22764 <sym_HZRUCXEK6VH2SKHLITFSCAH5JZW3VUS5CZD2RBY+0x14>
   2275c:	2c02      	cmp	r4, #2
   2275e:	d903      	bls.n	22768 <sym_HZRUCXEK6VH2SKHLITFSCAH5JZW3VUS5CZD2RBY+0x18>
   22760:	2012      	movs	r0, #18
   22762:	bd10      	pop	{r4, pc}
   22764:	2002      	movs	r0, #2
   22766:	bd10      	pop	{r4, pc}
   22768:	f014 0101 	ands.w	r1, r4, #1
   2276c:	f880 12a5 	strb.w	r1, [r0, #677]	; 0x2a5
   22770:	f3c4 0240 	ubfx	r2, r4, #1, #1
   22774:	f880 22a4 	strb.w	r2, [r0, #676]	; 0x2a4
   22778:	d004      	beq.n	22784 <sym_HZRUCXEK6VH2SKHLITFSCAH5JZW3VUS5CZD2RBY+0x34>
   2277a:	f890 12a2 	ldrb.w	r1, [r0, #674]	; 0x2a2
   2277e:	b109      	cbz	r1, 22784 <sym_HZRUCXEK6VH2SKHLITFSCAH5JZW3VUS5CZD2RBY+0x34>
   22780:	f7fe ff6f 	bl	21662 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y>
   22784:	2000      	movs	r0, #0
   22786:	bd10      	pop	{r4, pc}

00022788 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>:
   22788:	b51c      	push	{r2, r3, r4, lr}
   2278a:	460c      	mov	r4, r1
   2278c:	4669      	mov	r1, sp
   2278e:	f7fd fc53 	bl	20038 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   22792:	2800      	cmp	r0, #0
   22794:	d108      	bne.n	227a8 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA+0x20>
   22796:	f89d 0000 	ldrb.w	r0, [sp]
   2279a:	b130      	cbz	r0, 227aa <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA+0x22>
   2279c:	2100      	movs	r1, #0
   2279e:	4622      	mov	r2, r4
   227a0:	9801      	ldr	r0, [sp, #4]
   227a2:	f000 fbbb 	bl	22f1c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x260>
   227a6:	2000      	movs	r0, #0
   227a8:	bd1c      	pop	{r2, r3, r4, pc}
   227aa:	2101      	movs	r1, #1
   227ac:	e7f7      	b.n	2279e <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA+0x16>

000227ae <sym_UBZJS2DDJXFBNL4D7RG3NTLQLLLCEP5IJ3L4GHI>:
   227ae:	b510      	push	{r4, lr}
   227b0:	4604      	mov	r4, r0
   227b2:	7800      	ldrb	r0, [r0, #0]
   227b4:	28ff      	cmp	r0, #255	; 0xff
   227b6:	d009      	beq.n	227cc <sym_UBZJS2DDJXFBNL4D7RG3NTLQLLLCEP5IJ3L4GHI+0x1e>
   227b8:	2102      	movs	r1, #2
   227ba:	f7fd f9e2 	bl	1fb82 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   227be:	b118      	cbz	r0, 227c8 <sym_UBZJS2DDJXFBNL4D7RG3NTLQLLLCEP5IJ3L4GHI+0x1a>
   227c0:	f8b4 1001 	ldrh.w	r1, [r4, #1]
   227c4:	84c1      	strh	r1, [r0, #38]	; 0x26
   227c6:	e005      	b.n	227d4 <sym_UBZJS2DDJXFBNL4D7RG3NTLQLLLCEP5IJ3L4GHI+0x26>
   227c8:	2042      	movs	r0, #66	; 0x42
   227ca:	bd10      	pop	{r4, pc}
   227cc:	f8b4 0001 	ldrh.w	r0, [r4, #1]
   227d0:	f7f5 fb44 	bl	17e5c <sym_YZMCMF2VDK5EZ5GH5K4G77V4XY7KHBJNPGELPVQ>
   227d4:	2000      	movs	r0, #0
   227d6:	bd10      	pop	{r4, pc}

000227d8 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>:
   227d8:	b510      	push	{r4, lr}
   227da:	4604      	mov	r4, r0
   227dc:	2000      	movs	r0, #0
   227de:	f000 fa98 	bl	22d12 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x56>
   227e2:	b128      	cbz	r0, 227f0 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ+0x18>
   227e4:	4621      	mov	r1, r4
   227e6:	2000      	movs	r0, #0
   227e8:	f7f0 f91c 	bl	12a24 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
   227ec:	2000      	movs	r0, #0
   227ee:	bd10      	pop	{r4, pc}
   227f0:	200c      	movs	r0, #12
   227f2:	bd10      	pop	{r4, pc}

000227f4 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>:
   227f4:	b510      	push	{r4, lr}
   227f6:	4604      	mov	r4, r0
   227f8:	7800      	ldrb	r0, [r0, #0]
   227fa:	b100      	cbz	r0, 227fe <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ+0xa>
   227fc:	2001      	movs	r0, #1
   227fe:	f7f8 fcff 	bl	1b200 <sym_O5ZKMVYIIKH3EAJRECXZFOUFXDW4MCMBS67KZZI>
   22802:	7820      	ldrb	r0, [r4, #0]
   22804:	b100      	cbz	r0, 22808 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ+0x14>
   22806:	2001      	movs	r0, #1
   22808:	f7f5 fbc6 	bl	17f98 <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI>
   2280c:	2000      	movs	r0, #0
   2280e:	bd10      	pop	{r4, pc}

00022810 <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>:
   22810:	f000 bcd7 	b.w	231c2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x506>

00022814 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY>:
   22814:	e92d 47fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   22818:	4606      	mov	r6, r0
   2281a:	7847      	ldrb	r7, [r0, #1]
   2281c:	7800      	ldrb	r0, [r0, #0]
   2281e:	2102      	movs	r1, #2
   22820:	f7fd f9af 	bl	1fb82 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   22824:	0005      	movs	r5, r0
   22826:	d00b      	beq.n	22840 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x2c>
   22828:	f7f9 fa4c 	bl	1bcc4 <sym_ZT5CPONXDAFRAB5RWMA6LXPAT5TEFYV2YKU6P6A>
   2282c:	b158      	cbz	r0, 22846 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x32>
   2282e:	4628      	mov	r0, r5
   22830:	f7fe fb9b 	bl	20f6a <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY>
   22834:	4604      	mov	r4, r0
   22836:	78f0      	ldrb	r0, [r6, #3]
   22838:	42a0      	cmp	r0, r4
   2283a:	d805      	bhi.n	22848 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x34>
   2283c:	4604      	mov	r4, r0
   2283e:	e003      	b.n	22848 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x34>
   22840:	2042      	movs	r0, #66	; 0x42
   22842:	e8bd 87fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, pc}
   22846:	78f4      	ldrb	r4, [r6, #3]
   22848:	2f04      	cmp	r7, #4
   2284a:	d031      	beq.n	228b0 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x9c>
   2284c:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
   2284e:	f7fd faf7 	bl	1fe40 <sym_DPFAWTOI3GRLXCS5TV5FXLZJNKWMRLYTLT4DRFY>
   22852:	4420      	add	r0, r4
   22854:	fa1f f880 	uxth.w	r8, r0
   22858:	f7f9 fa34 	bl	1bcc4 <sym_ZT5CPONXDAFRAB5RWMA6LXPAT5TEFYV2YKU6P6A>
   2285c:	b9a0      	cbnz	r0, 22888 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x74>
   2285e:	78f0      	ldrb	r0, [r6, #3]
   22860:	f04f 0912 	mov.w	r9, #18
   22864:	b118      	cbz	r0, 2286e <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x5a>
   22866:	4628      	mov	r0, r5
   22868:	f7fe fc6d 	bl	21146 <sym_M7OTIJAFMGS6XNOB3KIKP2PSIWVW5IRGENKBGTA>
   2286c:	b140      	cbz	r0, 22880 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x6c>
   2286e:	4628      	mov	r0, r5
   22870:	f7fe fb7b 	bl	20f6a <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY>
   22874:	4540      	cmp	r0, r8
   22876:	d207      	bcs.n	22888 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x74>
   22878:	4628      	mov	r0, r5
   2287a:	f7fe fc8c 	bl	21196 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
   2287e:	b108      	cbz	r0, 22884 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x70>
   22880:	4648      	mov	r0, r9
   22882:	e7de      	b.n	22842 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x2e>
   22884:	2007      	movs	r0, #7
   22886:	e7dc      	b.n	22842 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x2e>
   22888:	f7f9 fa1c 	bl	1bcc4 <sym_ZT5CPONXDAFRAB5RWMA6LXPAT5TEFYV2YKU6P6A>
   2288c:	4602      	mov	r2, r0
   2288e:	4641      	mov	r1, r8
   22890:	4628      	mov	r0, r5
   22892:	f000 fa5d 	bl	22d50 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x94>
   22896:	2800      	cmp	r0, #0
   22898:	d1d3      	bne.n	22842 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x2e>
   2289a:	2f03      	cmp	r7, #3
   2289c:	d000      	beq.n	228a0 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x8c>
   2289e:	b1c4      	cbz	r4, 228d2 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xbe>
   228a0:	4628      	mov	r0, r5
   228a2:	f7fe fc78 	bl	21196 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
   228a6:	7871      	ldrb	r1, [r6, #1]
   228a8:	2903      	cmp	r1, #3
   228aa:	d00d      	beq.n	228c8 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xb4>
   228ac:	b988      	cbnz	r0, 228d2 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xbe>
   228ae:	e001      	b.n	228b4 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xa0>
   228b0:	b97c      	cbnz	r4, 228d2 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xbe>
   228b2:	e7f5      	b.n	228a0 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x8c>
   228b4:	2904      	cmp	r1, #4
   228b6:	d107      	bne.n	228c8 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xb4>
   228b8:	4628      	mov	r0, r5
   228ba:	f7fe fecf 	bl	2165c <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
   228be:	b140      	cbz	r0, 228d2 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xbe>
   228c0:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
   228c2:	f7fd fa8b 	bl	1fddc <sym_Z3P3D5U3YDA66QTFRMTODYQPS5XZL7N2E3M2DIY>
   228c6:	b120      	cbz	r0, 228d2 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xbe>
   228c8:	2f01      	cmp	r7, #1
   228ca:	d004      	beq.n	228d6 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xc2>
   228cc:	2f03      	cmp	r7, #3
   228ce:	d002      	beq.n	228d6 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xc2>
   228d0:	e00e      	b.n	228f0 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xdc>
   228d2:	2012      	movs	r0, #18
   228d4:	e7b5      	b.n	22842 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x2e>
   228d6:	4628      	mov	r0, r5
   228d8:	f7fe fc5d 	bl	21196 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
   228dc:	b108      	cbz	r0, 228e2 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xce>
   228de:	2200      	movs	r2, #0
   228e0:	e002      	b.n	228e8 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xd4>
   228e2:	2f01      	cmp	r7, #1
   228e4:	d014      	beq.n	22910 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xfc>
   228e6:	2201      	movs	r2, #1
   228e8:	4668      	mov	r0, sp
   228ea:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
   228ec:	f7fd fa0b 	bl	1fd06 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
   228f0:	2f04      	cmp	r7, #4
   228f2:	d018      	beq.n	22926 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x112>
   228f4:	6872      	ldr	r2, [r6, #4]
   228f6:	4623      	mov	r3, r4
   228f8:	2101      	movs	r1, #1
   228fa:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
   228fc:	f7fd fa3b 	bl	1fd76 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY>
   22900:	2800      	cmp	r0, #0
   22902:	d0bf      	beq.n	22884 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x70>
   22904:	7870      	ldrb	r0, [r6, #1]
   22906:	2802      	cmp	r0, #2
   22908:	d004      	beq.n	22914 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x100>
   2290a:	2803      	cmp	r0, #3
   2290c:	d002      	beq.n	22914 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x100>
   2290e:	e00d      	b.n	2292c <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x118>
   22910:	2202      	movs	r2, #2
   22912:	e7e9      	b.n	228e8 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xd4>
   22914:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
   22916:	f7fd fa93 	bl	1fe40 <sym_DPFAWTOI3GRLXCS5TV5FXLZJNKWMRLYTLT4DRFY>
   2291a:	4602      	mov	r2, r0
   2291c:	2101      	movs	r1, #1
   2291e:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
   22920:	f7fd fa6a 	bl	1fdf8 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
   22924:	e002      	b.n	2292c <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x118>
   22926:	4628      	mov	r0, r5
   22928:	f7fe fb36 	bl	20f98 <sym_UJWNE3E4RDATXEP7ML237UGTIH42KUYZYFD6XAQ>
   2292c:	2000      	movs	r0, #0
   2292e:	e788      	b.n	22842 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x2e>

00022930 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA>:
   22930:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
   22934:	4606      	mov	r6, r0
   22936:	7845      	ldrb	r5, [r0, #1]
   22938:	78c7      	ldrb	r7, [r0, #3]
   2293a:	7800      	ldrb	r0, [r0, #0]
   2293c:	2102      	movs	r1, #2
   2293e:	f7fd f920 	bl	1fb82 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   22942:	0004      	movs	r4, r0
   22944:	d007      	beq.n	22956 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x26>
   22946:	f7f9 f9bd 	bl	1bcc4 <sym_ZT5CPONXDAFRAB5RWMA6LXPAT5TEFYV2YKU6P6A>
   2294a:	b140      	cbz	r0, 2295e <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x2e>
   2294c:	4620      	mov	r0, r4
   2294e:	f7fe fc26 	bl	2119e <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
   22952:	b118      	cbz	r0, 2295c <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x2c>
   22954:	e003      	b.n	2295e <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x2e>
   22956:	2042      	movs	r0, #66	; 0x42
   22958:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
   2295c:	2700      	movs	r7, #0
   2295e:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
   22960:	f7fd fa72 	bl	1fe48 <sym_27RZBWKBTESKUPVNN3E7RHYQU6UH4RT372SK2WA>
   22964:	4438      	add	r0, r7
   22966:	fa1f f880 	uxth.w	r8, r0
   2296a:	f7f9 f9ab 	bl	1bcc4 <sym_ZT5CPONXDAFRAB5RWMA6LXPAT5TEFYV2YKU6P6A>
   2296e:	b928      	cbnz	r0, 2297c <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x4c>
   22970:	78f0      	ldrb	r0, [r6, #3]
   22972:	b118      	cbz	r0, 2297c <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x4c>
   22974:	4620      	mov	r0, r4
   22976:	f7fe fc12 	bl	2119e <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
   2297a:	b198      	cbz	r0, 229a4 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x74>
   2297c:	f7f9 f9a2 	bl	1bcc4 <sym_ZT5CPONXDAFRAB5RWMA6LXPAT5TEFYV2YKU6P6A>
   22980:	4602      	mov	r2, r0
   22982:	4641      	mov	r1, r8
   22984:	4620      	mov	r0, r4
   22986:	f000 f9e3 	bl	22d50 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x94>
   2298a:	2800      	cmp	r0, #0
   2298c:	d1e4      	bne.n	22958 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x28>
   2298e:	2d04      	cmp	r5, #4
   22990:	d008      	beq.n	229a4 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x74>
   22992:	2d03      	cmp	r5, #3
   22994:	d00a      	beq.n	229ac <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x7c>
   22996:	b12f      	cbz	r7, 229a4 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x74>
   22998:	4620      	mov	r0, r4
   2299a:	f7fe fe5f 	bl	2165c <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
   2299e:	b118      	cbz	r0, 229a8 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x78>
   229a0:	200c      	movs	r0, #12
   229a2:	e7d9      	b.n	22958 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x28>
   229a4:	2012      	movs	r0, #18
   229a6:	e7d7      	b.n	22958 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x28>
   229a8:	2d01      	cmp	r5, #1
   229aa:	d10c      	bne.n	229c6 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x96>
   229ac:	4620      	mov	r0, r4
   229ae:	f7fe fbf2 	bl	21196 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
   229b2:	b108      	cbz	r0, 229b8 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x88>
   229b4:	2204      	movs	r2, #4
   229b6:	e002      	b.n	229be <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x8e>
   229b8:	2d01      	cmp	r5, #1
   229ba:	d010      	beq.n	229de <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0xae>
   229bc:	2205      	movs	r2, #5
   229be:	4668      	mov	r0, sp
   229c0:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   229c2:	f7fd f9a0 	bl	1fd06 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
   229c6:	6872      	ldr	r2, [r6, #4]
   229c8:	463b      	mov	r3, r7
   229ca:	2100      	movs	r1, #0
   229cc:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
   229ce:	f7fd f9d2 	bl	1fd76 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY>
   229d2:	b130      	cbz	r0, 229e2 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0xb2>
   229d4:	2d02      	cmp	r5, #2
   229d6:	d006      	beq.n	229e6 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0xb6>
   229d8:	2d03      	cmp	r5, #3
   229da:	d004      	beq.n	229e6 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0xb6>
   229dc:	e008      	b.n	229f0 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0xc0>
   229de:	2206      	movs	r2, #6
   229e0:	e7ed      	b.n	229be <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x8e>
   229e2:	2007      	movs	r0, #7
   229e4:	e7b8      	b.n	22958 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x28>
   229e6:	4642      	mov	r2, r8
   229e8:	2100      	movs	r1, #0
   229ea:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
   229ec:	f7fd fa04 	bl	1fdf8 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
   229f0:	2000      	movs	r0, #0
   229f2:	e7b1      	b.n	22958 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x28>

000229f4 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ>:
   229f4:	b510      	push	{r4, lr}
   229f6:	4604      	mov	r4, r0
   229f8:	8880      	ldrh	r0, [r0, #4]
   229fa:	b128      	cbz	r0, 22a08 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
   229fc:	2801      	cmp	r0, #1
   229fe:	d003      	beq.n	22a08 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
   22a00:	2802      	cmp	r0, #2
   22a02:	d001      	beq.n	22a08 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
   22a04:	2012      	movs	r0, #18
   22a06:	bd10      	pop	{r4, pc}
   22a08:	78e0      	ldrb	r0, [r4, #3]
   22a0a:	f000 fa65 	bl	22ed8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x21c>
   22a0e:	b148      	cbz	r0, 22a24 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x30>
   22a10:	78a0      	ldrb	r0, [r4, #2]
   22a12:	f000 fa61 	bl	22ed8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x21c>
   22a16:	b128      	cbz	r0, 22a24 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x30>
   22a18:	4620      	mov	r0, r4
   22a1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   22a1e:	2101      	movs	r1, #1
   22a20:	f000 b895 	b.w	22b4e <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>
   22a24:	2011      	movs	r0, #17
   22a26:	bd10      	pop	{r4, pc}

00022a28 <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y>:
   22a28:	b57c      	push	{r2, r3, r4, r5, r6, lr}
   22a2a:	460c      	mov	r4, r1
   22a2c:	4605      	mov	r5, r0
   22a2e:	8800      	ldrh	r0, [r0, #0]
   22a30:	4669      	mov	r1, sp
   22a32:	f7fd fb01 	bl	20038 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   22a36:	2800      	cmp	r0, #0
   22a38:	d106      	bne.n	22a48 <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y+0x20>
   22a3a:	9801      	ldr	r0, [sp, #4]
   22a3c:	8829      	ldrh	r1, [r5, #0]
   22a3e:	8021      	strh	r1, [r4, #0]
   22a40:	f8b0 00e0 	ldrh.w	r0, [r0, #224]	; 0xe0
   22a44:	8060      	strh	r0, [r4, #2]
   22a46:	2000      	movs	r0, #0
   22a48:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

00022a4a <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>:
   22a4a:	b510      	push	{r4, lr}
   22a4c:	4604      	mov	r4, r0
   22a4e:	4601      	mov	r1, r0
   22a50:	2000      	movs	r0, #0
   22a52:	f7ef ffcf 	bl	129f4 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
   22a56:	b910      	cbnz	r0, 22a5e <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ+0x14>
   22a58:	2000      	movs	r0, #0
   22a5a:	6020      	str	r0, [r4, #0]
   22a5c:	80a0      	strh	r0, [r4, #4]
   22a5e:	2000      	movs	r0, #0
   22a60:	bd10      	pop	{r4, pc}

00022a62 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY>:
   22a62:	b50e      	push	{r1, r2, r3, lr}
   22a64:	8800      	ldrh	r0, [r0, #0]
   22a66:	4669      	mov	r1, sp
   22a68:	f7fd fae6 	bl	20038 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   22a6c:	b998      	cbnz	r0, 22a96 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x34>
   22a6e:	f89d 0000 	ldrb.w	r0, [sp]
   22a72:	2800      	cmp	r0, #0
   22a74:	9801      	ldr	r0, [sp, #4]
   22a76:	d00b      	beq.n	22a90 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x2e>
   22a78:	f000 fb09 	bl	2308e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3d2>
   22a7c:	b158      	cbz	r0, 22a96 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x34>
   22a7e:	9801      	ldr	r0, [sp, #4]
   22a80:	4601      	mov	r1, r0
   22a82:	f890 215a 	ldrb.w	r2, [r0, #346]	; 0x15a
   22a86:	30a0      	adds	r0, #160	; 0xa0
   22a88:	f501 71ad 	add.w	r1, r1, #346	; 0x15a
   22a8c:	b97a      	cbnz	r2, 22aae <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x4c>
   22a8e:	e004      	b.n	22a9a <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x38>
   22a90:	f000 fae7 	bl	23062 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3a6>
   22a94:	e7f2      	b.n	22a7c <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x1a>
   22a96:	2002      	movs	r0, #2
   22a98:	bd0e      	pop	{r1, r2, r3, pc}
   22a9a:	f890 2060 	ldrb.w	r2, [r0, #96]	; 0x60
   22a9e:	f88d 2008 	strb.w	r2, [sp, #8]
   22aa2:	9a02      	ldr	r2, [sp, #8]
   22aa4:	9202      	str	r2, [sp, #8]
   22aa6:	f89d 3008 	ldrb.w	r3, [sp, #8]
   22aaa:	2201      	movs	r2, #1
   22aac:	b10b      	cbz	r3, 22ab2 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x50>
   22aae:	203a      	movs	r0, #58	; 0x3a
   22ab0:	bd0e      	pop	{r1, r2, r3, pc}
   22ab2:	f890 3057 	ldrb.w	r3, [r0, #87]	; 0x57
   22ab6:	079b      	lsls	r3, r3, #30
   22ab8:	d006      	beq.n	22ac8 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x66>
   22aba:	2203      	movs	r2, #3
   22abc:	3058      	adds	r0, #88	; 0x58
   22abe:	9901      	ldr	r1, [sp, #4]
   22ac0:	f7f1 fd44 	bl	1454c <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
   22ac4:	2000      	movs	r0, #0
   22ac6:	bd0e      	pop	{r1, r2, r3, pc}
   22ac8:	700a      	strb	r2, [r1, #0]
   22aca:	4668      	mov	r0, sp
   22acc:	f7fd ffa3 	bl	20a16 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>
   22ad0:	e7f8      	b.n	22ac4 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x62>

00022ad2 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ>:
   22ad2:	b57c      	push	{r2, r3, r4, r5, r6, lr}
   22ad4:	460c      	mov	r4, r1
   22ad6:	4605      	mov	r5, r0
   22ad8:	8800      	ldrh	r0, [r0, #0]
   22ada:	4669      	mov	r1, sp
   22adc:	f7fd faac 	bl	20038 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   22ae0:	b108      	cbz	r0, 22ae6 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x14>
   22ae2:	2002      	movs	r0, #2
   22ae4:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   22ae6:	78a8      	ldrb	r0, [r5, #2]
   22ae8:	b130      	cbz	r0, 22af8 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x26>
   22aea:	f000 fa71 	bl	22fd0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x314>
   22aee:	70a0      	strb	r0, [r4, #2]
   22af0:	8828      	ldrh	r0, [r5, #0]
   22af2:	8020      	strh	r0, [r4, #0]
   22af4:	2000      	movs	r0, #0
   22af6:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   22af8:	9801      	ldr	r0, [sp, #4]
   22afa:	f890 0072 	ldrb.w	r0, [r0, #114]	; 0x72
   22afe:	e7f6      	b.n	22aee <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x1c>

00022b00 <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>:
   22b00:	b510      	push	{r4, lr}
   22b02:	f7f9 f8eb 	bl	1bcdc <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>
   22b06:	2000      	movs	r0, #0
   22b08:	bd10      	pop	{r4, pc}

00022b0a <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY>:
   22b0a:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
   22b0e:	4604      	mov	r4, r0
   22b10:	8840      	ldrh	r0, [r0, #2]
   22b12:	460d      	mov	r5, r1
   22b14:	b1b8      	cbz	r0, 22b46 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x3c>
   22b16:	8820      	ldrh	r0, [r4, #0]
   22b18:	4669      	mov	r1, sp
   22b1a:	f7fd fa8d 	bl	20038 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   22b1e:	2800      	cmp	r0, #0
   22b20:	d10f      	bne.n	22b42 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x38>
   22b22:	8820      	ldrh	r0, [r4, #0]
   22b24:	8028      	strh	r0, [r5, #0]
   22b26:	9e01      	ldr	r6, [sp, #4]
   22b28:	f106 0514 	add.w	r5, r6, #20
   22b2c:	36a0      	adds	r6, #160	; 0xa0
   22b2e:	682f      	ldr	r7, [r5, #0]
   22b30:	8862      	ldrh	r2, [r4, #2]
   22b32:	4639      	mov	r1, r7
   22b34:	4630      	mov	r0, r6
   22b36:	f7fd fc09 	bl	2034c <sym_3LQGLF52CJLOKQOJSNFVLTD3CW6GGPJMARVGQNQ>
   22b3a:	6828      	ldr	r0, [r5, #0]
   22b3c:	42b8      	cmp	r0, r7
   22b3e:	d1f6      	bne.n	22b2e <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x24>
   22b40:	2000      	movs	r0, #0
   22b42:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
   22b46:	2012      	movs	r0, #18
   22b48:	e7fb      	b.n	22b42 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x38>

00022b4a <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>:
   22b4a:	f000 b8a7 	b.w	22c9c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>

00022b4e <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>:
   22b4e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   22b52:	b08a      	sub	sp, #40	; 0x28
   22b54:	4689      	mov	r9, r1
   22b56:	4605      	mov	r5, r0
   22b58:	8800      	ldrh	r0, [r0, #0]
   22b5a:	a904      	add	r1, sp, #16
   22b5c:	f7fd fa6c 	bl	20038 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   22b60:	2800      	cmp	r0, #0
   22b62:	d147      	bne.n	22bf4 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xa6>
   22b64:	9805      	ldr	r0, [sp, #20]
   22b66:	4601      	mov	r1, r0
   22b68:	4688      	mov	r8, r1
   22b6a:	f890 11da 	ldrb.w	r1, [r0, #474]	; 0x1da
   22b6e:	f500 74a4 	add.w	r4, r0, #328	; 0x148
   22b72:	f88d 1018 	strb.w	r1, [sp, #24]
   22b76:	9906      	ldr	r1, [sp, #24]
   22b78:	9106      	str	r1, [sp, #24]
   22b7a:	f89d 1018 	ldrb.w	r1, [sp, #24]
   22b7e:	30a0      	adds	r0, #160	; 0xa0
   22b80:	b109      	cbz	r1, 22b86 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x38>
   22b82:	2701      	movs	r7, #1
   22b84:	e000      	b.n	22b88 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x3a>
   22b86:	2700      	movs	r7, #0
   22b88:	7d81      	ldrb	r1, [r0, #22]
   22b8a:	2924      	cmp	r1, #36	; 0x24
   22b8c:	d100      	bne.n	22b90 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x42>
   22b8e:	b13f      	cbz	r7, 22ba0 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x52>
   22b90:	2600      	movs	r6, #0
   22b92:	3066      	adds	r0, #102	; 0x66
   22b94:	2108      	movs	r1, #8
   22b96:	4682      	mov	sl, r0
   22b98:	f7ff fa6f 	bl	2207a <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x3c>
   22b9c:	b110      	cbz	r0, 22ba4 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x56>
   22b9e:	e007      	b.n	22bb0 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x62>
   22ba0:	2601      	movs	r6, #1
   22ba2:	e7f6      	b.n	22b92 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x44>
   22ba4:	210b      	movs	r1, #11
   22ba6:	4650      	mov	r0, sl
   22ba8:	f7ff fa67 	bl	2207a <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x3c>
   22bac:	b900      	cbnz	r0, 22bb0 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x62>
   22bae:	b306      	cbz	r6, 22bf2 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xa4>
   22bb0:	a802      	add	r0, sp, #8
   22bb2:	9000      	str	r0, [sp, #0]
   22bb4:	f89d 0010 	ldrb.w	r0, [sp, #16]
   22bb8:	ab01      	add	r3, sp, #4
   22bba:	462a      	mov	r2, r5
   22bbc:	4641      	mov	r1, r8
   22bbe:	f000 f9e7 	bl	22f90 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2d4>
   22bc2:	0006      	movs	r6, r0
   22bc4:	d116      	bne.n	22bf4 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xa6>
   22bc6:	f898 0073 	ldrb.w	r0, [r8, #115]	; 0x73
   22bca:	340c      	adds	r4, #12
   22bcc:	b168      	cbz	r0, 22bea <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x9c>
   22bce:	f89d 0004 	ldrb.w	r0, [sp, #4]
   22bd2:	f010 0102 	ands.w	r1, r0, #2
   22bd6:	f89d 0008 	ldrb.w	r0, [sp, #8]
   22bda:	f88d 1004 	strb.w	r1, [sp, #4]
   22bde:	f000 0002 	and.w	r0, r0, #2
   22be2:	f88d 0008 	strb.w	r0, [sp, #8]
   22be6:	d008      	beq.n	22bfa <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xac>
   22be8:	b138      	cbz	r0, 22bfa <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xac>
   22bea:	20ff      	movs	r0, #255	; 0xff
   22bec:	7060      	strb	r0, [r4, #1]
   22bee:	b947      	cbnz	r7, 22c02 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xb4>
   22bf0:	e005      	b.n	22bfe <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xb0>
   22bf2:	201a      	movs	r0, #26
   22bf4:	b00a      	add	sp, #40	; 0x28
   22bf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   22bfa:	2009      	movs	r0, #9
   22bfc:	e7fa      	b.n	22bf4 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xa6>
   22bfe:	7820      	ldrb	r0, [r4, #0]
   22c00:	b108      	cbz	r0, 22c06 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xb8>
   22c02:	263a      	movs	r6, #58	; 0x3a
   22c04:	e014      	b.n	22c30 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xe2>
   22c06:	f884 9000 	strb.w	r9, [r4]
   22c0a:	f89d 1004 	ldrb.w	r1, [sp, #4]
   22c0e:	70a1      	strb	r1, [r4, #2]
   22c10:	f89d 0008 	ldrb.w	r0, [sp, #8]
   22c14:	70e0      	strb	r0, [r4, #3]
   22c16:	88aa      	ldrh	r2, [r5, #4]
   22c18:	80a2      	strh	r2, [r4, #4]
   22c1a:	f88d 1018 	strb.w	r1, [sp, #24]
   22c1e:	f88d 0019 	strb.w	r0, [sp, #25]
   22c22:	88a8      	ldrh	r0, [r5, #4]
   22c24:	f8ad 001a 	strh.w	r0, [sp, #26]
   22c28:	a906      	add	r1, sp, #24
   22c2a:	4640      	mov	r0, r8
   22c2c:	f7fd fb13 	bl	20256 <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
   22c30:	2000      	movs	r0, #0
   22c32:	7060      	strb	r0, [r4, #1]
   22c34:	4630      	mov	r0, r6
   22c36:	e7dd      	b.n	22bf4 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xa6>

00022c38 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A>:
   22c38:	2008      	movs	r0, #8
   22c3a:	f7f9 b8b7 	b.w	1bdac <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>

00022c3e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA>:
   22c3e:	b510      	push	{r4, lr}
   22c40:	4604      	mov	r4, r0
   22c42:	2000      	movs	r0, #0
   22c44:	8822      	ldrh	r2, [r4, #0]
   22c46:	b086      	sub	sp, #24
   22c48:	f5a2 417f 	sub.w	r1, r2, #65280	; 0xff00
   22c4c:	39ff      	subs	r1, #255	; 0xff
   22c4e:	d008      	beq.n	22c62 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x24>
   22c50:	a903      	add	r1, sp, #12
   22c52:	4610      	mov	r0, r2
   22c54:	f7fd f9f0 	bl	20038 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   22c58:	b110      	cbz	r0, 22c60 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x22>
   22c5a:	2002      	movs	r0, #2
   22c5c:	b006      	add	sp, #24
   22c5e:	bd10      	pop	{r4, pc}
   22c60:	9804      	ldr	r0, [sp, #16]
   22c62:	8921      	ldrh	r1, [r4, #8]
   22c64:	89a3      	ldrh	r3, [r4, #12]
   22c66:	8962      	ldrh	r2, [r4, #10]
   22c68:	e88d 000e 	stmia.w	sp, {r1, r2, r3}
   22c6c:	88e3      	ldrh	r3, [r4, #6]
   22c6e:	88a2      	ldrh	r2, [r4, #4]
   22c70:	8861      	ldrh	r1, [r4, #2]
   22c72:	f7f8 fdbf 	bl	1b7f4 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x124>
   22c76:	b108      	cbz	r0, 22c7c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3e>
   22c78:	2000      	movs	r0, #0
   22c7a:	e7ef      	b.n	22c5c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1e>
   22c7c:	2030      	movs	r0, #48	; 0x30
   22c7e:	e7ed      	b.n	22c5c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1e>

00022c80 <sym_CY26ZDKPCAPZODXUI4S7AB6G3B2EI2A66B45STA>:
   22c80:	b510      	push	{r4, lr}
   22c82:	4604      	mov	r4, r0
   22c84:	7800      	ldrb	r0, [r0, #0]
   22c86:	2102      	movs	r1, #2
   22c88:	f7fc ff7b 	bl	1fb82 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   22c8c:	b120      	cbz	r0, 22c98 <sym_CY26ZDKPCAPZODXUI4S7AB6G3B2EI2A66B45STA+0x18>
   22c8e:	7821      	ldrb	r1, [r4, #0]
   22c90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   22c94:	f000 ba20 	b.w	230d8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x41c>
   22c98:	2042      	movs	r0, #66	; 0x42
   22c9a:	bd10      	pop	{r4, pc}

00022c9c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>:
   22c9c:	b510      	push	{r4, lr}
   22c9e:	f7fd f962 	bl	1ff66 <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>
   22ca2:	f7f0 feeb 	bl	13a7c <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>
   22ca6:	f7f9 f8a9 	bl	1bdfc <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA>
   22caa:	f7f1 ff87 	bl	14bbc <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ>
   22cae:	2001      	movs	r0, #1
   22cb0:	f7f9 f80e 	bl	1bcd0 <sym_4GYPMR5DNSPTTPCK56HLK457TQWWCRBKTZ6GK7Q>
   22cb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   22cb8:	f7f8 bde2 	b.w	1b880 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x1b0>

00022cbc <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA>:
   22cbc:	f7f6 b8ec 	b.w	18e98 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI>
   22cc0:	f44f 71a4 	mov.w	r1, #328	; 0x148
   22cc4:	4288      	cmp	r0, r1
   22cc6:	d303      	bcc.n	22cd0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x14>
   22cc8:	f44f 6129 	mov.w	r1, #2704	; 0xa90
   22ccc:	4288      	cmp	r0, r1
   22cce:	d300      	bcc.n	22cd2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x16>
   22cd0:	4608      	mov	r0, r1
   22cd2:	b280      	uxth	r0, r0
   22cd4:	4770      	bx	lr
   22cd6:	0741      	lsls	r1, r0, #29
   22cd8:	d501      	bpl.n	22cde <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x22>
   22cda:	2008      	movs	r0, #8
   22cdc:	4770      	bx	lr
   22cde:	07c1      	lsls	r1, r0, #31
   22ce0:	d001      	beq.n	22ce6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2a>
   22ce2:	2001      	movs	r0, #1
   22ce4:	4770      	bx	lr
   22ce6:	0780      	lsls	r0, r0, #30
   22ce8:	d501      	bpl.n	22cee <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x32>
   22cea:	2002      	movs	r0, #2
   22cec:	4770      	bx	lr
   22cee:	2000      	movs	r0, #0
   22cf0:	4770      	bx	lr
   22cf2:	b510      	push	{r4, lr}
   22cf4:	2801      	cmp	r0, #1
   22cf6:	d00b      	beq.n	22d10 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x54>
   22cf8:	2802      	cmp	r0, #2
   22cfa:	d009      	beq.n	22d10 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x54>
   22cfc:	2804      	cmp	r0, #4
   22cfe:	d006      	beq.n	22d0e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x52>
   22d00:	2808      	cmp	r0, #8
   22d02:	d004      	beq.n	22d0e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x52>
   22d04:	f44f 7134 	mov.w	r1, #720	; 0x2d0
   22d08:	2006      	movs	r0, #6
   22d0a:	f7ee fe39 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   22d0e:	2003      	movs	r0, #3
   22d10:	bd10      	pop	{r4, pc}
   22d12:	b510      	push	{r4, lr}
   22d14:	4604      	mov	r4, r0
   22d16:	f7f8 fce9 	bl	1b6ec <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x1c>
   22d1a:	b170      	cbz	r0, 22d3a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x7e>
   22d1c:	f7f8 ffd2 	bl	1bcc4 <sym_ZT5CPONXDAFRAB5RWMA6LXPAT5TEFYV2YKU6P6A>
   22d20:	b150      	cbz	r0, 22d38 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x7c>
   22d22:	f7f8 fe05 	bl	1b930 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x260>
   22d26:	4604      	mov	r4, r0
   22d28:	f7fe fa39 	bl	2119e <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
   22d2c:	b960      	cbnz	r0, 22d48 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x8c>
   22d2e:	4620      	mov	r0, r4
   22d30:	f7fe fa23 	bl	2117a <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
   22d34:	b108      	cbz	r0, 22d3a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x7e>
   22d36:	e007      	b.n	22d48 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x8c>
   22d38:	b134      	cbz	r4, 22d48 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x8c>
   22d3a:	f000 fa0d 	bl	23158 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x49c>
   22d3e:	b128      	cbz	r0, 22d4c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x90>
   22d40:	f7f8 fa3a 	bl	1b1b8 <sym_C6DXC74AFTZZCXMRWBEAHQAQL3FVDNYSC45JP5Q>
   22d44:	2801      	cmp	r0, #1
   22d46:	d001      	beq.n	22d4c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x90>
   22d48:	2000      	movs	r0, #0
   22d4a:	bd10      	pop	{r4, pc}
   22d4c:	2001      	movs	r0, #1
   22d4e:	bd10      	pop	{r4, pc}
   22d50:	b570      	push	{r4, r5, r6, lr}
   22d52:	460c      	mov	r4, r1
   22d54:	4605      	mov	r5, r0
   22d56:	b112      	cbz	r2, 22d5e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xa2>
   22d58:	291f      	cmp	r1, #31
   22d5a:	d80c      	bhi.n	22d76 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xba>
   22d5c:	e016      	b.n	22d8c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xd0>
   22d5e:	f7ef fbc3 	bl	124e8 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ>
   22d62:	42a0      	cmp	r0, r4
   22d64:	d201      	bcs.n	22d6a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xae>
   22d66:	2007      	movs	r0, #7
   22d68:	bd70      	pop	{r4, r5, r6, pc}
   22d6a:	4628      	mov	r0, r5
   22d6c:	f7fe fa13 	bl	21196 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
   22d70:	b118      	cbz	r0, 22d7a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xbe>
   22d72:	2c1f      	cmp	r4, #31
   22d74:	d901      	bls.n	22d7a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xbe>
   22d76:	2012      	movs	r0, #18
   22d78:	bd70      	pop	{r4, r5, r6, pc}
   22d7a:	4628      	mov	r0, r5
   22d7c:	f7fe fa16 	bl	211ac <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
   22d80:	b130      	cbz	r0, 22d90 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xd4>
   22d82:	4621      	mov	r1, r4
   22d84:	4628      	mov	r0, r5
   22d86:	f7fe f99b 	bl	210c0 <sym_GNUIHYMK3THJZQYGL7BBI74HDMHN6SBQQRVNSAY>
   22d8a:	b118      	cbz	r0, 22d94 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xd8>
   22d8c:	2000      	movs	r0, #0
   22d8e:	bd70      	pop	{r4, r5, r6, pc}
   22d90:	2042      	movs	r0, #66	; 0x42
   22d92:	bd70      	pop	{r4, r5, r6, pc}
   22d94:	2045      	movs	r0, #69	; 0x45
   22d96:	bd70      	pop	{r4, r5, r6, pc}
   22d98:	b510      	push	{r4, lr}
   22d9a:	4604      	mov	r4, r0
   22d9c:	7840      	ldrb	r0, [r0, #1]
   22d9e:	06c0      	lsls	r0, r0, #27
   22da0:	d413      	bmi.n	22dca <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x10e>
   22da2:	f7f9 f815 	bl	1bdd0 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   22da6:	0780      	lsls	r0, r0, #30
   22da8:	d405      	bmi.n	22db6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xfa>
   22daa:	7d20      	ldrb	r0, [r4, #20]
   22dac:	2802      	cmp	r0, #2
   22dae:	d029      	beq.n	22e04 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x148>
   22db0:	7da0      	ldrb	r0, [r4, #22]
   22db2:	2802      	cmp	r0, #2
   22db4:	d026      	beq.n	22e04 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x148>
   22db6:	f7f9 f80b 	bl	1bdd0 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   22dba:	0740      	lsls	r0, r0, #29
   22dbc:	d405      	bmi.n	22dca <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x10e>
   22dbe:	7d20      	ldrb	r0, [r4, #20]
   22dc0:	2803      	cmp	r0, #3
   22dc2:	d01f      	beq.n	22e04 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x148>
   22dc4:	7da0      	ldrb	r0, [r4, #22]
   22dc6:	2803      	cmp	r0, #3
   22dc8:	d01c      	beq.n	22e04 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x148>
   22dca:	7860      	ldrb	r0, [r4, #1]
   22dcc:	07c0      	lsls	r0, r0, #31
   22dce:	d002      	beq.n	22dd6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x11a>
   22dd0:	f7f8 ffbe 	bl	1bd50 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI>
   22dd4:	b1b0      	cbz	r0, 22e04 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x148>
   22dd6:	7860      	ldrb	r0, [r4, #1]
   22dd8:	06c1      	lsls	r1, r0, #27
   22dda:	d405      	bmi.n	22de8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x12c>
   22ddc:	0701      	lsls	r1, r0, #28
   22dde:	d503      	bpl.n	22de8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x12c>
   22de0:	7d20      	ldrb	r0, [r4, #20]
   22de2:	2802      	cmp	r0, #2
   22de4:	d10e      	bne.n	22e04 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x148>
   22de6:	e00f      	b.n	22e08 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x14c>
   22de8:	7d21      	ldrb	r1, [r4, #20]
   22dea:	2902      	cmp	r1, #2
   22dec:	d001      	beq.n	22df2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x136>
   22dee:	7ea1      	ldrb	r1, [r4, #26]
   22df0:	b941      	cbnz	r1, 22e04 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x148>
   22df2:	0700      	lsls	r0, r0, #28
   22df4:	d408      	bmi.n	22e08 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x14c>
   22df6:	f8d4 0005 	ldr.w	r0, [r4, #5]
   22dfa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   22dfe:	ebb1 2f10 	cmp.w	r1, r0, lsr #8
   22e02:	d201      	bcs.n	22e08 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x14c>
   22e04:	2011      	movs	r0, #17
   22e06:	bd10      	pop	{r4, pc}
   22e08:	2000      	movs	r0, #0
   22e0a:	bd10      	pop	{r4, pc}
   22e0c:	b538      	push	{r3, r4, r5, lr}
   22e0e:	4604      	mov	r4, r0
   22e10:	7800      	ldrb	r0, [r0, #0]
   22e12:	28ef      	cmp	r0, #239	; 0xef
   22e14:	d85c      	bhi.n	22ed0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x214>
   22e16:	f8b4 0001 	ldrh.w	r0, [r4, #1]
   22e1a:	f8ad 0000 	strh.w	r0, [sp]
   22e1e:	9800      	ldr	r0, [sp, #0]
   22e20:	f000 fa7b 	bl	2331a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x65e>
   22e24:	b3a0      	cbz	r0, 22e90 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1d4>
   22e26:	7860      	ldrb	r0, [r4, #1]
   22e28:	0701      	lsls	r1, r0, #28
   22e2a:	d40b      	bmi.n	22e44 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x188>
   22e2c:	f8d4 1002 	ldr.w	r1, [r4, #2]
   22e30:	f8d4 3005 	ldr.w	r3, [r4, #5]
   22e34:	0a0a      	lsrs	r2, r1, #8
   22e36:	ebb2 2f13 	cmp.w	r2, r3, lsr #8
   22e3a:	d849      	bhi.n	22ed0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x214>
   22e3c:	2220      	movs	r2, #32
   22e3e:	ebb2 2f11 	cmp.w	r2, r1, lsr #8
   22e42:	d845      	bhi.n	22ed0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x214>
   22e44:	7a61      	ldrb	r1, [r4, #9]
   22e46:	b319      	cbz	r1, 22e90 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1d4>
   22e48:	2907      	cmp	r1, #7
   22e4a:	d841      	bhi.n	22ed0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x214>
   22e4c:	7aa1      	ldrb	r1, [r4, #10]
   22e4e:	b129      	cbz	r1, 22e5c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1a0>
   22e50:	2901      	cmp	r1, #1
   22e52:	d003      	beq.n	22e5c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1a0>
   22e54:	2902      	cmp	r1, #2
   22e56:	d001      	beq.n	22e5c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1a0>
   22e58:	2903      	cmp	r1, #3
   22e5a:	d139      	bne.n	22ed0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x214>
   22e5c:	0742      	lsls	r2, r0, #29
   22e5e:	d403      	bmi.n	22e68 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1ac>
   22e60:	2902      	cmp	r1, #2
   22e62:	d001      	beq.n	22e68 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1ac>
   22e64:	2903      	cmp	r1, #3
   22e66:	d105      	bne.n	22e74 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1b8>
   22e68:	7ae1      	ldrb	r1, [r4, #11]
   22e6a:	b109      	cbz	r1, 22e70 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1b4>
   22e6c:	2901      	cmp	r1, #1
   22e6e:	d12f      	bne.n	22ed0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x214>
   22e70:	0741      	lsls	r1, r0, #29
   22e72:	d407      	bmi.n	22e84 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1c8>
   22e74:	7ca1      	ldrb	r1, [r4, #18]
   22e76:	b129      	cbz	r1, 22e84 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1c8>
   22e78:	2901      	cmp	r1, #1
   22e7a:	d003      	beq.n	22e84 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1c8>
   22e7c:	2902      	cmp	r1, #2
   22e7e:	d001      	beq.n	22e84 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1c8>
   22e80:	2903      	cmp	r1, #3
   22e82:	d125      	bne.n	22ed0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x214>
   22e84:	06c1      	lsls	r1, r0, #27
   22e86:	d504      	bpl.n	22e92 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1d6>
   22e88:	7d20      	ldrb	r0, [r4, #20]
   22e8a:	2801      	cmp	r0, #1
   22e8c:	d120      	bne.n	22ed0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x214>
   22e8e:	e01b      	b.n	22ec8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x20c>
   22e90:	e01e      	b.n	22ed0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x214>
   22e92:	7d21      	ldrb	r1, [r4, #20]
   22e94:	2902      	cmp	r1, #2
   22e96:	d10b      	bne.n	22eb0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1f4>
   22e98:	07c1      	lsls	r1, r0, #31
   22e9a:	d019      	beq.n	22ed0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x214>
   22e9c:	0741      	lsls	r1, r0, #29
   22e9e:	d417      	bmi.n	22ed0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x214>
   22ea0:	0701      	lsls	r1, r0, #28
   22ea2:	d515      	bpl.n	22ed0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x214>
   22ea4:	0641      	lsls	r1, r0, #25
   22ea6:	d413      	bmi.n	22ed0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x214>
   22ea8:	0681      	lsls	r1, r0, #26
   22eaa:	d411      	bmi.n	22ed0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x214>
   22eac:	0781      	lsls	r1, r0, #30
   22eae:	d40f      	bmi.n	22ed0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x214>
   22eb0:	06c0      	lsls	r0, r0, #27
   22eb2:	d409      	bmi.n	22ec8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x20c>
   22eb4:	7da0      	ldrb	r0, [r4, #22]
   22eb6:	2801      	cmp	r0, #1
   22eb8:	d003      	beq.n	22ec2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x206>
   22eba:	2802      	cmp	r0, #2
   22ebc:	d001      	beq.n	22ec2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x206>
   22ebe:	2803      	cmp	r0, #3
   22ec0:	d106      	bne.n	22ed0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x214>
   22ec2:	7de0      	ldrb	r0, [r4, #23]
   22ec4:	280f      	cmp	r0, #15
   22ec6:	d803      	bhi.n	22ed0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x214>
   22ec8:	7e20      	ldrb	r0, [r4, #24]
   22eca:	b118      	cbz	r0, 22ed4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x218>
   22ecc:	2801      	cmp	r0, #1
   22ece:	d001      	beq.n	22ed4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x218>
   22ed0:	2012      	movs	r0, #18
   22ed2:	bd38      	pop	{r3, r4, r5, pc}
   22ed4:	2000      	movs	r0, #0
   22ed6:	bd38      	pop	{r3, r4, r5, pc}
   22ed8:	b510      	push	{r4, lr}
   22eda:	0004      	movs	r4, r0
   22edc:	d005      	beq.n	22eea <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x22e>
   22ede:	f7f8 ff77 	bl	1bdd0 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   22ee2:	4384      	bics	r4, r0
   22ee4:	d001      	beq.n	22eea <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x22e>
   22ee6:	2000      	movs	r0, #0
   22ee8:	bd10      	pop	{r4, pc}
   22eea:	2001      	movs	r0, #1
   22eec:	bd10      	pop	{r4, pc}
   22eee:	28fb      	cmp	r0, #251	; 0xfb
   22ef0:	d802      	bhi.n	22ef8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x23c>
   22ef2:	f5b1 6f29 	cmp.w	r1, #2704	; 0xa90
   22ef6:	d901      	bls.n	22efc <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x240>
   22ef8:	2011      	movs	r0, #17
   22efa:	4770      	bx	lr
   22efc:	2000      	movs	r0, #0
   22efe:	4770      	bx	lr
   22f00:	381b      	subs	r0, #27
   22f02:	28e1      	cmp	r0, #225	; 0xe1
   22f04:	d206      	bcs.n	22f14 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x258>
   22f06:	f5b1 7fa4 	cmp.w	r1, #328	; 0x148
   22f0a:	d303      	bcc.n	22f14 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x258>
   22f0c:	f244 2090 	movw	r0, #17040	; 0x4290
   22f10:	4281      	cmp	r1, r0
   22f12:	d901      	bls.n	22f18 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x25c>
   22f14:	2012      	movs	r0, #18
   22f16:	4770      	bx	lr
   22f18:	2000      	movs	r0, #0
   22f1a:	4770      	bx	lr
   22f1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22f20:	4605      	mov	r5, r0
   22f22:	f8b0 7056 	ldrh.w	r7, [r0, #86]	; 0x56
   22f26:	f8b0 4058 	ldrh.w	r4, [r0, #88]	; 0x58
   22f2a:	4616      	mov	r6, r2
   22f2c:	3030      	adds	r0, #48	; 0x30
   22f2e:	b111      	cbz	r1, 22f36 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x27a>
   22f30:	f7f8 f96c 	bl	1b20c <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI>
   22f34:	e001      	b.n	22f3a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x27e>
   22f36:	f7f5 f835 	bl	17fa4 <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA>
   22f3a:	4680      	mov	r8, r0
   22f3c:	2102      	movs	r1, #2
   22f3e:	f7fd f95e 	bl	201fe <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
   22f42:	4287      	cmp	r7, r0
   22f44:	d200      	bcs.n	22f48 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x28c>
   22f46:	4638      	mov	r0, r7
   22f48:	4607      	mov	r7, r0
   22f4a:	2102      	movs	r1, #2
   22f4c:	4640      	mov	r0, r8
   22f4e:	f7fd f956 	bl	201fe <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
   22f52:	4284      	cmp	r4, r0
   22f54:	d200      	bcs.n	22f58 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x29c>
   22f56:	4620      	mov	r0, r4
   22f58:	8829      	ldrh	r1, [r5, #0]
   22f5a:	8031      	strh	r1, [r6, #0]
   22f5c:	2f1b      	cmp	r7, #27
   22f5e:	d913      	bls.n	22f88 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2cc>
   22f60:	2ffb      	cmp	r7, #251	; 0xfb
   22f62:	d300      	bcc.n	22f66 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2aa>
   22f64:	27fb      	movs	r7, #251	; 0xfb
   22f66:	8077      	strh	r7, [r6, #2]
   22f68:	281b      	cmp	r0, #27
   22f6a:	d90f      	bls.n	22f8c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2d0>
   22f6c:	28fb      	cmp	r0, #251	; 0xfb
   22f6e:	d300      	bcc.n	22f72 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2b6>
   22f70:	20fb      	movs	r0, #251	; 0xfb
   22f72:	80f0      	strh	r0, [r6, #6]
   22f74:	4640      	mov	r0, r8
   22f76:	f7ff fea3 	bl	22cc0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x4>
   22f7a:	80b0      	strh	r0, [r6, #4]
   22f7c:	4640      	mov	r0, r8
   22f7e:	f7ff fe9f 	bl	22cc0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x4>
   22f82:	8130      	strh	r0, [r6, #8]
   22f84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   22f88:	271b      	movs	r7, #27
   22f8a:	e7ec      	b.n	22f66 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2aa>
   22f8c:	201b      	movs	r0, #27
   22f8e:	e7f0      	b.n	22f72 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2b6>
   22f90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22f94:	7890      	ldrb	r0, [r2, #2]
   22f96:	9e06      	ldr	r6, [sp, #24]
   22f98:	461d      	mov	r5, r3
   22f9a:	4614      	mov	r4, r2
   22f9c:	b908      	cbnz	r0, 22fa2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2e6>
   22f9e:	f7f8 ff17 	bl	1bdd0 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   22fa2:	78e4      	ldrb	r4, [r4, #3]
   22fa4:	4607      	mov	r7, r0
   22fa6:	b914      	cbnz	r4, 22fae <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2f2>
   22fa8:	f7f8 ff12 	bl	1bdd0 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   22fac:	4604      	mov	r4, r0
   22fae:	b16f      	cbz	r7, 22fcc <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x310>
   22fb0:	b164      	cbz	r4, 22fcc <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x310>
   22fb2:	4638      	mov	r0, r7
   22fb4:	f7ff fe8f 	bl	22cd6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1a>
   22fb8:	4620      	mov	r0, r4
   22fba:	f7ff fe8c 	bl	22cd6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1a>
   22fbe:	b12f      	cbz	r7, 22fcc <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x310>
   22fc0:	b124      	cbz	r4, 22fcc <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x310>
   22fc2:	702f      	strb	r7, [r5, #0]
   22fc4:	7034      	strb	r4, [r6, #0]
   22fc6:	2000      	movs	r0, #0
   22fc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   22fcc:	2009      	movs	r0, #9
   22fce:	e7fb      	b.n	22fc8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x30c>
   22fd0:	207f      	movs	r0, #127	; 0x7f
   22fd2:	f000 b984 	b.w	232de <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x622>
   22fd6:	e92d 43fe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, lr}
   22fda:	460f      	mov	r7, r1
   22fdc:	4606      	mov	r6, r0
   22fde:	8c40      	ldrh	r0, [r0, #34]	; 0x22
   22fe0:	2107      	movs	r1, #7
   22fe2:	f7fc fdce 	bl	1fb82 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   22fe6:	0005      	movs	r5, r0
   22fe8:	d00a      	beq.n	23000 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x344>
   22fea:	f105 0018 	add.w	r0, r5, #24
   22fee:	4680      	mov	r8, r0
   22ff0:	f000 fa48 	bl	23484 <sym_LNQ5OSSHLT2KR4OBXPN76EEGODICLRS65ENGIUY>
   22ff4:	b1f8      	cbz	r0, 23036 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x37a>
   22ff6:	4640      	mov	r0, r8
   22ff8:	f000 fa79 	bl	234ee <sym_P5FBNAD7FPOVP3PXIDAFM67RYQ464KQVITPKKRY>
   22ffc:	b128      	cbz	r0, 2300a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x34e>
   22ffe:	e01a      	b.n	23036 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x37a>
   23000:	f240 71e5 	movw	r1, #2021	; 0x7e5
   23004:	2039      	movs	r0, #57	; 0x39
   23006:	f7ee fcbb 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   2300a:	8c30      	ldrh	r0, [r6, #32]
   2300c:	4669      	mov	r1, sp
   2300e:	f7fd f813 	bl	20038 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   23012:	2800      	cmp	r0, #0
   23014:	d110      	bne.n	23038 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x37c>
   23016:	f89d 0000 	ldrb.w	r0, [sp]
   2301a:	2801      	cmp	r0, #1
   2301c:	d10b      	bne.n	23036 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x37a>
   2301e:	9c01      	ldr	r4, [sp, #4]
   23020:	f894 018c 	ldrb.w	r0, [r4, #396]	; 0x18c
   23024:	f88d 0008 	strb.w	r0, [sp, #8]
   23028:	9802      	ldr	r0, [sp, #8]
   2302a:	9002      	str	r0, [sp, #8]
   2302c:	f89d 0008 	ldrb.w	r0, [sp, #8]
   23030:	f504 74a4 	add.w	r4, r4, #328	; 0x148
   23034:	b110      	cbz	r0, 2303c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x380>
   23036:	200c      	movs	r0, #12
   23038:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}
   2303c:	2101      	movs	r1, #1
   2303e:	4640      	mov	r0, r8
   23040:	f000 fa3f 	bl	234c2 <sym_ES6R4FG2DS575RJGSYNWG57QUXNDRWHXIDIJ6EA>
   23044:	f896 0030 	ldrb.w	r0, [r6, #48]	; 0x30
   23048:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
   2304c:	7d28      	ldrb	r0, [r5, #20]
   2304e:	f884 0046 	strb.w	r0, [r4, #70]	; 0x46
   23052:	78b8      	ldrb	r0, [r7, #2]
   23054:	f884 0047 	strb.w	r0, [r4, #71]	; 0x47
   23058:	3444      	adds	r4, #68	; 0x44
   2305a:	20ff      	movs	r0, #255	; 0xff
   2305c:	7020      	strb	r0, [r4, #0]
   2305e:	2000      	movs	r0, #0
   23060:	e7ea      	b.n	23038 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x37c>
   23062:	b508      	push	{r3, lr}
   23064:	f890 12b8 	ldrb.w	r1, [r0, #696]	; 0x2b8
   23068:	f890 00d4 	ldrb.w	r0, [r0, #212]	; 0xd4
   2306c:	f88d 0000 	strb.w	r0, [sp]
   23070:	9800      	ldr	r0, [sp, #0]
   23072:	9000      	str	r0, [sp, #0]
   23074:	f89d 0000 	ldrb.w	r0, [sp]
   23078:	b100      	cbz	r0, 2307c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3c0>
   2307a:	2001      	movs	r0, #1
   2307c:	1e40      	subs	r0, r0, #1
   2307e:	4208      	tst	r0, r1
   23080:	d003      	beq.n	2308a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3ce>
   23082:	2904      	cmp	r1, #4
   23084:	d001      	beq.n	2308a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3ce>
   23086:	2001      	movs	r0, #1
   23088:	bd08      	pop	{r3, pc}
   2308a:	2000      	movs	r0, #0
   2308c:	bd08      	pop	{r3, pc}
   2308e:	b508      	push	{r3, lr}
   23090:	f890 12d4 	ldrb.w	r1, [r0, #724]	; 0x2d4
   23094:	f890 00d4 	ldrb.w	r0, [r0, #212]	; 0xd4
   23098:	f88d 0000 	strb.w	r0, [sp]
   2309c:	9800      	ldr	r0, [sp, #0]
   2309e:	9000      	str	r0, [sp, #0]
   230a0:	f89d 0000 	ldrb.w	r0, [sp]
   230a4:	b100      	cbz	r0, 230a8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3ec>
   230a6:	2001      	movs	r0, #1
   230a8:	1e40      	subs	r0, r0, #1
   230aa:	4208      	tst	r0, r1
   230ac:	d003      	beq.n	230b6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3fa>
   230ae:	2904      	cmp	r1, #4
   230b0:	d001      	beq.n	230b6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3fa>
   230b2:	2001      	movs	r0, #1
   230b4:	bd08      	pop	{r3, pc}
   230b6:	2000      	movs	r0, #0
   230b8:	bd08      	pop	{r3, pc}
   230ba:	b570      	push	{r4, r5, r6, lr}
   230bc:	4605      	mov	r5, r0
   230be:	2103      	movs	r1, #3
   230c0:	f7fc fd5f 	bl	1fb82 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   230c4:	0004      	movs	r4, r0
   230c6:	d105      	bne.n	230d4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x418>
   230c8:	2105      	movs	r1, #5
   230ca:	4628      	mov	r0, r5
   230cc:	f7fc fd59 	bl	1fb82 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   230d0:	b100      	cbz	r0, 230d4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x418>
   230d2:	4604      	mov	r4, r0
   230d4:	4620      	mov	r0, r4
   230d6:	bd70      	pop	{r4, r5, r6, pc}
   230d8:	b570      	push	{r4, r5, r6, lr}
   230da:	460e      	mov	r6, r1
   230dc:	4604      	mov	r4, r0
   230de:	f7fe fabd 	bl	2165c <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
   230e2:	b9c8      	cbnz	r0, 23118 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x45c>
   230e4:	4620      	mov	r0, r4
   230e6:	f7fd fee6 	bl	20eb6 <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ>
   230ea:	b9a8      	cbnz	r0, 23118 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x45c>
   230ec:	2103      	movs	r1, #3
   230ee:	4630      	mov	r0, r6
   230f0:	f7fc fd47 	bl	1fb82 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   230f4:	0004      	movs	r4, r0
   230f6:	d004      	beq.n	23102 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x446>
   230f8:	f104 0040 	add.w	r0, r4, #64	; 0x40
   230fc:	f000 f9c2 	bl	23484 <sym_LNQ5OSSHLT2KR4OBXPN76EEGODICLRS65ENGIUY>
   23100:	b950      	cbnz	r0, 23118 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x45c>
   23102:	2105      	movs	r1, #5
   23104:	4630      	mov	r0, r6
   23106:	f7fc fd3c 	bl	1fb82 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   2310a:	0005      	movs	r5, r0
   2310c:	d006      	beq.n	2311c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x460>
   2310e:	f105 0040 	add.w	r0, r5, #64	; 0x40
   23112:	f000 f9b7 	bl	23484 <sym_LNQ5OSSHLT2KR4OBXPN76EEGODICLRS65ENGIUY>
   23116:	b108      	cbz	r0, 2311c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x460>
   23118:	200c      	movs	r0, #12
   2311a:	bd70      	pop	{r4, r5, r6, pc}
   2311c:	2102      	movs	r1, #2
   2311e:	4630      	mov	r0, r6
   23120:	f7ee ff56 	bl	11fd0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
   23124:	b110      	cbz	r0, 2312c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x470>
   23126:	f241 31b0 	movw	r1, #5040	; 0x13b0
   2312a:	e010      	b.n	2314e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x492>
   2312c:	b13c      	cbz	r4, 2313e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x482>
   2312e:	2103      	movs	r1, #3
   23130:	4630      	mov	r0, r6
   23132:	f7ee ff4d 	bl	11fd0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
   23136:	b110      	cbz	r0, 2313e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x482>
   23138:	f241 31b7 	movw	r1, #5047	; 0x13b7
   2313c:	e007      	b.n	2314e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x492>
   2313e:	b14d      	cbz	r5, 23154 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x498>
   23140:	2105      	movs	r1, #5
   23142:	4630      	mov	r0, r6
   23144:	f7ee ff44 	bl	11fd0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
   23148:	b120      	cbz	r0, 23154 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x498>
   2314a:	f241 31be 	movw	r1, #5054	; 0x13be
   2314e:	2039      	movs	r0, #57	; 0x39
   23150:	f7ee fc16 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   23154:	2000      	movs	r0, #0
   23156:	bd70      	pop	{r4, r5, r6, pc}
   23158:	b510      	push	{r4, lr}
   2315a:	f7f8 f871 	bl	1b240 <sym_6A56LMFOW5CXUIKYPP4TFUBTCQL6RLVLTWUNNWQ>
   2315e:	2804      	cmp	r0, #4
   23160:	d003      	beq.n	2316a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x4ae>
   23162:	2805      	cmp	r0, #5
   23164:	d001      	beq.n	2316a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x4ae>
   23166:	2000      	movs	r0, #0
   23168:	bd10      	pop	{r4, pc}
   2316a:	2001      	movs	r0, #1
   2316c:	bd10      	pop	{r4, pc}
   2316e:	b570      	push	{r4, r5, r6, lr}
   23170:	4605      	mov	r5, r0
   23172:	f7fe f81b 	bl	211ac <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
   23176:	b170      	cbz	r0, 23196 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x4da>
   23178:	4628      	mov	r0, r5
   2317a:	f7fe fa6f 	bl	2165c <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
   2317e:	2800      	cmp	r0, #0
   23180:	d008      	beq.n	23194 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x4d8>
   23182:	4628      	mov	r0, r5
   23184:	f7fe fa67 	bl	21656 <sym_MHDCHYAEWBCIUYGOTWRWGZEJ6XEBEBUHOO5T6WY>
   23188:	4604      	mov	r4, r0
   2318a:	4628      	mov	r0, r5
   2318c:	f7fe fa39 	bl	21602 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI>
   23190:	b118      	cbz	r0, 2319a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x4de>
   23192:	200c      	movs	r0, #12
   23194:	bd70      	pop	{r4, r5, r6, pc}
   23196:	2042      	movs	r0, #66	; 0x42
   23198:	bd70      	pop	{r4, r5, r6, pc}
   2319a:	b184      	cbz	r4, 231be <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x502>
   2319c:	f8b4 007e 	ldrh.w	r0, [r4, #126]	; 0x7e
   231a0:	f7f8 fcf6 	bl	1bb90 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x228>
   231a4:	8820      	ldrh	r0, [r4, #0]
   231a6:	f7ef fb85 	bl	128b4 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
   231aa:	8820      	ldrh	r0, [r4, #0]
   231ac:	2101      	movs	r1, #1
   231ae:	f7ee ff0f 	bl	11fd0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
   231b2:	b120      	cbz	r0, 231be <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x502>
   231b4:	f241 6154 	movw	r1, #5716	; 0x1654
   231b8:	2039      	movs	r0, #57	; 0x39
   231ba:	f7ee fbe1 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   231be:	2000      	movs	r0, #0
   231c0:	bd70      	pop	{r4, r5, r6, pc}
   231c2:	b5f0      	push	{r4, r5, r6, r7, lr}
   231c4:	b085      	sub	sp, #20
   231c6:	4604      	mov	r4, r0
   231c8:	8800      	ldrh	r0, [r0, #0]
   231ca:	4669      	mov	r1, sp
   231cc:	f7fc ff34 	bl	20038 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   231d0:	2800      	cmp	r0, #0
   231d2:	d14e      	bne.n	23272 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x5b6>
   231d4:	9801      	ldr	r0, [sp, #4]
   231d6:	f890 11c6 	ldrb.w	r1, [r0, #454]	; 0x1c6
   231da:	f88d 1010 	strb.w	r1, [sp, #16]
   231de:	9904      	ldr	r1, [sp, #16]
   231e0:	9104      	str	r1, [sp, #16]
   231e2:	f89d 1010 	ldrb.w	r1, [sp, #16]
   231e6:	30a0      	adds	r0, #160	; 0xa0
   231e8:	b101      	cbz	r1, 231ec <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x530>
   231ea:	2101      	movs	r1, #1
   231ec:	f88d 1008 	strb.w	r1, [sp, #8]
   231f0:	f89d 1000 	ldrb.w	r1, [sp]
   231f4:	b119      	cbz	r1, 231fe <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x542>
   231f6:	7901      	ldrb	r1, [r0, #4]
   231f8:	0689      	lsls	r1, r1, #26
   231fa:	d40f      	bmi.n	2321c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x560>
   231fc:	e005      	b.n	2320a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x54e>
   231fe:	7d81      	ldrb	r1, [r0, #22]
   23200:	2920      	cmp	r1, #32
   23202:	d00b      	beq.n	2321c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x560>
   23204:	e001      	b.n	2320a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x54e>
   23206:	2101      	movs	r1, #1
   23208:	e000      	b.n	2320c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x550>
   2320a:	2100      	movs	r1, #0
   2320c:	f88d 100c 	strb.w	r1, [sp, #12]
   23210:	2105      	movs	r1, #5
   23212:	3066      	adds	r0, #102	; 0x66
   23214:	f7fe ff31 	bl	2207a <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x3c>
   23218:	b128      	cbz	r0, 23226 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x56a>
   2321a:	e007      	b.n	2322c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x570>
   2321c:	f89d 1008 	ldrb.w	r1, [sp, #8]
   23220:	2900      	cmp	r1, #0
   23222:	d1f2      	bne.n	2320a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x54e>
   23224:	e7ef      	b.n	23206 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x54a>
   23226:	f89d 000c 	ldrb.w	r0, [sp, #12]
   2322a:	b308      	cbz	r0, 23270 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x5b4>
   2322c:	8921      	ldrh	r1, [r4, #8]
   2322e:	88e0      	ldrh	r0, [r4, #6]
   23230:	f7ff fe66 	bl	22f00 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x244>
   23234:	2800      	cmp	r0, #0
   23236:	d11c      	bne.n	23272 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x5b6>
   23238:	88a1      	ldrh	r1, [r4, #4]
   2323a:	8860      	ldrh	r0, [r4, #2]
   2323c:	f7ff fe60 	bl	22f00 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x244>
   23240:	2800      	cmp	r0, #0
   23242:	d116      	bne.n	23272 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x5b6>
   23244:	8921      	ldrh	r1, [r4, #8]
   23246:	88e0      	ldrh	r0, [r4, #6]
   23248:	f7ff fe51 	bl	22eee <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x232>
   2324c:	2800      	cmp	r0, #0
   2324e:	d110      	bne.n	23272 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x5b6>
   23250:	88a1      	ldrh	r1, [r4, #4]
   23252:	8860      	ldrh	r0, [r4, #2]
   23254:	f7ff fe4b 	bl	22eee <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x232>
   23258:	0006      	movs	r6, r0
   2325a:	d10a      	bne.n	23272 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x5b6>
   2325c:	9801      	ldr	r0, [sp, #4]
   2325e:	f500 75a5 	add.w	r5, r0, #330	; 0x14a
   23262:	27ff      	movs	r7, #255	; 0xff
   23264:	706f      	strb	r7, [r5, #1]
   23266:	f89d 1008 	ldrb.w	r1, [sp, #8]
   2326a:	b121      	cbz	r1, 23276 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x5ba>
   2326c:	263a      	movs	r6, #58	; 0x3a
   2326e:	e030      	b.n	232d2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x616>
   23270:	201a      	movs	r0, #26
   23272:	b005      	add	sp, #20
   23274:	bdf0      	pop	{r4, r5, r6, r7, pc}
   23276:	f89d 1000 	ldrb.w	r1, [sp]
   2327a:	b371      	cbz	r1, 232da <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x61e>
   2327c:	2100      	movs	r1, #0
   2327e:	aa02      	add	r2, sp, #8
   23280:	f7ff fe4c 	bl	22f1c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x260>
   23284:	8861      	ldrh	r1, [r4, #2]
   23286:	f8bd 000e 	ldrh.w	r0, [sp, #14]
   2328a:	4281      	cmp	r1, r0
   2328c:	d200      	bcs.n	23290 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x5d4>
   2328e:	4608      	mov	r0, r1
   23290:	80e8      	strh	r0, [r5, #6]
   23292:	88a1      	ldrh	r1, [r4, #4]
   23294:	f8bd 0010 	ldrh.w	r0, [sp, #16]
   23298:	4281      	cmp	r1, r0
   2329a:	d200      	bcs.n	2329e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x5e2>
   2329c:	4608      	mov	r0, r1
   2329e:	8128      	strh	r0, [r5, #8]
   232a0:	88e2      	ldrh	r2, [r4, #6]
   232a2:	f8bd 100a 	ldrh.w	r1, [sp, #10]
   232a6:	428a      	cmp	r2, r1
   232a8:	d200      	bcs.n	232ac <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x5f0>
   232aa:	4611      	mov	r1, r2
   232ac:	8069      	strh	r1, [r5, #2]
   232ae:	8922      	ldrh	r2, [r4, #8]
   232b0:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   232b4:	428a      	cmp	r2, r1
   232b6:	d200      	bcs.n	232ba <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x5fe>
   232b8:	4611      	mov	r1, r2
   232ba:	f640 0248 	movw	r2, #2120	; 0x848
   232be:	80a9      	strh	r1, [r5, #4]
   232c0:	4291      	cmp	r1, r2
   232c2:	d300      	bcc.n	232c6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x60a>
   232c4:	4611      	mov	r1, r2
   232c6:	80a9      	strh	r1, [r5, #4]
   232c8:	4290      	cmp	r0, r2
   232ca:	d200      	bcs.n	232ce <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x612>
   232cc:	4602      	mov	r2, r0
   232ce:	812a      	strh	r2, [r5, #8]
   232d0:	702f      	strb	r7, [r5, #0]
   232d2:	2000      	movs	r0, #0
   232d4:	7068      	strb	r0, [r5, #1]
   232d6:	4630      	mov	r0, r6
   232d8:	e7cb      	b.n	23272 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x5b6>
   232da:	2101      	movs	r1, #1
   232dc:	e7cf      	b.n	2327e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x5c2>
   232de:	b508      	push	{r3, lr}
   232e0:	f640 1288 	movw	r2, #2440	; 0x988
   232e4:	4669      	mov	r1, sp
   232e6:	f7ee f993 	bl	11610 <mpsl_fem_tx_power_split>
   232ea:	bd08      	pop	{r3, pc}
   232ec:	b530      	push	{r4, r5, lr}
   232ee:	f340 0400 	sbfx	r4, r0, #0, #1
   232f2:	f340 0040 	sbfx	r0, r0, #1, #1
   232f6:	1c40      	adds	r0, r0, #1
   232f8:	9d03      	ldr	r5, [sp, #12]
   232fa:	1c64      	adds	r4, r4, #1
   232fc:	d000      	beq.n	23300 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x644>
   232fe:	b119      	cbz	r1, 23308 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x64c>
   23300:	b100      	cbz	r0, 23304 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x648>
   23302:	b10a      	cbz	r2, 23308 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x64c>
   23304:	b91c      	cbnz	r4, 2330e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x652>
   23306:	e001      	b.n	2330c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x650>
   23308:	2011      	movs	r0, #17
   2330a:	bd30      	pop	{r4, r5, pc}
   2330c:	2100      	movs	r1, #0
   2330e:	7019      	strb	r1, [r3, #0]
   23310:	b900      	cbnz	r0, 23314 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x658>
   23312:	2200      	movs	r2, #0
   23314:	702a      	strb	r2, [r5, #0]
   23316:	2000      	movs	r0, #0
   23318:	bd30      	pop	{r4, r5, pc}
   2331a:	b2c0      	uxtb	r0, r0
   2331c:	06c1      	lsls	r1, r0, #27
   2331e:	d415      	bmi.n	2334c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x690>
   23320:	0681      	lsls	r1, r0, #26
   23322:	ea4f 71c0 	mov.w	r1, r0, lsl #31
   23326:	d503      	bpl.n	23330 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x674>
   23328:	bb21      	cbnz	r1, 23374 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x6b8>
   2332a:	0781      	lsls	r1, r0, #30
   2332c:	d422      	bmi.n	23374 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x6b8>
   2332e:	e001      	b.n	23334 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x678>
   23330:	2900      	cmp	r1, #0
   23332:	d1fa      	bne.n	2332a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x66e>
   23334:	0701      	lsls	r1, r0, #28
   23336:	d51b      	bpl.n	23370 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x6b4>
   23338:	07c1      	lsls	r1, r0, #31
   2333a:	d01b      	beq.n	23374 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x6b8>
   2333c:	0781      	lsls	r1, r0, #30
   2333e:	d419      	bmi.n	23374 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x6b8>
   23340:	0641      	lsls	r1, r0, #25
   23342:	d417      	bmi.n	23374 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x6b8>
   23344:	0741      	lsls	r1, r0, #29
   23346:	d415      	bmi.n	23374 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x6b8>
   23348:	0680      	lsls	r0, r0, #26
   2334a:	e00f      	b.n	2336c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x6b0>
   2334c:	0641      	lsls	r1, r0, #25
   2334e:	d411      	bmi.n	23374 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x6b8>
   23350:	0681      	lsls	r1, r0, #26
   23352:	d40f      	bmi.n	23374 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x6b8>
   23354:	07c1      	lsls	r1, r0, #31
   23356:	ea4f 7180 	mov.w	r1, r0, lsl #30
   2335a:	d004      	beq.n	23366 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x6aa>
   2335c:	2900      	cmp	r1, #0
   2335e:	db02      	blt.n	23366 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x6aa>
   23360:	0740      	lsls	r0, r0, #29
   23362:	d405      	bmi.n	23370 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x6b4>
   23364:	e006      	b.n	23374 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x6b8>
   23366:	0701      	lsls	r1, r0, #28
   23368:	d404      	bmi.n	23374 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x6b8>
   2336a:	0740      	lsls	r0, r0, #29
   2336c:	2800      	cmp	r0, #0
   2336e:	db01      	blt.n	23374 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x6b8>
   23370:	2001      	movs	r0, #1
   23372:	4770      	bx	lr
   23374:	2000      	movs	r0, #0
   23376:	4770      	bx	lr
   23378:	b510      	push	{r4, lr}
   2337a:	f7f2 f96f 	bl	1565c <sym_FSDCMX3C6Q67T66V54TUJDLMC4XSLM7ZTOTYRDI>
   2337e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   23382:	f7f8 bceb 	b.w	1bd5c <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0xc>
   23386:	b510      	push	{r4, lr}
   23388:	f7f4 fd7c 	bl	17e84 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q>
   2338c:	b110      	cbz	r0, 23394 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x6d8>
   2338e:	f240 110d 	movw	r1, #269	; 0x10d
   23392:	e004      	b.n	2339e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x6e2>
   23394:	f7f2 f99a 	bl	156cc <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>
   23398:	b120      	cbz	r0, 233a4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x6e8>
   2339a:	f44f 7189 	mov.w	r1, #274	; 0x112
   2339e:	2001      	movs	r0, #1
   233a0:	f7ee faee 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   233a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   233a8:	2002      	movs	r0, #2
   233aa:	f7fc bbc7 	b.w	1fb3c <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
   233ae:	b510      	push	{r4, lr}
   233b0:	2001      	movs	r0, #1
   233b2:	f7fc fbc3 	bl	1fb3c <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
   233b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   233ba:	2000      	movs	r0, #0
   233bc:	f7fc bbbe 	b.w	1fb3c <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
   233c0:	6802      	ldr	r2, [r0, #0]
   233c2:	b912      	cbnz	r2, 233ca <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x70e>
   233c4:	6001      	str	r1, [r0, #0]
   233c6:	4770      	bx	lr
   233c8:	4602      	mov	r2, r0
   233ca:	6850      	ldr	r0, [r2, #4]
   233cc:	b108      	cbz	r0, 233d2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x716>
   233ce:	428a      	cmp	r2, r1
   233d0:	d1fa      	bne.n	233c8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x70c>
   233d2:	428a      	cmp	r2, r1
   233d4:	d0f7      	beq.n	233c6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x70a>
   233d6:	6051      	str	r1, [r2, #4]
   233d8:	4770      	bx	lr
   233da:	b510      	push	{r4, lr}
   233dc:	4604      	mov	r4, r0
   233de:	e002      	b.n	233e6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x72a>
   233e0:	6820      	ldr	r0, [r4, #0]
   233e2:	4780      	blx	r0
   233e4:	6864      	ldr	r4, [r4, #4]
   233e6:	2c00      	cmp	r4, #0
   233e8:	d1fa      	bne.n	233e0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x724>
   233ea:	bd10      	pop	{r4, pc}
   233ec:	b510      	push	{r4, lr}
   233ee:	f7ff ffde 	bl	233ae <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x6f2>
   233f2:	f7ee ff7d 	bl	122f0 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA>
   233f6:	f7ef faed 	bl	129d4 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>
   233fa:	f7ef fe07 	bl	1300c <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>
   233fe:	2800      	cmp	r0, #0
   23400:	d003      	beq.n	2340a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x74e>
   23402:	21ec      	movs	r1, #236	; 0xec
   23404:	2001      	movs	r0, #1
   23406:	f7ee fabb 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   2340a:	bd10      	pop	{r4, pc}
   2340c:	f7ff bfee 	b.w	233ec <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x730>
   23410:	b510      	push	{r4, lr}
   23412:	f7ff ffb8 	bl	23386 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x6ca>
   23416:	f7f5 fe7f 	bl	19118 <sym_OTZAOT4DEZSL3R4MXRNUS2BIBKPPCOEO2SMZYAI>
   2341a:	2800      	cmp	r0, #0
   2341c:	d004      	beq.n	23428 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x76c>
   2341e:	f240 1129 	movw	r1, #297	; 0x129
   23422:	2001      	movs	r0, #1
   23424:	f7ee faac 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   23428:	bd10      	pop	{r4, pc}

0002342a <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>:
   2342a:	f7ed bd79 	b.w	10f20 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
   2342e:	0001      	.short	0x0001
   23430:	0002000b 	.word	0x0002000b
   23434:	0005000a 	.word	0x0005000a
   23438:	000a0009 	.word	0x000a0009
   2343c:	00140008 	.word	0x00140008
   23440:	001e0007 	.word	0x001e0007
   23444:	00320006 	.word	0x00320006
   23448:	004b0005 	.word	0x004b0005
   2344c:	00640004 	.word	0x00640004
   23450:	00960003 	.word	0x00960003
   23454:	00fa0002 	.word	0x00fa0002
   23458:	01f40001 	.word	0x01f40001
	...

0002345e <sym_HDXV6XMLHCLB5RJEPHSKKLJJM3TFLHYSQSNRE7Y>:
   2345e:	6888      	ldr	r0, [r1, #8]
   23460:	f7fc bceb 	b.w	1fe3a <sym_SCCFLYV5KOPRJ5S7RGDC2KDSCCHMKXYC3EQIE6A>

00023464 <sym_QCXUEKCKOZOTI5QRBCIDVHO5YKM3SRTXLZTJKAQ>:
   23464:	b508      	push	{r3, lr}
   23466:	7c01      	ldrb	r1, [r0, #16]
   23468:	f88d 1000 	strb.w	r1, [sp]
   2346c:	9900      	ldr	r1, [sp, #0]
   2346e:	9100      	str	r1, [sp, #0]
   23470:	f89d 2000 	ldrb.w	r2, [sp]
   23474:	2a01      	cmp	r2, #1
   23476:	d003      	beq.n	23480 <sym_QCXUEKCKOZOTI5QRBCIDVHO5YKM3SRTXLZTJKAQ+0x1c>
   23478:	f000 f804 	bl	23484 <sym_LNQ5OSSHLT2KR4OBXPN76EEGODICLRS65ENGIUY>
   2347c:	2800      	cmp	r0, #0
   2347e:	d000      	beq.n	23482 <sym_QCXUEKCKOZOTI5QRBCIDVHO5YKM3SRTXLZTJKAQ+0x1e>
   23480:	2001      	movs	r0, #1
   23482:	bd08      	pop	{r3, pc}

00023484 <sym_LNQ5OSSHLT2KR4OBXPN76EEGODICLRS65ENGIUY>:
   23484:	b50e      	push	{r1, r2, r3, lr}
   23486:	7c01      	ldrb	r1, [r0, #16]
   23488:	f88d 1000 	strb.w	r1, [sp]
   2348c:	9900      	ldr	r1, [sp, #0]
   2348e:	9100      	str	r1, [sp, #0]
   23490:	f89d 2000 	ldrb.w	r2, [sp]
   23494:	b19a      	cbz	r2, 234be <sym_LNQ5OSSHLT2KR4OBXPN76EEGODICLRS65ENGIUY+0x3a>
   23496:	7c01      	ldrb	r1, [r0, #16]
   23498:	f88d 1008 	strb.w	r1, [sp, #8]
   2349c:	9902      	ldr	r1, [sp, #8]
   2349e:	9100      	str	r1, [sp, #0]
   234a0:	f89d 2000 	ldrb.w	r2, [sp]
   234a4:	2a01      	cmp	r2, #1
   234a6:	d00a      	beq.n	234be <sym_LNQ5OSSHLT2KR4OBXPN76EEGODICLRS65ENGIUY+0x3a>
   234a8:	7c00      	ldrb	r0, [r0, #16]
   234aa:	f88d 0004 	strb.w	r0, [sp, #4]
   234ae:	9801      	ldr	r0, [sp, #4]
   234b0:	9000      	str	r0, [sp, #0]
   234b2:	f89d 1000 	ldrb.w	r1, [sp]
   234b6:	2907      	cmp	r1, #7
   234b8:	d001      	beq.n	234be <sym_LNQ5OSSHLT2KR4OBXPN76EEGODICLRS65ENGIUY+0x3a>
   234ba:	2001      	movs	r0, #1
   234bc:	bd0e      	pop	{r1, r2, r3, pc}
   234be:	2000      	movs	r0, #0
   234c0:	bd0e      	pop	{r1, r2, r3, pc}

000234c2 <sym_ES6R4FG2DS575RJGSYNWG57QUXNDRWHXIDIJ6EA>:
   234c2:	b570      	push	{r4, r5, r6, lr}
   234c4:	460e      	mov	r6, r1
   234c6:	4605      	mov	r5, r0
   234c8:	f7ff ffcc 	bl	23464 <sym_QCXUEKCKOZOTI5QRBCIDVHO5YKM3SRTXLZTJKAQ>
   234cc:	2800      	cmp	r0, #0
   234ce:	d00d      	beq.n	234ec <sym_ES6R4FG2DS575RJGSYNWG57QUXNDRWHXIDIJ6EA+0x2a>
   234d0:	f105 0410 	add.w	r4, r5, #16
   234d4:	2e01      	cmp	r6, #1
   234d6:	d107      	bne.n	234e8 <sym_ES6R4FG2DS575RJGSYNWG57QUXNDRWHXIDIJ6EA+0x26>
   234d8:	2007      	movs	r0, #7
   234da:	7020      	strb	r0, [r4, #0]
   234dc:	7928      	ldrb	r0, [r5, #4]
   234de:	f7ec f84b 	bl	f578 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>
   234e2:	7928      	ldrb	r0, [r5, #4]
   234e4:	f7ec f9ac 	bl	f840 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
   234e8:	2001      	movs	r0, #1
   234ea:	7020      	strb	r0, [r4, #0]
   234ec:	bd70      	pop	{r4, r5, r6, pc}

000234ee <sym_P5FBNAD7FPOVP3PXIDAFM67RYQ464KQVITPKKRY>:
   234ee:	b508      	push	{r3, lr}
   234f0:	7c00      	ldrb	r0, [r0, #16]
   234f2:	f88d 0000 	strb.w	r0, [sp]
   234f6:	9800      	ldr	r0, [sp, #0]
   234f8:	9000      	str	r0, [sp, #0]
   234fa:	f89d 1000 	ldrb.w	r1, [sp]
   234fe:	2904      	cmp	r1, #4
   23500:	d001      	beq.n	23506 <sym_P5FBNAD7FPOVP3PXIDAFM67RYQ464KQVITPKKRY+0x18>
   23502:	2000      	movs	r0, #0
   23504:	bd08      	pop	{r3, pc}
   23506:	2001      	movs	r0, #1
   23508:	bd08      	pop	{r3, pc}

0002350a <sym_QT7CN5RSIHUVCYKTUKHJII2MTGNYH7F3ANVDDWQ>:
   2350a:	4770      	bx	lr

0002350c <sym_W7HPZT4ZZWPRGP66GDZI4KM3L4VPFAYQTFZ7HRI>:
   2350c:	4770      	bx	lr

0002350e <sym_E3Z4CDFMO5WO2USA7ZENUHUEO5Z5OLSF4WCS4GY>:
   2350e:	b510      	push	{r4, lr}
   23510:	4604      	mov	r4, r0
   23512:	2101      	movs	r1, #1
   23514:	f7ff ffd5 	bl	234c2 <sym_ES6R4FG2DS575RJGSYNWG57QUXNDRWHXIDIJ6EA>
   23518:	7920      	ldrb	r0, [r4, #4]
   2351a:	f7ec f96f 	bl	f7fc <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
   2351e:	b108      	cbz	r0, 23524 <sym_E3Z4CDFMO5WO2USA7ZENUHUEO5Z5OLSF4WCS4GY+0x16>
   23520:	2000      	movs	r0, #0
   23522:	bd10      	pop	{r4, pc}
   23524:	f44f 71e7 	mov.w	r1, #462	; 0x1ce
   23528:	200c      	movs	r0, #12
   2352a:	f7ee fa29 	bl	11980 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0002352e <sym_CCCM5F3WBE5G2EGSSOBDEOIOAKSXNRWOXMM3JZA>:
   2352e:	4770      	bx	lr

00023530 <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>:
   23530:	b510      	push	{r4, lr}
   23532:	f7f9 fa81 	bl	1ca38 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>
   23536:	f7f8 febb 	bl	1c2b0 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>
   2353a:	f7f8 fd1f 	bl	1bf7c <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>
   2353e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   23542:	f7f8 be47 	b.w	1c1d4 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>

00023546 <sym_WCPWOVVEASSG4MEQ4OYZCASM4KFKZK6VT6CIMIA>:
   23546:	b508      	push	{r3, lr}
   23548:	466b      	mov	r3, sp
   2354a:	f7fa fc0b 	bl	1dd64 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ>
   2354e:	bd08      	pop	{r3, pc}

00023550 <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>:
   23550:	b510      	push	{r4, lr}
   23552:	4604      	mov	r4, r0
   23554:	4608      	mov	r0, r1
   23556:	f7f9 fc0f 	bl	1cd78 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   2355a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   2355e:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
   23562:	fbb0 f0f1 	udiv	r0, r0, r1
   23566:	1a20      	subs	r0, r4, r0
   23568:	1e80      	subs	r0, r0, #2
   2356a:	bd10      	pop	{r4, pc}

0002356c <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>:
   2356c:	b510      	push	{r4, lr}
   2356e:	4604      	mov	r4, r0
   23570:	4608      	mov	r0, r1
   23572:	f7f9 fc01 	bl	1cd78 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   23576:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   2357a:	fbb0 f0f1 	udiv	r0, r0, r1
   2357e:	1a20      	subs	r0, r4, r0
   23580:	bd10      	pop	{r4, pc}

00023582 <sym_VCM3BICZ5QLCEBBK5263KDY2XJT4MJLUF43FCFA>:
   23582:	680a      	ldr	r2, [r1, #0]
   23584:	6002      	str	r2, [r0, #0]
   23586:	790b      	ldrb	r3, [r1, #4]
   23588:	7103      	strb	r3, [r0, #4]
   2358a:	4770      	bx	lr

0002358c <sym_LZ2C54IT4LHTBXT53TEJK4VNCXFB5NWZJY2LS7Y>:
   2358c:	680a      	ldr	r2, [r1, #0]
   2358e:	684b      	ldr	r3, [r1, #4]
   23590:	6002      	str	r2, [r0, #0]
   23592:	6043      	str	r3, [r0, #4]
   23594:	f8b1 c008 	ldrh.w	ip, [r1, #8]
   23598:	f8a0 c008 	strh.w	ip, [r0, #8]
   2359c:	4770      	bx	lr

0002359e <sym_IBALR6WOCZYA342JRYG44MFHRUIKXGWY4MGXZLY>:
   2359e:	2100      	movs	r1, #0
   235a0:	6001      	str	r1, [r0, #0]
   235a2:	8081      	strh	r1, [r0, #4]
   235a4:	4770      	bx	lr
   235a6:	ecd8      	.short	0xecd8
   235a8:	fcf8f4f0 	.word	0xfcf8f4f0
   235ac:	04030200 	.word	0x04030200
   235b0:	08070605 	.word	0x08070605
	...
   235c8:	01010101 	.word	0x01010101
   235cc:	02020202 	.word	0x02020202
   235d0:	03030303 	.word	0x03030303
   235d4:	04040404 	.word	0x04040404
   235d8:	05050505 	.word	0x05050505
   235dc:	08070606 	.word	0x08070606
   235e0:	0c0b0a09 	.word	0x0c0b0a09
   235e4:	0000000d 	.word	0x0000000d
	...
   235f8:	01010100 	.word	0x01010100
   235fc:	02020201 	.word	0x02020201
   23600:	03030302 	.word	0x03030302
   23604:	04040403 	.word	0x04040403
   23608:	05050504 	.word	0x05050504
   2360c:	06060605 	.word	0x06060605
   23610:	0908      	.short	0x0908
   23612:	080c      	.short	0x080c
   23614:	010d1702 	.word	0x010d1702
   23618:	09090201 	.word	0x09090201
   2361c:	02060101 	.word	0x02060101
   23620:	03181809 	.word	0x03181809
   23624:	09090101 	.word	0x09090101
   23628:	03050303 	.word	0x03050303
   2362c:	02230102 	.word	0x02230102
   23630:	10092402 	.word	0x10092402
   23634:	05050404 	.word	0x05050404
   23638:	0b040b0b 	.word	0x0b040b0b
   2363c:	0000002b 	.word	0x0000002b

00023640 <getGasValue>:

int initGasSensor() {
    return !device_is_ready(ccs811);
}

float getGasValue() {
   23640:	b530      	push	{r4, r5, lr}
   23642:	b089      	sub	sp, #36	; 0x24
static inline int z_impl_sensor_sample_fetch(const struct device *dev)
{
	const struct sensor_driver_api *api =
		(const struct sensor_driver_api *)dev->api;

	return api->sample_fetch(dev, SENSOR_CHAN_ALL);
   23644:	481c      	ldr	r0, [pc, #112]	; (236b8 <getGasValue+0x78>)
   23646:	6883      	ldr	r3, [r0, #8]
   23648:	2139      	movs	r1, #57	; 0x39
   2364a:	68db      	ldr	r3, [r3, #12]
   2364c:	4798      	blx	r3
    int err = 0;
    struct sensor_value co2, tvoc, voltage, current;
    // const struct ccs811_result_type *result = ccs811_result(dev);

    err = sensor_sample_fetch(ccs811);
    if(err != 0){
   2364e:	4601      	mov	r1, r0
   23650:	b128      	cbz	r0, 2365e <getGasValue+0x1e>
        printk("Error on sample fetching data from ccs811: %d\n", err);
   23652:	481a      	ldr	r0, [pc, #104]	; (236bc <getGasValue+0x7c>)
   23654:	f015 f855 	bl	38702 <printk>
        return -1;
   23658:	4819      	ldr	r0, [pc, #100]	; (236c0 <getGasValue+0x80>)
    sensor_channel_get(ccs811, SENSOR_CHAN_VOC, &tvoc);
    sensor_channel_get(ccs811, SENSOR_CHAN_VOLTAGE, &voltage);
    sensor_channel_get(ccs811, SENSOR_CHAN_CURRENT, &current);
    float co2Value = (float) sensor_value_to_double(&co2);
    return co2Value;
   2365a:	b009      	add	sp, #36	; 0x24
   2365c:	bd30      	pop	{r4, r5, pc}
    sensor_channel_get(ccs811, SENSOR_CHAN_CO2, &co2);
   2365e:	4669      	mov	r1, sp
   23660:	201b      	movs	r0, #27
   23662:	f000 fa63 	bl	23b2c <sensor_channel_get.constprop.0.isra.0>
    sensor_channel_get(ccs811, SENSOR_CHAN_VOC, &tvoc);
   23666:	a902      	add	r1, sp, #8
   23668:	201c      	movs	r0, #28
   2366a:	f000 fa5f 	bl	23b2c <sensor_channel_get.constprop.0.isra.0>
    sensor_channel_get(ccs811, SENSOR_CHAN_VOLTAGE, &voltage);
   2366e:	a904      	add	r1, sp, #16
   23670:	201e      	movs	r0, #30
   23672:	f000 fa5b 	bl	23b2c <sensor_channel_get.constprop.0.isra.0>
    sensor_channel_get(ccs811, SENSOR_CHAN_CURRENT, &current);
   23676:	a906      	add	r1, sp, #24
   23678:	201f      	movs	r0, #31
   2367a:	f000 fa57 	bl	23b2c <sensor_channel_get.constprop.0.isra.0>
 * @param val A pointer to a sensor_value struct.
 * @return The converted value.
 */
static inline double sensor_value_to_double(const struct sensor_value *val)
{
	return (double)val->val1 + (double)val->val2 / 1000000;
   2367e:	9801      	ldr	r0, [sp, #4]
   23680:	f7e8 ff80 	bl	c584 <__aeabi_i2d>
   23684:	a30a      	add	r3, pc, #40	; (adr r3, 236b0 <getGasValue+0x70>)
   23686:	e9d3 2300 	ldrd	r2, r3, [r3]
   2368a:	f7e9 f90f 	bl	c8ac <__aeabi_ddiv>
   2368e:	4604      	mov	r4, r0
   23690:	9800      	ldr	r0, [sp, #0]
   23692:	460d      	mov	r5, r1
   23694:	f7e8 ff76 	bl	c584 <__aeabi_i2d>
   23698:	4602      	mov	r2, r0
   2369a:	460b      	mov	r3, r1
   2369c:	4620      	mov	r0, r4
   2369e:	4629      	mov	r1, r5
   236a0:	f7e8 fe24 	bl	c2ec <__adddf3>
    float co2Value = (float) sensor_value_to_double(&co2);
   236a4:	f7e9 f9ea 	bl	ca7c <__aeabi_d2f>
    return co2Value;
   236a8:	e7d7      	b.n	2365a <getGasValue+0x1a>
   236aa:	bf00      	nop
   236ac:	f3af 8000 	nop.w
   236b0:	00000000 	.word	0x00000000
   236b4:	412e8480 	.word	0x412e8480
   236b8:	0003c208 	.word	0x0003c208
   236bc:	0003d0e8 	.word	0x0003d0e8
   236c0:	bf800000 	.word	0xbf800000
   236c4:	00000000 	.word	0x00000000

000236c8 <getHumidityValue>:
        return -1;
    }
    return 0;
}

uint16_t getHumidityValue(){
   236c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	return api->channel_get(dev, chan, val);
   236ca:	4813      	ldr	r0, [pc, #76]	; (23718 <getHumidityValue+0x50>)
   236cc:	6883      	ldr	r3, [r0, #8]
   236ce:	466a      	mov	r2, sp
   236d0:	691b      	ldr	r3, [r3, #16]
   236d2:	2110      	movs	r1, #16
   236d4:	4798      	blx	r3
	return (double)val->val1 + (double)val->val2 / 1000000;
   236d6:	9801      	ldr	r0, [sp, #4]
   236d8:	f7e8 ff54 	bl	c584 <__aeabi_i2d>
   236dc:	a30c      	add	r3, pc, #48	; (adr r3, 23710 <getHumidityValue+0x48>)
   236de:	e9d3 2300 	ldrd	r2, r3, [r3]
   236e2:	f7e9 f8e3 	bl	c8ac <__aeabi_ddiv>
   236e6:	4604      	mov	r4, r0
   236e8:	9800      	ldr	r0, [sp, #0]
   236ea:	460d      	mov	r5, r1
   236ec:	f7e8 ff4a 	bl	c584 <__aeabi_i2d>
   236f0:	4602      	mov	r2, r0
   236f2:	460b      	mov	r3, r1
   236f4:	4620      	mov	r0, r4
   236f6:	4629      	mov	r1, r5
   236f8:	f7e8 fdf8 	bl	c2ec <__adddf3>
    struct sensor_value hum;
    sensor_channel_get(hts221, SENSOR_CHAN_HUMIDITY, &hum);
    float humValue = (float) sensor_value_to_double(&hum);
   236fc:	f7e9 f9be 	bl	ca7c <__aeabi_d2f>
    return sfloat_from_float(humValue).val;
   23700:	f00e fb94 	bl	31e2c <sfloat_from_float>
}
   23704:	b280      	uxth	r0, r0
   23706:	b003      	add	sp, #12
   23708:	bd30      	pop	{r4, r5, pc}
   2370a:	bf00      	nop
   2370c:	f3af 8000 	nop.w
   23710:	00000000 	.word	0x00000000
   23714:	412e8480 	.word	0x412e8480
   23718:	0003c220 	.word	0x0003c220
   2371c:	00000000 	.word	0x00000000

00023720 <getTemperatureValue>:

uint16_t getTemperatureValue() {
   23720:	b537      	push	{r0, r1, r2, r4, r5, lr}
	return api->channel_get(dev, chan, val);
   23722:	4813      	ldr	r0, [pc, #76]	; (23770 <getTemperatureValue+0x50>)
   23724:	6883      	ldr	r3, [r0, #8]
   23726:	466a      	mov	r2, sp
   23728:	691b      	ldr	r3, [r3, #16]
   2372a:	210d      	movs	r1, #13
   2372c:	4798      	blx	r3
	return (double)val->val1 + (double)val->val2 / 1000000;
   2372e:	9801      	ldr	r0, [sp, #4]
   23730:	f7e8 ff28 	bl	c584 <__aeabi_i2d>
   23734:	a30c      	add	r3, pc, #48	; (adr r3, 23768 <getTemperatureValue+0x48>)
   23736:	e9d3 2300 	ldrd	r2, r3, [r3]
   2373a:	f7e9 f8b7 	bl	c8ac <__aeabi_ddiv>
   2373e:	4604      	mov	r4, r0
   23740:	9800      	ldr	r0, [sp, #0]
   23742:	460d      	mov	r5, r1
   23744:	f7e8 ff1e 	bl	c584 <__aeabi_i2d>
   23748:	4602      	mov	r2, r0
   2374a:	460b      	mov	r3, r1
   2374c:	4620      	mov	r0, r4
   2374e:	4629      	mov	r1, r5
   23750:	f7e8 fdcc 	bl	c2ec <__adddf3>
    struct sensor_value temp;
    sensor_channel_get(hts221, SENSOR_CHAN_AMBIENT_TEMP, &temp);
    float tempValue = (float) sensor_value_to_double(&temp);
   23754:	f7e9 f992 	bl	ca7c <__aeabi_d2f>
    return sfloat_from_float(tempValue).val;
   23758:	f00e fb68 	bl	31e2c <sfloat_from_float>
   2375c:	b280      	uxth	r0, r0
   2375e:	b003      	add	sp, #12
   23760:	bd30      	pop	{r4, r5, pc}
   23762:	bf00      	nop
   23764:	f3af 8000 	nop.w
   23768:	00000000 	.word	0x00000000
   2376c:	412e8480 	.word	0x412e8480
   23770:	0003c220 	.word	0x0003c220
   23774:	00000000 	.word	0x00000000

00023778 <getBatteryPercentage>:
		printk("Battery setup failed");
	}
	return rc;
}

uint16_t getBatteryPercentage(){
   23778:	b573      	push	{r0, r1, r4, r5, r6, lr}

	struct divider_data *ddp = &divider_data;
	const struct divider_config *dcp = &divider_config;
	struct adc_sequence *sp = &ddp->adc_seq;

	rc = adc_read(ddp->adc, sp);
   2377a:	4d29      	ldr	r5, [pc, #164]	; (23820 <getBatteryPercentage+0xa8>)
   2377c:	4629      	mov	r1, r5
   2377e:	f851 0b0c 	ldr.w	r0, [r1], #12
				  const struct adc_sequence *sequence)
{
	const struct adc_driver_api *api =
				(const struct adc_driver_api *)dev->api;

	return api->read(dev, sequence);
   23782:	6883      	ldr	r3, [r0, #8]
   23784:	685b      	ldr	r3, [r3, #4]
   23786:	4798      	blx	r3
	sp->calibrate = false;
   23788:	2300      	movs	r3, #0
   2378a:	77ab      	strb	r3, [r5, #30]
	if (rc == 0) {
   2378c:	4604      	mov	r4, r0
   2378e:	2800      	cmp	r0, #0
   23790:	d135      	bne.n	237fe <getBatteryPercentage+0x86>
 * @return a positive value is the reference voltage value.  Returns
 * zero if reference voltage information is not available.
 */
static inline uint16_t adc_ref_internal(const struct device *dev)
{
	const struct adc_driver_api *api =
   23792:	682b      	ldr	r3, [r5, #0]
		int32_t val = ddp->raw;
   23794:	f9b5 4020 	ldrsh.w	r4, [r5, #32]
				(const struct adc_driver_api *)dev->api;

	return api->ref_internal;
   23798:	689b      	ldr	r3, [r3, #8]
					enum adc_gain gain,
					uint8_t resolution,
					int32_t *valp)
{
	int32_t adc_mv = *valp * ref_mv;
	int ret = adc_gain_invert(gain, &adc_mv);
   2379a:	7928      	ldrb	r0, [r5, #4]

		adc_raw_to_millivolts(adc_ref_internal(ddp->adc),
   2379c:	891b      	ldrh	r3, [r3, #8]
   2379e:	7f2e      	ldrb	r6, [r5, #28]
	int32_t adc_mv = *valp * ref_mv;
   237a0:	4363      	muls	r3, r4
	int ret = adc_gain_invert(gain, &adc_mv);
   237a2:	a901      	add	r1, sp, #4
	int32_t adc_mv = *valp * ref_mv;
   237a4:	9301      	str	r3, [sp, #4]
	int ret = adc_gain_invert(gain, &adc_mv);
   237a6:	f00b f99b 	bl	2eae0 <adc_gain_invert>

	if (ret == 0) {
   237aa:	b908      	cbnz	r0, 237b0 <getBatteryPercentage+0x38>
		*valp = (adc_mv >> resolution);
   237ac:	9c01      	ldr	r4, [sp, #4]
   237ae:	4134      	asrs	r4, r6
						ddp->adc_cfg.gain,
						sp->resolution,
						&val);

		// See the Appendix B3 for the reasoning of the percentage formula
		float batteryMillivolt = (float) (val * (uint64_t)dcp->full_ohm / dcp->output_ohm);
   237b0:	481c      	ldr	r0, [pc, #112]	; (23824 <getBatteryPercentage+0xac>)
   237b2:	4a1d      	ldr	r2, [pc, #116]	; (23828 <getBatteryPercentage+0xb0>)
   237b4:	2300      	movs	r3, #0
   237b6:	fb84 0100 	smull	r0, r1, r4, r0
   237ba:	f7e9 fd19 	bl	d1f0 <__aeabi_uldivmod>
   237be:	f7e9 fa75 	bl	ccac <__aeabi_ul2f>
		float voltage = batteryMillivolt / 1000;
   237c2:	491a      	ldr	r1, [pc, #104]	; (2382c <getBatteryPercentage+0xb4>)
   237c4:	f7e9 fb6c 	bl	cea0 <__aeabi_fdiv>

		float percentage = (1.0919045 * voltage) - 10.2228467;
   237c8:	f7e8 feee 	bl	c5a8 <__aeabi_f2d>
   237cc:	a310      	add	r3, pc, #64	; (adr r3, 23810 <getBatteryPercentage+0x98>)
   237ce:	e9d3 2300 	ldrd	r2, r3, [r3]
   237d2:	f7e8 ff41 	bl	c658 <__aeabi_dmul>
   237d6:	a310      	add	r3, pc, #64	; (adr r3, 23818 <getBatteryPercentage+0xa0>)
   237d8:	e9d3 2300 	ldrd	r2, r3, [r3]
   237dc:	f7e8 fd84 	bl	c2e8 <__aeabi_dsub>
   237e0:	f7e9 f94c 	bl	ca7c <__aeabi_d2f>
   237e4:	4604      	mov	r4, r0
		//voltage formula: volt = 0.0105 * percentage + 3.1734
		// percentage formula: percentage = (volt - 3.1734) / 0.0105
		// float percentage = (batteryMillivolt - 3173.4) / 10.5;
		printk("Battery percentage: %d", (int) percentage);
   237e6:	f7e9 fc6d 	bl	d0c4 <__aeabi_f2iz>
   237ea:	4601      	mov	r1, r0
   237ec:	4810      	ldr	r0, [pc, #64]	; (23830 <getBatteryPercentage+0xb8>)
   237ee:	f014 ff88 	bl	38702 <printk>
		return sfloat_from_float(percentage).val;
   237f2:	4620      	mov	r0, r4
   237f4:	f00e fb1a 	bl	31e2c <sfloat_from_float>
   237f8:	b280      	uxth	r0, r0
	} else {
		printk("Battery read failed: %d", rc);
	}

	return rc;
}
   237fa:	b002      	add	sp, #8
   237fc:	bd70      	pop	{r4, r5, r6, pc}
		printk("Battery read failed: %d", rc);
   237fe:	4601      	mov	r1, r0
   23800:	480c      	ldr	r0, [pc, #48]	; (23834 <getBatteryPercentage+0xbc>)
   23802:	f014 ff7e 	bl	38702 <printk>
	return rc;
   23806:	b2a0      	uxth	r0, r4
   23808:	e7f7      	b.n	237fa <getBatteryPercentage+0x82>
   2380a:	bf00      	nop
   2380c:	f3af 8000 	nop.w
   23810:	da5daf08 	.word	0xda5daf08
   23814:	3ff17870 	.word	0x3ff17870
   23818:	f6710b05 	.word	0xf6710b05
   2381c:	40247218 	.word	0x40247218
   23820:	20000614 	.word	0x20000614
   23824:	0019a280 	.word	0x0019a280
   23828:	0002bf20 	.word	0x0002bf20
   2382c:	447a0000 	.word	0x447a0000
   23830:	0003d249 	.word	0x0003d249
   23834:	0003d260 	.word	0x0003d260

00023838 <lis2dh_attr_set>:

static int lis2dh_attr_set(const struct device *dev, enum sensor_channel chan,
			   enum sensor_attribute attr,
			   const struct sensor_value *val)
{
	switch (chan) {
   23838:	2903      	cmp	r1, #3
{
   2383a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2383c:	4605      	mov	r5, r0
   2383e:	4614      	mov	r4, r2
	switch (chan) {
   23840:	d871      	bhi.n	23926 <lis2dh_attr_set+0xee>
	switch (attr) {
   23842:	2a00      	cmp	r2, #0
   23844:	d040      	beq.n	238c8 <lis2dh_attr_set+0x90>
   23846:	2a07      	cmp	r2, #7
   23848:	d15c      	bne.n	23904 <lis2dh_attr_set+0xcc>
	int64_t micro_ms2 = ms2->val1 * 1000000LL + ms2->val2;
   2384a:	685a      	ldr	r2, [r3, #4]
   2384c:	681c      	ldr	r4, [r3, #0]
   2384e:	483a      	ldr	r0, [pc, #232]	; (23938 <lis2dh_attr_set+0x100>)
   23850:	17d1      	asrs	r1, r2, #31
   23852:	4613      	mov	r3, r2
   23854:	fbc4 3100 	smlal	r3, r1, r4, r0
	if (micro_ms2 > 0) {
   23858:	2b01      	cmp	r3, #1
   2385a:	f171 0200 	sbcs.w	r2, r1, #0
   2385e:	db25      	blt.n	238ac <lis2dh_attr_set+0x74>
		return (micro_ms2 + SENSOR_G / 2) / SENSOR_G;
   23860:	f500 106e 	add.w	r0, r0, #3899392	; 0x3b8000
   23864:	f600 705d 	addw	r0, r0, #3933	; 0xf5d
   23868:	1818      	adds	r0, r3, r0
   2386a:	a331      	add	r3, pc, #196	; (adr r3, 23930 <lis2dh_attr_set+0xf8>)
   2386c:	e9d3 2300 	ldrd	r2, r3, [r3]
   23870:	f141 0100 	adc.w	r1, r1, #0
		return (micro_ms2 - SENSOR_G / 2) / SENSOR_G;
   23874:	f7e9 fc6c 	bl	d150 <__aeabi_ldivmod>
		if (range == LIS2DH_RANGE_IDX_TO_VALUE(i)) {
   23878:	b280      	uxth	r0, r0
   2387a:	2802      	cmp	r0, #2
   2387c:	d01e      	beq.n	238bc <lis2dh_attr_set+0x84>
   2387e:	2804      	cmp	r0, #4
   23880:	d01e      	beq.n	238c0 <lis2dh_attr_set+0x88>
   23882:	2808      	cmp	r0, #8
   23884:	d01e      	beq.n	238c4 <lis2dh_attr_set+0x8c>
   23886:	2810      	cmp	r0, #16
   23888:	d133      	bne.n	238f2 <lis2dh_attr_set+0xba>
   2388a:	2303      	movs	r3, #3
	lis2dh->scale = lis2dh_reg_val_to_scale[fs];
   2388c:	492b      	ldr	r1, [pc, #172]	; (2393c <lis2dh_attr_set+0x104>)
	struct lis2dh_data *lis2dh = dev->data;
   2388e:	692a      	ldr	r2, [r5, #16]
	lis2dh->scale = lis2dh_reg_val_to_scale[fs];
   23890:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
   23894:	6111      	str	r1, [r2, #16]
	return lis2dh->hw_tf->update_reg(dev, LIS2DH_REG_CTRL4,
   23896:	6852      	ldr	r2, [r2, #4]
   23898:	6914      	ldr	r4, [r2, #16]
   2389a:	011b      	lsls	r3, r3, #4
   2389c:	2230      	movs	r2, #48	; 0x30
   2389e:	2123      	movs	r1, #35	; 0x23
   238a0:	4628      	mov	r0, r5
   238a2:	46a4      	mov	ip, r4
		LOG_WRN("attr_set() not supported on this channel.");
		return -ENOTSUP;
	}

	return 0;
}
   238a4:	b002      	add	sp, #8
   238a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return lis2dh->hw_tf->update_reg(dev, LIS2DH_REG_CTRL4,
   238aa:	4760      	bx	ip
   238ac:	4824      	ldr	r0, [pc, #144]	; (23940 <lis2dh_attr_set+0x108>)
   238ae:	1818      	adds	r0, r3, r0
   238b0:	f161 0100 	sbc.w	r1, r1, #0
   238b4:	a31e      	add	r3, pc, #120	; (adr r3, 23930 <lis2dh_attr_set+0xf8>)
   238b6:	e9d3 2300 	ldrd	r2, r3, [r3]
   238ba:	e7db      	b.n	23874 <lis2dh_attr_set+0x3c>
	for (i = 0; i < LIS2DH_NUM_RANGES; i++) {
   238bc:	2300      	movs	r3, #0
   238be:	e7e5      	b.n	2388c <lis2dh_attr_set+0x54>
		if (range == LIS2DH_RANGE_IDX_TO_VALUE(i)) {
   238c0:	2301      	movs	r3, #1
   238c2:	e7e3      	b.n	2388c <lis2dh_attr_set+0x54>
   238c4:	2302      	movs	r3, #2
   238c6:	e7e1      	b.n	2388c <lis2dh_attr_set+0x54>
		return lis2dh_acc_odr_set(dev, val->val1);
   238c8:	881a      	ldrh	r2, [r3, #0]
	for (i = 0; i < ARRAY_SIZE(lis2dh_odr_map); i++) {
   238ca:	4b1e      	ldr	r3, [pc, #120]	; (23944 <lis2dh_attr_set+0x10c>)
		if (freq == lis2dh_odr_map[i]) {
   238cc:	f833 1b02 	ldrh.w	r1, [r3], #2
   238d0:	428a      	cmp	r2, r1
   238d2:	d10b      	bne.n	238ec <lis2dh_attr_set+0xb4>
	struct lis2dh_data *data = dev->data;
   238d4:	692e      	ldr	r6, [r5, #16]
	status = data->hw_tf->read_reg(dev, LIS2DH_REG_CTRL1, &value);
   238d6:	6873      	ldr	r3, [r6, #4]
   238d8:	f10d 0207 	add.w	r2, sp, #7
   238dc:	689b      	ldr	r3, [r3, #8]
   238de:	2120      	movs	r1, #32
   238e0:	4628      	mov	r0, r5
   238e2:	4798      	blx	r3
	if (status < 0) {
   238e4:	2800      	cmp	r0, #0
   238e6:	da07      	bge.n	238f8 <lis2dh_attr_set+0xc0>
}
   238e8:	b002      	add	sp, #8
   238ea:	bd70      	pop	{r4, r5, r6, pc}
	for (i = 0; i < ARRAY_SIZE(lis2dh_odr_map); i++) {
   238ec:	3401      	adds	r4, #1
   238ee:	2c0b      	cmp	r4, #11
   238f0:	d1ec      	bne.n	238cc <lis2dh_attr_set+0x94>
	return -EINVAL;
   238f2:	f06f 0015 	mvn.w	r0, #21
   238f6:	e7f7      	b.n	238e8 <lis2dh_attr_set+0xb0>
	if ((value & LIS2DH_LP_EN_BIT_MASK) == 0U && odr == LIS2DH_ODR_8) {
   238f8:	f89d 2007 	ldrb.w	r2, [sp, #7]
   238fc:	0713      	lsls	r3, r2, #28
   238fe:	d404      	bmi.n	2390a <lis2dh_attr_set+0xd2>
   23900:	2c08      	cmp	r4, #8
   23902:	d105      	bne.n	23910 <lis2dh_attr_set+0xd8>
	switch (attr) {
   23904:	f06f 0085 	mvn.w	r0, #133	; 0x85
   23908:	e7ee      	b.n	238e8 <lis2dh_attr_set+0xb0>
	if (((value & LIS2DH_LP_EN_BIT_MASK) == LIS2DH_LP_EN_BIT_MASK) &&
   2390a:	2c0a      	cmp	r4, #10
		odr--;
   2390c:	bf08      	it	eq
   2390e:	2409      	moveq	r4, #9
	return data->hw_tf->write_reg(dev, LIS2DH_REG_CTRL1,
   23910:	6873      	ldr	r3, [r6, #4]
				      (value & ~LIS2DH_ODR_MASK) |
   23912:	f002 020f 	and.w	r2, r2, #15
	return data->hw_tf->write_reg(dev, LIS2DH_REG_CTRL1,
   23916:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
   2391a:	68db      	ldr	r3, [r3, #12]
   2391c:	b2d2      	uxtb	r2, r2
   2391e:	2120      	movs	r1, #32
   23920:	4628      	mov	r0, r5
   23922:	4798      	blx	r3
   23924:	e7e0      	b.n	238e8 <lis2dh_attr_set+0xb0>
}
   23926:	b002      	add	sp, #8
   23928:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   2392c:	f00d b84e 	b.w	309cc <lis2dh_attr_set.part.0>
   23930:	0095a33a 	.word	0x0095a33a
   23934:	00000000 	.word	0x00000000
   23938:	000f4240 	.word	0x000f4240
   2393c:	20000864 	.word	0x20000864
   23940:	ffb52e63 	.word	0xffb52e63
   23944:	0003cf58 	.word	0x0003cf58

00023948 <sendAdvertisement>:
    .sent = sentAdvertisement,
	.connected = NULL,
    .scanned = NULL
};

void sendAdvertisement(){
   23948:	b530      	push	{r4, r5, lr}
    int err;
    // setting new sensor values here
    advertisementData.rollover++;
   2394a:	4c1e      	ldr	r4, [pc, #120]	; (239c4 <sendAdvertisement+0x7c>)
   2394c:	78e3      	ldrb	r3, [r4, #3]
void sendAdvertisement(){
   2394e:	b085      	sub	sp, #20
    advertisementData.rollover++;
   23950:	3301      	adds	r3, #1
   23952:	70e3      	strb	r3, [r4, #3]
    advertisementData.co2 = getGasValue();
   23954:	f7ff fe74 	bl	23640 <getGasValue>
   23958:	6060      	str	r0, [r4, #4]
    advertisementData.batteryPercentage = getBatteryPercentage();
   2395a:	f7ff ff0d 	bl	23778 <getBatteryPercentage>
   2395e:	81a0      	strh	r0, [r4, #12]

    err = readHumiditySensor();
   23960:	f000 f904 	bl	23b6c <readHumiditySensor>
    if(err == 0){
   23964:	bb58      	cbnz	r0, 239be <sendAdvertisement+0x76>
        advertisementData.humidity = getHumidityValue();
   23966:	f7ff feaf 	bl	236c8 <getHumidityValue>
   2396a:	8120      	strh	r0, [r4, #8]
        advertisementData.temp = getTemperatureValue();
   2396c:	f7ff fed8 	bl	23720 <getTemperatureValue>
   23970:	8160      	strh	r0, [r4, #10]
    } else {
        advertisementData.humidity = 0xFF;
        advertisementData.temp = 0xFF;
    }

    err = bt_le_ext_adv_set_data(advertisement, advertisementPacket, ARRAY_SIZE(advertisementPacket), NULL, 0);
   23972:	4d15      	ldr	r5, [pc, #84]	; (239c8 <sendAdvertisement+0x80>)
   23974:	4915      	ldr	r1, [pc, #84]	; (239cc <sendAdvertisement+0x84>)
   23976:	2400      	movs	r4, #0
   23978:	9400      	str	r4, [sp, #0]
   2397a:	6828      	ldr	r0, [r5, #0]
   2397c:	4623      	mov	r3, r4
   2397e:	2202      	movs	r2, #2
   23980:	f016 f818 	bl	399b4 <bt_le_ext_adv_set_data>
    if (err) {
   23984:	4601      	mov	r1, r0
   23986:	b120      	cbz	r0, 23992 <sendAdvertisement+0x4a>
            printk("Failed to set advertising data (%d)\n", err);
   23988:	4811      	ldr	r0, [pc, #68]	; (239d0 <sendAdvertisement+0x88>)
   2398a:	f014 feba 	bl	38702 <printk>
            isRunning = false;
   2398e:	4b11      	ldr	r3, [pc, #68]	; (239d4 <sendAdvertisement+0x8c>)
   23990:	701c      	strb	r4, [r3, #0]
    }
    err = bt_le_ext_adv_start(advertisement, BT_LE_EXT_ADV_START_PARAM(0, 1));
   23992:	2301      	movs	r3, #1
   23994:	a903      	add	r1, sp, #12
   23996:	6828      	ldr	r0, [r5, #0]
   23998:	f88d 300e 	strb.w	r3, [sp, #14]
   2399c:	2400      	movs	r4, #0
   2399e:	f8ad 400c 	strh.w	r4, [sp, #12]
   239a2:	f006 fcef 	bl	2a384 <bt_le_ext_adv_start>
    if (err) {
   239a6:	4601      	mov	r1, r0
   239a8:	b120      	cbz	r0, 239b4 <sendAdvertisement+0x6c>
            printk("Failed to start advertising set (%d)\n", err);
   239aa:	480b      	ldr	r0, [pc, #44]	; (239d8 <sendAdvertisement+0x90>)
   239ac:	f014 fea9 	bl	38702 <printk>
            isRunning = false;
   239b0:	4b08      	ldr	r3, [pc, #32]	; (239d4 <sendAdvertisement+0x8c>)
   239b2:	701c      	strb	r4, [r3, #0]
    }
    printk("Advertising packet sent.\n");
   239b4:	4809      	ldr	r0, [pc, #36]	; (239dc <sendAdvertisement+0x94>)
   239b6:	f014 fea4 	bl	38702 <printk>
}
   239ba:	b005      	add	sp, #20
   239bc:	bd30      	pop	{r4, r5, pc}
        advertisementData.humidity = 0xFF;
   239be:	20ff      	movs	r0, #255	; 0xff
   239c0:	8120      	strh	r0, [r4, #8]
        advertisementData.temp = 0xFF;
   239c2:	e7d5      	b.n	23970 <sendAdvertisement+0x28>
   239c4:	20000604 	.word	0x20000604
   239c8:	20002d78 	.word	0x20002d78
   239cc:	200005f4 	.word	0x200005f4
   239d0:	0003cf6e 	.word	0x0003cf6e
   239d4:	2000097d 	.word	0x2000097d
   239d8:	0003cf93 	.word	0x0003cf93
   239dc:	0003cfb9 	.word	0x0003cfb9

000239e0 <sentAdvertisement>:
void sentAdvertisement(struct bt_le_ext_adv *adv, struct bt_le_ext_adv_sent_info *info){    
   239e0:	b508      	push	{r3, lr}
    printk("Advertising packet transmitted successfully(%i).\n", info->num_sent);
   239e2:	480d      	ldr	r0, [pc, #52]	; (23a18 <sentAdvertisement+0x38>)
   239e4:	7809      	ldrb	r1, [r1, #0]
   239e6:	f014 fe8c 	bl	38702 <printk>
    dk_set_led(ADV_DONE_LED, false);
   239ea:	2100      	movs	r1, #0
   239ec:	2002      	movs	r0, #2
   239ee:	f00e f9bd 	bl	31d6c <dk_set_led>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm0 = { .val = timeout };
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
   239f2:	2100      	movs	r1, #0
   239f4:	f44f 70a4 	mov.w	r0, #328	; 0x148
   239f8:	f013 fb54 	bl	370a4 <z_impl_k_sleep>
    dk_set_led(ADV_DONE_LED, true);
   239fc:	2101      	movs	r1, #1
   239fe:	2002      	movs	r0, #2
   23a00:	f00e f9b4 	bl	31d6c <dk_set_led>
   23a04:	f44f 3080 	mov.w	r0, #65536	; 0x10000
   23a08:	2100      	movs	r1, #0
   23a0a:	f013 fb4b 	bl	370a4 <z_impl_k_sleep>
}
   23a0e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    sendAdvertisement();
   23a12:	f7ff bf99 	b.w	23948 <sendAdvertisement>
   23a16:	bf00      	nop
   23a18:	0003cfd3 	.word	0x0003cfd3

00023a1c <main>:

void main(void)
{
   23a1c:	b5f0      	push	{r4, r5, r6, r7, lr}
    int err;

    LOG_INF("Built on %s at %s\n", __DATE__, __TIME__);
   23a1e:	4b34      	ldr	r3, [pc, #208]	; (23af0 <main+0xd4>)
{
   23a20:	b087      	sub	sp, #28
    LOG_INF("Built on %s at %s\n", __DATE__, __TIME__);
   23a22:	681b      	ldr	r3, [r3, #0]
   23a24:	f003 0307 	and.w	r3, r3, #7
   23a28:	2b02      	cmp	r3, #2
{
   23a2a:	af00      	add	r7, sp, #0
    LOG_INF("Built on %s at %s\n", __DATE__, __TIME__);
   23a2c:	d920      	bls.n	23a70 <main+0x54>
   23a2e:	466c      	mov	r4, sp
   23a30:	b08a      	sub	sp, #40	; 0x28
   23a32:	466b      	mov	r3, sp
   23a34:	492f      	ldr	r1, [pc, #188]	; (23af4 <main+0xd8>)
   23a36:	6159      	str	r1, [r3, #20]
   23a38:	492f      	ldr	r1, [pc, #188]	; (23af8 <main+0xdc>)
   23a3a:	6199      	str	r1, [r3, #24]
   23a3c:	492f      	ldr	r1, [pc, #188]	; (23afc <main+0xe0>)
   23a3e:	6079      	str	r1, [r7, #4]
   23a40:	492f      	ldr	r1, [pc, #188]	; (23b00 <main+0xe4>)
   23a42:	61d9      	str	r1, [r3, #28]
   23a44:	f103 0210 	add.w	r2, r3, #16
   23a48:	1d38      	adds	r0, r7, #4
   23a4a:	f103 011f 	add.w	r1, r3, #31
   23a4e:	f103 0523 	add.w	r5, r3, #35	; 0x23
   23a52:	f810 6b01 	ldrb.w	r6, [r0], #1
   23a56:	f801 6f01 	strb.w	r6, [r1, #1]!
   23a5a:	42a9      	cmp	r1, r5
   23a5c:	d1f9      	bne.n	23a52 <main+0x36>
   23a5e:	4929      	ldr	r1, [pc, #164]	; (23b04 <main+0xe8>)
   23a60:	6119      	str	r1, [r3, #16]
		(void) arch_syscall_invoke4(parm0.x, parm1.x, parm2.x, parm3.x, K_SYSCALL_Z_LOG_MSG_STATIC_CREATE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_static_create(source, desc, package, data);
   23a62:	4823      	ldr	r0, [pc, #140]	; (23af0 <main+0xd4>)
   23a64:	2300      	movs	r3, #0
   23a66:	f44f 5123 	mov.w	r1, #10432	; 0x28c0
   23a6a:	f002 fb9f 	bl	261ac <z_impl_z_log_msg_static_create>
   23a6e:	46a5      	mov	sp, r4

    // Initialize Bluetooth subsystem
    err = bt_enable(NULL);
   23a70:	2000      	movs	r0, #0
   23a72:	f005 fdb3 	bl	295dc <bt_enable>
    if (err) {
   23a76:	4601      	mov	r1, r0
   23a78:	b128      	cbz	r0, 23a86 <main+0x6a>
        printk("Bluetooth init failed (err %d)\n", err);
   23a7a:	4823      	ldr	r0, [pc, #140]	; (23b08 <main+0xec>)
        return;
    }

     err = initBattery();
    if(err) {
        printk("Battery init failed (err %d)\n", err);
   23a7c:	f014 fe41 	bl	38702 <printk>
        k_sleep(K_MSEC(300));
        
        dk_set_led(RUN_STATUS_LED, (++blinkStatus) % 2);
    }
    return;
}
   23a80:	371c      	adds	r7, #28
   23a82:	46bd      	mov	sp, r7
   23a84:	bdf0      	pop	{r4, r5, r6, r7, pc}
    err = bt_le_ext_adv_create(BT_LE_ADV_NCONN_IDENTITY, &advertisingCallbacks, &advertisement);
   23a86:	4d21      	ldr	r5, [pc, #132]	; (23b0c <main+0xf0>)
   23a88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   23a8a:	1d3c      	adds	r4, r7, #4
   23a8c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   23a8e:	682b      	ldr	r3, [r5, #0]
   23a90:	491f      	ldr	r1, [pc, #124]	; (23b10 <main+0xf4>)
   23a92:	4a20      	ldr	r2, [pc, #128]	; (23b14 <main+0xf8>)
   23a94:	6023      	str	r3, [r4, #0]
   23a96:	1d38      	adds	r0, r7, #4
   23a98:	f006 fc42 	bl	2a320 <bt_le_ext_adv_create>
    if (err) {
   23a9c:	4601      	mov	r1, r0
   23a9e:	b108      	cbz	r0, 23aa4 <main+0x88>
        printk("Extended advertisement creation failed (err %d)\n", err);
   23aa0:	481d      	ldr	r0, [pc, #116]	; (23b18 <main+0xfc>)
   23aa2:	e7eb      	b.n	23a7c <main+0x60>
    err = initGasSensor();
   23aa4:	f000 f84e 	bl	23b44 <initGasSensor>
    if(err) {
   23aa8:	4601      	mov	r1, r0
   23aaa:	b108      	cbz	r0, 23ab0 <main+0x94>
        printk("Gas sensor init failed (err %d)\n", err);
   23aac:	481b      	ldr	r0, [pc, #108]	; (23b1c <main+0x100>)
   23aae:	e7e5      	b.n	23a7c <main+0x60>
    err = initHumiditySensor();
   23ab0:	f000 f852 	bl	23b58 <initHumiditySensor>
    if(err) {
   23ab4:	4601      	mov	r1, r0
   23ab6:	b108      	cbz	r0, 23abc <main+0xa0>
        printk("Humidity sensor init failed (err %d)\n", err);
   23ab8:	4819      	ldr	r0, [pc, #100]	; (23b20 <main+0x104>)
   23aba:	e7df      	b.n	23a7c <main+0x60>
     err = initBattery();
   23abc:	f000 f868 	bl	23b90 <initBattery>
    if(err) {
   23ac0:	4604      	mov	r4, r0
   23ac2:	b110      	cbz	r0, 23aca <main+0xae>
        printk("Battery init failed (err %d)\n", err);
   23ac4:	4601      	mov	r1, r0
   23ac6:	4817      	ldr	r0, [pc, #92]	; (23b24 <main+0x108>)
   23ac8:	e7d8      	b.n	23a7c <main+0x60>
    sendAdvertisement();
   23aca:	f7ff ff3d 	bl	23948 <sendAdvertisement>
    while (isRunning) {
   23ace:	4d16      	ldr	r5, [pc, #88]	; (23b28 <main+0x10c>)
   23ad0:	782b      	ldrb	r3, [r5, #0]
   23ad2:	2b00      	cmp	r3, #0
   23ad4:	d0d4      	beq.n	23a80 <main+0x64>
   23ad6:	2100      	movs	r1, #0
        dk_set_led(RUN_STATUS_LED, (++blinkStatus) % 2);
   23ad8:	3401      	adds	r4, #1
   23ada:	f242 6067 	movw	r0, #9831	; 0x2667
   23ade:	f013 fae1 	bl	370a4 <z_impl_k_sleep>
   23ae2:	f004 0101 	and.w	r1, r4, #1
   23ae6:	2000      	movs	r0, #0
   23ae8:	f00e f940 	bl	31d6c <dk_set_led>
   23aec:	e7f0      	b.n	23ad0 <main+0xb4>
   23aee:	bf00      	nop
   23af0:	20000ad0 	.word	0x20000ad0
   23af4:	0003d005 	.word	0x0003d005
   23af8:	0003d018 	.word	0x0003d018
   23afc:	03010200 	.word	0x03010200
   23b00:	0003d024 	.word	0x0003d024
   23b04:	02000004 	.word	0x02000004
   23b08:	0003d02d 	.word	0x0003d02d
   23b0c:	0003c620 	.word	0x0003c620
   23b10:	200005e8 	.word	0x200005e8
   23b14:	20002d78 	.word	0x20002d78
   23b18:	0003d04d 	.word	0x0003d04d
   23b1c:	0003d07e 	.word	0x0003d07e
   23b20:	0003d09f 	.word	0x0003d09f
   23b24:	0003d0c5 	.word	0x0003d0c5
   23b28:	2000097d 	.word	0x2000097d

00023b2c <sensor_channel_get.constprop.0.isra.0>:


extern int z_impl_sensor_channel_get(const struct device * dev, enum sensor_channel chan, struct sensor_value * val);

__pinned_func
static inline int sensor_channel_get(const struct device * dev, enum sensor_channel chan, struct sensor_value * val)
   23b2c:	b410      	push	{r4}
   23b2e:	4603      	mov	r3, r0
   23b30:	460a      	mov	r2, r1
	return api->channel_get(dev, chan, val);
   23b32:	4803      	ldr	r0, [pc, #12]	; (23b40 <sensor_channel_get.constprop.0.isra.0+0x14>)
   23b34:	6881      	ldr	r1, [r0, #8]
   23b36:	690c      	ldr	r4, [r1, #16]
   23b38:	4619      	mov	r1, r3
   23b3a:	4623      	mov	r3, r4
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_SENSOR_CHANNEL_GET);
	}
#endif
	compiler_barrier();
	return z_impl_sensor_channel_get(dev, chan, val);
}
   23b3c:	bc10      	pop	{r4}
   23b3e:	4718      	bx	r3
   23b40:	0003c208 	.word	0x0003c208

00023b44 <initGasSensor>:
int initGasSensor() {
   23b44:	b508      	push	{r3, lr}
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
   23b46:	4803      	ldr	r0, [pc, #12]	; (23b54 <initGasSensor+0x10>)
   23b48:	f018 f828 	bl	3bb9c <z_device_is_ready>
    return !device_is_ready(ccs811);
   23b4c:	f080 0001 	eor.w	r0, r0, #1
}
   23b50:	b2c0      	uxtb	r0, r0
   23b52:	bd08      	pop	{r3, pc}
   23b54:	0003c208 	.word	0x0003c208

00023b58 <initHumiditySensor>:
int initHumiditySensor(){
   23b58:	b508      	push	{r3, lr}
   23b5a:	4803      	ldr	r0, [pc, #12]	; (23b68 <initHumiditySensor+0x10>)
   23b5c:	f018 f81e 	bl	3bb9c <z_device_is_ready>
    return !device_is_ready(hts221);
   23b60:	f080 0001 	eor.w	r0, r0, #1
}
   23b64:	b2c0      	uxtb	r0, r0
   23b66:	bd08      	pop	{r3, pc}
   23b68:	0003c220 	.word	0x0003c220

00023b6c <readHumiditySensor>:
int readHumiditySensor(){
   23b6c:	b508      	push	{r3, lr}
	return api->sample_fetch(dev, SENSOR_CHAN_ALL);
   23b6e:	4806      	ldr	r0, [pc, #24]	; (23b88 <readHumiditySensor+0x1c>)
   23b70:	6883      	ldr	r3, [r0, #8]
   23b72:	2139      	movs	r1, #57	; 0x39
   23b74:	68db      	ldr	r3, [r3, #12]
   23b76:	4798      	blx	r3
    if(err != 0){
   23b78:	b128      	cbz	r0, 23b86 <readHumiditySensor+0x1a>
        printk("Error on sample fetching data from hts221: %d\n", err);
   23b7a:	4601      	mov	r1, r0
   23b7c:	4803      	ldr	r0, [pc, #12]	; (23b8c <readHumiditySensor+0x20>)
   23b7e:	f014 fdc0 	bl	38702 <printk>
        return -1;
   23b82:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   23b86:	bd08      	pop	{r3, pc}
   23b88:	0003c220 	.word	0x0003c220
   23b8c:	0003d117 	.word	0x0003d117

00023b90 <initBattery>:
int initBattery(){
   23b90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		printk("DT_NODE_STATUS_VBATT_OKAY");
   23b94:	4845      	ldr	r0, [pc, #276]	; (23cac <initBattery+0x11c>)
	if (!device_is_ready(ddp->adc)) {
   23b96:	f8df 9118 	ldr.w	r9, [pc, #280]	; 23cb0 <initBattery+0x120>
		printk("DT_NODE_STATUS_VBATT_OKAY");
   23b9a:	f014 fdb2 	bl	38702 <printk>
		printk("CONFIG_ADC_NRFX_SAADC");
   23b9e:	4845      	ldr	r0, [pc, #276]	; (23cb4 <initBattery+0x124>)
   23ba0:	f014 fdaf 	bl	38702 <printk>
	if (!device_is_ready(ddp->adc)) {
   23ba4:	f8d9 0000 	ldr.w	r0, [r9]
   23ba8:	f017 fff8 	bl	3bb9c <z_device_is_ready>
   23bac:	b950      	cbnz	r0, 23bc4 <initBattery+0x34>
		printk("ADC device is not ready %s", ddp->adc->name);
   23bae:	f8d9 3000 	ldr.w	r3, [r9]
   23bb2:	4841      	ldr	r0, [pc, #260]	; (23cb8 <initBattery+0x128>)
   23bb4:	6819      	ldr	r1, [r3, #0]
			printk("%s: device not ready", gcp->port->name);
   23bb6:	f014 fda4 	bl	38702 <printk>
		return -ENOENT;
   23bba:	f06f 0401 	mvn.w	r4, #1
}
   23bbe:	4620      	mov	r0, r4
   23bc0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   23bc4:	4d3d      	ldr	r5, [pc, #244]	; (23cbc <initBattery+0x12c>)
   23bc6:	4628      	mov	r0, r5
   23bc8:	f017 ffe8 	bl	3bb9c <z_device_is_ready>
		if (!device_is_ready(gcp->port)) {
   23bcc:	b910      	cbnz	r0, 23bd4 <initBattery+0x44>
			printk("%s: device not ready", gcp->port->name);
   23bce:	6829      	ldr	r1, [r5, #0]
   23bd0:	483b      	ldr	r0, [pc, #236]	; (23cc0 <initBattery+0x130>)
   23bd2:	e7f0      	b.n	23bb6 <initBattery+0x26>
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
	}

	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;

	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   23bd4:	f8d5 8004 	ldr.w	r8, [r5, #4]
	const struct gpio_driver_api *api =
   23bd8:	68ae      	ldr	r6, [r5, #8]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   23bda:	f8d8 3000 	ldr.w	r3, [r8]
	struct gpio_driver_data *data =
   23bde:	692f      	ldr	r7, [r5, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   23be0:	06d8      	lsls	r0, r3, #27
   23be2:	d40a      	bmi.n	23bfa <initBattery+0x6a>
   23be4:	4937      	ldr	r1, [pc, #220]	; (23cc4 <initBattery+0x134>)
   23be6:	4838      	ldr	r0, [pc, #224]	; (23cc8 <initBattery+0x138>)
   23be8:	f44f 7237 	mov.w	r2, #732	; 0x2dc
   23bec:	f014 ff91 	bl	38b12 <assert_print>
   23bf0:	f44f 7137 	mov.w	r1, #732	; 0x2dc
	__unused const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	const struct gpio_driver_data *const data =
			(const struct gpio_driver_data *)port->data;

	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   23bf4:	4833      	ldr	r0, [pc, #204]	; (23cc4 <initBattery+0x134>)
   23bf6:	f014 ff85 	bl	38b04 <assert_post_action>
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   23bfa:	683b      	ldr	r3, [r7, #0]
   23bfc:	f023 0310 	bic.w	r3, r3, #16
   23c00:	603b      	str	r3, [r7, #0]
	return api->pin_configure(port, pin, flags);
   23c02:	6833      	ldr	r3, [r6, #0]
   23c04:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
   23c08:	2104      	movs	r1, #4
   23c0a:	4628      	mov	r0, r5
   23c0c:	4798      	blx	r3
		if (rc != 0) {
   23c0e:	4604      	mov	r4, r0
   23c10:	b130      	cbz	r0, 23c20 <initBattery+0x90>
			printk("Failed to control feed %s.%u: %d",
   23c12:	4603      	mov	r3, r0
   23c14:	6829      	ldr	r1, [r5, #0]
   23c16:	482d      	ldr	r0, [pc, #180]	; (23ccc <initBattery+0x13c>)
   23c18:	2204      	movs	r2, #4
   23c1a:	f014 fd72 	bl	38702 <printk>
			return rc;
   23c1e:	e7ce      	b.n	23bbe <initBattery+0x2e>
	*asp = (struct adc_sequence){
   23c20:	4601      	mov	r1, r0
   23c22:	2214      	movs	r2, #20
   23c24:	f109 000c 	add.w	r0, r9, #12
   23c28:	f015 fbcd 	bl	393c6 <memset>
   23c2c:	f109 0220 	add.w	r2, r9, #32
	*accp = (struct adc_channel_cfg){
   23c30:	4927      	ldr	r1, [pc, #156]	; (23cd0 <initBattery+0x140>)
	*asp = (struct adc_sequence){
   23c32:	f8c9 2014 	str.w	r2, [r9, #20]
	*accp = (struct adc_channel_cfg){
   23c36:	f44f 62a0 	mov.w	r2, #1280	; 0x500
   23c3a:	e9c9 1201 	strd	r1, r2, [r9, #4]
	*asp = (struct adc_sequence){
   23c3e:	2202      	movs	r2, #2
	rc = adc_channel_setup(ddp->adc, accp);
   23c40:	4649      	mov	r1, r9
	*asp = (struct adc_sequence){
   23c42:	2301      	movs	r3, #1
   23c44:	f8c9 2018 	str.w	r2, [r9, #24]
	asp->resolution = 14;
   23c48:	f240 420e 	movw	r2, #1038	; 0x40e
	rc = adc_channel_setup(ddp->adc, accp);
   23c4c:	f851 0b04 	ldr.w	r0, [r1], #4
	*asp = (struct adc_sequence){
   23c50:	f8c9 3010 	str.w	r3, [r9, #16]
	asp->resolution = 14;
   23c54:	f8a9 201c 	strh.w	r2, [r9, #28]
	*asp = (struct adc_sequence){
   23c58:	f889 301e 	strb.w	r3, [r9, #30]
	return api->channel_setup(dev, channel_cfg);
   23c5c:	6883      	ldr	r3, [r0, #8]
   23c5e:	681b      	ldr	r3, [r3, #0]
   23c60:	4798      	blx	r3
	printk("Setup AIN%u got %d", iocp->channel, rc);
   23c62:	2104      	movs	r1, #4
   23c64:	4604      	mov	r4, r0
   23c66:	4602      	mov	r2, r0
   23c68:	481a      	ldr	r0, [pc, #104]	; (23cd4 <initBattery+0x144>)
   23c6a:	f014 fd4a 	bl	38702 <printk>
	if(rc == 0){
   23c6e:	b9dc      	cbnz	r4, 23ca8 <initBattery+0x118>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   23c70:	f8d8 3000 	ldr.w	r3, [r8]
   23c74:	06da      	lsls	r2, r3, #27
   23c76:	d408      	bmi.n	23c8a <initBattery+0xfa>
   23c78:	4912      	ldr	r1, [pc, #72]	; (23cc4 <initBattery+0x134>)
   23c7a:	4813      	ldr	r0, [pc, #76]	; (23cc8 <initBattery+0x138>)
   23c7c:	f240 5227 	movw	r2, #1319	; 0x527
   23c80:	f014 ff47 	bl	38b12 <assert_print>
   23c84:	f240 5127 	movw	r1, #1319	; 0x527
   23c88:	e7b4      	b.n	23bf4 <initBattery+0x64>
		 "Unsupported pin");

	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   23c8a:	683b      	ldr	r3, [r7, #0]
   23c8c:	06db      	lsls	r3, r3, #27
	return api->port_clear_bits_raw(port, pins);
   23c8e:	f04f 0110 	mov.w	r1, #16
	return api->port_set_bits_raw(port, pins);
   23c92:	bf54      	ite	pl
   23c94:	68f3      	ldrpl	r3, [r6, #12]
	return api->port_clear_bits_raw(port, pins);
   23c96:	6933      	ldrmi	r3, [r6, #16]
   23c98:	4628      	mov	r0, r5
   23c9a:	4798      	blx	r3
   23c9c:	4604      	mov	r4, r0
	if(rc == 0){
   23c9e:	b918      	cbnz	r0, 23ca8 <initBattery+0x118>
		printk("Battery setup OK");
   23ca0:	480d      	ldr	r0, [pc, #52]	; (23cd8 <initBattery+0x148>)
		printk("Battery setup failed");
   23ca2:	f014 fd2e 	bl	38702 <printk>
   23ca6:	e78a      	b.n	23bbe <initBattery+0x2e>
   23ca8:	480c      	ldr	r0, [pc, #48]	; (23cdc <initBattery+0x14c>)
   23caa:	e7fa      	b.n	23ca2 <initBattery+0x112>
   23cac:	0003d146 	.word	0x0003d146
   23cb0:	20000614 	.word	0x20000614
   23cb4:	0003d160 	.word	0x0003d160
   23cb8:	0003d176 	.word	0x0003d176
   23cbc:	0003c1f0 	.word	0x0003c1f0
   23cc0:	0003d191 	.word	0x0003d191
   23cc4:	0003d1a6 	.word	0x0003d1a6
   23cc8:	0003d1d7 	.word	0x0003d1d7
   23ccc:	0003d1ef 	.word	0x0003d1ef
   23cd0:	40280408 	.word	0x40280408
   23cd4:	0003d210 	.word	0x0003d210
   23cd8:	0003d223 	.word	0x0003d223
   23cdc:	0003d234 	.word	0x0003d234

00023ce0 <cbvprintf_package>:
	return cb(str, strl, ctx);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
   23ce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23ce4:	b091      	sub	sp, #68	; 0x44
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
	bool is_str_arg = false;
	union cbprintf_package_hdr *pkg_hdr = packaged;

	/* Buffer must be aligned at least to size of a pointer. */
	if ((uintptr_t)packaged % sizeof(void *)) {
   23ce6:	0784      	lsls	r4, r0, #30
{
   23ce8:	9300      	str	r3, [sp, #0]
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
   23cea:	f002 0304 	and.w	r3, r2, #4
   23cee:	9302      	str	r3, [sp, #8]
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
   23cf0:	f3c2 03c2 	ubfx	r3, r2, #3, #3
   23cf4:	f103 0301 	add.w	r3, r3, #1
   23cf8:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
{
   23cfc:	9203      	str	r2, [sp, #12]
   23cfe:	4605      	mov	r5, r0
   23d00:	460e      	mov	r6, r1
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
   23d02:	9305      	str	r3, [sp, #20]
	if ((uintptr_t)packaged % sizeof(void *)) {
   23d04:	f040 81e4 	bne.w	240d0 <cbvprintf_package+0x3f0>
	 * which is guaranteed to be at least 4 bytes, we just reserve
	 * multiple of pointer size for the above to preserve alignment.
	 *
	 * Refer to union cbprintf_package_hdr for more details.
	 */
	buf += sizeof(*pkg_hdr);
   23d08:	1d04      	adds	r4, r0, #4
	 * When buf0 is NULL we don't store anything.
	 * Instead we count the needed space to store the data.
	 * In this case, incoming len argument indicates the anticipated
	 * buffer "misalignment" offset.
	 */
	if (buf0 == NULL) {
   23d0a:	b130      	cbz	r0, 23d1a <cbvprintf_package+0x3a>

	/*
	 * Otherwise we must ensure we can store at least
	 * the pointer to the format string itself.
	 */
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
   23d0c:	2907      	cmp	r1, #7
   23d0e:	d809      	bhi.n	23d24 <cbvprintf_package+0x44>
		return -ENOSPC;
   23d10:	f06f 001b 	mvn.w	r0, #27
	return BUF_OFFSET;

#undef BUF_OFFSET
#undef STR_POS_RO_FLAG
#undef STR_POS_MASK
}
   23d14:	b011      	add	sp, #68	; 0x44
   23d16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
   23d1a:	f001 0607 	and.w	r6, r1, #7
   23d1e:	1d34      	adds	r4, r6, #4
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
   23d20:	f1c6 0608 	rsb	r6, r6, #8
	s = fmt--;
   23d24:	9b00      	ldr	r3, [sp, #0]
	unsigned int s_ro_cnt = 0; /* number of ro strings */
   23d26:	f04f 0900 	mov.w	r9, #0
	s = fmt--;
   23d2a:	1e59      	subs	r1, r3, #1
	align = VA_STACK_ALIGN(char *);
   23d2c:	f04f 0a04 	mov.w	sl, #4
	int arg_idx	      = -1; /* Argument index. Preincremented thus starting from -1.*/
   23d30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   23d34:	9301      	str	r3, [sp, #4]
	unsigned int s_rw_cnt = 0; /* number of rw strings */
   23d36:	f8cd 9010 	str.w	r9, [sp, #16]
	unsigned int s_idx = 0;    /* index into str_ptr_pos[] */
   23d3a:	464f      	mov	r7, r9
	bool parsing = false;
   23d3c:	46cb      	mov	fp, r9
	size = sizeof(char *);
   23d3e:	4653      	mov	r3, sl
			if (buf0 != NULL) {
   23d40:	b10d      	cbz	r5, 23d46 <cbvprintf_package+0x66>
				*(const char **)buf = s;
   23d42:	9a00      	ldr	r2, [sp, #0]
   23d44:	6022      	str	r2, [r4, #0]
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
   23d46:	9805      	ldr	r0, [sp, #20]
   23d48:	2800      	cmp	r0, #0
   23d4a:	f300 80da 	bgt.w	23f02 <cbvprintf_package+0x222>
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
   23d4e:	4897      	ldr	r0, [pc, #604]	; (23fac <cbvprintf_package+0x2cc>)
   23d50:	9a00      	ldr	r2, [sp, #0]
   23d52:	4282      	cmp	r2, r0
   23d54:	d303      	bcc.n	23d5e <cbvprintf_package+0x7e>
   23d56:	4896      	ldr	r0, [pc, #600]	; (23fb0 <cbvprintf_package+0x2d0>)
   23d58:	4282      	cmp	r2, r0
   23d5a:	f0c0 80d2 	bcc.w	23f02 <cbvprintf_package+0x222>
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
   23d5e:	9a03      	ldr	r2, [sp, #12]
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
   23d60:	eba4 0e05 	sub.w	lr, r4, r5
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
   23d64:	0792      	lsls	r2, r2, #30
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
   23d66:	ea4f 009e 	mov.w	r0, lr, lsr #2
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
   23d6a:	f140 80e1 	bpl.w	23f30 <cbvprintf_package+0x250>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
   23d6e:	f04f 0c00 	mov.w	ip, #0
   23d72:	e0cf      	b.n	23f14 <cbvprintf_package+0x234>
			switch (*fmt) {
   23d74:	287a      	cmp	r0, #122	; 0x7a
   23d76:	d860      	bhi.n	23e3a <cbvprintf_package+0x15a>
   23d78:	284b      	cmp	r0, #75	; 0x4b
   23d7a:	d80e      	bhi.n	23d9a <cbvprintf_package+0xba>
   23d7c:	2847      	cmp	r0, #71	; 0x47
   23d7e:	d85c      	bhi.n	23e3a <cbvprintf_package+0x15a>
   23d80:	2829      	cmp	r0, #41	; 0x29
   23d82:	d82f      	bhi.n	23de4 <cbvprintf_package+0x104>
   23d84:	2825      	cmp	r0, #37	; 0x25
   23d86:	d055      	beq.n	23e34 <cbvprintf_package+0x154>
   23d88:	d857      	bhi.n	23e3a <cbvprintf_package+0x15a>
   23d8a:	2820      	cmp	r0, #32
   23d8c:	d07d      	beq.n	23e8a <cbvprintf_package+0x1aa>
   23d8e:	3823      	subs	r0, #35	; 0x23
   23d90:	f1d0 0b00 	rsbs	fp, r0, #0
   23d94:	eb4b 0b00 	adc.w	fp, fp, r0
   23d98:	e077      	b.n	23e8a <cbvprintf_package+0x1aa>
   23d9a:	f1a0 0c4c 	sub.w	ip, r0, #76	; 0x4c
   23d9e:	f1bc 0f2e 	cmp.w	ip, #46	; 0x2e
   23da2:	d84a      	bhi.n	23e3a <cbvprintf_package+0x15a>
   23da4:	e8df f00c 	tbb	[pc, ip]
   23da8:	49494971 	.word	0x49494971
   23dac:	49494949 	.word	0x49494949
   23db0:	49494949 	.word	0x49494949
   23db4:	4949494c 	.word	0x4949494c
   23db8:	49494949 	.word	0x49494949
   23dbc:	4c495a49 	.word	0x4c495a49
   23dc0:	5a5a5a4c 	.word	0x5a5a5a4c
   23dc4:	496e4c71 	.word	0x496e4c71
   23dc8:	4c184971 	.word	0x4c184971
   23dcc:	84494918 	.word	0x84494918
   23dd0:	49494c81 	.word	0x49494c81
   23dd4:	494c      	.short	0x494c
   23dd6:	81          	.byte	0x81
   23dd7:	00          	.byte	0x00
   23dd8:	2000      	movs	r0, #0
   23dda:	f04f 0b00 	mov.w	fp, #0
				align = VA_STACK_ALIGN(void *);
   23dde:	f04f 0a04 	mov.w	sl, #4
   23de2:	e039      	b.n	23e58 <cbvprintf_package+0x178>
			switch (*fmt) {
   23de4:	f1a0 0c2a 	sub.w	ip, r0, #42	; 0x2a
   23de8:	fa5f fc8c 	uxtb.w	ip, ip
   23dec:	2201      	movs	r2, #1
   23dee:	fa02 fc0c 	lsl.w	ip, r2, ip
   23df2:	ea1c 0f0e 	tst.w	ip, lr
   23df6:	d148      	bne.n	23e8a <cbvprintf_package+0x1aa>
   23df8:	f01c 5062 	ands.w	r0, ip, #947912704	; 0x38800000
   23dfc:	d12e      	bne.n	23e5c <cbvprintf_package+0x17c>
   23dfe:	ea1c 0b02 	ands.w	fp, ip, r2
   23e02:	d042      	beq.n	23e8a <cbvprintf_package+0x1aa>
		buf = (void *) ROUND_UP(buf, align);
   23e04:	3c01      	subs	r4, #1
   23e06:	4454      	add	r4, sl
   23e08:	f1ca 0c00 	rsb	ip, sl, #0
   23e0c:	ea04 040c 	and.w	r4, r4, ip
		if (buf0 != NULL && BUF_OFFSET + size > len) {
   23e10:	2d00      	cmp	r5, #0
   23e12:	d060      	beq.n	23ed6 <cbvprintf_package+0x1f6>
   23e14:	eba3 0c05 	sub.w	ip, r3, r5
   23e18:	44a4      	add	ip, r4
   23e1a:	45b4      	cmp	ip, r6
   23e1c:	f63f af78 	bhi.w	23d10 <cbvprintf_package+0x30>
		if (is_str_arg) {
   23e20:	2800      	cmp	r0, #0
   23e22:	d167      	bne.n	23ef4 <cbvprintf_package+0x214>
		} else if (size == sizeof(int)) {
   23e24:	2b04      	cmp	r3, #4
   23e26:	d148      	bne.n	23eba <cbvprintf_package+0x1da>
			int v = va_arg(ap, int);
   23e28:	f858 3b04 	ldr.w	r3, [r8], #4
				*(int *)buf = v;
   23e2c:	6023      	str	r3, [r4, #0]
			buf += sizeof(int);
   23e2e:	3404      	adds	r4, #4
   23e30:	2304      	movs	r3, #4
   23e32:	e02a      	b.n	23e8a <cbvprintf_package+0x1aa>
				arg_idx--;
   23e34:	9a01      	ldr	r2, [sp, #4]
   23e36:	3a01      	subs	r2, #1
   23e38:	9201      	str	r2, [sp, #4]
				parsing = false;
   23e3a:	f04f 0b00 	mov.w	fp, #0
				continue;
   23e3e:	e024      	b.n	23e8a <cbvprintf_package+0x1aa>
				if (fmt[-1] == 'l') {
   23e40:	f811 0c01 	ldrb.w	r0, [r1, #-1]
   23e44:	286c      	cmp	r0, #108	; 0x6c
   23e46:	d135      	bne.n	23eb4 <cbvprintf_package+0x1d4>
					if (fmt[-2] == 'l') {
   23e48:	f811 3c02 	ldrb.w	r3, [r1, #-2]
   23e4c:	2000      	movs	r0, #0
   23e4e:	2b6c      	cmp	r3, #108	; 0x6c
				parsing = false;
   23e50:	4683      	mov	fp, r0
					if (fmt[-2] == 'l') {
   23e52:	d1c4      	bne.n	23dde <cbvprintf_package+0xfe>
						align = VA_STACK_ALIGN(long long);
   23e54:	f04f 0a08 	mov.w	sl, #8
				size = sizeof(void *);
   23e58:	4653      	mov	r3, sl
   23e5a:	e7d3      	b.n	23e04 <cbvprintf_package+0x124>
					v.ld = va_arg(ap, long double);
   23e5c:	f108 0807 	add.w	r8, r8, #7
   23e60:	f028 0807 	bic.w	r8, r8, #7
				buf = (void *) ROUND_UP(buf, align);
   23e64:	3407      	adds	r4, #7
					v.ld = va_arg(ap, long double);
   23e66:	e8f8 ab02 	ldrd	sl, fp, [r8], #8
				buf = (void *) ROUND_UP(buf, align);
   23e6a:	f024 0407 	bic.w	r4, r4, #7
				if (buf0 != NULL) {
   23e6e:	b135      	cbz	r5, 23e7e <cbvprintf_package+0x19e>
					if (BUF_OFFSET + size > len) {
   23e70:	9806      	ldr	r0, [sp, #24]
   23e72:	4420      	add	r0, r4
   23e74:	42b0      	cmp	r0, r6
   23e76:	f63f af4b 	bhi.w	23d10 <cbvprintf_package+0x30>
						*(long double *)buf = v.ld;
   23e7a:	e9c4 ab00 	strd	sl, fp, [r4]
				buf += size;
   23e7e:	3408      	adds	r4, #8
				parsing = false;
   23e80:	f04f 0b00 	mov.w	fp, #0
			switch (*fmt) {
   23e84:	f04f 0a08 	mov.w	sl, #8
   23e88:	4653      	mov	r3, sl
			if (*++fmt == '\0') {
   23e8a:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   23e8e:	2800      	cmp	r0, #0
   23e90:	f000 80aa 	beq.w	23fe8 <cbvprintf_package+0x308>
			if (!parsing) {
   23e94:	f1bb 0f00 	cmp.w	fp, #0
   23e98:	f47f af6c 	bne.w	23d74 <cbvprintf_package+0x94>
				if (*fmt == '%') {
   23e9c:	2825      	cmp	r0, #37	; 0x25
   23e9e:	d1f4      	bne.n	23e8a <cbvprintf_package+0x1aa>
					arg_idx++;
   23ea0:	9b01      	ldr	r3, [sp, #4]
   23ea2:	3301      	adds	r3, #1
   23ea4:	9301      	str	r3, [sp, #4]
					parsing = true;
   23ea6:	f04f 0b01 	mov.w	fp, #1
				align = VA_STACK_ALIGN(size_t);
   23eaa:	f04f 0a04 	mov.w	sl, #4
   23eae:	e7eb      	b.n	23e88 <cbvprintf_package+0x1a8>
			switch (*fmt) {
   23eb0:	4658      	mov	r0, fp
   23eb2:	e792      	b.n	23dda <cbvprintf_package+0xfa>
   23eb4:	2000      	movs	r0, #0
				parsing = false;
   23eb6:	4683      	mov	fp, r0
   23eb8:	e7a4      	b.n	23e04 <cbvprintf_package+0x124>
		} else if (size == sizeof(long long)) {
   23eba:	2b08      	cmp	r3, #8
   23ebc:	f040 808b 	bne.w	23fd6 <cbvprintf_package+0x2f6>
			long long v = va_arg(ap, long long);
   23ec0:	f108 0807 	add.w	r8, r8, #7
   23ec4:	f028 0807 	bic.w	r8, r8, #7
   23ec8:	e8f8 2302 	ldrd	r2, r3, [r8], #8
					*(long long *)buf = v;
   23ecc:	e9c4 2300 	strd	r2, r3, [r4]
			buf += sizeof(long long);
   23ed0:	3408      	adds	r4, #8
   23ed2:	2308      	movs	r3, #8
   23ed4:	e7d9      	b.n	23e8a <cbvprintf_package+0x1aa>
		if (is_str_arg) {
   23ed6:	b968      	cbnz	r0, 23ef4 <cbvprintf_package+0x214>
		} else if (size == sizeof(int)) {
   23ed8:	2b04      	cmp	r3, #4
   23eda:	d102      	bne.n	23ee2 <cbvprintf_package+0x202>
			int v = va_arg(ap, int);
   23edc:	f108 0804 	add.w	r8, r8, #4
			if (buf0 != NULL) {
   23ee0:	e7a5      	b.n	23e2e <cbvprintf_package+0x14e>
		} else if (size == sizeof(long long)) {
   23ee2:	2b08      	cmp	r3, #8
   23ee4:	d177      	bne.n	23fd6 <cbvprintf_package+0x2f6>
			long long v = va_arg(ap, long long);
   23ee6:	f108 0807 	add.w	r8, r8, #7
   23eea:	f028 0807 	bic.w	r8, r8, #7
   23eee:	f108 0808 	add.w	r8, r8, #8
			if (buf0 != NULL) {
   23ef2:	e7ed      	b.n	23ed0 <cbvprintf_package+0x1f0>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
   23ef4:	9a05      	ldr	r2, [sp, #20]
   23ef6:	3a01      	subs	r2, #1
   23ef8:	9205      	str	r2, [sp, #20]
			s = va_arg(ap, char *);
   23efa:	f858 2b04 	ldr.w	r2, [r8], #4
   23efe:	9200      	str	r2, [sp, #0]
   23f00:	e71e      	b.n	23d40 <cbvprintf_package+0x60>
			if (is_ro && !do_ro) {
   23f02:	9a03      	ldr	r2, [sp, #12]
   23f04:	0790      	lsls	r0, r2, #30
   23f06:	d544      	bpl.n	23f92 <cbvprintf_package+0x2b2>
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
   23f08:	eba4 0e05 	sub.w	lr, r4, r5
   23f0c:	ea4f 009e 	mov.w	r0, lr, lsr #2
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
   23f10:	f04f 0c01 	mov.w	ip, #1
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
   23f14:	f5be 7f00 	cmp.w	lr, #512	; 0x200
   23f18:	d31b      	bcc.n	23f52 <cbvprintf_package+0x272>
					__ASSERT(false, "String with too many arguments");
   23f1a:	4926      	ldr	r1, [pc, #152]	; (23fb4 <cbvprintf_package+0x2d4>)
   23f1c:	4826      	ldr	r0, [pc, #152]	; (23fb8 <cbvprintf_package+0x2d8>)
   23f1e:	f240 227b 	movw	r2, #635	; 0x27b
   23f22:	f014 fdf6 	bl	38b12 <assert_print>
   23f26:	f240 217b 	movw	r1, #635	; 0x27b
					__ASSERT(false, "str_ptr_pos[] too small");
   23f2a:	4822      	ldr	r0, [pc, #136]	; (23fb4 <cbvprintf_package+0x2d4>)
   23f2c:	f014 fdea 	bl	38b04 <assert_post_action>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
   23f30:	2f0f      	cmp	r7, #15
   23f32:	d810      	bhi.n	23f56 <cbvprintf_package+0x276>
				if (buf0 != NULL) {
   23f34:	2d00      	cmp	r5, #0
   23f36:	d041      	beq.n	23fbc <cbvprintf_package+0x2dc>
					str_ptr_pos[s_idx] = s_ptr_idx;
   23f38:	f107 0240 	add.w	r2, r7, #64	; 0x40
   23f3c:	eb0d 0c02 	add.w	ip, sp, r2
					str_ptr_arg[s_idx] = arg_idx;
   23f40:	9a01      	ldr	r2, [sp, #4]
					str_ptr_pos[s_idx] = s_ptr_idx;
   23f42:	f80c 0c20 	strb.w	r0, [ip, #-32]
					str_ptr_arg[s_idx] = arg_idx;
   23f46:	f80c 2c10 	strb.w	r2, [ip, #-16]
						s_rw_cnt++;
   23f4a:	9804      	ldr	r0, [sp, #16]
   23f4c:	3001      	adds	r0, #1
   23f4e:	9004      	str	r0, [sp, #16]
   23f50:	e01e      	b.n	23f90 <cbvprintf_package+0x2b0>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
   23f52:	2f0f      	cmp	r7, #15
   23f54:	d908      	bls.n	23f68 <cbvprintf_package+0x288>
					__ASSERT(false, "str_ptr_pos[] too small");
   23f56:	4917      	ldr	r1, [pc, #92]	; (23fb4 <cbvprintf_package+0x2d4>)
   23f58:	4817      	ldr	r0, [pc, #92]	; (23fb8 <cbvprintf_package+0x2d8>)
   23f5a:	f44f 7220 	mov.w	r2, #640	; 0x280
   23f5e:	f014 fdd8 	bl	38b12 <assert_print>
   23f62:	f44f 7120 	mov.w	r1, #640	; 0x280
   23f66:	e7e0      	b.n	23f2a <cbvprintf_package+0x24a>
				if (buf0 != NULL) {
   23f68:	b1d5      	cbz	r5, 23fa0 <cbvprintf_package+0x2c0>
					str_ptr_pos[s_idx] = s_ptr_idx;
   23f6a:	f107 0240 	add.w	r2, r7, #64	; 0x40
   23f6e:	eb0d 0e02 	add.w	lr, sp, r2
   23f72:	b2c0      	uxtb	r0, r0
					str_ptr_arg[s_idx] = arg_idx;
   23f74:	9a01      	ldr	r2, [sp, #4]
					str_ptr_pos[s_idx] = s_ptr_idx;
   23f76:	f80e 0c20 	strb.w	r0, [lr, #-32]
					str_ptr_arg[s_idx] = arg_idx;
   23f7a:	f80e 2c10 	strb.w	r2, [lr, #-16]
					if (is_ro) {
   23f7e:	f1bc 0f00 	cmp.w	ip, #0
   23f82:	d0e2      	beq.n	23f4a <cbvprintf_package+0x26a>
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
   23f84:	f060 007f 	orn	r0, r0, #127	; 0x7f
   23f88:	f80e 0c20 	strb.w	r0, [lr, #-32]
						s_ro_cnt++;
   23f8c:	f109 0901 	add.w	r9, r9, #1
				s_idx++;
   23f90:	3701      	adds	r7, #1
					if (BUF_OFFSET + size > len) {
   23f92:	f1c5 0208 	rsb	r2, r5, #8
			buf += sizeof(char *);
   23f96:	3404      	adds	r4, #4
					if (BUF_OFFSET + size > len) {
   23f98:	9206      	str	r2, [sp, #24]
			switch (*fmt) {
   23f9a:	f64f 7eda 	movw	lr, #65498	; 0xffda
   23f9e:	e774      	b.n	23e8a <cbvprintf_package+0x1aa>
				} else if (is_ro) {
   23fa0:	f1bc 0f00 	cmp.w	ip, #0
   23fa4:	d00a      	beq.n	23fbc <cbvprintf_package+0x2dc>
					len += 1;
   23fa6:	3601      	adds	r6, #1
   23fa8:	e7f2      	b.n	23f90 <cbvprintf_package+0x2b0>
   23faa:	bf00      	nop
   23fac:	0003bfd8 	.word	0x0003bfd8
   23fb0:	0003fe60 	.word	0x0003fe60
   23fb4:	0003d278 	.word	0x0003d278
   23fb8:	0003d1d7 	.word	0x0003d1d7
				} else if (rws_pos_en) {
   23fbc:	9802      	ldr	r0, [sp, #8]
					len += 2;
   23fbe:	3602      	adds	r6, #2
				} else if (rws_pos_en) {
   23fc0:	2800      	cmp	r0, #0
   23fc2:	d1e5      	bne.n	23f90 <cbvprintf_package+0x2b0>
					len += strlen(s) + 1 + 1;
   23fc4:	9800      	ldr	r0, [sp, #0]
   23fc6:	e9cd 3106 	strd	r3, r1, [sp, #24]
   23fca:	f015 f9ae 	bl	3932a <strlen>
   23fce:	e9dd 3106 	ldrd	r3, r1, [sp, #24]
   23fd2:	4406      	add	r6, r0
   23fd4:	e7dc      	b.n	23f90 <cbvprintf_package+0x2b0>
			__ASSERT(false, "unexpected size %u", size);
   23fd6:	4940      	ldr	r1, [pc, #256]	; (240d8 <cbvprintf_package+0x3f8>)
   23fd8:	4840      	ldr	r0, [pc, #256]	; (240dc <cbvprintf_package+0x3fc>)
   23fda:	f240 22c5 	movw	r2, #709	; 0x2c5
   23fde:	f014 fd98 	bl	38b12 <assert_print>
   23fe2:	f240 21c5 	movw	r1, #709	; 0x2c5
   23fe6:	e7a0      	b.n	23f2a <cbvprintf_package+0x24a>
	if (BUF_OFFSET / sizeof(int) > 255) {
   23fe8:	1b63      	subs	r3, r4, r5
   23fea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   23fee:	d308      	bcc.n	24002 <cbvprintf_package+0x322>
		__ASSERT(false, "too many format args");
   23ff0:	4939      	ldr	r1, [pc, #228]	; (240d8 <cbvprintf_package+0x3f8>)
   23ff2:	483a      	ldr	r0, [pc, #232]	; (240dc <cbvprintf_package+0x3fc>)
   23ff4:	f240 22d1 	movw	r2, #721	; 0x2d1
   23ff8:	f014 fd8b 	bl	38b12 <assert_print>
   23ffc:	f240 21d1 	movw	r1, #721	; 0x2d1
   24000:	e793      	b.n	23f2a <cbvprintf_package+0x24a>
	if (buf0 == NULL) {
   24002:	b91d      	cbnz	r5, 2400c <cbvprintf_package+0x32c>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
   24004:	f1a6 0408 	sub.w	r4, r6, #8
   24008:	18e0      	adds	r0, r4, r3
   2400a:	e683      	b.n	23d14 <cbvprintf_package+0x34>
	if (rws_pos_en) {
   2400c:	9a02      	ldr	r2, [sp, #8]
	*(char **)buf0 = NULL;
   2400e:	6028      	str	r0, [r5, #0]
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);
   24010:	089b      	lsrs	r3, r3, #2
   24012:	702b      	strb	r3, [r5, #0]
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
   24014:	f89d 3010 	ldrb.w	r3, [sp, #16]
	if (rws_pos_en) {
   24018:	b1c2      	cbz	r2, 2404c <cbvprintf_package+0x36c>
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
   2401a:	70eb      	strb	r3, [r5, #3]
	pkg_hdr->desc.ro_str_cnt = s_ro_cnt;
   2401c:	f885 9002 	strb.w	r9, [r5, #2]
	if (s_ro_cnt) {
   24020:	f1b9 0f00 	cmp.w	r9, #0
   24024:	d005      	beq.n	24032 <cbvprintf_package+0x352>
   24026:	a808      	add	r0, sp, #32
		for (i = 0; i < s_idx; i++) {
   24028:	2200      	movs	r2, #0
			if (BUF_OFFSET + 1 > len) {
   2402a:	f1c5 0c01 	rsb	ip, r5, #1
		for (i = 0; i < s_idx; i++) {
   2402e:	4297      	cmp	r7, r2
   24030:	d10e      	bne.n	24050 <cbvprintf_package+0x370>
		if (BUF_OFFSET + 1 + size > len) {
   24032:	f1c5 0301 	rsb	r3, r5, #1
   24036:	f10d 0820 	add.w	r8, sp, #32
			*buf++ = str_ptr_arg[i];
   2403a:	f04f 0a00 	mov.w	sl, #0
		if (BUF_OFFSET + 1 + size > len) {
   2403e:	9301      	str	r3, [sp, #4]
			*buf++ = str_ptr_arg[i];
   24040:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
	for (i = 0; i < s_idx; i++) {
   24044:	4557      	cmp	r7, sl
   24046:	d112      	bne.n	2406e <cbvprintf_package+0x38e>
	return BUF_OFFSET;
   24048:	1b60      	subs	r0, r4, r5
   2404a:	e663      	b.n	23d14 <cbvprintf_package+0x34>
		pkg_hdr->desc.str_cnt = s_rw_cnt;
   2404c:	706b      	strb	r3, [r5, #1]
		pkg_hdr->desc.rw_str_cnt = 0;
   2404e:	e7e5      	b.n	2401c <cbvprintf_package+0x33c>
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
   24050:	f810 3b01 	ldrb.w	r3, [r0], #1
   24054:	0619      	lsls	r1, r3, #24
   24056:	d508      	bpl.n	2406a <cbvprintf_package+0x38a>
			if (BUF_OFFSET + 1 > len) {
   24058:	eb04 0e0c 	add.w	lr, r4, ip
   2405c:	45b6      	cmp	lr, r6
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
   2405e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
			if (BUF_OFFSET + 1 > len) {
   24062:	f63f ae55 	bhi.w	23d10 <cbvprintf_package+0x30>
			*buf++ = pos;
   24066:	f804 3b01 	strb.w	r3, [r4], #1
		for (i = 0; i < s_idx; i++) {
   2406a:	3201      	adds	r2, #1
   2406c:	e7df      	b.n	2402e <cbvprintf_package+0x34e>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
   2406e:	f1b9 0f00 	cmp.w	r9, #0
   24072:	d003      	beq.n	2407c <cbvprintf_package+0x39c>
   24074:	f998 2000 	ldrsb.w	r2, [r8]
   24078:	2a00      	cmp	r2, #0
   2407a:	db17      	blt.n	240ac <cbvprintf_package+0x3cc>
		if (rws_pos_en) {
   2407c:	9b02      	ldr	r3, [sp, #8]
   2407e:	b1d3      	cbz	r3, 240b6 <cbvprintf_package+0x3d6>
			*buf++ = str_ptr_arg[i];
   24080:	f81a 200b 	ldrb.w	r2, [sl, fp]
   24084:	f804 2b01 	strb.w	r2, [r4], #1
			size = 0;
   24088:	2200      	movs	r2, #0
		if (BUF_OFFSET + 1 + size > len) {
   2408a:	9b01      	ldr	r3, [sp, #4]
   2408c:	1898      	adds	r0, r3, r2
   2408e:	4420      	add	r0, r4
   24090:	42b0      	cmp	r0, r6
   24092:	f63f ae3d 	bhi.w	23d10 <cbvprintf_package+0x30>
		*buf++ = str_ptr_pos[i];
   24096:	f898 0000 	ldrb.w	r0, [r8]
   2409a:	f804 0b01 	strb.w	r0, [r4], #1
		memcpy(buf, s, size);
   2409e:	9900      	ldr	r1, [sp, #0]
   240a0:	9203      	str	r2, [sp, #12]
   240a2:	4620      	mov	r0, r4
   240a4:	f015 f984 	bl	393b0 <memcpy>
		buf += size;
   240a8:	9a03      	ldr	r2, [sp, #12]
   240aa:	4414      	add	r4, r2
	for (i = 0; i < s_idx; i++) {
   240ac:	f10a 0a01 	add.w	sl, sl, #1
   240b0:	f108 0801 	add.w	r8, r8, #1
   240b4:	e7c6      	b.n	24044 <cbvprintf_package+0x364>
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
   240b6:	f898 2000 	ldrb.w	r2, [r8]
   240ba:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
   240be:	9300      	str	r3, [sp, #0]
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
   240c0:	9b02      	ldr	r3, [sp, #8]
   240c2:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
			size = strlen(s) + 1;
   240c6:	9800      	ldr	r0, [sp, #0]
   240c8:	f015 f92f 	bl	3932a <strlen>
   240cc:	1c42      	adds	r2, r0, #1
   240ce:	e7dc      	b.n	2408a <cbvprintf_package+0x3aa>
		return -EFAULT;
   240d0:	f06f 000d 	mvn.w	r0, #13
   240d4:	e61e      	b.n	23d14 <cbvprintf_package+0x34>
   240d6:	bf00      	nop
   240d8:	0003d278 	.word	0x0003d278
   240dc:	0003d1d7 	.word	0x0003d1d7

000240e0 <cbprintf_package_convert>:
			     cbprintf_convert_cb cb,
			     void *ctx,
			     uint32_t flags,
			     uint16_t *strl,
			     size_t strl_len)
{
   240e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   240e4:	b095      	sub	sp, #84	; 0x54
   240e6:	af00      	add	r7, sp, #0
   240e8:	e9c7 1208 	strd	r1, r2, [r7, #32]
   240ec:	f8d7 b078 	ldr.w	fp, [r7, #120]	; 0x78
   240f0:	61bb      	str	r3, [r7, #24]
	__ASSERT_NO_MSG(in_packaged != NULL);
   240f2:	4604      	mov	r4, r0
   240f4:	b950      	cbnz	r0, 2410c <cbprintf_package_convert+0x2c>
   240f6:	49a9      	ldr	r1, [pc, #676]	; (2439c <cbprintf_package_convert+0x2bc>)
   240f8:	48a9      	ldr	r0, [pc, #676]	; (243a0 <cbprintf_package_convert+0x2c0>)
   240fa:	f44f 7265 	mov.w	r2, #916	; 0x394
   240fe:	f014 fd08 	bl	38b12 <assert_print>
   24102:	f44f 7165 	mov.w	r1, #916	; 0x394
			continue;
		}

		if (is_ro) {
			if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
				__ASSERT_NO_MSG(scpy_cnt < sizeof(cpy_str_pos));
   24106:	48a5      	ldr	r0, [pc, #660]	; (2439c <cbprintf_package_convert+0x2bc>)
   24108:	f014 fcfc 	bl	38b04 <assert_post_action>
	bool fmt_present = flags & CBPRINTF_PACKAGE_CONVERT_PTR_CHECK ? true : false;
   2410c:	f3cb 03c0 	ubfx	r3, fp, #3, #1
   24110:	613b      	str	r3, [r7, #16]
	in_len = in_len != 0 ? in_len : get_package_len(in_packaged);
   24112:	6a3b      	ldr	r3, [r7, #32]
   24114:	b953      	cbnz	r3, 2412c <cbprintf_package_convert+0x4c>
	buf += ros_nbr;
   24116:	7803      	ldrb	r3, [r0, #0]
	s_nbr     = buf[1];
   24118:	7846      	ldrb	r6, [r0, #1]
	buf += ros_nbr;
   2411a:	7880      	ldrb	r0, [r0, #2]
	for (int i = 0; i < s_nbr; i++) {
   2411c:	6a3d      	ldr	r5, [r7, #32]
	buf += ros_nbr;
   2411e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   24122:	4420      	add	r0, r4
	for (int i = 0; i < s_nbr; i++) {
   24124:	42ae      	cmp	r6, r5
   24126:	d81a      	bhi.n	2415e <cbprintf_package_convert+0x7e>
	return (size_t)(uintptr_t)(buf - start);
   24128:	1b03      	subs	r3, r0, r4
   2412a:	623b      	str	r3, [r7, #32]
	ros_nbr = in_desc->ro_str_cnt;
   2412c:	f894 9002 	ldrb.w	r9, [r4, #2]
	rws_nbr = in_desc->rw_str_cnt;
   24130:	78e3      	ldrb	r3, [r4, #3]
   24132:	617b      	str	r3, [r7, #20]
	ros_nbr = in_desc->ro_str_cnt;
   24134:	464e      	mov	r6, r9
	ro_cpy = ros_nbr &&
   24136:	f1b9 0f00 	cmp.w	r9, #0
   2413a:	d002      	beq.n	24142 <cbprintf_package_convert+0x62>
   2413c:	f01b 0f01 	tst.w	fp, #1
   24140:	d116      	bne.n	24170 <cbprintf_package_convert+0x90>
	rw_cpy = rws_nbr > 0 &&
   24142:	697b      	ldr	r3, [r7, #20]
   24144:	bb53      	cbnz	r3, 2419c <cbprintf_package_convert+0xbc>
		if (cb) {
   24146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   24148:	b11b      	cbz	r3, 24152 <cbprintf_package_convert+0x72>
			cb(in_packaged, in_len, ctx);
   2414a:	69ba      	ldr	r2, [r7, #24]
   2414c:	6a39      	ldr	r1, [r7, #32]
   2414e:	4620      	mov	r0, r4
   24150:	4798      	blx	r3
		return in_len;
   24152:	6a3d      	ldr	r5, [r7, #32]

	/* Empty call (can be interpreted as flushing) */
	(void)cb(NULL, 0, ctx);

	return out_len;
}
   24154:	4628      	mov	r0, r5
   24156:	3754      	adds	r7, #84	; 0x54
   24158:	46bd      	mov	sp, r7
   2415a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf++;
   2415e:	f100 0801 	add.w	r8, r0, #1
		buf += strlen((const char *)buf) + 1;
   24162:	4640      	mov	r0, r8
   24164:	f015 f8e1 	bl	3932a <strlen>
   24168:	3001      	adds	r0, #1
   2416a:	4440      	add	r0, r8
	for (int i = 0; i < s_nbr; i++) {
   2416c:	3501      	adds	r5, #1
   2416e:	e7d9      	b.n	24124 <cbprintf_package_convert+0x44>
	rw_cpy = rws_nbr > 0 &&
   24170:	f894 a000 	ldrb.w	sl, [r4]
   24174:	6863      	ldr	r3, [r4, #4]
	const char *fmt = *(const char **)(buf + sizeof(void *));
   24176:	61fb      	str	r3, [r7, #28]
	if (cb == NULL) {
   24178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	args_size = in_desc->len * sizeof(int);
   2417a:	ea4f 028a 	mov.w	r2, sl, lsl #2
   2417e:	60fa      	str	r2, [r7, #12]
	uint8_t *str_pos = &buf[args_size];
   24180:	eb04 0a8a 	add.w	sl, r4, sl, lsl #2
	if (cb == NULL) {
   24184:	2b00      	cmp	r3, #0
   24186:	f040 8117 	bne.w	243b8 <cbprintf_package_convert+0x2d8>
		out_len = (int)in_len;
   2418a:	6a3d      	ldr	r5, [r7, #32]
		if (ro_cpy) {
   2418c:	46d0      	mov	r8, sl
   2418e:	eb09 030a 	add.w	r3, r9, sl
	size_t strl_cnt = 0;
   24192:	2600      	movs	r6, #0
			for (int i = 0; i < ros_nbr; i++) {
   24194:	4598      	cmp	r8, r3
   24196:	d152      	bne.n	2423e <cbprintf_package_convert+0x15e>
   24198:	44ca      	add	sl, r9
   2419a:	e013      	b.n	241c4 <cbprintf_package_convert+0xe4>
	rw_cpy = rws_nbr > 0 &&
   2419c:	f01b 0f02 	tst.w	fp, #2
   241a0:	d0d1      	beq.n	24146 <cbprintf_package_convert+0x66>
	args_size = in_desc->len * sizeof(int);
   241a2:	f894 a000 	ldrb.w	sl, [r4]
   241a6:	ea4f 038a 	mov.w	r3, sl, lsl #2
   241aa:	60fb      	str	r3, [r7, #12]
	const char *fmt = *(const char **)(buf + sizeof(void *));
   241ac:	6863      	ldr	r3, [r4, #4]
   241ae:	61fb      	str	r3, [r7, #28]
	if (cb == NULL) {
   241b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	uint8_t *str_pos = &buf[args_size];
   241b2:	eb04 0a8a 	add.w	sl, r4, sl, lsl #2
	if (cb == NULL) {
   241b6:	2b00      	cmp	r3, #0
   241b8:	d17c      	bne.n	242b4 <cbprintf_package_convert+0x1d4>
		out_len = (int)in_len;
   241ba:	6a3d      	ldr	r5, [r7, #32]
			if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
   241bc:	f1b9 0f00 	cmp.w	r9, #0
   241c0:	d152      	bne.n	24268 <cbprintf_package_convert+0x188>
	size_t strl_cnt = 0;
   241c2:	464e      	mov	r6, r9
		for (int i = 0; i < rws_nbr; i++) {
   241c4:	f01b 0f05 	tst.w	fp, #5
   241c8:	bf0c      	ite	eq
   241ca:	2302      	moveq	r3, #2
   241cc:	2301      	movne	r3, #1
   241ce:	627b      	str	r3, [r7, #36]	; 0x24
   241d0:	697b      	ldr	r3, [r7, #20]
   241d2:	eb0a 0943 	add.w	r9, sl, r3, lsl #1
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
   241d6:	f00b 0302 	and.w	r3, fp, #2
   241da:	623b      	str	r3, [r7, #32]
		for (int i = 0; i < rws_nbr; i++) {
   241dc:	45ca      	cmp	sl, r9
   241de:	d0b9      	beq.n	24154 <cbprintf_package_convert+0x74>
			uint8_t arg_idx = *str_pos++;
   241e0:	f81a 1b02 	ldrb.w	r1, [sl], #2
			const char *str = *(const char **)&buf32[arg_pos];
   241e4:	f81a 3c01 	ldrb.w	r3, [sl, #-1]
   241e8:	f854 8023 	ldr.w	r8, [r4, r3, lsl #2]
   241ec:	4b6d      	ldr	r3, [pc, #436]	; (243a4 <cbprintf_package_convert+0x2c4>)
   241ee:	4598      	cmp	r8, r3
   241f0:	d302      	bcc.n	241f8 <cbprintf_package_convert+0x118>
   241f2:	4b6d      	ldr	r3, [pc, #436]	; (243a8 <cbprintf_package_convert+0x2c8>)
   241f4:	4598      	cmp	r8, r3
   241f6:	d33d      	bcc.n	24274 <cbprintf_package_convert+0x194>
			if (fmt_present && is_ptr(fmt, arg_idx)) {
   241f8:	693b      	ldr	r3, [r7, #16]
   241fa:	2b00      	cmp	r3, #0
   241fc:	d047      	beq.n	2428e <cbprintf_package_convert+0x1ae>
   241fe:	69f8      	ldr	r0, [r7, #28]
   24200:	f014 fa43 	bl	3868a <is_ptr>
   24204:	2800      	cmp	r0, #0
   24206:	d042      	beq.n	2428e <cbprintf_package_convert+0x1ae>
				LOG_WRN("(unsigned) char * used for %%p argument. "
   24208:	4868      	ldr	r0, [pc, #416]	; (243ac <cbprintf_package_convert+0x2cc>)
   2420a:	6803      	ldr	r3, [r0, #0]
   2420c:	f013 0f06 	tst.w	r3, #6
   24210:	d013      	beq.n	2423a <cbprintf_package_convert+0x15a>
   24212:	46e8      	mov	r8, sp
   24214:	b08a      	sub	sp, #40	; 0x28
   24216:	466a      	mov	r2, sp
   24218:	4b65      	ldr	r3, [pc, #404]	; (243b0 <cbprintf_package_convert+0x2d0>)
   2421a:	6153      	str	r3, [r2, #20]
   2421c:	69fb      	ldr	r3, [r7, #28]
   2421e:	e9c2 3106 	strd	r3, r1, [r2, #24]
   24222:	f44f 7300 	mov.w	r3, #512	; 0x200
   24226:	8413      	strh	r3, [r2, #32]
   24228:	4b62      	ldr	r3, [pc, #392]	; (243b4 <cbprintf_package_convert+0x2d4>)
   2422a:	f842 3f10 	str.w	r3, [r2, #16]!
   2422e:	2300      	movs	r3, #0
   24230:	f44f 5112 	mov.w	r1, #9344	; 0x2480
   24234:	f001 ffba 	bl	261ac <z_impl_z_log_msg_static_create>
   24238:	46c5      	mov	sp, r8
				out_len -= 2;
   2423a:	3d02      	subs	r5, #2
				continue;
   2423c:	e7ce      	b.n	241dc <cbprintf_package_convert+0xfc>
				const char *str = *(const char **)&buf32[*str_pos];
   2423e:	f818 2b01 	ldrb.w	r2, [r8], #1
   24242:	627b      	str	r3, [r7, #36]	; 0x24
		return 1 + strlen(str);
   24244:	f854 0022 	ldr.w	r0, [r4, r2, lsl #2]
   24248:	f015 f86f 	bl	3932a <strlen>
				if (strl && strl_cnt < strl_len) {
   2424c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
   2424e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
		return 1 + strlen(str);
   24250:	3001      	adds	r0, #1
				if (strl && strl_cnt < strl_len) {
   24252:	b13a      	cbz	r2, 24264 <cbprintf_package_convert+0x184>
   24254:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
   24258:	4296      	cmp	r6, r2
					strl[strl_cnt++] = (uint16_t)len;
   2425a:	bf3e      	ittt	cc
   2425c:	6ffa      	ldrcc	r2, [r7, #124]	; 0x7c
   2425e:	f822 0016 	strhcc.w	r0, [r2, r6, lsl #1]
   24262:	3601      	addcc	r6, #1
				out_len += len;
   24264:	4405      	add	r5, r0
			for (int i = 0; i < ros_nbr; i++) {
   24266:	e795      	b.n	24194 <cbprintf_package_convert+0xb4>
			if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
   24268:	f01b 0604 	ands.w	r6, fp, #4
	size_t strl_cnt = 0;
   2426c:	bf1c      	itt	ne
   2426e:	6a7e      	ldrne	r6, [r7, #36]	; 0x24
				str_pos += ros_nbr;
   24270:	44ca      	addne	sl, r9
   24272:	e7a7      	b.n	241c4 <cbprintf_package_convert+0xe4>
			if (fmt_present && is_ptr(fmt, arg_idx)) {
   24274:	693b      	ldr	r3, [r7, #16]
   24276:	b123      	cbz	r3, 24282 <cbprintf_package_convert+0x1a2>
   24278:	69f8      	ldr	r0, [r7, #28]
   2427a:	f014 fa06 	bl	3868a <is_ptr>
   2427e:	2800      	cmp	r0, #0
   24280:	d1c2      	bne.n	24208 <cbprintf_package_convert+0x128>
				if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
   24282:	f01b 0f01 	tst.w	fp, #1
   24286:	d105      	bne.n	24294 <cbprintf_package_convert+0x1b4>
					out_len -= drop_ro_str_pos ? 2 : 1;
   24288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2428a:	1aed      	subs	r5, r5, r3
   2428c:	e7a6      	b.n	241dc <cbprintf_package_convert+0xfc>
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
   2428e:	6a3b      	ldr	r3, [r7, #32]
   24290:	2b00      	cmp	r3, #0
   24292:	d0a3      	beq.n	241dc <cbprintf_package_convert+0xfc>
		return 1 + strlen(str);
   24294:	4640      	mov	r0, r8
   24296:	f015 f848 	bl	3932a <strlen>
				if (strl && strl_cnt < strl_len) {
   2429a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
   2429c:	b143      	cbz	r3, 242b0 <cbprintf_package_convert+0x1d0>
   2429e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   242a2:	429e      	cmp	r6, r3
					strl[strl_cnt++] = (uint16_t)len;
   242a4:	bf3f      	itttt	cc
   242a6:	6ffa      	ldrcc	r2, [r7, #124]	; 0x7c
		return 1 + strlen(str);
   242a8:	1c43      	addcc	r3, r0, #1
					strl[strl_cnt++] = (uint16_t)len;
   242aa:	f822 3016 	strhcc.w	r3, [r2, r6, lsl #1]
   242ae:	3601      	addcc	r6, #1
				out_len += (len - 1);
   242b0:	4405      	add	r5, r0
		for (int i = 0; i < rws_nbr; i++) {
   242b2:	e793      	b.n	241dc <cbprintf_package_convert+0xfc>
	} else if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
   242b4:	f1b9 0f00 	cmp.w	r9, #0
   242b8:	f000 8083 	beq.w	243c2 <cbprintf_package_convert+0x2e2>
   242bc:	f01b 0604 	ands.w	r6, fp, #4
   242c0:	f000 8082 	beq.w	243c8 <cbprintf_package_convert+0x2e8>
		keep_cnt = ros_nbr;
   242c4:	46c8      	mov	r8, r9
		scpy_cnt = 0;
   242c6:	2600      	movs	r6, #0
		dst = keep_str_pos;
   242c8:	f107 0040 	add.w	r0, r7, #64	; 0x40
		memcpy(dst, str_pos, ros_nbr);
   242cc:	464a      	mov	r2, r9
   242ce:	4651      	mov	r1, sl
   242d0:	f015 f86e 	bl	393b0 <memcpy>
	str_pos += ros_nbr;
   242d4:	697b      	ldr	r3, [r7, #20]
   242d6:	005b      	lsls	r3, r3, #1
   242d8:	60bb      	str	r3, [r7, #8]
   242da:	697b      	ldr	r3, [r7, #20]
   242dc:	44ca      	add	sl, r9
	for (int i = 0; i < rws_nbr; i++) {
   242de:	eb0a 0343 	add.w	r3, sl, r3, lsl #1
   242e2:	617b      	str	r3, [r7, #20]
			if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
   242e4:	f00b 0302 	and.w	r3, fp, #2
   242e8:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < rws_nbr; i++) {
   242ea:	697b      	ldr	r3, [r7, #20]
   242ec:	459a      	cmp	sl, r3
   242ee:	d16d      	bne.n	243cc <cbprintf_package_convert+0x2ec>
	out_desc.len = in_desc->len;
   242f0:	7823      	ldrb	r3, [r4, #0]
   242f2:	617b      	str	r3, [r7, #20]
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
   242f4:	7863      	ldrb	r3, [r4, #1]
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
   242f6:	f01b 0f02 	tst.w	fp, #2
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
   242fa:	eb06 0203 	add.w	r2, r6, r3
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
   242fe:	bf0c      	ite	eq
   24300:	ea4f 0158 	moveq.w	r1, r8, lsr #1
   24304:	2100      	movne	r1, #0
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
   24306:	f01b 0f01 	tst.w	fp, #1
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
   2430a:	b2d2      	uxtb	r2, r2
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
   2430c:	f040 80dd 	bne.w	244ca <cbprintf_package_convert+0x3ea>
   24310:	f01b 0f04 	tst.w	fp, #4
   24314:	bf14      	ite	ne
   24316:	4640      	movne	r0, r8
   24318:	2000      	moveq	r0, #0
   2431a:	613b      	str	r3, [r7, #16]
	struct cbprintf_package_desc in_desc_backup = *in_desc;
   2431c:	78a3      	ldrb	r3, [r4, #2]
   2431e:	f894 b003 	ldrb.w	fp, [r4, #3]
   24322:	61fb      	str	r3, [r7, #28]
	*in_desc = out_desc;
   24324:	7062      	strb	r2, [r4, #1]
   24326:	70a0      	strb	r0, [r4, #2]
   24328:	70e1      	strb	r1, [r4, #3]
	rv = cb(in_packaged, args_size, ctx);
   2432a:	69ba      	ldr	r2, [r7, #24]
   2432c:	68f9      	ldr	r1, [r7, #12]
   2432e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   24330:	4620      	mov	r0, r4
   24332:	4798      	blx	r3
	if (rv < 0) {
   24334:	1e05      	subs	r5, r0, #0
   24336:	f6ff af0d 	blt.w	24154 <cbprintf_package_convert+0x74>
	*in_desc = in_desc_backup;
   2433a:	697b      	ldr	r3, [r7, #20]
   2433c:	7023      	strb	r3, [r4, #0]
   2433e:	693b      	ldr	r3, [r7, #16]
   24340:	7063      	strb	r3, [r4, #1]
   24342:	69fb      	ldr	r3, [r7, #28]
   24344:	70a3      	strb	r3, [r4, #2]
	rv = cb(keep_str_pos, keep_cnt, ctx);
   24346:	4641      	mov	r1, r8
   24348:	69ba      	ldr	r2, [r7, #24]
   2434a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	*in_desc = in_desc_backup;
   2434c:	f884 b003 	strb.w	fp, [r4, #3]
	rv = cb(keep_str_pos, keep_cnt, ctx);
   24350:	f107 0040 	add.w	r0, r7, #64	; 0x40
   24354:	4798      	blx	r3
	if (rv < 0) {
   24356:	f1b0 0800 	subs.w	r8, r0, #0
   2435a:	f2c0 80e3 	blt.w	24524 <cbprintf_package_convert+0x444>
	size_t strs_len = in_len - (args_size + ros_nbr + 2 * rws_nbr);
   2435e:	6a3b      	ldr	r3, [r7, #32]
	rv = cb(str_pos, strs_len, ctx);
   24360:	69ba      	ldr	r2, [r7, #24]
	size_t strs_len = in_len - (args_size + ros_nbr + 2 * rws_nbr);
   24362:	eba3 0109 	sub.w	r1, r3, r9
   24366:	68fb      	ldr	r3, [r7, #12]
   24368:	1ac9      	subs	r1, r1, r3
	rv = cb(str_pos, strs_len, ctx);
   2436a:	68bb      	ldr	r3, [r7, #8]
   2436c:	4650      	mov	r0, sl
   2436e:	1ac9      	subs	r1, r1, r3
   24370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   24372:	4798      	blx	r3
	if (rv < 0) {
   24374:	2800      	cmp	r0, #0
   24376:	f2c0 80d7 	blt.w	24528 <cbprintf_package_convert+0x448>
	out_len += rv;
   2437a:	44a8      	add	r8, r5
	out_len += rv;
   2437c:	eb08 0500 	add.w	r5, r8, r0
	for (int i = 0; i < scpy_cnt; i++) {
   24380:	f04f 0b00 	mov.w	fp, #0
		uint8_t loc = cpy_str_pos[i];
   24384:	f107 0a30 	add.w	sl, r7, #48	; 0x30
	for (int i = 0; i < scpy_cnt; i++) {
   24388:	45b3      	cmp	fp, r6
   2438a:	f2c0 80a0 	blt.w	244ce <cbprintf_package_convert+0x3ee>
	(void)cb(NULL, 0, ctx);
   2438e:	2100      	movs	r1, #0
   24390:	69ba      	ldr	r2, [r7, #24]
   24392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   24394:	4608      	mov	r0, r1
   24396:	4798      	blx	r3
	return out_len;
   24398:	e6dc      	b.n	24154 <cbprintf_package_convert+0x74>
   2439a:	bf00      	nop
   2439c:	0003d278 	.word	0x0003d278
   243a0:	0003d1d7 	.word	0x0003d1d7
   243a4:	0003bfd8 	.word	0x0003bfd8
   243a8:	0003fe60 	.word	0x0003fe60
   243ac:	20000aa0 	.word	0x20000aa0
   243b0:	0003d2a6 	.word	0x0003d2a6
   243b4:	01000004 	.word	0x01000004
	if (cb == NULL) {
   243b8:	f04f 0800 	mov.w	r8, #0
   243bc:	f107 0030 	add.w	r0, r7, #48	; 0x30
   243c0:	e784      	b.n	242cc <cbprintf_package_convert+0x1ec>
		scpy_cnt = 0;
   243c2:	464e      	mov	r6, r9
		keep_cnt = 0;
   243c4:	46c8      	mov	r8, r9
   243c6:	e785      	b.n	242d4 <cbprintf_package_convert+0x1f4>
   243c8:	46b0      	mov	r8, r6
   243ca:	e783      	b.n	242d4 <cbprintf_package_convert+0x1f4>
		uint8_t arg_idx = *str_pos++;
   243cc:	f81a 1b02 	ldrb.w	r1, [sl], #2
   243d0:	4b56      	ldr	r3, [pc, #344]	; (2452c <cbprintf_package_convert+0x44c>)
		uint8_t arg_pos = *str_pos++;
   243d2:	f81a 5c01 	ldrb.w	r5, [sl, #-1]
		const char *str = *(const char **)&buf32[arg_pos];
   243d6:	f854 2025 	ldr.w	r2, [r4, r5, lsl #2]
   243da:	429a      	cmp	r2, r3
   243dc:	d302      	bcc.n	243e4 <cbprintf_package_convert+0x304>
   243de:	4b54      	ldr	r3, [pc, #336]	; (24530 <cbprintf_package_convert+0x450>)
   243e0:	429a      	cmp	r2, r3
   243e2:	d315      	bcc.n	24410 <cbprintf_package_convert+0x330>
		if (fmt_present && is_ptr(fmt, arg_idx)) {
   243e4:	693b      	ldr	r3, [r7, #16]
   243e6:	b12b      	cbz	r3, 243f4 <cbprintf_package_convert+0x314>
   243e8:	69f8      	ldr	r0, [r7, #28]
   243ea:	f014 f94e 	bl	3868a <is_ptr>
   243ee:	2800      	cmp	r0, #0
   243f0:	f47f af7b 	bne.w	242ea <cbprintf_package_convert+0x20a>
			if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
   243f4:	687b      	ldr	r3, [r7, #4]
   243f6:	2b00      	cmp	r3, #0
   243f8:	d047      	beq.n	2448a <cbprintf_package_convert+0x3aa>
				__ASSERT_NO_MSG(scpy_cnt < sizeof(cpy_str_pos));
   243fa:	2e0f      	cmp	r6, #15
   243fc:	d93b      	bls.n	24476 <cbprintf_package_convert+0x396>
   243fe:	494d      	ldr	r1, [pc, #308]	; (24534 <cbprintf_package_convert+0x454>)
   24400:	484d      	ldr	r0, [pc, #308]	; (24538 <cbprintf_package_convert+0x458>)
   24402:	f44f 6289 	mov.w	r2, #1096	; 0x448
   24406:	f014 fb84 	bl	38b12 <assert_print>
   2440a:	f44f 6189 	mov.w	r1, #1096	; 0x448
   2440e:	e67a      	b.n	24106 <cbprintf_package_convert+0x26>
		if (fmt_present && is_ptr(fmt, arg_idx)) {
   24410:	693b      	ldr	r3, [r7, #16]
   24412:	b12b      	cbz	r3, 24420 <cbprintf_package_convert+0x340>
   24414:	69f8      	ldr	r0, [r7, #28]
   24416:	f014 f938 	bl	3868a <is_ptr>
   2441a:	2800      	cmp	r0, #0
   2441c:	f47f af65 	bne.w	242ea <cbprintf_package_convert+0x20a>
			if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
   24420:	f01b 0f01 	tst.w	fp, #1
   24424:	d00a      	beq.n	2443c <cbprintf_package_convert+0x35c>
				__ASSERT_NO_MSG(scpy_cnt < sizeof(cpy_str_pos));
   24426:	2e0f      	cmp	r6, #15
   24428:	d925      	bls.n	24476 <cbprintf_package_convert+0x396>
   2442a:	4942      	ldr	r1, [pc, #264]	; (24534 <cbprintf_package_convert+0x454>)
   2442c:	4842      	ldr	r0, [pc, #264]	; (24538 <cbprintf_package_convert+0x458>)
   2442e:	f240 423e 	movw	r2, #1086	; 0x43e
   24432:	f014 fb6e 	bl	38b12 <assert_print>
   24436:	f240 413e 	movw	r1, #1086	; 0x43e
   2443a:	e664      	b.n	24106 <cbprintf_package_convert+0x26>
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
   2443c:	f01b 0f04 	tst.w	fp, #4
   24440:	f43f af53 	beq.w	242ea <cbprintf_package_convert+0x20a>
				__ASSERT_NO_MSG(keep_cnt < sizeof(keep_str_pos));
   24444:	f1b8 0f0f 	cmp.w	r8, #15
   24448:	d908      	bls.n	2445c <cbprintf_package_convert+0x37c>
   2444a:	493a      	ldr	r1, [pc, #232]	; (24534 <cbprintf_package_convert+0x454>)
   2444c:	483a      	ldr	r0, [pc, #232]	; (24538 <cbprintf_package_convert+0x458>)
   2444e:	f240 4241 	movw	r2, #1089	; 0x441
   24452:	f014 fb5e 	bl	38b12 <assert_print>
   24456:	f240 4141 	movw	r1, #1089	; 0x441
   2445a:	e654      	b.n	24106 <cbprintf_package_convert+0x26>
				keep_str_pos[keep_cnt++] = arg_pos;
   2445c:	f108 0328 	add.w	r3, r8, #40	; 0x28
   24460:	f107 0128 	add.w	r1, r7, #40	; 0x28
   24464:	f108 0201 	add.w	r2, r8, #1
   24468:	eb03 0801 	add.w	r8, r3, r1
   2446c:	f808 5c10 	strb.w	r5, [r8, #-16]
   24470:	fa5f f882 	uxtb.w	r8, r2
   24474:	e739      	b.n	242ea <cbprintf_package_convert+0x20a>
				cpy_str_pos[scpy_cnt++] = arg_pos;
   24476:	f106 0328 	add.w	r3, r6, #40	; 0x28
   2447a:	f107 0128 	add.w	r1, r7, #40	; 0x28
   2447e:	1c72      	adds	r2, r6, #1
   24480:	185e      	adds	r6, r3, r1
   24482:	f806 5c20 	strb.w	r5, [r6, #-32]
   24486:	b2d6      	uxtb	r6, r2
   24488:	e72f      	b.n	242ea <cbprintf_package_convert+0x20a>
				__ASSERT_NO_MSG(keep_cnt < sizeof(keep_str_pos));
   2448a:	f1b8 0f0f 	cmp.w	r8, #15
   2448e:	d908      	bls.n	244a2 <cbprintf_package_convert+0x3c2>
   24490:	4928      	ldr	r1, [pc, #160]	; (24534 <cbprintf_package_convert+0x454>)
   24492:	4829      	ldr	r0, [pc, #164]	; (24538 <cbprintf_package_convert+0x458>)
   24494:	f240 424b 	movw	r2, #1099	; 0x44b
   24498:	f014 fb3b 	bl	38b12 <assert_print>
   2449c:	f240 414b 	movw	r1, #1099	; 0x44b
   244a0:	e631      	b.n	24106 <cbprintf_package_convert+0x26>
				keep_str_pos[keep_cnt++] = arg_idx;
   244a2:	f108 0328 	add.w	r3, r8, #40	; 0x28
   244a6:	f107 0028 	add.w	r0, r7, #40	; 0x28
   244aa:	f108 0201 	add.w	r2, r8, #1
   244ae:	1818      	adds	r0, r3, r0
				keep_str_pos[keep_cnt++] = arg_pos;
   244b0:	f107 0350 	add.w	r3, r7, #80	; 0x50
   244b4:	fa53 f282 	uxtab	r2, r3, r2
   244b8:	f108 0802 	add.w	r8, r8, #2
				keep_str_pos[keep_cnt++] = arg_idx;
   244bc:	f800 1c10 	strb.w	r1, [r0, #-16]
				keep_str_pos[keep_cnt++] = arg_pos;
   244c0:	fa5f f888 	uxtb.w	r8, r8
   244c4:	f802 5c10 	strb.w	r5, [r2, #-16]
	for (int i = 0; i < rws_nbr; i++) {
   244c8:	e70f      	b.n	242ea <cbprintf_package_convert+0x20a>
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
   244ca:	2000      	movs	r0, #0
   244cc:	e725      	b.n	2431a <cbprintf_package_convert+0x23a>
		uint8_t loc = cpy_str_pos[i];
   244ce:	f81b 300a 	ldrb.w	r3, [fp, sl]
   244d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		const char *str = *(const char **)&buf32[loc];
   244d6:	f854 9023 	ldr.w	r9, [r4, r3, lsl #2]
		uint16_t str_len = strl ? strl[i] : 0;
   244da:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
   244dc:	b1fb      	cbz	r3, 2451e <cbprintf_package_convert+0x43e>
   244de:	f833 801b 	ldrh.w	r8, [r3, fp, lsl #1]
		rv = cb(&loc, 1, ctx);
   244e2:	69ba      	ldr	r2, [r7, #24]
   244e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   244e6:	2101      	movs	r1, #1
   244e8:	f107 002f 	add.w	r0, r7, #47	; 0x2f
   244ec:	4798      	blx	r3
		if (rv < 0) {
   244ee:	2800      	cmp	r0, #0
   244f0:	db1a      	blt.n	24528 <cbprintf_package_convert+0x448>
		out_len += rv;
   244f2:	4405      	add	r5, r0
	strl = strl > 0 ? strl : strlen(str) + 1;
   244f4:	f1b8 0f00 	cmp.w	r8, #0
   244f8:	d106      	bne.n	24508 <cbprintf_package_convert+0x428>
   244fa:	4648      	mov	r0, r9
   244fc:	f014 ff15 	bl	3932a <strlen>
   24500:	f100 0801 	add.w	r8, r0, #1
   24504:	fa1f f888 	uxth.w	r8, r8
	return cb(str, strl, ctx);
   24508:	69ba      	ldr	r2, [r7, #24]
   2450a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2450c:	4641      	mov	r1, r8
   2450e:	4648      	mov	r0, r9
   24510:	4798      	blx	r3
		if (rv < 0) {
   24512:	2800      	cmp	r0, #0
   24514:	db08      	blt.n	24528 <cbprintf_package_convert+0x448>
		out_len += rv;
   24516:	4405      	add	r5, r0
	for (int i = 0; i < scpy_cnt; i++) {
   24518:	f10b 0b01 	add.w	fp, fp, #1
   2451c:	e734      	b.n	24388 <cbprintf_package_convert+0x2a8>
		uint16_t str_len = strl ? strl[i] : 0;
   2451e:	f8d7 807c 	ldr.w	r8, [r7, #124]	; 0x7c
   24522:	e7de      	b.n	244e2 <cbprintf_package_convert+0x402>
   24524:	4645      	mov	r5, r8
   24526:	e615      	b.n	24154 <cbprintf_package_convert+0x74>
   24528:	4605      	mov	r5, r0
   2452a:	e613      	b.n	24154 <cbprintf_package_convert+0x74>
   2452c:	0003bfd8 	.word	0x0003bfd8
   24530:	0003fe60 	.word	0x0003fe60
   24534:	0003d278 	.word	0x0003d278
   24538:	0003d1d7 	.word	0x0003d1d7

0002453c <__printk_hook_install>:
 * routine that outputs one ASCII character at a time.
 * @param fn putc routine to install
 */
void __printk_hook_install(int (*fn)(int c))
{
	_char_out = fn;
   2453c:	4b01      	ldr	r3, [pc, #4]	; (24544 <__printk_hook_install+0x8>)
   2453e:	6018      	str	r0, [r3, #0]
}
   24540:	4770      	bx	lr
   24542:	bf00      	nop
   24544:	20000638 	.word	0x20000638

00024548 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
   24548:	b530      	push	{r4, r5, lr}
   2454a:	b087      	sub	sp, #28
	struct str_context ctx = { str, size, 0 };
   2454c:	2500      	movs	r5, #0
   2454e:	e9cd 0103 	strd	r0, r1, [sp, #12]
{
   24552:	4604      	mov	r4, r0
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
   24554:	9500      	str	r5, [sp, #0]
   24556:	a903      	add	r1, sp, #12
   24558:	4805      	ldr	r0, [pc, #20]	; (24570 <vsnprintk+0x28>)
	struct str_context ctx = { str, size, 0 };
   2455a:	9505      	str	r5, [sp, #20]
   2455c:	f000 fc56 	bl	24e0c <z_cbvprintf_impl>

	cbvprintf(str_out, &ctx, fmt, ap);

	if (ctx.count < ctx.max) {
   24560:	e9dd 3004 	ldrd	r3, r0, [sp, #16]
   24564:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
   24566:	bfb8      	it	lt
   24568:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
   2456a:	b007      	add	sp, #28
   2456c:	bd30      	pop	{r4, r5, pc}
   2456e:	bf00      	nop
   24570:	000386d9 	.word	0x000386d9

00024574 <sys_heap_free>:
	uint8_t *mem = p, *base = (uint8_t *)chunk_buf(h);
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
}

void sys_heap_free(struct sys_heap *heap, void *mem)
{
   24574:	b538      	push	{r3, r4, r5, lr}
	if (mem == NULL) {
   24576:	b351      	cbz	r1, 245ce <sys_heap_free+0x5a>
		return; /* ISO C free() semantics */
	}
	struct z_heap *h = heap->heap;
   24578:	6802      	ldr	r2, [r0, #0]
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   2457a:	1f0b      	subs	r3, r1, #4
   2457c:	1a9b      	subs	r3, r3, r2
   2457e:	08d9      	lsrs	r1, r3, #3

static inline chunkid_t chunk_field(struct z_heap *h, chunkid_t c,
				    enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
   24580:	f023 0307 	bic.w	r3, r3, #7

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
   24584:	4413      	add	r3, r2
	}
}

static inline bool chunk_used(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   24586:	885c      	ldrh	r4, [r3, #2]

	/*
	 * This should catch many double-free cases.
	 * This is cheap enough so let's do it all the time.
	 */
	__ASSERT(chunk_used(h, c),
   24588:	07e0      	lsls	r0, r4, #31
   2458a:	d408      	bmi.n	2459e <sys_heap_free+0x2a>
   2458c:	4910      	ldr	r1, [pc, #64]	; (245d0 <sys_heap_free+0x5c>)
   2458e:	4811      	ldr	r0, [pc, #68]	; (245d4 <sys_heap_free+0x60>)
   24590:	22af      	movs	r2, #175	; 0xaf
   24592:	f014 fabe 	bl	38b12 <assert_print>
   24596:	21af      	movs	r1, #175	; 0xaf
	/*
	 * It is easy to catch many common memory overflow cases with
	 * a quick check on this and next chunk header fields that are
	 * immediately before and after the freed memory.
	 */
	__ASSERT(left_chunk(h, right_chunk(h, c)) == c,
   24598:	480d      	ldr	r0, [pc, #52]	; (245d0 <sys_heap_free+0x5c>)
   2459a:	f014 fab3 	bl	38b04 <assert_post_action>
	return c - chunk_field(h, c, LEFT_SIZE);
}

static inline chunkid_t right_chunk(struct z_heap *h, chunkid_t c)
{
	return c + chunk_size(h, c);
   2459e:	4610      	mov	r0, r2
   245a0:	f014 f8d3 	bl	3874a <chunk_size>
   245a4:	4408      	add	r0, r1
		return ((uint16_t *)cmem)[f];
   245a6:	f832 5030 	ldrh.w	r5, [r2, r0, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   245aa:	1b40      	subs	r0, r0, r5
   245ac:	4281      	cmp	r1, r0
   245ae:	d006      	beq.n	245be <sys_heap_free+0x4a>
   245b0:	4907      	ldr	r1, [pc, #28]	; (245d0 <sys_heap_free+0x5c>)
   245b2:	4808      	ldr	r0, [pc, #32]	; (245d4 <sys_heap_free+0x60>)
   245b4:	22b7      	movs	r2, #183	; 0xb7
   245b6:	f014 faac 	bl	38b12 <assert_print>
   245ba:	21b7      	movs	r1, #183	; 0xb7
   245bc:	e7ec      	b.n	24598 <sys_heap_free+0x24>
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   245be:	f024 0401 	bic.w	r4, r4, #1
   245c2:	805c      	strh	r4, [r3, #2]
	heap_listener_notify_free(HEAP_ID_FROM_POINTER(heap), mem,
				  chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	free_chunk(h, c);
}
   245c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	free_chunk(h, c);
   245c8:	4610      	mov	r0, r2
   245ca:	f014 b97b 	b.w	388c4 <free_chunk>
}
   245ce:	bd38      	pop	{r3, r4, r5, pc}
   245d0:	0003d35a 	.word	0x0003d35a
   245d4:	0003d1d7 	.word	0x0003d1d7

000245d8 <sys_heap_aligned_alloc>:
	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   245d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   245dc:	1e4b      	subs	r3, r1, #1
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
	if (align != rew) {
   245de:	400b      	ands	r3, r1
	struct z_heap *h = heap->heap;
   245e0:	6806      	ldr	r6, [r0, #0]
{
   245e2:	460f      	mov	r7, r1
   245e4:	4614      	mov	r4, r2
	if (align != rew) {
   245e6:	d011      	beq.n	2460c <sys_heap_aligned_alloc+0x34>
	rew = align & -align;
   245e8:	f1c1 0900 	rsb	r9, r1, #0
   245ec:	ea09 0901 	and.w	r9, r9, r1
		align -= rew;
		gap = MIN(rew, chunk_header_bytes(h));
   245f0:	464a      	mov	r2, r9
   245f2:	2a04      	cmp	r2, #4
			return sys_heap_alloc(heap, bytes);
		}
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
   245f4:	f103 31ff 	add.w	r1, r3, #4294967295	; 0xffffffff
		gap = MIN(rew, chunk_header_bytes(h));
   245f8:	bf28      	it	cs
   245fa:	2204      	movcs	r2, #4
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
   245fc:	4219      	tst	r1, r3
   245fe:	d10c      	bne.n	2461a <sys_heap_aligned_alloc+0x42>
   24600:	461f      	mov	r7, r3

	if (bytes == 0 || size_too_big(h, bytes)) {
   24602:	b9c4      	cbnz	r4, 24636 <sys_heap_aligned_alloc+0x5e>
		return NULL;
   24604:	2500      	movs	r5, #0
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
   24606:	4628      	mov	r0, r5
   24608:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (align <= chunk_header_bytes(h)) {
   2460c:	2904      	cmp	r1, #4
   2460e:	d80f      	bhi.n	24630 <sys_heap_aligned_alloc+0x58>
}
   24610:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
   24614:	4611      	mov	r1, r2
   24616:	f014 b986 	b.w	38926 <sys_heap_alloc>
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
   2461a:	492a      	ldr	r1, [pc, #168]	; (246c4 <sys_heap_aligned_alloc+0xec>)
   2461c:	482a      	ldr	r0, [pc, #168]	; (246c8 <sys_heap_aligned_alloc+0xf0>)
   2461e:	f44f 72a2 	mov.w	r2, #324	; 0x144
   24622:	f014 fa76 	bl	38b12 <assert_print>
   24626:	4827      	ldr	r0, [pc, #156]	; (246c4 <sys_heap_aligned_alloc+0xec>)
   24628:	f44f 71a2 	mov.w	r1, #324	; 0x144
   2462c:	f014 fa6a 	bl	38b04 <assert_post_action>
		rew = 0;
   24630:	4699      	mov	r9, r3
		gap = chunk_header_bytes(h);
   24632:	2204      	movs	r2, #4
   24634:	e7e5      	b.n	24602 <sys_heap_aligned_alloc+0x2a>
	if (bytes == 0 || size_too_big(h, bytes)) {
   24636:	68b3      	ldr	r3, [r6, #8]
   24638:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
   2463c:	d9e2      	bls.n	24604 <sys_heap_aligned_alloc+0x2c>
	return big_heap_bytes(size) ? 8 : 4;
}

static inline chunksz_t chunksz(size_t bytes)
{
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   2463e:	f104 010b 	add.w	r1, r4, #11
   24642:	4439      	add	r1, r7
   24644:	1a89      	subs	r1, r1, r2
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   24646:	08c9      	lsrs	r1, r1, #3
   24648:	4630      	mov	r0, r6
   2464a:	f014 f8d4 	bl	387f6 <alloc_chunk>
	if (c0 == 0) {
   2464e:	4680      	mov	r8, r0
   24650:	2800      	cmp	r0, #0
   24652:	d0d7      	beq.n	24604 <sys_heap_aligned_alloc+0x2c>
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   24654:	f109 0504 	add.w	r5, r9, #4
   24658:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
   2465c:	1e7b      	subs	r3, r7, #1
   2465e:	4435      	add	r5, r6
   24660:	441d      	add	r5, r3
   24662:	427f      	negs	r7, r7
   24664:	403d      	ands	r5, r7
   24666:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   2466a:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   2466c:	1f2b      	subs	r3, r5, #4
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   2466e:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   24670:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   24672:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
   24676:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
   24678:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   2467c:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
   24680:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
   24684:	d208      	bcs.n	24698 <sys_heap_aligned_alloc+0xc0>
		split_chunks(h, c0, c);
   24686:	4601      	mov	r1, r0
   24688:	463a      	mov	r2, r7
   2468a:	4630      	mov	r0, r6
   2468c:	f014 f900 	bl	38890 <split_chunks>
		free_list_add(h, c0);
   24690:	4641      	mov	r1, r8
   24692:	4630      	mov	r0, r6
   24694:	f014 f85e 	bl	38754 <free_list_add>
	return c + chunk_size(h, c);
   24698:	4639      	mov	r1, r7
   2469a:	4630      	mov	r0, r6
   2469c:	f014 f855 	bl	3874a <chunk_size>
   246a0:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
   246a2:	4284      	cmp	r4, r0
   246a4:	d207      	bcs.n	246b6 <sys_heap_aligned_alloc+0xde>
		split_chunks(h, c, c_end);
   246a6:	4630      	mov	r0, r6
   246a8:	4622      	mov	r2, r4
   246aa:	f014 f8f1 	bl	38890 <split_chunks>
		free_list_add(h, c_end);
   246ae:	4621      	mov	r1, r4
   246b0:	4630      	mov	r0, r6
   246b2:	f014 f84f 	bl	38754 <free_list_add>
	void *cmem = &buf[c];
   246b6:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   246ba:	8873      	ldrh	r3, [r6, #2]
   246bc:	f043 0301 	orr.w	r3, r3, #1
   246c0:	8073      	strh	r3, [r6, #2]
   246c2:	e7a0      	b.n	24606 <sys_heap_aligned_alloc+0x2e>
   246c4:	0003d35a 	.word	0x0003d35a
   246c8:	0003d1d7 	.word	0x0003d1d7

000246cc <sys_heap_init>:
{
	IF_ENABLED(CONFIG_MSAN, (__sanitizer_dtor_callback(mem, bytes)));

	if (IS_ENABLED(CONFIG_SYS_HEAP_SMALL_ONLY)) {
		/* Must fit in a 15 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffU, "heap size is too big");
   246cc:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
{
   246d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   246d2:	4604      	mov	r4, r0
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffU, "heap size is too big");
   246d4:	d30a      	bcc.n	246ec <sys_heap_init+0x20>
   246d6:	4933      	ldr	r1, [pc, #204]	; (247a4 <sys_heap_init+0xd8>)
   246d8:	4833      	ldr	r0, [pc, #204]	; (247a8 <sys_heap_init+0xdc>)
   246da:	f240 12eb 	movw	r2, #491	; 0x1eb
   246de:	f014 fa18 	bl	38b12 <assert_print>
   246e2:	f240 11eb 	movw	r1, #491	; 0x1eb
		/* Must fit in a 31 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
   246e6:	482f      	ldr	r0, [pc, #188]	; (247a4 <sys_heap_init+0xd8>)
   246e8:	f014 fa0c 	bl	38b04 <assert_post_action>
   246ec:	2a04      	cmp	r2, #4
   246ee:	d808      	bhi.n	24702 <sys_heap_init+0x36>
   246f0:	492c      	ldr	r1, [pc, #176]	; (247a4 <sys_heap_init+0xd8>)
   246f2:	482d      	ldr	r0, [pc, #180]	; (247a8 <sys_heap_init+0xdc>)
   246f4:	f44f 72f9 	mov.w	r2, #498	; 0x1f2
   246f8:	f014 fa0b 	bl	38b12 <assert_print>
   246fc:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
   24700:	e7f1      	b.n	246e6 <sys_heap_init+0x1a>
	bytes -= heap_footer_bytes(bytes);
   24702:	3a04      	subs	r2, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   24704:	1dc8      	adds	r0, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   24706:	440a      	add	r2, r1
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   24708:	f020 0007 	bic.w	r0, r0, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   2470c:	f022 0207 	bic.w	r2, r2, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   24710:	1a12      	subs	r2, r2, r0

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
   24712:	2a17      	cmp	r2, #23
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   24714:	ea4f 03d2 	mov.w	r3, r2, lsr #3
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
   24718:	d808      	bhi.n	2472c <sys_heap_init+0x60>
   2471a:	4922      	ldr	r1, [pc, #136]	; (247a4 <sys_heap_init+0xd8>)
   2471c:	4822      	ldr	r0, [pc, #136]	; (247a8 <sys_heap_init+0xdc>)
   2471e:	f240 12fb 	movw	r2, #507	; 0x1fb
   24722:	f014 f9f6 	bl	38b12 <assert_print>
   24726:	f240 11fb 	movw	r1, #507	; 0x1fb
   2472a:	e7dc      	b.n	246e6 <sys_heap_init+0x1a>
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
   2472c:	fab3 f183 	clz	r1, r3
	h->free_bytes = 0;
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   24730:	f1c1 0620 	rsb	r6, r1, #32
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   24734:	f1c1 0124 	rsb	r1, r1, #36	; 0x24
   24738:	0089      	lsls	r1, r1, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   2473a:	3107      	adds	r1, #7
   2473c:	08c9      	lsrs	r1, r1, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
   2473e:	1c4d      	adds	r5, r1, #1
	heap->heap = h;
   24740:	6020      	str	r0, [r4, #0]
	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
   24742:	429d      	cmp	r5, r3
	h->avail_buckets = 0;
   24744:	f04f 0400 	mov.w	r4, #0
	h->end_chunk = heap_sz;
   24748:	6083      	str	r3, [r0, #8]
	h->avail_buckets = 0;
   2474a:	60c4      	str	r4, [r0, #12]
	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
   2474c:	d908      	bls.n	24760 <sys_heap_init+0x94>
   2474e:	4915      	ldr	r1, [pc, #84]	; (247a4 <sys_heap_init+0xd8>)
   24750:	4815      	ldr	r0, [pc, #84]	; (247a8 <sys_heap_init+0xdc>)
   24752:	f44f 7203 	mov.w	r2, #524	; 0x20c
   24756:	f014 f9dc 	bl	38b12 <assert_print>
   2475a:	f44f 7103 	mov.w	r1, #524	; 0x20c
   2475e:	e7c2      	b.n	246e6 <sys_heap_init+0x1a>
   24760:	f100 050c 	add.w	r5, r0, #12
   24764:	eb05 0686 	add.w	r6, r5, r6, lsl #2

	for (int i = 0; i < nb_buckets; i++) {
		h->buckets[i].next = 0;
   24768:	f845 4f04 	str.w	r4, [r5, #4]!
	for (int i = 0; i < nb_buckets; i++) {
   2476c:	42b5      	cmp	r5, r6
   2476e:	d1fb      	bne.n	24768 <sys_heap_init+0x9c>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   24770:	004d      	lsls	r5, r1, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   24772:	f045 0501 	orr.w	r5, r5, #1
   24776:	8045      	strh	r5, [r0, #2]
		((uint16_t *)cmem)[f] = val;
   24778:	eb00 06c1 	add.w	r6, r0, r1, lsl #3
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   2477c:	1a5d      	subs	r5, r3, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   2477e:	006f      	lsls	r7, r5, #1
		((uint16_t *)cmem)[f] = val;
   24780:	8004      	strh	r4, [r0, #0]
   24782:	8077      	strh	r7, [r6, #2]
   24784:	1886      	adds	r6, r0, r2
   24786:	f820 1031 	strh.w	r1, [r0, r1, lsl #3]
	void *cmem = &buf[c];
   2478a:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
		((uint16_t *)cmem)[f] = val;
   2478e:	8074      	strh	r4, [r6, #2]
   24790:	5285      	strh	r5, [r0, r2]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   24792:	885a      	ldrh	r2, [r3, #2]
   24794:	f042 0201 	orr.w	r2, r2, #1
   24798:	805a      	strh	r2, [r3, #2]
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
}
   2479a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, chunk0_size);
   2479e:	f013 bfd9 	b.w	38754 <free_list_add>
   247a2:	bf00      	nop
   247a4:	0003d35a 	.word	0x0003d35a
   247a8:	0003d1d7 	.word	0x0003d1d7

000247ac <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
   247ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   247b0:	4604      	mov	r4, r0
   247b2:	4608      	mov	r0, r1
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   247b4:	8ba3      	ldrh	r3, [r4, #28]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
   247b6:	0719      	lsls	r1, r3, #28
{
   247b8:	4616      	mov	r6, r2
	if (processing) {
   247ba:	d412      	bmi.n	247e2 <process_event+0x36>

	sys_slist_init(&clients);
	do {
		onoff_transition_fn transit = NULL;

		if (evt == EVT_RECHECK) {
   247bc:	2802      	cmp	r0, #2
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   247be:	f003 0107 	and.w	r1, r3, #7
		if (evt == EVT_RECHECK) {
   247c2:	d162      	bne.n	2488a <process_event+0xde>
			evt = process_recheck(mgr);
   247c4:	4620      	mov	r0, r4
   247c6:	f014 f8d7 	bl	38978 <process_recheck>
		}

		if (evt == EVT_NOP) {
   247ca:	b188      	cbz	r0, 247f0 <process_event+0x44>
			break;
		}

		res = 0;
		if (evt == EVT_COMPLETE) {
   247cc:	3801      	subs	r0, #1
   247ce:	2804      	cmp	r0, #4
   247d0:	f200 8121 	bhi.w	24a16 <process_event+0x26a>
   247d4:	e8df f010 	tbh	[pc, r0, lsl #1]
   247d8:	011f0059 	.word	0x011f0059
   247dc:	00c4007e 	.word	0x00c4007e
   247e0:	00f1      	.short	0x00f1
		if (evt == EVT_COMPLETE) {
   247e2:	2801      	cmp	r0, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
   247e4:	bf0c      	ite	eq
   247e6:	f043 0110 	orreq.w	r1, r3, #16
			mgr->flags |= ONOFF_FLAG_RECHECK;
   247ea:	f043 0120 	orrne.w	r1, r3, #32
   247ee:	83a1      	strh	r1, [r4, #28]
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   247f0:	f104 0014 	add.w	r0, r4, #20
   247f4:	f010 fd38 	bl	35268 <z_spin_unlock_valid>
   247f8:	2800      	cmp	r0, #0
   247fa:	f000 80a9 	beq.w	24950 <process_event+0x1a4>
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
   247fe:	f386 8811 	msr	BASEPRI, r6
   24802:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
   24806:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2480a:	f003 0207 	and.w	r2, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
   2480e:	1f50      	subs	r0, r2, #5
	} else if ((state == ONOFF_STATE_TO_ON)
   24810:	2801      	cmp	r0, #1
   24812:	d81e      	bhi.n	24852 <process_event+0xa6>
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
   24814:	2000      	movs	r0, #0
		if (state == ONOFF_STATE_TO_ON) {
   24816:	2a06      	cmp	r2, #6
		*clients = mgr->clients;
   24818:	6827      	ldr	r7, [r4, #0]
	list->tail = NULL;
   2481a:	e9c4 0000 	strd	r0, r0, [r4]
		if (state == ONOFF_STATE_TO_ON) {
   2481e:	d114      	bne.n	2484a <process_event+0x9e>
		*clients = mgr->clients;
   24820:	463a      	mov	r2, r7
   24822:	e003      	b.n	2482c <process_event+0x80>
				mgr->refs += 1U;
   24824:	8be0      	ldrh	r0, [r4, #30]
   24826:	3001      	adds	r0, #1
   24828:	83e0      	strh	r0, [r4, #30]

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
   2482a:	6812      	ldr	r2, [r2, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   2482c:	2a00      	cmp	r2, #0
   2482e:	d1f9      	bne.n	24824 <process_event+0x78>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   24830:	f023 0307 	bic.w	r3, r3, #7
   24834:	f043 0202 	orr.w	r2, r3, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
   24838:	83a2      	strh	r2, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
   2483a:	4620      	mov	r0, r4
   2483c:	f014 f89c 	bl	38978 <process_recheck>
   24840:	b390      	cbz	r0, 248a8 <process_event+0xfc>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   24842:	f042 0220 	orr.w	r2, r2, #32
   24846:	83a2      	strh	r2, [r4, #28]
   24848:	e02e      	b.n	248a8 <process_event+0xfc>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   2484a:	f023 0307 	bic.w	r3, r3, #7
   2484e:	b29a      	uxth	r2, r3
}
   24850:	e7f2      	b.n	24838 <process_event+0x8c>
	} else if (state == ONOFF_STATE_TO_OFF) {
   24852:	2a04      	cmp	r2, #4
   24854:	d133      	bne.n	248be <process_event+0x112>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   24856:	f023 0307 	bic.w	r3, r3, #7
   2485a:	b29a      	uxth	r2, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
   2485c:	83a2      	strh	r2, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
   2485e:	4620      	mov	r0, r4
   24860:	f014 f88a 	bl	38978 <process_recheck>
   24864:	b110      	cbz	r0, 2486c <process_event+0xc0>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   24866:	f042 0220 	orr.w	r2, r2, #32
   2486a:	83a2      	strh	r2, [r4, #28]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   2486c:	8ba3      	ldrh	r3, [r4, #28]
   2486e:	f003 0907 	and.w	r9, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   24872:	4589      	cmp	r9, r1
   24874:	f040 80d8 	bne.w	24a28 <process_event+0x27c>
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
   24878:	8ba1      	ldrh	r1, [r4, #28]
   2487a:	06ca      	lsls	r2, r1, #27
   2487c:	f140 811e 	bpl.w	24abc <process_event+0x310>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   24880:	f021 0310 	bic.w	r3, r1, #16
   24884:	83a3      	strh	r3, [r4, #28]
		state = mgr->flags & ONOFF_STATE_MASK;
   24886:	f001 0107 	and.w	r1, r1, #7
			res = mgr->last_res;
   2488a:	f8d4 8018 	ldr.w	r8, [r4, #24]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   2488e:	8ba3      	ldrh	r3, [r4, #28]
	if (res < 0) {
   24890:	f1b8 0f00 	cmp.w	r8, #0
   24894:	dab9      	bge.n	2480a <process_event+0x5e>
	list->head = NULL;
   24896:	2200      	movs	r2, #0
		*clients = mgr->clients;
   24898:	6827      	ldr	r7, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   2489a:	f023 0307 	bic.w	r3, r3, #7
	list->tail = NULL;
   2489e:	e9c4 2200 	strd	r2, r2, [r4]
   248a2:	f043 0301 	orr.w	r3, r3, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
   248a6:	83a3      	strh	r3, [r4, #28]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   248a8:	8ba3      	ldrh	r3, [r4, #28]
   248aa:	f003 0907 	and.w	r9, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   248ae:	4589      	cmp	r9, r1
   248b0:	f040 80bb 	bne.w	24a2a <process_event+0x27e>
		    || !sys_slist_is_empty(&clients)
   248b4:	2f00      	cmp	r7, #0
   248b6:	d0df      	beq.n	24878 <process_event+0xcc>
   248b8:	2500      	movs	r5, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   248ba:	46aa      	mov	sl, r5
   248bc:	e03e      	b.n	2493c <process_event+0x190>
		__ASSERT_NO_MSG(false);
   248be:	4984      	ldr	r1, [pc, #528]	; (24ad0 <process_event+0x324>)
   248c0:	4884      	ldr	r0, [pc, #528]	; (24ad4 <process_event+0x328>)
   248c2:	f240 121b 	movw	r2, #283	; 0x11b
   248c6:	f014 f924 	bl	38b12 <assert_print>
   248ca:	f240 111b 	movw	r1, #283	; 0x11b
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
   248ce:	4880      	ldr	r0, [pc, #512]	; (24ad0 <process_event+0x324>)
   248d0:	f014 f918 	bl	38b04 <assert_post_action>
   248d4:	b141      	cbz	r1, 248e8 <process_event+0x13c>
   248d6:	497e      	ldr	r1, [pc, #504]	; (24ad0 <process_event+0x324>)
   248d8:	487e      	ldr	r0, [pc, #504]	; (24ad4 <process_event+0x328>)
   248da:	f44f 72ab 	mov.w	r2, #342	; 0x156
   248de:	f014 f918 	bl	38b12 <assert_print>
   248e2:	f44f 71ab 	mov.w	r1, #342	; 0x156
   248e6:	e7f2      	b.n	248ce <process_event+0x122>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
   248e8:	6823      	ldr	r3, [r4, #0]
   248ea:	b943      	cbnz	r3, 248fe <process_event+0x152>
   248ec:	4978      	ldr	r1, [pc, #480]	; (24ad0 <process_event+0x324>)
   248ee:	4879      	ldr	r0, [pc, #484]	; (24ad4 <process_event+0x328>)
   248f0:	f240 1257 	movw	r2, #343	; 0x157
   248f4:	f014 f90d 	bl	38b12 <assert_print>
   248f8:	f240 1157 	movw	r1, #343	; 0x157
   248fc:	e7e7      	b.n	248ce <process_event+0x122>
			transit = mgr->transitions->start;
   248fe:	6923      	ldr	r3, [r4, #16]
   24900:	681d      	ldr	r5, [r3, #0]
			__ASSERT_NO_MSG(transit != NULL);
   24902:	b945      	cbnz	r5, 24916 <process_event+0x16a>
   24904:	4972      	ldr	r1, [pc, #456]	; (24ad0 <process_event+0x324>)
   24906:	4873      	ldr	r0, [pc, #460]	; (24ad4 <process_event+0x328>)
   24908:	f44f 72ad 	mov.w	r2, #346	; 0x15a
   2490c:	f014 f901 	bl	38b12 <assert_print>
   24910:	f44f 71ad 	mov.w	r1, #346	; 0x15a
   24914:	e7db      	b.n	248ce <process_event+0x122>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   24916:	8ba3      	ldrh	r3, [r4, #28]
   24918:	f023 0307 	bic.w	r3, r3, #7
   2491c:	f043 0306 	orr.w	r3, r3, #6
   24920:	b29b      	uxth	r3, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
   24922:	83a3      	strh	r3, [r4, #28]
   24924:	460f      	mov	r7, r1
		res = 0;
   24926:	4688      	mov	r8, r1
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   24928:	f04f 0906 	mov.w	r9, #6
				   && !sys_slist_is_empty(&mgr->monitors);
   2492c:	68a2      	ldr	r2, [r4, #8]
   2492e:	2a00      	cmp	r2, #0
   24930:	d17d      	bne.n	24a2e <process_event+0x282>
		    || !sys_slist_is_empty(&clients)
   24932:	2f00      	cmp	r7, #0
   24934:	d17e      	bne.n	24a34 <process_event+0x288>
		    || (transit != NULL)) {
   24936:	2d00      	cmp	r5, #0
   24938:	d09e      	beq.n	24878 <process_event+0xcc>
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   2493a:	46ba      	mov	sl, r7
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   2493c:	f043 0308 	orr.w	r3, r3, #8
			k_spin_unlock(&mgr->lock, key);
   24940:	f104 0b14 	add.w	fp, r4, #20
			mgr->flags = flags;
   24944:	83a3      	strh	r3, [r4, #28]
   24946:	4658      	mov	r0, fp
   24948:	f010 fc8e 	bl	35268 <z_spin_unlock_valid>
   2494c:	2800      	cmp	r0, #0
   2494e:	d173      	bne.n	24a38 <process_event+0x28c>
   24950:	4961      	ldr	r1, [pc, #388]	; (24ad8 <process_event+0x32c>)
   24952:	4860      	ldr	r0, [pc, #384]	; (24ad4 <process_event+0x328>)
   24954:	22c2      	movs	r2, #194	; 0xc2
   24956:	f014 f8dc 	bl	38b12 <assert_print>
   2495a:	21c2      	movs	r1, #194	; 0xc2
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2495c:	485e      	ldr	r0, [pc, #376]	; (24ad8 <process_event+0x32c>)
   2495e:	e7b7      	b.n	248d0 <process_event+0x124>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
   24960:	2902      	cmp	r1, #2
   24962:	d008      	beq.n	24976 <process_event+0x1ca>
   24964:	495a      	ldr	r1, [pc, #360]	; (24ad0 <process_event+0x324>)
   24966:	485b      	ldr	r0, [pc, #364]	; (24ad4 <process_event+0x328>)
   24968:	f240 125d 	movw	r2, #349	; 0x15d
   2496c:	f014 f8d1 	bl	38b12 <assert_print>
   24970:	f240 115d 	movw	r1, #349	; 0x15d
   24974:	e7ab      	b.n	248ce <process_event+0x122>
			__ASSERT_NO_MSG(mgr->refs == 0);
   24976:	8be7      	ldrh	r7, [r4, #30]
   24978:	b147      	cbz	r7, 2498c <process_event+0x1e0>
   2497a:	4955      	ldr	r1, [pc, #340]	; (24ad0 <process_event+0x324>)
   2497c:	4855      	ldr	r0, [pc, #340]	; (24ad4 <process_event+0x328>)
   2497e:	f44f 72af 	mov.w	r2, #350	; 0x15e
   24982:	f014 f8c6 	bl	38b12 <assert_print>
   24986:	f44f 71af 	mov.w	r1, #350	; 0x15e
   2498a:	e7a0      	b.n	248ce <process_event+0x122>
			transit = mgr->transitions->stop;
   2498c:	6923      	ldr	r3, [r4, #16]
   2498e:	685d      	ldr	r5, [r3, #4]
			__ASSERT_NO_MSG(transit != NULL);
   24990:	b945      	cbnz	r5, 249a4 <process_event+0x1f8>
   24992:	494f      	ldr	r1, [pc, #316]	; (24ad0 <process_event+0x324>)
   24994:	484f      	ldr	r0, [pc, #316]	; (24ad4 <process_event+0x328>)
   24996:	f240 1261 	movw	r2, #353	; 0x161
   2499a:	f014 f8ba 	bl	38b12 <assert_print>
   2499e:	f240 1161 	movw	r1, #353	; 0x161
   249a2:	e794      	b.n	248ce <process_event+0x122>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   249a4:	8ba3      	ldrh	r3, [r4, #28]
   249a6:	f023 0307 	bic.w	r3, r3, #7
   249aa:	f043 0304 	orr.w	r3, r3, #4
   249ae:	b29b      	uxth	r3, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
   249b0:	83a3      	strh	r3, [r4, #28]
		res = 0;
   249b2:	46b8      	mov	r8, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   249b4:	f04f 0904 	mov.w	r9, #4
   249b8:	e7b8      	b.n	2492c <process_event+0x180>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
   249ba:	2901      	cmp	r1, #1
   249bc:	d008      	beq.n	249d0 <process_event+0x224>
   249be:	4944      	ldr	r1, [pc, #272]	; (24ad0 <process_event+0x324>)
   249c0:	4844      	ldr	r0, [pc, #272]	; (24ad4 <process_event+0x328>)
   249c2:	f44f 72b2 	mov.w	r2, #356	; 0x164
   249c6:	f014 f8a4 	bl	38b12 <assert_print>
   249ca:	f44f 71b2 	mov.w	r1, #356	; 0x164
   249ce:	e77e      	b.n	248ce <process_event+0x122>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
   249d0:	6823      	ldr	r3, [r4, #0]
   249d2:	b943      	cbnz	r3, 249e6 <process_event+0x23a>
   249d4:	493e      	ldr	r1, [pc, #248]	; (24ad0 <process_event+0x324>)
   249d6:	483f      	ldr	r0, [pc, #252]	; (24ad4 <process_event+0x328>)
   249d8:	f240 1265 	movw	r2, #357	; 0x165
   249dc:	f014 f899 	bl	38b12 <assert_print>
   249e0:	f240 1165 	movw	r1, #357	; 0x165
   249e4:	e773      	b.n	248ce <process_event+0x122>
			transit = mgr->transitions->reset;
   249e6:	6923      	ldr	r3, [r4, #16]
   249e8:	689d      	ldr	r5, [r3, #8]
			__ASSERT_NO_MSG(transit != NULL);
   249ea:	b945      	cbnz	r5, 249fe <process_event+0x252>
   249ec:	4938      	ldr	r1, [pc, #224]	; (24ad0 <process_event+0x324>)
   249ee:	4839      	ldr	r0, [pc, #228]	; (24ad4 <process_event+0x328>)
   249f0:	f44f 72b4 	mov.w	r2, #360	; 0x168
   249f4:	f014 f88d 	bl	38b12 <assert_print>
   249f8:	f44f 71b4 	mov.w	r1, #360	; 0x168
   249fc:	e767      	b.n	248ce <process_event+0x122>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   249fe:	8ba3      	ldrh	r3, [r4, #28]
   24a00:	f023 0307 	bic.w	r3, r3, #7
   24a04:	f043 0305 	orr.w	r3, r3, #5
   24a08:	b29b      	uxth	r3, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
   24a0a:	2700      	movs	r7, #0
   24a0c:	83a3      	strh	r3, [r4, #28]
		res = 0;
   24a0e:	46b8      	mov	r8, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   24a10:	f04f 0905 	mov.w	r9, #5
   24a14:	e78a      	b.n	2492c <process_event+0x180>
			__ASSERT_NO_MSG(false);
   24a16:	492e      	ldr	r1, [pc, #184]	; (24ad0 <process_event+0x324>)
   24a18:	482e      	ldr	r0, [pc, #184]	; (24ad4 <process_event+0x328>)
   24a1a:	f240 126b 	movw	r2, #363	; 0x16b
   24a1e:	f014 f878 	bl	38b12 <assert_print>
   24a22:	f240 116b 	movw	r1, #363	; 0x16b
   24a26:	e752      	b.n	248ce <process_event+0x122>
				   && !sys_slist_is_empty(&mgr->monitors);
   24a28:	2700      	movs	r7, #0
   24a2a:	2500      	movs	r5, #0
   24a2c:	e77e      	b.n	2492c <process_event+0x180>
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   24a2e:	f04f 0a01 	mov.w	sl, #1
   24a32:	e783      	b.n	2493c <process_event+0x190>
   24a34:	4692      	mov	sl, r2
   24a36:	e781      	b.n	2493c <process_event+0x190>
   24a38:	f386 8811 	msr	BASEPRI, r6
   24a3c:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
   24a40:	f1ba 0f00 	cmp.w	sl, #0
   24a44:	d117      	bne.n	24a76 <process_event+0x2ca>
	while (!sys_slist_is_empty(list)) {
   24a46:	bb4f      	cbnz	r7, 24a9c <process_event+0x2f0>
			if (transit != NULL) {
   24a48:	b115      	cbz	r5, 24a50 <process_event+0x2a4>
				transit(mgr, transition_complete);
   24a4a:	4924      	ldr	r1, [pc, #144]	; (24adc <process_event+0x330>)
   24a4c:	4620      	mov	r0, r4
   24a4e:	47a8      	blx	r5
	__asm__ volatile(
   24a50:	f04f 0340 	mov.w	r3, #64	; 0x40
   24a54:	f3ef 8611 	mrs	r6, BASEPRI
   24a58:	f383 8812 	msr	BASEPRI_MAX, r3
   24a5c:	f3bf 8f6f 	isb	sy
   24a60:	4658      	mov	r0, fp
   24a62:	f010 fbf3 	bl	3524c <z_spin_lock_valid>
   24a66:	bb08      	cbnz	r0, 24aac <process_event+0x300>
   24a68:	491b      	ldr	r1, [pc, #108]	; (24ad8 <process_event+0x32c>)
   24a6a:	481a      	ldr	r0, [pc, #104]	; (24ad4 <process_event+0x328>)
   24a6c:	2294      	movs	r2, #148	; 0x94
   24a6e:	f014 f850 	bl	38b12 <assert_print>
   24a72:	2194      	movs	r1, #148	; 0x94
   24a74:	e772      	b.n	2495c <process_event+0x1b0>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
   24a76:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   24a78:	2900      	cmp	r1, #0
   24a7a:	d0e4      	beq.n	24a46 <process_event+0x29a>
	return node->next;
   24a7c:	680e      	ldr	r6, [r1, #0]
   24a7e:	2900      	cmp	r1, #0
   24a80:	d0e1      	beq.n	24a46 <process_event+0x29a>
		mon->callback(mgr, mon, state, res);
   24a82:	f8d1 a004 	ldr.w	sl, [r1, #4]
   24a86:	4643      	mov	r3, r8
   24a88:	464a      	mov	r2, r9
   24a8a:	4620      	mov	r0, r4
   24a8c:	47d0      	blx	sl
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   24a8e:	b11e      	cbz	r6, 24a98 <process_event+0x2ec>
   24a90:	6833      	ldr	r3, [r6, #0]
   24a92:	4631      	mov	r1, r6
   24a94:	461e      	mov	r6, r3
   24a96:	e7f2      	b.n	24a7e <process_event+0x2d2>
   24a98:	4633      	mov	r3, r6
   24a9a:	e7fa      	b.n	24a92 <process_event+0x2e6>
   24a9c:	4639      	mov	r1, r7
		notify_one(mgr, cli, state, res);
   24a9e:	4643      	mov	r3, r8
   24aa0:	464a      	mov	r2, r9
   24aa2:	4620      	mov	r0, r4
   24aa4:	683f      	ldr	r7, [r7, #0]
   24aa6:	f013 ff93 	bl	389d0 <notify_one>
   24aaa:	e7cc      	b.n	24a46 <process_event+0x29a>
	z_spin_lock_set_owner(l);
   24aac:	4658      	mov	r0, fp
   24aae:	f010 fbeb 	bl	35288 <z_spin_lock_set_owner>
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
   24ab2:	8ba3      	ldrh	r3, [r4, #28]
   24ab4:	f023 0308 	bic.w	r3, r3, #8
   24ab8:	83a3      	strh	r3, [r4, #28]
   24aba:	e6dd      	b.n	24878 <process_event+0xcc>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
   24abc:	068b      	lsls	r3, r1, #26
   24abe:	f57f ae97 	bpl.w	247f0 <process_event+0x44>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
   24ac2:	f021 0320 	bic.w	r3, r1, #32
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   24ac6:	83a3      	strh	r3, [r4, #28]
		state = mgr->flags & ONOFF_STATE_MASK;
   24ac8:	f001 0107 	and.w	r1, r1, #7
		if (evt == EVT_RECHECK) {
   24acc:	e67a      	b.n	247c4 <process_event+0x18>
   24ace:	bf00      	nop
   24ad0:	0003d37b 	.word	0x0003d37b
   24ad4:	0003d1d7 	.word	0x0003d1d7
   24ad8:	0003d39d 	.word	0x0003d39d
   24adc:	00024ae1 	.word	0x00024ae1

00024ae0 <transition_complete>:
{
   24ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24ae2:	4604      	mov	r4, r0
   24ae4:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
   24ae6:	f100 0614 	add.w	r6, r0, #20
   24aea:	f04f 0340 	mov.w	r3, #64	; 0x40
   24aee:	f3ef 8711 	mrs	r7, BASEPRI
   24af2:	f383 8812 	msr	BASEPRI_MAX, r3
   24af6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24afa:	4630      	mov	r0, r6
   24afc:	f010 fba6 	bl	3524c <z_spin_lock_valid>
   24b00:	b940      	cbnz	r0, 24b14 <transition_complete+0x34>
   24b02:	490a      	ldr	r1, [pc, #40]	; (24b2c <transition_complete+0x4c>)
   24b04:	480a      	ldr	r0, [pc, #40]	; (24b30 <transition_complete+0x50>)
   24b06:	2294      	movs	r2, #148	; 0x94
   24b08:	f014 f803 	bl	38b12 <assert_print>
   24b0c:	4807      	ldr	r0, [pc, #28]	; (24b2c <transition_complete+0x4c>)
   24b0e:	2194      	movs	r1, #148	; 0x94
   24b10:	f013 fff8 	bl	38b04 <assert_post_action>
	z_spin_lock_set_owner(l);
   24b14:	4630      	mov	r0, r6
   24b16:	f010 fbb7 	bl	35288 <z_spin_lock_set_owner>
	mgr->last_res = res;
   24b1a:	61a5      	str	r5, [r4, #24]
	process_event(mgr, EVT_COMPLETE, key);
   24b1c:	463a      	mov	r2, r7
   24b1e:	4620      	mov	r0, r4
   24b20:	2101      	movs	r1, #1
}
   24b22:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	process_event(mgr, EVT_COMPLETE, key);
   24b26:	f7ff be41 	b.w	247ac <process_event>
   24b2a:	bf00      	nop
   24b2c:	0003d39d 	.word	0x0003d39d
   24b30:	0003d1d7 	.word	0x0003d1d7

00024b34 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   24b34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   24b38:	4604      	mov	r4, r0
   24b3a:	460f      	mov	r7, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   24b3c:	f013 ff38 	bl	389b0 <validate_args>

	if (rv < 0) {
   24b40:	1e05      	subs	r5, r0, #0
   24b42:	db5c      	blt.n	24bfe <onoff_request+0xca>
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
   24b44:	f104 0914 	add.w	r9, r4, #20
   24b48:	f04f 0340 	mov.w	r3, #64	; 0x40
   24b4c:	f3ef 8a11 	mrs	sl, BASEPRI
   24b50:	f383 8812 	msr	BASEPRI_MAX, r3
   24b54:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24b58:	4648      	mov	r0, r9
   24b5a:	f010 fb77 	bl	3524c <z_spin_lock_valid>
   24b5e:	4680      	mov	r8, r0
   24b60:	b938      	cbnz	r0, 24b72 <onoff_request+0x3e>
   24b62:	4932      	ldr	r1, [pc, #200]	; (24c2c <onoff_request+0xf8>)
   24b64:	4832      	ldr	r0, [pc, #200]	; (24c30 <onoff_request+0xfc>)
   24b66:	2294      	movs	r2, #148	; 0x94
   24b68:	f013 ffd3 	bl	38b12 <assert_print>
   24b6c:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24b6e:	482f      	ldr	r0, [pc, #188]	; (24c2c <onoff_request+0xf8>)
   24b70:	e03a      	b.n	24be8 <onoff_request+0xb4>
	z_spin_lock_set_owner(l);
   24b72:	4648      	mov	r0, r9
   24b74:	f010 fb88 	bl	35288 <z_spin_lock_set_owner>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   24b78:	8be3      	ldrh	r3, [r4, #30]
   24b7a:	8ba6      	ldrh	r6, [r4, #28]
   24b7c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   24b80:	4293      	cmp	r3, r2
   24b82:	f006 0607 	and.w	r6, r6, #7
   24b86:	d03d      	beq.n	24c04 <onoff_request+0xd0>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
   24b88:	2e02      	cmp	r6, #2
   24b8a:	d10e      	bne.n	24baa <onoff_request+0x76>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
   24b8c:	3301      	adds	r3, #1
   24b8e:	83e3      	strh	r3, [r4, #30]
	rv = state;
   24b90:	4635      	mov	r5, r6
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24b92:	4648      	mov	r0, r9
   24b94:	f010 fb68 	bl	35268 <z_spin_unlock_valid>
   24b98:	2800      	cmp	r0, #0
   24b9a:	d139      	bne.n	24c10 <onoff_request+0xdc>
   24b9c:	4923      	ldr	r1, [pc, #140]	; (24c2c <onoff_request+0xf8>)
   24b9e:	4824      	ldr	r0, [pc, #144]	; (24c30 <onoff_request+0xfc>)
   24ba0:	22c2      	movs	r2, #194	; 0xc2
   24ba2:	f013 ffb6 	bl	38b12 <assert_print>
   24ba6:	21c2      	movs	r1, #194	; 0xc2
   24ba8:	e7e1      	b.n	24b6e <onoff_request+0x3a>
	} else if ((state == ONOFF_STATE_OFF)
   24baa:	2e06      	cmp	r6, #6
   24bac:	d813      	bhi.n	24bd6 <onoff_request+0xa2>
   24bae:	e8df f006 	tbb	[pc, r6]
   24bb2:	2c09      	.short	0x2c09
   24bb4:	04091212 	.word	0x04091212
   24bb8:	09          	.byte	0x09
   24bb9:	00          	.byte	0x00
	if (state == ONOFF_STATE_ON) {
   24bba:	f06f 0585 	mvn.w	r5, #133	; 0x85
   24bbe:	f04f 0800 	mov.w	r8, #0
   24bc2:	e7e6      	b.n	24b92 <onoff_request+0x5e>
	parent->next = child;
   24bc4:	2300      	movs	r3, #0
   24bc6:	603b      	str	r3, [r7, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
   24bc8:	6863      	ldr	r3, [r4, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
   24bca:	b97b      	cbnz	r3, 24bec <onoff_request+0xb8>
	list->head = node;
   24bcc:	e9c4 7700 	strd	r7, r7, [r4]
out:
	if (add_client) {
		sys_slist_append(&mgr->clients, &cli->node);
	}

	if (start) {
   24bd0:	b17e      	cbz	r6, 24bf2 <onoff_request+0xbe>
	rv = state;
   24bd2:	4635      	mov	r5, r6
   24bd4:	e7f3      	b.n	24bbe <onoff_request+0x8a>
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
   24bd6:	4917      	ldr	r1, [pc, #92]	; (24c34 <onoff_request+0x100>)
   24bd8:	4815      	ldr	r0, [pc, #84]	; (24c30 <onoff_request+0xfc>)
   24bda:	f44f 72e4 	mov.w	r2, #456	; 0x1c8
   24bde:	f013 ff98 	bl	38b12 <assert_print>
   24be2:	4814      	ldr	r0, [pc, #80]	; (24c34 <onoff_request+0x100>)
   24be4:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
   24be8:	f013 ff8c 	bl	38b04 <assert_post_action>
	parent->next = child;
   24bec:	601f      	str	r7, [r3, #0]
	list->tail = node;
   24bee:	6067      	str	r7, [r4, #4]
}
   24bf0:	e7ee      	b.n	24bd0 <onoff_request+0x9c>
		process_event(mgr, EVT_RECHECK, key);
   24bf2:	4652      	mov	r2, sl
   24bf4:	2102      	movs	r1, #2
   24bf6:	4620      	mov	r0, r4
   24bf8:	f7ff fdd8 	bl	247ac <process_event>
   24bfc:	4635      	mov	r5, r6
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
   24bfe:	4628      	mov	r0, r5
   24c00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		rv = -EAGAIN;
   24c04:	f06f 050a 	mvn.w	r5, #10
   24c08:	e7d9      	b.n	24bbe <onoff_request+0x8a>
	if (state == ONOFF_STATE_ON) {
   24c0a:	f06f 0504 	mvn.w	r5, #4
   24c0e:	e7d6      	b.n	24bbe <onoff_request+0x8a>
	__asm__ volatile(
   24c10:	f38a 8811 	msr	BASEPRI, sl
   24c14:	f3bf 8f6f 	isb	sy
		if (notify) {
   24c18:	f1b8 0f00 	cmp.w	r8, #0
   24c1c:	d0ef      	beq.n	24bfe <onoff_request+0xca>
			notify_one(mgr, cli, state, 0);
   24c1e:	2300      	movs	r3, #0
   24c20:	4632      	mov	r2, r6
   24c22:	4639      	mov	r1, r7
   24c24:	4620      	mov	r0, r4
   24c26:	f013 fed3 	bl	389d0 <notify_one>
   24c2a:	e7e8      	b.n	24bfe <onoff_request+0xca>
   24c2c:	0003d39d 	.word	0x0003d39d
   24c30:	0003d1d7 	.word	0x0003d1d7
   24c34:	0003d37b 	.word	0x0003d37b

00024c38 <onoff_release>:

int onoff_release(struct onoff_manager *mgr)
{
   24c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24c3a:	4605      	mov	r5, r0
	bool stop = false;      /* trigger a stop transition */

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
   24c3c:	f100 0614 	add.w	r6, r0, #20
	__asm__ volatile(
   24c40:	f04f 0340 	mov.w	r3, #64	; 0x40
   24c44:	f3ef 8711 	mrs	r7, BASEPRI
   24c48:	f383 8812 	msr	BASEPRI_MAX, r3
   24c4c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24c50:	4630      	mov	r0, r6
   24c52:	f010 fafb 	bl	3524c <z_spin_lock_valid>
   24c56:	b938      	cbnz	r0, 24c68 <onoff_release+0x30>
   24c58:	491f      	ldr	r1, [pc, #124]	; (24cd8 <onoff_release+0xa0>)
   24c5a:	4820      	ldr	r0, [pc, #128]	; (24cdc <onoff_release+0xa4>)
   24c5c:	2294      	movs	r2, #148	; 0x94
   24c5e:	f013 ff58 	bl	38b12 <assert_print>
   24c62:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24c64:	481c      	ldr	r0, [pc, #112]	; (24cd8 <onoff_release+0xa0>)
   24c66:	e023      	b.n	24cb0 <onoff_release+0x78>
	z_spin_lock_set_owner(l);
   24c68:	4630      	mov	r0, r6
   24c6a:	f010 fb0d 	bl	35288 <z_spin_lock_set_owner>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   24c6e:	8bac      	ldrh	r4, [r5, #28]
   24c70:	f004 0407 	and.w	r4, r4, #7
	int rv = state;

	if (state != ONOFF_STATE_ON) {
   24c74:	2c02      	cmp	r4, #2
   24c76:	d010      	beq.n	24c9a <onoff_release+0x62>
		if (state == ONOFF_STATE_ERROR) {
			rv = -EIO;
		} else {
			rv = -ENOTSUP;
   24c78:	2c01      	cmp	r4, #1
   24c7a:	bf0c      	ite	eq
   24c7c:	f06f 0404 	mvneq.w	r4, #4
   24c80:	f06f 0485 	mvnne.w	r4, #133	; 0x85
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24c84:	4630      	mov	r0, r6
   24c86:	f010 faef 	bl	35268 <z_spin_unlock_valid>
   24c8a:	b9f8      	cbnz	r0, 24ccc <onoff_release+0x94>
   24c8c:	4912      	ldr	r1, [pc, #72]	; (24cd8 <onoff_release+0xa0>)
   24c8e:	4813      	ldr	r0, [pc, #76]	; (24cdc <onoff_release+0xa4>)
   24c90:	22c2      	movs	r2, #194	; 0xc2
   24c92:	f013 ff3e 	bl	38b12 <assert_print>
   24c96:	21c2      	movs	r1, #194	; 0xc2
   24c98:	e7e4      	b.n	24c64 <onoff_release+0x2c>
		}
		goto out;
	}

	__ASSERT_NO_MSG(mgr->refs > 0);
   24c9a:	8beb      	ldrh	r3, [r5, #30]
   24c9c:	b953      	cbnz	r3, 24cb4 <onoff_release+0x7c>
   24c9e:	4910      	ldr	r1, [pc, #64]	; (24ce0 <onoff_release+0xa8>)
   24ca0:	480e      	ldr	r0, [pc, #56]	; (24cdc <onoff_release+0xa4>)
   24ca2:	f240 12ef 	movw	r2, #495	; 0x1ef
   24ca6:	f013 ff34 	bl	38b12 <assert_print>
   24caa:	480d      	ldr	r0, [pc, #52]	; (24ce0 <onoff_release+0xa8>)
   24cac:	f240 11ef 	movw	r1, #495	; 0x1ef
   24cb0:	f013 ff28 	bl	38b04 <assert_post_action>
	mgr->refs -= 1U;
   24cb4:	3b01      	subs	r3, #1
   24cb6:	b29b      	uxth	r3, r3
   24cb8:	83eb      	strh	r3, [r5, #30]
	stop = (mgr->refs == 0);

out:
	if (stop) {
   24cba:	2b00      	cmp	r3, #0
   24cbc:	d1e2      	bne.n	24c84 <onoff_release+0x4c>
		process_event(mgr, EVT_RECHECK, key);
   24cbe:	463a      	mov	r2, r7
   24cc0:	4621      	mov	r1, r4
   24cc2:	4628      	mov	r0, r5
   24cc4:	f7ff fd72 	bl	247ac <process_event>
	} else {
		k_spin_unlock(&mgr->lock, key);
	}

	return rv;
}
   24cc8:	4620      	mov	r0, r4
   24cca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	__asm__ volatile(
   24ccc:	f387 8811 	msr	BASEPRI, r7
   24cd0:	f3bf 8f6f 	isb	sy
	return rv;
   24cd4:	e7f8      	b.n	24cc8 <onoff_release+0x90>
   24cd6:	bf00      	nop
   24cd8:	0003d39d 	.word	0x0003d39d
   24cdc:	0003d1d7 	.word	0x0003d1d7
   24ce0:	0003d37b 	.word	0x0003d37b

00024ce4 <onoff_sync_lock>:
	return rv;
}

int onoff_sync_lock(struct onoff_sync_service *srv,
		    k_spinlock_key_t *keyp)
{
   24ce4:	b570      	push	{r4, r5, r6, lr}
   24ce6:	4604      	mov	r4, r0
   24ce8:	460d      	mov	r5, r1
	__asm__ volatile(
   24cea:	f04f 0340 	mov.w	r3, #64	; 0x40
   24cee:	f3ef 8611 	mrs	r6, BASEPRI
   24cf2:	f383 8812 	msr	BASEPRI_MAX, r3
   24cf6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24cfa:	f010 faa7 	bl	3524c <z_spin_lock_valid>
   24cfe:	b940      	cbnz	r0, 24d12 <onoff_sync_lock+0x2e>
   24d00:	4907      	ldr	r1, [pc, #28]	; (24d20 <onoff_sync_lock+0x3c>)
   24d02:	4808      	ldr	r0, [pc, #32]	; (24d24 <onoff_sync_lock+0x40>)
   24d04:	2294      	movs	r2, #148	; 0x94
   24d06:	f013 ff04 	bl	38b12 <assert_print>
   24d0a:	4805      	ldr	r0, [pc, #20]	; (24d20 <onoff_sync_lock+0x3c>)
   24d0c:	2194      	movs	r1, #148	; 0x94
   24d0e:	f013 fef9 	bl	38b04 <assert_post_action>
	z_spin_lock_set_owner(l);
   24d12:	4620      	mov	r0, r4
   24d14:	f010 fab8 	bl	35288 <z_spin_lock_set_owner>
	*keyp = k_spin_lock(&srv->lock);
   24d18:	602e      	str	r6, [r5, #0]
	return srv->count;
}
   24d1a:	6860      	ldr	r0, [r4, #4]
   24d1c:	bd70      	pop	{r4, r5, r6, pc}
   24d1e:	bf00      	nop
   24d20:	0003d39d 	.word	0x0003d39d
   24d24:	0003d1d7 	.word	0x0003d1d7

00024d28 <onoff_sync_finalize>:
int onoff_sync_finalize(struct onoff_sync_service *srv,
			k_spinlock_key_t key,
			struct onoff_client *cli,
			int res,
			bool on)
{
   24d28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   24d2c:	461d      	mov	r5, r3

	/* Clear errors visible when locked.  If they are to be
	 * preserved the caller must finalize with the previous
	 * error code.
	 */
	if (srv->count < 0) {
   24d2e:	6843      	ldr	r3, [r0, #4]
{
   24d30:	f89d 9020 	ldrb.w	r9, [sp, #32]
	if (srv->count < 0) {
   24d34:	2b00      	cmp	r3, #0
		srv->count = 0;
   24d36:	bfbc      	itt	lt
   24d38:	2300      	movlt	r3, #0
   24d3a:	6043      	strlt	r3, [r0, #4]
	}
	if (res < 0) {
   24d3c:	2d00      	cmp	r5, #0
{
   24d3e:	4688      	mov	r8, r1
   24d40:	4616      	mov	r6, r2
	if (res < 0) {
   24d42:	db14      	blt.n	24d6e <onoff_sync_finalize+0x46>
		srv->count = res;
		state = ONOFF_STATE_ERROR;
	} else if (on) {
		srv->count += 1;
   24d44:	6844      	ldr	r4, [r0, #4]
	} else if (on) {
   24d46:	f1b9 0f00 	cmp.w	r9, #0
   24d4a:	d00e      	beq.n	24d6a <onoff_sync_finalize+0x42>
		srv->count += 1;
   24d4c:	3401      	adds	r4, #1
	uint32_t state = ONOFF_STATE_ON;
   24d4e:	2702      	movs	r7, #2
		srv->count = res;
   24d50:	6044      	str	r4, [r0, #4]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24d52:	f010 fa89 	bl	35268 <z_spin_unlock_valid>
   24d56:	b968      	cbnz	r0, 24d74 <onoff_sync_finalize+0x4c>
   24d58:	4914      	ldr	r1, [pc, #80]	; (24dac <onoff_sync_finalize+0x84>)
   24d5a:	4815      	ldr	r0, [pc, #84]	; (24db0 <onoff_sync_finalize+0x88>)
   24d5c:	22c2      	movs	r2, #194	; 0xc2
   24d5e:	f013 fed8 	bl	38b12 <assert_print>
   24d62:	4812      	ldr	r0, [pc, #72]	; (24dac <onoff_sync_finalize+0x84>)
   24d64:	21c2      	movs	r1, #194	; 0xc2

	if (cli) {
		/* Detect service mis-use: onoff does not callback on transition
		 * to off, so no client should have been passed.
		 */
		__ASSERT_NO_MSG(on);
   24d66:	f013 fecd 	bl	38b04 <assert_post_action>
		srv->count -= 1;
   24d6a:	3c01      	subs	r4, #1
   24d6c:	e7ef      	b.n	24d4e <onoff_sync_finalize+0x26>
   24d6e:	462c      	mov	r4, r5
		state = ONOFF_STATE_ERROR;
   24d70:	2701      	movs	r7, #1
   24d72:	e7ed      	b.n	24d50 <onoff_sync_finalize+0x28>
	__asm__ volatile(
   24d74:	f388 8811 	msr	BASEPRI, r8
   24d78:	f3bf 8f6f 	isb	sy
	if (cli) {
   24d7c:	b196      	cbz	r6, 24da4 <onoff_sync_finalize+0x7c>
		__ASSERT_NO_MSG(on);
   24d7e:	f1b9 0f00 	cmp.w	r9, #0
   24d82:	d109      	bne.n	24d98 <onoff_sync_finalize+0x70>
   24d84:	490b      	ldr	r1, [pc, #44]	; (24db4 <onoff_sync_finalize+0x8c>)
   24d86:	480a      	ldr	r0, [pc, #40]	; (24db0 <onoff_sync_finalize+0x88>)
   24d88:	f240 228a 	movw	r2, #650	; 0x28a
   24d8c:	f013 fec1 	bl	38b12 <assert_print>
   24d90:	4808      	ldr	r0, [pc, #32]	; (24db4 <onoff_sync_finalize+0x8c>)
   24d92:	f240 218a 	movw	r1, #650	; 0x28a
   24d96:	e7e6      	b.n	24d66 <onoff_sync_finalize+0x3e>
		notify_one(NULL, cli, state, res);
   24d98:	462b      	mov	r3, r5
   24d9a:	463a      	mov	r2, r7
   24d9c:	4631      	mov	r1, r6
   24d9e:	2000      	movs	r0, #0
   24da0:	f013 fe16 	bl	389d0 <notify_one>
	}

	return rv;
}
   24da4:	4620      	mov	r0, r4
   24da6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   24daa:	bf00      	nop
   24dac:	0003d39d 	.word	0x0003d39d
   24db0:	0003d1d7 	.word	0x0003d1d7
   24db4:	0003d37b 	.word	0x0003d37b

00024db8 <sys_notify_finalize>:
	return rv;
}

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
   24db8:	b508      	push	{r3, lr}
};

/** @internal */
static inline uint32_t sys_notify_get_method(const struct sys_notify *notify)
{
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   24dba:	6842      	ldr	r2, [r0, #4]
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
   24dbc:	6081      	str	r1, [r0, #8]

	return method & SYS_NOTIFY_METHOD_MASK;
   24dbe:	f002 0203 	and.w	r2, r2, #3
	switch (method) {
   24dc2:	2a02      	cmp	r2, #2
{
   24dc4:	4603      	mov	r3, r0
	switch (method) {
   24dc6:	d00a      	beq.n	24dde <sys_notify_finalize+0x26>
   24dc8:	2a03      	cmp	r2, #3
   24dca:	f04f 0100 	mov.w	r1, #0
   24dce:	d003      	beq.n	24dd8 <sys_notify_finalize+0x20>
   24dd0:	2a01      	cmp	r2, #1
   24dd2:	d10a      	bne.n	24dea <sys_notify_finalize+0x32>
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   24dd4:	6059      	str	r1, [r3, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   24dd6:	e006      	b.n	24de6 <sys_notify_finalize+0x2e>
		rv = notify->method.callback;
   24dd8:	6818      	ldr	r0, [r3, #0]
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   24dda:	6059      	str	r1, [r3, #4]
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   24ddc:	bd08      	pop	{r3, pc}
		sig = notify->method.signal;
   24dde:	6818      	ldr	r0, [r3, #0]
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   24de0:	2200      	movs	r2, #0
   24de2:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   24de4:	b950      	cbnz	r0, 24dfc <sys_notify_finalize+0x44>
	sys_notify_generic_callback rv = NULL;
   24de6:	2000      	movs	r0, #0
   24de8:	e7f8      	b.n	24ddc <sys_notify_finalize+0x24>
		__ASSERT_NO_MSG(false);
   24dea:	4906      	ldr	r1, [pc, #24]	; (24e04 <sys_notify_finalize+0x4c>)
   24dec:	4806      	ldr	r0, [pc, #24]	; (24e08 <sys_notify_finalize+0x50>)
   24dee:	2245      	movs	r2, #69	; 0x45
   24df0:	f013 fe8f 	bl	38b12 <assert_print>
   24df4:	4803      	ldr	r0, [pc, #12]	; (24e04 <sys_notify_finalize+0x4c>)
   24df6:	2145      	movs	r1, #69	; 0x45
   24df8:	f013 fe84 	bl	38b04 <assert_post_action>
		union { uintptr_t x; int val; } parm1 = { .val = result };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
   24dfc:	f013 f830 	bl	37e60 <z_impl_k_poll_signal_raise>
   24e00:	e7f1      	b.n	24de6 <sys_notify_finalize+0x2e>
   24e02:	bf00      	nop
   24e04:	0003d3ca 	.word	0x0003d3ca
   24e08:	0003d1d7 	.word	0x0003d1d7

00024e0c <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
   24e0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24e10:	4681      	mov	r9, r0
   24e12:	b095      	sub	sp, #84	; 0x54
   24e14:	468b      	mov	fp, r1
   24e16:	4617      	mov	r7, r2
   24e18:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
   24e1a:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
   24e1c:	7838      	ldrb	r0, [r7, #0]
   24e1e:	b908      	cbnz	r0, 24e24 <z_cbvprintf_impl+0x18>
			OUTC(' ');
			--width;
		}
	}

	return count;
   24e20:	4628      	mov	r0, r5
   24e22:	e358      	b.n	254d6 <z_cbvprintf_impl+0x6ca>
			OUTC(*fp++);
   24e24:	1c7b      	adds	r3, r7, #1
		if (*fp != '%') {
   24e26:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
   24e28:	9303      	str	r3, [sp, #12]
		if (*fp != '%') {
   24e2a:	d006      	beq.n	24e3a <z_cbvprintf_impl+0x2e>
			OUTC('%');
   24e2c:	4659      	mov	r1, fp
   24e2e:	47c8      	blx	r9
   24e30:	2800      	cmp	r0, #0
   24e32:	f2c0 8350 	blt.w	254d6 <z_cbvprintf_impl+0x6ca>
   24e36:	3501      	adds	r5, #1
		if (bps == NULL) {
   24e38:	e1fb      	b.n	25232 <z_cbvprintf_impl+0x426>
		} state = {
   24e3a:	2218      	movs	r2, #24
   24e3c:	2100      	movs	r1, #0
   24e3e:	a80e      	add	r0, sp, #56	; 0x38
   24e40:	f014 fac1 	bl	393c6 <memset>
	if (*sp == '%') {
   24e44:	787b      	ldrb	r3, [r7, #1]
   24e46:	2b25      	cmp	r3, #37	; 0x25
   24e48:	d07d      	beq.n	24f46 <z_cbvprintf_impl+0x13a>
   24e4a:	2300      	movs	r3, #0
   24e4c:	1c78      	adds	r0, r7, #1
   24e4e:	4698      	mov	r8, r3
   24e50:	469e      	mov	lr, r3
   24e52:	469c      	mov	ip, r3
   24e54:	461e      	mov	r6, r3
   24e56:	4601      	mov	r1, r0
		switch (*sp) {
   24e58:	f810 2b01 	ldrb.w	r2, [r0], #1
   24e5c:	2a2b      	cmp	r2, #43	; 0x2b
   24e5e:	f000 80a1 	beq.w	24fa4 <z_cbvprintf_impl+0x198>
   24e62:	f200 8098 	bhi.w	24f96 <z_cbvprintf_impl+0x18a>
   24e66:	2a20      	cmp	r2, #32
   24e68:	f000 809f 	beq.w	24faa <z_cbvprintf_impl+0x19e>
   24e6c:	2a23      	cmp	r2, #35	; 0x23
   24e6e:	f000 809f 	beq.w	24fb0 <z_cbvprintf_impl+0x1a4>
   24e72:	b12b      	cbz	r3, 24e80 <z_cbvprintf_impl+0x74>
   24e74:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   24e78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   24e7c:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
   24e80:	f1b8 0f00 	cmp.w	r8, #0
   24e84:	d005      	beq.n	24e92 <z_cbvprintf_impl+0x86>
   24e86:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   24e8a:	f043 0320 	orr.w	r3, r3, #32
   24e8e:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
   24e92:	f1be 0f00 	cmp.w	lr, #0
   24e96:	d005      	beq.n	24ea4 <z_cbvprintf_impl+0x98>
   24e98:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   24e9c:	f043 0310 	orr.w	r3, r3, #16
   24ea0:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
   24ea4:	f1bc 0f00 	cmp.w	ip, #0
   24ea8:	d005      	beq.n	24eb6 <z_cbvprintf_impl+0xaa>
   24eaa:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   24eae:	f043 0308 	orr.w	r3, r3, #8
   24eb2:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
   24eb6:	b12e      	cbz	r6, 24ec4 <z_cbvprintf_impl+0xb8>
   24eb8:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   24ebc:	f043 0304 	orr.w	r3, r3, #4
   24ec0:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	if (conv->flag_zero && conv->flag_dash) {
   24ec4:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   24ec8:	f003 0044 	and.w	r0, r3, #68	; 0x44
   24ecc:	2844      	cmp	r0, #68	; 0x44
   24ece:	d103      	bne.n	24ed8 <z_cbvprintf_impl+0xcc>
		conv->flag_zero = false;
   24ed0:	f36f 1386 	bfc	r3, #6, #1
   24ed4:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	conv->width_present = true;
   24ed8:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
	if (*sp == '*') {
   24edc:	2a2a      	cmp	r2, #42	; 0x2a
	conv->width_present = true;
   24ede:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   24ee2:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	if (*sp == '*') {
   24ee6:	d17f      	bne.n	24fe8 <z_cbvprintf_impl+0x1dc>
		conv->width_star = true;
   24ee8:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   24eec:	f042 0201 	orr.w	r2, r2, #1
		return ++sp;
   24ef0:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
   24ef2:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	conv->prec_present = (*sp == '.');
   24ef6:	781a      	ldrb	r2, [r3, #0]
   24ef8:	2a2e      	cmp	r2, #46	; 0x2e
   24efa:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   24efe:	bf0c      	ite	eq
   24f00:	2101      	moveq	r1, #1
   24f02:	2100      	movne	r1, #0
   24f04:	f361 0241 	bfi	r2, r1, #1, #1
   24f08:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	if (!conv->prec_present) {
   24f0c:	d178      	bne.n	25000 <z_cbvprintf_impl+0x1f4>
	if (*sp == '*') {
   24f0e:	785a      	ldrb	r2, [r3, #1]
   24f10:	2a2a      	cmp	r2, #42	; 0x2a
   24f12:	d06e      	beq.n	24ff2 <z_cbvprintf_impl+0x1e6>
	++sp;
   24f14:	3301      	adds	r3, #1
	size_t val = 0;
   24f16:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
   24f18:	f04f 0c0a 	mov.w	ip, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   24f1c:	4619      	mov	r1, r3
   24f1e:	f811 0b01 	ldrb.w	r0, [r1], #1
   24f22:	f1a0 0630 	sub.w	r6, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
   24f26:	2e09      	cmp	r6, #9
   24f28:	f240 8095 	bls.w	25056 <z_cbvprintf_impl+0x24a>
	conv->unsupported |= ((conv->prec_value < 0)
   24f2c:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
	conv->prec_value = prec;
   24f30:	9212      	str	r2, [sp, #72]	; 0x48
	conv->unsupported |= ((conv->prec_value < 0)
   24f32:	f3c1 0040 	ubfx	r0, r1, #1, #1
   24f36:	ea40 70d2 	orr.w	r0, r0, r2, lsr #31
   24f3a:	460a      	mov	r2, r1
   24f3c:	f360 0241 	bfi	r2, r0, #1, #1
   24f40:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
	return sp;
   24f44:	e05c      	b.n	25000 <z_cbvprintf_impl+0x1f4>
		conv->specifier = *sp++;
   24f46:	1cba      	adds	r2, r7, #2
   24f48:	9203      	str	r2, [sp, #12]
   24f4a:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
		if (conv->width_star) {
   24f4e:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
   24f52:	07da      	lsls	r2, r3, #31
   24f54:	f140 812e 	bpl.w	251b4 <z_cbvprintf_impl+0x3a8>
			width = va_arg(ap, int);
   24f58:	f854 8b04 	ldr.w	r8, [r4], #4
			if (width < 0) {
   24f5c:	f1b8 0f00 	cmp.w	r8, #0
   24f60:	da07      	bge.n	24f72 <z_cbvprintf_impl+0x166>
				conv->flag_dash = true;
   24f62:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
   24f66:	f042 0204 	orr.w	r2, r2, #4
   24f6a:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
				width = -width;
   24f6e:	f1c8 0800 	rsb	r8, r8, #0
		if (conv->prec_star) {
   24f72:	075e      	lsls	r6, r3, #29
   24f74:	f140 8127 	bpl.w	251c6 <z_cbvprintf_impl+0x3ba>
			int arg = va_arg(ap, int);
   24f78:	f854 ab04 	ldr.w	sl, [r4], #4
			if (arg < 0) {
   24f7c:	f1ba 0f00 	cmp.w	sl, #0
   24f80:	f280 8126 	bge.w	251d0 <z_cbvprintf_impl+0x3c4>
				conv->prec_present = false;
   24f84:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
   24f88:	f36f 0341 	bfc	r3, #1, #1
   24f8c:	f88d 3041 	strb.w	r3, [sp, #65]	; 0x41
		int precision = -1;
   24f90:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   24f94:	e11c      	b.n	251d0 <z_cbvprintf_impl+0x3c4>
		switch (*sp) {
   24f96:	2a2d      	cmp	r2, #45	; 0x2d
   24f98:	d00d      	beq.n	24fb6 <z_cbvprintf_impl+0x1aa>
   24f9a:	2a30      	cmp	r2, #48	; 0x30
   24f9c:	f47f af69 	bne.w	24e72 <z_cbvprintf_impl+0x66>
   24fa0:	2301      	movs	r3, #1
	} while (loop);
   24fa2:	e758      	b.n	24e56 <z_cbvprintf_impl+0x4a>
		switch (*sp) {
   24fa4:	f04f 0c01 	mov.w	ip, #1
   24fa8:	e755      	b.n	24e56 <z_cbvprintf_impl+0x4a>
   24faa:	f04f 0e01 	mov.w	lr, #1
   24fae:	e752      	b.n	24e56 <z_cbvprintf_impl+0x4a>
   24fb0:	f04f 0801 	mov.w	r8, #1
   24fb4:	e74f      	b.n	24e56 <z_cbvprintf_impl+0x4a>
   24fb6:	2601      	movs	r6, #1
   24fb8:	e74d      	b.n	24e56 <z_cbvprintf_impl+0x4a>
		val = 10U * val + *sp++ - '0';
   24fba:	fb0e 6202 	mla	r2, lr, r2, r6
   24fbe:	3a30      	subs	r2, #48	; 0x30
   24fc0:	4603      	mov	r3, r0
   24fc2:	4618      	mov	r0, r3
   24fc4:	f810 6b01 	ldrb.w	r6, [r0], #1
   24fc8:	f1a6 0c30 	sub.w	ip, r6, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
   24fcc:	f1bc 0f09 	cmp.w	ip, #9
   24fd0:	d9f3      	bls.n	24fba <z_cbvprintf_impl+0x1ae>
	if (sp != wp) {
   24fd2:	4299      	cmp	r1, r3
   24fd4:	d08f      	beq.n	24ef6 <z_cbvprintf_impl+0xea>
		conv->unsupported |= ((conv->width_value < 0)
   24fd6:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
		conv->width_value = width;
   24fda:	9211      	str	r2, [sp, #68]	; 0x44
				      || (width != (size_t)conv->width_value));
   24fdc:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
   24fde:	f362 0141 	bfi	r1, r2, #1, #1
   24fe2:	f88d 1040 	strb.w	r1, [sp, #64]	; 0x40
   24fe6:	e786      	b.n	24ef6 <z_cbvprintf_impl+0xea>
   24fe8:	460b      	mov	r3, r1
	size_t val = 0;
   24fea:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
   24fec:	f04f 0e0a 	mov.w	lr, #10
   24ff0:	e7e7      	b.n	24fc2 <z_cbvprintf_impl+0x1b6>
		conv->prec_star = true;
   24ff2:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   24ff6:	f042 0204 	orr.w	r2, r2, #4
   24ffa:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
		return ++sp;
   24ffe:	3302      	adds	r3, #2
	switch (*sp) {
   25000:	781a      	ldrb	r2, [r3, #0]
   25002:	2a6c      	cmp	r2, #108	; 0x6c
   25004:	d047      	beq.n	25096 <z_cbvprintf_impl+0x28a>
   25006:	d82b      	bhi.n	25060 <z_cbvprintf_impl+0x254>
   25008:	2a68      	cmp	r2, #104	; 0x68
   2500a:	d031      	beq.n	25070 <z_cbvprintf_impl+0x264>
   2500c:	2a6a      	cmp	r2, #106	; 0x6a
   2500e:	d04b      	beq.n	250a8 <z_cbvprintf_impl+0x29c>
   25010:	2a4c      	cmp	r2, #76	; 0x4c
   25012:	d051      	beq.n	250b8 <z_cbvprintf_impl+0x2ac>
	conv->specifier = *sp++;
   25014:	461a      	mov	r2, r3
   25016:	f812 3b01 	ldrb.w	r3, [r2], #1
   2501a:	9203      	str	r2, [sp, #12]
	switch (conv->specifier) {
   2501c:	2b78      	cmp	r3, #120	; 0x78
		if (conv->length_mod == LENGTH_UPPER_L) {
   2501e:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
	conv->specifier = *sp++;
   25022:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
	switch (conv->specifier) {
   25026:	f200 80be 	bhi.w	251a6 <z_cbvprintf_impl+0x39a>
   2502a:	2b6d      	cmp	r3, #109	; 0x6d
   2502c:	d851      	bhi.n	250d2 <z_cbvprintf_impl+0x2c6>
   2502e:	2b69      	cmp	r3, #105	; 0x69
   25030:	f200 80b9 	bhi.w	251a6 <z_cbvprintf_impl+0x39a>
   25034:	2b57      	cmp	r3, #87	; 0x57
   25036:	d867      	bhi.n	25108 <z_cbvprintf_impl+0x2fc>
   25038:	2b41      	cmp	r3, #65	; 0x41
   2503a:	d003      	beq.n	25044 <z_cbvprintf_impl+0x238>
   2503c:	3b45      	subs	r3, #69	; 0x45
   2503e:	2b02      	cmp	r3, #2
   25040:	f200 80b1 	bhi.w	251a6 <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_FP;
   25044:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   25048:	2204      	movs	r2, #4
   2504a:	f362 0302 	bfi	r3, r2, #0, #3
   2504e:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
			unsupported = true;
   25052:	2301      	movs	r3, #1
			break;
   25054:	e073      	b.n	2513e <z_cbvprintf_impl+0x332>
		val = 10U * val + *sp++ - '0';
   25056:	fb0c 0202 	mla	r2, ip, r2, r0
   2505a:	3a30      	subs	r2, #48	; 0x30
   2505c:	460b      	mov	r3, r1
   2505e:	e75d      	b.n	24f1c <z_cbvprintf_impl+0x110>
	switch (*sp) {
   25060:	2a74      	cmp	r2, #116	; 0x74
   25062:	d025      	beq.n	250b0 <z_cbvprintf_impl+0x2a4>
   25064:	2a7a      	cmp	r2, #122	; 0x7a
   25066:	d1d5      	bne.n	25014 <z_cbvprintf_impl+0x208>
		conv->length_mod = LENGTH_Z;
   25068:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   2506c:	2106      	movs	r1, #6
   2506e:	e00c      	b.n	2508a <z_cbvprintf_impl+0x27e>
		if (*++sp == 'h') {
   25070:	785a      	ldrb	r2, [r3, #1]
   25072:	2a68      	cmp	r2, #104	; 0x68
   25074:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   25078:	d106      	bne.n	25088 <z_cbvprintf_impl+0x27c>
			conv->length_mod = LENGTH_HH;
   2507a:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
   2507c:	f361 02c6 	bfi	r2, r1, #3, #4
   25080:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
			++sp;
   25084:	3302      	adds	r3, #2
   25086:	e7c5      	b.n	25014 <z_cbvprintf_impl+0x208>
			conv->length_mod = LENGTH_H;
   25088:	2102      	movs	r1, #2
   2508a:	f361 02c6 	bfi	r2, r1, #3, #4
   2508e:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
		if (*++sp == 'h') {
   25092:	3301      	adds	r3, #1
   25094:	e7be      	b.n	25014 <z_cbvprintf_impl+0x208>
		if (*++sp == 'l') {
   25096:	785a      	ldrb	r2, [r3, #1]
   25098:	2a6c      	cmp	r2, #108	; 0x6c
   2509a:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   2509e:	d101      	bne.n	250a4 <z_cbvprintf_impl+0x298>
			conv->length_mod = LENGTH_LL;
   250a0:	2104      	movs	r1, #4
   250a2:	e7eb      	b.n	2507c <z_cbvprintf_impl+0x270>
			conv->length_mod = LENGTH_L;
   250a4:	2103      	movs	r1, #3
   250a6:	e7f0      	b.n	2508a <z_cbvprintf_impl+0x27e>
		conv->length_mod = LENGTH_J;
   250a8:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   250ac:	2105      	movs	r1, #5
   250ae:	e7ec      	b.n	2508a <z_cbvprintf_impl+0x27e>
		conv->length_mod = LENGTH_T;
   250b0:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   250b4:	2107      	movs	r1, #7
   250b6:	e7e8      	b.n	2508a <z_cbvprintf_impl+0x27e>
		conv->unsupported = true;
   250b8:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
   250bc:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
   250c0:	f022 0202 	bic.w	r2, r2, #2
   250c4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
   250c8:	f042 0202 	orr.w	r2, r2, #2
   250cc:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
		break;
   250d0:	e7df      	b.n	25092 <z_cbvprintf_impl+0x286>
	switch (conv->specifier) {
   250d2:	3b6e      	subs	r3, #110	; 0x6e
   250d4:	b2d9      	uxtb	r1, r3
   250d6:	2301      	movs	r3, #1
   250d8:	408b      	lsls	r3, r1
   250da:	f240 4182 	movw	r1, #1154	; 0x482
   250de:	420b      	tst	r3, r1
   250e0:	d137      	bne.n	25152 <z_cbvprintf_impl+0x346>
   250e2:	f013 0f24 	tst.w	r3, #36	; 0x24
   250e6:	d151      	bne.n	2518c <z_cbvprintf_impl+0x380>
   250e8:	07d8      	lsls	r0, r3, #31
   250ea:	d55c      	bpl.n	251a6 <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_PTR;
   250ec:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   250f0:	2103      	movs	r1, #3
   250f2:	f361 0302 	bfi	r3, r1, #0, #3
   250f6:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
   250fa:	f002 0378 	and.w	r3, r2, #120	; 0x78
   250fe:	f1a3 0140 	sub.w	r1, r3, #64	; 0x40
   25102:	424b      	negs	r3, r1
   25104:	414b      	adcs	r3, r1
   25106:	e01a      	b.n	2513e <z_cbvprintf_impl+0x332>
	switch (conv->specifier) {
   25108:	f1a3 0158 	sub.w	r1, r3, #88	; 0x58
   2510c:	b2c9      	uxtb	r1, r1
   2510e:	2001      	movs	r0, #1
   25110:	fa00 f101 	lsl.w	r1, r0, r1
   25114:	f411 4f62 	tst.w	r1, #57856	; 0xe200
   25118:	d194      	bne.n	25044 <z_cbvprintf_impl+0x238>
   2511a:	f640 0601 	movw	r6, #2049	; 0x801
   2511e:	4231      	tst	r1, r6
   25120:	d11d      	bne.n	2515e <z_cbvprintf_impl+0x352>
   25122:	f411 3f04 	tst.w	r1, #135168	; 0x21000
   25126:	d03e      	beq.n	251a6 <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_SINT;
   25128:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   2512c:	f360 0302 	bfi	r3, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
   25130:	f002 0278 	and.w	r2, r2, #120	; 0x78
   25134:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_SINT;
   25136:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
   2513a:	d034      	beq.n	251a6 <z_cbvprintf_impl+0x39a>
	bool unsupported = false;
   2513c:	2300      	movs	r3, #0
	conv->unsupported |= unsupported;
   2513e:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
   25142:	f3c2 0140 	ubfx	r1, r2, #1, #1
   25146:	430b      	orrs	r3, r1
   25148:	f363 0241 	bfi	r2, r3, #1, #1
   2514c:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
	return sp;
   25150:	e6fd      	b.n	24f4e <z_cbvprintf_impl+0x142>
		conv->specifier_cat = SPECIFIER_UINT;
   25152:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   25156:	2102      	movs	r1, #2
   25158:	f361 0302 	bfi	r3, r1, #0, #3
   2515c:	e7e8      	b.n	25130 <z_cbvprintf_impl+0x324>
   2515e:	f89d 1042 	ldrb.w	r1, [sp, #66]	; 0x42
   25162:	2002      	movs	r0, #2
		if (conv->length_mod == LENGTH_UPPER_L) {
   25164:	f002 0278 	and.w	r2, r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
   25168:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
   2516c:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
   2516e:	f88d 1042 	strb.w	r1, [sp, #66]	; 0x42
			conv->invalid = true;
   25172:	bf02      	ittt	eq
   25174:	f89d 1040 	ldrbeq.w	r1, [sp, #64]	; 0x40
   25178:	f041 0101 	orreq.w	r1, r1, #1
   2517c:	f88d 1040 	strbeq.w	r1, [sp, #64]	; 0x40
		if (conv->specifier == 'c') {
   25180:	2b63      	cmp	r3, #99	; 0x63
   25182:	d1db      	bne.n	2513c <z_cbvprintf_impl+0x330>
			unsupported = (conv->length_mod != LENGTH_NONE);
   25184:	1e13      	subs	r3, r2, #0
   25186:	bf18      	it	ne
   25188:	2301      	movne	r3, #1
   2518a:	e7d8      	b.n	2513e <z_cbvprintf_impl+0x332>
		conv->specifier_cat = SPECIFIER_PTR;
   2518c:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   25190:	2103      	movs	r1, #3
   25192:	f361 0302 	bfi	r3, r1, #0, #3
		if (conv->length_mod != LENGTH_NONE) {
   25196:	f012 0f78 	tst.w	r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
   2519a:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod != LENGTH_NONE) {
   2519e:	bf14      	ite	ne
   251a0:	2301      	movne	r3, #1
   251a2:	2300      	moveq	r3, #0
   251a4:	e7cb      	b.n	2513e <z_cbvprintf_impl+0x332>
		conv->invalid = true;
   251a6:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   251aa:	f043 0301 	orr.w	r3, r3, #1
   251ae:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
		break;
   251b2:	e7c3      	b.n	2513c <z_cbvprintf_impl+0x330>
		} else if (conv->width_present) {
   251b4:	f99d 2040 	ldrsb.w	r2, [sp, #64]	; 0x40
   251b8:	2a00      	cmp	r2, #0
			width = conv->width_value;
   251ba:	bfb4      	ite	lt
   251bc:	f8dd 8044 	ldrlt.w	r8, [sp, #68]	; 0x44
		int width = -1;
   251c0:	f04f 38ff 	movge.w	r8, #4294967295	; 0xffffffff
   251c4:	e6d5      	b.n	24f72 <z_cbvprintf_impl+0x166>
		} else if (conv->prec_present) {
   251c6:	0798      	lsls	r0, r3, #30
   251c8:	f57f aee2 	bpl.w	24f90 <z_cbvprintf_impl+0x184>
			precision = conv->prec_value;
   251cc:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
			= (enum length_mod_enum)conv->length_mod;
   251d0:	f89d 1041 	ldrb.w	r1, [sp, #65]	; 0x41
		conv->pad0_value = 0;
   251d4:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
   251d6:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
			= (enum specifier_cat_enum)conv->specifier_cat;
   251da:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
		enum specifier_cat_enum specifier_cat
   251de:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
   251e2:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
   251e4:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
   251e8:	d133      	bne.n	25252 <z_cbvprintf_impl+0x446>
			switch (length_mod) {
   251ea:	1ecb      	subs	r3, r1, #3
   251ec:	2b04      	cmp	r3, #4
   251ee:	d804      	bhi.n	251fa <z_cbvprintf_impl+0x3ee>
   251f0:	e8df f003 	tbb	[pc, r3]
   251f4:	21464621 	.word	0x21464621
   251f8:	21          	.byte	0x21
   251f9:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
   251fa:	6823      	ldr	r3, [r4, #0]
			if (length_mod == LENGTH_HH) {
   251fc:	2901      	cmp	r1, #1
				value->sint = va_arg(ap, int);
   251fe:	ea4f 72e3 	mov.w	r2, r3, asr #31
   25202:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
			if (length_mod == LENGTH_HH) {
   25206:	d11c      	bne.n	25242 <z_cbvprintf_impl+0x436>
				value->sint = (signed char)value->sint;
   25208:	f99d 3038 	ldrsb.w	r3, [sp, #56]	; 0x38
   2520c:	17da      	asrs	r2, r3, #31
   2520e:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
				value->sint = va_arg(ap, int);
   25212:	3404      	adds	r4, #4
		if (conv->invalid || conv->unsupported) {
   25214:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   25218:	f013 0603 	ands.w	r6, r3, #3
   2521c:	d050      	beq.n	252c0 <z_cbvprintf_impl+0x4b4>
			OUTS(sp, fp);
   2521e:	9b03      	ldr	r3, [sp, #12]
   25220:	463a      	mov	r2, r7
   25222:	4659      	mov	r1, fp
   25224:	4648      	mov	r0, r9
   25226:	f013 fc56 	bl	38ad6 <outs>
   2522a:	2800      	cmp	r0, #0
   2522c:	f2c0 8153 	blt.w	254d6 <z_cbvprintf_impl+0x6ca>
   25230:	4405      	add	r5, r0
			continue;
   25232:	9f03      	ldr	r7, [sp, #12]
   25234:	e5f2      	b.n	24e1c <z_cbvprintf_impl+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
   25236:	f854 3b04 	ldr.w	r3, [r4], #4
   2523a:	17da      	asrs	r2, r3, #31
				value->uint = (unsigned char)value->uint;
   2523c:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
   25240:	e7e8      	b.n	25214 <z_cbvprintf_impl+0x408>
			} else if (length_mod == LENGTH_H) {
   25242:	2902      	cmp	r1, #2
   25244:	d1e5      	bne.n	25212 <z_cbvprintf_impl+0x406>
				value->sint = (short)value->sint;
   25246:	b21a      	sxth	r2, r3
   25248:	f343 33c0 	sbfx	r3, r3, #15, #1
   2524c:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
   25250:	e7df      	b.n	25212 <z_cbvprintf_impl+0x406>
		} else if (specifier_cat == SPECIFIER_UINT) {
   25252:	2b02      	cmp	r3, #2
   25254:	d124      	bne.n	252a0 <z_cbvprintf_impl+0x494>
			switch (length_mod) {
   25256:	1ecb      	subs	r3, r1, #3
   25258:	2b04      	cmp	r3, #4
   2525a:	d804      	bhi.n	25266 <z_cbvprintf_impl+0x45a>
   2525c:	e8df f003 	tbb	[pc, r3]
   25260:	18101018 	.word	0x18101018
   25264:	18          	.byte	0x18
   25265:	00          	.byte	0x00
			if (length_mod == LENGTH_HH) {
   25266:	2901      	cmp	r1, #1
				value->uint = va_arg(ap, unsigned int);
   25268:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
   2526c:	f04f 0200 	mov.w	r2, #0
   25270:	d014      	beq.n	2529c <z_cbvprintf_impl+0x490>
			} else if (length_mod == LENGTH_H) {
   25272:	2902      	cmp	r1, #2
				value->uint = va_arg(ap, unsigned int);
   25274:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
			} else if (length_mod == LENGTH_H) {
   25278:	d1cc      	bne.n	25214 <z_cbvprintf_impl+0x408>
				value->uint = (unsigned short)value->uint;
   2527a:	b29b      	uxth	r3, r3
			value->ptr = va_arg(ap, void *);
   2527c:	930e      	str	r3, [sp, #56]	; 0x38
   2527e:	e7c9      	b.n	25214 <z_cbvprintf_impl+0x408>
					(uint_value_type)va_arg(ap,
   25280:	3407      	adds	r4, #7
   25282:	f024 0407 	bic.w	r4, r4, #7
				value->uint =
   25286:	e8f4 2302 	ldrd	r2, r3, [r4], #8
   2528a:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
			if (length_mod == LENGTH_HH) {
   2528e:	e7c1      	b.n	25214 <z_cbvprintf_impl+0x408>
					(uint_value_type)va_arg(ap, size_t);
   25290:	f854 3b04 	ldr.w	r3, [r4], #4
   25294:	930e      	str	r3, [sp, #56]	; 0x38
   25296:	2300      	movs	r3, #0
   25298:	930f      	str	r3, [sp, #60]	; 0x3c
			} else if (length_mod == LENGTH_H) {
   2529a:	e7bb      	b.n	25214 <z_cbvprintf_impl+0x408>
				value->uint = (unsigned char)value->uint;
   2529c:	b2db      	uxtb	r3, r3
   2529e:	e7cd      	b.n	2523c <z_cbvprintf_impl+0x430>
		} else if (specifier_cat == SPECIFIER_FP) {
   252a0:	2b04      	cmp	r3, #4
   252a2:	d108      	bne.n	252b6 <z_cbvprintf_impl+0x4aa>
					(sint_value_type)va_arg(ap, long long);
   252a4:	3407      	adds	r4, #7
				value->ldbl = va_arg(ap, long double);
   252a6:	f024 0407 	bic.w	r4, r4, #7
   252aa:	e9d4 2300 	ldrd	r2, r3, [r4]
   252ae:	3408      	adds	r4, #8
   252b0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
   252b4:	e7ae      	b.n	25214 <z_cbvprintf_impl+0x408>
		} else if (specifier_cat == SPECIFIER_PTR) {
   252b6:	2b03      	cmp	r3, #3
   252b8:	d1ac      	bne.n	25214 <z_cbvprintf_impl+0x408>
			value->ptr = va_arg(ap, void *);
   252ba:	f854 3b04 	ldr.w	r3, [r4], #4
   252be:	e7dd      	b.n	2527c <z_cbvprintf_impl+0x470>
		switch (conv->specifier) {
   252c0:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
   252c4:	2878      	cmp	r0, #120	; 0x78
   252c6:	d8b4      	bhi.n	25232 <z_cbvprintf_impl+0x426>
   252c8:	2862      	cmp	r0, #98	; 0x62
   252ca:	d81c      	bhi.n	25306 <z_cbvprintf_impl+0x4fa>
   252cc:	2825      	cmp	r0, #37	; 0x25
   252ce:	f43f adad 	beq.w	24e2c <z_cbvprintf_impl+0x20>
   252d2:	2858      	cmp	r0, #88	; 0x58
   252d4:	d1ad      	bne.n	25232 <z_cbvprintf_impl+0x426>
			bps = encode_uint(value->uint, conv, buf, bpe);
   252d6:	f10d 0336 	add.w	r3, sp, #54	; 0x36
   252da:	9300      	str	r3, [sp, #0]
   252dc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
   252e0:	ab08      	add	r3, sp, #32
   252e2:	aa10      	add	r2, sp, #64	; 0x40
   252e4:	f013 fbb1 	bl	38a4a <encode_uint>
			if (precision >= 0) {
   252e8:	f1ba 0f00 	cmp.w	sl, #0
			bps = encode_uint(value->uint, conv, buf, bpe);
   252ec:	4607      	mov	r7, r0
			if (precision >= 0) {
   252ee:	f280 809a 	bge.w	25426 <z_cbvprintf_impl+0x61a>
		if (bps == NULL) {
   252f2:	2f00      	cmp	r7, #0
   252f4:	d09d      	beq.n	25232 <z_cbvprintf_impl+0x426>
		size_t nj_len = (bpe - bps);
   252f6:	f10d 0336 	add.w	r3, sp, #54	; 0x36
   252fa:	1bd8      	subs	r0, r3, r7
		if (sign != 0) {
   252fc:	2e00      	cmp	r6, #0
   252fe:	f000 80c1 	beq.w	25484 <z_cbvprintf_impl+0x678>
			nj_len += 1U;
   25302:	3001      	adds	r0, #1
   25304:	e0be      	b.n	25484 <z_cbvprintf_impl+0x678>
		switch (conv->specifier) {
   25306:	3863      	subs	r0, #99	; 0x63
   25308:	2815      	cmp	r0, #21
   2530a:	d892      	bhi.n	25232 <z_cbvprintf_impl+0x426>
   2530c:	a201      	add	r2, pc, #4	; (adr r2, 25314 <z_cbvprintf_impl+0x508>)
   2530e:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
   25312:	bf00      	nop
   25314:	000253e9 	.word	0x000253e9
   25318:	000253fb 	.word	0x000253fb
   2531c:	00025233 	.word	0x00025233
   25320:	00025233 	.word	0x00025233
   25324:	00025233 	.word	0x00025233
   25328:	00025233 	.word	0x00025233
   2532c:	000253fb 	.word	0x000253fb
   25330:	00025233 	.word	0x00025233
   25334:	00025233 	.word	0x00025233
   25338:	00025233 	.word	0x00025233
   2533c:	00025233 	.word	0x00025233
   25340:	00025489 	.word	0x00025489
   25344:	00025421 	.word	0x00025421
   25348:	00025447 	.word	0x00025447
   2534c:	00025233 	.word	0x00025233
   25350:	00025233 	.word	0x00025233
   25354:	0002536d 	.word	0x0002536d
   25358:	00025233 	.word	0x00025233
   2535c:	00025421 	.word	0x00025421
   25360:	00025233 	.word	0x00025233
   25364:	00025233 	.word	0x00025233
   25368:	00025421 	.word	0x00025421
			if (precision >= 0) {
   2536c:	f1ba 0f00 	cmp.w	sl, #0
			bps = (const char *)value->ptr;
   25370:	9f0e      	ldr	r7, [sp, #56]	; 0x38
			if (precision >= 0) {
   25372:	db35      	blt.n	253e0 <z_cbvprintf_impl+0x5d4>
				len = strnlen(bps, precision);
   25374:	4651      	mov	r1, sl
   25376:	4638      	mov	r0, r7
   25378:	f013 ffde 	bl	39338 <strnlen>
			bpe = bps + len;
   2537c:	eb07 0a00 	add.w	sl, r7, r0
		if (bps == NULL) {
   25380:	2f00      	cmp	r7, #0
   25382:	f43f af56 	beq.w	25232 <z_cbvprintf_impl+0x426>
		char sign = 0;
   25386:	2600      	movs	r6, #0
		if (conv->altform_0c) {
   25388:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   2538c:	f013 0210 	ands.w	r2, r3, #16
   25390:	9205      	str	r2, [sp, #20]
   25392:	f000 8093 	beq.w	254bc <z_cbvprintf_impl+0x6b0>
			nj_len += 2U;
   25396:	3002      	adds	r0, #2
		if (conv->pad_fp) {
   25398:	065b      	lsls	r3, r3, #25
		nj_len += conv->pad0_value;
   2539a:	9a11      	ldr	r2, [sp, #68]	; 0x44
			nj_len += conv->pad0_pre_exp;
   2539c:	bf48      	it	mi
   2539e:	9b12      	ldrmi	r3, [sp, #72]	; 0x48
		nj_len += conv->pad0_value;
   253a0:	9204      	str	r2, [sp, #16]
   253a2:	4410      	add	r0, r2
			nj_len += conv->pad0_pre_exp;
   253a4:	bf48      	it	mi
   253a6:	18c0      	addmi	r0, r0, r3
		if (width > 0) {
   253a8:	f1b8 0f00 	cmp.w	r8, #0
   253ac:	f340 80a0 	ble.w	254f0 <z_cbvprintf_impl+0x6e4>
			if (!conv->flag_dash) {
   253b0:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
			width -= (int)nj_len;
   253b4:	eba8 0800 	sub.w	r8, r8, r0
			if (!conv->flag_dash) {
   253b8:	f3c2 0380 	ubfx	r3, r2, #2, #1
   253bc:	0750      	lsls	r0, r2, #29
   253be:	9306      	str	r3, [sp, #24]
   253c0:	f100 8096 	bmi.w	254f0 <z_cbvprintf_impl+0x6e4>
				if (conv->flag_zero) {
   253c4:	0651      	lsls	r1, r2, #25
   253c6:	f140 8089 	bpl.w	254dc <z_cbvprintf_impl+0x6d0>
					if (sign != 0) {
   253ca:	b13e      	cbz	r6, 253dc <z_cbvprintf_impl+0x5d0>
						OUTC(sign);
   253cc:	4659      	mov	r1, fp
   253ce:	4630      	mov	r0, r6
   253d0:	47c8      	blx	r9
   253d2:	2800      	cmp	r0, #0
   253d4:	db7f      	blt.n	254d6 <z_cbvprintf_impl+0x6ca>
   253d6:	9b06      	ldr	r3, [sp, #24]
   253d8:	3501      	adds	r5, #1
   253da:	461e      	mov	r6, r3
					pad = '0';
   253dc:	2230      	movs	r2, #48	; 0x30
   253de:	e07e      	b.n	254de <z_cbvprintf_impl+0x6d2>
				len = strlen(bps);
   253e0:	4638      	mov	r0, r7
   253e2:	f013 ffa2 	bl	3932a <strlen>
   253e6:	e7c9      	b.n	2537c <z_cbvprintf_impl+0x570>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
   253e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   253ea:	f88d 3020 	strb.w	r3, [sp, #32]
		char sign = 0;
   253ee:	2600      	movs	r6, #0
			bps = buf;
   253f0:	af08      	add	r7, sp, #32
			bpe = buf + 1;
   253f2:	f10d 0a21 	add.w	sl, sp, #33	; 0x21
		size_t nj_len = (bpe - bps);
   253f6:	2001      	movs	r0, #1
   253f8:	e7c6      	b.n	25388 <z_cbvprintf_impl+0x57c>
			if (conv->flag_plus) {
   253fa:	0719      	lsls	r1, r3, #28
			} else if (conv->flag_space) {
   253fc:	bf5c      	itt	pl
   253fe:	f3c3 1300 	ubfxpl	r3, r3, #4, #1
   25402:	015e      	lslpl	r6, r3, #5
			sint = value->sint;
   25404:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
				sign = '+';
   25408:	bf48      	it	mi
   2540a:	262b      	movmi	r6, #43	; 0x2b
			if (sint < 0) {
   2540c:	2b00      	cmp	r3, #0
   2540e:	f6bf af62 	bge.w	252d6 <z_cbvprintf_impl+0x4ca>
				value->uint = (uint_value_type)-sint;
   25412:	4252      	negs	r2, r2
   25414:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   25418:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
				sign = '-';
   2541c:	262d      	movs	r6, #45	; 0x2d
   2541e:	e75a      	b.n	252d6 <z_cbvprintf_impl+0x4ca>
		switch (conv->specifier) {
   25420:	2600      	movs	r6, #0
   25422:	e758      	b.n	252d6 <z_cbvprintf_impl+0x4ca>
		char sign = 0;
   25424:	2600      	movs	r6, #0
				conv->flag_zero = false;
   25426:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
				size_t len = bpe - bps;
   2542a:	f10d 0336 	add.w	r3, sp, #54	; 0x36
   2542e:	1bdb      	subs	r3, r3, r7
				conv->flag_zero = false;
   25430:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
   25434:	459a      	cmp	sl, r3
				conv->flag_zero = false;
   25436:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
				if (len < (size_t)precision) {
   2543a:	f67f af5a 	bls.w	252f2 <z_cbvprintf_impl+0x4e6>
					conv->pad0_value = precision - (int)len;
   2543e:	ebaa 0303 	sub.w	r3, sl, r3
   25442:	9311      	str	r3, [sp, #68]	; 0x44
   25444:	e755      	b.n	252f2 <z_cbvprintf_impl+0x4e6>
			if (value->ptr != NULL) {
   25446:	980e      	ldr	r0, [sp, #56]	; 0x38
   25448:	b390      	cbz	r0, 254b0 <z_cbvprintf_impl+0x6a4>
				bps = encode_uint((uintptr_t)value->ptr, conv,
   2544a:	f10d 0336 	add.w	r3, sp, #54	; 0x36
   2544e:	9300      	str	r3, [sp, #0]
   25450:	aa10      	add	r2, sp, #64	; 0x40
   25452:	ab08      	add	r3, sp, #32
   25454:	2100      	movs	r1, #0
   25456:	f013 faf8 	bl	38a4a <encode_uint>
				conv->altform_0c = true;
   2545a:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
   2545e:	f003 03ef 	and.w	r3, r3, #239	; 0xef
   25462:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
   25466:	f043 0310 	orr.w	r3, r3, #16
			if (precision >= 0) {
   2546a:	f1ba 0f00 	cmp.w	sl, #0
				bps = encode_uint((uintptr_t)value->ptr, conv,
   2546e:	4607      	mov	r7, r0
				conv->altform_0c = true;
   25470:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
			if (precision >= 0) {
   25474:	dad6      	bge.n	25424 <z_cbvprintf_impl+0x618>
		if (bps == NULL) {
   25476:	2800      	cmp	r0, #0
   25478:	f43f aedb 	beq.w	25232 <z_cbvprintf_impl+0x426>
		size_t nj_len = (bpe - bps);
   2547c:	f10d 0336 	add.w	r3, sp, #54	; 0x36
   25480:	1a18      	subs	r0, r3, r0
		char sign = 0;
   25482:	2600      	movs	r6, #0
   25484:	469a      	mov	sl, r3
   25486:	e77f      	b.n	25388 <z_cbvprintf_impl+0x57c>
				store_count(conv, value->ptr, count);
   25488:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	switch ((enum length_mod_enum)conv->length_mod) {
   2548a:	2907      	cmp	r1, #7
   2548c:	f63f aed1 	bhi.w	25232 <z_cbvprintf_impl+0x426>
   25490:	e8df f001 	tbb	[pc, r1]
   25494:	0c06040c 	.word	0x0c06040c
   25498:	0c0c0808 	.word	0x0c0c0808
		*(signed char *)dp = (signed char)count;
   2549c:	701d      	strb	r5, [r3, #0]
		if (bps == NULL) {
   2549e:	e6c8      	b.n	25232 <z_cbvprintf_impl+0x426>
		*(short *)dp = (short)count;
   254a0:	801d      	strh	r5, [r3, #0]
		if (bps == NULL) {
   254a2:	e6c6      	b.n	25232 <z_cbvprintf_impl+0x426>
		*(intmax_t *)dp = (intmax_t)count;
   254a4:	17ea      	asrs	r2, r5, #31
   254a6:	e9c3 5200 	strd	r5, r2, [r3]
		if (bps == NULL) {
   254aa:	e6c2      	b.n	25232 <z_cbvprintf_impl+0x426>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
   254ac:	601d      	str	r5, [r3, #0]
		if (bps == NULL) {
   254ae:	e6c0      	b.n	25232 <z_cbvprintf_impl+0x426>
   254b0:	4f2e      	ldr	r7, [pc, #184]	; (2556c <z_cbvprintf_impl+0x760>)
		char sign = 0;
   254b2:	4606      	mov	r6, r0
			bpe = bps + 5;
   254b4:	f107 0a05 	add.w	sl, r7, #5
		size_t nj_len = (bpe - bps);
   254b8:	2005      	movs	r0, #5
   254ba:	e765      	b.n	25388 <z_cbvprintf_impl+0x57c>
		} else if (conv->altform_0) {
   254bc:	071a      	lsls	r2, r3, #28
			nj_len += 1U;
   254be:	bf48      	it	mi
   254c0:	3001      	addmi	r0, #1
   254c2:	e769      	b.n	25398 <z_cbvprintf_impl+0x58c>
   254c4:	9307      	str	r3, [sp, #28]
					OUTC(pad);
   254c6:	4610      	mov	r0, r2
   254c8:	9206      	str	r2, [sp, #24]
   254ca:	4659      	mov	r1, fp
   254cc:	47c8      	blx	r9
   254ce:	2800      	cmp	r0, #0
   254d0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   254d4:	da04      	bge.n	254e0 <z_cbvprintf_impl+0x6d4>
#undef OUTS
#undef OUTC
}
   254d6:	b015      	add	sp, #84	; 0x54
   254d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
   254dc:	2220      	movs	r2, #32
					pad = '0';
   254de:	4643      	mov	r3, r8
				while (width-- > 0) {
   254e0:	4619      	mov	r1, r3
   254e2:	2900      	cmp	r1, #0
   254e4:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   254e8:	dcec      	bgt.n	254c4 <z_cbvprintf_impl+0x6b8>
   254ea:	4445      	add	r5, r8
   254ec:	1a6d      	subs	r5, r5, r1
   254ee:	4698      	mov	r8, r3
		if (sign != 0) {
   254f0:	b12e      	cbz	r6, 254fe <z_cbvprintf_impl+0x6f2>
			OUTC(sign);
   254f2:	4659      	mov	r1, fp
   254f4:	4630      	mov	r0, r6
   254f6:	47c8      	blx	r9
   254f8:	2800      	cmp	r0, #0
   254fa:	dbec      	blt.n	254d6 <z_cbvprintf_impl+0x6ca>
   254fc:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
   254fe:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   25502:	06da      	lsls	r2, r3, #27
   25504:	d401      	bmi.n	2550a <z_cbvprintf_impl+0x6fe>
   25506:	071b      	lsls	r3, r3, #28
   25508:	d505      	bpl.n	25516 <z_cbvprintf_impl+0x70a>
				OUTC('0');
   2550a:	4659      	mov	r1, fp
   2550c:	2030      	movs	r0, #48	; 0x30
   2550e:	47c8      	blx	r9
   25510:	2800      	cmp	r0, #0
   25512:	dbe0      	blt.n	254d6 <z_cbvprintf_impl+0x6ca>
   25514:	3501      	adds	r5, #1
			if (conv->altform_0c) {
   25516:	9b05      	ldr	r3, [sp, #20]
   25518:	b133      	cbz	r3, 25528 <z_cbvprintf_impl+0x71c>
				OUTC(conv->specifier);
   2551a:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
   2551e:	4659      	mov	r1, fp
   25520:	47c8      	blx	r9
   25522:	2800      	cmp	r0, #0
   25524:	dbd7      	blt.n	254d6 <z_cbvprintf_impl+0x6ca>
   25526:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
   25528:	9e04      	ldr	r6, [sp, #16]
   2552a:	442e      	add	r6, r5
   2552c:	e005      	b.n	2553a <z_cbvprintf_impl+0x72e>
				OUTC('0');
   2552e:	4659      	mov	r1, fp
   25530:	2030      	movs	r0, #48	; 0x30
   25532:	47c8      	blx	r9
   25534:	2800      	cmp	r0, #0
   25536:	dbce      	blt.n	254d6 <z_cbvprintf_impl+0x6ca>
   25538:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
   2553a:	1b73      	subs	r3, r6, r5
   2553c:	2b00      	cmp	r3, #0
   2553e:	dcf6      	bgt.n	2552e <z_cbvprintf_impl+0x722>
			OUTS(bps, bpe);
   25540:	4653      	mov	r3, sl
   25542:	463a      	mov	r2, r7
   25544:	4659      	mov	r1, fp
   25546:	4648      	mov	r0, r9
   25548:	f013 fac5 	bl	38ad6 <outs>
   2554c:	2800      	cmp	r0, #0
   2554e:	dbc2      	blt.n	254d6 <z_cbvprintf_impl+0x6ca>
   25550:	4405      	add	r5, r0
		while (width > 0) {
   25552:	44a8      	add	r8, r5
   25554:	eba8 0305 	sub.w	r3, r8, r5
   25558:	2b00      	cmp	r3, #0
   2555a:	f77f ae6a 	ble.w	25232 <z_cbvprintf_impl+0x426>
			OUTC(' ');
   2555e:	4659      	mov	r1, fp
   25560:	2020      	movs	r0, #32
   25562:	47c8      	blx	r9
   25564:	2800      	cmp	r0, #0
   25566:	dbb6      	blt.n	254d6 <z_cbvprintf_impl+0x6ca>
   25568:	3501      	adds	r5, #1
			--width;
   2556a:	e7f3      	b.n	25554 <z_cbvprintf_impl+0x748>
   2556c:	0003d3ed 	.word	0x0003d3ed

00025570 <mpsc_pbuf_init>:
	}
}

void mpsc_pbuf_init(struct mpsc_pbuf_buffer *buffer,
		    const struct mpsc_pbuf_buffer_config *cfg)
{
   25570:	b538      	push	{r3, r4, r5, lr}
   25572:	460d      	mov	r5, r1
   25574:	4604      	mov	r4, r0
	int err;

	memset(buffer, 0, offsetof(struct mpsc_pbuf_buffer, buf));
   25576:	2220      	movs	r2, #32
   25578:	2100      	movs	r1, #0
   2557a:	f013 ff24 	bl	393c6 <memset>
	buffer->get_wlen = cfg->get_wlen;
   2557e:	68eb      	ldr	r3, [r5, #12]
   25580:	61e3      	str	r3, [r4, #28]
	buffer->notify_drop = cfg->notify_drop;
   25582:	68ab      	ldr	r3, [r5, #8]
   25584:	61a3      	str	r3, [r4, #24]
	buffer->buf = cfg->buf;
   25586:	682b      	ldr	r3, [r5, #0]
   25588:	6223      	str	r3, [r4, #32]
	buffer->size = cfg->size;
   2558a:	686b      	ldr	r3, [r5, #4]
   2558c:	6263      	str	r3, [r4, #36]	; 0x24
	buffer->max_usage = 0;
   2558e:	2200      	movs	r2, #0
   25590:	62a2      	str	r2, [r4, #40]	; 0x28
	buffer->flags = cfg->flags;
   25592:	692a      	ldr	r2, [r5, #16]
 * @param x value to check
 * @return true if @p x is a power of two, false otherwise
 */
static inline bool is_power_of_two(unsigned int x)
{
	return (x != 0U) && ((x & (x - 1U)) == 0U);
   25594:	b123      	cbz	r3, 255a0 <mpsc_pbuf_init+0x30>
   25596:	1e59      	subs	r1, r3, #1
   25598:	4219      	tst	r1, r3

	if (is_power_of_two(buffer->size)) {
		buffer->flags |= MPSC_PBUF_SIZE_POW2;
   2559a:	bf08      	it	eq
   2559c:	f042 0201 	orreq.w	r2, r2, #1
	buffer->flags = cfg->flags;
   255a0:	6122      	str	r2, [r4, #16]
	return z_impl_k_sem_init(sem, initial_count, limit);
   255a2:	2201      	movs	r2, #1
   255a4:	2100      	movs	r1, #0
   255a6:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   255aa:	f016 fb6e 	bl	3bc8a <z_impl_k_sem_init>
	}

	err = k_sem_init(&buffer->sem, 0, 1);
	__ASSERT_NO_MSG(err == 0);
   255ae:	b140      	cbz	r0, 255c2 <mpsc_pbuf_init+0x52>
   255b0:	4904      	ldr	r1, [pc, #16]	; (255c4 <mpsc_pbuf_init+0x54>)
   255b2:	4805      	ldr	r0, [pc, #20]	; (255c8 <mpsc_pbuf_init+0x58>)
   255b4:	222e      	movs	r2, #46	; 0x2e
   255b6:	f013 faac 	bl	38b12 <assert_print>
   255ba:	4802      	ldr	r0, [pc, #8]	; (255c4 <mpsc_pbuf_init+0x54>)
   255bc:	212e      	movs	r1, #46	; 0x2e
   255be:	f013 faa1 	bl	38b04 <assert_post_action>
	ARG_UNUSED(err);
}
   255c2:	bd38      	pop	{r3, r4, r5, pc}
   255c4:	0003d3f3 	.word	0x0003d3f3
   255c8:	0003d1d7 	.word	0x0003d1d7

000255cc <mpsc_pbuf_alloc>:

}

union mpsc_pbuf_generic *mpsc_pbuf_alloc(struct mpsc_pbuf_buffer *buffer,
					 size_t wlen, k_timeout_t timeout)
{
   255cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   255d0:	469a      	mov	sl, r3
	uint32_t free_wlen;
	bool valid_drop;

	MPSC_PBUF_DBG(buffer, "alloc %d words, ", (int)wlen);

	if (wlen > (buffer->size - 1)) {
   255d2:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
   255d4:	b085      	sub	sp, #20
	if (wlen > (buffer->size - 1)) {
   255d6:	3b01      	subs	r3, #1
   255d8:	428b      	cmp	r3, r1
{
   255da:	4604      	mov	r4, r0
   255dc:	4688      	mov	r8, r1
   255de:	9200      	str	r2, [sp, #0]
	if (wlen > (buffer->size - 1)) {
   255e0:	f0c0 8095 	bcc.w	2570e <mpsc_pbuf_alloc+0x142>
	union mpsc_pbuf_generic *dropped_item = NULL;
   255e4:	2500      	movs	r5, #0
	union mpsc_pbuf_generic *item = NULL;
   255e6:	46ab      	mov	fp, r5
	do {
		k_spinlock_key_t key;
		bool wrap;

		cont = false;
		key = k_spin_lock(&buffer->lock);
   255e8:	f100 0714 	add.w	r7, r0, #20
	__asm__ volatile(
   255ec:	f04f 0340 	mov.w	r3, #64	; 0x40
   255f0:	f3ef 8611 	mrs	r6, BASEPRI
   255f4:	f383 8812 	msr	BASEPRI_MAX, r3
   255f8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   255fc:	4638      	mov	r0, r7
   255fe:	f00f fe25 	bl	3524c <z_spin_lock_valid>
   25602:	b940      	cbnz	r0, 25616 <mpsc_pbuf_alloc+0x4a>
   25604:	4945      	ldr	r1, [pc, #276]	; (2571c <mpsc_pbuf_alloc+0x150>)
   25606:	4846      	ldr	r0, [pc, #280]	; (25720 <mpsc_pbuf_alloc+0x154>)
   25608:	2294      	movs	r2, #148	; 0x94
   2560a:	f013 fa82 	bl	38b12 <assert_print>
   2560e:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25610:	4842      	ldr	r0, [pc, #264]	; (2571c <mpsc_pbuf_alloc+0x150>)
   25612:	f013 fa77 	bl	38b04 <assert_post_action>
	z_spin_lock_set_owner(l);
   25616:	4638      	mov	r0, r7
   25618:	f00f fe36 	bl	35288 <z_spin_lock_set_owner>
		wrap = free_space(buffer, &free_wlen);
   2561c:	a903      	add	r1, sp, #12
   2561e:	4620      	mov	r0, r4
   25620:	f013 fa84 	bl	38b2c <free_space>

		if (free_wlen >= wlen) {
   25624:	9903      	ldr	r1, [sp, #12]
   25626:	4541      	cmp	r1, r8
		wrap = free_space(buffer, &free_wlen);
   25628:	4681      	mov	r9, r0
		if (free_wlen >= wlen) {
   2562a:	d328      	bcc.n	2567e <mpsc_pbuf_alloc+0xb2>
			item =
			    (union mpsc_pbuf_generic *)&buffer->buf[buffer->tmp_wr_idx];
   2562c:	6822      	ldr	r2, [r4, #0]
			item =
   2562e:	6a23      	ldr	r3, [r4, #32]
			item->hdr.valid = 0;
   25630:	f813 1022 	ldrb.w	r1, [r3, r2, lsl #2]
   25634:	f021 0103 	bic.w	r1, r1, #3
   25638:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
			item =
   2563c:	eb03 0b82 	add.w	fp, r3, r2, lsl #2
			item->hdr.busy = 0;
			buffer->tmp_wr_idx = idx_inc(buffer,
   25640:	6821      	ldr	r1, [r4, #0]
   25642:	4642      	mov	r2, r8
   25644:	4620      	mov	r0, r4
   25646:	f013 fa93 	bl	38b70 <idx_inc>
		cont = false;
   2564a:	f04f 0900 	mov.w	r9, #0
			buffer->tmp_wr_idx = idx_inc(buffer,
   2564e:	6020      	str	r0, [r4, #0]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25650:	4638      	mov	r0, r7
   25652:	f00f fe09 	bl	35268 <z_spin_unlock_valid>
   25656:	b320      	cbz	r0, 256a2 <mpsc_pbuf_alloc+0xd6>
	__asm__ volatile(
   25658:	f386 8811 	msr	BASEPRI, r6
   2565c:	f3bf 8f6f 	isb	sy
			cont = dropped_item != NULL;
		}

		k_spin_unlock(&buffer->lock, key);

		if (cont && dropped_item && valid_drop) {
   25660:	f1b9 0f00 	cmp.w	r9, #0
   25664:	d055      	beq.n	25712 <mpsc_pbuf_alloc+0x146>
   25666:	b145      	cbz	r5, 2567a <mpsc_pbuf_alloc+0xae>
   25668:	f89d 300b 	ldrb.w	r3, [sp, #11]
   2566c:	2b00      	cmp	r3, #0
   2566e:	d0bd      	beq.n	255ec <mpsc_pbuf_alloc+0x20>
			/* Notify about item being dropped. */
			if (buffer->notify_drop) {
   25670:	69a3      	ldr	r3, [r4, #24]
   25672:	b113      	cbz	r3, 2567a <mpsc_pbuf_alloc+0xae>
				buffer->notify_drop(buffer, dropped_item);
   25674:	4629      	mov	r1, r5
   25676:	4620      	mov	r0, r4
   25678:	4798      	blx	r3
{
   2567a:	2500      	movs	r5, #0
   2567c:	e7b6      	b.n	255ec <mpsc_pbuf_alloc+0x20>
		} else if (wrap) {
   2567e:	b118      	cbz	r0, 25688 <mpsc_pbuf_alloc+0xbc>
			add_skip_item(buffer, free_wlen);
   25680:	4620      	mov	r0, r4
   25682:	f013 fa83 	bl	38b8c <add_skip_item>
			cont = true;
   25686:	e7e3      	b.n	25650 <mpsc_pbuf_alloc+0x84>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   25688:	9b00      	ldr	r3, [sp, #0]
   2568a:	ea53 030a 	orrs.w	r3, r3, sl
   2568e:	d02f      	beq.n	256f0 <mpsc_pbuf_alloc+0x124>
   25690:	9101      	str	r1, [sp, #4]
			   !k_is_in_isr()) {
   25692:	f016 fab0 	bl	3bbf6 <k_is_in_isr>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   25696:	9901      	ldr	r1, [sp, #4]
   25698:	bb50      	cbnz	r0, 256f0 <mpsc_pbuf_alloc+0x124>
   2569a:	4638      	mov	r0, r7
   2569c:	f00f fde4 	bl	35268 <z_spin_unlock_valid>
   256a0:	b930      	cbnz	r0, 256b0 <mpsc_pbuf_alloc+0xe4>
   256a2:	491e      	ldr	r1, [pc, #120]	; (2571c <mpsc_pbuf_alloc+0x150>)
   256a4:	481e      	ldr	r0, [pc, #120]	; (25720 <mpsc_pbuf_alloc+0x154>)
   256a6:	22c2      	movs	r2, #194	; 0xc2
   256a8:	f013 fa33 	bl	38b12 <assert_print>
   256ac:	21c2      	movs	r1, #194	; 0xc2
   256ae:	e7af      	b.n	25610 <mpsc_pbuf_alloc+0x44>
   256b0:	f386 8811 	msr	BASEPRI, r6
   256b4:	f3bf 8f6f 	isb	sy
	return z_impl_k_sem_take(sem, timeout);
   256b8:	9a00      	ldr	r2, [sp, #0]
   256ba:	4653      	mov	r3, sl
   256bc:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   256c0:	f010 f8ac 	bl	3581c <z_impl_k_sem_take>
   256c4:	4681      	mov	r9, r0
	__asm__ volatile(
   256c6:	f04f 0340 	mov.w	r3, #64	; 0x40
   256ca:	f3ef 8611 	mrs	r6, BASEPRI
   256ce:	f383 8812 	msr	BASEPRI_MAX, r3
   256d2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   256d6:	4638      	mov	r0, r7
   256d8:	f00f fdb8 	bl	3524c <z_spin_lock_valid>
   256dc:	2800      	cmp	r0, #0
   256de:	d091      	beq.n	25604 <mpsc_pbuf_alloc+0x38>
	z_spin_lock_set_owner(l);
   256e0:	4638      	mov	r0, r7
			if (err == 0) {
   256e2:	fab9 f989 	clz	r9, r9
   256e6:	f00f fdcf 	bl	35288 <z_spin_lock_set_owner>
   256ea:	ea4f 1959 	mov.w	r9, r9, lsr #5
   256ee:	e7af      	b.n	25650 <mpsc_pbuf_alloc+0x84>
			bool user_drop = buffer->flags & MPSC_PBUF_MODE_OVERWRITE;
   256f0:	6922      	ldr	r2, [r4, #16]
			dropped_item = drop_item_locked(buffer, free_wlen,
   256f2:	f10d 030b 	add.w	r3, sp, #11
   256f6:	f3c2 0240 	ubfx	r2, r2, #1, #1
   256fa:	4620      	mov	r0, r4
   256fc:	f013 fa69 	bl	38bd2 <drop_item_locked>
			cont = dropped_item != NULL;
   25700:	f1b0 0900 	subs.w	r9, r0, #0
   25704:	4605      	mov	r5, r0
   25706:	bf18      	it	ne
   25708:	f04f 0901 	movne.w	r9, #1
   2570c:	e7a0      	b.n	25650 <mpsc_pbuf_alloc+0x84>
		return NULL;
   2570e:	f04f 0b00 	mov.w	fp, #0
		/* During test fill with 0's to simplify message comparison */
		memset(item, 0, sizeof(int) * wlen);
	}

	return item;
}
   25712:	4658      	mov	r0, fp
   25714:	b005      	add	sp, #20
   25716:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2571a:	bf00      	nop
   2571c:	0003d39d 	.word	0x0003d39d
   25720:	0003d1d7 	.word	0x0003d1d7

00025724 <mpsc_pbuf_commit>:

void mpsc_pbuf_commit(struct mpsc_pbuf_buffer *buffer,
		       union mpsc_pbuf_generic *item)
{
   25724:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25728:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
   2572a:	69c3      	ldr	r3, [r0, #28]
   2572c:	4608      	mov	r0, r1
{
   2572e:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
   25730:	4798      	blx	r3

	k_spinlock_key_t key = k_spin_lock(&buffer->lock);
   25732:	f104 0614 	add.w	r6, r4, #20
	uint32_t wlen = buffer->get_wlen(item);
   25736:	4607      	mov	r7, r0
   25738:	f04f 0340 	mov.w	r3, #64	; 0x40
   2573c:	f3ef 8811 	mrs	r8, BASEPRI
   25740:	f383 8812 	msr	BASEPRI_MAX, r3
   25744:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   25748:	4630      	mov	r0, r6
   2574a:	f00f fd7f 	bl	3524c <z_spin_lock_valid>
   2574e:	b940      	cbnz	r0, 25762 <mpsc_pbuf_commit+0x3e>
   25750:	4914      	ldr	r1, [pc, #80]	; (257a4 <mpsc_pbuf_commit+0x80>)
   25752:	4815      	ldr	r0, [pc, #84]	; (257a8 <mpsc_pbuf_commit+0x84>)
   25754:	2294      	movs	r2, #148	; 0x94
   25756:	f013 f9dc 	bl	38b12 <assert_print>
   2575a:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2575c:	4811      	ldr	r0, [pc, #68]	; (257a4 <mpsc_pbuf_commit+0x80>)
   2575e:	f013 f9d1 	bl	38b04 <assert_post_action>
	z_spin_lock_set_owner(l);
   25762:	4630      	mov	r0, r6
   25764:	f00f fd90 	bl	35288 <z_spin_lock_set_owner>

	item->hdr.valid = 1;
   25768:	782b      	ldrb	r3, [r5, #0]
   2576a:	f043 0301 	orr.w	r3, r3, #1
   2576e:	702b      	strb	r3, [r5, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   25770:	6861      	ldr	r1, [r4, #4]
   25772:	463a      	mov	r2, r7
   25774:	4620      	mov	r0, r4
   25776:	f013 f9fb 	bl	38b70 <idx_inc>
   2577a:	6060      	str	r0, [r4, #4]
	max_utilization_update(buffer);
   2577c:	4620      	mov	r0, r4
   2577e:	f013 fa1b 	bl	38bb8 <max_utilization_update>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25782:	4630      	mov	r0, r6
   25784:	f00f fd70 	bl	35268 <z_spin_unlock_valid>
   25788:	b930      	cbnz	r0, 25798 <mpsc_pbuf_commit+0x74>
   2578a:	4906      	ldr	r1, [pc, #24]	; (257a4 <mpsc_pbuf_commit+0x80>)
   2578c:	4806      	ldr	r0, [pc, #24]	; (257a8 <mpsc_pbuf_commit+0x84>)
   2578e:	22c2      	movs	r2, #194	; 0xc2
   25790:	f013 f9bf 	bl	38b12 <assert_print>
   25794:	21c2      	movs	r1, #194	; 0xc2
   25796:	e7e1      	b.n	2575c <mpsc_pbuf_commit+0x38>
	__asm__ volatile(
   25798:	f388 8811 	msr	BASEPRI, r8
   2579c:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&buffer->lock, key);
	MPSC_PBUF_DBG(buffer, "committed %p ", item);
}
   257a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   257a4:	0003d39d 	.word	0x0003d39d
   257a8:	0003d1d7 	.word	0x0003d1d7

000257ac <mpsc_pbuf_claim>:
		}
	} while (cont);
}

const union mpsc_pbuf_generic *mpsc_pbuf_claim(struct mpsc_pbuf_buffer *buffer)
{
   257ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   257b0:	4604      	mov	r4, r0
	do {
		uint32_t a;
		k_spinlock_key_t key;

		cont = false;
		key = k_spin_lock(&buffer->lock);
   257b2:	f100 0714 	add.w	r7, r0, #20
	__asm__ volatile(
   257b6:	f04f 0340 	mov.w	r3, #64	; 0x40
   257ba:	f3ef 8811 	mrs	r8, BASEPRI
   257be:	f383 8812 	msr	BASEPRI_MAX, r3
   257c2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   257c6:	4638      	mov	r0, r7
   257c8:	f00f fd40 	bl	3524c <z_spin_lock_valid>
   257cc:	4605      	mov	r5, r0
   257ce:	b940      	cbnz	r0, 257e2 <mpsc_pbuf_claim+0x36>
   257d0:	492e      	ldr	r1, [pc, #184]	; (2588c <mpsc_pbuf_claim+0xe0>)
   257d2:	482f      	ldr	r0, [pc, #188]	; (25890 <mpsc_pbuf_claim+0xe4>)
   257d4:	2294      	movs	r2, #148	; 0x94
   257d6:	f013 f99c 	bl	38b12 <assert_print>
   257da:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   257dc:	482b      	ldr	r0, [pc, #172]	; (2588c <mpsc_pbuf_claim+0xe0>)
   257de:	f013 f991 	bl	38b04 <assert_post_action>
	z_spin_lock_set_owner(l);
   257e2:	4638      	mov	r0, r7
   257e4:	f00f fd50 	bl	35288 <z_spin_lock_set_owner>
	if (buffer->tmp_rd_idx <= buffer->wr_idx) {
   257e8:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
   257ec:	429a      	cmp	r2, r3
	*res = buffer->size - buffer->tmp_rd_idx;
   257ee:	bf88      	it	hi
   257f0:	6a63      	ldrhi	r3, [r4, #36]	; 0x24
   257f2:	1a9b      	subs	r3, r3, r2
		(void)available(buffer, &a);
		item = (union mpsc_pbuf_generic *)
			&buffer->buf[buffer->tmp_rd_idx];

		if (!a || is_invalid(item)) {
   257f4:	2b00      	cmp	r3, #0
   257f6:	d03a      	beq.n	2586e <mpsc_pbuf_claim+0xc2>
		item = (union mpsc_pbuf_generic *)
   257f8:	6a21      	ldr	r1, [r4, #32]
	return !item->hdr.valid && !item->hdr.busy;
   257fa:	f811 3022 	ldrb.w	r3, [r1, r2, lsl #2]
		if (!a || is_invalid(item)) {
   257fe:	f013 0003 	ands.w	r0, r3, #3
		item = (union mpsc_pbuf_generic *)
   25802:	eb01 0982 	add.w	r9, r1, r2, lsl #2
		if (!a || is_invalid(item)) {
   25806:	d035      	beq.n	25874 <mpsc_pbuf_claim+0xc8>
	if (item->hdr.busy && !item->hdr.valid) {
   25808:	2802      	cmp	r0, #2
   2580a:	d103      	bne.n	25814 <mpsc_pbuf_claim+0x68>
		return item->skip.len;
   2580c:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
			item = NULL;
		} else {
			uint32_t skip = get_skip(item);

			if (skip || !is_valid(item)) {
   25810:	08b6      	lsrs	r6, r6, #2
   25812:	d105      	bne.n	25820 <mpsc_pbuf_claim+0x74>
   25814:	07d8      	lsls	r0, r3, #31
   25816:	d41a      	bmi.n	2584e <mpsc_pbuf_claim+0xa2>
				uint32_t inc =
					skip ? skip : buffer->get_wlen(item);
   25818:	69e3      	ldr	r3, [r4, #28]
   2581a:	4648      	mov	r0, r9
   2581c:	4798      	blx	r3
   2581e:	4606      	mov	r6, r0

				buffer->tmp_rd_idx =
				      idx_inc(buffer, buffer->tmp_rd_idx, inc);
   25820:	68a1      	ldr	r1, [r4, #8]
   25822:	4632      	mov	r2, r6
   25824:	4620      	mov	r0, r4
   25826:	f013 f9a3 	bl	38b70 <idx_inc>
				buffer->rd_idx =
					idx_inc(buffer, buffer->rd_idx, inc);
   2582a:	68e1      	ldr	r1, [r4, #12]
				buffer->tmp_rd_idx =
   2582c:	60a0      	str	r0, [r4, #8]
					idx_inc(buffer, buffer->rd_idx, inc);
   2582e:	4632      	mov	r2, r6
   25830:	4620      	mov	r0, r4
   25832:	f013 f99d 	bl	38b70 <idx_inc>
				buffer->rd_idx =
   25836:	60e0      	str	r0, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25838:	4638      	mov	r0, r7
   2583a:	f00f fd15 	bl	35268 <z_spin_unlock_valid>
   2583e:	b9d8      	cbnz	r0, 25878 <mpsc_pbuf_claim+0xcc>
   25840:	4912      	ldr	r1, [pc, #72]	; (2588c <mpsc_pbuf_claim+0xe0>)
   25842:	4813      	ldr	r0, [pc, #76]	; (25890 <mpsc_pbuf_claim+0xe4>)
   25844:	22c2      	movs	r2, #194	; 0xc2
   25846:	f013 f964 	bl	38b12 <assert_print>
   2584a:	21c2      	movs	r1, #194	; 0xc2
   2584c:	e7c6      	b.n	257dc <mpsc_pbuf_claim+0x30>
				cont = true;
			} else {
				item->hdr.busy = 1;
   2584e:	f043 0302 	orr.w	r3, r3, #2
   25852:	f801 3022 	strb.w	r3, [r1, r2, lsl #2]
				buffer->tmp_rd_idx =
					idx_inc(buffer, buffer->tmp_rd_idx,
   25856:	4648      	mov	r0, r9
   25858:	69e3      	ldr	r3, [r4, #28]
   2585a:	68a5      	ldr	r5, [r4, #8]
   2585c:	4798      	blx	r3
   2585e:	4629      	mov	r1, r5
   25860:	4602      	mov	r2, r0
   25862:	4620      	mov	r0, r4
   25864:	f013 f984 	bl	38b70 <idx_inc>
		cont = false;
   25868:	2500      	movs	r5, #0
				buffer->tmp_rd_idx =
   2586a:	60a0      	str	r0, [r4, #8]
   2586c:	e7e4      	b.n	25838 <mpsc_pbuf_claim+0x8c>
		cont = false;
   2586e:	461d      	mov	r5, r3
			item = NULL;
   25870:	46a9      	mov	r9, r5
   25872:	e7e1      	b.n	25838 <mpsc_pbuf_claim+0x8c>
		cont = false;
   25874:	4605      	mov	r5, r0
   25876:	e7fb      	b.n	25870 <mpsc_pbuf_claim+0xc4>
	__asm__ volatile(
   25878:	f388 8811 	msr	BASEPRI, r8
   2587c:	f3bf 8f6f 	isb	sy

		if (!cont) {
			MPSC_PBUF_DBG(buffer, "claimed: %p ", item);
		}
		k_spin_unlock(&buffer->lock, key);
	} while (cont);
   25880:	2d00      	cmp	r5, #0
   25882:	d198      	bne.n	257b6 <mpsc_pbuf_claim+0xa>

	return item;
}
   25884:	4648      	mov	r0, r9
   25886:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   2588a:	bf00      	nop
   2588c:	0003d39d 	.word	0x0003d39d
   25890:	0003d1d7 	.word	0x0003d1d7

00025894 <mpsc_pbuf_free>:

void mpsc_pbuf_free(struct mpsc_pbuf_buffer *buffer,
		     const union mpsc_pbuf_generic *item)
{
   25894:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25898:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
   2589a:	69c3      	ldr	r3, [r0, #28]
   2589c:	4608      	mov	r0, r1
{
   2589e:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
   258a0:	4798      	blx	r3
	k_spinlock_key_t key = k_spin_lock(&buffer->lock);
   258a2:	f104 0714 	add.w	r7, r4, #20
	uint32_t wlen = buffer->get_wlen(item);
   258a6:	4606      	mov	r6, r0
	__asm__ volatile(
   258a8:	f04f 0340 	mov.w	r3, #64	; 0x40
   258ac:	f3ef 8811 	mrs	r8, BASEPRI
   258b0:	f383 8812 	msr	BASEPRI_MAX, r3
   258b4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   258b8:	4638      	mov	r0, r7
   258ba:	f00f fcc7 	bl	3524c <z_spin_lock_valid>
   258be:	b940      	cbnz	r0, 258d2 <mpsc_pbuf_free+0x3e>
   258c0:	491e      	ldr	r1, [pc, #120]	; (2593c <mpsc_pbuf_free+0xa8>)
   258c2:	481f      	ldr	r0, [pc, #124]	; (25940 <mpsc_pbuf_free+0xac>)
   258c4:	2294      	movs	r2, #148	; 0x94
   258c6:	f013 f924 	bl	38b12 <assert_print>
   258ca:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   258cc:	481b      	ldr	r0, [pc, #108]	; (2593c <mpsc_pbuf_free+0xa8>)
   258ce:	f013 f919 	bl	38b04 <assert_post_action>
	z_spin_lock_set_owner(l);
   258d2:	4638      	mov	r0, r7
   258d4:	f00f fcd8 	bl	35288 <z_spin_lock_set_owner>
	union mpsc_pbuf_generic *witem = (union mpsc_pbuf_generic *)item;

	witem->hdr.valid = 0;
   258d8:	782b      	ldrb	r3, [r5, #0]
   258da:	f36f 0300 	bfc	r3, #0, #1
   258de:	702b      	strb	r3, [r5, #0]
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
   258e0:	6923      	ldr	r3, [r4, #16]
   258e2:	079b      	lsls	r3, r3, #30
   258e4:	d505      	bpl.n	258f2 <mpsc_pbuf_free+0x5e>
		 ((uint32_t *)item == &buffer->buf[buffer->rd_idx])) {
   258e6:	68e2      	ldr	r2, [r4, #12]
   258e8:	6a23      	ldr	r3, [r4, #32]
   258ea:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
   258ee:	429d      	cmp	r5, r3
   258f0:	d114      	bne.n	2591c <mpsc_pbuf_free+0x88>
		witem->hdr.busy = 0;
   258f2:	782b      	ldrb	r3, [r5, #0]
   258f4:	f36f 0341 	bfc	r3, #1, #1
   258f8:	702b      	strb	r3, [r5, #0]
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
   258fa:	68e1      	ldr	r1, [r4, #12]
   258fc:	4632      	mov	r2, r6
   258fe:	4620      	mov	r0, r4
   25900:	f013 f936 	bl	38b70 <idx_inc>
   25904:	60e0      	str	r0, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25906:	4638      	mov	r0, r7
   25908:	f00f fcae 	bl	35268 <z_spin_unlock_valid>
   2590c:	b958      	cbnz	r0, 25926 <mpsc_pbuf_free+0x92>
   2590e:	490b      	ldr	r1, [pc, #44]	; (2593c <mpsc_pbuf_free+0xa8>)
   25910:	480b      	ldr	r0, [pc, #44]	; (25940 <mpsc_pbuf_free+0xac>)
   25912:	22c2      	movs	r2, #194	; 0xc2
   25914:	f013 f8fd 	bl	38b12 <assert_print>
   25918:	21c2      	movs	r1, #194	; 0xc2
   2591a:	e7d7      	b.n	258cc <mpsc_pbuf_free+0x38>
	} else {
		witem->skip.len = wlen;
   2591c:	682b      	ldr	r3, [r5, #0]
   2591e:	f366 039f 	bfi	r3, r6, #2, #30
   25922:	602b      	str	r3, [r5, #0]
   25924:	e7ef      	b.n	25906 <mpsc_pbuf_free+0x72>
	__asm__ volatile(
   25926:	f388 8811 	msr	BASEPRI, r8
   2592a:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
   2592e:	f104 002c 	add.w	r0, r4, #44	; 0x2c
	}
	MPSC_PBUF_DBG(buffer, "freed: %p ", item);

	k_spin_unlock(&buffer->lock, key);
	k_sem_give(&buffer->sem);
}
   25932:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   25936:	f00f bf37 	b.w	357a8 <z_impl_k_sem_give>
   2593a:	bf00      	nop
   2593c:	0003d39d 	.word	0x0003d39d
   25940:	0003d1d7 	.word	0x0003d1d7

00025944 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
   25944:	f00d bd94 	b.w	33470 <SystemInit>

00025948 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
   25948:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
   2594a:	4910      	ldr	r1, [pc, #64]	; (2598c <enable_logger+0x44>)
   2594c:	4810      	ldr	r0, [pc, #64]	; (25990 <enable_logger+0x48>)
{
   2594e:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
   25950:	2200      	movs	r2, #0
   25952:	f016 fa6b 	bl	3be2c <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   25956:	4d0f      	ldr	r5, [pc, #60]	; (25994 <enable_logger+0x4c>)
   25958:	490f      	ldr	r1, [pc, #60]	; (25998 <enable_logger+0x50>)
   2595a:	2200      	movs	r2, #0
   2595c:	2300      	movs	r3, #0
   2595e:	e9cd 2306 	strd	r2, r3, [sp, #24]
   25962:	2400      	movs	r4, #0
   25964:	230e      	movs	r3, #14
   25966:	e9cd 3403 	strd	r3, r4, [sp, #12]
   2596a:	e9cd 4401 	strd	r4, r4, [sp, #4]
   2596e:	4b0b      	ldr	r3, [pc, #44]	; (2599c <enable_logger+0x54>)
   25970:	9400      	str	r4, [sp, #0]
   25972:	f44f 6200 	mov.w	r2, #2048	; 0x800
   25976:	4628      	mov	r0, r5
   25978:	f00f fbb2 	bl	350e0 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   2597c:	4908      	ldr	r1, [pc, #32]	; (259a0 <enable_logger+0x58>)
   2597e:	4628      	mov	r0, r5
   25980:	f016 f93f 	bl	3bc02 <z_impl_k_thread_name_set>
	} else {
		(void)z_log_init(false, false);
	}

	return 0;
}
   25984:	4620      	mov	r0, r4
   25986:	b009      	add	sp, #36	; 0x24
   25988:	bd30      	pop	{r4, r5, pc}
   2598a:	bf00      	nop
   2598c:	00025ad1 	.word	0x00025ad1
   25990:	200024e8 	.word	0x200024e8
   25994:	20001c60 	.word	0x20001c60
   25998:	20004440 	.word	0x20004440
   2599c:	00025dc9 	.word	0x00025dc9
   259a0:	0003d419 	.word	0x0003d419

000259a4 <activate_foreach_backend>:
{
   259a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
   259a8:	f8df 8058 	ldr.w	r8, [pc, #88]	; 25a04 <activate_foreach_backend+0x60>
{
   259ac:	4604      	mov	r4, r0
	while (mask_cpy) {
   259ae:	4607      	mov	r7, r0
		mask_cpy &= ~BIT(i);
   259b0:	f04f 0901 	mov.w	r9, #1
	while (mask_cpy) {
   259b4:	b914      	cbnz	r4, 259bc <activate_foreach_backend+0x18>
}
   259b6:	4638      	mov	r0, r7
   259b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uint32_t i = __builtin_ctz(mask_cpy);
   259bc:	fa94 f5a4 	rbit	r5, r4
   259c0:	fab5 f585 	clz	r5, r5
		mask_cpy &= ~BIT(i);
   259c4:	fa09 f305 	lsl.w	r3, r9, r5
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
   259c8:	012e      	lsls	r6, r5, #4
   259ca:	eb08 1505 	add.w	r5, r8, r5, lsl #4
		mask_cpy &= ~BIT(i);
   259ce:	ea6f 0a03 	mvn.w	sl, r3
   259d2:	ea24 0403 	bic.w	r4, r4, r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
   259d6:	7b2b      	ldrb	r3, [r5, #12]
   259d8:	2b00      	cmp	r3, #0
   259da:	d0eb      	beq.n	259b4 <activate_foreach_backend+0x10>
 * @retval -EBUSY if backend is not yet ready.
 */
static inline int log_backend_is_ready(const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	if (backend->api->is_ready != NULL) {
   259dc:	f858 3006 	ldr.w	r3, [r8, r6]
   259e0:	691b      	ldr	r3, [r3, #16]
   259e2:	b94b      	cbnz	r3, 259f8 <activate_foreach_backend+0x54>
					   backend->cb->ctx,
   259e4:	4446      	add	r6, r8
			log_backend_enable(backend,
   259e6:	2204      	movs	r2, #4
   259e8:	6873      	ldr	r3, [r6, #4]
   259ea:	4628      	mov	r0, r5
   259ec:	6819      	ldr	r1, [r3, #0]
			mask &= ~BIT(i);
   259ee:	ea07 070a 	and.w	r7, r7, sl
			log_backend_enable(backend,
   259f2:	f000 fb6d 	bl	260d0 <log_backend_enable>
   259f6:	e7dd      	b.n	259b4 <activate_foreach_backend+0x10>
		return backend->api->is_ready(backend);
   259f8:	4628      	mov	r0, r5
   259fa:	4798      	blx	r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
   259fc:	2800      	cmp	r0, #0
   259fe:	d1d9      	bne.n	259b4 <activate_foreach_backend+0x10>
   25a00:	e7f0      	b.n	259e4 <activate_foreach_backend+0x40>
   25a02:	bf00      	nop
   25a04:	0003c5fc 	.word	0x0003c5fc

00025a08 <z_log_init>:
{
   25a08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 */
static inline int log_backend_count_get(void)
{
	int cnt;

	STRUCT_SECTION_COUNT(log_backend, &cnt);
   25a0c:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 25abc <z_log_init+0xb4>
   25a10:	4c2b      	ldr	r4, [pc, #172]	; (25ac0 <z_log_init+0xb8>)
   25a12:	eba9 0304 	sub.w	r3, r9, r4
	__ASSERT_NO_MSG(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);
   25a16:	2b9f      	cmp	r3, #159	; 0x9f
{
   25a18:	4680      	mov	r8, r0
   25a1a:	460f      	mov	r7, r1
	__ASSERT_NO_MSG(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);
   25a1c:	d90a      	bls.n	25a34 <z_log_init+0x2c>
   25a1e:	4929      	ldr	r1, [pc, #164]	; (25ac4 <z_log_init+0xbc>)
   25a20:	4829      	ldr	r0, [pc, #164]	; (25ac8 <z_log_init+0xc0>)
   25a22:	f240 1215 	movw	r2, #277	; 0x115
   25a26:	f013 f874 	bl	38b12 <assert_print>
   25a2a:	f240 1115 	movw	r1, #277	; 0x115
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   25a2e:	4825      	ldr	r0, [pc, #148]	; (25ac4 <z_log_init+0xbc>)
   25a30:	f013 f868 	bl	38b04 <assert_post_action>
	if (atomic_inc(&initialized) != 0) {
   25a34:	4825      	ldr	r0, [pc, #148]	; (25acc <z_log_init+0xc4>)
   25a36:	f013 f946 	bl	38cc6 <atomic_inc>
   25a3a:	4606      	mov	r6, r0
   25a3c:	b340      	cbz	r0, 25a90 <z_log_init+0x88>
	uint32_t mask = 0;
   25a3e:	2500      	movs	r5, #0
}
   25a40:	4628      	mov	r0, r5
   25a42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (backend->autostart) {
   25a46:	7b23      	ldrb	r3, [r4, #12]
   25a48:	b173      	cbz	r3, 25a68 <z_log_init+0x60>
	if (backend->api->init) {
   25a4a:	6823      	ldr	r3, [r4, #0]
   25a4c:	68db      	ldr	r3, [r3, #12]
   25a4e:	b10b      	cbz	r3, 25a54 <z_log_init+0x4c>
		backend->api->init(backend);
   25a50:	4620      	mov	r0, r4
   25a52:	4798      	blx	r3
	if (backend->api->is_ready != NULL) {
   25a54:	6823      	ldr	r3, [r4, #0]
   25a56:	691b      	ldr	r3, [r3, #16]
   25a58:	b993      	cbnz	r3, 25a80 <z_log_init+0x78>
				log_backend_enable(backend,
   25a5a:	6863      	ldr	r3, [r4, #4]
   25a5c:	2204      	movs	r2, #4
   25a5e:	6819      	ldr	r1, [r3, #0]
   25a60:	4620      	mov	r0, r4
   25a62:	f000 fb35 	bl	260d0 <log_backend_enable>
			i++;
   25a66:	3601      	adds	r6, #1
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   25a68:	3410      	adds	r4, #16
   25a6a:	454c      	cmp	r4, r9
   25a6c:	d914      	bls.n	25a98 <z_log_init+0x90>
   25a6e:	4915      	ldr	r1, [pc, #84]	; (25ac4 <z_log_init+0xbc>)
   25a70:	4815      	ldr	r0, [pc, #84]	; (25ac8 <z_log_init+0xc0>)
   25a72:	f44f 7291 	mov.w	r2, #290	; 0x122
   25a76:	f013 f84c 	bl	38b12 <assert_print>
   25a7a:	f44f 7191 	mov.w	r1, #290	; 0x122
   25a7e:	e7d6      	b.n	25a2e <z_log_init+0x26>
		return backend->api->is_ready(backend);
   25a80:	4620      	mov	r0, r4
   25a82:	4798      	blx	r3
			if (log_backend_is_ready(backend) == 0) {
   25a84:	2800      	cmp	r0, #0
   25a86:	d0e8      	beq.n	25a5a <z_log_init+0x52>
				mask |= BIT(i);
   25a88:	fa0a f306 	lsl.w	r3, sl, r6
   25a8c:	431d      	orrs	r5, r3
   25a8e:	e7ea      	b.n	25a66 <z_log_init+0x5e>
	uint32_t mask = 0;
   25a90:	4605      	mov	r5, r0
				mask |= BIT(i);
   25a92:	f04f 0a01 	mov.w	sl, #1
   25a96:	e7e8      	b.n	25a6a <z_log_init+0x62>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   25a98:	d3d5      	bcc.n	25a46 <z_log_init+0x3e>
	if (blocking) {
   25a9a:	f1b8 0f00 	cmp.w	r8, #0
   25a9e:	d0cf      	beq.n	25a40 <z_log_init+0x38>
		while (mask) {
   25aa0:	2d00      	cmp	r5, #0
   25aa2:	d0cc      	beq.n	25a3e <z_log_init+0x36>
			mask = activate_foreach_backend(mask);
   25aa4:	4628      	mov	r0, r5
   25aa6:	f7ff ff7d 	bl	259a4 <activate_foreach_backend>
   25aaa:	4605      	mov	r5, r0
			if (IS_ENABLED(CONFIG_MULTITHREADING) && can_sleep) {
   25aac:	2f00      	cmp	r7, #0
   25aae:	d0f7      	beq.n	25aa0 <z_log_init+0x98>
	return z_impl_k_sleep(timeout);
   25ab0:	2100      	movs	r1, #0
   25ab2:	f44f 70a4 	mov.w	r0, #328	; 0x148
   25ab6:	f011 faf5 	bl	370a4 <z_impl_k_sleep>
 * @return Zero if the requested time has elapsed or the number of milliseconds
 * left to sleep, if thread was woken up by \ref k_wakeup call.
 */
static inline int32_t k_msleep(int32_t ms)
{
	return k_sleep(Z_TIMEOUT_MS(ms));
   25aba:	e7f1      	b.n	25aa0 <z_log_init+0x98>
   25abc:	0003c61c 	.word	0x0003c61c
   25ac0:	0003c5fc 	.word	0x0003c5fc
   25ac4:	0003d421 	.word	0x0003d421
   25ac8:	0003d1d7 	.word	0x0003d1d7
   25acc:	20002d90 	.word	0x20002d90

00025ad0 <log_process_thread_timer_expiry_fn>:
	z_impl_k_sem_give(sem);
   25ad0:	4801      	ldr	r0, [pc, #4]	; (25ad8 <log_process_thread_timer_expiry_fn+0x8>)
   25ad2:	f00f be69 	b.w	357a8 <z_impl_k_sem_give>
   25ad6:	bf00      	nop
   25ad8:	20000b9c 	.word	0x20000b9c

00025adc <log_format_func_t_get>:
}
   25adc:	4b01      	ldr	r3, [pc, #4]	; (25ae4 <log_format_func_t_get+0x8>)
   25ade:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   25ae2:	4770      	bx	lr
   25ae4:	0003c69c 	.word	0x0003c69c

00025ae8 <log_set_timestamp_func>:
{
   25ae8:	b508      	push	{r3, lr}
   25aea:	4603      	mov	r3, r0
   25aec:	4608      	mov	r0, r1
	if (timestamp_getter == NULL) {
   25aee:	b12b      	cbz	r3, 25afc <log_set_timestamp_func+0x14>
	timestamp_func = timestamp_getter;
   25af0:	4a04      	ldr	r2, [pc, #16]	; (25b04 <log_set_timestamp_func+0x1c>)
   25af2:	6013      	str	r3, [r2, #0]
		log_output_timestamp_freq_set(freq);
   25af4:	f000 fe30 	bl	26758 <log_output_timestamp_freq_set>
	return 0;
   25af8:	2000      	movs	r0, #0
}
   25afa:	bd08      	pop	{r3, pc}
		return -EINVAL;
   25afc:	f06f 0015 	mvn.w	r0, #21
   25b00:	e7fb      	b.n	25afa <log_set_timestamp_func+0x12>
   25b02:	bf00      	nop
   25b04:	2000063c 	.word	0x2000063c

00025b08 <z_log_notify_backend_enabled>:
{
   25b08:	b510      	push	{r4, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
   25b0a:	4c04      	ldr	r4, [pc, #16]	; (25b1c <z_log_notify_backend_enabled+0x14>)
   25b0c:	7823      	ldrb	r3, [r4, #0]
   25b0e:	b913      	cbnz	r3, 25b16 <z_log_notify_backend_enabled+0xe>
   25b10:	4803      	ldr	r0, [pc, #12]	; (25b20 <z_log_notify_backend_enabled+0x18>)
   25b12:	f00f fe49 	bl	357a8 <z_impl_k_sem_give>
	backend_attached = true;
   25b16:	2301      	movs	r3, #1
   25b18:	7023      	strb	r3, [r4, #0]
}
   25b1a:	bd10      	pop	{r4, pc}
   25b1c:	200033fa 	.word	0x200033fa
   25b20:	20000b9c 	.word	0x20000b9c

00025b24 <z_log_dropped>:
{
   25b24:	b510      	push	{r4, lr}
   25b26:	4604      	mov	r4, r0
	atomic_inc(&dropped_cnt);
   25b28:	4808      	ldr	r0, [pc, #32]	; (25b4c <z_log_dropped+0x28>)
   25b2a:	f013 f8cc 	bl	38cc6 <atomic_inc>
	if (buffered) {
   25b2e:	b15c      	cbz	r4, 25b48 <z_log_dropped+0x24>
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_sub(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   25b30:	f3bf 8f5b 	dmb	ish
   25b34:	4b06      	ldr	r3, [pc, #24]	; (25b50 <z_log_dropped+0x2c>)
   25b36:	e853 1f00 	ldrex	r1, [r3]
   25b3a:	3901      	subs	r1, #1
   25b3c:	e843 1200 	strex	r2, r1, [r3]
   25b40:	2a00      	cmp	r2, #0
   25b42:	d1f8      	bne.n	25b36 <z_log_dropped+0x12>
   25b44:	f3bf 8f5b 	dmb	ish
}
   25b48:	bd10      	pop	{r4, pc}
   25b4a:	bf00      	nop
   25b4c:	20002d88 	.word	0x20002d88
   25b50:	20002d8c 	.word	0x20002d8c

00025b54 <z_log_dropped_read_and_clear>:
}
   25b54:	2000      	movs	r0, #0
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   25b56:	4b06      	ldr	r3, [pc, #24]	; (25b70 <z_log_dropped_read_and_clear+0x1c>)
   25b58:	f3bf 8f5b 	dmb	ish
   25b5c:	4601      	mov	r1, r0
   25b5e:	e853 0f00 	ldrex	r0, [r3]
   25b62:	e843 1200 	strex	r2, r1, [r3]
   25b66:	2a00      	cmp	r2, #0
   25b68:	d1f9      	bne.n	25b5e <z_log_dropped_read_and_clear+0xa>
   25b6a:	f3bf 8f5b 	dmb	ish
   25b6e:	4770      	bx	lr
   25b70:	20002d88 	.word	0x20002d88

00025b74 <dropped_notify>:
{
   25b74:	b570      	push	{r4, r5, r6, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
   25b76:	f7ff ffed 	bl	25b54 <z_log_dropped_read_and_clear>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   25b7a:	4c0e      	ldr	r4, [pc, #56]	; (25bb4 <dropped_notify+0x40>)
   25b7c:	4e0e      	ldr	r6, [pc, #56]	; (25bb8 <dropped_notify+0x44>)
	uint32_t dropped = z_log_dropped_read_and_clear();
   25b7e:	4605      	mov	r5, r0
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   25b80:	42b4      	cmp	r4, r6
   25b82:	d915      	bls.n	25bb0 <dropped_notify+0x3c>
   25b84:	490d      	ldr	r1, [pc, #52]	; (25bbc <dropped_notify+0x48>)
   25b86:	480e      	ldr	r0, [pc, #56]	; (25bc0 <dropped_notify+0x4c>)
   25b88:	f240 12cd 	movw	r2, #461	; 0x1cd
   25b8c:	f012 ffc1 	bl	38b12 <assert_print>
   25b90:	480a      	ldr	r0, [pc, #40]	; (25bbc <dropped_notify+0x48>)
   25b92:	f240 11cd 	movw	r1, #461	; 0x1cd
   25b96:	f012 ffb5 	bl	38b04 <assert_post_action>
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
   25b9a:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
   25b9c:	795b      	ldrb	r3, [r3, #5]
   25b9e:	b12b      	cbz	r3, 25bac <dropped_notify+0x38>
	if (backend->api->dropped != NULL) {
   25ba0:	6823      	ldr	r3, [r4, #0]
   25ba2:	685b      	ldr	r3, [r3, #4]
   25ba4:	b113      	cbz	r3, 25bac <dropped_notify+0x38>
		backend->api->dropped(backend, cnt);
   25ba6:	4629      	mov	r1, r5
   25ba8:	4620      	mov	r0, r4
   25baa:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   25bac:	3410      	adds	r4, #16
   25bae:	e7e7      	b.n	25b80 <dropped_notify+0xc>
   25bb0:	d3f3      	bcc.n	25b9a <dropped_notify+0x26>
}
   25bb2:	bd70      	pop	{r4, r5, r6, pc}
   25bb4:	0003c5fc 	.word	0x0003c5fc
   25bb8:	0003c61c 	.word	0x0003c61c
   25bbc:	0003d421 	.word	0x0003d421
   25bc0:	0003d1d7 	.word	0x0003d1d7

00025bc4 <z_log_msg_init>:
{
   25bc4:	b510      	push	{r4, lr}
	mpsc_pbuf_init(&log_buffer, &mpsc_config);
   25bc6:	4c04      	ldr	r4, [pc, #16]	; (25bd8 <z_log_msg_init+0x14>)
   25bc8:	4904      	ldr	r1, [pc, #16]	; (25bdc <z_log_msg_init+0x18>)
   25bca:	4620      	mov	r0, r4
   25bcc:	f7ff fcd0 	bl	25570 <mpsc_pbuf_init>
	curr_log_buffer = &log_buffer;
   25bd0:	4b03      	ldr	r3, [pc, #12]	; (25be0 <z_log_msg_init+0x1c>)
   25bd2:	601c      	str	r4, [r3, #0]
}
   25bd4:	bd10      	pop	{r4, pc}
   25bd6:	bf00      	nop
   25bd8:	20000a18 	.word	0x20000a18
   25bdc:	0003c688 	.word	0x0003c688
   25be0:	20002d80 	.word	0x20002d80

00025be4 <log_core_init>:
{
   25be4:	b508      	push	{r3, lr}
	panic_mode = false;
   25be6:	4a08      	ldr	r2, [pc, #32]	; (25c08 <log_core_init+0x24>)
		log_set_timestamp_func(default_get_timestamp,
   25be8:	4808      	ldr	r0, [pc, #32]	; (25c0c <log_core_init+0x28>)
	panic_mode = false;
   25bea:	2300      	movs	r3, #0
   25bec:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
   25bee:	4a08      	ldr	r2, [pc, #32]	; (25c10 <log_core_init+0x2c>)
		log_set_timestamp_func(default_get_timestamp,
   25bf0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
	dropped_cnt = 0;
   25bf4:	6013      	str	r3, [r2, #0]
		log_set_timestamp_func(default_get_timestamp,
   25bf6:	f7ff ff77 	bl	25ae8 <log_set_timestamp_func>
		z_log_msg_init();
   25bfa:	f7ff ffe3 	bl	25bc4 <z_log_msg_init>
}
   25bfe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		z_log_runtime_filters_init();
   25c02:	f000 b9d9 	b.w	25fb8 <z_log_runtime_filters_init>
   25c06:	bf00      	nop
   25c08:	200033fb 	.word	0x200033fb
   25c0c:	00038cc3 	.word	0x00038cc3
   25c10:	20002d88 	.word	0x20002d88

00025c14 <z_log_msg_alloc>:
{
   25c14:	4601      	mov	r1, r0
	return (struct log_msg *)mpsc_pbuf_alloc(buffer, wlen,
   25c16:	2200      	movs	r2, #0
   25c18:	4801      	ldr	r0, [pc, #4]	; (25c20 <z_log_msg_alloc+0xc>)
   25c1a:	2300      	movs	r3, #0
   25c1c:	f7ff bcd6 	b.w	255cc <mpsc_pbuf_alloc>
   25c20:	20000a18 	.word	0x20000a18

00025c24 <z_log_msg_local_claim>:
	return (union log_msg_generic *)mpsc_pbuf_claim(&log_buffer);
   25c24:	4801      	ldr	r0, [pc, #4]	; (25c2c <z_log_msg_local_claim+0x8>)
   25c26:	f7ff bdc1 	b.w	257ac <mpsc_pbuf_claim>
   25c2a:	bf00      	nop
   25c2c:	20000a18 	.word	0x20000a18

00025c30 <z_log_msg_free>:
	mpsc_pbuf_free(buffer, &msg->buf);
   25c30:	4b02      	ldr	r3, [pc, #8]	; (25c3c <z_log_msg_free+0xc>)
{
   25c32:	4601      	mov	r1, r0
	mpsc_pbuf_free(buffer, &msg->buf);
   25c34:	6818      	ldr	r0, [r3, #0]
   25c36:	f7ff be2d 	b.w	25894 <mpsc_pbuf_free>
   25c3a:	bf00      	nop
   25c3c:	20002d80 	.word	0x20002d80

00025c40 <z_log_msg_pending>:
	return mpsc_pbuf_is_pending(buffer);
   25c40:	4801      	ldr	r0, [pc, #4]	; (25c48 <z_log_msg_pending+0x8>)
   25c42:	f013 b820 	b.w	38c86 <mpsc_pbuf_is_pending>
   25c46:	bf00      	nop
   25c48:	20000a18 	.word	0x20000a18

00025c4c <z_impl_log_process>:
{
   25c4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!backend_attached) {
   25c50:	4b3b      	ldr	r3, [pc, #236]	; (25d40 <z_impl_log_process+0xf4>)
   25c52:	7818      	ldrb	r0, [r3, #0]
   25c54:	2800      	cmp	r0, #0
   25c56:	d071      	beq.n	25d3c <z_impl_log_process+0xf0>
	return z_log_msg_local_claim();
   25c58:	f7ff ffe4 	bl	25c24 <z_log_msg_local_claim>
	if (msg) {
   25c5c:	4604      	mov	r4, r0
   25c5e:	2800      	cmp	r0, #0
   25c60:	d041      	beq.n	25ce6 <z_impl_log_process+0x9a>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   25c62:	f3bf 8f5b 	dmb	ish
   25c66:	4b37      	ldr	r3, [pc, #220]	; (25d44 <z_impl_log_process+0xf8>)
   25c68:	e853 1f00 	ldrex	r1, [r3]
   25c6c:	3901      	subs	r1, #1
   25c6e:	e843 1200 	strex	r2, r1, [r3]
   25c72:	2a00      	cmp	r2, #0
   25c74:	d1f8      	bne.n	25c68 <z_impl_log_process+0x1c>
   25c76:	f3bf 8f5b 	dmb	ish
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   25c7a:	4d33      	ldr	r5, [pc, #204]	; (25d48 <z_impl_log_process+0xfc>)
   25c7c:	4e33      	ldr	r6, [pc, #204]	; (25d4c <z_impl_log_process+0x100>)
 *
 * @return Source ID.
 */
static inline uint32_t log_dynamic_source_id(struct log_source_dynamic_data *data)
{
	return ((uint8_t *)data - (uint8_t *)__log_dynamic_start)/
   25c7e:	4f34      	ldr	r7, [pc, #208]	; (25d50 <z_impl_log_process+0x104>)
   25c80:	42b5      	cmp	r5, r6
   25c82:	d92c      	bls.n	25cde <z_impl_log_process+0x92>
   25c84:	4933      	ldr	r1, [pc, #204]	; (25d54 <z_impl_log_process+0x108>)
   25c86:	4834      	ldr	r0, [pc, #208]	; (25d58 <z_impl_log_process+0x10c>)
   25c88:	f240 12c1 	movw	r2, #449	; 0x1c1
   25c8c:	f012 ff41 	bl	38b12 <assert_print>
   25c90:	4830      	ldr	r0, [pc, #192]	; (25d54 <z_impl_log_process+0x108>)
   25c92:	f240 11c1 	movw	r1, #449	; 0x1c1
   25c96:	f012 ff35 	bl	38b04 <assert_post_action>
	return backend->cb->active;
   25c9a:	686b      	ldr	r3, [r5, #4]
		if (log_backend_is_active(backend) &&
   25c9c:	795b      	ldrb	r3, [r3, #5]
   25c9e:	b13b      	cbz	r3, 25cb0 <z_impl_log_process+0x64>
	va_end(ap);
}

static inline bool z_log_item_is_msg(const union log_msg_generic *msg)
{
	return msg->generic.type == Z_LOG_MSG2_LOG;
   25ca0:	7821      	ldrb	r1, [r4, #0]
	if (!z_log_item_is_msg(msg)) {
   25ca2:	074b      	lsls	r3, r1, #29
   25ca4:	d506      	bpl.n	25cb4 <z_impl_log_process+0x68>
	backend->api->process(backend, msg);
   25ca6:	682b      	ldr	r3, [r5, #0]
   25ca8:	4621      	mov	r1, r4
   25caa:	681b      	ldr	r3, [r3, #0]
   25cac:	4628      	mov	r0, r5
   25cae:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   25cb0:	3510      	adds	r5, #16
   25cb2:	e7e5      	b.n	25c80 <z_impl_log_process+0x34>
 *
 * @return Log level.
 */
static inline uint8_t log_msg_get_level(struct log_msg *msg)
{
	return msg->hdr.desc.level;
   25cb4:	8823      	ldrh	r3, [r4, #0]
 *
 * @return Pointer to the source data.
 */
static inline const void *log_msg_get_source(struct log_msg *msg)
{
	return msg->hdr.source;
   25cb6:	6862      	ldr	r2, [r4, #4]
	if (level == LOG_LEVEL_NONE) {
   25cb8:	f413 7fe0 	tst.w	r3, #448	; 0x1c0
	return msg->hdr.desc.level;
   25cbc:	f3c3 1882 	ubfx	r8, r3, #6, #3
	return msg->hdr.desc.domain;
   25cc0:	f3c1 01c2 	ubfx	r1, r1, #3, #3
   25cc4:	d0ef      	beq.n	25ca6 <z_impl_log_process+0x5a>
	if (source) {
   25cc6:	2a00      	cmp	r2, #0
   25cc8:	d0ed      	beq.n	25ca6 <z_impl_log_process+0x5a>
   25cca:	1bd2      	subs	r2, r2, r7
		backend_level = log_filter_get(backend, domain_id, source_id, true);
   25ccc:	2301      	movs	r3, #1
   25cce:	f342 028f 	sbfx	r2, r2, #2, #16
   25cd2:	4628      	mov	r0, r5
   25cd4:	f000 fa3a 	bl	2614c <log_filter_get>
		if (log_backend_is_active(backend) &&
   25cd8:	4540      	cmp	r0, r8
   25cda:	d3e9      	bcc.n	25cb0 <z_impl_log_process+0x64>
   25cdc:	e7e3      	b.n	25ca6 <z_impl_log_process+0x5a>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   25cde:	d3dc      	bcc.n	25c9a <z_impl_log_process+0x4e>
		z_log_msg_free(msg);
   25ce0:	4620      	mov	r0, r4
   25ce2:	f7ff ffa5 	bl	25c30 <z_log_msg_free>
	return dropped_cnt > 0;
   25ce6:	4b1d      	ldr	r3, [pc, #116]	; (25d5c <z_impl_log_process+0x110>)
   25ce8:	4c1d      	ldr	r4, [pc, #116]	; (25d60 <z_impl_log_process+0x114>)
		if ((dropped_pend || unordered_pend) &&
   25cea:	681b      	ldr	r3, [r3, #0]
   25cec:	2b00      	cmp	r3, #0
   25cee:	dd19      	ble.n	25d24 <z_impl_log_process+0xd8>
	return z_impl_k_uptime_ticks();
   25cf0:	f016 f874 	bl	3bddc <z_impl_k_uptime_ticks>
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
   25cf4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   25cf8:	fba0 0302 	umull	r0, r3, r0, r2
   25cfc:	fb02 3101 	mla	r1, r2, r1, r3
   25d00:	0bc3      	lsrs	r3, r0, #15
		   (k_uptime_get() - last_failure_report) > CONFIG_LOG_FAILURE_REPORT_PERIOD) {
   25d02:	e9d4 2000 	ldrd	r2, r0, [r4]
   25d06:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
   25d0a:	1a9b      	subs	r3, r3, r2
   25d0c:	ea4f 31d1 	mov.w	r1, r1, lsr #15
		if ((dropped_pend || unordered_pend) &&
   25d10:	f240 32e9 	movw	r2, #1001	; 0x3e9
		   (k_uptime_get() - last_failure_report) > CONFIG_LOG_FAILURE_REPORT_PERIOD) {
   25d14:	eb61 0100 	sbc.w	r1, r1, r0
		if ((dropped_pend || unordered_pend) &&
   25d18:	4293      	cmp	r3, r2
   25d1a:	f171 0100 	sbcs.w	r1, r1, #0
   25d1e:	d301      	bcc.n	25d24 <z_impl_log_process+0xd8>
				dropped_notify();
   25d20:	f7ff ff28 	bl	25b74 <dropped_notify>
		last_failure_report += CONFIG_LOG_FAILURE_REPORT_PERIOD;
   25d24:	e9d4 3200 	ldrd	r3, r2, [r4]
   25d28:	f513 737a 	adds.w	r3, r3, #1000	; 0x3e8
   25d2c:	f142 0200 	adc.w	r2, r2, #0
   25d30:	e9c4 3200 	strd	r3, r2, [r4]
}
   25d34:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return z_log_msg_pending();
   25d38:	f7ff bf82 	b.w	25c40 <z_log_msg_pending>
}
   25d3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   25d40:	200033fa 	.word	0x200033fa
   25d44:	20002d8c 	.word	0x20002d8c
   25d48:	0003c5fc 	.word	0x0003c5fc
   25d4c:	0003c61c 	.word	0x0003c61c
   25d50:	20000a60 	.word	0x20000a60
   25d54:	0003d421 	.word	0x0003d421
   25d58:	0003d1d7 	.word	0x0003d1d7
   25d5c:	20002d88 	.word	0x20002d88
   25d60:	200024e0 	.word	0x200024e0

00025d64 <z_impl_log_panic>:
{
   25d64:	b570      	push	{r4, r5, r6, lr}
	if (panic_mode) {
   25d66:	4d13      	ldr	r5, [pc, #76]	; (25db4 <z_impl_log_panic+0x50>)
   25d68:	7829      	ldrb	r1, [r5, #0]
   25d6a:	bb09      	cbnz	r1, 25db0 <z_impl_log_panic+0x4c>
	(void)z_log_init(true, false);
   25d6c:	2001      	movs	r0, #1
   25d6e:	f7ff fe4b 	bl	25a08 <z_log_init>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   25d72:	4c11      	ldr	r4, [pc, #68]	; (25db8 <z_impl_log_panic+0x54>)
   25d74:	4e11      	ldr	r6, [pc, #68]	; (25dbc <z_impl_log_panic+0x58>)
   25d76:	42b4      	cmp	r4, r6
   25d78:	d913      	bls.n	25da2 <z_impl_log_panic+0x3e>
   25d7a:	4911      	ldr	r1, [pc, #68]	; (25dc0 <z_impl_log_panic+0x5c>)
   25d7c:	4811      	ldr	r0, [pc, #68]	; (25dc4 <z_impl_log_panic+0x60>)
   25d7e:	f44f 72c2 	mov.w	r2, #388	; 0x184
   25d82:	f012 fec6 	bl	38b12 <assert_print>
   25d86:	480e      	ldr	r0, [pc, #56]	; (25dc0 <z_impl_log_panic+0x5c>)
   25d88:	f44f 71c2 	mov.w	r1, #388	; 0x184
   25d8c:	f012 feba 	bl	38b04 <assert_post_action>
	return backend->cb->active;
   25d90:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
   25d92:	795b      	ldrb	r3, [r3, #5]
   25d94:	b11b      	cbz	r3, 25d9e <z_impl_log_panic+0x3a>
	backend->api->panic(backend);
   25d96:	6823      	ldr	r3, [r4, #0]
   25d98:	4620      	mov	r0, r4
   25d9a:	689b      	ldr	r3, [r3, #8]
   25d9c:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   25d9e:	3410      	adds	r4, #16
   25da0:	e7e9      	b.n	25d76 <z_impl_log_panic+0x12>
   25da2:	d3f5      	bcc.n	25d90 <z_impl_log_panic+0x2c>
	if (z_syscall_trap()) {
		return (bool) arch_syscall_invoke0(K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process();
   25da4:	f7ff ff52 	bl	25c4c <z_impl_log_process>
		while (log_process() == true) {
   25da8:	2800      	cmp	r0, #0
   25daa:	d1fb      	bne.n	25da4 <z_impl_log_panic+0x40>
	panic_mode = true;
   25dac:	2301      	movs	r3, #1
   25dae:	702b      	strb	r3, [r5, #0]
}
   25db0:	bd70      	pop	{r4, r5, r6, pc}
   25db2:	bf00      	nop
   25db4:	200033fb 	.word	0x200033fb
   25db8:	0003c5fc 	.word	0x0003c5fc
   25dbc:	0003c61c 	.word	0x0003c61c
   25dc0:	0003d421 	.word	0x0003d421
   25dc4:	0003d1d7 	.word	0x0003d1d7

00025dc8 <log_process_thread_func>:
{
   25dc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	STRUCT_SECTION_COUNT(log_backend, &cnt);
   25dcc:	4b2c      	ldr	r3, [pc, #176]	; (25e80 <log_process_thread_func+0xb8>)
   25dce:	4f2d      	ldr	r7, [pc, #180]	; (25e84 <log_process_thread_func+0xbc>)
   25dd0:	1afb      	subs	r3, r7, r3
	__ASSERT_NO_MSG(log_backend_count_get() > 0);
   25dd2:	091b      	lsrs	r3, r3, #4
   25dd4:	d10a      	bne.n	25dec <log_process_thread_func+0x24>
   25dd6:	492c      	ldr	r1, [pc, #176]	; (25e88 <log_process_thread_func+0xc0>)
   25dd8:	482c      	ldr	r0, [pc, #176]	; (25e8c <log_process_thread_func+0xc4>)
   25dda:	f240 3247 	movw	r2, #839	; 0x347
   25dde:	f012 fe98 	bl	38b12 <assert_print>
   25de2:	f240 3147 	movw	r1, #839	; 0x347
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   25de6:	4828      	ldr	r0, [pc, #160]	; (25e88 <log_process_thread_func+0xc0>)
   25de8:	f012 fe8c 	bl	38b04 <assert_post_action>
	uint32_t activate_mask = z_log_init(false, false);
   25dec:	2100      	movs	r1, #0
   25dee:	4608      	mov	r0, r1
   25df0:	f7ff fe0a 	bl	25a08 <z_log_init>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
   25df4:	4604      	mov	r4, r0
   25df6:	b340      	cbz	r0, 25e4a <log_process_thread_func+0x82>
   25df8:	f240 6867 	movw	r8, #1639	; 0x667
   25dfc:	f04f 0900 	mov.w	r9, #0
	return z_impl_z_current_get();
   25e00:	f011 f97c 	bl	370fc <z_impl_z_current_get>
	proc_tid = process_tid;
   25e04:	4b22      	ldr	r3, [pc, #136]	; (25e90 <log_process_thread_func+0xc8>)
   25e06:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
   25e08:	b130      	cbz	r0, 25e18 <log_process_thread_func+0x50>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
   25e0a:	4b22      	ldr	r3, [pc, #136]	; (25e94 <log_process_thread_func+0xcc>)
	    process_tid &&
   25e0c:	681b      	ldr	r3, [r3, #0]
   25e0e:	2b09      	cmp	r3, #9
   25e10:	dd02      	ble.n	25e18 <log_process_thread_func+0x50>
	z_impl_k_sem_give(sem);
   25e12:	4821      	ldr	r0, [pc, #132]	; (25e98 <log_process_thread_func+0xd0>)
   25e14:	f00f fcc8 	bl	357a8 <z_impl_k_sem_give>
	return z_impl_k_sem_take(sem, timeout);
   25e18:	f8df a07c 	ldr.w	sl, [pc, #124]	; 25e98 <log_process_thread_func+0xd0>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
   25e1c:	2500      	movs	r5, #0
		if (activate_mask) {
   25e1e:	b144      	cbz	r4, 25e32 <log_process_thread_func+0x6a>
			activate_mask = activate_foreach_backend(activate_mask);
   25e20:	4620      	mov	r0, r4
   25e22:	f7ff fdbf 	bl	259a4 <activate_foreach_backend>
			if (!activate_mask) {
   25e26:	4604      	mov	r4, r0
   25e28:	b918      	cbnz	r0, 25e32 <log_process_thread_func+0x6a>
				timeout = K_FOREVER;
   25e2a:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   25e2e:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
   25e32:	f7ff ff0b 	bl	25c4c <z_impl_log_process>
		if (log_process() == false) {
   25e36:	4606      	mov	r6, r0
   25e38:	b928      	cbnz	r0, 25e46 <log_process_thread_func+0x7e>
			if (processed_any) {
   25e3a:	b95d      	cbnz	r5, 25e54 <log_process_thread_func+0x8c>
   25e3c:	4642      	mov	r2, r8
   25e3e:	464b      	mov	r3, r9
   25e40:	4650      	mov	r0, sl
   25e42:	f00f fceb 	bl	3581c <z_impl_k_sem_take>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
   25e46:	4635      	mov	r5, r6
   25e48:	e7e9      	b.n	25e1e <log_process_thread_func+0x56>
   25e4a:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   25e4e:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
   25e52:	e7d5      	b.n	25e00 <log_process_thread_func+0x38>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   25e54:	4d0a      	ldr	r5, [pc, #40]	; (25e80 <log_process_thread_func+0xb8>)
   25e56:	e008      	b.n	25e6a <log_process_thread_func+0xa2>
   25e58:	d2f0      	bcs.n	25e3c <log_process_thread_func+0x74>
				      enum log_backend_evt event,
				      union log_backend_evt_arg *arg)
{
	__ASSERT_NO_MSG(backend != NULL);

	if (backend->api->notify) {
   25e5a:	682b      	ldr	r3, [r5, #0]
   25e5c:	699b      	ldr	r3, [r3, #24]
   25e5e:	b11b      	cbz	r3, 25e68 <log_process_thread_func+0xa0>
		backend->api->notify(backend, event, arg);
   25e60:	2200      	movs	r2, #0
   25e62:	4611      	mov	r1, r2
   25e64:	4628      	mov	r0, r5
   25e66:	4798      	blx	r3
   25e68:	3510      	adds	r5, #16
   25e6a:	42bd      	cmp	r5, r7
   25e6c:	d9f4      	bls.n	25e58 <log_process_thread_func+0x90>
   25e6e:	4906      	ldr	r1, [pc, #24]	; (25e88 <log_process_thread_func+0xc0>)
   25e70:	4806      	ldr	r0, [pc, #24]	; (25e8c <log_process_thread_func+0xc4>)
   25e72:	f240 323b 	movw	r2, #827	; 0x33b
   25e76:	f012 fe4c 	bl	38b12 <assert_print>
   25e7a:	f240 313b 	movw	r1, #827	; 0x33b
   25e7e:	e7b2      	b.n	25de6 <log_process_thread_func+0x1e>
   25e80:	0003c5fc 	.word	0x0003c5fc
   25e84:	0003c61c 	.word	0x0003c61c
   25e88:	0003d421 	.word	0x0003d421
   25e8c:	0003d1d7 	.word	0x0003d1d7
   25e90:	20002d84 	.word	0x20002d84
   25e94:	20002d8c 	.word	0x20002d8c
   25e98:	20000b9c 	.word	0x20000b9c

00025e9c <z_log_msg_post_finalize>:
{
   25e9c:	b513      	push	{r0, r1, r4, lr}
	atomic_val_t cnt = atomic_inc(&buffered_cnt);
   25e9e:	4826      	ldr	r0, [pc, #152]	; (25f38 <z_log_msg_post_finalize+0x9c>)
   25ea0:	f012 ff11 	bl	38cc6 <atomic_inc>
	if (panic_mode) {
   25ea4:	4b25      	ldr	r3, [pc, #148]	; (25f3c <z_log_msg_post_finalize+0xa0>)
   25ea6:	781b      	ldrb	r3, [r3, #0]
   25ea8:	b353      	cbz	r3, 25f00 <z_log_msg_post_finalize+0x64>
	__asm__ volatile(
   25eaa:	f04f 0340 	mov.w	r3, #64	; 0x40
   25eae:	f3ef 8411 	mrs	r4, BASEPRI
   25eb2:	f383 8812 	msr	BASEPRI_MAX, r3
   25eb6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   25eba:	4821      	ldr	r0, [pc, #132]	; (25f40 <z_log_msg_post_finalize+0xa4>)
   25ebc:	f00f f9c6 	bl	3524c <z_spin_lock_valid>
   25ec0:	b940      	cbnz	r0, 25ed4 <z_log_msg_post_finalize+0x38>
   25ec2:	4920      	ldr	r1, [pc, #128]	; (25f44 <z_log_msg_post_finalize+0xa8>)
   25ec4:	4820      	ldr	r0, [pc, #128]	; (25f48 <z_log_msg_post_finalize+0xac>)
   25ec6:	2294      	movs	r2, #148	; 0x94
   25ec8:	f012 fe23 	bl	38b12 <assert_print>
   25ecc:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25ece:	481d      	ldr	r0, [pc, #116]	; (25f44 <z_log_msg_post_finalize+0xa8>)
   25ed0:	f012 fe18 	bl	38b04 <assert_post_action>
	z_spin_lock_set_owner(l);
   25ed4:	481a      	ldr	r0, [pc, #104]	; (25f40 <z_log_msg_post_finalize+0xa4>)
   25ed6:	f00f f9d7 	bl	35288 <z_spin_lock_set_owner>
   25eda:	f7ff feb7 	bl	25c4c <z_impl_log_process>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25ede:	4818      	ldr	r0, [pc, #96]	; (25f40 <z_log_msg_post_finalize+0xa4>)
   25ee0:	f00f f9c2 	bl	35268 <z_spin_unlock_valid>
   25ee4:	b930      	cbnz	r0, 25ef4 <z_log_msg_post_finalize+0x58>
   25ee6:	4917      	ldr	r1, [pc, #92]	; (25f44 <z_log_msg_post_finalize+0xa8>)
   25ee8:	4817      	ldr	r0, [pc, #92]	; (25f48 <z_log_msg_post_finalize+0xac>)
   25eea:	22c2      	movs	r2, #194	; 0xc2
   25eec:	f012 fe11 	bl	38b12 <assert_print>
   25ef0:	21c2      	movs	r1, #194	; 0xc2
   25ef2:	e7ec      	b.n	25ece <z_log_msg_post_finalize+0x32>
	__asm__ volatile(
   25ef4:	f384 8811 	msr	BASEPRI, r4
   25ef8:	f3bf 8f6f 	isb	sy
}
   25efc:	b002      	add	sp, #8
   25efe:	bd10      	pop	{r4, pc}
	} else if (proc_tid != NULL) {
   25f00:	4b12      	ldr	r3, [pc, #72]	; (25f4c <z_log_msg_post_finalize+0xb0>)
   25f02:	681b      	ldr	r3, [r3, #0]
   25f04:	2b00      	cmp	r3, #0
   25f06:	d0f9      	beq.n	25efc <z_log_msg_post_finalize+0x60>
		if (cnt == 0) {
   25f08:	b950      	cbnz	r0, 25f20 <z_log_msg_post_finalize+0x84>
	z_impl_k_timer_start(timer, duration, period);
   25f0a:	2200      	movs	r2, #0
   25f0c:	2300      	movs	r3, #0
   25f0e:	e9cd 2300 	strd	r2, r3, [sp]
   25f12:	480f      	ldr	r0, [pc, #60]	; (25f50 <z_log_msg_post_finalize+0xb4>)
   25f14:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   25f18:	2300      	movs	r3, #0
   25f1a:	f011 fd1b 	bl	37954 <z_impl_k_timer_start>
   25f1e:	e7ed      	b.n	25efc <z_log_msg_post_finalize+0x60>
		} else if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
   25f20:	280a      	cmp	r0, #10
   25f22:	d1eb      	bne.n	25efc <z_log_msg_post_finalize+0x60>
	z_impl_k_timer_stop(timer);
   25f24:	480a      	ldr	r0, [pc, #40]	; (25f50 <z_log_msg_post_finalize+0xb4>)
   25f26:	f015 ff8d 	bl	3be44 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
   25f2a:	480a      	ldr	r0, [pc, #40]	; (25f54 <z_log_msg_post_finalize+0xb8>)
}
   25f2c:	b002      	add	sp, #8
   25f2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   25f32:	f00f bc39 	b.w	357a8 <z_impl_k_sem_give>
   25f36:	bf00      	nop
   25f38:	20002d8c 	.word	0x20002d8c
   25f3c:	200033fb 	.word	0x200033fb
   25f40:	20002d7c 	.word	0x20002d7c
   25f44:	0003d39d 	.word	0x0003d39d
   25f48:	0003d1d7 	.word	0x0003d1d7
   25f4c:	20002d84 	.word	0x20002d84
   25f50:	200024e8 	.word	0x200024e8
   25f54:	20000b9c 	.word	0x20000b9c

00025f58 <z_log_msg_commit>:
{
   25f58:	b510      	push	{r4, lr}
	msg->hdr.timestamp = timestamp_func();
   25f5a:	4b06      	ldr	r3, [pc, #24]	; (25f74 <z_log_msg_commit+0x1c>)
   25f5c:	681b      	ldr	r3, [r3, #0]
{
   25f5e:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
   25f60:	4798      	blx	r3
	mpsc_pbuf_commit(buffer, &m->buf);
   25f62:	4621      	mov	r1, r4
	msg->hdr.timestamp = timestamp_func();
   25f64:	60a0      	str	r0, [r4, #8]
	mpsc_pbuf_commit(buffer, &m->buf);
   25f66:	4804      	ldr	r0, [pc, #16]	; (25f78 <z_log_msg_commit+0x20>)
   25f68:	f7ff fbdc 	bl	25724 <mpsc_pbuf_commit>
}
   25f6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_log_msg_post_finalize();
   25f70:	f7ff bf94 	b.w	25e9c <z_log_msg_post_finalize>
   25f74:	2000063c 	.word	0x2000063c
   25f78:	20000a18 	.word	0x20000a18

00025f7c <log_backend_id_get.part.0>:
	__ASSERT_NO_MSG(backend != NULL);
   25f7c:	4c05      	ldr	r4, [pc, #20]	; (25f94 <log_backend_id_get.part.0+0x18>)
   25f7e:	4806      	ldr	r0, [pc, #24]	; (25f98 <log_backend_id_get.part.0+0x1c>)
   25f80:	4621      	mov	r1, r4
static inline uint8_t log_backend_id_get(const struct log_backend *const backend)
   25f82:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(backend != NULL);
   25f84:	22ec      	movs	r2, #236	; 0xec
   25f86:	f012 fdc4 	bl	38b12 <assert_print>
   25f8a:	21ec      	movs	r1, #236	; 0xec
   25f8c:	4620      	mov	r0, r4
   25f8e:	f012 fdb9 	bl	38b04 <assert_post_action>
   25f92:	bf00      	nop
   25f94:	0003d47f 	.word	0x0003d47f
   25f98:	0003d1d7 	.word	0x0003d1d7

00025f9c <log_source_name_get>:
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
   25f9c:	4a04      	ldr	r2, [pc, #16]	; (25fb0 <log_source_name_get+0x14>)
   25f9e:	4b05      	ldr	r3, [pc, #20]	; (25fb4 <log_source_name_get+0x18>)
   25fa0:	1a9b      	subs	r3, r3, r2
}

const char *log_source_name_get(uint32_t domain_id, uint32_t source_id)
{
	if (z_log_is_local_domain(domain_id)) {
		if (source_id < log_src_cnt_get(domain_id)) {
   25fa2:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
			return __log_const_start[source_id].name;
   25fa6:	bf34      	ite	cc
   25fa8:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
		} else {
			return NULL;
   25fac:	2000      	movcs	r0, #0
		}
	}

	return link_source_name_get(domain_id, source_id);
}
   25fae:	4770      	bx	lr
   25fb0:	0003c494 	.word	0x0003c494
   25fb4:	0003c5fc 	.word	0x0003c5fc

00025fb8 <z_log_runtime_filters_init>:
   25fb8:	480b      	ldr	r0, [pc, #44]	; (25fe8 <z_log_runtime_filters_init+0x30>)
   25fba:	4b0c      	ldr	r3, [pc, #48]	; (25fec <z_log_runtime_filters_init+0x34>)

	return z_log_link_get_dynamic_filter(domain_id, source_id);
}

void z_log_runtime_filters_init(void)
{
   25fbc:	b530      	push	{r4, r5, lr}
   25fbe:	1a1b      	subs	r3, r3, r0
   25fc0:	4c0b      	ldr	r4, [pc, #44]	; (25ff0 <z_log_runtime_filters_init+0x38>)
   25fc2:	08db      	lsrs	r3, r3, #3
	 *
	 * Each log source's aggregated runtime level is set to match its
	 * compile-time level. When backends are attached later on in
	 * log_init(), they'll be initialized to the same value.
	 */
	for (int i = 0; i < z_log_sources_count(); i++) {
   25fc4:	2100      	movs	r1, #0
			return __log_const_start[source_id].level;
   25fc6:	3004      	adds	r0, #4
	for (int i = 0; i < z_log_sources_count(); i++) {
   25fc8:	4299      	cmp	r1, r3
   25fca:	d100      	bne.n	25fce <z_log_runtime_filters_init+0x16>
		level = MAX(level, CONFIG_LOG_OVERRIDE_LEVEL);
		LOG_FILTER_SLOT_SET(filters,
				    LOG_FILTER_AGGR_SLOT_IDX,
				    level);
	}
}
   25fcc:	bd30      	pop	{r4, r5, pc}
		LOG_FILTER_SLOT_SET(filters,
   25fce:	f810 2031 	ldrb.w	r2, [r0, r1, lsl #3]
   25fd2:	6825      	ldr	r5, [r4, #0]
   25fd4:	f002 0207 	and.w	r2, r2, #7
   25fd8:	f025 0507 	bic.w	r5, r5, #7
   25fdc:	432a      	orrs	r2, r5
   25fde:	f844 2b04 	str.w	r2, [r4], #4
	for (int i = 0; i < z_log_sources_count(); i++) {
   25fe2:	3101      	adds	r1, #1
   25fe4:	e7f0      	b.n	25fc8 <z_log_runtime_filters_init+0x10>
   25fe6:	bf00      	nop
   25fe8:	0003c494 	.word	0x0003c494
   25fec:	0003c5fc 	.word	0x0003c5fc
   25ff0:	20000a60 	.word	0x20000a60

00025ff4 <z_impl_log_filter_set>:
}

uint32_t z_impl_log_filter_set(struct log_backend const *const backend,
			       uint32_t domain_id, int16_t source_id,
			       uint32_t level)
{
   25ff4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   25ff8:	4615      	mov	r5, r2
   25ffa:	461e      	mov	r6, r3
   25ffc:	4a2d      	ldr	r2, [pc, #180]	; (260b4 <z_impl_log_filter_set+0xc0>)
   25ffe:	4b2e      	ldr	r3, [pc, #184]	; (260b8 <z_impl_log_filter_set+0xc4>)
   26000:	1ad2      	subs	r2, r2, r3
	if (!IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING)) {
		return level;
	}

	__ASSERT_NO_MSG(source_id < log_src_cnt_get(domain_id));
   26002:	ebb5 0fd2 	cmp.w	r5, r2, lsr #3
{
   26006:	4688      	mov	r8, r1
	__ASSERT_NO_MSG(source_id < log_src_cnt_get(domain_id));
   26008:	d30a      	bcc.n	26020 <z_impl_log_filter_set+0x2c>
   2600a:	492c      	ldr	r1, [pc, #176]	; (260bc <z_impl_log_filter_set+0xc8>)
   2600c:	482c      	ldr	r0, [pc, #176]	; (260c0 <z_impl_log_filter_set+0xcc>)
   2600e:	f240 12a1 	movw	r2, #417	; 0x1a1
   26012:	f012 fd7e 	bl	38b12 <assert_print>
   26016:	f240 11a1 	movw	r1, #417	; 0x1a1


	if (backend == NULL) {
		uint32_t max = 0U;

		STRUCT_SECTION_FOREACH(log_backend, iter_backend) {
   2601a:	4828      	ldr	r0, [pc, #160]	; (260bc <z_impl_log_filter_set+0xc8>)
   2601c:	f012 fd72 	bl	38b04 <assert_post_action>
	if (backend == NULL) {
   26020:	b9e8      	cbnz	r0, 2605e <z_impl_log_filter_set+0x6a>
		STRUCT_SECTION_FOREACH(log_backend, iter_backend) {
   26022:	4f28      	ldr	r7, [pc, #160]	; (260c4 <z_impl_log_filter_set+0xd0>)
   26024:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 260c8 <z_impl_log_filter_set+0xd4>
		uint32_t max = 0U;
   26028:	4604      	mov	r4, r0
   2602a:	e009      	b.n	26040 <z_impl_log_filter_set+0x4c>
		union { uintptr_t x; uint32_t val; } parm3 = { .val = level };
		return (uint32_t) arch_syscall_invoke4(parm0.x, parm1.x, parm2.x, parm3.x, K_SYSCALL_LOG_FILTER_SET);
	}
#endif
	compiler_barrier();
	return z_impl_log_filter_set(backend, domain_id, source_id, level);
   2602c:	4638      	mov	r0, r7
   2602e:	4633      	mov	r3, r6
   26030:	462a      	mov	r2, r5
   26032:	4641      	mov	r1, r8
   26034:	f7ff ffde 	bl	25ff4 <z_impl_log_filter_set>
			uint32_t current = log_filter_set(iter_backend,
						 domain_id, source_id, level);

			max = MAX(current, max);
   26038:	4284      	cmp	r4, r0
   2603a:	bf38      	it	cc
   2603c:	4604      	movcc	r4, r0
		STRUCT_SECTION_FOREACH(log_backend, iter_backend) {
   2603e:	3710      	adds	r7, #16
   26040:	454f      	cmp	r7, r9
   26042:	d908      	bls.n	26056 <z_impl_log_filter_set+0x62>
   26044:	491d      	ldr	r1, [pc, #116]	; (260bc <z_impl_log_filter_set+0xc8>)
   26046:	481e      	ldr	r0, [pc, #120]	; (260c0 <z_impl_log_filter_set+0xcc>)
   26048:	f240 12a7 	movw	r2, #423	; 0x1a7
   2604c:	f012 fd61 	bl	38b12 <assert_print>
   26050:	f240 11a7 	movw	r1, #423	; 0x1a7
   26054:	e7e1      	b.n	2601a <z_impl_log_filter_set+0x26>
   26056:	d3e9      	bcc.n	2602c <z_impl_log_filter_set+0x38>
	level = MIN(level, MAX(log_filter_get(backend, domain_id, source_id, false),
			       CONFIG_LOG_OVERRIDE_LEVEL));
	set_runtime_filter(log_backend_id_get(backend), domain_id, source_id, level);

	return level;
}
   26058:	4620      	mov	r0, r4
   2605a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return __log_const_start[source_id].level;
   2605e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3

		return LOG_FILTER_SLOT_GET(get_dynamic_filter(domain_id, source_id),
					   log_backend_id_get(backend));
	}

	return log_compiled_level_get(domain_id, source_id);
   26062:	791c      	ldrb	r4, [r3, #4]
	level = MIN(level, MAX(log_filter_get(backend, domain_id, source_id, false),
   26064:	b114      	cbz	r4, 2606c <z_impl_log_filter_set+0x78>
   26066:	42b4      	cmp	r4, r6
   26068:	bf28      	it	cs
   2606a:	4634      	movcs	r4, r6
	return backend->cb->id;
   2606c:	6843      	ldr	r3, [r0, #4]
	prev_max = LOG_FILTER_SLOT_GET(filters, LOG_FILTER_AGGR_SLOT_IDX);
   2606e:	4e17      	ldr	r6, [pc, #92]	; (260cc <z_impl_log_filter_set+0xd8>)
	LOG_FILTER_SLOT_SET(filters, backend_id, level);
   26070:	791a      	ldrb	r2, [r3, #4]
   26072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   26076:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   2607a:	2107      	movs	r1, #7
   2607c:	4091      	lsls	r1, r2
   2607e:	ea23 0301 	bic.w	r3, r3, r1
   26082:	f004 0107 	and.w	r1, r4, #7
   26086:	fa01 f202 	lsl.w	r2, r1, r2
   2608a:	4313      	orrs	r3, r2
	uint32_t max_filter = LOG_LEVEL_NONE;
   2608c:	2100      	movs	r1, #0
	LOG_FILTER_SLOT_SET(filters, backend_id, level);
   2608e:	2203      	movs	r2, #3
		uint32_t tmp_filter = LOG_FILTER_SLOT_GET(&filters, i);
   26090:	fa23 f002 	lsr.w	r0, r3, r2
   26094:	f000 0007 	and.w	r0, r0, #7
   26098:	4281      	cmp	r1, r0
	for (i = first_slot; i < LOG_FILTERS_NUM_OF_SLOTS; i++) {
   2609a:	f102 0203 	add.w	r2, r2, #3
   2609e:	bf38      	it	cc
   260a0:	4601      	movcc	r1, r0
   260a2:	2a1e      	cmp	r2, #30
   260a4:	d1f4      	bne.n	26090 <z_impl_log_filter_set+0x9c>
	LOG_FILTER_SLOT_SET(filters, LOG_FILTER_AGGR_SLOT_IDX, new_max);
   260a6:	f023 0307 	bic.w	r3, r3, #7
   260aa:	430b      	orrs	r3, r1
   260ac:	f846 3025 	str.w	r3, [r6, r5, lsl #2]
}
   260b0:	e7d2      	b.n	26058 <z_impl_log_filter_set+0x64>
   260b2:	bf00      	nop
   260b4:	0003c5fc 	.word	0x0003c5fc
   260b8:	0003c494 	.word	0x0003c494
   260bc:	0003d452 	.word	0x0003d452
   260c0:	0003d1d7 	.word	0x0003d1d7
   260c4:	0003c5fc 	.word	0x0003c5fc
   260c8:	0003c61c 	.word	0x0003c61c
   260cc:	20000a60 	.word	0x20000a60

000260d0 <log_backend_enable>:
{
   260d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   260d4:	4604      	mov	r4, r0
	id += backend - log_backend_get(0);
   260d6:	4818      	ldr	r0, [pc, #96]	; (26138 <log_backend_enable+0x68>)
   260d8:	1a20      	subs	r0, r4, r0
   260da:	1100      	asrs	r0, r0, #4
   260dc:	3001      	adds	r0, #1
{
   260de:	460e      	mov	r6, r1
   260e0:	4617      	mov	r7, r2
	log_backend_id_set(backend, id);
   260e2:	b2c0      	uxtb	r0, r0
	__ASSERT_NO_MSG(backend != NULL);
   260e4:	b944      	cbnz	r4, 260f8 <log_backend_enable+0x28>
   260e6:	4915      	ldr	r1, [pc, #84]	; (2613c <log_backend_enable+0x6c>)
   260e8:	4815      	ldr	r0, [pc, #84]	; (26140 <log_backend_enable+0x70>)
   260ea:	22de      	movs	r2, #222	; 0xde
   260ec:	f012 fd11 	bl	38b12 <assert_print>
   260f0:	4812      	ldr	r0, [pc, #72]	; (2613c <log_backend_enable+0x6c>)
   260f2:	21de      	movs	r1, #222	; 0xde
   260f4:	f012 fd06 	bl	38b04 <assert_post_action>
	backend->cb->id = id;
   260f8:	6863      	ldr	r3, [r4, #4]
   260fa:	7118      	strb	r0, [r3, #4]
	backend->cb->level = level;
   260fc:	6863      	ldr	r3, [r4, #4]
   260fe:	719a      	strb	r2, [r3, #6]
   26100:	4b10      	ldr	r3, [pc, #64]	; (26144 <log_backend_enable+0x74>)
   26102:	4a11      	ldr	r2, [pc, #68]	; (26148 <log_backend_enable+0x78>)
   26104:	eba3 0802 	sub.w	r8, r3, r2
   26108:	ea4f 08d8 	mov.w	r8, r8, lsr #3
	for (uint16_t s = 0; s < log_src_cnt_get(0); s++) {
   2610c:	2500      	movs	r5, #0
   2610e:	4545      	cmp	r5, r8
   26110:	d308      	bcc.n	26124 <log_backend_enable+0x54>
	backend->cb->ctx = ctx;
   26112:	6863      	ldr	r3, [r4, #4]
   26114:	601e      	str	r6, [r3, #0]
	backend->cb->active = true;
   26116:	6863      	ldr	r3, [r4, #4]
   26118:	2201      	movs	r2, #1
   2611a:	715a      	strb	r2, [r3, #5]
}
   2611c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	z_log_notify_backend_enabled();
   26120:	f7ff bcf2 	b.w	25b08 <z_log_notify_backend_enabled>
   26124:	2100      	movs	r1, #0
   26126:	b22a      	sxth	r2, r5
   26128:	463b      	mov	r3, r7
   2612a:	4620      	mov	r0, r4
	for (uint16_t s = 0; s < log_src_cnt_get(0); s++) {
   2612c:	3501      	adds	r5, #1
   2612e:	f7ff ff61 	bl	25ff4 <z_impl_log_filter_set>
   26132:	b2ad      	uxth	r5, r5
   26134:	e7eb      	b.n	2610e <log_backend_enable+0x3e>
   26136:	bf00      	nop
   26138:	0003c5fc 	.word	0x0003c5fc
   2613c:	0003d47f 	.word	0x0003d47f
   26140:	0003d1d7 	.word	0x0003d1d7
   26144:	0003c5fc 	.word	0x0003c5fc
   26148:	0003c494 	.word	0x0003c494

0002614c <log_filter_get>:
{
   2614c:	b510      	push	{r4, lr}
   2614e:	4912      	ldr	r1, [pc, #72]	; (26198 <log_filter_get+0x4c>)
   26150:	4c12      	ldr	r4, [pc, #72]	; (2619c <log_filter_get+0x50>)
   26152:	1a64      	subs	r4, r4, r1
	__ASSERT_NO_MSG(source_id < log_src_cnt_get(domain_id));
   26154:	ebb2 0fd4 	cmp.w	r2, r4, lsr #3
   26158:	d30a      	bcc.n	26170 <log_filter_get+0x24>
   2615a:	4911      	ldr	r1, [pc, #68]	; (261a0 <log_filter_get+0x54>)
   2615c:	4811      	ldr	r0, [pc, #68]	; (261a4 <log_filter_get+0x58>)
   2615e:	f240 221a 	movw	r2, #538	; 0x21a
   26162:	f012 fcd6 	bl	38b12 <assert_print>
   26166:	480e      	ldr	r0, [pc, #56]	; (261a0 <log_filter_get+0x54>)
   26168:	f240 211a 	movw	r1, #538	; 0x21a
   2616c:	f012 fcca 	bl	38b04 <assert_post_action>
	if (IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) && runtime) {
   26170:	b173      	cbz	r3, 26190 <log_filter_get+0x44>
		return LOG_FILTER_SLOT_GET(get_dynamic_filter(domain_id, source_id),
   26172:	4b0d      	ldr	r3, [pc, #52]	; (261a8 <log_filter_get+0x5c>)
   26174:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
	__ASSERT_NO_MSG(backend != NULL);
   26178:	b908      	cbnz	r0, 2617e <log_filter_get+0x32>
   2617a:	f7ff feff 	bl	25f7c <log_backend_id_get.part.0>
	return backend->cb->id;
   2617e:	6842      	ldr	r2, [r0, #4]
   26180:	7912      	ldrb	r2, [r2, #4]
   26182:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   26186:	fa23 f002 	lsr.w	r0, r3, r2
   2618a:	f000 0007 	and.w	r0, r0, #7
}
   2618e:	bd10      	pop	{r4, pc}
			return __log_const_start[source_id].level;
   26190:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
	return log_compiled_level_get(domain_id, source_id);
   26194:	7908      	ldrb	r0, [r1, #4]
   26196:	e7fa      	b.n	2618e <log_filter_get+0x42>
   26198:	0003c494 	.word	0x0003c494
   2619c:	0003c5fc 	.word	0x0003c5fc
   261a0:	0003d452 	.word	0x0003d452
   261a4:	0003d1d7 	.word	0x0003d1d7
   261a8:	20000a60 	.word	0x20000a60

000261ac <z_impl_z_log_msg_static_create>:
}

void z_impl_z_log_msg_static_create(const void *source,
			      const struct log_msg_desc desc,
			      uint8_t *package, const void *data)
{
   261ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   261b0:	b08f      	sub	sp, #60	; 0x3c
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
   261b2:	f3c1 44cb 	ubfx	r4, r1, #19, #12
   261b6:	f3c1 2649 	ubfx	r6, r1, #9, #10
   261ba:	9005      	str	r0, [sp, #20]
   261bc:	460d      	mov	r5, r1
   261be:	4690      	mov	r8, r2
   261c0:	4699      	mov	r9, r3
   261c2:	3417      	adds	r4, #23

	struct log_msg_desc out_desc = desc;
	int inlen = desc.package_len;
	struct log_msg *msg;

	if (inlen > 0) {
   261c4:	2e00      	cmp	r6, #0
   261c6:	d03c      	beq.n	26242 <z_impl_z_log_msg_static_create+0x96>
	return cbprintf_package_convert(in_packaged, in_len,
   261c8:	f04f 0b04 	mov.w	fp, #4
   261cc:	af09      	add	r7, sp, #36	; 0x24
   261ce:	f04f 0a0a 	mov.w	sl, #10
	struct z_cbprintf_buf_desc buf_desc = {
   261d2:	2200      	movs	r2, #0
		uint32_t flags = CBPRINTF_PACKAGE_CONVERT_RW_STR |
				 CBPRINTF_PACKAGE_CONVERT_PTR_CHECK;
		uint16_t strl[4];
		int len;

		len = cbprintf_package_copy(package, inlen,
   261d4:	4631      	mov	r1, r6
	return cbprintf_package_convert(in_packaged, in_len,
   261d6:	ab0b      	add	r3, sp, #44	; 0x2c
   261d8:	f8cd b008 	str.w	fp, [sp, #8]
   261dc:	9701      	str	r7, [sp, #4]
   261de:	f8cd a000 	str.w	sl, [sp]
   261e2:	4640      	mov	r0, r8
	struct z_cbprintf_buf_desc buf_desc = {
   261e4:	e9cd 220b 	strd	r2, r2, [sp, #44]	; 0x2c
   261e8:	920d      	str	r2, [sp, #52]	; 0x34
	return cbprintf_package_convert(in_packaged, in_len,
   261ea:	9607      	str	r6, [sp, #28]
   261ec:	f7fd ff78 	bl	240e0 <cbprintf_package_convert>
					    strl, ARRAY_SIZE(strl));

		/* Update package length with calculated value (which may be extended
		 * when strings are copied into the package.
		 */
		out_desc.package_len = len;
   261f0:	f3c0 0309 	ubfx	r3, r0, #0, #10
   261f4:	1918      	adds	r0, r3, r4
   261f6:	f020 0007 	bic.w	r0, r0, #7
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
   261fa:	0880      	lsrs	r0, r0, #2
		out_desc.package_len = len;
   261fc:	461e      	mov	r6, r3
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
   261fe:	f363 2552 	bfi	r5, r3, #9, #10
   26202:	9306      	str	r3, [sp, #24]
   26204:	f7ff fd06 	bl	25c14 <z_log_msg_alloc>
		if (msg) {
   26208:	4604      	mov	r4, r0
   2620a:	b300      	cbz	r0, 2624e <z_impl_z_log_msg_static_create+0xa2>
	struct z_cbprintf_buf_desc buf_desc = {
   2620c:	9b06      	ldr	r3, [sp, #24]
   2620e:	930c      	str	r3, [sp, #48]	; 0x30
			len = cbprintf_package_copy(package, inlen,
						    msg->data, out_desc.package_len,
   26210:	3010      	adds	r0, #16
   26212:	2200      	movs	r2, #0
   26214:	900b      	str	r0, [sp, #44]	; 0x2c
   26216:	920d      	str	r2, [sp, #52]	; 0x34
	return cbprintf_package_convert(in_packaged, in_len,
   26218:	e9cd 7b01 	strd	r7, fp, [sp, #4]
   2621c:	4a11      	ldr	r2, [pc, #68]	; (26264 <z_impl_z_log_msg_static_create+0xb8>)
   2621e:	9907      	ldr	r1, [sp, #28]
   26220:	f8cd a000 	str.w	sl, [sp]
   26224:	ab0b      	add	r3, sp, #44	; 0x2c
   26226:	4640      	mov	r0, r8
   26228:	f7fd ff5a 	bl	240e0 <cbprintf_package_convert>
						    flags, strl, ARRAY_SIZE(strl));
			__ASSERT_NO_MSG(len >= 0);
   2622c:	2800      	cmp	r0, #0
   2622e:	da0e      	bge.n	2624e <z_impl_z_log_msg_static_create+0xa2>
   26230:	490d      	ldr	r1, [pc, #52]	; (26268 <z_impl_z_log_msg_static_create+0xbc>)
   26232:	480e      	ldr	r0, [pc, #56]	; (2626c <z_impl_z_log_msg_static_create+0xc0>)
   26234:	2249      	movs	r2, #73	; 0x49
   26236:	f012 fc6c 	bl	38b12 <assert_print>
   2623a:	480b      	ldr	r0, [pc, #44]	; (26268 <z_impl_z_log_msg_static_create+0xbc>)
   2623c:	2149      	movs	r1, #73	; 0x49
   2623e:	f012 fc61 	bl	38b04 <assert_post_action>
   26242:	f024 0007 	bic.w	r0, r4, #7
		}
	} else {
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
   26246:	0880      	lsrs	r0, r0, #2
   26248:	f7ff fce4 	bl	25c14 <z_log_msg_alloc>
   2624c:	4604      	mov	r4, r0
	}

	z_log_msg_finalize(msg, source, out_desc, data);
   2624e:	f366 2552 	bfi	r5, r6, #9, #10
   26252:	9905      	ldr	r1, [sp, #20]
   26254:	464b      	mov	r3, r9
   26256:	462a      	mov	r2, r5
   26258:	4620      	mov	r0, r4
}
   2625a:	b00f      	add	sp, #60	; 0x3c
   2625c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	z_log_msg_finalize(msg, source, out_desc, data);
   26260:	f012 bd67 	b.w	38d32 <z_log_msg_finalize>
   26264:	00038d07 	.word	0x00038d07
   26268:	0003d4c0 	.word	0x0003d4c0
   2626c:	0003d1d7 	.word	0x0003d1d7

00026270 <z_impl_z_log_msg_runtime_vcreate>:
#endif

void z_impl_z_log_msg_runtime_vcreate(uint8_t domain_id, const void *source,
				uint8_t level, const void *data, size_t dlen,
				uint32_t package_flags, const char *fmt, va_list ap)
{
   26270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26274:	b087      	sub	sp, #28
   26276:	e9dd 6912 	ldrd	r6, r9, [sp, #72]	; 0x48
   2627a:	e9dd 5a10 	ldrd	r5, sl, [sp, #64]	; 0x40
   2627e:	4604      	mov	r4, r0
   26280:	460f      	mov	r7, r1
   26282:	4693      	mov	fp, r2
   26284:	4698      	mov	r8, r3
	int plen;

	if (fmt) {
   26286:	b1a6      	cbz	r6, 262b2 <z_impl_z_log_msg_runtime_vcreate+0x42>
		va_list ap2;

		va_copy(ap2, ap);
		plen = cbvprintf_package(NULL, Z_LOG_MSG2_ALIGN_OFFSET,
   26288:	2110      	movs	r1, #16
   2628a:	f8cd 9000 	str.w	r9, [sp]
   2628e:	4633      	mov	r3, r6
   26290:	4652      	mov	r2, sl
   26292:	2000      	movs	r0, #0
		va_copy(ap2, ap);
   26294:	f8cd 9014 	str.w	r9, [sp, #20]
		plen = cbvprintf_package(NULL, Z_LOG_MSG2_ALIGN_OFFSET,
   26298:	f7fd fd22 	bl	23ce0 <cbvprintf_package>
					 package_flags, fmt, ap2);
		__ASSERT_NO_MSG(plen >= 0);
   2629c:	1e01      	subs	r1, r0, #0
   2629e:	da09      	bge.n	262b4 <z_impl_z_log_msg_runtime_vcreate+0x44>
   262a0:	491f      	ldr	r1, [pc, #124]	; (26320 <z_impl_z_log_msg_runtime_vcreate+0xb0>)
   262a2:	4820      	ldr	r0, [pc, #128]	; (26324 <z_impl_z_log_msg_runtime_vcreate+0xb4>)
   262a4:	2268      	movs	r2, #104	; 0x68
   262a6:	f012 fc34 	bl	38b12 <assert_print>
   262aa:	2168      	movs	r1, #104	; 0x68
		pkg = msg->data;
	}

	if (pkg && fmt) {
		plen = cbvprintf_package(pkg, (size_t)plen, package_flags, fmt, ap);
		__ASSERT_NO_MSG(plen >= 0);
   262ac:	481c      	ldr	r0, [pc, #112]	; (26320 <z_impl_z_log_msg_runtime_vcreate+0xb0>)
   262ae:	f012 fc29 	bl	38b04 <assert_post_action>
		plen = 0;
   262b2:	4631      	mov	r1, r6
	struct log_msg_desc desc =
   262b4:	4b1c      	ldr	r3, [pc, #112]	; (26328 <z_impl_z_log_msg_runtime_vcreate+0xb8>)
	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
   262b6:	9103      	str	r1, [sp, #12]
	struct log_msg_desc desc =
   262b8:	f004 0407 	and.w	r4, r4, #7
   262bc:	f00b 0b07 	and.w	fp, fp, #7
   262c0:	00e4      	lsls	r4, r4, #3
   262c2:	ea03 2341 	and.w	r3, r3, r1, lsl #9
	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
   262c6:	f105 0017 	add.w	r0, r5, #23
	struct log_msg_desc desc =
   262ca:	ea44 148b 	orr.w	r4, r4, fp, lsl #6
   262ce:	431c      	orrs	r4, r3
	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
   262d0:	4408      	add	r0, r1
	struct log_msg_desc desc =
   262d2:	4b16      	ldr	r3, [pc, #88]	; (2632c <z_impl_z_log_msg_runtime_vcreate+0xbc>)
	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
   262d4:	f020 0007 	bic.w	r0, r0, #7
	struct log_msg_desc desc =
   262d8:	ea03 43c5 	and.w	r3, r3, r5, lsl #19
		msg = z_log_msg_alloc(msg_wlen);
   262dc:	0880      	lsrs	r0, r0, #2
	struct log_msg_desc desc =
   262de:	431c      	orrs	r4, r3
		msg = z_log_msg_alloc(msg_wlen);
   262e0:	f7ff fc98 	bl	25c14 <z_log_msg_alloc>
			pkg = msg ? msg->data : NULL;
   262e4:	4605      	mov	r5, r0
   262e6:	b188      	cbz	r0, 2630c <z_impl_z_log_msg_runtime_vcreate+0x9c>
	if (pkg && fmt) {
   262e8:	b186      	cbz	r6, 2630c <z_impl_z_log_msg_runtime_vcreate+0x9c>
		plen = cbvprintf_package(pkg, (size_t)plen, package_flags, fmt, ap);
   262ea:	9903      	ldr	r1, [sp, #12]
   262ec:	f8cd 9000 	str.w	r9, [sp]
   262f0:	4633      	mov	r3, r6
   262f2:	4652      	mov	r2, sl
   262f4:	3010      	adds	r0, #16
   262f6:	f7fd fcf3 	bl	23ce0 <cbvprintf_package>
		__ASSERT_NO_MSG(plen >= 0);
   262fa:	2800      	cmp	r0, #0
   262fc:	da06      	bge.n	2630c <z_impl_z_log_msg_runtime_vcreate+0x9c>
   262fe:	4908      	ldr	r1, [pc, #32]	; (26320 <z_impl_z_log_msg_runtime_vcreate+0xb0>)
   26300:	4808      	ldr	r0, [pc, #32]	; (26324 <z_impl_z_log_msg_runtime_vcreate+0xb4>)
   26302:	2282      	movs	r2, #130	; 0x82
   26304:	f012 fc05 	bl	38b12 <assert_print>
   26308:	2182      	movs	r1, #130	; 0x82
   2630a:	e7cf      	b.n	262ac <z_impl_z_log_msg_runtime_vcreate+0x3c>
	if (IS_ENABLED(CONFIG_LOG_FRONTEND)) {
		log_frontend_msg(source, desc, pkg, data);
	}

	if (BACKENDS_IN_USE()) {
		z_log_msg_finalize(msg, source, desc, data);
   2630c:	4643      	mov	r3, r8
   2630e:	4622      	mov	r2, r4
   26310:	4639      	mov	r1, r7
   26312:	4628      	mov	r0, r5
	}
}
   26314:	b007      	add	sp, #28
   26316:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		z_log_msg_finalize(msg, source, desc, data);
   2631a:	f012 bd0a 	b.w	38d32 <z_log_msg_finalize>
   2631e:	bf00      	nop
   26320:	0003d4c0 	.word	0x0003d4c0
   26324:	0003d1d7 	.word	0x0003d1d7
   26328:	0007fe00 	.word	0x0007fe00
   2632c:	7ff80000 	.word	0x7ff80000

00026330 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
   26330:	b40e      	push	{r1, r2, r3}
   26332:	b503      	push	{r0, r1, lr}
   26334:	ab03      	add	r3, sp, #12
   26336:	4601      	mov	r1, r0
   26338:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
   2633c:	4804      	ldr	r0, [pc, #16]	; (26350 <print_formatted+0x20>)
	va_start(args, fmt);
   2633e:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
   26340:	f012 fd1e 	bl	38d80 <cbvprintf>
	va_end(args);

	return length;
}
   26344:	b002      	add	sp, #8
   26346:	f85d eb04 	ldr.w	lr, [sp], #4
   2634a:	b003      	add	sp, #12
   2634c:	4770      	bx	lr
   2634e:	bf00      	nop
   26350:	00026371 	.word	0x00026371

00026354 <newline_print>:
	if (IS_ENABLED(CONFIG_LOG_BACKEND_NET) &&
	    flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) {
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   26354:	06ca      	lsls	r2, r1, #27
   26356:	d405      	bmi.n	26364 <newline_print+0x10>
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
   26358:	068b      	lsls	r3, r1, #26
		print_formatted(ctx, "\n");
   2635a:	bf4c      	ite	mi
   2635c:	4902      	ldrmi	r1, [pc, #8]	; (26368 <newline_print+0x14>)
	} else {
		print_formatted(ctx, "\r\n");
   2635e:	4903      	ldrpl	r1, [pc, #12]	; (2636c <newline_print+0x18>)
   26360:	f7ff bfe6 	b.w	26330 <print_formatted>
	}
}
   26364:	4770      	bx	lr
   26366:	bf00      	nop
   26368:	0003d4ed 	.word	0x0003d4ed
   2636c:	0003d4ec 	.word	0x0003d4ec

00026370 <out_func>:
{
   26370:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
   26372:	684b      	ldr	r3, [r1, #4]
   26374:	681a      	ldr	r2, [r3, #0]
   26376:	68cb      	ldr	r3, [r1, #12]
   26378:	429a      	cmp	r2, r3
{
   2637a:	4605      	mov	r5, r0
   2637c:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
   2637e:	d102      	bne.n	26386 <out_func+0x16>
		log_output_flush(out_ctx);
   26380:	4608      	mov	r0, r1
   26382:	f012 fd04 	bl	38d8e <log_output_flush>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   26386:	6863      	ldr	r3, [r4, #4]
   26388:	f3bf 8f5b 	dmb	ish
   2638c:	e853 2f00 	ldrex	r2, [r3]
   26390:	1c51      	adds	r1, r2, #1
   26392:	e843 1000 	strex	r0, r1, [r3]
   26396:	2800      	cmp	r0, #0
   26398:	d1f8      	bne.n	2638c <out_func+0x1c>
   2639a:	f3bf 8f5b 	dmb	ish
	out_ctx->buf[idx] = (uint8_t)c;
   2639e:	68a3      	ldr	r3, [r4, #8]
   263a0:	549d      	strb	r5, [r3, r2]
	__ASSERT_NO_MSG(out_ctx->control_block->offset <= out_ctx->size);
   263a2:	6863      	ldr	r3, [r4, #4]
   263a4:	681a      	ldr	r2, [r3, #0]
   263a6:	68e3      	ldr	r3, [r4, #12]
   263a8:	429a      	cmp	r2, r3
   263aa:	d908      	bls.n	263be <out_func+0x4e>
   263ac:	4905      	ldr	r1, [pc, #20]	; (263c4 <out_func+0x54>)
   263ae:	4806      	ldr	r0, [pc, #24]	; (263c8 <out_func+0x58>)
   263b0:	2279      	movs	r2, #121	; 0x79
   263b2:	f012 fbae 	bl	38b12 <assert_print>
   263b6:	4803      	ldr	r0, [pc, #12]	; (263c4 <out_func+0x54>)
   263b8:	2179      	movs	r1, #121	; 0x79
   263ba:	f012 fba3 	bl	38b04 <assert_post_action>
}
   263be:	2000      	movs	r0, #0
   263c0:	bd38      	pop	{r3, r4, r5, pc}
   263c2:	bf00      	nop
   263c4:	0003d4ef 	.word	0x0003d4ef
   263c8:	0003d1d7 	.word	0x0003d1d7

000263cc <log_output_process>:
			uint8_t level,
			const uint8_t *package,
			const uint8_t *data,
			size_t data_len,
			uint32_t flags)
{
   263cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   263d0:	b089      	sub	sp, #36	; 0x24
   263d2:	469b      	mov	fp, r3
   263d4:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
   263d8:	9304      	str	r3, [sp, #16]
   263da:	e9dd 9313 	ldrd	r9, r3, [sp, #76]	; 0x4c
   263de:	9305      	str	r3, [sp, #20]
	bool raw_string = (level == LOG_LEVEL_INTERNAL_RAW_STRING);
	uint32_t prefix_offset;
	cbprintf_cb cb;

	if (!raw_string) {
   263e0:	9b04      	ldr	r3, [sp, #16]
{
   263e2:	9206      	str	r2, [sp, #24]
   263e4:	e9dd 7615 	ldrd	r7, r6, [sp, #84]	; 0x54
   263e8:	4604      	mov	r4, r0
   263ea:	460d      	mov	r5, r1
	if (!raw_string) {
   263ec:	2b00      	cmp	r3, #0
   263ee:	f000 8087 	beq.w	26500 <log_output_process+0x134>
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
   263f2:	f006 0308 	and.w	r3, r6, #8
   263f6:	9307      	str	r3, [sp, #28]
	const char *tag = IS_ENABLED(CONFIG_LOG) ? z_log_get_tag() : NULL;
   263f8:	f012 fc83 	bl	38d02 <z_log_get_tag>
	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
   263fc:	f006 0a02 	and.w	sl, r6, #2
	if (tag) {
   26400:	4602      	mov	r2, r0
   26402:	2800      	cmp	r0, #0
   26404:	d04b      	beq.n	2649e <log_output_process+0xd2>
		length += print_formatted(output, "%s ", tag);
   26406:	498d      	ldr	r1, [pc, #564]	; (2663c <log_output_process+0x270>)
   26408:	4620      	mov	r0, r4
   2640a:	f7ff ff91 	bl	26330 <print_formatted>
   2640e:	4680      	mov	r8, r0
	if (stamp) {
   26410:	f1ba 0f00 	cmp.w	sl, #0
   26414:	d008      	beq.n	26428 <log_output_process+0x5c>
	if (!format) {
   26416:	f016 0f44 	tst.w	r6, #68	; 0x44
   2641a:	d142      	bne.n	264a2 <log_output_process+0xd6>
		length = print_formatted(output, "[%08lu] ", timestamp);
   2641c:	4988      	ldr	r1, [pc, #544]	; (26640 <log_output_process+0x274>)
   2641e:	462a      	mov	r2, r5
   26420:	4620      	mov	r0, r4
   26422:	f7ff ff85 	bl	26330 <print_formatted>
		length += timestamp_print(output, flags, timestamp);
   26426:	4480      	add	r8, r0
	if (color) {
   26428:	f006 0301 	and.w	r3, r6, #1
   2642c:	b15b      	cbz	r3, 26446 <log_output_process+0x7a>
		const char *log_color = start && (colors[level] != NULL) ?
   2642e:	4b85      	ldr	r3, [pc, #532]	; (26644 <log_output_process+0x278>)
   26430:	9a04      	ldr	r2, [sp, #16]
		print_formatted(output, "%s", log_color);
   26432:	4985      	ldr	r1, [pc, #532]	; (26648 <log_output_process+0x27c>)
		const char *log_color = start && (colors[level] != NULL) ?
   26434:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
		print_formatted(output, "%s", log_color);
   26438:	4b84      	ldr	r3, [pc, #528]	; (2664c <log_output_process+0x280>)
   2643a:	4620      	mov	r0, r4
   2643c:	2a00      	cmp	r2, #0
   2643e:	bf08      	it	eq
   26440:	461a      	moveq	r2, r3
   26442:	f7ff ff75 	bl	26330 <print_formatted>
	if (level_on) {
   26446:	f006 0308 	and.w	r3, r6, #8
   2644a:	2b00      	cmp	r3, #0
   2644c:	d055      	beq.n	264fa <log_output_process+0x12e>
		total += print_formatted(output, "<%s> ", severity[level]);
   2644e:	4b80      	ldr	r3, [pc, #512]	; (26650 <log_output_process+0x284>)
   26450:	9a04      	ldr	r2, [sp, #16]
   26452:	4980      	ldr	r1, [pc, #512]	; (26654 <log_output_process+0x288>)
   26454:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   26458:	4620      	mov	r0, r4
   2645a:	f7ff ff69 	bl	26330 <print_formatted>
   2645e:	4605      	mov	r5, r0
	if (domain) {
   26460:	9b06      	ldr	r3, [sp, #24]
   26462:	b12b      	cbz	r3, 26470 <log_output_process+0xa4>
		total += print_formatted(output, "%s/", domain);
   26464:	497c      	ldr	r1, [pc, #496]	; (26658 <log_output_process+0x28c>)
   26466:	461a      	mov	r2, r3
   26468:	4620      	mov	r0, r4
   2646a:	f7ff ff61 	bl	26330 <print_formatted>
   2646e:	4405      	add	r5, r0
	if (source) {
   26470:	f1bb 0f00 	cmp.w	fp, #0
   26474:	d005      	beq.n	26482 <log_output_process+0xb6>
		total += print_formatted(output,
   26476:	4979      	ldr	r1, [pc, #484]	; (2665c <log_output_process+0x290>)
   26478:	465a      	mov	r2, fp
   2647a:	4620      	mov	r0, r4
   2647c:	f7ff ff58 	bl	26330 <print_formatted>
   26480:	4405      	add	r5, r0
	length += ids_print(output, level_on, func_on, domain, source, level);
   26482:	4445      	add	r5, r8
		 * appending <CR> to the new line character).
		 */
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
	}

	if (package) {
   26484:	f1b9 0f00 	cmp.w	r9, #0
   26488:	d14a      	bne.n	26520 <log_output_process+0x154>

		(void)err;
		__ASSERT_NO_MSG(err >= 0);
	}

	if (data_len) {
   2648a:	2f00      	cmp	r7, #0
   2648c:	d160      	bne.n	26550 <log_output_process+0x184>
	if (color) {
   2648e:	07f3      	lsls	r3, r6, #31
   26490:	f100 80ce 	bmi.w	26630 <log_output_process+0x264>
	newline_print(output, flags);
   26494:	4631      	mov	r1, r6
   26496:	4620      	mov	r0, r4
   26498:	f7ff ff5c 	bl	26354 <newline_print>
}
   2649c:	e0c2      	b.n	26624 <log_output_process+0x258>
	uint32_t length = 0U;
   2649e:	4680      	mov	r8, r0
   264a0:	e7b6      	b.n	26410 <log_output_process+0x44>
	} else if (freq != 0U) {
   264a2:	4b6f      	ldr	r3, [pc, #444]	; (26660 <log_output_process+0x294>)
   264a4:	6818      	ldr	r0, [r3, #0]
   264a6:	2800      	cmp	r0, #0
   264a8:	d0bd      	beq.n	26426 <log_output_process+0x5a>
		timestamp /= timestamp_div;
   264aa:	4b6e      	ldr	r3, [pc, #440]	; (26664 <log_output_process+0x298>)
		ms = (remainder * 1000U) / freq;
   264ac:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
		timestamp /= timestamp_div;
   264b0:	681b      	ldr	r3, [r3, #0]
   264b2:	fbb5 f5f3 	udiv	r5, r5, r3
		total_seconds = timestamp / freq;
   264b6:	f44f 6261 	mov.w	r2, #3600	; 0xe10
   264ba:	fbb5 f3f0 	udiv	r3, r5, r0
		remainder = timestamp % freq;
   264be:	fb00 5513 	mls	r5, r0, r3, r5
   264c2:	fbb3 faf2 	udiv	sl, r3, r2
		ms = (remainder * 1000U) / freq;
   264c6:	fb0e f505 	mul.w	r5, lr, r5
   264ca:	fb02 321a 	mls	r2, r2, sl, r3
		mins = seconds / 60U;
   264ce:	213c      	movs	r1, #60	; 0x3c
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   264d0:	fbb5 fcf0 	udiv	ip, r5, r0
		mins = seconds / 60U;
   264d4:	fbb2 f3f1 	udiv	r3, r2, r1
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   264d8:	fb00 551c 	mls	r5, r0, ip, r5
				length = print_formatted(output,
   264dc:	fb01 2213 	mls	r2, r1, r3, r2
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   264e0:	fb0e f505 	mul.w	r5, lr, r5
				length = print_formatted(output,
   264e4:	9200      	str	r2, [sp, #0]
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   264e6:	fbb5 f5f0 	udiv	r5, r5, r0
				length = print_formatted(output,
   264ea:	495f      	ldr	r1, [pc, #380]	; (26668 <log_output_process+0x29c>)
   264ec:	e9cd c501 	strd	ip, r5, [sp, #4]
   264f0:	4652      	mov	r2, sl
   264f2:	4620      	mov	r0, r4
   264f4:	f7ff ff1c 	bl	26330 <print_formatted>
   264f8:	e795      	b.n	26426 <log_output_process+0x5a>
	int total = 0;
   264fa:	f006 0508 	and.w	r5, r6, #8
   264fe:	e7af      	b.n	26460 <log_output_process+0x94>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
   26500:	f1bb 0f01 	cmp.w	fp, #1
   26504:	d107      	bne.n	26516 <log_output_process+0x14a>
	if (package) {
   26506:	f1b9 0f00 	cmp.w	r9, #0
   2650a:	d11c      	bne.n	26546 <log_output_process+0x17a>
	if (data_len) {
   2650c:	2f00      	cmp	r7, #0
   2650e:	f000 8089 	beq.w	26624 <log_output_process+0x258>
		prefix_offset = 0;
   26512:	2500      	movs	r5, #0
   26514:	e01c      	b.n	26550 <log_output_process+0x184>
	if (package) {
   26516:	f1b9 0f00 	cmp.w	r9, #0
   2651a:	d0f7      	beq.n	2650c <log_output_process+0x140>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
   2651c:	4853      	ldr	r0, [pc, #332]	; (2666c <log_output_process+0x2a0>)
   2651e:	e013      	b.n	26548 <log_output_process+0x17c>
		cb = out_func;
   26520:	4853      	ldr	r0, [pc, #332]	; (26670 <log_output_process+0x2a4>)
		return cbpprintf_external(out, cbvprintf_tagged_args,
					  ctx, packaged);
	}
#endif

	return cbpprintf_external(out, cbvprintf, ctx, packaged);
   26522:	4954      	ldr	r1, [pc, #336]	; (26674 <log_output_process+0x2a8>)
   26524:	464b      	mov	r3, r9
   26526:	4622      	mov	r2, r4
   26528:	f012 f87e 	bl	38628 <cbpprintf_external>
		__ASSERT_NO_MSG(err >= 0);
   2652c:	2800      	cmp	r0, #0
   2652e:	da0d      	bge.n	2654c <log_output_process+0x180>
   26530:	4951      	ldr	r1, [pc, #324]	; (26678 <log_output_process+0x2ac>)
   26532:	4852      	ldr	r0, [pc, #328]	; (2667c <log_output_process+0x2b0>)
   26534:	f44f 7200 	mov.w	r2, #512	; 0x200
   26538:	f012 faeb 	bl	38b12 <assert_print>
   2653c:	484e      	ldr	r0, [pc, #312]	; (26678 <log_output_process+0x2ac>)
   2653e:	f44f 7100 	mov.w	r1, #512	; 0x200
   26542:	f012 fadf 	bl	38b04 <assert_post_action>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
   26546:	484a      	ldr	r0, [pc, #296]	; (26670 <log_output_process+0x2a4>)
		prefix_offset = 0;
   26548:	9d04      	ldr	r5, [sp, #16]
   2654a:	e7ea      	b.n	26522 <log_output_process+0x156>
	if (data_len) {
   2654c:	2f00      	cmp	r7, #0
   2654e:	d065      	beq.n	2661c <log_output_process+0x250>
		print_formatted(output, " ");
   26550:	f8df 912c 	ldr.w	r9, [pc, #300]	; 26680 <log_output_process+0x2b4>
			print_formatted(output, "%02x ", data[i]);
   26554:	f8df a12c 	ldr.w	sl, [pc, #300]	; 26684 <log_output_process+0x2b8>
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
   26558:	2f10      	cmp	r7, #16
	newline_print(output, flags);
   2655a:	4631      	mov	r1, r6
   2655c:	4620      	mov	r0, r4
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
   2655e:	46b8      	mov	r8, r7
   26560:	bf28      	it	cs
   26562:	f04f 0810 	movcs.w	r8, #16
	newline_print(output, flags);
   26566:	f7ff fef5 	bl	26354 <newline_print>
	for (int i = 0; i < prefix_offset; i++) {
   2656a:	f04f 0b00 	mov.w	fp, #0
   2656e:	455d      	cmp	r5, fp
   26570:	dc42      	bgt.n	265f8 <log_output_process+0x22c>
			print_formatted(output, "%02x ", data[i]);
   26572:	9b05      	ldr	r3, [sp, #20]
   26574:	4651      	mov	r1, sl
   26576:	781a      	ldrb	r2, [r3, #0]
   26578:	4620      	mov	r0, r4
   2657a:	f7ff fed9 	bl	26330 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   2657e:	f04f 0b01 	mov.w	fp, #1
		if (i > 0 && !(i % 8)) {
   26582:	f01b 0f07 	tst.w	fp, #7
   26586:	d103      	bne.n	26590 <log_output_process+0x1c4>
			print_formatted(output, " ");
   26588:	4649      	mov	r1, r9
   2658a:	4620      	mov	r0, r4
   2658c:	f7ff fed0 	bl	26330 <print_formatted>
		if (i < length) {
   26590:	45d8      	cmp	r8, fp
   26592:	d938      	bls.n	26606 <log_output_process+0x23a>
			print_formatted(output, "%02x ", data[i]);
   26594:	9b05      	ldr	r3, [sp, #20]
   26596:	4651      	mov	r1, sl
   26598:	f813 200b 	ldrb.w	r2, [r3, fp]
   2659c:	4620      	mov	r0, r4
   2659e:	f7ff fec7 	bl	26330 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   265a2:	f10b 0b01 	add.w	fp, fp, #1
   265a6:	f1bb 0f10 	cmp.w	fp, #16
   265aa:	d1ea      	bne.n	26582 <log_output_process+0x1b6>
	print_formatted(output, "|");
   265ac:	4936      	ldr	r1, [pc, #216]	; (26688 <log_output_process+0x2bc>)
   265ae:	4620      	mov	r0, r4
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   265b0:	f04f 0b00 	mov.w	fp, #0
	print_formatted(output, "|");
   265b4:	f7ff febc 	bl	26330 <print_formatted>
		if (i < length) {
   265b8:	465a      	mov	r2, fp
			unsigned char c = (unsigned char)data[i];
   265ba:	9b05      	ldr	r3, [sp, #20]
   265bc:	5c9a      	ldrb	r2, [r3, r2]
	return (int)((((unsigned)c) >= ' ') &&
   265be:	f1a2 0120 	sub.w	r1, r2, #32
			print_formatted(output, "%c",
   265c2:	295f      	cmp	r1, #95	; 0x5f
   265c4:	bf28      	it	cs
   265c6:	222e      	movcs	r2, #46	; 0x2e
   265c8:	4930      	ldr	r1, [pc, #192]	; (2668c <log_output_process+0x2c0>)
   265ca:	4620      	mov	r0, r4
   265cc:	f7ff feb0 	bl	26330 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   265d0:	f10b 0b01 	add.w	fp, fp, #1
   265d4:	f1bb 0f10 	cmp.w	fp, #16
   265d8:	d01a      	beq.n	26610 <log_output_process+0x244>
		if (i > 0 && !(i % 8)) {
   265da:	f01b 0f07 	tst.w	fp, #7
   265de:	d103      	bne.n	265e8 <log_output_process+0x21c>
			print_formatted(output, " ");
   265e0:	4649      	mov	r1, r9
   265e2:	4620      	mov	r0, r4
   265e4:	f7ff fea4 	bl	26330 <print_formatted>
		if (i < length) {
   265e8:	45d8      	cmp	r8, fp
   265ea:	465a      	mov	r2, fp
   265ec:	d8e5      	bhi.n	265ba <log_output_process+0x1ee>
			print_formatted(output, " ");
   265ee:	4649      	mov	r1, r9
   265f0:	4620      	mov	r0, r4
   265f2:	f7ff fe9d 	bl	26330 <print_formatted>
   265f6:	e7eb      	b.n	265d0 <log_output_process+0x204>
		print_formatted(output, " ");
   265f8:	4649      	mov	r1, r9
   265fa:	4620      	mov	r0, r4
   265fc:	f7ff fe98 	bl	26330 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
   26600:	f10b 0b01 	add.w	fp, fp, #1
   26604:	e7b3      	b.n	2656e <log_output_process+0x1a2>
			print_formatted(output, "   ");
   26606:	4922      	ldr	r1, [pc, #136]	; (26690 <log_output_process+0x2c4>)
   26608:	4620      	mov	r0, r4
   2660a:	f7ff fe91 	bl	26330 <print_formatted>
   2660e:	e7c8      	b.n	265a2 <log_output_process+0x1d6>
		data += length;
   26610:	9b05      	ldr	r3, [sp, #20]
	} while (len);
   26612:	ebb7 0708 	subs.w	r7, r7, r8
		data += length;
   26616:	4443      	add	r3, r8
   26618:	9305      	str	r3, [sp, #20]
	} while (len);
   2661a:	d19d      	bne.n	26558 <log_output_process+0x18c>
		log_msg_hexdump(output, (uint8_t *)data, data_len, prefix_offset, flags);
	}

	if (!raw_string) {
   2661c:	9b04      	ldr	r3, [sp, #16]
   2661e:	2b00      	cmp	r3, #0
   26620:	f47f af35 	bne.w	2648e <log_output_process+0xc2>
		postfix_print(output, flags, level);
	}

	log_output_flush(output);
   26624:	4620      	mov	r0, r4
}
   26626:	b009      	add	sp, #36	; 0x24
   26628:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	log_output_flush(output);
   2662c:	f012 bbaf 	b.w	38d8e <log_output_flush>
		print_formatted(output, "%s", log_color);
   26630:	4a06      	ldr	r2, [pc, #24]	; (2664c <log_output_process+0x280>)
   26632:	4905      	ldr	r1, [pc, #20]	; (26648 <log_output_process+0x27c>)
   26634:	4620      	mov	r0, r4
   26636:	f7ff fe7b 	bl	26330 <print_formatted>
}
   2663a:	e72b      	b.n	26494 <log_output_process+0xc8>
   2663c:	0003d523 	.word	0x0003d523
   26640:	0003d527 	.word	0x0003d527
   26644:	0003c6ac 	.word	0x0003c6ac
   26648:	0003ee62 	.word	0x0003ee62
   2664c:	0003d51e 	.word	0x0003d51e
   26650:	0003c6c0 	.word	0x0003c6c0
   26654:	0003d54c 	.word	0x0003d54c
   26658:	0003d552 	.word	0x0003d552
   2665c:	0003d556 	.word	0x0003d556
   26660:	20002d98 	.word	0x20002d98
   26664:	20002d94 	.word	0x20002d94
   26668:	0003d530 	.word	0x0003d530
   2666c:	00038da9 	.word	0x00038da9
   26670:	00026371 	.word	0x00026371
   26674:	00038d81 	.word	0x00038d81
   26678:	0003d4ef 	.word	0x0003d4ef
   2667c:	0003d1d7 	.word	0x0003d1d7
   26680:	0003d563 	.word	0x0003d563
   26684:	0003d55b 	.word	0x0003d55b
   26688:	0003d565 	.word	0x0003d565
   2668c:	0003d567 	.word	0x0003d567
   26690:	0003d561 	.word	0x0003d561

00026694 <log_output_msg_process>:

void log_output_msg_process(const struct log_output *output,
			    struct log_msg *msg, uint32_t flags)
{
   26694:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return msg->hdr.desc.level;
   26698:	880f      	ldrh	r7, [r1, #0]
	return msg->hdr.source;
   2669a:	684b      	ldr	r3, [r1, #4]
 *
 * @return Timestamp.
 */
static inline log_timestamp_t log_msg_get_timestamp(struct log_msg *msg)
{
	return msg->hdr.timestamp;
   2669c:	688e      	ldr	r6, [r1, #8]
   2669e:	b086      	sub	sp, #24
   266a0:	4605      	mov	r5, r0
   266a2:	460c      	mov	r4, r1
   266a4:	4690      	mov	r8, r2
	return msg->hdr.desc.level;
   266a6:	f3c7 1782 	ubfx	r7, r7, #6, #3
		/* Remote domain is converting source pointer to ID */
		source_id = (int16_t)(uintptr_t)log_msg_get_source(msg);
	} else {
		void *source = (void *)log_msg_get_source(msg);

		if (source != NULL) {
   266aa:	b15b      	cbz	r3, 266c4 <log_output_msg_process+0x30>
	return ((uint8_t *)data - (uint8_t *)__log_dynamic_start)/
   266ac:	4a13      	ldr	r2, [pc, #76]	; (266fc <log_output_msg_process+0x68>)
   266ae:	1a9b      	subs	r3, r3, r2
			source_id = IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) ?
   266b0:	f343 018f 	sbfx	r1, r3, #2, #16
		} else {
			source_id = -1;
		}
	}

	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
   266b4:	2900      	cmp	r1, #0
   266b6:	db1f      	blt.n	266f8 <log_output_msg_process+0x64>
	return msg->hdr.desc.domain;
   266b8:	7820      	ldrb	r0, [r4, #0]
   266ba:	f3c0 00c2 	ubfx	r0, r0, #3, #3
   266be:	f7ff fc6d 	bl	25f9c <log_source_name_get>
   266c2:	4603      	mov	r3, r0
 *
 * @return pointer to the package.
 */
static inline uint8_t *log_msg_get_package(struct log_msg *msg, size_t *len)
{
	*len = msg->hdr.desc.package_len;
   266c4:	4621      	mov	r1, r4
	*len = msg->hdr.desc.data_len;
   266c6:	8860      	ldrh	r0, [r4, #2]
	*len = msg->hdr.desc.package_len;
   266c8:	f851 2b10 	ldr.w	r2, [r1], #16
	size_t plen, dlen;
	uint8_t *package = log_msg_get_package(msg, &plen);
	uint8_t *data = log_msg_get_data(msg, &dlen);

	log_output_process(output, timestamp, NULL, sname, level,
   266cc:	9700      	str	r7, [sp, #0]
   266ce:	f3c2 2249 	ubfx	r2, r2, #9, #10
   266d2:	2a00      	cmp	r2, #0
	return msg->data + msg->hdr.desc.package_len;
   266d4:	eb01 0402 	add.w	r4, r1, r2
	*len = msg->hdr.desc.data_len;
   266d8:	f3c0 00cb 	ubfx	r0, r0, #3, #12
   266dc:	bf08      	it	eq
   266de:	2100      	moveq	r1, #0
   266e0:	e9cd 0803 	strd	r0, r8, [sp, #12]
   266e4:	e9cd 1401 	strd	r1, r4, [sp, #4]
   266e8:	2200      	movs	r2, #0
   266ea:	4631      	mov	r1, r6
   266ec:	4628      	mov	r0, r5
   266ee:	f7ff fe6d 	bl	263cc <log_output_process>
			   plen > 0 ? package : NULL, data, dlen, flags);
}
   266f2:	b006      	add	sp, #24
   266f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
   266f8:	2300      	movs	r3, #0
   266fa:	e7e3      	b.n	266c4 <log_output_msg_process+0x30>
   266fc:	20000a60 	.word	0x20000a60

00026700 <log_output_dropped_process>:

void log_output_dropped_process(const struct log_output *output, uint32_t cnt)
{
   26700:	b573      	push	{r0, r1, r4, r5, r6, lr}
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   26702:	f242 730f 	movw	r3, #9999	; 0x270f
   26706:	428b      	cmp	r3, r1
   26708:	bf28      	it	cs
   2670a:	460b      	movcs	r3, r1
	log_output_func_t outf = output->func;
   2670c:	6805      	ldr	r5, [r0, #0]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   2670e:	4a0f      	ldr	r2, [pc, #60]	; (2674c <log_output_dropped_process+0x4c>)
{
   26710:	4604      	mov	r4, r0
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   26712:	2105      	movs	r1, #5
   26714:	4668      	mov	r0, sp
   26716:	f012 f801 	bl	3871c <snprintk>

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
   2671a:	6863      	ldr	r3, [r4, #4]
   2671c:	490c      	ldr	r1, [pc, #48]	; (26750 <log_output_dropped_process+0x50>)
   2671e:	685b      	ldr	r3, [r3, #4]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   26720:	4606      	mov	r6, r0
	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
   26722:	220b      	movs	r2, #11
   26724:	4628      	mov	r0, r5
   26726:	f012 fb1e 	bl	38d66 <buffer_write>
		     output->control_block->ctx);
	buffer_write(outf, buf, len, output->control_block->ctx);
   2672a:	6863      	ldr	r3, [r4, #4]
   2672c:	4632      	mov	r2, r6
   2672e:	4669      	mov	r1, sp
   26730:	4628      	mov	r0, r5
   26732:	685b      	ldr	r3, [r3, #4]
   26734:	f012 fb17 	bl	38d66 <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
   26738:	6863      	ldr	r3, [r4, #4]
   2673a:	4906      	ldr	r1, [pc, #24]	; (26754 <log_output_dropped_process+0x54>)
   2673c:	685b      	ldr	r3, [r3, #4]
   2673e:	221b      	movs	r2, #27
   26740:	4628      	mov	r0, r5
   26742:	f012 fb10 	bl	38d66 <buffer_write>
		     output->control_block->ctx);
}
   26746:	b002      	add	sp, #8
   26748:	bd70      	pop	{r4, r5, r6, pc}
   2674a:	bf00      	nop
   2674c:	0003f9cc 	.word	0x0003f9cc
   26750:	0003d586 	.word	0x0003d586
   26754:	0003d56a 	.word	0x0003d56a

00026758 <log_output_timestamp_freq_set>:
{
	timestamp_div = 1U;
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
   26758:	4a07      	ldr	r2, [pc, #28]	; (26778 <log_output_timestamp_freq_set+0x20>)
   2675a:	2100      	movs	r1, #0
   2675c:	2301      	movs	r3, #1
   2675e:	4290      	cmp	r0, r2
   26760:	d806      	bhi.n	26770 <log_output_timestamp_freq_set+0x18>
   26762:	4a06      	ldr	r2, [pc, #24]	; (2677c <log_output_timestamp_freq_set+0x24>)
   26764:	b901      	cbnz	r1, 26768 <log_output_timestamp_freq_set+0x10>
	timestamp_div = 1U;
   26766:	2301      	movs	r3, #1
   26768:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
   2676a:	4b05      	ldr	r3, [pc, #20]	; (26780 <log_output_timestamp_freq_set+0x28>)
   2676c:	6018      	str	r0, [r3, #0]
}
   2676e:	4770      	bx	lr
		frequency /= 2U;
   26770:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
   26772:	005b      	lsls	r3, r3, #1
   26774:	2101      	movs	r1, #1
   26776:	e7f2      	b.n	2675e <log_output_timestamp_freq_set+0x6>
   26778:	000f4240 	.word	0x000f4240
   2677c:	20002d94 	.word	0x20002d94
   26780:	20002d98 	.word	0x20002d98

00026784 <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
   26784:	4b01      	ldr	r3, [pc, #4]	; (2678c <log_backend_rtt_init+0x8>)
   26786:	2201      	movs	r2, #1
   26788:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
}
   2678a:	4770      	bx	lr
   2678c:	200033fc 	.word	0x200033fc

00026790 <format_set>:
	log_output_func(&log_output_rtt, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
   26790:	4b01      	ldr	r3, [pc, #4]	; (26798 <format_set+0x8>)
	return 0;
}
   26792:	2000      	movs	r0, #0
	log_format_current = log_type;
   26794:	6019      	str	r1, [r3, #0]
}
   26796:	4770      	bx	lr
   26798:	20002db0 	.word	0x20002db0

0002679c <panic>:
	panic_mode = true;
   2679c:	4b02      	ldr	r3, [pc, #8]	; (267a8 <panic+0xc>)
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
   2679e:	4803      	ldr	r0, [pc, #12]	; (267ac <panic+0x10>)
   267a0:	2201      	movs	r2, #1
   267a2:	701a      	strb	r2, [r3, #0]
   267a4:	f012 baf3 	b.w	38d8e <log_output_flush>
   267a8:	200033fd 	.word	0x200033fd
   267ac:	0003c6f0 	.word	0x0003c6f0

000267b0 <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
   267b0:	4801      	ldr	r0, [pc, #4]	; (267b8 <dropped+0x8>)
   267b2:	f7ff bfa5 	b.w	26700 <log_output_dropped_process>
   267b6:	bf00      	nop
   267b8:	0003c6f0 	.word	0x0003c6f0

000267bc <process>:
{
   267bc:	b510      	push	{r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
   267be:	4b06      	ldr	r3, [pc, #24]	; (267d8 <process+0x1c>)
   267c0:	6818      	ldr	r0, [r3, #0]
{
   267c2:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
   267c4:	f7ff f98a 	bl	25adc <log_format_func_t_get>
	log_output_func(&log_output_rtt, &msg->log, flags);
   267c8:	4621      	mov	r1, r4
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
   267ca:	4603      	mov	r3, r0
}
   267cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	log_output_func(&log_output_rtt, &msg->log, flags);
   267d0:	4802      	ldr	r0, [pc, #8]	; (267dc <process+0x20>)
   267d2:	220f      	movs	r2, #15
   267d4:	4718      	bx	r3
   267d6:	bf00      	nop
   267d8:	20002db0 	.word	0x20002db0
   267dc:	0003c6f0 	.word	0x0003c6f0

000267e0 <on_failed_write>:
	if (retry_cnt == 0) {
   267e0:	b910      	cbnz	r0, 267e8 <on_failed_write+0x8>
		host_present = false;
   267e2:	4b07      	ldr	r3, [pc, #28]	; (26800 <on_failed_write+0x20>)
   267e4:	7018      	strb	r0, [r3, #0]
}
   267e6:	4770      	bx	lr
	return IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE) || panic_mode;
   267e8:	4b06      	ldr	r3, [pc, #24]	; (26804 <on_failed_write+0x24>)
	} else if (is_sync_mode()) {
   267ea:	781b      	ldrb	r3, [r3, #0]
   267ec:	b11b      	cbz	r3, 267f6 <on_failed_write+0x16>
	z_impl_k_busy_wait(usec_to_wait);
   267ee:	f241 3088 	movw	r0, #5000	; 0x1388
   267f2:	f015 baf5 	b.w	3bde0 <z_impl_k_busy_wait>
	return z_impl_k_sleep(timeout);
   267f6:	20a4      	movs	r0, #164	; 0xa4
   267f8:	2100      	movs	r1, #0
   267fa:	f010 bc53 	b.w	370a4 <z_impl_k_sleep>
   267fe:	bf00      	nop
   26800:	200033fc 	.word	0x200033fc
   26804:	200033fd 	.word	0x200033fd

00026808 <data_out_block_mode>:
{
   26808:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE) || panic_mode;
   2680c:	f8df 9074 	ldr.w	r9, [pc, #116]	; 26884 <data_out_block_mode+0x7c>
   26810:	4f1d      	ldr	r7, [pc, #116]	; (26888 <data_out_block_mode+0x80>)
{
   26812:	4680      	mov	r8, r0
   26814:	460e      	mov	r6, r1
	int retry_cnt = IS_ENABLED(CONFIG_LOG_BACKEND_RTT_MODE_BLOCK) ?
   26816:	2404      	movs	r4, #4
		if (!is_sync_mode()) {
   26818:	f899 5000 	ldrb.w	r5, [r9]
   2681c:	b995      	cbnz	r5, 26844 <data_out_block_mode+0x3c>
			RTT_LOCK();
   2681e:	f00e f873 	bl	34908 <zephyr_rtt_mutex_lock>
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
   26822:	4628      	mov	r0, r5
   26824:	4632      	mov	r2, r6
   26826:	4641      	mov	r1, r8
   26828:	f00e f81c 	bl	34864 <SEGGER_RTT_WriteSkipNoLock>
   2682c:	4605      	mov	r5, r0
			RTT_UNLOCK();
   2682e:	f00e f875 	bl	3491c <zephyr_rtt_mutex_unlock>
		if (ret) {
   26832:	b1e5      	cbz	r5, 2686e <data_out_block_mode+0x66>
	host_present = true;
   26834:	2301      	movs	r3, #1
   26836:	703b      	strb	r3, [r7, #0]
	if (is_panic_mode()) {
   26838:	f899 3000 	ldrb.w	r3, [r9]
   2683c:	b973      	cbnz	r3, 2685c <data_out_block_mode+0x54>
}
   2683e:	4630      	mov	r0, r6
   26840:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
   26844:	4632      	mov	r2, r6
   26846:	4641      	mov	r1, r8
   26848:	2000      	movs	r0, #0
   2684a:	f00e f80b 	bl	34864 <SEGGER_RTT_WriteSkipNoLock>
   2684e:	4605      	mov	r5, r0
   26850:	e7ef      	b.n	26832 <data_out_block_mode+0x2a>
			on_failed_write(retry_cnt--);
   26852:	4620      	mov	r0, r4
   26854:	f7ff ffc4 	bl	267e0 <on_failed_write>
   26858:	1e65      	subs	r5, r4, #1
   2685a:	462c      	mov	r4, r5
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
   2685c:	2000      	movs	r0, #0
   2685e:	f00e f849 	bl	348f4 <SEGGER_RTT_HasDataUp>
   26862:	2800      	cmp	r0, #0
   26864:	d0eb      	beq.n	2683e <data_out_block_mode+0x36>
   26866:	783b      	ldrb	r3, [r7, #0]
   26868:	2b00      	cmp	r3, #0
   2686a:	d1f2      	bne.n	26852 <data_out_block_mode+0x4a>
   2686c:	e7e7      	b.n	2683e <data_out_block_mode+0x36>
		} else if (host_present) {
   2686e:	783b      	ldrb	r3, [r7, #0]
   26870:	2b00      	cmp	r3, #0
   26872:	d0e4      	beq.n	2683e <data_out_block_mode+0x36>
			retry_cnt--;
   26874:	3c01      	subs	r4, #1
			on_failed_write(retry_cnt);
   26876:	4620      	mov	r0, r4
   26878:	f7ff ffb2 	bl	267e0 <on_failed_write>
	} while ((ret == 0) && host_present);
   2687c:	783b      	ldrb	r3, [r7, #0]
   2687e:	2b00      	cmp	r3, #0
   26880:	d1ca      	bne.n	26818 <data_out_block_mode+0x10>
   26882:	e7dc      	b.n	2683e <data_out_block_mode+0x36>
   26884:	200033fd 	.word	0x200033fd
   26888:	200033fc 	.word	0x200033fc

0002688c <format_set>:
	log_output_func(&log_output_uart, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
   2688c:	4b01      	ldr	r3, [pc, #4]	; (26894 <format_set+0x8>)
	return 0;
}
   2688e:	2000      	movs	r0, #0
	log_format_current = log_type;
   26890:	6019      	str	r1, [r3, #0]
}
   26892:	4770      	bx	lr
   26894:	20002dc8 	.word	0x20002dc8

00026898 <panic>:
	}
}

static void panic(struct log_backend const *const backend)
{
	in_panic = true;
   26898:	4b02      	ldr	r3, [pc, #8]	; (268a4 <panic+0xc>)
	log_output_flush(output);
   2689a:	4803      	ldr	r0, [pc, #12]	; (268a8 <panic+0x10>)
   2689c:	2201      	movs	r2, #1
   2689e:	701a      	strb	r2, [r3, #0]
   268a0:	f012 ba75 	b.w	38d8e <log_output_flush>
   268a4:	2000340f 	.word	0x2000340f
   268a8:	0003c71c 	.word	0x0003c71c

000268ac <dropped>:
	log_output_dropped_process(output, cnt);
   268ac:	4801      	ldr	r0, [pc, #4]	; (268b4 <dropped+0x8>)
   268ae:	f7ff bf27 	b.w	26700 <log_output_dropped_process>
   268b2:	bf00      	nop
   268b4:	0003c71c 	.word	0x0003c71c

000268b8 <process>:
{
   268b8:	b510      	push	{r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
   268ba:	4b06      	ldr	r3, [pc, #24]	; (268d4 <process+0x1c>)
   268bc:	6818      	ldr	r0, [r3, #0]
{
   268be:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
   268c0:	f7ff f90c 	bl	25adc <log_format_func_t_get>
	log_output_func(&log_output_uart, &msg->log, flags);
   268c4:	4621      	mov	r1, r4
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
   268c6:	4603      	mov	r3, r0
}
   268c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	log_output_func(&log_output_uart, &msg->log, flags);
   268cc:	4802      	ldr	r0, [pc, #8]	; (268d8 <process+0x20>)
   268ce:	220f      	movs	r2, #15
   268d0:	4718      	bx	r3
   268d2:	bf00      	nop
   268d4:	20002dc8 	.word	0x20002dc8
   268d8:	0003c71c 	.word	0x0003c71c

000268dc <char_out>:
{
   268dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
					unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
   268de:	4f07      	ldr	r7, [pc, #28]	; (268fc <char_out+0x20>)
   268e0:	460d      	mov	r5, r1
   268e2:	4604      	mov	r4, r0
   268e4:	1846      	adds	r6, r0, r1
		for (size_t i = 0; i < length; i++) {
   268e6:	42b4      	cmp	r4, r6
   268e8:	d101      	bne.n	268ee <char_out+0x12>
}
   268ea:	4628      	mov	r0, r5
   268ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			uart_poll_out(uart_dev, data[i]);
   268ee:	f814 1b01 	ldrb.w	r1, [r4], #1
   268f2:	68bb      	ldr	r3, [r7, #8]
   268f4:	4801      	ldr	r0, [pc, #4]	; (268fc <char_out+0x20>)
   268f6:	685b      	ldr	r3, [r3, #4]
   268f8:	4798      	blx	r3
		for (size_t i = 0; i < length; i++) {
   268fa:	e7f4      	b.n	268e6 <char_out+0xa>
   268fc:	0003c148 	.word	0x0003c148

00026900 <log_backend_uart_init>:
{
   26900:	b508      	push	{r3, lr}
   26902:	4807      	ldr	r0, [pc, #28]	; (26920 <log_backend_uart_init+0x20>)
   26904:	f015 f94a 	bl	3bb9c <z_device_is_ready>
	__ASSERT_NO_MSG(device_is_ready(uart_dev));
   26908:	b940      	cbnz	r0, 2691c <log_backend_uart_init+0x1c>
   2690a:	4906      	ldr	r1, [pc, #24]	; (26924 <log_backend_uart_init+0x24>)
   2690c:	4806      	ldr	r0, [pc, #24]	; (26928 <log_backend_uart_init+0x28>)
   2690e:	226f      	movs	r2, #111	; 0x6f
   26910:	f012 f8ff 	bl	38b12 <assert_print>
   26914:	4803      	ldr	r0, [pc, #12]	; (26924 <log_backend_uart_init+0x24>)
   26916:	216f      	movs	r1, #111	; 0x6f
   26918:	f012 f8f4 	bl	38b04 <assert_post_action>
}
   2691c:	bd08      	pop	{r3, pc}
   2691e:	bf00      	nop
   26920:	0003c148 	.word	0x0003c148
   26924:	0003d5c2 	.word	0x0003d5c2
   26928:	0003d1d7 	.word	0x0003d1d7

0002692c <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
   2692c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   26930:	4605      	mov	r5, r0
	__asm__ volatile(
   26932:	f04f 0340 	mov.w	r3, #64	; 0x40
   26936:	f3ef 8611 	mrs	r6, BASEPRI
   2693a:	f383 8812 	msr	BASEPRI_MAX, r3
   2693e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   26942:	481b      	ldr	r0, [pc, #108]	; (269b0 <pm_state_notify+0x84>)
   26944:	f00e fc82 	bl	3524c <z_spin_lock_valid>
   26948:	b940      	cbnz	r0, 2695c <pm_state_notify+0x30>
   2694a:	491a      	ldr	r1, [pc, #104]	; (269b4 <pm_state_notify+0x88>)
   2694c:	481a      	ldr	r0, [pc, #104]	; (269b8 <pm_state_notify+0x8c>)
   2694e:	2294      	movs	r2, #148	; 0x94
   26950:	f012 f8df 	bl	38b12 <assert_print>
   26954:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26956:	4817      	ldr	r0, [pc, #92]	; (269b4 <pm_state_notify+0x88>)
   26958:	f012 f8d4 	bl	38b04 <assert_post_action>
	z_spin_lock_set_owner(l);
   2695c:	4814      	ldr	r0, [pc, #80]	; (269b0 <pm_state_notify+0x84>)
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
   2695e:	4f17      	ldr	r7, [pc, #92]	; (269bc <pm_state_notify+0x90>)
   26960:	f8df 805c 	ldr.w	r8, [pc, #92]	; 269c0 <pm_state_notify+0x94>
   26964:	f00e fc90 	bl	35288 <z_spin_lock_set_owner>
	return list->head;
   26968:	4b16      	ldr	r3, [pc, #88]	; (269c4 <pm_state_notify+0x98>)
   2696a:	681c      	ldr	r4, [r3, #0]
   2696c:	f04f 090c 	mov.w	r9, #12
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   26970:	b954      	cbnz	r4, 26988 <pm_state_notify+0x5c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26972:	480f      	ldr	r0, [pc, #60]	; (269b0 <pm_state_notify+0x84>)
   26974:	f00e fc78 	bl	35268 <z_spin_unlock_valid>
   26978:	b9a0      	cbnz	r0, 269a4 <pm_state_notify+0x78>
   2697a:	490e      	ldr	r1, [pc, #56]	; (269b4 <pm_state_notify+0x88>)
   2697c:	480e      	ldr	r0, [pc, #56]	; (269b8 <pm_state_notify+0x8c>)
   2697e:	22c2      	movs	r2, #194	; 0xc2
   26980:	f012 f8c7 	bl	38b12 <assert_print>
   26984:	21c2      	movs	r1, #194	; 0xc2
   26986:	e7e6      	b.n	26956 <pm_state_notify+0x2a>
			callback = notifier->state_exit;
   26988:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
			callback = notifier->state_entry;
   2698c:	2d00      	cmp	r5, #0
   2698e:	bf18      	it	ne
   26990:	4613      	movne	r3, r2
		if (callback) {
   26992:	b12b      	cbz	r3, 269a0 <pm_state_notify+0x74>
			callback(z_cpus_pm_state[_current_cpu->id].state);
   26994:	f898 2014 	ldrb.w	r2, [r8, #20]
   26998:	fb09 f202 	mul.w	r2, r9, r2
   2699c:	5cb8      	ldrb	r0, [r7, r2]
   2699e:	4798      	blx	r3
	return node->next;
   269a0:	6824      	ldr	r4, [r4, #0]
   269a2:	e7e5      	b.n	26970 <pm_state_notify+0x44>
	__asm__ volatile(
   269a4:	f386 8811 	msr	BASEPRI, r6
   269a8:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
   269ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   269b0:	20002dcc 	.word	0x20002dcc
   269b4:	0003d39d 	.word	0x0003d39d
   269b8:	0003d1d7 	.word	0x0003d1d7
   269bc:	20002de0 	.word	0x20002de0
   269c0:	20003384 	.word	0x20003384
   269c4:	20002dec 	.word	0x20002dec

000269c8 <pm_system_resume>:

void pm_system_resume(void)
{
   269c8:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = CURRENT_CPU;
   269ca:	4b19      	ldr	r3, [pc, #100]	; (26a30 <pm_system_resume+0x68>)
   269cc:	7d1c      	ldrb	r4, [r3, #20]
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   269ce:	f3bf 8f5b 	dmb	ish
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   269d2:	f004 031f 	and.w	r3, r4, #31
   269d6:	2201      	movs	r2, #1
   269d8:	409a      	lsls	r2, r3
   269da:	4b16      	ldr	r3, [pc, #88]	; (26a34 <pm_system_resume+0x6c>)
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   269dc:	0961      	lsrs	r1, r4, #5
   269de:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   269e2:	43d0      	mvns	r0, r2
   269e4:	e853 1f00 	ldrex	r1, [r3]
   269e8:	ea01 0500 	and.w	r5, r1, r0
   269ec:	e843 5600 	strex	r6, r5, [r3]
   269f0:	2e00      	cmp	r6, #0
   269f2:	d1f7      	bne.n	269e4 <pm_system_resume+0x1c>
   269f4:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
   269f8:	420a      	tst	r2, r1
   269fa:	d013      	beq.n	26a24 <pm_system_resume+0x5c>
	if (pm_state_exit_post_ops != NULL) {
   269fc:	4b0e      	ldr	r3, [pc, #56]	; (26a38 <pm_system_resume+0x70>)
   269fe:	4d0f      	ldr	r5, [pc, #60]	; (26a3c <pm_system_resume+0x74>)
   26a00:	b18b      	cbz	r3, 26a26 <pm_system_resume+0x5e>
		pm_state_exit_post_ops(info->state, info->substate_id);
   26a02:	230c      	movs	r3, #12
   26a04:	4363      	muls	r3, r4
   26a06:	18ea      	adds	r2, r5, r3
   26a08:	5ce8      	ldrb	r0, [r5, r3]
   26a0a:	7851      	ldrb	r1, [r2, #1]
   26a0c:	f012 fcf3 	bl	393f6 <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
   26a10:	2000      	movs	r0, #0
   26a12:	f7ff ff8b 	bl	2692c <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
   26a16:	230c      	movs	r3, #12
   26a18:	435c      	muls	r4, r3
   26a1a:	192a      	adds	r2, r5, r4
   26a1c:	2300      	movs	r3, #0
   26a1e:	512b      	str	r3, [r5, r4]
   26a20:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
   26a24:	bd70      	pop	{r4, r5, r6, pc}
   26a26:	f383 8811 	msr	BASEPRI, r3
   26a2a:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
   26a2e:	e7ef      	b.n	26a10 <pm_system_resume+0x48>
   26a30:	20003384 	.word	0x20003384
   26a34:	20002df4 	.word	0x20002df4
   26a38:	000393f7 	.word	0x000393f7
   26a3c:	20002de0 	.word	0x20002de0

00026a40 <pm_system_suspend>:

	return true;
}

bool pm_system_suspend(int32_t ticks)
{
   26a40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t id = CURRENT_CPU;
   26a44:	4b42      	ldr	r3, [pc, #264]	; (26b50 <pm_system_suspend+0x110>)
{
   26a46:	4607      	mov	r7, r0
	uint8_t id = CURRENT_CPU;
   26a48:	7d1d      	ldrb	r5, [r3, #20]
	__asm__ volatile(
   26a4a:	f04f 0340 	mov.w	r3, #64	; 0x40
   26a4e:	f3ef 8811 	mrs	r8, BASEPRI
   26a52:	f383 8812 	msr	BASEPRI_MAX, r3
   26a56:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   26a5a:	483e      	ldr	r0, [pc, #248]	; (26b54 <pm_system_suspend+0x114>)
   26a5c:	f00e fbf6 	bl	3524c <z_spin_lock_valid>
   26a60:	b940      	cbnz	r0, 26a74 <pm_system_suspend+0x34>
   26a62:	493d      	ldr	r1, [pc, #244]	; (26b58 <pm_system_suspend+0x118>)
   26a64:	483d      	ldr	r0, [pc, #244]	; (26b5c <pm_system_suspend+0x11c>)
   26a66:	2294      	movs	r2, #148	; 0x94
   26a68:	f012 f853 	bl	38b12 <assert_print>
   26a6c:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26a6e:	483a      	ldr	r0, [pc, #232]	; (26b58 <pm_system_suspend+0x118>)
   26a70:	f012 f848 	bl	38b04 <assert_post_action>
	z_spin_lock_set_owner(l);
   26a74:	4837      	ldr	r0, [pc, #220]	; (26b54 <pm_system_suspend+0x114>)
   26a76:	4e3a      	ldr	r6, [pc, #232]	; (26b60 <pm_system_suspend+0x120>)
	k_spinlock_key_t key;

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	key = k_spin_lock(&pm_forced_state_lock);
	if (z_cpus_pm_forced_state[id].state != PM_STATE_ACTIVE) {
   26a78:	240c      	movs	r4, #12
   26a7a:	f00e fc05 	bl	35288 <z_spin_lock_set_owner>
   26a7e:	436c      	muls	r4, r5
   26a80:	4b38      	ldr	r3, [pc, #224]	; (26b64 <pm_system_suspend+0x124>)
   26a82:	5d19      	ldrb	r1, [r3, r4]
   26a84:	191a      	adds	r2, r3, r4
   26a86:	b191      	cbz	r1, 26aae <pm_system_suspend+0x6e>
		z_cpus_pm_state[id] = z_cpus_pm_forced_state[id];
   26a88:	ca07      	ldmia	r2, {r0, r1, r2}
   26a8a:	eb06 0c04 	add.w	ip, r6, r4
   26a8e:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		z_cpus_pm_forced_state[id].state = PM_STATE_ACTIVE;
   26a92:	2200      	movs	r2, #0
   26a94:	551a      	strb	r2, [r3, r4]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26a96:	482f      	ldr	r0, [pc, #188]	; (26b54 <pm_system_suspend+0x114>)
   26a98:	f00e fbe6 	bl	35268 <z_spin_unlock_valid>
   26a9c:	4604      	mov	r4, r0
   26a9e:	b988      	cbnz	r0, 26ac4 <pm_system_suspend+0x84>
   26aa0:	492d      	ldr	r1, [pc, #180]	; (26b58 <pm_system_suspend+0x118>)
   26aa2:	482e      	ldr	r0, [pc, #184]	; (26b5c <pm_system_suspend+0x11c>)
   26aa4:	22c2      	movs	r2, #194	; 0xc2
   26aa6:	f012 f834 	bl	38b12 <assert_print>
   26aaa:	21c2      	movs	r1, #194	; 0xc2
   26aac:	e7df      	b.n	26a6e <pm_system_suspend+0x2e>
	} else {
		const struct pm_state_info *info;

		info = pm_policy_next_state(id, ticks);
   26aae:	4639      	mov	r1, r7
   26ab0:	4628      	mov	r0, r5
   26ab2:	f000 f861 	bl	26b78 <pm_policy_next_state>
		if (info != NULL) {
   26ab6:	2800      	cmp	r0, #0
   26ab8:	d0ed      	beq.n	26a96 <pm_system_suspend+0x56>
			z_cpus_pm_state[id] = *info;
   26aba:	c807      	ldmia	r0, {r0, r1, r2}
   26abc:	4434      	add	r4, r6
   26abe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
   26ac2:	e7e8      	b.n	26a96 <pm_system_suspend+0x56>
	__asm__ volatile(
   26ac4:	f388 8811 	msr	BASEPRI, r8
   26ac8:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_forced_state_lock, key);

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
   26acc:	230c      	movs	r3, #12
   26ace:	436b      	muls	r3, r5
   26ad0:	18f2      	adds	r2, r6, r3
   26ad2:	5cf3      	ldrb	r3, [r6, r3]
   26ad4:	2b00      	cmp	r3, #0
   26ad6:	d039      	beq.n	26b4c <pm_system_suspend+0x10c>
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		return false;
	}

	if (ticks != K_TICKS_FOREVER) {
   26ad8:	1c7b      	adds	r3, r7, #1
   26ada:	d00f      	beq.n	26afc <pm_system_suspend+0xbc>
			return (uint32_t)((t * to_hz + off) / from_hz);
   26adc:	f8d2 e008 	ldr.w	lr, [r2, #8]
   26ae0:	4821      	ldr	r0, [pc, #132]	; (26b68 <pm_system_suspend+0x128>)
   26ae2:	4a22      	ldr	r2, [pc, #136]	; (26b6c <pm_system_suspend+0x12c>)
   26ae4:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
   26ae8:	2100      	movs	r1, #0
   26aea:	2300      	movs	r3, #0
   26aec:	fbee 010c 	umlal	r0, r1, lr, ip
   26af0:	f7e6 fb7e 	bl	d1f0 <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		z_set_timeout_expiry(ticks -
   26af4:	2101      	movs	r1, #1
   26af6:	1a38      	subs	r0, r7, r0
   26af8:	f010 fd88 	bl	3760c <z_set_timeout_expiry>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
   26afc:	f00f fda8 	bl	36650 <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
   26b00:	2001      	movs	r0, #1
   26b02:	f7ff ff13 	bl	2692c <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   26b06:	f3bf 8f5b 	dmb	ish
   26b0a:	4b19      	ldr	r3, [pc, #100]	; (26b70 <pm_system_suspend+0x130>)
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   26b0c:	096a      	lsrs	r2, r5, #5
   26b0e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	atomic_val_t mask = ATOMIC_MASK(bit);
   26b12:	f005 011f 	and.w	r1, r5, #31
   26b16:	2201      	movs	r2, #1
   26b18:	408a      	lsls	r2, r1
   26b1a:	e853 0f00 	ldrex	r0, [r3]
   26b1e:	4310      	orrs	r0, r2
   26b20:	e843 0100 	strex	r1, r0, [r3]
   26b24:	2900      	cmp	r1, #0
   26b26:	d1f8      	bne.n	26b1a <pm_system_suspend+0xda>
   26b28:	f3bf 8f5b 	dmb	ish
	if (pm_state_set != NULL) {
   26b2c:	4b11      	ldr	r3, [pc, #68]	; (26b74 <pm_system_suspend+0x134>)
   26b2e:	b133      	cbz	r3, 26b3e <pm_system_suspend+0xfe>
		pm_state_set(info->state, info->substate_id);
   26b30:	230c      	movs	r3, #12
   26b32:	436b      	muls	r3, r5
   26b34:	18f2      	adds	r2, r6, r3
   26b36:	5cf0      	ldrb	r0, [r6, r3]
   26b38:	7851      	ldrb	r1, [r2, #1]
   26b3a:	f012 fc50 	bl	393de <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
   26b3e:	f7ff ff43 	bl	269c8 <pm_system_resume>
	k_sched_unlock();
   26b42:	f00f fdd1 	bl	366e8 <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

	return true;
}
   26b46:	4620      	mov	r0, r4
   26b48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return false;
   26b4c:	461c      	mov	r4, r3
   26b4e:	e7fa      	b.n	26b46 <pm_system_suspend+0x106>
   26b50:	20003384 	.word	0x20003384
   26b54:	20002dd0 	.word	0x20002dd0
   26b58:	0003d39d 	.word	0x0003d39d
   26b5c:	0003d1d7 	.word	0x0003d1d7
   26b60:	20002de0 	.word	0x20002de0
   26b64:	20002dd4 	.word	0x20002dd4
   26b68:	000f423f 	.word	0x000f423f
   26b6c:	000f4240 	.word	0x000f4240
   26b70:	20002df4 	.word	0x20002df4
   26b74:	000393df 	.word	0x000393df

00026b78 <pm_policy_next_state>:
	}
}

#ifdef CONFIG_PM_POLICY_DEFAULT
const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
   26b78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26b7c:	b085      	sub	sp, #20
   26b7e:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
   26b80:	a903      	add	r1, sp, #12
   26b82:	f000 f843 	bl	26c0c <pm_state_cpu_get_all>

		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);

		/* skip state if it brings too much latency */
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   26b86:	4b1e      	ldr	r3, [pc, #120]	; (26c00 <pm_policy_next_state+0x88>)
   26b88:	9d03      	ldr	r5, [sp, #12]
   26b8a:	f8d3 a000 	ldr.w	sl, [r3]
   26b8e:	f8df 8074 	ldr.w	r8, [pc, #116]	; 26c04 <pm_policy_next_state+0x8c>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   26b92:	1e43      	subs	r3, r0, #1
   26b94:	b21b      	sxth	r3, r3
   26b96:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
   26b9a:	4604      	mov	r4, r0
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   26b9c:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   26ba0:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   26ba4:	f04f 0b00 	mov.w	fp, #0
   26ba8:	b924      	cbnz	r4, 26bb4 <pm_policy_next_state+0x3c>
		    (ticks >= (min_residency + exit_latency))) {
			return state;
		}
	}

	return NULL;
   26baa:	46a1      	mov	r9, r4
}
   26bac:	4648      	mov	r0, r9
   26bae:	b005      	add	sp, #20
   26bb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26bb4:	6868      	ldr	r0, [r5, #4]
   26bb6:	4a14      	ldr	r2, [pc, #80]	; (26c08 <pm_policy_next_state+0x90>)
   26bb8:	46c4      	mov	ip, r8
   26bba:	4659      	mov	r1, fp
   26bbc:	fbe0 c107 	umlal	ip, r1, r0, r7
   26bc0:	2300      	movs	r3, #0
   26bc2:	4660      	mov	r0, ip
   26bc4:	f7e6 fb14 	bl	d1f0 <__aeabi_uldivmod>
   26bc8:	9001      	str	r0, [sp, #4]
   26bca:	68a8      	ldr	r0, [r5, #8]
   26bcc:	4a0e      	ldr	r2, [pc, #56]	; (26c08 <pm_policy_next_state+0x90>)
   26bce:	46c4      	mov	ip, r8
   26bd0:	4659      	mov	r1, fp
   26bd2:	fbe0 c107 	umlal	ip, r1, r0, r7
   26bd6:	2300      	movs	r3, #0
   26bd8:	4660      	mov	r0, ip
   26bda:	f7e6 fb09 	bl	d1f0 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   26bde:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
		const struct pm_state_info *state = &cpu_states[i];
   26be2:	46a9      	mov	r9, r5
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   26be4:	d001      	beq.n	26bea <pm_policy_next_state+0x72>
   26be6:	4582      	cmp	sl, r0
   26be8:	d905      	bls.n	26bf6 <pm_policy_next_state+0x7e>
		if ((ticks == K_TICKS_FOREVER) ||
   26bea:	1c73      	adds	r3, r6, #1
   26bec:	d0de      	beq.n	26bac <pm_policy_next_state+0x34>
		    (ticks >= (min_residency + exit_latency))) {
   26bee:	9b01      	ldr	r3, [sp, #4]
   26bf0:	4418      	add	r0, r3
		if ((ticks == K_TICKS_FOREVER) ||
   26bf2:	42b0      	cmp	r0, r6
   26bf4:	d9da      	bls.n	26bac <pm_policy_next_state+0x34>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   26bf6:	3c01      	subs	r4, #1
   26bf8:	b2a4      	uxth	r4, r4
   26bfa:	3d0c      	subs	r5, #12
   26bfc:	e7d4      	b.n	26ba8 <pm_policy_next_state+0x30>
   26bfe:	bf00      	nop
   26c00:	20000640 	.word	0x20000640
   26c04:	000f423f 	.word	0x000f423f
   26c08:	000f4240 	.word	0x000f4240

00026c0c <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD_SEP(DT_PATH(cpus), DT_NUM_CPU_POWER_STATES, (,))
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
   26c0c:	b908      	cbnz	r0, 26c12 <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
   26c0e:	4b02      	ldr	r3, [pc, #8]	; (26c18 <pm_state_cpu_get_all+0xc>)
   26c10:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
   26c12:	2000      	movs	r0, #0
   26c14:	4770      	bx	lr
   26c16:	bf00      	nop
   26c18:	0003c72c 	.word	0x0003c72c

00026c1c <lbslc_ccc_cfg_changed>:
static struct bt_lbs_cb       lbs_cb;

static void lbslc_ccc_cfg_changed(const struct bt_gatt_attr *attr,
				  uint16_t value)
{
	notify_enabled = (value == BT_GATT_CCC_NOTIFY);
   26c1c:	1e4b      	subs	r3, r1, #1
   26c1e:	4259      	negs	r1, r3
   26c20:	4159      	adcs	r1, r3
   26c22:	4b01      	ldr	r3, [pc, #4]	; (26c28 <lbslc_ccc_cfg_changed+0xc>)
   26c24:	7019      	strb	r1, [r3, #0]
}
   26c26:	4770      	bx	lr
   26c28:	20003411 	.word	0x20003411

00026c2c <write_led>:

static ssize_t write_led(struct bt_conn *conn,
			 const struct bt_gatt_attr *attr,
			 const void *buf,
			 uint16_t len, uint16_t offset, uint8_t flags)
{
   26c2c:	b508      	push	{r3, lr}
	LOG_DBG("Attribute write, handle: %u, conn: %p", attr->handle,
		(void *)conn);

	if (len != 1U) {
   26c2e:	2b01      	cmp	r3, #1
{
   26c30:	f8bd 1008 	ldrh.w	r1, [sp, #8]
	if (len != 1U) {
   26c34:	d10c      	bne.n	26c50 <write_led+0x24>
		LOG_DBG("Write led: Incorrect data length");
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
	}

	if (offset != 0) {
   26c36:	b971      	cbnz	r1, 26c56 <write_led+0x2a>
		LOG_DBG("Write led: Incorrect data offset");
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
	}

	if (lbs_cb.led_cb) {
   26c38:	4b0a      	ldr	r3, [pc, #40]	; (26c64 <write_led+0x38>)
   26c3a:	681b      	ldr	r3, [r3, #0]
   26c3c:	b90b      	cbnz	r3, 26c42 <write_led+0x16>
			LOG_DBG("Write led: Incorrect value");
			return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
		}
	}

	return len;
   26c3e:	2001      	movs	r0, #1
}
   26c40:	bd08      	pop	{r3, pc}
		uint8_t val = *((uint8_t *)buf);
   26c42:	7810      	ldrb	r0, [r2, #0]
		if (val == 0x00 || val == 0x01) {
   26c44:	2801      	cmp	r0, #1
   26c46:	d809      	bhi.n	26c5c <write_led+0x30>
			lbs_cb.led_cb(val ? true : false);
   26c48:	f000 0001 	and.w	r0, r0, #1
   26c4c:	4798      	blx	r3
   26c4e:	e7f6      	b.n	26c3e <write_led+0x12>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   26c50:	f06f 000c 	mvn.w	r0, #12
   26c54:	e7f4      	b.n	26c40 <write_led+0x14>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   26c56:	f06f 0006 	mvn.w	r0, #6
   26c5a:	e7f1      	b.n	26c40 <write_led+0x14>
			return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
   26c5c:	f06f 0012 	mvn.w	r0, #18
   26c60:	e7ee      	b.n	26c40 <write_led+0x14>
   26c62:	bf00      	nop
   26c64:	20002df8 	.word	0x20002df8

00026c68 <read_button>:
static ssize_t read_button(struct bt_conn *conn,
			  const struct bt_gatt_attr *attr,
			  void *buf,
			  uint16_t len,
			  uint16_t offset)
{
   26c68:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   26c6c:	461f      	mov	r7, r3
	const char *value = attr->user_data;

	LOG_DBG("Attribute read, handle: %u, conn: %p", attr->handle,
		(void *)conn);

	if (lbs_cb.button_cb) {
   26c6e:	4b0d      	ldr	r3, [pc, #52]	; (26ca4 <read_button+0x3c>)
{
   26c70:	4605      	mov	r5, r0
	if (lbs_cb.button_cb) {
   26c72:	6858      	ldr	r0, [r3, #4]
{
   26c74:	460c      	mov	r4, r1
   26c76:	4616      	mov	r6, r2
	if (lbs_cb.button_cb) {
   26c78:	b180      	cbz	r0, 26c9c <read_button+0x34>
	const char *value = attr->user_data;
   26c7a:	f8d1 800c 	ldr.w	r8, [r1, #12]
		button_state = lbs_cb.button_cb();
   26c7e:	4780      	blx	r0
   26c80:	4b09      	ldr	r3, [pc, #36]	; (26ca8 <read_button+0x40>)
   26c82:	7018      	strb	r0, [r3, #0]
		return bt_gatt_attr_read(conn, attr, buf, len, offset, value,
   26c84:	2301      	movs	r3, #1
   26c86:	e9cd 8301 	strd	r8, r3, [sp, #4]
   26c8a:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   26c8e:	9300      	str	r3, [sp, #0]
   26c90:	4632      	mov	r2, r6
   26c92:	463b      	mov	r3, r7
   26c94:	4621      	mov	r1, r4
   26c96:	4628      	mov	r0, r5
   26c98:	f013 fd98 	bl	3a7cc <bt_gatt_attr_read>
					 sizeof(*value));
	}

	return 0;
}
   26c9c:	b004      	add	sp, #16
   26c9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   26ca2:	bf00      	nop
   26ca4:	20002df8 	.word	0x20002df8
   26ca8:	20003410 	.word	0x20003410

00026cac <sub_bytes>:
static inline void sub_bytes(uint8_t *s)
{
	unsigned int i;

	for (i = 0; i < (Nb * Nk); ++i) {
		s[i] = sbox[s[i]];
   26cac:	4904      	ldr	r1, [pc, #16]	; (26cc0 <sub_bytes+0x14>)
   26cae:	1e43      	subs	r3, r0, #1
   26cb0:	300f      	adds	r0, #15
   26cb2:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   26cb6:	5c8a      	ldrb	r2, [r1, r2]
   26cb8:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
   26cba:	4283      	cmp	r3, r0
   26cbc:	d1f9      	bne.n	26cb2 <sub_bytes+0x6>
	}
}
   26cbe:	4770      	bx	lr
   26cc0:	0003d631 	.word	0x0003d631

00026cc4 <tc_aes128_set_encrypt_key>:
{
   26cc4:	b5f0      	push	{r4, r5, r6, r7, lr}
	const unsigned int rconst[11] = {
   26cc6:	4e26      	ldr	r6, [pc, #152]	; (26d60 <tc_aes128_set_encrypt_key+0x9c>)
{
   26cc8:	4607      	mov	r7, r0
   26cca:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
   26ccc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
{
   26cce:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
   26cd0:	ad01      	add	r5, sp, #4
   26cd2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   26cd4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   26cd6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   26cd8:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   26cdc:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	if (s == (TCAesKeySched_t) 0) {
   26ce0:	4638      	mov	r0, r7
   26ce2:	2f00      	cmp	r7, #0
   26ce4:	d038      	beq.n	26d58 <tc_aes128_set_encrypt_key+0x94>
	} else if (k == (const uint8_t *) 0) {
   26ce6:	2c00      	cmp	r4, #0
   26ce8:	d038      	beq.n	26d5c <tc_aes128_set_encrypt_key+0x98>
   26cea:	1f38      	subs	r0, r7, #4
   26cec:	4621      	mov	r1, r4
   26cee:	4602      	mov	r2, r0
   26cf0:	3410      	adds	r4, #16
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   26cf2:	784b      	ldrb	r3, [r1, #1]
   26cf4:	780d      	ldrb	r5, [r1, #0]
   26cf6:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   26cf8:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
   26cfc:	78cd      	ldrb	r5, [r1, #3]
   26cfe:	432b      	orrs	r3, r5
   26d00:	788d      	ldrb	r5, [r1, #2]
	for (i = 0; i < Nk; ++i) {
   26d02:	3104      	adds	r1, #4
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   26d04:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
	for (i = 0; i < Nk; ++i) {
   26d08:	428c      	cmp	r4, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   26d0a:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
   26d0e:	d1f0      	bne.n	26cf2 <tc_aes128_set_encrypt_key+0x2e>
			t = subword(rotword(t)) ^ rconst[i/Nk];
   26d10:	4c14      	ldr	r4, [pc, #80]	; (26d64 <tc_aes128_set_encrypt_key+0xa0>)
   26d12:	2104      	movs	r1, #4
		if ((i % Nk) == 0) {
   26d14:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
   26d16:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
   26d18:	d116      	bne.n	26d48 <tc_aes128_set_encrypt_key+0x84>
			t = subword(rotword(t)) ^ rconst[i/Nk];
   26d1a:	f3c3 4207 	ubfx	r2, r3, #16, #8
   26d1e:	5ca5      	ldrb	r5, [r4, r2]
   26d20:	0e1a      	lsrs	r2, r3, #24
   26d22:	5ca2      	ldrb	r2, [r4, r2]
   26d24:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
   26d28:	f3c3 2507 	ubfx	r5, r3, #8, #8
   26d2c:	b2db      	uxtb	r3, r3
   26d2e:	5d65      	ldrb	r5, [r4, r5]
   26d30:	5ce3      	ldrb	r3, [r4, r3]
   26d32:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
   26d36:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
   26d3a:	f021 0303 	bic.w	r3, r1, #3
   26d3e:	3330      	adds	r3, #48	; 0x30
   26d40:	446b      	add	r3, sp
   26d42:	f853 3c2c 	ldr.w	r3, [r3, #-44]
   26d46:	4053      	eors	r3, r2
		s->words[i] = s->words[i-Nk] ^ t;
   26d48:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
   26d4c:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
   26d4e:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
   26d50:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
   26d52:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
   26d54:	d1de      	bne.n	26d14 <tc_aes128_set_encrypt_key+0x50>
	return TC_CRYPTO_SUCCESS;
   26d56:	2001      	movs	r0, #1
}
   26d58:	b00d      	add	sp, #52	; 0x34
   26d5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   26d5c:	4620      	mov	r0, r4
   26d5e:	e7fb      	b.n	26d58 <tc_aes128_set_encrypt_key+0x94>
   26d60:	0003c634 	.word	0x0003c634
   26d64:	0003d631 	.word	0x0003d631

00026d68 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   26d68:	4901      	ldr	r1, [pc, #4]	; (26d70 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   26d6a:	2210      	movs	r2, #16
	str	r2, [r1]
   26d6c:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   26d6e:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   26d70:	e000ed10 	.word	0xe000ed10

00026d74 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   26d74:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   26d76:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   26d78:	f380 8811 	msr	BASEPRI, r0
	isb
   26d7c:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
   26d80:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
   26d84:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   26d86:	b662      	cpsie	i
	isb
   26d88:	f3bf 8f6f 	isb	sy

	bx	lr
   26d8c:	4770      	bx	lr
   26d8e:	bf00      	nop

00026d90 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
   26d90:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
   26d92:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
   26d94:	f381 8811 	msr	BASEPRI, r1

	wfe
   26d98:	bf20      	wfe

	msr	BASEPRI, r0
   26d9a:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
   26d9e:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
   26da0:	4770      	bx	lr
   26da2:	bf00      	nop

00026da4 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   26da4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   26da8:	4606      	mov	r6, r0
   26daa:	af00      	add	r7, sp, #0

	if (esf != NULL) {
   26dac:	460c      	mov	r4, r1
   26dae:	2900      	cmp	r1, #0
   26db0:	d05c      	beq.n	26e6c <z_arm_fatal_error+0xc8>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
   26db2:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 26e7c <z_arm_fatal_error+0xd8>
   26db6:	f8d9 3000 	ldr.w	r3, [r9]
   26dba:	0758      	lsls	r0, r3, #29
   26dbc:	d056      	beq.n	26e6c <z_arm_fatal_error+0xc8>
   26dbe:	466d      	mov	r5, sp
   26dc0:	b08a      	sub	sp, #40	; 0x28
   26dc2:	e9d1 0100 	ldrd	r0, r1, [r1]
   26dc6:	68a3      	ldr	r3, [r4, #8]
   26dc8:	466a      	mov	r2, sp
   26dca:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 26e80 <z_arm_fatal_error+0xdc>
   26dce:	f04f 0805 	mov.w	r8, #5
   26dd2:	e9c2 c005 	strd	ip, r0, [r2, #20]
   26dd6:	e9c2 1307 	strd	r1, r3, [r2, #28]
   26dda:	f842 8f10 	str.w	r8, [r2, #16]!
   26dde:	2300      	movs	r3, #0
   26de0:	f44f 5121 	mov.w	r1, #10304	; 0x2840
   26de4:	4648      	mov	r0, r9
   26de6:	f7ff f9e1 	bl	261ac <z_impl_z_log_msg_static_create>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
   26dea:	f8d9 3000 	ldr.w	r3, [r9]
   26dee:	0759      	lsls	r1, r3, #29
   26df0:	46ad      	mov	sp, r5
   26df2:	d03b      	beq.n	26e6c <z_arm_fatal_error+0xc8>
   26df4:	b08a      	sub	sp, #40	; 0x28
   26df6:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
   26dfa:	6963      	ldr	r3, [r4, #20]
   26dfc:	466a      	mov	r2, sp
   26dfe:	f8df c084 	ldr.w	ip, [pc, #132]	; 26e84 <z_arm_fatal_error+0xe0>
   26e02:	e9c2 1307 	strd	r1, r3, [r2, #28]
   26e06:	e9c2 c005 	strd	ip, r0, [r2, #20]
   26e0a:	f842 8f10 	str.w	r8, [r2, #16]!
   26e0e:	2300      	movs	r3, #0
   26e10:	f44f 5121 	mov.w	r1, #10304	; 0x2840
   26e14:	4648      	mov	r0, r9
   26e16:	f7ff f9c9 	bl	261ac <z_impl_z_log_msg_static_create>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
   26e1a:	f8d9 3000 	ldr.w	r3, [r9]
   26e1e:	075a      	lsls	r2, r3, #29
   26e20:	46ad      	mov	sp, r5
   26e22:	d023      	beq.n	26e6c <z_arm_fatal_error+0xc8>
   26e24:	b088      	sub	sp, #32
   26e26:	69e3      	ldr	r3, [r4, #28]
   26e28:	466a      	mov	r2, sp
   26e2a:	4917      	ldr	r1, [pc, #92]	; (26e88 <z_arm_fatal_error+0xe4>)
   26e2c:	f04f 0803 	mov.w	r8, #3
   26e30:	e9c2 1305 	strd	r1, r3, [r2, #20]
   26e34:	f842 8f10 	str.w	r8, [r2, #16]!
   26e38:	2300      	movs	r3, #0
   26e3a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   26e3e:	4648      	mov	r0, r9
   26e40:	f7ff f9b4 	bl	261ac <z_impl_z_log_msg_static_create>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
   26e44:	f8d9 3000 	ldr.w	r3, [r9]
   26e48:	075b      	lsls	r3, r3, #29
   26e4a:	46ad      	mov	sp, r5
   26e4c:	d00e      	beq.n	26e6c <z_arm_fatal_error+0xc8>
   26e4e:	b088      	sub	sp, #32
   26e50:	69a3      	ldr	r3, [r4, #24]
   26e52:	466a      	mov	r2, sp
   26e54:	490d      	ldr	r1, [pc, #52]	; (26e8c <z_arm_fatal_error+0xe8>)
   26e56:	e9c2 1305 	strd	r1, r3, [r2, #20]
   26e5a:	f842 8f10 	str.w	r8, [r2, #16]!
   26e5e:	2300      	movs	r3, #0
   26e60:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   26e64:	4648      	mov	r0, r9
   26e66:	f7ff f9a1 	bl	261ac <z_impl_z_log_msg_static_create>
   26e6a:	46ad      	mov	sp, r5
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   26e6c:	4621      	mov	r1, r4
   26e6e:	4630      	mov	r0, r6
   26e70:	f00d fdae 	bl	349d0 <z_fatal_error>
}
   26e74:	46bd      	mov	sp, r7
   26e76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   26e7a:	bf00      	nop
   26e7c:	20000aec 	.word	0x20000aec
   26e80:	0003d731 	.word	0x0003d731
   26e84:	0003d760 	.word	0x0003d760
   26e88:	0003d78f 	.word	0x0003d78f
   26e8c:	0003d79e 	.word	0x0003d79e

00026e90 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   26e90:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   26e92:	2800      	cmp	r0, #0
   26e94:	db07      	blt.n	26ea6 <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   26e96:	4a04      	ldr	r2, [pc, #16]	; (26ea8 <arch_irq_enable+0x18>)
   26e98:	0941      	lsrs	r1, r0, #5
   26e9a:	2301      	movs	r3, #1
   26e9c:	f000 001f 	and.w	r0, r0, #31
   26ea0:	4083      	lsls	r3, r0
   26ea2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
   26ea6:	4770      	bx	lr
   26ea8:	e000e100 	.word	0xe000e100

00026eac <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
   26eac:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   26eae:	2800      	cmp	r0, #0
   26eb0:	db0c      	blt.n	26ecc <arch_irq_disable+0x20>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   26eb2:	0943      	lsrs	r3, r0, #5
   26eb4:	4906      	ldr	r1, [pc, #24]	; (26ed0 <arch_irq_disable+0x24>)
   26eb6:	f000 001f 	and.w	r0, r0, #31
   26eba:	3320      	adds	r3, #32
   26ebc:	2201      	movs	r2, #1
   26ebe:	4082      	lsls	r2, r0
   26ec0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   26ec4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   26ec8:	f3bf 8f6f 	isb	sy
}
   26ecc:	4770      	bx	lr
   26ece:	bf00      	nop
   26ed0:	e000e100 	.word	0xe000e100

00026ed4 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
   26ed4:	4b05      	ldr	r3, [pc, #20]	; (26eec <arch_irq_is_enabled+0x18>)
   26ed6:	0942      	lsrs	r2, r0, #5
   26ed8:	f000 001f 	and.w	r0, r0, #31
   26edc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   26ee0:	2301      	movs	r3, #1
   26ee2:	fa03 f000 	lsl.w	r0, r3, r0
}
   26ee6:	4010      	ands	r0, r2
   26ee8:	4770      	bx	lr
   26eea:	bf00      	nop
   26eec:	e000e100 	.word	0xe000e100

00026ef0 <z_arm_irq_priority_set>:
 * The priority is verified if ASSERT_ON is enabled. The maximum number
 * of priority levels is a little complex, as there are some hardware
 * priority levels which are reserved.
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
   26ef0:	b508      	push	{r3, lr}
	/* If we have zero latency interrupts, those interrupts will
	 * run at a priority level which is not masked by irq_lock().
	 * Our policy is to express priority levels with special properties
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
   26ef2:	07d3      	lsls	r3, r2, #31
   26ef4:	d40b      	bmi.n	26f0e <z_arm_irq_priority_set+0x1e>
			prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
		} else {
			/* Use caller supplied prio level as-is */
		}
	} else {
		prio += _IRQ_PRIO_OFFSET;
   26ef6:	3102      	adds	r1, #2
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
   26ef8:	2907      	cmp	r1, #7
   26efa:	d909      	bls.n	26f10 <z_arm_irq_priority_set+0x20>
   26efc:	490e      	ldr	r1, [pc, #56]	; (26f38 <z_arm_irq_priority_set+0x48>)
   26efe:	480f      	ldr	r0, [pc, #60]	; (26f3c <z_arm_irq_priority_set+0x4c>)
   26f00:	225b      	movs	r2, #91	; 0x5b
   26f02:	f011 fe06 	bl	38b12 <assert_print>
   26f06:	480c      	ldr	r0, [pc, #48]	; (26f38 <z_arm_irq_priority_set+0x48>)
   26f08:	215b      	movs	r1, #91	; 0x5b
   26f0a:	f011 fdfb 	bl	38b04 <assert_post_action>
			prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
   26f0e:	2100      	movs	r1, #0
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   26f10:	b240      	sxtb	r0, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   26f12:	2800      	cmp	r0, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   26f14:	bfac      	ite	ge
   26f16:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   26f1a:	4b09      	ldrlt	r3, [pc, #36]	; (26f40 <z_arm_irq_priority_set+0x50>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   26f1c:	ea4f 1141 	mov.w	r1, r1, lsl #5
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   26f20:	bfb8      	it	lt
   26f22:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   26f26:	b2c9      	uxtb	r1, r1
   26f28:	bfaa      	itet	ge
   26f2a:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   26f2e:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   26f30:	f880 1300 	strbge.w	r1, [r0, #768]	; 0x300
}
   26f34:	bd08      	pop	{r3, pc}
   26f36:	bf00      	nop
   26f38:	0003d7cc 	.word	0x0003d7cc
   26f3c:	0003d1d7 	.word	0x0003d1d7
   26f40:	e000ed14 	.word	0xe000ed14

00026f44 <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
   26f44:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
   26f46:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
   26f48:	4b04      	ldr	r3, [pc, #16]	; (26f5c <_arch_isr_direct_pm+0x18>)
   26f4a:	699a      	ldr	r2, [r3, #24]
   26f4c:	b11a      	cbz	r2, 26f56 <_arch_isr_direct_pm+0x12>
		_kernel.idle = 0;
   26f4e:	2200      	movs	r2, #0
   26f50:	619a      	str	r2, [r3, #24]
		z_pm_save_idle_exit();
   26f52:	f014 fe5d 	bl	3bc10 <z_pm_save_idle_exit>
	|| defined(CONFIG_ARMV7_R) \
	|| defined(CONFIG_AARCH32_ARMV8_R) \
	|| defined(CONFIG_ARMV7_A)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
   26f56:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
   26f58:	bd08      	pop	{r3, pc}
   26f5a:	bf00      	nop
   26f5c:	20003384 	.word	0x20003384

00026f60 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   26f60:	bf30      	wfi
    b z_SysNmiOnReset
   26f62:	f7ff bffd 	b.w	26f60 <z_SysNmiOnReset>
   26f66:	bf00      	nop

00026f68 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   26f68:	4a0b      	ldr	r2, [pc, #44]	; (26f98 <z_arm_prep_c+0x30>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
   26f6a:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   26f6c:	4b0b      	ldr	r3, [pc, #44]	; (26f9c <z_arm_prep_c+0x34>)
   26f6e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   26f72:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
   26f74:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   26f78:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   26f7c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   26f80:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   26f84:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   26f88:	f00d fdfc 	bl	34b84 <z_bss_zero>
	z_data_copy();
   26f8c:	f010 f9bc 	bl	37308 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   26f90:	f000 fc56 	bl	27840 <z_arm_interrupt_init>
	z_cstart();
   26f94:	f00d fe3a 	bl	34c0c <z_cstart>
   26f98:	0000c200 	.word	0x0000c200
   26f9c:	e000ed00 	.word	0xe000ed00

00026fa0 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
   26fa0:	4a09      	ldr	r2, [pc, #36]	; (26fc8 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
   26fa2:	490a      	ldr	r1, [pc, #40]	; (26fcc <arch_swap+0x2c>)
	_current->arch.basepri = key;
   26fa4:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
   26fa6:	6809      	ldr	r1, [r1, #0]
   26fa8:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   26faa:	4909      	ldr	r1, [pc, #36]	; (26fd0 <arch_swap+0x30>)
	_current->arch.basepri = key;
   26fac:	6798      	str	r0, [r3, #120]	; 0x78
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   26fae:	684b      	ldr	r3, [r1, #4]
   26fb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   26fb4:	604b      	str	r3, [r1, #4]
   26fb6:	2300      	movs	r3, #0
   26fb8:	f383 8811 	msr	BASEPRI, r3
   26fbc:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   26fc0:	6893      	ldr	r3, [r2, #8]
}
   26fc2:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
   26fc4:	4770      	bx	lr
   26fc6:	bf00      	nop
   26fc8:	20003384 	.word	0x20003384
   26fcc:	0003ce28 	.word	0x0003ce28
   26fd0:	e000ed00 	.word	0xe000ed00

00026fd4 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   26fd4:	4912      	ldr	r1, [pc, #72]	; (27020 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
   26fd6:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   26fd8:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
   26fdc:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   26fde:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   26fe2:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   26fe6:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI_MAX, r0
   26fe8:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   26fec:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   26ff0:	4f0c      	ldr	r7, [pc, #48]	; (27024 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   26ff2:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   26ff6:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
   26ff8:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   26ffa:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   26ffc:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
   26ffe:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   27000:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   27002:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
   27006:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
   27008:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
   2700a:	f000 fcb5 	bl	27978 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
   2700e:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   27012:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
   27016:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   2701a:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
   2701e:	4770      	bx	lr
    ldr r1, =_kernel
   27020:	20003384 	.word	0x20003384
    ldr v4, =_SCS_ICSR
   27024:	e000ed04 	.word	0xe000ed04

00027028 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
   27028:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   2702c:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   2702e:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   27032:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   27036:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   27038:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   2703c:	2902      	cmp	r1, #2
    beq _oops
   2703e:	d0ff      	beq.n	27040 <_oops>

00027040 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   27040:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
   27042:	f012 f956 	bl	392f2 <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
   27046:	bd01      	pop	{r0, pc}

00027048 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
   27048:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
   2704c:	9b00      	ldr	r3, [sp, #0]
   2704e:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
   27052:	490a      	ldr	r1, [pc, #40]	; (2707c <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
   27054:	9b01      	ldr	r3, [sp, #4]
   27056:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
   2705a:	9b02      	ldr	r3, [sp, #8]
   2705c:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
   27060:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
   27064:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   27068:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
   2706c:	f842 1c08 	str.w	r1, [r2, #-8]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
   27070:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
   27072:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
   27074:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
   27076:	6783      	str	r3, [r0, #120]	; 0x78
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   27078:	4770      	bx	lr
   2707a:	bf00      	nop
   2707c:	00038737 	.word	0x00038737

00027080 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
   27080:	4a09      	ldr	r2, [pc, #36]	; (270a8 <z_check_thread_stack_fail+0x28>)
{
   27082:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
   27084:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
   27086:	b170      	cbz	r0, 270a6 <z_check_thread_stack_fail+0x26>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
   27088:	f113 0f16 	cmn.w	r3, #22
   2708c:	6e80      	ldr	r0, [r0, #104]	; 0x68
   2708e:	d005      	beq.n	2709c <z_check_thread_stack_fail+0x1c>
   27090:	f1a0 0240 	sub.w	r2, r0, #64	; 0x40
   27094:	429a      	cmp	r2, r3
   27096:	d805      	bhi.n	270a4 <z_check_thread_stack_fail+0x24>
   27098:	4283      	cmp	r3, r0
   2709a:	d203      	bcs.n	270a4 <z_check_thread_stack_fail+0x24>
		return 0;
   2709c:	4281      	cmp	r1, r0
   2709e:	bf28      	it	cs
   270a0:	2000      	movcs	r0, #0
   270a2:	4770      	bx	lr
   270a4:	2000      	movs	r0, #0
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
}
   270a6:	4770      	bx	lr
   270a8:	20003384 	.word	0x20003384

000270ac <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
   270ac:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
   270ae:	4b09      	ldr	r3, [pc, #36]	; (270d4 <arch_switch_to_main_thread+0x28>)
   270b0:	6098      	str	r0, [r3, #8]
{
   270b2:	460d      	mov	r5, r1
   270b4:	4614      	mov	r4, r2
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
   270b6:	f000 fc5f 	bl	27978 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   270ba:	4620      	mov	r0, r4
   270bc:	f385 8809 	msr	PSP, r5
   270c0:	2100      	movs	r1, #0
   270c2:	b663      	cpsie	if
   270c4:	f381 8811 	msr	BASEPRI, r1
   270c8:	f3bf 8f6f 	isb	sy
   270cc:	2200      	movs	r2, #0
   270ce:	2300      	movs	r3, #0
   270d0:	f011 fb31 	bl	38736 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   270d4:	20003384 	.word	0x20003384

000270d8 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   270d8:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   270da:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   270dc:	4a0b      	ldr	r2, [pc, #44]	; (2710c <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   270de:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
   270e0:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   270e2:	bf1e      	ittt	ne
	movne	r1, #0
   270e4:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   270e6:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
   270e8:	f014 fd92 	blne	3bc10 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   270ec:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   270ee:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   270f2:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   270f6:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   270fa:	4905      	ldr	r1, [pc, #20]	; (27110 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   270fc:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   270fe:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
   27100:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   27102:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   27106:	4903      	ldr	r1, [pc, #12]	; (27114 <_isr_wrapper+0x3c>)
	bx r1
   27108:	4708      	bx	r1
   2710a:	0000      	.short	0x0000
	ldr r2, =_kernel
   2710c:	20003384 	.word	0x20003384
	ldr r1, =_sw_isr_table
   27110:	0003c280 	.word	0x0003c280
	ldr r1, =z_arm_int_exit
   27114:	00027119 	.word	0x00027119

00027118 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   27118:	4b04      	ldr	r3, [pc, #16]	; (2712c <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   2711a:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   2711c:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
   2711e:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   27120:	d003      	beq.n	2712a <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   27122:	4903      	ldr	r1, [pc, #12]	; (27130 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   27124:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   27128:	600a      	str	r2, [r1, #0]

0002712a <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   2712a:	4770      	bx	lr
	ldr r3, =_kernel
   2712c:	20003384 	.word	0x20003384
	ldr r1, =_SCS_ICSR
   27130:	e000ed04 	.word	0xe000ed04

00027134 <bus_fault.constprop.0>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason.
 *
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   27134:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");
   27138:	4c4e      	ldr	r4, [pc, #312]	; (27274 <bus_fault.constprop.0+0x140>)
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   2713a:	b086      	sub	sp, #24
	PR_FAULT_INFO("***** BUS FAULT *****");
   2713c:	6823      	ldr	r3, [r4, #0]
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   2713e:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
   27140:	0759      	lsls	r1, r3, #29
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   27142:	af00      	add	r7, sp, #0
   27144:	4606      	mov	r6, r0
	PR_FAULT_INFO("***** BUS FAULT *****");
   27146:	d00a      	beq.n	2715e <bus_fault.constprop.0+0x2a>
   27148:	4b4b      	ldr	r3, [pc, #300]	; (27278 <bus_fault.constprop.0+0x144>)
   2714a:	617b      	str	r3, [r7, #20]
   2714c:	2302      	movs	r3, #2
   2714e:	613b      	str	r3, [r7, #16]
   27150:	f107 0210 	add.w	r2, r7, #16
   27154:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   27158:	4620      	mov	r0, r4
   2715a:	f012 f8d9 	bl	39310 <z_log_msg_static_create.constprop.0>

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   2715e:	4b47      	ldr	r3, [pc, #284]	; (2727c <bus_fault.constprop.0+0x148>)
   27160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   27162:	04da      	lsls	r2, r3, #19
   27164:	d50d      	bpl.n	27182 <bus_fault.constprop.0+0x4e>
		PR_FAULT_INFO("  Stacking error");
   27166:	6823      	ldr	r3, [r4, #0]
   27168:	075b      	lsls	r3, r3, #29
   2716a:	d00a      	beq.n	27182 <bus_fault.constprop.0+0x4e>
   2716c:	4b44      	ldr	r3, [pc, #272]	; (27280 <bus_fault.constprop.0+0x14c>)
   2716e:	617b      	str	r3, [r7, #20]
   27170:	2302      	movs	r3, #2
   27172:	4840      	ldr	r0, [pc, #256]	; (27274 <bus_fault.constprop.0+0x140>)
   27174:	613b      	str	r3, [r7, #16]
   27176:	f107 0210 	add.w	r2, r7, #16
   2717a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   2717e:	f012 f8c7 	bl	39310 <z_log_msg_static_create.constprop.0>
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   27182:	4b3e      	ldr	r3, [pc, #248]	; (2727c <bus_fault.constprop.0+0x148>)
   27184:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   27186:	0518      	lsls	r0, r3, #20
   27188:	d50d      	bpl.n	271a6 <bus_fault.constprop.0+0x72>
		PR_FAULT_INFO("  Unstacking error");
   2718a:	6823      	ldr	r3, [r4, #0]
   2718c:	0759      	lsls	r1, r3, #29
   2718e:	d00a      	beq.n	271a6 <bus_fault.constprop.0+0x72>
   27190:	4b3c      	ldr	r3, [pc, #240]	; (27284 <bus_fault.constprop.0+0x150>)
   27192:	617b      	str	r3, [r7, #20]
   27194:	2302      	movs	r3, #2
   27196:	4837      	ldr	r0, [pc, #220]	; (27274 <bus_fault.constprop.0+0x140>)
   27198:	613b      	str	r3, [r7, #16]
   2719a:	f107 0210 	add.w	r2, r7, #16
   2719e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   271a2:	f012 f8b5 	bl	39310 <z_log_msg_static_create.constprop.0>
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   271a6:	4b35      	ldr	r3, [pc, #212]	; (2727c <bus_fault.constprop.0+0x148>)
   271a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   271aa:	059a      	lsls	r2, r3, #22
   271ac:	d52a      	bpl.n	27204 <bus_fault.constprop.0+0xd0>
		PR_FAULT_INFO("  Precise data bus error");
   271ae:	6823      	ldr	r3, [r4, #0]
   271b0:	075b      	lsls	r3, r3, #29
   271b2:	d00a      	beq.n	271ca <bus_fault.constprop.0+0x96>
   271b4:	4b34      	ldr	r3, [pc, #208]	; (27288 <bus_fault.constprop.0+0x154>)
   271b6:	617b      	str	r3, [r7, #20]
   271b8:	2302      	movs	r3, #2
   271ba:	482e      	ldr	r0, [pc, #184]	; (27274 <bus_fault.constprop.0+0x140>)
   271bc:	613b      	str	r3, [r7, #16]
   271be:	f107 0210 	add.w	r2, r7, #16
   271c2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   271c6:	f012 f8a3 	bl	39310 <z_log_msg_static_create.constprop.0>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
   271ca:	4b2c      	ldr	r3, [pc, #176]	; (2727c <bus_fault.constprop.0+0x148>)
   271cc:	6b99      	ldr	r1, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   271ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   271d0:	0418      	lsls	r0, r3, #16
   271d2:	d517      	bpl.n	27204 <bus_fault.constprop.0+0xd0>
			PR_EXC("  BFAR Address: 0x%x", bfar);
   271d4:	6823      	ldr	r3, [r4, #0]
   271d6:	075a      	lsls	r2, r3, #29
   271d8:	d00e      	beq.n	271f8 <bus_fault.constprop.0+0xc4>
   271da:	46e8      	mov	r8, sp
   271dc:	b088      	sub	sp, #32
   271de:	466a      	mov	r2, sp
   271e0:	4b2a      	ldr	r3, [pc, #168]	; (2728c <bus_fault.constprop.0+0x158>)
   271e2:	4824      	ldr	r0, [pc, #144]	; (27274 <bus_fault.constprop.0+0x140>)
   271e4:	e9c2 3105 	strd	r3, r1, [r2, #20]
   271e8:	2303      	movs	r3, #3
   271ea:	f842 3f10 	str.w	r3, [r2, #16]!
   271ee:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   271f2:	f012 f88d 	bl	39310 <z_log_msg_static_create.constprop.0>
   271f6:	46c5      	mov	sp, r8
			if (from_hard_fault != 0) {
   271f8:	b126      	cbz	r6, 27204 <bus_fault.constprop.0+0xd0>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   271fa:	4a20      	ldr	r2, [pc, #128]	; (2727c <bus_fault.constprop.0+0x148>)
   271fc:	6a93      	ldr	r3, [r2, #40]	; 0x28
   271fe:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   27202:	6293      	str	r3, [r2, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   27204:	4b1d      	ldr	r3, [pc, #116]	; (2727c <bus_fault.constprop.0+0x148>)
   27206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   27208:	055b      	lsls	r3, r3, #21
   2720a:	d50d      	bpl.n	27228 <bus_fault.constprop.0+0xf4>
		PR_FAULT_INFO("  Imprecise data bus error");
   2720c:	6823      	ldr	r3, [r4, #0]
   2720e:	075e      	lsls	r6, r3, #29
   27210:	d00a      	beq.n	27228 <bus_fault.constprop.0+0xf4>
   27212:	4b1f      	ldr	r3, [pc, #124]	; (27290 <bus_fault.constprop.0+0x15c>)
   27214:	617b      	str	r3, [r7, #20]
   27216:	2302      	movs	r3, #2
   27218:	4816      	ldr	r0, [pc, #88]	; (27274 <bus_fault.constprop.0+0x140>)
   2721a:	613b      	str	r3, [r7, #16]
   2721c:	f107 0210 	add.w	r2, r7, #16
   27220:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   27224:	f012 f874 	bl	39310 <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   27228:	4b14      	ldr	r3, [pc, #80]	; (2727c <bus_fault.constprop.0+0x148>)
   2722a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   2722c:	05d0      	lsls	r0, r2, #23
   2722e:	d518      	bpl.n	27262 <bus_fault.constprop.0+0x12e>
		PR_FAULT_INFO("  Instruction bus error");
   27230:	6823      	ldr	r3, [r4, #0]
   27232:	0759      	lsls	r1, r3, #29
   27234:	d00a      	beq.n	2724c <bus_fault.constprop.0+0x118>
   27236:	4b17      	ldr	r3, [pc, #92]	; (27294 <bus_fault.constprop.0+0x160>)
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   27238:	617b      	str	r3, [r7, #20]
   2723a:	2302      	movs	r3, #2
   2723c:	480d      	ldr	r0, [pc, #52]	; (27274 <bus_fault.constprop.0+0x140>)
   2723e:	613b      	str	r3, [r7, #16]
   27240:	f107 0210 	add.w	r2, r7, #16
   27244:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   27248:	f012 f862 	bl	39310 <z_log_msg_static_create.constprop.0>
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   2724c:	4a0b      	ldr	r2, [pc, #44]	; (2727c <bus_fault.constprop.0+0x148>)
   2724e:	6a93      	ldr	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
   27250:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   27252:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00

	return reason;
}
   27256:	3718      	adds	r7, #24
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   27258:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   2725a:	7028      	strb	r0, [r5, #0]
}
   2725c:	46bd      	mov	sp, r7
   2725e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   27262:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   27264:	049a      	lsls	r2, r3, #18
   27266:	d5f1      	bpl.n	2724c <bus_fault.constprop.0+0x118>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   27268:	6823      	ldr	r3, [r4, #0]
   2726a:	075b      	lsls	r3, r3, #29
   2726c:	d0ee      	beq.n	2724c <bus_fault.constprop.0+0x118>
   2726e:	4b0a      	ldr	r3, [pc, #40]	; (27298 <bus_fault.constprop.0+0x164>)
   27270:	e7e2      	b.n	27238 <bus_fault.constprop.0+0x104>
   27272:	bf00      	nop
   27274:	20000aec 	.word	0x20000aec
   27278:	0003d802 	.word	0x0003d802
   2727c:	e000ed00 	.word	0xe000ed00
   27280:	0003d818 	.word	0x0003d818
   27284:	0003d829 	.word	0x0003d829
   27288:	0003d83c 	.word	0x0003d83c
   2728c:	0003d855 	.word	0x0003d855
   27290:	0003d86a 	.word	0x0003d86a
   27294:	0003d885 	.word	0x0003d885
   27298:	0003d89d 	.word	0x0003d89d

0002729c <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
   2729c:	b510      	push	{r4, lr}
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
   2729e:	4c3f      	ldr	r4, [pc, #252]	; (2739c <usage_fault.constprop.0+0x100>)
   272a0:	6823      	ldr	r3, [r4, #0]
   272a2:	075b      	lsls	r3, r3, #29
static uint32_t usage_fault(const z_arch_esf_t *esf)
   272a4:	b086      	sub	sp, #24
	PR_FAULT_INFO("***** USAGE FAULT *****");
   272a6:	d009      	beq.n	272bc <usage_fault.constprop.0+0x20>
   272a8:	4b3d      	ldr	r3, [pc, #244]	; (273a0 <usage_fault.constprop.0+0x104>)
   272aa:	9305      	str	r3, [sp, #20]
   272ac:	aa04      	add	r2, sp, #16
   272ae:	2302      	movs	r3, #2
   272b0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   272b4:	4620      	mov	r0, r4
   272b6:	9304      	str	r3, [sp, #16]
   272b8:	f012 f82a 	bl	39310 <z_log_msg_static_create.constprop.0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   272bc:	4b39      	ldr	r3, [pc, #228]	; (273a4 <usage_fault.constprop.0+0x108>)
   272be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   272c0:	0198      	lsls	r0, r3, #6
   272c2:	d50c      	bpl.n	272de <usage_fault.constprop.0+0x42>
		PR_FAULT_INFO("  Division by zero");
   272c4:	6823      	ldr	r3, [r4, #0]
   272c6:	0759      	lsls	r1, r3, #29
   272c8:	d009      	beq.n	272de <usage_fault.constprop.0+0x42>
   272ca:	4b37      	ldr	r3, [pc, #220]	; (273a8 <usage_fault.constprop.0+0x10c>)
   272cc:	9305      	str	r3, [sp, #20]
   272ce:	4833      	ldr	r0, [pc, #204]	; (2739c <usage_fault.constprop.0+0x100>)
   272d0:	2302      	movs	r3, #2
   272d2:	aa04      	add	r2, sp, #16
   272d4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   272d8:	9304      	str	r3, [sp, #16]
   272da:	f012 f819 	bl	39310 <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   272de:	4b31      	ldr	r3, [pc, #196]	; (273a4 <usage_fault.constprop.0+0x108>)
   272e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   272e2:	01da      	lsls	r2, r3, #7
   272e4:	d50c      	bpl.n	27300 <usage_fault.constprop.0+0x64>
		PR_FAULT_INFO("  Unaligned memory access");
   272e6:	6823      	ldr	r3, [r4, #0]
   272e8:	075b      	lsls	r3, r3, #29
   272ea:	d009      	beq.n	27300 <usage_fault.constprop.0+0x64>
   272ec:	4b2f      	ldr	r3, [pc, #188]	; (273ac <usage_fault.constprop.0+0x110>)
   272ee:	9305      	str	r3, [sp, #20]
   272f0:	482a      	ldr	r0, [pc, #168]	; (2739c <usage_fault.constprop.0+0x100>)
   272f2:	2302      	movs	r3, #2
   272f4:	aa04      	add	r2, sp, #16
   272f6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   272fa:	9304      	str	r3, [sp, #16]
   272fc:	f012 f808 	bl	39310 <z_log_msg_static_create.constprop.0>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   27300:	4b28      	ldr	r3, [pc, #160]	; (273a4 <usage_fault.constprop.0+0x108>)
   27302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   27304:	0318      	lsls	r0, r3, #12
   27306:	d50c      	bpl.n	27322 <usage_fault.constprop.0+0x86>
		PR_FAULT_INFO("  No coprocessor instructions");
   27308:	6823      	ldr	r3, [r4, #0]
   2730a:	0759      	lsls	r1, r3, #29
   2730c:	d009      	beq.n	27322 <usage_fault.constprop.0+0x86>
   2730e:	4b28      	ldr	r3, [pc, #160]	; (273b0 <usage_fault.constprop.0+0x114>)
   27310:	9305      	str	r3, [sp, #20]
   27312:	4822      	ldr	r0, [pc, #136]	; (2739c <usage_fault.constprop.0+0x100>)
   27314:	2302      	movs	r3, #2
   27316:	aa04      	add	r2, sp, #16
   27318:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   2731c:	9304      	str	r3, [sp, #16]
   2731e:	f011 fff7 	bl	39310 <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   27322:	4b20      	ldr	r3, [pc, #128]	; (273a4 <usage_fault.constprop.0+0x108>)
   27324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   27326:	035a      	lsls	r2, r3, #13
   27328:	d50c      	bpl.n	27344 <usage_fault.constprop.0+0xa8>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
   2732a:	6823      	ldr	r3, [r4, #0]
   2732c:	075b      	lsls	r3, r3, #29
   2732e:	d009      	beq.n	27344 <usage_fault.constprop.0+0xa8>
   27330:	4b20      	ldr	r3, [pc, #128]	; (273b4 <usage_fault.constprop.0+0x118>)
   27332:	9305      	str	r3, [sp, #20]
   27334:	4819      	ldr	r0, [pc, #100]	; (2739c <usage_fault.constprop.0+0x100>)
   27336:	2302      	movs	r3, #2
   27338:	aa04      	add	r2, sp, #16
   2733a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   2733e:	9304      	str	r3, [sp, #16]
   27340:	f011 ffe6 	bl	39310 <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   27344:	4b17      	ldr	r3, [pc, #92]	; (273a4 <usage_fault.constprop.0+0x108>)
   27346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   27348:	0398      	lsls	r0, r3, #14
   2734a:	d50c      	bpl.n	27366 <usage_fault.constprop.0+0xca>
		PR_FAULT_INFO("  Illegal use of the EPSR");
   2734c:	6823      	ldr	r3, [r4, #0]
   2734e:	0759      	lsls	r1, r3, #29
   27350:	d009      	beq.n	27366 <usage_fault.constprop.0+0xca>
   27352:	4b19      	ldr	r3, [pc, #100]	; (273b8 <usage_fault.constprop.0+0x11c>)
   27354:	9305      	str	r3, [sp, #20]
   27356:	4811      	ldr	r0, [pc, #68]	; (2739c <usage_fault.constprop.0+0x100>)
   27358:	2302      	movs	r3, #2
   2735a:	aa04      	add	r2, sp, #16
   2735c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   27360:	9304      	str	r3, [sp, #16]
   27362:	f011 ffd5 	bl	39310 <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   27366:	4b0f      	ldr	r3, [pc, #60]	; (273a4 <usage_fault.constprop.0+0x108>)
   27368:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2736a:	03da      	lsls	r2, r3, #15
   2736c:	d50c      	bpl.n	27388 <usage_fault.constprop.0+0xec>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
   2736e:	6823      	ldr	r3, [r4, #0]
   27370:	075b      	lsls	r3, r3, #29
   27372:	d009      	beq.n	27388 <usage_fault.constprop.0+0xec>
   27374:	4b11      	ldr	r3, [pc, #68]	; (273bc <usage_fault.constprop.0+0x120>)
   27376:	9305      	str	r3, [sp, #20]
   27378:	4808      	ldr	r0, [pc, #32]	; (2739c <usage_fault.constprop.0+0x100>)
   2737a:	2302      	movs	r3, #2
   2737c:	aa04      	add	r2, sp, #16
   2737e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   27382:	9304      	str	r3, [sp, #16]
   27384:	f011 ffc4 	bl	39310 <z_log_msg_static_create.constprop.0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   27388:	4a06      	ldr	r2, [pc, #24]	; (273a4 <usage_fault.constprop.0+0x108>)
   2738a:	6a93      	ldr	r3, [r2, #40]	; 0x28
   2738c:	ea6f 4303 	mvn.w	r3, r3, lsl #16
   27390:	ea6f 4313 	mvn.w	r3, r3, lsr #16

	return reason;
}
   27394:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   27396:	6293      	str	r3, [r2, #40]	; 0x28
}
   27398:	b006      	add	sp, #24
   2739a:	bd10      	pop	{r4, pc}
   2739c:	20000aec 	.word	0x20000aec
   273a0:	0003d8cc 	.word	0x0003d8cc
   273a4:	e000ed00 	.word	0xe000ed00
   273a8:	0003d8e4 	.word	0x0003d8e4
   273ac:	0003d8f7 	.word	0x0003d8f7
   273b0:	0003d911 	.word	0x0003d911
   273b4:	0003d92f 	.word	0x0003d92f
   273b8:	0003d954 	.word	0x0003d954
   273bc:	0003d96e 	.word	0x0003d96e

000273c0 <mem_manage_fault>:
{
   273c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	PR_FAULT_INFO("***** MPU FAULT *****");
   273c4:	4c62      	ldr	r4, [pc, #392]	; (27550 <mem_manage_fault+0x190>)
{
   273c6:	b086      	sub	sp, #24
	PR_FAULT_INFO("***** MPU FAULT *****");
   273c8:	6823      	ldr	r3, [r4, #0]
   273ca:	075b      	lsls	r3, r3, #29
{
   273cc:	af00      	add	r7, sp, #0
   273ce:	4680      	mov	r8, r0
   273d0:	4689      	mov	r9, r1
   273d2:	4615      	mov	r5, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
   273d4:	d00a      	beq.n	273ec <mem_manage_fault+0x2c>
   273d6:	4b5f      	ldr	r3, [pc, #380]	; (27554 <mem_manage_fault+0x194>)
   273d8:	617b      	str	r3, [r7, #20]
   273da:	2302      	movs	r3, #2
   273dc:	613b      	str	r3, [r7, #16]
   273de:	f107 0210 	add.w	r2, r7, #16
   273e2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   273e6:	4620      	mov	r0, r4
   273e8:	f011 ff92 	bl	39310 <z_log_msg_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   273ec:	4b5a      	ldr	r3, [pc, #360]	; (27558 <mem_manage_fault+0x198>)
   273ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   273f0:	06de      	lsls	r6, r3, #27
   273f2:	d50d      	bpl.n	27410 <mem_manage_fault+0x50>
		PR_FAULT_INFO("  Stacking error (context area might be"
   273f4:	6823      	ldr	r3, [r4, #0]
   273f6:	0758      	lsls	r0, r3, #29
   273f8:	d00a      	beq.n	27410 <mem_manage_fault+0x50>
   273fa:	4b58      	ldr	r3, [pc, #352]	; (2755c <mem_manage_fault+0x19c>)
   273fc:	617b      	str	r3, [r7, #20]
   273fe:	2302      	movs	r3, #2
   27400:	4853      	ldr	r0, [pc, #332]	; (27550 <mem_manage_fault+0x190>)
   27402:	613b      	str	r3, [r7, #16]
   27404:	f107 0210 	add.w	r2, r7, #16
   27408:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   2740c:	f011 ff80 	bl	39310 <z_log_msg_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   27410:	4b51      	ldr	r3, [pc, #324]	; (27558 <mem_manage_fault+0x198>)
   27412:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   27414:	0719      	lsls	r1, r3, #28
   27416:	d50d      	bpl.n	27434 <mem_manage_fault+0x74>
		PR_FAULT_INFO("  Unstacking error");
   27418:	6823      	ldr	r3, [r4, #0]
   2741a:	075a      	lsls	r2, r3, #29
   2741c:	d00a      	beq.n	27434 <mem_manage_fault+0x74>
   2741e:	4b50      	ldr	r3, [pc, #320]	; (27560 <mem_manage_fault+0x1a0>)
   27420:	617b      	str	r3, [r7, #20]
   27422:	2302      	movs	r3, #2
   27424:	484a      	ldr	r0, [pc, #296]	; (27550 <mem_manage_fault+0x190>)
   27426:	613b      	str	r3, [r7, #16]
   27428:	f107 0210 	add.w	r2, r7, #16
   2742c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   27430:	f011 ff6e 	bl	39310 <z_log_msg_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   27434:	4b48      	ldr	r3, [pc, #288]	; (27558 <mem_manage_fault+0x198>)
   27436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   27438:	079b      	lsls	r3, r3, #30
   2743a:	d44a      	bmi.n	274d2 <mem_manage_fault+0x112>
	uint32_t mmfar = -EINVAL;
   2743c:	f06f 0615 	mvn.w	r6, #21
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   27440:	4b45      	ldr	r3, [pc, #276]	; (27558 <mem_manage_fault+0x198>)
   27442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   27444:	07da      	lsls	r2, r3, #31
   27446:	d50d      	bpl.n	27464 <mem_manage_fault+0xa4>
		PR_FAULT_INFO("  Instruction Access Violation");
   27448:	6823      	ldr	r3, [r4, #0]
   2744a:	075b      	lsls	r3, r3, #29
   2744c:	d00a      	beq.n	27464 <mem_manage_fault+0xa4>
   2744e:	4b45      	ldr	r3, [pc, #276]	; (27564 <mem_manage_fault+0x1a4>)
   27450:	617b      	str	r3, [r7, #20]
   27452:	2302      	movs	r3, #2
   27454:	483e      	ldr	r0, [pc, #248]	; (27550 <mem_manage_fault+0x190>)
   27456:	613b      	str	r3, [r7, #16]
   27458:	f107 0210 	add.w	r2, r7, #16
   2745c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   27460:	f011 ff56 	bl	39310 <z_log_msg_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   27464:	4b3c      	ldr	r3, [pc, #240]	; (27558 <mem_manage_fault+0x198>)
   27466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   27468:	0698      	lsls	r0, r3, #26
   2746a:	d50d      	bpl.n	27488 <mem_manage_fault+0xc8>
		PR_FAULT_INFO(
   2746c:	6823      	ldr	r3, [r4, #0]
   2746e:	0759      	lsls	r1, r3, #29
   27470:	d00a      	beq.n	27488 <mem_manage_fault+0xc8>
   27472:	4b3d      	ldr	r3, [pc, #244]	; (27568 <mem_manage_fault+0x1a8>)
   27474:	617b      	str	r3, [r7, #20]
   27476:	2302      	movs	r3, #2
   27478:	4835      	ldr	r0, [pc, #212]	; (27550 <mem_manage_fault+0x190>)
   2747a:	613b      	str	r3, [r7, #16]
   2747c:	f107 0210 	add.w	r2, r7, #16
   27480:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   27484:	f011 ff44 	bl	39310 <z_log_msg_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   27488:	4c33      	ldr	r4, [pc, #204]	; (27558 <mem_manage_fault+0x198>)
   2748a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   2748c:	06da      	lsls	r2, r3, #27
   2748e:	d402      	bmi.n	27496 <mem_manage_fault+0xd6>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
   27490:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   27492:	079b      	lsls	r3, r3, #30
   27494:	d559      	bpl.n	2754a <mem_manage_fault+0x18a>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
   27496:	6863      	ldr	r3, [r4, #4]
   27498:	0518      	lsls	r0, r3, #20
   2749a:	d556      	bpl.n	2754a <mem_manage_fault+0x18a>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
   2749c:	4641      	mov	r1, r8
   2749e:	4630      	mov	r0, r6
   274a0:	f7ff fdee 	bl	27080 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
   274a4:	2800      	cmp	r0, #0
   274a6:	d042      	beq.n	2752e <mem_manage_fault+0x16e>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
   274a8:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
   274ac:	2002      	movs	r0, #2
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   274ae:	4b2a      	ldr	r3, [pc, #168]	; (27558 <mem_manage_fault+0x198>)
   274b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   274b2:	0692      	lsls	r2, r2, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
   274b4:	bf42      	ittt	mi
   274b6:	6a5a      	ldrmi	r2, [r3, #36]	; 0x24
   274b8:	f422 5200 	bicmi.w	r2, r2, #8192	; 0x2000
   274bc:	625a      	strmi	r2, [r3, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   274be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   274c0:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
   274c4:	629a      	str	r2, [r3, #40]	; 0x28
}
   274c6:	3718      	adds	r7, #24
	*recoverable = memory_fault_recoverable(esf, true);
   274c8:	2300      	movs	r3, #0
   274ca:	702b      	strb	r3, [r5, #0]
}
   274cc:	46bd      	mov	sp, r7
   274ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		PR_FAULT_INFO("  Data Access Violation");
   274d2:	6823      	ldr	r3, [r4, #0]
   274d4:	075e      	lsls	r6, r3, #29
   274d6:	d00a      	beq.n	274ee <mem_manage_fault+0x12e>
   274d8:	4b24      	ldr	r3, [pc, #144]	; (2756c <mem_manage_fault+0x1ac>)
   274da:	617b      	str	r3, [r7, #20]
   274dc:	2302      	movs	r3, #2
   274de:	481c      	ldr	r0, [pc, #112]	; (27550 <mem_manage_fault+0x190>)
   274e0:	613b      	str	r3, [r7, #16]
   274e2:	f107 0210 	add.w	r2, r7, #16
   274e6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   274ea:	f011 ff11 	bl	39310 <z_log_msg_static_create.constprop.0>
		uint32_t temp = SCB->MMFAR;
   274ee:	4b1a      	ldr	r3, [pc, #104]	; (27558 <mem_manage_fault+0x198>)
   274f0:	6b5e      	ldr	r6, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   274f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   274f4:	0618      	lsls	r0, r3, #24
   274f6:	d5a1      	bpl.n	2743c <mem_manage_fault+0x7c>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
   274f8:	6823      	ldr	r3, [r4, #0]
   274fa:	0759      	lsls	r1, r3, #29
   274fc:	d00e      	beq.n	2751c <mem_manage_fault+0x15c>
   274fe:	46ea      	mov	sl, sp
   27500:	b088      	sub	sp, #32
   27502:	466a      	mov	r2, sp
   27504:	4b1a      	ldr	r3, [pc, #104]	; (27570 <mem_manage_fault+0x1b0>)
   27506:	4812      	ldr	r0, [pc, #72]	; (27550 <mem_manage_fault+0x190>)
   27508:	e9c2 3605 	strd	r3, r6, [r2, #20]
   2750c:	2303      	movs	r3, #3
   2750e:	f842 3f10 	str.w	r3, [r2, #16]!
   27512:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   27516:	f011 fefb 	bl	39310 <z_log_msg_static_create.constprop.0>
   2751a:	46d5      	mov	sp, sl
			if (from_hard_fault != 0) {
   2751c:	f1b9 0f00 	cmp.w	r9, #0
   27520:	d08e      	beq.n	27440 <mem_manage_fault+0x80>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   27522:	4a0d      	ldr	r2, [pc, #52]	; (27558 <mem_manage_fault+0x198>)
   27524:	6a93      	ldr	r3, [r2, #40]	; 0x28
   27526:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   2752a:	6293      	str	r3, [r2, #40]	; 0x28
   2752c:	e788      	b.n	27440 <mem_manage_fault+0x80>
				__ASSERT(!(SCB->CFSR & SCB_CFSR_MSTKERR_Msk),
   2752e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   27530:	06d9      	lsls	r1, r3, #27
   27532:	d50a      	bpl.n	2754a <mem_manage_fault+0x18a>
   27534:	490f      	ldr	r1, [pc, #60]	; (27574 <mem_manage_fault+0x1b4>)
   27536:	4810      	ldr	r0, [pc, #64]	; (27578 <mem_manage_fault+0x1b8>)
   27538:	f44f 72ab 	mov.w	r2, #342	; 0x156
   2753c:	f011 fae9 	bl	38b12 <assert_print>
   27540:	480c      	ldr	r0, [pc, #48]	; (27574 <mem_manage_fault+0x1b4>)
   27542:	f44f 71ab 	mov.w	r1, #342	; 0x156
   27546:	f011 fadd 	bl	38b04 <assert_post_action>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   2754a:	2000      	movs	r0, #0
   2754c:	e7af      	b.n	274ae <mem_manage_fault+0xee>
   2754e:	bf00      	nop
   27550:	20000aec 	.word	0x20000aec
   27554:	0003d999 	.word	0x0003d999
   27558:	e000ed00 	.word	0xe000ed00
   2755c:	0003d9af 	.word	0x0003d9af
   27560:	0003d829 	.word	0x0003d829
   27564:	0003da10 	.word	0x0003da10
   27568:	0003d89d 	.word	0x0003d89d
   2756c:	0003d9e2 	.word	0x0003d9e2
   27570:	0003d9fa 	.word	0x0003d9fa
   27574:	0003da2f 	.word	0x0003da2f
   27578:	0003d1d7 	.word	0x0003d1d7

0002757c <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
   2757c:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   2757e:	4b98      	ldr	r3, [pc, #608]	; (277e0 <z_arm_fault+0x264>)
{
   27580:	b08b      	sub	sp, #44	; 0x2c
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   27582:	685c      	ldr	r4, [r3, #4]
{
   27584:	af00      	add	r7, sp, #0
   27586:	4605      	mov	r5, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   27588:	f3c4 0308 	ubfx	r3, r4, #0, #9
   2758c:	2600      	movs	r6, #0
   2758e:	f386 8811 	msr	BASEPRI, r6
   27592:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   27596:	f002 407f 	and.w	r0, r2, #4278190080	; 0xff000000
   2759a:	f1b0 4f7f 	cmp.w	r0, #4278190080	; 0xff000000
   2759e:	d111      	bne.n	275c4 <z_arm_fault+0x48>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
   275a0:	f002 000c 	and.w	r0, r2, #12
   275a4:	2808      	cmp	r0, #8
   275a6:	d118      	bne.n	275da <z_arm_fault+0x5e>
		PR_EXC("SPSEL in thread mode does not indicate PSP");
   275a8:	488e      	ldr	r0, [pc, #568]	; (277e4 <z_arm_fault+0x268>)
   275aa:	6803      	ldr	r3, [r0, #0]
   275ac:	075c      	lsls	r4, r3, #29
   275ae:	d009      	beq.n	275c4 <z_arm_fault+0x48>
   275b0:	4b8d      	ldr	r3, [pc, #564]	; (277e8 <z_arm_fault+0x26c>)
   275b2:	61fb      	str	r3, [r7, #28]
   275b4:	2302      	movs	r3, #2
   275b6:	61bb      	str	r3, [r7, #24]
   275b8:	f107 0218 	add.w	r2, r7, #24
   275bc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   275c0:	f011 fea6 	bl	39310 <z_log_msg_static_create.constprop.0>

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
   275c4:	4989      	ldr	r1, [pc, #548]	; (277ec <z_arm_fault+0x270>)
   275c6:	488a      	ldr	r0, [pc, #552]	; (277f0 <z_arm_fault+0x274>)
   275c8:	f44f 6284 	mov.w	r2, #1056	; 0x420
   275cc:	f011 faa1 	bl	38b12 <assert_print>
   275d0:	f44f 6184 	mov.w	r1, #1056	; 0x420
			__ASSERT(0,
   275d4:	4885      	ldr	r0, [pc, #532]	; (277ec <z_arm_fault+0x270>)
   275d6:	f011 fa95 	bl	38b04 <assert_post_action>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   275da:	0710      	lsls	r0, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
   275dc:	bf4c      	ite	mi
   275de:	460d      	movmi	r5, r1
			*nested_exc = true;
   275e0:	2601      	movpl	r6, #1
	__ASSERT(esf != NULL,
   275e2:	2d00      	cmp	r5, #0
   275e4:	d0ee      	beq.n	275c4 <z_arm_fault+0x48>
	*recoverable = false;
   275e6:	2200      	movs	r2, #0
   275e8:	71fa      	strb	r2, [r7, #7]
	switch (fault) {
   275ea:	1eda      	subs	r2, r3, #3
   275ec:	2a09      	cmp	r2, #9
   275ee:	f200 80d1 	bhi.w	27794 <z_arm_fault+0x218>
   275f2:	e8df f012 	tbh	[pc, r2, lsl #1]
   275f6:	000a      	.short	0x000a
   275f8:	00be00bb 	.word	0x00be00bb
   275fc:	00cf00a6 	.word	0x00cf00a6
   27600:	00cf00cf 	.word	0x00cf00cf
   27604:	00cf00cf 	.word	0x00cf00cf
   27608:	00c1      	.short	0x00c1
	PR_FAULT_INFO("***** HARD FAULT *****");
   2760a:	4c76      	ldr	r4, [pc, #472]	; (277e4 <z_arm_fault+0x268>)
   2760c:	6823      	ldr	r3, [r4, #0]
   2760e:	0759      	lsls	r1, r3, #29
   27610:	d00a      	beq.n	27628 <z_arm_fault+0xac>
   27612:	4b78      	ldr	r3, [pc, #480]	; (277f4 <z_arm_fault+0x278>)
   27614:	61fb      	str	r3, [r7, #28]
   27616:	2302      	movs	r3, #2
   27618:	61bb      	str	r3, [r7, #24]
   2761a:	f107 0218 	add.w	r2, r7, #24
   2761e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   27622:	4620      	mov	r0, r4
   27624:	f011 fe74 	bl	39310 <z_log_msg_static_create.constprop.0>
	*recoverable = false;
   27628:	2300      	movs	r3, #0
   2762a:	71fb      	strb	r3, [r7, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   2762c:	4b6c      	ldr	r3, [pc, #432]	; (277e0 <z_arm_fault+0x264>)
   2762e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   27630:	0792      	lsls	r2, r2, #30
   27632:	d50f      	bpl.n	27654 <z_arm_fault+0xd8>
		PR_EXC("  Bus fault on vector table read");
   27634:	6823      	ldr	r3, [r4, #0]
   27636:	0758      	lsls	r0, r3, #29
   27638:	d00a      	beq.n	27650 <z_arm_fault+0xd4>
   2763a:	4b6f      	ldr	r3, [pc, #444]	; (277f8 <z_arm_fault+0x27c>)
		PR_EXC("  Debug event");
   2763c:	61fb      	str	r3, [r7, #28]
   2763e:	4869      	ldr	r0, [pc, #420]	; (277e4 <z_arm_fault+0x268>)
   27640:	2302      	movs	r3, #2
   27642:	61bb      	str	r3, [r7, #24]
   27644:	f107 0218 	add.w	r2, r7, #24
   27648:	f44f 5182 	mov.w	r1, #4160	; 0x1040
	PR_FAULT_INFO(
   2764c:	f011 fe60 	bl	39310 <z_log_msg_static_create.constprop.0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   27650:	2400      	movs	r4, #0
   27652:	e044      	b.n	276de <z_arm_fault+0x162>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
   27654:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   27656:	2a00      	cmp	r2, #0
   27658:	da04      	bge.n	27664 <z_arm_fault+0xe8>
		PR_EXC("  Debug event");
   2765a:	6823      	ldr	r3, [r4, #0]
   2765c:	0759      	lsls	r1, r3, #29
   2765e:	d0f7      	beq.n	27650 <z_arm_fault+0xd4>
   27660:	4b66      	ldr	r3, [pc, #408]	; (277fc <z_arm_fault+0x280>)
   27662:	e7eb      	b.n	2763c <z_arm_fault+0xc0>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   27664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   27666:	005a      	lsls	r2, r3, #1
   27668:	d577      	bpl.n	2775a <z_arm_fault+0x1de>
		PR_EXC("  Fault escalation (see below)");
   2766a:	6823      	ldr	r3, [r4, #0]
   2766c:	075b      	lsls	r3, r3, #29
   2766e:	d00a      	beq.n	27686 <z_arm_fault+0x10a>
   27670:	4b63      	ldr	r3, [pc, #396]	; (27800 <z_arm_fault+0x284>)
   27672:	61fb      	str	r3, [r7, #28]
   27674:	2302      	movs	r3, #2
   27676:	485b      	ldr	r0, [pc, #364]	; (277e4 <z_arm_fault+0x268>)
   27678:	61bb      	str	r3, [r7, #24]
   2767a:	f107 0218 	add.w	r2, r7, #24
   2767e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   27682:	f011 fe45 	bl	39310 <z_log_msg_static_create.constprop.0>
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
   27686:	4b56      	ldr	r3, [pc, #344]	; (277e0 <z_arm_fault+0x264>)
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
   27688:	69a9      	ldr	r1, [r5, #24]
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
   2768a:	695a      	ldr	r2, [r3, #20]
   2768c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   27690:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
   27692:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   27696:	f3bf 8f6f 	isb	sy
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
   2769a:	695a      	ldr	r2, [r3, #20]
	uint16_t fault_insn = *(ret_addr - 1);
   2769c:	f831 1c02 	ldrh.w	r1, [r1, #-2]
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
   276a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   276a4:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
   276a6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   276aa:	f3bf 8f6f 	isb	sy
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
   276ae:	f64d 7202 	movw	r2, #57090	; 0xdf02
   276b2:	4291      	cmp	r1, r2
   276b4:	d12e      	bne.n	27714 <z_arm_fault+0x198>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
   276b6:	6823      	ldr	r3, [r4, #0]
   276b8:	0758      	lsls	r0, r3, #29
   276ba:	d00f      	beq.n	276dc <z_arm_fault+0x160>
   276bc:	466c      	mov	r4, sp
   276be:	b088      	sub	sp, #32
   276c0:	682b      	ldr	r3, [r5, #0]
   276c2:	466a      	mov	r2, sp
   276c4:	494f      	ldr	r1, [pc, #316]	; (27804 <z_arm_fault+0x288>)
   276c6:	4847      	ldr	r0, [pc, #284]	; (277e4 <z_arm_fault+0x268>)
   276c8:	e9c2 1305 	strd	r1, r3, [r2, #20]
   276cc:	2303      	movs	r3, #3
   276ce:	f842 3f10 	str.w	r3, [r2, #16]!
   276d2:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   276d6:	f011 fe1b 	bl	39310 <z_log_msg_static_create.constprop.0>
   276da:	46a5      	mov	sp, r4
			reason = esf->basic.r0;
   276dc:	682c      	ldr	r4, [r5, #0]
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
   276de:	79fb      	ldrb	r3, [r7, #7]
   276e0:	b9ab      	cbnz	r3, 2770e <z_arm_fault+0x192>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   276e2:	2220      	movs	r2, #32
   276e4:	4629      	mov	r1, r5
   276e6:	f107 0008 	add.w	r0, r7, #8
   276ea:	f011 fe61 	bl	393b0 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
   276ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   276f0:	2e00      	cmp	r6, #0
   276f2:	d06f      	beq.n	277d4 <z_arm_fault+0x258>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   276f4:	f3c3 0208 	ubfx	r2, r3, #0, #9
   276f8:	b922      	cbnz	r2, 27704 <z_arm_fault+0x188>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   276fa:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   276fe:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   27702:	627b      	str	r3, [r7, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
   27704:	f107 0108 	add.w	r1, r7, #8
   27708:	4620      	mov	r0, r4
   2770a:	f7ff fb4b 	bl	26da4 <z_arm_fatal_error>
}
   2770e:	372c      	adds	r7, #44	; 0x2c
   27710:	46bd      	mov	sp, r7
   27712:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
   27714:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   27716:	b2d2      	uxtb	r2, r2
   27718:	b132      	cbz	r2, 27728 <z_arm_fault+0x1ac>
			reason = mem_manage_fault(esf, 1, recoverable);
   2771a:	1dfa      	adds	r2, r7, #7
   2771c:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
   2771e:	4628      	mov	r0, r5
   27720:	f7ff fe4e 	bl	273c0 <mem_manage_fault>
   27724:	4604      	mov	r4, r0
		break;
   27726:	e7da      	b.n	276de <z_arm_fault+0x162>
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
   27728:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   2772a:	f412 4f7f 	tst.w	r2, #65280	; 0xff00
   2772e:	d004      	beq.n	2773a <z_arm_fault+0x1be>
			reason = bus_fault(esf, 1, recoverable);
   27730:	1df9      	adds	r1, r7, #7
   27732:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
   27734:	f7ff fcfe 	bl	27134 <bus_fault.constprop.0>
   27738:	e7f4      	b.n	27724 <z_arm_fault+0x1a8>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
   2773a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2773c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   27740:	d302      	bcc.n	27748 <z_arm_fault+0x1cc>
		reason = usage_fault(esf);
   27742:	f7ff fdab 	bl	2729c <usage_fault.constprop.0>
   27746:	e7ed      	b.n	27724 <z_arm_fault+0x1a8>
			__ASSERT(0,
   27748:	4928      	ldr	r1, [pc, #160]	; (277ec <z_arm_fault+0x270>)
   2774a:	4829      	ldr	r0, [pc, #164]	; (277f0 <z_arm_fault+0x274>)
   2774c:	f240 22f2 	movw	r2, #754	; 0x2f2
   27750:	f011 f9df 	bl	38b12 <assert_print>
   27754:	f240 21f2 	movw	r1, #754	; 0x2f2
   27758:	e73c      	b.n	275d4 <z_arm_fault+0x58>
		__ASSERT(0,
   2775a:	4924      	ldr	r1, [pc, #144]	; (277ec <z_arm_fault+0x270>)
   2775c:	4824      	ldr	r0, [pc, #144]	; (277f0 <z_arm_fault+0x274>)
   2775e:	f240 22f6 	movw	r2, #758	; 0x2f6
   27762:	f011 f9d6 	bl	38b12 <assert_print>
   27766:	f240 21f6 	movw	r1, #758	; 0x2f6
   2776a:	e733      	b.n	275d4 <z_arm_fault+0x58>
		reason = mem_manage_fault(esf, 0, recoverable);
   2776c:	1dfa      	adds	r2, r7, #7
   2776e:	2100      	movs	r1, #0
   27770:	e7d5      	b.n	2771e <z_arm_fault+0x1a2>
		reason = bus_fault(esf, 0, recoverable);
   27772:	1df9      	adds	r1, r7, #7
   27774:	2000      	movs	r0, #0
   27776:	e7dd      	b.n	27734 <z_arm_fault+0x1b8>
	PR_FAULT_INFO(
   27778:	481a      	ldr	r0, [pc, #104]	; (277e4 <z_arm_fault+0x268>)
   2777a:	6803      	ldr	r3, [r0, #0]
   2777c:	0759      	lsls	r1, r3, #29
   2777e:	f43f af67 	beq.w	27650 <z_arm_fault+0xd4>
   27782:	4b21      	ldr	r3, [pc, #132]	; (27808 <z_arm_fault+0x28c>)
   27784:	61fb      	str	r3, [r7, #28]
   27786:	2302      	movs	r3, #2
   27788:	61bb      	str	r3, [r7, #24]
   2778a:	f107 0218 	add.w	r2, r7, #24
   2778e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   27792:	e75b      	b.n	2764c <z_arm_fault+0xd0>
	PR_FAULT_INFO("***** %s %d) *****",
   27794:	4813      	ldr	r0, [pc, #76]	; (277e4 <z_arm_fault+0x268>)
   27796:	6802      	ldr	r2, [r0, #0]
   27798:	0752      	lsls	r2, r2, #29
   2779a:	f43f af59 	beq.w	27650 <z_arm_fault+0xd4>
   2779e:	4a1b      	ldr	r2, [pc, #108]	; (2780c <z_arm_fault+0x290>)
   277a0:	491b      	ldr	r1, [pc, #108]	; (27810 <z_arm_fault+0x294>)
   277a2:	f414 7ff8 	tst.w	r4, #496	; 0x1f0
   277a6:	466c      	mov	r4, sp
   277a8:	b08a      	sub	sp, #40	; 0x28
   277aa:	bf18      	it	ne
   277ac:	4611      	movne	r1, r2
   277ae:	466a      	mov	r2, sp
   277b0:	3b10      	subs	r3, #16
   277b2:	61d3      	str	r3, [r2, #28]
   277b4:	f8df c05c 	ldr.w	ip, [pc, #92]	; 27814 <z_arm_fault+0x298>
   277b8:	f44f 7300 	mov.w	r3, #512	; 0x200
   277bc:	8413      	strh	r3, [r2, #32]
   277be:	4b16      	ldr	r3, [pc, #88]	; (27818 <z_arm_fault+0x29c>)
   277c0:	e9c2 c105 	strd	ip, r1, [r2, #20]
   277c4:	f842 3f10 	str.w	r3, [r2, #16]!
   277c8:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   277cc:	f011 fda0 	bl	39310 <z_log_msg_static_create.constprop.0>
   277d0:	46a5      	mov	sp, r4
   277d2:	e73d      	b.n	27650 <z_arm_fault+0xd4>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   277d4:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   277d8:	f023 0301 	bic.w	r3, r3, #1
   277dc:	e791      	b.n	27702 <z_arm_fault+0x186>
   277de:	bf00      	nop
   277e0:	e000ed00 	.word	0xe000ed00
   277e4:	20000aec 	.word	0x20000aec
   277e8:	0003da97 	.word	0x0003da97
   277ec:	0003da2f 	.word	0x0003da2f
   277f0:	0003d1d7 	.word	0x0003d1d7
   277f4:	0003dac2 	.word	0x0003dac2
   277f8:	0003dad9 	.word	0x0003dad9
   277fc:	0003dafa 	.word	0x0003dafa
   27800:	0003db08 	.word	0x0003db08
   27804:	0003db27 	.word	0x0003db27
   27808:	0003db43 	.word	0x0003db43
   2780c:	0003da7e 	.word	0x0003da7e
   27810:	0003da69 	.word	0x0003da69
   27814:	0003db67 	.word	0x0003db67
   27818:	01000004 	.word	0x01000004

0002781c <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   2781c:	4a02      	ldr	r2, [pc, #8]	; (27828 <z_arm_fault_init+0xc>)
   2781e:	6953      	ldr	r3, [r2, #20]
   27820:	f043 0310 	orr.w	r3, r3, #16
   27824:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
   27826:	4770      	bx	lr
   27828:	e000ed00 	.word	0xe000ed00

0002782c <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   2782c:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   27830:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
   27834:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
   27836:	4672      	mov	r2, lr
	bl z_arm_fault
   27838:	f7ff fea0 	bl	2757c <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
   2783c:	bd01      	pop	{r0, pc}
   2783e:	bf00      	nop

00027840 <z_arm_interrupt_init>:
   27840:	4804      	ldr	r0, [pc, #16]	; (27854 <z_arm_interrupt_init+0x14>)
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   27842:	2300      	movs	r3, #0
   27844:	2140      	movs	r1, #64	; 0x40
   27846:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   27848:	3301      	adds	r3, #1
   2784a:	2b27      	cmp	r3, #39	; 0x27
   2784c:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
   27850:	d1f9      	bne.n	27846 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
   27852:	4770      	bx	lr
   27854:	e000e100 	.word	0xe000e100

00027858 <__start>:
    strb r0, [r1]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
   27858:	2000      	movs	r0, #0
    msr CONTROL, r0
   2785a:	f380 8814 	msr	CONTROL, r0
    isb
   2785e:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
   27862:	f7fe f86f 	bl	25944 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
   27866:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
   27868:	490d      	ldr	r1, [pc, #52]	; (278a0 <__start+0x48>)
    str r0, [r1]
   2786a:	6008      	str	r0, [r1, #0]
    dsb
   2786c:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   27870:	480c      	ldr	r0, [pc, #48]	; (278a4 <__start+0x4c>)
    msr msp, r0
   27872:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
   27876:	f000 f82b 	bl	278d0 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   2787a:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI, r0
   2787c:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   27880:	4809      	ldr	r0, [pc, #36]	; (278a8 <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   27882:	f44f 6104 	mov.w	r1, #2112	; 0x840
    adds r0, r0, r1
   27886:	1840      	adds	r0, r0, r1
    msr PSP, r0
   27888:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   2788c:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   27890:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   27892:	4308      	orrs	r0, r1
    msr CONTROL, r0
   27894:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   27898:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   2789c:	f7ff fb64 	bl	26f68 <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
   278a0:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   278a4:	20007ac0 	.word	0x20007ac0
    ldr r0, =z_interrupt_stacks
   278a8:	20006d00 	.word	0x20006d00

000278ac <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
   278ac:	4907      	ldr	r1, [pc, #28]	; (278cc <z_arm_clear_arm_mpu_config+0x20>)
   278ae:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90

	for (i = 0; i < num_regions; i++) {
   278b2:	2300      	movs	r3, #0
	int num_regions =
   278b4:	f3c2 2207 	ubfx	r2, r2, #8, #8
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
  MPU->RASR = 0U;
   278b8:	4618      	mov	r0, r3
	for (i = 0; i < num_regions; i++) {
   278ba:	4293      	cmp	r3, r2
   278bc:	db00      	blt.n	278c0 <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
   278be:	4770      	bx	lr
  MPU->RNR = rnr;
   278c0:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  MPU->RASR = 0U;
   278c4:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
   278c8:	3301      	adds	r3, #1
   278ca:	e7f6      	b.n	278ba <z_arm_clear_arm_mpu_config+0xe>
   278cc:	e000ed00 	.word	0xe000ed00

000278d0 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
   278d0:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
   278d2:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
   278d4:	2300      	movs	r3, #0
   278d6:	f383 8813 	msr	FAULTMASK, r3

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
   278da:	f7ff ffe7 	bl	278ac <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
   278de:	4b14      	ldr	r3, [pc, #80]	; (27930 <z_arm_init_arch_hw_at_boot+0x60>)
   278e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   278e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
   278e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
   278ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
   278f0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
   278f4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
   278f8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
   278fc:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
   27900:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
   27904:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   27908:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
   2790c:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
   27910:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
   27914:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
   27918:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
   2791c:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
   27920:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
  __ASM volatile ("cpsie i" : : : "memory");
   27924:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
   27926:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   2792a:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
   2792e:	bd08      	pop	{r3, pc}
   27930:	e000e100 	.word	0xe000e100

00027934 <z_impl_k_thread_abort>:
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
   27934:	4b08      	ldr	r3, [pc, #32]	; (27958 <z_impl_k_thread_abort+0x24>)
   27936:	689b      	ldr	r3, [r3, #8]
   27938:	4283      	cmp	r3, r0
   2793a:	d10b      	bne.n	27954 <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   2793c:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
   27940:	b143      	cbz	r3, 27954 <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   27942:	4b06      	ldr	r3, [pc, #24]	; (2795c <z_impl_k_thread_abort+0x28>)
   27944:	685a      	ldr	r2, [r3, #4]
   27946:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   2794a:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
   2794c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   2794e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
   27952:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
   27954:	f00f bbd8 	b.w	37108 <z_thread_abort>
   27958:	20003384 	.word	0x20003384
   2795c:	e000ed00 	.word	0xe000ed00

00027960 <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   27960:	4b02      	ldr	r3, [pc, #8]	; (2796c <z_arm_configure_static_mpu_regions+0xc>)
   27962:	4a03      	ldr	r2, [pc, #12]	; (27970 <z_arm_configure_static_mpu_regions+0x10>)
   27964:	4803      	ldr	r0, [pc, #12]	; (27974 <z_arm_configure_static_mpu_regions+0x14>)
   27966:	2101      	movs	r1, #1
   27968:	f000 b89a 	b.w	27aa0 <arm_core_mpu_configure_static_mpu_regions>
   2796c:	20010000 	.word	0x20010000
   27970:	20000000 	.word	0x20000000
   27974:	0003c7a4 	.word	0x0003c7a4

00027978 <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
   27978:	6e82      	ldr	r2, [r0, #104]	; 0x68
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
   2797a:	4b05      	ldr	r3, [pc, #20]	; (27990 <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
   2797c:	3a40      	subs	r2, #64	; 0x40
	dynamic_regions[region_num].start = guard_start;
   2797e:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
   27980:	4a04      	ldr	r2, [pc, #16]	; (27994 <z_arm_configure_dynamic_mpu_regions+0x1c>)
   27982:	2140      	movs	r1, #64	; 0x40
   27984:	e9c3 1201 	strd	r1, r2, [r3, #4]

	/* Configure the dynamic MPU regions */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
   27988:	4618      	mov	r0, r3
   2798a:	2101      	movs	r1, #1
   2798c:	f000 b8a4 	b.w	27ad8 <arm_core_mpu_configure_dynamic_mpu_regions>
   27990:	20002e00 	.word	0x20002e00
   27994:	150b0000 	.word	0x150b0000

00027998 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
   27998:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
   2799c:	f8df e0c4 	ldr.w	lr, [pc, #196]	; 27a64 <mpu_configure_regions+0xcc>
   279a0:	469c      	mov	ip, r3
   279a2:	af00      	add	r7, sp, #0
	int i;
	int reg_index = start_reg_index;
   279a4:	4615      	mov	r5, r2

	for (i = 0; i < regions_num; i++) {
   279a6:	2300      	movs	r3, #0
   279a8:	428b      	cmp	r3, r1
   279aa:	da1d      	bge.n	279e8 <mpu_configure_regions+0x50>
		if (regions[i].size == 0U) {
   279ac:	6844      	ldr	r4, [r0, #4]
   279ae:	2c00      	cmp	r4, #0
   279b0:	d054      	beq.n	27a5c <mpu_configure_regions+0xc4>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
   279b2:	f1bc 0f00 	cmp.w	ip, #0
   279b6:	d020      	beq.n	279fa <mpu_configure_regions+0x62>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
   279b8:	1e66      	subs	r6, r4, #1
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
   279ba:	4234      	tst	r4, r6
   279bc:	d018      	beq.n	279f0 <mpu_configure_regions+0x58>
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
   279be:	482a      	ldr	r0, [pc, #168]	; (27a68 <mpu_configure_regions+0xd0>)
   279c0:	6802      	ldr	r2, [r0, #0]
   279c2:	0752      	lsls	r2, r2, #29
   279c4:	d00e      	beq.n	279e4 <mpu_configure_regions+0x4c>
   279c6:	466c      	mov	r4, sp
   279c8:	b088      	sub	sp, #32
   279ca:	466a      	mov	r2, sp
   279cc:	4927      	ldr	r1, [pc, #156]	; (27a6c <mpu_configure_regions+0xd4>)
   279ce:	e9c2 1305 	strd	r1, r3, [r2, #20]
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   279d2:	2303      	movs	r3, #3
   279d4:	f842 3f10 	str.w	r3, [r2, #16]!
   279d8:	2300      	movs	r3, #0
   279da:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   279de:	f7fe fbe5 	bl	261ac <z_impl_z_log_msg_static_create>
   279e2:	46a5      	mov	sp, r4
			return -EINVAL;
   279e4:	f06f 0515 	mvn.w	r5, #21
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
   279e8:	4628      	mov	r0, r5
   279ea:	46bd      	mov	sp, r7
   279ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		&&
   279f0:	2c1f      	cmp	r4, #31
   279f2:	d9e4      	bls.n	279be <mpu_configure_regions+0x26>
		((part->start & (part->size - 1U)) == 0U);
   279f4:	6802      	ldr	r2, [r0, #0]
		&&
   279f6:	4216      	tst	r6, r2
   279f8:	d1e1      	bne.n	279be <mpu_configure_regions+0x26>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
   279fa:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
   279fc:	6802      	ldr	r2, [r0, #0]
#if defined(CONFIG_CPU_AARCH32_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   279fe:	6886      	ldr	r6, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
   27a00:	fa5f f885 	uxtb.w	r8, r5
	if (size <= 32U) {
   27a04:	d918      	bls.n	27a38 <mpu_configure_regions+0xa0>
	if (size > (1UL << 31)) {
   27a06:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
   27a0a:	d817      	bhi.n	27a3c <mpu_configure_regions+0xa4>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
   27a0c:	3c01      	subs	r4, #1
   27a0e:	fab4 f484 	clz	r4, r4
   27a12:	f1c4 041f 	rsb	r4, r4, #31
   27a16:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
   27a18:	f1b8 0f07 	cmp.w	r8, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   27a1c:	ea46 0604 	orr.w	r6, r6, r4
   27a20:	d90e      	bls.n	27a40 <mpu_configure_regions+0xa8>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   27a22:	4811      	ldr	r0, [pc, #68]	; (27a68 <mpu_configure_regions+0xd0>)
   27a24:	6803      	ldr	r3, [r0, #0]
   27a26:	075b      	lsls	r3, r3, #29
   27a28:	d0dc      	beq.n	279e4 <mpu_configure_regions+0x4c>
   27a2a:	466c      	mov	r4, sp
   27a2c:	b088      	sub	sp, #32
   27a2e:	466a      	mov	r2, sp
   27a30:	4b0f      	ldr	r3, [pc, #60]	; (27a70 <mpu_configure_regions+0xd8>)
   27a32:	e9c2 3505 	strd	r3, r5, [r2, #20]
   27a36:	e7cc      	b.n	279d2 <mpu_configure_regions+0x3a>
		return REGION_32B;
   27a38:	2408      	movs	r4, #8
   27a3a:	e7ed      	b.n	27a18 <mpu_configure_regions+0x80>
		return REGION_4G;
   27a3c:	243e      	movs	r4, #62	; 0x3e
   27a3e:	e7eb      	b.n	27a18 <mpu_configure_regions+0x80>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   27a40:	f022 021f 	bic.w	r2, r2, #31
				| MPU_RBAR_VALID_Msk | index;
   27a44:	432a      	orrs	r2, r5
   27a46:	f042 0210 	orr.w	r2, r2, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   27a4a:	f046 0601 	orr.w	r6, r6, #1
   27a4e:	f8ce 5098 	str.w	r5, [lr, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   27a52:	f8ce 209c 	str.w	r2, [lr, #156]	; 0x9c
		reg_index++;
   27a56:	3501      	adds	r5, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   27a58:	f8ce 60a0 	str.w	r6, [lr, #160]	; 0xa0
	for (i = 0; i < regions_num; i++) {
   27a5c:	3301      	adds	r3, #1
   27a5e:	300c      	adds	r0, #12
   27a60:	e7a2      	b.n	279a8 <mpu_configure_regions+0x10>
   27a62:	bf00      	nop
   27a64:	e000ed00 	.word	0xe000ed00
   27a68:	20000ae4 	.word	0x20000ae4
   27a6c:	0003db7e 	.word	0x0003db7e
   27a70:	0003dba1 	.word	0x0003dba1

00027a74 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   27a74:	4b04      	ldr	r3, [pc, #16]	; (27a88 <arm_core_mpu_enable+0x14>)
   27a76:	2205      	movs	r2, #5
   27a78:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
   27a7c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   27a80:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   27a84:	4770      	bx	lr
   27a86:	bf00      	nop
   27a88:	e000ed00 	.word	0xe000ed00

00027a8c <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
   27a8c:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   27a90:	4b02      	ldr	r3, [pc, #8]	; (27a9c <arm_core_mpu_disable+0x10>)
   27a92:	2200      	movs	r2, #0
   27a94:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
   27a98:	4770      	bx	lr
   27a9a:	bf00      	nop
   27a9c:	e000ed00 	.word	0xe000ed00

00027aa0 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	*static_regions, const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
   27aa0:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
   27aa2:	4c0a      	ldr	r4, [pc, #40]	; (27acc <arm_core_mpu_configure_static_mpu_regions+0x2c>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
   27aa4:	2301      	movs	r3, #1
   27aa6:	7822      	ldrb	r2, [r4, #0]
   27aa8:	f7ff ff76 	bl	27998 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   27aac:	7020      	strb	r0, [r4, #0]
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
   27aae:	3016      	adds	r0, #22
   27ab0:	d10a      	bne.n	27ac8 <arm_core_mpu_configure_static_mpu_regions+0x28>
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
   27ab2:	4907      	ldr	r1, [pc, #28]	; (27ad0 <arm_core_mpu_configure_static_mpu_regions+0x30>)
   27ab4:	4807      	ldr	r0, [pc, #28]	; (27ad4 <arm_core_mpu_configure_static_mpu_regions+0x34>)
   27ab6:	f44f 728b 	mov.w	r2, #278	; 0x116
   27aba:	f011 f82a 	bl	38b12 <assert_print>
   27abe:	4804      	ldr	r0, [pc, #16]	; (27ad0 <arm_core_mpu_configure_static_mpu_regions+0x30>)
   27ac0:	f44f 718b 	mov.w	r1, #278	; 0x116
   27ac4:	f011 f81e 	bl	38b04 <assert_post_action>
			regions_num);
	}
}
   27ac8:	bd10      	pop	{r4, pc}
   27aca:	bf00      	nop
   27acc:	20003412 	.word	0x20003412
   27ad0:	0003dbc7 	.word	0x0003dbc7
   27ad4:	0003d1d7 	.word	0x0003d1d7

00027ad8 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	*dynamic_regions, uint8_t regions_num)
{
   27ad8:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
   27ada:	4a0f      	ldr	r2, [pc, #60]	; (27b18 <arm_core_mpu_configure_dynamic_mpu_regions+0x40>)
   27adc:	2300      	movs	r3, #0
   27ade:	7812      	ldrb	r2, [r2, #0]
   27ae0:	f7ff ff5a 	bl	27998 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
   27ae4:	f110 0f16 	cmn.w	r0, #22
   27ae8:	d004      	beq.n	27af4 <arm_core_mpu_configure_dynamic_mpu_regions+0x1c>
  MPU->RNR = rnr;
   27aea:	4b0c      	ldr	r3, [pc, #48]	; (27b1c <arm_core_mpu_configure_dynamic_mpu_regions+0x44>)
  MPU->RASR = 0U;
   27aec:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
   27aee:	2807      	cmp	r0, #7
   27af0:	dd0b      	ble.n	27b0a <arm_core_mpu_configure_dynamic_mpu_regions+0x32>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
   27af2:	bd08      	pop	{r3, pc}
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
   27af4:	490a      	ldr	r1, [pc, #40]	; (27b20 <arm_core_mpu_configure_dynamic_mpu_regions+0x48>)
   27af6:	480b      	ldr	r0, [pc, #44]	; (27b24 <arm_core_mpu_configure_dynamic_mpu_regions+0x4c>)
   27af8:	f240 1235 	movw	r2, #309	; 0x135
   27afc:	f011 f809 	bl	38b12 <assert_print>
   27b00:	4807      	ldr	r0, [pc, #28]	; (27b20 <arm_core_mpu_configure_dynamic_mpu_regions+0x48>)
   27b02:	f240 1135 	movw	r1, #309	; 0x135
   27b06:	f010 fffd 	bl	38b04 <assert_post_action>
  MPU->RNR = rnr;
   27b0a:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
  MPU->RASR = 0U;
   27b0e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
   27b12:	3001      	adds	r0, #1
   27b14:	e7eb      	b.n	27aee <arm_core_mpu_configure_dynamic_mpu_regions+0x16>
   27b16:	bf00      	nop
   27b18:	20003412 	.word	0x20003412
   27b1c:	e000ed00 	.word	0xe000ed00
   27b20:	0003dbc7 	.word	0x0003dbc7
   27b24:	0003d1d7 	.word	0x0003d1d7

00027b28 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   27b28:	4920      	ldr	r1, [pc, #128]	; (27bac <z_arm_mpu_init+0x84>)
{
   27b2a:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
   27b2c:	680c      	ldr	r4, [r1, #0]
   27b2e:	2c08      	cmp	r4, #8
   27b30:	d90a      	bls.n	27b48 <z_arm_mpu_init+0x20>
		 * what is supported by hardware. As this operation
		 * is executed during system (pre-kernel) initialization,
		 * we want to ensure we can detect an attempt to
		 * perform invalid configuration.
		 */
		__ASSERT(0,
   27b32:	491f      	ldr	r1, [pc, #124]	; (27bb0 <z_arm_mpu_init+0x88>)
   27b34:	481f      	ldr	r0, [pc, #124]	; (27bb4 <z_arm_mpu_init+0x8c>)
   27b36:	f240 124d 	movw	r2, #333	; 0x14d
   27b3a:	f010 ffea 	bl	38b12 <assert_print>
   27b3e:	f240 114d 	movw	r1, #333	; 0x14d

	/* Sanity check for number of regions in Cortex-M0+, M3, and M4. */
#if defined(CONFIG_CPU_CORTEX_M0PLUS) || \
	defined(CONFIG_CPU_CORTEX_M3) || \
	defined(CONFIG_CPU_CORTEX_M4)
	__ASSERT(
   27b42:	481b      	ldr	r0, [pc, #108]	; (27bb0 <z_arm_mpu_init+0x88>)
   27b44:	f010 ffde 	bl	38b04 <assert_post_action>
	arm_core_mpu_disable();
   27b48:	f7ff ffa0 	bl	27a8c <arm_core_mpu_disable>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   27b4c:	6848      	ldr	r0, [r1, #4]
   27b4e:	491a      	ldr	r1, [pc, #104]	; (27bb8 <z_arm_mpu_init+0x90>)
   27b50:	2200      	movs	r2, #0
   27b52:	4294      	cmp	r4, r2
   27b54:	f100 000c 	add.w	r0, r0, #12
   27b58:	d112      	bne.n	27b80 <z_arm_mpu_init+0x58>
	static_regions_num = mpu_config.num_regions;
   27b5a:	4b18      	ldr	r3, [pc, #96]	; (27bbc <z_arm_mpu_init+0x94>)
   27b5c:	701c      	strb	r4, [r3, #0]
	arm_core_mpu_enable();
   27b5e:	f7ff ff89 	bl	27a74 <arm_core_mpu_enable>
	__ASSERT(
   27b62:	f8d1 3090 	ldr.w	r3, [r1, #144]	; 0x90
   27b66:	f3c3 2307 	ubfx	r3, r3, #8, #8
   27b6a:	2b08      	cmp	r3, #8
   27b6c:	d01b      	beq.n	27ba6 <z_arm_mpu_init+0x7e>
   27b6e:	4910      	ldr	r1, [pc, #64]	; (27bb0 <z_arm_mpu_init+0x88>)
   27b70:	4810      	ldr	r0, [pc, #64]	; (27bb4 <z_arm_mpu_init+0x8c>)
   27b72:	f240 12ad 	movw	r2, #429	; 0x1ad
   27b76:	f010 ffcc 	bl	38b12 <assert_print>
   27b7a:	f240 11ad 	movw	r1, #429	; 0x1ad
   27b7e:	e7e0      	b.n	27b42 <z_arm_mpu_init+0x1a>
   27b80:	f8c1 2098 	str.w	r2, [r1, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   27b84:	f850 3c0c 	ldr.w	r3, [r0, #-12]
   27b88:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
   27b8c:	4313      	orrs	r3, r2
   27b8e:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   27b92:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   27b96:	f850 3c04 	ldr.w	r3, [r0, #-4]
   27b9a:	f043 0301 	orr.w	r3, r3, #1
   27b9e:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   27ba2:	3201      	adds	r2, #1
   27ba4:	e7d5      	b.n	27b52 <z_arm_mpu_init+0x2a>
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
}
   27ba6:	2000      	movs	r0, #0
   27ba8:	bd10      	pop	{r4, pc}
   27baa:	bf00      	nop
   27bac:	0003c7b0 	.word	0x0003c7b0
   27bb0:	0003dbc7 	.word	0x0003dbc7
   27bb4:	0003d1d7 	.word	0x0003d1d7
   27bb8:	e000ed00 	.word	0xe000ed00
   27bbc:	20003412 	.word	0x20003412

00027bc0 <__stdout_hook_install>:

static int (*_stdout_hook)(int c) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int c))
{
	_stdout_hook = hook;
   27bc0:	4b01      	ldr	r3, [pc, #4]	; (27bc8 <__stdout_hook_install+0x8>)
   27bc2:	6018      	str	r0, [r3, #0]
}
   27bc4:	4770      	bx	lr
   27bc6:	bf00      	nop
   27bc8:	2000066c 	.word	0x2000066c

00027bcc <nordicsemi_nrf52_init>:
	__asm__ volatile(
   27bcc:	f04f 0240 	mov.w	r2, #64	; 0x40
   27bd0:	f3ef 8311 	mrs	r3, BASEPRI
   27bd4:	f382 8812 	msr	BASEPRI_MAX, r2
   27bd8:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
   27bdc:	4a04      	ldr	r2, [pc, #16]	; (27bf0 <nordicsemi_nrf52_init+0x24>)
   27bde:	2101      	movs	r1, #1
   27be0:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
   27be4:	f383 8811 	msr	BASEPRI, r3
   27be8:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   27bec:	2000      	movs	r0, #0
   27bee:	4770      	bx	lr
   27bf0:	4001e000 	.word	0x4001e000

00027bf4 <sys_arch_reboot>:
    }
    else
    {
        p_gpregret = &((volatile uint32_t *)&p_reg->GPREGRET)[0];
    }
    *p_gpregret = val;
   27bf4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   27bf8:	b2c0      	uxtb	r0, r0
   27bfa:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
   27bfe:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   27c02:	4905      	ldr	r1, [pc, #20]	; (27c18 <sys_arch_reboot+0x24>)
   27c04:	4b05      	ldr	r3, [pc, #20]	; (27c1c <sys_arch_reboot+0x28>)
   27c06:	68ca      	ldr	r2, [r1, #12]
   27c08:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   27c0c:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   27c0e:	60cb      	str	r3, [r1, #12]
   27c10:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   27c14:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   27c16:	e7fd      	b.n	27c14 <sys_arch_reboot+0x20>
   27c18:	e000ed00 	.word	0xe000ed00
   27c1c:	05fa0004 	.word	0x05fa0004

00027c20 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
   27c20:	b120      	cbz	r0, 27c2c <arch_busy_wait+0xc>
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
   27c22:	4b03      	ldr	r3, [pc, #12]	; (27c30 <arch_busy_wait+0x10>)
   27c24:	0180      	lsls	r0, r0, #6
   27c26:	f043 0301 	orr.w	r3, r3, #1
   27c2a:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
   27c2c:	4770      	bx	lr
   27c2e:	bf00      	nop
   27c30:	0003c680 	.word	0x0003c680

00027c34 <pwr_ctrl_init>:

static const struct gpio_dt_spec ccs_gpio =
	GPIO_DT_SPEC_GET(DT_NODELABEL(ccs_pwr), enable_gpios);

static int pwr_ctrl_init(const struct device *dev)
{
   27c34:	b510      	push	{r4, lr}
   27c36:	4c15      	ldr	r4, [pc, #84]	; (27c8c <pwr_ctrl_init+0x58>)
   27c38:	4620      	mov	r0, r4
   27c3a:	f013 ffaf 	bl	3bb9c <z_device_is_ready>
	int ret;

	if (!device_is_ready(ccs_gpio.port)) {
   27c3e:	b310      	cbz	r0, 27c86 <pwr_ctrl_init+0x52>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   27c40:	6863      	ldr	r3, [r4, #4]
	const struct gpio_driver_api *api =
   27c42:	68a1      	ldr	r1, [r4, #8]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   27c44:	681b      	ldr	r3, [r3, #0]
	struct gpio_driver_data *data =
   27c46:	6922      	ldr	r2, [r4, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   27c48:	055b      	lsls	r3, r3, #21
   27c4a:	d40a      	bmi.n	27c62 <pwr_ctrl_init+0x2e>
   27c4c:	4910      	ldr	r1, [pc, #64]	; (27c90 <pwr_ctrl_init+0x5c>)
   27c4e:	4811      	ldr	r0, [pc, #68]	; (27c94 <pwr_ctrl_init+0x60>)
   27c50:	f44f 7237 	mov.w	r2, #732	; 0x2dc
   27c54:	f010 ff5d 	bl	38b12 <assert_print>
   27c58:	480d      	ldr	r0, [pc, #52]	; (27c90 <pwr_ctrl_init+0x5c>)
   27c5a:	f44f 7137 	mov.w	r1, #732	; 0x2dc
   27c5e:	f010 ff51 	bl	38b04 <assert_post_action>
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   27c62:	6813      	ldr	r3, [r2, #0]
   27c64:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
   27c68:	6013      	str	r3, [r2, #0]
	return api->pin_configure(port, pin, flags);
   27c6a:	680b      	ldr	r3, [r1, #0]
   27c6c:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
   27c70:	210a      	movs	r1, #10
   27c72:	4620      	mov	r0, r4
   27c74:	4798      	blx	r3
		return -ENODEV;
	}

	ret = gpio_pin_configure_dt(&ccs_gpio, GPIO_OUTPUT_HIGH);
	if (ret < 0) {
   27c76:	2800      	cmp	r0, #0
   27c78:	db04      	blt.n	27c84 <pwr_ctrl_init+0x50>
   27c7a:	2021      	movs	r0, #33	; 0x21
   27c7c:	2100      	movs	r1, #0
   27c7e:	f00f fa11 	bl	370a4 <z_impl_k_sleep>
		return ret;
	}

	k_sleep(K_MSEC(1)); /* Wait for the rail to come up and stabilize */
   27c82:	2000      	movs	r0, #0

	return 0;
}
   27c84:	bd10      	pop	{r4, pc}
		return -ENODEV;
   27c86:	f06f 0012 	mvn.w	r0, #18
   27c8a:	e7fb      	b.n	27c84 <pwr_ctrl_init+0x50>
   27c8c:	0003c1f0 	.word	0x0003c1f0
   27c90:	0003d1a6 	.word	0x0003d1a6
   27c94:	0003d1d7 	.word	0x0003d1d7

00027c98 <bt_hex>:
	static const char hex[] = "0123456789abcdef";
	static char str[129];
	const uint8_t *b = buf;
	size_t i;

	len = MIN(len, (sizeof(str) - 1) / 2);
   27c98:	4b0e      	ldr	r3, [pc, #56]	; (27cd4 <bt_hex+0x3c>)
   27c9a:	2940      	cmp	r1, #64	; 0x40
{
   27c9c:	b570      	push	{r4, r5, r6, lr}
	len = MIN(len, (sizeof(str) - 1) / 2);
   27c9e:	bf28      	it	cs
   27ca0:	2140      	movcs	r1, #64	; 0x40

	for (i = 0; i < len; i++) {
		str[i * 2] = hex[b[i] >> 4];
   27ca2:	4c0d      	ldr	r4, [pc, #52]	; (27cd8 <bt_hex+0x40>)
   27ca4:	1846      	adds	r6, r0, r1
   27ca6:	461d      	mov	r5, r3
	for (i = 0; i < len; i++) {
   27ca8:	42b0      	cmp	r0, r6
   27caa:	f103 0302 	add.w	r3, r3, #2
   27cae:	d104      	bne.n	27cba <bt_hex+0x22>
		str[i * 2 + 1] = hex[b[i] & 0xf];
	}

	str[i * 2] = '\0';
   27cb0:	2300      	movs	r3, #0
   27cb2:	f805 3011 	strb.w	r3, [r5, r1, lsl #1]

	return str;
}
   27cb6:	4807      	ldr	r0, [pc, #28]	; (27cd4 <bt_hex+0x3c>)
   27cb8:	bd70      	pop	{r4, r5, r6, pc}
		str[i * 2] = hex[b[i] >> 4];
   27cba:	7802      	ldrb	r2, [r0, #0]
   27cbc:	0912      	lsrs	r2, r2, #4
   27cbe:	5ca2      	ldrb	r2, [r4, r2]
   27cc0:	f803 2c02 	strb.w	r2, [r3, #-2]
		str[i * 2 + 1] = hex[b[i] & 0xf];
   27cc4:	f810 2b01 	ldrb.w	r2, [r0], #1
   27cc8:	f002 020f 	and.w	r2, r2, #15
   27ccc:	5ca2      	ldrb	r2, [r4, r2]
   27cce:	f803 2c01 	strb.w	r2, [r3, #-1]
	for (i = 0; i < len; i++) {
   27cd2:	e7e9      	b.n	27ca8 <bt_hex+0x10>
   27cd4:	20003431 	.word	0x20003431
   27cd8:	0003dc70 	.word	0x0003dc70

00027cdc <bt_addr_le_str>:

	return str;
}

const char *bt_addr_le_str(const bt_addr_le_t *addr)
{
   27cdc:	b530      	push	{r4, r5, lr}
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
				    size_t len)
{
	char type[10];

	switch (addr->type) {
   27cde:	7803      	ldrb	r3, [r0, #0]
   27ce0:	b08b      	sub	sp, #44	; 0x2c
   27ce2:	4604      	mov	r4, r0
   27ce4:	ad07      	add	r5, sp, #28
   27ce6:	2b03      	cmp	r3, #3
   27ce8:	d821      	bhi.n	27d2e <bt_addr_le_str+0x52>
   27cea:	e8df f003 	tbb	[pc, r3]
   27cee:	1a02      	.short	0x1a02
   27cf0:	1e1c      	.short	0x1e1c
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
   27cf2:	4912      	ldr	r1, [pc, #72]	; (27d3c <bt_addr_le_str+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
   27cf4:	4628      	mov	r0, r5
   27cf6:	f011 fb0e 	bl	39316 <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
   27cfa:	9505      	str	r5, [sp, #20]
   27cfc:	7863      	ldrb	r3, [r4, #1]
   27cfe:	9304      	str	r3, [sp, #16]
   27d00:	78a3      	ldrb	r3, [r4, #2]
   27d02:	9303      	str	r3, [sp, #12]
   27d04:	78e3      	ldrb	r3, [r4, #3]
   27d06:	9302      	str	r3, [sp, #8]
   27d08:	7923      	ldrb	r3, [r4, #4]
   27d0a:	9301      	str	r3, [sp, #4]
   27d0c:	7963      	ldrb	r3, [r4, #5]
   27d0e:	9300      	str	r3, [sp, #0]
   27d10:	79a3      	ldrb	r3, [r4, #6]
   27d12:	4a0b      	ldr	r2, [pc, #44]	; (27d40 <bt_addr_le_str+0x64>)
   27d14:	480b      	ldr	r0, [pc, #44]	; (27d44 <bt_addr_le_str+0x68>)
   27d16:	211e      	movs	r1, #30
   27d18:	f010 fd00 	bl	3871c <snprintk>
	static char str[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(addr, str, sizeof(str));

	return str;
}
   27d1c:	4809      	ldr	r0, [pc, #36]	; (27d44 <bt_addr_le_str+0x68>)
   27d1e:	b00b      	add	sp, #44	; 0x2c
   27d20:	bd30      	pop	{r4, r5, pc}
		strcpy(type, "random");
   27d22:	4909      	ldr	r1, [pc, #36]	; (27d48 <bt_addr_le_str+0x6c>)
   27d24:	e7e6      	b.n	27cf4 <bt_addr_le_str+0x18>
		strcpy(type, "public-id");
   27d26:	4909      	ldr	r1, [pc, #36]	; (27d4c <bt_addr_le_str+0x70>)
   27d28:	e7e4      	b.n	27cf4 <bt_addr_le_str+0x18>
		strcpy(type, "random-id");
   27d2a:	4909      	ldr	r1, [pc, #36]	; (27d50 <bt_addr_le_str+0x74>)
   27d2c:	e7e2      	b.n	27cf4 <bt_addr_le_str+0x18>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
   27d2e:	4a09      	ldr	r2, [pc, #36]	; (27d54 <bt_addr_le_str+0x78>)
   27d30:	210a      	movs	r1, #10
   27d32:	4628      	mov	r0, r5
   27d34:	f010 fcf2 	bl	3871c <snprintk>
		break;
   27d38:	e7df      	b.n	27cfa <bt_addr_le_str+0x1e>
   27d3a:	bf00      	nop
   27d3c:	0003dc2b 	.word	0x0003dc2b
   27d40:	0003dc4d 	.word	0x0003dc4d
   27d44:	20003413 	.word	0x20003413
   27d48:	0003dc32 	.word	0x0003dc32
   27d4c:	0003dc39 	.word	0x0003dc39
   27d50:	0003dc43 	.word	0x0003dc43
   27d54:	0003e804 	.word	0x0003e804

00027d58 <long_wq_init>:
{
	return k_work_submit_to_queue(&bt_long_wq, work);
}

static int long_wq_init(const struct device *d)
{
   27d58:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(d);

	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};

	k_work_queue_init(&bt_long_wq);
   27d5a:	4d0a      	ldr	r5, [pc, #40]	; (27d84 <long_wq_init+0x2c>)
	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
   27d5c:	4b0a      	ldr	r3, [pc, #40]	; (27d88 <long_wq_init+0x30>)
{
   27d5e:	b085      	sub	sp, #20
	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
   27d60:	2400      	movs	r4, #0
	k_work_queue_init(&bt_long_wq);
   27d62:	4628      	mov	r0, r5
	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
   27d64:	9302      	str	r3, [sp, #8]
   27d66:	9403      	str	r4, [sp, #12]
	k_work_queue_init(&bt_long_wq);
   27d68:	f00e f89c 	bl	35ea4 <k_work_queue_init>

	k_work_queue_start(&bt_long_wq, bt_lw_stack_area,
   27d6c:	ab02      	add	r3, sp, #8
   27d6e:	9300      	str	r3, [sp, #0]
   27d70:	4628      	mov	r0, r5
   27d72:	4906      	ldr	r1, [pc, #24]	; (27d8c <long_wq_init+0x34>)
   27d74:	230a      	movs	r3, #10
   27d76:	f44f 62a3 	mov.w	r2, #1304	; 0x518
   27d7a:	f00e f8a9 	bl	35ed0 <k_work_queue_start>
			   K_THREAD_STACK_SIZEOF(bt_lw_stack_area),
			   CONFIG_BT_LONG_WQ_PRIO, &cfg);

	return 0;
}
   27d7e:	4620      	mov	r0, r4
   27d80:	b005      	add	sp, #20
   27d82:	bd30      	pop	{r4, r5, pc}
   27d84:	20002520 	.word	0x20002520
   27d88:	0003dc81 	.word	0x0003dc81
   27d8c:	20004c80 	.word	0x20004c80

00027d90 <bt_long_wq_schedule>:
{
   27d90:	4601      	mov	r1, r0
	return k_work_schedule_for_queue(&bt_long_wq, dwork, timeout);
   27d92:	4801      	ldr	r0, [pc, #4]	; (27d98 <bt_long_wq_schedule+0x8>)
   27d94:	f00e b922 	b.w	35fdc <k_work_schedule_for_queue>
   27d98:	20002520 	.word	0x20002520

00027d9c <uuid_to_uuid128>:
	.val = { BT_UUID_128_ENCODE(
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
   27d9c:	b430      	push	{r4, r5}
   27d9e:	4603      	mov	r3, r0
   27da0:	4608      	mov	r0, r1
	switch (src->type) {
   27da2:	781a      	ldrb	r2, [r3, #0]
   27da4:	2a01      	cmp	r2, #1
   27da6:	d013      	beq.n	27dd0 <uuid_to_uuid128+0x34>
   27da8:	2a02      	cmp	r2, #2
   27daa:	d026      	beq.n	27dfa <uuid_to_uuid128+0x5e>
   27dac:	b972      	cbnz	r2, 27dcc <uuid_to_uuid128+0x30>
	case BT_UUID_TYPE_16:
		*dst = uuid128_base;
   27dae:	4a15      	ldr	r2, [pc, #84]	; (27e04 <uuid_to_uuid128+0x68>)
   27db0:	f102 0410 	add.w	r4, r2, #16
   27db4:	f852 5b04 	ldr.w	r5, [r2], #4
   27db8:	f841 5b04 	str.w	r5, [r1], #4
   27dbc:	42a2      	cmp	r2, r4
   27dbe:	d1f9      	bne.n	27db4 <uuid_to_uuid128+0x18>
   27dc0:	7812      	ldrb	r2, [r2, #0]
   27dc2:	700a      	strb	r2, [r1, #0]
		sys_put_le16(BT_UUID_16(src)->val,
   27dc4:	885b      	ldrh	r3, [r3, #2]
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(uint16_t val, uint8_t dst[2])
{
	dst[0] = val;
   27dc6:	7343      	strb	r3, [r0, #13]
	dst[1] = val >> 8;
   27dc8:	0a1b      	lsrs	r3, r3, #8
   27dca:	7383      	strb	r3, [r0, #14]
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
   27dcc:	bc30      	pop	{r4, r5}
   27dce:	4770      	bx	lr
		*dst = uuid128_base;
   27dd0:	4a0c      	ldr	r2, [pc, #48]	; (27e04 <uuid_to_uuid128+0x68>)
   27dd2:	f102 0410 	add.w	r4, r2, #16
   27dd6:	f852 5b04 	ldr.w	r5, [r2], #4
   27dda:	f841 5b04 	str.w	r5, [r1], #4
   27dde:	42a2      	cmp	r2, r4
   27de0:	d1f9      	bne.n	27dd6 <uuid_to_uuid128+0x3a>
   27de2:	7812      	ldrb	r2, [r2, #0]
   27de4:	700a      	strb	r2, [r1, #0]
		sys_put_le32(BT_UUID_32(src)->val,
   27de6:	685b      	ldr	r3, [r3, #4]
	dst[0] = val;
   27de8:	7343      	strb	r3, [r0, #13]
	dst[1] = val >> 8;
   27dea:	f3c3 2207 	ubfx	r2, r3, #8, #8
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le32(uint32_t val, uint8_t dst[4])
{
	sys_put_le16(val, dst);
	sys_put_le16(val >> 16, &dst[2]);
   27dee:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
   27df0:	73c3      	strb	r3, [r0, #15]
	dst[1] = val >> 8;
   27df2:	0a1b      	lsrs	r3, r3, #8
   27df4:	7382      	strb	r2, [r0, #14]
   27df6:	7403      	strb	r3, [r0, #16]
}
   27df8:	e7e8      	b.n	27dcc <uuid_to_uuid128+0x30>
}
   27dfa:	bc30      	pop	{r4, r5}
		memcpy(dst, src, sizeof(*dst));
   27dfc:	2211      	movs	r2, #17
   27dfe:	4619      	mov	r1, r3
   27e00:	f011 bad6 	b.w	393b0 <memcpy>
   27e04:	0003dc8a 	.word	0x0003dc8a

00027e08 <bt_buf_get_rx>:

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
	struct net_buf *buf;

	__ASSERT(type == BT_BUF_EVT || type == BT_BUF_ACL_IN ||
   27e08:	2805      	cmp	r0, #5
{
   27e0a:	b538      	push	{r3, r4, r5, lr}
   27e0c:	4605      	mov	r5, r0
   27e0e:	d803      	bhi.n	27e18 <bt_buf_get_rx+0x10>
   27e10:	212a      	movs	r1, #42	; 0x2a
   27e12:	40c1      	lsrs	r1, r0
   27e14:	07c9      	lsls	r1, r1, #31
   27e16:	d408      	bmi.n	27e2a <bt_buf_get_rx+0x22>
	__ASSERT(type == BT_BUF_EVT || type == BT_BUF_ACL_IN ||
   27e18:	490a      	ldr	r1, [pc, #40]	; (27e44 <bt_buf_get_rx+0x3c>)
   27e1a:	480b      	ldr	r0, [pc, #44]	; (27e48 <bt_buf_get_rx+0x40>)
   27e1c:	223f      	movs	r2, #63	; 0x3f
   27e1e:	f010 fe78 	bl	38b12 <assert_print>
   27e22:	4808      	ldr	r0, [pc, #32]	; (27e44 <bt_buf_get_rx+0x3c>)
   27e24:	213f      	movs	r1, #63	; 0x3f
   27e26:	f010 fe6d 	bl	38b04 <assert_post_action>
 * @copydetails net_buf_alloc_fixed
 */
static inline struct net_buf * __must_check net_buf_alloc(struct net_buf_pool *pool,
							  k_timeout_t timeout)
{
	return net_buf_alloc_fixed(pool, timeout);
   27e2a:	4808      	ldr	r0, [pc, #32]	; (27e4c <bt_buf_get_rx+0x44>)
   27e2c:	f012 fe5b 	bl	3aae6 <net_buf_alloc_fixed>
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
   27e30:	4604      	mov	r4, r0
   27e32:	b120      	cbz	r0, 27e3e <bt_buf_get_rx+0x36>
 * @param buf Buffer to initialize.
 * @param reserve How much headroom to reserve.
 */
static inline void net_buf_reserve(struct net_buf *buf, size_t reserve)
{
	net_buf_simple_reserve(&buf->b, reserve);
   27e34:	2100      	movs	r1, #0
   27e36:	3008      	adds	r0, #8
   27e38:	f006 fc1a 	bl	2e670 <net_buf_simple_reserve>
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   27e3c:	7525      	strb	r5, [r4, #20]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
   27e3e:	4620      	mov	r0, r4
   27e40:	bd38      	pop	{r3, r4, r5, pc}
   27e42:	bf00      	nop
   27e44:	0003dc9b 	.word	0x0003dc9b
   27e48:	0003d1d7 	.word	0x0003d1d7
   27e4c:	20000cbc 	.word	0x20000cbc

00027e50 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
   27e50:	b510      	push	{r4, lr}
   27e52:	460b      	mov	r3, r1
	struct net_buf *buf;

	if (bt_dev.sent_cmd) {
   27e54:	490a      	ldr	r1, [pc, #40]	; (27e80 <bt_buf_get_cmd_complete+0x30>)
{
   27e56:	4602      	mov	r2, r0
	if (bt_dev.sent_cmd) {
   27e58:	f8d1 0110 	ldr.w	r0, [r1, #272]	; 0x110
   27e5c:	b920      	cbnz	r0, 27e68 <bt_buf_get_cmd_complete+0x18>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
   27e5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
   27e62:	2001      	movs	r0, #1
   27e64:	f7ff bfd0 	b.w	27e08 <bt_buf_get_rx>
		buf = net_buf_ref(bt_dev.sent_cmd);
   27e68:	f006 fd4c 	bl	2e904 <net_buf_ref>
   27e6c:	2301      	movs	r3, #1
		buf->len = 0U;
   27e6e:	2100      	movs	r1, #0
   27e70:	7503      	strb	r3, [r0, #20]
   27e72:	8181      	strh	r1, [r0, #12]
		buf = net_buf_ref(bt_dev.sent_cmd);
   27e74:	4604      	mov	r4, r0
   27e76:	3008      	adds	r0, #8
   27e78:	f006 fbfa 	bl	2e670 <net_buf_simple_reserve>
}
   27e7c:	4620      	mov	r0, r4
   27e7e:	bd10      	pop	{r4, pc}
   27e80:	20000400 	.word	0x20000400

00027e84 <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
   27e84:	b570      	push	{r4, r5, r6, lr}
   27e86:	4604      	mov	r4, r0
	switch (evt) {
   27e88:	2c0f      	cmp	r4, #15
{
   27e8a:	460d      	mov	r5, r1
   27e8c:	4610      	mov	r0, r2
   27e8e:	4619      	mov	r1, r3
	switch (evt) {
   27e90:	d805      	bhi.n	27e9e <bt_buf_get_evt+0x1a>
   27e92:	2c0d      	cmp	r4, #13
   27e94:	d90d      	bls.n	27eb2 <bt_buf_get_evt+0x2e>
			return buf;
		}

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
   27e96:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_cmd_complete(timeout);
   27e9a:	f7ff bfd9 	b.w	27e50 <bt_buf_get_cmd_complete>
	switch (evt) {
   27e9e:	2c13      	cmp	r4, #19
   27ea0:	d107      	bne.n	27eb2 <bt_buf_get_evt+0x2e>
	return net_buf_alloc_fixed(pool, timeout);
   27ea2:	480c      	ldr	r0, [pc, #48]	; (27ed4 <bt_buf_get_evt+0x50>)
   27ea4:	f012 fe1f 	bl	3aae6 <net_buf_alloc_fixed>
			if (buf) {
   27ea8:	4604      	mov	r4, r0
   27eaa:	b938      	cbnz	r0, 27ebc <bt_buf_get_evt+0x38>
{
   27eac:	2400      	movs	r4, #0
}
   27eae:	4620      	mov	r0, r4
   27eb0:	bd70      	pop	{r4, r5, r6, pc}
   27eb2:	4602      	mov	r2, r0
   27eb4:	460b      	mov	r3, r1
		if (discardable) {
   27eb6:	b145      	cbz	r5, 27eca <bt_buf_get_evt+0x46>
   27eb8:	4807      	ldr	r0, [pc, #28]	; (27ed8 <bt_buf_get_evt+0x54>)
   27eba:	e7f3      	b.n	27ea4 <bt_buf_get_evt+0x20>
	net_buf_simple_reserve(&buf->b, reserve);
   27ebc:	2100      	movs	r1, #0
   27ebe:	3008      	adds	r0, #8
   27ec0:	f006 fbd6 	bl	2e670 <net_buf_simple_reserve>
   27ec4:	2301      	movs	r3, #1
   27ec6:	7523      	strb	r3, [r4, #20]
}
   27ec8:	e7f1      	b.n	27eae <bt_buf_get_evt+0x2a>
}
   27eca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
   27ece:	2001      	movs	r0, #1
   27ed0:	f7ff bf9a 	b.w	27e08 <bt_buf_get_rx>
   27ed4:	20000cf0 	.word	0x20000cf0
   27ed8:	20000c20 	.word	0x20000c20

00027edc <hci_disconn_complete_prio>:

	return false;
}

static void hci_disconn_complete_prio(struct net_buf *buf)
{
   27edc:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   27ede:	6883      	ldr	r3, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   27ee0:	f8b3 4001 	ldrh.w	r4, [r3, #1]
	struct bt_conn *conn;

	BT_DBG("status 0x%02x handle %u reason 0x%02x", evt->status, handle,
	       evt->reason);

	if (evt->status) {
   27ee4:	781b      	ldrb	r3, [r3, #0]
   27ee6:	b963      	cbnz	r3, 27f02 <hci_disconn_complete_prio+0x26>
		return;
	}

	conn = bt_conn_lookup_handle(handle);
   27ee8:	4620      	mov	r0, r4
   27eea:	f002 ff3f 	bl	2ad6c <bt_conn_lookup_handle>
	if (!conn) {
   27eee:	4605      	mov	r5, r0
   27ef0:	b940      	cbnz	r0, 27f04 <hci_disconn_complete_prio+0x28>
		if (!disconnected_handles[i]) {
   27ef2:	4b08      	ldr	r3, [pc, #32]	; (27f14 <hci_disconn_complete_prio+0x38>)
   27ef4:	881a      	ldrh	r2, [r3, #0]
   27ef6:	b922      	cbnz	r2, 27f02 <hci_disconn_complete_prio+0x26>
			disconnected_handles[i] = ~BT_ACL_HANDLE_MASK | handle;
   27ef8:	ea6f 5004 	mvn.w	r0, r4, lsl #20
   27efc:	ea6f 5010 	mvn.w	r0, r0, lsr #20
   27f00:	8018      	strh	r0, [r3, #0]
		return;
	}

	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
	bt_conn_unref(conn);
}
   27f02:	bd38      	pop	{r3, r4, r5, pc}
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   27f04:	2101      	movs	r1, #1
   27f06:	f002 ff39 	bl	2ad7c <bt_conn_set_state>
	bt_conn_unref(conn);
   27f0a:	4628      	mov	r0, r5
}
   27f0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   27f10:	f002 befc 	b.w	2ad0c <bt_conn_unref>
   27f14:	200033e0 	.word	0x200033e0

00027f18 <hci_data_buf_overflow>:
{
   27f18:	b598      	push	{r3, r4, r7, lr}
   27f1a:	4603      	mov	r3, r0
	BT_WARN("Data buffer overflow (link type 0x%02x)", evt->link_type);
   27f1c:	480b      	ldr	r0, [pc, #44]	; (27f4c <hci_data_buf_overflow+0x34>)
   27f1e:	6802      	ldr	r2, [r0, #0]
   27f20:	f012 0f06 	tst.w	r2, #6
{
   27f24:	af00      	add	r7, sp, #0
	BT_WARN("Data buffer overflow (link type 0x%02x)", evt->link_type);
   27f26:	d00f      	beq.n	27f48 <hci_data_buf_overflow+0x30>
   27f28:	689b      	ldr	r3, [r3, #8]
   27f2a:	466c      	mov	r4, sp
   27f2c:	b088      	sub	sp, #32
   27f2e:	781b      	ldrb	r3, [r3, #0]
   27f30:	466a      	mov	r2, sp
   27f32:	4907      	ldr	r1, [pc, #28]	; (27f50 <hci_data_buf_overflow+0x38>)
   27f34:	e9c2 1305 	strd	r1, r3, [r2, #20]
   27f38:	2303      	movs	r3, #3
   27f3a:	f842 3f10 	str.w	r3, [r2, #16]!
   27f3e:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   27f42:	f011 fad7 	bl	394f4 <z_log_msg_static_create.constprop.0>
   27f46:	46a5      	mov	sp, r4
}
   27f48:	46bd      	mov	sp, r7
   27f4a:	bd98      	pop	{r3, r4, r7, pc}
   27f4c:	20000a8c 	.word	0x20000a8c
   27f50:	0003dcd1 	.word	0x0003dcd1

00027f54 <le_conn_param_neg_reply.part.0>:
	}

	return true;
}

static void le_conn_param_neg_reply(uint16_t handle, uint8_t reason)
   27f54:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct net_buf *buf;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
				sizeof(*cp));
	if (!buf) {
		BT_ERR("Unable to allocate buffer");
   27f56:	4808      	ldr	r0, [pc, #32]	; (27f78 <le_conn_param_neg_reply.part.0+0x24>)
   27f58:	6803      	ldr	r3, [r0, #0]
   27f5a:	075b      	lsls	r3, r3, #29
   27f5c:	d008      	beq.n	27f70 <le_conn_param_neg_reply.part.0+0x1c>
   27f5e:	4b07      	ldr	r3, [pc, #28]	; (27f7c <le_conn_param_neg_reply.part.0+0x28>)
   27f60:	9305      	str	r3, [sp, #20]
   27f62:	aa04      	add	r2, sp, #16
   27f64:	2302      	movs	r3, #2
   27f66:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   27f6a:	9304      	str	r3, [sp, #16]
   27f6c:	f011 fac2 	bl	394f4 <z_log_msg_static_create.constprop.0>
	cp = net_buf_add(buf, sizeof(*cp));
	cp->handle = sys_cpu_to_le16(handle);
	cp->reason = sys_cpu_to_le16(reason);

	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
}
   27f70:	b007      	add	sp, #28
   27f72:	f85d fb04 	ldr.w	pc, [sp], #4
   27f76:	bf00      	nop
   27f78:	20000a8c 	.word	0x20000a8c
   27f7c:	0003dcf9 	.word	0x0003dcf9

00027f80 <le_conn_update_complete>:

	bt_conn_unref(conn);
}

static void le_conn_update_complete(struct net_buf *buf)
{
   27f80:	b5f0      	push	{r4, r5, r6, r7, lr}
   27f82:	b083      	sub	sp, #12
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
   27f84:	6885      	ldr	r5, [r0, #8]
	struct bt_conn *conn;
	uint16_t handle;

	handle = sys_le16_to_cpu(evt->handle);
   27f86:	f8b5 6001 	ldrh.w	r6, [r5, #1]
{
   27f8a:	af00      	add	r7, sp, #0

	BT_DBG("status 0x%02x, handle %u", evt->status, handle);

	conn = bt_conn_lookup_handle(handle);
   27f8c:	4630      	mov	r0, r6
   27f8e:	f002 feed 	bl	2ad6c <bt_conn_lookup_handle>
	if (!conn) {
   27f92:	4604      	mov	r4, r0
   27f94:	b9a0      	cbnz	r0, 27fc0 <le_conn_update_complete+0x40>
		BT_ERR("Unable to lookup conn for handle %u", handle);
   27f96:	4820      	ldr	r0, [pc, #128]	; (28018 <le_conn_update_complete+0x98>)
   27f98:	6803      	ldr	r3, [r0, #0]
   27f9a:	075a      	lsls	r2, r3, #29
   27f9c:	d00d      	beq.n	27fba <le_conn_update_complete+0x3a>
   27f9e:	466c      	mov	r4, sp
   27fa0:	b088      	sub	sp, #32
   27fa2:	466a      	mov	r2, sp
   27fa4:	4b1d      	ldr	r3, [pc, #116]	; (2801c <le_conn_update_complete+0x9c>)
   27fa6:	e9c2 3605 	strd	r3, r6, [r2, #20]
   27faa:	2303      	movs	r3, #3
   27fac:	f842 3f10 	str.w	r3, [r2, #16]!
   27fb0:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   27fb4:	f011 fa9e 	bl	394f4 <z_log_msg_static_create.constprop.0>
   27fb8:	46a5      	mov	sp, r4

		bt_l2cap_update_conn_param(conn, &param);
	}

	bt_conn_unref(conn);
}
   27fba:	370c      	adds	r7, #12
   27fbc:	46bd      	mov	sp, r7
   27fbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!evt->status) {
   27fc0:	782b      	ldrb	r3, [r5, #0]
   27fc2:	b98b      	cbnz	r3, 27fe8 <le_conn_update_complete+0x68>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
   27fc4:	f8b5 3003 	ldrh.w	r3, [r5, #3]
   27fc8:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
		conn->le.latency = sys_le16_to_cpu(evt->latency);
   27fcc:	f8b5 3005 	ldrh.w	r3, [r5, #5]
   27fd0:	f8a0 30ac 	strh.w	r3, [r0, #172]	; 0xac
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   27fd4:	f8b5 3007 	ldrh.w	r3, [r5, #7]
   27fd8:	f8a0 30ae 	strh.w	r3, [r0, #174]	; 0xae
		notify_le_param_updated(conn);
   27fdc:	f003 f82e 	bl	2b03c <notify_le_param_updated>
	bt_conn_unref(conn);
   27fe0:	4620      	mov	r0, r4
   27fe2:	f002 fe93 	bl	2ad0c <bt_conn_unref>
   27fe6:	e7e8      	b.n	27fba <le_conn_update_complete+0x3a>
	} else if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   27fe8:	2b1a      	cmp	r3, #26
   27fea:	d1f9      	bne.n	27fe0 <le_conn_update_complete+0x60>
   27fec:	78c3      	ldrb	r3, [r0, #3]
   27fee:	2b01      	cmp	r3, #1
   27ff0:	d1f6      	bne.n	27fe0 <le_conn_update_complete+0x60>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   27ff2:	f44f 7100 	mov.w	r1, #512	; 0x200
   27ff6:	3004      	adds	r0, #4
   27ff8:	f011 fa6d 	bl	394d6 <atomic_or>
		   conn->role == BT_HCI_ROLE_PERIPHERAL &&
   27ffc:	0583      	lsls	r3, r0, #22
   27ffe:	d4ef      	bmi.n	27fe0 <le_conn_update_complete+0x60>
		param.interval_min = conn->le.interval_min;
   28000:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   28004:	603b      	str	r3, [r7, #0]
		param.latency = conn->le.pending_latency;
   28006:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
   2800a:	607b      	str	r3, [r7, #4]
		bt_l2cap_update_conn_param(conn, &param);
   2800c:	4639      	mov	r1, r7
   2800e:	4620      	mov	r0, r4
   28010:	f003 fc8c 	bl	2b92c <bt_l2cap_update_conn_param>
   28014:	e7e4      	b.n	27fe0 <le_conn_update_complete+0x60>
   28016:	bf00      	nop
   28018:	20000a8c 	.word	0x20000a8c
   2801c:	0003dd13 	.word	0x0003dd13

00028020 <rx_queue_put>:
	}
}

#if !defined(CONFIG_BT_RECV_BLOCKING)
static void rx_queue_put(struct net_buf *buf)
{
   28020:	b598      	push	{r3, r4, r7, lr}
   28022:	4601      	mov	r1, r0
   28024:	af00      	add	r7, sp, #0
	net_buf_slist_put(&bt_dev.rx_queue, buf);
   28026:	480e      	ldr	r0, [pc, #56]	; (28060 <rx_queue_put+0x40>)
   28028:	f006 fb42 	bl	2e6b0 <net_buf_slist_put>

#if defined(CONFIG_BT_RECV_WORKQ_SYS)
	const int err = k_work_submit(&rx_work);
#elif defined(CONFIG_BT_RECV_WORKQ_BT)
	const int err = k_work_submit_to_queue(&bt_workq, &rx_work);
   2802c:	490d      	ldr	r1, [pc, #52]	; (28064 <rx_queue_put+0x44>)
   2802e:	480e      	ldr	r0, [pc, #56]	; (28068 <rx_queue_put+0x48>)
   28030:	f013 fe8e 	bl	3bd50 <k_work_submit_to_queue>
#endif /* CONFIG_BT_RECV_WORKQ_SYS */
	if (err < 0) {
   28034:	1e03      	subs	r3, r0, #0
   28036:	da11      	bge.n	2805c <rx_queue_put+0x3c>
		BT_ERR("Could not submit rx_work: %d", err);
   28038:	480c      	ldr	r0, [pc, #48]	; (2806c <rx_queue_put+0x4c>)
   2803a:	6802      	ldr	r2, [r0, #0]
   2803c:	0752      	lsls	r2, r2, #29
   2803e:	d00d      	beq.n	2805c <rx_queue_put+0x3c>
   28040:	466c      	mov	r4, sp
   28042:	b088      	sub	sp, #32
   28044:	466a      	mov	r2, sp
   28046:	490a      	ldr	r1, [pc, #40]	; (28070 <rx_queue_put+0x50>)
   28048:	e9c2 1305 	strd	r1, r3, [r2, #20]
   2804c:	2303      	movs	r3, #3
   2804e:	f842 3f10 	str.w	r3, [r2, #16]!
   28052:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   28056:	f011 fa4d 	bl	394f4 <z_log_msg_static_create.constprop.0>
   2805a:	46a5      	mov	sp, r4
	}
}
   2805c:	46bd      	mov	sp, r7
   2805e:	bd98      	pop	{r3, r4, r7, pc}
   28060:	20000514 	.word	0x20000514
   28064:	200006ac 	.word	0x200006ac
   28068:	20002640 	.word	0x20002640
   2806c:	20000a8c 	.word	0x20000a8c
   28070:	0003dd37 	.word	0x0003dd37

00028074 <handle_event.part.0>:
static void handle_event(uint8_t event, struct net_buf *buf, const struct event_handler *handlers,
   28074:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		BT_WARN("Unhandled event 0x%02x len %u: %s", event, buf->len,
   28078:	4d11      	ldr	r5, [pc, #68]	; (280c0 <handle_event.part.0+0x4c>)
   2807a:	682a      	ldr	r2, [r5, #0]
   2807c:	f012 0f06 	tst.w	r2, #6
static void handle_event(uint8_t event, struct net_buf *buf, const struct event_handler *handlers,
   28080:	af00      	add	r7, sp, #0
   28082:	4604      	mov	r4, r0
   28084:	460b      	mov	r3, r1
		BT_WARN("Unhandled event 0x%02x len %u: %s", event, buf->len,
   28086:	d018      	beq.n	280ba <handle_event.part.0+0x46>
   28088:	898e      	ldrh	r6, [r1, #12]
   2808a:	6898      	ldr	r0, [r3, #8]
   2808c:	4631      	mov	r1, r6
   2808e:	f7ff fe03 	bl	27c98 <bt_hex>
   28092:	46e8      	mov	r8, sp
   28094:	b08a      	sub	sp, #40	; 0x28
   28096:	466a      	mov	r2, sp
   28098:	4b0a      	ldr	r3, [pc, #40]	; (280c4 <handle_event.part.0+0x50>)
   2809a:	e9c2 3405 	strd	r3, r4, [r2, #20]
   2809e:	f240 4302 	movw	r3, #1026	; 0x402
   280a2:	8493      	strh	r3, [r2, #36]	; 0x24
   280a4:	4b08      	ldr	r3, [pc, #32]	; (280c8 <handle_event.part.0+0x54>)
   280a6:	e9c2 6007 	strd	r6, r0, [r2, #28]
   280aa:	f44f 5132 	mov.w	r1, #11392	; 0x2c80
   280ae:	f842 3f10 	str.w	r3, [r2, #16]!
   280b2:	4628      	mov	r0, r5
   280b4:	f011 fa1e 	bl	394f4 <z_log_msg_static_create.constprop.0>
   280b8:	46c5      	mov	sp, r8
}
   280ba:	46bd      	mov	sp, r7
   280bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   280c0:	20000a8c 	.word	0x20000a8c
   280c4:	0003dd54 	.word	0x0003dd54
   280c8:	01000005 	.word	0x01000005

000280cc <hci_hardware_error>:
{
   280cc:	b598      	push	{r3, r4, r7, lr}
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
   280ce:	2101      	movs	r1, #1
   280d0:	af00      	add	r7, sp, #0
   280d2:	3008      	adds	r0, #8
   280d4:	f006 fcc0 	bl	2ea58 <net_buf_simple_pull_mem>
   280d8:	4603      	mov	r3, r0
	BT_ERR("Hardware error, hardware code: %d", evt->hardware_code);
   280da:	480a      	ldr	r0, [pc, #40]	; (28104 <hci_hardware_error+0x38>)
   280dc:	6802      	ldr	r2, [r0, #0]
   280de:	0752      	lsls	r2, r2, #29
   280e0:	d00e      	beq.n	28100 <hci_hardware_error+0x34>
   280e2:	466c      	mov	r4, sp
   280e4:	b088      	sub	sp, #32
   280e6:	781b      	ldrb	r3, [r3, #0]
   280e8:	466a      	mov	r2, sp
   280ea:	4907      	ldr	r1, [pc, #28]	; (28108 <hci_hardware_error+0x3c>)
   280ec:	e9c2 1305 	strd	r1, r3, [r2, #20]
   280f0:	2303      	movs	r3, #3
   280f2:	f842 3f10 	str.w	r3, [r2, #16]!
   280f6:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   280fa:	f011 f9fb 	bl	394f4 <z_log_msg_static_create.constprop.0>
   280fe:	46a5      	mov	sp, r4
}
   28100:	46bd      	mov	sp, r7
   28102:	bd98      	pop	{r3, r4, r7, pc}
   28104:	20000a8c 	.word	0x20000a8c
   28108:	0003dd76 	.word	0x0003dd76

0002810c <le_data_len_change>:
{
   2810c:	b5b0      	push	{r4, r5, r7, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   2810e:	6883      	ldr	r3, [r0, #8]
   28110:	881c      	ldrh	r4, [r3, #0]
{
   28112:	af00      	add	r7, sp, #0
	conn = bt_conn_lookup_handle(handle);
   28114:	4620      	mov	r0, r4
   28116:	f002 fe29 	bl	2ad6c <bt_conn_lookup_handle>
	if (!conn) {
   2811a:	b998      	cbnz	r0, 28144 <le_data_len_change+0x38>
		BT_ERR("Unable to lookup conn for handle %u", handle);
   2811c:	480b      	ldr	r0, [pc, #44]	; (2814c <le_data_len_change+0x40>)
   2811e:	6803      	ldr	r3, [r0, #0]
   28120:	075b      	lsls	r3, r3, #29
   28122:	d00d      	beq.n	28140 <le_data_len_change+0x34>
   28124:	466d      	mov	r5, sp
   28126:	b088      	sub	sp, #32
   28128:	466a      	mov	r2, sp
   2812a:	4b09      	ldr	r3, [pc, #36]	; (28150 <le_data_len_change+0x44>)
   2812c:	e9c2 3405 	strd	r3, r4, [r2, #20]
   28130:	2303      	movs	r3, #3
   28132:	f842 3f10 	str.w	r3, [r2, #16]!
   28136:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   2813a:	f011 f9db 	bl	394f4 <z_log_msg_static_create.constprop.0>
   2813e:	46ad      	mov	sp, r5
}
   28140:	46bd      	mov	sp, r7
   28142:	bdb0      	pop	{r4, r5, r7, pc}
	bt_conn_unref(conn);
   28144:	f002 fde2 	bl	2ad0c <bt_conn_unref>
   28148:	e7fa      	b.n	28140 <le_data_len_change+0x34>
   2814a:	bf00      	nop
   2814c:	20000a8c 	.word	0x20000a8c
   28150:	0003dd13 	.word	0x0003dd13

00028154 <le_phy_update_complete>:
{
   28154:	b5b0      	push	{r4, r5, r7, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   28156:	6883      	ldr	r3, [r0, #8]
   28158:	f8b3 4001 	ldrh.w	r4, [r3, #1]
{
   2815c:	af00      	add	r7, sp, #0
	conn = bt_conn_lookup_handle(handle);
   2815e:	4620      	mov	r0, r4
   28160:	f002 fe04 	bl	2ad6c <bt_conn_lookup_handle>
	if (!conn) {
   28164:	b998      	cbnz	r0, 2818e <le_phy_update_complete+0x3a>
		BT_ERR("Unable to lookup conn for handle %u", handle);
   28166:	480b      	ldr	r0, [pc, #44]	; (28194 <le_phy_update_complete+0x40>)
   28168:	6803      	ldr	r3, [r0, #0]
   2816a:	075b      	lsls	r3, r3, #29
   2816c:	d00d      	beq.n	2818a <le_phy_update_complete+0x36>
   2816e:	466d      	mov	r5, sp
   28170:	b088      	sub	sp, #32
   28172:	466a      	mov	r2, sp
   28174:	4b08      	ldr	r3, [pc, #32]	; (28198 <le_phy_update_complete+0x44>)
   28176:	e9c2 3405 	strd	r3, r4, [r2, #20]
   2817a:	2303      	movs	r3, #3
   2817c:	f842 3f10 	str.w	r3, [r2, #16]!
   28180:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   28184:	f011 f9b6 	bl	394f4 <z_log_msg_static_create.constprop.0>
   28188:	46ad      	mov	sp, r5
}
   2818a:	46bd      	mov	sp, r7
   2818c:	bdb0      	pop	{r4, r5, r7, pc}
	bt_conn_unref(conn);
   2818e:	f002 fdbd 	bl	2ad0c <bt_conn_unref>
   28192:	e7fa      	b.n	2818a <le_phy_update_complete+0x36>
   28194:	20000a8c 	.word	0x20000a8c
   28198:	0003dd13 	.word	0x0003dd13

0002819c <hci_disconn_complete>:
{
   2819c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   281a0:	6885      	ldr	r5, [r0, #8]
	if (evt->status) {
   281a2:	782e      	ldrb	r6, [r5, #0]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   281a4:	f8b5 8001 	ldrh.w	r8, [r5, #1]
{
   281a8:	af00      	add	r7, sp, #0
	if (evt->status) {
   281aa:	b9b6      	cbnz	r6, 281da <hci_disconn_complete+0x3e>
	conn = bt_conn_lookup_handle(handle);
   281ac:	4640      	mov	r0, r8
   281ae:	f002 fddd 	bl	2ad6c <bt_conn_lookup_handle>
	if (!conn) {
   281b2:	4604      	mov	r4, r0
   281b4:	b9a0      	cbnz	r0, 281e0 <hci_disconn_complete+0x44>
		BT_ERR("Unable to look up conn with handle %u", handle);
   281b6:	480f      	ldr	r0, [pc, #60]	; (281f4 <hci_disconn_complete+0x58>)
   281b8:	6803      	ldr	r3, [r0, #0]
   281ba:	075b      	lsls	r3, r3, #29
   281bc:	d00d      	beq.n	281da <hci_disconn_complete+0x3e>
   281be:	466c      	mov	r4, sp
   281c0:	b088      	sub	sp, #32
   281c2:	466a      	mov	r2, sp
   281c4:	4b0c      	ldr	r3, [pc, #48]	; (281f8 <hci_disconn_complete+0x5c>)
   281c6:	e9c2 3805 	strd	r3, r8, [r2, #20]
   281ca:	2303      	movs	r3, #3
   281cc:	f842 3f10 	str.w	r3, [r2, #16]!
   281d0:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   281d4:	f011 f98e 	bl	394f4 <z_log_msg_static_create.constprop.0>
   281d8:	46a5      	mov	sp, r4
}
   281da:	46bd      	mov	sp, r7
   281dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	conn->err = evt->reason;
   281e0:	78eb      	ldrb	r3, [r5, #3]
   281e2:	7243      	strb	r3, [r0, #9]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   281e4:	4631      	mov	r1, r6
   281e6:	f002 fdc9 	bl	2ad7c <bt_conn_set_state>
		bt_conn_unref(conn);
   281ea:	4620      	mov	r0, r4
	bt_conn_unref(conn);
   281ec:	f002 fd8e 	bl	2ad0c <bt_conn_unref>
   281f0:	e7f3      	b.n	281da <hci_disconn_complete+0x3e>
   281f2:	bf00      	nop
   281f4:	20000a8c 	.word	0x20000a8c
   281f8:	0003dd98 	.word	0x0003dd98

000281fc <handle_event>:
{
   281fc:	b5b0      	push	{r4, r5, r7, lr}
   281fe:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   28202:	af00      	add	r7, sp, #0
   28204:	4604      	mov	r4, r0
	for (i = 0; i < num_handlers; i++) {
   28206:	4293      	cmp	r3, r2
   28208:	d103      	bne.n	28212 <handle_event+0x16>
	if (err == -EOPNOTSUPP) {
   2820a:	4620      	mov	r0, r4
   2820c:	f7ff ff32 	bl	28074 <handle_event.part.0>
}
   28210:	e01b      	b.n	2824a <handle_event+0x4e>
		if (handler->event != event) {
   28212:	4610      	mov	r0, r2
   28214:	f810 5b08 	ldrb.w	r5, [r0], #8
   28218:	42a5      	cmp	r5, r4
   2821a:	d11c      	bne.n	28256 <handle_event+0x5a>
		if (buf->len < handler->min_len) {
   2821c:	898b      	ldrh	r3, [r1, #12]
   2821e:	7850      	ldrb	r0, [r2, #1]
   28220:	4298      	cmp	r0, r3
   28222:	d914      	bls.n	2824e <handle_event+0x52>
			BT_ERR("Too small (%u bytes) event 0x%02x",
   28224:	480d      	ldr	r0, [pc, #52]	; (2825c <handle_event+0x60>)
   28226:	6802      	ldr	r2, [r0, #0]
   28228:	0752      	lsls	r2, r2, #29
   2822a:	d00e      	beq.n	2824a <handle_event+0x4e>
   2822c:	466d      	mov	r5, sp
   2822e:	b088      	sub	sp, #32
   28230:	466a      	mov	r2, sp
   28232:	490b      	ldr	r1, [pc, #44]	; (28260 <handle_event+0x64>)
   28234:	61d4      	str	r4, [r2, #28]
   28236:	e9c2 1305 	strd	r1, r3, [r2, #20]
   2823a:	2304      	movs	r3, #4
   2823c:	f842 3f10 	str.w	r3, [r2, #16]!
   28240:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   28244:	f011 f956 	bl	394f4 <z_log_msg_static_create.constprop.0>
   28248:	46ad      	mov	sp, r5
}
   2824a:	46bd      	mov	sp, r7
   2824c:	bdb0      	pop	{r4, r5, r7, pc}
		handler->handler(buf);
   2824e:	6853      	ldr	r3, [r2, #4]
   28250:	4608      	mov	r0, r1
   28252:	4798      	blx	r3
	if (err == -EOPNOTSUPP) {
   28254:	e7f9      	b.n	2824a <handle_event+0x4e>
   28256:	4602      	mov	r2, r0
   28258:	e7d5      	b.n	28206 <handle_event+0xa>
   2825a:	bf00      	nop
   2825c:	20000a8c 	.word	0x20000a8c
   28260:	0003ddbe 	.word	0x0003ddbe

00028264 <rx_work_handler>:
	}
}

#if !defined(CONFIG_BT_RECV_BLOCKING)
static void rx_work_handler(struct k_work *work)
{
   28264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int err;

	struct net_buf *buf;

	BT_DBG("Getting net_buf from queue");
	buf = net_buf_slist_get(&bt_dev.rx_queue);
   28266:	485b      	ldr	r0, [pc, #364]	; (283d4 <rx_work_handler+0x170>)
{
   28268:	af00      	add	r7, sp, #0
	buf = net_buf_slist_get(&bt_dev.rx_queue);
   2826a:	f006 fa79 	bl	2e760 <net_buf_slist_get>
	if (!buf) {
   2826e:	4604      	mov	r4, r0
   28270:	2800      	cmp	r0, #0
   28272:	d073      	beq.n	2835c <rx_work_handler+0xf8>
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   28274:	7d03      	ldrb	r3, [r0, #20]
	}

	BT_DBG("buf %p type %u len %u", buf, bt_buf_get_type(buf),
	       buf->len);

	switch (bt_buf_get_type(buf)) {
   28276:	2b01      	cmp	r3, #1
   28278:	d072      	beq.n	28360 <rx_work_handler+0xfc>
   2827a:	2b03      	cmp	r3, #3
   2827c:	f040 80a0 	bne.w	283c0 <rx_work_handler+0x15c>
	BT_ASSERT(buf->len >= sizeof(*hdr));
   28280:	8983      	ldrh	r3, [r0, #12]
   28282:	2b03      	cmp	r3, #3
   28284:	d80b      	bhi.n	2829e <rx_work_handler+0x3a>
   28286:	4954      	ldr	r1, [pc, #336]	; (283d8 <rx_work_handler+0x174>)
   28288:	4854      	ldr	r0, [pc, #336]	; (283dc <rx_work_handler+0x178>)
   2828a:	f240 12ed 	movw	r2, #493	; 0x1ed
   2828e:	f010 fc40 	bl	38b12 <assert_print>
   28292:	4040      	eors	r0, r0
   28294:	f380 8811 	msr	BASEPRI, r0
   28298:	f04f 0003 	mov.w	r0, #3
   2829c:	df02      	svc	2
   2829e:	2104      	movs	r1, #4
   282a0:	f104 0008 	add.w	r0, r4, #8
   282a4:	f006 fbd8 	bl	2ea58 <net_buf_simple_pull_mem>
	if (buf->len != len) {
   282a8:	89a1      	ldrh	r1, [r4, #12]
	len = sys_le16_to_cpu(hdr->len);
   282aa:	8843      	ldrh	r3, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
   282ac:	8806      	ldrh	r6, [r0, #0]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   282ae:	22ff      	movs	r2, #255	; 0xff
	acl(buf)->handle = bt_acl_handle(handle);
   282b0:	f3c6 000b 	ubfx	r0, r6, #0, #12
	if (buf->len != len) {
   282b4:	428b      	cmp	r3, r1
	acl(buf)->handle = bt_acl_handle(handle);
   282b6:	82e0      	strh	r0, [r4, #22]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   282b8:	7562      	strb	r2, [r4, #21]
	if (buf->len != len) {
   282ba:	d013      	beq.n	282e4 <rx_work_handler+0x80>
		BT_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
   282bc:	4848      	ldr	r0, [pc, #288]	; (283e0 <rx_work_handler+0x17c>)
   282be:	6802      	ldr	r2, [r0, #0]
   282c0:	0756      	lsls	r6, r2, #29
   282c2:	d079      	beq.n	283b8 <rx_work_handler+0x154>
   282c4:	466d      	mov	r5, sp
   282c6:	b088      	sub	sp, #32
   282c8:	466a      	mov	r2, sp
   282ca:	4e46      	ldr	r6, [pc, #280]	; (283e4 <rx_work_handler+0x180>)
   282cc:	61d3      	str	r3, [r2, #28]
   282ce:	2304      	movs	r3, #4
   282d0:	e9c2 6105 	strd	r6, r1, [r2, #20]
   282d4:	f842 3f10 	str.w	r3, [r2, #16]!
   282d8:	f44f 5101 	mov.w	r1, #8256	; 0x2040
#endif /* CONFIG_BT_ISO */
	case BT_BUF_EVT:
		hci_event(buf);
		break;
	default:
		BT_ERR("Unknown buf type %u", bt_buf_get_type(buf));
   282dc:	f011 f90a 	bl	394f4 <z_log_msg_static_create.constprop.0>
   282e0:	46ad      	mov	sp, r5
   282e2:	e069      	b.n	283b8 <rx_work_handler+0x154>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
   282e4:	f002 fd42 	bl	2ad6c <bt_conn_lookup_handle>
	if (!conn) {
   282e8:	4605      	mov	r5, r0
   282ea:	b980      	cbnz	r0, 2830e <rx_work_handler+0xaa>
		BT_ERR("Unable to find conn for handle %u", acl(buf)->handle);
   282ec:	483c      	ldr	r0, [pc, #240]	; (283e0 <rx_work_handler+0x17c>)
   282ee:	6803      	ldr	r3, [r0, #0]
   282f0:	075d      	lsls	r5, r3, #29
   282f2:	d061      	beq.n	283b8 <rx_work_handler+0x154>
   282f4:	466d      	mov	r5, sp
   282f6:	b088      	sub	sp, #32
   282f8:	8ae3      	ldrh	r3, [r4, #22]
   282fa:	466a      	mov	r2, sp
   282fc:	493a      	ldr	r1, [pc, #232]	; (283e8 <rx_work_handler+0x184>)
	switch (bt_buf_get_type(buf)) {
   282fe:	e9c2 1305 	strd	r1, r3, [r2, #20]
		BT_ERR("Unknown buf type %u", bt_buf_get_type(buf));
   28302:	2303      	movs	r3, #3
   28304:	f842 3f10 	str.w	r3, [r2, #16]!
   28308:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   2830c:	e7e6      	b.n	282dc <rx_work_handler+0x78>
	acl(buf)->index = bt_conn_index(conn);
   2830e:	f002 fe37 	bl	2af80 <bt_conn_index>
	bt_conn_recv(conn, buf, flags);
   28312:	0b32      	lsrs	r2, r6, #12
	acl(buf)->index = bt_conn_index(conn);
   28314:	7560      	strb	r0, [r4, #21]
	bt_conn_recv(conn, buf, flags);
   28316:	4621      	mov	r1, r4
   28318:	4628      	mov	r0, r5
   2831a:	f002 fb6b 	bl	2a9f4 <bt_conn_recv>
	bt_conn_unref(conn);
   2831e:	4628      	mov	r0, r5
   28320:	f002 fcf4 	bl	2ad0c <bt_conn_unref>
	return list->head;
   28324:	4b31      	ldr	r3, [pc, #196]	; (283ec <rx_work_handler+0x188>)
	/* Schedule the work handler to be executed again if there are
	 * additional items in the queue. This allows for other users of the
	 * work queue to get a chance at running, which wouldn't be possible if
	 * we used a while() loop with a k_yield() statement.
	 */
	if (!sys_slist_is_empty(&bt_dev.rx_queue)) {
   28326:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
   2832a:	b1bb      	cbz	r3, 2835c <rx_work_handler+0xf8>

#if defined(CONFIG_BT_RECV_WORKQ_SYS)
		err = k_work_submit(&rx_work);
#elif defined(CONFIG_BT_RECV_WORKQ_BT)
		err = k_work_submit_to_queue(&bt_workq, &rx_work);
   2832c:	4930      	ldr	r1, [pc, #192]	; (283f0 <rx_work_handler+0x18c>)
   2832e:	4831      	ldr	r0, [pc, #196]	; (283f4 <rx_work_handler+0x190>)
   28330:	f013 fd0e 	bl	3bd50 <k_work_submit_to_queue>
#endif
		if (err < 0) {
   28334:	1e03      	subs	r3, r0, #0
   28336:	da11      	bge.n	2835c <rx_work_handler+0xf8>
			BT_ERR("Could not submit rx_work: %d", err);
   28338:	4829      	ldr	r0, [pc, #164]	; (283e0 <rx_work_handler+0x17c>)
   2833a:	6802      	ldr	r2, [r0, #0]
   2833c:	0752      	lsls	r2, r2, #29
   2833e:	d00d      	beq.n	2835c <rx_work_handler+0xf8>
   28340:	466c      	mov	r4, sp
   28342:	b088      	sub	sp, #32
   28344:	466a      	mov	r2, sp
   28346:	492c      	ldr	r1, [pc, #176]	; (283f8 <rx_work_handler+0x194>)
   28348:	e9c2 1305 	strd	r1, r3, [r2, #20]
   2834c:	2303      	movs	r3, #3
   2834e:	f842 3f10 	str.w	r3, [r2, #16]!
   28352:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   28356:	f011 f8cd 	bl	394f4 <z_log_msg_static_create.constprop.0>
   2835a:	46a5      	mov	sp, r4
		}
	}
}
   2835c:	46bd      	mov	sp, r7
   2835e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	BT_ASSERT(buf->len >= sizeof(*hdr));
   28360:	8983      	ldrh	r3, [r0, #12]
   28362:	2b01      	cmp	r3, #1
   28364:	d80b      	bhi.n	2837e <rx_work_handler+0x11a>
   28366:	491c      	ldr	r1, [pc, #112]	; (283d8 <rx_work_handler+0x174>)
   28368:	481c      	ldr	r0, [pc, #112]	; (283dc <rx_work_handler+0x178>)
   2836a:	f44f 6216 	mov.w	r2, #2400	; 0x960
   2836e:	f010 fbd0 	bl	38b12 <assert_print>
   28372:	4040      	eors	r0, r0
   28374:	f380 8811 	msr	BASEPRI, r0
   28378:	f04f 0003 	mov.w	r0, #3
   2837c:	df02      	svc	2
   2837e:	2102      	movs	r1, #2
   28380:	f104 0008 	add.w	r0, r4, #8
   28384:	f006 fb68 	bl	2ea58 <net_buf_simple_pull_mem>
   28388:	4605      	mov	r5, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   2838a:	7800      	ldrb	r0, [r0, #0]
   2838c:	f011 f890 	bl	394b0 <bt_hci_evt_get_flags>
   28390:	0780      	lsls	r0, r0, #30
   28392:	d40b      	bmi.n	283ac <rx_work_handler+0x148>
   28394:	4910      	ldr	r1, [pc, #64]	; (283d8 <rx_work_handler+0x174>)
   28396:	4811      	ldr	r0, [pc, #68]	; (283dc <rx_work_handler+0x178>)
   28398:	f640 1264 	movw	r2, #2404	; 0x964
   2839c:	f010 fbb9 	bl	38b12 <assert_print>
   283a0:	4040      	eors	r0, r0
   283a2:	f380 8811 	msr	BASEPRI, r0
   283a6:	f04f 0003 	mov.w	r0, #3
   283aa:	df02      	svc	2
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
   283ac:	4a13      	ldr	r2, [pc, #76]	; (283fc <rx_work_handler+0x198>)
   283ae:	7828      	ldrb	r0, [r5, #0]
   283b0:	2304      	movs	r3, #4
   283b2:	4621      	mov	r1, r4
   283b4:	f7ff ff22 	bl	281fc <handle_event>
		net_buf_unref(buf);
   283b8:	4620      	mov	r0, r4
   283ba:	f006 fa61 	bl	2e880 <net_buf_unref>
		break;
   283be:	e7b1      	b.n	28324 <rx_work_handler+0xc0>
		BT_ERR("Unknown buf type %u", bt_buf_get_type(buf));
   283c0:	4807      	ldr	r0, [pc, #28]	; (283e0 <rx_work_handler+0x17c>)
   283c2:	6802      	ldr	r2, [r0, #0]
   283c4:	0751      	lsls	r1, r2, #29
   283c6:	d0f7      	beq.n	283b8 <rx_work_handler+0x154>
   283c8:	466d      	mov	r5, sp
   283ca:	b088      	sub	sp, #32
   283cc:	466a      	mov	r2, sp
   283ce:	490c      	ldr	r1, [pc, #48]	; (28400 <rx_work_handler+0x19c>)
   283d0:	e795      	b.n	282fe <rx_work_handler+0x9a>
   283d2:	bf00      	nop
   283d4:	20000514 	.word	0x20000514
   283d8:	0003dde0 	.word	0x0003dde0
   283dc:	0003d1d7 	.word	0x0003d1d7
   283e0:	20000a8c 	.word	0x20000a8c
   283e4:	0003de14 	.word	0x0003de14
   283e8:	0003de38 	.word	0x0003de38
   283ec:	20000400 	.word	0x20000400
   283f0:	200006ac 	.word	0x200006ac
   283f4:	20002640 	.word	0x20002640
   283f8:	0003dd37 	.word	0x0003dd37
   283fc:	0003c828 	.word	0x0003c828
   28400:	0003de5a 	.word	0x0003de5a

00028404 <hci_le_meta_event>:
{
   28404:	b510      	push	{r4, lr}
   28406:	2101      	movs	r1, #1
   28408:	4604      	mov	r4, r0
   2840a:	3008      	adds	r0, #8
   2840c:	f006 fb24 	bl	2ea58 <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   28410:	4621      	mov	r1, r4
   28412:	4a03      	ldr	r2, [pc, #12]	; (28420 <hci_le_meta_event+0x1c>)
   28414:	7800      	ldrb	r0, [r0, #0]
}
   28416:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   2841a:	2309      	movs	r3, #9
   2841c:	f7ff beee 	b.w	281fc <handle_event>
   28420:	0003c848 	.word	0x0003c848

00028424 <le_remote_feat_complete>:
{
   28424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
   28426:	6885      	ldr	r5, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   28428:	f8b5 6001 	ldrh.w	r6, [r5, #1]
{
   2842c:	af00      	add	r7, sp, #0
	conn = bt_conn_lookup_handle(handle);
   2842e:	4630      	mov	r0, r6
   28430:	f002 fc9c 	bl	2ad6c <bt_conn_lookup_handle>
	if (!conn) {
   28434:	4604      	mov	r4, r0
   28436:	b998      	cbnz	r0, 28460 <le_remote_feat_complete+0x3c>
		BT_ERR("Unable to lookup conn for handle %u", handle);
   28438:	4811      	ldr	r0, [pc, #68]	; (28480 <le_remote_feat_complete+0x5c>)
   2843a:	6803      	ldr	r3, [r0, #0]
   2843c:	075b      	lsls	r3, r3, #29
   2843e:	d00d      	beq.n	2845c <le_remote_feat_complete+0x38>
   28440:	466c      	mov	r4, sp
   28442:	b088      	sub	sp, #32
   28444:	466a      	mov	r2, sp
   28446:	4b0f      	ldr	r3, [pc, #60]	; (28484 <le_remote_feat_complete+0x60>)
   28448:	e9c2 3605 	strd	r3, r6, [r2, #20]
   2844c:	2303      	movs	r3, #3
   2844e:	f842 3f10 	str.w	r3, [r2, #16]!
   28452:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   28456:	f011 f84d 	bl	394f4 <z_log_msg_static_create.constprop.0>
   2845a:	46a5      	mov	sp, r4
}
   2845c:	46bd      	mov	sp, r7
   2845e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!evt->status) {
   28460:	782b      	ldrb	r3, [r5, #0]
   28462:	b923      	cbnz	r3, 2846e <le_remote_feat_complete+0x4a>
		memcpy(conn->le.features, evt->features,
   28464:	2208      	movs	r2, #8
   28466:	1ce9      	adds	r1, r5, #3
   28468:	30b4      	adds	r0, #180	; 0xb4
   2846a:	f010 ffa1 	bl	393b0 <memcpy>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   2846e:	f44f 6100 	mov.w	r1, #2048	; 0x800
   28472:	1d20      	adds	r0, r4, #4
   28474:	f011 f82f 	bl	394d6 <atomic_or>
	bt_conn_unref(conn);
   28478:	4620      	mov	r0, r4
   2847a:	f002 fc47 	bl	2ad0c <bt_conn_unref>
   2847e:	e7ed      	b.n	2845c <le_remote_feat_complete+0x38>
   28480:	20000a8c 	.word	0x20000a8c
   28484:	0003dd13 	.word	0x0003dd13

00028488 <hci_cmd_done>:
{
   28488:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2848c:	4680      	mov	r8, r0
   2848e:	af00      	add	r7, sp, #0
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   28490:	7990      	ldrb	r0, [r2, #6]
   28492:	f8df 9138 	ldr.w	r9, [pc, #312]	; 285cc <hci_cmd_done+0x144>
{
   28496:	460e      	mov	r6, r1
   28498:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   2849a:	f005 ff97 	bl	2e3cc <net_buf_pool_get>
   2849e:	4581      	cmp	r9, r0
   284a0:	d01e      	beq.n	284e0 <hci_cmd_done+0x58>
		BT_WARN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p",
   284a2:	4d4b      	ldr	r5, [pc, #300]	; (285d0 <hci_cmd_done+0x148>)
   284a4:	682b      	ldr	r3, [r5, #0]
   284a6:	f013 0f06 	tst.w	r3, #6
   284aa:	d016      	beq.n	284da <hci_cmd_done+0x52>
   284ac:	79a6      	ldrb	r6, [r4, #6]
   284ae:	4630      	mov	r0, r6
   284b0:	f005 ff8c 	bl	2e3cc <net_buf_pool_get>
   284b4:	466c      	mov	r4, sp
   284b6:	b08a      	sub	sp, #40	; 0x28
   284b8:	466a      	mov	r2, sp
   284ba:	4b46      	ldr	r3, [pc, #280]	; (285d4 <hci_cmd_done+0x14c>)
   284bc:	f8c2 9024 	str.w	r9, [r2, #36]	; 0x24
   284c0:	e9c2 3805 	strd	r3, r8, [r2, #20]
   284c4:	2306      	movs	r3, #6
   284c6:	e9c2 6007 	strd	r6, r0, [r2, #28]
   284ca:	f842 3f10 	str.w	r3, [r2, #16]!
   284ce:	f44f 5142 	mov.w	r1, #12416	; 0x3080
   284d2:	4628      	mov	r0, r5
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
   284d4:	f011 f80e 	bl	394f4 <z_log_msg_static_create.constprop.0>
   284d8:	46a5      	mov	sp, r4
}
   284da:	46bd      	mov	sp, r7
   284dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (cmd(buf)->opcode != opcode) {
   284e0:	4620      	mov	r0, r4
   284e2:	f005 ff7b 	bl	2e3dc <net_buf_id>
   284e6:	4d3c      	ldr	r5, [pc, #240]	; (285d8 <hci_cmd_done+0x150>)
   284e8:	f04f 090c 	mov.w	r9, #12
   284ec:	fb09 5000 	mla	r0, r9, r0, r5
   284f0:	8843      	ldrh	r3, [r0, #2]
   284f2:	4543      	cmp	r3, r8
   284f4:	d018      	beq.n	28528 <hci_cmd_done+0xa0>
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
   284f6:	4e36      	ldr	r6, [pc, #216]	; (285d0 <hci_cmd_done+0x148>)
   284f8:	6833      	ldr	r3, [r6, #0]
   284fa:	f013 0f06 	tst.w	r3, #6
   284fe:	d0ec      	beq.n	284da <hci_cmd_done+0x52>
   28500:	4620      	mov	r0, r4
   28502:	f005 ff6b 	bl	2e3dc <net_buf_id>
   28506:	fb09 5000 	mla	r0, r9, r0, r5
   2850a:	466c      	mov	r4, sp
   2850c:	b088      	sub	sp, #32
   2850e:	8843      	ldrh	r3, [r0, #2]
   28510:	466a      	mov	r2, sp
   28512:	4932      	ldr	r1, [pc, #200]	; (285dc <hci_cmd_done+0x154>)
   28514:	61d3      	str	r3, [r2, #28]
   28516:	2304      	movs	r3, #4
   28518:	e9c2 1805 	strd	r1, r8, [r2, #20]
   2851c:	4630      	mov	r0, r6
   2851e:	f842 3f10 	str.w	r3, [r2, #16]!
   28522:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   28526:	e7d5      	b.n	284d4 <hci_cmd_done+0x4c>
	if (bt_dev.sent_cmd) {
   28528:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 285e0 <hci_cmd_done+0x158>
   2852c:	f8d8 0110 	ldr.w	r0, [r8, #272]	; 0x110
   28530:	b120      	cbz	r0, 2853c <hci_cmd_done+0xb4>
		net_buf_unref(bt_dev.sent_cmd);
   28532:	f006 f9a5 	bl	2e880 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   28536:	2300      	movs	r3, #0
   28538:	f8c8 3110 	str.w	r3, [r8, #272]	; 0x110
	if (cmd(buf)->state && !status) {
   2853c:	4620      	mov	r0, r4
   2853e:	f005 ff4d 	bl	2e3dc <net_buf_id>
   28542:	f04f 080c 	mov.w	r8, #12
   28546:	fb08 5000 	mla	r0, r8, r0, r5
   2854a:	6843      	ldr	r3, [r0, #4]
   2854c:	b1b3      	cbz	r3, 2857c <hci_cmd_done+0xf4>
   2854e:	b9ae      	cbnz	r6, 2857c <hci_cmd_done+0xf4>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
   28550:	4620      	mov	r0, r4
   28552:	f005 ff43 	bl	2e3dc <net_buf_id>
   28556:	fb08 5000 	mla	r0, r8, r0, r5
 * @param bit Bit number (starting from 0).
 * @param val true for 1, false for 0.
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   2855a:	2301      	movs	r3, #1
   2855c:	f8d0 c004 	ldr.w	ip, [r0, #4]
		atomic_set_bit_to(update->target, update->bit, update->val);
   28560:	e9dc 2000 	ldrd	r2, r0, [ip]
   28564:	f000 011f 	and.w	r1, r0, #31
   28568:	fa03 f101 	lsl.w	r1, r3, r1

	if (val) {
   2856c:	f89c 3008 	ldrb.w	r3, [ip, #8]
   28570:	0940      	lsrs	r0, r0, #5
   28572:	b1e3      	cbz	r3, 285ae <hci_cmd_done+0x126>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   28574:	eb02 0080 	add.w	r0, r2, r0, lsl #2
   28578:	f010 ffad 	bl	394d6 <atomic_or>
	if (cmd(buf)->sync) {
   2857c:	4620      	mov	r0, r4
   2857e:	f005 ff2d 	bl	2e3dc <net_buf_id>
   28582:	f04f 080c 	mov.w	r8, #12
   28586:	fb08 5000 	mla	r0, r8, r0, r5
   2858a:	6883      	ldr	r3, [r0, #8]
   2858c:	2b00      	cmp	r3, #0
   2858e:	d0a4      	beq.n	284da <hci_cmd_done+0x52>
		cmd(buf)->status = status;
   28590:	4620      	mov	r0, r4
   28592:	f005 ff23 	bl	2e3dc <net_buf_id>
   28596:	fb08 f000 	mul.w	r0, r8, r0
   2859a:	542e      	strb	r6, [r5, r0]
		k_sem_give(cmd(buf)->sync);
   2859c:	4620      	mov	r0, r4
   2859e:	f005 ff1d 	bl	2e3dc <net_buf_id>
   285a2:	fb08 5500 	mla	r5, r8, r0, r5
   285a6:	68a8      	ldr	r0, [r5, #8]
	z_impl_k_sem_give(sem);
   285a8:	f00d f8fe 	bl	357a8 <z_impl_k_sem_give>
}
   285ac:	e795      	b.n	284da <hci_cmd_done+0x52>
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   285ae:	43cb      	mvns	r3, r1
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   285b0:	eb02 0280 	add.w	r2, r2, r0, lsl #2
   285b4:	f3bf 8f5b 	dmb	ish
   285b8:	e852 0f00 	ldrex	r0, [r2]
   285bc:	4018      	ands	r0, r3
   285be:	e842 0100 	strex	r1, r0, [r2]
   285c2:	2900      	cmp	r1, #0
   285c4:	d1f8      	bne.n	285b8 <hci_cmd_done+0x130>
   285c6:	f3bf 8f5b 	dmb	ish
   285ca:	e7d7      	b.n	2857c <hci_cmd_done+0xf4>
   285cc:	20000c88 	.word	0x20000c88
   285d0:	20000a8c 	.word	0x20000a8c
   285d4:	0003de6e 	.word	0x0003de6e
   285d8:	20002e0c 	.word	0x20002e0c
   285dc:	0003dea3 	.word	0x0003dea3
   285e0:	20000400 	.word	0x20000400

000285e4 <hci_cmd_status>:
{
   285e4:	b538      	push	{r3, r4, r5, lr}
   285e6:	2104      	movs	r1, #4
   285e8:	4604      	mov	r4, r0
   285ea:	3008      	adds	r0, #8
   285ec:	f006 fa34 	bl	2ea58 <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
   285f0:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
   285f2:	7801      	ldrb	r1, [r0, #0]
   285f4:	8840      	ldrh	r0, [r0, #2]
   285f6:	4622      	mov	r2, r4
   285f8:	f7ff ff46 	bl	28488 <hci_cmd_done>
	if (ncmd) {
   285fc:	b125      	cbz	r5, 28608 <hci_cmd_status+0x24>
	z_impl_k_sem_give(sem);
   285fe:	4803      	ldr	r0, [pc, #12]	; (2860c <hci_cmd_status+0x28>)
}
   28600:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   28604:	f00d b8d0 	b.w	357a8 <z_impl_k_sem_give>
   28608:	bd38      	pop	{r3, r4, r5, pc}
   2860a:	bf00      	nop
   2860c:	200004f8 	.word	0x200004f8

00028610 <hci_cmd_complete>:
{
   28610:	b538      	push	{r3, r4, r5, lr}
   28612:	2103      	movs	r1, #3
   28614:	4604      	mov	r4, r0
   28616:	3008      	adds	r0, #8
   28618:	f006 fa1e 	bl	2ea58 <net_buf_simple_pull_mem>
	status = buf->data[0];
   2861c:	68a3      	ldr	r3, [r4, #8]
	ncmd = evt->ncmd;
   2861e:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
   28620:	7819      	ldrb	r1, [r3, #0]
   28622:	f8b0 0001 	ldrh.w	r0, [r0, #1]
   28626:	4622      	mov	r2, r4
   28628:	f7ff ff2e 	bl	28488 <hci_cmd_done>
	if (ncmd) {
   2862c:	b125      	cbz	r5, 28638 <hci_cmd_complete+0x28>
   2862e:	4803      	ldr	r0, [pc, #12]	; (2863c <hci_cmd_complete+0x2c>)
}
   28630:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   28634:	f00d b8b8 	b.w	357a8 <z_impl_k_sem_give>
   28638:	bd38      	pop	{r3, r4, r5, pc}
   2863a:	bf00      	nop
   2863c:	200004f8 	.word	0x200004f8

00028640 <hci_num_completed_packets>:
{
   28640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28644:	b087      	sub	sp, #28
	for (i = 0; i < evt->num_handles; i++) {
   28646:	2500      	movs	r5, #0
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
   28648:	f8d0 8008 	ldr.w	r8, [r0, #8]
				BT_ERR("packets count mismatch");
   2864c:	f8df a10c 	ldr.w	sl, [pc, #268]	; 2875c <hci_num_completed_packets+0x11c>
{
   28650:	af00      	add	r7, sp, #0
			tx->pending_no_cb = 0U;
   28652:	46a9      	mov	r9, r5
	for (i = 0; i < evt->num_handles; i++) {
   28654:	f898 3000 	ldrb.w	r3, [r8]
   28658:	429d      	cmp	r5, r3
   2865a:	db03      	blt.n	28664 <hci_num_completed_packets+0x24>
}
   2865c:	371c      	adds	r7, #28
   2865e:	46bd      	mov	sp, r7
   28660:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		handle = sys_le16_to_cpu(evt->h[i].handle);
   28664:	eb08 0385 	add.w	r3, r8, r5, lsl #2
   28668:	f8b3 b001 	ldrh.w	fp, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
   2866c:	f8b3 6003 	ldrh.w	r6, [r3, #3]
		conn = bt_conn_lookup_handle(handle);
   28670:	4658      	mov	r0, fp
   28672:	f002 fb7b 	bl	2ad6c <bt_conn_lookup_handle>
		if (!conn) {
   28676:	4604      	mov	r4, r0
   28678:	b1d8      	cbz	r0, 286b2 <hci_num_completed_packets+0x72>
			k_work_submit(&conn->tx_complete_work);
   2867a:	f100 0b28 	add.w	fp, r0, #40	; 0x28
		while (count--) {
   2867e:	2e00      	cmp	r6, #0
   28680:	d041      	beq.n	28706 <hci_num_completed_packets+0xc6>
	__asm__ volatile(
   28682:	f04f 0340 	mov.w	r3, #64	; 0x40
   28686:	f3ef 8211 	mrs	r2, BASEPRI
   2868a:	f383 8812 	msr	BASEPRI_MAX, r3
   2868e:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
   28692:	69e3      	ldr	r3, [r4, #28]
   28694:	b313      	cbz	r3, 286dc <hci_num_completed_packets+0x9c>
				conn->pending_no_cb--;
   28696:	3b01      	subs	r3, #1
   28698:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   2869a:	f382 8811 	msr	BASEPRI, r2
   2869e:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
   286a2:	4620      	mov	r0, r4
   286a4:	f002 f930 	bl	2a908 <bt_conn_get_pkts>
   286a8:	3e01      	subs	r6, #1
   286aa:	f00d f87d 	bl	357a8 <z_impl_k_sem_give>
   286ae:	b2b6      	uxth	r6, r6
   286b0:	e7e5      	b.n	2867e <hci_num_completed_packets+0x3e>
			BT_ERR("No connection for handle %u", handle);
   286b2:	f8da 3000 	ldr.w	r3, [sl]
   286b6:	075a      	lsls	r2, r3, #29
   286b8:	d00e      	beq.n	286d8 <hci_num_completed_packets+0x98>
   286ba:	466c      	mov	r4, sp
   286bc:	b088      	sub	sp, #32
   286be:	466a      	mov	r2, sp
   286c0:	4b27      	ldr	r3, [pc, #156]	; (28760 <hci_num_completed_packets+0x120>)
   286c2:	4826      	ldr	r0, [pc, #152]	; (2875c <hci_num_completed_packets+0x11c>)
   286c4:	e9c2 3b05 	strd	r3, fp, [r2, #20]
   286c8:	2303      	movs	r3, #3
   286ca:	f842 3f10 	str.w	r3, [r2, #16]!
   286ce:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   286d2:	f010 ff0f 	bl	394f4 <z_log_msg_static_create.constprop.0>
   286d6:	46a5      	mov	sp, r4
	for (i = 0; i < evt->num_handles; i++) {
   286d8:	3501      	adds	r5, #1
   286da:	e7bb      	b.n	28654 <hci_num_completed_packets+0x14>
   286dc:	6963      	ldr	r3, [r4, #20]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
   286de:	b9b3      	cbnz	r3, 2870e <hci_num_completed_packets+0xce>
   286e0:	f382 8811 	msr	BASEPRI, r2
   286e4:	f3bf 8f6f 	isb	sy
				BT_ERR("packets count mismatch");
   286e8:	f8da 3000 	ldr.w	r3, [sl]
   286ec:	075b      	lsls	r3, r3, #29
   286ee:	d00a      	beq.n	28706 <hci_num_completed_packets+0xc6>
   286f0:	4b1c      	ldr	r3, [pc, #112]	; (28764 <hci_num_completed_packets+0x124>)
   286f2:	617b      	str	r3, [r7, #20]
   286f4:	2302      	movs	r3, #2
   286f6:	4819      	ldr	r0, [pc, #100]	; (2875c <hci_num_completed_packets+0x11c>)
   286f8:	613b      	str	r3, [r7, #16]
   286fa:	f107 0210 	add.w	r2, r7, #16
   286fe:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   28702:	f010 fef7 	bl	394f4 <z_log_msg_static_create.constprop.0>
		bt_conn_unref(conn);
   28706:	4620      	mov	r0, r4
   28708:	f002 fb00 	bl	2ad0c <bt_conn_unref>
   2870c:	e7e4      	b.n	286d8 <hci_num_completed_packets+0x98>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2870e:	69a1      	ldr	r1, [r4, #24]
	return node->next;
   28710:	6818      	ldr	r0, [r3, #0]
	list->head = node;
   28712:	6160      	str	r0, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   28714:	428b      	cmp	r3, r1
	list->tail = node;
   28716:	bf08      	it	eq
   28718:	61a0      	streq	r0, [r4, #24]
   2871a:	f382 8811 	msr	BASEPRI, r2
   2871e:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   28722:	f04f 0240 	mov.w	r2, #64	; 0x40
   28726:	f3ef 8111 	mrs	r1, BASEPRI
   2872a:	f382 8812 	msr	BASEPRI_MAX, r2
   2872e:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
   28732:	68da      	ldr	r2, [r3, #12]
   28734:	61e2      	str	r2, [r4, #28]
			tx->pending_no_cb = 0U;
   28736:	f8c3 900c 	str.w	r9, [r3, #12]
	parent->next = child;
   2873a:	f8c3 9000 	str.w	r9, [r3]
	return list->tail;
   2873e:	6a62      	ldr	r2, [r4, #36]	; 0x24
Z_GENLIST_APPEND(slist, snode)
   28740:	b94a      	cbnz	r2, 28756 <hci_num_completed_packets+0x116>
	list->head = node;
   28742:	e9c4 3308 	strd	r3, r3, [r4, #32]
	__asm__ volatile(
   28746:	f381 8811 	msr	BASEPRI, r1
   2874a:	f3bf 8f6f 	isb	sy
			k_work_submit(&conn->tx_complete_work);
   2874e:	4658      	mov	r0, fp
   28750:	f00d fb54 	bl	35dfc <k_work_submit>
   28754:	e7a5      	b.n	286a2 <hci_num_completed_packets+0x62>
	parent->next = child;
   28756:	6013      	str	r3, [r2, #0]
	list->tail = node;
   28758:	6263      	str	r3, [r4, #36]	; 0x24
}
   2875a:	e7f4      	b.n	28746 <hci_num_completed_packets+0x106>
   2875c:	20000a8c 	.word	0x20000a8c
   28760:	0003ded6 	.word	0x0003ded6
   28764:	0003def2 	.word	0x0003def2

00028768 <bt_hci_cmd_state_set_init>:
{
   28768:	b510      	push	{r4, lr}
	state->bit = bit;
   2876a:	e9c1 2300 	strd	r2, r3, [r1]
	state->val = val;
   2876e:	f89d 3008 	ldrb.w	r3, [sp, #8]
   28772:	720b      	strb	r3, [r1, #8]
{
   28774:	460c      	mov	r4, r1
	cmd(buf)->state = state;
   28776:	f005 fe31 	bl	2e3dc <net_buf_id>
   2877a:	4b03      	ldr	r3, [pc, #12]	; (28788 <bt_hci_cmd_state_set_init+0x20>)
   2877c:	220c      	movs	r2, #12
   2877e:	fb02 3300 	mla	r3, r2, r0, r3
   28782:	605c      	str	r4, [r3, #4]
}
   28784:	bd10      	pop	{r4, pc}
   28786:	bf00      	nop
   28788:	20002e0c 	.word	0x20002e0c

0002878c <bt_hci_cmd_create>:
{
   2878c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return net_buf_alloc_fixed(pool, timeout);
   28790:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   28794:	4606      	mov	r6, r0
   28796:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2879a:	481d      	ldr	r0, [pc, #116]	; (28810 <bt_hci_cmd_create+0x84>)
   2879c:	460f      	mov	r7, r1
   2879e:	f012 f9a2 	bl	3aae6 <net_buf_alloc_fixed>
	__ASSERT_NO_MSG(buf);
   287a2:	4604      	mov	r4, r0
   287a4:	b950      	cbnz	r0, 287bc <bt_hci_cmd_create+0x30>
   287a6:	491b      	ldr	r1, [pc, #108]	; (28814 <bt_hci_cmd_create+0x88>)
   287a8:	481b      	ldr	r0, [pc, #108]	; (28818 <bt_hci_cmd_create+0x8c>)
   287aa:	f240 1201 	movw	r2, #257	; 0x101
   287ae:	f010 f9b0 	bl	38b12 <assert_print>
   287b2:	4818      	ldr	r0, [pc, #96]	; (28814 <bt_hci_cmd_create+0x88>)
   287b4:	f240 1101 	movw	r1, #257	; 0x101
   287b8:	f010 f9a4 	bl	38b04 <assert_post_action>
	net_buf_simple_reserve(&buf->b, reserve);
   287bc:	f100 0a08 	add.w	sl, r0, #8
   287c0:	2100      	movs	r1, #0
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   287c2:	f04f 0800 	mov.w	r8, #0
   287c6:	4650      	mov	r0, sl
   287c8:	f005 ff52 	bl	2e670 <net_buf_simple_reserve>
   287cc:	f884 8014 	strb.w	r8, [r4, #20]
	cmd(buf)->opcode = opcode;
   287d0:	4620      	mov	r0, r4
   287d2:	f005 fe03 	bl	2e3dc <net_buf_id>
   287d6:	4d11      	ldr	r5, [pc, #68]	; (2881c <bt_hci_cmd_create+0x90>)
   287d8:	f04f 090c 	mov.w	r9, #12
   287dc:	fb09 5000 	mla	r0, r9, r0, r5
   287e0:	8046      	strh	r6, [r0, #2]
	cmd(buf)->sync = NULL;
   287e2:	4620      	mov	r0, r4
   287e4:	f005 fdfa 	bl	2e3dc <net_buf_id>
   287e8:	fb09 5000 	mla	r0, r9, r0, r5
   287ec:	f8c0 8008 	str.w	r8, [r0, #8]
	cmd(buf)->state = NULL;
   287f0:	4620      	mov	r0, r4
   287f2:	f005 fdf3 	bl	2e3dc <net_buf_id>
   287f6:	fb09 5500 	mla	r5, r9, r0, r5
	return net_buf_simple_add(&buf->b, len);
   287fa:	2103      	movs	r1, #3
   287fc:	f8c5 8004 	str.w	r8, [r5, #4]
   28800:	4650      	mov	r0, sl
   28802:	f006 f943 	bl	2ea8c <net_buf_simple_add>
	hdr->opcode = sys_cpu_to_le16(opcode);
   28806:	8006      	strh	r6, [r0, #0]
	hdr->param_len = param_len;
   28808:	7087      	strb	r7, [r0, #2]
}
   2880a:	4620      	mov	r0, r4
   2880c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   28810:	20000c88 	.word	0x20000c88
   28814:	0003dde0 	.word	0x0003dde0
   28818:	0003d1d7 	.word	0x0003d1d7
   2881c:	20002e0c 	.word	0x20002e0c

00028820 <bt_hci_cmd_send_sync>:
{
   28820:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   28824:	b086      	sub	sp, #24
   28826:	4680      	mov	r8, r0
   28828:	af00      	add	r7, sp, #0
   2882a:	4615      	mov	r5, r2
	if (!buf) {
   2882c:	460c      	mov	r4, r1
   2882e:	b921      	cbnz	r1, 2883a <bt_hci_cmd_send_sync+0x1a>
		buf = bt_hci_cmd_create(opcode, 0);
   28830:	f7ff ffac 	bl	2878c <bt_hci_cmd_create>
		if (!buf) {
   28834:	4604      	mov	r4, r0
   28836:	2800      	cmp	r0, #0
   28838:	d056      	beq.n	288e8 <bt_hci_cmd_send_sync+0xc8>
	return z_impl_k_sem_init(sem, initial_count, limit);
   2883a:	2201      	movs	r2, #1
   2883c:	2100      	movs	r1, #0
   2883e:	4638      	mov	r0, r7
   28840:	f013 fa23 	bl	3bc8a <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
   28844:	4620      	mov	r0, r4
   28846:	f005 fdc9 	bl	2e3dc <net_buf_id>
   2884a:	4e29      	ldr	r6, [pc, #164]	; (288f0 <bt_hci_cmd_send_sync+0xd0>)
   2884c:	230c      	movs	r3, #12
   2884e:	fb03 6000 	mla	r0, r3, r0, r6
   28852:	6087      	str	r7, [r0, #8]
	net_buf_put(&bt_dev.cmd_tx_queue, net_buf_ref(buf));
   28854:	4620      	mov	r0, r4
   28856:	f006 f855 	bl	2e904 <net_buf_ref>
   2885a:	4601      	mov	r1, r0
   2885c:	4825      	ldr	r0, [pc, #148]	; (288f4 <bt_hci_cmd_send_sync+0xd4>)
   2885e:	f005 ffe5 	bl	2e82c <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
   28862:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   28866:	2300      	movs	r3, #0
   28868:	4638      	mov	r0, r7
   2886a:	f00c ffd7 	bl	3581c <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
   2886e:	b158      	cbz	r0, 28888 <bt_hci_cmd_send_sync+0x68>
   28870:	4921      	ldr	r1, [pc, #132]	; (288f8 <bt_hci_cmd_send_sync+0xd8>)
   28872:	4822      	ldr	r0, [pc, #136]	; (288fc <bt_hci_cmd_send_sync+0xdc>)
   28874:	f240 1249 	movw	r2, #329	; 0x149
   28878:	f010 f94b 	bl	38b12 <assert_print>
   2887c:	4040      	eors	r0, r0
   2887e:	f380 8811 	msr	BASEPRI, r0
   28882:	f04f 0003 	mov.w	r0, #3
   28886:	df02      	svc	2
	status = cmd(buf)->status;
   28888:	4620      	mov	r0, r4
   2888a:	f005 fda7 	bl	2e3dc <net_buf_id>
   2888e:	230c      	movs	r3, #12
   28890:	4358      	muls	r0, r3
   28892:	5c36      	ldrb	r6, [r6, r0]
	if (status) {
   28894:	b306      	cbz	r6, 288d8 <bt_hci_cmd_send_sync+0xb8>
		BT_WARN("opcode 0x%04x status 0x%02x", opcode, status);
   28896:	481a      	ldr	r0, [pc, #104]	; (28900 <bt_hci_cmd_send_sync+0xe0>)
   28898:	6803      	ldr	r3, [r0, #0]
   2889a:	f013 0f06 	tst.w	r3, #6
   2889e:	d00e      	beq.n	288be <bt_hci_cmd_send_sync+0x9e>
   288a0:	466d      	mov	r5, sp
   288a2:	b088      	sub	sp, #32
   288a4:	466a      	mov	r2, sp
   288a6:	4b17      	ldr	r3, [pc, #92]	; (28904 <bt_hci_cmd_send_sync+0xe4>)
   288a8:	61d6      	str	r6, [r2, #28]
   288aa:	e9c2 3805 	strd	r3, r8, [r2, #20]
   288ae:	2304      	movs	r3, #4
   288b0:	f842 3f10 	str.w	r3, [r2, #16]!
   288b4:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   288b8:	f010 fe1c 	bl	394f4 <z_log_msg_static_create.constprop.0>
   288bc:	46ad      	mov	sp, r5
		net_buf_unref(buf);
   288be:	4620      	mov	r0, r4
   288c0:	f005 ffde 	bl	2e880 <net_buf_unref>
			return -ECONNREFUSED;
   288c4:	2e09      	cmp	r6, #9
   288c6:	bf14      	ite	ne
   288c8:	f06f 0004 	mvnne.w	r0, #4
   288cc:	f06f 006e 	mvneq.w	r0, #110	; 0x6e
}
   288d0:	3718      	adds	r7, #24
   288d2:	46bd      	mov	sp, r7
   288d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (rsp) {
   288d8:	b115      	cbz	r5, 288e0 <bt_hci_cmd_send_sync+0xc0>
		*rsp = buf;
   288da:	602c      	str	r4, [r5, #0]
	return 0;
   288dc:	2000      	movs	r0, #0
   288de:	e7f7      	b.n	288d0 <bt_hci_cmd_send_sync+0xb0>
		net_buf_unref(buf);
   288e0:	4620      	mov	r0, r4
   288e2:	f005 ffcd 	bl	2e880 <net_buf_unref>
   288e6:	e7f9      	b.n	288dc <bt_hci_cmd_send_sync+0xbc>
			return -ENOBUFS;
   288e8:	f06f 0068 	mvn.w	r0, #104	; 0x68
   288ec:	e7f0      	b.n	288d0 <bt_hci_cmd_send_sync+0xb0>
   288ee:	bf00      	nop
   288f0:	20002e0c 	.word	0x20002e0c
   288f4:	2000051c 	.word	0x2000051c
   288f8:	0003dde0 	.word	0x0003dde0
   288fc:	0003d1d7 	.word	0x0003d1d7
   28900:	20000a8c 	.word	0x20000a8c
   28904:	0003df09 	.word	0x0003df09

00028908 <hci_le_read_max_data_len>:
{
   28908:	b570      	push	{r4, r5, r6, lr}
   2890a:	b088      	sub	sp, #32
   2890c:	4606      	mov	r6, r0
   2890e:	460d      	mov	r5, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
   28910:	aa01      	add	r2, sp, #4
   28912:	2100      	movs	r1, #0
   28914:	f242 002f 	movw	r0, #8239	; 0x202f
   28918:	f7ff ff82 	bl	28820 <bt_hci_cmd_send_sync>
	if (err) {
   2891c:	4604      	mov	r4, r0
   2891e:	b178      	cbz	r0, 28940 <hci_le_read_max_data_len+0x38>
		BT_ERR("Failed to read DLE max data len");
   28920:	480d      	ldr	r0, [pc, #52]	; (28958 <hci_le_read_max_data_len+0x50>)
   28922:	6803      	ldr	r3, [r0, #0]
   28924:	075b      	lsls	r3, r3, #29
   28926:	d008      	beq.n	2893a <hci_le_read_max_data_len+0x32>
   28928:	4b0c      	ldr	r3, [pc, #48]	; (2895c <hci_le_read_max_data_len+0x54>)
   2892a:	9307      	str	r3, [sp, #28]
   2892c:	aa06      	add	r2, sp, #24
   2892e:	2302      	movs	r3, #2
   28930:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   28934:	9306      	str	r3, [sp, #24]
   28936:	f010 fddd 	bl	394f4 <z_log_msg_static_create.constprop.0>
}
   2893a:	4620      	mov	r0, r4
   2893c:	b008      	add	sp, #32
   2893e:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
   28940:	9801      	ldr	r0, [sp, #4]
   28942:	6883      	ldr	r3, [r0, #8]
	*tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
   28944:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   28948:	8032      	strh	r2, [r6, #0]
	*tx_time = sys_le16_to_cpu(rp->max_tx_time);
   2894a:	f8b3 3003 	ldrh.w	r3, [r3, #3]
   2894e:	802b      	strh	r3, [r5, #0]
	net_buf_unref(rsp);
   28950:	f005 ff96 	bl	2e880 <net_buf_unref>
	return 0;
   28954:	e7f1      	b.n	2893a <hci_le_read_max_data_len+0x32>
   28956:	bf00      	nop
   28958:	20000a8c 	.word	0x20000a8c
   2895c:	0003df25 	.word	0x0003df25

00028960 <bt_hci_le_rand>:
{
   28960:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
   28962:	4b14      	ldr	r3, [pc, #80]	; (289b4 <bt_hci_le_rand+0x54>)
   28964:	f993 306f 	ldrsb.w	r3, [r3, #111]	; 0x6f
   28968:	2b00      	cmp	r3, #0
{
   2896a:	4605      	mov	r5, r0
   2896c:	460c      	mov	r4, r1
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
   2896e:	da1d      	bge.n	289ac <bt_hci_le_rand+0x4c>
	while (len > 0) {
   28970:	b914      	cbnz	r4, 28978 <bt_hci_le_rand+0x18>
	return 0;
   28972:	4620      	mov	r0, r4
}
   28974:	b003      	add	sp, #12
   28976:	bdf0      	pop	{r4, r5, r6, r7, pc}
		count = MIN(len, sizeof(rp->rand));
   28978:	2c08      	cmp	r4, #8
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
   2897a:	aa01      	add	r2, sp, #4
   2897c:	f04f 0100 	mov.w	r1, #0
   28980:	f242 0018 	movw	r0, #8216	; 0x2018
		count = MIN(len, sizeof(rp->rand));
   28984:	4626      	mov	r6, r4
   28986:	bf28      	it	cs
   28988:	2608      	movcs	r6, #8
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
   2898a:	f7ff ff49 	bl	28820 <bt_hci_cmd_send_sync>
		if (err) {
   2898e:	2800      	cmp	r0, #0
   28990:	d1f0      	bne.n	28974 <bt_hci_le_rand+0x14>
		rp = (void *)rsp->data;
   28992:	9f01      	ldr	r7, [sp, #4]
		memcpy(buffer, rp->rand, count);
   28994:	68b9      	ldr	r1, [r7, #8]
   28996:	4632      	mov	r2, r6
   28998:	3101      	adds	r1, #1
   2899a:	4628      	mov	r0, r5
   2899c:	f010 fd08 	bl	393b0 <memcpy>
		net_buf_unref(rsp);
   289a0:	4638      	mov	r0, r7
   289a2:	f005 ff6d 	bl	2e880 <net_buf_unref>
		buffer = (uint8_t *)buffer + count;
   289a6:	4435      	add	r5, r6
		len -= count;
   289a8:	1ba4      	subs	r4, r4, r6
   289aa:	e7e1      	b.n	28970 <bt_hci_le_rand+0x10>
		return -ENOTSUP;
   289ac:	f06f 0085 	mvn.w	r0, #133	; 0x85
   289b0:	e7e0      	b.n	28974 <bt_hci_le_rand+0x14>
   289b2:	bf00      	nop
   289b4:	20000400 	.word	0x20000400

000289b8 <bt_hci_le_enh_conn_complete>:
{
   289b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   289bc:	b089      	sub	sp, #36	; 0x24
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   289be:	f8b0 b001 	ldrh.w	fp, [r0, #1]
		if (disconnected_handles[i] == handle) {
   289c2:	4aa9      	ldr	r2, [pc, #676]	; (28c68 <bt_hci_le_enh_conn_complete+0x2b0>)
	handle |= ~BT_ACL_HANDLE_MASK;
   289c4:	ea6f 530b 	mvn.w	r3, fp, lsl #20
		if (disconnected_handles[i] == handle) {
   289c8:	8811      	ldrh	r1, [r2, #0]
	handle |= ~BT_ACL_HANDLE_MASK;
   289ca:	ea6f 5313 	mvn.w	r3, r3, lsr #20
		if (disconnected_handles[i] == handle) {
   289ce:	b29b      	uxth	r3, r3
   289d0:	4299      	cmp	r1, r3
   289d2:	f04f 0800 	mov.w	r8, #0
			disconnected_handles[i] = 0;
   289d6:	bf08      	it	eq
   289d8:	f8a2 8000 	strheq.w	r8, [r2]
	if (evt->status) {
   289dc:	7803      	ldrb	r3, [r0, #0]
{
   289de:	af02      	add	r7, sp, #8
   289e0:	4605      	mov	r5, r0
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   289e2:	fa1f f98b 	uxth.w	r9, fp
			return true;
   289e6:	bf08      	it	eq
   289e8:	f04f 0801 	moveq.w	r8, #1
	if (evt->status) {
   289ec:	b1c3      	cbz	r3, 28a20 <bt_hci_le_enh_conn_complete+0x68>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   289ee:	2b3c      	cmp	r3, #60	; 0x3c
   289f0:	d012      	beq.n	28a18 <bt_hci_le_enh_conn_complete+0x60>
		BT_WARN("Unexpected status 0x%02x", evt->status);
   289f2:	489e      	ldr	r0, [pc, #632]	; (28c6c <bt_hci_le_enh_conn_complete+0x2b4>)
   289f4:	6802      	ldr	r2, [r0, #0]
   289f6:	f012 0f06 	tst.w	r2, #6
   289fa:	d00d      	beq.n	28a18 <bt_hci_le_enh_conn_complete+0x60>
   289fc:	466c      	mov	r4, sp
   289fe:	b088      	sub	sp, #32
   28a00:	aa02      	add	r2, sp, #8
   28a02:	499b      	ldr	r1, [pc, #620]	; (28c70 <bt_hci_le_enh_conn_complete+0x2b8>)
   28a04:	e9c2 1305 	strd	r1, r3, [r2, #20]
   28a08:	2303      	movs	r3, #3
   28a0a:	f842 3f10 	str.w	r3, [r2, #16]!
   28a0e:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   28a12:	f010 fd6f 	bl	394f4 <z_log_msg_static_create.constprop.0>
   28a16:	46a5      	mov	sp, r4
}
   28a18:	371c      	adds	r7, #28
   28a1a:	46bd      	mov	sp, r7
   28a1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   28a20:	7902      	ldrb	r2, [r0, #4]
   28a22:	3a02      	subs	r2, #2
   28a24:	2a01      	cmp	r2, #1
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
   28a26:	f100 0a04 	add.w	sl, r0, #4
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   28a2a:	d832      	bhi.n	28a92 <bt_hci_le_enh_conn_complete+0xda>
	memcpy(dst, src, sizeof(*dst));
   28a2c:	2207      	movs	r2, #7
   28a2e:	4651      	mov	r1, sl
   28a30:	f107 0010 	add.w	r0, r7, #16
   28a34:	f010 fcbc 	bl	393b0 <memcpy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   28a38:	7c3b      	ldrb	r3, [r7, #16]
	memcpy(dst, src, sizeof(*dst));
   28a3a:	2206      	movs	r2, #6
   28a3c:	3b02      	subs	r3, #2
   28a3e:	f105 0111 	add.w	r1, r5, #17
   28a42:	f107 0009 	add.w	r0, r7, #9
   28a46:	743b      	strb	r3, [r7, #16]
   28a48:	f010 fcb2 	bl	393b0 <memcpy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
   28a4c:	2301      	movs	r3, #1
   28a4e:	723b      	strb	r3, [r7, #8]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
   28a50:	78eb      	ldrb	r3, [r5, #3]
   28a52:	2b01      	cmp	r3, #1
   28a54:	d034      	beq.n	28ac0 <bt_hci_le_enh_conn_complete+0x108>
		BT_ERR("No pending conn for peer %s",
   28a56:	4c85      	ldr	r4, [pc, #532]	; (28c6c <bt_hci_le_enh_conn_complete+0x2b4>)
   28a58:	6823      	ldr	r3, [r4, #0]
   28a5a:	075e      	lsls	r6, r3, #29
   28a5c:	d014      	beq.n	28a88 <bt_hci_le_enh_conn_complete+0xd0>
   28a5e:	4650      	mov	r0, sl
   28a60:	f7ff f93c 	bl	27cdc <bt_addr_le_str>
   28a64:	466d      	mov	r5, sp
   28a66:	b088      	sub	sp, #32
   28a68:	aa02      	add	r2, sp, #8
   28a6a:	4b82      	ldr	r3, [pc, #520]	; (28c74 <bt_hci_le_enh_conn_complete+0x2bc>)
   28a6c:	e9c2 3005 	strd	r3, r0, [r2, #20]
   28a70:	f44f 7300 	mov.w	r3, #512	; 0x200
   28a74:	8393      	strh	r3, [r2, #28]
   28a76:	4b80      	ldr	r3, [pc, #512]	; (28c78 <bt_hci_le_enh_conn_complete+0x2c0>)
   28a78:	f842 3f10 	str.w	r3, [r2, #16]!
   28a7c:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   28a80:	4620      	mov	r0, r4
   28a82:	f010 fd37 	bl	394f4 <z_log_msg_static_create.constprop.0>
   28a86:	46ad      	mov	sp, r5
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
   28a88:	211f      	movs	r1, #31
   28a8a:	4648      	mov	r0, r9
   28a8c:	f010 fd35 	bl	394fa <bt_hci_disconnect>
		return;
   28a90:	e7c2      	b.n	28a18 <bt_hci_le_enh_conn_complete+0x60>
		uint8_t id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id :
   28a92:	78c2      	ldrb	r2, [r0, #3]
   28a94:	2a01      	cmp	r2, #1
   28a96:	bf04      	itt	eq
   28a98:	4b78      	ldreq	r3, [pc, #480]	; (28c7c <bt_hci_le_enh_conn_complete+0x2c4>)
   28a9a:	f893 3042 	ldrbeq.w	r3, [r3, #66]	; 0x42
		bt_addr_le_copy(&id_addr,
   28a9e:	4651      	mov	r1, sl
   28aa0:	4618      	mov	r0, r3
   28aa2:	f010 fdd9 	bl	39658 <bt_lookup_id_addr>
	memcpy(dst, src, sizeof(*dst));
   28aa6:	2207      	movs	r2, #7
   28aa8:	4601      	mov	r1, r0
   28aaa:	f107 0010 	add.w	r0, r7, #16
   28aae:	f010 fc7f 	bl	393b0 <memcpy>
   28ab2:	2207      	movs	r2, #7
   28ab4:	4651      	mov	r1, sl
   28ab6:	f107 0008 	add.w	r0, r7, #8
   28aba:	f010 fc79 	bl	393b0 <memcpy>
}
   28abe:	e7c7      	b.n	28a50 <bt_hci_le_enh_conn_complete+0x98>
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
   28ac0:	4e6e      	ldr	r6, [pc, #440]	; (28c7c <bt_hci_le_enh_conn_complete+0x2c4>)
   28ac2:	2205      	movs	r2, #5
   28ac4:	f896 0042 	ldrb.w	r0, [r6, #66]	; 0x42
   28ac8:	f107 0110 	add.w	r1, r7, #16
   28acc:	f002 fbcc 	bl	2b268 <bt_conn_lookup_state_le>
		if (!conn) {
   28ad0:	4604      	mov	r4, r0
   28ad2:	b940      	cbnz	r0, 28ae6 <bt_hci_le_enh_conn_complete+0x12e>
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
   28ad4:	496a      	ldr	r1, [pc, #424]	; (28c80 <bt_hci_le_enh_conn_complete+0x2c8>)
   28ad6:	f896 0042 	ldrb.w	r0, [r6, #66]	; 0x42
   28ada:	2204      	movs	r2, #4
   28adc:	f002 fbc4 	bl	2b268 <bt_conn_lookup_state_le>
	if (!conn) {
   28ae0:	4604      	mov	r4, r0
   28ae2:	2800      	cmp	r0, #0
   28ae4:	d0b7      	beq.n	28a56 <bt_hci_le_enh_conn_complete+0x9e>
	conn->handle = handle;
   28ae6:	4620      	mov	r0, r4
	memcpy(dst, src, sizeof(*dst));
   28ae8:	2207      	movs	r2, #7
   28aea:	f820 bb90 	strh.w	fp, [r0], #144
   28aee:	f107 0110 	add.w	r1, r7, #16
   28af2:	f010 fc5d 	bl	393b0 <memcpy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
   28af6:	f8b5 3017 	ldrh.w	r3, [r5, #23]
   28afa:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
	conn->le.latency = sys_le16_to_cpu(evt->latency);
   28afe:	f8b5 3019 	ldrh.w	r3, [r5, #25]
   28b02:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   28b06:	f8b5 301b 	ldrh.w	r3, [r5, #27]
   28b0a:	f8a4 30ae 	strh.w	r3, [r4, #174]	; 0xae
	conn->role = evt->role;
   28b0e:	78eb      	ldrb	r3, [r5, #3]
   28b10:	70e3      	strb	r3, [r4, #3]
	conn->err = 0U;
   28b12:	2200      	movs	r2, #0
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   28b14:	2b01      	cmp	r3, #1
	conn->err = 0U;
   28b16:	7262      	strb	r2, [r4, #9]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   28b18:	d113      	bne.n	28b42 <bt_hci_le_enh_conn_complete+0x18a>
   28b1a:	2207      	movs	r2, #7
   28b1c:	f107 0108 	add.w	r1, r7, #8
   28b20:	f104 0097 	add.w	r0, r4, #151	; 0x97
   28b24:	f010 fc44 	bl	393b0 <memcpy>
	memcpy(dst, src, sizeof(*dst));
   28b28:	f105 010b 	add.w	r1, r5, #11
   28b2c:	2206      	movs	r2, #6
   28b2e:	f104 009f 	add.w	r0, r4, #159	; 0x9f
   28b32:	f010 fc3d 	bl	393b0 <memcpy>
		if (BT_LE_STATES_PER_CONN_ADV(bt_dev.le.states)) {
   28b36:	f8d6 30bc 	ldr.w	r3, [r6, #188]	; 0xbc
   28b3a:	065d      	lsls	r5, r3, #25
   28b3c:	d501      	bpl.n	28b42 <bt_hci_le_enh_conn_complete+0x18a>
			bt_le_adv_resume();
   28b3e:	f001 fbad 	bl	2a29c <bt_le_adv_resume>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
   28b42:	2107      	movs	r1, #7
   28b44:	4620      	mov	r0, r4
   28b46:	f002 f919 	bl	2ad7c <bt_conn_set_state>
	if (is_disconnected) {
   28b4a:	f1b8 0f00 	cmp.w	r8, #0
   28b4e:	d003      	beq.n	28b58 <bt_hci_le_enh_conn_complete+0x1a0>
		bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   28b50:	2101      	movs	r1, #1
   28b52:	4620      	mov	r0, r4
   28b54:	f002 f912 	bl	2ad7c <bt_conn_set_state>
	bt_conn_connected(conn);
   28b58:	4620      	mov	r0, r4
   28b5a:	f010 ff89 	bl	39a70 <bt_conn_connected>
	if (conn->state != BT_CONN_CONNECTED) {
   28b5e:	7aa3      	ldrb	r3, [r4, #10]
   28b60:	2b07      	cmp	r3, #7
   28b62:	d17a      	bne.n	28c5a <bt_hci_le_enh_conn_complete+0x2a2>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   28b64:	f3bf 8f5b 	dmb	ish
   28b68:	6863      	ldr	r3, [r4, #4]
   28b6a:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
   28b6e:	0518      	lsls	r0, r3, #20
   28b70:	d42d      	bmi.n	28bce <bt_hci_le_enh_conn_complete+0x216>
   28b72:	78e3      	ldrb	r3, [r4, #3]
   28b74:	b11b      	cbz	r3, 28b7e <bt_hci_le_enh_conn_complete+0x1c6>
	    ((conn->role == BT_HCI_ROLE_CENTRAL) ||
   28b76:	f896 30b0 	ldrb.w	r3, [r6, #176]	; 0xb0
   28b7a:	0719      	lsls	r1, r3, #28
   28b7c:	d527      	bpl.n	28bce <bt_hci_le_enh_conn_complete+0x216>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
   28b7e:	2102      	movs	r1, #2
   28b80:	f242 0016 	movw	r0, #8214	; 0x2016
   28b84:	f7ff fe02 	bl	2878c <bt_hci_cmd_create>
	if (!buf) {
   28b88:	4605      	mov	r5, r0
   28b8a:	2800      	cmp	r0, #0
   28b8c:	d069      	beq.n	28c62 <bt_hci_le_enh_conn_complete+0x2aa>
   28b8e:	2102      	movs	r1, #2
   28b90:	3008      	adds	r0, #8
   28b92:	f005 ff7b 	bl	2ea8c <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   28b96:	8823      	ldrh	r3, [r4, #0]
   28b98:	8003      	strh	r3, [r0, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf, NULL);
   28b9a:	2200      	movs	r2, #0
   28b9c:	4629      	mov	r1, r5
   28b9e:	f242 0016 	movw	r0, #8214	; 0x2016
   28ba2:	f7ff fe3d 	bl	28820 <bt_hci_cmd_send_sync>
		if (err) {
   28ba6:	4603      	mov	r3, r0
   28ba8:	b188      	cbz	r0, 28bce <bt_hci_le_enh_conn_complete+0x216>
			BT_ERR("Failed read remote features (%d)", err);
   28baa:	4830      	ldr	r0, [pc, #192]	; (28c6c <bt_hci_le_enh_conn_complete+0x2b4>)
   28bac:	6802      	ldr	r2, [r0, #0]
   28bae:	0752      	lsls	r2, r2, #29
   28bb0:	d00d      	beq.n	28bce <bt_hci_le_enh_conn_complete+0x216>
   28bb2:	466d      	mov	r5, sp
   28bb4:	b088      	sub	sp, #32
   28bb6:	aa02      	add	r2, sp, #8
   28bb8:	4932      	ldr	r1, [pc, #200]	; (28c84 <bt_hci_le_enh_conn_complete+0x2cc>)
   28bba:	e9c2 1305 	strd	r1, r3, [r2, #20]
   28bbe:	2303      	movs	r3, #3
   28bc0:	f842 3f10 	str.w	r3, [r2, #16]!
   28bc4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   28bc8:	f010 fc94 	bl	394f4 <z_log_msg_static_create.constprop.0>
   28bcc:	46ad      	mov	sp, r5
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
   28bce:	f896 30b1 	ldrb.w	r3, [r6, #177]	; 0xb1
   28bd2:	07db      	lsls	r3, r3, #31
   28bd4:	d51a      	bpl.n	28c0c <bt_hci_le_enh_conn_complete+0x254>
		err = bt_le_set_phy(conn, 0U, BT_HCI_LE_PHY_PREFER_2M,
   28bd6:	2302      	movs	r3, #2
   28bd8:	2100      	movs	r1, #0
   28bda:	461a      	mov	r2, r3
   28bdc:	9100      	str	r1, [sp, #0]
   28bde:	4620      	mov	r0, r4
   28be0:	f010 fcc4 	bl	3956c <bt_le_set_phy>
		if (err) {
   28be4:	4603      	mov	r3, r0
   28be6:	b188      	cbz	r0, 28c0c <bt_hci_le_enh_conn_complete+0x254>
			BT_ERR("Failed LE Set PHY (%d)", err);
   28be8:	4820      	ldr	r0, [pc, #128]	; (28c6c <bt_hci_le_enh_conn_complete+0x2b4>)
   28bea:	6802      	ldr	r2, [r0, #0]
   28bec:	0755      	lsls	r5, r2, #29
   28bee:	d00d      	beq.n	28c0c <bt_hci_le_enh_conn_complete+0x254>
   28bf0:	466d      	mov	r5, sp
   28bf2:	b088      	sub	sp, #32
   28bf4:	aa02      	add	r2, sp, #8
   28bf6:	4924      	ldr	r1, [pc, #144]	; (28c88 <bt_hci_le_enh_conn_complete+0x2d0>)
   28bf8:	e9c2 1305 	strd	r1, r3, [r2, #20]
   28bfc:	2303      	movs	r3, #3
   28bfe:	f842 3f10 	str.w	r3, [r2, #16]!
   28c02:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   28c06:	f010 fc75 	bl	394f4 <z_log_msg_static_create.constprop.0>
   28c0a:	46ad      	mov	sp, r5
	if (IS_ENABLED(CONFIG_BT_AUTO_DATA_LEN_UPDATE) &&
   28c0c:	f896 30b0 	ldrb.w	r3, [r6, #176]	; 0xb0
   28c10:	0698      	lsls	r0, r3, #26
   28c12:	d522      	bpl.n	28c5a <bt_hci_le_enh_conn_complete+0x2a2>
		if (IS_BT_QUIRK_NO_AUTO_DLE(&bt_dev)) {
   28c14:	f8d6 3138 	ldr.w	r3, [r6, #312]	; 0x138
   28c18:	689b      	ldr	r3, [r3, #8]
   28c1a:	0799      	lsls	r1, r3, #30
   28c1c:	d51d      	bpl.n	28c5a <bt_hci_le_enh_conn_complete+0x2a2>
			err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   28c1e:	1db9      	adds	r1, r7, #6
   28c20:	1d38      	adds	r0, r7, #4
   28c22:	f7ff fe71 	bl	28908 <hci_le_read_max_data_len>
			if (!err) {
   28c26:	b9c0      	cbnz	r0, 28c5a <bt_hci_le_enh_conn_complete+0x2a2>
				err = bt_le_set_data_len(conn,
   28c28:	88fa      	ldrh	r2, [r7, #6]
   28c2a:	88b9      	ldrh	r1, [r7, #4]
   28c2c:	4620      	mov	r0, r4
   28c2e:	f010 fc7f 	bl	39530 <bt_le_set_data_len>
				if (err) {
   28c32:	4603      	mov	r3, r0
   28c34:	b188      	cbz	r0, 28c5a <bt_hci_le_enh_conn_complete+0x2a2>
					BT_ERR("Failed to set data len (%d)", err);
   28c36:	480d      	ldr	r0, [pc, #52]	; (28c6c <bt_hci_le_enh_conn_complete+0x2b4>)
   28c38:	6802      	ldr	r2, [r0, #0]
   28c3a:	0752      	lsls	r2, r2, #29
   28c3c:	d00d      	beq.n	28c5a <bt_hci_le_enh_conn_complete+0x2a2>
   28c3e:	466d      	mov	r5, sp
   28c40:	b088      	sub	sp, #32
   28c42:	aa02      	add	r2, sp, #8
   28c44:	4911      	ldr	r1, [pc, #68]	; (28c8c <bt_hci_le_enh_conn_complete+0x2d4>)
   28c46:	e9c2 1305 	strd	r1, r3, [r2, #20]
   28c4a:	2303      	movs	r3, #3
   28c4c:	f842 3f10 	str.w	r3, [r2, #16]!
   28c50:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   28c54:	f010 fc4e 	bl	394f4 <z_log_msg_static_create.constprop.0>
   28c58:	46ad      	mov	sp, r5
	bt_conn_unref(conn);
   28c5a:	4620      	mov	r0, r4
   28c5c:	f002 f856 	bl	2ad0c <bt_conn_unref>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   28c60:	e6da      	b.n	28a18 <bt_hci_le_enh_conn_complete+0x60>
		return -ENOBUFS;
   28c62:	f06f 0368 	mvn.w	r3, #104	; 0x68
   28c66:	e7a0      	b.n	28baa <bt_hci_le_enh_conn_complete+0x1f2>
   28c68:	200033e0 	.word	0x200033e0
   28c6c:	20000a8c 	.word	0x20000a8c
   28c70:	0003df45 	.word	0x0003df45
   28c74:	0003df5e 	.word	0x0003df5e
   28c78:	01000003 	.word	0x01000003
   28c7c:	20000400 	.word	0x20000400
   28c80:	0003dc11 	.word	0x0003dc11
   28c84:	0003df7a 	.word	0x0003df7a
   28c88:	0003df9b 	.word	0x0003df9b
   28c8c:	0003dfb2 	.word	0x0003dfb2

00028c90 <enh_conn_complete>:
{
   28c90:	b538      	push	{r3, r4, r5, lr}
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   28c92:	78c5      	ldrb	r5, [r0, #3]
   28c94:	2d01      	cmp	r5, #1
   28c96:	d106      	bne.n	28ca6 <enh_conn_complete+0x16>
		evt->role == BT_HCI_ROLE_PERIPHERAL &&
   28c98:	7803      	ldrb	r3, [r0, #0]
   28c9a:	b923      	cbnz	r3, 28ca6 <enh_conn_complete+0x16>
				BT_FEAT_LE_EXT_ADV(bt_dev.le.features))) {
   28c9c:	4c0f      	ldr	r4, [pc, #60]	; (28cdc <enh_conn_complete+0x4c>)
		evt->status == BT_HCI_ERR_SUCCESS &&
   28c9e:	f894 30b1 	ldrb.w	r3, [r4, #177]	; 0xb1
   28ca2:	06db      	lsls	r3, r3, #27
   28ca4:	d40b      	bmi.n	28cbe <enh_conn_complete+0x2e>
}
   28ca6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_hci_le_enh_conn_complete(evt);
   28caa:	f7ff be85 	b.w	289b8 <bt_hci_le_enh_conn_complete>
				(void)memcpy(&bt_dev.cached_conn_complete[i].evt,
   28cae:	4601      	mov	r1, r0
   28cb0:	221e      	movs	r2, #30
   28cb2:	f104 001d 	add.w	r0, r4, #29
   28cb6:	f010 fb7b 	bl	393b0 <memcpy>
				bt_dev.cached_conn_complete[i].valid = true;
   28cba:	7725      	strb	r5, [r4, #28]
}
   28cbc:	bd38      	pop	{r3, r4, r5, pc}
			if (!bt_dev.cached_conn_complete[i].valid) {
   28cbe:	7f23      	ldrb	r3, [r4, #28]
   28cc0:	2b00      	cmp	r3, #0
   28cc2:	d0f4      	beq.n	28cae <enh_conn_complete+0x1e>
		__ASSERT(false, "No more cache entries available."
   28cc4:	4906      	ldr	r1, [pc, #24]	; (28ce0 <enh_conn_complete+0x50>)
   28cc6:	4807      	ldr	r0, [pc, #28]	; (28ce4 <enh_conn_complete+0x54>)
   28cc8:	f240 428f 	movw	r2, #1167	; 0x48f
   28ccc:	f00f ff21 	bl	38b12 <assert_print>
   28cd0:	4803      	ldr	r0, [pc, #12]	; (28ce0 <enh_conn_complete+0x50>)
   28cd2:	f240 418f 	movw	r1, #1167	; 0x48f
   28cd6:	f00f ff15 	bl	38b04 <assert_post_action>
   28cda:	bf00      	nop
   28cdc:	20000400 	.word	0x20000400
   28ce0:	0003dde0 	.word	0x0003dde0
   28ce4:	0003d1d7 	.word	0x0003d1d7

00028ce8 <le_legacy_conn_complete>:
{
   28ce8:	b510      	push	{r4, lr}
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
   28cea:	6881      	ldr	r1, [r0, #8]
   28cec:	4c18      	ldr	r4, [pc, #96]	; (28d50 <le_legacy_conn_complete+0x68>)
	enh.status         = evt->status;
   28cee:	780b      	ldrb	r3, [r1, #0]
{
   28cf0:	b088      	sub	sp, #32
	memcpy(dst, src, sizeof(*dst));
   28cf2:	2207      	movs	r2, #7
	enh.status         = evt->status;
   28cf4:	f88d 3000 	strb.w	r3, [sp]
	enh.handle         = evt->handle;
   28cf8:	f8b1 3001 	ldrh.w	r3, [r1, #1]
   28cfc:	f8ad 3001 	strh.w	r3, [sp, #1]
	enh.role           = evt->role;
   28d00:	78cb      	ldrb	r3, [r1, #3]
   28d02:	f88d 3003 	strb.w	r3, [sp, #3]
	enh.interval       = evt->interval;
   28d06:	f8b1 300b 	ldrh.w	r3, [r1, #11]
   28d0a:	f8ad 3017 	strh.w	r3, [sp, #23]
	enh.latency        = evt->latency;
   28d0e:	f8b1 300d 	ldrh.w	r3, [r1, #13]
   28d12:	f8ad 3019 	strh.w	r3, [sp, #25]
	enh.supv_timeout   = evt->supv_timeout;
   28d16:	f8b1 300f 	ldrh.w	r3, [r1, #15]
   28d1a:	f8ad 301b 	strh.w	r3, [sp, #27]
	enh.clock_accuracy = evt->clock_accuracy;
   28d1e:	7c4b      	ldrb	r3, [r1, #17]
   28d20:	f88d 301d 	strb.w	r3, [sp, #29]
   28d24:	3104      	adds	r1, #4
   28d26:	a801      	add	r0, sp, #4
   28d28:	f010 fb42 	bl	393b0 <memcpy>
	memcpy(dst, src, sizeof(*dst));
   28d2c:	4621      	mov	r1, r4
   28d2e:	2206      	movs	r2, #6
   28d30:	f10d 000b 	add.w	r0, sp, #11
   28d34:	f010 fb3c 	bl	393b0 <memcpy>
   28d38:	2206      	movs	r2, #6
   28d3a:	4621      	mov	r1, r4
   28d3c:	f10d 0011 	add.w	r0, sp, #17
   28d40:	f010 fb36 	bl	393b0 <memcpy>
	enh_conn_complete(&enh);
   28d44:	4668      	mov	r0, sp
   28d46:	f7ff ffa3 	bl	28c90 <enh_conn_complete>
}
   28d4a:	b008      	add	sp, #32
   28d4c:	bd10      	pop	{r4, pc}
   28d4e:	bf00      	nop
   28d50:	0003dc25 	.word	0x0003dc25

00028d54 <bt_send>:
	return bt_dev.drv->send(buf);
   28d54:	4b02      	ldr	r3, [pc, #8]	; (28d60 <bt_send+0xc>)
   28d56:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
   28d5a:	695b      	ldr	r3, [r3, #20]
   28d5c:	4718      	bx	r3
   28d5e:	bf00      	nop
   28d60:	20000400 	.word	0x20000400

00028d64 <bt_hci_cmd_send>:
{
   28d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   28d66:	4605      	mov	r5, r0
   28d68:	af00      	add	r7, sp, #0
	if (!buf) {
   28d6a:	460c      	mov	r4, r1
   28d6c:	b919      	cbnz	r1, 28d76 <bt_hci_cmd_send+0x12>
		buf = bt_hci_cmd_create(opcode, 0);
   28d6e:	f7ff fd0d 	bl	2878c <bt_hci_cmd_create>
		if (!buf) {
   28d72:	4604      	mov	r4, r0
   28d74:	b330      	cbz	r0, 28dc4 <bt_hci_cmd_send+0x60>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
   28d76:	f640 4335 	movw	r3, #3125	; 0xc35
   28d7a:	429d      	cmp	r5, r3
   28d7c:	d11c      	bne.n	28db8 <bt_hci_cmd_send+0x54>
		err = bt_send(buf);
   28d7e:	4620      	mov	r0, r4
   28d80:	f7ff ffe8 	bl	28d54 <bt_send>
		if (err) {
   28d84:	4605      	mov	r5, r0
   28d86:	b1d8      	cbz	r0, 28dc0 <bt_hci_cmd_send+0x5c>
			BT_ERR("Unable to send to driver (err %d)", err);
   28d88:	4810      	ldr	r0, [pc, #64]	; (28dcc <bt_hci_cmd_send+0x68>)
   28d8a:	6803      	ldr	r3, [r0, #0]
   28d8c:	075b      	lsls	r3, r3, #29
   28d8e:	d00d      	beq.n	28dac <bt_hci_cmd_send+0x48>
   28d90:	466e      	mov	r6, sp
   28d92:	b088      	sub	sp, #32
   28d94:	466a      	mov	r2, sp
   28d96:	4b0e      	ldr	r3, [pc, #56]	; (28dd0 <bt_hci_cmd_send+0x6c>)
   28d98:	e9c2 3505 	strd	r3, r5, [r2, #20]
   28d9c:	2303      	movs	r3, #3
   28d9e:	f842 3f10 	str.w	r3, [r2, #16]!
   28da2:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   28da6:	f010 fba5 	bl	394f4 <z_log_msg_static_create.constprop.0>
   28daa:	46b5      	mov	sp, r6
			net_buf_unref(buf);
   28dac:	4620      	mov	r0, r4
   28dae:	f005 fd67 	bl	2e880 <net_buf_unref>
}
   28db2:	4628      	mov	r0, r5
   28db4:	46bd      	mov	sp, r7
   28db6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
   28db8:	4806      	ldr	r0, [pc, #24]	; (28dd4 <bt_hci_cmd_send+0x70>)
   28dba:	4621      	mov	r1, r4
   28dbc:	f005 fd36 	bl	2e82c <net_buf_put>
	return 0;
   28dc0:	2500      	movs	r5, #0
   28dc2:	e7f6      	b.n	28db2 <bt_hci_cmd_send+0x4e>
			return -ENOBUFS;
   28dc4:	f06f 0568 	mvn.w	r5, #104	; 0x68
   28dc8:	e7f3      	b.n	28db2 <bt_hci_cmd_send+0x4e>
   28dca:	bf00      	nop
   28dcc:	20000a8c 	.word	0x20000a8c
   28dd0:	0003dfce 	.word	0x0003dfce
   28dd4:	2000051c 	.word	0x2000051c

00028dd8 <le_conn_param_req>:
{
   28dd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   28ddc:	b082      	sub	sp, #8
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
   28dde:	6883      	ldr	r3, [r0, #8]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   28de0:	78d9      	ldrb	r1, [r3, #3]
   28de2:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
   28de4:	f8b3 8000 	ldrh.w	r8, [r3]
{
   28de8:	af00      	add	r7, sp, #0
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   28dea:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   28dee:	803a      	strh	r2, [r7, #0]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
   28df0:	7959      	ldrb	r1, [r3, #5]
   28df2:	791a      	ldrb	r2, [r3, #4]
   28df4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   28df8:	807a      	strh	r2, [r7, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
   28dfa:	799a      	ldrb	r2, [r3, #6]
   28dfc:	79d9      	ldrb	r1, [r3, #7]
   28dfe:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   28e02:	80ba      	strh	r2, [r7, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
   28e04:	7a1a      	ldrb	r2, [r3, #8]
   28e06:	7a5b      	ldrb	r3, [r3, #9]
	handle = sys_le16_to_cpu(evt->handle);
   28e08:	fa1f f488 	uxth.w	r4, r8
	param.timeout = sys_le16_to_cpu(evt->timeout);
   28e0c:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	conn = bt_conn_lookup_handle(handle);
   28e10:	4620      	mov	r0, r4
	param.timeout = sys_le16_to_cpu(evt->timeout);
   28e12:	80fb      	strh	r3, [r7, #6]
	conn = bt_conn_lookup_handle(handle);
   28e14:	f001 ffaa 	bl	2ad6c <bt_conn_lookup_handle>
	if (!conn) {
   28e18:	4606      	mov	r6, r0
   28e1a:	b9c8      	cbnz	r0, 28e50 <le_conn_param_req+0x78>
		BT_ERR("Unable to lookup conn for handle %u", handle);
   28e1c:	4823      	ldr	r0, [pc, #140]	; (28eac <le_conn_param_req+0xd4>)
   28e1e:	6803      	ldr	r3, [r0, #0]
   28e20:	075b      	lsls	r3, r3, #29
   28e22:	d00d      	beq.n	28e40 <le_conn_param_req+0x68>
   28e24:	466d      	mov	r5, sp
   28e26:	b088      	sub	sp, #32
   28e28:	466a      	mov	r2, sp
   28e2a:	4b21      	ldr	r3, [pc, #132]	; (28eb0 <le_conn_param_req+0xd8>)
   28e2c:	e9c2 3405 	strd	r3, r4, [r2, #20]
   28e30:	2303      	movs	r3, #3
   28e32:	f842 3f10 	str.w	r3, [r2, #16]!
   28e36:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   28e3a:	f010 fb5b 	bl	394f4 <z_log_msg_static_create.constprop.0>
   28e3e:	46ad      	mov	sp, r5
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
   28e40:	2102      	movs	r1, #2
   28e42:	4620      	mov	r0, r4
   28e44:	f010 fbde 	bl	39604 <le_conn_param_neg_reply>
}
   28e48:	3708      	adds	r7, #8
   28e4a:	46bd      	mov	sp, r7
   28e4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!le_param_req(conn, &param)) {
   28e50:	4639      	mov	r1, r7
   28e52:	f002 f94f 	bl	2b0f4 <le_param_req>
   28e56:	b938      	cbnz	r0, 28e68 <le_conn_param_req+0x90>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
   28e58:	211e      	movs	r1, #30
   28e5a:	4620      	mov	r0, r4
   28e5c:	f010 fbd2 	bl	39604 <le_conn_param_neg_reply>
	bt_conn_unref(conn);
   28e60:	4630      	mov	r0, r6
   28e62:	f001 ff53 	bl	2ad0c <bt_conn_unref>
   28e66:	e7ef      	b.n	28e48 <le_conn_param_req+0x70>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
   28e68:	210e      	movs	r1, #14
   28e6a:	f242 0020 	movw	r0, #8224	; 0x2020
   28e6e:	f7ff fc8d 	bl	2878c <bt_hci_cmd_create>
	if (!buf) {
   28e72:	4605      	mov	r5, r0
   28e74:	2800      	cmp	r0, #0
   28e76:	d0f3      	beq.n	28e60 <le_conn_param_req+0x88>
   28e78:	210e      	movs	r1, #14
   28e7a:	3008      	adds	r0, #8
   28e7c:	f005 fe06 	bl	2ea8c <net_buf_simple_add>
   28e80:	4604      	mov	r4, r0
	(void)memset(cp, 0, sizeof(*cp));
   28e82:	220e      	movs	r2, #14
   28e84:	2100      	movs	r1, #0
   28e86:	f010 fa9e 	bl	393c6 <memset>
	cp->handle = sys_cpu_to_le16(handle);
   28e8a:	f8a4 8000 	strh.w	r8, [r4]
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
   28e8e:	883b      	ldrh	r3, [r7, #0]
   28e90:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
   28e92:	887b      	ldrh	r3, [r7, #2]
   28e94:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
   28e96:	88bb      	ldrh	r3, [r7, #4]
   28e98:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   28e9a:	88fb      	ldrh	r3, [r7, #6]
   28e9c:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
   28e9e:	4629      	mov	r1, r5
   28ea0:	f242 0020 	movw	r0, #8224	; 0x2020
   28ea4:	f7ff ff5e 	bl	28d64 <bt_hci_cmd_send>
   28ea8:	e7da      	b.n	28e60 <le_conn_param_req+0x88>
   28eaa:	bf00      	nop
   28eac:	20000a8c 	.word	0x20000a8c
   28eb0:	0003dd13 	.word	0x0003dd13

00028eb4 <hci_tx_thread>:
{
   28eb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		events[0].state = K_POLL_STATE_NOT_READY;
   28eb8:	f8df 816c 	ldr.w	r8, [pc, #364]	; 29028 <hci_tx_thread+0x174>
		BT_ASSERT(err == 0);
   28ebc:	f8df 916c 	ldr.w	r9, [pc, #364]	; 2902c <hci_tx_thread+0x178>
{
   28ec0:	b087      	sub	sp, #28
   28ec2:	af00      	add	r7, sp, #0
		events[0].state = K_POLL_STATE_NOT_READY;
   28ec4:	f8d8 300c 	ldr.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   28ec8:	4859      	ldr	r0, [pc, #356]	; (29030 <hci_tx_thread+0x17c>)
		events[0].state = K_POLL_STATE_NOT_READY;
   28eca:	f36f 3394 	bfc	r3, #14, #7
   28ece:	f8c8 300c 	str.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   28ed2:	f001 fead 	bl	2ac30 <bt_conn_prepare_events>
   28ed6:	1c45      	adds	r5, r0, #1
	return z_impl_k_poll(events, num_events, timeout);
   28ed8:	4853      	ldr	r0, [pc, #332]	; (29028 <hci_tx_thread+0x174>)
   28eda:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   28ede:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   28ee2:	4629      	mov	r1, r5
   28ee4:	f00e ff0a 	bl	37cfc <z_impl_k_poll>
		BT_ASSERT(err == 0);
   28ee8:	b158      	cbz	r0, 28f02 <hci_tx_thread+0x4e>
   28eea:	4852      	ldr	r0, [pc, #328]	; (29034 <hci_tx_thread+0x180>)
   28eec:	f640 12da 	movw	r2, #2522	; 0x9da
   28ef0:	4649      	mov	r1, r9
   28ef2:	f00f fe0e 	bl	38b12 <assert_print>
   28ef6:	4040      	eors	r0, r0
   28ef8:	f380 8811 	msr	BASEPRI, r0
   28efc:	f04f 0003 	mov.w	r0, #3
   28f00:	df02      	svc	2
{
   28f02:	4e49      	ldr	r6, [pc, #292]	; (29028 <hci_tx_thread+0x174>)
			BT_WARN("Unexpected k_poll event state %u", ev->state);
   28f04:	f8df b130 	ldr.w	fp, [pc, #304]	; 29038 <hci_tx_thread+0x184>
	for (; count; ev++, count--) {
   28f08:	b915      	cbnz	r5, 28f10 <hci_tx_thread+0x5c>
	z_impl_k_yield();
   28f0a:	f00d ffcd 	bl	36ea8 <z_impl_k_yield>
	while (1) {
   28f0e:	e7d9      	b.n	28ec4 <hci_tx_thread+0x10>
		switch (ev->state) {
   28f10:	68f3      	ldr	r3, [r6, #12]
   28f12:	f3c3 3386 	ubfx	r3, r3, #14, #7
   28f16:	2b01      	cmp	r3, #1
   28f18:	d966      	bls.n	28fe8 <hci_tx_thread+0x134>
   28f1a:	2b04      	cmp	r3, #4
   28f1c:	d16e      	bne.n	28ffc <hci_tx_thread+0x148>
			if (ev->tag == BT_EVENT_CMD_TX) {
   28f1e:	7b33      	ldrb	r3, [r6, #12]
   28f20:	2b00      	cmp	r3, #0
   28f22:	d164      	bne.n	28fee <hci_tx_thread+0x13a>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
   28f24:	4845      	ldr	r0, [pc, #276]	; (2903c <hci_tx_thread+0x188>)
   28f26:	2200      	movs	r2, #0
   28f28:	2300      	movs	r3, #0
   28f2a:	f005 fb77 	bl	2e61c <net_buf_get>
	BT_ASSERT(buf);
   28f2e:	4604      	mov	r4, r0
   28f30:	b958      	cbnz	r0, 28f4a <hci_tx_thread+0x96>
   28f32:	4840      	ldr	r0, [pc, #256]	; (29034 <hci_tx_thread+0x180>)
   28f34:	f640 1273 	movw	r2, #2419	; 0x973
   28f38:	4649      	mov	r1, r9
   28f3a:	f00f fdea 	bl	38b12 <assert_print>
   28f3e:	4040      	eors	r0, r0
   28f40:	f380 8811 	msr	BASEPRI, r0
   28f44:	f04f 0003 	mov.w	r0, #3
   28f48:	df02      	svc	2
	if (bt_dev.sent_cmd) {
   28f4a:	f8df a0f4 	ldr.w	sl, [pc, #244]	; 29040 <hci_tx_thread+0x18c>
	return z_impl_k_sem_take(sem, timeout);
   28f4e:	483d      	ldr	r0, [pc, #244]	; (29044 <hci_tx_thread+0x190>)
   28f50:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   28f54:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   28f58:	f00c fc60 	bl	3581c <z_impl_k_sem_take>
   28f5c:	f8da 2110 	ldr.w	r2, [sl, #272]	; 0x110
   28f60:	b1a2      	cbz	r2, 28f8c <hci_tx_thread+0xd8>
		BT_ERR("Uncleared pending sent_cmd");
   28f62:	4835      	ldr	r0, [pc, #212]	; (29038 <hci_tx_thread+0x184>)
   28f64:	6802      	ldr	r2, [r0, #0]
   28f66:	0751      	lsls	r1, r2, #29
   28f68:	d009      	beq.n	28f7e <hci_tx_thread+0xca>
   28f6a:	4a37      	ldr	r2, [pc, #220]	; (29048 <hci_tx_thread+0x194>)
   28f6c:	617a      	str	r2, [r7, #20]
   28f6e:	2202      	movs	r2, #2
   28f70:	613a      	str	r2, [r7, #16]
   28f72:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   28f76:	f107 0210 	add.w	r2, r7, #16
   28f7a:	f010 fabb 	bl	394f4 <z_log_msg_static_create.constprop.0>
		net_buf_unref(bt_dev.sent_cmd);
   28f7e:	f8da 0110 	ldr.w	r0, [sl, #272]	; 0x110
   28f82:	f005 fc7d 	bl	2e880 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   28f86:	2200      	movs	r2, #0
   28f88:	f8ca 2110 	str.w	r2, [sl, #272]	; 0x110
	bt_dev.sent_cmd = net_buf_ref(buf);
   28f8c:	4620      	mov	r0, r4
   28f8e:	f005 fcb9 	bl	2e904 <net_buf_ref>
   28f92:	f8ca 0110 	str.w	r0, [sl, #272]	; 0x110
	err = bt_send(buf);
   28f96:	4620      	mov	r0, r4
   28f98:	f7ff fedc 	bl	28d54 <bt_send>
	if (err) {
   28f9c:	4603      	mov	r3, r0
   28f9e:	b318      	cbz	r0, 28fe8 <hci_tx_thread+0x134>
		BT_ERR("Unable to send to driver (err %d)", err);
   28fa0:	4825      	ldr	r0, [pc, #148]	; (29038 <hci_tx_thread+0x184>)
   28fa2:	6802      	ldr	r2, [r0, #0]
   28fa4:	0752      	lsls	r2, r2, #29
   28fa6:	d00d      	beq.n	28fc4 <hci_tx_thread+0x110>
   28fa8:	46ea      	mov	sl, sp
   28faa:	b088      	sub	sp, #32
   28fac:	466a      	mov	r2, sp
   28fae:	4927      	ldr	r1, [pc, #156]	; (2904c <hci_tx_thread+0x198>)
   28fb0:	e9c2 1305 	strd	r1, r3, [r2, #20]
   28fb4:	2303      	movs	r3, #3
   28fb6:	f842 3f10 	str.w	r3, [r2, #16]!
   28fba:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   28fbe:	f010 fa99 	bl	394f4 <z_log_msg_static_create.constprop.0>
   28fc2:	46d5      	mov	sp, sl
	z_impl_k_sem_give(sem);
   28fc4:	481f      	ldr	r0, [pc, #124]	; (29044 <hci_tx_thread+0x190>)
   28fc6:	f00c fbef 	bl	357a8 <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
   28fca:	4620      	mov	r0, r4
   28fcc:	f005 fa06 	bl	2e3dc <net_buf_id>
   28fd0:	4b1f      	ldr	r3, [pc, #124]	; (29050 <hci_tx_thread+0x19c>)
   28fd2:	220c      	movs	r2, #12
   28fd4:	fb02 3000 	mla	r0, r2, r0, r3
   28fd8:	211f      	movs	r1, #31
   28fda:	8840      	ldrh	r0, [r0, #2]
   28fdc:	4622      	mov	r2, r4
   28fde:	f7ff fa53 	bl	28488 <hci_cmd_done>
		net_buf_unref(buf);
   28fe2:	4620      	mov	r0, r4
   28fe4:	f005 fc4c 	bl	2e880 <net_buf_unref>
	for (; count; ev++, count--) {
   28fe8:	3614      	adds	r6, #20
   28fea:	3d01      	subs	r5, #1
   28fec:	e78c      	b.n	28f08 <hci_tx_thread+0x54>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
   28fee:	2b01      	cmp	r3, #1
   28ff0:	d1fa      	bne.n	28fe8 <hci_tx_thread+0x134>
					conn = CONTAINER_OF(ev->fifo,
   28ff2:	6930      	ldr	r0, [r6, #16]
					bt_conn_process_tx(conn);
   28ff4:	3838      	subs	r0, #56	; 0x38
   28ff6:	f002 fa97 	bl	2b528 <bt_conn_process_tx>
   28ffa:	e7f5      	b.n	28fe8 <hci_tx_thread+0x134>
			BT_WARN("Unexpected k_poll event state %u", ev->state);
   28ffc:	f8db 2000 	ldr.w	r2, [fp]
   29000:	f012 0f06 	tst.w	r2, #6
   29004:	d0f0      	beq.n	28fe8 <hci_tx_thread+0x134>
   29006:	466c      	mov	r4, sp
   29008:	b088      	sub	sp, #32
   2900a:	466a      	mov	r2, sp
   2900c:	4911      	ldr	r1, [pc, #68]	; (29054 <hci_tx_thread+0x1a0>)
   2900e:	480a      	ldr	r0, [pc, #40]	; (29038 <hci_tx_thread+0x184>)
		switch (ev->state) {
   29010:	e9c2 1305 	strd	r1, r3, [r2, #20]
			BT_WARN("Unexpected k_poll event state %u", ev->state);
   29014:	2303      	movs	r3, #3
   29016:	f842 3f10 	str.w	r3, [r2, #16]!
   2901a:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   2901e:	f010 fa69 	bl	394f4 <z_log_msg_static_create.constprop.0>
   29022:	46a5      	mov	sp, r4
   29024:	e7e0      	b.n	28fe8 <hci_tx_thread+0x134>
   29026:	bf00      	nop
   29028:	20000670 	.word	0x20000670
   2902c:	0003dde0 	.word	0x0003dde0
   29030:	20000684 	.word	0x20000684
   29034:	0003d1d7 	.word	0x0003d1d7
   29038:	20000a8c 	.word	0x20000a8c
   2903c:	2000051c 	.word	0x2000051c
   29040:	20000400 	.word	0x20000400
   29044:	200004f8 	.word	0x200004f8
   29048:	0003dff0 	.word	0x0003dff0
   2904c:	0003dfce 	.word	0x0003dfce
   29050:	20002e0c 	.word	0x20002e0c
   29054:	0003e00b 	.word	0x0003e00b

00029058 <hci_event_prio>:
{
   29058:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2905c:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
   2905e:	f100 0608 	add.w	r6, r0, #8
	state->offset = net_buf_simple_headroom(buf);
   29062:	4630      	mov	r0, r6
   29064:	f011 fd4c 	bl	3ab00 <net_buf_simple_headroom>
	state->len = buf->len;
   29068:	f8b4 800c 	ldrh.w	r8, [r4, #12]
	BT_ASSERT(buf->len >= sizeof(*hdr));
   2906c:	f1b8 0f01 	cmp.w	r8, #1
	state->offset = net_buf_simple_headroom(buf);
   29070:	4605      	mov	r5, r0
   29072:	d80b      	bhi.n	2908c <hci_event_prio+0x34>
   29074:	491b      	ldr	r1, [pc, #108]	; (290e4 <hci_event_prio+0x8c>)
   29076:	481c      	ldr	r0, [pc, #112]	; (290e8 <hci_event_prio+0x90>)
   29078:	f640 5277 	movw	r2, #3447	; 0xd77
   2907c:	f00f fd49 	bl	38b12 <assert_print>
   29080:	4040      	eors	r0, r0
   29082:	f380 8811 	msr	BASEPRI, r0
   29086:	f04f 0003 	mov.w	r0, #3
   2908a:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
   2908c:	4630      	mov	r0, r6
   2908e:	2102      	movs	r1, #2
   29090:	f005 fce2 	bl	2ea58 <net_buf_simple_pull_mem>
   29094:	4607      	mov	r7, r0
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   29096:	7800      	ldrb	r0, [r0, #0]
   29098:	f010 fa0a 	bl	394b0 <bt_hci_evt_get_flags>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   2909c:	07c2      	lsls	r2, r0, #31
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   2909e:	4606      	mov	r6, r0
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   290a0:	d40b      	bmi.n	290ba <hci_event_prio+0x62>
   290a2:	4910      	ldr	r1, [pc, #64]	; (290e4 <hci_event_prio+0x8c>)
   290a4:	4810      	ldr	r0, [pc, #64]	; (290e8 <hci_event_prio+0x90>)
   290a6:	f640 527b 	movw	r2, #3451	; 0xd7b
   290aa:	f00f fd32 	bl	38b12 <assert_print>
   290ae:	4040      	eors	r0, r0
   290b0:	f380 8811 	msr	BASEPRI, r0
   290b4:	f04f 0003 	mov.w	r0, #3
   290b8:	df02      	svc	2
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
   290ba:	2305      	movs	r3, #5
   290bc:	4a0b      	ldr	r2, [pc, #44]	; (290ec <hci_event_prio+0x94>)
   290be:	7838      	ldrb	r0, [r7, #0]
   290c0:	4621      	mov	r1, r4
   290c2:	f7ff f89b 	bl	281fc <handle_event>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   290c6:	07b3      	lsls	r3, r6, #30
   290c8:	d507      	bpl.n	290da <hci_event_prio+0x82>
	buf->data = buf->__buf + state->offset;
   290ca:	6923      	ldr	r3, [r4, #16]
	buf->len = state->len;
   290cc:	f8a4 800c 	strh.w	r8, [r4, #12]
	buf->data = buf->__buf + state->offset;
   290d0:	fa13 f585 	uxtah	r5, r3, r5
   290d4:	60a5      	str	r5, [r4, #8]
}
   290d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
   290da:	4620      	mov	r0, r4
}
   290dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
   290e0:	f005 bbce 	b.w	2e880 <net_buf_unref>
   290e4:	0003dde0 	.word	0x0003dde0
   290e8:	0003d1d7 	.word	0x0003d1d7
   290ec:	0003c800 	.word	0x0003c800

000290f0 <bt_recv>:
{
   290f0:	b5b0      	push	{r4, r5, r7, lr}
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   290f2:	7d03      	ldrb	r3, [r0, #20]
	switch (bt_buf_get_type(buf)) {
   290f4:	2b01      	cmp	r3, #1
{
   290f6:	af00      	add	r7, sp, #0
   290f8:	4604      	mov	r4, r0
	switch (bt_buf_get_type(buf)) {
   290fa:	d006      	beq.n	2910a <bt_recv+0x1a>
   290fc:	2b03      	cmp	r3, #3
   290fe:	d112      	bne.n	29126 <bt_recv+0x36>
			rx_queue_put(buf);
   29100:	f7fe ff8e 	bl	28020 <rx_queue_put>
		return 0;
   29104:	2000      	movs	r0, #0
}
   29106:	46bd      	mov	sp, r7
   29108:	bdb0      	pop	{r4, r5, r7, pc}
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   2910a:	6883      	ldr	r3, [r0, #8]
   2910c:	7818      	ldrb	r0, [r3, #0]
   2910e:	f010 f9cf 	bl	394b0 <bt_hci_evt_get_flags>
   29112:	4605      	mov	r5, r0
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   29114:	07e8      	lsls	r0, r5, #31
   29116:	d502      	bpl.n	2911e <bt_recv+0x2e>
			hci_event_prio(buf);
   29118:	4620      	mov	r0, r4
   2911a:	f7ff ff9d 	bl	29058 <hci_event_prio>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   2911e:	07a9      	lsls	r1, r5, #30
   29120:	d5f0      	bpl.n	29104 <bt_recv+0x14>
			rx_queue_put(buf);
   29122:	4620      	mov	r0, r4
   29124:	e7ec      	b.n	29100 <bt_recv+0x10>
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
   29126:	480c      	ldr	r0, [pc, #48]	; (29158 <bt_recv+0x68>)
   29128:	6802      	ldr	r2, [r0, #0]
   2912a:	0752      	lsls	r2, r2, #29
   2912c:	d00d      	beq.n	2914a <bt_recv+0x5a>
   2912e:	466d      	mov	r5, sp
   29130:	b088      	sub	sp, #32
   29132:	466a      	mov	r2, sp
   29134:	4909      	ldr	r1, [pc, #36]	; (2915c <bt_recv+0x6c>)
	switch (bt_buf_get_type(buf)) {
   29136:	e9c2 1305 	strd	r1, r3, [r2, #20]
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
   2913a:	2303      	movs	r3, #3
   2913c:	f842 3f10 	str.w	r3, [r2, #16]!
   29140:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   29144:	f010 f9d6 	bl	394f4 <z_log_msg_static_create.constprop.0>
   29148:	46ad      	mov	sp, r5
		net_buf_unref(buf);
   2914a:	4620      	mov	r0, r4
   2914c:	f005 fb98 	bl	2e880 <net_buf_unref>
		return -EINVAL;
   29150:	f06f 0015 	mvn.w	r0, #21
   29154:	e7d7      	b.n	29106 <bt_recv+0x16>
   29156:	bf00      	nop
   29158:	20000a8c 	.word	0x20000a8c
   2915c:	0003e02c 	.word	0x0003e02c

00029160 <bt_hci_driver_register>:
	if (bt_dev.drv) {
   29160:	4a08      	ldr	r2, [pc, #32]	; (29184 <bt_hci_driver_register+0x24>)
{
   29162:	4603      	mov	r3, r0
	if (bt_dev.drv) {
   29164:	f8d2 0138 	ldr.w	r0, [r2, #312]	; 0x138
   29168:	b930      	cbnz	r0, 29178 <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
   2916a:	68d9      	ldr	r1, [r3, #12]
   2916c:	b139      	cbz	r1, 2917e <bt_hci_driver_register+0x1e>
   2916e:	6959      	ldr	r1, [r3, #20]
   29170:	b129      	cbz	r1, 2917e <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
   29172:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
	return 0;
   29176:	4770      	bx	lr
		return -EALREADY;
   29178:	f06f 0077 	mvn.w	r0, #119	; 0x77
   2917c:	4770      	bx	lr
		return -EINVAL;
   2917e:	f06f 0015 	mvn.w	r0, #21
}
   29182:	4770      	bx	lr
   29184:	20000400 	.word	0x20000400

00029188 <bt_finalize_init>:
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   29188:	4801      	ldr	r0, [pc, #4]	; (29190 <bt_finalize_init+0x8>)
   2918a:	2104      	movs	r1, #4
   2918c:	f010 b9a3 	b.w	394d6 <atomic_or>
   29190:	200004a8 	.word	0x200004a8

00029194 <bt_init>:
{
   29194:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
   29196:	4dba      	ldr	r5, [pc, #744]	; (29480 <bt_init+0x2ec>)
   29198:	f8d5 3138 	ldr.w	r3, [r5, #312]	; 0x138
   2919c:	6899      	ldr	r1, [r3, #8]
   2919e:	f011 0101 	ands.w	r1, r1, #1
{
   291a2:	b089      	sub	sp, #36	; 0x24
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
   291a4:	d121      	bne.n	291ea <bt_init+0x56>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
   291a6:	aa02      	add	r2, sp, #8
   291a8:	f640 4003 	movw	r0, #3075	; 0xc03
   291ac:	f7ff fb38 	bl	28820 <bt_hci_cmd_send_sync>
		if (err) {
   291b0:	4604      	mov	r4, r0
   291b2:	2800      	cmp	r0, #0
   291b4:	d165      	bne.n	29282 <bt_init+0xee>
		hci_reset_complete(rsp);
   291b6:	9802      	ldr	r0, [sp, #8]
	uint8_t status = buf->data[0];
   291b8:	6883      	ldr	r3, [r0, #8]
	if (status) {
   291ba:	781b      	ldrb	r3, [r3, #0]
   291bc:	b99b      	cbnz	r3, 291e6 <bt_init+0x52>
   291be:	f3bf 8f5b 	dmb	ish
   291c2:	f8d5 30a8 	ldr.w	r3, [r5, #168]	; 0xa8
   291c6:	f3bf 8f5b 	dmb	ish
   291ca:	f105 02a8 	add.w	r2, r5, #168	; 0xa8
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   291ce:	f003 0309 	and.w	r3, r3, #9
   291d2:	f3bf 8f5b 	dmb	ish
   291d6:	e852 1f00 	ldrex	r1, [r2]
   291da:	e842 3400 	strex	r4, r3, [r2]
   291de:	2c00      	cmp	r4, #0
   291e0:	d1f9      	bne.n	291d6 <bt_init+0x42>
   291e2:	f3bf 8f5b 	dmb	ish
		net_buf_unref(rsp);
   291e6:	f005 fb4b 	bl	2e880 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
   291ea:	aa02      	add	r2, sp, #8
   291ec:	2100      	movs	r1, #0
   291ee:	f241 0003 	movw	r0, #4099	; 0x1003
   291f2:	f7ff fb15 	bl	28820 <bt_hci_cmd_send_sync>
	if (err) {
   291f6:	4604      	mov	r4, r0
   291f8:	2800      	cmp	r0, #0
   291fa:	d142      	bne.n	29282 <bt_init+0xee>
	read_local_features_complete(rsp);
   291fc:	9e02      	ldr	r6, [sp, #8]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
   291fe:	48a1      	ldr	r0, [pc, #644]	; (29484 <bt_init+0x2f0>)
   29200:	68b1      	ldr	r1, [r6, #8]
   29202:	2208      	movs	r2, #8
   29204:	3101      	adds	r1, #1
   29206:	f010 f8d3 	bl	393b0 <memcpy>
	net_buf_unref(rsp);
   2920a:	4630      	mov	r0, r6
   2920c:	f005 fb38 	bl	2e880 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
   29210:	4621      	mov	r1, r4
   29212:	aa02      	add	r2, sp, #8
   29214:	f241 0001 	movw	r0, #4097	; 0x1001
   29218:	f7ff fb02 	bl	28820 <bt_hci_cmd_send_sync>
	if (err) {
   2921c:	4604      	mov	r4, r0
   2921e:	bb80      	cbnz	r0, 29282 <bt_init+0xee>
	read_local_ver_complete(rsp);
   29220:	9802      	ldr	r0, [sp, #8]
	struct bt_hci_rp_read_local_version_info *rp = (void *)buf->data;
   29222:	6883      	ldr	r3, [r0, #8]
	bt_dev.hci_version = rp->hci_version;
   29224:	785a      	ldrb	r2, [r3, #1]
   29226:	f885 2043 	strb.w	r2, [r5, #67]	; 0x43
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
   2922a:	885a      	ldrh	r2, [r3, #2]
   2922c:	f8a5 2046 	strh.w	r2, [r5, #70]	; 0x46
	bt_dev.lmp_version = rp->lmp_version;
   29230:	791a      	ldrb	r2, [r3, #4]
   29232:	f885 2044 	strb.w	r2, [r5, #68]	; 0x44
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
   29236:	f8b3 2007 	ldrh.w	r2, [r3, #7]
   2923a:	f8a5 2048 	strh.w	r2, [r5, #72]	; 0x48
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
   2923e:	f8b3 3005 	ldrh.w	r3, [r3, #5]
   29242:	f8a5 304a 	strh.w	r3, [r5, #74]	; 0x4a
	net_buf_unref(rsp);
   29246:	f005 fb1b 	bl	2e880 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
   2924a:	4621      	mov	r1, r4
   2924c:	aa02      	add	r2, sp, #8
   2924e:	f241 0002 	movw	r0, #4098	; 0x1002
   29252:	f7ff fae5 	bl	28820 <bt_hci_cmd_send_sync>
	if (err) {
   29256:	4604      	mov	r4, r0
   29258:	b998      	cbnz	r0, 29282 <bt_init+0xee>
	read_supported_commands_complete(rsp);
   2925a:	9e02      	ldr	r6, [sp, #8]
	memcpy(bt_dev.supported_commands, rp->commands,
   2925c:	488a      	ldr	r0, [pc, #552]	; (29488 <bt_init+0x2f4>)
   2925e:	68b1      	ldr	r1, [r6, #8]
   29260:	2240      	movs	r2, #64	; 0x40
   29262:	3101      	adds	r1, #1
   29264:	f010 f8a4 	bl	393b0 <memcpy>
	net_buf_unref(rsp);
   29268:	4630      	mov	r0, r6
   2926a:	f005 fb09 	bl	2e880 <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
   2926e:	f895 3050 	ldrb.w	r3, [r5, #80]	; 0x50
   29272:	0659      	lsls	r1, r3, #25
   29274:	d412      	bmi.n	2929c <bt_init+0x108>
		BT_ERR("Non-LE capable controller detected!");
   29276:	4885      	ldr	r0, [pc, #532]	; (2948c <bt_init+0x2f8>)
   29278:	6803      	ldr	r3, [r0, #0]
   2927a:	075a      	lsls	r2, r3, #29
   2927c:	d104      	bne.n	29288 <bt_init+0xf4>
		return -ENODEV;
   2927e:	f06f 0412 	mvn.w	r4, #18
}
   29282:	4620      	mov	r0, r4
   29284:	b009      	add	sp, #36	; 0x24
   29286:	bdf0      	pop	{r4, r5, r6, r7, pc}
		BT_ERR("Non-LE capable controller detected!");
   29288:	4b81      	ldr	r3, [pc, #516]	; (29490 <bt_init+0x2fc>)
   2928a:	9307      	str	r3, [sp, #28]
   2928c:	aa06      	add	r2, sp, #24
   2928e:	2302      	movs	r3, #2
   29290:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   29294:	9306      	str	r3, [sp, #24]
   29296:	f010 f92d 	bl	394f4 <z_log_msg_static_create.constprop.0>
	if (err) {
   2929a:	e7f0      	b.n	2927e <bt_init+0xea>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
   2929c:	4621      	mov	r1, r4
   2929e:	aa02      	add	r2, sp, #8
   292a0:	f242 0003 	movw	r0, #8195	; 0x2003
   292a4:	f7ff fabc 	bl	28820 <bt_hci_cmd_send_sync>
	if (err) {
   292a8:	4604      	mov	r4, r0
   292aa:	2800      	cmp	r0, #0
   292ac:	d1e9      	bne.n	29282 <bt_init+0xee>
	read_le_features_complete(rsp);
   292ae:	9e02      	ldr	r6, [sp, #8]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
   292b0:	4878      	ldr	r0, [pc, #480]	; (29494 <bt_init+0x300>)
   292b2:	68b1      	ldr	r1, [r6, #8]
   292b4:	2208      	movs	r2, #8
   292b6:	3101      	adds	r1, #1
   292b8:	f010 f87a 	bl	393b0 <memcpy>
	net_buf_unref(rsp);
   292bc:	4630      	mov	r0, r6
   292be:	f005 fadf 	bl	2e880 <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
   292c2:	4621      	mov	r1, r4
   292c4:	aa02      	add	r2, sp, #8
   292c6:	f242 0002 	movw	r0, #8194	; 0x2002
   292ca:	f7ff faa9 	bl	28820 <bt_hci_cmd_send_sync>
		if (err) {
   292ce:	4604      	mov	r4, r0
   292d0:	2800      	cmp	r0, #0
   292d2:	d1d6      	bne.n	29282 <bt_init+0xee>
		le_read_buffer_size_complete(rsp);
   292d4:	9c02      	ldr	r4, [sp, #8]
	struct bt_hci_rp_le_read_buffer_size *rp = (void *)buf->data;
   292d6:	68a3      	ldr	r3, [r4, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->le_max_len);
   292d8:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   292dc:	f8a5 20dc 	strh.w	r2, [r5, #220]	; 0xdc
   292e0:	b291      	uxth	r1, r2
	if (!bt_dev.le.acl_mtu) {
   292e2:	b121      	cbz	r1, 292ee <bt_init+0x15a>
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
   292e4:	78da      	ldrb	r2, [r3, #3]
	return z_impl_k_sem_init(sem, initial_count, limit);
   292e6:	486c      	ldr	r0, [pc, #432]	; (29498 <bt_init+0x304>)
   292e8:	4611      	mov	r1, r2
   292ea:	f012 fcce 	bl	3bc8a <z_impl_k_sem_init>
		net_buf_unref(rsp);
   292ee:	4620      	mov	r0, r4
   292f0:	f005 fac6 	bl	2e880 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   292f4:	f895 6050 	ldrb.w	r6, [r5, #80]	; 0x50
   292f8:	f016 0620 	ands.w	r6, r6, #32
   292fc:	d118      	bne.n	29330 <bt_init+0x19c>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
   292fe:	2102      	movs	r1, #2
   29300:	f640 406d 	movw	r0, #3181	; 0xc6d
   29304:	f7ff fa42 	bl	2878c <bt_hci_cmd_create>
		if (!buf) {
   29308:	4604      	mov	r4, r0
   2930a:	2800      	cmp	r0, #0
   2930c:	f000 80ab 	beq.w	29466 <bt_init+0x2d2>
	return net_buf_simple_add(&buf->b, len);
   29310:	2102      	movs	r1, #2
   29312:	3008      	adds	r0, #8
   29314:	f005 fbba 	bl	2ea8c <net_buf_simple_add>
		cp_le->le = 0x01;
   29318:	2301      	movs	r3, #1
   2931a:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
   2931c:	7046      	strb	r6, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
   2931e:	4621      	mov	r1, r4
   29320:	4632      	mov	r2, r6
   29322:	f640 406d 	movw	r0, #3181	; 0xc6d
   29326:	f7ff fa7b 	bl	28820 <bt_hci_cmd_send_sync>
		if (err) {
   2932a:	4604      	mov	r4, r0
   2932c:	2800      	cmp	r0, #0
   2932e:	d1a8      	bne.n	29282 <bt_init+0xee>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
   29330:	f895 3070 	ldrb.w	r3, [r5, #112]	; 0x70
   29334:	071b      	lsls	r3, r3, #28
   29336:	d512      	bpl.n	2935e <bt_init+0x1ca>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
   29338:	aa02      	add	r2, sp, #8
   2933a:	2100      	movs	r1, #0
   2933c:	f242 001c 	movw	r0, #8220	; 0x201c
   29340:	f7ff fa6e 	bl	28820 <bt_hci_cmd_send_sync>
		if (err) {
   29344:	4604      	mov	r4, r0
   29346:	2800      	cmp	r0, #0
   29348:	d19b      	bne.n	29282 <bt_init+0xee>
		le_read_supp_states_complete(rsp);
   2934a:	9802      	ldr	r0, [sp, #8]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline uint64_t sys_get_le64(const uint8_t src[8])
{
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
   2934c:	6883      	ldr	r3, [r0, #8]
   2934e:	f8d3 2001 	ldr.w	r2, [r3, #1]
   29352:	f8d3 3005 	ldr.w	r3, [r3, #5]
	bt_dev.le.states = sys_get_le64(rp->le_states);
   29356:	e9c5 232e 	strd	r2, r3, [r5, #184]	; 0xb8
		net_buf_unref(rsp);
   2935a:	f005 fa91 	bl	2e880 <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
   2935e:	f895 30b0 	ldrb.w	r3, [r5, #176]	; 0xb0
   29362:	069f      	lsls	r7, r3, #26
   29364:	d523      	bpl.n	293ae <bt_init+0x21a>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   29366:	a901      	add	r1, sp, #4
   29368:	f10d 0002 	add.w	r0, sp, #2
   2936c:	f7ff facc 	bl	28908 <hci_le_read_max_data_len>
		if (err) {
   29370:	4604      	mov	r4, r0
   29372:	2800      	cmp	r0, #0
   29374:	d185      	bne.n	29282 <bt_init+0xee>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   29376:	2104      	movs	r1, #4
   29378:	f242 0024 	movw	r0, #8228	; 0x2024
   2937c:	f7ff fa06 	bl	2878c <bt_hci_cmd_create>
		if (!buf) {
   29380:	4606      	mov	r6, r0
   29382:	2800      	cmp	r0, #0
   29384:	d06f      	beq.n	29466 <bt_init+0x2d2>
   29386:	2104      	movs	r1, #4
   29388:	3008      	adds	r0, #8
   2938a:	f005 fb7f 	bl	2ea8c <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
   2938e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   29392:	8003      	strh	r3, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
   29394:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   29398:	8043      	strh	r3, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   2939a:	4622      	mov	r2, r4
   2939c:	4631      	mov	r1, r6
   2939e:	f242 0024 	movw	r0, #8228	; 0x2024
   293a2:	f7ff fa3d 	bl	28820 <bt_hci_cmd_send_sync>
		if (err) {
   293a6:	4604      	mov	r4, r0
   293a8:	2800      	cmp	r0, #0
   293aa:	f47f af6a 	bne.w	29282 <bt_init+0xee>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
   293ae:	2108      	movs	r1, #8
   293b0:	f242 0001 	movw	r0, #8193	; 0x2001
   293b4:	f7ff f9ea 	bl	2878c <bt_hci_cmd_create>
	if (!buf) {
   293b8:	4604      	mov	r4, r0
   293ba:	2800      	cmp	r0, #0
   293bc:	d053      	beq.n	29466 <bt_init+0x2d2>
   293be:	2108      	movs	r1, #8
   293c0:	4408      	add	r0, r1
   293c2:	f005 fb63 	bl	2ea8c <net_buf_simple_add>
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
   293c6:	f895 20b0 	ldrb.w	r2, [r5, #176]	; 0xb0
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
   293ca:	4934      	ldr	r1, [pc, #208]	; (2949c <bt_init+0x308>)
   293cc:	4b34      	ldr	r3, [pc, #208]	; (294a0 <bt_init+0x30c>)
   293ce:	f012 0f02 	tst.w	r2, #2
   293d2:	bf18      	it	ne
   293d4:	460b      	movne	r3, r1
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
   293d6:	0696      	lsls	r6, r2, #26
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
   293d8:	f895 20b1 	ldrb.w	r2, [r5, #177]	; 0xb1
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
   293dc:	bf48      	it	mi
   293de:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
   293e2:	f012 0f09 	tst.w	r2, #9
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
   293e6:	bf18      	it	ne
   293e8:	f443 6300 	orrne.w	r3, r3, #2048	; 0x800
	dst[0] = val;
   293ec:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
   293ee:	f3c3 2307 	ubfx	r3, r3, #8, #8
   293f2:	2200      	movs	r2, #0
   293f4:	7043      	strb	r3, [r0, #1]
	dst[0] = val;
   293f6:	2307      	movs	r3, #7
   293f8:	7083      	strb	r3, [r0, #2]
	dst[1] = val >> 8;
   293fa:	70c2      	strb	r2, [r0, #3]
	dst[0] = val;
   293fc:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
   293fe:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
   29400:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
   29402:	71c2      	strb	r2, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
   29404:	4621      	mov	r1, r4
   29406:	f242 0001 	movw	r0, #8193	; 0x2001
   2940a:	f7ff fa09 	bl	28820 <bt_hci_cmd_send_sync>
	if (err) {
   2940e:	4604      	mov	r4, r0
   29410:	2800      	cmp	r0, #0
   29412:	f47f af36 	bne.w	29282 <bt_init+0xee>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   29416:	f895 3050 	ldrb.w	r3, [r5, #80]	; 0x50
	if (bt_dev.le.acl_mtu) {
   2941a:	f8b5 10dc 	ldrh.w	r1, [r5, #220]	; 0xdc
	if (BT_FEAT_BREDR(bt_dev.features)) {
   2941e:	0698      	lsls	r0, r3, #26
   29420:	d424      	bmi.n	2946c <bt_init+0x2d8>
	if (bt_dev.le.acl_mtu) {
   29422:	b9c9      	cbnz	r1, 29458 <bt_init+0x2c4>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
   29424:	aa02      	add	r2, sp, #8
   29426:	f241 0005 	movw	r0, #4101	; 0x1005
   2942a:	f7ff f9f9 	bl	28820 <bt_hci_cmd_send_sync>
	if (err) {
   2942e:	4604      	mov	r4, r0
   29430:	2800      	cmp	r0, #0
   29432:	f47f af26 	bne.w	29282 <bt_init+0xee>
	if (bt_dev.le.acl_mtu) {
   29436:	f8b5 30dc 	ldrh.w	r3, [r5, #220]	; 0xdc
	read_buffer_size_complete(rsp);
   2943a:	9c02      	ldr	r4, [sp, #8]
	if (bt_dev.le.acl_mtu) {
   2943c:	b94b      	cbnz	r3, 29452 <bt_init+0x2be>
	struct bt_hci_rp_read_buffer_size *rp = (void *)buf->data;
   2943e:	68a3      	ldr	r3, [r4, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
   29440:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   29444:	f8a5 20dc 	strh.w	r2, [r5, #220]	; 0xdc
	k_sem_init(&bt_dev.le.acl_pkts, pkts, pkts);
   29448:	889a      	ldrh	r2, [r3, #4]
   2944a:	4813      	ldr	r0, [pc, #76]	; (29498 <bt_init+0x304>)
   2944c:	4611      	mov	r1, r2
   2944e:	f012 fc1c 	bl	3bc8a <z_impl_k_sem_init>
	net_buf_unref(rsp);
   29452:	4620      	mov	r0, r4
   29454:	f005 fa14 	bl	2e880 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
   29458:	2108      	movs	r1, #8
   2945a:	f640 4001 	movw	r0, #3073	; 0xc01
   2945e:	f7ff f995 	bl	2878c <bt_hci_cmd_create>
	if (!buf) {
   29462:	4604      	mov	r4, r0
   29464:	bb40      	cbnz	r0, 294b8 <bt_init+0x324>
		return -ENOBUFS;
   29466:	f06f 0468 	mvn.w	r4, #104	; 0x68
   2946a:	e70a      	b.n	29282 <bt_init+0xee>
	else if (!bt_dev.le.acl_mtu) {
   2946c:	2900      	cmp	r1, #0
   2946e:	d1f3      	bne.n	29458 <bt_init+0x2c4>
		BT_ERR("ACL BR/EDR buffers not initialized");
   29470:	4806      	ldr	r0, [pc, #24]	; (2948c <bt_init+0x2f8>)
   29472:	6803      	ldr	r3, [r0, #0]
   29474:	075a      	lsls	r2, r3, #29
   29476:	d115      	bne.n	294a4 <bt_init+0x310>
		return -EIO;
   29478:	f06f 0404 	mvn.w	r4, #4
   2947c:	e701      	b.n	29282 <bt_init+0xee>
   2947e:	bf00      	nop
   29480:	20000400 	.word	0x20000400
   29484:	2000044c 	.word	0x2000044c
   29488:	20000454 	.word	0x20000454
   2948c:	20000a8c 	.word	0x20000a8c
   29490:	0003e040 	.word	0x0003e040
   29494:	200004b0 	.word	0x200004b0
   29498:	200004e0 	.word	0x200004e0
   2949c:	0007122e 	.word	0x0007122e
   294a0:	0007120e 	.word	0x0007120e
		BT_ERR("ACL BR/EDR buffers not initialized");
   294a4:	4b40      	ldr	r3, [pc, #256]	; (295a8 <bt_init+0x414>)
   294a6:	9307      	str	r3, [sp, #28]
   294a8:	aa06      	add	r2, sp, #24
   294aa:	2302      	movs	r3, #2
   294ac:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   294b0:	9306      	str	r3, [sp, #24]
   294b2:	f010 f81f 	bl	394f4 <z_log_msg_static_create.constprop.0>
	if (err) {
   294b6:	e7df      	b.n	29478 <bt_init+0x2e4>
   294b8:	2108      	movs	r1, #8
   294ba:	4408      	add	r0, r1
   294bc:	f005 fae6 	bl	2ea8c <net_buf_simple_add>
	dst[0] = val;
   294c0:	2310      	movs	r3, #16
   294c2:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
   294c4:	2388      	movs	r3, #136	; 0x88
	dst[0] = val;
   294c6:	2200      	movs	r2, #0
	dst[1] = val >> 8;
   294c8:	7043      	strb	r3, [r0, #1]
   294ca:	2602      	movs	r6, #2
   294cc:	2320      	movs	r3, #32
	dst[0] = val;
   294ce:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
   294d0:	70c6      	strb	r6, [r0, #3]
	dst[0] = val;
   294d2:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
   294d4:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
   294d6:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
   294d8:	71c3      	strb	r3, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
   294da:	4621      	mov	r1, r4
   294dc:	f640 4001 	movw	r0, #3073	; 0xc01
   294e0:	f7ff f99e 	bl	28820 <bt_hci_cmd_send_sync>
	if (err) {
   294e4:	4604      	mov	r4, r0
   294e6:	2800      	cmp	r0, #0
   294e8:	f47f aecb 	bne.w	29282 <bt_init+0xee>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
   294ec:	4601      	mov	r1, r0
   294ee:	aa01      	add	r2, sp, #4
   294f0:	f64f 4001 	movw	r0, #64513	; 0xfc01
   294f4:	f7ff f994 	bl	28820 <bt_hci_cmd_send_sync>
	if (err) {
   294f8:	4604      	mov	r4, r0
   294fa:	b1d8      	cbz	r0, 29534 <bt_init+0x3a0>
		BT_WARN("Vendor HCI extensions not available");
   294fc:	482b      	ldr	r0, [pc, #172]	; (295ac <bt_init+0x418>)
   294fe:	6803      	ldr	r3, [r0, #0]
   29500:	f013 0f06 	tst.w	r3, #6
   29504:	d007      	beq.n	29516 <bt_init+0x382>
   29506:	4b2a      	ldr	r3, [pc, #168]	; (295b0 <bt_init+0x41c>)
			BT_WARN("Failed to read supported vendor features");
   29508:	aa06      	add	r2, sp, #24
   2950a:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   2950e:	e9cd 6306 	strd	r6, r3, [sp, #24]
   29512:	f00f ffef 	bl	394f4 <z_log_msg_static_create.constprop.0>
	err = bt_id_init();
   29516:	f000 fb1d 	bl	29b54 <bt_id_init>
	if (err) {
   2951a:	4604      	mov	r4, r0
   2951c:	2800      	cmp	r0, #0
   2951e:	f47f aeb0 	bne.w	29282 <bt_init+0xee>
		err = bt_conn_init();
   29522:	f002 f86d 	bl	2b600 <bt_conn_init>
		if (err) {
   29526:	4604      	mov	r4, r0
   29528:	2800      	cmp	r0, #0
   2952a:	f47f aeaa 	bne.w	29282 <bt_init+0xee>
	bt_finalize_init();
   2952e:	f7ff fe2b 	bl	29188 <bt_finalize_init>
	return 0;
   29532:	e6a6      	b.n	29282 <bt_init+0xee>
	net_buf_unref(rsp);
   29534:	9801      	ldr	r0, [sp, #4]
   29536:	f005 f9a3 	bl	2e880 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
   2953a:	4621      	mov	r1, r4
   2953c:	aa01      	add	r2, sp, #4
   2953e:	f64f 4002 	movw	r0, #64514	; 0xfc02
   29542:	f7ff f96d 	bl	28820 <bt_hci_cmd_send_sync>
	if (err) {
   29546:	4604      	mov	r4, r0
   29548:	b130      	cbz	r0, 29558 <bt_init+0x3c4>
		BT_WARN("Failed to read supported vendor commands");
   2954a:	4818      	ldr	r0, [pc, #96]	; (295ac <bt_init+0x418>)
   2954c:	6803      	ldr	r3, [r0, #0]
   2954e:	f013 0f06 	tst.w	r3, #6
   29552:	d0e0      	beq.n	29516 <bt_init+0x382>
   29554:	4b17      	ldr	r3, [pc, #92]	; (295b4 <bt_init+0x420>)
   29556:	e7d7      	b.n	29508 <bt_init+0x374>
	rp.cmds = (void *)rsp->data;
   29558:	9f01      	ldr	r7, [sp, #4]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
   2955a:	4817      	ldr	r0, [pc, #92]	; (295b8 <bt_init+0x424>)
   2955c:	68b9      	ldr	r1, [r7, #8]
   2955e:	4632      	mov	r2, r6
   29560:	3101      	adds	r1, #1
   29562:	f00f ff25 	bl	393b0 <memcpy>
	net_buf_unref(rsp);
   29566:	4638      	mov	r0, r7
   29568:	f005 f98a 	bl	2e880 <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
   2956c:	f895 3095 	ldrb.w	r3, [r5, #149]	; 0x95
   29570:	075b      	lsls	r3, r3, #29
   29572:	d5d0      	bpl.n	29516 <bt_init+0x382>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
   29574:	aa01      	add	r2, sp, #4
   29576:	4621      	mov	r1, r4
   29578:	f64f 4003 	movw	r0, #64515	; 0xfc03
   2957c:	f7ff f950 	bl	28820 <bt_hci_cmd_send_sync>
		if (err) {
   29580:	b130      	cbz	r0, 29590 <bt_init+0x3fc>
			BT_WARN("Failed to read supported vendor features");
   29582:	480a      	ldr	r0, [pc, #40]	; (295ac <bt_init+0x418>)
   29584:	6803      	ldr	r3, [r0, #0]
   29586:	f013 0f06 	tst.w	r3, #6
   2958a:	d0c4      	beq.n	29516 <bt_init+0x382>
   2958c:	4b0b      	ldr	r3, [pc, #44]	; (295bc <bt_init+0x428>)
   2958e:	e7bb      	b.n	29508 <bt_init+0x374>
		rp.feat = (void *)rsp->data;
   29590:	9c01      	ldr	r4, [sp, #4]
		memcpy(bt_dev.vs_features, rp.feat->features,
   29592:	480b      	ldr	r0, [pc, #44]	; (295c0 <bt_init+0x42c>)
   29594:	68a1      	ldr	r1, [r4, #8]
   29596:	2201      	movs	r2, #1
   29598:	4411      	add	r1, r2
   2959a:	f00f ff09 	bl	393b0 <memcpy>
		net_buf_unref(rsp);
   2959e:	4620      	mov	r0, r4
   295a0:	f005 f96e 	bl	2e880 <net_buf_unref>
   295a4:	e7b7      	b.n	29516 <bt_init+0x382>
   295a6:	bf00      	nop
   295a8:	0003e064 	.word	0x0003e064
   295ac:	20000a8c 	.word	0x20000a8c
   295b0:	0003e087 	.word	0x0003e087
   295b4:	0003e0ab 	.word	0x0003e0ab
   295b8:	20000495 	.word	0x20000495
   295bc:	0003e0d4 	.word	0x0003e0d4
   295c0:	20000494 	.word	0x20000494

000295c4 <init_work>:
{
   295c4:	b510      	push	{r4, lr}
	err = bt_init();
   295c6:	f7ff fde5 	bl	29194 <bt_init>
	if (ready_cb) {
   295ca:	4b03      	ldr	r3, [pc, #12]	; (295d8 <init_work+0x14>)
   295cc:	681b      	ldr	r3, [r3, #0]
   295ce:	b113      	cbz	r3, 295d6 <init_work+0x12>
}
   295d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
   295d4:	4718      	bx	r3
}
   295d6:	bd10      	pop	{r4, pc}
   295d8:	20002e24 	.word	0x20002e24

000295dc <bt_enable>:
#endif /* !CONFIG_BT_RECV_BLOCKING */

int bt_enable(bt_ready_cb_t cb)
{
   295dc:	b5f0      	push	{r4, r5, r6, r7, lr}
	int err;

	if (!bt_dev.drv) {
   295de:	4d43      	ldr	r5, [pc, #268]	; (296ec <bt_enable+0x110>)
{
   295e0:	b08f      	sub	sp, #60	; 0x3c
	if (!bt_dev.drv) {
   295e2:	f8d5 3138 	ldr.w	r3, [r5, #312]	; 0x138
{
   295e6:	af08      	add	r7, sp, #32
   295e8:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
   295ea:	b9a3      	cbnz	r3, 29616 <bt_enable+0x3a>
		BT_ERR("No HCI driver registered");
   295ec:	4840      	ldr	r0, [pc, #256]	; (296f0 <bt_enable+0x114>)
   295ee:	6803      	ldr	r3, [r0, #0]
   295f0:	075a      	lsls	r2, r3, #29
   295f2:	d105      	bne.n	29600 <bt_enable+0x24>
		return -ENODEV;
   295f4:	f06f 0412 	mvn.w	r4, #18
		return bt_init();
	}

	k_work_submit(&bt_dev.init);
	return 0;
}
   295f8:	4620      	mov	r0, r4
   295fa:	371c      	adds	r7, #28
   295fc:	46bd      	mov	sp, r7
   295fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
		BT_ERR("No HCI driver registered");
   29600:	4b3c      	ldr	r3, [pc, #240]	; (296f4 <bt_enable+0x118>)
   29602:	617b      	str	r3, [r7, #20]
   29604:	2302      	movs	r3, #2
   29606:	613b      	str	r3, [r7, #16]
   29608:	f107 0210 	add.w	r2, r7, #16
   2960c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   29610:	f00f ff70 	bl	394f4 <z_log_msg_static_create.constprop.0>
   29614:	e7ee      	b.n	295f4 <bt_enable+0x18>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   29616:	f105 00a8 	add.w	r0, r5, #168	; 0xa8
   2961a:	f3bf 8f5b 	dmb	ish
   2961e:	e850 3f00 	ldrex	r3, [r0]
   29622:	f023 0302 	bic.w	r3, r3, #2
   29626:	e840 3200 	strex	r2, r3, [r0]
   2962a:	2a00      	cmp	r2, #0
   2962c:	d1f7      	bne.n	2961e <bt_enable+0x42>
   2962e:	f3bf 8f5b 	dmb	ish
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   29632:	2101      	movs	r1, #1
   29634:	f00f ff4f 	bl	394d6 <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   29638:	ea10 0401 	ands.w	r4, r0, r1
   2963c:	d153      	bne.n	296e6 <bt_enable+0x10a>
	ready_cb = cb;
   2963e:	4b2e      	ldr	r3, [pc, #184]	; (296f8 <bt_enable+0x11c>)
   29640:	601e      	str	r6, [r3, #0]
   29642:	460a      	mov	r2, r1
   29644:	f105 00f8 	add.w	r0, r5, #248	; 0xf8
   29648:	f012 fb1f 	bl	3bc8a <z_impl_k_sem_init>
	z_impl_k_queue_init(queue);
   2964c:	f505 708e 	add.w	r0, r5, #284	; 0x11c
   29650:	f012 faf9 	bl	3bc46 <z_impl_k_queue_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   29654:	2200      	movs	r2, #0
   29656:	2300      	movs	r3, #0
   29658:	e9cd 2306 	strd	r2, r3, [sp, #24]
   2965c:	f06f 0308 	mvn.w	r3, #8
   29660:	e9cd 4302 	strd	r4, r3, [sp, #8]
   29664:	e9cd 4400 	strd	r4, r4, [sp]
   29668:	4b24      	ldr	r3, [pc, #144]	; (296fc <bt_enable+0x120>)
   2966a:	4925      	ldr	r1, [pc, #148]	; (29700 <bt_enable+0x124>)
   2966c:	9404      	str	r4, [sp, #16]
   2966e:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   29672:	4824      	ldr	r0, [pc, #144]	; (29704 <bt_enable+0x128>)
   29674:	f00b fd34 	bl	350e0 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   29678:	4923      	ldr	r1, [pc, #140]	; (29708 <bt_enable+0x12c>)
   2967a:	4822      	ldr	r0, [pc, #136]	; (29704 <bt_enable+0x128>)
   2967c:	f012 fac1 	bl	3bc02 <z_impl_k_thread_name_set>
	k_work_queue_init(&bt_workq);
   29680:	4822      	ldr	r0, [pc, #136]	; (2970c <bt_enable+0x130>)
   29682:	f00c fc0f 	bl	35ea4 <k_work_queue_init>
	k_work_queue_start(&bt_workq, rx_thread_stack,
   29686:	4922      	ldr	r1, [pc, #136]	; (29710 <bt_enable+0x134>)
   29688:	4820      	ldr	r0, [pc, #128]	; (2970c <bt_enable+0x130>)
   2968a:	9400      	str	r4, [sp, #0]
   2968c:	f06f 0307 	mvn.w	r3, #7
   29690:	f44f 6280 	mov.w	r2, #1024	; 0x400
   29694:	f00c fc1c 	bl	35ed0 <k_work_queue_start>
   29698:	491e      	ldr	r1, [pc, #120]	; (29714 <bt_enable+0x138>)
   2969a:	481c      	ldr	r0, [pc, #112]	; (2970c <bt_enable+0x130>)
   2969c:	f012 fab1 	bl	3bc02 <z_impl_k_thread_name_set>
	err = bt_dev.drv->open();
   296a0:	f8d5 3138 	ldr.w	r3, [r5, #312]	; 0x138
   296a4:	68db      	ldr	r3, [r3, #12]
   296a6:	4798      	blx	r3
	if (err) {
   296a8:	4604      	mov	r4, r0
   296aa:	b190      	cbz	r0, 296d2 <bt_enable+0xf6>
		BT_ERR("HCI driver open failed (%d)", err);
   296ac:	4810      	ldr	r0, [pc, #64]	; (296f0 <bt_enable+0x114>)
   296ae:	6803      	ldr	r3, [r0, #0]
   296b0:	075b      	lsls	r3, r3, #29
   296b2:	d0a1      	beq.n	295f8 <bt_enable+0x1c>
   296b4:	466d      	mov	r5, sp
   296b6:	462a      	mov	r2, r5
   296b8:	b088      	sub	sp, #32
   296ba:	4b17      	ldr	r3, [pc, #92]	; (29718 <bt_enable+0x13c>)
   296bc:	e9c5 3405 	strd	r3, r4, [r5, #20]
   296c0:	2303      	movs	r3, #3
   296c2:	f842 3f10 	str.w	r3, [r2, #16]!
   296c6:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   296ca:	f00f ff13 	bl	394f4 <z_log_msg_static_create.constprop.0>
   296ce:	46ad      	mov	sp, r5
   296d0:	e792      	b.n	295f8 <bt_enable+0x1c>
	if (!cb) {
   296d2:	b91e      	cbnz	r6, 296dc <bt_enable+0x100>
		return bt_init();
   296d4:	f7ff fd5e 	bl	29194 <bt_init>
   296d8:	4604      	mov	r4, r0
   296da:	e78d      	b.n	295f8 <bt_enable+0x1c>
	k_work_submit(&bt_dev.init);
   296dc:	f105 0098 	add.w	r0, r5, #152	; 0x98
   296e0:	f00c fb8c 	bl	35dfc <k_work_submit>
	return 0;
   296e4:	e788      	b.n	295f8 <bt_enable+0x1c>
		return -EALREADY;
   296e6:	f06f 0477 	mvn.w	r4, #119	; 0x77
   296ea:	e785      	b.n	295f8 <bt_enable+0x1c>
   296ec:	20000400 	.word	0x20000400
   296f0:	20000a8c 	.word	0x20000a8c
   296f4:	0003e0fd 	.word	0x0003e0fd
   296f8:	20002e24 	.word	0x20002e24
   296fc:	00028eb5 	.word	0x00028eb5
   29700:	20005200 	.word	0x20005200
   29704:	200025c0 	.word	0x200025c0
   29708:	0003e116 	.word	0x0003e116
   2970c:	20002640 	.word	0x20002640
   29710:	20005840 	.word	0x20005840
   29714:	0003e11c 	.word	0x0003e11c
   29718:	0003e122 	.word	0x0003e122

0002971c <bt_is_ready>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2971c:	4b04      	ldr	r3, [pc, #16]	; (29730 <bt_is_ready+0x14>)
   2971e:	f3bf 8f5b 	dmb	ish
   29722:	6818      	ldr	r0, [r3, #0]
   29724:	f3bf 8f5b 	dmb	ish
}

bool bt_is_ready(void)
{
	return atomic_test_bit(bt_dev.flags, BT_DEV_READY);
}
   29728:	f3c0 0080 	ubfx	r0, r0, #2, #1
   2972c:	4770      	bx	lr
   2972e:	bf00      	nop
   29730:	200004a8 	.word	0x200004a8

00029734 <bt_get_name>:
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	return bt_dev.name;
#else
	return CONFIG_BT_DEVICE_NAME;
#endif
}
   29734:	4800      	ldr	r0, [pc, #0]	; (29738 <bt_get_name+0x4>)
   29736:	4770      	bx	lr
   29738:	0003e13e 	.word	0x0003e13e

0002973c <id_find>:
		*count = bt_dev.id_count;
	}
}

static int id_find(const bt_addr_le_t *addr)
{
   2973c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
   2973e:	4f0a      	ldr	r7, [pc, #40]	; (29768 <id_find+0x2c>)
{
   29740:	4606      	mov	r6, r0
	for (id = 0U; id < bt_dev.id_count; id++) {
   29742:	2500      	movs	r5, #0
   29744:	79fb      	ldrb	r3, [r7, #7]
   29746:	b2ec      	uxtb	r4, r5
   29748:	42a3      	cmp	r3, r4
   2974a:	d802      	bhi.n	29752 <id_find+0x16>
		if (bt_addr_le_eq(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
   2974c:	f06f 0001 	mvn.w	r0, #1
   29750:	e009      	b.n	29766 <id_find+0x2a>
		if (bt_addr_le_eq(addr, &bt_dev.id_addr[id])) {
   29752:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
   29756:	4439      	add	r1, r7
   29758:	4630      	mov	r0, r6
   2975a:	f00f ff72 	bl	39642 <bt_addr_le_eq>
   2975e:	3501      	adds	r5, #1
   29760:	2800      	cmp	r0, #0
   29762:	d0ef      	beq.n	29744 <id_find+0x8>
   29764:	4620      	mov	r0, r4
}
   29766:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   29768:	20000400 	.word	0x20000400

0002976c <set_random_address>:
{
   2976c:	b538      	push	{r3, r4, r5, lr}
	return memcmp(a, b, sizeof(*a));
   2976e:	4913      	ldr	r1, [pc, #76]	; (297bc <set_random_address+0x50>)
   29770:	2206      	movs	r2, #6
   29772:	4605      	mov	r5, r0
   29774:	f00f fdf5 	bl	39362 <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
   29778:	b1d8      	cbz	r0, 297b2 <set_random_address+0x46>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
   2977a:	2106      	movs	r1, #6
   2977c:	f242 0005 	movw	r0, #8197	; 0x2005
   29780:	f7ff f804 	bl	2878c <bt_hci_cmd_create>
	if (!buf) {
   29784:	4604      	mov	r4, r0
   29786:	b1b0      	cbz	r0, 297b6 <set_random_address+0x4a>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   29788:	2206      	movs	r2, #6
   2978a:	4629      	mov	r1, r5
   2978c:	3008      	adds	r0, #8
   2978e:	f011 f9c3 	bl	3ab18 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
   29792:	2200      	movs	r2, #0
   29794:	4621      	mov	r1, r4
   29796:	f242 0005 	movw	r0, #8197	; 0x2005
   2979a:	f7ff f841 	bl	28820 <bt_hci_cmd_send_sync>
	if (err) {
   2979e:	b948      	cbnz	r0, 297b4 <set_random_address+0x48>
	memcpy(dst, src, sizeof(*dst));
   297a0:	2206      	movs	r2, #6
   297a2:	4806      	ldr	r0, [pc, #24]	; (297bc <set_random_address+0x50>)
   297a4:	4629      	mov	r1, r5
   297a6:	f00f fe03 	bl	393b0 <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
   297aa:	4b05      	ldr	r3, [pc, #20]	; (297c0 <set_random_address+0x54>)
   297ac:	2201      	movs	r2, #1
   297ae:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
		return 0;
   297b2:	2000      	movs	r0, #0
}
   297b4:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
   297b6:	f06f 0068 	mvn.w	r0, #104	; 0x68
   297ba:	e7fb      	b.n	297b4 <set_random_address+0x48>
   297bc:	2000043c 	.word	0x2000043c
   297c0:	20000400 	.word	0x20000400

000297c4 <id_create.constprop.0>:

static int id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
   297c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   297c6:	4604      	mov	r4, r0
{
	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
   297c8:	460d      	mov	r5, r1
   297ca:	b179      	cbz	r1, 297ec <id_create.constprop.0+0x28>
   297cc:	4914      	ldr	r1, [pc, #80]	; (29820 <id_create.constprop.0+0x5c>)
   297ce:	4628      	mov	r0, r5
   297d0:	f00f ff37 	bl	39642 <bt_addr_le_eq>
   297d4:	b950      	cbnz	r0, 297ec <id_create.constprop.0+0x28>
	memcpy(dst, src, sizeof(*dst));
   297d6:	4813      	ldr	r0, [pc, #76]	; (29824 <id_create.constprop.0+0x60>)
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
   297d8:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   297dc:	2207      	movs	r2, #7
   297de:	4629      	mov	r1, r5
   297e0:	4420      	add	r0, r4
   297e2:	f00f fde5 	bl	393b0 <memcpy>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		bt_settings_save_id();
	}

	return 0;
   297e6:	2000      	movs	r0, #0
}
   297e8:	b003      	add	sp, #12
   297ea:	bd30      	pop	{r4, r5, pc}
			err = bt_addr_le_create_static(&new_addr);
   297ec:	4668      	mov	r0, sp
   297ee:	f00f fe51 	bl	39494 <bt_addr_le_create_static>
			if (err) {
   297f2:	2800      	cmp	r0, #0
   297f4:	d1f8      	bne.n	297e8 <id_create.constprop.0+0x24>
		} while (id_find(&new_addr) >= 0);
   297f6:	4668      	mov	r0, sp
   297f8:	f7ff ffa0 	bl	2973c <id_find>
   297fc:	2800      	cmp	r0, #0
   297fe:	daf5      	bge.n	297ec <id_create.constprop.0+0x28>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
   29800:	4b08      	ldr	r3, [pc, #32]	; (29824 <id_create.constprop.0+0x60>)
   29802:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   29806:	441c      	add	r4, r3
   29808:	2207      	movs	r2, #7
   2980a:	4669      	mov	r1, sp
   2980c:	4620      	mov	r0, r4
   2980e:	f00f fdcf 	bl	393b0 <memcpy>
		if (addr) {
   29812:	2d00      	cmp	r5, #0
   29814:	d0e7      	beq.n	297e6 <id_create.constprop.0+0x22>
   29816:	2207      	movs	r2, #7
   29818:	4621      	mov	r1, r4
   2981a:	4628      	mov	r0, r5
   2981c:	e7e1      	b.n	297e2 <id_create.constprop.0+0x1e>
   2981e:	bf00      	nop
   29820:	0003dc18 	.word	0x0003dc18
   29824:	20000400 	.word	0x20000400

00029828 <bt_id_create>:

int bt_id_create(bt_addr_le_t *addr, uint8_t *irk)
{
   29828:	b570      	push	{r4, r5, r6, lr}
   2982a:	460d      	mov	r5, r1
   2982c:	b086      	sub	sp, #24
	int new_id, err;

	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
   2982e:	4604      	mov	r4, r0
   29830:	b920      	cbnz	r0, 2983c <bt_id_create+0x14>
		if (id_find(addr) >= 0) {
			return -EALREADY;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
   29832:	b335      	cbz	r5, 29882 <bt_id_create+0x5a>
			return -EINVAL;
   29834:	f06f 0015 	mvn.w	r0, #21
	} else {
		bt_dev.id_count++;
	}

	return new_id;
}
   29838:	b006      	add	sp, #24
   2983a:	bd70      	pop	{r4, r5, r6, pc}
	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
   2983c:	4923      	ldr	r1, [pc, #140]	; (298cc <bt_id_create+0xa4>)
   2983e:	f00f ff00 	bl	39642 <bt_addr_le_eq>
   29842:	2800      	cmp	r0, #0
   29844:	d1f5      	bne.n	29832 <bt_id_create+0xa>
		if (addr->type != BT_ADDR_LE_RANDOM ||
   29846:	7823      	ldrb	r3, [r4, #0]
   29848:	2b01      	cmp	r3, #1
   2984a:	d104      	bne.n	29856 <bt_id_create+0x2e>
   2984c:	79a3      	ldrb	r3, [r4, #6]
   2984e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   29852:	2bc0      	cmp	r3, #192	; 0xc0
   29854:	d00d      	beq.n	29872 <bt_id_create+0x4a>
			BT_ERR("Only static random identity address supported");
   29856:	481e      	ldr	r0, [pc, #120]	; (298d0 <bt_id_create+0xa8>)
   29858:	6803      	ldr	r3, [r0, #0]
   2985a:	075a      	lsls	r2, r3, #29
   2985c:	d0ea      	beq.n	29834 <bt_id_create+0xc>
   2985e:	4b1d      	ldr	r3, [pc, #116]	; (298d4 <bt_id_create+0xac>)
   29860:	9305      	str	r3, [sp, #20]
   29862:	aa04      	add	r2, sp, #16
   29864:	2302      	movs	r3, #2
   29866:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   2986a:	9304      	str	r3, [sp, #16]
   2986c:	f00f fef1 	bl	39652 <z_log_msg_static_create.constprop.0>
   29870:	e7e0      	b.n	29834 <bt_id_create+0xc>
		if (id_find(addr) >= 0) {
   29872:	4620      	mov	r0, r4
   29874:	f7ff ff62 	bl	2973c <id_find>
   29878:	2800      	cmp	r0, #0
   2987a:	dbda      	blt.n	29832 <bt_id_create+0xa>
			return -EALREADY;
   2987c:	f06f 0077 	mvn.w	r0, #119	; 0x77
   29880:	e7da      	b.n	29838 <bt_id_create+0x10>
	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
   29882:	4d15      	ldr	r5, [pc, #84]	; (298d8 <bt_id_create+0xb0>)
   29884:	79eb      	ldrb	r3, [r5, #7]
   29886:	2b01      	cmp	r3, #1
   29888:	d01c      	beq.n	298c4 <bt_id_create+0x9c>
   2988a:	f3bf 8f5b 	dmb	ish
   2988e:	f8d5 30a8 	ldr.w	r3, [r5, #168]	; 0xa8
   29892:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   29896:	07db      	lsls	r3, r3, #31
   29898:	d50b      	bpl.n	298b2 <bt_id_create+0x8a>
	new_id = bt_dev.id_count;
   2989a:	79ee      	ldrb	r6, [r5, #7]
	err = id_create(new_id, addr, irk);
   2989c:	4621      	mov	r1, r4
   2989e:	4630      	mov	r0, r6
   298a0:	f7ff ff90 	bl	297c4 <id_create.constprop.0>
	if (err) {
   298a4:	2800      	cmp	r0, #0
   298a6:	d1c7      	bne.n	29838 <bt_id_create+0x10>
		bt_dev.id_count++;
   298a8:	79eb      	ldrb	r3, [r5, #7]
   298aa:	3301      	adds	r3, #1
	new_id = bt_dev.id_count;
   298ac:	4630      	mov	r0, r6
		bt_dev.id_count++;
   298ae:	71eb      	strb	r3, [r5, #7]
	return new_id;
   298b0:	e7c2      	b.n	29838 <bt_id_create+0x10>
		if (!(addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY))) {
   298b2:	2c00      	cmp	r4, #0
   298b4:	d0be      	beq.n	29834 <bt_id_create+0xc>
   298b6:	4905      	ldr	r1, [pc, #20]	; (298cc <bt_id_create+0xa4>)
   298b8:	4620      	mov	r0, r4
   298ba:	f00f fec2 	bl	39642 <bt_addr_le_eq>
   298be:	2800      	cmp	r0, #0
   298c0:	d0eb      	beq.n	2989a <bt_id_create+0x72>
   298c2:	e7b7      	b.n	29834 <bt_id_create+0xc>
		return -ENOMEM;
   298c4:	f06f 000b 	mvn.w	r0, #11
   298c8:	e7b6      	b.n	29838 <bt_id_create+0x10>
   298ca:	bf00      	nop
   298cc:	0003dc18 	.word	0x0003dc18
   298d0:	20000a90 	.word	0x20000a90
   298d4:	0003e155 	.word	0x0003e155
   298d8:	20000400 	.word	0x20000400

000298dc <bt_id_read_public_addr>:
#endif /* defined(CONFIG_BT_HCI_VS_EXT) */
}
#endif /* defined(CONFIG_BT_PRIVACY) */

uint8_t bt_id_read_public_addr(bt_addr_le_t *addr)
{
   298dc:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_rp_read_bd_addr *rp;
	struct net_buf *rsp;
	int err;

	CHECKIF(addr == NULL) {
   298de:	4604      	mov	r4, r0
{
   298e0:	b088      	sub	sp, #32
	CHECKIF(addr == NULL) {
   298e2:	b980      	cbnz	r0, 29906 <bt_id_read_public_addr+0x2a>
		BT_WARN("Invalid input parameters");
   298e4:	481f      	ldr	r0, [pc, #124]	; (29964 <bt_id_read_public_addr+0x88>)
   298e6:	6803      	ldr	r3, [r0, #0]
   298e8:	f013 0f06 	tst.w	r3, #6
   298ec:	d008      	beq.n	29900 <bt_id_read_public_addr+0x24>
   298ee:	4b1e      	ldr	r3, [pc, #120]	; (29968 <bt_id_read_public_addr+0x8c>)
   298f0:	9307      	str	r3, [sp, #28]
   298f2:	aa06      	add	r2, sp, #24
   298f4:	2302      	movs	r3, #2
   298f6:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   298fa:	9306      	str	r3, [sp, #24]
   298fc:	f00f fea9 	bl	39652 <z_log_msg_static_create.constprop.0>
		return 0U;
   29900:	2000      	movs	r0, #0
	bt_addr_copy(&addr->a, &rp->bdaddr);
	addr->type = BT_ADDR_LE_PUBLIC;

	net_buf_unref(rsp);
	return 1U;
}
   29902:	b008      	add	sp, #32
   29904:	bd70      	pop	{r4, r5, r6, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
   29906:	aa01      	add	r2, sp, #4
   29908:	2100      	movs	r1, #0
   2990a:	f241 0009 	movw	r0, #4105	; 0x1009
   2990e:	f7fe ff87 	bl	28820 <bt_hci_cmd_send_sync>
	if (err) {
   29912:	4606      	mov	r6, r0
   29914:	b130      	cbz	r0, 29924 <bt_id_read_public_addr+0x48>
		BT_WARN("Failed to read public address");
   29916:	4813      	ldr	r0, [pc, #76]	; (29964 <bt_id_read_public_addr+0x88>)
   29918:	6803      	ldr	r3, [r0, #0]
   2991a:	f013 0f06 	tst.w	r3, #6
   2991e:	d0ef      	beq.n	29900 <bt_id_read_public_addr+0x24>
   29920:	4b12      	ldr	r3, [pc, #72]	; (2996c <bt_id_read_public_addr+0x90>)
   29922:	e7e5      	b.n	298f0 <bt_id_read_public_addr+0x14>
	rp = (void *)rsp->data;
   29924:	9b01      	ldr	r3, [sp, #4]
	return memcmp(a, b, sizeof(*a));
   29926:	4912      	ldr	r1, [pc, #72]	; (29970 <bt_id_read_public_addr+0x94>)
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   29928:	689d      	ldr	r5, [r3, #8]
   2992a:	3501      	adds	r5, #1
   2992c:	2206      	movs	r2, #6
   2992e:	4628      	mov	r0, r5
   29930:	f00f fd17 	bl	39362 <memcmp>
   29934:	b918      	cbnz	r0, 2993e <bt_id_read_public_addr+0x62>
		net_buf_unref(rsp);
   29936:	9801      	ldr	r0, [sp, #4]
   29938:	f004 ffa2 	bl	2e880 <net_buf_unref>
		return 0U;
   2993c:	e7e0      	b.n	29900 <bt_id_read_public_addr+0x24>
   2993e:	490d      	ldr	r1, [pc, #52]	; (29974 <bt_id_read_public_addr+0x98>)
   29940:	2206      	movs	r2, #6
   29942:	4628      	mov	r0, r5
   29944:	f00f fd0d 	bl	39362 <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   29948:	2800      	cmp	r0, #0
   2994a:	d0f4      	beq.n	29936 <bt_id_read_public_addr+0x5a>
	memcpy(dst, src, sizeof(*dst));
   2994c:	2206      	movs	r2, #6
   2994e:	4629      	mov	r1, r5
   29950:	1c60      	adds	r0, r4, #1
   29952:	f00f fd2d 	bl	393b0 <memcpy>
	net_buf_unref(rsp);
   29956:	9801      	ldr	r0, [sp, #4]
	addr->type = BT_ADDR_LE_PUBLIC;
   29958:	7026      	strb	r6, [r4, #0]
	net_buf_unref(rsp);
   2995a:	f004 ff91 	bl	2e880 <net_buf_unref>
	return 1U;
   2995e:	2001      	movs	r0, #1
   29960:	e7cf      	b.n	29902 <bt_id_read_public_addr+0x26>
   29962:	bf00      	nop
   29964:	20000a90 	.word	0x20000a90
   29968:	0003e183 	.word	0x0003e183
   2996c:	0003e19c 	.word	0x0003e19c
   29970:	0003dc25 	.word	0x0003dc25
   29974:	0003dc1f 	.word	0x0003dc1f

00029978 <bt_setup_public_id_addr>:

int bt_setup_public_id_addr(void)
{
   29978:	b507      	push	{r0, r1, r2, lr}
	bt_addr_le_t addr;
	uint8_t *irk = NULL;

	bt_dev.id_count = bt_id_read_public_addr(&addr);
   2997a:	4668      	mov	r0, sp
   2997c:	f7ff ffae 	bl	298dc <bt_id_read_public_addr>
   29980:	4b04      	ldr	r3, [pc, #16]	; (29994 <bt_setup_public_id_addr+0x1c>)
   29982:	71d8      	strb	r0, [r3, #7]

	if (!bt_dev.id_count) {
   29984:	b118      	cbz	r0, 2998e <bt_setup_public_id_addr+0x16>
		if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
			atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
		}
	}

	return id_create(BT_ID_DEFAULT, &addr, irk);
   29986:	4669      	mov	r1, sp
   29988:	2000      	movs	r0, #0
   2998a:	f7ff ff1b 	bl	297c4 <id_create.constprop.0>
}
   2998e:	b003      	add	sp, #12
   29990:	f85d fb04 	ldr.w	pc, [sp], #4
   29994:	20000400 	.word	0x20000400

00029998 <bt_read_static_addr>:

#if defined(CONFIG_BT_HCI_VS_EXT)
uint8_t bt_read_static_addr(struct bt_hci_vs_static_addr addrs[], uint8_t size)
{
   29998:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_hci_rp_vs_read_static_addrs *rp;
	struct net_buf *rsp;
	int err, i;
	uint8_t cnt;

	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   2999c:	4b24      	ldr	r3, [pc, #144]	; (29a30 <bt_read_static_addr+0x98>)
   2999e:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
   299a2:	07db      	lsls	r3, r3, #31
{
   299a4:	b088      	sub	sp, #32
   299a6:	4607      	mov	r7, r0
   299a8:	4688      	mov	r8, r1
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   299aa:	d412      	bmi.n	299d2 <bt_read_static_addr+0x3a>
		BT_WARN("Read Static Addresses command not available");
   299ac:	4821      	ldr	r0, [pc, #132]	; (29a34 <bt_read_static_addr+0x9c>)
   299ae:	6803      	ldr	r3, [r0, #0]
   299b0:	f013 0f06 	tst.w	r3, #6
   299b4:	d008      	beq.n	299c8 <bt_read_static_addr+0x30>
   299b6:	4b20      	ldr	r3, [pc, #128]	; (29a38 <bt_read_static_addr+0xa0>)
   299b8:	9307      	str	r3, [sp, #28]
   299ba:	aa06      	add	r2, sp, #24
   299bc:	2302      	movs	r3, #2
   299be:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   299c2:	9306      	str	r3, [sp, #24]
   299c4:	f00f fe45 	bl	39652 <z_log_msg_static_create.constprop.0>
		return 0;
   299c8:	2500      	movs	r5, #0
	if (!cnt) {
		BT_WARN("No static addresses stored in controller");
	}

	return cnt;
}
   299ca:	4628      	mov	r0, r5
   299cc:	b008      	add	sp, #32
   299ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
   299d2:	aa01      	add	r2, sp, #4
   299d4:	2100      	movs	r1, #0
   299d6:	f64f 4009 	movw	r0, #64521	; 0xfc09
   299da:	f7fe ff21 	bl	28820 <bt_hci_cmd_send_sync>
	if (err) {
   299de:	4604      	mov	r4, r0
   299e0:	b130      	cbz	r0, 299f0 <bt_read_static_addr+0x58>
		BT_WARN("Failed to read static addresses");
   299e2:	4814      	ldr	r0, [pc, #80]	; (29a34 <bt_read_static_addr+0x9c>)
   299e4:	6803      	ldr	r3, [r0, #0]
   299e6:	f013 0f06 	tst.w	r3, #6
   299ea:	d0ed      	beq.n	299c8 <bt_read_static_addr+0x30>
   299ec:	4b13      	ldr	r3, [pc, #76]	; (29a3c <bt_read_static_addr+0xa4>)
   299ee:	e7e3      	b.n	299b8 <bt_read_static_addr+0x20>
	rp = (void *)rsp->data;
   299f0:	9b01      	ldr	r3, [sp, #4]
   299f2:	689e      	ldr	r6, [r3, #8]
	cnt = MIN(rp->num_addrs, size);
   299f4:	7875      	ldrb	r5, [r6, #1]
   299f6:	4545      	cmp	r5, r8
   299f8:	bf28      	it	cs
   299fa:	4645      	movcs	r5, r8
	for (i = 0; i < cnt; i++) {
   299fc:	3602      	adds	r6, #2
		memcpy(&addrs[i], &rp->a[i], sizeof(struct bt_hci_vs_static_addr));
   299fe:	f04f 0816 	mov.w	r8, #22
	for (i = 0; i < cnt; i++) {
   29a02:	42a5      	cmp	r5, r4
   29a04:	dc0b      	bgt.n	29a1e <bt_read_static_addr+0x86>
	net_buf_unref(rsp);
   29a06:	9801      	ldr	r0, [sp, #4]
   29a08:	f004 ff3a 	bl	2e880 <net_buf_unref>
	if (!cnt) {
   29a0c:	2d00      	cmp	r5, #0
   29a0e:	d1dc      	bne.n	299ca <bt_read_static_addr+0x32>
		BT_WARN("No static addresses stored in controller");
   29a10:	4808      	ldr	r0, [pc, #32]	; (29a34 <bt_read_static_addr+0x9c>)
   29a12:	6803      	ldr	r3, [r0, #0]
   29a14:	f013 0f06 	tst.w	r3, #6
   29a18:	d0d6      	beq.n	299c8 <bt_read_static_addr+0x30>
   29a1a:	4b09      	ldr	r3, [pc, #36]	; (29a40 <bt_read_static_addr+0xa8>)
   29a1c:	e7cc      	b.n	299b8 <bt_read_static_addr+0x20>
		memcpy(&addrs[i], &rp->a[i], sizeof(struct bt_hci_vs_static_addr));
   29a1e:	4631      	mov	r1, r6
   29a20:	fb08 7004 	mla	r0, r8, r4, r7
   29a24:	2216      	movs	r2, #22
   29a26:	f00f fcc3 	bl	393b0 <memcpy>
	for (i = 0; i < cnt; i++) {
   29a2a:	3401      	adds	r4, #1
   29a2c:	3616      	adds	r6, #22
   29a2e:	e7e8      	b.n	29a02 <bt_read_static_addr+0x6a>
   29a30:	20000400 	.word	0x20000400
   29a34:	20000a90 	.word	0x20000a90
   29a38:	0003e1ba 	.word	0x0003e1ba
   29a3c:	0003e1e6 	.word	0x0003e1e6
   29a40:	0003e206 	.word	0x0003e206

00029a44 <bt_setup_random_id_addr>:
#endif /* CONFIG_BT_HCI_VS_EXT */

int bt_setup_random_id_addr(void)
{
   29a44:	b5f0      	push	{r4, r5, r6, r7, lr}
#if defined(CONFIG_BT_HCI_VS_EXT) || defined(CONFIG_BT_CTLR)
	/* Only read the addresses if the user has not already configured one or
	 * more identities (!bt_dev.id_count).
	 */
	if (!bt_dev.id_count) {
   29a46:	4e15      	ldr	r6, [pc, #84]	; (29a9c <bt_setup_random_id_addr+0x58>)
   29a48:	79f4      	ldrb	r4, [r6, #7]
{
   29a4a:	b089      	sub	sp, #36	; 0x24
	if (!bt_dev.id_count) {
   29a4c:	b92c      	cbnz	r4, 29a5a <bt_setup_random_id_addr+0x16>
		struct bt_hci_vs_static_addr addrs[CONFIG_BT_ID_MAX];

		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
   29a4e:	2101      	movs	r1, #1
   29a50:	a802      	add	r0, sp, #8
   29a52:	f7ff ffa1 	bl	29998 <bt_read_static_addr>
   29a56:	71f0      	strb	r0, [r6, #7]

		if (bt_dev.id_count) {
   29a58:	b9c8      	cbnz	r0, 29a8e <bt_setup_random_id_addr+0x4a>

	if (IS_ENABLED(CONFIG_BT_PRIVACY) && IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}

	return bt_id_create(NULL, NULL);
   29a5a:	2100      	movs	r1, #0
   29a5c:	4608      	mov	r0, r1
}
   29a5e:	b009      	add	sp, #36	; 0x24
   29a60:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	return bt_id_create(NULL, NULL);
   29a64:	f7ff bee0 	b.w	29828 <bt_id_create>
   29a68:	ab02      	add	r3, sp, #8
   29a6a:	fb07 3105 	mla	r1, r7, r5, r3
   29a6e:	2206      	movs	r2, #6
   29a70:	f10d 0001 	add.w	r0, sp, #1
   29a74:	f00f fc9c 	bl	393b0 <memcpy>
				addr.type = BT_ADDR_LE_RANDOM;
   29a78:	2301      	movs	r3, #1
				err = id_create(i, &addr, irk);
   29a7a:	4669      	mov	r1, sp
   29a7c:	4628      	mov	r0, r5
				addr.type = BT_ADDR_LE_RANDOM;
   29a7e:	f88d 3000 	strb.w	r3, [sp]
				err = id_create(i, &addr, irk);
   29a82:	f7ff fe9f 	bl	297c4 <id_create.constprop.0>
				if (err) {
   29a86:	3401      	adds	r4, #1
   29a88:	b110      	cbz	r0, 29a90 <bt_setup_random_id_addr+0x4c>
}
   29a8a:	b009      	add	sp, #36	; 0x24
   29a8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
   29a8e:	2716      	movs	r7, #22
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
   29a90:	79f3      	ldrb	r3, [r6, #7]
   29a92:	b2e5      	uxtb	r5, r4
   29a94:	42ab      	cmp	r3, r5
   29a96:	d8e7      	bhi.n	29a68 <bt_setup_random_id_addr+0x24>
			return 0;
   29a98:	2000      	movs	r0, #0
   29a9a:	e7f6      	b.n	29a8a <bt_setup_random_id_addr+0x46>
   29a9c:	20000400 	.word	0x20000400

00029aa0 <bt_id_set_adv_own_addr>:
}
#endif /* defined(CONFIG_BT_OBSERVER) */

int bt_id_set_adv_own_addr(struct bt_le_ext_adv *adv, uint32_t options,
			   bool dir_adv, uint8_t *own_addr_type)
{
   29aa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   29aa4:	4690      	mov	r8, r2
   29aa6:	460e      	mov	r6, r1
   29aa8:	461d      	mov	r5, r3
	const bt_addr_le_t *id_addr;
	int err = 0;

	CHECKIF(adv == NULL || own_addr_type == NULL) {
   29aaa:	4602      	mov	r2, r0
   29aac:	2800      	cmp	r0, #0
   29aae:	d04b      	beq.n	29b48 <bt_id_set_adv_own_addr+0xa8>
   29ab0:	2b00      	cmp	r3, #0
   29ab2:	d049      	beq.n	29b48 <bt_id_set_adv_own_addr+0xa8>
	}

	/* Set which local identity address we're advertising with */
	id_addr = &bt_dev.id_addr[adv->id];

	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
   29ab4:	07cf      	lsls	r7, r1, #31
	id_addr = &bt_dev.id_addr[adv->id];
   29ab6:	7804      	ldrb	r4, [r0, #0]
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
   29ab8:	d531      	bpl.n	29b1e <bt_id_set_adv_own_addr+0x7e>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
   29aba:	4f25      	ldr	r7, [pc, #148]	; (29b50 <bt_id_set_adv_own_addr+0xb0>)
   29abc:	f1b8 0f00 	cmp.w	r8, #0
   29ac0:	d013      	beq.n	29aea <bt_id_set_adv_own_addr+0x4a>
   29ac2:	0688      	lsls	r0, r1, #26
   29ac4:	d40a      	bmi.n	29adc <bt_id_set_adv_own_addr+0x3c>
			 * If Static Random address is used as Identity
			 * address we need to restore it before advertising
			 * is enabled. Otherwise NRPA used for active scan
			 * could be used for advertising.
			 */
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   29ac6:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
   29aca:	5cfb      	ldrb	r3, [r7, r3]
   29acc:	2b01      	cmp	r3, #1
   29ace:	d015      	beq.n	29afc <bt_id_set_adv_own_addr+0x5c>
				if (err) {
					return err;
				}
			}

			*own_addr_type = id_addr->type;
   29ad0:	702b      	strb	r3, [r5, #0]

			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
   29ad2:	06b2      	lsls	r2, r6, #26
   29ad4:	d50f      	bpl.n	29af6 <bt_id_set_adv_own_addr+0x56>
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
   29ad6:	f043 0302 	orr.w	r3, r3, #2
   29ada:	e00b      	b.n	29af4 <bt_id_set_adv_own_addr+0x54>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
   29adc:	f897 30b0 	ldrb.w	r3, [r7, #176]	; 0xb0
   29ae0:	0659      	lsls	r1, r3, #25
   29ae2:	d4f0      	bmi.n	29ac6 <bt_id_set_adv_own_addr+0x26>
			return -ENOTSUP;
   29ae4:	f06f 0085 	mvn.w	r0, #133	; 0x85
   29ae8:	e006      	b.n	29af8 <bt_id_set_adv_own_addr+0x58>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   29aea:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
   29aee:	5cfb      	ldrb	r3, [r7, r3]
   29af0:	2b01      	cmp	r3, #1
   29af2:	d003      	beq.n	29afc <bt_id_set_adv_own_addr+0x5c>
			*own_addr_type = id_addr->type;
   29af4:	702b      	strb	r3, [r5, #0]
		if (err) {
			return err;
		}
	}

	return 0;
   29af6:	2000      	movs	r0, #0
}
   29af8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
   29afc:	2107      	movs	r1, #7
   29afe:	fb01 7104 	mla	r1, r1, r4, r7
   29b02:	3101      	adds	r1, #1
   29b04:	4610      	mov	r0, r2
   29b06:	f00f fdac 	bl	39662 <bt_id_set_adv_random_addr>
				if (err) {
   29b0a:	2800      	cmp	r0, #0
   29b0c:	d1f4      	bne.n	29af8 <bt_id_set_adv_own_addr+0x58>
			*own_addr_type = id_addr->type;
   29b0e:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   29b12:	5d3b      	ldrb	r3, [r7, r4]
   29b14:	702b      	strb	r3, [r5, #0]
			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
   29b16:	f1b8 0f00 	cmp.w	r8, #0
   29b1a:	d0ec      	beq.n	29af6 <bt_id_set_adv_own_addr+0x56>
   29b1c:	e7d9      	b.n	29ad2 <bt_id_set_adv_own_addr+0x32>
		if (options & BT_LE_ADV_OPT_USE_IDENTITY) {
   29b1e:	074b      	lsls	r3, r1, #29
   29b20:	d50e      	bpl.n	29b40 <bt_id_set_adv_own_addr+0xa0>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   29b22:	4e0b      	ldr	r6, [pc, #44]	; (29b50 <bt_id_set_adv_own_addr+0xb0>)
   29b24:	ebc4 07c4 	rsb	r7, r4, r4, lsl #3
   29b28:	5df3      	ldrb	r3, [r6, r7]
   29b2a:	2b01      	cmp	r3, #1
   29b2c:	d1e2      	bne.n	29af4 <bt_id_set_adv_own_addr+0x54>
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
   29b2e:	2107      	movs	r1, #7
   29b30:	fb11 3104 	smlabb	r1, r1, r4, r3
   29b34:	4431      	add	r1, r6
   29b36:	f00f fd94 	bl	39662 <bt_id_set_adv_random_addr>
			*own_addr_type = id_addr->type;
   29b3a:	5df3      	ldrb	r3, [r6, r7]
   29b3c:	702b      	strb	r3, [r5, #0]
		if (err) {
   29b3e:	e7db      	b.n	29af8 <bt_id_set_adv_own_addr+0x58>
			err = bt_id_set_adv_private_addr(adv);
   29b40:	f00f fddd 	bl	396fe <bt_id_set_adv_private_addr>
   29b44:	2301      	movs	r3, #1
   29b46:	e7f9      	b.n	29b3c <bt_id_set_adv_own_addr+0x9c>
		return -EINVAL;
   29b48:	f06f 0015 	mvn.w	r0, #21
   29b4c:	e7d4      	b.n	29af8 <bt_id_set_adv_own_addr+0x58>
   29b4e:	bf00      	nop
   29b50:	20000400 	.word	0x20000400

00029b54 <bt_id_init>:
}
#endif /* !defined(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY) */
#endif /* defined(CONFIG_BT_SMP) */

int bt_id_init(void)
{
   29b54:	b530      	push	{r4, r5, lr}
	int err;

	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
   29b56:	4d17      	ldr	r5, [pc, #92]	; (29bb4 <bt_id_init+0x60>)
   29b58:	79eb      	ldrb	r3, [r5, #7]
{
   29b5a:	b087      	sub	sp, #28
	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
   29b5c:	b11b      	cbz	r3, 29b66 <bt_id_init+0x12>

#if defined(CONFIG_BT_PRIVACY)
	k_work_init_delayable(&bt_dev.rpa_update, rpa_timeout);
#endif

	return 0;
   29b5e:	2400      	movs	r4, #0
}
   29b60:	4620      	mov	r0, r4
   29b62:	b007      	add	sp, #28
   29b64:	bd30      	pop	{r4, r5, pc}
		err = bt_setup_public_id_addr();
   29b66:	f7ff ff07 	bl	29978 <bt_setup_public_id_addr>
		if (err) {
   29b6a:	4604      	mov	r4, r0
   29b6c:	b168      	cbz	r0, 29b8a <bt_id_init+0x36>
			BT_ERR("Unable to set identity address");
   29b6e:	4812      	ldr	r0, [pc, #72]	; (29bb8 <bt_id_init+0x64>)
   29b70:	6803      	ldr	r3, [r0, #0]
   29b72:	075a      	lsls	r2, r3, #29
   29b74:	d0f4      	beq.n	29b60 <bt_id_init+0xc>
   29b76:	4b11      	ldr	r3, [pc, #68]	; (29bbc <bt_id_init+0x68>)
			BT_ERR("Unable to set random address");
   29b78:	9305      	str	r3, [sp, #20]
   29b7a:	aa04      	add	r2, sp, #16
   29b7c:	2302      	movs	r3, #2
   29b7e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   29b82:	9304      	str	r3, [sp, #16]
   29b84:	f00f fd65 	bl	39652 <z_log_msg_static_create.constprop.0>
   29b88:	e7ea      	b.n	29b60 <bt_id_init+0xc>
	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
   29b8a:	79eb      	ldrb	r3, [r5, #7]
   29b8c:	2b00      	cmp	r3, #0
   29b8e:	d1e6      	bne.n	29b5e <bt_id_init+0xa>
		err = bt_setup_random_id_addr();
   29b90:	f7ff ff58 	bl	29a44 <bt_setup_random_id_addr>
		if (err) {
   29b94:	4604      	mov	r4, r0
   29b96:	2800      	cmp	r0, #0
   29b98:	d1e9      	bne.n	29b6e <bt_id_init+0x1a>
		err = set_random_address(&bt_dev.id_addr[0].a);
   29b9a:	1c68      	adds	r0, r5, #1
   29b9c:	f7ff fde6 	bl	2976c <set_random_address>
		if (err) {
   29ba0:	4604      	mov	r4, r0
   29ba2:	2800      	cmp	r0, #0
   29ba4:	d0db      	beq.n	29b5e <bt_id_init+0xa>
			BT_ERR("Unable to set random address");
   29ba6:	4804      	ldr	r0, [pc, #16]	; (29bb8 <bt_id_init+0x64>)
   29ba8:	6803      	ldr	r3, [r0, #0]
   29baa:	075b      	lsls	r3, r3, #29
   29bac:	d0d8      	beq.n	29b60 <bt_id_init+0xc>
   29bae:	4b04      	ldr	r3, [pc, #16]	; (29bc0 <bt_id_init+0x6c>)
   29bb0:	e7e2      	b.n	29b78 <bt_id_init+0x24>
   29bb2:	bf00      	nop
   29bb4:	20000400 	.word	0x20000400
   29bb8:	20000a90 	.word	0x20000a90
   29bbc:	0003e22f 	.word	0x0003e22f
   29bc0:	0003e24e 	.word	0x0003e24e

00029bc4 <le_adv_stop_free_conn>:
	*out_conn = conn;
	return 0;
}

static void le_adv_stop_free_conn(const struct bt_le_ext_adv *adv, uint8_t status)
{
   29bc4:	b570      	push	{r4, r5, r6, lr}
	struct bt_conn *conn;

	if (bt_addr_le_eq(&adv->target_addr, BT_ADDR_LE_ANY)) {
   29bc6:	f100 0609 	add.w	r6, r0, #9
{
   29bca:	4604      	mov	r4, r0
   29bcc:	460d      	mov	r5, r1
	return memcmp(a, b, sizeof(*a));
   29bce:	2207      	movs	r2, #7
   29bd0:	490c      	ldr	r1, [pc, #48]	; (29c04 <le_adv_stop_free_conn+0x40>)
   29bd2:	4630      	mov	r0, r6
   29bd4:	f00f fbc5 	bl	39362 <memcmp>
   29bd8:	4603      	mov	r3, r0
   29bda:	7820      	ldrb	r0, [r4, #0]
	if (bt_addr_le_eq(&adv->target_addr, BT_ADDR_LE_ANY)) {
   29bdc:	b973      	cbnz	r3, 29bfc <le_adv_stop_free_conn+0x38>
		conn = bt_conn_lookup_state_le(adv->id, BT_ADDR_LE_NONE,
   29bde:	490a      	ldr	r1, [pc, #40]	; (29c08 <le_adv_stop_free_conn+0x44>)
   29be0:	2204      	movs	r2, #4
					       BT_CONN_CONNECTING_ADV);
	} else {
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
   29be2:	f001 fb41 	bl	2b268 <bt_conn_lookup_state_le>
   29be6:	4604      	mov	r4, r0
					       BT_CONN_CONNECTING_DIR_ADV);
	}

	if (conn) {
   29be8:	b158      	cbz	r0, 29c02 <le_adv_stop_free_conn+0x3e>
		conn->err = status;
   29bea:	7245      	strb	r5, [r0, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   29bec:	2100      	movs	r1, #0
   29bee:	f001 f8c5 	bl	2ad7c <bt_conn_set_state>
		bt_conn_unref(conn);
   29bf2:	4620      	mov	r0, r4
	}
}
   29bf4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_conn_unref(conn);
   29bf8:	f001 b888 	b.w	2ad0c <bt_conn_unref>
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
   29bfc:	2205      	movs	r2, #5
   29bfe:	4631      	mov	r1, r6
   29c00:	e7ef      	b.n	29be2 <le_adv_stop_free_conn+0x1e>
}
   29c02:	bd70      	pop	{r4, r5, r6, pc}
   29c04:	0003dc18 	.word	0x0003dc18
   29c08:	0003dc11 	.word	0x0003dc11

00029c0c <adv_new>:
{
   29c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if (!atomic_test_bit(adv_pool[i].flags, BT_ADV_CREATED)) {
   29c0e:	480f      	ldr	r0, [pc, #60]	; (29c4c <adv_new+0x40>)
   29c10:	2100      	movs	r1, #0
   29c12:	f00f fda8 	bl	39766 <atomic_test_bit>
   29c16:	4604      	mov	r4, r0
   29c18:	b120      	cbz	r0, 29c24 <adv_new+0x18>
   29c1a:	480d      	ldr	r0, [pc, #52]	; (29c50 <adv_new+0x44>)
   29c1c:	f00f fda3 	bl	39766 <atomic_test_bit>
   29c20:	b990      	cbnz	r0, 29c48 <adv_new+0x3c>
	for (i = 0; i < ARRAY_SIZE(adv_pool); i++) {
   29c22:	2401      	movs	r4, #1
			adv = &adv_pool[i];
   29c24:	2250      	movs	r2, #80	; 0x50
   29c26:	4f0b      	ldr	r7, [pc, #44]	; (29c54 <adv_new+0x48>)
   29c28:	fb02 f604 	mul.w	r6, r2, r4
   29c2c:	19f5      	adds	r5, r6, r7
	(void)memset(adv, 0, sizeof(*adv));
   29c2e:	2100      	movs	r1, #0
   29c30:	4628      	mov	r0, r5
   29c32:	f00f fbc8 	bl	393c6 <memset>
	atomic_set_bit(adv_pool[i].flags, BT_ADV_CREATED);
   29c36:	f106 0010 	add.w	r0, r6, #16
   29c3a:	2100      	movs	r1, #0
   29c3c:	4438      	add	r0, r7
   29c3e:	f00f fdc4 	bl	397ca <atomic_set_bit>
	adv->handle = i;
   29c42:	706c      	strb	r4, [r5, #1]
}
   29c44:	4628      	mov	r0, r5
   29c46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return NULL;
   29c48:	460d      	mov	r5, r1
   29c4a:	e7fb      	b.n	29c44 <adv_new+0x38>
   29c4c:	200026f0 	.word	0x200026f0
   29c50:	20002740 	.word	0x20002740
   29c54:	200026e0 	.word	0x200026e0

00029c58 <valid_adv_ext_param>:
{
   29c58:	b538      	push	{r3, r4, r5, lr}
		if (param->peer &&
   29c5a:	6902      	ldr	r2, [r0, #16]
		    !(param->options & BT_LE_ADV_OPT_EXT_ADV) &&
   29c5c:	6843      	ldr	r3, [r0, #4]
{
   29c5e:	4604      	mov	r4, r0
		if (param->peer &&
   29c60:	b152      	cbz	r2, 29c78 <valid_adv_ext_param+0x20>
		    !(param->options & BT_LE_ADV_OPT_EXT_ADV) &&
   29c62:	f240 4201 	movw	r2, #1025	; 0x401
   29c66:	4213      	tst	r3, r2
   29c68:	d101      	bne.n	29c6e <valid_adv_ext_param+0x16>
			return false;
   29c6a:	2000      	movs	r0, #0
}
   29c6c:	bd38      	pop	{r3, r4, r5, pc}
		    (param->options & BT_LE_ADV_OPT_EXT_ADV) &&
   29c6e:	f403 6282 	and.w	r2, r3, #1040	; 0x410
   29c72:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
   29c76:	d0f8      	beq.n	29c6a <valid_adv_ext_param+0x12>
		if (!(param->options & BT_LE_ADV_OPT_EXT_ADV) &&
   29c78:	0559      	lsls	r1, r3, #21
   29c7a:	d402      	bmi.n	29c82 <valid_adv_ext_param+0x2a>
   29c7c:	f413 4ff8 	tst.w	r3, #31744	; 0x7c00
   29c80:	d1f3      	bne.n	29c6a <valid_adv_ext_param+0x12>
		if ((param->options & BT_LE_ADV_OPT_EXT_ADV) &&
   29c82:	4a1a      	ldr	r2, [pc, #104]	; (29cec <valid_adv_ext_param+0x94>)
   29c84:	439a      	bics	r2, r3
   29c86:	d0f0      	beq.n	29c6a <valid_adv_ext_param+0x12>
	if (param->id >= bt_dev.id_count ||
   29c88:	4d19      	ldr	r5, [pc, #100]	; (29cf0 <valid_adv_ext_param+0x98>)
   29c8a:	7820      	ldrb	r0, [r4, #0]
   29c8c:	79eb      	ldrb	r3, [r5, #7]
   29c8e:	4283      	cmp	r3, r0
   29c90:	d9eb      	bls.n	29c6a <valid_adv_ext_param+0x12>
	    bt_addr_le_eq(&bt_dev.id_addr[param->id], BT_ADDR_LE_ANY)) {
   29c92:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   29c96:	4917      	ldr	r1, [pc, #92]	; (29cf4 <valid_adv_ext_param+0x9c>)
   29c98:	2207      	movs	r2, #7
   29c9a:	4428      	add	r0, r5
   29c9c:	f00f fb61 	bl	39362 <memcmp>
	if (param->id >= bt_dev.id_count ||
   29ca0:	2800      	cmp	r0, #0
   29ca2:	d0e2      	beq.n	29c6a <valid_adv_ext_param+0x12>
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   29ca4:	6860      	ldr	r0, [r4, #4]
   29ca6:	07c2      	lsls	r2, r0, #31
   29ca8:	d406      	bmi.n	29cb8 <valid_adv_ext_param+0x60>
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
   29caa:	f895 3043 	ldrb.w	r3, [r5, #67]	; 0x43
   29cae:	2b08      	cmp	r3, #8
   29cb0:	d802      	bhi.n	29cb8 <valid_adv_ext_param+0x60>
   29cb2:	68a3      	ldr	r3, [r4, #8]
   29cb4:	2b9f      	cmp	r3, #159	; 0x9f
   29cb6:	d9d8      	bls.n	29c6a <valid_adv_ext_param+0x12>
	if ((param->options & (BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY |
   29cb8:	f010 0f30 	tst.w	r0, #48	; 0x30
   29cbc:	d002      	beq.n	29cc4 <valid_adv_ext_param+0x6c>
			       BT_LE_ADV_OPT_DIR_ADDR_RPA)) &&
   29cbe:	6923      	ldr	r3, [r4, #16]
   29cc0:	2b00      	cmp	r3, #0
   29cc2:	d0d2      	beq.n	29c6a <valid_adv_ext_param+0x12>
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) ||
   29cc4:	06c3      	lsls	r3, r0, #27
   29cc6:	d401      	bmi.n	29ccc <valid_adv_ext_param+0x74>
   29cc8:	6923      	ldr	r3, [r4, #16]
   29cca:	b943      	cbnz	r3, 29cde <valid_adv_ext_param+0x86>
		if (param->interval_min > param->interval_max ||
   29ccc:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   29cd0:	429a      	cmp	r2, r3
   29cd2:	d8ca      	bhi.n	29c6a <valid_adv_ext_param+0x12>
   29cd4:	2a1f      	cmp	r2, #31
   29cd6:	d9c8      	bls.n	29c6a <valid_adv_ext_param+0x12>
		    param->interval_min < 0x0020 ||
   29cd8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
   29cdc:	d8c5      	bhi.n	29c6a <valid_adv_ext_param+0x12>
	    (param->options & BT_LE_ADV_OPT_DISABLE_CHAN_38) &&
   29cde:	f400 3060 	and.w	r0, r0, #229376	; 0x38000
	if ((param->options & BT_LE_ADV_OPT_DISABLE_CHAN_37) &&
   29ce2:	f5b0 3060 	subs.w	r0, r0, #229376	; 0x38000
   29ce6:	bf18      	it	ne
   29ce8:	2001      	movne	r0, #1
   29cea:	e7bf      	b.n	29c6c <valid_adv_ext_param+0x14>
   29cec:	00040600 	.word	0x00040600
   29cf0:	20000400 	.word	0x20000400
   29cf4:	0003dc18 	.word	0x0003dc18

00029cf8 <le_adv_start_add_conn>:
{
   29cf8:	b570      	push	{r4, r5, r6, lr}
	bt_dev.adv_conn_id = adv->id;
   29cfa:	4605      	mov	r5, r0
   29cfc:	4b16      	ldr	r3, [pc, #88]	; (29d58 <le_adv_start_add_conn+0x60>)
   29cfe:	f815 2b09 	ldrb.w	r2, [r5], #9
   29d02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
{
   29d06:	4604      	mov	r4, r0
   29d08:	460e      	mov	r6, r1
   29d0a:	2207      	movs	r2, #7
   29d0c:	4913      	ldr	r1, [pc, #76]	; (29d5c <le_adv_start_add_conn+0x64>)
   29d0e:	4628      	mov	r0, r5
   29d10:	f00f fb27 	bl	39362 <memcmp>
   29d14:	4603      	mov	r3, r0
   29d16:	7820      	ldrb	r0, [r4, #0]
	if (bt_addr_le_eq(&adv->target_addr, BT_ADDR_LE_ANY)) {
   29d18:	b96b      	cbnz	r3, 29d36 <le_adv_start_add_conn+0x3e>
		conn = bt_conn_add_le(adv->id, BT_ADDR_LE_NONE);
   29d1a:	4911      	ldr	r1, [pc, #68]	; (29d60 <le_adv_start_add_conn+0x68>)
   29d1c:	f001 fa3c 	bl	2b198 <bt_conn_add_le>
		if (!conn) {
   29d20:	4604      	mov	r4, r0
   29d22:	b910      	cbnz	r0, 29d2a <le_adv_start_add_conn+0x32>
			return -ENOMEM;
   29d24:	f06f 000b 	mvn.w	r0, #11
}
   29d28:	bd70      	pop	{r4, r5, r6, pc}
		bt_conn_set_state(conn, BT_CONN_CONNECTING_ADV);
   29d2a:	2104      	movs	r1, #4
   29d2c:	f001 f826 	bl	2ad7c <bt_conn_set_state>
		*out_conn = conn;
   29d30:	6034      	str	r4, [r6, #0]
		return 0;
   29d32:	2000      	movs	r0, #0
   29d34:	e7f8      	b.n	29d28 <le_adv_start_add_conn+0x30>
	if (bt_conn_exists_le(adv->id, &adv->target_addr)) {
   29d36:	4629      	mov	r1, r5
   29d38:	f001 fa62 	bl	2b200 <bt_conn_exists_le>
   29d3c:	b940      	cbnz	r0, 29d50 <le_adv_start_add_conn+0x58>
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
   29d3e:	7820      	ldrb	r0, [r4, #0]
   29d40:	4629      	mov	r1, r5
   29d42:	f001 fa29 	bl	2b198 <bt_conn_add_le>
	if (!conn) {
   29d46:	4604      	mov	r4, r0
   29d48:	2800      	cmp	r0, #0
   29d4a:	d0eb      	beq.n	29d24 <le_adv_start_add_conn+0x2c>
	bt_conn_set_state(conn, BT_CONN_CONNECTING_DIR_ADV);
   29d4c:	2105      	movs	r1, #5
   29d4e:	e7ed      	b.n	29d2c <le_adv_start_add_conn+0x34>
		return -EINVAL;
   29d50:	f06f 0015 	mvn.w	r0, #21
   29d54:	e7e8      	b.n	29d28 <le_adv_start_add_conn+0x30>
   29d56:	bf00      	nop
   29d58:	20000400 	.word	0x20000400
   29d5c:	0003dc18 	.word	0x0003dc18
   29d60:	0003dc11 	.word	0x0003dc11

00029d64 <hci_set_ad_ext>:
{
   29d64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29d68:	b08b      	sub	sp, #44	; 0x2c
   29d6a:	e9cd 1000 	strd	r1, r0, [sp]
   29d6e:	4698      	mov	r8, r3
	for (size_t i = 0; i < ad_len; i++) {
   29d70:	2300      	movs	r3, #0
{
   29d72:	4614      	mov	r4, r2
	size_t total_len_bytes = 0;
   29d74:	461d      	mov	r5, r3
		for (size_t j = 0; j < ad[i].len; j++) {
   29d76:	1d16      	adds	r6, r2, #4
   29d78:	f856 0033 	ldr.w	r0, [r6, r3, lsl #3]
   29d7c:	2200      	movs	r2, #0
   29d7e:	e007      	b.n	29d90 <hci_set_ad_ext+0x2c>
			total_len_bytes += ad[i].data[j].data_len + 2;
   29d80:	f854 1033 	ldr.w	r1, [r4, r3, lsl #3]
   29d84:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
		for (size_t j = 0; j < ad[i].len; j++) {
   29d88:	3201      	adds	r2, #1
			total_len_bytes += ad[i].data[j].data_len + 2;
   29d8a:	7849      	ldrb	r1, [r1, #1]
   29d8c:	3102      	adds	r1, #2
   29d8e:	440d      	add	r5, r1
		for (size_t j = 0; j < ad[i].len; j++) {
   29d90:	4290      	cmp	r0, r2
   29d92:	d1f5      	bne.n	29d80 <hci_set_ad_ext+0x1c>
	for (size_t i = 0; i < ad_len; i++) {
   29d94:	3301      	adds	r3, #1
   29d96:	4598      	cmp	r8, r3
   29d98:	d1ee      	bne.n	29d78 <hci_set_ad_ext+0x14>
	    atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   29d9a:	9b01      	ldr	r3, [sp, #4]
	if ((total_len_bytes > BT_HCI_LE_EXT_ADV_FRAG_MAX_LEN) &&
   29d9c:	2dfb      	cmp	r5, #251	; 0xfb
	    atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   29d9e:	f103 0010 	add.w	r0, r3, #16
	if ((total_len_bytes > BT_HCI_LE_EXT_ADV_FRAG_MAX_LEN) &&
   29da2:	d909      	bls.n	29db8 <hci_set_ad_ext+0x54>
	    atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   29da4:	2107      	movs	r1, #7
   29da6:	f00f fcde 	bl	39766 <atomic_test_bit>
	if ((total_len_bytes > BT_HCI_LE_EXT_ADV_FRAG_MAX_LEN) &&
   29daa:	4605      	mov	r5, r0
   29dac:	2800      	cmp	r0, #0
   29dae:	f000 8082 	beq.w	29eb6 <hci_set_ad_ext+0x152>
		return -EAGAIN;
   29db2:	f06f 000a 	mvn.w	r0, #10
   29db6:	e136      	b.n	2a026 <hci_set_ad_ext+0x2c2>
	if (!atomic_test_bit(adv->flags, BT_ADV_EXT_ADV) &&
   29db8:	210c      	movs	r1, #12
   29dba:	f00f fcd4 	bl	39766 <atomic_test_bit>
   29dbe:	b910      	cbnz	r0, 29dc6 <hci_set_ad_ext+0x62>
   29dc0:	2d1f      	cmp	r5, #31
   29dc2:	bf28      	it	cs
   29dc4:	251f      	movcs	r5, #31
	cmd_size = sizeof(*set_data) + total_data_len;
   29dc6:	f105 0904 	add.w	r9, r5, #4
	buf = bt_hci_cmd_create(hci_op, cmd_size);
   29dca:	9800      	ldr	r0, [sp, #0]
   29dcc:	fa5f f189 	uxtb.w	r1, r9
   29dd0:	f7fe fcdc 	bl	2878c <bt_hci_cmd_create>
	if (!buf) {
   29dd4:	4607      	mov	r7, r0
   29dd6:	2800      	cmp	r0, #0
   29dd8:	f000 812d 	beq.w	2a036 <hci_set_ad_ext+0x2d2>
	return net_buf_simple_add(&buf->b, len);
   29ddc:	4649      	mov	r1, r9
   29dde:	3008      	adds	r0, #8
   29de0:	f004 fe54 	bl	2ea8c <net_buf_simple_add>
	(void)memset(set_data, 0, cmd_size);
   29de4:	464a      	mov	r2, r9
   29de6:	2100      	movs	r1, #0
   29de8:	4606      	mov	r6, r0
   29dea:	f00f faec 	bl	393c6 <memset>
	err = set_data_add_complete(set_data->data, total_data_len,
   29dee:	eb04 03c8 	add.w	r3, r4, r8, lsl #3
   29df2:	f106 0b04 	add.w	fp, r6, #4
	for (size_t i = 0; i < ad_len; i++) {
   29df6:	9302      	str	r3, [sp, #8]
	uint8_t set_data_len = 0;
   29df8:	f04f 0800 	mov.w	r8, #0
		for (size_t j = 0; j < ad[i].len; j++) {
   29dfc:	f8d4 a000 	ldr.w	sl, [r4]
   29e00:	2300      	movs	r3, #0
   29e02:	6862      	ldr	r2, [r4, #4]
   29e04:	4293      	cmp	r3, r2
   29e06:	d314      	bcc.n	29e32 <hci_set_ad_ext+0xce>
	for (size_t i = 0; i < ad_len; i++) {
   29e08:	9b02      	ldr	r3, [sp, #8]
   29e0a:	3408      	adds	r4, #8
   29e0c:	42a3      	cmp	r3, r4
   29e0e:	d1f5      	bne.n	29dfc <hci_set_ad_ext+0x98>
	set_data->handle = adv->handle;
   29e10:	9b01      	ldr	r3, [sp, #4]
	*data_len = set_data_len;
   29e12:	f886 8003 	strb.w	r8, [r6, #3]
	set_data->handle = adv->handle;
   29e16:	785b      	ldrb	r3, [r3, #1]
   29e18:	7033      	strb	r3, [r6, #0]
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   29e1a:	9800      	ldr	r0, [sp, #0]
	set_data->op = BT_HCI_LE_EXT_ADV_OP_COMPLETE_DATA;
   29e1c:	2303      	movs	r3, #3
   29e1e:	7073      	strb	r3, [r6, #1]
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   29e20:	2200      	movs	r2, #0
	set_data->frag_pref = BT_HCI_LE_EXT_ADV_FRAG_DISABLED;
   29e22:	2301      	movs	r3, #1
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   29e24:	4639      	mov	r1, r7
	set_data->frag_pref = BT_HCI_LE_EXT_ADV_FRAG_DISABLED;
   29e26:	70b3      	strb	r3, [r6, #2]
}
   29e28:	b00b      	add	sp, #44	; 0x2c
   29e2a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   29e2e:	f7fe bcf7 	b.w	28820 <bt_hci_cmd_send_sync>
			size_t len = data[j].data_len;
   29e32:	f89a 2001 	ldrb.w	r2, [sl, #1]
			uint8_t type = data[j].type;
   29e36:	f89a c000 	ldrb.w	ip, [sl]
			if ((set_data_len + len + 2) > set_data_len_max) {
   29e3a:	f108 0002 	add.w	r0, r8, #2
   29e3e:	1811      	adds	r1, r2, r0
   29e40:	428d      	cmp	r5, r1
   29e42:	d21c      	bcs.n	29e7e <hci_set_ad_ext+0x11a>
				if (!(type == BT_DATA_NAME_COMPLETE &&
   29e44:	f1bc 0f09 	cmp.w	ip, #9
				ssize_t shortened_len = set_data_len_max -
   29e48:	eba5 0200 	sub.w	r2, r5, r0
				if (!(type == BT_DATA_NAME_COMPLETE &&
   29e4c:	d101      	bne.n	29e52 <hci_set_ad_ext+0xee>
   29e4e:	2a00      	cmp	r2, #0
   29e50:	dc13      	bgt.n	29e7a <hci_set_ad_ext+0x116>
					BT_ERR("Too big advertising data");
   29e52:	487a      	ldr	r0, [pc, #488]	; (2a03c <hci_set_ad_ext+0x2d8>)
   29e54:	6803      	ldr	r3, [r0, #0]
   29e56:	075b      	lsls	r3, r3, #29
   29e58:	d009      	beq.n	29e6e <hci_set_ad_ext+0x10a>
   29e5a:	4b79      	ldr	r3, [pc, #484]	; (2a040 <hci_set_ad_ext+0x2dc>)
   29e5c:	9309      	str	r3, [sp, #36]	; 0x24
   29e5e:	2302      	movs	r3, #2
   29e60:	9308      	str	r3, [sp, #32]
   29e62:	2300      	movs	r3, #0
   29e64:	aa08      	add	r2, sp, #32
   29e66:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   29e6a:	f7fc f99f 	bl	261ac <z_impl_z_log_msg_static_create>
		net_buf_unref(buf);
   29e6e:	4638      	mov	r0, r7
   29e70:	f004 fd06 	bl	2e880 <net_buf_unref>
				return -EINVAL;
   29e74:	f06f 0015 	mvn.w	r0, #21
   29e78:	e0d5      	b.n	2a026 <hci_set_ad_ext+0x2c2>
				type = BT_DATA_NAME_SHORTENED;
   29e7a:	f04f 0c08 	mov.w	ip, #8
			set_data[set_data_len++] = len + 1;
   29e7e:	fa5f f982 	uxtb.w	r9, r2
   29e82:	f109 0101 	add.w	r1, r9, #1
   29e86:	f80b 1008 	strb.w	r1, [fp, r8]
   29e8a:	f108 0101 	add.w	r1, r8, #1
			set_data[set_data_len++] = type;
   29e8e:	b2c9      	uxtb	r1, r1
			memcpy(&set_data[set_data_len], data[j].data, len);
   29e90:	fa5b f080 	uxtab	r0, fp, r0
			set_data[set_data_len++] = type;
   29e94:	f80b c001 	strb.w	ip, [fp, r1]
			memcpy(&set_data[set_data_len], data[j].data, len);
   29e98:	f8da 1004 	ldr.w	r1, [sl, #4]
   29e9c:	9303      	str	r3, [sp, #12]
			set_data_len += len;
   29e9e:	f109 0902 	add.w	r9, r9, #2
			memcpy(&set_data[set_data_len], data[j].data, len);
   29ea2:	f00f fa85 	bl	393b0 <memcpy>
		for (size_t j = 0; j < ad[i].len; j++) {
   29ea6:	9b03      	ldr	r3, [sp, #12]
			set_data_len += len;
   29ea8:	44c1      	add	r9, r8
   29eaa:	fa5f f889 	uxtb.w	r8, r9
		for (size_t j = 0; j < ad[i].len; j++) {
   29eae:	3301      	adds	r3, #1
   29eb0:	f10a 0a08 	add.w	sl, sl, #8
   29eb4:	e7a5      	b.n	29e02 <hci_set_ad_ext+0x9e>
	(void)memset(stream, 0, sizeof(*stream));
   29eb6:	4601      	mov	r1, r0
   29eb8:	2218      	movs	r2, #24
   29eba:	a804      	add	r0, sp, #16
   29ebc:	f00f fa83 	bl	393c6 <memset>
	stream->ad_len = ad_len;
   29ec0:	e9cd 4804 	strd	r4, r8, [sp, #16]
	for (size_t i = 0; i < ad_len; i++) {
   29ec4:	4628      	mov	r0, r5
			if (stream->remaining_size > BT_GAP_ADV_MAX_EXT_ADV_DATA_LEN) {
   29ec6:	f240 6772 	movw	r7, #1650	; 0x672
		for (size_t j = 0; j < ad[i].len; j++) {
   29eca:	f856 5030 	ldr.w	r5, [r6, r0, lsl #3]
   29ece:	2300      	movs	r3, #0
   29ed0:	e00b      	b.n	29eea <hci_set_ad_ext+0x186>
			stream->remaining_size += ad[i].data[j].data_len + 2;
   29ed2:	f854 2030 	ldr.w	r2, [r4, r0, lsl #3]
   29ed6:	9909      	ldr	r1, [sp, #36]	; 0x24
   29ed8:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   29edc:	3102      	adds	r1, #2
   29ede:	7852      	ldrb	r2, [r2, #1]
   29ee0:	440a      	add	r2, r1
			if (stream->remaining_size > BT_GAP_ADV_MAX_EXT_ADV_DATA_LEN) {
   29ee2:	42ba      	cmp	r2, r7
			stream->remaining_size += ad[i].data[j].data_len + 2;
   29ee4:	9209      	str	r2, [sp, #36]	; 0x24
			if (stream->remaining_size > BT_GAP_ADV_MAX_EXT_ADV_DATA_LEN) {
   29ee6:	d8c5      	bhi.n	29e74 <hci_set_ad_ext+0x110>
		for (size_t j = 0; j < ad[i].len; j++) {
   29ee8:	3301      	adds	r3, #1
   29eea:	42ab      	cmp	r3, r5
   29eec:	d1f1      	bne.n	29ed2 <hci_set_ad_ext+0x16e>
	for (size_t i = 0; i < ad_len; i++) {
   29eee:	3001      	adds	r0, #1
   29ef0:	4580      	cmp	r8, r0
   29ef2:	d1ea      	bne.n	29eca <hci_set_ad_ext+0x166>
   29ef4:	f04f 0901 	mov.w	r9, #1
		set_data->frag_pref = BT_HCI_LE_EXT_ADV_FRAG_ENABLED;
   29ef8:	f04f 0800 	mov.w	r8, #0
   29efc:	e08f      	b.n	2a01e <hci_set_ad_ext+0x2ba>
		const size_t data_len = MIN(BT_HCI_LE_EXT_ADV_FRAG_MAX_LEN, stream.remaining_size);
   29efe:	28fb      	cmp	r0, #251	; 0xfb
   29f00:	bf28      	it	cs
   29f02:	20fb      	movcs	r0, #251	; 0xfb
		const size_t cmd_size = sizeof(*set_data) + data_len;
   29f04:	1d05      	adds	r5, r0, #4
		const size_t data_len = MIN(BT_HCI_LE_EXT_ADV_FRAG_MAX_LEN, stream.remaining_size);
   29f06:	4604      	mov	r4, r0
		buf = bt_hci_cmd_create(hci_op, cmd_size);
   29f08:	b2e9      	uxtb	r1, r5
   29f0a:	9800      	ldr	r0, [sp, #0]
   29f0c:	f7fe fc3e 	bl	2878c <bt_hci_cmd_create>
		if (!buf) {
   29f10:	4607      	mov	r7, r0
   29f12:	2800      	cmp	r0, #0
   29f14:	f000 808f 	beq.w	2a036 <hci_set_ad_ext+0x2d2>
   29f18:	4629      	mov	r1, r5
   29f1a:	3008      	adds	r0, #8
   29f1c:	f004 fdb6 	bl	2ea8c <net_buf_simple_add>
		set_data->handle = adv->handle;
   29f20:	9b01      	ldr	r3, [sp, #4]
   29f22:	785b      	ldrb	r3, [r3, #1]
   29f24:	7003      	strb	r3, [r0, #0]
   29f26:	4606      	mov	r6, r0
		set_data->frag_pref = BT_HCI_LE_EXT_ADV_FRAG_ENABLED;
   29f28:	f880 8002 	strb.w	r8, [r0, #2]
		set_data->len = ad_stream_read(&stream, set_data->data, data_len);
   29f2c:	f100 0a04 	add.w	sl, r0, #4
   29f30:	fa5f fb84 	uxtb.w	fp, r4
	uint8_t read_len = 0;
   29f34:	2500      	movs	r5, #0
	const struct bt_data *current_ltv = &stream->ad[stream->ad_index].data[stream->data_index];
   29f36:	9804      	ldr	r0, [sp, #16]
   29f38:	9a06      	ldr	r2, [sp, #24]
   29f3a:	9b07      	ldr	r3, [sp, #28]
	const bool done_reading_ltv = (stream->current_ltv_offset == current_ltv->data_len + 2);
   29f3c:	f850 1032 	ldr.w	r1, [r0, r2, lsl #3]
   29f40:	f8bd e020 	ldrh.w	lr, [sp, #32]
   29f44:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
	const struct bt_data *current_ltv = &stream->ad[stream->ad_index].data[stream->data_index];
   29f48:	eb00 0cc2 	add.w	ip, r0, r2, lsl #3
	const bool done_reading_ltv = (stream->current_ltv_offset == current_ltv->data_len + 2);
   29f4c:	7849      	ldrb	r1, [r1, #1]
   29f4e:	3102      	adds	r1, #2
	if (done_reading_ltv) {
   29f50:	458e      	cmp	lr, r1
   29f52:	d10b      	bne.n	29f6c <hci_set_ad_ext+0x208>
		stream->current_ltv_offset = 0;
   29f54:	f8ad 8020 	strh.w	r8, [sp, #32]
		if (stream->data_index + 1 == stream->ad[stream->ad_index].len) {
   29f58:	f8dc 1004 	ldr.w	r1, [ip, #4]
   29f5c:	3301      	adds	r3, #1
   29f5e:	428b      	cmp	r3, r1
			stream->ad_index++;
   29f60:	bf03      	ittte	eq
   29f62:	3201      	addeq	r2, #1
			stream->data_index = 0;
   29f64:	f8cd 801c 	streq.w	r8, [sp, #28]
			stream->ad_index++;
   29f68:	9206      	streq	r2, [sp, #24]
			stream->data_index++;
   29f6a:	9307      	strne	r3, [sp, #28]
	if (stream->ad_index == stream->ad_len) {
   29f6c:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
   29f70:	4293      	cmp	r3, r2
   29f72:	d018      	beq.n	29fa6 <hci_set_ad_ext+0x242>
		return &stream->ad[stream->ad_index].data[stream->data_index];
   29f74:	9a07      	ldr	r2, [sp, #28]
   29f76:	f850 c033 	ldr.w	ip, [r0, r3, lsl #3]
		if (!current_ltv) {
   29f7a:	eb1c 03c2 	adds.w	r3, ip, r2, lsl #3
   29f7e:	d012      	beq.n	29fa6 <hci_set_ad_ext+0x242>
		if (stream->current_ltv_offset == 0) {
   29f80:	f8bd 1020 	ldrh.w	r1, [sp, #32]
			buf[read_len] = current_ltv->data_len + 1;
   29f84:	eb0a 0005 	add.w	r0, sl, r5
		if (stream->current_ltv_offset == 0) {
   29f88:	b9c9      	cbnz	r1, 29fbe <hci_set_ad_ext+0x25a>
			buf[read_len] = current_ltv->data_len + 1;
   29f8a:	785b      	ldrb	r3, [r3, #1]
   29f8c:	3301      	adds	r3, #1
   29f8e:	f80a 3005 	strb.w	r3, [sl, r5]
			stream->current_ltv_offset++;
   29f92:	f8bd 3020 	ldrh.w	r3, [sp, #32]
			read_len++;
   29f96:	3501      	adds	r5, #1
			stream->current_ltv_offset++;
   29f98:	3301      	adds	r3, #1
   29f9a:	b29b      	uxth	r3, r3
			read_len++;
   29f9c:	b2ed      	uxtb	r5, r5
	while (read_len < buf_len) {
   29f9e:	455d      	cmp	r5, fp
			stream->current_ltv_offset++;
   29fa0:	f8ad 3020 	strh.w	r3, [sp, #32]
	while (read_len < buf_len) {
   29fa4:	d3c7      	bcc.n	29f36 <hci_set_ad_ext+0x1d2>
	__ASSERT_NO_MSG(stream->remaining_size >= read_len);
   29fa6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   29fa8:	42ab      	cmp	r3, r5
   29faa:	d225      	bcs.n	29ff8 <hci_set_ad_ext+0x294>
   29fac:	4925      	ldr	r1, [pc, #148]	; (2a044 <hci_set_ad_ext+0x2e0>)
   29fae:	4826      	ldr	r0, [pc, #152]	; (2a048 <hci_set_ad_ext+0x2e4>)
   29fb0:	22a6      	movs	r2, #166	; 0xa6
   29fb2:	f00e fdae 	bl	38b12 <assert_print>
   29fb6:	4823      	ldr	r0, [pc, #140]	; (2a044 <hci_set_ad_ext+0x2e0>)
   29fb8:	21a6      	movs	r1, #166	; 0xa6
   29fba:	f00e fda3 	bl	38b04 <assert_post_action>
		} else if (stream->current_ltv_offset == 1) {
   29fbe:	2901      	cmp	r1, #1
   29fc0:	d103      	bne.n	29fca <hci_set_ad_ext+0x266>
			buf[read_len] = current_ltv->type;
   29fc2:	f81c 3032 	ldrb.w	r3, [ip, r2, lsl #3]
   29fc6:	7003      	strb	r3, [r0, #0]
   29fc8:	e7e3      	b.n	29f92 <hci_set_ad_ext+0x22e>
					current_ltv->data_len - stream->current_ltv_offset + 2;
   29fca:	785a      	ldrb	r2, [r3, #1]
				&current_ltv->data[stream->current_ltv_offset - 2],
   29fcc:	685b      	ldr	r3, [r3, #4]
					current_ltv->data_len - stream->current_ltv_offset + 2;
   29fce:	1a52      	subs	r2, r2, r1
   29fd0:	3202      	adds	r2, #2
			const size_t size_to_copy = MIN(buf_len - read_len, remaining_data_len);
   29fd2:	eba4 0c05 	sub.w	ip, r4, r5
   29fd6:	4562      	cmp	r2, ip
				&current_ltv->data[stream->current_ltv_offset - 2],
   29fd8:	f1a1 0102 	sub.w	r1, r1, #2
			const size_t size_to_copy = MIN(buf_len - read_len, remaining_data_len);
   29fdc:	bf28      	it	cs
   29fde:	4662      	movcs	r2, ip
			(void)memcpy(&buf[read_len],
   29fe0:	4419      	add	r1, r3
   29fe2:	9202      	str	r2, [sp, #8]
   29fe4:	f00f f9e4 	bl	393b0 <memcpy>
			stream->current_ltv_offset += size_to_copy;
   29fe8:	9a02      	ldr	r2, [sp, #8]
   29fea:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   29fee:	4413      	add	r3, r2
			read_len += size_to_copy;
   29ff0:	442a      	add	r2, r5
			stream->current_ltv_offset += size_to_copy;
   29ff2:	b29b      	uxth	r3, r3
			read_len += size_to_copy;
   29ff4:	b2d5      	uxtb	r5, r2
   29ff6:	e7d2      	b.n	29f9e <hci_set_ad_ext+0x23a>
	stream->remaining_size -= read_len;
   29ff8:	1b5b      	subs	r3, r3, r5
   29ffa:	9309      	str	r3, [sp, #36]	; 0x24
		set_data->len = ad_stream_read(&stream, set_data->data, data_len);
   29ffc:	70f5      	strb	r5, [r6, #3]
		if (is_first_iteration && ad_stream_is_empty(&stream)) {
   29ffe:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2a000:	f1b9 0f00 	cmp.w	r9, #0
   2a004:	d012      	beq.n	2a02c <hci_set_ad_ext+0x2c8>
   2a006:	2b00      	cmp	r3, #0
   2a008:	bf0c      	ite	eq
   2a00a:	2303      	moveq	r3, #3
   2a00c:	2301      	movne	r3, #1
		err = bt_hci_cmd_send_sync(hci_op, buf, NULL);
   2a00e:	9800      	ldr	r0, [sp, #0]
			set_data->op = BT_HCI_LE_EXT_ADV_OP_COMPLETE_DATA;
   2a010:	7073      	strb	r3, [r6, #1]
		err = bt_hci_cmd_send_sync(hci_op, buf, NULL);
   2a012:	2200      	movs	r2, #0
   2a014:	4639      	mov	r1, r7
   2a016:	f7fe fc03 	bl	28820 <bt_hci_cmd_send_sync>
		if (err) {
   2a01a:	b920      	cbnz	r0, 2a026 <hci_set_ad_ext+0x2c2>
		is_first_iteration = false;
   2a01c:	4681      	mov	r9, r0
	return stream->remaining_size == 0;
   2a01e:	9809      	ldr	r0, [sp, #36]	; 0x24
	while (!ad_stream_is_empty(&stream)) {
   2a020:	2800      	cmp	r0, #0
   2a022:	f47f af6c 	bne.w	29efe <hci_set_ad_ext+0x19a>
}
   2a026:	b00b      	add	sp, #44	; 0x2c
   2a028:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (ad_stream_is_empty(&stream)) {
   2a02c:	fab3 f383 	clz	r3, r3
   2a030:	095b      	lsrs	r3, r3, #5
   2a032:	005b      	lsls	r3, r3, #1
   2a034:	e7eb      	b.n	2a00e <hci_set_ad_ext+0x2aa>
		return -ENOBUFS;
   2a036:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2a03a:	e7f4      	b.n	2a026 <hci_set_ad_ext+0x2c2>
   2a03c:	20000a74 	.word	0x20000a74
   2a040:	0003e271 	.word	0x0003e271
   2a044:	0003e28a 	.word	0x0003e28a
   2a048:	0003d1d7 	.word	0x0003d1d7

0002a04c <le_ext_adv_param_set>:
}

static int le_ext_adv_param_set(struct bt_le_ext_adv *adv,
				const struct bt_le_adv_param *param,
				bool  has_scan_data)
{
   2a04c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_hci_cp_le_set_ext_adv_param *cp;
	bool dir_adv = param->peer != NULL, scannable;
   2a050:	f8d1 a010 	ldr.w	sl, [r1, #16]
{
   2a054:	4607      	mov	r7, r0
	bool dir_adv = param->peer != NULL, scannable;
   2a056:	f1ba 0400 	subs.w	r4, sl, #0
{
   2a05a:	460e      	mov	r6, r1
	struct net_buf *buf, *rsp;
	int err;
	enum adv_name_type name_type;
	uint16_t props = 0;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EXT_ADV_PARAM, sizeof(*cp));
   2a05c:	f242 0036 	movw	r0, #8246	; 0x2036
   2a060:	f04f 0119 	mov.w	r1, #25
{
   2a064:	4693      	mov	fp, r2
	bool dir_adv = param->peer != NULL, scannable;
   2a066:	bf18      	it	ne
   2a068:	2401      	movne	r4, #1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EXT_ADV_PARAM, sizeof(*cp));
   2a06a:	f7fe fb8f 	bl	2878c <bt_hci_cmd_create>
	if (!buf) {
   2a06e:	4681      	mov	r9, r0
   2a070:	2800      	cmp	r0, #0
   2a072:	f000 8100 	beq.w	2a276 <le_ext_adv_param_set+0x22a>
   2a076:	2119      	movs	r1, #25
   2a078:	3008      	adds	r0, #8
   2a07a:	f004 fd07 	bl	2ea8c <net_buf_simple_add>
		return -ENOBUFS;
	}

	cp = net_buf_add(buf, sizeof(*cp));
	(void)memset(cp, 0, sizeof(*cp));
   2a07e:	2219      	movs	r2, #25
   2a080:	4605      	mov	r5, r0
   2a082:	2100      	movs	r1, #0
   2a084:	f00f f99f 	bl	393c6 <memset>

	err = bt_id_set_adv_own_addr(adv, param->options, dir_adv,
   2a088:	4622      	mov	r2, r4
   2a08a:	6871      	ldr	r1, [r6, #4]
   2a08c:	f105 030a 	add.w	r3, r5, #10
   2a090:	4638      	mov	r0, r7
   2a092:	f7ff fd05 	bl	29aa0 <bt_id_set_adv_own_addr>
				     &cp->own_addr_type);
	if (err) {
   2a096:	4604      	mov	r4, r0
   2a098:	2800      	cmp	r0, #0
   2a09a:	f040 80bb 	bne.w	2a214 <le_ext_adv_param_set+0x1c8>
		return err;
	}

	if (dir_adv) {
		bt_addr_le_copy(&adv->target_addr, param->peer);
   2a09e:	f107 0009 	add.w	r0, r7, #9
	if (dir_adv) {
   2a0a2:	f1ba 0f00 	cmp.w	sl, #0
   2a0a6:	f000 80b9 	beq.w	2a21c <le_ext_adv_param_set+0x1d0>
		bt_addr_le_copy(&adv->target_addr, param->peer);
   2a0aa:	6931      	ldr	r1, [r6, #16]
	} else {
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
   2a0ac:	f00f fb73 	bl	39796 <bt_addr_le_copy>
	}

	name_type = get_adv_name_type_param(param);
   2a0b0:	4630      	mov	r0, r6
   2a0b2:	f00f fc27 	bl	39904 <get_adv_name_type_param>

	cp->handle = adv->handle;
   2a0b6:	787b      	ldrb	r3, [r7, #1]
   2a0b8:	702b      	strb	r3, [r5, #0]
	sys_put_le24(param->interval_min, cp->prim_min_interval);
   2a0ba:	68b3      	ldr	r3, [r6, #8]
	dst[0] = val;
   2a0bc:	70eb      	strb	r3, [r5, #3]
	dst[1] = val >> 8;
   2a0be:	f3c3 2207 	ubfx	r2, r3, #8, #8
	dst[2] = val >> 16;
   2a0c2:	0c1b      	lsrs	r3, r3, #16
	dst[1] = val >> 8;
   2a0c4:	712a      	strb	r2, [r5, #4]
	dst[2] = val >> 16;
   2a0c6:	716b      	strb	r3, [r5, #5]
	sys_put_le24(param->interval_max, cp->prim_max_interval);
   2a0c8:	68f3      	ldr	r3, [r6, #12]
	dst[0] = val;
   2a0ca:	71ab      	strb	r3, [r5, #6]
	dst[1] = val >> 8;
   2a0cc:	f3c3 2207 	ubfx	r2, r3, #8, #8
	dst[2] = val >> 16;
   2a0d0:	0c1b      	lsrs	r3, r3, #16
	dst[1] = val >> 8;
   2a0d2:	71ea      	strb	r2, [r5, #7]
	dst[2] = val >> 16;
   2a0d4:	722b      	strb	r3, [r5, #8]
	name_type = get_adv_name_type_param(param);
   2a0d6:	4680      	mov	r8, r0
	cp->prim_channel_map = get_adv_channel_map(param->options);
   2a0d8:	6870      	ldr	r0, [r6, #4]
   2a0da:	f00f fb35 	bl	39748 <get_adv_channel_map>
	cp->filter_policy = get_filter_policy(param->options);
   2a0de:	2300      	movs	r3, #0
   2a0e0:	74ab      	strb	r3, [r5, #18]
	cp->tx_power = BT_HCI_LE_ADV_TX_POWER_NO_PREF;
   2a0e2:	237f      	movs	r3, #127	; 0x7f
   2a0e4:	74eb      	strb	r3, [r5, #19]

	cp->prim_adv_phy = BT_HCI_LE_PHY_1M;
   2a0e6:	2301      	movs	r3, #1
	cp->prim_channel_map = get_adv_channel_map(param->options);
   2a0e8:	7268      	strb	r0, [r5, #9]
	cp->prim_adv_phy = BT_HCI_LE_PHY_1M;
   2a0ea:	752b      	strb	r3, [r5, #20]
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
   2a0ec:	6872      	ldr	r2, [r6, #4]
   2a0ee:	0551      	lsls	r1, r2, #21
   2a0f0:	d503      	bpl.n	2a0fa <le_ext_adv_param_set+0xae>
		if (param->options & BT_LE_ADV_OPT_NO_2M) {
   2a0f2:	0514      	lsls	r4, r2, #20
			cp->sec_adv_phy = BT_HCI_LE_PHY_1M;
		} else {
			cp->sec_adv_phy = BT_HCI_LE_PHY_2M;
   2a0f4:	bf58      	it	pl
   2a0f6:	2302      	movpl	r3, #2
   2a0f8:	75ab      	strb	r3, [r5, #22]
		}
	}

	if (param->options & BT_LE_ADV_OPT_CODED) {
   2a0fa:	6873      	ldr	r3, [r6, #4]
   2a0fc:	04d8      	lsls	r0, r3, #19
		cp->prim_adv_phy = BT_HCI_LE_PHY_CODED;
   2a0fe:	bf42      	ittt	mi
   2a100:	2303      	movmi	r3, #3
   2a102:	752b      	strbmi	r3, [r5, #20]
		cp->sec_adv_phy = BT_HCI_LE_PHY_CODED;
   2a104:	75ab      	strbmi	r3, [r5, #22]
	}

	if (!(param->options & BT_LE_ADV_OPT_EXT_ADV)) {
   2a106:	6873      	ldr	r3, [r6, #4]
   2a108:	f483 6480 	eor.w	r4, r3, #1024	; 0x400
   2a10c:	f3c4 2480 	ubfx	r4, r4, #10, #1
		props |= BT_HCI_LE_ADV_PROP_LEGACY;
	}

	if (param->options & BT_LE_ADV_OPT_USE_TX_POWER) {
   2a110:	0459      	lsls	r1, r3, #17
	if (!(param->options & BT_LE_ADV_OPT_EXT_ADV)) {
   2a112:	ea4f 1404 	mov.w	r4, r4, lsl #4
		props |= BT_HCI_LE_ADV_PROP_TX_POWER;
   2a116:	bf48      	it	mi
   2a118:	f044 0440 	orrmi.w	r4, r4, #64	; 0x40
	}

	if (param->options & BT_LE_ADV_OPT_ANONYMOUS) {
   2a11c:	049a      	lsls	r2, r3, #18
		props |= BT_HCI_LE_ADV_PROP_ANON;
   2a11e:	bf44      	itt	mi
   2a120:	f044 0420 	orrmi.w	r4, r4, #32
   2a124:	b2a4      	uxthmi	r4, r4
	}

	if (param->options & BT_LE_ADV_OPT_NOTIFY_SCAN_REQ) {
   2a126:	05db      	lsls	r3, r3, #23
		cp->scan_req_notify_enable = BT_HCI_LE_ADV_SCAN_REQ_ENABLE;
   2a128:	bf44      	itt	mi
   2a12a:	2301      	movmi	r3, #1
   2a12c:	762b      	strbmi	r3, [r5, #24]
	}

	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   2a12e:	6873      	ldr	r3, [r6, #4]
   2a130:	f013 0f01 	tst.w	r3, #1
   2a134:	f403 7100 	and.w	r1, r3, #512	; 0x200
   2a138:	f000 808d 	beq.w	2a256 <le_ext_adv_param_set+0x20a>
		props |= BT_HCI_LE_ADV_PROP_CONN;
   2a13c:	f044 0201 	orr.w	r2, r4, #1
   2a140:	b292      	uxth	r2, r2
		if (!dir_adv && !(param->options & BT_LE_ADV_OPT_EXT_ADV)) {
   2a142:	f1ba 0f00 	cmp.w	sl, #0
   2a146:	d070      	beq.n	2a22a <le_ext_adv_param_set+0x1de>
			 */
			props |= BT_HCI_LE_ADV_PROP_SCAN;
		}
	}

	if ((param->options & BT_LE_ADV_OPT_SCANNABLE) || has_scan_data ||
   2a148:	b911      	cbnz	r1, 2a150 <le_ext_adv_param_set+0x104>
   2a14a:	f1bb 0f00 	cmp.w	fp, #0
   2a14e:	d067      	beq.n	2a220 <le_ext_adv_param_set+0x1d4>
	    (name_type == ADV_NAME_TYPE_SD)) {
		props |= BT_HCI_LE_ADV_PROP_SCAN;
   2a150:	f044 0403 	orr.w	r4, r4, #3
   2a154:	b2a4      	uxth	r4, r4

	scannable = !!(props & BT_HCI_LE_ADV_PROP_SCAN);

	if (dir_adv) {
		props |= BT_HCI_LE_ADV_PROP_DIRECT;
		if (!(param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY)) {
   2a156:	06db      	lsls	r3, r3, #27
			props |= BT_HCI_LE_ADV_PROP_HI_DC_CONN;
		}

		bt_addr_le_copy(&cp->peer_addr, param->peer);
   2a158:	6931      	ldr	r1, [r6, #16]
   2a15a:	f105 000b 	add.w	r0, r5, #11
		props |= BT_HCI_LE_ADV_PROP_DIRECT;
   2a15e:	bf4c      	ite	mi
   2a160:	f044 0b04 	orrmi.w	fp, r4, #4
			props |= BT_HCI_LE_ADV_PROP_HI_DC_CONN;
   2a164:	f044 0b0c 	orrpl.w	fp, r4, #12
		bt_addr_le_copy(&cp->peer_addr, param->peer);
   2a168:	f00f fb15 	bl	39796 <bt_addr_le_copy>
			props |= BT_HCI_LE_ADV_PROP_HI_DC_CONN;
   2a16c:	fa1f fb8b 	uxth.w	fp, fp
		bt_addr_le_copy(&cp->peer_addr, param->peer);
   2a170:	46a2      	mov	sl, r4
   2a172:	465c      	mov	r4, fp
	}

	cp->sid = param->sid;
   2a174:	7873      	ldrb	r3, [r6, #1]
   2a176:	75eb      	strb	r3, [r5, #23]

	cp->props = sys_cpu_to_le16(props);
   2a178:	f8a5 4001 	strh.w	r4, [r5, #1]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EXT_ADV_PARAM, buf, &rsp);
   2a17c:	aa01      	add	r2, sp, #4
   2a17e:	4649      	mov	r1, r9
   2a180:	f242 0036 	movw	r0, #8246	; 0x2036
   2a184:	f7fe fb4c 	bl	28820 <bt_hci_cmd_send_sync>
	if (err) {
   2a188:	4604      	mov	r4, r0
   2a18a:	2800      	cmp	r0, #0
   2a18c:	d142      	bne.n	2a214 <le_ext_adv_param_set+0x1c8>
		return err;
	}

#if defined(CONFIG_BT_EXT_ADV)
	struct bt_hci_rp_le_set_ext_adv_param *rp = (void *)rsp->data;
   2a18e:	9801      	ldr	r0, [sp, #4]

	adv->tx_power = rp->tx_power;
   2a190:	6883      	ldr	r3, [r0, #8]
   2a192:	f993 3001 	ldrsb.w	r3, [r3, #1]
   2a196:	763b      	strb	r3, [r7, #24]
#endif /* defined(CONFIG_BT_EXT_ADV) */

	net_buf_unref(rsp);

	atomic_set_bit(adv->flags, BT_ADV_PARAMS_SET);
   2a198:	f107 0510 	add.w	r5, r7, #16
	net_buf_unref(rsp);
   2a19c:	f004 fb70 	bl	2e880 <net_buf_unref>
	atomic_set_bit(adv->flags, BT_ADV_PARAMS_SET);
   2a1a0:	2101      	movs	r1, #1
   2a1a2:	4628      	mov	r0, r5
   2a1a4:	f00f fb11 	bl	397ca <atomic_set_bit>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2a1a8:	f06f 0108 	mvn.w	r1, #8
   2a1ac:	f00f fae4 	bl	39778 <atomic_and>

	if (atomic_test_and_clear_bit(adv->flags, BT_ADV_RANDOM_ADDR_PENDING)) {
   2a1b0:	0700      	lsls	r0, r0, #28
   2a1b2:	d458      	bmi.n	2a266 <le_ext_adv_param_set+0x21a>
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2a1b4:	f46f 4180 	mvn.w	r1, #16384	; 0x4000
   2a1b8:	4628      	mov	r0, r5
   2a1ba:	f00f fadd 	bl	39778 <atomic_and>
	}

	/* Flag only used by bt_le_adv_start API. */
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, false);

	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_AD,
   2a1be:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
   2a1c2:	425a      	negs	r2, r3
   2a1c4:	415a      	adcs	r2, r3
   2a1c6:	2108      	movs	r1, #8
   2a1c8:	4628      	mov	r0, r5
   2a1ca:	f00f fae7 	bl	3979c <atomic_set_bit_to>
			  name_type == ADV_NAME_TYPE_AD);

	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_SD,
   2a1ce:	f1a8 0102 	sub.w	r1, r8, #2
   2a1d2:	424a      	negs	r2, r1
   2a1d4:	414a      	adcs	r2, r1
   2a1d6:	4628      	mov	r0, r5
   2a1d8:	2109      	movs	r1, #9
   2a1da:	f00f fadf 	bl	3979c <atomic_set_bit_to>
			  name_type == ADV_NAME_TYPE_SD);

	atomic_set_bit_to(adv->flags, BT_ADV_CONNECTABLE,
   2a1de:	6872      	ldr	r2, [r6, #4]
   2a1e0:	210a      	movs	r1, #10
   2a1e2:	f002 0201 	and.w	r2, r2, #1
   2a1e6:	4628      	mov	r0, r5
   2a1e8:	f00f fad8 	bl	3979c <atomic_set_bit_to>
			  param->options & BT_LE_ADV_OPT_CONNECTABLE);

	atomic_set_bit_to(adv->flags, BT_ADV_SCANNABLE, scannable);
   2a1ec:	f3ca 0240 	ubfx	r2, sl, #1, #1
   2a1f0:	210b      	movs	r1, #11
   2a1f2:	4628      	mov	r0, r5
   2a1f4:	f00f fad2 	bl	3979c <atomic_set_bit_to>

	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
   2a1f8:	6872      	ldr	r2, [r6, #4]
   2a1fa:	210d      	movs	r1, #13
   2a1fc:	f3c2 0280 	ubfx	r2, r2, #2, #1
   2a200:	4628      	mov	r0, r5
   2a202:	f00f facb 	bl	3979c <atomic_set_bit_to>
			  param->options & BT_LE_ADV_OPT_USE_IDENTITY);

	atomic_set_bit_to(adv->flags, BT_ADV_EXT_ADV,
   2a206:	6872      	ldr	r2, [r6, #4]
   2a208:	210c      	movs	r1, #12
   2a20a:	f3c2 2280 	ubfx	r2, r2, #10, #1
   2a20e:	4628      	mov	r0, r5
   2a210:	f00f fac4 	bl	3979c <atomic_set_bit_to>
			  param->options & BT_LE_ADV_OPT_EXT_ADV);

	return 0;
}
   2a214:	4620      	mov	r0, r4
   2a216:	b003      	add	sp, #12
   2a218:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
   2a21c:	4917      	ldr	r1, [pc, #92]	; (2a27c <le_ext_adv_param_set+0x230>)
   2a21e:	e745      	b.n	2a0ac <le_ext_adv_param_set+0x60>
	if ((param->options & BT_LE_ADV_OPT_SCANNABLE) || has_scan_data ||
   2a220:	f1b8 0f02 	cmp.w	r8, #2
   2a224:	d094      	beq.n	2a150 <le_ext_adv_param_set+0x104>
		props |= BT_HCI_LE_ADV_PROP_CONN;
   2a226:	4614      	mov	r4, r2
   2a228:	e795      	b.n	2a156 <le_ext_adv_param_set+0x10a>
		if (!dir_adv && !(param->options & BT_LE_ADV_OPT_EXT_ADV)) {
   2a22a:	0558      	lsls	r0, r3, #21
   2a22c:	d40d      	bmi.n	2a24a <le_ext_adv_param_set+0x1fe>
	if ((param->options & BT_LE_ADV_OPT_SCANNABLE) || has_scan_data ||
   2a22e:	f044 0403 	orr.w	r4, r4, #3
		props |= BT_HCI_LE_ADV_PROP_SCAN;
   2a232:	b2a4      	uxth	r4, r4
	if ((param->options & BT_LE_ADV_OPT_SCANNABLE) || has_scan_data ||
   2a234:	b969      	cbnz	r1, 2a252 <le_ext_adv_param_set+0x206>
   2a236:	f1bb 0f00 	cmp.w	fp, #0
   2a23a:	d10e      	bne.n	2a25a <le_ext_adv_param_set+0x20e>
   2a23c:	f1b8 0f02 	cmp.w	r8, #2
   2a240:	d00b      	beq.n	2a25a <le_ext_adv_param_set+0x20e>
	if (dir_adv) {
   2a242:	f1ba 0f00 	cmp.w	sl, #0
   2a246:	d186      	bne.n	2a156 <le_ext_adv_param_set+0x10a>
   2a248:	e003      	b.n	2a252 <le_ext_adv_param_set+0x206>
	if ((param->options & BT_LE_ADV_OPT_SCANNABLE) || has_scan_data ||
   2a24a:	b151      	cbz	r1, 2a262 <le_ext_adv_param_set+0x216>
		props |= BT_HCI_LE_ADV_PROP_SCAN;
   2a24c:	f044 0403 	orr.w	r4, r4, #3
   2a250:	b2a4      	uxth	r4, r4
	if (dir_adv) {
   2a252:	46a2      	mov	sl, r4
   2a254:	e78e      	b.n	2a174 <le_ext_adv_param_set+0x128>
	if ((param->options & BT_LE_ADV_OPT_SCANNABLE) || has_scan_data ||
   2a256:	2900      	cmp	r1, #0
   2a258:	d0ed      	beq.n	2a236 <le_ext_adv_param_set+0x1ea>
		props |= BT_HCI_LE_ADV_PROP_SCAN;
   2a25a:	f044 0402 	orr.w	r4, r4, #2
   2a25e:	b2a4      	uxth	r4, r4
   2a260:	e7ef      	b.n	2a242 <le_ext_adv_param_set+0x1f6>
		props |= BT_HCI_LE_ADV_PROP_CONN;
   2a262:	4614      	mov	r4, r2
   2a264:	e7e7      	b.n	2a236 <le_ext_adv_param_set+0x1ea>
		err = bt_id_set_adv_random_addr(adv, &adv->random_addr.a);
   2a266:	1cf9      	adds	r1, r7, #3
   2a268:	4638      	mov	r0, r7
   2a26a:	f00f f9fa 	bl	39662 <bt_id_set_adv_random_addr>
		if (err) {
   2a26e:	2800      	cmp	r0, #0
   2a270:	d0a0      	beq.n	2a1b4 <le_ext_adv_param_set+0x168>
   2a272:	4604      	mov	r4, r0
   2a274:	e7ce      	b.n	2a214 <le_ext_adv_param_set+0x1c8>
		return -ENOBUFS;
   2a276:	f06f 0468 	mvn.w	r4, #104	; 0x68
   2a27a:	e7cb      	b.n	2a214 <le_ext_adv_param_set+0x1c8>
   2a27c:	0003dc18 	.word	0x0003dc18

0002a280 <bt_le_adv_delete_legacy>:
{
   2a280:	b510      	push	{r4, lr}
	if (bt_dev.adv) {
   2a282:	4c05      	ldr	r4, [pc, #20]	; (2a298 <bt_le_adv_delete_legacy+0x18>)
   2a284:	69a0      	ldr	r0, [r4, #24]
   2a286:	b130      	cbz	r0, 2a296 <bt_le_adv_delete_legacy+0x16>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2a288:	f06f 0101 	mvn.w	r1, #1
   2a28c:	3010      	adds	r0, #16
   2a28e:	f00f fa73 	bl	39778 <atomic_and>
		bt_dev.adv = NULL;
   2a292:	2300      	movs	r3, #0
   2a294:	61a3      	str	r3, [r4, #24]
}
   2a296:	bd10      	pop	{r4, pc}
   2a298:	20000400 	.word	0x20000400

0002a29c <bt_le_adv_resume>:
	return 0;
}

#if defined(CONFIG_BT_PERIPHERAL)
void bt_le_adv_resume(void)
{
   2a29c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	return bt_dev.adv;
   2a29e:	4b1f      	ldr	r3, [pc, #124]	; (2a31c <bt_le_adv_resume+0x80>)
   2a2a0:	699e      	ldr	r6, [r3, #24]
	struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
	struct bt_conn *conn;
	bool persist_paused = false;
	int err;

	if (!adv) {
   2a2a2:	b3c6      	cbz	r6, 2a316 <bt_le_adv_resume+0x7a>
		BT_DBG("No valid legacy adv");
		return;
	}

	if (!(atomic_test_bit(adv->flags, BT_ADV_PERSIST) &&
   2a2a4:	f106 0410 	add.w	r4, r6, #16
   2a2a8:	210e      	movs	r1, #14
   2a2aa:	4620      	mov	r0, r4
   2a2ac:	f00f fa5b 	bl	39766 <atomic_test_bit>
   2a2b0:	b388      	cbz	r0, 2a316 <bt_le_adv_resume+0x7a>
	      !atomic_test_bit(adv->flags, BT_ADV_ENABLED))) {
   2a2b2:	2107      	movs	r1, #7
   2a2b4:	4620      	mov	r0, r4
   2a2b6:	f00f fa56 	bl	39766 <atomic_test_bit>
	if (!(atomic_test_bit(adv->flags, BT_ADV_PERSIST) &&
   2a2ba:	bb60      	cbnz	r0, 2a316 <bt_le_adv_resume+0x7a>
		return;
	}

	if (!atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
   2a2bc:	210a      	movs	r1, #10
   2a2be:	4620      	mov	r0, r4
   2a2c0:	f00f fa51 	bl	39766 <atomic_test_bit>
   2a2c4:	b338      	cbz	r0, 2a316 <bt_le_adv_resume+0x7a>
		return;
	}

	err = le_adv_start_add_conn(adv, &conn);
   2a2c6:	a901      	add	r1, sp, #4
   2a2c8:	4630      	mov	r0, r6
   2a2ca:	f7ff fd15 	bl	29cf8 <le_adv_start_add_conn>
	if (err) {
   2a2ce:	4605      	mov	r5, r0
   2a2d0:	bb08      	cbnz	r0, 2a316 <bt_le_adv_resume+0x7a>
	if (IS_ENABLED(CONFIG_BT_PRIVACY) &&
	    !atomic_test_bit(adv->flags, BT_ADV_USE_IDENTITY)) {
		bt_id_set_adv_private_addr(adv);
	}

	err = bt_le_adv_set_enable(adv, true);
   2a2d2:	4630      	mov	r0, r6
   2a2d4:	2101      	movs	r1, #1
   2a2d6:	f00f fb67 	bl	399a8 <bt_le_adv_set_enable>
	}

	/* Since we don't give the application a reference to manage in
	 * this case, we need to release this reference here.
	 */
	bt_conn_unref(conn);
   2a2da:	9e01      	ldr	r6, [sp, #4]
	if (err) {
   2a2dc:	b928      	cbnz	r0, 2a2ea <bt_le_adv_resume+0x4e>
	bt_conn_unref(conn);
   2a2de:	4630      	mov	r0, r6
	if (persist_paused) {
		atomic_set_bit(adv->flags, BT_ADV_PERSIST);
	}
}
   2a2e0:	b002      	add	sp, #8
   2a2e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
   2a2e6:	f000 bd11 	b.w	2ad0c <bt_conn_unref>
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   2a2ea:	4629      	mov	r1, r5
   2a2ec:	4630      	mov	r0, r6
   2a2ee:	f000 fd45 	bl	2ad7c <bt_conn_set_state>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2a2f2:	f46f 4180 	mvn.w	r1, #16384	; 0x4000
   2a2f6:	4620      	mov	r0, r4
   2a2f8:	f00f fa3e 	bl	39778 <atomic_and>
   2a2fc:	4605      	mov	r5, r0
	bt_conn_unref(conn);
   2a2fe:	4630      	mov	r0, r6
   2a300:	f000 fd04 	bl	2ad0c <bt_conn_unref>
	if (persist_paused) {
   2a304:	046b      	lsls	r3, r5, #17
   2a306:	d506      	bpl.n	2a316 <bt_le_adv_resume+0x7a>
		atomic_set_bit(adv->flags, BT_ADV_PERSIST);
   2a308:	210e      	movs	r1, #14
   2a30a:	4620      	mov	r0, r4
}
   2a30c:	b002      	add	sp, #8
   2a30e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		atomic_set_bit(adv->flags, BT_ADV_PERSIST);
   2a312:	f00f ba5a 	b.w	397ca <atomic_set_bit>
}
   2a316:	b002      	add	sp, #8
   2a318:	bd70      	pop	{r4, r5, r6, pc}
   2a31a:	bf00      	nop
   2a31c:	20000400 	.word	0x20000400

0002a320 <bt_le_ext_adv_create>:
}

int bt_le_ext_adv_create(const struct bt_le_adv_param *param,
			 const struct bt_le_ext_adv_cb *cb,
			 struct bt_le_ext_adv **out_adv)
{
   2a320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2a322:	4b17      	ldr	r3, [pc, #92]	; (2a380 <bt_le_ext_adv_create+0x60>)
   2a324:	f3bf 8f5b 	dmb	ish
   2a328:	681b      	ldr	r3, [r3, #0]
   2a32a:	f3bf 8f5b 	dmb	ish
	struct bt_le_ext_adv *adv;
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   2a32e:	075b      	lsls	r3, r3, #29
{
   2a330:	4604      	mov	r4, r0
   2a332:	460f      	mov	r7, r1
   2a334:	4616      	mov	r6, r2
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   2a336:	d519      	bpl.n	2a36c <bt_le_ext_adv_create+0x4c>
		return -EAGAIN;
	}

	if (!valid_adv_ext_param(param)) {
   2a338:	f7ff fc8e 	bl	29c58 <valid_adv_ext_param>
   2a33c:	b1c8      	cbz	r0, 2a372 <bt_le_ext_adv_create+0x52>
		return -EINVAL;
	}

	adv = adv_new();
   2a33e:	f7ff fc65 	bl	29c0c <adv_new>
	if (!adv) {
   2a342:	4605      	mov	r5, r0
   2a344:	b1c0      	cbz	r0, 2a378 <bt_le_ext_adv_create+0x58>
		return -ENOMEM;
	}

	adv->id = param->id;
   2a346:	7823      	ldrb	r3, [r4, #0]
   2a348:	7003      	strb	r3, [r0, #0]
	adv->cb = cb;

	err = le_ext_adv_param_set(adv, param, false);
   2a34a:	4621      	mov	r1, r4
	adv->cb = cb;
   2a34c:	6147      	str	r7, [r0, #20]
	err = le_ext_adv_param_set(adv, param, false);
   2a34e:	2200      	movs	r2, #0
   2a350:	f7ff fe7c 	bl	2a04c <le_ext_adv_param_set>
	if (err) {
   2a354:	4604      	mov	r4, r0
   2a356:	b138      	cbz	r0, 2a368 <bt_le_ext_adv_create+0x48>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2a358:	f06f 0101 	mvn.w	r1, #1
   2a35c:	f105 0010 	add.w	r0, r5, #16
   2a360:	f00f fa0a 	bl	39778 <atomic_and>
		return err;
	}

	*out_adv = adv;
	return 0;
}
   2a364:	4620      	mov	r0, r4
   2a366:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	*out_adv = adv;
   2a368:	6035      	str	r5, [r6, #0]
	return 0;
   2a36a:	e7fb      	b.n	2a364 <bt_le_ext_adv_create+0x44>
		return -EAGAIN;
   2a36c:	f06f 040a 	mvn.w	r4, #10
   2a370:	e7f8      	b.n	2a364 <bt_le_ext_adv_create+0x44>
		return -EINVAL;
   2a372:	f06f 0415 	mvn.w	r4, #21
   2a376:	e7f5      	b.n	2a364 <bt_le_ext_adv_create+0x44>
		return -ENOMEM;
   2a378:	f06f 040b 	mvn.w	r4, #11
   2a37c:	e7f2      	b.n	2a364 <bt_le_ext_adv_create+0x44>
   2a37e:	bf00      	nop
   2a380:	200004a8 	.word	0x200004a8

0002a384 <bt_le_ext_adv_start>:
	return le_ext_adv_param_set(adv, param, false);
}

int bt_le_ext_adv_start(struct bt_le_ext_adv *adv,
			struct bt_le_ext_adv_start_param *param)
{
   2a384:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_conn *conn = NULL;
	int err;

	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   2a386:	f100 0710 	add.w	r7, r0, #16
{
   2a38a:	b08b      	sub	sp, #44	; 0x2c
   2a38c:	4605      	mov	r5, r0
   2a38e:	460e      	mov	r6, r1
	struct bt_conn *conn = NULL;
   2a390:	2300      	movs	r3, #0
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   2a392:	2107      	movs	r1, #7
   2a394:	4638      	mov	r0, r7
	struct bt_conn *conn = NULL;
   2a396:	9303      	str	r3, [sp, #12]
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   2a398:	f00f f9e5 	bl	39766 <atomic_test_bit>
   2a39c:	2800      	cmp	r0, #0
   2a39e:	d15f      	bne.n	2a460 <bt_le_ext_adv_start+0xdc>
		return -EALREADY;
	}

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
	    atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
   2a3a0:	210a      	movs	r1, #10
   2a3a2:	4638      	mov	r0, r7
   2a3a4:	f00f f9df 	bl	39766 <atomic_test_bit>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   2a3a8:	2800      	cmp	r0, #0
   2a3aa:	d142      	bne.n	2a432 <bt_le_ext_adv_start+0xae>
		if (err) {
			return err;
		}
	}

	atomic_set_bit_to(adv->flags, BT_ADV_LIMITED, param &&
   2a3ac:	2e00      	cmp	r6, #0
   2a3ae:	d14a      	bne.n	2a446 <bt_le_ext_adv_start+0xc2>
   2a3b0:	4632      	mov	r2, r6
   2a3b2:	2106      	movs	r1, #6
   2a3b4:	4638      	mov	r0, r7
   2a3b6:	f00f f9f1 	bl	3979c <atomic_set_bit_to>
			  (param->timeout > 0 || param->num_events > 0));

	if (atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
   2a3ba:	210a      	movs	r1, #10
   2a3bc:	4638      	mov	r0, r7
   2a3be:	f00f f9d2 	bl	39766 <atomic_test_bit>
   2a3c2:	b938      	cbnz	r0, 2a3d4 <bt_le_ext_adv_start+0x50>
		if (IS_ENABLED(CONFIG_BT_PRIVACY) &&
		    !atomic_test_bit(adv->flags, BT_ADV_USE_IDENTITY)) {
			bt_id_set_adv_private_addr(adv);
		}
	} else {
		if (!atomic_test_bit(adv->flags, BT_ADV_USE_IDENTITY)) {
   2a3c4:	210d      	movs	r1, #13
   2a3c6:	4638      	mov	r0, r7
   2a3c8:	f00f f9cd 	bl	39766 <atomic_test_bit>
   2a3cc:	b910      	cbnz	r0, 2a3d4 <bt_le_ext_adv_start+0x50>
			bt_id_set_adv_private_addr(adv);
   2a3ce:	4628      	mov	r0, r5
   2a3d0:	f00f f995 	bl	396fe <bt_id_set_adv_private_addr>
		}
	}

	if (get_adv_name_type(adv) != ADV_NAME_TYPE_NONE &&
   2a3d4:	4628      	mov	r0, r5
   2a3d6:	f00f fa85 	bl	398e4 <get_adv_name_type>
   2a3da:	b158      	cbz	r0, 2a3f4 <bt_le_ext_adv_start+0x70>
	    !atomic_test_bit(adv->flags, BT_ADV_DATA_SET)) {
   2a3dc:	2102      	movs	r1, #2
   2a3de:	4638      	mov	r0, r7
   2a3e0:	f00f f9c1 	bl	39766 <atomic_test_bit>
	if (get_adv_name_type(adv) != ADV_NAME_TYPE_NONE &&
   2a3e4:	4603      	mov	r3, r0
   2a3e6:	b928      	cbnz	r0, 2a3f4 <bt_le_ext_adv_start+0x70>
		/* Set the advertiser name */
		bt_le_ext_adv_set_data(adv, NULL, 0, NULL, 0);
   2a3e8:	9000      	str	r0, [sp, #0]
   2a3ea:	4602      	mov	r2, r0
   2a3ec:	4601      	mov	r1, r0
   2a3ee:	4628      	mov	r0, r5
   2a3f0:	f00f fae0 	bl	399b4 <bt_le_ext_adv_set_data>
	}

	err = bt_le_adv_set_enable_ext(adv, true, param);
   2a3f4:	4632      	mov	r2, r6
   2a3f6:	2101      	movs	r1, #1
   2a3f8:	4628      	mov	r0, r5
   2a3fa:	f00f fa93 	bl	39924 <bt_le_adv_set_enable_ext>
	if (err) {
   2a3fe:	4604      	mov	r4, r0
   2a400:	b350      	cbz	r0, 2a458 <bt_le_ext_adv_start+0xd4>
		BT_ERR("Failed to start advertiser");
   2a402:	4819      	ldr	r0, [pc, #100]	; (2a468 <bt_le_ext_adv_start+0xe4>)
   2a404:	6803      	ldr	r3, [r0, #0]
   2a406:	075b      	lsls	r3, r3, #29
   2a408:	d009      	beq.n	2a41e <bt_le_ext_adv_start+0x9a>
   2a40a:	4b18      	ldr	r3, [pc, #96]	; (2a46c <bt_le_ext_adv_start+0xe8>)
   2a40c:	9309      	str	r3, [sp, #36]	; 0x24
   2a40e:	2302      	movs	r3, #2
   2a410:	9308      	str	r3, [sp, #32]
   2a412:	2300      	movs	r3, #0
   2a414:	aa08      	add	r2, sp, #32
   2a416:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   2a41a:	f7fb fec7 	bl	261ac <z_impl_z_log_msg_static_create>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   2a41e:	9d03      	ldr	r5, [sp, #12]
   2a420:	b175      	cbz	r5, 2a440 <bt_le_ext_adv_start+0xbc>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   2a422:	4628      	mov	r0, r5
   2a424:	2100      	movs	r1, #0
   2a426:	f000 fca9 	bl	2ad7c <bt_conn_set_state>
			bt_conn_unref(conn);
   2a42a:	4628      	mov	r0, r5
		/* If undirected connectable advertiser we have created a
		 * connection object that we don't yet give to the application.
		 * Since we don't give the application a reference to manage in
		 * this case, we need to release this reference here
		 */
		bt_conn_unref(conn);
   2a42c:	f000 fc6e 	bl	2ad0c <bt_conn_unref>
   2a430:	e006      	b.n	2a440 <bt_le_ext_adv_start+0xbc>
		err = le_adv_start_add_conn(adv, &conn);
   2a432:	a903      	add	r1, sp, #12
   2a434:	4628      	mov	r0, r5
   2a436:	f7ff fc5f 	bl	29cf8 <le_adv_start_add_conn>
		if (err) {
   2a43a:	4604      	mov	r4, r0
   2a43c:	2800      	cmp	r0, #0
   2a43e:	d0b5      	beq.n	2a3ac <bt_le_ext_adv_start+0x28>
	}

	return 0;
}
   2a440:	4620      	mov	r0, r4
   2a442:	b00b      	add	sp, #44	; 0x2c
   2a444:	bdf0      	pop	{r4, r5, r6, r7, pc}
	atomic_set_bit_to(adv->flags, BT_ADV_LIMITED, param &&
   2a446:	8833      	ldrh	r3, [r6, #0]
   2a448:	b923      	cbnz	r3, 2a454 <bt_le_ext_adv_start+0xd0>
			  (param->timeout > 0 || param->num_events > 0));
   2a44a:	78b2      	ldrb	r2, [r6, #2]
   2a44c:	3a00      	subs	r2, #0
   2a44e:	bf18      	it	ne
   2a450:	2201      	movne	r2, #1
   2a452:	e7ae      	b.n	2a3b2 <bt_le_ext_adv_start+0x2e>
	atomic_set_bit_to(adv->flags, BT_ADV_LIMITED, param &&
   2a454:	2201      	movs	r2, #1
   2a456:	e7ac      	b.n	2a3b2 <bt_le_ext_adv_start+0x2e>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   2a458:	9803      	ldr	r0, [sp, #12]
   2a45a:	2800      	cmp	r0, #0
   2a45c:	d1e6      	bne.n	2a42c <bt_le_ext_adv_start+0xa8>
   2a45e:	e7ef      	b.n	2a440 <bt_le_ext_adv_start+0xbc>
		return -EALREADY;
   2a460:	f06f 0477 	mvn.w	r4, #119	; 0x77
   2a464:	e7ec      	b.n	2a440 <bt_le_ext_adv_start+0xbc>
   2a466:	bf00      	nop
   2a468:	20000a74 	.word	0x20000a74
   2a46c:	0003e2b9 	.word	0x0003e2b9

0002a470 <bt_hci_le_adv_set_terminated>:
#endif /* CONFIG_BT_PER_ADV */

#if defined(CONFIG_BT_EXT_ADV)
#if defined(CONFIG_BT_BROADCASTER)
void bt_hci_le_adv_set_terminated(struct net_buf *buf)
{
   2a470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint16_t conn_handle;
#if defined(CONFIG_BT_CONN) && (CONFIG_BT_EXT_ADV_MAX_ADV_SET > 1)
	bool was_adv_enabled;
#endif

	evt = (void *)buf->data;
   2a474:	6887      	ldr	r7, [r0, #8]
	adv = bt_adv_lookup_handle(evt->adv_handle);
   2a476:	f897 a001 	ldrb.w	sl, [r7, #1]
	if (handle < ARRAY_SIZE(adv_pool) &&
   2a47a:	f1ba 0f01 	cmp.w	sl, #1
{
   2a47e:	b087      	sub	sp, #28
	if (handle < ARRAY_SIZE(adv_pool) &&
   2a480:	d858      	bhi.n	2a534 <bt_hci_le_adv_set_terminated+0xc4>
   2a482:	eb0a 048a 	add.w	r4, sl, sl, lsl #2
	    atomic_test_bit(adv_pool[handle].flags, BT_ADV_CREATED)) {
   2a486:	f8df 813c 	ldr.w	r8, [pc, #316]	; 2a5c4 <bt_hci_le_adv_set_terminated+0x154>
   2a48a:	0124      	lsls	r4, r4, #4
   2a48c:	f104 0510 	add.w	r5, r4, #16
   2a490:	4445      	add	r5, r8
   2a492:	2100      	movs	r1, #0
   2a494:	4628      	mov	r0, r5
   2a496:	f00f f966 	bl	39766 <atomic_test_bit>
	if (handle < ARRAY_SIZE(adv_pool) &&
   2a49a:	2800      	cmp	r0, #0
   2a49c:	d04a      	beq.n	2a534 <bt_hci_le_adv_set_terminated+0xc4>
		return &adv_pool[handle];
   2a49e:	4444      	add	r4, r8
	if (!adv) {
		BT_ERR("No valid adv");
		return;
	}

	(void)bt_le_lim_adv_cancel_timeout(adv);
   2a4a0:	4620      	mov	r0, r4
	conn_handle = sys_le16_to_cpu(evt->conn_handle);
   2a4a2:	f8b7 b002 	ldrh.w	fp, [r7, #2]
#endif

	atomic_clear_bit(adv->flags, BT_ADV_ENABLED);

#if defined(CONFIG_BT_CONN) && (CONFIG_BT_EXT_ADV_MAX_ADV_SET > 1)
	bt_dev.adv_conn_id = adv->id;
   2a4a6:	4e48      	ldr	r6, [pc, #288]	; (2a5c8 <bt_hci_le_adv_set_terminated+0x158>)
	(void)bt_le_lim_adv_cancel_timeout(adv);
   2a4a8:	f00f fa81 	bl	399ae <bt_le_lim_adv_cancel_timeout>
	was_adv_enabled = atomic_test_bit(adv->flags, BT_ADV_ENABLED);
   2a4ac:	2107      	movs	r1, #7
   2a4ae:	4628      	mov	r0, r5
   2a4b0:	f00f f959 	bl	39766 <atomic_test_bit>
   2a4b4:	f06f 0180 	mvn.w	r1, #128	; 0x80
   2a4b8:	4681      	mov	r9, r0
   2a4ba:	4628      	mov	r0, r5
   2a4bc:	f00f f95c 	bl	39778 <atomic_and>
	bt_dev.adv_conn_id = adv->id;
   2a4c0:	2350      	movs	r3, #80	; 0x50
   2a4c2:	fb03 f30a 	mul.w	r3, r3, sl
   2a4c6:	f818 3003 	ldrb.w	r3, [r8, r3]
   2a4ca:	f886 3042 	strb.w	r3, [r6, #66]	; 0x42
	for (int i = 0; i < ARRAY_SIZE(bt_dev.cached_conn_complete); i++) {
   2a4ce:	2300      	movs	r3, #0
		if (bt_dev.cached_conn_complete[i].valid &&
   2a4d0:	7f31      	ldrb	r1, [r6, #28]
		    bt_dev.cached_conn_complete[i].evt.handle == evt->conn_handle) {
   2a4d2:	8bf2      	ldrh	r2, [r6, #30]
	for (int i = 0; i < ARRAY_SIZE(bt_dev.cached_conn_complete); i++) {
   2a4d4:	2b00      	cmp	r3, #0
   2a4d6:	d03e      	beq.n	2a556 <bt_hci_le_adv_set_terminated+0xe6>
			bt_dev.cached_conn_complete[i].valid = false;
		}
	}
#endif

	if (evt->status && IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   2a4d8:	783b      	ldrb	r3, [r7, #0]
   2a4da:	2b00      	cmp	r3, #0
   2a4dc:	d14a      	bne.n	2a574 <bt_hci_le_adv_set_terminated+0x104>
		 */
		le_adv_stop_free_conn(adv, adv == bt_dev.adv ? evt->status : 0);
	}

	if (IS_ENABLED(CONFIG_BT_CONN) && !evt->status) {
		struct bt_conn *conn = bt_conn_lookup_handle(conn_handle);
   2a4de:	4658      	mov	r0, fp
   2a4e0:	f000 fc44 	bl	2ad6c <bt_conn_lookup_handle>

		if (conn) {
   2a4e4:	4681      	mov	r9, r0
   2a4e6:	2800      	cmp	r0, #0
   2a4e8:	d155      	bne.n	2a596 <bt_hci_le_adv_set_terminated+0x126>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2a4ea:	f06f 0140 	mvn.w	r1, #64	; 0x40
   2a4ee:	4628      	mov	r0, r5
   2a4f0:	f00f f942 	bl	39778 <atomic_and>

			bt_conn_unref(conn);
		}
	}

	if (atomic_test_and_clear_bit(adv->flags, BT_ADV_LIMITED)) {
   2a4f4:	0643      	lsls	r3, r0, #25
   2a4f6:	d510      	bpl.n	2a51a <bt_hci_le_adv_set_terminated+0xaa>
		bt_id_adv_limited_stopped(adv);
   2a4f8:	4620      	mov	r0, r4
   2a4fa:	f00f f917 	bl	3972c <bt_id_adv_limited_stopped>

#if defined(CONFIG_BT_SMP)
		bt_id_pending_keys_update();
#endif

		if (adv->cb && adv->cb->sent) {
   2a4fe:	2350      	movs	r3, #80	; 0x50
   2a500:	fb03 880a 	mla	r8, r3, sl, r8
   2a504:	f8d8 3014 	ldr.w	r3, [r8, #20]
   2a508:	b13b      	cbz	r3, 2a51a <bt_hci_le_adv_set_terminated+0xaa>
   2a50a:	681b      	ldr	r3, [r3, #0]
   2a50c:	b12b      	cbz	r3, 2a51a <bt_hci_le_adv_set_terminated+0xaa>
			struct bt_le_ext_adv_sent_info info = {
   2a50e:	793a      	ldrb	r2, [r7, #4]
   2a510:	f88d 2000 	strb.w	r2, [sp]
				.num_sent = evt->num_completed_ext_adv_evts,
			};

			adv->cb->sent(adv, &info);
   2a514:	4669      	mov	r1, sp
   2a516:	4620      	mov	r0, r4
   2a518:	4798      	blx	r3
		}
	}

	if (!atomic_test_bit(adv->flags, BT_ADV_PERSIST) && adv == bt_dev.adv) {
   2a51a:	210e      	movs	r1, #14
   2a51c:	4628      	mov	r0, r5
   2a51e:	f00f f922 	bl	39766 <atomic_test_bit>
   2a522:	b9a8      	cbnz	r0, 2a550 <bt_hci_le_adv_set_terminated+0xe0>
   2a524:	69b3      	ldr	r3, [r6, #24]
   2a526:	42a3      	cmp	r3, r4
   2a528:	d112      	bne.n	2a550 <bt_hci_le_adv_set_terminated+0xe0>
		bt_le_adv_delete_legacy();
	}
}
   2a52a:	b007      	add	sp, #28
   2a52c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		bt_le_adv_delete_legacy();
   2a530:	f7ff bea6 	b.w	2a280 <bt_le_adv_delete_legacy>
		BT_ERR("No valid adv");
   2a534:	4825      	ldr	r0, [pc, #148]	; (2a5cc <bt_hci_le_adv_set_terminated+0x15c>)
   2a536:	6803      	ldr	r3, [r0, #0]
   2a538:	075a      	lsls	r2, r3, #29
   2a53a:	d009      	beq.n	2a550 <bt_hci_le_adv_set_terminated+0xe0>
   2a53c:	4b24      	ldr	r3, [pc, #144]	; (2a5d0 <bt_hci_le_adv_set_terminated+0x160>)
   2a53e:	9305      	str	r3, [sp, #20]
   2a540:	2302      	movs	r3, #2
   2a542:	9304      	str	r3, [sp, #16]
   2a544:	2300      	movs	r3, #0
   2a546:	aa04      	add	r2, sp, #16
   2a548:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   2a54c:	f7fb fe2e 	bl	261ac <z_impl_z_log_msg_static_create>
}
   2a550:	b007      	add	sp, #28
   2a552:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (bt_dev.cached_conn_complete[i].valid &&
   2a556:	2900      	cmp	r1, #0
   2a558:	d0be      	beq.n	2a4d8 <bt_hci_le_adv_set_terminated+0x68>
   2a55a:	887b      	ldrh	r3, [r7, #2]
   2a55c:	4293      	cmp	r3, r2
   2a55e:	d1bb      	bne.n	2a4d8 <bt_hci_le_adv_set_terminated+0x68>
			if (was_adv_enabled) {
   2a560:	f1b9 0f00 	cmp.w	r9, #0
   2a564:	d002      	beq.n	2a56c <bt_hci_le_adv_set_terminated+0xfc>
				bt_hci_le_enh_conn_complete(&bt_dev.cached_conn_complete[i].evt);
   2a566:	481b      	ldr	r0, [pc, #108]	; (2a5d4 <bt_hci_le_adv_set_terminated+0x164>)
   2a568:	f7fe fa26 	bl	289b8 <bt_hci_le_enh_conn_complete>
			bt_dev.cached_conn_complete[i].valid = false;
   2a56c:	2300      	movs	r3, #0
   2a56e:	7733      	strb	r3, [r6, #28]
	for (int i = 0; i < ARRAY_SIZE(bt_dev.cached_conn_complete); i++) {
   2a570:	2301      	movs	r3, #1
   2a572:	e7ad      	b.n	2a4d0 <bt_hci_le_adv_set_terminated+0x60>
	    atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
   2a574:	210a      	movs	r1, #10
   2a576:	4628      	mov	r0, r5
   2a578:	f00f f8f5 	bl	39766 <atomic_test_bit>
	if (evt->status && IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   2a57c:	b138      	cbz	r0, 2a58e <bt_hci_le_adv_set_terminated+0x11e>
		le_adv_stop_free_conn(adv, adv == bt_dev.adv ? evt->status : 0);
   2a57e:	69b3      	ldr	r3, [r6, #24]
   2a580:	42a3      	cmp	r3, r4
   2a582:	bf0c      	ite	eq
   2a584:	7839      	ldrbeq	r1, [r7, #0]
   2a586:	2100      	movne	r1, #0
   2a588:	4620      	mov	r0, r4
   2a58a:	f7ff fb1b 	bl	29bc4 <le_adv_stop_free_conn>
	if (IS_ENABLED(CONFIG_BT_CONN) && !evt->status) {
   2a58e:	783b      	ldrb	r3, [r7, #0]
   2a590:	2b00      	cmp	r3, #0
   2a592:	d1aa      	bne.n	2a4ea <bt_hci_le_adv_set_terminated+0x7a>
   2a594:	e7a3      	b.n	2a4de <bt_hci_le_adv_set_terminated+0x6e>
					&bt_dev.id_addr[conn->id]);
   2a596:	7a01      	ldrb	r1, [r0, #8]
   2a598:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
				bt_addr_le_copy(&conn->le.resp_addr,
   2a59c:	4431      	add	r1, r6
   2a59e:	309e      	adds	r0, #158	; 0x9e
   2a5a0:	f00f f8f9 	bl	39796 <bt_addr_le_copy>
			if (adv->cb && adv->cb->connected) {
   2a5a4:	2350      	movs	r3, #80	; 0x50
   2a5a6:	fb03 830a 	mla	r3, r3, sl, r8
   2a5aa:	695b      	ldr	r3, [r3, #20]
   2a5ac:	b133      	cbz	r3, 2a5bc <bt_hci_le_adv_set_terminated+0x14c>
   2a5ae:	685b      	ldr	r3, [r3, #4]
   2a5b0:	b123      	cbz	r3, 2a5bc <bt_hci_le_adv_set_terminated+0x14c>
				struct bt_le_ext_adv_connected_info info = {
   2a5b2:	f8cd 9000 	str.w	r9, [sp]
				adv->cb->connected(adv, &info);
   2a5b6:	4669      	mov	r1, sp
   2a5b8:	4620      	mov	r0, r4
   2a5ba:	4798      	blx	r3
			bt_conn_unref(conn);
   2a5bc:	4648      	mov	r0, r9
   2a5be:	f000 fba5 	bl	2ad0c <bt_conn_unref>
   2a5c2:	e792      	b.n	2a4ea <bt_hci_le_adv_set_terminated+0x7a>
   2a5c4:	200026e0 	.word	0x200026e0
   2a5c8:	20000400 	.word	0x20000400
   2a5cc:	20000a74 	.word	0x20000a74
   2a5d0:	0003e2d4 	.word	0x0003e2d4
   2a5d4:	2000041d 	.word	0x2000041d

0002a5d8 <bt_hci_le_scan_req_received>:

void bt_hci_le_scan_req_received(struct net_buf *buf)
{
   2a5d8:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_scan_req_received *evt;
	struct bt_le_ext_adv *adv;

	evt = (void *)buf->data;
   2a5da:	6882      	ldr	r2, [r0, #8]
	adv = bt_adv_lookup_handle(evt->handle);
   2a5dc:	7814      	ldrb	r4, [r2, #0]
	if (handle < ARRAY_SIZE(adv_pool) &&
   2a5de:	2c01      	cmp	r4, #1
{
   2a5e0:	b089      	sub	sp, #36	; 0x24
	if (handle < ARRAY_SIZE(adv_pool) &&
   2a5e2:	d811      	bhi.n	2a608 <bt_hci_le_scan_req_received+0x30>
   2a5e4:	eb04 0684 	add.w	r6, r4, r4, lsl #2
	    atomic_test_bit(adv_pool[handle].flags, BT_ADV_CREATED)) {
   2a5e8:	4d20      	ldr	r5, [pc, #128]	; (2a66c <bt_hci_le_scan_req_received+0x94>)
   2a5ea:	0136      	lsls	r6, r6, #4
   2a5ec:	f106 0010 	add.w	r0, r6, #16
   2a5f0:	2100      	movs	r1, #0
   2a5f2:	4428      	add	r0, r5
   2a5f4:	f00f f8b7 	bl	39766 <atomic_test_bit>
	if (handle < ARRAY_SIZE(adv_pool) &&
   2a5f8:	b130      	cbz	r0, 2a608 <bt_hci_le_scan_req_received+0x30>
	if (!adv) {
		BT_ERR("No valid adv");
		return;
	}

	if (adv->cb && adv->cb->scanned) {
   2a5fa:	2350      	movs	r3, #80	; 0x50
   2a5fc:	4363      	muls	r3, r4
   2a5fe:	18e9      	adds	r1, r5, r3
   2a600:	6949      	ldr	r1, [r1, #20]
   2a602:	b981      	cbnz	r1, 2a626 <bt_hci_le_scan_req_received+0x4e>
		}

		info.addr = &id_addr;
		adv->cb->scanned(adv, &info);
	}
}
   2a604:	b009      	add	sp, #36	; 0x24
   2a606:	bdf0      	pop	{r4, r5, r6, r7, pc}
		BT_ERR("No valid adv");
   2a608:	4819      	ldr	r0, [pc, #100]	; (2a670 <bt_hci_le_scan_req_received+0x98>)
   2a60a:	6803      	ldr	r3, [r0, #0]
   2a60c:	075b      	lsls	r3, r3, #29
   2a60e:	d0f9      	beq.n	2a604 <bt_hci_le_scan_req_received+0x2c>
   2a610:	4b18      	ldr	r3, [pc, #96]	; (2a674 <bt_hci_le_scan_req_received+0x9c>)
   2a612:	9307      	str	r3, [sp, #28]
   2a614:	2302      	movs	r3, #2
   2a616:	9306      	str	r3, [sp, #24]
   2a618:	2300      	movs	r3, #0
   2a61a:	aa06      	add	r2, sp, #24
   2a61c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   2a620:	f7fb fdc4 	bl	261ac <z_impl_z_log_msg_static_create>
   2a624:	e7ee      	b.n	2a604 <bt_hci_le_scan_req_received+0x2c>
	if (adv->cb && adv->cb->scanned) {
   2a626:	6889      	ldr	r1, [r1, #8]
   2a628:	2900      	cmp	r1, #0
   2a62a:	d0eb      	beq.n	2a604 <bt_hci_le_scan_req_received+0x2c>
			bt_addr_le_copy(&id_addr, &evt->addr);
   2a62c:	1c51      	adds	r1, r2, #1
		if (evt->addr.type == BT_ADDR_LE_PUBLIC_ID ||
   2a62e:	7852      	ldrb	r2, [r2, #1]
   2a630:	3a02      	subs	r2, #2
   2a632:	2a01      	cmp	r2, #1
   2a634:	af02      	add	r7, sp, #8
   2a636:	d811      	bhi.n	2a65c <bt_hci_le_scan_req_received+0x84>
			bt_addr_le_copy(&id_addr, &evt->addr);
   2a638:	4638      	mov	r0, r7
   2a63a:	f00f f8ac 	bl	39796 <bt_addr_le_copy>
			id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   2a63e:	f89d 3008 	ldrb.w	r3, [sp, #8]
   2a642:	3b02      	subs	r3, #2
   2a644:	f88d 3008 	strb.w	r3, [sp, #8]
		adv->cb->scanned(adv, &info);
   2a648:	2350      	movs	r3, #80	; 0x50
   2a64a:	fb03 5404 	mla	r4, r3, r4, r5
		info.addr = &id_addr;
   2a64e:	9701      	str	r7, [sp, #4]
		adv->cb->scanned(adv, &info);
   2a650:	6963      	ldr	r3, [r4, #20]
   2a652:	a901      	add	r1, sp, #4
   2a654:	689b      	ldr	r3, [r3, #8]
   2a656:	19a8      	adds	r0, r5, r6
   2a658:	4798      	blx	r3
   2a65a:	e7d3      	b.n	2a604 <bt_hci_le_scan_req_received+0x2c>
			bt_addr_le_copy(&id_addr,
   2a65c:	5ce8      	ldrb	r0, [r5, r3]
   2a65e:	f00e fffb 	bl	39658 <bt_lookup_id_addr>
   2a662:	4601      	mov	r1, r0
   2a664:	4638      	mov	r0, r7
   2a666:	f00f f896 	bl	39796 <bt_addr_le_copy>
   2a66a:	e7ed      	b.n	2a648 <bt_hci_le_scan_req_received+0x70>
   2a66c:	200026e0 	.word	0x200026e0
   2a670:	20000a74 	.word	0x20000a74
   2a674:	0003e2d4 	.word	0x0003e2d4

0002a678 <notify_connected>:
		return -ENOTCONN;
	}
}

static void notify_connected(struct bt_conn *conn)
{
   2a678:	b570      	push	{r4, r5, r6, lr}
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
   2a67a:	4b11      	ldr	r3, [pc, #68]	; (2a6c0 <notify_connected+0x48>)
   2a67c:	681d      	ldr	r5, [r3, #0]
{
   2a67e:	4604      	mov	r4, r0
	for (cb = callback_list; cb; cb = cb->_next) {
   2a680:	b975      	cbnz	r5, 2a6a0 <notify_connected+0x28>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   2a682:	4d10      	ldr	r5, [pc, #64]	; (2a6c4 <notify_connected+0x4c>)
   2a684:	4e10      	ldr	r6, [pc, #64]	; (2a6c8 <notify_connected+0x50>)
   2a686:	42b5      	cmp	r5, r6
   2a688:	d918      	bls.n	2a6bc <notify_connected+0x44>
   2a68a:	4910      	ldr	r1, [pc, #64]	; (2a6cc <notify_connected+0x54>)
   2a68c:	4810      	ldr	r0, [pc, #64]	; (2a6d0 <notify_connected+0x58>)
   2a68e:	f44f 62ab 	mov.w	r2, #1368	; 0x558
   2a692:	f00e fa3e 	bl	38b12 <assert_print>
   2a696:	480d      	ldr	r0, [pc, #52]	; (2a6cc <notify_connected+0x54>)
   2a698:	f44f 61ab 	mov.w	r1, #1368	; 0x558
   2a69c:	f00e fa32 	bl	38b04 <assert_post_action>
		if (cb->connected) {
   2a6a0:	682b      	ldr	r3, [r5, #0]
   2a6a2:	b113      	cbz	r3, 2a6aa <notify_connected+0x32>
			cb->connected(conn, conn->err);
   2a6a4:	7a61      	ldrb	r1, [r4, #9]
   2a6a6:	4620      	mov	r0, r4
   2a6a8:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   2a6aa:	692d      	ldr	r5, [r5, #16]
   2a6ac:	e7e8      	b.n	2a680 <notify_connected+0x8>
		if (cb->connected) {
   2a6ae:	682b      	ldr	r3, [r5, #0]
   2a6b0:	b113      	cbz	r3, 2a6b8 <notify_connected+0x40>
			cb->connected(conn, conn->err);
   2a6b2:	7a61      	ldrb	r1, [r4, #9]
   2a6b4:	4620      	mov	r0, r4
   2a6b6:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   2a6b8:	3514      	adds	r5, #20
   2a6ba:	e7e4      	b.n	2a686 <notify_connected+0xe>
   2a6bc:	d3f7      	bcc.n	2a6ae <notify_connected+0x36>
		}
	}
}
   2a6be:	bd70      	pop	{r4, r5, r6, pc}
   2a6c0:	20002e58 	.word	0x20002e58
   2a6c4:	0003c47c 	.word	0x0003c47c
   2a6c8:	0003c47c 	.word	0x0003c47c
   2a6cc:	0003e2e8 	.word	0x0003e2e8
   2a6d0:	0003d1d7 	.word	0x0003d1d7

0002a6d4 <tx_notify>:
{
   2a6d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	k_fifo_put(&free_tx, tx);
   2a6d8:	4f15      	ldr	r7, [pc, #84]	; (2a730 <tx_notify+0x5c>)
{
   2a6da:	4604      	mov	r4, r0
	tx->cb = NULL;
   2a6dc:	f04f 0800 	mov.w	r8, #0
	__asm__ volatile(
   2a6e0:	f04f 0240 	mov.w	r2, #64	; 0x40
   2a6e4:	f3ef 8311 	mrs	r3, BASEPRI
   2a6e8:	f382 8812 	msr	BASEPRI_MAX, r2
   2a6ec:	f3bf 8f6f 	isb	sy
	return list->head;
   2a6f0:	6a21      	ldr	r1, [r4, #32]
		if (!sys_slist_is_empty(&conn->tx_complete)) {
   2a6f2:	b929      	cbnz	r1, 2a700 <tx_notify+0x2c>
	__asm__ volatile(
   2a6f4:	f383 8811 	msr	BASEPRI, r3
   2a6f8:	f3bf 8f6f 	isb	sy
}
   2a6fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2a700:	6a60      	ldr	r0, [r4, #36]	; 0x24
	return node->next;
   2a702:	680a      	ldr	r2, [r1, #0]
	list->head = node;
   2a704:	6222      	str	r2, [r4, #32]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2a706:	4281      	cmp	r1, r0
	list->tail = node;
   2a708:	bf08      	it	eq
   2a70a:	6262      	streq	r2, [r4, #36]	; 0x24
   2a70c:	f383 8811 	msr	BASEPRI, r3
   2a710:	f3bf 8f6f 	isb	sy
		user_data = tx->user_data;
   2a714:	e9d1 5601 	ldrd	r5, r6, [r1, #4]
	tx->pending_no_cb = 0U;
   2a718:	f8c1 800c 	str.w	r8, [r1, #12]
	tx->user_data = NULL;
   2a71c:	e9c1 8801 	strd	r8, r8, [r1, #4]
	k_fifo_put(&free_tx, tx);
   2a720:	4638      	mov	r0, r7
   2a722:	f011 fa9d 	bl	3bc60 <k_queue_append>
		cb(conn, user_data, 0);
   2a726:	2200      	movs	r2, #0
   2a728:	4631      	mov	r1, r6
   2a72a:	4620      	mov	r0, r4
   2a72c:	47a8      	blx	r5
	while (1) {
   2a72e:	e7d7      	b.n	2a6e0 <tx_notify+0xc>
   2a730:	20000bd0 	.word	0x20000bd0

0002a734 <conn_tx_destroy>:
{
   2a734:	b570      	push	{r4, r5, r6, lr}
   2a736:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(tx);
   2a738:	b941      	cbnz	r1, 2a74c <conn_tx_destroy+0x18>
   2a73a:	490d      	ldr	r1, [pc, #52]	; (2a770 <conn_tx_destroy+0x3c>)
   2a73c:	480d      	ldr	r0, [pc, #52]	; (2a774 <conn_tx_destroy+0x40>)
   2a73e:	2238      	movs	r2, #56	; 0x38
   2a740:	f00e f9e7 	bl	38b12 <assert_print>
   2a744:	480a      	ldr	r0, [pc, #40]	; (2a770 <conn_tx_destroy+0x3c>)
   2a746:	2138      	movs	r1, #56	; 0x38
   2a748:	f00e f9dc 	bl	38b04 <assert_post_action>
	void *user_data = tx->user_data;
   2a74c:	e9d1 5601 	ldrd	r5, r6, [r1, #4]
	tx->cb = NULL;
   2a750:	2200      	movs	r2, #0
	tx->user_data = NULL;
   2a752:	e9c1 2201 	strd	r2, r2, [r1, #4]
	tx->pending_no_cb = 0U;
   2a756:	60ca      	str	r2, [r1, #12]
	k_fifo_put(&free_tx, tx);
   2a758:	4807      	ldr	r0, [pc, #28]	; (2a778 <conn_tx_destroy+0x44>)
   2a75a:	f011 fa81 	bl	3bc60 <k_queue_append>
	cb(conn, user_data, -ESHUTDOWN);
   2a75e:	4631      	mov	r1, r6
   2a760:	4620      	mov	r0, r4
   2a762:	462b      	mov	r3, r5
   2a764:	f06f 026d 	mvn.w	r2, #109	; 0x6d
}
   2a768:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	cb(conn, user_data, -ESHUTDOWN);
   2a76c:	4718      	bx	r3
   2a76e:	bf00      	nop
   2a770:	0003e2e8 	.word	0x0003e2e8
   2a774:	0003d1d7 	.word	0x0003d1d7
   2a778:	20000bd0 	.word	0x20000bd0

0002a77c <send_frag>:
{
   2a77c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2a780:	4604      	mov	r4, r0
	struct bt_conn_tx *tx = tx_data(buf)->tx;
   2a782:	694d      	ldr	r5, [r1, #20]
{
   2a784:	af00      	add	r7, sp, #0
   2a786:	460e      	mov	r6, r1
   2a788:	4692      	mov	sl, r2
   2a78a:	4699      	mov	r9, r3
	return z_impl_k_sem_take(sem, timeout);
   2a78c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2a790:	4858      	ldr	r0, [pc, #352]	; (2a8f4 <send_frag+0x178>)
   2a792:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2a796:	f00b f841 	bl	3581c <z_impl_k_sem_take>
	if (conn->state != BT_CONN_CONNECTED) {
   2a79a:	7aa3      	ldrb	r3, [r4, #10]
   2a79c:	2b07      	cmp	r3, #7
   2a79e:	f040 809c 	bne.w	2a8da <send_frag+0x15e>
	__asm__ volatile(
   2a7a2:	f04f 0340 	mov.w	r3, #64	; 0x40
   2a7a6:	f3ef 8211 	mrs	r2, BASEPRI
   2a7aa:	f383 8812 	msr	BASEPRI_MAX, r3
   2a7ae:	f3bf 8f6f 	isb	sy
	if (tx) {
   2a7b2:	2d00      	cmp	r5, #0
   2a7b4:	d05c      	beq.n	2a870 <send_frag+0xf4>
	parent->next = child;
   2a7b6:	2300      	movs	r3, #0
   2a7b8:	602b      	str	r3, [r5, #0]
	return list->tail;
   2a7ba:	69a3      	ldr	r3, [r4, #24]
Z_GENLIST_APPEND(slist, snode)
   2a7bc:	2b00      	cmp	r3, #0
   2a7be:	d154      	bne.n	2a86a <send_frag+0xee>
	list->head = node;
   2a7c0:	e9c4 5505 	strd	r5, r5, [r4, #20]
	__asm__ volatile(
   2a7c4:	f382 8811 	msr	BASEPRI, r2
   2a7c8:	f3bf 8f6f 	isb	sy
	return net_buf_simple_push(&buf->b, len);
   2a7cc:	2104      	movs	r1, #4
   2a7ce:	f106 0008 	add.w	r0, r6, #8
   2a7d2:	f004 f90b 	bl	2e9ec <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   2a7d6:	8823      	ldrh	r3, [r4, #0]
   2a7d8:	f00a 0afd 	and.w	sl, sl, #253	; 0xfd
   2a7dc:	ea43 3a0a 	orr.w	sl, r3, sl, lsl #12
   2a7e0:	f8a0 a000 	strh.w	sl, [r0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   2a7e4:	89b3      	ldrh	r3, [r6, #12]
   2a7e6:	3b04      	subs	r3, #4
   2a7e8:	8043      	strh	r3, [r0, #2]
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   2a7ea:	2302      	movs	r3, #2
   2a7ec:	7533      	strb	r3, [r6, #20]
	return bt_send(buf);
   2a7ee:	4630      	mov	r0, r6
   2a7f0:	f7fe fab0 	bl	28d54 <bt_send>
	if (err) {
   2a7f4:	4603      	mov	r3, r0
   2a7f6:	2800      	cmp	r0, #0
   2a7f8:	d079      	beq.n	2a8ee <send_frag+0x172>
		BT_ERR("Unable to send to driver (err %d)", err);
   2a7fa:	483f      	ldr	r0, [pc, #252]	; (2a8f8 <send_frag+0x17c>)
   2a7fc:	6802      	ldr	r2, [r0, #0]
   2a7fe:	0752      	lsls	r2, r2, #29
   2a800:	d00d      	beq.n	2a81e <send_frag+0xa2>
   2a802:	46ea      	mov	sl, sp
   2a804:	b088      	sub	sp, #32
   2a806:	466a      	mov	r2, sp
   2a808:	493c      	ldr	r1, [pc, #240]	; (2a8fc <send_frag+0x180>)
   2a80a:	e9c2 1305 	strd	r1, r3, [r2, #20]
   2a80e:	2303      	movs	r3, #3
   2a810:	f842 3f10 	str.w	r3, [r2, #16]!
   2a814:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   2a818:	f00f f8f9 	bl	39a0e <z_log_msg_static_create.constprop.0>
   2a81c:	46d5      	mov	sp, sl
	__asm__ volatile(
   2a81e:	f04f 0340 	mov.w	r3, #64	; 0x40
   2a822:	f3ef 8111 	mrs	r1, BASEPRI
   2a826:	f383 8812 	msr	BASEPRI_MAX, r3
   2a82a:	f3bf 8f6f 	isb	sy
		if (tx) {
   2a82e:	2d00      	cmp	r5, #0
   2a830:	d034      	beq.n	2a89c <send_frag+0x120>
	return list->head;
   2a832:	6963      	ldr	r3, [r4, #20]
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2a834:	2200      	movs	r2, #0
   2a836:	b153      	cbz	r3, 2a84e <send_frag+0xd2>
   2a838:	429d      	cmp	r5, r3
   2a83a:	d12c      	bne.n	2a896 <send_frag+0x11a>
	return node->next;
   2a83c:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_REMOVE(slist, snode)
   2a83e:	bb22      	cbnz	r2, 2a88a <send_frag+0x10e>
   2a840:	69a2      	ldr	r2, [r4, #24]
	list->head = node;
   2a842:	6163      	str	r3, [r4, #20]
Z_GENLIST_REMOVE(slist, snode)
   2a844:	4295      	cmp	r5, r2
   2a846:	d100      	bne.n	2a84a <send_frag+0xce>
	list->tail = node;
   2a848:	61a3      	str	r3, [r4, #24]
	parent->next = child;
   2a84a:	2300      	movs	r3, #0
   2a84c:	602b      	str	r3, [r5, #0]
	__asm__ volatile(
   2a84e:	f381 8811 	msr	BASEPRI, r1
   2a852:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
   2a856:	4827      	ldr	r0, [pc, #156]	; (2a8f4 <send_frag+0x178>)
   2a858:	f00a ffa6 	bl	357a8 <z_impl_k_sem_give>
		tx_data(buf)->tx = NULL;
   2a85c:	2300      	movs	r3, #0
   2a85e:	6173      	str	r3, [r6, #20]
		conn_tx_destroy(conn, tx);
   2a860:	4629      	mov	r1, r5
   2a862:	4620      	mov	r0, r4
   2a864:	f7ff ff66 	bl	2a734 <conn_tx_destroy>
   2a868:	e030      	b.n	2a8cc <send_frag+0x150>
   2a86a:	601d      	str	r5, [r3, #0]
	list->tail = node;
   2a86c:	61a5      	str	r5, [r4, #24]
}
   2a86e:	e7a9      	b.n	2a7c4 <send_frag+0x48>
	return list->tail;
   2a870:	69a3      	ldr	r3, [r4, #24]
		if (tail_tx) {
   2a872:	b133      	cbz	r3, 2a882 <send_frag+0x106>
			pending_no_cb = &tail_tx->pending_no_cb;
   2a874:	f103 080c 	add.w	r8, r3, #12
   2a878:	68db      	ldr	r3, [r3, #12]
		(*pending_no_cb)++;
   2a87a:	3301      	adds	r3, #1
   2a87c:	f8c8 3000 	str.w	r3, [r8]
   2a880:	e7a0      	b.n	2a7c4 <send_frag+0x48>
			pending_no_cb = &conn->pending_no_cb;
   2a882:	69e3      	ldr	r3, [r4, #28]
   2a884:	f104 081c 	add.w	r8, r4, #28
   2a888:	e7f7      	b.n	2a87a <send_frag+0xfe>
	parent->next = child;
   2a88a:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   2a88c:	69a3      	ldr	r3, [r4, #24]
   2a88e:	429d      	cmp	r5, r3
	list->tail = node;
   2a890:	bf08      	it	eq
   2a892:	61a2      	streq	r2, [r4, #24]
}
   2a894:	e7d9      	b.n	2a84a <send_frag+0xce>
	return node->next;
   2a896:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2a898:	681b      	ldr	r3, [r3, #0]
   2a89a:	e7cc      	b.n	2a836 <send_frag+0xba>
			__ASSERT_NO_MSG(*pending_no_cb > 0);
   2a89c:	f8d8 3000 	ldr.w	r3, [r8]
   2a8a0:	b953      	cbnz	r3, 2a8b8 <send_frag+0x13c>
   2a8a2:	4917      	ldr	r1, [pc, #92]	; (2a900 <send_frag+0x184>)
   2a8a4:	4817      	ldr	r0, [pc, #92]	; (2a904 <send_frag+0x188>)
   2a8a6:	f240 2229 	movw	r2, #553	; 0x229
   2a8aa:	f00e f932 	bl	38b12 <assert_print>
   2a8ae:	4814      	ldr	r0, [pc, #80]	; (2a900 <send_frag+0x184>)
   2a8b0:	f240 2129 	movw	r1, #553	; 0x229
   2a8b4:	f00e f926 	bl	38b04 <assert_post_action>
			(*pending_no_cb)--;
   2a8b8:	3b01      	subs	r3, #1
   2a8ba:	f8c8 3000 	str.w	r3, [r8]
   2a8be:	f381 8811 	msr	BASEPRI, r1
   2a8c2:	f3bf 8f6f 	isb	sy
   2a8c6:	480b      	ldr	r0, [pc, #44]	; (2a8f4 <send_frag+0x178>)
   2a8c8:	f00a ff6e 	bl	357a8 <z_impl_k_sem_give>
	if (always_consume) {
   2a8cc:	f1b9 0f00 	cmp.w	r9, #0
   2a8d0:	d109      	bne.n	2a8e6 <send_frag+0x16a>
	return false;
   2a8d2:	2000      	movs	r0, #0
}
   2a8d4:	46bd      	mov	sp, r7
   2a8d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2a8da:	4806      	ldr	r0, [pc, #24]	; (2a8f4 <send_frag+0x178>)
   2a8dc:	f00a ff64 	bl	357a8 <z_impl_k_sem_give>
	if (tx) {
   2a8e0:	2d00      	cmp	r5, #0
   2a8e2:	d1bb      	bne.n	2a85c <send_frag+0xe0>
   2a8e4:	e7f2      	b.n	2a8cc <send_frag+0x150>
		net_buf_unref(buf);
   2a8e6:	4630      	mov	r0, r6
   2a8e8:	f003 ffca 	bl	2e880 <net_buf_unref>
   2a8ec:	e7f1      	b.n	2a8d2 <send_frag+0x156>
	return true;
   2a8ee:	2001      	movs	r0, #1
   2a8f0:	e7f0      	b.n	2a8d4 <send_frag+0x158>
   2a8f2:	bf00      	nop
   2a8f4:	200004e0 	.word	0x200004e0
   2a8f8:	20000a80 	.word	0x20000a80
   2a8fc:	0003dfce 	.word	0x0003dfce
   2a900:	0003e2e8 	.word	0x0003e2e8
   2a904:	0003d1d7 	.word	0x0003d1d7

0002a908 <bt_conn_get_pkts>:
}
   2a908:	4800      	ldr	r0, [pc, #0]	; (2a90c <bt_conn_get_pkts+0x4>)
   2a90a:	4770      	bx	lr
   2a90c:	200004e0 	.word	0x200004e0

0002a910 <bt_conn_new>:
{
   2a910:	b538      	push	{r3, r4, r5, lr}
	for (i = 0; i < size; i++) {
   2a912:	2200      	movs	r2, #0
   2a914:	4604      	mov	r4, r0
   2a916:	428a      	cmp	r2, r1
   2a918:	d102      	bne.n	2a920 <bt_conn_new+0x10>
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   2a91a:	2400      	movs	r4, #0
}
   2a91c:	4620      	mov	r0, r4
   2a91e:	bd38      	pop	{r3, r4, r5, pc}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   2a920:	f104 03c0 	add.w	r3, r4, #192	; 0xc0
   2a924:	2001      	movs	r0, #1
   2a926:	f3bf 8f5b 	dmb	ish
   2a92a:	e853 5f00 	ldrex	r5, [r3]
   2a92e:	2d00      	cmp	r5, #0
   2a930:	d104      	bne.n	2a93c <bt_conn_new+0x2c>
   2a932:	e843 0c00 	strex	ip, r0, [r3]
   2a936:	f1bc 0f00 	cmp.w	ip, #0
   2a93a:	d1f6      	bne.n	2a92a <bt_conn_new+0x1a>
   2a93c:	f3bf 8f5b 	dmb	ish
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   2a940:	d002      	beq.n	2a948 <bt_conn_new+0x38>
   2a942:	34c8      	adds	r4, #200	; 0xc8
	for (i = 0; i < size; i++) {
   2a944:	4402      	add	r2, r0
   2a946:	e7e6      	b.n	2a916 <bt_conn_new+0x6>
	if (!conn) {
   2a948:	2c00      	cmp	r4, #0
   2a94a:	d0e6      	beq.n	2a91a <bt_conn_new+0xa>
	(void)memset(conn, 0, offsetof(struct bt_conn, ref));
   2a94c:	22c0      	movs	r2, #192	; 0xc0
   2a94e:	2100      	movs	r1, #0
   2a950:	4620      	mov	r0, r4
   2a952:	f00e fd38 	bl	393c6 <memset>
	k_work_init_delayable(&conn->deferred_work, deferred_work);
   2a956:	f104 0060 	add.w	r0, r4, #96	; 0x60
   2a95a:	4904      	ldr	r1, [pc, #16]	; (2a96c <bt_conn_new+0x5c>)
   2a95c:	f00b fb18 	bl	35f90 <k_work_init_delayable>
	k_work_init(&conn->tx_complete_work, tx_complete_work);
   2a960:	4903      	ldr	r1, [pc, #12]	; (2a970 <bt_conn_new+0x60>)
   2a962:	f104 0028 	add.w	r0, r4, #40	; 0x28
   2a966:	f00b f9af 	bl	35cc8 <k_work_init>
	return conn;
   2a96a:	e7d7      	b.n	2a91c <bt_conn_new+0xc>
   2a96c:	0002b3d1 	.word	0x0002b3d1
   2a970:	00039a15 	.word	0x00039a15

0002a974 <conn_cleanup>:
{
   2a974:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2a978:	4604      	mov	r4, r0
		tx_data(buf)->tx = NULL;
   2a97a:	2700      	movs	r7, #0
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
   2a97c:	f104 0638 	add.w	r6, r4, #56	; 0x38
   2a980:	2300      	movs	r3, #0
   2a982:	2200      	movs	r2, #0
   2a984:	4630      	mov	r0, r6
   2a986:	f003 fe49 	bl	2e61c <net_buf_get>
   2a98a:	4603      	mov	r3, r0
   2a98c:	b960      	cbnz	r0, 2a9a8 <conn_cleanup+0x34>
	__ASSERT(sys_slist_is_empty(&conn->tx_pending), "Pending TX packets");
   2a98e:	6963      	ldr	r3, [r4, #20]
   2a990:	b1ab      	cbz	r3, 2a9be <conn_cleanup+0x4a>
   2a992:	4916      	ldr	r1, [pc, #88]	; (2a9ec <conn_cleanup+0x78>)
   2a994:	4816      	ldr	r0, [pc, #88]	; (2a9f0 <conn_cleanup+0x7c>)
   2a996:	f240 22b6 	movw	r2, #694	; 0x2b6
   2a99a:	f00e f8ba 	bl	38b12 <assert_print>
   2a99e:	f240 21b6 	movw	r1, #694	; 0x2b6
	__ASSERT_NO_MSG(conn->pending_no_cb == 0);
   2a9a2:	4812      	ldr	r0, [pc, #72]	; (2a9ec <conn_cleanup+0x78>)
   2a9a4:	f00e f8ae 	bl	38b04 <assert_post_action>
		struct bt_conn_tx *tx = tx_data(buf)->tx;
   2a9a8:	695d      	ldr	r5, [r3, #20]
		tx_data(buf)->tx = NULL;
   2a9aa:	615f      	str	r7, [r3, #20]
		net_buf_unref(buf);
   2a9ac:	f003 ff68 	bl	2e880 <net_buf_unref>
		if (tx) {
   2a9b0:	2d00      	cmp	r5, #0
   2a9b2:	d0e5      	beq.n	2a980 <conn_cleanup+0xc>
			conn_tx_destroy(conn, tx);
   2a9b4:	4629      	mov	r1, r5
   2a9b6:	4620      	mov	r0, r4
   2a9b8:	f7ff febc 	bl	2a734 <conn_tx_destroy>
   2a9bc:	e7de      	b.n	2a97c <conn_cleanup+0x8>
	__ASSERT_NO_MSG(conn->pending_no_cb == 0);
   2a9be:	69e3      	ldr	r3, [r4, #28]
   2a9c0:	b143      	cbz	r3, 2a9d4 <conn_cleanup+0x60>
   2a9c2:	490a      	ldr	r1, [pc, #40]	; (2a9ec <conn_cleanup+0x78>)
   2a9c4:	480a      	ldr	r0, [pc, #40]	; (2a9f0 <conn_cleanup+0x7c>)
   2a9c6:	f240 22b7 	movw	r2, #695	; 0x2b7
   2a9ca:	f00e f8a2 	bl	38b12 <assert_print>
   2a9ce:	f240 21b7 	movw	r1, #695	; 0x2b7
   2a9d2:	e7e6      	b.n	2a9a2 <conn_cleanup+0x2e>
	bt_conn_reset_rx_state(conn);
   2a9d4:	4620      	mov	r0, r4
   2a9d6:	f00f f820 	bl	39a1a <bt_conn_reset_rx_state>
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   2a9da:	f104 0060 	add.w	r0, r4, #96	; 0x60
   2a9de:	2200      	movs	r2, #0
}
   2a9e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   2a9e4:	2300      	movs	r3, #0
   2a9e6:	f00b bbbd 	b.w	36164 <k_work_reschedule>
   2a9ea:	bf00      	nop
   2a9ec:	0003e2e8 	.word	0x0003e2e8
   2a9f0:	0003d1d7 	.word	0x0003d1d7

0002a9f4 <bt_conn_recv>:
{
   2a9f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2a9f8:	b086      	sub	sp, #24
   2a9fa:	4616      	mov	r6, r2
   2a9fc:	af00      	add	r7, sp, #0
   2a9fe:	4604      	mov	r4, r0
   2aa00:	460d      	mov	r5, r1
	tx_notify(conn);
   2aa02:	f7ff fe67 	bl	2a6d4 <tx_notify>
	switch (flags) {
   2aa06:	2e01      	cmp	r6, #1
   2aa08:	d036      	beq.n	2aa78 <bt_conn_recv+0x84>
   2aa0a:	2e02      	cmp	r6, #2
   2aa0c:	d176      	bne.n	2aafc <bt_conn_recv+0x108>
		if (conn->rx) {
   2aa0e:	6923      	ldr	r3, [r4, #16]
   2aa10:	b17b      	cbz	r3, 2aa32 <bt_conn_recv+0x3e>
			BT_ERR("Unexpected first L2CAP frame");
   2aa12:	4847      	ldr	r0, [pc, #284]	; (2ab30 <bt_conn_recv+0x13c>)
   2aa14:	6803      	ldr	r3, [r0, #0]
   2aa16:	075a      	lsls	r2, r3, #29
   2aa18:	d008      	beq.n	2aa2c <bt_conn_recv+0x38>
   2aa1a:	4b46      	ldr	r3, [pc, #280]	; (2ab34 <bt_conn_recv+0x140>)
   2aa1c:	f107 0210 	add.w	r2, r7, #16
   2aa20:	e9c7 6304 	strd	r6, r3, [r7, #16]
   2aa24:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   2aa28:	f00e fff1 	bl	39a0e <z_log_msg_static_create.constprop.0>
			bt_conn_reset_rx_state(conn);
   2aa2c:	4620      	mov	r0, r4
   2aa2e:	f00e fff4 	bl	39a1a <bt_conn_reset_rx_state>
		conn->rx = buf;
   2aa32:	6125      	str	r5, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
   2aa34:	6921      	ldr	r1, [r4, #16]
   2aa36:	898d      	ldrh	r5, [r1, #12]
   2aa38:	2d01      	cmp	r5, #1
   2aa3a:	d933      	bls.n	2aaa4 <bt_conn_recv+0xb0>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
   2aa3c:	688b      	ldr	r3, [r1, #8]
   2aa3e:	881b      	ldrh	r3, [r3, #0]
   2aa40:	3304      	adds	r3, #4
   2aa42:	b29b      	uxth	r3, r3
	if (conn->rx->len < acl_total_len) {
   2aa44:	429d      	cmp	r5, r3
   2aa46:	d32d      	bcc.n	2aaa4 <bt_conn_recv+0xb0>
	if (conn->rx->len > acl_total_len) {
   2aa48:	d96b      	bls.n	2ab22 <bt_conn_recv+0x12e>
		BT_ERR("ACL len mismatch (%u > %u)",
   2aa4a:	4839      	ldr	r0, [pc, #228]	; (2ab30 <bt_conn_recv+0x13c>)
   2aa4c:	6802      	ldr	r2, [r0, #0]
   2aa4e:	0752      	lsls	r2, r2, #29
   2aa50:	d00e      	beq.n	2aa70 <bt_conn_recv+0x7c>
   2aa52:	466e      	mov	r6, sp
   2aa54:	b088      	sub	sp, #32
   2aa56:	466a      	mov	r2, sp
   2aa58:	4937      	ldr	r1, [pc, #220]	; (2ab38 <bt_conn_recv+0x144>)
   2aa5a:	61d3      	str	r3, [r2, #28]
   2aa5c:	2304      	movs	r3, #4
   2aa5e:	e9c2 1505 	strd	r1, r5, [r2, #20]
   2aa62:	f842 3f10 	str.w	r3, [r2, #16]!
   2aa66:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   2aa6a:	f00e ffd0 	bl	39a0e <z_log_msg_static_create.constprop.0>
   2aa6e:	46b5      	mov	sp, r6
		bt_conn_reset_rx_state(conn);
   2aa70:	4620      	mov	r0, r4
   2aa72:	f00e ffd2 	bl	39a1a <bt_conn_reset_rx_state>
		return;
   2aa76:	e015      	b.n	2aaa4 <bt_conn_recv+0xb0>
		if (!conn->rx) {
   2aa78:	6920      	ldr	r0, [r4, #16]
   2aa7a:	b9b8      	cbnz	r0, 2aaac <bt_conn_recv+0xb8>
			BT_ERR("Unexpected L2CAP continuation");
   2aa7c:	482c      	ldr	r0, [pc, #176]	; (2ab30 <bt_conn_recv+0x13c>)
   2aa7e:	6803      	ldr	r3, [r0, #0]
   2aa80:	075b      	lsls	r3, r3, #29
   2aa82:	d009      	beq.n	2aa98 <bt_conn_recv+0xa4>
   2aa84:	4b2d      	ldr	r3, [pc, #180]	; (2ab3c <bt_conn_recv+0x148>)
   2aa86:	617b      	str	r3, [r7, #20]
   2aa88:	2302      	movs	r3, #2
   2aa8a:	613b      	str	r3, [r7, #16]
   2aa8c:	f107 0210 	add.w	r2, r7, #16
   2aa90:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   2aa94:	f00e ffbb 	bl	39a0e <z_log_msg_static_create.constprop.0>
			bt_conn_reset_rx_state(conn);
   2aa98:	4620      	mov	r0, r4
   2aa9a:	f00e ffbe 	bl	39a1a <bt_conn_reset_rx_state>
			net_buf_unref(buf);
   2aa9e:	4628      	mov	r0, r5
   2aaa0:	f003 feee 	bl	2e880 <net_buf_unref>
}
   2aaa4:	3718      	adds	r7, #24
   2aaa6:	46bd      	mov	sp, r7
   2aaa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!buf->len) {
   2aaac:	89ae      	ldrh	r6, [r5, #12]
   2aaae:	2e00      	cmp	r6, #0
   2aab0:	d0f5      	beq.n	2aa9e <bt_conn_recv+0xaa>
 *
 * @return Number of bytes available at the end of the buffer.
 */
static inline size_t net_buf_tailroom(struct net_buf *buf)
{
	return net_buf_simple_tailroom(&buf->b);
   2aab2:	3008      	adds	r0, #8
   2aab4:	f010 f828 	bl	3ab08 <net_buf_simple_tailroom>
		if (buf->len > net_buf_tailroom(conn->rx)) {
   2aab8:	4286      	cmp	r6, r0
   2aaba:	d915      	bls.n	2aae8 <bt_conn_recv+0xf4>
			BT_ERR("Not enough buffer space for L2CAP data");
   2aabc:	481c      	ldr	r0, [pc, #112]	; (2ab30 <bt_conn_recv+0x13c>)
   2aabe:	6803      	ldr	r3, [r0, #0]
   2aac0:	075e      	lsls	r6, r3, #29
   2aac2:	d009      	beq.n	2aad8 <bt_conn_recv+0xe4>
   2aac4:	4b1e      	ldr	r3, [pc, #120]	; (2ab40 <bt_conn_recv+0x14c>)
   2aac6:	617b      	str	r3, [r7, #20]
   2aac8:	2302      	movs	r3, #2
   2aaca:	613b      	str	r3, [r7, #16]
   2aacc:	f107 0210 	add.w	r2, r7, #16
   2aad0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   2aad4:	f00e ff9b 	bl	39a0e <z_log_msg_static_create.constprop.0>
			bt_l2cap_recv(conn, conn->rx, false);
   2aad8:	6921      	ldr	r1, [r4, #16]
   2aada:	2200      	movs	r2, #0
   2aadc:	4620      	mov	r0, r4
   2aade:	f000 fedf 	bl	2b8a0 <bt_l2cap_recv>
			conn->rx = NULL;
   2aae2:	2300      	movs	r3, #0
   2aae4:	6123      	str	r3, [r4, #16]
   2aae6:	e7da      	b.n	2aa9e <bt_conn_recv+0xaa>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   2aae8:	6920      	ldr	r0, [r4, #16]
   2aaea:	89aa      	ldrh	r2, [r5, #12]
   2aaec:	68a9      	ldr	r1, [r5, #8]
   2aaee:	3008      	adds	r0, #8
   2aaf0:	f010 f812 	bl	3ab18 <net_buf_simple_add_mem>
		net_buf_unref(buf);
   2aaf4:	4628      	mov	r0, r5
   2aaf6:	f003 fec3 	bl	2e880 <net_buf_unref>
		break;
   2aafa:	e79b      	b.n	2aa34 <bt_conn_recv+0x40>
		BT_ERR("Unexpected ACL flags (0x%02x)", flags);
   2aafc:	480c      	ldr	r0, [pc, #48]	; (2ab30 <bt_conn_recv+0x13c>)
   2aafe:	6803      	ldr	r3, [r0, #0]
   2ab00:	0759      	lsls	r1, r3, #29
   2ab02:	d0c9      	beq.n	2aa98 <bt_conn_recv+0xa4>
   2ab04:	46e8      	mov	r8, sp
   2ab06:	b088      	sub	sp, #32
   2ab08:	466a      	mov	r2, sp
   2ab0a:	4b0e      	ldr	r3, [pc, #56]	; (2ab44 <bt_conn_recv+0x150>)
	switch (flags) {
   2ab0c:	e9c2 3605 	strd	r3, r6, [r2, #20]
		BT_ERR("Unexpected ACL flags (0x%02x)", flags);
   2ab10:	2303      	movs	r3, #3
   2ab12:	f842 3f10 	str.w	r3, [r2, #16]!
   2ab16:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   2ab1a:	f00e ff78 	bl	39a0e <z_log_msg_static_create.constprop.0>
   2ab1e:	46c5      	mov	sp, r8
   2ab20:	e7ba      	b.n	2aa98 <bt_conn_recv+0xa4>
	conn->rx = NULL;
   2ab22:	2300      	movs	r3, #0
   2ab24:	6123      	str	r3, [r4, #16]
	bt_l2cap_recv(conn, buf, true);
   2ab26:	2201      	movs	r2, #1
   2ab28:	4620      	mov	r0, r4
   2ab2a:	f000 feb9 	bl	2b8a0 <bt_l2cap_recv>
		__ASSERT(false, "Invalid connection type %u", conn->type);
   2ab2e:	e7b9      	b.n	2aaa4 <bt_conn_recv+0xb0>
   2ab30:	20000a80 	.word	0x20000a80
   2ab34:	0003e318 	.word	0x0003e318
   2ab38:	0003e398 	.word	0x0003e398
   2ab3c:	0003e335 	.word	0x0003e335
   2ab40:	0003e353 	.word	0x0003e353
   2ab44:	0003e37a 	.word	0x0003e37a

0002ab48 <bt_conn_send_cb>:
{
   2ab48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2ab4c:	4698      	mov	r8, r3
	if (conn->state != BT_CONN_CONNECTED) {
   2ab4e:	7a83      	ldrb	r3, [r0, #10]
   2ab50:	2b07      	cmp	r3, #7
{
   2ab52:	b086      	sub	sp, #24
   2ab54:	4605      	mov	r5, r0
   2ab56:	460f      	mov	r7, r1
   2ab58:	4616      	mov	r6, r2
	if (conn->state != BT_CONN_CONNECTED) {
   2ab5a:	d00f      	beq.n	2ab7c <bt_conn_send_cb+0x34>
		BT_ERR("not connected!");
   2ab5c:	482e      	ldr	r0, [pc, #184]	; (2ac18 <bt_conn_send_cb+0xd0>)
   2ab5e:	6803      	ldr	r3, [r0, #0]
   2ab60:	075a      	lsls	r2, r3, #29
   2ab62:	d008      	beq.n	2ab76 <bt_conn_send_cb+0x2e>
   2ab64:	4b2d      	ldr	r3, [pc, #180]	; (2ac1c <bt_conn_send_cb+0xd4>)
   2ab66:	9305      	str	r3, [sp, #20]
   2ab68:	aa04      	add	r2, sp, #16
   2ab6a:	2302      	movs	r3, #2
   2ab6c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   2ab70:	9304      	str	r3, [sp, #16]
   2ab72:	f00e ff4c 	bl	39a0e <z_log_msg_static_create.constprop.0>
		return -ENOTCONN;
   2ab76:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   2ab7a:	e017      	b.n	2abac <bt_conn_send_cb+0x64>
	if (cb) {
   2ab7c:	2a00      	cmp	r2, #0
   2ab7e:	d048      	beq.n	2ac12 <bt_conn_send_cb+0xca>
	return z_impl_z_current_get();
   2ab80:	f00c fabc 	bl	370fc <z_impl_z_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
   2ab84:	4b26      	ldr	r3, [pc, #152]	; (2ac20 <bt_conn_send_cb+0xd8>)
   2ab86:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
   2ab88:	4826      	ldr	r0, [pc, #152]	; (2ac24 <bt_conn_send_cb+0xdc>)
   2ab8a:	bf07      	ittee	eq
   2ab8c:	2200      	moveq	r2, #0
   2ab8e:	2300      	moveq	r3, #0
   2ab90:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
   2ab94:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
   2ab98:	f00a fdae 	bl	356f8 <z_impl_k_queue_get>
   2ab9c:	4604      	mov	r4, r0
		if (!tx) {
   2ab9e:	b990      	cbnz	r0, 2abc6 <bt_conn_send_cb+0x7e>
			BT_ERR("Unable to allocate TX context");
   2aba0:	481d      	ldr	r0, [pc, #116]	; (2ac18 <bt_conn_send_cb+0xd0>)
   2aba2:	6803      	ldr	r3, [r0, #0]
   2aba4:	075b      	lsls	r3, r3, #29
   2aba6:	d104      	bne.n	2abb2 <bt_conn_send_cb+0x6a>
			return -ENOBUFS;
   2aba8:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
   2abac:	b006      	add	sp, #24
   2abae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			BT_ERR("Unable to allocate TX context");
   2abb2:	4b1d      	ldr	r3, [pc, #116]	; (2ac28 <bt_conn_send_cb+0xe0>)
   2abb4:	9305      	str	r3, [sp, #20]
   2abb6:	aa04      	add	r2, sp, #16
   2abb8:	2302      	movs	r3, #2
   2abba:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   2abbe:	9304      	str	r3, [sp, #16]
   2abc0:	f00e ff25 	bl	39a0e <z_log_msg_static_create.constprop.0>
   2abc4:	e7f0      	b.n	2aba8 <bt_conn_send_cb+0x60>
		if (conn->state != BT_CONN_CONNECTED) {
   2abc6:	7aab      	ldrb	r3, [r5, #10]
   2abc8:	2b07      	cmp	r3, #7
   2abca:	d016      	beq.n	2abfa <bt_conn_send_cb+0xb2>
			BT_WARN("Disconnected while allocating context");
   2abcc:	4812      	ldr	r0, [pc, #72]	; (2ac18 <bt_conn_send_cb+0xd0>)
   2abce:	6803      	ldr	r3, [r0, #0]
   2abd0:	f013 0f06 	tst.w	r3, #6
   2abd4:	d008      	beq.n	2abe8 <bt_conn_send_cb+0xa0>
   2abd6:	4b15      	ldr	r3, [pc, #84]	; (2ac2c <bt_conn_send_cb+0xe4>)
   2abd8:	9305      	str	r3, [sp, #20]
   2abda:	aa04      	add	r2, sp, #16
   2abdc:	2302      	movs	r3, #2
   2abde:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   2abe2:	9304      	str	r3, [sp, #16]
   2abe4:	f00e ff13 	bl	39a0e <z_log_msg_static_create.constprop.0>
	tx->cb = NULL;
   2abe8:	2300      	movs	r3, #0
	tx->user_data = NULL;
   2abea:	e9c4 3301 	strd	r3, r3, [r4, #4]
	k_fifo_put(&free_tx, tx);
   2abee:	480d      	ldr	r0, [pc, #52]	; (2ac24 <bt_conn_send_cb+0xdc>)
	tx->pending_no_cb = 0U;
   2abf0:	60e3      	str	r3, [r4, #12]
	k_fifo_put(&free_tx, tx);
   2abf2:	4621      	mov	r1, r4
   2abf4:	f011 f834 	bl	3bc60 <k_queue_append>
}
   2abf8:	e7bd      	b.n	2ab76 <bt_conn_send_cb+0x2e>
		tx->user_data = user_data;
   2abfa:	e9c0 6801 	strd	r6, r8, [r0, #4]
		tx->pending_no_cb = 0U;
   2abfe:	2300      	movs	r3, #0
   2ac00:	60c3      	str	r3, [r0, #12]
	net_buf_put(&conn->tx_queue, buf);
   2ac02:	f105 0038 	add.w	r0, r5, #56	; 0x38
		tx_data(buf)->tx = tx;
   2ac06:	617c      	str	r4, [r7, #20]
	net_buf_put(&conn->tx_queue, buf);
   2ac08:	4639      	mov	r1, r7
   2ac0a:	f003 fe0f 	bl	2e82c <net_buf_put>
	return 0;
   2ac0e:	2000      	movs	r0, #0
   2ac10:	e7cc      	b.n	2abac <bt_conn_send_cb+0x64>
   2ac12:	4614      	mov	r4, r2
   2ac14:	e7f5      	b.n	2ac02 <bt_conn_send_cb+0xba>
   2ac16:	bf00      	nop
   2ac18:	20000a80 	.word	0x20000a80
   2ac1c:	0003e3b3 	.word	0x0003e3b3
   2ac20:	20002cd0 	.word	0x20002cd0
   2ac24:	20000bd0 	.word	0x20000bd0
   2ac28:	0003e3c2 	.word	0x0003e3c2
   2ac2c:	0003e3e0 	.word	0x0003e3e0

0002ac30 <bt_conn_prepare_events>:
{
   2ac30:	b570      	push	{r4, r5, r6, lr}
   2ac32:	4604      	mov	r4, r0
	z_impl_k_poll_signal_init(sig);
   2ac34:	481c      	ldr	r0, [pc, #112]	; (2aca8 <bt_conn_prepare_events+0x78>)
   2ac36:	f011 f9bb 	bl	3bfb0 <z_impl_k_poll_signal_init>
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   2ac3a:	4b1b      	ldr	r3, [pc, #108]	; (2aca8 <bt_conn_prepare_events+0x78>)
   2ac3c:	2200      	movs	r2, #0
   2ac3e:	4620      	mov	r0, r4
   2ac40:	2101      	movs	r1, #1
   2ac42:	f00d f831 	bl	37ca8 <k_poll_event_init>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2ac46:	f3bf 8f5b 	dmb	ish
   2ac4a:	4a18      	ldr	r2, [pc, #96]	; (2acac <bt_conn_prepare_events+0x7c>)
   2ac4c:	6813      	ldr	r3, [r2, #0]
   2ac4e:	f3bf 8f5b 	dmb	ish
		if (!conn_prepare_events(conn, &events[ev_count])) {
   2ac52:	f104 0014 	add.w	r0, r4, #20
	if (!atomic_get(&conn->ref)) {
   2ac56:	b90b      	cbnz	r3, 2ac5c <bt_conn_prepare_events+0x2c>
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   2ac58:	2001      	movs	r0, #1
}
   2ac5a:	bd70      	pop	{r4, r5, r6, pc}
	if (conn->state == BT_CONN_DISCONNECTED &&
   2ac5c:	f1a2 03c0 	sub.w	r3, r2, #192	; 0xc0
   2ac60:	f812 2cb6 	ldrb.w	r2, [r2, #-182]
   2ac64:	b992      	cbnz	r2, 2ac8c <bt_conn_prepare_events+0x5c>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2ac66:	f3bf 8f5b 	dmb	ish
   2ac6a:	1d1a      	adds	r2, r3, #4
   2ac6c:	e852 1f00 	ldrex	r1, [r2]
   2ac70:	f021 0540 	bic.w	r5, r1, #64	; 0x40
   2ac74:	e842 5600 	strex	r6, r5, [r2]
   2ac78:	2e00      	cmp	r6, #0
   2ac7a:	d1f7      	bne.n	2ac6c <bt_conn_prepare_events+0x3c>
   2ac7c:	f3bf 8f5b 	dmb	ish
   2ac80:	064a      	lsls	r2, r1, #25
   2ac82:	d503      	bpl.n	2ac8c <bt_conn_prepare_events+0x5c>
		conn_cleanup(conn);
   2ac84:	4618      	mov	r0, r3
   2ac86:	f7ff fe75 	bl	2a974 <conn_cleanup>
		return -ENOTCONN;
   2ac8a:	e7e5      	b.n	2ac58 <bt_conn_prepare_events+0x28>
	if (conn->state != BT_CONN_CONNECTED) {
   2ac8c:	7a9b      	ldrb	r3, [r3, #10]
   2ac8e:	2b07      	cmp	r3, #7
   2ac90:	d1e2      	bne.n	2ac58 <bt_conn_prepare_events+0x28>
	k_poll_event_init(&events[0],
   2ac92:	4b07      	ldr	r3, [pc, #28]	; (2acb0 <bt_conn_prepare_events+0x80>)
   2ac94:	2200      	movs	r2, #0
   2ac96:	2104      	movs	r1, #4
   2ac98:	f00d f806 	bl	37ca8 <k_poll_event_init>
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
   2ac9c:	2301      	movs	r3, #1
   2ac9e:	f884 3020 	strb.w	r3, [r4, #32]
			ev_count++;
   2aca2:	2002      	movs	r0, #2
	return ev_count;
   2aca4:	e7d9      	b.n	2ac5a <bt_conn_prepare_events+0x2a>
   2aca6:	bf00      	nop
   2aca8:	200006bc 	.word	0x200006bc
   2acac:	20002840 	.word	0x20002840
   2acb0:	200027b8 	.word	0x200027b8

0002acb4 <bt_conn_ref>:
{
   2acb4:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(conn);
   2acb6:	b950      	cbnz	r0, 2acce <bt_conn_ref+0x1a>
   2acb8:	4912      	ldr	r1, [pc, #72]	; (2ad04 <bt_conn_ref+0x50>)
   2acba:	4813      	ldr	r0, [pc, #76]	; (2ad08 <bt_conn_ref+0x54>)
   2acbc:	f44f 628f 	mov.w	r2, #1144	; 0x478
   2acc0:	f00d ff27 	bl	38b12 <assert_print>
   2acc4:	480f      	ldr	r0, [pc, #60]	; (2ad04 <bt_conn_ref+0x50>)
   2acc6:	f44f 618f 	mov.w	r1, #1144	; 0x478
   2acca:	f00d ff1b 	bl	38b04 <assert_post_action>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2acce:	f3bf 8f5b 	dmb	ish
   2acd2:	f8d0 30c0 	ldr.w	r3, [r0, #192]	; 0xc0
   2acd6:	f3bf 8f5b 	dmb	ish
		old = atomic_get(&conn->ref);
   2acda:	f100 02c0 	add.w	r2, r0, #192	; 0xc0
		if (!old) {
   2acde:	b17b      	cbz	r3, 2ad00 <bt_conn_ref+0x4c>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   2ace0:	f3bf 8f5b 	dmb	ish
	} while (!atomic_cas(&conn->ref, old, old + 1));
   2ace4:	1c59      	adds	r1, r3, #1
   2ace6:	e852 4f00 	ldrex	r4, [r2]
   2acea:	429c      	cmp	r4, r3
   2acec:	d104      	bne.n	2acf8 <bt_conn_ref+0x44>
   2acee:	e842 1c00 	strex	ip, r1, [r2]
   2acf2:	f1bc 0f00 	cmp.w	ip, #0
   2acf6:	d1f6      	bne.n	2ace6 <bt_conn_ref+0x32>
   2acf8:	f3bf 8f5b 	dmb	ish
   2acfc:	d1e7      	bne.n	2acce <bt_conn_ref+0x1a>
}
   2acfe:	bd10      	pop	{r4, pc}
			return NULL;
   2ad00:	4618      	mov	r0, r3
   2ad02:	e7fc      	b.n	2acfe <bt_conn_ref+0x4a>
   2ad04:	0003e2e8 	.word	0x0003e2e8
   2ad08:	0003d1d7 	.word	0x0003d1d7

0002ad0c <bt_conn_unref>:
{
   2ad0c:	b510      	push	{r4, lr}
	old = atomic_dec(&conn->ref);
   2ad0e:	f100 03c0 	add.w	r3, r0, #192	; 0xc0
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   2ad12:	f3bf 8f5b 	dmb	ish
   2ad16:	e853 2f00 	ldrex	r2, [r3]
   2ad1a:	1e51      	subs	r1, r2, #1
   2ad1c:	e843 1400 	strex	r4, r1, [r3]
   2ad20:	2c00      	cmp	r4, #0
   2ad22:	d1f8      	bne.n	2ad16 <bt_conn_unref+0xa>
   2ad24:	f3bf 8f5b 	dmb	ish
	__ASSERT(old > 0, "Conn reference counter is 0");
   2ad28:	2a00      	cmp	r2, #0
   2ad2a:	dc0a      	bgt.n	2ad42 <bt_conn_unref+0x36>
   2ad2c:	490d      	ldr	r1, [pc, #52]	; (2ad64 <bt_conn_unref+0x58>)
   2ad2e:	480e      	ldr	r0, [pc, #56]	; (2ad68 <bt_conn_unref+0x5c>)
   2ad30:	f240 4295 	movw	r2, #1173	; 0x495
   2ad34:	f00d feed 	bl	38b12 <assert_print>
   2ad38:	480a      	ldr	r0, [pc, #40]	; (2ad64 <bt_conn_unref+0x58>)
   2ad3a:	f240 4195 	movw	r1, #1173	; 0x495
   2ad3e:	f00d fee1 	bl	38b04 <assert_post_action>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->type == BT_CONN_TYPE_LE &&
   2ad42:	8842      	ldrh	r2, [r0, #2]
   2ad44:	f240 1301 	movw	r3, #257	; 0x101
   2ad48:	429a      	cmp	r2, r3
   2ad4a:	d10a      	bne.n	2ad62 <bt_conn_unref+0x56>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2ad4c:	f3bf 8f5b 	dmb	ish
   2ad50:	f8d0 30c0 	ldr.w	r3, [r0, #192]	; 0xc0
   2ad54:	f3bf 8f5b 	dmb	ish
	    conn->role == BT_CONN_ROLE_PERIPHERAL && atomic_get(&conn->ref) == 0) {
   2ad58:	b91b      	cbnz	r3, 2ad62 <bt_conn_unref+0x56>
}
   2ad5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_le_adv_resume();
   2ad5e:	f7ff ba9d 	b.w	2a29c <bt_le_adv_resume>
}
   2ad62:	bd10      	pop	{r4, pc}
   2ad64:	0003e2e8 	.word	0x0003e2e8
   2ad68:	0003d1d7 	.word	0x0003d1d7

0002ad6c <bt_conn_lookup_handle>:
{
   2ad6c:	4602      	mov	r2, r0
	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
   2ad6e:	2101      	movs	r1, #1
   2ad70:	4801      	ldr	r0, [pc, #4]	; (2ad78 <bt_conn_lookup_handle+0xc>)
   2ad72:	f00e be5b 	b.w	39a2c <conn_lookup_handle>
   2ad76:	bf00      	nop
   2ad78:	20002780 	.word	0x20002780

0002ad7c <bt_conn_set_state>:
{
   2ad7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (conn->state == state) {
   2ad7e:	7a86      	ldrb	r6, [r0, #10]
   2ad80:	428e      	cmp	r6, r1
{
   2ad82:	af00      	add	r7, sp, #0
   2ad84:	4604      	mov	r4, r0
   2ad86:	460d      	mov	r5, r1
	if (conn->state == state) {
   2ad88:	d11d      	bne.n	2adc6 <bt_conn_set_state+0x4a>
		BT_WARN("no transition %s", state2str(state));
   2ad8a:	4b74      	ldr	r3, [pc, #464]	; (2af5c <bt_conn_set_state+0x1e0>)
   2ad8c:	681b      	ldr	r3, [r3, #0]
   2ad8e:	f013 0f06 	tst.w	r3, #6
   2ad92:	d059      	beq.n	2ae48 <bt_conn_set_state+0xcc>
	switch (state) {
   2ad94:	2e08      	cmp	r6, #8
   2ad96:	bf96      	itet	ls
   2ad98:	4b71      	ldrls	r3, [pc, #452]	; (2af60 <bt_conn_set_state+0x1e4>)
		BT_WARN("no transition %s", state2str(state));
   2ad9a:	4b72      	ldrhi	r3, [pc, #456]	; (2af64 <bt_conn_set_state+0x1e8>)
   2ad9c:	f853 3026 	ldrls.w	r3, [r3, r6, lsl #2]
   2ada0:	466c      	mov	r4, sp
   2ada2:	b088      	sub	sp, #32
   2ada4:	466a      	mov	r2, sp
   2ada6:	4970      	ldr	r1, [pc, #448]	; (2af68 <bt_conn_set_state+0x1ec>)
   2ada8:	486c      	ldr	r0, [pc, #432]	; (2af5c <bt_conn_set_state+0x1e0>)
   2adaa:	e9c2 1305 	strd	r1, r3, [r2, #20]
   2adae:	f44f 7300 	mov.w	r3, #512	; 0x200
   2adb2:	8393      	strh	r3, [r2, #28]
   2adb4:	4b6d      	ldr	r3, [pc, #436]	; (2af6c <bt_conn_set_state+0x1f0>)
   2adb6:	f842 3f10 	str.w	r3, [r2, #16]!
   2adba:	f44f 51e4 	mov.w	r1, #7296	; 0x1c80
		BT_WARN("no valid (%u) state was set", state);
   2adbe:	f00e fe26 	bl	39a0e <z_log_msg_static_create.constprop.0>
   2adc2:	46a5      	mov	sp, r4
   2adc4:	e040      	b.n	2ae48 <bt_conn_set_state+0xcc>
	conn->state = state;
   2adc6:	7281      	strb	r1, [r0, #10]
	switch (old_state) {
   2adc8:	b926      	cbnz	r6, 2add4 <bt_conn_set_state+0x58>
		if (conn->type != BT_CONN_TYPE_ISO) {
   2adca:	7883      	ldrb	r3, [r0, #2]
   2adcc:	2b08      	cmp	r3, #8
   2adce:	d001      	beq.n	2add4 <bt_conn_set_state+0x58>
			bt_conn_ref(conn);
   2add0:	f7ff ff70 	bl	2acb4 <bt_conn_ref>
	switch (conn->state) {
   2add4:	7aa3      	ldrb	r3, [r4, #10]
   2add6:	2b08      	cmp	r3, #8
   2add8:	f200 80b5 	bhi.w	2af46 <bt_conn_set_state+0x1ca>
   2addc:	e8df f003 	tbb	[pc, r3]
   2ade0:	34340536 	.word	0x34340536
   2ade4:	1c343434 	.word	0x1c343434
   2ade8:	34          	.byte	0x34
   2ade9:	00          	.byte	0x00
	z_impl_k_sem_give(sem);
   2adea:	4d61      	ldr	r5, [pc, #388]	; (2af70 <bt_conn_set_state+0x1f4>)
		tx->pending_no_cb = 0U;
   2adec:	2600      	movs	r6, #0
	__asm__ volatile(
   2adee:	f04f 0240 	mov.w	r2, #64	; 0x40
   2adf2:	f3ef 8311 	mrs	r3, BASEPRI
   2adf6:	f382 8812 	msr	BASEPRI_MAX, r2
   2adfa:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
   2adfe:	69e2      	ldr	r2, [r4, #28]
   2ae00:	2a00      	cmp	r2, #0
   2ae02:	d07c      	beq.n	2aefe <bt_conn_set_state+0x182>
			conn->pending_no_cb--;
   2ae04:	3a01      	subs	r2, #1
   2ae06:	61e2      	str	r2, [r4, #28]
	__asm__ volatile(
   2ae08:	f383 8811 	msr	BASEPRI, r3
   2ae0c:	f3bf 8f6f 	isb	sy
   2ae10:	4628      	mov	r0, r5
   2ae12:	f00a fcc9 	bl	357a8 <z_impl_k_sem_give>
}
   2ae16:	e7ea      	b.n	2adee <bt_conn_set_state+0x72>
		if (conn->type == BT_CONN_TYPE_SCO) {
   2ae18:	78a3      	ldrb	r3, [r4, #2]
   2ae1a:	2b04      	cmp	r3, #4
   2ae1c:	d014      	beq.n	2ae48 <bt_conn_set_state+0xcc>
	z_impl_k_queue_init(queue);
   2ae1e:	f104 0038 	add.w	r0, r4, #56	; 0x38
   2ae22:	f010 ff10 	bl	3bc46 <z_impl_k_queue_init>
	return z_impl_k_poll_signal_raise(sig, result);
   2ae26:	4853      	ldr	r0, [pc, #332]	; (2af74 <bt_conn_set_state+0x1f8>)
   2ae28:	2100      	movs	r1, #0
   2ae2a:	f00d f819 	bl	37e60 <z_impl_k_poll_signal_raise>
	list->head = NULL;
   2ae2e:	2300      	movs	r3, #0
	list->tail = NULL;
   2ae30:	e9c4 3315 	strd	r3, r3, [r4, #84]	; 0x54
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   2ae34:	78e3      	ldrb	r3, [r4, #3]
   2ae36:	2b01      	cmp	r3, #1
   2ae38:	d106      	bne.n	2ae48 <bt_conn_set_state+0xcc>
			k_work_schedule(&conn->deferred_work,
   2ae3a:	f44f 3220 	mov.w	r2, #163840	; 0x28000
   2ae3e:	2300      	movs	r3, #0
   2ae40:	f104 0060 	add.w	r0, r4, #96	; 0x60
   2ae44:	f00b f92a 	bl	3609c <k_work_schedule>
}
   2ae48:	46bd      	mov	sp, r7
   2ae4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (conn->type == BT_CONN_TYPE_SCO) {
   2ae4c:	78a3      	ldrb	r3, [r4, #2]
   2ae4e:	2b04      	cmp	r3, #4
   2ae50:	d103      	bne.n	2ae5a <bt_conn_set_state+0xde>
			bt_conn_unref(conn);
   2ae52:	4620      	mov	r0, r4
   2ae54:	f7ff ff5a 	bl	2ad0c <bt_conn_unref>
			break;
   2ae58:	e7f6      	b.n	2ae48 <bt_conn_set_state+0xcc>
		switch (old_state) {
   2ae5a:	2e08      	cmp	r6, #8
   2ae5c:	d8f4      	bhi.n	2ae48 <bt_conn_set_state+0xcc>
   2ae5e:	a301      	add	r3, pc, #4	; (adr r3, 2ae64 <bt_conn_set_state+0xe8>)
   2ae60:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
   2ae64:	0002aedd 	.word	0x0002aedd
   2ae68:	0002ae89 	.word	0x0002ae89
   2ae6c:	0002aecf 	.word	0x0002aecf
   2ae70:	0002ae53 	.word	0x0002ae53
   2ae74:	0002ae53 	.word	0x0002ae53
   2ae78:	0002aecf 	.word	0x0002aecf
   2ae7c:	0002aecf 	.word	0x0002aecf
   2ae80:	0002ae49 	.word	0x0002ae49
   2ae84:	0002aedd 	.word	0x0002aedd
			tx_notify(conn);
   2ae88:	4620      	mov	r0, r4
   2ae8a:	f7ff fc23 	bl	2a6d4 <tx_notify>
			if ((conn->type == BT_CONN_TYPE_LE) &&
   2ae8e:	78a3      	ldrb	r3, [r4, #2]
   2ae90:	2b01      	cmp	r3, #1
   2ae92:	d10a      	bne.n	2aeaa <bt_conn_set_state+0x12e>
			    (k_work_delayable_busy_get(&conn->deferred_work) &
   2ae94:	f104 0560 	add.w	r5, r4, #96	; 0x60
   2ae98:	4628      	mov	r0, r5
   2ae9a:	f010 ff6a 	bl	3bd72 <k_work_delayable_busy_get>
			if ((conn->type == BT_CONN_TYPE_LE) &&
   2ae9e:	f010 0f0c 	tst.w	r0, #12
   2aea2:	d002      	beq.n	2aeaa <bt_conn_set_state+0x12e>
				k_work_cancel_delayable(&conn->deferred_work);
   2aea4:	4628      	mov	r0, r5
   2aea6:	f00b f963 	bl	36170 <k_work_cancel_delayable>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2aeaa:	f3bf 8f5b 	dmb	ish
   2aeae:	3404      	adds	r4, #4
   2aeb0:	e854 3f00 	ldrex	r3, [r4]
   2aeb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2aeb8:	e844 3200 	strex	r2, r3, [r4]
   2aebc:	2a00      	cmp	r2, #0
   2aebe:	d1f7      	bne.n	2aeb0 <bt_conn_set_state+0x134>
   2aec0:	f3bf 8f5b 	dmb	ish
   2aec4:	2100      	movs	r1, #0
   2aec6:	482b      	ldr	r0, [pc, #172]	; (2af74 <bt_conn_set_state+0x1f8>)
   2aec8:	f00c ffca 	bl	37e60 <z_impl_k_poll_signal_raise>
   2aecc:	e7bc      	b.n	2ae48 <bt_conn_set_state+0xcc>
			if (conn->err) {
   2aece:	7a63      	ldrb	r3, [r4, #9]
   2aed0:	2b00      	cmp	r3, #0
   2aed2:	d0be      	beq.n	2ae52 <bt_conn_set_state+0xd6>
				notify_connected(conn);
   2aed4:	4620      	mov	r0, r4
   2aed6:	f7ff fbcf 	bl	2a678 <notify_connected>
   2aeda:	e7ba      	b.n	2ae52 <bt_conn_set_state+0xd6>
			BT_WARN("Invalid (%u) old state", state);
   2aedc:	481f      	ldr	r0, [pc, #124]	; (2af5c <bt_conn_set_state+0x1e0>)
   2aede:	6803      	ldr	r3, [r0, #0]
   2aee0:	f013 0f06 	tst.w	r3, #6
   2aee4:	d0b0      	beq.n	2ae48 <bt_conn_set_state+0xcc>
   2aee6:	466c      	mov	r4, sp
   2aee8:	b088      	sub	sp, #32
   2aeea:	466a      	mov	r2, sp
   2aeec:	4b22      	ldr	r3, [pc, #136]	; (2af78 <bt_conn_set_state+0x1fc>)
		BT_WARN("no valid (%u) state was set", state);
   2aeee:	e9c2 3505 	strd	r3, r5, [r2, #20]
   2aef2:	2303      	movs	r3, #3
   2aef4:	f842 3f10 	str.w	r3, [r2, #16]!
   2aef8:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   2aefc:	e75f      	b.n	2adbe <bt_conn_set_state+0x42>
	return list->head;
   2aefe:	6961      	ldr	r1, [r4, #20]
Z_GENLIST_GET(slist, snode)
   2af00:	b921      	cbnz	r1, 2af0c <bt_conn_set_state+0x190>
   2af02:	f383 8811 	msr	BASEPRI, r3
   2af06:	f3bf 8f6f 	isb	sy
		if (!node) {
   2af0a:	e79d      	b.n	2ae48 <bt_conn_set_state+0xcc>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2af0c:	69a0      	ldr	r0, [r4, #24]
	return node->next;
   2af0e:	680a      	ldr	r2, [r1, #0]
	list->head = node;
   2af10:	6162      	str	r2, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2af12:	4281      	cmp	r1, r0
	list->tail = node;
   2af14:	bf08      	it	eq
   2af16:	61a2      	streq	r2, [r4, #24]
   2af18:	f383 8811 	msr	BASEPRI, r3
   2af1c:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   2af20:	f04f 0240 	mov.w	r2, #64	; 0x40
   2af24:	f3ef 8311 	mrs	r3, BASEPRI
   2af28:	f382 8812 	msr	BASEPRI_MAX, r2
   2af2c:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
   2af30:	68ca      	ldr	r2, [r1, #12]
   2af32:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
   2af34:	60ce      	str	r6, [r1, #12]
	__asm__ volatile(
   2af36:	f383 8811 	msr	BASEPRI, r3
   2af3a:	f3bf 8f6f 	isb	sy
		conn_tx_destroy(conn, tx);
   2af3e:	4620      	mov	r0, r4
   2af40:	f7ff fbf8 	bl	2a734 <conn_tx_destroy>
   2af44:	e764      	b.n	2ae10 <bt_conn_set_state+0x94>
		BT_WARN("no valid (%u) state was set", state);
   2af46:	4805      	ldr	r0, [pc, #20]	; (2af5c <bt_conn_set_state+0x1e0>)
   2af48:	6803      	ldr	r3, [r0, #0]
   2af4a:	f013 0f06 	tst.w	r3, #6
   2af4e:	f43f af7b 	beq.w	2ae48 <bt_conn_set_state+0xcc>
   2af52:	466c      	mov	r4, sp
   2af54:	b088      	sub	sp, #32
   2af56:	466a      	mov	r2, sp
   2af58:	4b08      	ldr	r3, [pc, #32]	; (2af7c <bt_conn_set_state+0x200>)
   2af5a:	e7c8      	b.n	2aeee <bt_conn_set_state+0x172>
   2af5c:	20000a80 	.word	0x20000a80
   2af60:	0003c8a0 	.word	0x0003c8a0
   2af64:	0003e406 	.word	0x0003e406
   2af68:	0003e410 	.word	0x0003e410
   2af6c:	01000003 	.word	0x01000003
   2af70:	200004e0 	.word	0x200004e0
   2af74:	200006bc 	.word	0x200006bc
   2af78:	0003e421 	.word	0x0003e421
   2af7c:	0003e438 	.word	0x0003e438

0002af80 <bt_conn_index>:
		index = conn - acl_conns;
   2af80:	4a0a      	ldr	r2, [pc, #40]	; (2afac <bt_conn_index+0x2c>)
   2af82:	490b      	ldr	r1, [pc, #44]	; (2afb0 <bt_conn_index+0x30>)
{
   2af84:	b508      	push	{r3, lr}
		index = conn - acl_conns;
   2af86:	1a83      	subs	r3, r0, r2
   2af88:	10db      	asrs	r3, r3, #3
		__ASSERT(index >= 0 && index < ARRAY_SIZE(acl_conns),
   2af8a:	4290      	cmp	r0, r2
		index = conn - acl_conns;
   2af8c:	fb01 f303 	mul.w	r3, r1, r3
		__ASSERT(index >= 0 && index < ARRAY_SIZE(acl_conns),
   2af90:	d00a      	beq.n	2afa8 <bt_conn_index+0x28>
   2af92:	4908      	ldr	r1, [pc, #32]	; (2afb4 <bt_conn_index+0x34>)
   2af94:	4808      	ldr	r0, [pc, #32]	; (2afb8 <bt_conn_index+0x38>)
   2af96:	f240 42b3 	movw	r2, #1203	; 0x4b3
   2af9a:	f00d fdba 	bl	38b12 <assert_print>
   2af9e:	4805      	ldr	r0, [pc, #20]	; (2afb4 <bt_conn_index+0x34>)
   2afa0:	f240 41b3 	movw	r1, #1203	; 0x4b3
   2afa4:	f00d fdae 	bl	38b04 <assert_post_action>
}
   2afa8:	b2d8      	uxtb	r0, r3
   2afaa:	bd08      	pop	{r3, pc}
   2afac:	20002780 	.word	0x20002780
   2afb0:	c28f5c29 	.word	0xc28f5c29
   2afb4:	0003e2e8 	.word	0x0003e2e8
   2afb8:	0003d1d7 	.word	0x0003d1d7

0002afbc <bt_conn_create_pdu_timeout>:
{
   2afbc:	b5f0      	push	{r4, r5, r6, r7, lr}
   2afbe:	b087      	sub	sp, #28
   2afc0:	4604      	mov	r4, r0
   2afc2:	460d      	mov	r5, r1
   2afc4:	4617      	mov	r7, r2
   2afc6:	461e      	mov	r6, r3
	__ASSERT_NO_MSG(!k_is_in_isr());
   2afc8:	f010 fe15 	bl	3bbf6 <k_is_in_isr>
   2afcc:	b150      	cbz	r0, 2afe4 <bt_conn_create_pdu_timeout+0x28>
   2afce:	4916      	ldr	r1, [pc, #88]	; (2b028 <bt_conn_create_pdu_timeout+0x6c>)
   2afd0:	4816      	ldr	r0, [pc, #88]	; (2b02c <bt_conn_create_pdu_timeout+0x70>)
   2afd2:	f240 42cf 	movw	r2, #1231	; 0x4cf
   2afd6:	f00d fd9c 	bl	38b12 <assert_print>
   2afda:	4813      	ldr	r0, [pc, #76]	; (2b028 <bt_conn_create_pdu_timeout+0x6c>)
   2afdc:	f240 41cf 	movw	r1, #1231	; 0x4cf
   2afe0:	f00d fd90 	bl	38b04 <assert_post_action>
	return net_buf_alloc_fixed(pool, timeout);
   2afe4:	4912      	ldr	r1, [pc, #72]	; (2b030 <bt_conn_create_pdu_timeout+0x74>)
   2afe6:	463a      	mov	r2, r7
   2afe8:	2c00      	cmp	r4, #0
   2afea:	bf14      	ite	ne
   2afec:	4620      	movne	r0, r4
   2afee:	4608      	moveq	r0, r1
   2aff0:	4633      	mov	r3, r6
   2aff2:	f00f fd78 	bl	3aae6 <net_buf_alloc_fixed>
	if (!buf) {
   2aff6:	4604      	mov	r4, r0
   2aff8:	b980      	cbnz	r0, 2b01c <bt_conn_create_pdu_timeout+0x60>
		BT_WARN("Unable to allocate buffer within timeout");
   2affa:	480e      	ldr	r0, [pc, #56]	; (2b034 <bt_conn_create_pdu_timeout+0x78>)
   2affc:	6803      	ldr	r3, [r0, #0]
   2affe:	f013 0f06 	tst.w	r3, #6
   2b002:	d008      	beq.n	2b016 <bt_conn_create_pdu_timeout+0x5a>
   2b004:	4b0c      	ldr	r3, [pc, #48]	; (2b038 <bt_conn_create_pdu_timeout+0x7c>)
   2b006:	9305      	str	r3, [sp, #20]
   2b008:	aa04      	add	r2, sp, #16
   2b00a:	2302      	movs	r3, #2
   2b00c:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   2b010:	9304      	str	r3, [sp, #16]
   2b012:	f00e fcfc 	bl	39a0e <z_log_msg_static_create.constprop.0>
}
   2b016:	4620      	mov	r0, r4
   2b018:	b007      	add	sp, #28
   2b01a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	net_buf_simple_reserve(&buf->b, reserve);
   2b01c:	1d29      	adds	r1, r5, #4
   2b01e:	3008      	adds	r0, #8
   2b020:	f003 fb26 	bl	2e670 <net_buf_simple_reserve>
	return buf;
   2b024:	e7f7      	b.n	2b016 <bt_conn_create_pdu_timeout+0x5a>
   2b026:	bf00      	nop
   2b028:	0003e2e8 	.word	0x0003e2e8
   2b02c:	0003d1d7 	.word	0x0003d1d7
   2b030:	20000bec 	.word	0x20000bec
   2b034:	20000a80 	.word	0x20000a80
   2b038:	0003e454 	.word	0x0003e454

0002b03c <notify_le_param_updated>:
	}
}
#endif /* defined(CONFIG_BT_REMOTE_INFO) */

void notify_le_param_updated(struct bt_conn *conn)
{
   2b03c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2b03e:	f3bf 8f5b 	dmb	ish
   2b042:	6842      	ldr	r2, [r0, #4]
   2b044:	f3bf 8f5b 	dmb	ish
	struct bt_conn_cb *cb;

	/* If new connection parameters meet requirement of pending
	 * parameters don't send peripheral conn param request anymore on timeout
	 */
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   2b048:	05d2      	lsls	r2, r2, #23
{
   2b04a:	4604      	mov	r4, r0
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   2b04c:	f100 0304 	add.w	r3, r0, #4
   2b050:	d519      	bpl.n	2b086 <notify_le_param_updated+0x4a>
	    conn->le.interval >= conn->le.interval_min &&
   2b052:	f8b0 20a6 	ldrh.w	r2, [r0, #166]	; 0xa6
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   2b056:	f8b0 10a8 	ldrh.w	r1, [r0, #168]	; 0xa8
   2b05a:	4291      	cmp	r1, r2
   2b05c:	d813      	bhi.n	2b086 <notify_le_param_updated+0x4a>
	    conn->le.interval >= conn->le.interval_min &&
   2b05e:	f8b0 10aa 	ldrh.w	r1, [r0, #170]	; 0xaa
   2b062:	4291      	cmp	r1, r2
   2b064:	d30f      	bcc.n	2b086 <notify_le_param_updated+0x4a>
	    conn->le.interval <= conn->le.interval_max &&
	    conn->le.latency == conn->le.pending_latency &&
   2b066:	e9d0 122b 	ldrd	r1, r2, [r0, #172]	; 0xac
   2b06a:	4291      	cmp	r1, r2
   2b06c:	d10b      	bne.n	2b086 <notify_le_param_updated+0x4a>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2b06e:	f3bf 8f5b 	dmb	ish
   2b072:	e853 1f00 	ldrex	r1, [r3]
   2b076:	f421 7180 	bic.w	r1, r1, #256	; 0x100
   2b07a:	e843 1200 	strex	r2, r1, [r3]
   2b07e:	2a00      	cmp	r2, #0
   2b080:	d1f7      	bne.n	2b072 <notify_le_param_updated+0x36>
   2b082:	f3bf 8f5b 	dmb	ish
	    conn->le.timeout == conn->le.pending_timeout) {
		atomic_clear_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET);
	}

	for (cb = callback_list; cb; cb = cb->_next) {
   2b086:	4b16      	ldr	r3, [pc, #88]	; (2b0e0 <notify_le_param_updated+0xa4>)
   2b088:	681d      	ldr	r5, [r3, #0]
   2b08a:	b975      	cbnz	r5, 2b0aa <notify_le_param_updated+0x6e>
					     conn->le.latency,
					     conn->le.timeout);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   2b08c:	4d15      	ldr	r5, [pc, #84]	; (2b0e4 <notify_le_param_updated+0xa8>)
   2b08e:	4f16      	ldr	r7, [pc, #88]	; (2b0e8 <notify_le_param_updated+0xac>)
   2b090:	42bd      	cmp	r5, r7
   2b092:	d922      	bls.n	2b0da <notify_le_param_updated+0x9e>
   2b094:	4915      	ldr	r1, [pc, #84]	; (2b0ec <notify_le_param_updated+0xb0>)
   2b096:	4816      	ldr	r0, [pc, #88]	; (2b0f0 <notify_le_param_updated+0xb4>)
   2b098:	f240 52a2 	movw	r2, #1442	; 0x5a2
   2b09c:	f00d fd39 	bl	38b12 <assert_print>
   2b0a0:	4812      	ldr	r0, [pc, #72]	; (2b0ec <notify_le_param_updated+0xb0>)
   2b0a2:	f240 51a2 	movw	r1, #1442	; 0x5a2
   2b0a6:	f00d fd2d 	bl	38b04 <assert_post_action>
		if (cb->le_param_updated) {
   2b0aa:	68ee      	ldr	r6, [r5, #12]
   2b0ac:	b13e      	cbz	r6, 2b0be <notify_le_param_updated+0x82>
			cb->le_param_updated(conn, conn->le.interval,
   2b0ae:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
   2b0b2:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	; 0xac
   2b0b6:	f8b4 10a6 	ldrh.w	r1, [r4, #166]	; 0xa6
   2b0ba:	4620      	mov	r0, r4
   2b0bc:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
   2b0be:	692d      	ldr	r5, [r5, #16]
   2b0c0:	e7e3      	b.n	2b08a <notify_le_param_updated+0x4e>
		if (cb->le_param_updated) {
   2b0c2:	68ee      	ldr	r6, [r5, #12]
   2b0c4:	b13e      	cbz	r6, 2b0d6 <notify_le_param_updated+0x9a>
			cb->le_param_updated(conn, conn->le.interval,
   2b0c6:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
   2b0ca:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	; 0xac
   2b0ce:	f8b4 10a6 	ldrh.w	r1, [r4, #166]	; 0xa6
   2b0d2:	4620      	mov	r0, r4
   2b0d4:	47b0      	blx	r6
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   2b0d6:	3514      	adds	r5, #20
   2b0d8:	e7da      	b.n	2b090 <notify_le_param_updated+0x54>
   2b0da:	d3f2      	bcc.n	2b0c2 <notify_le_param_updated+0x86>
					     conn->le.latency,
					     conn->le.timeout);
		}
	}
}
   2b0dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2b0de:	bf00      	nop
   2b0e0:	20002e58 	.word	0x20002e58
   2b0e4:	0003c47c 	.word	0x0003c47c
   2b0e8:	0003c47c 	.word	0x0003c47c
   2b0ec:	0003e2e8 	.word	0x0003e2e8
   2b0f0:	0003d1d7 	.word	0x0003d1d7

0002b0f4 <le_param_req>:
	}
}
#endif

bool le_param_req(struct bt_conn *conn, struct bt_le_conn_param *param)
{
   2b0f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2b0f8:	4607      	mov	r7, r0
	struct bt_conn_cb *cb;

	if (!bt_le_conn_params_valid(param)) {
   2b0fa:	4608      	mov	r0, r1
{
   2b0fc:	460c      	mov	r4, r1
	if (!bt_le_conn_params_valid(param)) {
   2b0fe:	f00e fa60 	bl	395c2 <bt_le_conn_params_valid>
   2b102:	4605      	mov	r5, r0
   2b104:	b918      	cbnz	r0, 2b10e <le_param_req+0x1a>
		return false;
   2b106:	2500      	movs	r5, #0
		}
	}

	/* Default to accepting if there's no app callback */
	return true;
}
   2b108:	4628      	mov	r0, r5
   2b10a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
   2b10e:	4b19      	ldr	r3, [pc, #100]	; (2b174 <le_param_req+0x80>)
   2b110:	681e      	ldr	r6, [r3, #0]
   2b112:	b97e      	cbnz	r6, 2b134 <le_param_req+0x40>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   2b114:	4e18      	ldr	r6, [pc, #96]	; (2b178 <le_param_req+0x84>)
   2b116:	f8df 8064 	ldr.w	r8, [pc, #100]	; 2b17c <le_param_req+0x88>
   2b11a:	4546      	cmp	r6, r8
   2b11c:	d923      	bls.n	2b166 <le_param_req+0x72>
   2b11e:	4918      	ldr	r1, [pc, #96]	; (2b180 <le_param_req+0x8c>)
   2b120:	4818      	ldr	r0, [pc, #96]	; (2b184 <le_param_req+0x90>)
   2b122:	f240 52ea 	movw	r2, #1514	; 0x5ea
   2b126:	f00d fcf4 	bl	38b12 <assert_print>
   2b12a:	4815      	ldr	r0, [pc, #84]	; (2b180 <le_param_req+0x8c>)
   2b12c:	f240 51ea 	movw	r1, #1514	; 0x5ea
   2b130:	f00d fce8 	bl	38b04 <assert_post_action>
		if (!cb->le_param_req) {
   2b134:	68b3      	ldr	r3, [r6, #8]
   2b136:	b90b      	cbnz	r3, 2b13c <le_param_req+0x48>
	for (cb = callback_list; cb; cb = cb->_next) {
   2b138:	6936      	ldr	r6, [r6, #16]
   2b13a:	e7ea      	b.n	2b112 <le_param_req+0x1e>
		if (!cb->le_param_req(conn, param)) {
   2b13c:	4621      	mov	r1, r4
   2b13e:	4638      	mov	r0, r7
   2b140:	4798      	blx	r3
   2b142:	2800      	cmp	r0, #0
   2b144:	d0df      	beq.n	2b106 <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
   2b146:	4620      	mov	r0, r4
   2b148:	f00e fa3b 	bl	395c2 <bt_le_conn_params_valid>
   2b14c:	2800      	cmp	r0, #0
   2b14e:	d1f3      	bne.n	2b138 <le_param_req+0x44>
   2b150:	e7d9      	b.n	2b106 <le_param_req+0x12>
		if (!cb->le_param_req(conn, param)) {
   2b152:	4621      	mov	r1, r4
   2b154:	4638      	mov	r0, r7
   2b156:	4798      	blx	r3
   2b158:	2800      	cmp	r0, #0
   2b15a:	d0d4      	beq.n	2b106 <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
   2b15c:	4620      	mov	r0, r4
   2b15e:	f00e fa30 	bl	395c2 <bt_le_conn_params_valid>
   2b162:	b920      	cbnz	r0, 2b16e <le_param_req+0x7a>
   2b164:	e7cf      	b.n	2b106 <le_param_req+0x12>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   2b166:	d2cf      	bcs.n	2b108 <le_param_req+0x14>
		if (!cb->le_param_req) {
   2b168:	68b3      	ldr	r3, [r6, #8]
   2b16a:	2b00      	cmp	r3, #0
   2b16c:	d1f1      	bne.n	2b152 <le_param_req+0x5e>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   2b16e:	3614      	adds	r6, #20
   2b170:	e7d3      	b.n	2b11a <le_param_req+0x26>
   2b172:	bf00      	nop
   2b174:	20002e58 	.word	0x20002e58
   2b178:	0003c47c 	.word	0x0003c47c
   2b17c:	0003c47c 	.word	0x0003c47c
   2b180:	0003e2e8 	.word	0x0003e2e8
   2b184:	0003d1d7 	.word	0x0003d1d7

0002b188 <bt_conn_cb_register>:
}
#endif /* CONFIG_BT_SMP */

void bt_conn_cb_register(struct bt_conn_cb *cb)
{
	cb->_next = callback_list;
   2b188:	4b02      	ldr	r3, [pc, #8]	; (2b194 <bt_conn_cb_register+0xc>)
   2b18a:	681a      	ldr	r2, [r3, #0]
   2b18c:	6102      	str	r2, [r0, #16]
	callback_list = cb;
   2b18e:	6018      	str	r0, [r3, #0]
}
   2b190:	4770      	bx	lr
   2b192:	bf00      	nop
   2b194:	20002e58 	.word	0x20002e58

0002b198 <bt_conn_add_le>:

	return false;
}

struct bt_conn *bt_conn_add_le(uint8_t id, const bt_addr_le_t *peer)
{
   2b198:	b570      	push	{r4, r5, r6, lr}
   2b19a:	4606      	mov	r6, r0
   2b19c:	460d      	mov	r5, r1
	return bt_conn_new(acl_conns, ARRAY_SIZE(acl_conns));
   2b19e:	4809      	ldr	r0, [pc, #36]	; (2b1c4 <bt_conn_add_le+0x2c>)
   2b1a0:	2101      	movs	r1, #1
   2b1a2:	f7ff fbb5 	bl	2a910 <bt_conn_new>
	struct bt_conn *conn = acl_conn_new();

	if (!conn) {
   2b1a6:	4604      	mov	r4, r0
   2b1a8:	b150      	cbz	r0, 2b1c0 <bt_conn_add_le+0x28>
		return NULL;
	}

	conn->id = id;
   2b1aa:	7206      	strb	r6, [r0, #8]
	memcpy(dst, src, sizeof(*dst));
   2b1ac:	2207      	movs	r2, #7
   2b1ae:	4629      	mov	r1, r5
   2b1b0:	3090      	adds	r0, #144	; 0x90
   2b1b2:	f00e f8fd 	bl	393b0 <memcpy>
	bt_addr_le_copy(&conn->le.dst, peer);
#if defined(CONFIG_BT_SMP)
	conn->sec_level = BT_SECURITY_L1;
	conn->required_sec_level = BT_SECURITY_L1;
#endif /* CONFIG_BT_SMP */
	conn->type = BT_CONN_TYPE_LE;
   2b1b6:	2301      	movs	r3, #1
   2b1b8:	70a3      	strb	r3, [r4, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
   2b1ba:	4b03      	ldr	r3, [pc, #12]	; (2b1c8 <bt_conn_add_le+0x30>)
   2b1bc:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;

	return conn;
}
   2b1c0:	4620      	mov	r0, r4
   2b1c2:	bd70      	pop	{r4, r5, r6, pc}
   2b1c4:	20002780 	.word	0x20002780
   2b1c8:	00280018 	.word	0x00280018

0002b1cc <bt_conn_lookup_addr_le>:

	return bt_addr_le_eq(peer, &conn->le.init_addr);
}

struct bt_conn *bt_conn_lookup_addr_le(uint8_t id, const bt_addr_le_t *peer)
{
   2b1cc:	b570      	push	{r4, r5, r6, lr}
   2b1ce:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   2b1d0:	480a      	ldr	r0, [pc, #40]	; (2b1fc <bt_conn_lookup_addr_le+0x30>)
{
   2b1d2:	460e      	mov	r6, r1
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   2b1d4:	f7ff fd6e 	bl	2acb4 <bt_conn_ref>
   2b1d8:	4604      	mov	r4, r0

		if (!conn) {
   2b1da:	b120      	cbz	r0, 2b1e6 <bt_conn_lookup_addr_le+0x1a>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
   2b1dc:	7883      	ldrb	r3, [r0, #2]
   2b1de:	2b01      	cmp	r3, #1
   2b1e0:	d004      	beq.n	2b1ec <bt_conn_lookup_addr_le+0x20>
			bt_conn_unref(conn);
			continue;
		}

		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
			bt_conn_unref(conn);
   2b1e2:	f7ff fd93 	bl	2ad0c <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
   2b1e6:	2400      	movs	r4, #0
}
   2b1e8:	4620      	mov	r0, r4
   2b1ea:	bd70      	pop	{r4, r5, r6, pc}
		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
   2b1ec:	4632      	mov	r2, r6
   2b1ee:	4629      	mov	r1, r5
   2b1f0:	f00e fc49 	bl	39a86 <bt_conn_is_peer_addr_le>
   2b1f4:	2800      	cmp	r0, #0
   2b1f6:	d1f7      	bne.n	2b1e8 <bt_conn_lookup_addr_le+0x1c>
			bt_conn_unref(conn);
   2b1f8:	4620      	mov	r0, r4
   2b1fa:	e7f2      	b.n	2b1e2 <bt_conn_lookup_addr_le+0x16>
   2b1fc:	20002780 	.word	0x20002780

0002b200 <bt_conn_exists_le>:
{
   2b200:	b5b0      	push	{r4, r5, r7, lr}
   2b202:	af00      	add	r7, sp, #0
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, peer);
   2b204:	f7ff ffe2 	bl	2b1cc <bt_conn_lookup_addr_le>
	if (conn) {
   2b208:	4604      	mov	r4, r0
   2b20a:	b308      	cbz	r0, 2b250 <bt_conn_exists_le+0x50>
		BT_WARN("Found valid connection in %s state",
   2b20c:	4b11      	ldr	r3, [pc, #68]	; (2b254 <bt_conn_exists_le+0x54>)
   2b20e:	681b      	ldr	r3, [r3, #0]
   2b210:	f013 0f06 	tst.w	r3, #6
   2b214:	d018      	beq.n	2b248 <bt_conn_exists_le+0x48>
   2b216:	7a83      	ldrb	r3, [r0, #10]
	switch (state) {
   2b218:	2b08      	cmp	r3, #8
   2b21a:	bf96      	itet	ls
   2b21c:	4a0e      	ldrls	r2, [pc, #56]	; (2b258 <bt_conn_exists_le+0x58>)
		BT_WARN("Found valid connection in %s state",
   2b21e:	4b0f      	ldrhi	r3, [pc, #60]	; (2b25c <bt_conn_exists_le+0x5c>)
   2b220:	f852 3023 	ldrls.w	r3, [r2, r3, lsl #2]
   2b224:	466d      	mov	r5, sp
   2b226:	b088      	sub	sp, #32
   2b228:	466a      	mov	r2, sp
   2b22a:	490d      	ldr	r1, [pc, #52]	; (2b260 <bt_conn_exists_le+0x60>)
   2b22c:	4809      	ldr	r0, [pc, #36]	; (2b254 <bt_conn_exists_le+0x54>)
   2b22e:	e9c2 1305 	strd	r1, r3, [r2, #20]
   2b232:	f44f 7300 	mov.w	r3, #512	; 0x200
   2b236:	8393      	strh	r3, [r2, #28]
   2b238:	4b0a      	ldr	r3, [pc, #40]	; (2b264 <bt_conn_exists_le+0x64>)
   2b23a:	f842 3f10 	str.w	r3, [r2, #16]!
   2b23e:	f44f 51e4 	mov.w	r1, #7296	; 0x1c80
   2b242:	f00e fbe4 	bl	39a0e <z_log_msg_static_create.constprop.0>
   2b246:	46ad      	mov	sp, r5
		bt_conn_unref(conn);
   2b248:	4620      	mov	r0, r4
   2b24a:	f7ff fd5f 	bl	2ad0c <bt_conn_unref>
		return true;
   2b24e:	2001      	movs	r0, #1
}
   2b250:	46bd      	mov	sp, r7
   2b252:	bdb0      	pop	{r4, r5, r7, pc}
   2b254:	20000a80 	.word	0x20000a80
   2b258:	0003c8a0 	.word	0x0003c8a0
   2b25c:	0003e406 	.word	0x0003e406
   2b260:	0003e47d 	.word	0x0003e47d
   2b264:	01000003 	.word	0x01000003

0002b268 <bt_conn_lookup_state_le>:

struct bt_conn *bt_conn_lookup_state_le(uint8_t id, const bt_addr_le_t *peer,
					const bt_conn_state_t state)
{
   2b268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2b26a:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   2b26c:	480e      	ldr	r0, [pc, #56]	; (2b2a8 <bt_conn_lookup_state_le+0x40>)
{
   2b26e:	460e      	mov	r6, r1
   2b270:	4617      	mov	r7, r2
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   2b272:	f7ff fd1f 	bl	2acb4 <bt_conn_ref>

		if (!conn) {
   2b276:	4604      	mov	r4, r0
   2b278:	b120      	cbz	r0, 2b284 <bt_conn_lookup_state_le+0x1c>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
   2b27a:	7883      	ldrb	r3, [r0, #2]
   2b27c:	2b01      	cmp	r3, #1
   2b27e:	d003      	beq.n	2b288 <bt_conn_lookup_state_le+0x20>
			bt_conn_unref(conn);
			continue;
		}

		if (!(conn->state == state && conn->id == id)) {
			bt_conn_unref(conn);
   2b280:	f7ff fd44 	bl	2ad0c <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
   2b284:	2400      	movs	r4, #0
   2b286:	e00d      	b.n	2b2a4 <bt_conn_lookup_state_le+0x3c>
		if (peer && !bt_conn_is_peer_addr_le(conn, id, peer)) {
   2b288:	b136      	cbz	r6, 2b298 <bt_conn_lookup_state_le+0x30>
   2b28a:	4632      	mov	r2, r6
   2b28c:	4629      	mov	r1, r5
   2b28e:	f00e fbfa 	bl	39a86 <bt_conn_is_peer_addr_le>
   2b292:	b908      	cbnz	r0, 2b298 <bt_conn_lookup_state_le+0x30>
			bt_conn_unref(conn);
   2b294:	4620      	mov	r0, r4
   2b296:	e7f3      	b.n	2b280 <bt_conn_lookup_state_le+0x18>
		if (!(conn->state == state && conn->id == id)) {
   2b298:	7aa3      	ldrb	r3, [r4, #10]
   2b29a:	42bb      	cmp	r3, r7
   2b29c:	d1fa      	bne.n	2b294 <bt_conn_lookup_state_le+0x2c>
   2b29e:	7a23      	ldrb	r3, [r4, #8]
   2b2a0:	42ab      	cmp	r3, r5
   2b2a2:	d1f7      	bne.n	2b294 <bt_conn_lookup_state_le+0x2c>
}
   2b2a4:	4620      	mov	r0, r4
   2b2a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2b2a8:	20002780 	.word	0x20002780

0002b2ac <bt_conn_get_info>:
		return 0;
	}
}

int bt_conn_get_info(const struct bt_conn *conn, struct bt_conn_info *info)
{
   2b2ac:	b510      	push	{r4, lr}
	info->type = conn->type;
   2b2ae:	7883      	ldrb	r3, [r0, #2]
   2b2b0:	700b      	strb	r3, [r1, #0]
	info->role = conn->role;
   2b2b2:	78c3      	ldrb	r3, [r0, #3]
   2b2b4:	704b      	strb	r3, [r1, #1]
	info->id = conn->id;
   2b2b6:	7a03      	ldrb	r3, [r0, #8]
   2b2b8:	708b      	strb	r3, [r1, #2]
	info->state = conn_internal_to_public_state(conn->state);
   2b2ba:	7a83      	ldrb	r3, [r0, #10]
	switch (state) {
   2b2bc:	2b08      	cmp	r3, #8
   2b2be:	d80c      	bhi.n	2b2da <bt_conn_get_info+0x2e>
	info->state = conn_internal_to_public_state(conn->state);
   2b2c0:	4a24      	ldr	r2, [pc, #144]	; (2b354 <bt_conn_get_info+0xa8>)
   2b2c2:	5cd3      	ldrb	r3, [r2, r3]
   2b2c4:	770b      	strb	r3, [r1, #28]
	info->security.flags = 0;
	info->security.level = bt_conn_get_security(conn);
   2b2c6:	2301      	movs	r3, #1
   2b2c8:	774b      	strb	r3, [r1, #29]
#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_BREDR)
	info->security.enc_key_size = bt_conn_enc_key_size(conn);
#else
	info->security.enc_key_size = 0;
   2b2ca:	2300      	movs	r3, #0
   2b2cc:	83cb      	strh	r3, [r1, #30]
#endif /* CONFIG_BT_SMP || CONFIG_BT_BREDR */

	switch (conn->type) {
   2b2ce:	7883      	ldrb	r3, [r0, #2]
   2b2d0:	2b01      	cmp	r3, #1
   2b2d2:	d00d      	beq.n	2b2f0 <bt_conn_get_info+0x44>
		}
		return 0;
#endif
	}

	return -EINVAL;
   2b2d4:	f06f 0015 	mvn.w	r0, #21
}
   2b2d8:	bd10      	pop	{r4, pc}
		__ASSERT(false, "Invalid conn state %u", state);
   2b2da:	491f      	ldr	r1, [pc, #124]	; (2b358 <bt_conn_get_info+0xac>)
   2b2dc:	481f      	ldr	r0, [pc, #124]	; (2b35c <bt_conn_get_info+0xb0>)
   2b2de:	f640 02fa 	movw	r2, #2298	; 0x8fa
   2b2e2:	f00d fc16 	bl	38b12 <assert_print>
   2b2e6:	481c      	ldr	r0, [pc, #112]	; (2b358 <bt_conn_get_info+0xac>)
   2b2e8:	f640 01fa 	movw	r1, #2298	; 0x8fa
   2b2ec:	f00d fc0a 	bl	38b04 <assert_post_action>
		info->le.dst = &conn->le.dst;
   2b2f0:	f100 0390 	add.w	r3, r0, #144	; 0x90
   2b2f4:	608b      	str	r3, [r1, #8]
		info->le.src = &bt_dev.id_addr[conn->id];
   2b2f6:	7a03      	ldrb	r3, [r0, #8]
   2b2f8:	4a19      	ldr	r2, [pc, #100]	; (2b360 <bt_conn_get_info+0xb4>)
   2b2fa:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   2b2fe:	4413      	add	r3, r2
   2b300:	604b      	str	r3, [r1, #4]
		if (conn->role == BT_HCI_ROLE_CENTRAL) {
   2b302:	78c4      	ldrb	r4, [r0, #3]
			info->le.remote = &conn->le.resp_addr;
   2b304:	f100 039e 	add.w	r3, r0, #158	; 0x9e
			info->le.local = &conn->le.init_addr;
   2b308:	f100 0297 	add.w	r2, r0, #151	; 0x97
		if (conn->role == BT_HCI_ROLE_CENTRAL) {
   2b30c:	b114      	cbz	r4, 2b314 <bt_conn_get_info+0x68>
   2b30e:	461c      	mov	r4, r3
   2b310:	4613      	mov	r3, r2
   2b312:	4622      	mov	r2, r4
			info->le.remote = &conn->le.resp_addr;
   2b314:	e9c1 2303 	strd	r2, r3, [r1, #12]
		info->le.interval = conn->le.interval;
   2b318:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	; 0xa6
   2b31c:	828b      	strh	r3, [r1, #20]
		info->le.latency = conn->le.latency;
   2b31e:	f8b0 30ac 	ldrh.w	r3, [r0, #172]	; 0xac
   2b322:	82cb      	strh	r3, [r1, #22]
		info->le.timeout = conn->le.timeout;
   2b324:	f8b0 30ae 	ldrh.w	r3, [r0, #174]	; 0xae
   2b328:	830b      	strh	r3, [r1, #24]
		if (conn->le.keys && (conn->le.keys->flags & BT_KEYS_SC)) {
   2b32a:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
   2b32e:	b123      	cbz	r3, 2b33a <bt_conn_get_info+0x8e>
   2b330:	7b5b      	ldrb	r3, [r3, #13]
   2b332:	06da      	lsls	r2, r3, #27
			info->security.flags |= BT_SECURITY_FLAG_SC;
   2b334:	bf44      	itt	mi
   2b336:	2301      	movmi	r3, #1
   2b338:	77cb      	strbmi	r3, [r1, #31]
		if (conn->le.keys && (conn->le.keys->flags & BT_KEYS_OOB)) {
   2b33a:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
   2b33e:	b113      	cbz	r3, 2b346 <bt_conn_get_info+0x9a>
   2b340:	7b5b      	ldrb	r3, [r3, #13]
   2b342:	069b      	lsls	r3, r3, #26
   2b344:	d401      	bmi.n	2b34a <bt_conn_get_info+0x9e>
		return 0;
   2b346:	2000      	movs	r0, #0
   2b348:	e7c6      	b.n	2b2d8 <bt_conn_get_info+0x2c>
			info->security.flags |= BT_SECURITY_FLAG_OOB;
   2b34a:	7fcb      	ldrb	r3, [r1, #31]
   2b34c:	f043 0302 	orr.w	r3, r3, #2
   2b350:	77cb      	strb	r3, [r1, #31]
   2b352:	e7f8      	b.n	2b346 <bt_conn_get_info+0x9a>
   2b354:	0003e4a0 	.word	0x0003e4a0
   2b358:	0003e2e8 	.word	0x0003e2e8
   2b35c:	0003d1d7 	.word	0x0003d1d7
   2b360:	20000400 	.word	0x20000400

0002b364 <send_conn_le_param_update>:
{
   2b364:	b538      	push	{r3, r4, r5, lr}
   2b366:	4604      	mov	r4, r0
	if (!bt_le_conn_params_valid(param)) {
   2b368:	4608      	mov	r0, r1
{
   2b36a:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   2b36c:	f00e f929 	bl	395c2 <bt_le_conn_params_valid>
   2b370:	b348      	cbz	r0, 2b3c6 <send_conn_le_param_update+0x62>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   2b372:	4b16      	ldr	r3, [pc, #88]	; (2b3cc <send_conn_le_param_update+0x68>)
   2b374:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
   2b378:	0799      	lsls	r1, r3, #30
   2b37a:	d407      	bmi.n	2b38c <send_conn_le_param_update+0x28>
	     !atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_L2CAP)) ||
   2b37c:	78e3      	ldrb	r3, [r4, #3]
   2b37e:	b183      	cbz	r3, 2b3a2 <send_conn_le_param_update+0x3e>
	return bt_l2cap_update_conn_param(conn, param);
   2b380:	4629      	mov	r1, r5
   2b382:	4620      	mov	r0, r4
}
   2b384:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
   2b388:	f000 bad0 	b.w	2b92c <bt_l2cap_update_conn_param>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   2b38c:	f894 30b4 	ldrb.w	r3, [r4, #180]	; 0xb4
   2b390:	079a      	lsls	r2, r3, #30
   2b392:	d5f3      	bpl.n	2b37c <send_conn_le_param_update+0x18>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2b394:	f3bf 8f5b 	dmb	ish
   2b398:	6863      	ldr	r3, [r4, #4]
   2b39a:	f3bf 8f5b 	dmb	ish
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
   2b39e:	059b      	lsls	r3, r3, #22
   2b3a0:	d4ec      	bmi.n	2b37c <send_conn_le_param_update+0x18>
		rc = bt_conn_le_conn_update(conn, param);
   2b3a2:	4629      	mov	r1, r5
   2b3a4:	4620      	mov	r0, r4
   2b3a6:	f00e fb8e 	bl	39ac6 <bt_conn_le_conn_update>
		if (rc == 0) {
   2b3aa:	b958      	cbnz	r0, 2b3c4 <send_conn_le_param_update+0x60>
			conn->le.interval_min = param->interval_min;
   2b3ac:	882b      	ldrh	r3, [r5, #0]
   2b3ae:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
			conn->le.interval_max = param->interval_max;
   2b3b2:	886b      	ldrh	r3, [r5, #2]
   2b3b4:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
			conn->le.pending_latency = param->latency;
   2b3b8:	88ab      	ldrh	r3, [r5, #4]
   2b3ba:	f8a4 30b0 	strh.w	r3, [r4, #176]	; 0xb0
			conn->le.pending_timeout = param->timeout;
   2b3be:	88eb      	ldrh	r3, [r5, #6]
   2b3c0:	f8a4 30b2 	strh.w	r3, [r4, #178]	; 0xb2
}
   2b3c4:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   2b3c6:	f06f 0015 	mvn.w	r0, #21
   2b3ca:	e7fb      	b.n	2b3c4 <send_conn_le_param_update+0x60>
   2b3cc:	20000400 	.word	0x20000400

0002b3d0 <deferred_work>:
{
   2b3d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (conn->state == BT_CONN_DISCONNECTED) {
   2b3d2:	f810 3c56 	ldrb.w	r3, [r0, #-86]
{
   2b3d6:	4604      	mov	r4, r0
	struct bt_conn *conn = CONTAINER_OF(dwork, struct bt_conn, deferred_work);
   2b3d8:	f1a0 0560 	sub.w	r5, r0, #96	; 0x60
	if (conn->state == BT_CONN_DISCONNECTED) {
   2b3dc:	bb5b      	cbnz	r3, 2b436 <deferred_work+0x66>
		bt_l2cap_disconnected(conn);
   2b3de:	4628      	mov	r0, r5
   2b3e0:	f00e fbce 	bl	39b80 <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
   2b3e4:	4b2c      	ldr	r3, [pc, #176]	; (2b498 <deferred_work+0xc8>)
   2b3e6:	681e      	ldr	r6, [r3, #0]
   2b3e8:	b976      	cbnz	r6, 2b408 <deferred_work+0x38>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   2b3ea:	4e2c      	ldr	r6, [pc, #176]	; (2b49c <deferred_work+0xcc>)
   2b3ec:	4f2c      	ldr	r7, [pc, #176]	; (2b4a0 <deferred_work+0xd0>)
   2b3ee:	42be      	cmp	r6, r7
   2b3f0:	d91a      	bls.n	2b428 <deferred_work+0x58>
   2b3f2:	492c      	ldr	r1, [pc, #176]	; (2b4a4 <deferred_work+0xd4>)
   2b3f4:	482c      	ldr	r0, [pc, #176]	; (2b4a8 <deferred_work+0xd8>)
   2b3f6:	f240 5269 	movw	r2, #1385	; 0x569
   2b3fa:	f00d fb8a 	bl	38b12 <assert_print>
   2b3fe:	4829      	ldr	r0, [pc, #164]	; (2b4a4 <deferred_work+0xd4>)
   2b400:	f240 5169 	movw	r1, #1385	; 0x569
   2b404:	f00d fb7e 	bl	38b04 <assert_post_action>
		if (cb->disconnected) {
   2b408:	6873      	ldr	r3, [r6, #4]
   2b40a:	b11b      	cbz	r3, 2b414 <deferred_work+0x44>
			cb->disconnected(conn, conn->err);
   2b40c:	f814 1c57 	ldrb.w	r1, [r4, #-87]
   2b410:	4628      	mov	r0, r5
   2b412:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   2b414:	6936      	ldr	r6, [r6, #16]
   2b416:	e7e7      	b.n	2b3e8 <deferred_work+0x18>
		if (cb->disconnected) {
   2b418:	6873      	ldr	r3, [r6, #4]
   2b41a:	b11b      	cbz	r3, 2b424 <deferred_work+0x54>
			cb->disconnected(conn, conn->err);
   2b41c:	f814 1c57 	ldrb.w	r1, [r4, #-87]
   2b420:	4628      	mov	r0, r5
   2b422:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   2b424:	3614      	adds	r6, #20
   2b426:	e7e2      	b.n	2b3ee <deferred_work+0x1e>
   2b428:	d3f6      	bcc.n	2b418 <deferred_work+0x48>
		bt_conn_unref(conn);
   2b42a:	4628      	mov	r0, r5
}
   2b42c:	b003      	add	sp, #12
   2b42e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_conn_unref(conn);
   2b432:	f7ff bc6b 	b.w	2ad0c <bt_conn_unref>
	if (conn->type != BT_CONN_TYPE_LE) {
   2b436:	f810 3c5e 	ldrb.w	r3, [r0, #-94]
   2b43a:	2b01      	cmp	r3, #1
   2b43c:	d123      	bne.n	2b486 <deferred_work+0xb6>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2b43e:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(conn->flags,
   2b442:	f1a0 065c 	sub.w	r6, r0, #92	; 0x5c
   2b446:	e856 3f00 	ldrex	r3, [r6]
   2b44a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
   2b44e:	e846 2100 	strex	r1, r2, [r6]
   2b452:	2900      	cmp	r1, #0
   2b454:	d1f7      	bne.n	2b446 <deferred_work+0x76>
   2b456:	f3bf 8f5b 	dmb	ish
   2b45a:	05db      	lsls	r3, r3, #23
   2b45c:	d515      	bpl.n	2b48a <deferred_work+0xba>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   2b45e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   2b460:	9300      	str	r3, [sp, #0]
   2b462:	6d23      	ldr	r3, [r4, #80]	; 0x50
   2b464:	9301      	str	r3, [sp, #4]
		send_conn_le_param_update(conn, param);
   2b466:	4669      	mov	r1, sp
   2b468:	4628      	mov	r0, r5
   2b46a:	f7ff ff7b 	bl	2b364 <send_conn_le_param_update>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2b46e:	f3bf 8f5b 	dmb	ish
   2b472:	e856 3f00 	ldrex	r3, [r6]
   2b476:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   2b47a:	e846 3200 	strex	r2, r3, [r6]
   2b47e:	2a00      	cmp	r2, #0
   2b480:	d1f7      	bne.n	2b472 <deferred_work+0xa2>
   2b482:	f3bf 8f5b 	dmb	ish
}
   2b486:	b003      	add	sp, #12
   2b488:	bdf0      	pop	{r4, r5, r6, r7, pc}
		param = BT_LE_CONN_PARAM(
   2b48a:	4a08      	ldr	r2, [pc, #32]	; (2b4ac <deferred_work+0xdc>)
   2b48c:	6810      	ldr	r0, [r2, #0]
   2b48e:	6851      	ldr	r1, [r2, #4]
   2b490:	466b      	mov	r3, sp
   2b492:	c303      	stmia	r3!, {r0, r1}
   2b494:	e7e7      	b.n	2b466 <deferred_work+0x96>
   2b496:	bf00      	nop
   2b498:	20002e58 	.word	0x20002e58
   2b49c:	0003c47c 	.word	0x0003c47c
   2b4a0:	0003c47c 	.word	0x0003c47c
   2b4a4:	0003e2e8 	.word	0x0003e2e8
   2b4a8:	0003d1d7 	.word	0x0003d1d7
   2b4ac:	0003c66c 	.word	0x0003c66c

0002b4b0 <bt_conn_create_frag_timeout>:
						  k_timeout_t timeout,
						  const char *func, int line)
#else
struct net_buf *bt_conn_create_frag_timeout(size_t reserve, k_timeout_t timeout)
#endif
{
   2b4b0:	4601      	mov	r1, r0

#if defined(CONFIG_NET_BUF_LOG)
	return bt_conn_create_pdu_timeout_debug(pool, reserve, timeout,
						func, line);
#else
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
   2b4b2:	4801      	ldr	r0, [pc, #4]	; (2b4b8 <bt_conn_create_frag_timeout+0x8>)
   2b4b4:	f7ff bd82 	b.w	2afbc <bt_conn_create_pdu_timeout>
   2b4b8:	20000c54 	.word	0x20000c54

0002b4bc <create_frag>:
{
   2b4bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2b4c0:	4606      	mov	r6, r0
		frag = bt_conn_create_frag(0);
   2b4c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2b4c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2b4ca:	2000      	movs	r0, #0
{
   2b4cc:	460c      	mov	r4, r1
		frag = bt_conn_create_frag(0);
   2b4ce:	f7ff ffef 	bl	2b4b0 <bt_conn_create_frag_timeout>
	if (conn->state != BT_CONN_CONNECTED) {
   2b4d2:	7ab3      	ldrb	r3, [r6, #10]
   2b4d4:	2b07      	cmp	r3, #7
		frag = bt_conn_create_frag(0);
   2b4d6:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
   2b4d8:	f04f 0600 	mov.w	r6, #0
   2b4dc:	d005      	beq.n	2b4ea <create_frag+0x2e>
		net_buf_unref(frag);
   2b4de:	f003 f9cf 	bl	2e880 <net_buf_unref>
		return NULL;
   2b4e2:	4635      	mov	r5, r6
}
   2b4e4:	4628      	mov	r0, r5
   2b4e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	tx_data(frag)->tx = NULL;
   2b4ea:	6146      	str	r6, [r0, #20]
	return net_buf_simple_tailroom(&buf->b);
   2b4ec:	f100 0708 	add.w	r7, r0, #8
	return bt_dev.le.acl_mtu;
   2b4f0:	4e0c      	ldr	r6, [pc, #48]	; (2b524 <create_frag+0x68>)
   2b4f2:	4638      	mov	r0, r7
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   2b4f4:	f8b6 80dc 	ldrh.w	r8, [r6, #220]	; 0xdc
   2b4f8:	f00f fb06 	bl	3ab08 <net_buf_simple_tailroom>
   2b4fc:	4580      	cmp	r8, r0
   2b4fe:	d20c      	bcs.n	2b51a <create_frag+0x5e>
	return bt_dev.le.acl_mtu;
   2b500:	f8b6 60dc 	ldrh.w	r6, [r6, #220]	; 0xdc
	return net_buf_simple_add_mem(&buf->b, mem, len);
   2b504:	f854 1f08 	ldr.w	r1, [r4, #8]!
   2b508:	4632      	mov	r2, r6
   2b50a:	4638      	mov	r0, r7
   2b50c:	f00f fb04 	bl	3ab18 <net_buf_simple_add_mem>
	return net_buf_simple_pull(&buf->b, len);
   2b510:	4631      	mov	r1, r6
   2b512:	4620      	mov	r0, r4
   2b514:	f003 fa86 	bl	2ea24 <net_buf_simple_pull>
   2b518:	e7e4      	b.n	2b4e4 <create_frag+0x28>
	return net_buf_simple_tailroom(&buf->b);
   2b51a:	4638      	mov	r0, r7
   2b51c:	f00f faf4 	bl	3ab08 <net_buf_simple_tailroom>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   2b520:	b286      	uxth	r6, r0
   2b522:	e7ef      	b.n	2b504 <create_frag+0x48>
   2b524:	20000400 	.word	0x20000400

0002b528 <bt_conn_process_tx>:
{
   2b528:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == BT_CONN_DISCONNECTED &&
   2b52a:	7a83      	ldrb	r3, [r0, #10]
{
   2b52c:	4604      	mov	r4, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
   2b52e:	b993      	cbnz	r3, 2b556 <bt_conn_process_tx+0x2e>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2b530:	f3bf 8f5b 	dmb	ish
   2b534:	1d03      	adds	r3, r0, #4
   2b536:	e853 2f00 	ldrex	r2, [r3]
   2b53a:	f022 0140 	bic.w	r1, r2, #64	; 0x40
   2b53e:	e843 1500 	strex	r5, r1, [r3]
   2b542:	2d00      	cmp	r5, #0
   2b544:	d1f7      	bne.n	2b536 <bt_conn_process_tx+0xe>
   2b546:	f3bf 8f5b 	dmb	ish
   2b54a:	0653      	lsls	r3, r2, #25
   2b54c:	d503      	bpl.n	2b556 <bt_conn_process_tx+0x2e>
}
   2b54e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		conn_cleanup(conn);
   2b552:	f7ff ba0f 	b.w	2a974 <conn_cleanup>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
   2b556:	2200      	movs	r2, #0
   2b558:	2300      	movs	r3, #0
   2b55a:	f104 0038 	add.w	r0, r4, #56	; 0x38
   2b55e:	f003 f85d 	bl	2e61c <net_buf_get>
	BT_ASSERT(buf);
   2b562:	4605      	mov	r5, r0
   2b564:	b958      	cbnz	r0, 2b57e <bt_conn_process_tx+0x56>
   2b566:	4923      	ldr	r1, [pc, #140]	; (2b5f4 <bt_conn_process_tx+0xcc>)
   2b568:	4823      	ldr	r0, [pc, #140]	; (2b5f8 <bt_conn_process_tx+0xd0>)
   2b56a:	f44f 7247 	mov.w	r2, #796	; 0x31c
   2b56e:	f00d fad0 	bl	38b12 <assert_print>
   2b572:	4040      	eors	r0, r0
   2b574:	f380 8811 	msr	BASEPRI, r0
   2b578:	f04f 0003 	mov.w	r0, #3
   2b57c:	df02      	svc	2
	return bt_dev.le.acl_mtu;
   2b57e:	4e1f      	ldr	r6, [pc, #124]	; (2b5fc <bt_conn_process_tx+0xd4>)
	if (buf->len <= conn_mtu(conn)) {
   2b580:	89aa      	ldrh	r2, [r5, #12]
   2b582:	f8b6 30dc 	ldrh.w	r3, [r6, #220]	; 0xdc
   2b586:	429a      	cmp	r2, r3
   2b588:	d807      	bhi.n	2b59a <bt_conn_process_tx+0x72>
		return send_frag(conn, buf, FRAG_SINGLE, false);
   2b58a:	2300      	movs	r3, #0
   2b58c:	2202      	movs	r2, #2
	return send_frag(conn, buf, FRAG_END, false);
   2b58e:	4629      	mov	r1, r5
   2b590:	4620      	mov	r0, r4
   2b592:	f7ff f8f3 	bl	2a77c <send_frag>
	if (!send_buf(conn, buf)) {
   2b596:	b968      	cbnz	r0, 2b5b4 <bt_conn_process_tx+0x8c>
   2b598:	e005      	b.n	2b5a6 <bt_conn_process_tx+0x7e>
	frag = create_frag(conn, buf);
   2b59a:	4629      	mov	r1, r5
   2b59c:	4620      	mov	r0, r4
   2b59e:	f7ff ff8d 	bl	2b4bc <create_frag>
	if (!frag) {
   2b5a2:	4601      	mov	r1, r0
   2b5a4:	b938      	cbnz	r0, 2b5b6 <bt_conn_process_tx+0x8e>
		struct bt_conn_tx *tx = tx_data(buf)->tx;
   2b5a6:	696e      	ldr	r6, [r5, #20]
		tx_data(buf)->tx = NULL;
   2b5a8:	2300      	movs	r3, #0
   2b5aa:	616b      	str	r3, [r5, #20]
		net_buf_unref(buf);
   2b5ac:	4628      	mov	r0, r5
   2b5ae:	f003 f967 	bl	2e880 <net_buf_unref>
		if (tx) {
   2b5b2:	b9ce      	cbnz	r6, 2b5e8 <bt_conn_process_tx+0xc0>
}
   2b5b4:	bd70      	pop	{r4, r5, r6, pc}
	if (!send_frag(conn, frag, FRAG_START, true)) {
   2b5b6:	2301      	movs	r3, #1
   2b5b8:	2200      	movs	r2, #0
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   2b5ba:	4620      	mov	r0, r4
   2b5bc:	f7ff f8de 	bl	2a77c <send_frag>
   2b5c0:	2800      	cmp	r0, #0
   2b5c2:	d0f0      	beq.n	2b5a6 <bt_conn_process_tx+0x7e>
	while (buf->len > conn_mtu(conn)) {
   2b5c4:	89aa      	ldrh	r2, [r5, #12]
   2b5c6:	f8b6 30dc 	ldrh.w	r3, [r6, #220]	; 0xdc
   2b5ca:	429a      	cmp	r2, r3
   2b5cc:	d802      	bhi.n	2b5d4 <bt_conn_process_tx+0xac>
	return send_frag(conn, buf, FRAG_END, false);
   2b5ce:	2300      	movs	r3, #0
   2b5d0:	2203      	movs	r2, #3
   2b5d2:	e7dc      	b.n	2b58e <bt_conn_process_tx+0x66>
		frag = create_frag(conn, buf);
   2b5d4:	4629      	mov	r1, r5
   2b5d6:	4620      	mov	r0, r4
   2b5d8:	f7ff ff70 	bl	2b4bc <create_frag>
		if (!frag) {
   2b5dc:	4601      	mov	r1, r0
   2b5de:	2800      	cmp	r0, #0
   2b5e0:	d0e1      	beq.n	2b5a6 <bt_conn_process_tx+0x7e>
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   2b5e2:	2301      	movs	r3, #1
   2b5e4:	461a      	mov	r2, r3
   2b5e6:	e7e8      	b.n	2b5ba <bt_conn_process_tx+0x92>
			conn_tx_destroy(conn, tx);
   2b5e8:	4631      	mov	r1, r6
   2b5ea:	4620      	mov	r0, r4
}
   2b5ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			conn_tx_destroy(conn, tx);
   2b5f0:	f7ff b8a0 	b.w	2a734 <conn_tx_destroy>
   2b5f4:	0003e2e8 	.word	0x0003e2e8
   2b5f8:	0003d1d7 	.word	0x0003d1d7
   2b5fc:	20000400 	.word	0x20000400

0002b600 <bt_conn_init>:

	return bt_conn_ref(&acl_conns[index]);
}

int bt_conn_init(void)
{
   2b600:	b510      	push	{r4, lr}
	z_impl_k_queue_init(queue);
   2b602:	480c      	ldr	r0, [pc, #48]	; (2b634 <bt_conn_init+0x34>)
   2b604:	f010 fb1f 	bl	3bc46 <z_impl_k_queue_init>
	int err, i;

	k_fifo_init(&free_tx);
	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		k_fifo_put(&free_tx, &conn_tx[i]);
   2b608:	490b      	ldr	r1, [pc, #44]	; (2b638 <bt_conn_init+0x38>)
   2b60a:	480a      	ldr	r0, [pc, #40]	; (2b634 <bt_conn_init+0x34>)
   2b60c:	f010 fb28 	bl	3bc60 <k_queue_append>
   2b610:	490a      	ldr	r1, [pc, #40]	; (2b63c <bt_conn_init+0x3c>)
   2b612:	4808      	ldr	r0, [pc, #32]	; (2b634 <bt_conn_init+0x34>)
   2b614:	f010 fb24 	bl	3bc60 <k_queue_append>
   2b618:	4909      	ldr	r1, [pc, #36]	; (2b640 <bt_conn_init+0x40>)
   2b61a:	4806      	ldr	r0, [pc, #24]	; (2b634 <bt_conn_init+0x34>)
   2b61c:	f010 fb20 	bl	3bc60 <k_queue_append>
	}

	bt_att_init();
   2b620:	f001 f97a 	bl	2c918 <bt_att_init>

	err = bt_smp_init();
   2b624:	f00f f9cc 	bl	3a9c0 <bt_smp_init>
	if (err) {
   2b628:	4604      	mov	r4, r0
   2b62a:	b908      	cbnz	r0, 2b630 <bt_conn_init+0x30>
		return err;
	}

	bt_l2cap_init();
   2b62c:	f00e fae6 	bl	39bfc <bt_l2cap_init>
			bt_conn_unref(conn);
		}
	}

	return 0;
}
   2b630:	4620      	mov	r0, r4
   2b632:	bd10      	pop	{r4, pc}
   2b634:	20000bd0 	.word	0x20000bd0
   2b638:	20002e28 	.word	0x20002e28
   2b63c:	20002e38 	.word	0x20002e38
   2b640:	20002e48 	.word	0x20002e48

0002b644 <l2cap_create_le_sig_pdu.part.0>:
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
		bt_l2cap_chan_del(chan);
	}
}

static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   2b644:	b598      	push	{r3, r4, r7, lr}
   2b646:	4603      	mov	r3, r0
	buf = bt_l2cap_create_pdu_timeout(pool, 0, L2CAP_RTX_TIMEOUT);
	if (!buf) {
		/* If it was not possible to allocate a buffer within the
		 * timeout return NULL.
		 */
		BT_ERR("Unable to allocate buffer for op 0x%02x", code);
   2b648:	480a      	ldr	r0, [pc, #40]	; (2b674 <l2cap_create_le_sig_pdu.part.0+0x30>)
   2b64a:	6802      	ldr	r2, [r0, #0]
   2b64c:	0752      	lsls	r2, r2, #29
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   2b64e:	af00      	add	r7, sp, #0
		BT_ERR("Unable to allocate buffer for op 0x%02x", code);
   2b650:	d00d      	beq.n	2b66e <l2cap_create_le_sig_pdu.part.0+0x2a>
   2b652:	466c      	mov	r4, sp
   2b654:	b088      	sub	sp, #32
   2b656:	466a      	mov	r2, sp
   2b658:	4907      	ldr	r1, [pc, #28]	; (2b678 <l2cap_create_le_sig_pdu.part.0+0x34>)
   2b65a:	e9c2 1305 	strd	r1, r3, [r2, #20]
   2b65e:	2303      	movs	r3, #3
   2b660:	f842 3f10 	str.w	r3, [r2, #16]!
   2b664:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   2b668:	f00e fa56 	bl	39b18 <z_log_msg_static_create.constprop.0>
   2b66c:	46a5      	mov	sp, r4
	hdr->code = code;
	hdr->ident = ident;
	hdr->len = sys_cpu_to_le16(len);

	return buf;
}
   2b66e:	2000      	movs	r0, #0
   2b670:	46bd      	mov	sp, r7
   2b672:	bd98      	pop	{r3, r4, r7, pc}
   2b674:	20000a94 	.word	0x20000a94
   2b678:	0003e522 	.word	0x0003e522

0002b67c <l2cap_accept.part.0>:
	 */
	(void)k_work_cancel_delayable(&le_chan->rtx_work);
#endif /* CONFIG_BT_L2CAP_DYNAMIC_CHANNEL */
}

static int l2cap_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
   2b67c:	b598      	push	{r3, r4, r7, lr}
   2b67e:	4603      	mov	r3, r0
		*chan = &l2cap->chan.chan;

		return 0;
	}

	BT_ERR("No available L2CAP context for conn %p", conn);
   2b680:	480b      	ldr	r0, [pc, #44]	; (2b6b0 <l2cap_accept.part.0+0x34>)
   2b682:	6802      	ldr	r2, [r0, #0]
   2b684:	0752      	lsls	r2, r2, #29
static int l2cap_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
   2b686:	af00      	add	r7, sp, #0
	BT_ERR("No available L2CAP context for conn %p", conn);
   2b688:	d00d      	beq.n	2b6a6 <l2cap_accept.part.0+0x2a>
   2b68a:	466c      	mov	r4, sp
   2b68c:	b088      	sub	sp, #32
   2b68e:	466a      	mov	r2, sp
   2b690:	4908      	ldr	r1, [pc, #32]	; (2b6b4 <l2cap_accept.part.0+0x38>)
   2b692:	e9c2 1305 	strd	r1, r3, [r2, #20]
   2b696:	2303      	movs	r3, #3
   2b698:	f842 3f10 	str.w	r3, [r2, #16]!
   2b69c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   2b6a0:	f00e fa3a 	bl	39b18 <z_log_msg_static_create.constprop.0>
   2b6a4:	46a5      	mov	sp, r4

	return -ENOMEM;
}
   2b6a6:	f06f 000b 	mvn.w	r0, #11
   2b6aa:	46bd      	mov	sp, r7
   2b6ac:	bd98      	pop	{r3, r4, r7, pc}
   2b6ae:	bf00      	nop
   2b6b0:	20000a94 	.word	0x20000a94
   2b6b4:	0003e54a 	.word	0x0003e54a

0002b6b8 <l2cap_accept>:
		if (l2cap->chan.chan.conn) {
   2b6b8:	4b04      	ldr	r3, [pc, #16]	; (2b6cc <l2cap_accept+0x14>)
   2b6ba:	681a      	ldr	r2, [r3, #0]
   2b6bc:	b10a      	cbz	r2, 2b6c2 <l2cap_accept+0xa>
	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
   2b6be:	f7ff bfdd 	b.w	2b67c <l2cap_accept.part.0>
		l2cap->chan.chan.ops = &ops;
   2b6c2:	4803      	ldr	r0, [pc, #12]	; (2b6d0 <l2cap_accept+0x18>)
   2b6c4:	6058      	str	r0, [r3, #4]
		*chan = &l2cap->chan.chan;
   2b6c6:	600b      	str	r3, [r1, #0]
}
   2b6c8:	4610      	mov	r0, r2
   2b6ca:	4770      	bx	lr
   2b6cc:	20002e5c 	.word	0x20002e5c
   2b6d0:	0003c8e4 	.word	0x0003c8e4

0002b6d4 <bt_l2cap_connected>:
{
   2b6d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   2b6d6:	4d2a      	ldr	r5, [pc, #168]	; (2b780 <bt_l2cap_connected+0xac>)
   2b6d8:	4f2a      	ldr	r7, [pc, #168]	; (2b784 <bt_l2cap_connected+0xb0>)
{
   2b6da:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   2b6dc:	2600      	movs	r6, #0
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   2b6de:	42bd      	cmp	r5, r7
   2b6e0:	d94a      	bls.n	2b778 <bt_l2cap_connected+0xa4>
   2b6e2:	4929      	ldr	r1, [pc, #164]	; (2b788 <bt_l2cap_connected+0xb4>)
   2b6e4:	4829      	ldr	r0, [pc, #164]	; (2b78c <bt_l2cap_connected+0xb8>)
   2b6e6:	f240 1281 	movw	r2, #385	; 0x181
   2b6ea:	f00d fa12 	bl	38b12 <assert_print>
   2b6ee:	4826      	ldr	r0, [pc, #152]	; (2b788 <bt_l2cap_connected+0xb4>)
   2b6f0:	f240 1181 	movw	r1, #385	; 0x181
   2b6f4:	f00d fa06 	bl	38b04 <assert_post_action>
		if (fchan->accept(conn, &chan) < 0) {
   2b6f8:	686b      	ldr	r3, [r5, #4]
   2b6fa:	a901      	add	r1, sp, #4
   2b6fc:	4620      	mov	r0, r4
   2b6fe:	4798      	blx	r3
   2b700:	2800      	cmp	r0, #0
   2b702:	db34      	blt.n	2b76e <bt_l2cap_connected+0x9a>
		le_chan = BT_L2CAP_LE_CHAN(chan);
   2b704:	9b01      	ldr	r3, [sp, #4]
		le_chan->rx.cid = fchan->cid;
   2b706:	882a      	ldrh	r2, [r5, #0]
   2b708:	829a      	strh	r2, [r3, #20]
		le_chan->tx.cid = fchan->cid;
   2b70a:	849a      	strh	r2, [r3, #36]	; 0x24
   2b70c:	f103 0210 	add.w	r2, r3, #16
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
   2b710:	68a8      	ldr	r0, [r5, #8]
   2b712:	f3bf 8f5b 	dmb	ish
   2b716:	e852 1f00 	ldrex	r1, [r2]
   2b71a:	e842 6c00 	strex	ip, r6, [r2]
   2b71e:	f1bc 0f00 	cmp.w	ip, #0
   2b722:	d1f8      	bne.n	2b716 <bt_l2cap_connected+0x42>
   2b724:	f3bf 8f5b 	dmb	ish
	parent->next = child;
   2b728:	609e      	str	r6, [r3, #8]
	return list->tail;
   2b72a:	6da1      	ldr	r1, [r4, #88]	; 0x58
	sys_slist_append(&conn->channels, &chan->node);
   2b72c:	f103 0208 	add.w	r2, r3, #8
Z_GENLIST_APPEND(slist, snode)
   2b730:	b9f9      	cbnz	r1, 2b772 <bt_l2cap_connected+0x9e>
	list->head = node;
   2b732:	e9c4 2215 	strd	r2, r2, [r4, #84]	; 0x54
	chan->conn = conn;
   2b736:	601c      	str	r4, [r3, #0]
	chan->destroy = destroy;
   2b738:	60d8      	str	r0, [r3, #12]
		if (chan->ops->connected) {
   2b73a:	9801      	ldr	r0, [sp, #4]
   2b73c:	6843      	ldr	r3, [r0, #4]
   2b73e:	681b      	ldr	r3, [r3, #0]
   2b740:	b103      	cbz	r3, 2b744 <bt_l2cap_connected+0x70>
			chan->ops->connected(chan);
   2b742:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2b744:	9b01      	ldr	r3, [sp, #4]
   2b746:	f3bf 8f5b 	dmb	ish
   2b74a:	3310      	adds	r3, #16
   2b74c:	e853 1f00 	ldrex	r1, [r3]
   2b750:	f041 0101 	orr.w	r1, r1, #1
   2b754:	e843 1200 	strex	r2, r1, [r3]
   2b758:	2a00      	cmp	r2, #0
   2b75a:	d1f7      	bne.n	2b74c <bt_l2cap_connected+0x78>
   2b75c:	f3bf 8f5b 	dmb	ish
		if (chan->ops->status) {
   2b760:	9801      	ldr	r0, [sp, #4]
   2b762:	6843      	ldr	r3, [r0, #4]
   2b764:	69db      	ldr	r3, [r3, #28]
   2b766:	b113      	cbz	r3, 2b76e <bt_l2cap_connected+0x9a>
			chan->ops->status(chan, chan->status);
   2b768:	f100 0110 	add.w	r1, r0, #16
   2b76c:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   2b76e:	350c      	adds	r5, #12
   2b770:	e7b5      	b.n	2b6de <bt_l2cap_connected+0xa>
	parent->next = child;
   2b772:	600a      	str	r2, [r1, #0]
	list->tail = node;
   2b774:	65a2      	str	r2, [r4, #88]	; 0x58
}
   2b776:	e7de      	b.n	2b736 <bt_l2cap_connected+0x62>
   2b778:	d3be      	bcc.n	2b6f8 <bt_l2cap_connected+0x24>
}
   2b77a:	b003      	add	sp, #12
   2b77c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2b77e:	bf00      	nop
   2b780:	0003c458 	.word	0x0003c458
   2b784:	0003c47c 	.word	0x0003c47c
   2b788:	0003e571 	.word	0x0003e571
   2b78c:	0003d1d7 	.word	0x0003d1d7

0002b790 <l2cap_recv>:
{
   2b790:	b5f0      	push	{r4, r5, r6, r7, lr}
   2b792:	b089      	sub	sp, #36	; 0x24
	if (buf->len < sizeof(*hdr)) {
   2b794:	898b      	ldrh	r3, [r1, #12]
   2b796:	2b03      	cmp	r3, #3
{
   2b798:	af02      	add	r7, sp, #8
   2b79a:	4606      	mov	r6, r0
   2b79c:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
   2b79e:	d80e      	bhi.n	2b7be <l2cap_recv+0x2e>
		BT_ERR("Too small L2CAP signaling PDU");
   2b7a0:	4839      	ldr	r0, [pc, #228]	; (2b888 <l2cap_recv+0xf8>)
   2b7a2:	6803      	ldr	r3, [r0, #0]
   2b7a4:	075d      	lsls	r5, r3, #29
   2b7a6:	d027      	beq.n	2b7f8 <l2cap_recv+0x68>
   2b7a8:	4b38      	ldr	r3, [pc, #224]	; (2b88c <l2cap_recv+0xfc>)
		BT_ERR("Invalid ident value in L2CAP PDU");
   2b7aa:	617b      	str	r3, [r7, #20]
   2b7ac:	2302      	movs	r3, #2
   2b7ae:	613b      	str	r3, [r7, #16]
   2b7b0:	f107 0210 	add.w	r2, r7, #16
   2b7b4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   2b7b8:	f00e f9ae 	bl	39b18 <z_log_msg_static_create.constprop.0>
   2b7bc:	e01c      	b.n	2b7f8 <l2cap_recv+0x68>
	return net_buf_simple_pull_mem(&buf->b, len);
   2b7be:	2104      	movs	r1, #4
   2b7c0:	f105 0008 	add.w	r0, r5, #8
   2b7c4:	f003 f948 	bl	2ea58 <net_buf_simple_pull_mem>
	if (buf->len != len) {
   2b7c8:	89a9      	ldrh	r1, [r5, #12]
	len = sys_le16_to_cpu(hdr->len);
   2b7ca:	8843      	ldrh	r3, [r0, #2]
	if (buf->len != len) {
   2b7cc:	4299      	cmp	r1, r3
   2b7ce:	4604      	mov	r4, r0
   2b7d0:	d016      	beq.n	2b800 <l2cap_recv+0x70>
		BT_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
   2b7d2:	482d      	ldr	r0, [pc, #180]	; (2b888 <l2cap_recv+0xf8>)
   2b7d4:	6802      	ldr	r2, [r0, #0]
   2b7d6:	0754      	lsls	r4, r2, #29
   2b7d8:	d00e      	beq.n	2b7f8 <l2cap_recv+0x68>
   2b7da:	466c      	mov	r4, sp
   2b7dc:	b088      	sub	sp, #32
   2b7de:	aa02      	add	r2, sp, #8
   2b7e0:	4d2b      	ldr	r5, [pc, #172]	; (2b890 <l2cap_recv+0x100>)
   2b7e2:	61d3      	str	r3, [r2, #28]
   2b7e4:	2304      	movs	r3, #4
   2b7e6:	e9c2 5105 	strd	r5, r1, [r2, #20]
   2b7ea:	f842 3f10 	str.w	r3, [r2, #16]!
   2b7ee:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   2b7f2:	f00e f991 	bl	39b18 <z_log_msg_static_create.constprop.0>
   2b7f6:	46a5      	mov	sp, r4
}
   2b7f8:	2000      	movs	r0, #0
   2b7fa:	371c      	adds	r7, #28
   2b7fc:	46bd      	mov	sp, r7
   2b7fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!hdr->ident) {
   2b800:	7843      	ldrb	r3, [r0, #1]
   2b802:	b92b      	cbnz	r3, 2b810 <l2cap_recv+0x80>
		BT_ERR("Invalid ident value in L2CAP PDU");
   2b804:	4820      	ldr	r0, [pc, #128]	; (2b888 <l2cap_recv+0xf8>)
   2b806:	6803      	ldr	r3, [r0, #0]
   2b808:	075a      	lsls	r2, r3, #29
   2b80a:	d0f5      	beq.n	2b7f8 <l2cap_recv+0x68>
   2b80c:	4b21      	ldr	r3, [pc, #132]	; (2b894 <l2cap_recv+0x104>)
   2b80e:	e7cc      	b.n	2b7aa <l2cap_recv+0x1a>
	switch (hdr->code) {
   2b810:	7803      	ldrb	r3, [r0, #0]
   2b812:	2b01      	cmp	r3, #1
   2b814:	d0f0      	beq.n	2b7f8 <l2cap_recv+0x68>
   2b816:	2b13      	cmp	r3, #19
   2b818:	d107      	bne.n	2b82a <l2cap_recv+0x9a>
	if (buf->len < sizeof(*rsp)) {
   2b81a:	2901      	cmp	r1, #1
   2b81c:	d8ec      	bhi.n	2b7f8 <l2cap_recv+0x68>
		BT_ERR("Too small LE conn param rsp");
   2b81e:	481a      	ldr	r0, [pc, #104]	; (2b888 <l2cap_recv+0xf8>)
   2b820:	6803      	ldr	r3, [r0, #0]
   2b822:	075b      	lsls	r3, r3, #29
   2b824:	d0e8      	beq.n	2b7f8 <l2cap_recv+0x68>
   2b826:	4b1c      	ldr	r3, [pc, #112]	; (2b898 <l2cap_recv+0x108>)
   2b828:	e7bf      	b.n	2b7aa <l2cap_recv+0x1a>
		BT_WARN("Rejecting unknown L2CAP PDU code 0x%02x", hdr->code);
   2b82a:	4817      	ldr	r0, [pc, #92]	; (2b888 <l2cap_recv+0xf8>)
   2b82c:	6802      	ldr	r2, [r0, #0]
   2b82e:	f012 0f06 	tst.w	r2, #6
   2b832:	d00d      	beq.n	2b850 <l2cap_recv+0xc0>
   2b834:	466d      	mov	r5, sp
   2b836:	b088      	sub	sp, #32
   2b838:	aa02      	add	r2, sp, #8
   2b83a:	4918      	ldr	r1, [pc, #96]	; (2b89c <l2cap_recv+0x10c>)
	switch (hdr->code) {
   2b83c:	e9c2 1305 	strd	r1, r3, [r2, #20]
		BT_WARN("Rejecting unknown L2CAP PDU code 0x%02x", hdr->code);
   2b840:	2303      	movs	r3, #3
   2b842:	f842 3f10 	str.w	r3, [r2, #16]!
   2b846:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   2b84a:	f00e f965 	bl	39b18 <z_log_msg_static_create.constprop.0>
   2b84e:	46ad      	mov	sp, r5
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   2b850:	7861      	ldrb	r1, [r4, #1]
		l2cap_send_reject(chan->conn, hdr->ident,
   2b852:	6835      	ldr	r5, [r6, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   2b854:	2202      	movs	r2, #2
   2b856:	2001      	movs	r0, #1
   2b858:	f00e f961 	bl	39b1e <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   2b85c:	4604      	mov	r4, r0
   2b85e:	2800      	cmp	r0, #0
   2b860:	d0ca      	beq.n	2b7f8 <l2cap_recv+0x68>
	return net_buf_simple_add(&buf->b, len);
   2b862:	2102      	movs	r1, #2
   2b864:	3008      	adds	r0, #8
   2b866:	f003 f911 	bl	2ea8c <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
   2b86a:	2300      	movs	r3, #0
   2b86c:	7003      	strb	r3, [r0, #0]
   2b86e:	7043      	strb	r3, [r0, #1]
		     bt_conn_tx_cb_t cb, void *user_data);

static inline int bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				struct net_buf *buf)
{
	return bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
   2b870:	4622      	mov	r2, r4
   2b872:	9300      	str	r3, [sp, #0]
   2b874:	2105      	movs	r1, #5
   2b876:	4628      	mov	r0, r5
   2b878:	f00e f99d 	bl	39bb6 <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
   2b87c:	2800      	cmp	r0, #0
   2b87e:	d0bb      	beq.n	2b7f8 <l2cap_recv+0x68>
		net_buf_unref(buf);
   2b880:	4620      	mov	r0, r4
   2b882:	f002 fffd 	bl	2e880 <net_buf_unref>
   2b886:	e7b7      	b.n	2b7f8 <l2cap_recv+0x68>
   2b888:	20000a94 	.word	0x20000a94
   2b88c:	0003e5a2 	.word	0x0003e5a2
   2b890:	0003e5c0 	.word	0x0003e5c0
   2b894:	0003e5e1 	.word	0x0003e5e1
   2b898:	0003e602 	.word	0x0003e602
   2b89c:	0003e61e 	.word	0x0003e61e

0002b8a0 <bt_l2cap_recv>:
{
   2b8a0:	b5b0      	push	{r4, r5, r7, lr}
   2b8a2:	b086      	sub	sp, #24
	if (buf->len < sizeof(*hdr)) {
   2b8a4:	898b      	ldrh	r3, [r1, #12]
   2b8a6:	2b03      	cmp	r3, #3
{
   2b8a8:	af00      	add	r7, sp, #0
   2b8aa:	4605      	mov	r5, r0
   2b8ac:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   2b8ae:	d813      	bhi.n	2b8d8 <bt_l2cap_recv+0x38>
		BT_ERR("Too small L2CAP PDU received");
   2b8b0:	481b      	ldr	r0, [pc, #108]	; (2b920 <bt_l2cap_recv+0x80>)
   2b8b2:	6803      	ldr	r3, [r0, #0]
   2b8b4:	075b      	lsls	r3, r3, #29
   2b8b6:	d009      	beq.n	2b8cc <bt_l2cap_recv+0x2c>
   2b8b8:	4b1a      	ldr	r3, [pc, #104]	; (2b924 <bt_l2cap_recv+0x84>)
   2b8ba:	617b      	str	r3, [r7, #20]
   2b8bc:	2302      	movs	r3, #2
   2b8be:	613b      	str	r3, [r7, #16]
   2b8c0:	f107 0210 	add.w	r2, r7, #16
   2b8c4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   2b8c8:	f00e f926 	bl	39b18 <z_log_msg_static_create.constprop.0>
	net_buf_unref(buf);
   2b8cc:	4620      	mov	r0, r4
   2b8ce:	f002 ffd7 	bl	2e880 <net_buf_unref>
}
   2b8d2:	3718      	adds	r7, #24
   2b8d4:	46bd      	mov	sp, r7
   2b8d6:	bdb0      	pop	{r4, r5, r7, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   2b8d8:	2104      	movs	r1, #4
   2b8da:	f104 0008 	add.w	r0, r4, #8
   2b8de:	f003 f8bb 	bl	2ea58 <net_buf_simple_pull_mem>
	cid = sys_le16_to_cpu(hdr->cid);
   2b8e2:	8841      	ldrh	r1, [r0, #2]
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
   2b8e4:	4628      	mov	r0, r5
   2b8e6:	f00e f97f 	bl	39be8 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   2b8ea:	b998      	cbnz	r0, 2b914 <bt_l2cap_recv+0x74>
		BT_WARN("Ignoring data for unknown channel ID 0x%04x", cid);
   2b8ec:	480c      	ldr	r0, [pc, #48]	; (2b920 <bt_l2cap_recv+0x80>)
   2b8ee:	6803      	ldr	r3, [r0, #0]
   2b8f0:	f013 0f06 	tst.w	r3, #6
   2b8f4:	d0ea      	beq.n	2b8cc <bt_l2cap_recv+0x2c>
   2b8f6:	466d      	mov	r5, sp
   2b8f8:	b088      	sub	sp, #32
   2b8fa:	466a      	mov	r2, sp
   2b8fc:	4b0a      	ldr	r3, [pc, #40]	; (2b928 <bt_l2cap_recv+0x88>)
   2b8fe:	e9c2 3105 	strd	r3, r1, [r2, #20]
   2b902:	2303      	movs	r3, #3
   2b904:	f842 3f10 	str.w	r3, [r2, #16]!
   2b908:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   2b90c:	f00e f904 	bl	39b18 <z_log_msg_static_create.constprop.0>
   2b910:	46ad      	mov	sp, r5
   2b912:	e7db      	b.n	2b8cc <bt_l2cap_recv+0x2c>
	chan->ops->recv(chan, buf);
   2b914:	6843      	ldr	r3, [r0, #4]
   2b916:	4621      	mov	r1, r4
   2b918:	695b      	ldr	r3, [r3, #20]
   2b91a:	4798      	blx	r3
   2b91c:	e7d6      	b.n	2b8cc <bt_l2cap_recv+0x2c>
   2b91e:	bf00      	nop
   2b920:	20000a94 	.word	0x20000a94
   2b924:	0003e646 	.word	0x0003e646
   2b928:	0003e663 	.word	0x0003e663

0002b92c <bt_l2cap_update_conn_param>:
{
   2b92c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	ident++;
   2b92e:	4b17      	ldr	r3, [pc, #92]	; (2b98c <bt_l2cap_update_conn_param+0x60>)
{
   2b930:	460e      	mov	r6, r1
	ident++;
   2b932:	7819      	ldrb	r1, [r3, #0]
   2b934:	3101      	adds	r1, #1
   2b936:	b2c9      	uxtb	r1, r1
   2b938:	2901      	cmp	r1, #1
   2b93a:	bf38      	it	cc
   2b93c:	2101      	movcc	r1, #1
{
   2b93e:	4605      	mov	r5, r0
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   2b940:	2208      	movs	r2, #8
   2b942:	2012      	movs	r0, #18
	ident++;
   2b944:	7019      	strb	r1, [r3, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   2b946:	f00e f8ea 	bl	39b1e <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   2b94a:	4604      	mov	r4, r0
   2b94c:	b1d0      	cbz	r0, 2b984 <bt_l2cap_update_conn_param+0x58>
	return net_buf_simple_add(&buf->b, len);
   2b94e:	2108      	movs	r1, #8
   2b950:	4408      	add	r0, r1
   2b952:	f003 f89b 	bl	2ea8c <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
   2b956:	8833      	ldrh	r3, [r6, #0]
   2b958:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
   2b95a:	8873      	ldrh	r3, [r6, #2]
   2b95c:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
   2b95e:	88b3      	ldrh	r3, [r6, #4]
   2b960:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
   2b962:	88f3      	ldrh	r3, [r6, #6]
   2b964:	80c3      	strh	r3, [r0, #6]
   2b966:	2300      	movs	r3, #0
   2b968:	4628      	mov	r0, r5
   2b96a:	9300      	str	r3, [sp, #0]
   2b96c:	4622      	mov	r2, r4
   2b96e:	2105      	movs	r1, #5
   2b970:	f00e f921 	bl	39bb6 <bt_l2cap_send_cb>
	if (err) {
   2b974:	4605      	mov	r5, r0
   2b976:	b110      	cbz	r0, 2b97e <bt_l2cap_update_conn_param+0x52>
		net_buf_unref(buf);
   2b978:	4620      	mov	r0, r4
   2b97a:	f002 ff81 	bl	2e880 <net_buf_unref>
}
   2b97e:	4628      	mov	r0, r5
   2b980:	b002      	add	sp, #8
   2b982:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
   2b984:	f06f 050b 	mvn.w	r5, #11
   2b988:	e7f9      	b.n	2b97e <bt_l2cap_update_conn_param+0x52>
   2b98a:	bf00      	nop
   2b98c:	200034b2 	.word	0x200034b2

0002b990 <att_op_get_type>:
#endif /* CONFIG_BT_GATT_CLIENT */
};

static att_type_t att_op_get_type(uint8_t op)
{
	switch (op) {
   2b990:	2823      	cmp	r0, #35	; 0x23
   2b992:	d81f      	bhi.n	2b9d4 <att_op_get_type+0x44>
   2b994:	281a      	cmp	r0, #26
   2b996:	d804      	bhi.n	2b9a2 <att_op_get_type+0x12>
   2b998:	1e43      	subs	r3, r0, #1
   2b99a:	2b18      	cmp	r3, #24
   2b99c:	d90e      	bls.n	2b9bc <att_op_get_type+0x2c>

	if (op & ATT_CMD_MASK) {
		return ATT_COMMAND;
	}

	return ATT_UNKNOWN;
   2b99e:	2006      	movs	r0, #6
   2b9a0:	4770      	bx	lr
	switch (op) {
   2b9a2:	f1a0 031b 	sub.w	r3, r0, #27
   2b9a6:	2b08      	cmp	r3, #8
   2b9a8:	d81e      	bhi.n	2b9e8 <att_op_get_type+0x58>
   2b9aa:	e8df f003 	tbb	[pc, r3]
   2b9ae:	1d05      	.short	0x1d05
   2b9b0:	191d231b 	.word	0x191d231b
   2b9b4:	1d25      	.short	0x1d25
   2b9b6:	05          	.byte	0x05
   2b9b7:	00          	.byte	0x00
		return ATT_NOTIFICATION;
   2b9b8:	2003      	movs	r0, #3
   2b9ba:	4770      	bx	lr
	switch (op) {
   2b9bc:	4a0f      	ldr	r2, [pc, #60]	; (2b9fc <att_op_get_type+0x6c>)
   2b9be:	2301      	movs	r3, #1
   2b9c0:	4083      	lsls	r3, r0
   2b9c2:	401a      	ands	r2, r3
   2b9c4:	b9c2      	cbnz	r2, 2b9f8 <att_op_get_type+0x68>
   2b9c6:	4a0e      	ldr	r2, [pc, #56]	; (2ba00 <att_op_get_type+0x70>)
   2b9c8:	401a      	ands	r2, r3
	return ATT_UNKNOWN;
   2b9ca:	2a00      	cmp	r2, #0
   2b9cc:	bf14      	ite	ne
   2b9ce:	2001      	movne	r0, #1
   2b9d0:	2006      	moveq	r0, #6
   2b9d2:	4770      	bx	lr
	switch (op) {
   2b9d4:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   2b9d8:	2b52      	cmp	r3, #82	; 0x52
   2b9da:	d105      	bne.n	2b9e8 <att_op_get_type+0x58>
		return ATT_COMMAND;
   2b9dc:	2000      	movs	r0, #0
}
   2b9de:	4770      	bx	lr
		return ATT_REQUEST;
   2b9e0:	2001      	movs	r0, #1
   2b9e2:	4770      	bx	lr
		return ATT_INDICATION;
   2b9e4:	2005      	movs	r0, #5
   2b9e6:	4770      	bx	lr
		return ATT_COMMAND;
   2b9e8:	f010 0f40 	tst.w	r0, #64	; 0x40
   2b9ec:	bf0c      	ite	eq
   2b9ee:	2006      	moveq	r0, #6
   2b9f0:	2000      	movne	r0, #0
   2b9f2:	4770      	bx	lr
	switch (op) {
   2b9f4:	2004      	movs	r0, #4
   2b9f6:	4770      	bx	lr
		return ATT_RESPONSE;
   2b9f8:	2002      	movs	r0, #2
   2b9fa:	4770      	bx	lr
   2b9fc:	028aaaaa 	.word	0x028aaaaa
   2ba00:	01455554 	.word	0x01455554

0002ba04 <bt_att_released>:
	/* Prepend back to the list as it could not be sent */
	sys_slist_prepend(&chan->att->reqs, node);
}

static void bt_att_released(struct bt_l2cap_chan *ch)
{
   2ba04:	b507      	push	{r0, r1, r2, lr}
	struct bt_att_chan *chan = ATT_CHAN(ch);
   2ba06:	3804      	subs	r0, #4
   2ba08:	9001      	str	r0, [sp, #4]

	BT_DBG("chan %p", chan);

	k_mem_slab_free(&chan_slab, (void **)&chan);
   2ba0a:	a901      	add	r1, sp, #4
   2ba0c:	4802      	ldr	r0, [pc, #8]	; (2ba18 <bt_att_released+0x14>)
   2ba0e:	f009 facb 	bl	34fa8 <k_mem_slab_free>
}
   2ba12:	b003      	add	sp, #12
   2ba14:	f85d fb04 	ldr.w	pc, [sp], #4
   2ba18:	20000b34 	.word	0x20000b34

0002ba1c <tx_meta_data_free>:
{
   2ba1c:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(data);
   2ba1e:	4604      	mov	r4, r0
   2ba20:	b940      	cbnz	r0, 2ba34 <tx_meta_data_free+0x18>
   2ba22:	4909      	ldr	r1, [pc, #36]	; (2ba48 <tx_meta_data_free+0x2c>)
   2ba24:	4809      	ldr	r0, [pc, #36]	; (2ba4c <tx_meta_data_free+0x30>)
   2ba26:	22a5      	movs	r2, #165	; 0xa5
   2ba28:	f00d f873 	bl	38b12 <assert_print>
   2ba2c:	4806      	ldr	r0, [pc, #24]	; (2ba48 <tx_meta_data_free+0x2c>)
   2ba2e:	21a5      	movs	r1, #165	; 0xa5
   2ba30:	f00d f868 	bl	38b04 <assert_post_action>
	(void)memset(data, 0, sizeof(*data));
   2ba34:	2100      	movs	r1, #0
   2ba36:	2214      	movs	r2, #20
   2ba38:	f00d fcc5 	bl	393c6 <memset>
	k_fifo_put(&free_att_tx_meta_data, data);
   2ba3c:	4621      	mov	r1, r4
   2ba3e:	4804      	ldr	r0, [pc, #16]	; (2ba50 <tx_meta_data_free+0x34>)
}
   2ba40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_fifo_put(&free_att_tx_meta_data, data);
   2ba44:	f010 b90c 	b.w	3bc60 <k_queue_append>
   2ba48:	0003e69f 	.word	0x0003e69f
   2ba4c:	0003d1d7 	.word	0x0003d1d7
   2ba50:	20000bb4 	.word	0x20000bb4

0002ba54 <find_type_cb>:
{
   2ba54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2ba58:	b093      	sub	sp, #76	; 0x4c
	struct bt_att_chan *chan = data->chan;
   2ba5a:	f8d2 a000 	ldr.w	sl, [r2]
{
   2ba5e:	af02      	add	r7, sp, #8
	struct bt_conn *conn = chan->chan.chan.conn;
   2ba60:	f8da 3004 	ldr.w	r3, [sl, #4]
   2ba64:	607b      	str	r3, [r7, #4]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   2ba66:	2500      	movs	r5, #0
   2ba68:	f642 0301 	movw	r3, #10241	; 0x2801
{
   2ba6c:	4680      	mov	r8, r0
   2ba6e:	460e      	mov	r6, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   2ba70:	6800      	ldr	r0, [r0, #0]
   2ba72:	f887 502c 	strb.w	r5, [r7, #44]	; 0x2c
   2ba76:	85fb      	strh	r3, [r7, #46]	; 0x2e
   2ba78:	f107 012c 	add.w	r1, r7, #44	; 0x2c
{
   2ba7c:	4614      	mov	r4, r2
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   2ba7e:	f00d fcc0 	bl	39402 <bt_uuid_cmp>
   2ba82:	2800      	cmp	r0, #0
   2ba84:	d074      	beq.n	2bb70 <find_type_cb+0x11c>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
   2ba86:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   2ba8a:	f8d8 0000 	ldr.w	r0, [r8]
   2ba8e:	f887 502c 	strb.w	r5, [r7, #44]	; 0x2c
   2ba92:	85fb      	strh	r3, [r7, #46]	; 0x2e
   2ba94:	f107 012c 	add.w	r1, r7, #44	; 0x2c
   2ba98:	f00d fcb3 	bl	39402 <bt_uuid_cmp>
   2ba9c:	b138      	cbz	r0, 2baae <find_type_cb+0x5a>
		if (data->group &&
   2ba9e:	68a3      	ldr	r3, [r4, #8]
   2baa0:	b11b      	cbz	r3, 2baaa <find_type_cb+0x56>
   2baa2:	885a      	ldrh	r2, [r3, #2]
   2baa4:	42b2      	cmp	r2, r6
   2baa6:	d200      	bcs.n	2baaa <find_type_cb+0x56>
	data->group->end_handle = sys_cpu_to_le16(handle);
   2baa8:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   2baaa:	2001      	movs	r0, #1
   2baac:	e009      	b.n	2bac2 <find_type_cb+0x6e>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
   2baae:	6861      	ldr	r1, [r4, #4]
   2bab0:	4608      	mov	r0, r1
   2bab2:	f00e f8ae 	bl	39c12 <net_buf_frags_len>
   2bab6:	f8ba 302a 	ldrh.w	r3, [sl, #42]	; 0x2a
   2baba:	1a1b      	subs	r3, r3, r0
   2babc:	2b03      	cmp	r3, #3
   2babe:	d804      	bhi.n	2baca <find_type_cb+0x76>
		return BT_GATT_ITER_STOP;
   2bac0:	2000      	movs	r0, #0
}
   2bac2:	3744      	adds	r7, #68	; 0x44
   2bac4:	46bd      	mov	sp, r7
   2bac6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_buf_frag_last(data->buf);
   2baca:	4608      	mov	r0, r1
   2bacc:	f002 ff30 	bl	2e930 <net_buf_frag_last>
   2bad0:	4605      	mov	r5, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
   2bad2:	6860      	ldr	r0, [r4, #4]
   2bad4:	f00e f89d 	bl	39c12 <net_buf_frags_len>
   2bad8:	f8ba b02a 	ldrh.w	fp, [sl, #42]	; 0x2a
	return net_buf_simple_tailroom(&buf->b);
   2badc:	f105 0908 	add.w	r9, r5, #8
   2bae0:	ebab 0b00 	sub.w	fp, fp, r0
   2bae4:	4648      	mov	r0, r9
   2bae6:	f00f f80f 	bl	3ab08 <net_buf_simple_tailroom>
   2baea:	4558      	cmp	r0, fp
   2baec:	d943      	bls.n	2bb76 <find_type_cb+0x122>
   2baee:	6860      	ldr	r0, [r4, #4]
   2baf0:	f00e f88f 	bl	39c12 <net_buf_frags_len>
   2baf4:	f8ba 302a 	ldrh.w	r3, [sl, #42]	; 0x2a
   2baf8:	1a18      	subs	r0, r3, r0
	if (!len) {
   2bafa:	b970      	cbnz	r0, 2bb1a <find_type_cb+0xc6>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
   2bafc:	6863      	ldr	r3, [r4, #4]
   2bafe:	7998      	ldrb	r0, [r3, #6]
   2bb00:	f002 fc64 	bl	2e3cc <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   2bb04:	2200      	movs	r2, #0
   2bb06:	2300      	movs	r3, #0
   2bb08:	f00e ffed 	bl	3aae6 <net_buf_alloc_fixed>
		if (!frag) {
   2bb0c:	4605      	mov	r5, r0
   2bb0e:	2800      	cmp	r0, #0
   2bb10:	d0d6      	beq.n	2bac0 <find_type_cb+0x6c>
		net_buf_frag_add(data->buf, frag);
   2bb12:	4601      	mov	r1, r0
   2bb14:	6860      	ldr	r0, [r4, #4]
   2bb16:	f002 ff49 	bl	2e9ac <net_buf_frag_add>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
   2bb1a:	2300      	movs	r3, #0
   2bb1c:	9300      	str	r3, [sp, #0]
   2bb1e:	f8d8 a004 	ldr.w	sl, [r8, #4]
   2bb22:	6878      	ldr	r0, [r7, #4]
   2bb24:	4641      	mov	r1, r8
   2bb26:	2310      	movs	r3, #16
   2bb28:	f107 0208 	add.w	r2, r7, #8
   2bb2c:	47d0      	blx	sl
	if (read < 0) {
   2bb2e:	f1b0 0800 	subs.w	r8, r0, #0
   2bb32:	db1d      	blt.n	2bb70 <find_type_cb+0x11c>
	if (read != data->value_len) {
   2bb34:	7c22      	ldrb	r2, [r4, #16]
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   2bb36:	68e0      	ldr	r0, [r4, #12]
	if (read != data->value_len) {
   2bb38:	4542      	cmp	r2, r8
   2bb3a:	d048      	beq.n	2bbce <find_type_cb+0x17a>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   2bb3c:	4601      	mov	r1, r0
   2bb3e:	f107 002c 	add.w	r0, r7, #44	; 0x2c
   2bb42:	f00d fc8c 	bl	3945e <bt_uuid_create>
   2bb46:	b9d0      	cbnz	r0, 2bb7e <find_type_cb+0x12a>
			BT_WARN("Unable to create UUID: size %u", data->value_len);
   2bb48:	4823      	ldr	r0, [pc, #140]	; (2bbd8 <find_type_cb+0x184>)
   2bb4a:	6803      	ldr	r3, [r0, #0]
   2bb4c:	f013 0f06 	tst.w	r3, #6
   2bb50:	d00e      	beq.n	2bb70 <find_type_cb+0x11c>
   2bb52:	466d      	mov	r5, sp
   2bb54:	b088      	sub	sp, #32
   2bb56:	7c23      	ldrb	r3, [r4, #16]
   2bb58:	aa02      	add	r2, sp, #8
   2bb5a:	4920      	ldr	r1, [pc, #128]	; (2bbdc <find_type_cb+0x188>)
   2bb5c:	e9c2 1305 	strd	r1, r3, [r2, #20]
			BT_WARN("Unable to create UUID: size %d", read);
   2bb60:	2303      	movs	r3, #3
   2bb62:	f842 3f10 	str.w	r3, [r2, #16]!
   2bb66:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   2bb6a:	f00e f940 	bl	39dee <z_log_msg_static_create.constprop.0>
   2bb6e:	46ad      	mov	sp, r5
	data->group = NULL;
   2bb70:	2300      	movs	r3, #0
   2bb72:	60a3      	str	r3, [r4, #8]
	return BT_GATT_ITER_CONTINUE;
   2bb74:	e799      	b.n	2baaa <find_type_cb+0x56>
	return net_buf_simple_tailroom(&buf->b);
   2bb76:	4648      	mov	r0, r9
   2bb78:	f00e ffc6 	bl	3ab08 <net_buf_simple_tailroom>
   2bb7c:	e7bd      	b.n	2bafa <find_type_cb+0xa6>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
   2bb7e:	fa5f f288 	uxtb.w	r2, r8
   2bb82:	f107 0108 	add.w	r1, r7, #8
   2bb86:	f107 0018 	add.w	r0, r7, #24
   2bb8a:	f00d fc68 	bl	3945e <bt_uuid_create>
   2bb8e:	b958      	cbnz	r0, 2bba8 <find_type_cb+0x154>
			BT_WARN("Unable to create UUID: size %d", read);
   2bb90:	4811      	ldr	r0, [pc, #68]	; (2bbd8 <find_type_cb+0x184>)
   2bb92:	6803      	ldr	r3, [r0, #0]
   2bb94:	f013 0f06 	tst.w	r3, #6
   2bb98:	d0ea      	beq.n	2bb70 <find_type_cb+0x11c>
   2bb9a:	466d      	mov	r5, sp
   2bb9c:	b088      	sub	sp, #32
   2bb9e:	aa02      	add	r2, sp, #8
   2bba0:	4b0f      	ldr	r3, [pc, #60]	; (2bbe0 <find_type_cb+0x18c>)
   2bba2:	e9c2 3805 	strd	r3, r8, [r2, #20]
   2bba6:	e7db      	b.n	2bb60 <find_type_cb+0x10c>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
   2bba8:	f107 0118 	add.w	r1, r7, #24
   2bbac:	f107 002c 	add.w	r0, r7, #44	; 0x2c
   2bbb0:	f00d fc27 	bl	39402 <bt_uuid_cmp>
	} else if (memcmp(data->value, uuid, read)) {
   2bbb4:	2800      	cmp	r0, #0
   2bbb6:	d1db      	bne.n	2bb70 <find_type_cb+0x11c>
	data->err = 0x00;
   2bbb8:	2300      	movs	r3, #0
   2bbba:	7463      	strb	r3, [r4, #17]
	return net_buf_simple_add(&buf->b, len);
   2bbbc:	2104      	movs	r1, #4
   2bbbe:	f105 0008 	add.w	r0, r5, #8
   2bbc2:	f002 ff63 	bl	2ea8c <net_buf_simple_add>
	data->group = net_buf_add(frag, sizeof(*data->group));
   2bbc6:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   2bbc8:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   2bbca:	68a3      	ldr	r3, [r4, #8]
   2bbcc:	e76c      	b.n	2baa8 <find_type_cb+0x54>
	} else if (memcmp(data->value, uuid, read)) {
   2bbce:	f107 0108 	add.w	r1, r7, #8
   2bbd2:	f00d fbc6 	bl	39362 <memcmp>
   2bbd6:	e7ed      	b.n	2bbb4 <find_type_cb+0x160>
   2bbd8:	20000a78 	.word	0x20000a78
   2bbdc:	0003e6ce 	.word	0x0003e6ce
   2bbe0:	0003e6ed 	.word	0x0003e6ed

0002bbe4 <chan_send>:
{
   2bbe4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2bbe8:	4606      	mov	r6, r0
	struct bt_att_tx_meta_data *data = bt_att_tx_meta_data(buf);
   2bbea:	f8d1 9014 	ldr.w	r9, [r1, #20]
	hdr = (void *)buf->data;
   2bbee:	688b      	ldr	r3, [r1, #8]
{
   2bbf0:	b089      	sub	sp, #36	; 0x24
   2bbf2:	460c      	mov	r4, r1
	if (!atomic_test_bit(chan->flags, ATT_CONNECTED)) {
   2bbf4:	3098      	adds	r0, #152	; 0x98
   2bbf6:	2102      	movs	r1, #2
   2bbf8:	f00e f825 	bl	39c46 <atomic_test_bit>
   2bbfc:	2800      	cmp	r0, #0
   2bbfe:	d050      	beq.n	2bca2 <chan_send+0xbe>
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   2bc00:	781b      	ldrb	r3, [r3, #0]
   2bc02:	2bd2      	cmp	r3, #210	; 0xd2
   2bc04:	d11d      	bne.n	2bc42 <chan_send+0x5e>
		err = bt_smp_sign(chan->att->conn, buf);
   2bc06:	6833      	ldr	r3, [r6, #0]
   2bc08:	4621      	mov	r1, r4
   2bc0a:	6818      	ldr	r0, [r3, #0]
   2bc0c:	f00e fed5 	bl	3a9ba <bt_smp_sign>
		if (err) {
   2bc10:	4605      	mov	r5, r0
   2bc12:	b1b0      	cbz	r0, 2bc42 <chan_send+0x5e>
			BT_ERR("Error signing data");
   2bc14:	4824      	ldr	r0, [pc, #144]	; (2bca8 <chan_send+0xc4>)
   2bc16:	6803      	ldr	r3, [r0, #0]
   2bc18:	075b      	lsls	r3, r3, #29
   2bc1a:	d008      	beq.n	2bc2e <chan_send+0x4a>
   2bc1c:	4b23      	ldr	r3, [pc, #140]	; (2bcac <chan_send+0xc8>)
   2bc1e:	9307      	str	r3, [sp, #28]
   2bc20:	aa06      	add	r2, sp, #24
   2bc22:	2302      	movs	r3, #2
   2bc24:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   2bc28:	9306      	str	r3, [sp, #24]
   2bc2a:	f00e f8e0 	bl	39dee <z_log_msg_static_create.constprop.0>
			tx_meta_data_free(bt_att_tx_meta_data(buf));
   2bc2e:	6960      	ldr	r0, [r4, #20]
   2bc30:	f7ff fef4 	bl	2ba1c <tx_meta_data_free>
			net_buf_unref(buf);
   2bc34:	4620      	mov	r0, r4
   2bc36:	f002 fe23 	bl	2e880 <net_buf_unref>
}
   2bc3a:	4628      	mov	r0, r5
   2bc3c:	b009      	add	sp, #36	; 0x24
   2bc3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	state->offset = net_buf_simple_headroom(buf);
   2bc42:	f104 0008 	add.w	r0, r4, #8
   2bc46:	f00e ff5b 	bl	3ab00 <net_buf_simple_headroom>
	state->len = buf->len;
   2bc4a:	f8b4 800c 	ldrh.w	r8, [r4, #12]
	data->att_chan = chan;
   2bc4e:	f8c9 6000 	str.w	r6, [r9]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   2bc52:	6833      	ldr	r3, [r6, #0]
   2bc54:	681d      	ldr	r5, [r3, #0]
	const att_type_t op_type = att_op_get_type(buf->data[0]);
   2bc56:	68a3      	ldr	r3, [r4, #8]
	state->offset = net_buf_simple_headroom(buf);
   2bc58:	4607      	mov	r7, r0
   2bc5a:	7818      	ldrb	r0, [r3, #0]
   2bc5c:	f7ff fe98 	bl	2b990 <att_op_get_type>
	switch (op_type) {
   2bc60:	2805      	cmp	r0, #5
   2bc62:	d813      	bhi.n	2bc8c <chan_send+0xa8>
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   2bc64:	4b12      	ldr	r3, [pc, #72]	; (2bcb0 <chan_send+0xcc>)
   2bc66:	f8cd 9000 	str.w	r9, [sp]
   2bc6a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   2bc6e:	4622      	mov	r2, r4
   2bc70:	4628      	mov	r0, r5
   2bc72:	2104      	movs	r1, #4
   2bc74:	f00d ff9f 	bl	39bb6 <bt_l2cap_send_cb>
	if (err) {
   2bc78:	4605      	mov	r5, r0
   2bc7a:	2800      	cmp	r0, #0
   2bc7c:	d0dd      	beq.n	2bc3a <chan_send+0x56>
	buf->data = buf->__buf + state->offset;
   2bc7e:	6923      	ldr	r3, [r4, #16]
	buf->len = state->len;
   2bc80:	f8a4 800c 	strh.w	r8, [r4, #12]
	buf->data = buf->__buf + state->offset;
   2bc84:	fa13 f787 	uxtah	r7, r3, r7
   2bc88:	60a7      	str	r7, [r4, #8]
}
   2bc8a:	e7d6      	b.n	2bc3a <chan_send+0x56>
		__ASSERT(false, "Unknown op type 0x%02X", op_type);
   2bc8c:	4909      	ldr	r1, [pc, #36]	; (2bcb4 <chan_send+0xd0>)
   2bc8e:	480a      	ldr	r0, [pc, #40]	; (2bcb8 <chan_send+0xd4>)
   2bc90:	f240 2257 	movw	r2, #599	; 0x257
   2bc94:	f00c ff3d 	bl	38b12 <assert_print>
   2bc98:	4806      	ldr	r0, [pc, #24]	; (2bcb4 <chan_send+0xd0>)
   2bc9a:	f240 2157 	movw	r1, #599	; 0x257
   2bc9e:	f00c ff31 	bl	38b04 <assert_post_action>
		return -EINVAL;
   2bca2:	f06f 0515 	mvn.w	r5, #21
   2bca6:	e7c8      	b.n	2bc3a <chan_send+0x56>
   2bca8:	20000a78 	.word	0x20000a78
   2bcac:	0003e70c 	.word	0x0003e70c
   2bcb0:	0003c90c 	.word	0x0003c90c
   2bcb4:	0003e69f 	.word	0x0003e69f
   2bcb8:	0003d1d7 	.word	0x0003d1d7

0002bcbc <bt_att_chan_req_send>:
{
   2bcbc:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(chan);
   2bcbe:	b950      	cbnz	r0, 2bcd6 <bt_att_chan_req_send+0x1a>
   2bcc0:	4917      	ldr	r1, [pc, #92]	; (2bd20 <bt_att_chan_req_send+0x64>)
   2bcc2:	4818      	ldr	r0, [pc, #96]	; (2bd24 <bt_att_chan_req_send+0x68>)
   2bcc4:	f44f 7246 	mov.w	r2, #792	; 0x318
   2bcc8:	f00c ff23 	bl	38b12 <assert_print>
   2bccc:	f44f 7146 	mov.w	r1, #792	; 0x318
	__ASSERT_NO_MSG(req);
   2bcd0:	4813      	ldr	r0, [pc, #76]	; (2bd20 <bt_att_chan_req_send+0x64>)
   2bcd2:	f00c ff17 	bl	38b04 <assert_post_action>
   2bcd6:	b941      	cbnz	r1, 2bcea <bt_att_chan_req_send+0x2e>
   2bcd8:	4911      	ldr	r1, [pc, #68]	; (2bd20 <bt_att_chan_req_send+0x64>)
   2bcda:	4812      	ldr	r0, [pc, #72]	; (2bd24 <bt_att_chan_req_send+0x68>)
   2bcdc:	f240 3219 	movw	r2, #793	; 0x319
   2bce0:	f00c ff17 	bl	38b12 <assert_print>
   2bce4:	f240 3119 	movw	r1, #793	; 0x319
   2bce8:	e7f2      	b.n	2bcd0 <bt_att_chan_req_send+0x14>
	__ASSERT_NO_MSG(req->func);
   2bcea:	684a      	ldr	r2, [r1, #4]
   2bcec:	b942      	cbnz	r2, 2bd00 <bt_att_chan_req_send+0x44>
   2bcee:	490c      	ldr	r1, [pc, #48]	; (2bd20 <bt_att_chan_req_send+0x64>)
   2bcf0:	480c      	ldr	r0, [pc, #48]	; (2bd24 <bt_att_chan_req_send+0x68>)
   2bcf2:	f240 321a 	movw	r2, #794	; 0x31a
   2bcf6:	f00c ff0c 	bl	38b12 <assert_print>
   2bcfa:	f240 311a 	movw	r1, #794	; 0x31a
   2bcfe:	e7e7      	b.n	2bcd0 <bt_att_chan_req_send+0x14>
	__ASSERT_NO_MSG(!chan->req);
   2bd00:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
   2bd04:	b143      	cbz	r3, 2bd18 <bt_att_chan_req_send+0x5c>
   2bd06:	4906      	ldr	r1, [pc, #24]	; (2bd20 <bt_att_chan_req_send+0x64>)
   2bd08:	4806      	ldr	r0, [pc, #24]	; (2bd24 <bt_att_chan_req_send+0x68>)
   2bd0a:	f240 321b 	movw	r2, #795	; 0x31b
   2bd0e:	f00c ff00 	bl	38b12 <assert_print>
   2bd12:	f240 311b 	movw	r1, #795	; 0x31b
   2bd16:	e7db      	b.n	2bcd0 <bt_att_chan_req_send+0x14>
}
   2bd18:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return chan_req_send(chan, req);
   2bd1c:	f00e b86a 	b.w	39df4 <chan_req_send>
   2bd20:	0003e69f 	.word	0x0003e69f
   2bd24:	0003d1d7 	.word	0x0003d1d7

0002bd28 <att_get>:
{
   2bd28:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   2bd2a:	7a83      	ldrb	r3, [r0, #10]
   2bd2c:	2b07      	cmp	r3, #7
   2bd2e:	d011      	beq.n	2bd54 <att_get+0x2c>
		BT_WARN("Not connected");
   2bd30:	481a      	ldr	r0, [pc, #104]	; (2bd9c <att_get+0x74>)
   2bd32:	6803      	ldr	r3, [r0, #0]
   2bd34:	f013 0f06 	tst.w	r3, #6
   2bd38:	d008      	beq.n	2bd4c <att_get+0x24>
   2bd3a:	4b19      	ldr	r3, [pc, #100]	; (2bda0 <att_get+0x78>)
   2bd3c:	9305      	str	r3, [sp, #20]
   2bd3e:	2302      	movs	r3, #2
   2bd40:	9304      	str	r3, [sp, #16]
   2bd42:	aa04      	add	r2, sp, #16
   2bd44:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   2bd48:	f00e f851 	bl	39dee <z_log_msg_static_create.constprop.0>
		return NULL;
   2bd4c:	2000      	movs	r0, #0
}
   2bd4e:	b007      	add	sp, #28
   2bd50:	f85d fb04 	ldr.w	pc, [sp], #4
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   2bd54:	2104      	movs	r1, #4
   2bd56:	f00d ff47 	bl	39be8 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   2bd5a:	4603      	mov	r3, r0
   2bd5c:	b958      	cbnz	r0, 2bd76 <att_get+0x4e>
		BT_ERR("Unable to find ATT channel");
   2bd5e:	480f      	ldr	r0, [pc, #60]	; (2bd9c <att_get+0x74>)
   2bd60:	6803      	ldr	r3, [r0, #0]
   2bd62:	075b      	lsls	r3, r3, #29
   2bd64:	d0f2      	beq.n	2bd4c <att_get+0x24>
   2bd66:	4b0f      	ldr	r3, [pc, #60]	; (2bda4 <att_get+0x7c>)
   2bd68:	9305      	str	r3, [sp, #20]
   2bd6a:	2302      	movs	r3, #2
   2bd6c:	9304      	str	r3, [sp, #16]
   2bd6e:	aa04      	add	r2, sp, #16
   2bd70:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   2bd74:	e7e8      	b.n	2bd48 <att_get+0x20>
	__ASSERT(atomic_test_bit(att_chan->flags, ATT_CONNECTED),
   2bd76:	2102      	movs	r1, #2
   2bd78:	3094      	adds	r0, #148	; 0x94
   2bd7a:	f00d ff64 	bl	39c46 <atomic_test_bit>
   2bd7e:	b950      	cbnz	r0, 2bd96 <att_get+0x6e>
   2bd80:	4909      	ldr	r1, [pc, #36]	; (2bda8 <att_get+0x80>)
   2bd82:	480a      	ldr	r0, [pc, #40]	; (2bdac <att_get+0x84>)
   2bd84:	f640 322e 	movw	r2, #2862	; 0xb2e
   2bd88:	f00c fec3 	bl	38b12 <assert_print>
   2bd8c:	4806      	ldr	r0, [pc, #24]	; (2bda8 <att_get+0x80>)
   2bd8e:	f640 312e 	movw	r1, #2862	; 0xb2e
   2bd92:	f00c feb7 	bl	38b04 <assert_post_action>
	return att_chan->att;
   2bd96:	f853 0c04 	ldr.w	r0, [r3, #-4]
   2bd9a:	e7d8      	b.n	2bd4e <att_get+0x26>
   2bd9c:	20000a78 	.word	0x20000a78
   2bda0:	0003e71f 	.word	0x0003e71f
   2bda4:	0003e72d 	.word	0x0003e72d
   2bda8:	0003e69f 	.word	0x0003e69f
   2bdac:	0003d1d7 	.word	0x0003d1d7

0002bdb0 <bt_att_connected>:
{
   2bdb0:	b510      	push	{r4, lr}
   2bdb2:	f100 0394 	add.w	r3, r0, #148	; 0x94
   2bdb6:	4604      	mov	r4, r0
   2bdb8:	f3bf 8f5b 	dmb	ish
   2bdbc:	e853 1f00 	ldrex	r1, [r3]
   2bdc0:	f041 0104 	orr.w	r1, r1, #4
   2bdc4:	e843 1200 	strex	r2, r1, [r3]
   2bdc8:	2a00      	cmp	r2, #0
   2bdca:	d1f7      	bne.n	2bdbc <bt_att_connected+0xc>
   2bdcc:	f3bf 8f5b 	dmb	ish
		le_chan->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   2bdd0:	2317      	movs	r3, #23
   2bdd2:	84e3      	strh	r3, [r4, #38]	; 0x26
		le_chan->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
   2bdd4:	82e3      	strh	r3, [r4, #22]
	att_chan_mtu_updated(att_chan);
   2bdd6:	1f20      	subs	r0, r4, #4
   2bdd8:	f00d ffc6 	bl	39d68 <att_chan_mtu_updated>
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
   2bddc:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
   2bde0:	4903      	ldr	r1, [pc, #12]	; (2bdf0 <bt_att_connected+0x40>)
   2bde2:	f00a f8d5 	bl	35f90 <k_work_init_delayable>
	bt_gatt_connected(le_chan->chan.conn);
   2bde6:	6820      	ldr	r0, [r4, #0]
}
   2bde8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_gatt_connected(le_chan->chan.conn);
   2bdec:	f001 bf28 	b.w	2dc40 <bt_gatt_connected>
   2bdf0:	0002cb25 	.word	0x0002cb25

0002bdf4 <read_group_cb>:
{
   2bdf4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   2bdf8:	4605      	mov	r5, r0
   2bdfa:	460e      	mov	r6, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   2bdfc:	f04f 0800 	mov.w	r8, #0
   2be00:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   2be04:	6800      	ldr	r0, [r0, #0]
	struct bt_att_chan *chan = data->chan;
   2be06:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   2be08:	f88d 8008 	strb.w	r8, [sp, #8]
   2be0c:	a902      	add	r1, sp, #8
{
   2be0e:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   2be10:	f8ad 300a 	strh.w	r3, [sp, #10]
   2be14:	f00d faf5 	bl	39402 <bt_uuid_cmp>
   2be18:	b1a0      	cbz	r0, 2be44 <read_group_cb+0x50>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   2be1a:	f642 0301 	movw	r3, #10241	; 0x2801
   2be1e:	6828      	ldr	r0, [r5, #0]
   2be20:	f88d 800c 	strb.w	r8, [sp, #12]
   2be24:	a903      	add	r1, sp, #12
   2be26:	f8ad 300e 	strh.w	r3, [sp, #14]
   2be2a:	f00d faea 	bl	39402 <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   2be2e:	b148      	cbz	r0, 2be44 <read_group_cb+0x50>
		if (data->group &&
   2be30:	6923      	ldr	r3, [r4, #16]
   2be32:	b11b      	cbz	r3, 2be3c <read_group_cb+0x48>
   2be34:	885a      	ldrh	r2, [r3, #2]
   2be36:	42b2      	cmp	r2, r6
   2be38:	d200      	bcs.n	2be3c <read_group_cb+0x48>
			data->group->end_handle = sys_cpu_to_le16(handle);
   2be3a:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   2be3c:	2001      	movs	r0, #1
}
   2be3e:	b004      	add	sp, #16
   2be40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   2be44:	6861      	ldr	r1, [r4, #4]
   2be46:	6828      	ldr	r0, [r5, #0]
   2be48:	f00d fadb 	bl	39402 <bt_uuid_cmp>
   2be4c:	b110      	cbz	r0, 2be54 <read_group_cb+0x60>
		data->group = NULL;
   2be4e:	2300      	movs	r3, #0
   2be50:	6123      	str	r3, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
   2be52:	e7f3      	b.n	2be3c <read_group_cb+0x48>
	if (data->rsp->len &&
   2be54:	68e3      	ldr	r3, [r4, #12]
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   2be56:	68a0      	ldr	r0, [r4, #8]
	if (data->rsp->len &&
   2be58:	781a      	ldrb	r2, [r3, #0]
   2be5a:	b132      	cbz	r2, 2be6a <read_group_cb+0x76>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   2be5c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
   2be5e:	8981      	ldrh	r1, [r0, #12]
   2be60:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
   2be62:	4293      	cmp	r3, r2
   2be64:	da01      	bge.n	2be6a <read_group_cb+0x76>
		return BT_GATT_ITER_STOP;
   2be66:	2000      	movs	r0, #0
   2be68:	e7e9      	b.n	2be3e <read_group_cb+0x4a>
	return net_buf_simple_add(&buf->b, len);
   2be6a:	2104      	movs	r1, #4
   2be6c:	3008      	adds	r0, #8
   2be6e:	f002 fe0d 	bl	2ea8c <net_buf_simple_add>
	data->group = net_buf_add(data->buf, sizeof(*data->group));
   2be72:	6120      	str	r0, [r4, #16]
	data->group->start_handle = sys_cpu_to_le16(handle);
   2be74:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   2be76:	6923      	ldr	r3, [r4, #16]
   2be78:	805e      	strh	r6, [r3, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   2be7a:	4b08      	ldr	r3, [pc, #32]	; (2be9c <read_group_cb+0xa8>)
   2be7c:	9300      	str	r3, [sp, #0]
   2be7e:	9401      	str	r4, [sp, #4]
   2be80:	68a2      	ldr	r2, [r4, #8]
   2be82:	2300      	movs	r3, #0
   2be84:	4629      	mov	r1, r5
   2be86:	4638      	mov	r0, r7
   2be88:	f00d fff5 	bl	39e76 <att_chan_read>
	if (read < 0) {
   2be8c:	2800      	cmp	r0, #0
   2be8e:	dbea      	blt.n	2be66 <read_group_cb+0x72>
	if (!data->group) {
   2be90:	6920      	ldr	r0, [r4, #16]
   2be92:	3800      	subs	r0, #0
   2be94:	bf18      	it	ne
   2be96:	2001      	movne	r0, #1
   2be98:	e7d1      	b.n	2be3e <read_group_cb+0x4a>
   2be9a:	bf00      	nop
   2be9c:	00039dcf 	.word	0x00039dcf

0002bea0 <read_type_cb>:
{
   2bea0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att_chan *chan = data->chan;
   2bea4:	6817      	ldr	r7, [r2, #0]
{
   2bea6:	4605      	mov	r5, r0
   2bea8:	4688      	mov	r8, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   2beaa:	6800      	ldr	r0, [r0, #0]
   2beac:	6851      	ldr	r1, [r2, #4]
	struct bt_conn *conn = chan->chan.chan.conn;
   2beae:	687e      	ldr	r6, [r7, #4]
{
   2beb0:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   2beb2:	f00d faa6 	bl	39402 <bt_uuid_cmp>
   2beb6:	4681      	mov	r9, r0
   2beb8:	2800      	cmp	r0, #0
   2beba:	d13c      	bne.n	2bf36 <read_type_cb+0x96>
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   2bebc:	4630      	mov	r0, r6
   2bebe:	2295      	movs	r2, #149	; 0x95
   2bec0:	4629      	mov	r1, r5
   2bec2:	f00e fcf7 	bl	3a8b4 <bt_gatt_check_perm>
   2bec6:	4606      	mov	r6, r0
   2bec8:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   2beca:	b140      	cbz	r0, 2bede <read_type_cb+0x3e>
		if (data->rsp->len) {
   2becc:	68e3      	ldr	r3, [r4, #12]
   2bece:	781b      	ldrb	r3, [r3, #0]
   2bed0:	b10b      	cbz	r3, 2bed6 <read_type_cb+0x36>
			data->err = 0x00;
   2bed2:	f884 9014 	strb.w	r9, [r4, #20]
		return BT_GATT_ITER_STOP;
   2bed6:	2000      	movs	r0, #0
}
   2bed8:	b003      	add	sp, #12
   2beda:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   2bede:	68a0      	ldr	r0, [r4, #8]
   2bee0:	f002 fd26 	bl	2e930 <net_buf_frag_last>
   2bee4:	2102      	movs	r1, #2
   2bee6:	3008      	adds	r0, #8
   2bee8:	f002 fdd0 	bl	2ea8c <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   2beec:	4b13      	ldr	r3, [pc, #76]	; (2bf3c <read_type_cb+0x9c>)
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   2beee:	6120      	str	r0, [r4, #16]
	data->item->handle = sys_cpu_to_le16(handle);
   2bef0:	f8a0 8000 	strh.w	r8, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   2bef4:	9300      	str	r3, [sp, #0]
   2bef6:	9401      	str	r4, [sp, #4]
   2bef8:	68a2      	ldr	r2, [r4, #8]
   2befa:	4633      	mov	r3, r6
   2befc:	4629      	mov	r1, r5
   2befe:	4638      	mov	r0, r7
   2bf00:	f00d ffb9 	bl	39e76 <att_chan_read>
	if (read < 0) {
   2bf04:	2800      	cmp	r0, #0
   2bf06:	da07      	bge.n	2bf18 <read_type_cb+0x78>
	if (err < 0 && err >= -0xff) {
   2bf08:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
   2bf0c:	bf26      	itte	cs
   2bf0e:	4240      	negcs	r0, r0
   2bf10:	b2c0      	uxtbcs	r0, r0
	return BT_ATT_ERR_UNLIKELY;
   2bf12:	200e      	movcc	r0, #14
		data->err = err_to_att(read);
   2bf14:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   2bf16:	e7de      	b.n	2bed6 <read_type_cb+0x36>
	if (!data->item) {
   2bf18:	6923      	ldr	r3, [r4, #16]
   2bf1a:	2b00      	cmp	r3, #0
   2bf1c:	d0db      	beq.n	2bed6 <read_type_cb+0x36>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   2bf1e:	68a0      	ldr	r0, [r4, #8]
   2bf20:	f00d fe77 	bl	39c12 <net_buf_frags_len>
   2bf24:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
   2bf26:	1a18      	subs	r0, r3, r0
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   2bf28:	68e3      	ldr	r3, [r4, #12]
   2bf2a:	781b      	ldrb	r3, [r3, #0]
   2bf2c:	4298      	cmp	r0, r3
   2bf2e:	bf94      	ite	ls
   2bf30:	2000      	movls	r0, #0
   2bf32:	2001      	movhi	r0, #1
   2bf34:	e7d0      	b.n	2bed8 <read_type_cb+0x38>
		return BT_GATT_ITER_CONTINUE;
   2bf36:	2001      	movs	r0, #1
   2bf38:	e7ce      	b.n	2bed8 <read_type_cb+0x38>
   2bf3a:	bf00      	nop
   2bf3c:	00039c23 	.word	0x00039c23

0002bf40 <bt_att_accept>:

}
#endif /* CONFIG_BT_EATT */

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
   2bf40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2bf44:	b082      	sub	sp, #8
   2bf46:	af00      	add	r7, sp, #0
   2bf48:	4604      	mov	r4, r0
   2bf4a:	460e      	mov	r6, r1
	struct bt_att *att;
	struct bt_att_chan *chan;

	BT_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   2bf4c:	483f      	ldr	r0, [pc, #252]	; (2c04c <bt_att_accept+0x10c>)
   2bf4e:	2200      	movs	r2, #0
   2bf50:	2300      	movs	r3, #0
   2bf52:	4639      	mov	r1, r7
   2bf54:	f008 ffd0 	bl	34ef8 <k_mem_slab_alloc>
   2bf58:	4605      	mov	r5, r0
   2bf5a:	b1c0      	cbz	r0, 2bf8e <bt_att_accept+0x4e>
		BT_ERR("No available ATT context for conn %p", conn);
   2bf5c:	483c      	ldr	r0, [pc, #240]	; (2c050 <bt_att_accept+0x110>)
   2bf5e:	6803      	ldr	r3, [r0, #0]
   2bf60:	075b      	lsls	r3, r3, #29
   2bf62:	d00d      	beq.n	2bf80 <bt_att_accept+0x40>
   2bf64:	466d      	mov	r5, sp
   2bf66:	b088      	sub	sp, #32
   2bf68:	466a      	mov	r2, sp
   2bf6a:	4b3a      	ldr	r3, [pc, #232]	; (2c054 <bt_att_accept+0x114>)
   2bf6c:	e9c2 3405 	strd	r3, r4, [r2, #20]
   2bf70:	2303      	movs	r3, #3
   2bf72:	f842 3f10 	str.w	r3, [r2, #16]!
   2bf76:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   2bf7a:	f00d ff38 	bl	39dee <z_log_msg_static_create.constprop.0>
   2bf7e:	46ad      	mov	sp, r5
		return -ENOMEM;
   2bf80:	f06f 050b 	mvn.w	r5, #11
	}

	*ch = &chan->chan.chan;

	return 0;
}
   2bf84:	4628      	mov	r0, r5
   2bf86:	3708      	adds	r7, #8
   2bf88:	46bd      	mov	sp, r7
   2bf8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return z_impl_z_current_get();
   2bf8e:	f00b f8b5 	bl	370fc <z_impl_z_current_get>
	att_handle_rsp_thread = k_current_get();
   2bf92:	4b31      	ldr	r3, [pc, #196]	; (2c058 <bt_att_accept+0x118>)
	(void)memset(att, 0, sizeof(*att));
   2bf94:	4629      	mov	r1, r5
	att_handle_rsp_thread = k_current_get();
   2bf96:	6018      	str	r0, [r3, #0]
	(void)memset(att, 0, sizeof(*att));
   2bf98:	2230      	movs	r2, #48	; 0x30
   2bf9a:	6838      	ldr	r0, [r7, #0]
   2bf9c:	f00d fa13 	bl	393c6 <memset>
	att->conn = conn;
   2bfa0:	683b      	ldr	r3, [r7, #0]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   2bfa2:	482e      	ldr	r0, [pc, #184]	; (2c05c <bt_att_accept+0x11c>)
	att->conn = conn;
   2bfa4:	601c      	str	r4, [r3, #0]
	sys_slist_init(&att->reqs);
   2bfa6:	683c      	ldr	r4, [r7, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   2bfa8:	607d      	str	r5, [r7, #4]
	list->tail = NULL;
   2bfaa:	e9c4 5501 	strd	r5, r5, [r4, #4]
   2bfae:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   2bfb2:	2200      	movs	r2, #0
   2bfb4:	2300      	movs	r3, #0
   2bfb6:	1d39      	adds	r1, r7, #4
   2bfb8:	f008 ff9e 	bl	34ef8 <k_mem_slab_alloc>
   2bfbc:	4605      	mov	r5, r0
   2bfbe:	b1a0      	cbz	r0, 2bfea <bt_att_accept+0xaa>
		BT_WARN("No available ATT channel for conn %p", att->conn);
   2bfc0:	4823      	ldr	r0, [pc, #140]	; (2c050 <bt_att_accept+0x110>)
   2bfc2:	6803      	ldr	r3, [r0, #0]
   2bfc4:	f013 0f06 	tst.w	r3, #6
   2bfc8:	d0da      	beq.n	2bf80 <bt_att_accept+0x40>
   2bfca:	6823      	ldr	r3, [r4, #0]
   2bfcc:	466c      	mov	r4, sp
   2bfce:	b088      	sub	sp, #32
   2bfd0:	466a      	mov	r2, sp
   2bfd2:	4923      	ldr	r1, [pc, #140]	; (2c060 <bt_att_accept+0x120>)
   2bfd4:	e9c2 1305 	strd	r1, r3, [r2, #20]
   2bfd8:	2303      	movs	r3, #3
   2bfda:	f842 3f10 	str.w	r3, [r2, #16]!
   2bfde:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   2bfe2:	f00d ff04 	bl	39dee <z_log_msg_static_create.constprop.0>
   2bfe6:	46a5      	mov	sp, r4
	if (!chan) {
   2bfe8:	e7ca      	b.n	2bf80 <bt_att_accept+0x40>
	(void)memset(chan, 0, sizeof(*chan));
   2bfea:	4601      	mov	r1, r0
   2bfec:	22f8      	movs	r2, #248	; 0xf8
   2bfee:	6878      	ldr	r0, [r7, #4]
   2bff0:	f00d f9e9 	bl	393c6 <memset>
	chan->chan.chan.ops = &ops;
   2bff4:	6878      	ldr	r0, [r7, #4]
   2bff6:	4b1b      	ldr	r3, [pc, #108]	; (2c064 <bt_att_accept+0x124>)
   2bff8:	6083      	str	r3, [r0, #8]
	z_impl_k_queue_init(queue);
   2bffa:	30a0      	adds	r0, #160	; 0xa0
   2bffc:	f00f fe23 	bl	3bc46 <z_impl_k_queue_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   2c000:	687b      	ldr	r3, [r7, #4]
   2c002:	f3bf 8f5b 	dmb	ish
   2c006:	3398      	adds	r3, #152	; 0x98
   2c008:	e853 2f00 	ldrex	r2, [r3]
   2c00c:	e843 5100 	strex	r1, r5, [r3]
   2c010:	2900      	cmp	r1, #0
   2c012:	d1f9      	bne.n	2c008 <bt_att_accept+0xc8>
   2c014:	f3bf 8f5b 	dmb	ish
	chan->att = att;
   2c018:	687b      	ldr	r3, [r7, #4]
   2c01a:	601c      	str	r4, [r3, #0]
	if (sys_slist_is_empty(&att->chans)) {
   2c01c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	att_chan_attach(att, chan);
   2c01e:	f8d7 8004 	ldr.w	r8, [r7, #4]
	if (sys_slist_is_empty(&att->chans)) {
   2c022:	b91b      	cbnz	r3, 2c02c <bt_att_accept+0xec>
   2c024:	f104 000c 	add.w	r0, r4, #12
   2c028:	f00f fe0d 	bl	3bc46 <z_impl_k_queue_init>
	return list->head;
   2c02c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
	parent->next = child;
   2c02e:	f8c8 20f0 	str.w	r2, [r8, #240]	; 0xf0
Z_GENLIST_PREPEND(slist, snode)
   2c032:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
	sys_slist_prepend(&att->chans, &chan->node);
   2c034:	f108 03f0 	add.w	r3, r8, #240	; 0xf0
	list->head = node;
   2c038:	62a3      	str	r3, [r4, #40]	; 0x28
Z_GENLIST_PREPEND(slist, snode)
   2c03a:	b902      	cbnz	r2, 2c03e <bt_att_accept+0xfe>
	list->tail = node;
   2c03c:	62e3      	str	r3, [r4, #44]	; 0x2c
	return chan;
   2c03e:	687b      	ldr	r3, [r7, #4]
	if (!chan) {
   2c040:	2b00      	cmp	r3, #0
   2c042:	d09d      	beq.n	2bf80 <bt_att_accept+0x40>
	*ch = &chan->chan.chan;
   2c044:	3304      	adds	r3, #4
   2c046:	6033      	str	r3, [r6, #0]
	return 0;
   2c048:	e79c      	b.n	2bf84 <bt_att_accept+0x44>
   2c04a:	bf00      	nop
   2c04c:	20000b14 	.word	0x20000b14
   2c050:	20000a78 	.word	0x20000a78
   2c054:	0003e748 	.word	0x0003e748
   2c058:	20002f2c 	.word	0x20002f2c
   2c05c:	20000b34 	.word	0x20000b34
   2c060:	0003e76d 	.word	0x0003e76d
   2c064:	200006cc 	.word	0x200006cc

0002c068 <bt_att_chan_create_pdu>:
{
   2c068:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
   2c06c:	b086      	sub	sp, #24
   2c06e:	460d      	mov	r5, r1
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   2c070:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
   2c072:	1c53      	adds	r3, r2, #1
   2c074:	428b      	cmp	r3, r1
{
   2c076:	af00      	add	r7, sp, #0
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   2c078:	d919      	bls.n	2c0ae <bt_att_chan_create_pdu+0x46>
		BT_WARN("ATT MTU exceeded, max %u, wanted %zu",
   2c07a:	4831      	ldr	r0, [pc, #196]	; (2c140 <bt_att_chan_create_pdu+0xd8>)
   2c07c:	6802      	ldr	r2, [r0, #0]
   2c07e:	f012 0f06 	tst.w	r2, #6
   2c082:	d00e      	beq.n	2c0a2 <bt_att_chan_create_pdu+0x3a>
   2c084:	466c      	mov	r4, sp
   2c086:	b088      	sub	sp, #32
   2c088:	466a      	mov	r2, sp
   2c08a:	4d2e      	ldr	r5, [pc, #184]	; (2c144 <bt_att_chan_create_pdu+0xdc>)
   2c08c:	61d3      	str	r3, [r2, #28]
   2c08e:	2304      	movs	r3, #4
   2c090:	e9c2 5105 	strd	r5, r1, [r2, #20]
   2c094:	f842 3f10 	str.w	r3, [r2, #16]!
   2c098:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   2c09c:	f00d fea7 	bl	39dee <z_log_msg_static_create.constprop.0>
   2c0a0:	46a5      	mov	sp, r4
		return NULL;
   2c0a2:	2400      	movs	r4, #0
}
   2c0a4:	4620      	mov	r0, r4
   2c0a6:	3718      	adds	r7, #24
   2c0a8:	46bd      	mov	sp, r7
   2c0aa:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	switch (att_op_get_type(op)) {
   2c0ae:	4628      	mov	r0, r5
   2c0b0:	f7ff fc6e 	bl	2b990 <att_op_get_type>
   2c0b4:	2802      	cmp	r0, #2
   2c0b6:	d01d      	beq.n	2c0f4 <bt_att_chan_create_pdu+0x8c>
   2c0b8:	2804      	cmp	r0, #4
   2c0ba:	d01b      	beq.n	2c0f4 <bt_att_chan_create_pdu+0x8c>
		timeout = K_FOREVER;
   2c0bc:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   2c0c0:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   2c0c4:	2100      	movs	r1, #0
   2c0c6:	4642      	mov	r2, r8
   2c0c8:	464b      	mov	r3, r9
   2c0ca:	4608      	mov	r0, r1
   2c0cc:	f00d fd70 	bl	39bb0 <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   2c0d0:	4604      	mov	r4, r0
   2c0d2:	b9a0      	cbnz	r0, 2c0fe <bt_att_chan_create_pdu+0x96>
		BT_ERR("Unable to allocate buffer for op 0x%02x", op);
   2c0d4:	481a      	ldr	r0, [pc, #104]	; (2c140 <bt_att_chan_create_pdu+0xd8>)
   2c0d6:	6803      	ldr	r3, [r0, #0]
   2c0d8:	075b      	lsls	r3, r3, #29
   2c0da:	d0e2      	beq.n	2c0a2 <bt_att_chan_create_pdu+0x3a>
   2c0dc:	466c      	mov	r4, sp
   2c0de:	b088      	sub	sp, #32
   2c0e0:	466a      	mov	r2, sp
   2c0e2:	4b19      	ldr	r3, [pc, #100]	; (2c148 <bt_att_chan_create_pdu+0xe0>)
   2c0e4:	e9c2 3505 	strd	r3, r5, [r2, #20]
   2c0e8:	2303      	movs	r3, #3
   2c0ea:	f842 3f10 	str.w	r3, [r2, #16]!
   2c0ee:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   2c0f2:	e7d3      	b.n	2c09c <bt_att_chan_create_pdu+0x34>
	switch (att_op_get_type(op)) {
   2c0f4:	f44f 2870 	mov.w	r8, #983040	; 0xf0000
   2c0f8:	f04f 0900 	mov.w	r9, #0
   2c0fc:	e7e2      	b.n	2c0c4 <bt_att_chan_create_pdu+0x5c>
	return z_impl_k_queue_get(queue, timeout);
   2c0fe:	4813      	ldr	r0, [pc, #76]	; (2c14c <bt_att_chan_create_pdu+0xe4>)
   2c100:	4642      	mov	r2, r8
   2c102:	464b      	mov	r3, r9
   2c104:	f009 faf8 	bl	356f8 <z_impl_k_queue_get>
	if (!data) {
   2c108:	b990      	cbnz	r0, 2c130 <bt_att_chan_create_pdu+0xc8>
		BT_WARN("Unable to allocate ATT TX meta");
   2c10a:	480d      	ldr	r0, [pc, #52]	; (2c140 <bt_att_chan_create_pdu+0xd8>)
   2c10c:	6803      	ldr	r3, [r0, #0]
   2c10e:	f013 0f06 	tst.w	r3, #6
   2c112:	d009      	beq.n	2c128 <bt_att_chan_create_pdu+0xc0>
   2c114:	4b0e      	ldr	r3, [pc, #56]	; (2c150 <bt_att_chan_create_pdu+0xe8>)
   2c116:	617b      	str	r3, [r7, #20]
   2c118:	2302      	movs	r3, #2
   2c11a:	613b      	str	r3, [r7, #16]
   2c11c:	f107 0210 	add.w	r2, r7, #16
   2c120:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   2c124:	f00d fe63 	bl	39dee <z_log_msg_static_create.constprop.0>
		net_buf_unref(buf);
   2c128:	4620      	mov	r0, r4
   2c12a:	f002 fba9 	bl	2e880 <net_buf_unref>
		return NULL;
   2c12e:	e7b8      	b.n	2c0a2 <bt_att_chan_create_pdu+0x3a>
	bt_att_tx_meta_data(buf) = data;
   2c130:	6160      	str	r0, [r4, #20]
   2c132:	2101      	movs	r1, #1
   2c134:	f104 0008 	add.w	r0, r4, #8
   2c138:	f002 fca8 	bl	2ea8c <net_buf_simple_add>
	hdr->code = op;
   2c13c:	7005      	strb	r5, [r0, #0]
	return buf;
   2c13e:	e7b1      	b.n	2c0a4 <bt_att_chan_create_pdu+0x3c>
   2c140:	20000a78 	.word	0x20000a78
   2c144:	0003e792 	.word	0x0003e792
   2c148:	0003e522 	.word	0x0003e522
   2c14c:	20000bb4 	.word	0x20000bb4
   2c150:	0003e7b7 	.word	0x0003e7b7

0002c154 <bt_att_recv>:
{
   2c154:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2c158:	b087      	sub	sp, #28
	if (buf->len < sizeof(*hdr)) {
   2c15a:	898b      	ldrh	r3, [r1, #12]
{
   2c15c:	af00      	add	r7, sp, #0
   2c15e:	4681      	mov	r9, r0
   2c160:	4688      	mov	r8, r1
	if (buf->len < sizeof(*hdr)) {
   2c162:	b993      	cbnz	r3, 2c18a <bt_att_recv+0x36>
		BT_ERR("Too small ATT PDU received");
   2c164:	4856      	ldr	r0, [pc, #344]	; (2c2c0 <bt_att_recv+0x16c>)
   2c166:	6803      	ldr	r3, [r0, #0]
   2c168:	0759      	lsls	r1, r3, #29
   2c16a:	d009      	beq.n	2c180 <bt_att_recv+0x2c>
   2c16c:	4b55      	ldr	r3, [pc, #340]	; (2c2c4 <bt_att_recv+0x170>)
   2c16e:	617b      	str	r3, [r7, #20]
   2c170:	2302      	movs	r3, #2
   2c172:	613b      	str	r3, [r7, #16]
   2c174:	f107 0210 	add.w	r2, r7, #16
   2c178:	f44f 5182 	mov.w	r1, #4160	; 0x1040
			BT_WARN("Ignoring unexpected indication");
   2c17c:	f00d fe37 	bl	39dee <z_log_msg_static_create.constprop.0>
}
   2c180:	2000      	movs	r0, #0
   2c182:	371c      	adds	r7, #28
   2c184:	46bd      	mov	sp, r7
   2c186:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   2c18a:	2101      	movs	r1, #1
   2c18c:	f108 0008 	add.w	r0, r8, #8
   2c190:	f002 fc62 	bl	2ea58 <net_buf_simple_pull_mem>
	if (!att_chan->att) {
   2c194:	f859 3c04 	ldr.w	r3, [r9, #-4]
   2c198:	4605      	mov	r5, r0
   2c19a:	2b00      	cmp	r3, #0
   2c19c:	d0f0      	beq.n	2c180 <bt_att_recv+0x2c>
		if (hdr->code == handlers[i].op) {
   2c19e:	7801      	ldrb	r1, [r0, #0]
   2c1a0:	4c49      	ldr	r4, [pc, #292]	; (2c2c8 <bt_att_recv+0x174>)
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   2c1a2:	f1a9 0604 	sub.w	r6, r9, #4
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   2c1a6:	2300      	movs	r3, #0
		if (hdr->code == handlers[i].op) {
   2c1a8:	f814 0033 	ldrb.w	r0, [r4, r3, lsl #3]
   2c1ac:	4288      	cmp	r0, r1
   2c1ae:	ea4f 0bc3 	mov.w	fp, r3, lsl #3
   2c1b2:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
   2c1b6:	d119      	bne.n	2c1ec <bt_att_recv+0x98>
		if (handler->type == ATT_REQUEST &&
   2c1b8:	f892 a002 	ldrb.w	sl, [r2, #2]
   2c1bc:	f1ba 0f01 	cmp.w	sl, #1
   2c1c0:	d13a      	bne.n	2c238 <bt_att_recv+0xe4>
		    atomic_test_and_set_bit(att_chan->flags, ATT_PENDING_RSP)) {
   2c1c2:	2100      	movs	r1, #0
   2c1c4:	f109 0094 	add.w	r0, r9, #148	; 0x94
   2c1c8:	f00d fefb 	bl	39fc2 <atomic_test_and_set_bit>
		if (handler->type == ATT_REQUEST &&
   2c1cc:	2800      	cmp	r0, #0
   2c1ce:	d043      	beq.n	2c258 <bt_att_recv+0x104>
			BT_WARN("Ignoring unexpected request");
   2c1d0:	483b      	ldr	r0, [pc, #236]	; (2c2c0 <bt_att_recv+0x16c>)
   2c1d2:	6803      	ldr	r3, [r0, #0]
   2c1d4:	f013 0f06 	tst.w	r3, #6
   2c1d8:	d0d2      	beq.n	2c180 <bt_att_recv+0x2c>
   2c1da:	4b3c      	ldr	r3, [pc, #240]	; (2c2cc <bt_att_recv+0x178>)
			BT_WARN("Ignoring unexpected indication");
   2c1dc:	617b      	str	r3, [r7, #20]
   2c1de:	2302      	movs	r3, #2
   2c1e0:	613b      	str	r3, [r7, #16]
   2c1e2:	f107 0210 	add.w	r2, r7, #16
   2c1e6:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   2c1ea:	e7c7      	b.n	2c17c <bt_att_recv+0x28>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   2c1ec:	3301      	adds	r3, #1
   2c1ee:	2b0e      	cmp	r3, #14
   2c1f0:	d1da      	bne.n	2c1a8 <bt_att_recv+0x54>
		BT_WARN("Unhandled ATT code 0x%02x", hdr->code);
   2c1f2:	4833      	ldr	r0, [pc, #204]	; (2c2c0 <bt_att_recv+0x16c>)
   2c1f4:	6803      	ldr	r3, [r0, #0]
   2c1f6:	f013 0f06 	tst.w	r3, #6
   2c1fa:	d00d      	beq.n	2c218 <bt_att_recv+0xc4>
   2c1fc:	466c      	mov	r4, sp
   2c1fe:	b088      	sub	sp, #32
   2c200:	466a      	mov	r2, sp
   2c202:	4b33      	ldr	r3, [pc, #204]	; (2c2d0 <bt_att_recv+0x17c>)
   2c204:	e9c2 3105 	strd	r3, r1, [r2, #20]
   2c208:	2303      	movs	r3, #3
   2c20a:	f842 3f10 	str.w	r3, [r2, #16]!
   2c20e:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   2c212:	f00d fdec 	bl	39dee <z_log_msg_static_create.constprop.0>
   2c216:	46a5      	mov	sp, r4
		if (att_op_get_type(hdr->code) != ATT_COMMAND &&
   2c218:	7829      	ldrb	r1, [r5, #0]
   2c21a:	4608      	mov	r0, r1
   2c21c:	f7ff fbb8 	bl	2b990 <att_op_get_type>
   2c220:	2800      	cmp	r0, #0
   2c222:	d0ad      	beq.n	2c180 <bt_att_recv+0x2c>
   2c224:	2805      	cmp	r0, #5
   2c226:	d0ab      	beq.n	2c180 <bt_att_recv+0x2c>
	if (!req) {
   2c228:	2900      	cmp	r1, #0
   2c22a:	d0a9      	beq.n	2c180 <bt_att_recv+0x2c>
   2c22c:	2306      	movs	r3, #6
   2c22e:	2200      	movs	r2, #0
   2c230:	4630      	mov	r0, r6
   2c232:	f00e f83a 	bl	3a2aa <send_err_rsp.part.0>
   2c236:	e7a3      	b.n	2c180 <bt_att_recv+0x2c>
		} else if (handler->type == ATT_INDICATION &&
   2c238:	f1ba 0f05 	cmp.w	sl, #5
   2c23c:	d10c      	bne.n	2c258 <bt_att_recv+0x104>
			   atomic_test_and_set_bit(att_chan->flags,
   2c23e:	2101      	movs	r1, #1
   2c240:	f109 0094 	add.w	r0, r9, #148	; 0x94
   2c244:	f00d febd 	bl	39fc2 <atomic_test_and_set_bit>
		} else if (handler->type == ATT_INDICATION &&
   2c248:	b130      	cbz	r0, 2c258 <bt_att_recv+0x104>
			BT_WARN("Ignoring unexpected indication");
   2c24a:	481d      	ldr	r0, [pc, #116]	; (2c2c0 <bt_att_recv+0x16c>)
   2c24c:	6803      	ldr	r3, [r0, #0]
   2c24e:	f013 0f06 	tst.w	r3, #6
   2c252:	d095      	beq.n	2c180 <bt_att_recv+0x2c>
   2c254:	4b1f      	ldr	r3, [pc, #124]	; (2c2d4 <bt_att_recv+0x180>)
   2c256:	e7c1      	b.n	2c1dc <bt_att_recv+0x88>
	if (buf->len < handler->expect_len) {
   2c258:	445c      	add	r4, fp
   2c25a:	f8b8 300c 	ldrh.w	r3, [r8, #12]
   2c25e:	7862      	ldrb	r2, [r4, #1]
   2c260:	429a      	cmp	r2, r3
   2c262:	d91f      	bls.n	2c2a4 <bt_att_recv+0x150>
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   2c264:	4816      	ldr	r0, [pc, #88]	; (2c2c0 <bt_att_recv+0x16c>)
   2c266:	6802      	ldr	r2, [r0, #0]
   2c268:	0752      	lsls	r2, r2, #29
   2c26a:	d107      	bne.n	2c27c <bt_att_recv+0x128>
	if (handler->type == ATT_REQUEST && err) {
   2c26c:	f1ba 0f01 	cmp.w	sl, #1
   2c270:	d186      	bne.n	2c180 <bt_att_recv+0x2c>
		err = BT_ATT_ERR_INVALID_PDU;
   2c272:	2304      	movs	r3, #4
		send_err_rsp(att_chan, hdr->code, 0, err);
   2c274:	7829      	ldrb	r1, [r5, #0]
	if (!req) {
   2c276:	2900      	cmp	r1, #0
   2c278:	d082      	beq.n	2c180 <bt_att_recv+0x2c>
   2c27a:	e7d8      	b.n	2c22e <bt_att_recv+0xda>
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   2c27c:	46e8      	mov	r8, sp
   2c27e:	b088      	sub	sp, #32
   2c280:	7829      	ldrb	r1, [r5, #0]
   2c282:	466a      	mov	r2, sp
   2c284:	f8df c050 	ldr.w	ip, [pc, #80]	; 2c2d8 <bt_att_recv+0x184>
   2c288:	61d1      	str	r1, [r2, #28]
   2c28a:	e9c2 c305 	strd	ip, r3, [r2, #20]
   2c28e:	2304      	movs	r3, #4
   2c290:	f842 3f10 	str.w	r3, [r2, #16]!
   2c294:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   2c298:	f00d fda9 	bl	39dee <z_log_msg_static_create.constprop.0>
	if (handler->type == ATT_REQUEST && err) {
   2c29c:	78a3      	ldrb	r3, [r4, #2]
   2c29e:	46c5      	mov	sp, r8
   2c2a0:	2b01      	cmp	r3, #1
   2c2a2:	e7e5      	b.n	2c270 <bt_att_recv+0x11c>
		err = handler->func(att_chan, buf);
   2c2a4:	6863      	ldr	r3, [r4, #4]
   2c2a6:	4641      	mov	r1, r8
   2c2a8:	4630      	mov	r0, r6
   2c2aa:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
   2c2ac:	f1ba 0f01 	cmp.w	sl, #1
		err = handler->func(att_chan, buf);
   2c2b0:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
   2c2b2:	f47f af65 	bne.w	2c180 <bt_att_recv+0x2c>
   2c2b6:	2800      	cmp	r0, #0
   2c2b8:	f43f af62 	beq.w	2c180 <bt_att_recv+0x2c>
   2c2bc:	e7da      	b.n	2c274 <bt_att_recv+0x120>
   2c2be:	bf00      	nop
   2c2c0:	20000a78 	.word	0x20000a78
   2c2c4:	0003e7d6 	.word	0x0003e7d6
   2c2c8:	0003c924 	.word	0x0003c924
   2c2cc:	0003e80b 	.word	0x0003e80b
   2c2d0:	0003e7f1 	.word	0x0003e7f1
   2c2d4:	0003e827 	.word	0x0003e827
   2c2d8:	0003e846 	.word	0x0003e846

0002c2dc <att_write_rsp.constprop.0>:
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   2c2dc:	b5f0      	push	{r4, r5, r6, r7, lr}
   2c2de:	461e      	mov	r6, r3
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   2c2e0:	6803      	ldr	r3, [r0, #0]
   2c2e2:	460d      	mov	r5, r1
   2c2e4:	3900      	subs	r1, #0
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   2c2e6:	b087      	sub	sp, #28
   2c2e8:	4604      	mov	r4, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   2c2ea:	bf18      	it	ne
   2c2ec:	2101      	movne	r1, #1
   2c2ee:	6818      	ldr	r0, [r3, #0]
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   2c2f0:	4617      	mov	r7, r2
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   2c2f2:	f00e fb08 	bl	3a906 <bt_gatt_change_aware>
   2c2f6:	b948      	cbnz	r0, 2c30c <att_write_rsp.constprop.0+0x30>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   2c2f8:	2105      	movs	r1, #5
   2c2fa:	f104 0098 	add.w	r0, r4, #152	; 0x98
   2c2fe:	f00d fe60 	bl	39fc2 <atomic_test_and_set_bit>
   2c302:	2800      	cmp	r0, #0
   2c304:	d048      	beq.n	2c398 <att_write_rsp.constprop.0+0xbc>
			return 0;
   2c306:	2000      	movs	r0, #0
}
   2c308:	b007      	add	sp, #28
   2c30a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!handle) {
   2c30c:	2e00      	cmp	r6, #0
   2c30e:	d045      	beq.n	2c39c <att_write_rsp.constprop.0+0xc0>
	(void)memset(&data, 0, sizeof(data));
   2c310:	2218      	movs	r2, #24
   2c312:	2100      	movs	r1, #0
   2c314:	4668      	mov	r0, sp
   2c316:	f00d f856 	bl	393c6 <memset>
	if (rsp) {
   2c31a:	bb67      	cbnz	r7, 2c376 <att_write_rsp.constprop.0+0x9a>
	data.conn = chan->att->conn;
   2c31c:	6823      	ldr	r3, [r4, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   2c31e:	4a20      	ldr	r2, [pc, #128]	; (2c3a0 <att_write_rsp.constprop.0+0xc4>)
	data.conn = chan->att->conn;
   2c320:	681b      	ldr	r3, [r3, #0]
   2c322:	9300      	str	r3, [sp, #0]
	data.offset = offset;
   2c324:	2300      	movs	r3, #0
   2c326:	f8ad 3012 	strh.w	r3, [sp, #18]
	data.value = value;
   2c32a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   2c32c:	9303      	str	r3, [sp, #12]
	data.len = len;
   2c32e:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
   2c332:	f8ad 3010 	strh.w	r3, [sp, #16]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   2c336:	2301      	movs	r3, #1
   2c338:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   2c33c:	4631      	mov	r1, r6
   2c33e:	466b      	mov	r3, sp
   2c340:	4630      	mov	r0, r6
	data.req = req;
   2c342:	f88d 5008 	strb.w	r5, [sp, #8]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   2c346:	f00d fcb8 	bl	39cba <bt_gatt_foreach_attr>
	if (data.err) {
   2c34a:	f89d 3014 	ldrb.w	r3, [sp, #20]
   2c34e:	b1e3      	cbz	r3, 2c38a <att_write_rsp.constprop.0+0xae>
		if (rsp) {
   2c350:	2f00      	cmp	r7, #0
   2c352:	d0d8      	beq.n	2c306 <att_write_rsp.constprop.0+0x2a>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   2c354:	9b01      	ldr	r3, [sp, #4]
   2c356:	6958      	ldr	r0, [r3, #20]
   2c358:	f7ff fb60 	bl	2ba1c <tx_meta_data_free>
			net_buf_unref(data.buf);
   2c35c:	9801      	ldr	r0, [sp, #4]
   2c35e:	f002 fa8f 	bl	2e880 <net_buf_unref>
			send_err_rsp(chan, req, handle, data.err);
   2c362:	f89d 3014 	ldrb.w	r3, [sp, #20]
	if (!req) {
   2c366:	2d00      	cmp	r5, #0
   2c368:	d0cd      	beq.n	2c306 <att_write_rsp.constprop.0+0x2a>
   2c36a:	4632      	mov	r2, r6
   2c36c:	4629      	mov	r1, r5
   2c36e:	4620      	mov	r0, r4
   2c370:	f00d ff9b 	bl	3a2aa <send_err_rsp.part.0>
   2c374:	e7c7      	b.n	2c306 <att_write_rsp.constprop.0+0x2a>
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
   2c376:	2200      	movs	r2, #0
   2c378:	4639      	mov	r1, r7
   2c37a:	4620      	mov	r0, r4
   2c37c:	f7ff fe74 	bl	2c068 <bt_att_chan_create_pdu>
   2c380:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
   2c382:	2800      	cmp	r0, #0
   2c384:	d1ca      	bne.n	2c31c <att_write_rsp.constprop.0+0x40>
			return BT_ATT_ERR_UNLIKELY;
   2c386:	200e      	movs	r0, #14
   2c388:	e7be      	b.n	2c308 <att_write_rsp.constprop.0+0x2c>
	if (data.buf) {
   2c38a:	9901      	ldr	r1, [sp, #4]
   2c38c:	2900      	cmp	r1, #0
   2c38e:	d0ba      	beq.n	2c306 <att_write_rsp.constprop.0+0x2a>
		bt_att_chan_send_rsp(chan, data.buf);
   2c390:	4620      	mov	r0, r4
   2c392:	f00d fd62 	bl	39e5a <bt_att_chan_send_rsp>
   2c396:	e7b6      	b.n	2c306 <att_write_rsp.constprop.0+0x2a>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   2c398:	2012      	movs	r0, #18
   2c39a:	e7b5      	b.n	2c308 <att_write_rsp.constprop.0+0x2c>
		return BT_ATT_ERR_INVALID_HANDLE;
   2c39c:	2001      	movs	r0, #1
   2c39e:	e7b3      	b.n	2c308 <att_write_rsp.constprop.0+0x2c>
   2c3a0:	00039c59 	.word	0x00039c59

0002c3a4 <bt_att_create_pdu>:
{
   2c3a4:	b5b0      	push	{r4, r5, r7, lr}
   2c3a6:	af00      	add	r7, sp, #0
   2c3a8:	460d      	mov	r5, r1
   2c3aa:	4614      	mov	r4, r2
	att = att_get(conn);
   2c3ac:	f7ff fcbc 	bl	2bd28 <att_get>
	if (!att) {
   2c3b0:	b1f8      	cbz	r0, 2c3f2 <bt_att_create_pdu+0x4e>
	return list->head;
   2c3b2:	6a80      	ldr	r0, [r0, #40]	; 0x28
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2c3b4:	b140      	cbz	r0, 2c3c8 <bt_att_create_pdu+0x24>
	return node->next;
   2c3b6:	f850 39f0 	ldr.w	r3, [r0], #-240
   2c3ba:	b103      	cbz	r3, 2c3be <bt_att_create_pdu+0x1a>
   2c3bc:	3bf0      	subs	r3, #240	; 0xf0
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   2c3be:	1c62      	adds	r2, r4, #1
   2c3c0:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
   2c3c2:	428a      	cmp	r2, r1
   2c3c4:	d921      	bls.n	2c40a <bt_att_create_pdu+0x66>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2c3c6:	b9b3      	cbnz	r3, 2c3f6 <bt_att_create_pdu+0x52>
	BT_WARN("No ATT channel for MTU %zu", len + sizeof(op));
   2c3c8:	4813      	ldr	r0, [pc, #76]	; (2c418 <bt_att_create_pdu+0x74>)
   2c3ca:	6803      	ldr	r3, [r0, #0]
   2c3cc:	f013 0f06 	tst.w	r3, #6
   2c3d0:	d00f      	beq.n	2c3f2 <bt_att_create_pdu+0x4e>
   2c3d2:	466d      	mov	r5, sp
   2c3d4:	b088      	sub	sp, #32
   2c3d6:	466b      	mov	r3, sp
   2c3d8:	4a10      	ldr	r2, [pc, #64]	; (2c41c <bt_att_create_pdu+0x78>)
   2c3da:	615a      	str	r2, [r3, #20]
   2c3dc:	3401      	adds	r4, #1
   2c3de:	461a      	mov	r2, r3
   2c3e0:	619c      	str	r4, [r3, #24]
   2c3e2:	2303      	movs	r3, #3
   2c3e4:	f842 3f10 	str.w	r3, [r2, #16]!
   2c3e8:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   2c3ec:	f00d fcff 	bl	39dee <z_log_msg_static_create.constprop.0>
   2c3f0:	46ad      	mov	sp, r5
		return NULL;
   2c3f2:	2000      	movs	r0, #0
   2c3f4:	e00d      	b.n	2c412 <bt_att_create_pdu+0x6e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2c3f6:	4618      	mov	r0, r3
   2c3f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   2c3fc:	2b00      	cmp	r3, #0
   2c3fe:	d0df      	beq.n	2c3c0 <bt_att_create_pdu+0x1c>
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   2c400:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
   2c402:	428a      	cmp	r2, r1
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2c404:	f1a3 03f0 	sub.w	r3, r3, #240	; 0xf0
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   2c408:	d8f5      	bhi.n	2c3f6 <bt_att_create_pdu+0x52>
		return bt_att_chan_create_pdu(chan, op, len);
   2c40a:	4622      	mov	r2, r4
   2c40c:	4629      	mov	r1, r5
   2c40e:	f7ff fe2b 	bl	2c068 <bt_att_chan_create_pdu>
}
   2c412:	46bd      	mov	sp, r7
   2c414:	bdb0      	pop	{r4, r5, r7, pc}
   2c416:	bf00      	nop
   2c418:	20000a78 	.word	0x20000a78
   2c41c:	0003e865 	.word	0x0003e865

0002c420 <att_read_group_req>:
{
   2c420:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   2c424:	898e      	ldrh	r6, [r1, #12]
   2c426:	3e04      	subs	r6, #4
   2c428:	b2f6      	uxtb	r6, r6
	if (uuid_len != 2 && uuid_len != 16) {
   2c42a:	2e02      	cmp	r6, #2
{
   2c42c:	4604      	mov	r4, r0
   2c42e:	b08c      	sub	sp, #48	; 0x30
   2c430:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
   2c432:	d001      	beq.n	2c438 <att_read_group_req+0x18>
   2c434:	2e10      	cmp	r6, #16
   2c436:	d16a      	bne.n	2c50e <att_read_group_req+0xee>
   2c438:	2104      	movs	r1, #4
   2c43a:	3008      	adds	r0, #8
   2c43c:	f002 fb0c 	bl	2ea58 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   2c440:	f10d 0808 	add.w	r8, sp, #8
	start_handle = sys_le16_to_cpu(req->start_handle);
   2c444:	8805      	ldrh	r5, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   2c446:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   2c448:	1d01      	adds	r1, r0, #4
   2c44a:	4632      	mov	r2, r6
   2c44c:	4640      	mov	r0, r8
   2c44e:	f00d f806 	bl	3945e <bt_uuid_create>
   2c452:	2800      	cmp	r0, #0
   2c454:	d05d      	beq.n	2c512 <att_read_group_req+0xf2>
	if (!start || !end) {
   2c456:	2d00      	cmp	r5, #0
   2c458:	d03a      	beq.n	2c4d0 <att_read_group_req+0xb0>
   2c45a:	2600      	movs	r6, #0
   2c45c:	2f00      	cmp	r7, #0
   2c45e:	d036      	beq.n	2c4ce <att_read_group_req+0xae>
	if (start > end) {
   2c460:	42bd      	cmp	r5, r7
   2c462:	d835      	bhi.n	2c4d0 <att_read_group_req+0xb0>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   2c464:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   2c468:	a901      	add	r1, sp, #4
   2c46a:	4640      	mov	r0, r8
   2c46c:	f88d 6004 	strb.w	r6, [sp, #4]
   2c470:	f8ad 3006 	strh.w	r3, [sp, #6]
   2c474:	f00c ffc5 	bl	39402 <bt_uuid_cmp>
   2c478:	bb70      	cbnz	r0, 2c4d8 <att_read_group_req+0xb8>
	struct bt_conn *conn = chan->chan.chan.conn;
   2c47a:	6866      	ldr	r6, [r4, #4]
	(void)memset(&data, 0, sizeof(data));
   2c47c:	2214      	movs	r2, #20
   2c47e:	2100      	movs	r1, #0
   2c480:	a807      	add	r0, sp, #28
   2c482:	f00c ffa0 	bl	393c6 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
   2c486:	2201      	movs	r2, #1
   2c488:	2111      	movs	r1, #17
   2c48a:	4630      	mov	r0, r6
   2c48c:	f7ff ff8a 	bl	2c3a4 <bt_att_create_pdu>
   2c490:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
   2c492:	2800      	cmp	r0, #0
   2c494:	d03d      	beq.n	2c512 <att_read_group_req+0xf2>
	return net_buf_simple_add(&buf->b, len);
   2c496:	2101      	movs	r1, #1
   2c498:	3008      	adds	r0, #8
	data.uuid = uuid;
   2c49a:	e9cd 4807 	strd	r4, r8, [sp, #28]
   2c49e:	f002 faf5 	bl	2ea8c <net_buf_simple_add>
	data.rsp->len = 0U;
   2c4a2:	2300      	movs	r3, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   2c4a4:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   2c4a6:	4a1c      	ldr	r2, [pc, #112]	; (2c518 <att_read_group_req+0xf8>)
	data.rsp->len = 0U;
   2c4a8:	7003      	strb	r3, [r0, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   2c4aa:	4639      	mov	r1, r7
	data.group = NULL;
   2c4ac:	930b      	str	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   2c4ae:	4628      	mov	r0, r5
   2c4b0:	ab07      	add	r3, sp, #28
   2c4b2:	f00d fc02 	bl	39cba <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
   2c4b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2c4b8:	781b      	ldrb	r3, [r3, #0]
   2c4ba:	bb1b      	cbnz	r3, 2c504 <att_read_group_req+0xe4>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   2c4bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2c4be:	6958      	ldr	r0, [r3, #20]
   2c4c0:	f7ff faac 	bl	2ba1c <tx_meta_data_free>
		net_buf_unref(data.buf);
   2c4c4:	9809      	ldr	r0, [sp, #36]	; 0x24
   2c4c6:	f002 f9db 	bl	2e880 <net_buf_unref>
	if (!req) {
   2c4ca:	230a      	movs	r3, #10
   2c4cc:	e001      	b.n	2c4d2 <att_read_group_req+0xb2>
			*err = 0U;
   2c4ce:	463d      	mov	r5, r7
	if (!req) {
   2c4d0:	2301      	movs	r3, #1
   2c4d2:	462a      	mov	r2, r5
   2c4d4:	2110      	movs	r1, #16
   2c4d6:	e00e      	b.n	2c4f6 <att_read_group_req+0xd6>
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
   2c4d8:	f642 0301 	movw	r3, #10241	; 0x2801
   2c4dc:	a907      	add	r1, sp, #28
   2c4de:	4640      	mov	r0, r8
   2c4e0:	f88d 601c 	strb.w	r6, [sp, #28]
   2c4e4:	f8ad 301e 	strh.w	r3, [sp, #30]
   2c4e8:	f00c ff8b 	bl	39402 <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   2c4ec:	2800      	cmp	r0, #0
   2c4ee:	d0c4      	beq.n	2c47a <att_read_group_req+0x5a>
	if (!req) {
   2c4f0:	2310      	movs	r3, #16
   2c4f2:	462a      	mov	r2, r5
   2c4f4:	4619      	mov	r1, r3
   2c4f6:	4620      	mov	r0, r4
   2c4f8:	f00d fed7 	bl	3a2aa <send_err_rsp.part.0>
		return 0;
   2c4fc:	2000      	movs	r0, #0
}
   2c4fe:	b00c      	add	sp, #48	; 0x30
   2c500:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_att_chan_send_rsp(chan, data.buf);
   2c504:	9909      	ldr	r1, [sp, #36]	; 0x24
   2c506:	4620      	mov	r0, r4
   2c508:	f00d fca7 	bl	39e5a <bt_att_chan_send_rsp>
	return 0;
   2c50c:	e7f6      	b.n	2c4fc <att_read_group_req+0xdc>
		return BT_ATT_ERR_INVALID_PDU;
   2c50e:	2004      	movs	r0, #4
   2c510:	e7f5      	b.n	2c4fe <att_read_group_req+0xde>
		return BT_ATT_ERR_UNLIKELY;
   2c512:	200e      	movs	r0, #14
   2c514:	e7f3      	b.n	2c4fe <att_read_group_req+0xde>
   2c516:	bf00      	nop
   2c518:	0002bdf5 	.word	0x0002bdf5

0002c51c <att_read_mult_vl_req>:
{
   2c51c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   2c520:	6846      	ldr	r6, [r0, #4]
{
   2c522:	b085      	sub	sp, #20
   2c524:	4604      	mov	r4, r0
   2c526:	460d      	mov	r5, r1
	if (!bt_gatt_change_aware(conn, true)) {
   2c528:	4630      	mov	r0, r6
   2c52a:	2101      	movs	r1, #1
   2c52c:	f00e f9eb 	bl	3a906 <bt_gatt_change_aware>
   2c530:	b950      	cbnz	r0, 2c548 <att_read_mult_vl_req+0x2c>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   2c532:	2105      	movs	r1, #5
   2c534:	f104 0098 	add.w	r0, r4, #152	; 0x98
   2c538:	f00d fd43 	bl	39fc2 <atomic_test_and_set_bit>
   2c53c:	2800      	cmp	r0, #0
   2c53e:	d13b      	bne.n	2c5b8 <att_read_mult_vl_req+0x9c>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   2c540:	2012      	movs	r0, #18
}
   2c542:	b005      	add	sp, #20
   2c544:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	(void)memset(&data, 0, sizeof(data));
   2c548:	2210      	movs	r2, #16
   2c54a:	2100      	movs	r1, #0
   2c54c:	4668      	mov	r0, sp
   2c54e:	f00c ff3a 	bl	393c6 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_VL_RSP, 0);
   2c552:	2200      	movs	r2, #0
   2c554:	2121      	movs	r1, #33	; 0x21
   2c556:	4630      	mov	r0, r6
   2c558:	f7ff ff24 	bl	2c3a4 <bt_att_create_pdu>
   2c55c:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   2c55e:	b368      	cbz	r0, 2c5bc <att_read_mult_vl_req+0xa0>
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
   2c560:	f8df 905c 	ldr.w	r9, [pc, #92]	; 2c5c0 <att_read_mult_vl_req+0xa4>
	data.chan = chan;
   2c564:	9400      	str	r4, [sp, #0]
	return net_buf_simple_pull_le16(&buf->b);
   2c566:	f105 0708 	add.w	r7, r5, #8
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   2c56a:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(uint16_t)) {
   2c56e:	89ab      	ldrh	r3, [r5, #12]
   2c570:	2b01      	cmp	r3, #1
   2c572:	d804      	bhi.n	2c57e <att_read_mult_vl_req+0x62>
	bt_att_chan_send_rsp(chan, data.buf);
   2c574:	9902      	ldr	r1, [sp, #8]
   2c576:	4620      	mov	r0, r4
   2c578:	f00d fc6f 	bl	39e5a <bt_att_chan_send_rsp>
	return 0;
   2c57c:	e01c      	b.n	2c5b8 <att_read_mult_vl_req+0x9c>
   2c57e:	4638      	mov	r0, r7
   2c580:	f00e fab6 	bl	3aaf0 <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
   2c584:	466b      	mov	r3, sp
   2c586:	464a      	mov	r2, r9
   2c588:	4601      	mov	r1, r0
   2c58a:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   2c58c:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
   2c590:	f00d fb93 	bl	39cba <bt_gatt_foreach_attr>
		if (data.err) {
   2c594:	f89d 300c 	ldrb.w	r3, [sp, #12]
   2c598:	2b00      	cmp	r3, #0
   2c59a:	d0e8      	beq.n	2c56e <att_read_mult_vl_req+0x52>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   2c59c:	9b02      	ldr	r3, [sp, #8]
   2c59e:	6958      	ldr	r0, [r3, #20]
   2c5a0:	f7ff fa3c 	bl	2ba1c <tx_meta_data_free>
			net_buf_unref(data.buf);
   2c5a4:	9802      	ldr	r0, [sp, #8]
   2c5a6:	f002 f96b 	bl	2e880 <net_buf_unref>
	if (!req) {
   2c5aa:	f89d 300c 	ldrb.w	r3, [sp, #12]
   2c5ae:	4632      	mov	r2, r6
   2c5b0:	2120      	movs	r1, #32
   2c5b2:	4620      	mov	r0, r4
   2c5b4:	f00d fe79 	bl	3a2aa <send_err_rsp.part.0>
			return 0;
   2c5b8:	2000      	movs	r0, #0
   2c5ba:	e7c2      	b.n	2c542 <att_read_mult_vl_req+0x26>
		return BT_ATT_ERR_UNLIKELY;
   2c5bc:	200e      	movs	r0, #14
   2c5be:	e7c0      	b.n	2c542 <att_read_mult_vl_req+0x26>
   2c5c0:	0003a033 	.word	0x0003a033

0002c5c4 <att_read_mult_req>:
{
   2c5c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   2c5c8:	6846      	ldr	r6, [r0, #4]
{
   2c5ca:	b085      	sub	sp, #20
   2c5cc:	4604      	mov	r4, r0
   2c5ce:	460d      	mov	r5, r1
	if (!bt_gatt_change_aware(conn, true)) {
   2c5d0:	4630      	mov	r0, r6
   2c5d2:	2101      	movs	r1, #1
   2c5d4:	f00e f997 	bl	3a906 <bt_gatt_change_aware>
   2c5d8:	b950      	cbnz	r0, 2c5f0 <att_read_mult_req+0x2c>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   2c5da:	2105      	movs	r1, #5
   2c5dc:	f104 0098 	add.w	r0, r4, #152	; 0x98
   2c5e0:	f00d fcef 	bl	39fc2 <atomic_test_and_set_bit>
   2c5e4:	2800      	cmp	r0, #0
   2c5e6:	d13b      	bne.n	2c660 <att_read_mult_req+0x9c>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   2c5e8:	2012      	movs	r0, #18
}
   2c5ea:	b005      	add	sp, #20
   2c5ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	(void)memset(&data, 0, sizeof(data));
   2c5f0:	2210      	movs	r2, #16
   2c5f2:	2100      	movs	r1, #0
   2c5f4:	4668      	mov	r0, sp
   2c5f6:	f00c fee6 	bl	393c6 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
   2c5fa:	2200      	movs	r2, #0
   2c5fc:	210f      	movs	r1, #15
   2c5fe:	4630      	mov	r0, r6
   2c600:	f7ff fed0 	bl	2c3a4 <bt_att_create_pdu>
   2c604:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   2c606:	b368      	cbz	r0, 2c664 <att_read_mult_req+0xa0>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   2c608:	f8df 905c 	ldr.w	r9, [pc, #92]	; 2c668 <att_read_mult_req+0xa4>
	data.chan = chan;
   2c60c:	9400      	str	r4, [sp, #0]
   2c60e:	f105 0708 	add.w	r7, r5, #8
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   2c612:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(uint16_t)) {
   2c616:	89ab      	ldrh	r3, [r5, #12]
   2c618:	2b01      	cmp	r3, #1
   2c61a:	d804      	bhi.n	2c626 <att_read_mult_req+0x62>
	bt_att_chan_send_rsp(chan, data.buf);
   2c61c:	9902      	ldr	r1, [sp, #8]
   2c61e:	4620      	mov	r0, r4
   2c620:	f00d fc1b 	bl	39e5a <bt_att_chan_send_rsp>
	return 0;
   2c624:	e01c      	b.n	2c660 <att_read_mult_req+0x9c>
   2c626:	4638      	mov	r0, r7
   2c628:	f00e fa62 	bl	3aaf0 <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   2c62c:	466b      	mov	r3, sp
   2c62e:	464a      	mov	r2, r9
   2c630:	4601      	mov	r1, r0
   2c632:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   2c634:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   2c638:	f00d fb3f 	bl	39cba <bt_gatt_foreach_attr>
		if (data.err) {
   2c63c:	f89d 300c 	ldrb.w	r3, [sp, #12]
   2c640:	2b00      	cmp	r3, #0
   2c642:	d0e8      	beq.n	2c616 <att_read_mult_req+0x52>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   2c644:	9b02      	ldr	r3, [sp, #8]
   2c646:	6958      	ldr	r0, [r3, #20]
   2c648:	f7ff f9e8 	bl	2ba1c <tx_meta_data_free>
			net_buf_unref(data.buf);
   2c64c:	9802      	ldr	r0, [sp, #8]
   2c64e:	f002 f917 	bl	2e880 <net_buf_unref>
	if (!req) {
   2c652:	f89d 300c 	ldrb.w	r3, [sp, #12]
   2c656:	4632      	mov	r2, r6
   2c658:	210e      	movs	r1, #14
   2c65a:	4620      	mov	r0, r4
   2c65c:	f00d fe25 	bl	3a2aa <send_err_rsp.part.0>
			return 0;
   2c660:	2000      	movs	r0, #0
   2c662:	e7c2      	b.n	2c5ea <att_read_mult_req+0x26>
		return BT_ATT_ERR_UNLIKELY;
   2c664:	200e      	movs	r0, #14
   2c666:	e7c0      	b.n	2c5ea <att_read_mult_req+0x26>
   2c668:	00039fed 	.word	0x00039fed

0002c66c <att_read_rsp>:
{
   2c66c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   2c670:	f8d0 8004 	ldr.w	r8, [r0, #4]
{
   2c674:	4604      	mov	r4, r0
   2c676:	460e      	mov	r6, r1
	if (!bt_gatt_change_aware(conn, true)) {
   2c678:	4640      	mov	r0, r8
   2c67a:	2101      	movs	r1, #1
{
   2c67c:	4617      	mov	r7, r2
   2c67e:	461d      	mov	r5, r3
	if (!bt_gatt_change_aware(conn, true)) {
   2c680:	f00e f941 	bl	3a906 <bt_gatt_change_aware>
   2c684:	b948      	cbnz	r0, 2c69a <att_read_rsp+0x2e>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   2c686:	2105      	movs	r1, #5
   2c688:	f104 0098 	add.w	r0, r4, #152	; 0x98
   2c68c:	f00d fc99 	bl	39fc2 <atomic_test_and_set_bit>
   2c690:	bb78      	cbnz	r0, 2c6f2 <att_read_rsp+0x86>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   2c692:	2012      	movs	r0, #18
}
   2c694:	b004      	add	sp, #16
   2c696:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!handle) {
   2c69a:	b38d      	cbz	r5, 2c700 <att_read_rsp+0x94>
	(void)memset(&data, 0, sizeof(data));
   2c69c:	2210      	movs	r2, #16
   2c69e:	2100      	movs	r1, #0
   2c6a0:	4668      	mov	r0, sp
   2c6a2:	f00c fe90 	bl	393c6 <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
   2c6a6:	2200      	movs	r2, #0
   2c6a8:	4639      	mov	r1, r7
   2c6aa:	4640      	mov	r0, r8
   2c6ac:	f7ff fe7a 	bl	2c3a4 <bt_att_create_pdu>
   2c6b0:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   2c6b2:	b338      	cbz	r0, 2c704 <att_read_rsp+0x98>
	data.offset = offset;
   2c6b4:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   2c6b8:	f8ad 3004 	strh.w	r3, [sp, #4]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   2c6bc:	2301      	movs	r3, #1
   2c6be:	f88d 300c 	strb.w	r3, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   2c6c2:	4a11      	ldr	r2, [pc, #68]	; (2c708 <att_read_rsp+0x9c>)
	data.chan = chan;
   2c6c4:	9400      	str	r4, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   2c6c6:	466b      	mov	r3, sp
   2c6c8:	4629      	mov	r1, r5
   2c6ca:	4628      	mov	r0, r5
   2c6cc:	f00d faf5 	bl	39cba <bt_gatt_foreach_attr>
	if (data.err) {
   2c6d0:	f89d 300c 	ldrb.w	r3, [sp, #12]
   2c6d4:	b17b      	cbz	r3, 2c6f6 <att_read_rsp+0x8a>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   2c6d6:	9b02      	ldr	r3, [sp, #8]
   2c6d8:	6958      	ldr	r0, [r3, #20]
   2c6da:	f7ff f99f 	bl	2ba1c <tx_meta_data_free>
		net_buf_unref(data.buf);
   2c6de:	9802      	ldr	r0, [sp, #8]
   2c6e0:	f002 f8ce 	bl	2e880 <net_buf_unref>
	if (!req) {
   2c6e4:	f89d 300c 	ldrb.w	r3, [sp, #12]
   2c6e8:	462a      	mov	r2, r5
   2c6ea:	4631      	mov	r1, r6
   2c6ec:	4620      	mov	r0, r4
   2c6ee:	f00d fddc 	bl	3a2aa <send_err_rsp.part.0>
			return 0;
   2c6f2:	2000      	movs	r0, #0
   2c6f4:	e7ce      	b.n	2c694 <att_read_rsp+0x28>
	bt_att_chan_send_rsp(chan, data.buf);
   2c6f6:	9902      	ldr	r1, [sp, #8]
   2c6f8:	4620      	mov	r0, r4
   2c6fa:	f00d fbae 	bl	39e5a <bt_att_chan_send_rsp>
	return 0;
   2c6fe:	e7f8      	b.n	2c6f2 <att_read_rsp+0x86>
		return BT_ATT_ERR_INVALID_HANDLE;
   2c700:	2001      	movs	r0, #1
   2c702:	e7c7      	b.n	2c694 <att_read_rsp+0x28>
		return BT_ATT_ERR_UNLIKELY;
   2c704:	200e      	movs	r0, #14
   2c706:	e7c5      	b.n	2c694 <att_read_rsp+0x28>
   2c708:	00039fed 	.word	0x00039fed

0002c70c <att_read_type_req>:
{
   2c70c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   2c710:	898d      	ldrh	r5, [r1, #12]
   2c712:	3d04      	subs	r5, #4
   2c714:	b2ed      	uxtb	r5, r5
	if (uuid_len != 2 && uuid_len != 16) {
   2c716:	2d02      	cmp	r5, #2
{
   2c718:	4604      	mov	r4, r0
   2c71a:	b08c      	sub	sp, #48	; 0x30
   2c71c:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
   2c71e:	d001      	beq.n	2c724 <att_read_type_req+0x18>
   2c720:	2d10      	cmp	r5, #16
   2c722:	d150      	bne.n	2c7c6 <att_read_type_req+0xba>
	return net_buf_simple_pull_mem(&buf->b, len);
   2c724:	2104      	movs	r1, #4
   2c726:	3008      	adds	r0, #8
   2c728:	f002 f996 	bl	2ea58 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   2c72c:	f10d 0804 	add.w	r8, sp, #4
	start_handle = sys_le16_to_cpu(req->start_handle);
   2c730:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   2c732:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   2c734:	1d01      	adds	r1, r0, #4
   2c736:	462a      	mov	r2, r5
   2c738:	4640      	mov	r0, r8
   2c73a:	f00c fe90 	bl	3945e <bt_uuid_create>
   2c73e:	b188      	cbz	r0, 2c764 <att_read_type_req+0x58>
	if (!start || !end) {
   2c740:	b19e      	cbz	r6, 2c76a <att_read_type_req+0x5e>
   2c742:	b18f      	cbz	r7, 2c768 <att_read_type_req+0x5c>
	if (start > end) {
   2c744:	42b7      	cmp	r7, r6
   2c746:	d310      	bcc.n	2c76a <att_read_type_req+0x5e>
	(void)memset(&data, 0, sizeof(data));
   2c748:	2218      	movs	r2, #24
	struct bt_conn *conn = chan->chan.chan.conn;
   2c74a:	6865      	ldr	r5, [r4, #4]
	(void)memset(&data, 0, sizeof(data));
   2c74c:	2100      	movs	r1, #0
   2c74e:	eb0d 0002 	add.w	r0, sp, r2
   2c752:	f00c fe38 	bl	393c6 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
   2c756:	2201      	movs	r2, #1
   2c758:	2109      	movs	r1, #9
   2c75a:	4628      	mov	r0, r5
   2c75c:	f7ff fe22 	bl	2c3a4 <bt_att_create_pdu>
   2c760:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
   2c762:	b960      	cbnz	r0, 2c77e <att_read_type_req+0x72>
		return BT_ATT_ERR_UNLIKELY;
   2c764:	200e      	movs	r0, #14
   2c766:	e007      	b.n	2c778 <att_read_type_req+0x6c>
			*err = 0U;
   2c768:	463e      	mov	r6, r7
	if (!req) {
   2c76a:	2301      	movs	r3, #1
   2c76c:	4632      	mov	r2, r6
   2c76e:	2108      	movs	r1, #8
   2c770:	4620      	mov	r0, r4
   2c772:	f00d fd9a 	bl	3a2aa <send_err_rsp.part.0>
		return 0;
   2c776:	2000      	movs	r0, #0
}
   2c778:	b00c      	add	sp, #48	; 0x30
   2c77a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_add(&buf->b, len);
   2c77e:	2101      	movs	r1, #1
   2c780:	3008      	adds	r0, #8
	data.uuid = uuid;
   2c782:	e9cd 4806 	strd	r4, r8, [sp, #24]
   2c786:	f002 f981 	bl	2ea8c <net_buf_simple_add>
	data.rsp->len = 0U;
   2c78a:	2300      	movs	r3, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   2c78c:	9009      	str	r0, [sp, #36]	; 0x24
	data.rsp->len = 0U;
   2c78e:	7003      	strb	r3, [r0, #0]
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   2c790:	230a      	movs	r3, #10
   2c792:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   2c796:	4a0d      	ldr	r2, [pc, #52]	; (2c7cc <att_read_type_req+0xc0>)
   2c798:	ab06      	add	r3, sp, #24
   2c79a:	4639      	mov	r1, r7
   2c79c:	4630      	mov	r0, r6
   2c79e:	f00d fa8c 	bl	39cba <bt_gatt_foreach_attr>
	if (data.err) {
   2c7a2:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   2c7a6:	b14b      	cbz	r3, 2c7bc <att_read_type_req+0xb0>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   2c7a8:	9b08      	ldr	r3, [sp, #32]
   2c7aa:	6958      	ldr	r0, [r3, #20]
   2c7ac:	f7ff f936 	bl	2ba1c <tx_meta_data_free>
		net_buf_unref(data.buf);
   2c7b0:	9808      	ldr	r0, [sp, #32]
   2c7b2:	f002 f865 	bl	2e880 <net_buf_unref>
	if (!req) {
   2c7b6:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   2c7ba:	e7d7      	b.n	2c76c <att_read_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf);
   2c7bc:	9908      	ldr	r1, [sp, #32]
   2c7be:	4620      	mov	r0, r4
   2c7c0:	f00d fb4b 	bl	39e5a <bt_att_chan_send_rsp>
	return 0;
   2c7c4:	e7d7      	b.n	2c776 <att_read_type_req+0x6a>
		return BT_ATT_ERR_INVALID_PDU;
   2c7c6:	2004      	movs	r0, #4
   2c7c8:	e7d6      	b.n	2c778 <att_read_type_req+0x6c>
   2c7ca:	bf00      	nop
   2c7cc:	0002bea1 	.word	0x0002bea1

0002c7d0 <att_find_type_req>:
{
   2c7d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2c7d4:	460f      	mov	r7, r1
   2c7d6:	b086      	sub	sp, #24
   2c7d8:	4604      	mov	r4, r0
	return net_buf_simple_pull_mem(&buf->b, len);
   2c7da:	2106      	movs	r1, #6
   2c7dc:	f107 0008 	add.w	r0, r7, #8
   2c7e0:	f002 f93a 	bl	2ea58 <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   2c7e4:	8805      	ldrh	r5, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   2c7e6:	f8b0 8002 	ldrh.w	r8, [r0, #2]
	type = sys_le16_to_cpu(req->type);
   2c7ea:	8882      	ldrh	r2, [r0, #4]
	value = buf->data;
   2c7ec:	f8d7 9008 	ldr.w	r9, [r7, #8]
	if (!start || !end) {
   2c7f0:	b1c5      	cbz	r5, 2c824 <att_find_type_req+0x54>
   2c7f2:	2300      	movs	r3, #0
   2c7f4:	f1b8 0f00 	cmp.w	r8, #0
   2c7f8:	d013      	beq.n	2c822 <att_find_type_req+0x52>
	if (start > end) {
   2c7fa:	4545      	cmp	r5, r8
   2c7fc:	d812      	bhi.n	2c824 <att_find_type_req+0x54>
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   2c7fe:	f88d 3000 	strb.w	r3, [sp]
   2c802:	f88d 3004 	strb.w	r3, [sp, #4]
   2c806:	a901      	add	r1, sp, #4
   2c808:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   2c80c:	4668      	mov	r0, sp
   2c80e:	f8ad 2002 	strh.w	r2, [sp, #2]
   2c812:	f8ad 3006 	strh.w	r3, [sp, #6]
   2c816:	f00c fdf4 	bl	39402 <bt_uuid_cmp>
   2c81a:	4606      	mov	r6, r0
   2c81c:	b160      	cbz	r0, 2c838 <att_find_type_req+0x68>
	if (!req) {
   2c81e:	230a      	movs	r3, #10
   2c820:	e001      	b.n	2c826 <att_find_type_req+0x56>
			*err = 0U;
   2c822:	4645      	mov	r5, r8
	if (!req) {
   2c824:	2301      	movs	r3, #1
   2c826:	462a      	mov	r2, r5
   2c828:	2106      	movs	r1, #6
   2c82a:	4620      	mov	r0, r4
   2c82c:	f00d fd3d 	bl	3a2aa <send_err_rsp.part.0>
		return 0;
   2c830:	2000      	movs	r0, #0
}
   2c832:	b006      	add	sp, #24
   2c834:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	struct bt_conn *conn = chan->chan.chan.conn;
   2c838:	f8d4 a004 	ldr.w	sl, [r4, #4]
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   2c83c:	7b3f      	ldrb	r7, [r7, #12]
	(void)memset(&data, 0, sizeof(data));
   2c83e:	4601      	mov	r1, r0
   2c840:	2214      	movs	r2, #20
   2c842:	a801      	add	r0, sp, #4
   2c844:	f00c fdbf 	bl	393c6 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
   2c848:	4632      	mov	r2, r6
   2c84a:	2107      	movs	r1, #7
   2c84c:	4650      	mov	r0, sl
   2c84e:	f7ff fda9 	bl	2c3a4 <bt_att_create_pdu>
   2c852:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   2c854:	b1f8      	cbz	r0, 2c896 <att_find_type_req+0xc6>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   2c856:	230a      	movs	r3, #10
   2c858:	f88d 3015 	strb.w	r3, [sp, #21]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   2c85c:	4a0f      	ldr	r2, [pc, #60]	; (2c89c <att_find_type_req+0xcc>)
	data.chan = chan;
   2c85e:	9401      	str	r4, [sp, #4]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   2c860:	ab01      	add	r3, sp, #4
   2c862:	4641      	mov	r1, r8
   2c864:	4628      	mov	r0, r5
	data.value = value;
   2c866:	e9cd 6903 	strd	r6, r9, [sp, #12]
	data.value_len = value_len;
   2c86a:	f88d 7014 	strb.w	r7, [sp, #20]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   2c86e:	f00d fa24 	bl	39cba <bt_gatt_foreach_attr>
	if (data.err) {
   2c872:	f89d 3015 	ldrb.w	r3, [sp, #21]
   2c876:	b14b      	cbz	r3, 2c88c <att_find_type_req+0xbc>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   2c878:	9b02      	ldr	r3, [sp, #8]
   2c87a:	6958      	ldr	r0, [r3, #20]
   2c87c:	f7ff f8ce 	bl	2ba1c <tx_meta_data_free>
		net_buf_unref(data.buf);
   2c880:	9802      	ldr	r0, [sp, #8]
   2c882:	f001 fffd 	bl	2e880 <net_buf_unref>
	if (!req) {
   2c886:	f89d 3015 	ldrb.w	r3, [sp, #21]
   2c88a:	e7cc      	b.n	2c826 <att_find_type_req+0x56>
	bt_att_chan_send_rsp(chan, data.buf);
   2c88c:	9902      	ldr	r1, [sp, #8]
   2c88e:	4620      	mov	r0, r4
   2c890:	f00d fae3 	bl	39e5a <bt_att_chan_send_rsp>
	return 0;
   2c894:	e7cc      	b.n	2c830 <att_find_type_req+0x60>
		return BT_ATT_ERR_UNLIKELY;
   2c896:	200e      	movs	r0, #14
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   2c898:	e7cb      	b.n	2c832 <att_find_type_req+0x62>
   2c89a:	bf00      	nop
   2c89c:	0002ba55 	.word	0x0002ba55

0002c8a0 <att_find_info_req>:
{
   2c8a0:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
   2c8a2:	688b      	ldr	r3, [r1, #8]
	start_handle = sys_le16_to_cpu(req->start_handle);
   2c8a4:	881d      	ldrh	r5, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   2c8a6:	885e      	ldrh	r6, [r3, #2]
{
   2c8a8:	b085      	sub	sp, #20
   2c8aa:	4604      	mov	r4, r0
	if (!start || !end) {
   2c8ac:	b195      	cbz	r5, 2c8d4 <att_find_info_req+0x34>
   2c8ae:	b186      	cbz	r6, 2c8d2 <att_find_info_req+0x32>
	if (start > end) {
   2c8b0:	42b5      	cmp	r5, r6
   2c8b2:	d80f      	bhi.n	2c8d4 <att_find_info_req+0x34>
	struct bt_conn *conn = chan->chan.chan.conn;
   2c8b4:	6847      	ldr	r7, [r0, #4]
	(void)memset(&data, 0, sizeof(data));
   2c8b6:	2210      	movs	r2, #16
   2c8b8:	2100      	movs	r1, #0
   2c8ba:	4668      	mov	r0, sp
   2c8bc:	f00c fd83 	bl	393c6 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
   2c8c0:	2200      	movs	r2, #0
   2c8c2:	2105      	movs	r1, #5
   2c8c4:	4638      	mov	r0, r7
   2c8c6:	f7ff fd6d 	bl	2c3a4 <bt_att_create_pdu>
   2c8ca:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
   2c8cc:	b958      	cbnz	r0, 2c8e6 <att_find_info_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
   2c8ce:	200e      	movs	r0, #14
	return att_find_info_rsp(chan, start_handle, end_handle);
   2c8d0:	e007      	b.n	2c8e2 <att_find_info_req+0x42>
			*err = 0U;
   2c8d2:	4635      	mov	r5, r6
	if (!req) {
   2c8d4:	2301      	movs	r3, #1
   2c8d6:	462a      	mov	r2, r5
   2c8d8:	2104      	movs	r1, #4
   2c8da:	4620      	mov	r0, r4
   2c8dc:	f00d fce5 	bl	3a2aa <send_err_rsp.part.0>
		return 0;
   2c8e0:	2000      	movs	r0, #0
}
   2c8e2:	b005      	add	sp, #20
   2c8e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   2c8e6:	466b      	mov	r3, sp
   2c8e8:	4a0a      	ldr	r2, [pc, #40]	; (2c914 <att_find_info_req+0x74>)
	data.chan = chan;
   2c8ea:	9400      	str	r4, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   2c8ec:	4631      	mov	r1, r6
   2c8ee:	4628      	mov	r0, r5
   2c8f0:	f00d f9e3 	bl	39cba <bt_gatt_foreach_attr>
	if (!data.rsp) {
   2c8f4:	9b02      	ldr	r3, [sp, #8]
   2c8f6:	b943      	cbnz	r3, 2c90a <att_find_info_req+0x6a>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   2c8f8:	9b01      	ldr	r3, [sp, #4]
   2c8fa:	6958      	ldr	r0, [r3, #20]
   2c8fc:	f7ff f88e 	bl	2ba1c <tx_meta_data_free>
		net_buf_unref(data.buf);
   2c900:	9801      	ldr	r0, [sp, #4]
   2c902:	f001 ffbd 	bl	2e880 <net_buf_unref>
	if (!req) {
   2c906:	230a      	movs	r3, #10
   2c908:	e7e5      	b.n	2c8d6 <att_find_info_req+0x36>
	bt_att_chan_send_rsp(chan, data.buf);
   2c90a:	9901      	ldr	r1, [sp, #4]
   2c90c:	4620      	mov	r0, r4
   2c90e:	f00d faa4 	bl	39e5a <bt_att_chan_send_rsp>
	return 0;
   2c912:	e7e5      	b.n	2c8e0 <att_find_info_req+0x40>
   2c914:	00039cd1 	.word	0x00039cd1

0002c918 <bt_att_init>:
	bt_l2cap_register_ecred_cb(&cb);
#endif /* CONFIG_BT_EATT */
}

void bt_att_init(void)
{
   2c918:	b538      	push	{r3, r4, r5, lr}
	z_impl_k_queue_init(queue);
   2c91a:	4c0b      	ldr	r4, [pc, #44]	; (2c948 <bt_att_init+0x30>)
	k_fifo_init(&free_att_tx_meta_data);
	for (size_t i = 0; i < ARRAY_SIZE(tx_meta_data); i++) {
		k_fifo_put(&free_att_tx_meta_data, &tx_meta_data[i]);
   2c91c:	4d0b      	ldr	r5, [pc, #44]	; (2c94c <bt_att_init+0x34>)
   2c91e:	4620      	mov	r0, r4
   2c920:	f00f f991 	bl	3bc46 <z_impl_k_queue_init>
   2c924:	4629      	mov	r1, r5
   2c926:	4620      	mov	r0, r4
   2c928:	f00f f99a 	bl	3bc60 <k_queue_append>
   2c92c:	f105 0114 	add.w	r1, r5, #20
   2c930:	4620      	mov	r0, r4
   2c932:	f00f f995 	bl	3bc60 <k_queue_append>
   2c936:	f105 0128 	add.w	r1, r5, #40	; 0x28
   2c93a:	4620      	mov	r0, r4
   2c93c:	f00f f990 	bl	3bc60 <k_queue_append>
	bt_gatt_init();

	if (IS_ENABLED(CONFIG_BT_EATT)) {
		bt_eatt_init();
	}
}
   2c940:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_gatt_init();
   2c944:	f000 bbb4 	b.w	2d0b0 <bt_gatt_init>
   2c948:	20000bb4 	.word	0x20000bb4
   2c94c:	20002ef0 	.word	0x20002ef0

0002c950 <bt_att_req_alloc>:
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
	}
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
   2c950:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_att_req *req = NULL;
   2c952:	2300      	movs	r3, #0
{
   2c954:	4605      	mov	r5, r0
   2c956:	460c      	mov	r4, r1
	struct bt_att_req *req = NULL;
   2c958:	9301      	str	r3, [sp, #4]
	return z_impl_z_current_get();
   2c95a:	f00a fbcf 	bl	370fc <z_impl_z_current_get>

	if (k_current_get() == att_handle_rsp_thread) {
   2c95e:	4b0b      	ldr	r3, [pc, #44]	; (2c98c <bt_att_req_alloc+0x3c>)
   2c960:	681b      	ldr	r3, [r3, #0]
   2c962:	4283      	cmp	r3, r0
		/* No req will be fulfilled while blocking on the bt_recv thread.
		 * Blocking would cause deadlock.
		 */
		timeout = K_NO_WAIT;
   2c964:	bf04      	itt	eq
   2c966:	2500      	moveq	r5, #0
   2c968:	462c      	moveq	r4, r5
	}

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   2c96a:	a901      	add	r1, sp, #4
   2c96c:	4808      	ldr	r0, [pc, #32]	; (2c990 <bt_att_req_alloc+0x40>)
   2c96e:	462a      	mov	r2, r5
   2c970:	4623      	mov	r3, r4
   2c972:	f008 fac1 	bl	34ef8 <k_mem_slab_alloc>
   2c976:	4601      	mov	r1, r0
   2c978:	b930      	cbnz	r0, 2c988 <bt_att_req_alloc+0x38>
		return NULL;
	}

	BT_DBG("req %p", req);

	memset(req, 0, sizeof(*req));
   2c97a:	9801      	ldr	r0, [sp, #4]
   2c97c:	2210      	movs	r2, #16
   2c97e:	f00c fd22 	bl	393c6 <memset>

	return req;
   2c982:	9801      	ldr	r0, [sp, #4]
}
   2c984:	b003      	add	sp, #12
   2c986:	bd30      	pop	{r4, r5, pc}
		return NULL;
   2c988:	2000      	movs	r0, #0
   2c98a:	e7fb      	b.n	2c984 <bt_att_req_alloc+0x34>
   2c98c:	20002f2c 	.word	0x20002f2c
   2c990:	20000b54 	.word	0x20000b54

0002c994 <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
   2c994:	b507      	push	{r0, r1, r2, lr}
	BT_DBG("req %p", req);

	if (req->buf) {
   2c996:	6883      	ldr	r3, [r0, #8]
{
   2c998:	9001      	str	r0, [sp, #4]
	if (req->buf) {
   2c99a:	b14b      	cbz	r3, 2c9b0 <bt_att_req_free+0x1c>
		tx_meta_data_free(bt_att_tx_meta_data(req->buf));
   2c99c:	6958      	ldr	r0, [r3, #20]
   2c99e:	f7ff f83d 	bl	2ba1c <tx_meta_data_free>
		net_buf_unref(req->buf);
   2c9a2:	9b01      	ldr	r3, [sp, #4]
   2c9a4:	6898      	ldr	r0, [r3, #8]
   2c9a6:	f001 ff6b 	bl	2e880 <net_buf_unref>
		req->buf = NULL;
   2c9aa:	9b01      	ldr	r3, [sp, #4]
   2c9ac:	2200      	movs	r2, #0
   2c9ae:	609a      	str	r2, [r3, #8]
	}

	k_mem_slab_free(&req_slab, (void **)&req);
   2c9b0:	4803      	ldr	r0, [pc, #12]	; (2c9c0 <bt_att_req_free+0x2c>)
   2c9b2:	a901      	add	r1, sp, #4
   2c9b4:	f008 faf8 	bl	34fa8 <k_mem_slab_free>
}
   2c9b8:	b003      	add	sp, #12
   2c9ba:	f85d fb04 	ldr.w	pc, [sp], #4
   2c9be:	bf00      	nop
   2c9c0:	20000b54 	.word	0x20000b54

0002c9c4 <att_handle_rsp>:
{
   2c9c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2c9c8:	4604      	mov	r4, r0
   2c9ca:	b088      	sub	sp, #32
	k_work_cancel_delayable(&chan->timeout_work);
   2c9cc:	30c0      	adds	r0, #192	; 0xc0
{
   2c9ce:	460e      	mov	r6, r1
   2c9d0:	4617      	mov	r7, r2
   2c9d2:	461d      	mov	r5, r3
	k_work_cancel_delayable(&chan->timeout_work);
   2c9d4:	f009 fbcc 	bl	36170 <k_work_cancel_delayable>
	if (!chan->req) {
   2c9d8:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
   2c9dc:	b9a8      	cbnz	r0, 2ca0a <att_handle_rsp+0x46>
		BT_WARN("No pending ATT request");
   2c9de:	481c      	ldr	r0, [pc, #112]	; (2ca50 <att_handle_rsp+0x8c>)
   2c9e0:	6803      	ldr	r3, [r0, #0]
   2c9e2:	f013 0f06 	tst.w	r3, #6
   2c9e6:	d106      	bne.n	2c9f6 <att_handle_rsp+0x32>
	att_req_send_process(chan->att);
   2c9e8:	6820      	ldr	r0, [r4, #0]
   2c9ea:	f00d fb8e 	bl	3a10a <att_req_send_process>
}
   2c9ee:	2000      	movs	r0, #0
   2c9f0:	b008      	add	sp, #32
   2c9f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		BT_WARN("No pending ATT request");
   2c9f6:	4b17      	ldr	r3, [pc, #92]	; (2ca54 <att_handle_rsp+0x90>)
   2c9f8:	9307      	str	r3, [sp, #28]
   2c9fa:	aa06      	add	r2, sp, #24
   2c9fc:	2302      	movs	r3, #2
   2c9fe:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   2ca02:	9306      	str	r3, [sp, #24]
   2ca04:	f00d f9f3 	bl	39dee <z_log_msg_static_create.constprop.0>
	att_req_send_process(chan->att);
   2ca08:	e7ee      	b.n	2c9e8 <att_handle_rsp+0x24>
	if (chan->req == &cancel) {
   2ca0a:	4b13      	ldr	r3, [pc, #76]	; (2ca58 <att_handle_rsp+0x94>)
   2ca0c:	4298      	cmp	r0, r3
   2ca0e:	f04f 0800 	mov.w	r8, #0
   2ca12:	d102      	bne.n	2ca1a <att_handle_rsp+0x56>
		chan->req = NULL;
   2ca14:	f8c4 809c 	str.w	r8, [r4, #156]	; 0x9c
   2ca18:	e7e6      	b.n	2c9e8 <att_handle_rsp+0x24>
	func = chan->req->func;
   2ca1a:	f8d0 9004 	ldr.w	r9, [r0, #4]
	chan->req->func = NULL;
   2ca1e:	f8c0 8004 	str.w	r8, [r0, #4]
	params = chan->req->user_data;
   2ca22:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
   2ca26:	f8d0 a00c 	ldr.w	sl, [r0, #12]
	bt_att_req_free(chan->req);
   2ca2a:	f7ff ffb3 	bl	2c994 <bt_att_req_free>
	att_req_send_process(chan->att);
   2ca2e:	6820      	ldr	r0, [r4, #0]
	chan->req = NULL;
   2ca30:	f8c4 809c 	str.w	r8, [r4, #156]	; 0x9c
	att_req_send_process(chan->att);
   2ca34:	f00d fb69 	bl	3a10a <att_req_send_process>
	if (func) {
   2ca38:	f1b9 0f00 	cmp.w	r9, #0
   2ca3c:	d0d7      	beq.n	2c9ee <att_handle_rsp+0x2a>
		func(chan->att->conn, err, pdu, len, params);
   2ca3e:	6820      	ldr	r0, [r4, #0]
   2ca40:	f8cd a000 	str.w	sl, [sp]
   2ca44:	6800      	ldr	r0, [r0, #0]
   2ca46:	463b      	mov	r3, r7
   2ca48:	4632      	mov	r2, r6
   2ca4a:	4629      	mov	r1, r5
   2ca4c:	47c8      	blx	r9
   2ca4e:	e7ce      	b.n	2c9ee <att_handle_rsp+0x2a>
   2ca50:	20000a78 	.word	0x20000a78
   2ca54:	0003e880 	.word	0x0003e880
   2ca58:	20002f30 	.word	0x20002f30

0002ca5c <bt_att_disconnected>:
{
   2ca5c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_att *att = att_chan->att;
   2ca60:	f850 6c04 	ldr.w	r6, [r0, #-4]
{
   2ca64:	4604      	mov	r4, r0
	if (!att_chan->att) {
   2ca66:	2e00      	cmp	r6, #0
   2ca68:	d056      	beq.n	2cb18 <bt_att_disconnected+0xbc>
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
   2ca6a:	f100 01ec 	add.w	r1, r0, #236	; 0xec
   2ca6e:	f106 0028 	add.w	r0, r6, #40	; 0x28
   2ca72:	f00d fa8b 	bl	39f8c <sys_slist_find_and_remove.isra.0>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
   2ca76:	1f27      	subs	r7, r4, #4
   2ca78:	f104 089c 	add.w	r8, r4, #156	; 0x9c
   2ca7c:	2200      	movs	r2, #0
   2ca7e:	2300      	movs	r3, #0
   2ca80:	4640      	mov	r0, r8
   2ca82:	f001 fdcb 	bl	2e61c <net_buf_get>
   2ca86:	4605      	mov	r5, r0
   2ca88:	bb28      	cbnz	r0, 2cad6 <bt_att_disconnected+0x7a>
	if (chan->req) {
   2ca8a:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   2ca8e:	b12b      	cbz	r3, 2ca9c <bt_att_disconnected+0x40>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
   2ca90:	4602      	mov	r2, r0
   2ca92:	4601      	mov	r1, r0
   2ca94:	230e      	movs	r3, #14
   2ca96:	4638      	mov	r0, r7
   2ca98:	f7ff ff94 	bl	2c9c4 <att_handle_rsp>
	chan->att = NULL;
   2ca9c:	2300      	movs	r3, #0
   2ca9e:	f844 3c04 	str.w	r3, [r4, #-4]
	if (!sys_slist_is_empty(&att->chans)) {
   2caa2:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   2caa4:	2b00      	cmp	r3, #0
   2caa6:	d137      	bne.n	2cb18 <bt_att_disconnected+0xbc>
	att_reset(att);
   2caa8:	9603      	str	r6, [sp, #12]
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
   2caaa:	9803      	ldr	r0, [sp, #12]
   2caac:	2200      	movs	r2, #0
   2caae:	2300      	movs	r3, #0
   2cab0:	300c      	adds	r0, #12
   2cab2:	f001 fdb3 	bl	2e61c <net_buf_get>
   2cab6:	4605      	mov	r5, r0
   2cab8:	b9a0      	cbnz	r0, 2cae4 <bt_att_disconnected+0x88>
	while (!sys_slist_is_empty(&att->reqs)) {
   2caba:	9803      	ldr	r0, [sp, #12]
	return list->head;
   2cabc:	6845      	ldr	r5, [r0, #4]
   2cabe:	b9c5      	cbnz	r5, 2caf2 <bt_att_disconnected+0x96>
	att->conn = NULL;
   2cac0:	6005      	str	r5, [r0, #0]
	k_mem_slab_free(&att_slab, (void **)&att);
   2cac2:	a903      	add	r1, sp, #12
   2cac4:	4816      	ldr	r0, [pc, #88]	; (2cb20 <bt_att_disconnected+0xc4>)
   2cac6:	f008 fa6f 	bl	34fa8 <k_mem_slab_free>
	bt_gatt_disconnected(le_chan->chan.conn);
   2caca:	6820      	ldr	r0, [r4, #0]
}
   2cacc:	b004      	add	sp, #16
   2cace:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_gatt_disconnected(le_chan->chan.conn);
   2cad2:	f001 b8d9 	b.w	2dc88 <bt_gatt_disconnected>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   2cad6:	6968      	ldr	r0, [r5, #20]
   2cad8:	f7fe ffa0 	bl	2ba1c <tx_meta_data_free>
		net_buf_unref(buf);
   2cadc:	4628      	mov	r0, r5
   2cade:	f001 fecf 	bl	2e880 <net_buf_unref>
   2cae2:	e7cb      	b.n	2ca7c <bt_att_disconnected+0x20>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   2cae4:	6968      	ldr	r0, [r5, #20]
   2cae6:	f7fe ff99 	bl	2ba1c <tx_meta_data_free>
		net_buf_unref(buf);
   2caea:	4628      	mov	r0, r5
   2caec:	f001 fec8 	bl	2e880 <net_buf_unref>
   2caf0:	e7db      	b.n	2caaa <bt_att_disconnected+0x4e>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2caf2:	6882      	ldr	r2, [r0, #8]
	return node->next;
   2caf4:	682b      	ldr	r3, [r5, #0]
	list->head = node;
   2caf6:	6043      	str	r3, [r0, #4]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2caf8:	4295      	cmp	r5, r2
	list->tail = node;
   2cafa:	bf08      	it	eq
   2cafc:	6083      	streq	r3, [r0, #8]
		if (req->func) {
   2cafe:	686e      	ldr	r6, [r5, #4]
   2cb00:	b136      	cbz	r6, 2cb10 <bt_att_disconnected+0xb4>
			req->func(att->conn, BT_ATT_ERR_UNLIKELY, NULL, 0,
   2cb02:	68eb      	ldr	r3, [r5, #12]
   2cb04:	9300      	str	r3, [sp, #0]
   2cb06:	2300      	movs	r3, #0
   2cb08:	6800      	ldr	r0, [r0, #0]
   2cb0a:	461a      	mov	r2, r3
   2cb0c:	210e      	movs	r1, #14
   2cb0e:	47b0      	blx	r6
		bt_att_req_free(req);
   2cb10:	4628      	mov	r0, r5
   2cb12:	f7ff ff3f 	bl	2c994 <bt_att_req_free>
   2cb16:	e7d0      	b.n	2caba <bt_att_disconnected+0x5e>
}
   2cb18:	b004      	add	sp, #16
   2cb1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2cb1e:	bf00      	nop
   2cb20:	20000b14 	.word	0x20000b14

0002cb24 <att_timeout>:
{
   2cb24:	b510      	push	{r4, lr}
   2cb26:	4604      	mov	r4, r0
	BT_ERR("ATT Timeout");
   2cb28:	480a      	ldr	r0, [pc, #40]	; (2cb54 <att_timeout+0x30>)
   2cb2a:	6803      	ldr	r3, [r0, #0]
   2cb2c:	075b      	lsls	r3, r3, #29
{
   2cb2e:	b086      	sub	sp, #24
	BT_ERR("ATT Timeout");
   2cb30:	d008      	beq.n	2cb44 <att_timeout+0x20>
   2cb32:	4b09      	ldr	r3, [pc, #36]	; (2cb58 <att_timeout+0x34>)
   2cb34:	9305      	str	r3, [sp, #20]
   2cb36:	aa04      	add	r2, sp, #16
   2cb38:	2302      	movs	r3, #2
   2cb3a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   2cb3e:	9304      	str	r3, [sp, #16]
   2cb40:	f00d f955 	bl	39dee <z_log_msg_static_create.constprop.0>
	bt_att_disconnected(&chan->chan.chan);
   2cb44:	f1a4 00bc 	sub.w	r0, r4, #188	; 0xbc
}
   2cb48:	b006      	add	sp, #24
   2cb4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_att_disconnected(&chan->chan.chan);
   2cb4e:	f7ff bf85 	b.w	2ca5c <bt_att_disconnected>
   2cb52:	bf00      	nop
   2cb54:	20000a78 	.word	0x20000a78
   2cb58:	0003e897 	.word	0x0003e897

0002cb5c <bt_att_send>:

int bt_att_send(struct bt_conn *conn, struct net_buf *buf)
{
   2cb5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2cb5e:	460c      	mov	r4, r1
	struct bt_att *att;

	__ASSERT_NO_MSG(conn);
   2cb60:	b950      	cbnz	r0, 2cb78 <bt_att_send+0x1c>
   2cb62:	4928      	ldr	r1, [pc, #160]	; (2cc04 <bt_att_send+0xa8>)
   2cb64:	4828      	ldr	r0, [pc, #160]	; (2cc08 <bt_att_send+0xac>)
   2cb66:	f640 62a8 	movw	r2, #3752	; 0xea8
   2cb6a:	f00b ffd2 	bl	38b12 <assert_print>
   2cb6e:	f640 61a8 	movw	r1, #3752	; 0xea8
	__ASSERT_NO_MSG(buf);
   2cb72:	4824      	ldr	r0, [pc, #144]	; (2cc04 <bt_att_send+0xa8>)
   2cb74:	f00b ffc6 	bl	38b04 <assert_post_action>
   2cb78:	b941      	cbnz	r1, 2cb8c <bt_att_send+0x30>
   2cb7a:	4922      	ldr	r1, [pc, #136]	; (2cc04 <bt_att_send+0xa8>)
   2cb7c:	4822      	ldr	r0, [pc, #136]	; (2cc08 <bt_att_send+0xac>)
   2cb7e:	f640 62a9 	movw	r2, #3753	; 0xea9
   2cb82:	f00b ffc6 	bl	38b12 <assert_print>
   2cb86:	f640 61a9 	movw	r1, #3753	; 0xea9
   2cb8a:	e7f2      	b.n	2cb72 <bt_att_send+0x16>

	att = att_get(conn);
   2cb8c:	f7ff f8cc 	bl	2bd28 <att_get>
	if (!att) {
   2cb90:	4605      	mov	r5, r0
   2cb92:	b940      	cbnz	r0, 2cba6 <bt_att_send+0x4a>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   2cb94:	6960      	ldr	r0, [r4, #20]
   2cb96:	f7fe ff41 	bl	2ba1c <tx_meta_data_free>
		net_buf_unref(buf);
   2cb9a:	4620      	mov	r0, r4
   2cb9c:	f001 fe70 	bl	2e880 <net_buf_unref>
		return -ENOTCONN;
   2cba0:	f06f 007f 	mvn.w	r0, #127	; 0x7f

	net_buf_put(&att->tx_queue, buf);
	att_send_process(att);

	return 0;
}
   2cba4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	net_buf_put(&att->tx_queue, buf);
   2cba6:	f100 060c 	add.w	r6, r0, #12
   2cbaa:	4621      	mov	r1, r4
   2cbac:	4630      	mov	r0, r6
   2cbae:	f001 fe3d 	bl	2e82c <net_buf_put>
	return list->head;
   2cbb2:	6aad      	ldr	r5, [r5, #40]	; 0x28
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2cbb4:	b14d      	cbz	r5, 2cbca <bt_att_send+0x6e>
	return node->next;
   2cbb6:	f855 49f0 	ldr.w	r4, [r5], #-240
   2cbba:	b104      	cbz	r4, 2cbbe <bt_att_send+0x62>
   2cbbc:	3cf0      	subs	r4, #240	; 0xf0
		err = process_queue(chan, &att->tx_queue);
   2cbbe:	4631      	mov	r1, r6
   2cbc0:	4628      	mov	r0, r5
   2cbc2:	f00d f931 	bl	39e28 <process_queue>
		if (!err) {
   2cbc6:	4603      	mov	r3, r0
   2cbc8:	b980      	cbnz	r0, 2cbec <bt_att_send+0x90>
	return 0;
   2cbca:	2000      	movs	r0, #0
   2cbcc:	e7ea      	b.n	2cba4 <bt_att_send+0x48>
		    (atomic_test_bit(chan->flags, ATT_ENHANCED) ==
   2cbce:	2103      	movs	r1, #3
   2cbd0:	f104 0098 	add.w	r0, r4, #152	; 0x98
   2cbd4:	f00d f837 	bl	39c46 <atomic_test_bit>
   2cbd8:	4607      	mov	r7, r0
		     atomic_test_bit(prev->flags, ATT_ENHANCED))) {
   2cbda:	f105 0098 	add.w	r0, r5, #152	; 0x98
   2cbde:	f00d f832 	bl	39c46 <atomic_test_bit>
		if (err == -ENOENT && prev &&
   2cbe2:	4287      	cmp	r7, r0
   2cbe4:	f06f 0301 	mvn.w	r3, #1
   2cbe8:	d107      	bne.n	2cbfa <bt_att_send+0x9e>
   2cbea:	4614      	mov	r4, r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2cbec:	2c00      	cmp	r4, #0
   2cbee:	d0ec      	beq.n	2cbca <bt_att_send+0x6e>
   2cbf0:	f8d4 20f0 	ldr.w	r2, [r4, #240]	; 0xf0
   2cbf4:	b922      	cbnz	r2, 2cc00 <bt_att_send+0xa4>
		if (err == -ENOENT && prev &&
   2cbf6:	3302      	adds	r3, #2
   2cbf8:	d0e9      	beq.n	2cbce <bt_att_send+0x72>
{
   2cbfa:	4625      	mov	r5, r4
   2cbfc:	4614      	mov	r4, r2
   2cbfe:	e7de      	b.n	2cbbe <bt_att_send+0x62>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2cc00:	3af0      	subs	r2, #240	; 0xf0
   2cc02:	e7f8      	b.n	2cbf6 <bt_att_send+0x9a>
   2cc04:	0003e69f 	.word	0x0003e69f
   2cc08:	0003d1d7 	.word	0x0003d1d7

0002cc0c <bt_att_req_send>:

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
   2cc0c:	b510      	push	{r4, lr}
   2cc0e:	460c      	mov	r4, r1
	struct bt_att *att;

	BT_DBG("conn %p req %p", conn, req);

	__ASSERT_NO_MSG(conn);
   2cc10:	b950      	cbnz	r0, 2cc28 <bt_att_req_send+0x1c>
   2cc12:	4914      	ldr	r1, [pc, #80]	; (2cc64 <bt_att_req_send+0x58>)
   2cc14:	4814      	ldr	r0, [pc, #80]	; (2cc68 <bt_att_req_send+0x5c>)
   2cc16:	f640 62be 	movw	r2, #3774	; 0xebe
   2cc1a:	f00b ff7a 	bl	38b12 <assert_print>
   2cc1e:	f640 61be 	movw	r1, #3774	; 0xebe
	__ASSERT_NO_MSG(req);
   2cc22:	4810      	ldr	r0, [pc, #64]	; (2cc64 <bt_att_req_send+0x58>)
   2cc24:	f00b ff6e 	bl	38b04 <assert_post_action>
   2cc28:	b941      	cbnz	r1, 2cc3c <bt_att_req_send+0x30>
   2cc2a:	490e      	ldr	r1, [pc, #56]	; (2cc64 <bt_att_req_send+0x58>)
   2cc2c:	480e      	ldr	r0, [pc, #56]	; (2cc68 <bt_att_req_send+0x5c>)
   2cc2e:	f640 62bf 	movw	r2, #3775	; 0xebf
   2cc32:	f00b ff6e 	bl	38b12 <assert_print>
   2cc36:	f640 61bf 	movw	r1, #3775	; 0xebf
   2cc3a:	e7f2      	b.n	2cc22 <bt_att_req_send+0x16>

	att = att_get(conn);
   2cc3c:	f7ff f874 	bl	2bd28 <att_get>
	if (!att) {
   2cc40:	b160      	cbz	r0, 2cc5c <bt_att_req_send+0x50>
	parent->next = child;
   2cc42:	2300      	movs	r3, #0
   2cc44:	6023      	str	r3, [r4, #0]
	return list->tail;
   2cc46:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_APPEND(slist, snode)
   2cc48:	b92b      	cbnz	r3, 2cc56 <bt_att_req_send+0x4a>
	list->head = node;
   2cc4a:	e9c0 4401 	strd	r4, r4, [r0, #4]
		return -ENOTCONN;
	}

	sys_slist_append(&att->reqs, &req->node);
	att_req_send_process(att);
   2cc4e:	f00d fa5c 	bl	3a10a <att_req_send_process>

	return 0;
   2cc52:	2000      	movs	r0, #0
}
   2cc54:	bd10      	pop	{r4, pc}
	parent->next = child;
   2cc56:	601c      	str	r4, [r3, #0]
	list->tail = node;
   2cc58:	6084      	str	r4, [r0, #8]
}
   2cc5a:	e7f8      	b.n	2cc4e <bt_att_req_send+0x42>
		return -ENOTCONN;
   2cc5c:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   2cc60:	e7f8      	b.n	2cc54 <bt_att_req_send+0x48>
   2cc62:	bf00      	nop
   2cc64:	0003e69f 	.word	0x0003e69f
   2cc68:	0003d1d7 	.word	0x0003d1d7

0002cc6c <find_cf_cfg>:
	atomic_set(cfg->flags, 0);
}

#if defined(CONFIG_BT_GATT_CACHING)
static struct gatt_cf_cfg *find_cf_cfg(struct bt_conn *conn)
{
   2cc6c:	b508      	push	{r3, lr}
	int i;

	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
		struct gatt_cf_cfg *cfg = &cf_cfg[i];

		if (!conn) {
   2cc6e:	b930      	cbnz	r0, 2cc7e <find_cf_cfg+0x12>
			if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   2cc70:	4907      	ldr	r1, [pc, #28]	; (2cc90 <find_cf_cfg+0x24>)
   2cc72:	4808      	ldr	r0, [pc, #32]	; (2cc94 <find_cf_cfg+0x28>)
   2cc74:	f00d fc64 	bl	3a540 <bt_addr_le_eq>
   2cc78:	b138      	cbz	r0, 2cc8a <find_cf_cfg+0x1e>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   2cc7a:	4807      	ldr	r0, [pc, #28]	; (2cc98 <find_cf_cfg+0x2c>)
			return cfg;
		}
	}

	return NULL;
}
   2cc7c:	bd08      	pop	{r3, pc}
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   2cc7e:	4a05      	ldr	r2, [pc, #20]	; (2cc94 <find_cf_cfg+0x28>)
   2cc80:	f812 1c01 	ldrb.w	r1, [r2, #-1]
   2cc84:	f00c feff 	bl	39a86 <bt_conn_is_peer_addr_le>
   2cc88:	e7f6      	b.n	2cc78 <find_cf_cfg+0xc>
	return NULL;
   2cc8a:	2000      	movs	r0, #0
   2cc8c:	e7f6      	b.n	2cc7c <find_cf_cfg+0x10>
   2cc8e:	bf00      	nop
   2cc90:	0003dc18 	.word	0x0003dc18
   2cc94:	20002f59 	.word	0x20002f59
   2cc98:	20002f58 	.word	0x20002f58

0002cc9c <find_sc_cfg>:
{
   2cc9c:	b510      	push	{r4, lr}
		if (id == sc_cfg[i].id &&
   2cc9e:	4c06      	ldr	r4, [pc, #24]	; (2ccb8 <find_sc_cfg+0x1c>)
   2cca0:	7823      	ldrb	r3, [r4, #0]
   2cca2:	4283      	cmp	r3, r0
   2cca4:	d103      	bne.n	2ccae <find_sc_cfg+0x12>
		    bt_addr_le_eq(&sc_cfg[i].peer, addr)) {
   2cca6:	1c60      	adds	r0, r4, #1
   2cca8:	f00d fc4a 	bl	3a540 <bt_addr_le_eq>
		if (id == sc_cfg[i].id &&
   2ccac:	b908      	cbnz	r0, 2ccb2 <find_sc_cfg+0x16>
	return NULL;
   2ccae:	2000      	movs	r0, #0
}
   2ccb0:	bd10      	pop	{r4, pc}
			return &sc_cfg[i];
   2ccb2:	4620      	mov	r0, r4
   2ccb4:	e7fc      	b.n	2ccb0 <find_sc_cfg+0x14>
   2ccb6:	bf00      	nop
   2ccb8:	200033e2 	.word	0x200033e2

0002ccbc <find_ccc_cfg>:
	return next;
}

static struct bt_gatt_ccc_cfg *find_ccc_cfg(const struct bt_conn *conn,
					    struct _bt_gatt_ccc *ccc)
{
   2ccbc:	b510      	push	{r4, lr}
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];

		if (conn) {
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
						    &cfg->peer)) {
   2ccbe:	1c4a      	adds	r2, r1, #1
{
   2ccc0:	460c      	mov	r4, r1
		if (conn) {
   2ccc2:	b138      	cbz	r0, 2ccd4 <find_ccc_cfg+0x18>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   2ccc4:	7809      	ldrb	r1, [r1, #0]
   2ccc6:	f00c fede 	bl	39a86 <bt_conn_is_peer_addr_le>
   2ccca:	b108      	cbz	r0, 2ccd0 <find_ccc_cfg+0x14>
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];
   2cccc:	4620      	mov	r0, r4
			return cfg;
		}
	}

	return NULL;
}
   2ccce:	bd10      	pop	{r4, pc}
	return NULL;
   2ccd0:	2000      	movs	r0, #0
   2ccd2:	e7fc      	b.n	2ccce <find_ccc_cfg+0x12>
		} else if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   2ccd4:	4902      	ldr	r1, [pc, #8]	; (2cce0 <find_ccc_cfg+0x24>)
   2ccd6:	4610      	mov	r0, r2
   2ccd8:	f00d fc32 	bl	3a540 <bt_addr_le_eq>
   2ccdc:	e7f5      	b.n	2ccca <find_ccc_cfg+0xe>
   2ccde:	bf00      	nop
   2cce0:	0003dc18 	.word	0x0003dc18

0002cce4 <bt_gatt_service_init>:
{
   2cce4:	b510      	push	{r4, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   2cce6:	4b16      	ldr	r3, [pc, #88]	; (2cd40 <bt_gatt_service_init+0x5c>)
   2cce8:	f3bf 8f5b 	dmb	ish
   2ccec:	2201      	movs	r2, #1
   2ccee:	e853 1f00 	ldrex	r1, [r3]
   2ccf2:	2900      	cmp	r1, #0
   2ccf4:	d103      	bne.n	2ccfe <bt_gatt_service_init+0x1a>
   2ccf6:	e843 2000 	strex	r0, r2, [r3]
   2ccfa:	2800      	cmp	r0, #0
   2ccfc:	d1f7      	bne.n	2ccee <bt_gatt_service_init+0xa>
   2ccfe:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&service_init, 0, 1)) {
   2cd02:	d11c      	bne.n	2cd3e <bt_gatt_service_init+0x5a>
   2cd04:	490f      	ldr	r1, [pc, #60]	; (2cd44 <bt_gatt_service_init+0x60>)
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   2cd06:	4a10      	ldr	r2, [pc, #64]	; (2cd48 <bt_gatt_service_init+0x64>)
   2cd08:	880b      	ldrh	r3, [r1, #0]
   2cd0a:	4c10      	ldr	r4, [pc, #64]	; (2cd4c <bt_gatt_service_init+0x68>)
	if (!atomic_cas(&service_init, 0, 1)) {
   2cd0c:	2000      	movs	r0, #0
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   2cd0e:	42a2      	cmp	r2, r4
   2cd10:	d912      	bls.n	2cd38 <bt_gatt_service_init+0x54>
   2cd12:	b100      	cbz	r0, 2cd16 <bt_gatt_service_init+0x32>
   2cd14:	800b      	strh	r3, [r1, #0]
   2cd16:	490e      	ldr	r1, [pc, #56]	; (2cd50 <bt_gatt_service_init+0x6c>)
   2cd18:	480e      	ldr	r0, [pc, #56]	; (2cd54 <bt_gatt_service_init+0x70>)
   2cd1a:	f240 520e 	movw	r2, #1294	; 0x50e
   2cd1e:	f00b fef8 	bl	38b12 <assert_print>
   2cd22:	480b      	ldr	r0, [pc, #44]	; (2cd50 <bt_gatt_service_init+0x6c>)
   2cd24:	f240 510e 	movw	r1, #1294	; 0x50e
   2cd28:	f00b feec 	bl	38b04 <assert_post_action>
		last_static_handle += svc->attr_count;
   2cd2c:	6850      	ldr	r0, [r2, #4]
   2cd2e:	4403      	add	r3, r0
   2cd30:	b29b      	uxth	r3, r3
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   2cd32:	3208      	adds	r2, #8
   2cd34:	2001      	movs	r0, #1
   2cd36:	e7ea      	b.n	2cd0e <bt_gatt_service_init+0x2a>
   2cd38:	d3f8      	bcc.n	2cd2c <bt_gatt_service_init+0x48>
   2cd3a:	b100      	cbz	r0, 2cd3e <bt_gatt_service_init+0x5a>
   2cd3c:	800b      	strh	r3, [r1, #0]
}
   2cd3e:	bd10      	pop	{r4, pc}
   2cd40:	20002f68 	.word	0x20002f68
   2cd44:	200033ee 	.word	0x200033ee
   2cd48:	0003c47c 	.word	0x0003c47c
   2cd4c:	0003c494 	.word	0x0003c494
   2cd50:	0003e8aa 	.word	0x0003e8aa
   2cd54:	0003d1d7 	.word	0x0003d1d7

0002cd58 <sc_save>:
{
   2cd58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2cd5c:	b086      	sub	sp, #24
   2cd5e:	4680      	mov	r8, r0
   2cd60:	460f      	mov	r7, r1
   2cd62:	4616      	mov	r6, r2
   2cd64:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
   2cd66:	f7ff ff99 	bl	2cc9c <find_sc_cfg>
	if (!cfg) {
   2cd6a:	4604      	mov	r4, r0
   2cd6c:	b9c8      	cbnz	r0, 2cda2 <sc_save+0x4a>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   2cd6e:	4913      	ldr	r1, [pc, #76]	; (2cdbc <sc_save+0x64>)
   2cd70:	f7ff ff94 	bl	2cc9c <find_sc_cfg>
		if (!cfg) {
   2cd74:	4604      	mov	r4, r0
   2cd76:	b978      	cbnz	r0, 2cd98 <sc_save+0x40>
			BT_ERR("unable to save SC: no cfg left");
   2cd78:	4811      	ldr	r0, [pc, #68]	; (2cdc0 <sc_save+0x68>)
   2cd7a:	6803      	ldr	r3, [r0, #0]
   2cd7c:	075b      	lsls	r3, r3, #29
   2cd7e:	d008      	beq.n	2cd92 <sc_save+0x3a>
   2cd80:	4b10      	ldr	r3, [pc, #64]	; (2cdc4 <sc_save+0x6c>)
   2cd82:	9305      	str	r3, [sp, #20]
   2cd84:	aa04      	add	r2, sp, #16
   2cd86:	2302      	movs	r3, #2
   2cd88:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   2cd8c:	9304      	str	r3, [sp, #16]
   2cd8e:	f00d fc2c 	bl	3a5ea <z_log_msg_static_create.constprop.0>
}
   2cd92:	b006      	add	sp, #24
   2cd94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		cfg->id = id;
   2cd98:	f800 8b01 	strb.w	r8, [r0], #1
		bt_addr_le_copy(&cfg->peer, peer);
   2cd9c:	4639      	mov	r1, r7
   2cd9e:	f00d fbec 	bl	3a57a <bt_addr_le_copy>
	if (!(cfg->data.start || cfg->data.end)) {
   2cda2:	8922      	ldrh	r2, [r4, #8]
   2cda4:	8963      	ldrh	r3, [r4, #10]
   2cda6:	b91a      	cbnz	r2, 2cdb0 <sc_save+0x58>
   2cda8:	b92b      	cbnz	r3, 2cdb6 <sc_save+0x5e>
		cfg->data.start = start;
   2cdaa:	8126      	strh	r6, [r4, #8]
		*end = new_end;
   2cdac:	8165      	strh	r5, [r4, #10]
   2cdae:	e7f0      	b.n	2cd92 <sc_save+0x3a>
	if (new_start >= *start && new_end <= *end) {
   2cdb0:	4296      	cmp	r6, r2
		*start = new_start;
   2cdb2:	bf38      	it	cc
   2cdb4:	8126      	strhcc	r6, [r4, #8]
	if (new_start >= *start && new_end <= *end) {
   2cdb6:	429d      	cmp	r5, r3
   2cdb8:	d9eb      	bls.n	2cd92 <sc_save+0x3a>
   2cdba:	e7f7      	b.n	2cdac <sc_save+0x54>
   2cdbc:	0003dc18 	.word	0x0003dc18
   2cdc0:	20000a88 	.word	0x20000a88
   2cdc4:	0003e8da 	.word	0x0003e8da

0002cdc8 <cf_write>:
{
   2cdc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2cdcc:	b086      	sub	sp, #24
   2cdce:	461e      	mov	r6, r3
   2cdd0:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
	if (offset > sizeof(cfg->data)) {
   2cdd4:	2b01      	cmp	r3, #1
{
   2cdd6:	4607      	mov	r7, r0
   2cdd8:	4690      	mov	r8, r2
	if (offset > sizeof(cfg->data)) {
   2cdda:	d841      	bhi.n	2ce60 <cf_write+0x98>
	if (offset + len > sizeof(cfg->data)) {
   2cddc:	4433      	add	r3, r6
   2cdde:	2b01      	cmp	r3, #1
   2cde0:	4635      	mov	r5, r6
   2cde2:	dc40      	bgt.n	2ce66 <cf_write+0x9e>
	cfg = find_cf_cfg(conn);
   2cde4:	f7ff ff42 	bl	2cc6c <find_cf_cfg>
	if (!cfg) {
   2cde8:	4604      	mov	r4, r0
   2cdea:	b9c0      	cbnz	r0, 2ce1e <cf_write+0x56>
		cfg = find_cf_cfg(NULL);
   2cdec:	f7ff ff3e 	bl	2cc6c <find_cf_cfg>
	if (!cfg) {
   2cdf0:	4604      	mov	r4, r0
   2cdf2:	b9a0      	cbnz	r0, 2ce1e <cf_write+0x56>
		BT_WARN("No space to store Client Supported Features");
   2cdf4:	481f      	ldr	r0, [pc, #124]	; (2ce74 <cf_write+0xac>)
   2cdf6:	6803      	ldr	r3, [r0, #0]
   2cdf8:	f013 0f06 	tst.w	r3, #6
   2cdfc:	d105      	bne.n	2ce0a <cf_write+0x42>
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   2cdfe:	f06f 0510 	mvn.w	r5, #16
}
   2ce02:	4628      	mov	r0, r5
   2ce04:	b006      	add	sp, #24
   2ce06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		BT_WARN("No space to store Client Supported Features");
   2ce0a:	4b1b      	ldr	r3, [pc, #108]	; (2ce78 <cf_write+0xb0>)
   2ce0c:	9305      	str	r3, [sp, #20]
   2ce0e:	aa04      	add	r2, sp, #16
   2ce10:	2302      	movs	r3, #2
   2ce12:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   2ce16:	9304      	str	r3, [sp, #16]
   2ce18:	f00d fbe7 	bl	3a5ea <z_log_msg_static_create.constprop.0>
   2ce1c:	e7ef      	b.n	2cdfe <cf_write+0x36>
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   2ce1e:	b196      	cbz	r6, 2ce46 <cf_write+0x7e>
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   2ce20:	7a21      	ldrb	r1, [r4, #8]
		    !(value[i / 8] & BIT(i % 8))) {
   2ce22:	f898 2000 	ldrb.w	r2, [r8]
   2ce26:	2300      	movs	r3, #0
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   2ce28:	fa21 f003 	lsr.w	r0, r1, r3
   2ce2c:	07c6      	lsls	r6, r0, #31
   2ce2e:	d503      	bpl.n	2ce38 <cf_write+0x70>
		    !(value[i / 8] & BIT(i % 8))) {
   2ce30:	fa22 f003 	lsr.w	r0, r2, r3
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   2ce34:	07c0      	lsls	r0, r0, #31
   2ce36:	d519      	bpl.n	2ce6c <cf_write+0xa4>
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   2ce38:	3301      	adds	r3, #1
   2ce3a:	2b03      	cmp	r3, #3
   2ce3c:	d1f4      	bne.n	2ce28 <cf_write+0x60>
			cfg->data[i] |= value[i] & BIT_MASK(CF_NUM_BITS % 8);
   2ce3e:	f002 0207 	and.w	r2, r2, #7
   2ce42:	4311      	orrs	r1, r2
   2ce44:	7221      	strb	r1, [r4, #8]
	bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   2ce46:	f107 0190 	add.w	r1, r7, #144	; 0x90
   2ce4a:	1c60      	adds	r0, r4, #1
   2ce4c:	f00d fb95 	bl	3a57a <bt_addr_le_copy>
	cfg->id = conn->id;
   2ce50:	4620      	mov	r0, r4
   2ce52:	7a3b      	ldrb	r3, [r7, #8]
   2ce54:	f800 3b0c 	strb.w	r3, [r0], #12
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   2ce58:	2101      	movs	r1, #1
   2ce5a:	f00d fb7f 	bl	3a55c <atomic_or>
}
   2ce5e:	e7d0      	b.n	2ce02 <cf_write+0x3a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2ce60:	f06f 0506 	mvn.w	r5, #6
   2ce64:	e7cd      	b.n	2ce02 <cf_write+0x3a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   2ce66:	f06f 050c 	mvn.w	r5, #12
   2ce6a:	e7ca      	b.n	2ce02 <cf_write+0x3a>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
   2ce6c:	f06f 0512 	mvn.w	r5, #18
   2ce70:	e7c7      	b.n	2ce02 <cf_write+0x3a>
   2ce72:	bf00      	nop
   2ce74:	20000a88 	.word	0x20000a88
   2ce78:	0003e8f9 	.word	0x0003e8f9

0002ce7c <bt_gatt_attr_write_ccc>:
}

ssize_t bt_gatt_attr_write_ccc(struct bt_conn *conn,
			       const struct bt_gatt_attr *attr, const void *buf,
			       uint16_t len, uint16_t offset, uint8_t flags)
{
   2ce7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2ce80:	b087      	sub	sp, #28
   2ce82:	461e      	mov	r6, r3
   2ce84:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
	struct _bt_gatt_ccc *ccc = attr->user_data;
   2ce88:	f8d1 800c 	ldr.w	r8, [r1, #12]
{
   2ce8c:	4681      	mov	r9, r0
   2ce8e:	460f      	mov	r7, r1
	struct bt_gatt_ccc_cfg *cfg;
	bool value_changed;
	uint16_t value;

	if (offset) {
   2ce90:	2b00      	cmp	r3, #0
   2ce92:	d150      	bne.n	2cf36 <bt_gatt_attr_write_ccc+0xba>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
	}

	if (!len || len > sizeof(uint16_t)) {
   2ce94:	1e73      	subs	r3, r6, #1
   2ce96:	2b01      	cmp	r3, #1
   2ce98:	d850      	bhi.n	2cf3c <bt_gatt_attr_write_ccc+0xc0>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
	}

	if (len < sizeof(uint16_t)) {
   2ce9a:	2e01      	cmp	r6, #1
		value = *(uint8_t *)buf;
	} else {
		value = sys_get_le16(buf);
	}

	cfg = find_ccc_cfg(conn, ccc);
   2ce9c:	4641      	mov	r1, r8
		value = *(uint8_t *)buf;
   2ce9e:	7815      	ldrb	r5, [r2, #0]
   2cea0:	bf18      	it	ne
   2cea2:	8815      	ldrhne	r5, [r2, #0]
	cfg = find_ccc_cfg(conn, ccc);
   2cea4:	f7ff ff0a 	bl	2ccbc <find_ccc_cfg>
	if (!cfg) {
   2cea8:	4604      	mov	r4, r0
   2ceaa:	bb18      	cbnz	r0, 2cef4 <bt_gatt_attr_write_ccc+0x78>
		/* If there's no existing entry, but the new value is zero,
		 * we don't need to do anything, since a disabled CCC is
		 * behaviorally the same as no written CCC.
		 */
		if (!value) {
   2ceac:	b91d      	cbnz	r5, 2ceb6 <bt_gatt_attr_write_ccc+0x3a>
			return len;
   2ceae:	4630      	mov	r0, r6
	if (!value) {
		clear_ccc_cfg(cfg);
	}

	return len;
}
   2ceb0:	b007      	add	sp, #28
   2ceb2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		cfg = find_ccc_cfg(NULL, ccc);
   2ceb6:	4641      	mov	r1, r8
   2ceb8:	f7ff ff00 	bl	2ccbc <find_ccc_cfg>
		if (!cfg) {
   2cebc:	4604      	mov	r4, r0
   2cebe:	b988      	cbnz	r0, 2cee4 <bt_gatt_attr_write_ccc+0x68>
			BT_WARN("No space to store CCC cfg");
   2cec0:	4820      	ldr	r0, [pc, #128]	; (2cf44 <bt_gatt_attr_write_ccc+0xc8>)
   2cec2:	6803      	ldr	r3, [r0, #0]
   2cec4:	f013 0f06 	tst.w	r3, #6
   2cec8:	d102      	bne.n	2ced0 <bt_gatt_attr_write_ccc+0x54>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   2ceca:	f06f 0010 	mvn.w	r0, #16
   2cece:	e7ef      	b.n	2ceb0 <bt_gatt_attr_write_ccc+0x34>
			BT_WARN("No space to store CCC cfg");
   2ced0:	4b1d      	ldr	r3, [pc, #116]	; (2cf48 <bt_gatt_attr_write_ccc+0xcc>)
   2ced2:	9305      	str	r3, [sp, #20]
   2ced4:	aa04      	add	r2, sp, #16
   2ced6:	2302      	movs	r3, #2
   2ced8:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   2cedc:	9304      	str	r3, [sp, #16]
   2cede:	f00d fb84 	bl	3a5ea <z_log_msg_static_create.constprop.0>
   2cee2:	e7f2      	b.n	2ceca <bt_gatt_attr_write_ccc+0x4e>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   2cee4:	f109 0190 	add.w	r1, r9, #144	; 0x90
   2cee8:	3001      	adds	r0, #1
   2ceea:	f00d fb46 	bl	3a57a <bt_addr_le_copy>
		cfg->id = conn->id;
   2ceee:	f899 3008 	ldrb.w	r3, [r9, #8]
   2cef2:	7023      	strb	r3, [r4, #0]
	if (ccc->cfg_write) {
   2cef4:	f8d8 3010 	ldr.w	r3, [r8, #16]
   2cef8:	b98b      	cbnz	r3, 2cf1e <bt_gatt_attr_write_ccc+0xa2>
	cfg->value = value;
   2cefa:	8125      	strh	r5, [r4, #8]
	if (cfg->value != ccc->value) {
   2cefc:	f8b8 300a 	ldrh.w	r3, [r8, #10]
   2cf00:	42ab      	cmp	r3, r5
   2cf02:	d003      	beq.n	2cf0c <bt_gatt_attr_write_ccc+0x90>
		gatt_ccc_changed(attr, ccc);
   2cf04:	4641      	mov	r1, r8
   2cf06:	4638      	mov	r0, r7
   2cf08:	f00d faa6 	bl	3a458 <gatt_ccc_changed>
	if (!value) {
   2cf0c:	2d00      	cmp	r5, #0
   2cf0e:	d1ce      	bne.n	2ceae <bt_gatt_attr_write_ccc+0x32>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   2cf10:	490e      	ldr	r1, [pc, #56]	; (2cf4c <bt_gatt_attr_write_ccc+0xd0>)
   2cf12:	1c60      	adds	r0, r4, #1
   2cf14:	f00d fb31 	bl	3a57a <bt_addr_le_copy>
	cfg->id = 0U;
   2cf18:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
   2cf1a:	8125      	strh	r5, [r4, #8]
}
   2cf1c:	e7c7      	b.n	2ceae <bt_gatt_attr_write_ccc+0x32>
		ssize_t write = ccc->cfg_write(conn, attr, value);
   2cf1e:	462a      	mov	r2, r5
   2cf20:	4639      	mov	r1, r7
   2cf22:	4648      	mov	r0, r9
   2cf24:	4798      	blx	r3
		if (write < 0) {
   2cf26:	2800      	cmp	r0, #0
   2cf28:	dbc2      	blt.n	2ceb0 <bt_gatt_attr_write_ccc+0x34>
		if (write != sizeof(value) && write != 1) {
   2cf2a:	3801      	subs	r0, #1
   2cf2c:	2801      	cmp	r0, #1
   2cf2e:	d9e4      	bls.n	2cefa <bt_gatt_attr_write_ccc+0x7e>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
   2cf30:	f06f 000d 	mvn.w	r0, #13
   2cf34:	e7bc      	b.n	2ceb0 <bt_gatt_attr_write_ccc+0x34>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2cf36:	f06f 0006 	mvn.w	r0, #6
   2cf3a:	e7b9      	b.n	2ceb0 <bt_gatt_attr_write_ccc+0x34>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   2cf3c:	f06f 000c 	mvn.w	r0, #12
   2cf40:	e7b6      	b.n	2ceb0 <bt_gatt_attr_write_ccc+0x34>
   2cf42:	bf00      	nop
   2cf44:	20000a88 	.word	0x20000a88
   2cf48:	0003e925 	.word	0x0003e925
   2cf4c:	0003dc18 	.word	0x0003dc18

0002cf50 <clear_cf_cfg>:
{
   2cf50:	b510      	push	{r4, lr}
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   2cf52:	490c      	ldr	r1, [pc, #48]	; (2cf84 <clear_cf_cfg+0x34>)
{
   2cf54:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   2cf56:	3001      	adds	r0, #1
   2cf58:	f00d fb0f 	bl	3a57a <bt_addr_le_copy>
	memset(cfg->data, 0, sizeof(cfg->data));
   2cf5c:	f104 0008 	add.w	r0, r4, #8
   2cf60:	2201      	movs	r2, #1
   2cf62:	2100      	movs	r1, #0
   2cf64:	f00c fa2f 	bl	393c6 <memset>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   2cf68:	f3bf 8f5b 	dmb	ish
   2cf6c:	340c      	adds	r4, #12
   2cf6e:	2300      	movs	r3, #0
   2cf70:	e854 2f00 	ldrex	r2, [r4]
   2cf74:	e844 3100 	strex	r1, r3, [r4]
   2cf78:	2900      	cmp	r1, #0
   2cf7a:	d1f9      	bne.n	2cf70 <clear_cf_cfg+0x20>
   2cf7c:	f3bf 8f5b 	dmb	ish
}
   2cf80:	bd10      	pop	{r4, pc}
   2cf82:	bf00      	nop
   2cf84:	0003dc18 	.word	0x0003dc18

0002cf88 <read_ppcp>:
{
   2cf88:	b513      	push	{r0, r1, r4, lr}
   2cf8a:	f8bd 1010 	ldrh.w	r1, [sp, #16]
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_LATENCY);
   2cf8e:	4c0b      	ldr	r4, [pc, #44]	; (2cfbc <read_ppcp+0x34>)
{
   2cf90:	4610      	mov	r0, r2
	if (offset > value_len) {
   2cf92:	2908      	cmp	r1, #8
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_LATENCY);
   2cf94:	f44f 1228 	mov.w	r2, #2752512	; 0x2a0000
   2cf98:	e9cd 4200 	strd	r4, r2, [sp]
	if (offset > value_len) {
   2cf9c:	d80b      	bhi.n	2cfb6 <read_ppcp+0x2e>
	len = MIN(buf_len, value_len - offset);
   2cf9e:	f1c1 0408 	rsb	r4, r1, #8
   2cfa2:	429c      	cmp	r4, r3
   2cfa4:	bfa8      	it	ge
   2cfa6:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   2cfa8:	4622      	mov	r2, r4
   2cfaa:	4469      	add	r1, sp
   2cfac:	f00c fa00 	bl	393b0 <memcpy>
}
   2cfb0:	4620      	mov	r0, r4
   2cfb2:	b002      	add	sp, #8
   2cfb4:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2cfb6:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &ppcp,
   2cfba:	e7f9      	b.n	2cfb0 <read_ppcp+0x28>
   2cfbc:	00280018 	.word	0x00280018

0002cfc0 <disconnected_cb>:
	return BT_GATT_ITER_CONTINUE;
}

static uint8_t disconnected_cb(const struct bt_gatt_attr *attr, uint16_t handle,
			       void *user_data)
{
   2cfc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct _bt_gatt_ccc *ccc;
	bool value_used;
	size_t i;

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
   2cfc4:	4b23      	ldr	r3, [pc, #140]	; (2d054 <disconnected_cb+0x94>)
{
   2cfc6:	4615      	mov	r5, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   2cfc8:	6882      	ldr	r2, [r0, #8]
   2cfca:	429a      	cmp	r2, r3
{
   2cfcc:	4607      	mov	r7, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   2cfce:	d102      	bne.n	2cfd6 <disconnected_cb+0x16>
		return BT_GATT_ITER_CONTINUE;
	}

	ccc = attr->user_data;
   2cfd0:	68c4      	ldr	r4, [r0, #12]

	/* If already disabled skip */
	if (!ccc->value) {
   2cfd2:	8963      	ldrh	r3, [r4, #10]
   2cfd4:	bb33      	cbnz	r3, 2d024 <disconnected_cb+0x64>

		BT_DBG("ccc %p reseted", ccc);
	}

	return BT_GATT_ITER_CONTINUE;
}
   2cfd6:	2001      	movs	r0, #1
   2cfd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				bt_conn_unref(tmp);
   2cfdc:	f7fd fe96 	bl	2ad0c <bt_conn_unref>
		if (ccc->cfg_changed) {
   2cfe0:	68e3      	ldr	r3, [r4, #12]
		ccc->value = 0U;
   2cfe2:	2100      	movs	r1, #0
   2cfe4:	8161      	strh	r1, [r4, #10]
		if (ccc->cfg_changed) {
   2cfe6:	2b00      	cmp	r3, #0
   2cfe8:	d0f5      	beq.n	2cfd6 <disconnected_cb+0x16>
			ccc->cfg_changed(attr, ccc->value);
   2cfea:	4638      	mov	r0, r7
   2cfec:	4798      	blx	r3
   2cfee:	e7f2      	b.n	2cfd6 <disconnected_cb+0x16>
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   2cff0:	f105 0890 	add.w	r8, r5, #144	; 0x90
   2cff4:	7a28      	ldrb	r0, [r5, #8]
   2cff6:	4641      	mov	r1, r8
   2cff8:	f00c fb21 	bl	3963e <bt_addr_le_is_bonded>
   2cffc:	b968      	cbnz	r0, 2d01a <disconnected_cb+0x5a>
				if (ccc == &sc_ccc) {
   2cffe:	4b16      	ldr	r3, [pc, #88]	; (2d058 <disconnected_cb+0x98>)
   2d000:	429c      	cmp	r4, r3
   2d002:	d102      	bne.n	2d00a <disconnected_cb+0x4a>
					sc_clear(conn);
   2d004:	4628      	mov	r0, r5
   2d006:	f00d faf6 	bl	3a5f6 <sc_clear>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   2d00a:	4914      	ldr	r1, [pc, #80]	; (2d05c <disconnected_cb+0x9c>)
   2d00c:	4630      	mov	r0, r6
   2d00e:	f00d fab4 	bl	3a57a <bt_addr_le_copy>
	cfg->id = 0U;
   2d012:	2300      	movs	r3, #0
   2d014:	7023      	strb	r3, [r4, #0]
	cfg->value = 0U;
   2d016:	8123      	strh	r3, [r4, #8]
}
   2d018:	e7e2      	b.n	2cfe0 <disconnected_cb+0x20>
				bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   2d01a:	4641      	mov	r1, r8
   2d01c:	4630      	mov	r0, r6
   2d01e:	f00d faac 	bl	3a57a <bt_addr_le_copy>
   2d022:	e7dd      	b.n	2cfe0 <disconnected_cb+0x20>
		if (!cfg->value) {
   2d024:	8923      	ldrh	r3, [r4, #8]
   2d026:	2b00      	cmp	r3, #0
   2d028:	d0da      	beq.n	2cfe0 <disconnected_cb+0x20>
		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   2d02a:	4626      	mov	r6, r4
   2d02c:	4628      	mov	r0, r5
   2d02e:	f816 1b01 	ldrb.w	r1, [r6], #1
   2d032:	4632      	mov	r2, r6
   2d034:	f00c fd27 	bl	39a86 <bt_conn_is_peer_addr_le>
   2d038:	2800      	cmp	r0, #0
   2d03a:	d1d9      	bne.n	2cff0 <disconnected_cb+0x30>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   2d03c:	7820      	ldrb	r0, [r4, #0]
   2d03e:	4631      	mov	r1, r6
   2d040:	f7fe f8c4 	bl	2b1cc <bt_conn_lookup_addr_le>
			if (tmp) {
   2d044:	2800      	cmp	r0, #0
   2d046:	d0cb      	beq.n	2cfe0 <disconnected_cb+0x20>
				if (tmp->state == BT_CONN_CONNECTED) {
   2d048:	7a83      	ldrb	r3, [r0, #10]
   2d04a:	2b07      	cmp	r3, #7
   2d04c:	d1c6      	bne.n	2cfdc <disconnected_cb+0x1c>
				bt_conn_unref(tmp);
   2d04e:	f7fd fe5d 	bl	2ad0c <bt_conn_unref>
	if (!value_used) {
   2d052:	e7c0      	b.n	2cfd6 <disconnected_cb+0x16>
   2d054:	0002ce7d 	.word	0x0002ce7d
   2d058:	2000070c 	.word	0x2000070c
   2d05c:	0003dc18 	.word	0x0003dc18

0002d060 <sc_indicate_rsp>:
{
   2d060:	b510      	push	{r4, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2d062:	f06f 0102 	mvn.w	r1, #2
   2d066:	4604      	mov	r4, r0
   2d068:	480f      	ldr	r0, [pc, #60]	; (2d0a8 <sc_indicate_rsp+0x48>)
   2d06a:	f00d fa89 	bl	3a580 <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   2d06e:	480e      	ldr	r0, [pc, #56]	; (2d0a8 <sc_indicate_rsp+0x48>)
   2d070:	f00d fa6e 	bl	3a550 <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   2d074:	07c2      	lsls	r2, r0, #31
   2d076:	d504      	bpl.n	2d082 <sc_indicate_rsp+0x22>
	k_work_reschedule(&gatt_sc.work, timeout);
   2d078:	480c      	ldr	r0, [pc, #48]	; (2d0ac <sc_indicate_rsp+0x4c>)
   2d07a:	2200      	movs	r2, #0
   2d07c:	2300      	movs	r3, #0
   2d07e:	f009 f871 	bl	36164 <k_work_reschedule>
	if (bt_att_fixed_chan_only(conn)) {
   2d082:	4620      	mov	r0, r4
   2d084:	f00d f9ba 	bl	3a3fc <bt_att_fixed_chan_only>
   2d088:	b160      	cbz	r0, 2d0a4 <sc_indicate_rsp+0x44>
		cfg = find_cf_cfg(conn);
   2d08a:	4620      	mov	r0, r4
   2d08c:	f7ff fdee 	bl	2cc6c <find_cf_cfg>
		if (cfg && CF_ROBUST_CACHING(cfg)) {
   2d090:	b140      	cbz	r0, 2d0a4 <sc_indicate_rsp+0x44>
   2d092:	7a03      	ldrb	r3, [r0, #8]
   2d094:	07db      	lsls	r3, r3, #31
   2d096:	d505      	bpl.n	2d0a4 <sc_indicate_rsp+0x44>
}
   2d098:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   2d09c:	2101      	movs	r1, #1
   2d09e:	300c      	adds	r0, #12
   2d0a0:	f00d ba5c 	b.w	3a55c <atomic_or>
   2d0a4:	bd10      	pop	{r4, pc}
   2d0a6:	bf00      	nop
   2d0a8:	20002900 	.word	0x20002900
   2d0ac:	200028d0 	.word	0x200028d0

0002d0b0 <bt_gatt_init>:
{
   2d0b0:	b508      	push	{r3, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   2d0b2:	4b13      	ldr	r3, [pc, #76]	; (2d100 <bt_gatt_init+0x50>)
   2d0b4:	f3bf 8f5b 	dmb	ish
   2d0b8:	2201      	movs	r2, #1
   2d0ba:	e853 1f00 	ldrex	r1, [r3]
   2d0be:	2900      	cmp	r1, #0
   2d0c0:	d103      	bne.n	2d0ca <bt_gatt_init+0x1a>
   2d0c2:	e843 2000 	strex	r0, r2, [r3]
   2d0c6:	2800      	cmp	r0, #0
   2d0c8:	d1f7      	bne.n	2d0ba <bt_gatt_init+0xa>
   2d0ca:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&init, 0, 1)) {
   2d0ce:	d115      	bne.n	2d0fc <bt_gatt_init+0x4c>
	bt_gatt_service_init();
   2d0d0:	f7ff fe08 	bl	2cce4 <bt_gatt_service_init>
	list->head = NULL;
   2d0d4:	4b0b      	ldr	r3, [pc, #44]	; (2d104 <bt_gatt_init+0x54>)
	k_work_init_delayable(&db_hash.work, db_hash_process);
   2d0d6:	490c      	ldr	r1, [pc, #48]	; (2d108 <bt_gatt_init+0x58>)
   2d0d8:	480c      	ldr	r0, [pc, #48]	; (2d10c <bt_gatt_init+0x5c>)
   2d0da:	2200      	movs	r2, #0
	list->tail = NULL;
   2d0dc:	e9c3 2200 	strd	r2, r2, [r3]
   2d0e0:	f008 ff56 	bl	35f90 <k_work_init_delayable>
		bt_long_wq_schedule(&db_hash.work, DB_HASH_TIMEOUT);
   2d0e4:	2300      	movs	r3, #0
   2d0e6:	4809      	ldr	r0, [pc, #36]	; (2d10c <bt_gatt_init+0x5c>)
   2d0e8:	f44f 72a4 	mov.w	r2, #328	; 0x148
   2d0ec:	f7fa fe50 	bl	27d90 <bt_long_wq_schedule>
}
   2d0f0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	k_work_init_delayable(&gatt_sc.work, sc_process);
   2d0f4:	4906      	ldr	r1, [pc, #24]	; (2d110 <bt_gatt_init+0x60>)
   2d0f6:	4807      	ldr	r0, [pc, #28]	; (2d114 <bt_gatt_init+0x64>)
   2d0f8:	f008 bf4a 	b.w	35f90 <k_work_init_delayable>
}
   2d0fc:	bd08      	pop	{r3, pc}
   2d0fe:	bf00      	nop
   2d100:	20002f6c 	.word	0x20002f6c
   2d104:	20002f78 	.word	0x20002f78
   2d108:	0003a8ad 	.word	0x0003a8ad
   2d10c:	20002858 	.word	0x20002858
   2d110:	0002d789 	.word	0x0002d789
   2d114:	200028d0 	.word	0x200028d0

0002d118 <bt_gatt_attr_get_handle>:
{
   2d118:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!attr) {
   2d11c:	4603      	mov	r3, r0
   2d11e:	b378      	cbz	r0, 2d180 <bt_gatt_attr_get_handle+0x68>
	if (attr->handle) {
   2d120:	8a00      	ldrh	r0, [r0, #16]
   2d122:	bb68      	cbnz	r0, 2d180 <bt_gatt_attr_get_handle+0x68>
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   2d124:	4918      	ldr	r1, [pc, #96]	; (2d188 <bt_gatt_attr_get_handle+0x70>)
   2d126:	f8df e064 	ldr.w	lr, [pc, #100]	; 2d18c <bt_gatt_attr_get_handle+0x74>
	uint16_t handle = 1;
   2d12a:	2401      	movs	r4, #1
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   2d12c:	f04f 0c14 	mov.w	ip, #20
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   2d130:	4571      	cmp	r1, lr
   2d132:	d924      	bls.n	2d17e <bt_gatt_attr_get_handle+0x66>
   2d134:	4916      	ldr	r1, [pc, #88]	; (2d190 <bt_gatt_attr_get_handle+0x78>)
   2d136:	4817      	ldr	r0, [pc, #92]	; (2d194 <bt_gatt_attr_get_handle+0x7c>)
   2d138:	f240 6265 	movw	r2, #1637	; 0x665
   2d13c:	f00b fce9 	bl	38b12 <assert_print>
   2d140:	4813      	ldr	r0, [pc, #76]	; (2d190 <bt_gatt_attr_get_handle+0x78>)
   2d142:	f240 6165 	movw	r1, #1637	; 0x665
   2d146:	f00b fcdd 	bl	38b04 <assert_post_action>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   2d14a:	e9d1 7600 	ldrd	r7, r6, [r1]
		if ((attr < &static_svc->attrs[0]) ||
   2d14e:	42bb      	cmp	r3, r7
   2d150:	d304      	bcc.n	2d15c <bt_gatt_attr_get_handle+0x44>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   2d152:	fb0c 7206 	mla	r2, ip, r6, r7
   2d156:	3a14      	subs	r2, #20
		if ((attr < &static_svc->attrs[0]) ||
   2d158:	4293      	cmp	r3, r2
   2d15a:	d90e      	bls.n	2d17a <bt_gatt_attr_get_handle+0x62>
			handle += static_svc->attr_count;
   2d15c:	4434      	add	r4, r6
   2d15e:	b2a2      	uxth	r2, r4
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   2d160:	3108      	adds	r1, #8
   2d162:	4614      	mov	r4, r2
   2d164:	e7e4      	b.n	2d130 <bt_gatt_attr_get_handle+0x18>
			if (attr == &static_svc->attrs[i]) {
   2d166:	fb0c 7805 	mla	r8, ip, r5, r7
   2d16a:	4543      	cmp	r3, r8
   2d16c:	d00a      	beq.n	2d184 <bt_gatt_attr_get_handle+0x6c>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
   2d16e:	3501      	adds	r5, #1
   2d170:	1962      	adds	r2, r4, r5
   2d172:	42b5      	cmp	r5, r6
   2d174:	b292      	uxth	r2, r2
   2d176:	d1f6      	bne.n	2d166 <bt_gatt_attr_get_handle+0x4e>
   2d178:	e7f2      	b.n	2d160 <bt_gatt_attr_get_handle+0x48>
   2d17a:	2500      	movs	r5, #0
   2d17c:	e7f8      	b.n	2d170 <bt_gatt_attr_get_handle+0x58>
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   2d17e:	d3e4      	bcc.n	2d14a <bt_gatt_attr_get_handle+0x32>
}
   2d180:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2d184:	4610      	mov	r0, r2
   2d186:	e7fb      	b.n	2d180 <bt_gatt_attr_get_handle+0x68>
   2d188:	0003c47c 	.word	0x0003c47c
   2d18c:	0003c494 	.word	0x0003c494
   2d190:	0003e8aa 	.word	0x0003e8aa
   2d194:	0003d1d7 	.word	0x0003d1d7

0002d198 <bt_gatt_foreach_attr_type>:
{
   2d198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2d19c:	b089      	sub	sp, #36	; 0x24
   2d19e:	4699      	mov	r9, r3
	if (!num_matches) {
   2d1a0:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
{
   2d1a4:	4604      	mov	r4, r0
   2d1a6:	460f      	mov	r7, r1
   2d1a8:	4690      	mov	r8, r2
	if (!num_matches) {
   2d1aa:	b91b      	cbnz	r3, 2d1b4 <bt_gatt_foreach_attr_type+0x1c>
		num_matches = UINT16_MAX;
   2d1ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
   2d1b0:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
	if (start_handle <= last_static_handle) {
   2d1b4:	4b37      	ldr	r3, [pc, #220]	; (2d294 <bt_gatt_foreach_attr_type+0xfc>)
   2d1b6:	881b      	ldrh	r3, [r3, #0]
   2d1b8:	42a3      	cmp	r3, r4
   2d1ba:	d226      	bcs.n	2d20a <bt_gatt_foreach_attr_type+0x72>
	foreach_attr_type_dyndb(start_handle, end_handle, uuid, attr_data,
   2d1bc:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
   2d1c0:	f8ad 301e 	strh.w	r3, [sp, #30]
	return list->head;
   2d1c4:	4b34      	ldr	r3, [pc, #208]	; (2d298 <bt_gatt_foreach_attr_type+0x100>)
   2d1c6:	681d      	ldr	r5, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&db, svc, node) {
   2d1c8:	2d00      	cmp	r5, #0
   2d1ca:	d13a      	bne.n	2d242 <bt_gatt_foreach_attr_type+0xaa>
}
   2d1cc:	b009      	add	sp, #36	; 0x24
   2d1ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (gatt_foreach_iter(&static_svc->attrs[i],
   2d1d2:	9b14      	ldr	r3, [sp, #80]	; 0x50
   2d1d4:	6828      	ldr	r0, [r5, #0]
   2d1d6:	9304      	str	r3, [sp, #16]
   2d1d8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   2d1da:	9303      	str	r3, [sp, #12]
   2d1dc:	ab12      	add	r3, sp, #72	; 0x48
   2d1de:	e9cd 9301 	strd	r9, r3, [sp, #4]
   2d1e2:	f8cd 8000 	str.w	r8, [sp]
   2d1e6:	463b      	mov	r3, r7
   2d1e8:	4622      	mov	r2, r4
   2d1ea:	fb0b 0006 	mla	r0, fp, r6, r0
   2d1ee:	f00d f9d6 	bl	3a59e <gatt_foreach_iter>
   2d1f2:	2800      	cmp	r0, #0
   2d1f4:	d0ea      	beq.n	2d1cc <bt_gatt_foreach_attr_type+0x34>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   2d1f6:	3601      	adds	r6, #1
   2d1f8:	686b      	ldr	r3, [r5, #4]
   2d1fa:	eb0a 0106 	add.w	r1, sl, r6
   2d1fe:	42b3      	cmp	r3, r6
   2d200:	b289      	uxth	r1, r1
   2d202:	d8e6      	bhi.n	2d1d2 <bt_gatt_foreach_attr_type+0x3a>
   2d204:	e00d      	b.n	2d222 <bt_gatt_foreach_attr_type+0x8a>
   2d206:	2600      	movs	r6, #0
   2d208:	e7f6      	b.n	2d1f8 <bt_gatt_foreach_attr_type+0x60>
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   2d20a:	4d24      	ldr	r5, [pc, #144]	; (2d29c <bt_gatt_foreach_attr_type+0x104>)
		uint16_t handle = 1;
   2d20c:	f04f 0a01 	mov.w	sl, #1
				if (gatt_foreach_iter(&static_svc->attrs[i],
   2d210:	f04f 0b14 	mov.w	fp, #20
   2d214:	e007      	b.n	2d226 <bt_gatt_foreach_attr_type+0x8e>
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   2d216:	d2d1      	bcs.n	2d1bc <bt_gatt_foreach_attr_type+0x24>
			if (handle + static_svc->attr_count < start_handle) {
   2d218:	6869      	ldr	r1, [r5, #4]
   2d21a:	4451      	add	r1, sl
   2d21c:	42a1      	cmp	r1, r4
   2d21e:	d2f2      	bcs.n	2d206 <bt_gatt_foreach_attr_type+0x6e>
				handle += static_svc->attr_count;
   2d220:	b289      	uxth	r1, r1
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   2d222:	3508      	adds	r5, #8
   2d224:	468a      	mov	sl, r1
   2d226:	4b1e      	ldr	r3, [pc, #120]	; (2d2a0 <bt_gatt_foreach_attr_type+0x108>)
   2d228:	429d      	cmp	r5, r3
   2d22a:	d9f4      	bls.n	2d216 <bt_gatt_foreach_attr_type+0x7e>
   2d22c:	491d      	ldr	r1, [pc, #116]	; (2d2a4 <bt_gatt_foreach_attr_type+0x10c>)
   2d22e:	481e      	ldr	r0, [pc, #120]	; (2d2a8 <bt_gatt_foreach_attr_type+0x110>)
   2d230:	f240 7229 	movw	r2, #1833	; 0x729
   2d234:	f00b fc6d 	bl	38b12 <assert_print>
   2d238:	481a      	ldr	r0, [pc, #104]	; (2d2a4 <bt_gatt_foreach_attr_type+0x10c>)
   2d23a:	f240 7129 	movw	r1, #1833	; 0x729
   2d23e:	f00b fc61 	bl	38b04 <assert_post_action>
	SYS_SLIST_FOR_EACH_CONTAINER(&db, svc, node) {
   2d242:	3d08      	subs	r5, #8
			struct bt_gatt_attr *attr = &svc->attrs[i];
   2d244:	f04f 0a14 	mov.w	sl, #20
			if (gatt_foreach_iter(attr, attr->handle,
   2d248:	f10d 0b1e 	add.w	fp, sp, #30
	return node->next;
   2d24c:	68ae      	ldr	r6, [r5, #8]
		next = SYS_SLIST_PEEK_NEXT_CONTAINER(svc, node);
   2d24e:	b9be      	cbnz	r6, 2d280 <bt_gatt_foreach_attr_type+0xe8>
		for (i = 0; i < svc->attr_count; i++) {
   2d250:	686b      	ldr	r3, [r5, #4]
   2d252:	429e      	cmp	r6, r3
   2d254:	d219      	bcs.n	2d28a <bt_gatt_foreach_attr_type+0xf2>
			struct bt_gatt_attr *attr = &svc->attrs[i];
   2d256:	6828      	ldr	r0, [r5, #0]
			if (gatt_foreach_iter(attr, attr->handle,
   2d258:	9b14      	ldr	r3, [sp, #80]	; 0x50
			struct bt_gatt_attr *attr = &svc->attrs[i];
   2d25a:	fb0a 0006 	mla	r0, sl, r6, r0
			if (gatt_foreach_iter(attr, attr->handle,
   2d25e:	4622      	mov	r2, r4
   2d260:	8a01      	ldrh	r1, [r0, #16]
   2d262:	9304      	str	r3, [sp, #16]
   2d264:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   2d266:	e9cd 8900 	strd	r8, r9, [sp]
   2d26a:	e9cd b302 	strd	fp, r3, [sp, #8]
   2d26e:	463b      	mov	r3, r7
   2d270:	f00d f995 	bl	3a59e <gatt_foreach_iter>
   2d274:	2800      	cmp	r0, #0
   2d276:	d0a9      	beq.n	2d1cc <bt_gatt_foreach_attr_type+0x34>
		for (i = 0; i < svc->attr_count; i++) {
   2d278:	3601      	adds	r6, #1
   2d27a:	e7e9      	b.n	2d250 <bt_gatt_foreach_attr_type+0xb8>
   2d27c:	2600      	movs	r6, #0
   2d27e:	e7e7      	b.n	2d250 <bt_gatt_foreach_attr_type+0xb8>
			if (next->attrs[0].handle <= start_handle) {
   2d280:	f856 3c08 	ldr.w	r3, [r6, #-8]
   2d284:	8a1b      	ldrh	r3, [r3, #16]
   2d286:	42a3      	cmp	r3, r4
   2d288:	d8f8      	bhi.n	2d27c <bt_gatt_foreach_attr_type+0xe4>
   2d28a:	68ad      	ldr	r5, [r5, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&db, svc, node) {
   2d28c:	2d00      	cmp	r5, #0
   2d28e:	d09d      	beq.n	2d1cc <bt_gatt_foreach_attr_type+0x34>
   2d290:	3d08      	subs	r5, #8
   2d292:	e7db      	b.n	2d24c <bt_gatt_foreach_attr_type+0xb4>
   2d294:	200033ee 	.word	0x200033ee
   2d298:	20002f70 	.word	0x20002f70
   2d29c:	0003c47c 	.word	0x0003c47c
   2d2a0:	0003c494 	.word	0x0003c494
   2d2a4:	0003e8aa 	.word	0x0003e8aa
   2d2a8:	0003d1d7 	.word	0x0003d1d7

0002d2ac <db_hash_gen.constprop.0>:
static void db_hash_gen(bool store)
   2d2ac:	b510      	push	{r4, lr}
   2d2ae:	b0ce      	sub	sp, #312	; 0x138
	uint8_t key[16] = {};
   2d2b0:	2400      	movs	r4, #0
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   2d2b2:	aa22      	add	r2, sp, #136	; 0x88
   2d2b4:	4669      	mov	r1, sp
   2d2b6:	a80a      	add	r0, sp, #40	; 0x28
	uint8_t key[16] = {};
   2d2b8:	e9cd 4400 	strd	r4, r4, [sp]
   2d2bc:	e9cd 4402 	strd	r4, r4, [sp, #8]
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   2d2c0:	f00b ff4d 	bl	3915e <tc_cmac_setup>
   2d2c4:	b970      	cbnz	r0, 2d2e4 <db_hash_gen.constprop.0+0x38>
		BT_ERR("Unable to setup AES CMAC");
   2d2c6:	4819      	ldr	r0, [pc, #100]	; (2d32c <db_hash_gen.constprop.0+0x80>)
   2d2c8:	6803      	ldr	r3, [r0, #0]
   2d2ca:	075a      	lsls	r2, r3, #29
   2d2cc:	d008      	beq.n	2d2e0 <db_hash_gen.constprop.0+0x34>
   2d2ce:	4b18      	ldr	r3, [pc, #96]	; (2d330 <db_hash_gen.constprop.0+0x84>)
		BT_ERR("Unable to calculate hash");
   2d2d0:	9309      	str	r3, [sp, #36]	; 0x24
   2d2d2:	aa08      	add	r2, sp, #32
   2d2d4:	2302      	movs	r3, #2
   2d2d6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   2d2da:	9308      	str	r3, [sp, #32]
   2d2dc:	f00d f985 	bl	3a5ea <z_log_msg_static_create.constprop.0>
}
   2d2e0:	b04e      	add	sp, #312	; 0x138
   2d2e2:	bd10      	pop	{r4, pc}
	bt_gatt_foreach_attr(0x0001, 0xffff, gen_hash_m, &state);
   2d2e4:	f64f 71ff 	movw	r1, #65535	; 0xffff
   2d2e8:	2001      	movs	r0, #1
   2d2ea:	4a12      	ldr	r2, [pc, #72]	; (2d334 <db_hash_gen.constprop.0+0x88>)
   2d2ec:	ab0a      	add	r3, sp, #40	; 0x28
   2d2ee:	f00d fad2 	bl	3a896 <bt_gatt_foreach_attr>
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
   2d2f2:	4811      	ldr	r0, [pc, #68]	; (2d338 <db_hash_gen.constprop.0+0x8c>)
   2d2f4:	a90a      	add	r1, sp, #40	; 0x28
   2d2f6:	f00b ffc7 	bl	39288 <tc_cmac_final>
   2d2fa:	b928      	cbnz	r0, 2d308 <db_hash_gen.constprop.0+0x5c>
		BT_ERR("Unable to calculate hash");
   2d2fc:	480b      	ldr	r0, [pc, #44]	; (2d32c <db_hash_gen.constprop.0+0x80>)
   2d2fe:	6803      	ldr	r3, [r0, #0]
   2d300:	075b      	lsls	r3, r3, #29
   2d302:	d0ed      	beq.n	2d2e0 <db_hash_gen.constprop.0+0x34>
   2d304:	4b0d      	ldr	r3, [pc, #52]	; (2d33c <db_hash_gen.constprop.0+0x90>)
   2d306:	e7e3      	b.n	2d2d0 <db_hash_gen.constprop.0+0x24>
   2d308:	4b0b      	ldr	r3, [pc, #44]	; (2d338 <db_hash_gen.constprop.0+0x8c>)
   2d30a:	f103 0210 	add.w	r2, r3, #16
 */
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
   2d30e:	3401      	adds	r4, #1
		uint8_t tmp = ((uint8_t *)buf)[i];
   2d310:	7819      	ldrb	r1, [r3, #0]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   2d312:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
   2d316:	f803 0b01 	strb.w	r0, [r3], #1
	for (i = 0; i < (length/2); i++) {
   2d31a:	2c08      	cmp	r4, #8
		((uint8_t *)buf)[length - 1 - i] = tmp;
   2d31c:	7011      	strb	r1, [r2, #0]
	for (i = 0; i < (length/2); i++) {
   2d31e:	d1f6      	bne.n	2d30e <db_hash_gen.constprop.0+0x62>
   2d320:	2104      	movs	r1, #4
   2d322:	4807      	ldr	r0, [pc, #28]	; (2d340 <db_hash_gen.constprop.0+0x94>)
   2d324:	f00d f91a 	bl	3a55c <atomic_or>
   2d328:	e7da      	b.n	2d2e0 <db_hash_gen.constprop.0+0x34>
   2d32a:	bf00      	nop
   2d32c:	20000a88 	.word	0x20000a88
   2d330:	0003e93f 	.word	0x0003e93f
   2d334:	0003a49b 	.word	0x0003a49b
   2d338:	20002848 	.word	0x20002848
   2d33c:	0003e958 	.word	0x0003e958
   2d340:	20002900 	.word	0x20002900

0002d344 <db_hash_read>:
{
   2d344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   2d346:	491a      	ldr	r1, [pc, #104]	; (2d3b0 <db_hash_read+0x6c>)
{
   2d348:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   2d34c:	4604      	mov	r4, r0
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   2d34e:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
{
   2d352:	4615      	mov	r5, r2
   2d354:	461f      	mov	r7, r3
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   2d356:	f008 ff51 	bl	361fc <k_work_cancel_delayable_sync>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   2d35a:	4816      	ldr	r0, [pc, #88]	; (2d3b4 <db_hash_read+0x70>)
   2d35c:	f00d f8f8 	bl	3a550 <atomic_get>
	if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
   2d360:	0741      	lsls	r1, r0, #29
   2d362:	d401      	bmi.n	2d368 <db_hash_read+0x24>
		db_hash_gen(true);
   2d364:	f7ff ffa2 	bl	2d2ac <db_hash_gen.constprop.0>
	cfg = find_cf_cfg(conn);
   2d368:	4620      	mov	r0, r4
   2d36a:	f7ff fc7f 	bl	2cc6c <find_cf_cfg>
	if (cfg &&
   2d36e:	b168      	cbz	r0, 2d38c <db_hash_read+0x48>
   2d370:	7a03      	ldrb	r3, [r0, #8]
   2d372:	07da      	lsls	r2, r3, #31
   2d374:	d50a      	bpl.n	2d38c <db_hash_read+0x48>
	    !atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   2d376:	f100 040c 	add.w	r4, r0, #12
   2d37a:	4620      	mov	r0, r4
   2d37c:	f00d f8e8 	bl	3a550 <atomic_get>
	    CF_ROBUST_CACHING(cfg) &&
   2d380:	07c3      	lsls	r3, r0, #31
   2d382:	d403      	bmi.n	2d38c <db_hash_read+0x48>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   2d384:	2102      	movs	r1, #2
   2d386:	4620      	mov	r0, r4
   2d388:	f00d f8e8 	bl	3a55c <atomic_or>
	if (offset > value_len) {
   2d38c:	2e10      	cmp	r6, #16
   2d38e:	d80c      	bhi.n	2d3aa <db_hash_read+0x66>
	len = MIN(buf_len, value_len - offset);
   2d390:	f1c6 0410 	rsb	r4, r6, #16
	memcpy(buf, (uint8_t *)value + offset, len);
   2d394:	4908      	ldr	r1, [pc, #32]	; (2d3b8 <db_hash_read+0x74>)
	len = MIN(buf_len, value_len - offset);
   2d396:	42bc      	cmp	r4, r7
   2d398:	bfa8      	it	ge
   2d39a:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   2d39c:	4622      	mov	r2, r4
   2d39e:	4431      	add	r1, r6
   2d3a0:	4628      	mov	r0, r5
   2d3a2:	f00c f805 	bl	393b0 <memcpy>
}
   2d3a6:	4620      	mov	r0, r4
   2d3a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2d3aa:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash.hash,
   2d3ae:	e7fa      	b.n	2d3a6 <db_hash_read+0x62>
   2d3b0:	20002888 	.word	0x20002888
   2d3b4:	20002900 	.word	0x20002900
   2d3b8:	20002848 	.word	0x20002848

0002d3bc <bt_gatt_attr_next>:
{
   2d3bc:	b507      	push	{r0, r1, r2, lr}
	struct bt_gatt_attr *next = NULL;
   2d3be:	2300      	movs	r3, #0
   2d3c0:	9301      	str	r3, [sp, #4]
	uint16_t handle = bt_gatt_attr_get_handle(attr);
   2d3c2:	f7ff fea9 	bl	2d118 <bt_gatt_attr_get_handle>
	bt_gatt_foreach_attr(handle + 1, handle + 1, find_next, &next);
   2d3c6:	1c41      	adds	r1, r0, #1
   2d3c8:	b289      	uxth	r1, r1
   2d3ca:	4608      	mov	r0, r1
   2d3cc:	4a03      	ldr	r2, [pc, #12]	; (2d3dc <bt_gatt_attr_next+0x20>)
   2d3ce:	ab01      	add	r3, sp, #4
   2d3d0:	f00d fa61 	bl	3a896 <bt_gatt_foreach_attr>
}
   2d3d4:	9801      	ldr	r0, [sp, #4]
   2d3d6:	b003      	add	sp, #12
   2d3d8:	f85d fb04 	ldr.w	pc, [sp], #4
   2d3dc:	0003a5f1 	.word	0x0003a5f1

0002d3e0 <bt_gatt_is_subscribed>:

bool bt_gatt_is_subscribed(struct bt_conn *conn,
			   const struct bt_gatt_attr *attr, uint16_t ccc_type)
{
   2d3e0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   2d3e4:	460c      	mov	r4, r1
   2d3e6:	4617      	mov	r7, r2
	const struct _bt_gatt_ccc *ccc;

	__ASSERT(conn, "invalid parameter\n");
   2d3e8:	4605      	mov	r5, r0
   2d3ea:	b950      	cbnz	r0, 2d402 <bt_gatt_is_subscribed+0x22>
   2d3ec:	4953      	ldr	r1, [pc, #332]	; (2d53c <bt_gatt_is_subscribed+0x15c>)
   2d3ee:	4854      	ldr	r0, [pc, #336]	; (2d540 <bt_gatt_is_subscribed+0x160>)
   2d3f0:	f640 424b 	movw	r2, #3147	; 0xc4b
   2d3f4:	f00b fb8d 	bl	38b12 <assert_print>
   2d3f8:	f640 414b 	movw	r1, #3147	; 0xc4b
	__ASSERT(attr, "invalid parameter\n");
   2d3fc:	484f      	ldr	r0, [pc, #316]	; (2d53c <bt_gatt_is_subscribed+0x15c>)
   2d3fe:	f00b fb81 	bl	38b04 <assert_post_action>
   2d402:	b941      	cbnz	r1, 2d416 <bt_gatt_is_subscribed+0x36>
   2d404:	494d      	ldr	r1, [pc, #308]	; (2d53c <bt_gatt_is_subscribed+0x15c>)
   2d406:	484e      	ldr	r0, [pc, #312]	; (2d540 <bt_gatt_is_subscribed+0x160>)
   2d408:	f640 424c 	movw	r2, #3148	; 0xc4c
   2d40c:	f00b fb81 	bl	38b12 <assert_print>
   2d410:	f640 414c 	movw	r1, #3148	; 0xc4c
   2d414:	e7f2      	b.n	2d3fc <bt_gatt_is_subscribed+0x1c>

	if (conn->state != BT_CONN_CONNECTED) {
   2d416:	7a83      	ldrb	r3, [r0, #10]
   2d418:	2b07      	cmp	r3, #7
   2d41a:	d110      	bne.n	2d43e <bt_gatt_is_subscribed+0x5e>
		return false;
	}

	/* Check if attribute is a characteristic declaration */
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC)) {
   2d41c:	2300      	movs	r3, #0
   2d41e:	f88d 300c 	strb.w	r3, [sp, #12]
   2d422:	6820      	ldr	r0, [r4, #0]
   2d424:	f642 0303 	movw	r3, #10243	; 0x2803
   2d428:	a903      	add	r1, sp, #12
   2d42a:	f8ad 300e 	strh.w	r3, [sp, #14]
   2d42e:	f00b ffe8 	bl	39402 <bt_uuid_cmp>
   2d432:	b9b0      	cbnz	r0, 2d462 <bt_gatt_is_subscribed+0x82>
		struct bt_gatt_chrc *chrc = attr->user_data;

		if (!(chrc->properties &
   2d434:	68e3      	ldr	r3, [r4, #12]
   2d436:	799b      	ldrb	r3, [r3, #6]
   2d438:	f013 0f30 	tst.w	r3, #48	; 0x30
   2d43c:	d103      	bne.n	2d446 <bt_gatt_is_subscribed+0x66>
		return false;
   2d43e:	2000      	movs	r0, #0
			return true;
		}
	}

	return false;
}
   2d440:	b004      	add	sp, #16
   2d442:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		attr = bt_gatt_attr_next(attr);
   2d446:	4620      	mov	r0, r4
   2d448:	f7ff ffb8 	bl	2d3bc <bt_gatt_attr_next>
		__ASSERT(attr, "No more attributes\n");
   2d44c:	4604      	mov	r4, r0
   2d44e:	b940      	cbnz	r0, 2d462 <bt_gatt_is_subscribed+0x82>
   2d450:	493a      	ldr	r1, [pc, #232]	; (2d53c <bt_gatt_is_subscribed+0x15c>)
   2d452:	483b      	ldr	r0, [pc, #236]	; (2d540 <bt_gatt_is_subscribed+0x160>)
   2d454:	f640 425d 	movw	r2, #3165	; 0xc5d
   2d458:	f00b fb5b 	bl	38b12 <assert_print>
   2d45c:	f640 415d 	movw	r1, #3165	; 0xc5d
   2d460:	e7cc      	b.n	2d3fc <bt_gatt_is_subscribed+0x1c>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
   2d462:	2300      	movs	r3, #0
   2d464:	6820      	ldr	r0, [r4, #0]
   2d466:	f88d 300c 	strb.w	r3, [sp, #12]
   2d46a:	a903      	add	r1, sp, #12
   2d46c:	f642 1302 	movw	r3, #10498	; 0x2902
   2d470:	f8ad 300e 	strh.w	r3, [sp, #14]
   2d474:	f00b ffc5 	bl	39402 <bt_uuid_cmp>
   2d478:	b168      	cbz	r0, 2d496 <bt_gatt_is_subscribed+0xb6>
		attr = bt_gatt_attr_next(attr);
   2d47a:	4620      	mov	r0, r4
   2d47c:	f7ff ff9e 	bl	2d3bc <bt_gatt_attr_next>
		__ASSERT(attr, "No more attributes\n");
   2d480:	4604      	mov	r4, r0
   2d482:	b940      	cbnz	r0, 2d496 <bt_gatt_is_subscribed+0xb6>
   2d484:	492d      	ldr	r1, [pc, #180]	; (2d53c <bt_gatt_is_subscribed+0x15c>)
   2d486:	482e      	ldr	r0, [pc, #184]	; (2d540 <bt_gatt_is_subscribed+0x160>)
   2d488:	f640 4263 	movw	r2, #3171	; 0xc63
   2d48c:	f00b fb41 	bl	38b12 <assert_print>
   2d490:	f640 4163 	movw	r1, #3171	; 0xc63
   2d494:	e7b2      	b.n	2d3fc <bt_gatt_is_subscribed+0x1c>
	while (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) &&
   2d496:	2600      	movs	r6, #0
   2d498:	f642 1802 	movw	r8, #10498	; 0x2902
   2d49c:	6820      	ldr	r0, [r4, #0]
   2d49e:	f88d 6000 	strb.w	r6, [sp]
   2d4a2:	4669      	mov	r1, sp
   2d4a4:	f8ad 8002 	strh.w	r8, [sp, #2]
   2d4a8:	f00b ffab 	bl	39402 <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   2d4ac:	b9d8      	cbnz	r0, 2d4e6 <bt_gatt_is_subscribed+0x106>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
   2d4ae:	2300      	movs	r3, #0
   2d4b0:	6820      	ldr	r0, [r4, #0]
   2d4b2:	f88d 300c 	strb.w	r3, [sp, #12]
   2d4b6:	a903      	add	r1, sp, #12
   2d4b8:	f642 1302 	movw	r3, #10498	; 0x2902
   2d4bc:	f8ad 300e 	strh.w	r3, [sp, #14]
   2d4c0:	f00b ff9f 	bl	39402 <bt_uuid_cmp>
   2d4c4:	2800      	cmp	r0, #0
   2d4c6:	d1ba      	bne.n	2d43e <bt_gatt_is_subscribed+0x5e>
	ccc = attr->user_data;
   2d4c8:	68e4      	ldr	r4, [r4, #12]
		if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer) &&
   2d4ca:	4622      	mov	r2, r4
   2d4cc:	4628      	mov	r0, r5
   2d4ce:	f812 1b01 	ldrb.w	r1, [r2], #1
   2d4d2:	f00c fad8 	bl	39a86 <bt_conn_is_peer_addr_le>
   2d4d6:	2800      	cmp	r0, #0
   2d4d8:	d0b1      	beq.n	2d43e <bt_gatt_is_subscribed+0x5e>
   2d4da:	8923      	ldrh	r3, [r4, #8]
   2d4dc:	421f      	tst	r7, r3
   2d4de:	bf14      	ite	ne
   2d4e0:	2001      	movne	r0, #1
   2d4e2:	2000      	moveq	r0, #0
   2d4e4:	e7ac      	b.n	2d440 <bt_gatt_is_subscribed+0x60>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) &&
   2d4e6:	6820      	ldr	r0, [r4, #0]
   2d4e8:	f88d 6004 	strb.w	r6, [sp, #4]
   2d4ec:	f642 0303 	movw	r3, #10243	; 0x2803
   2d4f0:	a901      	add	r1, sp, #4
   2d4f2:	f8ad 3006 	strh.w	r3, [sp, #6]
   2d4f6:	f00b ff84 	bl	39402 <bt_uuid_cmp>
	while (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) &&
   2d4fa:	2800      	cmp	r0, #0
   2d4fc:	d0d7      	beq.n	2d4ae <bt_gatt_is_subscribed+0xce>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   2d4fe:	6820      	ldr	r0, [r4, #0]
   2d500:	f88d 6008 	strb.w	r6, [sp, #8]
   2d504:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   2d508:	a902      	add	r1, sp, #8
   2d50a:	f8ad 300a 	strh.w	r3, [sp, #10]
   2d50e:	f00b ff78 	bl	39402 <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) &&
   2d512:	2800      	cmp	r0, #0
   2d514:	d0cb      	beq.n	2d4ae <bt_gatt_is_subscribed+0xce>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   2d516:	6820      	ldr	r0, [r4, #0]
   2d518:	f88d 600c 	strb.w	r6, [sp, #12]
   2d51c:	f642 0301 	movw	r3, #10241	; 0x2801
   2d520:	a903      	add	r1, sp, #12
   2d522:	f8ad 300e 	strh.w	r3, [sp, #14]
   2d526:	f00b ff6c 	bl	39402 <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   2d52a:	2800      	cmp	r0, #0
   2d52c:	d0bf      	beq.n	2d4ae <bt_gatt_is_subscribed+0xce>
		attr = bt_gatt_attr_next(attr);
   2d52e:	4620      	mov	r0, r4
   2d530:	f7ff ff44 	bl	2d3bc <bt_gatt_attr_next>
		if (!attr) {
   2d534:	4604      	mov	r4, r0
   2d536:	2800      	cmp	r0, #0
   2d538:	d1b0      	bne.n	2d49c <bt_gatt_is_subscribed+0xbc>
   2d53a:	e780      	b.n	2d43e <bt_gatt_is_subscribed+0x5e>
   2d53c:	0003e8aa 	.word	0x0003e8aa
   2d540:	0003d1d7 	.word	0x0003d1d7

0002d544 <gatt_indicate>:
{
   2d544:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2d548:	4615      	mov	r5, r2
   2d54a:	b086      	sub	sp, #24
   2d54c:	4689      	mov	r9, r1
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   2d54e:	2294      	movs	r2, #148	; 0x94
   2d550:	6869      	ldr	r1, [r5, #4]
{
   2d552:	4606      	mov	r6, r0
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   2d554:	f00d f9ae 	bl	3a8b4 <bt_gatt_check_perm>
   2d558:	4680      	mov	r8, r0
   2d55a:	b1a0      	cbz	r0, 2d586 <gatt_indicate+0x42>
		BT_WARN("Link is not encrypted");
   2d55c:	483b      	ldr	r0, [pc, #236]	; (2d64c <gatt_indicate+0x108>)
   2d55e:	6803      	ldr	r3, [r0, #0]
   2d560:	f013 0f06 	tst.w	r3, #6
   2d564:	d105      	bne.n	2d572 <gatt_indicate+0x2e>
		return -EPERM;
   2d566:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
}
   2d56a:	4628      	mov	r0, r5
   2d56c:	b006      	add	sp, #24
   2d56e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		BT_WARN("Link is not encrypted");
   2d572:	4b37      	ldr	r3, [pc, #220]	; (2d650 <gatt_indicate+0x10c>)
   2d574:	9305      	str	r3, [sp, #20]
   2d576:	aa04      	add	r2, sp, #16
   2d578:	2302      	movs	r3, #2
   2d57a:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   2d57e:	9304      	str	r3, [sp, #16]
   2d580:	f00d f833 	bl	3a5ea <z_log_msg_static_create.constprop.0>
   2d584:	e7ef      	b.n	2d566 <gatt_indicate+0x22>
		if (!bt_gatt_is_subscribed(conn, params->attr, BT_GATT_CCC_INDICATE)) {
   2d586:	6869      	ldr	r1, [r5, #4]
   2d588:	2202      	movs	r2, #2
   2d58a:	4630      	mov	r0, r6
   2d58c:	f7ff ff28 	bl	2d3e0 <bt_gatt_is_subscribed>
   2d590:	b988      	cbnz	r0, 2d5b6 <gatt_indicate+0x72>
			BT_WARN("Device is not subscribed to characteristic");
   2d592:	482e      	ldr	r0, [pc, #184]	; (2d64c <gatt_indicate+0x108>)
   2d594:	6803      	ldr	r3, [r0, #0]
   2d596:	f013 0f06 	tst.w	r3, #6
   2d59a:	d102      	bne.n	2d5a2 <gatt_indicate+0x5e>
			return -EINVAL;
   2d59c:	f06f 0515 	mvn.w	r5, #21
   2d5a0:	e7e3      	b.n	2d56a <gatt_indicate+0x26>
			BT_WARN("Device is not subscribed to characteristic");
   2d5a2:	4b2c      	ldr	r3, [pc, #176]	; (2d654 <gatt_indicate+0x110>)
   2d5a4:	9305      	str	r3, [sp, #20]
   2d5a6:	aa04      	add	r2, sp, #16
   2d5a8:	2302      	movs	r3, #2
   2d5aa:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   2d5ae:	9304      	str	r3, [sp, #16]
   2d5b0:	f00d f81b 	bl	3a5ea <z_log_msg_static_create.constprop.0>
   2d5b4:	e7f2      	b.n	2d59c <gatt_indicate+0x58>
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   2d5b6:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
   2d5ba:	2100      	movs	r1, #0
	len = sizeof(*ind) + params->len;
   2d5bc:	8aaf      	ldrh	r7, [r5, #20]
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   2d5be:	f7ff f9c7 	bl	2c950 <bt_att_req_alloc>
	len = sizeof(*ind) + params->len;
   2d5c2:	3702      	adds	r7, #2
	if (!req) {
   2d5c4:	4604      	mov	r4, r0
   2d5c6:	b1d0      	cbz	r0, 2d5fe <gatt_indicate+0xba>
	req->func = func;
   2d5c8:	4b23      	ldr	r3, [pc, #140]	; (2d658 <gatt_indicate+0x114>)
   2d5ca:	6043      	str	r3, [r0, #4]
	req->user_data = params;
   2d5cc:	60c5      	str	r5, [r0, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
   2d5ce:	463a      	mov	r2, r7
   2d5d0:	211d      	movs	r1, #29
   2d5d2:	4630      	mov	r0, r6
   2d5d4:	f7fe fee6 	bl	2c3a4 <bt_att_create_pdu>
	if (!buf) {
   2d5d8:	4607      	mov	r7, r0
   2d5da:	b998      	cbnz	r0, 2d604 <gatt_indicate+0xc0>
		BT_WARN("No buffer available to send indication");
   2d5dc:	481b      	ldr	r0, [pc, #108]	; (2d64c <gatt_indicate+0x108>)
   2d5de:	6803      	ldr	r3, [r0, #0]
   2d5e0:	f013 0f06 	tst.w	r3, #6
   2d5e4:	d008      	beq.n	2d5f8 <gatt_indicate+0xb4>
   2d5e6:	4b1d      	ldr	r3, [pc, #116]	; (2d65c <gatt_indicate+0x118>)
   2d5e8:	9305      	str	r3, [sp, #20]
   2d5ea:	aa04      	add	r2, sp, #16
   2d5ec:	2302      	movs	r3, #2
   2d5ee:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   2d5f2:	9304      	str	r3, [sp, #16]
   2d5f4:	f00c fff9 	bl	3a5ea <z_log_msg_static_create.constprop.0>
		bt_att_req_free(req);
   2d5f8:	4620      	mov	r0, r4
   2d5fa:	f7ff f9cb 	bl	2c994 <bt_att_req_free>
		return -ENOMEM;
   2d5fe:	f06f 050b 	mvn.w	r5, #11
   2d602:	e7b2      	b.n	2d56a <gatt_indicate+0x26>
	bt_att_set_tx_meta_data(buf, NULL, NULL, BT_ATT_CHAN_OPT(params));
   2d604:	2301      	movs	r3, #1
   2d606:	4642      	mov	r2, r8
   2d608:	4641      	mov	r1, r8
	return net_buf_simple_add(&buf->b, len);
   2d60a:	f107 0a08 	add.w	sl, r7, #8
   2d60e:	f00c ff1c 	bl	3a44a <bt_att_set_tx_meta_data>
   2d612:	2102      	movs	r1, #2
   2d614:	4650      	mov	r0, sl
   2d616:	f001 fa39 	bl	2ea8c <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
   2d61a:	4680      	mov	r8, r0
   2d61c:	4650      	mov	r0, sl
   2d61e:	f828 9b02 	strh.w	r9, [r8], #2
   2d622:	8aa9      	ldrh	r1, [r5, #20]
   2d624:	f001 fa32 	bl	2ea8c <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
   2d628:	8aaa      	ldrh	r2, [r5, #20]
   2d62a:	6929      	ldr	r1, [r5, #16]
   2d62c:	4640      	mov	r0, r8
   2d62e:	f00b febf 	bl	393b0 <memcpy>
	req->buf = buf;
   2d632:	60a7      	str	r7, [r4, #8]
	err = bt_att_req_send(conn, req);
   2d634:	4621      	mov	r1, r4
   2d636:	4630      	mov	r0, r6
   2d638:	f7ff fae8 	bl	2cc0c <bt_att_req_send>
	if (err) {
   2d63c:	4605      	mov	r5, r0
   2d63e:	2800      	cmp	r0, #0
   2d640:	d093      	beq.n	2d56a <gatt_indicate+0x26>
		bt_att_req_free(req);
   2d642:	4620      	mov	r0, r4
   2d644:	f7ff f9a6 	bl	2c994 <bt_att_req_free>
   2d648:	e78f      	b.n	2d56a <gatt_indicate+0x26>
   2d64a:	bf00      	nop
   2d64c:	20000a88 	.word	0x20000a88
   2d650:	0003e971 	.word	0x0003e971
   2d654:	0003e987 	.word	0x0003e987
   2d658:	0003a46d 	.word	0x0003a46d
   2d65c:	0003e9b2 	.word	0x0003e9b2

0002d660 <bt_gatt_indicate>:
{
   2d660:	b530      	push	{r4, r5, lr}
   2d662:	4605      	mov	r5, r0
   2d664:	b08b      	sub	sp, #44	; 0x2c
	__ASSERT(params, "invalid parameters\n");
   2d666:	460c      	mov	r4, r1
   2d668:	b951      	cbnz	r1, 2d680 <bt_gatt_indicate+0x20>
   2d66a:	4942      	ldr	r1, [pc, #264]	; (2d774 <bt_gatt_indicate+0x114>)
   2d66c:	4842      	ldr	r0, [pc, #264]	; (2d778 <bt_gatt_indicate+0x118>)
   2d66e:	f640 320b 	movw	r2, #2827	; 0xb0b
   2d672:	f00b fa4e 	bl	38b12 <assert_print>
   2d676:	f640 310b 	movw	r1, #2827	; 0xb0b
	__ASSERT(params->attr || params->uuid, "invalid parameters\n");
   2d67a:	483e      	ldr	r0, [pc, #248]	; (2d774 <bt_gatt_indicate+0x114>)
   2d67c:	f00b fa42 	bl	38b04 <assert_post_action>
   2d680:	684b      	ldr	r3, [r1, #4]
   2d682:	b953      	cbnz	r3, 2d69a <bt_gatt_indicate+0x3a>
   2d684:	680b      	ldr	r3, [r1, #0]
   2d686:	b943      	cbnz	r3, 2d69a <bt_gatt_indicate+0x3a>
   2d688:	493a      	ldr	r1, [pc, #232]	; (2d774 <bt_gatt_indicate+0x114>)
   2d68a:	483b      	ldr	r0, [pc, #236]	; (2d778 <bt_gatt_indicate+0x118>)
   2d68c:	f640 320c 	movw	r2, #2828	; 0xb0c
   2d690:	f00b fa3f 	bl	38b12 <assert_print>
   2d694:	f640 310c 	movw	r1, #2828	; 0xb0c
   2d698:	e7ef      	b.n	2d67a <bt_gatt_indicate+0x1a>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   2d69a:	4838      	ldr	r0, [pc, #224]	; (2d77c <bt_gatt_indicate+0x11c>)
   2d69c:	f00c ff58 	bl	3a550 <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   2d6a0:	0742      	lsls	r2, r0, #29
   2d6a2:	d561      	bpl.n	2d768 <bt_gatt_indicate+0x108>
	if (conn && conn->state != BT_CONN_CONNECTED) {
   2d6a4:	b115      	cbz	r5, 2d6ac <bt_gatt_indicate+0x4c>
   2d6a6:	7aab      	ldrb	r3, [r5, #10]
   2d6a8:	2b07      	cmp	r3, #7
   2d6aa:	d160      	bne.n	2d76e <bt_gatt_indicate+0x10e>
	data.attr = params->attr;
   2d6ac:	6860      	ldr	r0, [r4, #4]
   2d6ae:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   2d6b0:	f7ff fd32 	bl	2d118 <bt_gatt_attr_get_handle>
	if (params->uuid) {
   2d6b4:	6822      	ldr	r2, [r4, #0]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   2d6b6:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
   2d6ba:	b33a      	cbz	r2, 2d70c <bt_gatt_indicate+0xac>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   2d6bc:	a905      	add	r1, sp, #20
   2d6be:	9102      	str	r1, [sp, #8]
   2d6c0:	492f      	ldr	r1, [pc, #188]	; (2d780 <bt_gatt_indicate+0x120>)
   2d6c2:	9101      	str	r1, [sp, #4]
   2d6c4:	2101      	movs	r1, #1
	found->attr = NULL;
   2d6c6:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   2d6c8:	9100      	str	r1, [sp, #0]
   2d6ca:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   2d6ce:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   2d6d0:	f7ff fd62 	bl	2d198 <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
   2d6d4:	9b05      	ldr	r3, [sp, #20]
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   2d6d6:	b91b      	cbnz	r3, 2d6e0 <bt_gatt_indicate+0x80>
			return -ENOENT;
   2d6d8:	f06f 0001 	mvn.w	r0, #1
}
   2d6dc:	b00b      	add	sp, #44	; 0x2c
   2d6de:	bd30      	pop	{r4, r5, pc}
		params->attr = data.attr;
   2d6e0:	6063      	str	r3, [r4, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   2d6e2:	9b05      	ldr	r3, [sp, #20]
   2d6e4:	6818      	ldr	r0, [r3, #0]
   2d6e6:	2300      	movs	r3, #0
   2d6e8:	f88d 3010 	strb.w	r3, [sp, #16]
   2d6ec:	a904      	add	r1, sp, #16
   2d6ee:	f642 0303 	movw	r3, #10243	; 0x2803
   2d6f2:	f8ad 3012 	strh.w	r3, [sp, #18]
   2d6f6:	f00b fe84 	bl	39402 <bt_uuid_cmp>
   2d6fa:	b970      	cbnz	r0, 2d71a <bt_gatt_indicate+0xba>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   2d6fc:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
   2d6fe:	68c3      	ldr	r3, [r0, #12]
   2d700:	799b      	ldrb	r3, [r3, #6]
   2d702:	069b      	lsls	r3, r3, #26
   2d704:	d405      	bmi.n	2d712 <bt_gatt_indicate+0xb2>
			return -EINVAL;
   2d706:	f06f 0015 	mvn.w	r0, #21
   2d70a:	e7e7      	b.n	2d6dc <bt_gatt_indicate+0x7c>
		if (!data.handle) {
   2d70c:	2800      	cmp	r0, #0
   2d70e:	d1e8      	bne.n	2d6e2 <bt_gatt_indicate+0x82>
   2d710:	e7e2      	b.n	2d6d8 <bt_gatt_indicate+0x78>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   2d712:	f00d f872 	bl	3a7fa <bt_gatt_attr_value_handle>
   2d716:	f8ad 0018 	strh.w	r0, [sp, #24]
		return gatt_indicate(conn, data.handle, params);
   2d71a:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
   2d71e:	b13d      	cbz	r5, 2d730 <bt_gatt_indicate+0xd0>
		params->_ref = 1;
   2d720:	2301      	movs	r3, #1
		return gatt_indicate(conn, data.handle, params);
   2d722:	4601      	mov	r1, r0
		params->_ref = 1;
   2d724:	75a3      	strb	r3, [r4, #22]
		return gatt_indicate(conn, data.handle, params);
   2d726:	4622      	mov	r2, r4
   2d728:	4628      	mov	r0, r5
   2d72a:	f7ff ff0b 	bl	2d544 <gatt_indicate>
   2d72e:	e7d5      	b.n	2d6dc <bt_gatt_indicate+0x7c>
	data.err = -ENOTCONN;
   2d730:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   2d734:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
   2d736:	2302      	movs	r3, #2
   2d738:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   2d73c:	f642 1302 	movw	r3, #10498	; 0x2902
   2d740:	f8ad 3012 	strh.w	r3, [sp, #18]
   2d744:	ab05      	add	r3, sp, #20
	params->_ref = 0;
   2d746:	75a5      	strb	r5, [r4, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   2d748:	9302      	str	r3, [sp, #8]
   2d74a:	4b0e      	ldr	r3, [pc, #56]	; (2d784 <bt_gatt_indicate+0x124>)
   2d74c:	9301      	str	r3, [sp, #4]
   2d74e:	2301      	movs	r3, #1
   2d750:	9300      	str	r3, [sp, #0]
   2d752:	aa04      	add	r2, sp, #16
   2d754:	462b      	mov	r3, r5
   2d756:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.ind_params = params;
   2d75a:	9409      	str	r4, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   2d75c:	f88d 5010 	strb.w	r5, [sp, #16]
   2d760:	f7ff fd1a 	bl	2d198 <bt_gatt_foreach_attr_type>
	return data.err;
   2d764:	9807      	ldr	r0, [sp, #28]
   2d766:	e7b9      	b.n	2d6dc <bt_gatt_indicate+0x7c>
		return -EAGAIN;
   2d768:	f06f 000a 	mvn.w	r0, #10
   2d76c:	e7b6      	b.n	2d6dc <bt_gatt_indicate+0x7c>
		return -ENOTCONN;
   2d76e:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   2d772:	e7b3      	b.n	2d6dc <bt_gatt_indicate+0x7c>
   2d774:	0003e8aa 	.word	0x0003e8aa
   2d778:	0003d1d7 	.word	0x0003d1d7
   2d77c:	200004a8 	.word	0x200004a8
   2d780:	0003a493 	.word	0x0003a493
   2d784:	0002db21 	.word	0x0002db21

0002d788 <sc_process>:
{
   2d788:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	__ASSERT(!atomic_test_bit(sc->flags, SC_INDICATE_PENDING),
   2d78a:	f100 0530 	add.w	r5, r0, #48	; 0x30
{
   2d78e:	4604      	mov	r4, r0
	__ASSERT(!atomic_test_bit(sc->flags, SC_INDICATE_PENDING),
   2d790:	f1a0 0720 	sub.w	r7, r0, #32
   2d794:	4628      	mov	r0, r5
   2d796:	f00c fedb 	bl	3a550 <atomic_get>
   2d79a:	0783      	lsls	r3, r0, #30
   2d79c:	f3c0 0640 	ubfx	r6, r0, #1, #1
   2d7a0:	d50a      	bpl.n	2d7b8 <sc_process+0x30>
   2d7a2:	4917      	ldr	r1, [pc, #92]	; (2d800 <sc_process+0x78>)
   2d7a4:	4817      	ldr	r0, [pc, #92]	; (2d804 <sc_process+0x7c>)
   2d7a6:	f44f 6294 	mov.w	r2, #1184	; 0x4a0
   2d7aa:	f00b f9b2 	bl	38b12 <assert_print>
   2d7ae:	4814      	ldr	r0, [pc, #80]	; (2d800 <sc_process+0x78>)
   2d7b0:	f44f 6194 	mov.w	r1, #1184	; 0x4a0
   2d7b4:	f00b f9a6 	bl	38b04 <assert_post_action>
	sc_range[0] = sys_cpu_to_le16(sc->start);
   2d7b8:	f854 3c08 	ldr.w	r3, [r4, #-8]
   2d7bc:	9301      	str	r3, [sp, #4]
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2d7be:	f06f 0101 	mvn.w	r1, #1
   2d7c2:	4628      	mov	r0, r5
   2d7c4:	f00c fedc 	bl	3a580 <atomic_and>
	sc->params.attr = &_1_gatt_svc.attrs[2];
   2d7c8:	4b0f      	ldr	r3, [pc, #60]	; (2d808 <sc_process+0x80>)
   2d7ca:	f844 3c1c 	str.w	r3, [r4, #-28]
	sc->params.func = sc_indicate_rsp;
   2d7ce:	4b0f      	ldr	r3, [pc, #60]	; (2d80c <sc_process+0x84>)
   2d7d0:	f844 3c18 	str.w	r3, [r4, #-24]
	sc->params.data = &sc_range[0];
   2d7d4:	ab01      	add	r3, sp, #4
   2d7d6:	f844 3c10 	str.w	r3, [r4, #-16]
	sc->params.len = sizeof(sc_range);
   2d7da:	2304      	movs	r3, #4
	sc->start = 0U;
   2d7dc:	f824 6c08 	strh.w	r6, [r4, #-8]
	sc->end = 0U;
   2d7e0:	f824 6c06 	strh.w	r6, [r4, #-6]
	sc->params.len = sizeof(sc_range);
   2d7e4:	f824 3c0c 	strh.w	r3, [r4, #-12]
	if (bt_gatt_indicate(NULL, &sc->params)) {
   2d7e8:	4639      	mov	r1, r7
   2d7ea:	4630      	mov	r0, r6
   2d7ec:	f7ff ff38 	bl	2d660 <bt_gatt_indicate>
   2d7f0:	b918      	cbnz	r0, 2d7fa <sc_process+0x72>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   2d7f2:	2102      	movs	r1, #2
   2d7f4:	4628      	mov	r0, r5
   2d7f6:	f00c feb1 	bl	3a55c <atomic_or>
}
   2d7fa:	b003      	add	sp, #12
   2d7fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2d7fe:	bf00      	nop
   2d800:	0003e8aa 	.word	0x0003e8aa
   2d804:	0003d1d7 	.word	0x0003d1d7
   2d808:	0003c9bc 	.word	0x0003c9bc
   2d80c:	0002d061 	.word	0x0002d061

0002d810 <update_ccc>:
{
   2d810:	b5f0      	push	{r4, r5, r6, r7, lr}
   2d812:	b089      	sub	sp, #36	; 0x24
	struct bt_conn *conn = data->conn;
   2d814:	6815      	ldr	r5, [r2, #0]
	if (attr->write != bt_gatt_attr_write_ccc) {
   2d816:	4b36      	ldr	r3, [pc, #216]	; (2d8f0 <update_ccc+0xe0>)
   2d818:	6882      	ldr	r2, [r0, #8]
   2d81a:	429a      	cmp	r2, r3
{
   2d81c:	af00      	add	r7, sp, #0
   2d81e:	4604      	mov	r4, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   2d820:	d123      	bne.n	2d86a <update_ccc+0x5a>
	ccc = attr->user_data;
   2d822:	68c6      	ldr	r6, [r0, #12]
		if (!cfg->value ||
   2d824:	8933      	ldrh	r3, [r6, #8]
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   2d826:	1c72      	adds	r2, r6, #1
		if (!cfg->value ||
   2d828:	b1fb      	cbz	r3, 2d86a <update_ccc+0x5a>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   2d82a:	7831      	ldrb	r1, [r6, #0]
   2d82c:	4628      	mov	r0, r5
   2d82e:	f00c f92a 	bl	39a86 <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
   2d832:	b1d0      	cbz	r0, 2d86a <update_ccc+0x5a>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
   2d834:	f44f 7295 	mov.w	r2, #298	; 0x12a
   2d838:	4621      	mov	r1, r4
   2d83a:	4628      	mov	r0, r5
   2d83c:	f00d f83a 	bl	3a8b4 <bt_gatt_check_perm>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
   2d840:	2803      	cmp	r0, #3
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
   2d842:	4603      	mov	r3, r0
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
   2d844:	d115      	bne.n	2d872 <update_ccc+0x62>
				BT_WARN("CCC %p not writable", attr);
   2d846:	482b      	ldr	r0, [pc, #172]	; (2d8f4 <update_ccc+0xe4>)
   2d848:	6802      	ldr	r2, [r0, #0]
   2d84a:	f012 0f06 	tst.w	r2, #6
   2d84e:	d00c      	beq.n	2d86a <update_ccc+0x5a>
   2d850:	466d      	mov	r5, sp
   2d852:	b088      	sub	sp, #32
   2d854:	466a      	mov	r2, sp
   2d856:	4928      	ldr	r1, [pc, #160]	; (2d8f8 <update_ccc+0xe8>)
   2d858:	e9c2 1405 	strd	r1, r4, [r2, #20]
   2d85c:	f842 3f10 	str.w	r3, [r2, #16]!
   2d860:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   2d864:	f00c fec1 	bl	3a5ea <z_log_msg_static_create.constprop.0>
   2d868:	46ad      	mov	sp, r5
}
   2d86a:	2001      	movs	r0, #1
   2d86c:	3724      	adds	r7, #36	; 0x24
   2d86e:	46bd      	mov	sp, r7
   2d870:	bdf0      	pop	{r4, r5, r6, r7, pc}
		gatt_ccc_changed(attr, ccc);
   2d872:	4631      	mov	r1, r6
   2d874:	4620      	mov	r0, r4
   2d876:	f00c fdef 	bl	3a458 <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
   2d87a:	4b20      	ldr	r3, [pc, #128]	; (2d8fc <update_ccc+0xec>)
   2d87c:	429e      	cmp	r6, r3
   2d87e:	d1f4      	bne.n	2d86a <update_ccc+0x5a>
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
   2d880:	7a28      	ldrb	r0, [r5, #8]
   2d882:	f105 0190 	add.w	r1, r5, #144	; 0x90
   2d886:	f7ff fa09 	bl	2cc9c <find_sc_cfg>
	if (!cfg) {
   2d88a:	2800      	cmp	r0, #0
   2d88c:	d0ed      	beq.n	2d86a <update_ccc+0x5a>
	if (!(cfg->data.start || cfg->data.end)) {
   2d88e:	8902      	ldrh	r2, [r0, #8]
   2d890:	8943      	ldrh	r3, [r0, #10]
   2d892:	ea52 0103 	orrs.w	r1, r2, r3
   2d896:	d0e8      	beq.n	2d86a <update_ccc+0x5a>
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
   2d898:	80ba      	strh	r2, [r7, #4]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
   2d89a:	80fb      	strh	r3, [r7, #6]
	index = bt_conn_index(conn);
   2d89c:	4628      	mov	r0, r5
   2d89e:	f7fd fb6f 	bl	2af80 <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   2d8a2:	4917      	ldr	r1, [pc, #92]	; (2d900 <update_ccc+0xf0>)
   2d8a4:	4a17      	ldr	r2, [pc, #92]	; (2d904 <update_ccc+0xf4>)
   2d8a6:	2318      	movs	r3, #24
   2d8a8:	fb03 1300 	mla	r3, r3, r0, r1
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   2d8ac:	b200      	sxth	r0, r0
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   2d8ae:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
   2d8b0:	4a15      	ldr	r2, [pc, #84]	; (2d908 <update_ccc+0xf8>)
   2d8b2:	609a      	str	r2, [r3, #8]
	sc_restore_params[index].data = &sc_range[0];
   2d8b4:	1d3a      	adds	r2, r7, #4
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   2d8b6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
	sc_restore_params[index].data = &sc_range[0];
   2d8ba:	611a      	str	r2, [r3, #16]
	sc_restore_params[index].len = sizeof(sc_range);
   2d8bc:	2204      	movs	r2, #4
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   2d8be:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
	sc_restore_params[index].len = sizeof(sc_range);
   2d8c2:	829a      	strh	r2, [r3, #20]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   2d8c4:	4628      	mov	r0, r5
   2d8c6:	f7ff fecb 	bl	2d660 <bt_gatt_indicate>
   2d8ca:	2800      	cmp	r0, #0
   2d8cc:	d0cd      	beq.n	2d86a <update_ccc+0x5a>
		BT_ERR("SC restore indication failed");
   2d8ce:	4b09      	ldr	r3, [pc, #36]	; (2d8f4 <update_ccc+0xe4>)
   2d8d0:	681b      	ldr	r3, [r3, #0]
   2d8d2:	075b      	lsls	r3, r3, #29
   2d8d4:	d0c9      	beq.n	2d86a <update_ccc+0x5a>
   2d8d6:	4b0d      	ldr	r3, [pc, #52]	; (2d90c <update_ccc+0xfc>)
   2d8d8:	61fb      	str	r3, [r7, #28]
   2d8da:	2302      	movs	r3, #2
   2d8dc:	4805      	ldr	r0, [pc, #20]	; (2d8f4 <update_ccc+0xe4>)
   2d8de:	61bb      	str	r3, [r7, #24]
   2d8e0:	f107 0218 	add.w	r2, r7, #24
   2d8e4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   2d8e8:	f00c fe7f 	bl	3a5ea <z_log_msg_static_create.constprop.0>
   2d8ec:	e7bd      	b.n	2d86a <update_ccc+0x5a>
   2d8ee:	bf00      	nop
   2d8f0:	0002ce7d 	.word	0x0002ce7d
   2d8f4:	20000a88 	.word	0x20000a88
   2d8f8:	0003e9d9 	.word	0x0003e9d9
   2d8fc:	2000070c 	.word	0x2000070c
   2d900:	20002f40 	.word	0x20002f40
   2d904:	0003c9bc 	.word	0x0003c9bc
   2d908:	0003a78d 	.word	0x0003a78d
   2d90c:	0003e9ed 	.word	0x0003e9ed

0002d910 <gatt_notify>:
{
   2d910:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2d914:	4614      	mov	r4, r2
   2d916:	b087      	sub	sp, #28
   2d918:	4688      	mov	r8, r1
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   2d91a:	2294      	movs	r2, #148	; 0x94
   2d91c:	6861      	ldr	r1, [r4, #4]
{
   2d91e:	4606      	mov	r6, r0
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   2d920:	f00c ffc8 	bl	3a8b4 <bt_gatt_check_perm>
   2d924:	b198      	cbz	r0, 2d94e <gatt_notify+0x3e>
		BT_WARN("Link is not encrypted");
   2d926:	4832      	ldr	r0, [pc, #200]	; (2d9f0 <gatt_notify+0xe0>)
   2d928:	6803      	ldr	r3, [r0, #0]
   2d92a:	f013 0f06 	tst.w	r3, #6
   2d92e:	d104      	bne.n	2d93a <gatt_notify+0x2a>
		return -EPERM;
   2d930:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   2d934:	b007      	add	sp, #28
   2d936:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		BT_WARN("Link is not encrypted");
   2d93a:	4b2e      	ldr	r3, [pc, #184]	; (2d9f4 <gatt_notify+0xe4>)
   2d93c:	9305      	str	r3, [sp, #20]
   2d93e:	aa04      	add	r2, sp, #16
   2d940:	2302      	movs	r3, #2
   2d942:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   2d946:	9304      	str	r3, [sp, #16]
   2d948:	f00c fe4f 	bl	3a5ea <z_log_msg_static_create.constprop.0>
   2d94c:	e7f0      	b.n	2d930 <gatt_notify+0x20>
		if (!bt_gatt_is_subscribed(conn, params->attr, BT_GATT_CCC_NOTIFY)) {
   2d94e:	6861      	ldr	r1, [r4, #4]
   2d950:	2201      	movs	r2, #1
   2d952:	4630      	mov	r0, r6
   2d954:	f7ff fd44 	bl	2d3e0 <bt_gatt_is_subscribed>
   2d958:	b988      	cbnz	r0, 2d97e <gatt_notify+0x6e>
			BT_WARN("Device is not subscribed to characteristic");
   2d95a:	4825      	ldr	r0, [pc, #148]	; (2d9f0 <gatt_notify+0xe0>)
   2d95c:	6803      	ldr	r3, [r0, #0]
   2d95e:	f013 0f06 	tst.w	r3, #6
   2d962:	d102      	bne.n	2d96a <gatt_notify+0x5a>
			return -EINVAL;
   2d964:	f06f 0015 	mvn.w	r0, #21
   2d968:	e7e4      	b.n	2d934 <gatt_notify+0x24>
			BT_WARN("Device is not subscribed to characteristic");
   2d96a:	4b23      	ldr	r3, [pc, #140]	; (2d9f8 <gatt_notify+0xe8>)
   2d96c:	9305      	str	r3, [sp, #20]
   2d96e:	aa04      	add	r2, sp, #16
   2d970:	2302      	movs	r3, #2
   2d972:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   2d976:	9304      	str	r3, [sp, #16]
   2d978:	f00c fe37 	bl	3a5ea <z_log_msg_static_create.constprop.0>
   2d97c:	e7f2      	b.n	2d964 <gatt_notify+0x54>
				sizeof(*nfy) + params->len);
   2d97e:	89a2      	ldrh	r2, [r4, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
   2d980:	211b      	movs	r1, #27
   2d982:	3202      	adds	r2, #2
   2d984:	4630      	mov	r0, r6
   2d986:	f7fe fd0d 	bl	2c3a4 <bt_att_create_pdu>
	if (!buf) {
   2d98a:	4605      	mov	r5, r0
   2d98c:	b988      	cbnz	r0, 2d9b2 <gatt_notify+0xa2>
		BT_WARN("No buffer available to send notification");
   2d98e:	4818      	ldr	r0, [pc, #96]	; (2d9f0 <gatt_notify+0xe0>)
   2d990:	6803      	ldr	r3, [r0, #0]
   2d992:	f013 0f06 	tst.w	r3, #6
   2d996:	d102      	bne.n	2d99e <gatt_notify+0x8e>
		return -ENOMEM;
   2d998:	f06f 000b 	mvn.w	r0, #11
   2d99c:	e7ca      	b.n	2d934 <gatt_notify+0x24>
		BT_WARN("No buffer available to send notification");
   2d99e:	4b17      	ldr	r3, [pc, #92]	; (2d9fc <gatt_notify+0xec>)
   2d9a0:	9305      	str	r3, [sp, #20]
   2d9a2:	aa04      	add	r2, sp, #16
   2d9a4:	2302      	movs	r3, #2
   2d9a6:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   2d9aa:	9304      	str	r3, [sp, #16]
   2d9ac:	f00c fe1d 	bl	3a5ea <z_log_msg_static_create.constprop.0>
   2d9b0:	e7f2      	b.n	2d998 <gatt_notify+0x88>
   2d9b2:	f100 0908 	add.w	r9, r0, #8
   2d9b6:	2102      	movs	r1, #2
   2d9b8:	4648      	mov	r0, r9
   2d9ba:	f001 f867 	bl	2ea8c <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
   2d9be:	4607      	mov	r7, r0
   2d9c0:	4648      	mov	r0, r9
   2d9c2:	f827 8b02 	strh.w	r8, [r7], #2
   2d9c6:	89a1      	ldrh	r1, [r4, #12]
   2d9c8:	f001 f860 	bl	2ea8c <net_buf_simple_add>
	memcpy(nfy->value, params->data, params->len);
   2d9cc:	89a2      	ldrh	r2, [r4, #12]
   2d9ce:	68a1      	ldr	r1, [r4, #8]
   2d9d0:	4638      	mov	r0, r7
   2d9d2:	f00b fced 	bl	393b0 <memcpy>
	bt_att_set_tx_meta_data(buf, params->func, params->user_data, BT_ATT_CHAN_OPT(params));
   2d9d6:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
   2d9da:	4628      	mov	r0, r5
   2d9dc:	2301      	movs	r3, #1
   2d9de:	f00c fd34 	bl	3a44a <bt_att_set_tx_meta_data>
	return bt_att_send(conn, buf);
   2d9e2:	4629      	mov	r1, r5
   2d9e4:	4630      	mov	r0, r6
}
   2d9e6:	b007      	add	sp, #28
   2d9e8:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return bt_att_send(conn, buf);
   2d9ec:	f7ff b8b6 	b.w	2cb5c <bt_att_send>
   2d9f0:	20000a88 	.word	0x20000a88
   2d9f4:	0003e971 	.word	0x0003e971
   2d9f8:	0003e987 	.word	0x0003e987
   2d9fc:	0003ea0a 	.word	0x0003ea0a

0002da00 <bt_gatt_notify_cb>:
{
   2da00:	b530      	push	{r4, r5, lr}
   2da02:	4605      	mov	r5, r0
   2da04:	b08b      	sub	sp, #44	; 0x2c
	__ASSERT(params, "invalid parameters\n");
   2da06:	460c      	mov	r4, r1
   2da08:	b951      	cbnz	r1, 2da20 <bt_gatt_notify_cb+0x20>
   2da0a:	4940      	ldr	r1, [pc, #256]	; (2db0c <bt_gatt_notify_cb+0x10c>)
   2da0c:	4840      	ldr	r0, [pc, #256]	; (2db10 <bt_gatt_notify_cb+0x110>)
   2da0e:	f640 222b 	movw	r2, #2603	; 0xa2b
   2da12:	f00b f87e 	bl	38b12 <assert_print>
   2da16:	f640 212b 	movw	r1, #2603	; 0xa2b
	__ASSERT(params->attr || params->uuid, "invalid parameters\n");
   2da1a:	483c      	ldr	r0, [pc, #240]	; (2db0c <bt_gatt_notify_cb+0x10c>)
   2da1c:	f00b f872 	bl	38b04 <assert_post_action>
   2da20:	684b      	ldr	r3, [r1, #4]
   2da22:	b953      	cbnz	r3, 2da3a <bt_gatt_notify_cb+0x3a>
   2da24:	680b      	ldr	r3, [r1, #0]
   2da26:	b943      	cbnz	r3, 2da3a <bt_gatt_notify_cb+0x3a>
   2da28:	4938      	ldr	r1, [pc, #224]	; (2db0c <bt_gatt_notify_cb+0x10c>)
   2da2a:	4839      	ldr	r0, [pc, #228]	; (2db10 <bt_gatt_notify_cb+0x110>)
   2da2c:	f640 222c 	movw	r2, #2604	; 0xa2c
   2da30:	f00b f86f 	bl	38b12 <assert_print>
   2da34:	f640 212c 	movw	r1, #2604	; 0xa2c
   2da38:	e7ef      	b.n	2da1a <bt_gatt_notify_cb+0x1a>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   2da3a:	4836      	ldr	r0, [pc, #216]	; (2db14 <bt_gatt_notify_cb+0x114>)
   2da3c:	f00c fd88 	bl	3a550 <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   2da40:	0742      	lsls	r2, r0, #29
   2da42:	d55d      	bpl.n	2db00 <bt_gatt_notify_cb+0x100>
	if (conn && conn->state != BT_CONN_CONNECTED) {
   2da44:	b115      	cbz	r5, 2da4c <bt_gatt_notify_cb+0x4c>
   2da46:	7aab      	ldrb	r3, [r5, #10]
   2da48:	2b07      	cmp	r3, #7
   2da4a:	d15c      	bne.n	2db06 <bt_gatt_notify_cb+0x106>
	data.attr = params->attr;
   2da4c:	6860      	ldr	r0, [r4, #4]
   2da4e:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   2da50:	f7ff fb62 	bl	2d118 <bt_gatt_attr_get_handle>
	if (params->uuid) {
   2da54:	6822      	ldr	r2, [r4, #0]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   2da56:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
   2da5a:	b33a      	cbz	r2, 2daac <bt_gatt_notify_cb+0xac>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   2da5c:	a905      	add	r1, sp, #20
   2da5e:	9102      	str	r1, [sp, #8]
   2da60:	492d      	ldr	r1, [pc, #180]	; (2db18 <bt_gatt_notify_cb+0x118>)
   2da62:	9101      	str	r1, [sp, #4]
   2da64:	2101      	movs	r1, #1
	found->attr = NULL;
   2da66:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   2da68:	9100      	str	r1, [sp, #0]
   2da6a:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   2da6e:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   2da70:	f7ff fb92 	bl	2d198 <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
   2da74:	9b05      	ldr	r3, [sp, #20]
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   2da76:	b91b      	cbnz	r3, 2da80 <bt_gatt_notify_cb+0x80>
			return -ENOENT;
   2da78:	f06f 0001 	mvn.w	r0, #1
}
   2da7c:	b00b      	add	sp, #44	; 0x2c
   2da7e:	bd30      	pop	{r4, r5, pc}
		params->attr = data.attr;
   2da80:	6063      	str	r3, [r4, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   2da82:	9b05      	ldr	r3, [sp, #20]
   2da84:	6818      	ldr	r0, [r3, #0]
   2da86:	2300      	movs	r3, #0
   2da88:	f88d 3010 	strb.w	r3, [sp, #16]
   2da8c:	a904      	add	r1, sp, #16
   2da8e:	f642 0303 	movw	r3, #10243	; 0x2803
   2da92:	f8ad 3012 	strh.w	r3, [sp, #18]
   2da96:	f00b fcb4 	bl	39402 <bt_uuid_cmp>
   2da9a:	b970      	cbnz	r0, 2daba <bt_gatt_notify_cb+0xba>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   2da9c:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_NOTIFY)) {
   2da9e:	68c3      	ldr	r3, [r0, #12]
   2daa0:	799b      	ldrb	r3, [r3, #6]
   2daa2:	06db      	lsls	r3, r3, #27
   2daa4:	d405      	bmi.n	2dab2 <bt_gatt_notify_cb+0xb2>
			return -EINVAL;
   2daa6:	f06f 0015 	mvn.w	r0, #21
   2daaa:	e7e7      	b.n	2da7c <bt_gatt_notify_cb+0x7c>
		if (!data.handle) {
   2daac:	2800      	cmp	r0, #0
   2daae:	d1e8      	bne.n	2da82 <bt_gatt_notify_cb+0x82>
   2dab0:	e7e2      	b.n	2da78 <bt_gatt_notify_cb+0x78>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   2dab2:	f00c fea2 	bl	3a7fa <bt_gatt_attr_value_handle>
   2dab6:	f8ad 0018 	strh.w	r0, [sp, #24]
		return gatt_notify(conn, data.handle, params);
   2daba:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
   2dabe:	b12d      	cbz	r5, 2dacc <bt_gatt_notify_cb+0xcc>
		return gatt_notify(conn, data.handle, params);
   2dac0:	4601      	mov	r1, r0
   2dac2:	4622      	mov	r2, r4
   2dac4:	4628      	mov	r0, r5
   2dac6:	f7ff ff23 	bl	2d910 <gatt_notify>
   2daca:	e7d7      	b.n	2da7c <bt_gatt_notify_cb+0x7c>
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   2dacc:	f642 1202 	movw	r2, #10498	; 0x2902
   2dad0:	f8ad 2012 	strh.w	r2, [sp, #18]
   2dad4:	aa05      	add	r2, sp, #20
	data.err = -ENOTCONN;
   2dad6:	f06f 037f 	mvn.w	r3, #127	; 0x7f
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   2dada:	9202      	str	r2, [sp, #8]
   2dadc:	4a0f      	ldr	r2, [pc, #60]	; (2db1c <bt_gatt_notify_cb+0x11c>)
	data.err = -ENOTCONN;
   2dade:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_NOTIFY;
   2dae0:	2301      	movs	r3, #1
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   2dae2:	e9cd 3200 	strd	r3, r2, [sp]
	data.type = BT_GATT_CCC_NOTIFY;
   2dae6:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   2daea:	aa04      	add	r2, sp, #16
   2daec:	462b      	mov	r3, r5
   2daee:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.nfy_params = params;
   2daf2:	9409      	str	r4, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   2daf4:	f88d 5010 	strb.w	r5, [sp, #16]
   2daf8:	f7ff fb4e 	bl	2d198 <bt_gatt_foreach_attr_type>
	return data.err;
   2dafc:	9807      	ldr	r0, [sp, #28]
   2dafe:	e7bd      	b.n	2da7c <bt_gatt_notify_cb+0x7c>
		return -EAGAIN;
   2db00:	f06f 000a 	mvn.w	r0, #10
   2db04:	e7ba      	b.n	2da7c <bt_gatt_notify_cb+0x7c>
		return -ENOTCONN;
   2db06:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   2db0a:	e7b7      	b.n	2da7c <bt_gatt_notify_cb+0x7c>
   2db0c:	0003e8aa 	.word	0x0003e8aa
   2db10:	0003d1d7 	.word	0x0003d1d7
   2db14:	200004a8 	.word	0x200004a8
   2db18:	0003a493 	.word	0x0003a493
   2db1c:	0002db21 	.word	0x0002db21

0002db20 <notify_cb>:
{
   2db20:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   2db22:	4b41      	ldr	r3, [pc, #260]	; (2dc28 <notify_cb+0x108>)
{
   2db24:	4615      	mov	r5, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   2db26:	6882      	ldr	r2, [r0, #8]
   2db28:	429a      	cmp	r2, r3
{
   2db2a:	b087      	sub	sp, #28
   2db2c:	4607      	mov	r7, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   2db2e:	d003      	beq.n	2db38 <notify_cb+0x18>
		return BT_GATT_ITER_CONTINUE;
   2db30:	2701      	movs	r7, #1
}
   2db32:	4638      	mov	r0, r7
   2db34:	b007      	add	sp, #28
   2db36:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ccc = attr->user_data;
   2db38:	68c6      	ldr	r6, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
   2db3a:	4b3c      	ldr	r3, [pc, #240]	; (2dc2c <notify_cb+0x10c>)
   2db3c:	429e      	cmp	r6, r3
   2db3e:	d05a      	beq.n	2dbf6 <notify_cb+0xd6>
		if (cfg->value != data->type) {
   2db40:	8932      	ldrh	r2, [r6, #8]
   2db42:	89ab      	ldrh	r3, [r5, #12]
   2db44:	429a      	cmp	r2, r3
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   2db46:	f106 0101 	add.w	r1, r6, #1
		if (cfg->value != data->type) {
   2db4a:	d1f1      	bne.n	2db30 <notify_cb+0x10>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   2db4c:	7830      	ldrb	r0, [r6, #0]
   2db4e:	f7fd fb3d 	bl	2b1cc <bt_conn_lookup_addr_le>
		if (!conn) {
   2db52:	4604      	mov	r4, r0
   2db54:	2800      	cmp	r0, #0
   2db56:	d0eb      	beq.n	2db30 <notify_cb+0x10>
		if (conn->state != BT_CONN_CONNECTED) {
   2db58:	7a83      	ldrb	r3, [r0, #10]
   2db5a:	2b07      	cmp	r3, #7
   2db5c:	d005      	beq.n	2db6a <notify_cb+0x4a>
			bt_conn_unref(conn);
   2db5e:	f7fd f8d5 	bl	2ad0c <bt_conn_unref>
			continue;
   2db62:	e7e5      	b.n	2db30 <notify_cb+0x10>
			bt_conn_unref(conn);
   2db64:	f7fd f8d2 	bl	2ad0c <bt_conn_unref>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   2db68:	e7ea      	b.n	2db40 <notify_cb+0x20>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
   2db6a:	6973      	ldr	r3, [r6, #20]
   2db6c:	b123      	cbz	r3, 2db78 <notify_cb+0x58>
   2db6e:	4639      	mov	r1, r7
   2db70:	4798      	blx	r3
   2db72:	b908      	cbnz	r0, 2db78 <notify_cb+0x58>
			bt_conn_unref(conn);
   2db74:	4620      	mov	r0, r4
   2db76:	e7f2      	b.n	2db5e <notify_cb+0x3e>
		if (bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   2db78:	4639      	mov	r1, r7
   2db7a:	2294      	movs	r2, #148	; 0x94
   2db7c:	4620      	mov	r0, r4
   2db7e:	f00c fe99 	bl	3a8b4 <bt_gatt_check_perm>
   2db82:	4607      	mov	r7, r0
   2db84:	b170      	cbz	r0, 2dba4 <notify_cb+0x84>
			BT_WARN("Link is not encrypted");
   2db86:	482a      	ldr	r0, [pc, #168]	; (2dc30 <notify_cb+0x110>)
   2db88:	6803      	ldr	r3, [r0, #0]
   2db8a:	f013 0f06 	tst.w	r3, #6
   2db8e:	d0f1      	beq.n	2db74 <notify_cb+0x54>
   2db90:	4b28      	ldr	r3, [pc, #160]	; (2dc34 <notify_cb+0x114>)
   2db92:	9305      	str	r3, [sp, #20]
   2db94:	aa04      	add	r2, sp, #16
   2db96:	2302      	movs	r3, #2
   2db98:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   2db9c:	9304      	str	r3, [sp, #16]
   2db9e:	f00c fd24 	bl	3a5ea <z_log_msg_static_create.constprop.0>
   2dba2:	e7e7      	b.n	2db74 <notify_cb+0x54>
		if ((data->type == BT_GATT_CCC_INDICATE) &&
   2dba4:	89ab      	ldrh	r3, [r5, #12]
   2dba6:	2b02      	cmp	r3, #2
   2dba8:	d114      	bne.n	2dbd4 <notify_cb+0xb4>
   2dbaa:	8933      	ldrh	r3, [r6, #8]
   2dbac:	079a      	lsls	r2, r3, #30
   2dbae:	d405      	bmi.n	2dbbc <notify_cb+0x9c>
		bt_conn_unref(conn);
   2dbb0:	4620      	mov	r0, r4
   2dbb2:	f7fd f8ab 	bl	2ad0c <bt_conn_unref>
		data->err = 0;
   2dbb6:	2300      	movs	r3, #0
   2dbb8:	60ab      	str	r3, [r5, #8]
   2dbba:	e7b9      	b.n	2db30 <notify_cb+0x10>
			err = gatt_indicate(conn, data->handle, data->ind_params);
   2dbbc:	692a      	ldr	r2, [r5, #16]
   2dbbe:	88a9      	ldrh	r1, [r5, #4]
   2dbc0:	4620      	mov	r0, r4
   2dbc2:	f7ff fcbf 	bl	2d544 <gatt_indicate>
			if (err == 0) {
   2dbc6:	4606      	mov	r6, r0
   2dbc8:	b978      	cbnz	r0, 2dbea <notify_cb+0xca>
				data->ind_params->_ref++;
   2dbca:	692a      	ldr	r2, [r5, #16]
   2dbcc:	7d93      	ldrb	r3, [r2, #22]
   2dbce:	3301      	adds	r3, #1
   2dbd0:	7593      	strb	r3, [r2, #22]
		bt_conn_unref(conn);
   2dbd2:	e7ed      	b.n	2dbb0 <notify_cb+0x90>
		} else if ((data->type == BT_GATT_CCC_NOTIFY) &&
   2dbd4:	2b01      	cmp	r3, #1
   2dbd6:	d1eb      	bne.n	2dbb0 <notify_cb+0x90>
   2dbd8:	8933      	ldrh	r3, [r6, #8]
   2dbda:	07db      	lsls	r3, r3, #31
   2dbdc:	d5e8      	bpl.n	2dbb0 <notify_cb+0x90>
			err = gatt_notify(conn, data->handle, data->nfy_params);
   2dbde:	692a      	ldr	r2, [r5, #16]
   2dbe0:	88a9      	ldrh	r1, [r5, #4]
   2dbe2:	4620      	mov	r0, r4
   2dbe4:	f7ff fe94 	bl	2d910 <gatt_notify>
   2dbe8:	4606      	mov	r6, r0
		bt_conn_unref(conn);
   2dbea:	4620      	mov	r0, r4
   2dbec:	f7fd f88e 	bl	2ad0c <bt_conn_unref>
		if (err < 0) {
   2dbf0:	2e00      	cmp	r6, #0
   2dbf2:	db9e      	blt.n	2db32 <notify_cb+0x12>
   2dbf4:	e7df      	b.n	2dbb6 <notify_cb+0x96>
			if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   2dbf6:	4c10      	ldr	r4, [pc, #64]	; (2dc38 <notify_cb+0x118>)
   2dbf8:	4910      	ldr	r1, [pc, #64]	; (2dc3c <notify_cb+0x11c>)
   2dbfa:	4620      	mov	r0, r4
   2dbfc:	f00c fca0 	bl	3a540 <bt_addr_le_eq>
   2dc00:	2800      	cmp	r0, #0
   2dc02:	d19d      	bne.n	2db40 <notify_cb+0x20>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
   2dc04:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   2dc08:	2207      	movs	r2, #7
   2dc0a:	4621      	mov	r1, r4
   2dc0c:	f7fd fb2c 	bl	2b268 <bt_conn_lookup_state_le>
			if (!conn) {
   2dc10:	2800      	cmp	r0, #0
   2dc12:	d1a7      	bne.n	2db64 <notify_cb+0x44>
				sc = (struct sc_data *)data->ind_params->data;
   2dc14:	692b      	ldr	r3, [r5, #16]
				sc_save(cfg->id, &cfg->peer,
   2dc16:	f814 0c01 	ldrb.w	r0, [r4, #-1]
				sc = (struct sc_data *)data->ind_params->data;
   2dc1a:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
   2dc1c:	4621      	mov	r1, r4
   2dc1e:	8853      	ldrh	r3, [r2, #2]
   2dc20:	8812      	ldrh	r2, [r2, #0]
   2dc22:	f7ff f899 	bl	2cd58 <sc_save>
				continue;
   2dc26:	e78b      	b.n	2db40 <notify_cb+0x20>
   2dc28:	0002ce7d 	.word	0x0002ce7d
   2dc2c:	2000070c 	.word	0x2000070c
   2dc30:	20000a88 	.word	0x20000a88
   2dc34:	0003e971 	.word	0x0003e971
   2dc38:	200033e3 	.word	0x200033e3
   2dc3c:	0003dc18 	.word	0x0003dc18

0002dc40 <bt_gatt_connected>:
	}
	return 0;
}

void bt_gatt_connected(struct bt_conn *conn)
{
   2dc40:	b507      	push	{r0, r1, r2, lr}
		}

		settings_load_subtree_direct(key, ccc_set_direct, (void *)key);
	}

	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   2dc42:	4a06      	ldr	r2, [pc, #24]	; (2dc5c <bt_gatt_connected+0x1c>)
	data.conn = conn;
   2dc44:	9000      	str	r0, [sp, #0]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   2dc46:	466b      	mov	r3, sp
	data.sec = BT_SECURITY_L1;
   2dc48:	2001      	movs	r0, #1
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   2dc4a:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.sec = BT_SECURITY_L1;
   2dc4e:	f88d 0004 	strb.w	r0, [sp, #4]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   2dc52:	f00c fe20 	bl	3a896 <bt_gatt_foreach_attr>
	if (err) {
		BT_WARN("MTU Exchange failed (err %d)", err);
	}
#endif /* CONFIG_BT_GATT_AUTO_UPDATE_MTU */
#endif /* CONFIG_BT_GATT_CLIENT */
}
   2dc56:	b003      	add	sp, #12
   2dc58:	f85d fb04 	ldr.w	pc, [sp], #4
   2dc5c:	0002d811 	.word	0x0002d811

0002dc60 <bt_gatt_att_max_mtu_changed>:

void bt_gatt_att_max_mtu_changed(struct bt_conn *conn, uint16_t tx, uint16_t rx)
{
   2dc60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return list->head;
   2dc62:	4b08      	ldr	r3, [pc, #32]	; (2dc84 <bt_gatt_att_max_mtu_changed+0x24>)
   2dc64:	681c      	ldr	r4, [r3, #0]
   2dc66:	4605      	mov	r5, r0
   2dc68:	460e      	mov	r6, r1
   2dc6a:	4617      	mov	r7, r2
	struct bt_gatt_cb *cb;

	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   2dc6c:	b14c      	cbz	r4, 2dc82 <bt_gatt_att_max_mtu_changed+0x22>
		if (cb->att_mtu_updated) {
   2dc6e:	f854 3c04 	ldr.w	r3, [r4, #-4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   2dc72:	3c04      	subs	r4, #4
		if (cb->att_mtu_updated) {
   2dc74:	b11b      	cbz	r3, 2dc7e <bt_gatt_att_max_mtu_changed+0x1e>
			cb->att_mtu_updated(conn, tx, rx);
   2dc76:	463a      	mov	r2, r7
   2dc78:	4631      	mov	r1, r6
   2dc7a:	4628      	mov	r0, r5
   2dc7c:	4798      	blx	r3
	return node->next;
   2dc7e:	6864      	ldr	r4, [r4, #4]
   2dc80:	e7f4      	b.n	2dc6c <bt_gatt_att_max_mtu_changed+0xc>
		}
	}
}
   2dc82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2dc84:	20002f78 	.word	0x20002f78

0002dc88 <bt_gatt_disconnected>:

	return 0;
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
   2dc88:	b570      	push	{r4, r5, r6, lr}
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   2dc8a:	4603      	mov	r3, r0
   2dc8c:	4a0f      	ldr	r2, [pc, #60]	; (2dccc <bt_gatt_disconnected+0x44>)
{
   2dc8e:	4604      	mov	r4, r0
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   2dc90:	f64f 71ff 	movw	r1, #65535	; 0xffff
   2dc94:	2001      	movs	r0, #1
   2dc96:	f00c fdfe 	bl	3a896 <bt_gatt_foreach_attr>
	cfg = find_cf_cfg(conn);
   2dc9a:	4620      	mov	r0, r4
   2dc9c:	f7fe ffe6 	bl	2cc6c <find_cf_cfg>
	if (!cfg) {
   2dca0:	4605      	mov	r5, r0
   2dca2:	b188      	cbz	r0, 2dcc8 <bt_gatt_disconnected+0x40>
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   2dca4:	f104 0690 	add.w	r6, r4, #144	; 0x90
   2dca8:	7a20      	ldrb	r0, [r4, #8]
   2dcaa:	4631      	mov	r1, r6
   2dcac:	f00b fcc7 	bl	3963e <bt_addr_le_is_bonded>
   2dcb0:	b920      	cbnz	r0, 2dcbc <bt_gatt_disconnected+0x34>
		clear_cf_cfg(cfg);
   2dcb2:	4628      	mov	r0, r5
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
#endif
}
   2dcb4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		clear_cf_cfg(cfg);
   2dcb8:	f7ff b94a 	b.w	2cf50 <clear_cf_cfg>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   2dcbc:	4631      	mov	r1, r6
   2dcbe:	1c68      	adds	r0, r5, #1
}
   2dcc0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   2dcc4:	f00c bc59 	b.w	3a57a <bt_addr_le_copy>
}
   2dcc8:	bd70      	pop	{r4, r5, r6, pc}
   2dcca:	bf00      	nop
   2dccc:	0002cfc1 	.word	0x0002cfc1

0002dcd0 <bt_smp_accept.part.0>:
	}

	return 0;
}

static int bt_smp_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
   2dcd0:	b598      	push	{r3, r4, r7, lr}
   2dcd2:	4603      	mov	r3, r0
		*chan = &smp->chan;

		return 0;
	}

	BT_ERR("No available SMP context for conn %p", conn);
   2dcd4:	480b      	ldr	r0, [pc, #44]	; (2dd04 <bt_smp_accept.part.0+0x34>)
   2dcd6:	6802      	ldr	r2, [r0, #0]
   2dcd8:	0752      	lsls	r2, r2, #29
static int bt_smp_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
   2dcda:	af00      	add	r7, sp, #0
	BT_ERR("No available SMP context for conn %p", conn);
   2dcdc:	d00e      	beq.n	2dcfc <bt_smp_accept.part.0+0x2c>
   2dcde:	466c      	mov	r4, sp
   2dce0:	b088      	sub	sp, #32
   2dce2:	466a      	mov	r2, sp
   2dce4:	4908      	ldr	r1, [pc, #32]	; (2dd08 <bt_smp_accept.part.0+0x38>)
   2dce6:	e9c2 1305 	strd	r1, r3, [r2, #20]
   2dcea:	2303      	movs	r3, #3
   2dcec:	f842 3f10 	str.w	r3, [r2, #16]!
   2dcf0:	2300      	movs	r3, #0
   2dcf2:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   2dcf6:	f7f8 fa59 	bl	261ac <z_impl_z_log_msg_static_create>
   2dcfa:	46a5      	mov	sp, r4

	return -ENOMEM;
}
   2dcfc:	f06f 000b 	mvn.w	r0, #11
   2dd00:	46bd      	mov	sp, r7
   2dd02:	bd98      	pop	{r3, r4, r7, pc}
   2dd04:	20000a9c 	.word	0x20000a9c
   2dd08:	0003ea42 	.word	0x0003ea42

0002dd0c <bt_smp_accept>:
		if (smp->chan.conn) {
   2dd0c:	4b04      	ldr	r3, [pc, #16]	; (2dd20 <bt_smp_accept+0x14>)
   2dd0e:	681a      	ldr	r2, [r3, #0]
   2dd10:	b10a      	cbz	r2, 2dd16 <bt_smp_accept+0xa>
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
   2dd12:	f7ff bfdd 	b.w	2dcd0 <bt_smp_accept.part.0>
		smp->chan.ops = &ops;
   2dd16:	4803      	ldr	r0, [pc, #12]	; (2dd24 <bt_smp_accept+0x18>)
   2dd18:	6058      	str	r0, [r3, #4]
		*chan = &smp->chan;
   2dd1a:	600b      	str	r3, [r1, #0]
}
   2dd1c:	4610      	mov	r0, r2
   2dd1e:	4770      	bx	lr
   2dd20:	20002f80 	.word	0x20002f80
   2dd24:	0003cac0 	.word	0x0003cac0

0002dd28 <smp_init>:
		smp_free_buf(nb, zst);
	}
}

static int smp_init(const struct device *dev)
{
   2dd28:	b513      	push	{r0, r1, r4, lr}
	k_work_queue_init(&smp_work_queue);
   2dd2a:	4c08      	ldr	r4, [pc, #32]	; (2dd4c <smp_init+0x24>)
   2dd2c:	4620      	mov	r0, r4
   2dd2e:	f008 f8b9 	bl	35ea4 <k_work_queue_init>

	k_work_queue_start(&smp_work_queue, smp_work_queue_stack,
   2dd32:	4b07      	ldr	r3, [pc, #28]	; (2dd50 <smp_init+0x28>)
   2dd34:	9300      	str	r3, [sp, #0]
   2dd36:	4620      	mov	r0, r4
   2dd38:	4906      	ldr	r1, [pc, #24]	; (2dd54 <smp_init+0x2c>)
   2dd3a:	2303      	movs	r3, #3
   2dd3c:	f44f 6200 	mov.w	r2, #2048	; 0x800
   2dd40:	f008 f8c6 	bl	35ed0 <k_work_queue_start>
			   K_THREAD_STACK_SIZEOF(smp_work_queue_stack),
			   CONFIG_MCUMGR_SMP_WORKQUEUE_THREAD_PRIO, &smp_work_queue_config);

	return 0;
}
   2dd44:	2000      	movs	r0, #0
   2dd46:	b002      	add	sp, #8
   2dd48:	bd10      	pop	{r4, pc}
   2dd4a:	bf00      	nop
   2dd4c:	20002908 	.word	0x20002908
   2dd50:	0003caf8 	.word	0x0003caf8
   2dd54:	20005c80 	.word	0x20005c80

0002dd58 <smp_packet_alloc>:
	return net_buf_alloc_fixed(pool, timeout);
   2dd58:	4802      	ldr	r0, [pc, #8]	; (2dd64 <smp_packet_alloc+0xc>)
   2dd5a:	2200      	movs	r2, #0
   2dd5c:	2300      	movs	r3, #0
   2dd5e:	f00c bec2 	b.w	3aae6 <net_buf_alloc_fixed>
   2dd62:	bf00      	nop
   2dd64:	20000d24 	.word	0x20000d24

0002dd68 <smp_transport_init>:
{
   2dd68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2dd6c:	e9dd 9808 	ldrd	r9, r8, [sp, #32]
   2dd70:	4604      	mov	r4, r0
   2dd72:	461d      	mov	r5, r3
   2dd74:	460f      	mov	r7, r1
   2dd76:	4616      	mov	r6, r2
	*smpt = (struct smp_transport) {
   2dd78:	2100      	movs	r1, #0
   2dd7a:	2240      	movs	r2, #64	; 0x40
   2dd7c:	f00b fb23 	bl	393c6 <memset>
   2dd80:	e9c4 760b 	strd	r7, r6, [r4, #44]	; 0x2c
   2dd84:	e9c4 590d 	strd	r5, r9, [r4, #52]	; 0x34
	k_work_init(&smpt->work, smp_handle_reqs);
   2dd88:	4905      	ldr	r1, [pc, #20]	; (2dda0 <smp_transport_init+0x38>)
	*smpt = (struct smp_transport) {
   2dd8a:	f8c4 803c 	str.w	r8, [r4, #60]	; 0x3c
	k_work_init(&smpt->work, smp_handle_reqs);
   2dd8e:	4620      	mov	r0, r4
   2dd90:	f007 ff9a 	bl	35cc8 <k_work_init>
	z_impl_k_queue_init(queue);
   2dd94:	f104 0010 	add.w	r0, r4, #16
}
   2dd98:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2dd9c:	f00d bf53 	b.w	3bc46 <z_impl_k_queue_init>
   2dda0:	0003a9c5 	.word	0x0003a9c5

0002dda4 <smp_rx_req>:
{
   2dda4:	b510      	push	{r4, lr}
   2dda6:	4604      	mov	r4, r0
	net_buf_put(&smpt->fifo, nb);
   2dda8:	3010      	adds	r0, #16
   2ddaa:	f000 fd3f 	bl	2e82c <net_buf_put>
	k_work_submit_to_queue(&smp_work_queue, &smpt->work);
   2ddae:	4621      	mov	r1, r4
   2ddb0:	4802      	ldr	r0, [pc, #8]	; (2ddbc <smp_rx_req+0x18>)
}
   2ddb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_work_submit_to_queue(&smp_work_queue, &smpt->work);
   2ddb6:	f00d bfcb 	b.w	3bd50 <k_work_submit_to_queue>
   2ddba:	bf00      	nop
   2ddbc:	20002908 	.word	0x20002908

0002ddc0 <smp_rx_remove_invalid>:
{
   2ddc0:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (zst->query_valid_check == NULL) {
   2ddc2:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
{
   2ddc4:	b089      	sub	sp, #36	; 0x24
   2ddc6:	4604      	mov	r4, r0
   2ddc8:	460e      	mov	r6, r1
	if (zst->query_valid_check == NULL) {
   2ddca:	b303      	cbz	r3, 2de0e <smp_rx_remove_invalid+0x4e>
	if (k_work_busy_get(&zst->work) & (K_WORK_RUNNING | K_WORK_QUEUED)) {
   2ddcc:	f007 ff9c 	bl	35d08 <k_work_busy_get>
   2ddd0:	f010 0f05 	tst.w	r0, #5
   2ddd4:	d002      	beq.n	2dddc <smp_rx_remove_invalid+0x1c>
		k_work_cancel(&zst->work);
   2ddd6:	4620      	mov	r0, r4
   2ddd8:	f008 f816 	bl	35e08 <k_work_cancel>
   2dddc:	a801      	add	r0, sp, #4
   2ddde:	f00d ff32 	bl	3bc46 <z_impl_k_queue_init>
	while ((nb = net_buf_get(&zst->fifo, K_NO_WAIT)) != NULL) {
   2dde2:	f104 0710 	add.w	r7, r4, #16
   2dde6:	2200      	movs	r2, #0
   2dde8:	2300      	movs	r3, #0
   2ddea:	4638      	mov	r0, r7
   2ddec:	f000 fc16 	bl	2e61c <net_buf_get>
   2ddf0:	4605      	mov	r5, r0
   2ddf2:	b970      	cbnz	r0, 2de12 <smp_rx_remove_invalid+0x52>
	while ((nb = net_buf_get(&temp_fifo, K_NO_WAIT)) != NULL) {
   2ddf4:	2200      	movs	r2, #0
   2ddf6:	2300      	movs	r3, #0
   2ddf8:	a801      	add	r0, sp, #4
   2ddfa:	f000 fc0f 	bl	2e61c <net_buf_get>
   2ddfe:	4601      	mov	r1, r0
   2de00:	b9a8      	cbnz	r0, 2de2e <smp_rx_remove_invalid+0x6e>
	if (!k_fifo_is_empty(&zst->fifo)) {
   2de02:	6923      	ldr	r3, [r4, #16]
   2de04:	b11b      	cbz	r3, 2de0e <smp_rx_remove_invalid+0x4e>
		k_work_submit_to_queue(&smp_work_queue, &zst->work);
   2de06:	480c      	ldr	r0, [pc, #48]	; (2de38 <smp_rx_remove_invalid+0x78>)
   2de08:	4621      	mov	r1, r4
   2de0a:	f00d ffa1 	bl	3bd50 <k_work_submit_to_queue>
}
   2de0e:	b009      	add	sp, #36	; 0x24
   2de10:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (!zst->query_valid_check(nb, arg)) {
   2de12:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   2de14:	4631      	mov	r1, r6
   2de16:	4798      	blx	r3
   2de18:	b920      	cbnz	r0, 2de24 <smp_rx_remove_invalid+0x64>
			smp_free_buf(nb, zst);
   2de1a:	4621      	mov	r1, r4
   2de1c:	4628      	mov	r0, r5
   2de1e:	f00c fdfe 	bl	3aa1e <smp_free_buf>
   2de22:	e7e0      	b.n	2dde6 <smp_rx_remove_invalid+0x26>
			net_buf_put(&temp_fifo, nb);
   2de24:	4629      	mov	r1, r5
   2de26:	a801      	add	r0, sp, #4
   2de28:	f000 fd00 	bl	2e82c <net_buf_put>
   2de2c:	e7db      	b.n	2dde6 <smp_rx_remove_invalid+0x26>
		net_buf_put(&zst->fifo, nb);
   2de2e:	4638      	mov	r0, r7
   2de30:	f000 fcfc 	bl	2e82c <net_buf_put>
   2de34:	e7de      	b.n	2ddf4 <smp_rx_remove_invalid+0x34>
   2de36:	bf00      	nop
   2de38:	20002908 	.word	0x20002908

0002de3c <conn_param_data_get>:

/* Helper function that returns conn_param_data associated with a conn. */
static struct conn_param_data *conn_param_data_get(const struct bt_conn *conn)
{
	for (size_t i = 0; i < ARRAY_SIZE(conn_data); i++) {
		if (conn_data[i].conn == conn) {
   2de3c:	4b03      	ldr	r3, [pc, #12]	; (2de4c <conn_param_data_get+0x10>)
   2de3e:	681a      	ldr	r2, [r3, #0]
			return &conn_data[i];
		}
	}

	return NULL;
}
   2de40:	4282      	cmp	r2, r0
   2de42:	bf0c      	ite	eq
   2de44:	4618      	moveq	r0, r3
   2de46:	2000      	movne	r0, #0
   2de48:	4770      	bx	lr
   2de4a:	bf00      	nop
   2de4c:	200029a8 	.word	0x200029a8

0002de50 <smp_bt_init>:
static int smp_bt_init(const struct device *dev)
{
	uint8_t i = 0;
	ARG_UNUSED(dev);

	next_id = 1;
   2de50:	4b0c      	ldr	r3, [pc, #48]	; (2de84 <smp_bt_init+0x34>)
{
   2de52:	b513      	push	{r0, r1, r4, lr}
	/* Register BT callbacks */
	static struct bt_conn_cb conn_callbacks = {
		.connected = connected,
		.disconnected = disconnected,
	};
	bt_conn_cb_register(&conn_callbacks);
   2de54:	480c      	ldr	r0, [pc, #48]	; (2de88 <smp_bt_init+0x38>)
	next_id = 1;
   2de56:	2401      	movs	r4, #1
   2de58:	701c      	strb	r4, [r3, #0]
	bt_conn_cb_register(&conn_callbacks);
   2de5a:	f7fd f995 	bl	2b188 <bt_conn_cb_register>
	return z_impl_k_sem_init(sem, initial_count, limit);
   2de5e:	2100      	movs	r1, #0
   2de60:	4622      	mov	r2, r4
   2de62:	480a      	ldr	r0, [pc, #40]	; (2de8c <smp_bt_init+0x3c>)
   2de64:	f00d ff11 	bl	3bc8a <z_impl_k_sem_init>
	while (i < CONFIG_BT_MAX_CONN) {
		k_sem_init(&conn_data[i].smp_notify_sem, 0, 1);
		++i;
	}

	smp_transport_init(&smp_bt_transport, smp_bt_tx_pkt,
   2de68:	4b09      	ldr	r3, [pc, #36]	; (2de90 <smp_bt_init+0x40>)
   2de6a:	9301      	str	r3, [sp, #4]
   2de6c:	4b09      	ldr	r3, [pc, #36]	; (2de94 <smp_bt_init+0x44>)
   2de6e:	9300      	str	r3, [sp, #0]
   2de70:	4a09      	ldr	r2, [pc, #36]	; (2de98 <smp_bt_init+0x48>)
   2de72:	4b0a      	ldr	r3, [pc, #40]	; (2de9c <smp_bt_init+0x4c>)
   2de74:	490a      	ldr	r1, [pc, #40]	; (2dea0 <smp_bt_init+0x50>)
   2de76:	480b      	ldr	r0, [pc, #44]	; (2dea4 <smp_bt_init+0x54>)
   2de78:	f7ff ff76 	bl	2dd68 <smp_transport_init>
			   smp_bt_get_mtu, smp_bt_ud_copy,
			   smp_bt_ud_free, smp_bt_query_valid_check);
	return 0;
}
   2de7c:	2000      	movs	r0, #0
   2de7e:	b002      	add	sp, #8
   2de80:	bd10      	pop	{r4, pc}
   2de82:	bf00      	nop
   2de84:	200034b3 	.word	0x200034b3
   2de88:	2000073c 	.word	0x2000073c
   2de8c:	20002a14 	.word	0x20002a14
   2de90:	0003aa55 	.word	0x0003aa55
   2de94:	0003aa3b 	.word	0x0003aa3b
   2de98:	0003aa7b 	.word	0x0003aa7b
   2de9c:	0003aa47 	.word	0x0003aa47
   2dea0:	0002dea9 	.word	0x0002dea9
   2dea4:	20003014 	.word	0x20003014

0002dea8 <smp_bt_tx_pkt>:
{
   2dea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2deac:	b08f      	sub	sp, #60	; 0x3c
   2deae:	4604      	mov	r4, r0
	struct bt_gatt_notify_params notify_param = {
   2deb0:	2218      	movs	r2, #24
   2deb2:	2100      	movs	r1, #0
   2deb4:	4668      	mov	r0, sp
   2deb6:	f00b fa86 	bl	393c6 <memset>
   2deba:	4b3b      	ldr	r3, [pc, #236]	; (2dfa8 <smp_bt_tx_pkt+0x100>)
   2debc:	9301      	str	r3, [sp, #4]
	if (!ud->conn) {
   2debe:	f8d4 9014 	ldr.w	r9, [r4, #20]
	struct bt_gatt_notify_params notify_param = {
   2dec2:	68a3      	ldr	r3, [r4, #8]
   2dec4:	9302      	str	r3, [sp, #8]
   2dec6:	4b39      	ldr	r3, [pc, #228]	; (2dfac <smp_bt_tx_pkt+0x104>)
   2dec8:	9304      	str	r3, [sp, #16]
	if (conn == NULL) {
   2deca:	f1b9 0f00 	cmp.w	r9, #0
   2dece:	d10b      	bne.n	2dee8 <smp_bt_tx_pkt+0x40>
		rc = MGMT_ERR_ENOENT;
   2ded0:	2605      	movs	r6, #5
	smp_bt_ud_free(net_buf_user_data(nb));
   2ded2:	f104 0014 	add.w	r0, r4, #20
   2ded6:	f00c fdb0 	bl	3aa3a <smp_bt_ud_free>
	smp_packet_free(nb);
   2deda:	4620      	mov	r0, r4
   2dedc:	f00c fd89 	bl	3a9f2 <smp_packet_free>
}
   2dee0:	4630      	mov	r0, r6
   2dee2:	b00f      	add	sp, #60	; 0x3c
   2dee4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	rc = bt_conn_get_info(conn, &info);
   2dee8:	a906      	add	r1, sp, #24
   2deea:	4648      	mov	r0, r9
   2deec:	f7fd f9de 	bl	2b2ac <bt_conn_get_info>
	if (rc != 0 || info.state != BT_CONN_STATE_CONNECTED) {
   2def0:	4606      	mov	r6, r0
   2def2:	2800      	cmp	r0, #0
   2def4:	d1ec      	bne.n	2ded0 <smp_bt_tx_pkt+0x28>
   2def6:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
   2defa:	2b02      	cmp	r3, #2
   2defc:	d1e8      	bne.n	2ded0 <smp_bt_tx_pkt+0x28>
	mtu_size = smp_bt_get_mtu(nb);
   2defe:	4620      	mov	r0, r4
   2df00:	f00c fdbb 	bl	3aa7a <smp_bt_get_mtu>
	if (mtu_size == 0U) {
   2df04:	4605      	mov	r5, r0
   2df06:	b908      	cbnz	r0, 2df0c <smp_bt_tx_pkt+0x64>
		rc = MGMT_ERR_EUNKNOWN;
   2df08:	2601      	movs	r6, #1
   2df0a:	e7e2      	b.n	2ded2 <smp_bt_tx_pkt+0x2a>
	cpd = conn_param_data_get(conn);
   2df0c:	4648      	mov	r0, r9
   2df0e:	f7ff ff95 	bl	2de3c <conn_param_data_get>
	if (cpd == NULL || cpd->id == 0 || cpd->id != ud->id) {
   2df12:	4607      	mov	r7, r0
   2df14:	2800      	cmp	r0, #0
   2df16:	d0db      	beq.n	2ded0 <smp_bt_tx_pkt+0x28>
   2df18:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
   2df1c:	2b00      	cmp	r3, #0
   2df1e:	d0d7      	beq.n	2ded0 <smp_bt_tx_pkt+0x28>
   2df20:	7e22      	ldrb	r2, [r4, #24]
   2df22:	429a      	cmp	r2, r3
   2df24:	d1d4      	bne.n	2ded0 <smp_bt_tx_pkt+0x28>
	k_sem_reset(&cpd->smp_notify_sem);
   2df26:	f100 0a6c 	add.w	sl, r0, #108	; 0x6c
	z_impl_k_sem_reset(sem);
   2df2a:	4650      	mov	r0, sl
   2df2c:	f007 fcd6 	bl	358dc <z_impl_k_sem_reset>
	bool sent = false;
   2df30:	46b3      	mov	fp, r6
	uint16_t off = 0;
   2df32:	46b0      	mov	r8, r6
	while (off < nb->len) {
   2df34:	89a3      	ldrh	r3, [r4, #12]
   2df36:	4543      	cmp	r3, r8
   2df38:	d9cb      	bls.n	2ded2 <smp_bt_tx_pkt+0x2a>
		if (cpd->id == 0 || cpd->id != ud->id) {
   2df3a:	f897 2069 	ldrb.w	r2, [r7, #105]	; 0x69
   2df3e:	2a00      	cmp	r2, #0
   2df40:	d0c6      	beq.n	2ded0 <smp_bt_tx_pkt+0x28>
   2df42:	7e21      	ldrb	r1, [r4, #24]
   2df44:	4291      	cmp	r1, r2
   2df46:	d1c3      	bne.n	2ded0 <smp_bt_tx_pkt+0x28>
		if ((off + mtu_size) > nb->len) {
   2df48:	eb08 0205 	add.w	r2, r8, r5
   2df4c:	429a      	cmp	r2, r3
			mtu_size = nb->len - off;
   2df4e:	bfc4      	itt	gt
   2df50:	eba3 0308 	subgt.w	r3, r3, r8
   2df54:	b29d      	uxthgt	r5, r3
		rc = bt_gatt_notify_cb(conn, &notify_param);
   2df56:	4669      	mov	r1, sp
   2df58:	4648      	mov	r0, r9
		notify_param.len = mtu_size;
   2df5a:	f8ad 500c 	strh.w	r5, [sp, #12]
		rc = bt_gatt_notify_cb(conn, &notify_param);
   2df5e:	f7ff fd4f 	bl	2da00 <bt_gatt_notify_cb>
		if (rc == -ENOMEM) {
   2df62:	f110 0f0c 	cmn.w	r0, #12
   2df66:	d109      	bne.n	2df7c <smp_bt_tx_pkt+0xd4>
			if (sent == false) {
   2df68:	f1bb 0f00 	cmp.w	fp, #0
   2df6c:	d103      	bne.n	2df76 <smp_bt_tx_pkt+0xce>
				if (mtu_size < SMP_BT_MINIMUM_MTU_SEND_FAILURE) {
   2df6e:	2d13      	cmp	r5, #19
   2df70:	d918      	bls.n	2dfa4 <smp_bt_tx_pkt+0xfc>
				mtu_size /= 2;
   2df72:	f3c5 054f 	ubfx	r5, r5, #1, #16
	z_impl_k_yield();
   2df76:	f008 ff97 	bl	36ea8 <z_impl_k_yield>
}
   2df7a:	e7db      	b.n	2df34 <smp_bt_tx_pkt+0x8c>
		} else if (rc == 0) {
   2df7c:	2800      	cmp	r0, #0
   2df7e:	d1c3      	bne.n	2df08 <smp_bt_tx_pkt+0x60>
			notify_param.data = &nb->data[off];
   2df80:	68a2      	ldr	r2, [r4, #8]
			off += mtu_size;
   2df82:	eb08 0305 	add.w	r3, r8, r5
   2df86:	fa1f f883 	uxth.w	r8, r3
			notify_param.data = &nb->data[off];
   2df8a:	fa12 f383 	uxtah	r3, r2, r3
   2df8e:	9302      	str	r3, [sp, #8]
	return z_impl_k_sem_take(sem, timeout);
   2df90:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2df94:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2df98:	4650      	mov	r0, sl
   2df9a:	f007 fc3f 	bl	3581c <z_impl_k_sem_take>
			sent = true;
   2df9e:	f04f 0b01 	mov.w	fp, #1
   2dfa2:	e7c7      	b.n	2df34 <smp_bt_tx_pkt+0x8c>
					rc = MGMT_ERR_ENOMEM;
   2dfa4:	2602      	movs	r6, #2
   2dfa6:	e794      	b.n	2ded2 <smp_bt_tx_pkt+0x2a>
   2dfa8:	20000778 	.word	0x20000778
   2dfac:	0003aa8b 	.word	0x0003aa8b

0002dfb0 <smp_bt_chr_write>:
{
   2dfb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2dfb4:	af00      	add	r7, sp, #0
   2dfb6:	4680      	mov	r8, r0
   2dfb8:	4691      	mov	r9, r2
   2dfba:	461c      	mov	r4, r3
	struct conn_param_data *cpd = conn_param_data_get(conn);
   2dfbc:	f7ff ff3e 	bl	2de3c <conn_param_data_get>
	if (cpd == NULL) {
   2dfc0:	4606      	mov	r6, r0
   2dfc2:	b9b8      	cbnz	r0, 2dff4 <smp_bt_chr_write+0x44>
		LOG_ERR("Null cpd object for connection %p", (void *)conn);
   2dfc4:	481b      	ldr	r0, [pc, #108]	; (2e034 <smp_bt_chr_write+0x84>)
   2dfc6:	6803      	ldr	r3, [r0, #0]
   2dfc8:	075b      	lsls	r3, r3, #29
   2dfca:	d00e      	beq.n	2dfea <smp_bt_chr_write+0x3a>
   2dfcc:	466c      	mov	r4, sp
   2dfce:	b088      	sub	sp, #32
   2dfd0:	466a      	mov	r2, sp
   2dfd2:	4b19      	ldr	r3, [pc, #100]	; (2e038 <smp_bt_chr_write+0x88>)
   2dfd4:	e9c2 3805 	strd	r3, r8, [r2, #20]
   2dfd8:	2303      	movs	r3, #3
   2dfda:	f842 3f10 	str.w	r3, [r2, #16]!
   2dfde:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   2dfe2:	4633      	mov	r3, r6
   2dfe4:	f7f8 f8e2 	bl	261ac <z_impl_z_log_msg_static_create>
   2dfe8:	46a5      	mov	sp, r4
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   2dfea:	f06f 0010 	mvn.w	r0, #16
}
   2dfee:	46bd      	mov	sp, r7
   2dff0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	nb = smp_packet_alloc();
   2dff4:	f7ff feb0 	bl	2dd58 <smp_packet_alloc>
	if (!nb) {
   2dff8:	4605      	mov	r5, r0
   2dffa:	2800      	cmp	r0, #0
   2dffc:	d0f5      	beq.n	2dfea <smp_bt_chr_write+0x3a>
	return net_buf_simple_tailroom(&buf->b);
   2dffe:	f100 0a08 	add.w	sl, r0, #8
   2e002:	4650      	mov	r0, sl
   2e004:	f00c fd80 	bl	3ab08 <net_buf_simple_tailroom>
	if (net_buf_tailroom(nb) < len) {
   2e008:	4284      	cmp	r4, r0
   2e00a:	d903      	bls.n	2e014 <smp_bt_chr_write+0x64>
		smp_packet_free(nb);
   2e00c:	4628      	mov	r0, r5
   2e00e:	f00c fcf0 	bl	3a9f2 <smp_packet_free>
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   2e012:	e7ea      	b.n	2dfea <smp_bt_chr_write+0x3a>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   2e014:	4622      	mov	r2, r4
   2e016:	4649      	mov	r1, r9
   2e018:	4650      	mov	r0, sl
   2e01a:	f00c fd7d 	bl	3ab18 <net_buf_simple_add_mem>
	ud->conn = conn;
   2e01e:	f8c5 8014 	str.w	r8, [r5, #20]
	ud->id = cpd->id;
   2e022:	f896 3069 	ldrb.w	r3, [r6, #105]	; 0x69
	smp_rx_req(&smp_bt_transport, nb);
   2e026:	4805      	ldr	r0, [pc, #20]	; (2e03c <smp_bt_chr_write+0x8c>)
	ud->id = cpd->id;
   2e028:	762b      	strb	r3, [r5, #24]
	smp_rx_req(&smp_bt_transport, nb);
   2e02a:	4629      	mov	r1, r5
   2e02c:	f7ff feba 	bl	2dda4 <smp_rx_req>
	return len;
   2e030:	4620      	mov	r0, r4
   2e032:	e7dc      	b.n	2dfee <smp_bt_chr_write+0x3e>
   2e034:	20000adc 	.word	0x20000adc
   2e038:	0003ea84 	.word	0x0003ea84
   2e03c:	20003014 	.word	0x20003014

0002e040 <disconnected.part.0>:
static void disconnected(struct bt_conn *conn, uint8_t reason)
   2e040:	b598      	push	{r3, r4, r7, lr}
   2e042:	4603      	mov	r3, r0
		LOG_ERR("Null cpd object for connection %p", (void *)conn);
   2e044:	480a      	ldr	r0, [pc, #40]	; (2e070 <disconnected.part.0+0x30>)
   2e046:	6802      	ldr	r2, [r0, #0]
   2e048:	0752      	lsls	r2, r2, #29
static void disconnected(struct bt_conn *conn, uint8_t reason)
   2e04a:	af00      	add	r7, sp, #0
		LOG_ERR("Null cpd object for connection %p", (void *)conn);
   2e04c:	d00e      	beq.n	2e06c <disconnected.part.0+0x2c>
   2e04e:	466c      	mov	r4, sp
   2e050:	b088      	sub	sp, #32
   2e052:	466a      	mov	r2, sp
   2e054:	4907      	ldr	r1, [pc, #28]	; (2e074 <disconnected.part.0+0x34>)
   2e056:	e9c2 1305 	strd	r1, r3, [r2, #20]
   2e05a:	2303      	movs	r3, #3
   2e05c:	f842 3f10 	str.w	r3, [r2, #16]!
   2e060:	2300      	movs	r3, #0
   2e062:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   2e066:	f7f8 f8a1 	bl	261ac <z_impl_z_log_msg_static_create>
   2e06a:	46a5      	mov	sp, r4
}
   2e06c:	46bd      	mov	sp, r7
   2e06e:	bd98      	pop	{r3, r4, r7, pc}
   2e070:	20000adc 	.word	0x20000adc
   2e074:	0003ea84 	.word	0x0003ea84

0002e078 <disconnected>:
{
   2e078:	b538      	push	{r3, r4, r5, lr}
   2e07a:	4605      	mov	r5, r0
	struct conn_param_data *cpd = conn_param_data_get(conn);
   2e07c:	f7ff fede 	bl	2de3c <conn_param_data_get>
	smp_rx_remove_invalid(&smp_bt_transport, (void *)conn);
   2e080:	4629      	mov	r1, r5
	struct conn_param_data *cpd = conn_param_data_get(conn);
   2e082:	4604      	mov	r4, r0
	smp_rx_remove_invalid(&smp_bt_transport, (void *)conn);
   2e084:	4809      	ldr	r0, [pc, #36]	; (2e0ac <disconnected+0x34>)
   2e086:	f7ff fe9b 	bl	2ddc0 <smp_rx_remove_invalid>
	if (cpd != NULL) {
   2e08a:	b14c      	cbz	r4, 2e0a0 <disconnected+0x28>
		cpd->conn = NULL;
   2e08c:	4620      	mov	r0, r4
		cpd->id = 0;
   2e08e:	2300      	movs	r3, #0
   2e090:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
		cpd->conn = NULL;
   2e094:	f840 3b6c 	str.w	r3, [r0], #108
}
   2e098:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_sem_give(sem);
   2e09c:	f007 bb84 	b.w	357a8 <z_impl_k_sem_give>
   2e0a0:	4628      	mov	r0, r5
   2e0a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   2e0a6:	f7ff bfcb 	b.w	2e040 <disconnected.part.0>
   2e0aa:	bf00      	nop
   2e0ac:	20003014 	.word	0x20003014

0002e0b0 <connected>:
{
   2e0b0:	b508      	push	{r3, lr}
	if (err == 0) {
   2e0b2:	b9e1      	cbnz	r1, 2e0ee <connected+0x3e>
		if (conn_data[i].conn == NULL) {
   2e0b4:	4a0e      	ldr	r2, [pc, #56]	; (2e0f0 <connected+0x40>)
   2e0b6:	6813      	ldr	r3, [r2, #0]
   2e0b8:	b143      	cbz	r3, 2e0cc <connected+0x1c>
	__ASSERT_NO_MSG(false);
   2e0ba:	490e      	ldr	r1, [pc, #56]	; (2e0f4 <connected+0x44>)
   2e0bc:	480e      	ldr	r0, [pc, #56]	; (2e0f8 <connected+0x48>)
   2e0be:	228b      	movs	r2, #139	; 0x8b
   2e0c0:	f00a fd27 	bl	38b12 <assert_print>
   2e0c4:	480b      	ldr	r0, [pc, #44]	; (2e0f4 <connected+0x44>)
   2e0c6:	218b      	movs	r1, #139	; 0x8b
   2e0c8:	f00a fd1c 	bl	38b04 <assert_post_action>
				conn_data[i].id = next_id;
   2e0cc:	490b      	ldr	r1, [pc, #44]	; (2e0fc <connected+0x4c>)
			conn_data[i].conn = conn;
   2e0ce:	6010      	str	r0, [r2, #0]
				conn_data[i].id = next_id;
   2e0d0:	780b      	ldrb	r3, [r1, #0]
   2e0d2:	f882 3069 	strb.w	r3, [r2, #105]	; 0x69
				++next_id;
   2e0d6:	3301      	adds	r3, #1
   2e0d8:	b2db      	uxtb	r3, r3
   2e0da:	2b01      	cmp	r3, #1
   2e0dc:	bf38      	it	cc
   2e0de:	2301      	movcc	r3, #1
   2e0e0:	700b      	strb	r3, [r1, #0]
}
   2e0e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_impl_k_sem_reset(sem);
   2e0e6:	f102 006c 	add.w	r0, r2, #108	; 0x6c
   2e0ea:	f007 bbf7 	b.w	358dc <z_impl_k_sem_reset>
   2e0ee:	bd08      	pop	{r3, pc}
   2e0f0:	200029a8 	.word	0x200029a8
   2e0f4:	0003eaa6 	.word	0x0003eaa6
   2e0f8:	0003d1d7 	.word	0x0003d1d7
   2e0fc:	200034b3 	.word	0x200034b3

0002e100 <mgmt_find_handler>:
	(void)sys_slist_find_and_remove(&mgmt_group_list, &group->node);
}

const struct mgmt_handler *
mgmt_find_handler(uint16_t group_id, uint16_t command_id)
{
   2e100:	b570      	push	{r4, r5, r6, lr}
	return list->head;
   2e102:	4b10      	ldr	r3, [pc, #64]	; (2e144 <mgmt_find_handler+0x44>)
   2e104:	4605      	mov	r5, r0
   2e106:	6818      	ldr	r0, [r3, #0]
Z_GENLIST_PEEK_NEXT(slist, snode)
   2e108:	b118      	cbz	r0, 2e112 <mgmt_find_handler+0x12>
	return node->next;
   2e10a:	6802      	ldr	r2, [r0, #0]
		if (loop_group->mg_group_id == group_id) {
			if (command_id >= loop_group->mg_handlers_count) {
				break;
			}

			if (!loop_group->mg_handlers[command_id].mh_read &&
   2e10c:	00cc      	lsls	r4, r1, #3
	SYS_SLIST_FOR_EACH_NODE_SAFE(&mgmt_group_list, snp, sns) {
   2e10e:	b910      	cbnz	r0, 2e116 <mgmt_find_handler+0x16>
	if (group == NULL) {
		return NULL;
	}

	return &group->mg_handlers[command_id];
}
   2e110:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_PEEK_NEXT(slist, snode)
   2e112:	4602      	mov	r2, r0
   2e114:	e7fa      	b.n	2e10c <mgmt_find_handler+0xc>
		if (loop_group->mg_group_id == group_id) {
   2e116:	8943      	ldrh	r3, [r0, #10]
   2e118:	42ab      	cmp	r3, r5
   2e11a:	d108      	bne.n	2e12e <mgmt_find_handler+0x2e>
			if (command_id >= loop_group->mg_handlers_count) {
   2e11c:	8903      	ldrh	r3, [r0, #8]
   2e11e:	428b      	cmp	r3, r1
   2e120:	d90c      	bls.n	2e13c <mgmt_find_handler+0x3c>
			if (!loop_group->mg_handlers[command_id].mh_read &&
   2e122:	6843      	ldr	r3, [r0, #4]
   2e124:	591e      	ldr	r6, [r3, r4]
   2e126:	1918      	adds	r0, r3, r4
   2e128:	b956      	cbnz	r6, 2e140 <mgmt_find_handler+0x40>
   2e12a:	6840      	ldr	r0, [r0, #4]
   2e12c:	b940      	cbnz	r0, 2e140 <mgmt_find_handler+0x40>
   2e12e:	b11a      	cbz	r2, 2e138 <mgmt_find_handler+0x38>
	return node->next;
   2e130:	6813      	ldr	r3, [r2, #0]
Z_GENLIST_PEEK_NEXT(slist, snode)
   2e132:	4610      	mov	r0, r2
   2e134:	461a      	mov	r2, r3
   2e136:	e7ea      	b.n	2e10e <mgmt_find_handler+0xe>
   2e138:	4613      	mov	r3, r2
   2e13a:	e7fa      	b.n	2e132 <mgmt_find_handler+0x32>
		return NULL;
   2e13c:	2000      	movs	r0, #0
   2e13e:	e7e7      	b.n	2e110 <mgmt_find_handler+0x10>
	return &group->mg_handlers[command_id];
   2e140:	1918      	adds	r0, r3, r4
   2e142:	e7e5      	b.n	2e110 <mgmt_find_handler+0x10>
   2e144:	20003054 	.word	0x20003054

0002e148 <mgmt_evt>:
	evt_cb = cb;
}

void
mgmt_evt(uint8_t opcode, uint16_t group, uint8_t id, void *arg)
{
   2e148:	b410      	push	{r4}
	if (evt_cb) {
   2e14a:	4c04      	ldr	r4, [pc, #16]	; (2e15c <mgmt_evt+0x14>)
   2e14c:	6824      	ldr	r4, [r4, #0]
   2e14e:	b114      	cbz	r4, 2e156 <mgmt_evt+0xe>
		evt_cb(opcode, group, id, arg);
   2e150:	46a4      	mov	ip, r4
	}
}
   2e152:	bc10      	pop	{r4}
		evt_cb(opcode, group, id, arg);
   2e154:	4760      	bx	ip
}
   2e156:	bc10      	pop	{r4}
   2e158:	4770      	bx	lr
   2e15a:	bf00      	nop
   2e15c:	2000305c 	.word	0x2000305c

0002e160 <smp_process_request_packet>:
 *         is not enough bytes to process header, or other MGMT_ERR_[...] code on
 *         failure.
 */
int
smp_process_request_packet(struct smp_streamer *streamer, void *vreq)
{
   2e160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2e164:	4607      	mov	r7, r0
   2e166:	b08b      	sub	sp, #44	; 0x2c
   2e168:	4688      	mov	r8, r1
	return net_buf_simple_pull(&buf->b, len);
   2e16a:	f101 0a08 	add.w	sl, r1, #8
	int rc = 0;
	const char *rsn = NULL;

	rsp = NULL;

	while (req->len > 0) {
   2e16e:	f8b8 400c 	ldrh.w	r4, [r8, #12]
   2e172:	b944      	cbnz	r4, 2e186 <smp_process_request_packet+0x26>
		}

		return rc;
	}

	smp_free_buf(req, streamer->smpt);
   2e174:	6839      	ldr	r1, [r7, #0]
   2e176:	4640      	mov	r0, r8
   2e178:	f00c fc51 	bl	3aa1e <smp_free_buf>
	smp_free_buf(rsp, streamer->smpt);
   2e17c:	6839      	ldr	r1, [r7, #0]
   2e17e:	2000      	movs	r0, #0
   2e180:	f00c fc4d 	bl	3aa1e <smp_free_buf>

	return rc;
   2e184:	e07e      	b.n	2e284 <smp_process_request_packet+0x124>
	if (nb->len < sizeof(*dst_hdr)) {
   2e186:	2c07      	cmp	r4, #7
   2e188:	f240 8115 	bls.w	2e3b6 <smp_process_request_packet+0x256>
	memcpy(dst_hdr, nb->data, sizeof(*dst_hdr));
   2e18c:	2208      	movs	r2, #8
   2e18e:	f8d8 1008 	ldr.w	r1, [r8, #8]
   2e192:	a804      	add	r0, sp, #16
   2e194:	f00b f90c 	bl	393b0 <memcpy>
		mgmt_ntoh_hdr(&req_hdr);
   2e198:	a804      	add	r0, sp, #16
   2e19a:	f00c fc80 	bl	3aa9e <mgmt_ntoh_hdr>
		if (req->len < (req_hdr.nh_len + MGMT_HDR_SIZE)) {
   2e19e:	f8bd 3012 	ldrh.w	r3, [sp, #18]
   2e1a2:	f8b8 200c 	ldrh.w	r2, [r8, #12]
   2e1a6:	3307      	adds	r3, #7
   2e1a8:	4293      	cmp	r3, r2
   2e1aa:	f280 8106 	bge.w	2e3ba <smp_process_request_packet+0x25a>
		rsp = smp_alloc_rsp(req, streamer->smpt);
   2e1ae:	6839      	ldr	r1, [r7, #0]
   2e1b0:	4640      	mov	r0, r8
   2e1b2:	f00c fc20 	bl	3a9f6 <smp_alloc_rsp>
		if (rsp == NULL) {
   2e1b6:	4681      	mov	r9, r0
   2e1b8:	2800      	cmp	r0, #0
   2e1ba:	f000 8101 	beq.w	2e3c0 <smp_process_request_packet+0x260>
   2e1be:	2108      	movs	r1, #8
   2e1c0:	4650      	mov	r0, sl
		cbor_nb_reader_init(streamer->reader, req);
   2e1c2:	687c      	ldr	r4, [r7, #4]
   2e1c4:	f000 fc2e 	bl	2ea24 <net_buf_simple_pull>
   2e1c8:	4602      	mov	r2, r0
	cnr->nb = nb;
   2e1ca:	4620      	mov	r0, r4
	zcbor_new_decode_state(cnr->zs, ARRAY_SIZE(cnr->zs), new_ptr,
   2e1cc:	2101      	movs	r1, #1
	cnr->nb = nb;
   2e1ce:	f840 8b04 	str.w	r8, [r0], #4
	zcbor_new_decode_state(cnr->zs, ARRAY_SIZE(cnr->zs), new_ptr,
   2e1d2:	f8b8 300c 	ldrh.w	r3, [r8, #12]
   2e1d6:	9100      	str	r1, [sp, #0]
   2e1d8:	2104      	movs	r1, #4
   2e1da:	f00d fc3c 	bl	3ba56 <zcbor_new_decode_state>
		cbor_nb_writer_init(streamer->writer, rsp);
   2e1de:	68b8      	ldr	r0, [r7, #8]
   2e1e0:	4649      	mov	r1, r9
   2e1e2:	f00c fc65 	bl	3aab0 <cbor_nb_writer_init>
	struct cbor_nb_reader *nbr = streamer->reader;
   2e1e6:	e9d7 3601 	ldrd	r3, r6, [r7, #4]
	handler = mgmt_find_handler(req_hdr->nh_group, req_hdr->nh_id);
   2e1ea:	f89d 1017 	ldrb.w	r1, [sp, #23]
   2e1ee:	f8bd 0014 	ldrh.w	r0, [sp, #20]
	cbuf.cnbd = nbr;
   2e1f2:	e9cd 6306 	strd	r6, r3, [sp, #24]
	handler = mgmt_find_handler(req_hdr->nh_group, req_hdr->nh_id);
   2e1f6:	f7ff ff83 	bl	2e100 <mgmt_find_handler>
	if (handler == NULL) {
   2e1fa:	4605      	mov	r5, r0
   2e1fc:	2800      	cmp	r0, #0
   2e1fe:	f000 8097 	beq.w	2e330 <smp_process_request_packet+0x1d0>
	switch (req_hdr->nh_op) {
   2e202:	f89d 3010 	ldrb.w	r3, [sp, #16]
   2e206:	f013 0307 	ands.w	r3, r3, #7
   2e20a:	d03f      	beq.n	2e28c <smp_process_request_packet+0x12c>
   2e20c:	2b02      	cmp	r3, #2
   2e20e:	d05c      	beq.n	2e2ca <smp_process_request_packet+0x16a>
   2e210:	2500      	movs	r5, #0
   2e212:	2403      	movs	r4, #3
	cbor_nb_writer_init(streamer->writer, rsp);
   2e214:	68b8      	ldr	r0, [r7, #8]
   2e216:	4649      	mov	r1, r9
   2e218:	f00c fc4a 	bl	3aab0 <cbor_nb_writer_init>
	struct cbor_nb_writer *nbw = streamer->writer;
   2e21c:	f8d7 a008 	ldr.w	sl, [r7, #8]
	zcbor_state_t *zsp = nbw->zs;
   2e220:	f10a 0604 	add.w	r6, sl, #4
	ok = zcbor_map_start_encode(zsp, 2)		&&
   2e224:	2102      	movs	r1, #2
   2e226:	4630      	mov	r0, r6
   2e228:	f00d fcab 	bl	3bb82 <zcbor_map_start_encode>
	     zcbor_tstr_put_lit(zsp, "rc")		&&
   2e22c:	2800      	cmp	r0, #0
   2e22e:	f000 8090 	beq.w	2e352 <smp_process_request_packet+0x1f2>

	return zcbor_bstr_encode(state, &zs);
}
static inline bool zcbor_tstr_encode_ptr(zcbor_state_t *state, const char *ptr, size_t len)
{
	const struct zcbor_string zs = { .value = (const uint8_t *)ptr, .len = len };
   2e232:	4b65      	ldr	r3, [pc, #404]	; (2e3c8 <smp_process_request_packet+0x268>)
   2e234:	9308      	str	r3, [sp, #32]
   2e236:	f04f 0b02 	mov.w	fp, #2

	return zcbor_tstr_encode(state, &zs);
   2e23a:	a908      	add	r1, sp, #32
   2e23c:	4630      	mov	r0, r6
	const struct zcbor_string zs = { .value = (const uint8_t *)ptr, .len = len };
   2e23e:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
	return zcbor_tstr_encode(state, &zs);
   2e242:	f00d fc9b 	bl	3bb7c <zcbor_tstr_encode>
	ok = zcbor_map_start_encode(zsp, 2)		&&
   2e246:	2800      	cmp	r0, #0
   2e248:	f000 8083 	beq.w	2e352 <smp_process_request_packet+0x1f2>
	     zcbor_int32_put(zsp, status);
   2e24c:	4621      	mov	r1, r4
   2e24e:	4630      	mov	r0, r6
   2e250:	f00d fc8a 	bl	3bb68 <zcbor_int32_put>
	ok &= zcbor_map_end_encode(zsp, 2);
   2e254:	4659      	mov	r1, fp
	     zcbor_tstr_put_lit(zsp, "rc")		&&
   2e256:	2800      	cmp	r0, #0
   2e258:	d17d      	bne.n	2e356 <smp_process_request_packet+0x1f6>
	ok &= zcbor_map_end_encode(zsp, 2);
   2e25a:	4630      	mov	r0, r6
   2e25c:	f00d fc99 	bl	3bb92 <zcbor_map_end_encode>
	smp_free_buf(req, streamer->smpt);
   2e260:	6839      	ldr	r1, [r7, #0]
   2e262:	4640      	mov	r0, r8
   2e264:	f00c fbdb 	bl	3aa1e <smp_free_buf>
	smp_free_buf(rsp, streamer->smpt);
   2e268:	6839      	ldr	r1, [r7, #0]
   2e26a:	4648      	mov	r0, r9
   2e26c:	f00c fbd7 	bl	3aa1e <smp_free_buf>
		if (handler_found) {
   2e270:	b145      	cbz	r5, 2e284 <smp_process_request_packet+0x124>
			mgmt_evt(MGMT_EVT_OP_CMD_DONE, req_hdr.nh_group, req_hdr.nh_id,
   2e272:	f89d 2017 	ldrb.w	r2, [sp, #23]
   2e276:	f8bd 1014 	ldrh.w	r1, [sp, #20]
			cmd_done_arg.err = rc;
   2e27a:	9403      	str	r4, [sp, #12]
			mgmt_evt(MGMT_EVT_OP_CMD_DONE, req_hdr.nh_group, req_hdr.nh_id,
   2e27c:	ab03      	add	r3, sp, #12
   2e27e:	2003      	movs	r0, #3
   2e280:	f7ff ff62 	bl	2e148 <mgmt_evt>
}
   2e284:	4620      	mov	r0, r4
   2e286:	b00b      	add	sp, #44	; 0x2c
   2e288:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		handler_fn = handler->mh_read;
   2e28c:	6805      	ldr	r5, [r0, #0]
	if (handler_fn) {
   2e28e:	2d00      	cmp	r5, #0
   2e290:	d04e      	beq.n	2e330 <smp_process_request_packet+0x1d0>
		zcbor_map_start_encode(cbuf->cnbe->zs, CONFIG_MGMT_MAX_MAIN_MAP_ENTRIES);
   2e292:	9806      	ldr	r0, [sp, #24]
   2e294:	210f      	movs	r1, #15
   2e296:	3004      	adds	r0, #4
   2e298:	f00d fc73 	bl	3bb82 <zcbor_map_start_encode>
		mgmt_evt(MGMT_EVT_OP_CMD_RECV, req_hdr->nh_group, req_hdr->nh_id, NULL);
   2e29c:	f89d 2017 	ldrb.w	r2, [sp, #23]
   2e2a0:	f8bd 1014 	ldrh.w	r1, [sp, #20]
   2e2a4:	2300      	movs	r3, #0
   2e2a6:	2001      	movs	r0, #1
   2e2a8:	f7ff ff4e 	bl	2e148 <mgmt_evt>
		rc = handler_fn(cbuf);
   2e2ac:	a806      	add	r0, sp, #24
   2e2ae:	47a8      	blx	r5
   2e2b0:	4604      	mov	r4, r0
		if (!zcbor_map_end_encode(cbuf->cnbe->zs, CONFIG_MGMT_MAX_MAIN_MAP_ENTRIES) &&
   2e2b2:	9806      	ldr	r0, [sp, #24]
   2e2b4:	210f      	movs	r1, #15
   2e2b6:	3004      	adds	r0, #4
   2e2b8:	f00d fc6b 	bl	3bb92 <zcbor_map_end_encode>
   2e2bc:	4605      	mov	r5, r0
   2e2be:	b930      	cbnz	r0, 2e2ce <smp_process_request_packet+0x16e>
		*handler_found = true;
   2e2c0:	2501      	movs	r5, #1
		if (!zcbor_map_end_encode(cbuf->cnbe->zs, CONFIG_MGMT_MAX_MAIN_MAP_ENTRIES) &&
   2e2c2:	2c00      	cmp	r4, #0
   2e2c4:	d1a6      	bne.n	2e214 <smp_process_request_packet+0xb4>
			rc = MGMT_ERR_EMSGSIZE;
   2e2c6:	2407      	movs	r4, #7
	if (rc != 0 && valid_hdr) {
   2e2c8:	e7a4      	b.n	2e214 <smp_process_request_packet+0xb4>
		handler_fn = handler->mh_write;
   2e2ca:	6845      	ldr	r5, [r0, #4]
		break;
   2e2cc:	e7df      	b.n	2e28e <smp_process_request_packet+0x12e>
	if (rc != 0) {
   2e2ce:	2c00      	cmp	r4, #0
   2e2d0:	d1a0      	bne.n	2e214 <smp_process_request_packet+0xb4>
			 zsp->payload_mut - nbw->nb->data - MGMT_HDR_SIZE);
   2e2d2:	e9d6 2300 	ldrd	r2, r3, [r6]
   2e2d6:	6892      	ldr	r2, [r2, #8]
	*rsp_hdr = (struct mgmt_hdr) {
   2e2d8:	f8ad 4020 	strh.w	r4, [sp, #32]
			 zsp->payload_mut - nbw->nb->data - MGMT_HDR_SIZE);
   2e2dc:	1a9b      	subs	r3, r3, r2
		.nh_op = smp_rsp_op(req_hdr->nh_op),
   2e2de:	f89d 2010 	ldrb.w	r2, [sp, #16]
		return MGMT_OP_READ_RSP;
   2e2e2:	f012 0f07 	tst.w	r2, #7
   2e2e6:	bf14      	ite	ne
   2e2e8:	2203      	movne	r2, #3
   2e2ea:	2201      	moveq	r2, #1
			 zsp->payload_mut - nbw->nb->data - MGMT_HDR_SIZE);
   2e2ec:	3b08      	subs	r3, #8
	*rsp_hdr = (struct mgmt_hdr) {
   2e2ee:	f362 0402 	bfi	r4, r2, #0, #3
   2e2f2:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
	mgmt_hton_hdr(rsp_hdr);
   2e2f6:	a808      	add	r0, sp, #32
	*rsp_hdr = (struct mgmt_hdr) {
   2e2f8:	9b05      	ldr	r3, [sp, #20]
   2e2fa:	f88d 4020 	strb.w	r4, [sp, #32]
   2e2fe:	9309      	str	r3, [sp, #36]	; 0x24
	mgmt_hton_hdr(rsp_hdr);
   2e300:	f00c fbd4 	bl	3aaac <mgmt_hton_hdr>
	nbw->nb->len = zsp->payload_mut - nbw->nb->data;
   2e304:	e9d6 2300 	ldrd	r2, r3, [r6]
   2e308:	6891      	ldr	r1, [r2, #8]
   2e30a:	1a5b      	subs	r3, r3, r1
   2e30c:	8193      	strh	r3, [r2, #12]
	memcpy(streamer->writer->nb->data, src_hdr, sizeof(*src_hdr));
   2e30e:	68bb      	ldr	r3, [r7, #8]
   2e310:	681b      	ldr	r3, [r3, #0]
   2e312:	2208      	movs	r2, #8
   2e314:	6898      	ldr	r0, [r3, #8]
   2e316:	a908      	add	r1, sp, #32
   2e318:	f00b f84a 	bl	393b0 <memcpy>
		rc = streamer->smpt->output(rsp);
   2e31c:	683b      	ldr	r3, [r7, #0]
   2e31e:	4648      	mov	r0, r9
   2e320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2e322:	4798      	blx	r3
		if (rc != 0) {
   2e324:	4604      	mov	r4, r0
   2e326:	b128      	cbz	r0, 2e334 <smp_process_request_packet+0x1d4>
		*handler_found = true;
   2e328:	46c1      	mov	r9, r8
		req = NULL;
   2e32a:	f04f 0800 	mov.w	r8, #0
   2e32e:	e771      	b.n	2e214 <smp_process_request_packet+0xb4>
		return MGMT_ERR_ENOTSUP;
   2e330:	2408      	movs	r4, #8
   2e332:	e76f      	b.n	2e214 <smp_process_request_packet+0xb4>
   2e334:	f8bd 1012 	ldrh.w	r1, [sp, #18]
   2e338:	4650      	mov	r0, sl
   2e33a:	f000 fb73 	bl	2ea24 <net_buf_simple_pull>
		mgmt_evt(MGMT_EVT_OP_CMD_DONE, req_hdr.nh_group, req_hdr.nh_id,
   2e33e:	f89d 2017 	ldrb.w	r2, [sp, #23]
   2e342:	f8bd 1014 	ldrh.w	r1, [sp, #20]
		cmd_done_arg.err = MGMT_ERR_EOK;
   2e346:	9403      	str	r4, [sp, #12]
		mgmt_evt(MGMT_EVT_OP_CMD_DONE, req_hdr.nh_group, req_hdr.nh_id,
   2e348:	ab03      	add	r3, sp, #12
   2e34a:	2003      	movs	r0, #3
   2e34c:	f7ff fefc 	bl	2e148 <mgmt_evt>
   2e350:	e70d      	b.n	2e16e <smp_process_request_packet+0xe>
	ok &= zcbor_map_end_encode(zsp, 2);
   2e352:	2102      	movs	r1, #2
   2e354:	e781      	b.n	2e25a <smp_process_request_packet+0xfa>
   2e356:	4630      	mov	r0, r6
   2e358:	f00d fc1b 	bl	3bb92 <zcbor_map_end_encode>
	if (!ok) {
   2e35c:	2800      	cmp	r0, #0
   2e35e:	f43f af7f 	beq.w	2e260 <smp_process_request_packet+0x100>
			 zsp->payload_mut - nbw->nb->data - MGMT_HDR_SIZE);
   2e362:	e9da 2300 	ldrd	r2, r3, [sl]
   2e366:	6892      	ldr	r2, [r2, #8]
   2e368:	1a9b      	subs	r3, r3, r2
		.nh_op = smp_rsp_op(req_hdr->nh_op),
   2e36a:	f89d 2010 	ldrb.w	r2, [sp, #16]
			 zsp->payload_mut - nbw->nb->data - MGMT_HDR_SIZE);
   2e36e:	3b08      	subs	r3, #8
		return MGMT_OP_READ_RSP;
   2e370:	f012 0f07 	tst.w	r2, #7
   2e374:	bf14      	ite	ne
   2e376:	2203      	movne	r2, #3
   2e378:	2201      	moveq	r2, #1
	*rsp_hdr = (struct mgmt_hdr) {
   2e37a:	2600      	movs	r6, #0
   2e37c:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
	mgmt_hton_hdr(rsp_hdr);
   2e380:	a808      	add	r0, sp, #32
	*rsp_hdr = (struct mgmt_hdr) {
   2e382:	9b05      	ldr	r3, [sp, #20]
   2e384:	f8ad 6020 	strh.w	r6, [sp, #32]
   2e388:	9309      	str	r3, [sp, #36]	; 0x24
   2e38a:	f88d 2020 	strb.w	r2, [sp, #32]
	mgmt_hton_hdr(rsp_hdr);
   2e38e:	f00c fb8d 	bl	3aaac <mgmt_hton_hdr>
	nbw->nb->len = zsp->payload_mut - nbw->nb->data;
   2e392:	e9da 2300 	ldrd	r2, r3, [sl]
   2e396:	6891      	ldr	r1, [r2, #8]
   2e398:	1a5b      	subs	r3, r3, r1
   2e39a:	8193      	strh	r3, [r2, #12]
	memcpy(streamer->writer->nb->data, src_hdr, sizeof(*src_hdr));
   2e39c:	68bb      	ldr	r3, [r7, #8]
   2e39e:	681b      	ldr	r3, [r3, #0]
   2e3a0:	2208      	movs	r2, #8
   2e3a2:	6898      	ldr	r0, [r3, #8]
   2e3a4:	a908      	add	r1, sp, #32
   2e3a6:	f00b f803 	bl	393b0 <memcpy>
		streamer->smpt->output(rsp);
   2e3aa:	683b      	ldr	r3, [r7, #0]
   2e3ac:	4648      	mov	r0, r9
   2e3ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2e3b0:	4798      	blx	r3
		rsp = NULL;
   2e3b2:	46b1      	mov	r9, r6
   2e3b4:	e754      	b.n	2e260 <smp_process_request_packet+0x100>
			rc = MGMT_ERR_ECORRUPT;
   2e3b6:	2409      	movs	r4, #9
   2e3b8:	e6dc      	b.n	2e174 <smp_process_request_packet+0x14>
		handler_found = false;
   2e3ba:	2500      	movs	r5, #0
			rc = MGMT_ERR_ECORRUPT;
   2e3bc:	2409      	movs	r4, #9
   2e3be:	e7b3      	b.n	2e328 <smp_process_request_packet+0x1c8>
		handler_found = false;
   2e3c0:	4605      	mov	r5, r0
			rc = MGMT_ERR_ENOMEM;
   2e3c2:	2402      	movs	r4, #2
   2e3c4:	e7b0      	b.n	2e328 <smp_process_request_packet+0x1c8>
   2e3c6:	bf00      	nop
   2e3c8:	0003eaef 	.word	0x0003eaef

0002e3cc <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
   2e3cc:	4b02      	ldr	r3, [pc, #8]	; (2e3d8 <net_buf_pool_get+0xc>)
   2e3ce:	2234      	movs	r2, #52	; 0x34
   2e3d0:	fb02 3000 	mla	r0, r2, r0, r3
   2e3d4:	4770      	bx	lr
   2e3d6:	bf00      	nop
   2e3d8:	20000bec 	.word	0x20000bec

0002e3dc <net_buf_id>:
	return pool - _net_buf_pool_list;
}

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   2e3dc:	7982      	ldrb	r2, [r0, #6]
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
				__alignof__(struct net_buf));
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   2e3de:	4b07      	ldr	r3, [pc, #28]	; (2e3fc <net_buf_id+0x20>)
   2e3e0:	2134      	movs	r1, #52	; 0x34
   2e3e2:	fb01 3302 	mla	r3, r1, r2, r3
   2e3e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   2e3e8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   2e3ec:	3317      	adds	r3, #23
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   2e3ee:	1a80      	subs	r0, r0, r2
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   2e3f0:	f023 0303 	bic.w	r3, r3, #3

	return offset / struct_size;
}
   2e3f4:	fbb0 f0f3 	udiv	r0, r0, r3
   2e3f8:	4770      	bx	lr
   2e3fa:	bf00      	nop
   2e3fc:	20000bec 	.word	0x20000bec

0002e400 <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
   2e400:	b538      	push	{r3, r4, r5, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   2e402:	4b0a      	ldr	r3, [pc, #40]	; (2e42c <fixed_data_alloc+0x2c>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   2e404:	7982      	ldrb	r2, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   2e406:	2434      	movs	r4, #52	; 0x34
   2e408:	fb04 3302 	mla	r3, r4, r2, r3

	*size = MIN(fixed->data_size, *size);
   2e40c:	680c      	ldr	r4, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   2e40e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2e410:	685b      	ldr	r3, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   2e412:	681a      	ldr	r2, [r3, #0]
   2e414:	4294      	cmp	r4, r2
   2e416:	bf94      	ite	ls
   2e418:	600c      	strls	r4, [r1, #0]
   2e41a:	600a      	strhi	r2, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   2e41c:	e9d3 5400 	ldrd	r5, r4, [r3]
   2e420:	f7ff ffdc 	bl	2e3dc <net_buf_id>
}
   2e424:	fb05 4000 	mla	r0, r5, r0, r4
   2e428:	bd38      	pop	{r3, r4, r5, pc}
   2e42a:	bf00      	nop
   2e42c:	20000bec 	.word	0x20000bec

0002e430 <net_buf_reset>:
{
   2e430:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(buf->flags == 0U);
   2e432:	7943      	ldrb	r3, [r0, #5]
   2e434:	b143      	cbz	r3, 2e448 <net_buf_reset+0x18>
   2e436:	490b      	ldr	r1, [pc, #44]	; (2e464 <net_buf_reset+0x34>)
   2e438:	480b      	ldr	r0, [pc, #44]	; (2e468 <net_buf_reset+0x38>)
   2e43a:	2256      	movs	r2, #86	; 0x56
   2e43c:	f00a fb69 	bl	38b12 <assert_print>
   2e440:	2156      	movs	r1, #86	; 0x56
	__ASSERT_NO_MSG(buf->frags == NULL);
   2e442:	4808      	ldr	r0, [pc, #32]	; (2e464 <net_buf_reset+0x34>)
   2e444:	f00a fb5e 	bl	38b04 <assert_post_action>
   2e448:	6803      	ldr	r3, [r0, #0]
   2e44a:	b133      	cbz	r3, 2e45a <net_buf_reset+0x2a>
   2e44c:	4905      	ldr	r1, [pc, #20]	; (2e464 <net_buf_reset+0x34>)
   2e44e:	4806      	ldr	r0, [pc, #24]	; (2e468 <net_buf_reset+0x38>)
   2e450:	2257      	movs	r2, #87	; 0x57
   2e452:	f00a fb5e 	bl	38b12 <assert_print>
   2e456:	2157      	movs	r1, #87	; 0x57
   2e458:	e7f3      	b.n	2e442 <net_buf_reset+0x12>
	buf->len  = 0U;
   2e45a:	8183      	strh	r3, [r0, #12]
	buf->data = buf->__buf;
   2e45c:	6903      	ldr	r3, [r0, #16]
   2e45e:	6083      	str	r3, [r0, #8]
}
   2e460:	bd08      	pop	{r3, pc}
   2e462:	bf00      	nop
   2e464:	0003eaf2 	.word	0x0003eaf2
   2e468:	0003d1d7 	.word	0x0003d1d7

0002e46c <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   2e46c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2e470:	b085      	sub	sp, #20
   2e472:	4605      	mov	r5, r0
   2e474:	9103      	str	r1, [sp, #12]
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   2e476:	4610      	mov	r0, r2
   2e478:	4619      	mov	r1, r3
{
   2e47a:	4691      	mov	r9, r2
   2e47c:	4698      	mov	r8, r3
   2e47e:	4617      	mov	r7, r2
   2e480:	461e      	mov	r6, r3
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   2e482:	f00d fcb1 	bl	3bde8 <sys_clock_timeout_end_calc>
   2e486:	e9cd 0101 	strd	r0, r1, [sp, #4]
	struct net_buf *buf;
	k_spinlock_key_t key;

	__ASSERT_NO_MSG(pool);
   2e48a:	b93d      	cbnz	r5, 2e49c <net_buf_alloc_len+0x30>
   2e48c:	495e      	ldr	r1, [pc, #376]	; (2e608 <net_buf_alloc_len+0x19c>)
   2e48e:	485f      	ldr	r0, [pc, #380]	; (2e60c <net_buf_alloc_len+0x1a0>)
   2e490:	22f4      	movs	r2, #244	; 0xf4
   2e492:	f00a fb3e 	bl	38b12 <assert_print>
   2e496:	21f4      	movs	r1, #244	; 0xf4
			net_buf_destroy(buf);
			return NULL;
		}

#if __ASSERT_ON
		NET_BUF_ASSERT(req_size <= size);
   2e498:	485b      	ldr	r0, [pc, #364]	; (2e608 <net_buf_alloc_len+0x19c>)
   2e49a:	e014      	b.n	2e4c6 <net_buf_alloc_len+0x5a>
	key = k_spin_lock(&pool->lock);
   2e49c:	f105 0a1c 	add.w	sl, r5, #28
	__asm__ volatile(
   2e4a0:	f04f 0340 	mov.w	r3, #64	; 0x40
   2e4a4:	f3ef 8b11 	mrs	fp, BASEPRI
   2e4a8:	f383 8812 	msr	BASEPRI_MAX, r3
   2e4ac:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2e4b0:	4650      	mov	r0, sl
   2e4b2:	f006 fecb 	bl	3524c <z_spin_lock_valid>
   2e4b6:	b940      	cbnz	r0, 2e4ca <net_buf_alloc_len+0x5e>
   2e4b8:	4955      	ldr	r1, [pc, #340]	; (2e610 <net_buf_alloc_len+0x1a4>)
   2e4ba:	4854      	ldr	r0, [pc, #336]	; (2e60c <net_buf_alloc_len+0x1a0>)
   2e4bc:	2294      	movs	r2, #148	; 0x94
   2e4be:	f00a fb28 	bl	38b12 <assert_print>
   2e4c2:	2194      	movs	r1, #148	; 0x94
   2e4c4:	4852      	ldr	r0, [pc, #328]	; (2e610 <net_buf_alloc_len+0x1a4>)
   2e4c6:	f00a fb1d 	bl	38b04 <assert_post_action>
	z_spin_lock_set_owner(l);
   2e4ca:	4650      	mov	r0, sl
   2e4cc:	f006 fedc 	bl	35288 <z_spin_lock_set_owner>
	if (pool->uninit_count) {
   2e4d0:	8c6b      	ldrh	r3, [r5, #34]	; 0x22
   2e4d2:	2b00      	cmp	r3, #0
   2e4d4:	d06a      	beq.n	2e5ac <net_buf_alloc_len+0x140>
		if (pool->uninit_count < pool->buf_count) {
   2e4d6:	8c2a      	ldrh	r2, [r5, #32]
   2e4d8:	429a      	cmp	r2, r3
   2e4da:	d947      	bls.n	2e56c <net_buf_alloc_len+0x100>
	return z_impl_k_queue_get(queue, timeout);
   2e4dc:	2200      	movs	r2, #0
   2e4de:	2300      	movs	r3, #0
   2e4e0:	4628      	mov	r0, r5
   2e4e2:	f007 f909 	bl	356f8 <z_impl_k_queue_get>
			if (buf) {
   2e4e6:	4604      	mov	r4, r0
   2e4e8:	2800      	cmp	r0, #0
   2e4ea:	d03f      	beq.n	2e56c <net_buf_alloc_len+0x100>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2e4ec:	4650      	mov	r0, sl
   2e4ee:	f006 febb 	bl	35268 <z_spin_unlock_valid>
   2e4f2:	b930      	cbnz	r0, 2e502 <net_buf_alloc_len+0x96>
   2e4f4:	4946      	ldr	r1, [pc, #280]	; (2e610 <net_buf_alloc_len+0x1a4>)
   2e4f6:	4845      	ldr	r0, [pc, #276]	; (2e60c <net_buf_alloc_len+0x1a0>)
   2e4f8:	22c2      	movs	r2, #194	; 0xc2
   2e4fa:	f00a fb0a 	bl	38b12 <assert_print>
   2e4fe:	21c2      	movs	r1, #194	; 0xc2
   2e500:	e7e0      	b.n	2e4c4 <net_buf_alloc_len+0x58>
	__asm__ volatile(
   2e502:	f38b 8811 	msr	BASEPRI, fp
   2e506:	f3bf 8f6f 	isb	sy
	if (size) {
   2e50a:	9d03      	ldr	r5, [sp, #12]
   2e50c:	2d00      	cmp	r5, #0
   2e50e:	d06f      	beq.n	2e5f0 <net_buf_alloc_len+0x184>
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   2e510:	ea58 0309 	orrs.w	r3, r8, r9
   2e514:	d010      	beq.n	2e538 <net_buf_alloc_len+0xcc>
   2e516:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
   2e51a:	bf08      	it	eq
   2e51c:	f1b9 3fff 	cmpeq.w	r9, #4294967295	; 0xffffffff
   2e520:	d00a      	beq.n	2e538 <net_buf_alloc_len+0xcc>
			int64_t remaining = end - sys_clock_tick_get();
   2e522:	f009 f93f 	bl	377a4 <sys_clock_tick_get>
   2e526:	9b01      	ldr	r3, [sp, #4]
   2e528:	1a1f      	subs	r7, r3, r0
   2e52a:	9b02      	ldr	r3, [sp, #8]
   2e52c:	eb63 0601 	sbc.w	r6, r3, r1
			if (remaining <= 0) {
   2e530:	2e00      	cmp	r6, #0
   2e532:	bfbc      	itt	lt
   2e534:	2700      	movlt	r7, #0
   2e536:	463e      	movlt	r6, r7
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   2e538:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
   2e53a:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 2e614 <net_buf_alloc_len+0x1a8>
   2e53e:	f04f 0934 	mov.w	r9, #52	; 0x34
   2e542:	fb09 8303 	mla	r3, r9, r3, r8
   2e546:	463a      	mov	r2, r7
   2e548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2e54a:	681b      	ldr	r3, [r3, #0]
   2e54c:	a903      	add	r1, sp, #12
   2e54e:	f8d3 a000 	ldr.w	sl, [r3]
   2e552:	4620      	mov	r0, r4
   2e554:	4633      	mov	r3, r6
   2e556:	47d0      	blx	sl
		buf->__buf = data_alloc(buf, &size, timeout);
   2e558:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
   2e55a:	2800      	cmp	r0, #0
   2e55c:	d13c      	bne.n	2e5d8 <net_buf_alloc_len+0x16c>
	k_lifo_put(&pool->free, buf);
   2e55e:	79a0      	ldrb	r0, [r4, #6]
   2e560:	4621      	mov	r1, r4
   2e562:	fb00 8009 	mla	r0, r0, r9, r8
   2e566:	f00d fb86 	bl	3bc76 <k_queue_prepend>
}
   2e56a:	e030      	b.n	2e5ce <net_buf_alloc_len+0x162>
		uninit_count = pool->uninit_count--;
   2e56c:	8c6c      	ldrh	r4, [r5, #34]	; 0x22
   2e56e:	1e63      	subs	r3, r4, #1
   2e570:	846b      	strh	r3, [r5, #34]	; 0x22
   2e572:	4650      	mov	r0, sl
   2e574:	f006 fe78 	bl	35268 <z_spin_unlock_valid>
   2e578:	2800      	cmp	r0, #0
   2e57a:	d0bb      	beq.n	2e4f4 <net_buf_alloc_len+0x88>
   2e57c:	f38b 8811 	msr	BASEPRI, fp
   2e580:	f3bf 8f6f 	isb	sy
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   2e584:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   2e588:	8c2a      	ldrh	r2, [r5, #32]
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   2e58a:	3317      	adds	r3, #23
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   2e58c:	1b12      	subs	r2, r2, r4
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   2e58e:	6b2c      	ldr	r4, [r5, #48]	; 0x30
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   2e590:	f023 0303 	bic.w	r3, r3, #3
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   2e594:	fb02 4403 	mla	r4, r2, r3, r4
	return pool - _net_buf_pool_list;
   2e598:	4b1e      	ldr	r3, [pc, #120]	; (2e614 <net_buf_alloc_len+0x1a8>)
   2e59a:	4a1f      	ldr	r2, [pc, #124]	; (2e618 <net_buf_alloc_len+0x1ac>)
   2e59c:	1aeb      	subs	r3, r5, r3
   2e59e:	109b      	asrs	r3, r3, #2
   2e5a0:	4353      	muls	r3, r2
	buf->pool_id = pool_id(pool);
   2e5a2:	71a3      	strb	r3, [r4, #6]
	buf->user_data_size = pool->user_data_size;
   2e5a4:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
   2e5a8:	71e3      	strb	r3, [r4, #7]
		goto success;
   2e5aa:	e7ae      	b.n	2e50a <net_buf_alloc_len+0x9e>
   2e5ac:	4650      	mov	r0, sl
   2e5ae:	f006 fe5b 	bl	35268 <z_spin_unlock_valid>
   2e5b2:	2800      	cmp	r0, #0
   2e5b4:	d09e      	beq.n	2e4f4 <net_buf_alloc_len+0x88>
   2e5b6:	f38b 8811 	msr	BASEPRI, fp
   2e5ba:	f3bf 8f6f 	isb	sy
   2e5be:	464a      	mov	r2, r9
   2e5c0:	4643      	mov	r3, r8
   2e5c2:	4628      	mov	r0, r5
   2e5c4:	f007 f898 	bl	356f8 <z_impl_k_queue_get>
	if (!buf) {
   2e5c8:	4604      	mov	r4, r0
   2e5ca:	2800      	cmp	r0, #0
   2e5cc:	d19d      	bne.n	2e50a <net_buf_alloc_len+0x9e>
		return NULL;
   2e5ce:	2400      	movs	r4, #0
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   2e5d0:	4620      	mov	r0, r4
   2e5d2:	b005      	add	sp, #20
   2e5d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		NET_BUF_ASSERT(req_size <= size);
   2e5d8:	9b03      	ldr	r3, [sp, #12]
   2e5da:	429d      	cmp	r5, r3
   2e5dc:	d909      	bls.n	2e5f2 <net_buf_alloc_len+0x186>
   2e5de:	490a      	ldr	r1, [pc, #40]	; (2e608 <net_buf_alloc_len+0x19c>)
   2e5e0:	480a      	ldr	r0, [pc, #40]	; (2e60c <net_buf_alloc_len+0x1a0>)
   2e5e2:	f240 1255 	movw	r2, #341	; 0x155
   2e5e6:	f00a fa94 	bl	38b12 <assert_print>
   2e5ea:	f240 1155 	movw	r1, #341	; 0x155
   2e5ee:	e753      	b.n	2e498 <net_buf_alloc_len+0x2c>
		buf->__buf = NULL;
   2e5f0:	6125      	str	r5, [r4, #16]
	buf->frags = NULL;
   2e5f2:	2300      	movs	r3, #0
   2e5f4:	6023      	str	r3, [r4, #0]
	buf->ref   = 1U;
   2e5f6:	2201      	movs	r2, #1
   2e5f8:	80a2      	strh	r2, [r4, #4]
	buf->len  = 0U;
   2e5fa:	81a3      	strh	r3, [r4, #12]
	buf->size  = size;
   2e5fc:	9a03      	ldr	r2, [sp, #12]
	buf->data = buf->__buf;
   2e5fe:	6923      	ldr	r3, [r4, #16]
   2e600:	81e2      	strh	r2, [r4, #14]
   2e602:	60a3      	str	r3, [r4, #8]
}
   2e604:	e7e4      	b.n	2e5d0 <net_buf_alloc_len+0x164>
   2e606:	bf00      	nop
   2e608:	0003eaf2 	.word	0x0003eaf2
   2e60c:	0003d1d7 	.word	0x0003d1d7
   2e610:	0003d39d 	.word	0x0003d39d
   2e614:	20000bec 	.word	0x20000bec
   2e618:	c4ec4ec5 	.word	0xc4ec4ec5

0002e61c <net_buf_get>:
struct net_buf *net_buf_get_debug(struct k_fifo *fifo, k_timeout_t timeout,
				  const char *func, int line)
#else
struct net_buf *net_buf_get(struct k_fifo *fifo, k_timeout_t timeout)
#endif
{
   2e61c:	b570      	push	{r4, r5, r6, lr}
   2e61e:	4606      	mov	r6, r0
   2e620:	f007 f86a 	bl	356f8 <z_impl_k_queue_get>
	struct net_buf *buf, *frag;

	NET_BUF_DBG("%s():%d: fifo %p", func, line, fifo);

	buf = k_fifo_get(fifo, timeout);
	if (!buf) {
   2e624:	4605      	mov	r5, r0
   2e626:	b128      	cbz	r0, 2e634 <net_buf_get+0x18>
   2e628:	4604      	mov	r4, r0
	}

	NET_BUF_DBG("%s():%d: buf %p fifo %p", func, line, buf, fifo);

	/* Get any fragments belonging to this buffer */
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   2e62a:	7963      	ldrb	r3, [r4, #5]
   2e62c:	f013 0301 	ands.w	r3, r3, #1
   2e630:	d102      	bne.n	2e638 <net_buf_get+0x1c>
		/* The fragments flag is only for FIFO-internal usage */
		frag->flags &= ~NET_BUF_FRAGS;
	}

	/* Mark the end of the fragment list */
	frag->frags = NULL;
   2e632:	6023      	str	r3, [r4, #0]

	return buf;
}
   2e634:	4628      	mov	r0, r5
   2e636:	bd70      	pop	{r4, r5, r6, pc}
   2e638:	2200      	movs	r2, #0
   2e63a:	2300      	movs	r3, #0
   2e63c:	4630      	mov	r0, r6
   2e63e:	f007 f85b 	bl	356f8 <z_impl_k_queue_get>
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   2e642:	6020      	str	r0, [r4, #0]
		__ASSERT_NO_MSG(frag->frags);
   2e644:	b950      	cbnz	r0, 2e65c <net_buf_get+0x40>
   2e646:	4908      	ldr	r1, [pc, #32]	; (2e668 <net_buf_get+0x4c>)
   2e648:	4808      	ldr	r0, [pc, #32]	; (2e66c <net_buf_get+0x50>)
   2e64a:	f240 12ad 	movw	r2, #429	; 0x1ad
   2e64e:	f00a fa60 	bl	38b12 <assert_print>
   2e652:	4805      	ldr	r0, [pc, #20]	; (2e668 <net_buf_get+0x4c>)
   2e654:	f240 11ad 	movw	r1, #429	; 0x1ad
   2e658:	f00a fa54 	bl	38b04 <assert_post_action>
		frag->flags &= ~NET_BUF_FRAGS;
   2e65c:	7963      	ldrb	r3, [r4, #5]
   2e65e:	f023 0301 	bic.w	r3, r3, #1
   2e662:	7163      	strb	r3, [r4, #5]
   2e664:	4604      	mov	r4, r0
   2e666:	e7e0      	b.n	2e62a <net_buf_get+0xe>
   2e668:	0003eaf2 	.word	0x0003eaf2
   2e66c:	0003d1d7 	.word	0x0003d1d7

0002e670 <net_buf_simple_reserve>:
	buf->size  = size;
	buf->len   = size;
}

void net_buf_simple_reserve(struct net_buf_simple *buf, size_t reserve)
{
   2e670:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(buf);
   2e672:	b950      	cbnz	r0, 2e68a <net_buf_simple_reserve+0x1a>
   2e674:	490c      	ldr	r1, [pc, #48]	; (2e6a8 <net_buf_simple_reserve+0x38>)
   2e676:	480d      	ldr	r0, [pc, #52]	; (2e6ac <net_buf_simple_reserve+0x3c>)
   2e678:	f44f 72e2 	mov.w	r2, #452	; 0x1c4
   2e67c:	f00a fa49 	bl	38b12 <assert_print>
   2e680:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
	__ASSERT_NO_MSG(buf->len == 0U);
   2e684:	4808      	ldr	r0, [pc, #32]	; (2e6a8 <net_buf_simple_reserve+0x38>)
   2e686:	f00a fa3d 	bl	38b04 <assert_post_action>
   2e68a:	8883      	ldrh	r3, [r0, #4]
   2e68c:	b143      	cbz	r3, 2e6a0 <net_buf_simple_reserve+0x30>
   2e68e:	4906      	ldr	r1, [pc, #24]	; (2e6a8 <net_buf_simple_reserve+0x38>)
   2e690:	4806      	ldr	r0, [pc, #24]	; (2e6ac <net_buf_simple_reserve+0x3c>)
   2e692:	f240 12c5 	movw	r2, #453	; 0x1c5
   2e696:	f00a fa3c 	bl	38b12 <assert_print>
   2e69a:	f240 11c5 	movw	r1, #453	; 0x1c5
   2e69e:	e7f1      	b.n	2e684 <net_buf_simple_reserve+0x14>
	NET_BUF_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
   2e6a0:	6883      	ldr	r3, [r0, #8]
   2e6a2:	440b      	add	r3, r1
   2e6a4:	6003      	str	r3, [r0, #0]
}
   2e6a6:	bd08      	pop	{r3, pc}
   2e6a8:	0003eaf2 	.word	0x0003eaf2
   2e6ac:	0003d1d7 	.word	0x0003d1d7

0002e6b0 <net_buf_slist_put>:

static struct k_spinlock net_buf_slist_lock;

void net_buf_slist_put(sys_slist_t *list, struct net_buf *buf)
{
   2e6b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2e6b2:	460d      	mov	r5, r1
	struct net_buf *tail;
	k_spinlock_key_t key;

	__ASSERT_NO_MSG(list);
   2e6b4:	4604      	mov	r4, r0
   2e6b6:	b950      	cbnz	r0, 2e6ce <net_buf_slist_put+0x1e>
   2e6b8:	4925      	ldr	r1, [pc, #148]	; (2e750 <net_buf_slist_put+0xa0>)
   2e6ba:	4826      	ldr	r0, [pc, #152]	; (2e754 <net_buf_slist_put+0xa4>)
   2e6bc:	f44f 72e9 	mov.w	r2, #466	; 0x1d2
   2e6c0:	f00a fa27 	bl	38b12 <assert_print>
   2e6c4:	f44f 71e9 	mov.w	r1, #466	; 0x1d2
	__ASSERT_NO_MSG(buf);
   2e6c8:	4821      	ldr	r0, [pc, #132]	; (2e750 <net_buf_slist_put+0xa0>)
   2e6ca:	f00a fa1b 	bl	38b04 <assert_post_action>
   2e6ce:	bb21      	cbnz	r1, 2e71a <net_buf_slist_put+0x6a>
   2e6d0:	491f      	ldr	r1, [pc, #124]	; (2e750 <net_buf_slist_put+0xa0>)
   2e6d2:	4820      	ldr	r0, [pc, #128]	; (2e754 <net_buf_slist_put+0xa4>)
   2e6d4:	f240 12d3 	movw	r2, #467	; 0x1d3
   2e6d8:	f00a fa1b 	bl	38b12 <assert_print>
   2e6dc:	f240 11d3 	movw	r1, #467	; 0x1d3
   2e6e0:	e7f2      	b.n	2e6c8 <net_buf_slist_put+0x18>

	for (tail = buf; tail->frags; tail = tail->frags) {
		tail->flags |= NET_BUF_FRAGS;
   2e6e2:	7973      	ldrb	r3, [r6, #5]
   2e6e4:	f043 0301 	orr.w	r3, r3, #1
   2e6e8:	7173      	strb	r3, [r6, #5]
   2e6ea:	4616      	mov	r6, r2
	for (tail = buf; tail->frags; tail = tail->frags) {
   2e6ec:	6832      	ldr	r2, [r6, #0]
   2e6ee:	2a00      	cmp	r2, #0
   2e6f0:	d1f7      	bne.n	2e6e2 <net_buf_slist_put+0x32>
	__asm__ volatile(
   2e6f2:	f04f 0340 	mov.w	r3, #64	; 0x40
   2e6f6:	f3ef 8711 	mrs	r7, BASEPRI
   2e6fa:	f383 8812 	msr	BASEPRI_MAX, r3
   2e6fe:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2e702:	4815      	ldr	r0, [pc, #84]	; (2e758 <net_buf_slist_put+0xa8>)
   2e704:	f006 fda2 	bl	3524c <z_spin_lock_valid>
   2e708:	b948      	cbnz	r0, 2e71e <net_buf_slist_put+0x6e>
   2e70a:	4914      	ldr	r1, [pc, #80]	; (2e75c <net_buf_slist_put+0xac>)
   2e70c:	4811      	ldr	r0, [pc, #68]	; (2e754 <net_buf_slist_put+0xa4>)
   2e70e:	2294      	movs	r2, #148	; 0x94
   2e710:	f00a f9ff 	bl	38b12 <assert_print>
   2e714:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2e716:	4811      	ldr	r0, [pc, #68]	; (2e75c <net_buf_slist_put+0xac>)
   2e718:	e7d7      	b.n	2e6ca <net_buf_slist_put+0x1a>
   2e71a:	460e      	mov	r6, r1
   2e71c:	e7e6      	b.n	2e6ec <net_buf_slist_put+0x3c>
	z_spin_lock_set_owner(l);
   2e71e:	480e      	ldr	r0, [pc, #56]	; (2e758 <net_buf_slist_put+0xa8>)
   2e720:	f006 fdb2 	bl	35288 <z_spin_lock_set_owner>
	return list->tail;
   2e724:	6863      	ldr	r3, [r4, #4]
Z_GENLIST_APPEND_LIST(slist, snode)
   2e726:	b963      	cbnz	r3, 2e742 <net_buf_slist_put+0x92>
	list->head = node;
   2e728:	6025      	str	r5, [r4, #0]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2e72a:	480b      	ldr	r0, [pc, #44]	; (2e758 <net_buf_slist_put+0xa8>)
	list->tail = node;
   2e72c:	6066      	str	r6, [r4, #4]
   2e72e:	f006 fd9b 	bl	35268 <z_spin_unlock_valid>
   2e732:	b940      	cbnz	r0, 2e746 <net_buf_slist_put+0x96>
   2e734:	4909      	ldr	r1, [pc, #36]	; (2e75c <net_buf_slist_put+0xac>)
   2e736:	4807      	ldr	r0, [pc, #28]	; (2e754 <net_buf_slist_put+0xa4>)
   2e738:	22c2      	movs	r2, #194	; 0xc2
   2e73a:	f00a f9ea 	bl	38b12 <assert_print>
   2e73e:	21c2      	movs	r1, #194	; 0xc2
   2e740:	e7e9      	b.n	2e716 <net_buf_slist_put+0x66>
	parent->next = child;
   2e742:	601d      	str	r5, [r3, #0]
}
   2e744:	e7f1      	b.n	2e72a <net_buf_slist_put+0x7a>
	__asm__ volatile(
   2e746:	f387 8811 	msr	BASEPRI, r7
   2e74a:	f3bf 8f6f 	isb	sy
	}

	key = k_spin_lock(&net_buf_slist_lock);
	sys_slist_append_list(list, &buf->node, &tail->node);
	k_spin_unlock(&net_buf_slist_lock, key);
}
   2e74e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2e750:	0003eaf2 	.word	0x0003eaf2
   2e754:	0003d1d7 	.word	0x0003d1d7
   2e758:	20003060 	.word	0x20003060
   2e75c:	0003d39d 	.word	0x0003d39d

0002e760 <net_buf_slist_get>:

struct net_buf *net_buf_slist_get(sys_slist_t *list)
{
   2e760:	b570      	push	{r4, r5, r6, lr}
	struct net_buf *buf, *frag;
	k_spinlock_key_t key;

	__ASSERT_NO_MSG(list);
   2e762:	4604      	mov	r4, r0
   2e764:	b948      	cbnz	r0, 2e77a <net_buf_slist_get+0x1a>
   2e766:	492d      	ldr	r1, [pc, #180]	; (2e81c <net_buf_slist_get+0xbc>)
   2e768:	482d      	ldr	r0, [pc, #180]	; (2e820 <net_buf_slist_get+0xc0>)
   2e76a:	f240 12e3 	movw	r2, #483	; 0x1e3
   2e76e:	f00a f9d0 	bl	38b12 <assert_print>
   2e772:	f240 11e3 	movw	r1, #483	; 0x1e3

	if (buf) {
		/* Get any fragments belonging to this buffer */
		for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
			frag->frags = (void *)sys_slist_get(list);
			__ASSERT_NO_MSG(frag->frags);
   2e776:	4829      	ldr	r0, [pc, #164]	; (2e81c <net_buf_slist_get+0xbc>)
   2e778:	e012      	b.n	2e7a0 <net_buf_slist_get+0x40>
	__asm__ volatile(
   2e77a:	f04f 0340 	mov.w	r3, #64	; 0x40
   2e77e:	f3ef 8611 	mrs	r6, BASEPRI
   2e782:	f383 8812 	msr	BASEPRI_MAX, r3
   2e786:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2e78a:	4826      	ldr	r0, [pc, #152]	; (2e824 <net_buf_slist_get+0xc4>)
   2e78c:	f006 fd5e 	bl	3524c <z_spin_lock_valid>
   2e790:	b940      	cbnz	r0, 2e7a4 <net_buf_slist_get+0x44>
   2e792:	4925      	ldr	r1, [pc, #148]	; (2e828 <net_buf_slist_get+0xc8>)
   2e794:	4822      	ldr	r0, [pc, #136]	; (2e820 <net_buf_slist_get+0xc0>)
   2e796:	2294      	movs	r2, #148	; 0x94
   2e798:	f00a f9bb 	bl	38b12 <assert_print>
   2e79c:	2194      	movs	r1, #148	; 0x94
   2e79e:	4822      	ldr	r0, [pc, #136]	; (2e828 <net_buf_slist_get+0xc8>)
   2e7a0:	f00a f9b0 	bl	38b04 <assert_post_action>
	z_spin_lock_set_owner(l);
   2e7a4:	481f      	ldr	r0, [pc, #124]	; (2e824 <net_buf_slist_get+0xc4>)
   2e7a6:	f006 fd6f 	bl	35288 <z_spin_lock_set_owner>
	return list->head;
   2e7aa:	6825      	ldr	r5, [r4, #0]
Z_GENLIST_GET(slist, snode)
   2e7ac:	b15d      	cbz	r5, 2e7c6 <net_buf_slist_get+0x66>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2e7ae:	6862      	ldr	r2, [r4, #4]
	return node->next;
   2e7b0:	682b      	ldr	r3, [r5, #0]
	list->head = node;
   2e7b2:	6023      	str	r3, [r4, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2e7b4:	4295      	cmp	r5, r2
	list->tail = node;
   2e7b6:	bf08      	it	eq
   2e7b8:	6063      	streq	r3, [r4, #4]
{
   2e7ba:	462b      	mov	r3, r5
		for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   2e7bc:	795a      	ldrb	r2, [r3, #5]
   2e7be:	f012 0201 	ands.w	r2, r2, #1
   2e7c2:	d10b      	bne.n	2e7dc <net_buf_slist_get+0x7c>
			/* The fragments flag is only for list-internal usage */
			frag->flags &= ~NET_BUF_FRAGS;
		}

		/* Mark the end of the fragment list */
		frag->frags = NULL;
   2e7c4:	601a      	str	r2, [r3, #0]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2e7c6:	4817      	ldr	r0, [pc, #92]	; (2e824 <net_buf_slist_get+0xc4>)
   2e7c8:	f006 fd4e 	bl	35268 <z_spin_unlock_valid>
   2e7cc:	b9f8      	cbnz	r0, 2e80e <net_buf_slist_get+0xae>
   2e7ce:	4916      	ldr	r1, [pc, #88]	; (2e828 <net_buf_slist_get+0xc8>)
   2e7d0:	4813      	ldr	r0, [pc, #76]	; (2e820 <net_buf_slist_get+0xc0>)
   2e7d2:	22c2      	movs	r2, #194	; 0xc2
   2e7d4:	f00a f99d 	bl	38b12 <assert_print>
   2e7d8:	21c2      	movs	r1, #194	; 0xc2
   2e7da:	e7e0      	b.n	2e79e <net_buf_slist_get+0x3e>
	return list->head;
   2e7dc:	6822      	ldr	r2, [r4, #0]
Z_GENLIST_GET(slist, snode)
   2e7de:	b162      	cbz	r2, 2e7fa <net_buf_slist_get+0x9a>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2e7e0:	6860      	ldr	r0, [r4, #4]
	return node->next;
   2e7e2:	6811      	ldr	r1, [r2, #0]
	list->head = node;
   2e7e4:	6021      	str	r1, [r4, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2e7e6:	4282      	cmp	r2, r0
   2e7e8:	d100      	bne.n	2e7ec <net_buf_slist_get+0x8c>
	list->tail = node;
   2e7ea:	6061      	str	r1, [r4, #4]
			frag->flags &= ~NET_BUF_FRAGS;
   2e7ec:	7959      	ldrb	r1, [r3, #5]
			frag->frags = (void *)sys_slist_get(list);
   2e7ee:	601a      	str	r2, [r3, #0]
			frag->flags &= ~NET_BUF_FRAGS;
   2e7f0:	f021 0101 	bic.w	r1, r1, #1
   2e7f4:	7159      	strb	r1, [r3, #5]
   2e7f6:	4613      	mov	r3, r2
   2e7f8:	e7e0      	b.n	2e7bc <net_buf_slist_get+0x5c>
			__ASSERT_NO_MSG(frag->frags);
   2e7fa:	4908      	ldr	r1, [pc, #32]	; (2e81c <net_buf_slist_get+0xbc>)
			frag->frags = (void *)sys_slist_get(list);
   2e7fc:	601a      	str	r2, [r3, #0]
			__ASSERT_NO_MSG(frag->frags);
   2e7fe:	4808      	ldr	r0, [pc, #32]	; (2e820 <net_buf_slist_get+0xc0>)
   2e800:	f240 12ed 	movw	r2, #493	; 0x1ed
   2e804:	f00a f985 	bl	38b12 <assert_print>
   2e808:	f240 11ed 	movw	r1, #493	; 0x1ed
   2e80c:	e7b3      	b.n	2e776 <net_buf_slist_get+0x16>
	__asm__ volatile(
   2e80e:	f386 8811 	msr	BASEPRI, r6
   2e812:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&net_buf_slist_lock, key);

	return buf;
}
   2e816:	4628      	mov	r0, r5
   2e818:	bd70      	pop	{r4, r5, r6, pc}
   2e81a:	bf00      	nop
   2e81c:	0003eaf2 	.word	0x0003eaf2
   2e820:	0003d1d7 	.word	0x0003d1d7
   2e824:	20003060 	.word	0x20003060
   2e828:	0003d39d 	.word	0x0003d39d

0002e82c <net_buf_put>:

void net_buf_put(struct k_fifo *fifo, struct net_buf *buf)
{
   2e82c:	b510      	push	{r4, lr}
	struct net_buf *tail;

	__ASSERT_NO_MSG(fifo);
   2e82e:	b950      	cbnz	r0, 2e846 <net_buf_put+0x1a>
   2e830:	4911      	ldr	r1, [pc, #68]	; (2e878 <net_buf_put+0x4c>)
   2e832:	4812      	ldr	r0, [pc, #72]	; (2e87c <net_buf_put+0x50>)
   2e834:	f44f 7200 	mov.w	r2, #512	; 0x200
   2e838:	f00a f96b 	bl	38b12 <assert_print>
   2e83c:	f44f 7100 	mov.w	r1, #512	; 0x200
	__ASSERT_NO_MSG(buf);
   2e840:	480d      	ldr	r0, [pc, #52]	; (2e878 <net_buf_put+0x4c>)
   2e842:	f00a f95f 	bl	38b04 <assert_post_action>
   2e846:	b9a1      	cbnz	r1, 2e872 <net_buf_put+0x46>
   2e848:	490b      	ldr	r1, [pc, #44]	; (2e878 <net_buf_put+0x4c>)
   2e84a:	480c      	ldr	r0, [pc, #48]	; (2e87c <net_buf_put+0x50>)
   2e84c:	f240 2201 	movw	r2, #513	; 0x201
   2e850:	f00a f95f 	bl	38b12 <assert_print>
   2e854:	f240 2101 	movw	r1, #513	; 0x201
   2e858:	e7f2      	b.n	2e840 <net_buf_put+0x14>

	for (tail = buf; tail->frags; tail = tail->frags) {
		tail->flags |= NET_BUF_FRAGS;
   2e85a:	7953      	ldrb	r3, [r2, #5]
   2e85c:	f043 0301 	orr.w	r3, r3, #1
   2e860:	7153      	strb	r3, [r2, #5]
   2e862:	4622      	mov	r2, r4
	for (tail = buf; tail->frags; tail = tail->frags) {
   2e864:	6814      	ldr	r4, [r2, #0]
   2e866:	2c00      	cmp	r4, #0
   2e868:	d1f7      	bne.n	2e85a <net_buf_put+0x2e>
	}

	k_fifo_put_list(fifo, buf, tail);
}
   2e86a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_fifo_put_list(fifo, buf, tail);
   2e86e:	f006 beef 	b.w	35650 <k_queue_append_list>
   2e872:	460a      	mov	r2, r1
   2e874:	e7f6      	b.n	2e864 <net_buf_put+0x38>
   2e876:	bf00      	nop
   2e878:	0003eaf2 	.word	0x0003eaf2
   2e87c:	0003d1d7 	.word	0x0003d1d7

0002e880 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   2e880:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(buf);
   2e884:	4605      	mov	r5, r0
   2e886:	b328      	cbz	r0, 2e8d4 <net_buf_unref+0x54>
   2e888:	4e1b      	ldr	r6, [pc, #108]	; (2e8f8 <net_buf_unref+0x78>)
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   2e88a:	2700      	movs	r7, #0
	pool->alloc->cb->unref(buf, data);
   2e88c:	f04f 0834 	mov.w	r8, #52	; 0x34
		struct net_buf *frags = buf->frags;
   2e890:	462c      	mov	r4, r5
   2e892:	682d      	ldr	r5, [r5, #0]
		if (--buf->ref > 0) {
   2e894:	7923      	ldrb	r3, [r4, #4]
   2e896:	3b01      	subs	r3, #1
   2e898:	b2db      	uxtb	r3, r3
   2e89a:	7123      	strb	r3, [r4, #4]
   2e89c:	b9c3      	cbnz	r3, 2e8d0 <net_buf_unref+0x50>
		if (buf->__buf) {
   2e89e:	6921      	ldr	r1, [r4, #16]
   2e8a0:	b159      	cbz	r1, 2e8ba <net_buf_unref+0x3a>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   2e8a2:	7963      	ldrb	r3, [r4, #5]
   2e8a4:	079b      	lsls	r3, r3, #30
   2e8a6:	d407      	bmi.n	2e8b8 <net_buf_unref+0x38>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   2e8a8:	79a3      	ldrb	r3, [r4, #6]
	pool->alloc->cb->unref(buf, data);
   2e8aa:	fb08 6303 	mla	r3, r8, r3, r6
   2e8ae:	4620      	mov	r0, r4
   2e8b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2e8b2:	681b      	ldr	r3, [r3, #0]
   2e8b4:	689b      	ldr	r3, [r3, #8]
   2e8b6:	4798      	blx	r3
			buf->__buf = NULL;
   2e8b8:	6127      	str	r7, [r4, #16]
		}

		buf->data = NULL;
		buf->frags = NULL;

		pool = net_buf_pool_get(buf->pool_id);
   2e8ba:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
   2e8bc:	60a7      	str	r7, [r4, #8]
#if defined(CONFIG_NET_BUF_POOL_USAGE)
		atomic_inc(&pool->avail_count);
		__ASSERT_NO_MSG(atomic_get(&pool->avail_count) <= pool->buf_count);
#endif

		if (pool->destroy) {
   2e8be:	fb08 6300 	mla	r3, r8, r0, r6
		buf->frags = NULL;
   2e8c2:	6027      	str	r7, [r4, #0]
		if (pool->destroy) {
   2e8c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2e8c6:	b183      	cbz	r3, 2e8ea <net_buf_unref+0x6a>
			pool->destroy(buf);
   2e8c8:	4620      	mov	r0, r4
   2e8ca:	4798      	blx	r3
	while (buf) {
   2e8cc:	2d00      	cmp	r5, #0
   2e8ce:	d1df      	bne.n	2e890 <net_buf_unref+0x10>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   2e8d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT_NO_MSG(buf);
   2e8d4:	4909      	ldr	r1, [pc, #36]	; (2e8fc <net_buf_unref+0x7c>)
   2e8d6:	480a      	ldr	r0, [pc, #40]	; (2e900 <net_buf_unref+0x80>)
   2e8d8:	f44f 7204 	mov.w	r2, #528	; 0x210
   2e8dc:	f00a f919 	bl	38b12 <assert_print>
   2e8e0:	4806      	ldr	r0, [pc, #24]	; (2e8fc <net_buf_unref+0x7c>)
   2e8e2:	f44f 7104 	mov.w	r1, #528	; 0x210
   2e8e6:	f00a f90d 	bl	38b04 <assert_post_action>
	k_lifo_put(&pool->free, buf);
   2e8ea:	4621      	mov	r1, r4
   2e8ec:	fb00 6008 	mla	r0, r0, r8, r6
   2e8f0:	f00d f9c1 	bl	3bc76 <k_queue_prepend>
}
   2e8f4:	e7ea      	b.n	2e8cc <net_buf_unref+0x4c>
   2e8f6:	bf00      	nop
   2e8f8:	20000bec 	.word	0x20000bec
   2e8fc:	0003eaf2 	.word	0x0003eaf2
   2e900:	0003d1d7 	.word	0x0003d1d7

0002e904 <net_buf_ref>:

struct net_buf *net_buf_ref(struct net_buf *buf)
{
   2e904:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(buf);
   2e906:	b950      	cbnz	r0, 2e91e <net_buf_ref+0x1a>
   2e908:	4907      	ldr	r1, [pc, #28]	; (2e928 <net_buf_ref+0x24>)
   2e90a:	4808      	ldr	r0, [pc, #32]	; (2e92c <net_buf_ref+0x28>)
   2e90c:	f240 223f 	movw	r2, #575	; 0x23f
   2e910:	f00a f8ff 	bl	38b12 <assert_print>
   2e914:	4804      	ldr	r0, [pc, #16]	; (2e928 <net_buf_ref+0x24>)
   2e916:	f240 213f 	movw	r1, #575	; 0x23f
   2e91a:	f00a f8f3 	bl	38b04 <assert_post_action>

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   2e91e:	7902      	ldrb	r2, [r0, #4]
   2e920:	3201      	adds	r2, #1
   2e922:	7102      	strb	r2, [r0, #4]
	return buf;
}
   2e924:	bd08      	pop	{r3, pc}
   2e926:	bf00      	nop
   2e928:	0003eaf2 	.word	0x0003eaf2
   2e92c:	0003d1d7 	.word	0x0003d1d7

0002e930 <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   2e930:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(buf);
   2e932:	4603      	mov	r3, r0
   2e934:	b950      	cbnz	r0, 2e94c <net_buf_frag_last+0x1c>
   2e936:	4908      	ldr	r1, [pc, #32]	; (2e958 <net_buf_frag_last+0x28>)
   2e938:	4808      	ldr	r0, [pc, #32]	; (2e95c <net_buf_frag_last+0x2c>)
   2e93a:	f44f 721f 	mov.w	r2, #636	; 0x27c
   2e93e:	f00a f8e8 	bl	38b12 <assert_print>
   2e942:	4805      	ldr	r0, [pc, #20]	; (2e958 <net_buf_frag_last+0x28>)
   2e944:	f44f 711f 	mov.w	r1, #636	; 0x27c
   2e948:	f00a f8dc 	bl	38b04 <assert_post_action>

	while (buf->frags) {
   2e94c:	4618      	mov	r0, r3
   2e94e:	681b      	ldr	r3, [r3, #0]
   2e950:	2b00      	cmp	r3, #0
   2e952:	d1fb      	bne.n	2e94c <net_buf_frag_last+0x1c>
		buf = buf->frags;
	}

	return buf;
}
   2e954:	bd08      	pop	{r3, pc}
   2e956:	bf00      	nop
   2e958:	0003eaf2 	.word	0x0003eaf2
   2e95c:	0003d1d7 	.word	0x0003d1d7

0002e960 <net_buf_frag_insert>:

void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
   2e960:	b570      	push	{r4, r5, r6, lr}
   2e962:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(parent);
   2e964:	4604      	mov	r4, r0
   2e966:	b950      	cbnz	r0, 2e97e <net_buf_frag_insert+0x1e>
   2e968:	490e      	ldr	r1, [pc, #56]	; (2e9a4 <net_buf_frag_insert+0x44>)
   2e96a:	480f      	ldr	r0, [pc, #60]	; (2e9a8 <net_buf_frag_insert+0x48>)
   2e96c:	f240 2287 	movw	r2, #647	; 0x287
   2e970:	f00a f8cf 	bl	38b12 <assert_print>
   2e974:	f240 2187 	movw	r1, #647	; 0x287
	__ASSERT_NO_MSG(frag);
   2e978:	480a      	ldr	r0, [pc, #40]	; (2e9a4 <net_buf_frag_insert+0x44>)
   2e97a:	f00a f8c3 	bl	38b04 <assert_post_action>
   2e97e:	b941      	cbnz	r1, 2e992 <net_buf_frag_insert+0x32>
   2e980:	4908      	ldr	r1, [pc, #32]	; (2e9a4 <net_buf_frag_insert+0x44>)
   2e982:	4809      	ldr	r0, [pc, #36]	; (2e9a8 <net_buf_frag_insert+0x48>)
   2e984:	f44f 7222 	mov.w	r2, #648	; 0x288
   2e988:	f00a f8c3 	bl	38b12 <assert_print>
   2e98c:	f44f 7122 	mov.w	r1, #648	; 0x288
   2e990:	e7f2      	b.n	2e978 <net_buf_frag_insert+0x18>

	if (parent->frags) {
   2e992:	6806      	ldr	r6, [r0, #0]
   2e994:	b11e      	cbz	r6, 2e99e <net_buf_frag_insert+0x3e>
		net_buf_frag_last(frag)->frags = parent->frags;
   2e996:	4608      	mov	r0, r1
   2e998:	f7ff ffca 	bl	2e930 <net_buf_frag_last>
   2e99c:	6006      	str	r6, [r0, #0]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   2e99e:	6025      	str	r5, [r4, #0]
}
   2e9a0:	bd70      	pop	{r4, r5, r6, pc}
   2e9a2:	bf00      	nop
   2e9a4:	0003eaf2 	.word	0x0003eaf2
   2e9a8:	0003d1d7 	.word	0x0003d1d7

0002e9ac <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   2e9ac:	b538      	push	{r3, r4, r5, lr}
   2e9ae:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(frag);
   2e9b0:	460c      	mov	r4, r1
   2e9b2:	b951      	cbnz	r1, 2e9ca <net_buf_frag_add+0x1e>
   2e9b4:	490b      	ldr	r1, [pc, #44]	; (2e9e4 <net_buf_frag_add+0x38>)
   2e9b6:	480c      	ldr	r0, [pc, #48]	; (2e9e8 <net_buf_frag_add+0x3c>)
   2e9b8:	f240 2293 	movw	r2, #659	; 0x293
   2e9bc:	f00a f8a9 	bl	38b12 <assert_print>
   2e9c0:	4808      	ldr	r0, [pc, #32]	; (2e9e4 <net_buf_frag_add+0x38>)
   2e9c2:	f240 2193 	movw	r1, #659	; 0x293
   2e9c6:	f00a f89d 	bl	38b04 <assert_post_action>

	if (!head) {
   2e9ca:	b920      	cbnz	r0, 2e9d6 <net_buf_frag_add+0x2a>
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);

	return head;
}
   2e9cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return net_buf_ref(frag);
   2e9d0:	4608      	mov	r0, r1
   2e9d2:	f7ff bf97 	b.w	2e904 <net_buf_ref>
	net_buf_frag_insert(net_buf_frag_last(head), frag);
   2e9d6:	f7ff ffab 	bl	2e930 <net_buf_frag_last>
   2e9da:	4621      	mov	r1, r4
   2e9dc:	f7ff ffc0 	bl	2e960 <net_buf_frag_insert>
}
   2e9e0:	4628      	mov	r0, r5
   2e9e2:	bd38      	pop	{r3, r4, r5, pc}
   2e9e4:	0003eaf2 	.word	0x0003eaf2
   2e9e8:	0003d1d7 	.word	0x0003d1d7

0002e9ec <net_buf_simple_push>:

	return sys_be64_to_cpu(val);
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
   2e9ec:	b508      	push	{r3, lr}
   2e9ee:	4603      	mov	r3, r0
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   2e9f0:	6800      	ldr	r0, [r0, #0]
   2e9f2:	689a      	ldr	r2, [r3, #8]
   2e9f4:	1a82      	subs	r2, r0, r2
	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);
   2e9f6:	4291      	cmp	r1, r2
   2e9f8:	d90a      	bls.n	2ea10 <net_buf_simple_push+0x24>
   2e9fa:	4908      	ldr	r1, [pc, #32]	; (2ea1c <net_buf_simple_push+0x30>)
   2e9fc:	4808      	ldr	r0, [pc, #32]	; (2ea20 <net_buf_simple_push+0x34>)
   2e9fe:	f240 4217 	movw	r2, #1047	; 0x417
   2ea02:	f00a f886 	bl	38b12 <assert_print>
   2ea06:	4805      	ldr	r0, [pc, #20]	; (2ea1c <net_buf_simple_push+0x30>)
   2ea08:	f240 4117 	movw	r1, #1047	; 0x417
   2ea0c:	f00a f87a 	bl	38b04 <assert_post_action>
	buf->len += len;
   2ea10:	889a      	ldrh	r2, [r3, #4]
	buf->data -= len;
   2ea12:	1a40      	subs	r0, r0, r1
	buf->len += len;
   2ea14:	4411      	add	r1, r2
	buf->data -= len;
   2ea16:	6018      	str	r0, [r3, #0]
	buf->len += len;
   2ea18:	8099      	strh	r1, [r3, #4]
}
   2ea1a:	bd08      	pop	{r3, pc}
   2ea1c:	0003eaf2 	.word	0x0003eaf2
   2ea20:	0003d1d7 	.word	0x0003d1d7

0002ea24 <net_buf_simple_pull>:
{
   2ea24:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(buf->len >= len);
   2ea26:	8882      	ldrh	r2, [r0, #4]
   2ea28:	428a      	cmp	r2, r1
{
   2ea2a:	4603      	mov	r3, r0
	__ASSERT_NO_MSG(buf->len >= len);
   2ea2c:	d20a      	bcs.n	2ea44 <net_buf_simple_pull+0x20>
   2ea2e:	4908      	ldr	r1, [pc, #32]	; (2ea50 <net_buf_simple_pull+0x2c>)
   2ea30:	4808      	ldr	r0, [pc, #32]	; (2ea54 <net_buf_simple_pull+0x30>)
   2ea32:	f240 4277 	movw	r2, #1143	; 0x477
   2ea36:	f00a f86c 	bl	38b12 <assert_print>
   2ea3a:	4805      	ldr	r0, [pc, #20]	; (2ea50 <net_buf_simple_pull+0x2c>)
   2ea3c:	f240 4177 	movw	r1, #1143	; 0x477
   2ea40:	f00a f860 	bl	38b04 <assert_post_action>
	buf->len -= len;
   2ea44:	1a52      	subs	r2, r2, r1
   2ea46:	8082      	strh	r2, [r0, #4]
	return buf->data += len;
   2ea48:	6800      	ldr	r0, [r0, #0]
   2ea4a:	4408      	add	r0, r1
   2ea4c:	6018      	str	r0, [r3, #0]
}
   2ea4e:	bd08      	pop	{r3, pc}
   2ea50:	0003eaf2 	.word	0x0003eaf2
   2ea54:	0003d1d7 	.word	0x0003d1d7

0002ea58 <net_buf_simple_pull_mem>:
{
   2ea58:	b508      	push	{r3, lr}
   2ea5a:	4603      	mov	r3, r0
	void *data = buf->data;
   2ea5c:	6800      	ldr	r0, [r0, #0]
	__ASSERT_NO_MSG(buf->len >= len);
   2ea5e:	889a      	ldrh	r2, [r3, #4]
   2ea60:	428a      	cmp	r2, r1
   2ea62:	d20a      	bcs.n	2ea7a <net_buf_simple_pull_mem+0x22>
   2ea64:	4907      	ldr	r1, [pc, #28]	; (2ea84 <net_buf_simple_pull_mem+0x2c>)
   2ea66:	4808      	ldr	r0, [pc, #32]	; (2ea88 <net_buf_simple_pull_mem+0x30>)
   2ea68:	f240 4283 	movw	r2, #1155	; 0x483
   2ea6c:	f00a f851 	bl	38b12 <assert_print>
   2ea70:	4804      	ldr	r0, [pc, #16]	; (2ea84 <net_buf_simple_pull_mem+0x2c>)
   2ea72:	f240 4183 	movw	r1, #1155	; 0x483
   2ea76:	f00a f845 	bl	38b04 <assert_post_action>
	buf->len -= len;
   2ea7a:	1a52      	subs	r2, r2, r1
	buf->data += len;
   2ea7c:	4401      	add	r1, r0
	buf->len -= len;
   2ea7e:	809a      	strh	r2, [r3, #4]
	buf->data += len;
   2ea80:	6019      	str	r1, [r3, #0]
}
   2ea82:	bd08      	pop	{r3, pc}
   2ea84:	0003eaf2 	.word	0x0003eaf2
   2ea88:	0003d1d7 	.word	0x0003d1d7

0002ea8c <net_buf_simple_add>:
{
   2ea8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return buf->data + buf->len;
   2ea8e:	8885      	ldrh	r5, [r0, #4]
   2ea90:	6803      	ldr	r3, [r0, #0]
   2ea92:	460e      	mov	r6, r1
   2ea94:	4604      	mov	r4, r0
   2ea96:	195f      	adds	r7, r3, r5
	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);
   2ea98:	f00c f836 	bl	3ab08 <net_buf_simple_tailroom>
   2ea9c:	42b0      	cmp	r0, r6
   2ea9e:	d20a      	bcs.n	2eab6 <net_buf_simple_add+0x2a>
   2eaa0:	4907      	ldr	r1, [pc, #28]	; (2eac0 <net_buf_simple_add+0x34>)
   2eaa2:	4808      	ldr	r0, [pc, #32]	; (2eac4 <net_buf_simple_add+0x38>)
   2eaa4:	f44f 724a 	mov.w	r2, #808	; 0x328
   2eaa8:	f00a f833 	bl	38b12 <assert_print>
   2eaac:	4804      	ldr	r0, [pc, #16]	; (2eac0 <net_buf_simple_add+0x34>)
   2eaae:	f44f 714a 	mov.w	r1, #808	; 0x328
   2eab2:	f00a f827 	bl	38b04 <assert_post_action>
	buf->len += len;
   2eab6:	4435      	add	r5, r6
   2eab8:	80a5      	strh	r5, [r4, #4]
}
   2eaba:	4638      	mov	r0, r7
   2eabc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2eabe:	bf00      	nop
   2eac0:	0003eaf2 	.word	0x0003eaf2
   2eac4:	0003d1d7 	.word	0x0003d1d7

0002eac8 <xoshiro128_initialize>:
{
	return (x << k) | (x >> (32 - k));
}

static int xoshiro128_initialize(const struct device *dev)
{
   2eac8:	b508      	push	{r3, lr}
   2eaca:	4804      	ldr	r0, [pc, #16]	; (2eadc <xoshiro128_initialize+0x14>)
   2eacc:	f00d f866 	bl	3bb9c <z_device_is_ready>
	if (!device_is_ready(entropy_driver)) {
		return -ENODEV;
	}
	return 0;
   2ead0:	2800      	cmp	r0, #0
}
   2ead2:	bf0c      	ite	eq
   2ead4:	f06f 0012 	mvneq.w	r0, #18
   2ead8:	2000      	movne	r0, #0
   2eada:	bd08      	pop	{r3, pc}
   2eadc:	0003c118 	.word	0x0003c118

0002eae0 <adc_gain_invert>:
		[ADC_GAIN_64] = {.mul = 1, .div = 64},
		[ADC_GAIN_128] = {.mul = 1, .div = 128},
	};
	int rv = -EINVAL;

	if ((uint8_t)gain < ARRAY_SIZE(gains)) {
   2eae0:	2813      	cmp	r0, #19
   2eae2:	d80e      	bhi.n	2eb02 <adc_gain_invert+0x22>
		const struct gain_desc *gdp = &gains[gain];

		if ((gdp->mul != 0) && (gdp->div != 0)) {
   2eae4:	4a08      	ldr	r2, [pc, #32]	; (2eb08 <adc_gain_invert+0x28>)
   2eae6:	f812 3010 	ldrb.w	r3, [r2, r0, lsl #1]
   2eaea:	b153      	cbz	r3, 2eb02 <adc_gain_invert+0x22>
   2eaec:	eb02 0240 	add.w	r2, r2, r0, lsl #1
   2eaf0:	7852      	ldrb	r2, [r2, #1]
   2eaf2:	b132      	cbz	r2, 2eb02 <adc_gain_invert+0x22>
			*value = (gdp->mul * *value) / gdp->div;
   2eaf4:	6808      	ldr	r0, [r1, #0]
   2eaf6:	4343      	muls	r3, r0
			rv = 0;
   2eaf8:	2000      	movs	r0, #0
			*value = (gdp->mul * *value) / gdp->div;
   2eafa:	fb93 f3f2 	sdiv	r3, r3, r2
   2eafe:	600b      	str	r3, [r1, #0]
			rv = 0;
   2eb00:	4770      	bx	lr
	int rv = -EINVAL;
   2eb02:	f06f 0015 	mvn.w	r0, #21
		}
	}

	return rv;
}
   2eb06:	4770      	bx	lr
   2eb08:	0003eb1e 	.word	0x0003eb1e

0002eb0c <adc_context_start_sampling>:
    return (p_reg->STATUS == (SAADC_STATUS_STATUS_Busy << SAADC_STATUS_STATUS_Pos));
}

NRF_STATIC_INLINE void nrf_saadc_enable(NRF_SAADC_Type * p_reg)
{
    p_reg->ENABLE = (SAADC_ENABLE_ENABLE_Enabled << SAADC_ENABLE_ENABLE_Pos);
   2eb0c:	4b05      	ldr	r3, [pc, #20]	; (2eb24 <adc_context_start_sampling+0x18>)
   2eb0e:	2201      	movs	r2, #1
   2eb10:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500

static void adc_context_start_sampling(struct adc_context *ctx)
{
	nrf_saadc_enable(NRF_SAADC);

	if (ctx->sequence.calibrate) {
   2eb14:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
   2eb18:	b109      	cbz	r1, 2eb1e <adc_context_start_sampling+0x12>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2eb1a:	60da      	str	r2, [r3, #12]
}
   2eb1c:	4770      	bx	lr
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2eb1e:	601a      	str	r2, [r3, #0]
   2eb20:	605a      	str	r2, [r3, #4]
				       NRF_SAADC_TASK_CALIBRATEOFFSET);
	} else {
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_START);
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_SAMPLE);
	}
}
   2eb22:	4770      	bx	lr
   2eb24:	40007000 	.word	0x40007000

0002eb28 <adc_nrfx_channel_setup>:
{
   2eb28:	b570      	push	{r4, r5, r6, lr}
	uint8_t channel_id = channel_cfg->channel_id;
   2eb2a:	7908      	ldrb	r0, [r1, #4]
   2eb2c:	f000 041f 	and.w	r4, r0, #31
	if (channel_id >= SAADC_CH_NUM) {
   2eb30:	2c07      	cmp	r4, #7
{
   2eb32:	b086      	sub	sp, #24
	if (channel_id >= SAADC_CH_NUM) {
   2eb34:	d82a      	bhi.n	2eb8c <adc_nrfx_channel_setup+0x64>
	switch (channel_cfg->gain) {
   2eb36:	780b      	ldrb	r3, [r1, #0]
   2eb38:	2b0b      	cmp	r3, #11
   2eb3a:	d819      	bhi.n	2eb70 <adc_nrfx_channel_setup+0x48>
   2eb3c:	e8df f003 	tbb	[pc, r3]
   2eb40:	07070707 	.word	0x07070707
   2eb44:	18180618 	.word	0x18180618
   2eb48:	16181412 	.word	0x16181412
		config.gain = NRF_SAADC_GAIN1_2;
   2eb4c:	2304      	movs	r3, #4
	switch (channel_cfg->reference) {
   2eb4e:	784a      	ldrb	r2, [r1, #1]
   2eb50:	2a03      	cmp	r2, #3
   2eb52:	d01f      	beq.n	2eb94 <adc_nrfx_channel_setup+0x6c>
   2eb54:	2a04      	cmp	r2, #4
   2eb56:	d034      	beq.n	2ebc2 <adc_nrfx_channel_setup+0x9a>
		LOG_ERR("Selected ADC reference is not valid");
   2eb58:	4837      	ldr	r0, [pc, #220]	; (2ec38 <adc_nrfx_channel_setup+0x110>)
   2eb5a:	6803      	ldr	r3, [r0, #0]
   2eb5c:	075a      	lsls	r2, r3, #29
   2eb5e:	d015      	beq.n	2eb8c <adc_nrfx_channel_setup+0x64>
   2eb60:	4b36      	ldr	r3, [pc, #216]	; (2ec3c <adc_nrfx_channel_setup+0x114>)
   2eb62:	e00a      	b.n	2eb7a <adc_nrfx_channel_setup+0x52>
		config.gain = NRF_SAADC_GAIN1;
   2eb64:	2305      	movs	r3, #5
		break;
   2eb66:	e7f2      	b.n	2eb4e <adc_nrfx_channel_setup+0x26>
		config.gain = NRF_SAADC_GAIN2;
   2eb68:	2306      	movs	r3, #6
		break;
   2eb6a:	e7f0      	b.n	2eb4e <adc_nrfx_channel_setup+0x26>
		config.gain = NRF_SAADC_GAIN4;
   2eb6c:	2307      	movs	r3, #7
		break;
   2eb6e:	e7ee      	b.n	2eb4e <adc_nrfx_channel_setup+0x26>
		LOG_ERR("Selected ADC gain is not valid");
   2eb70:	4831      	ldr	r0, [pc, #196]	; (2ec38 <adc_nrfx_channel_setup+0x110>)
   2eb72:	6803      	ldr	r3, [r0, #0]
   2eb74:	0759      	lsls	r1, r3, #29
   2eb76:	d009      	beq.n	2eb8c <adc_nrfx_channel_setup+0x64>
   2eb78:	4b31      	ldr	r3, [pc, #196]	; (2ec40 <adc_nrfx_channel_setup+0x118>)
		LOG_ERR("Selected ADC acquisition time is not valid");
   2eb7a:	9305      	str	r3, [sp, #20]
   2eb7c:	2302      	movs	r3, #2
   2eb7e:	9304      	str	r3, [sp, #16]
   2eb80:	2300      	movs	r3, #0
   2eb82:	aa04      	add	r2, sp, #16
   2eb84:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   2eb88:	f7f7 fb10 	bl	261ac <z_impl_z_log_msg_static_create>
		return -EINVAL;
   2eb8c:	f06f 0015 	mvn.w	r0, #21
}
   2eb90:	b006      	add	sp, #24
   2eb92:	bd70      	pop	{r4, r5, r6, pc}
	switch (channel_cfg->reference) {
   2eb94:	2501      	movs	r5, #1
	switch (channel_cfg->acquisition_time) {
   2eb96:	884a      	ldrh	r2, [r1, #2]
   2eb98:	f244 060a 	movw	r6, #16394	; 0x400a
   2eb9c:	42b2      	cmp	r2, r6
   2eb9e:	d044      	beq.n	2ec2a <adc_nrfx_channel_setup+0x102>
   2eba0:	d811      	bhi.n	2ebc6 <adc_nrfx_channel_setup+0x9e>
   2eba2:	f244 0603 	movw	r6, #16387	; 0x4003
   2eba6:	42b2      	cmp	r2, r6
   2eba8:	d01b      	beq.n	2ebe2 <adc_nrfx_channel_setup+0xba>
   2ebaa:	f244 0605 	movw	r6, #16389	; 0x4005
   2ebae:	42b2      	cmp	r2, r6
   2ebb0:	d039      	beq.n	2ec26 <adc_nrfx_channel_setup+0xfe>
   2ebb2:	2a00      	cmp	r2, #0
   2ebb4:	d039      	beq.n	2ec2a <adc_nrfx_channel_setup+0x102>
		LOG_ERR("Selected ADC acquisition time is not valid");
   2ebb6:	4820      	ldr	r0, [pc, #128]	; (2ec38 <adc_nrfx_channel_setup+0x110>)
   2ebb8:	6803      	ldr	r3, [r0, #0]
   2ebba:	075b      	lsls	r3, r3, #29
   2ebbc:	d0e6      	beq.n	2eb8c <adc_nrfx_channel_setup+0x64>
   2ebbe:	4b21      	ldr	r3, [pc, #132]	; (2ec44 <adc_nrfx_channel_setup+0x11c>)
   2ebc0:	e7db      	b.n	2eb7a <adc_nrfx_channel_setup+0x52>
	nrf_saadc_channel_config_t config = {
   2ebc2:	2500      	movs	r5, #0
   2ebc4:	e7e7      	b.n	2eb96 <adc_nrfx_channel_setup+0x6e>
	switch (channel_cfg->acquisition_time) {
   2ebc6:	f244 0614 	movw	r6, #16404	; 0x4014
   2ebca:	42b2      	cmp	r2, r6
   2ebcc:	d02f      	beq.n	2ec2e <adc_nrfx_channel_setup+0x106>
   2ebce:	f244 0628 	movw	r6, #16424	; 0x4028
   2ebd2:	42b2      	cmp	r2, r6
   2ebd4:	d02d      	beq.n	2ec32 <adc_nrfx_channel_setup+0x10a>
   2ebd6:	f244 060f 	movw	r6, #16399	; 0x400f
   2ebda:	42b2      	cmp	r2, r6
   2ebdc:	d1eb      	bne.n	2ebb6 <adc_nrfx_channel_setup+0x8e>
		config.acq_time = NRF_SAADC_ACQTIME_15US;
   2ebde:	2203      	movs	r2, #3
   2ebe0:	e000      	b.n	2ebe4 <adc_nrfx_channel_setup+0xbc>
	nrf_saadc_channel_config_t config = {
   2ebe2:	2200      	movs	r2, #0
            ((config->resistor_p   << SAADC_CH_CONFIG_RESP_Pos)   & SAADC_CH_CONFIG_RESP_Msk)
            | ((config->resistor_n << SAADC_CH_CONFIG_RESN_Pos)   & SAADC_CH_CONFIG_RESN_Msk)
            | ((config->gain       << SAADC_CH_CONFIG_GAIN_Pos)   & SAADC_CH_CONFIG_GAIN_Msk)
            | ((config->reference  << SAADC_CH_CONFIG_REFSEL_Pos) & SAADC_CH_CONFIG_REFSEL_Msk)
            | ((config->acq_time   << SAADC_CH_CONFIG_TACQ_Pos)   & SAADC_CH_CONFIG_TACQ_Msk)
            | ((config->mode       << SAADC_CH_CONFIG_MODE_Pos)   & SAADC_CH_CONFIG_MODE_Msk)
   2ebe4:	f3c0 1040 	ubfx	r0, r0, #5, #1
            | ((config->gain       << SAADC_CH_CONFIG_GAIN_Pos)   & SAADC_CH_CONFIG_GAIN_Msk)
   2ebe8:	021b      	lsls	r3, r3, #8
            | ((config->mode       << SAADC_CH_CONFIG_MODE_Pos)   & SAADC_CH_CONFIG_MODE_Msk)
   2ebea:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
   2ebee:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
   2ebf2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    p_reg->CH[channel].CONFIG =
   2ebf6:	0122      	lsls	r2, r4, #4
   2ebf8:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   2ebfc:	f502 42e0 	add.w	r2, r2, #28672	; 0x7000
    p_reg->CH[channel].PSELP = pselp;
   2ec00:	2000      	movs	r0, #0
    p_reg->CH[channel].CONFIG =
   2ec02:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    p_reg->CH[channel].PSELN = pseln;
   2ec06:	0123      	lsls	r3, r4, #4
   2ec08:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   2ec0c:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
   2ec10:	798a      	ldrb	r2, [r1, #6]
   2ec12:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CH[channel].PSELP = pselp;
   2ec16:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
	m_data.positive_inputs[channel_id] = channel_cfg->input_positive;
   2ec1a:	4b0b      	ldr	r3, [pc, #44]	; (2ec48 <adc_nrfx_channel_setup+0x120>)
   2ec1c:	794a      	ldrb	r2, [r1, #5]
   2ec1e:	4423      	add	r3, r4
   2ec20:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
	return 0;
   2ec24:	e7b4      	b.n	2eb90 <adc_nrfx_channel_setup+0x68>
	switch (channel_cfg->acquisition_time) {
   2ec26:	2201      	movs	r2, #1
   2ec28:	e7dc      	b.n	2ebe4 <adc_nrfx_channel_setup+0xbc>
		config.acq_time = NRF_SAADC_ACQTIME_10US;
   2ec2a:	2202      	movs	r2, #2
   2ec2c:	e7da      	b.n	2ebe4 <adc_nrfx_channel_setup+0xbc>
		config.acq_time = NRF_SAADC_ACQTIME_20US;
   2ec2e:	2204      	movs	r2, #4
   2ec30:	e7d8      	b.n	2ebe4 <adc_nrfx_channel_setup+0xbc>
		config.acq_time = NRF_SAADC_ACQTIME_40US;
   2ec32:	2205      	movs	r2, #5
   2ec34:	e7d6      	b.n	2ebe4 <adc_nrfx_channel_setup+0xbc>
   2ec36:	bf00      	nop
   2ec38:	20000a70 	.word	0x20000a70
   2ec3c:	0003eb65 	.word	0x0003eb65
   2ec40:	0003eb46 	.word	0x0003eb46
   2ec44:	0003eb89 	.word	0x0003eb89
   2ec48:	20000540 	.word	0x20000540

0002ec4c <adc_nrfx_read>:
}

/* Implementation of the ADC driver API function: adc_read. */
static int adc_nrfx_read(const struct device *dev,
			 const struct adc_sequence *sequence)
{
   2ec4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2ec50:	b088      	sub	sp, #32
   2ec52:	460c      	mov	r4, r1
   2ec54:	af02      	add	r7, sp, #8
	return z_impl_k_sem_take(sem, timeout);
   2ec56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2ec5a:	4884      	ldr	r0, [pc, #528]	; (2ee6c <adc_nrfx_read+0x220>)
   2ec5c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2ec60:	f006 fddc 	bl	3581c <z_impl_k_sem_take>
	uint32_t selected_channels = sequence->channels;
   2ec64:	6866      	ldr	r6, [r4, #4]
	if (!selected_channels ||
   2ec66:	1e73      	subs	r3, r6, #1
   2ec68:	2bfe      	cmp	r3, #254	; 0xfe
   2ec6a:	d90f      	bls.n	2ec8c <adc_nrfx_read+0x40>
		LOG_ERR("Invalid selection of channels");
   2ec6c:	4880      	ldr	r0, [pc, #512]	; (2ee70 <adc_nrfx_read+0x224>)
   2ec6e:	6803      	ldr	r3, [r0, #0]
   2ec70:	075b      	lsls	r3, r3, #29
   2ec72:	d02a      	beq.n	2ecca <adc_nrfx_read+0x7e>
   2ec74:	4b7f      	ldr	r3, [pc, #508]	; (2ee74 <adc_nrfx_read+0x228>)
		LOG_ERR(
   2ec76:	617b      	str	r3, [r7, #20]
   2ec78:	2302      	movs	r3, #2
   2ec7a:	613b      	str	r3, [r7, #16]
   2ec7c:	2300      	movs	r3, #0
   2ec7e:	f107 0210 	add.w	r2, r7, #16
   2ec82:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   2ec86:	f7f7 fa91 	bl	261ac <z_impl_z_log_msg_static_create>
	if (error) {
   2ec8a:	e01e      	b.n	2ecca <adc_nrfx_read+0x7e>
   2ec8c:	2100      	movs	r1, #0
    p_reg->CH[channel].PSELP = pselp;
   2ec8e:	4d7a      	ldr	r5, [pc, #488]	; (2ee78 <adc_nrfx_read+0x22c>)
			if (m_data.positive_inputs[channel_id] == 0U) {
   2ec90:	f8df c1e8 	ldr.w	ip, [pc, #488]	; 2ee7c <adc_nrfx_read+0x230>
	active_channels = 0U;
   2ec94:	460a      	mov	r2, r1
		if (selected_channels & BIT(channel_id)) {
   2ec96:	fa26 f301 	lsr.w	r3, r6, r1
   2ec9a:	f013 0301 	ands.w	r3, r3, #1
   2ec9e:	d043      	beq.n	2ed28 <adc_nrfx_read+0xdc>
			if (m_data.positive_inputs[channel_id] == 0U) {
   2eca0:	f81c 3001 	ldrb.w	r3, [ip, r1]
   2eca4:	b9db      	cbnz	r3, 2ecde <adc_nrfx_read+0x92>
				LOG_ERR("Channel %u not configured",
   2eca6:	4872      	ldr	r0, [pc, #456]	; (2ee70 <adc_nrfx_read+0x224>)
   2eca8:	6802      	ldr	r2, [r0, #0]
   2ecaa:	0756      	lsls	r6, r2, #29
   2ecac:	d00d      	beq.n	2ecca <adc_nrfx_read+0x7e>
   2ecae:	466c      	mov	r4, sp
   2ecb0:	b088      	sub	sp, #32
   2ecb2:	aa02      	add	r2, sp, #8
   2ecb4:	4d72      	ldr	r5, [pc, #456]	; (2ee80 <adc_nrfx_read+0x234>)
   2ecb6:	e9c2 5105 	strd	r5, r1, [r2, #20]
   2ecba:	2103      	movs	r1, #3
   2ecbc:	f842 1f10 	str.w	r1, [r2, #16]!
   2ecc0:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   2ecc4:	f7f7 fa72 	bl	261ac <z_impl_z_log_msg_static_create>
   2ecc8:	46a5      	mov	sp, r4
		return -EINVAL;
   2ecca:	f06f 0415 	mvn.w	r4, #21
	z_impl_k_sem_give(sem);
   2ecce:	4867      	ldr	r0, [pc, #412]	; (2ee6c <adc_nrfx_read+0x220>)
   2ecd0:	f006 fd6a 	bl	357a8 <z_impl_k_sem_give>
	adc_context_lock(&m_data.ctx, false, NULL);
	error = start_read(dev, sequence);
	adc_context_release(&m_data.ctx, error);

	return error;
}
   2ecd4:	4620      	mov	r0, r4
   2ecd6:	3718      	adds	r7, #24
   2ecd8:	46bd      	mov	sp, r7
   2ecda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

NRF_STATIC_INLINE void nrf_saadc_burst_set(NRF_SAADC_Type *  p_reg,
                                           uint8_t           channel,
                                           nrf_saadc_burst_t burst)
{
    p_reg->CH[channel].CONFIG = (p_reg->CH[channel].CONFIG & ~SAADC_CH_CONFIG_BURST_Msk) |
   2ecde:	eb05 1801 	add.w	r8, r5, r1, lsl #4
			nrf_saadc_burst_set(NRF_SAADC, channel_id,
   2ece2:	f894 e011 	ldrb.w	lr, [r4, #17]
   2ece6:	f8d8 0518 	ldr.w	r0, [r8, #1304]	; 0x518
   2ecea:	f1be 0e00 	subs.w	lr, lr, #0
   2ecee:	bf18      	it	ne
   2ecf0:	f04f 0e01 	movne.w	lr, #1
   2ecf4:	f020 7080 	bic.w	r0, r0, #16777216	; 0x1000000
   2ecf8:	ea40 600e 	orr.w	r0, r0, lr, lsl #24
   2ecfc:	f8c8 0518 	str.w	r0, [r8, #1304]	; 0x518
    p_reg->CH[channel].PSELP = pselp;
   2ed00:	f101 0051 	add.w	r0, r1, #81	; 0x51
   2ed04:	0100      	lsls	r0, r0, #4
			++active_channels;
   2ed06:	3201      	adds	r2, #1
   2ed08:	502b      	str	r3, [r5, r0]
   2ed0a:	b2d2      	uxtb	r2, r2
	} while (++channel_id < SAADC_CH_NUM);
   2ed0c:	3101      	adds	r1, #1
   2ed0e:	2908      	cmp	r1, #8
   2ed10:	d1c1      	bne.n	2ec96 <adc_nrfx_read+0x4a>
	error = set_resolution(sequence);
   2ed12:	7c23      	ldrb	r3, [r4, #16]
	switch (sequence->resolution) {
   2ed14:	f1a3 0108 	sub.w	r1, r3, #8
   2ed18:	2906      	cmp	r1, #6
   2ed1a:	d81a      	bhi.n	2ed52 <adc_nrfx_read+0x106>
   2ed1c:	e8df f001 	tbb	[pc, r1]
   2ed20:	192a1928 	.word	0x192a1928
   2ed24:	1909      	.short	0x1909
   2ed26:	17          	.byte	0x17
   2ed27:	00          	.byte	0x00
   2ed28:	f101 0051 	add.w	r0, r1, #81	; 0x51
   2ed2c:	0100      	lsls	r0, r0, #4
   2ed2e:	502b      	str	r3, [r5, r0]
}
   2ed30:	e7ec      	b.n	2ed0c <adc_nrfx_read+0xc0>
		nrf_resolution = NRF_SAADC_RESOLUTION_12BIT;
   2ed32:	2302      	movs	r3, #2
    p_reg->RESOLUTION = resolution;
   2ed34:	4950      	ldr	r1, [pc, #320]	; (2ee78 <adc_nrfx_read+0x22c>)
	if ((active_channels > 1) && (sequence->oversampling > 0)) {
   2ed36:	2a01      	cmp	r2, #1
   2ed38:	f8c1 35f0 	str.w	r3, [r1, #1520]	; 0x5f0
	error = set_oversampling(sequence, active_channels);
   2ed3c:	7c63      	ldrb	r3, [r4, #17]
	if ((active_channels > 1) && (sequence->oversampling > 0)) {
   2ed3e:	d91b      	bls.n	2ed78 <adc_nrfx_read+0x12c>
   2ed40:	b1e3      	cbz	r3, 2ed7c <adc_nrfx_read+0x130>
		LOG_ERR(
   2ed42:	484b      	ldr	r0, [pc, #300]	; (2ee70 <adc_nrfx_read+0x224>)
   2ed44:	6803      	ldr	r3, [r0, #0]
   2ed46:	075c      	lsls	r4, r3, #29
   2ed48:	d0bf      	beq.n	2ecca <adc_nrfx_read+0x7e>
   2ed4a:	4b4e      	ldr	r3, [pc, #312]	; (2ee84 <adc_nrfx_read+0x238>)
   2ed4c:	e793      	b.n	2ec76 <adc_nrfx_read+0x2a>
		nrf_resolution = NRF_SAADC_RESOLUTION_14BIT;
   2ed4e:	2303      	movs	r3, #3
		break;
   2ed50:	e7f0      	b.n	2ed34 <adc_nrfx_read+0xe8>
		LOG_ERR("ADC resolution value %d is not valid",
   2ed52:	4847      	ldr	r0, [pc, #284]	; (2ee70 <adc_nrfx_read+0x224>)
   2ed54:	6802      	ldr	r2, [r0, #0]
   2ed56:	0755      	lsls	r5, r2, #29
   2ed58:	d0b7      	beq.n	2ecca <adc_nrfx_read+0x7e>
   2ed5a:	466c      	mov	r4, sp
   2ed5c:	b088      	sub	sp, #32
   2ed5e:	aa02      	add	r2, sp, #8
   2ed60:	4949      	ldr	r1, [pc, #292]	; (2ee88 <adc_nrfx_read+0x23c>)
	switch (sequence->oversampling) {
   2ed62:	e9c2 1305 	strd	r1, r3, [r2, #20]
		LOG_ERR("Oversampling value %d is not valid",
   2ed66:	2303      	movs	r3, #3
   2ed68:	f842 3f10 	str.w	r3, [r2, #16]!
   2ed6c:	2300      	movs	r3, #0
   2ed6e:	e7a7      	b.n	2ecc0 <adc_nrfx_read+0x74>
		nrf_resolution = NRF_SAADC_RESOLUTION_8BIT;
   2ed70:	2300      	movs	r3, #0
   2ed72:	e7df      	b.n	2ed34 <adc_nrfx_read+0xe8>
	switch (sequence->resolution) {
   2ed74:	2301      	movs	r3, #1
   2ed76:	e7dd      	b.n	2ed34 <adc_nrfx_read+0xe8>
	switch (sequence->oversampling) {
   2ed78:	2b08      	cmp	r3, #8
   2ed7a:	d81e      	bhi.n	2edba <adc_nrfx_read+0x16e>
    p_reg->OVERSAMPLE = oversample;
   2ed7c:	f8c1 35f4 	str.w	r3, [r1, #1524]	; 0x5f4
	if (sequence->options) {
   2ed80:	6821      	ldr	r1, [r4, #0]
	needed_buffer_size = active_channels * sizeof(nrf_saadc_value_t);
   2ed82:	0053      	lsls	r3, r2, #1
	if (sequence->options) {
   2ed84:	bb11      	cbnz	r1, 2edcc <adc_nrfx_read+0x180>
	if (sequence->buffer_size < needed_buffer_size) {
   2ed86:	68e1      	ldr	r1, [r4, #12]
   2ed88:	4299      	cmp	r1, r3
   2ed8a:	d223      	bcs.n	2edd4 <adc_nrfx_read+0x188>
		LOG_ERR("Provided buffer is too small (%u/%u)",
   2ed8c:	4838      	ldr	r0, [pc, #224]	; (2ee70 <adc_nrfx_read+0x224>)
   2ed8e:	6802      	ldr	r2, [r0, #0]
   2ed90:	0752      	lsls	r2, r2, #29
   2ed92:	d00f      	beq.n	2edb4 <adc_nrfx_read+0x168>
   2ed94:	466c      	mov	r4, sp
   2ed96:	b088      	sub	sp, #32
   2ed98:	aa02      	add	r2, sp, #8
   2ed9a:	4d3c      	ldr	r5, [pc, #240]	; (2ee8c <adc_nrfx_read+0x240>)
   2ed9c:	61d3      	str	r3, [r2, #28]
   2ed9e:	2304      	movs	r3, #4
   2eda0:	e9c2 5105 	strd	r5, r1, [r2, #20]
   2eda4:	f842 3f10 	str.w	r3, [r2, #16]!
   2eda8:	2300      	movs	r3, #0
   2edaa:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   2edae:	f7f7 f9fd 	bl	261ac <z_impl_z_log_msg_static_create>
   2edb2:	46a5      	mov	sp, r4
		return -ENOMEM;
   2edb4:	f06f 040b 	mvn.w	r4, #11
   2edb8:	e789      	b.n	2ecce <adc_nrfx_read+0x82>
		LOG_ERR("Oversampling value %d is not valid",
   2edba:	482d      	ldr	r0, [pc, #180]	; (2ee70 <adc_nrfx_read+0x224>)
   2edbc:	6802      	ldr	r2, [r0, #0]
   2edbe:	0751      	lsls	r1, r2, #29
   2edc0:	d083      	beq.n	2ecca <adc_nrfx_read+0x7e>
   2edc2:	466c      	mov	r4, sp
   2edc4:	b088      	sub	sp, #32
   2edc6:	aa02      	add	r2, sp, #8
   2edc8:	4931      	ldr	r1, [pc, #196]	; (2ee90 <adc_nrfx_read+0x244>)
   2edca:	e7ca      	b.n	2ed62 <adc_nrfx_read+0x116>
		needed_buffer_size *= (1 + sequence->options->extra_samplings);
   2edcc:	8989      	ldrh	r1, [r1, #12]
   2edce:	fb01 3303 	mla	r3, r1, r3, r3
   2edd2:	e7d8      	b.n	2ed86 <adc_nrfx_read+0x13a>
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
   2edd4:	4b28      	ldr	r3, [pc, #160]	; (2ee78 <adc_nrfx_read+0x22c>)
   2edd6:	68a1      	ldr	r1, [r4, #8]
   2edd8:	f8c3 162c 	str.w	r1, [r3, #1580]	; 0x62c
}

static inline void adc_context_start_read(struct adc_context *ctx,
					  const struct adc_sequence *sequence)
{
	ctx->sequence = *sequence;
   2eddc:	46a4      	mov	ip, r4
    p_reg->RESULT.MAXCNT = size;
   2edde:	f8c3 2630 	str.w	r2, [r3, #1584]	; 0x630
   2ede2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   2ede6:	4d2b      	ldr	r5, [pc, #172]	; (2ee94 <adc_nrfx_read+0x248>)
   2ede8:	f105 0674 	add.w	r6, r5, #116	; 0x74
   2edec:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   2edee:	f8dc 3000 	ldr.w	r3, [ip]
   2edf2:	6033      	str	r3, [r6, #0]
	ctx->status = 0;
   2edf4:	2600      	movs	r6, #0
   2edf6:	672e      	str	r6, [r5, #112]	; 0x70

	if (sequence->options) {
   2edf8:	6823      	ldr	r3, [r4, #0]
   2edfa:	46ac      	mov	ip, r5
   2edfc:	b38b      	cbz	r3, 2ee62 <adc_nrfx_read+0x216>
		ctx->options = *sequence->options;
   2edfe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   2ee00:	f105 0488 	add.w	r4, r5, #136	; 0x88
   2ee04:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		ctx->sequence.options = &ctx->options;
   2ee08:	676c      	str	r4, [r5, #116]	; 0x74
		ctx->sampling_index = 0U;
   2ee0a:	f8a5 6098 	strh.w	r6, [r5, #152]	; 0x98

		if (ctx->options.interval_us != 0U) {
   2ee0e:	b340      	cbz	r0, 2ee62 <adc_nrfx_read+0x216>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   2ee10:	f3bf 8f5b 	dmb	ish
   2ee14:	e85c 3f00 	ldrex	r3, [ip]
   2ee18:	e84c 6200 	strex	r2, r6, [ip]
   2ee1c:	2a00      	cmp	r2, #0
   2ee1e:	d1f9      	bne.n	2ee14 <adc_nrfx_read+0x1c8>
   2ee20:	f3bf 8f5b 	dmb	ish
			return ((t * to_hz + off) / from_hz);
   2ee24:	491c      	ldr	r1, [pc, #112]	; (2ee98 <adc_nrfx_read+0x24c>)
   2ee26:	f8d5 0088 	ldr.w	r0, [r5, #136]	; 0x88
   2ee2a:	4a1c      	ldr	r2, [pc, #112]	; (2ee9c <adc_nrfx_read+0x250>)
   2ee2c:	f44f 4400 	mov.w	r4, #32768	; 0x8000
   2ee30:	468c      	mov	ip, r1
   2ee32:	4631      	mov	r1, r6
   2ee34:	fbe0 c104 	umlal	ip, r1, r0, r4
   2ee38:	2300      	movs	r3, #0
   2ee3a:	4660      	mov	r0, ip
   2ee3c:	f7de f9d8 	bl	d1f0 <__aeabi_uldivmod>
	z_impl_k_timer_start(timer, duration, period);
   2ee40:	2200      	movs	r2, #0
   2ee42:	e9cd 0100 	strd	r0, r1, [sp]
   2ee46:	2300      	movs	r3, #0
   2ee48:	f105 0008 	add.w	r0, r5, #8
   2ee4c:	f008 fd82 	bl	37954 <z_impl_k_timer_start>
	return z_impl_k_sem_take(sem, timeout);
   2ee50:	4813      	ldr	r0, [pc, #76]	; (2eea0 <adc_nrfx_read+0x254>)
   2ee52:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2ee56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2ee5a:	f006 fcdf 	bl	3581c <z_impl_k_sem_take>
	return ctx->status;
   2ee5e:	6f2c      	ldr	r4, [r5, #112]	; 0x70
	return error;
   2ee60:	e735      	b.n	2ecce <adc_nrfx_read+0x82>
			adc_context_enable_timer(ctx);
			return;
		}
	}

	adc_context_start_sampling(ctx);
   2ee62:	480c      	ldr	r0, [pc, #48]	; (2ee94 <adc_nrfx_read+0x248>)
   2ee64:	f7ff fe52 	bl	2eb0c <adc_context_start_sampling>
   2ee68:	e7f2      	b.n	2ee50 <adc_nrfx_read+0x204>
   2ee6a:	bf00      	nop
   2ee6c:	20000580 	.word	0x20000580
   2ee70:	20000a70 	.word	0x20000a70
   2ee74:	0003ebb4 	.word	0x0003ebb4
   2ee78:	40007000 	.word	0x40007000
   2ee7c:	200005e0 	.word	0x200005e0
   2ee80:	0003ebd2 	.word	0x0003ebd2
   2ee84:	0003ec11 	.word	0x0003ec11
   2ee88:	0003ebec 	.word	0x0003ebec
   2ee8c:	0003ec66 	.word	0x0003ec66
   2ee90:	0003ec43 	.word	0x0003ec43
   2ee94:	20000540 	.word	0x20000540
   2ee98:	000f423f 	.word	0x000f423f
   2ee9c:	000f4240 	.word	0x000f4240
   2eea0:	20000598 	.word	0x20000598

0002eea4 <init_saadc>:
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_SAMPLE);
	}
}

static int init_saadc(const struct device *dev)
{
   2eea4:	b510      	push	{r4, lr}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2eea6:	4b0e      	ldr	r3, [pc, #56]	; (2eee0 <init_saadc+0x3c>)
   2eea8:	2400      	movs	r4, #0
   2eeaa:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   2eeae:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   2eeb2:	f8c3 4110 	str.w	r4, [r3, #272]	; 0x110
   2eeb6:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    p_reg->INTENSET = mask;
   2eeba:	2212      	movs	r2, #18
   2eebc:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	nrf_saadc_event_clear(NRF_SAADC, NRF_SAADC_EVENT_END);
	nrf_saadc_event_clear(NRF_SAADC, NRF_SAADC_EVENT_CALIBRATEDONE);
	nrf_saadc_int_enable(NRF_SAADC,
			     NRF_SAADC_INT_END | NRF_SAADC_INT_CALIBRATEDONE);
	NRFX_IRQ_ENABLE(DT_INST_IRQN(0));
   2eec0:	2007      	movs	r0, #7
   2eec2:	f7f7 ffe5 	bl	26e90 <arch_irq_enable>

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   2eec6:	4622      	mov	r2, r4
   2eec8:	2101      	movs	r1, #1
   2eeca:	2007      	movs	r0, #7
   2eecc:	f7f8 f810 	bl	26ef0 <z_arm_irq_priority_set>
/**
 * @internal
 */
static inline unsigned int z_impl_k_sem_count_get(struct k_sem *sem)
{
	return sem->count;
   2eed0:	4804      	ldr	r0, [pc, #16]	; (2eee4 <init_saadc+0x40>)
	if (!k_sem_count_get(&ctx->lock)) {
   2eed2:	6c83      	ldr	r3, [r0, #72]	; 0x48
   2eed4:	b913      	cbnz	r3, 2eedc <init_saadc+0x38>
	z_impl_k_sem_give(sem);
   2eed6:	3040      	adds	r0, #64	; 0x40
   2eed8:	f006 fc66 	bl	357a8 <z_impl_k_sem_give>
		    saadc_irq_handler, DEVICE_DT_INST_GET(0), 0);

	adc_context_unlock_unconditionally(&m_data.ctx);

	return 0;
}
   2eedc:	2000      	movs	r0, #0
   2eede:	bd10      	pop	{r4, pc}
   2eee0:	40007000 	.word	0x40007000
   2eee4:	20000540 	.word	0x20000540

0002eee8 <saadc_irq_handler>:
{
   2eee8:	b538      	push	{r3, r4, r5, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2eeea:	4b2f      	ldr	r3, [pc, #188]	; (2efa8 <saadc_irq_handler+0xc0>)
   2eeec:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
	if (nrf_saadc_event_check(NRF_SAADC, NRF_SAADC_EVENT_END)) {
   2eef0:	2a00      	cmp	r2, #0
   2eef2:	d04c      	beq.n	2ef8e <saadc_irq_handler+0xa6>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2eef4:	2200      	movs	r2, #0
   2eef6:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   2eefa:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
 * function if required and takes further actions accordingly.
 */
static inline void adc_context_on_sampling_done(struct adc_context *ctx,
						const struct device *dev)
{
	if (ctx->sequence.options) {
   2eefe:	4c2b      	ldr	r4, [pc, #172]	; (2efac <saadc_irq_handler+0xc4>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2ef00:	2101      	movs	r1, #1
   2ef02:	6099      	str	r1, [r3, #8]
    p_reg->ENABLE = (SAADC_ENABLE_ENABLE_Disabled << SAADC_ENABLE_ENABLE_Pos);
   2ef04:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
   2ef08:	6f63      	ldr	r3, [r4, #116]	; 0x74
   2ef0a:	4625      	mov	r5, r4
   2ef0c:	b3d3      	cbz	r3, 2ef84 <saadc_irq_handler+0x9c>
		adc_sequence_callback callback = ctx->options.callback;
   2ef0e:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
		enum adc_action action;
		bool finish = false;
		bool repeat = false;

		if (callback) {
			action = callback(dev,
   2ef12:	f8b4 2098 	ldrh.w	r2, [r4, #152]	; 0x98
		if (callback) {
   2ef16:	b133      	cbz	r3, 2ef26 <saadc_irq_handler+0x3e>
			action = callback(dev,
   2ef18:	f104 0174 	add.w	r1, r4, #116	; 0x74
   2ef1c:	4798      	blx	r3
					  ctx->sampling_index);
		} else {
			action = ADC_ACTION_CONTINUE;
		}

		switch (action) {
   2ef1e:	2801      	cmp	r0, #1
   2ef20:	d014      	beq.n	2ef4c <saadc_irq_handler+0x64>
   2ef22:	2802      	cmp	r0, #2
   2ef24:	d028      	beq.n	2ef78 <saadc_irq_handler+0x90>
			break;
		case ADC_ACTION_FINISH:
			finish = true;
			break;
		default: /* ADC_ACTION_CONTINUE */
			if (ctx->sampling_index <
   2ef26:	f8b4 3098 	ldrh.w	r3, [r4, #152]	; 0x98
   2ef2a:	f8b4 2094 	ldrh.w	r2, [r4, #148]	; 0x94
   2ef2e:	429a      	cmp	r2, r3
   2ef30:	d922      	bls.n	2ef78 <saadc_irq_handler+0x90>
			    ctx->options.extra_samplings) {
				++ctx->sampling_index;
   2ef32:	3301      	adds	r3, #1
   2ef34:	f8a4 3098 	strh.w	r3, [r4, #152]	; 0x98
    return (nrf_saadc_value_t *)p_reg->RESULT.PTR;
   2ef38:	4b1b      	ldr	r3, [pc, #108]	; (2efa8 <saadc_irq_handler+0xc0>)
   2ef3a:	f8d3 262c 	ldr.w	r2, [r3, #1580]	; 0x62c
    return p_reg->RESULT.AMOUNT;
   2ef3e:	f8d3 1634 	ldr.w	r1, [r3, #1588]	; 0x634
			nrf_saadc_buffer_pointer_get(NRF_SAADC) +
   2ef42:	b289      	uxth	r1, r1
		nrf_saadc_buffer_pointer_set(
   2ef44:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
   2ef48:	f8c3 262c 	str.w	r2, [r3, #1580]	; 0x62c
			/*
			 * Immediately start the next sampling if working with
			 * a zero interval or if the timer expired again while
			 * the current sampling was in progress.
			 */
			if (ctx->options.interval_us == 0U) {
   2ef4c:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
   2ef50:	b923      	cbnz	r3, 2ef5c <saadc_irq_handler+0x74>
}
   2ef52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				adc_context_start_sampling(ctx);
   2ef56:	4815      	ldr	r0, [pc, #84]	; (2efac <saadc_irq_handler+0xc4>)
   2ef58:	f7ff bdd8 	b.w	2eb0c <adc_context_start_sampling>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   2ef5c:	f3bf 8f5b 	dmb	ish
   2ef60:	e855 3f00 	ldrex	r3, [r5]
   2ef64:	1e5a      	subs	r2, r3, #1
   2ef66:	e845 2100 	strex	r1, r2, [r5]
   2ef6a:	2900      	cmp	r1, #0
   2ef6c:	d1f8      	bne.n	2ef60 <saadc_irq_handler+0x78>
   2ef6e:	f3bf 8f5b 	dmb	ish
			} else if (atomic_dec(&ctx->sampling_requested) > 1) {
   2ef72:	2b01      	cmp	r3, #1
   2ef74:	dced      	bgt.n	2ef52 <saadc_irq_handler+0x6a>
   2ef76:	bd38      	pop	{r3, r4, r5, pc}
			}

			return;
		}

		if (ctx->options.interval_us != 0U) {
   2ef78:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
   2ef7c:	b113      	cbz	r3, 2ef84 <saadc_irq_handler+0x9c>
	z_impl_k_timer_stop(timer);
   2ef7e:	480c      	ldr	r0, [pc, #48]	; (2efb0 <saadc_irq_handler+0xc8>)
   2ef80:	f00c ff60 	bl	3be44 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
   2ef84:	480b      	ldr	r0, [pc, #44]	; (2efb4 <saadc_irq_handler+0xcc>)
   2ef86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   2ef8a:	f006 bc0d 	b.w	357a8 <z_impl_k_sem_give>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2ef8e:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
	} else if (nrf_saadc_event_check(NRF_SAADC,
   2ef92:	2900      	cmp	r1, #0
   2ef94:	d0ef      	beq.n	2ef76 <saadc_irq_handler+0x8e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2ef96:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
   2ef9a:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2ef9e:	2201      	movs	r2, #1
   2efa0:	609a      	str	r2, [r3, #8]
   2efa2:	601a      	str	r2, [r3, #0]
   2efa4:	605a      	str	r2, [r3, #4]
}
   2efa6:	e7e6      	b.n	2ef76 <saadc_irq_handler+0x8e>
   2efa8:	40007000 	.word	0x40007000
   2efac:	20000540 	.word	0x20000540
   2efb0:	20000548 	.word	0x20000548
   2efb4:	20000598 	.word	0x20000598

0002efb8 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   2efb8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2efba:	460c      	mov	r4, r1
	size_t offset = (size_t)(mgr - data->mgr);
   2efbc:	490a      	ldr	r1, [pc, #40]	; (2efe8 <onoff_start+0x30>)
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   2efbe:	4a0b      	ldr	r2, [pc, #44]	; (2efec <onoff_start+0x34>)
	size_t offset = (size_t)(mgr - data->mgr);
   2efc0:	1a41      	subs	r1, r0, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   2efc2:	2340      	movs	r3, #64	; 0x40
   2efc4:	9300      	str	r3, [sp, #0]
   2efc6:	1149      	asrs	r1, r1, #5
{
   2efc8:	4605      	mov	r5, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   2efca:	4623      	mov	r3, r4
   2efcc:	4808      	ldr	r0, [pc, #32]	; (2eff0 <onoff_start+0x38>)
   2efce:	f00b fde9 	bl	3aba4 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
   2efd2:	1e01      	subs	r1, r0, #0
   2efd4:	da05      	bge.n	2efe2 <onoff_start+0x2a>
		notify(mgr, err);
   2efd6:	4628      	mov	r0, r5
   2efd8:	4623      	mov	r3, r4
	}
}
   2efda:	b003      	add	sp, #12
   2efdc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		notify(mgr, err);
   2efe0:	4718      	bx	r3
}
   2efe2:	b003      	add	sp, #12
   2efe4:	bd30      	pop	{r4, r5, pc}
   2efe6:	bf00      	nop
   2efe8:	20003078 	.word	0x20003078
   2efec:	0003ac0f 	.word	0x0003ac0f
   2eff0:	0003c0e8 	.word	0x0003c0e8

0002eff4 <get_status>:
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   2eff4:	b2c9      	uxtb	r1, r1
   2eff6:	2901      	cmp	r1, #1
{
   2eff8:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   2effa:	d908      	bls.n	2f00e <get_status+0x1a>
   2effc:	4908      	ldr	r1, [pc, #32]	; (2f020 <get_status+0x2c>)
   2effe:	4809      	ldr	r0, [pc, #36]	; (2f024 <get_status+0x30>)
   2f000:	227a      	movs	r2, #122	; 0x7a
   2f002:	f009 fd86 	bl	38b12 <assert_print>
   2f006:	4806      	ldr	r0, [pc, #24]	; (2f020 <get_status+0x2c>)
   2f008:	217a      	movs	r1, #122	; 0x7a
   2f00a:	f009 fd7b 	bl	38b04 <assert_post_action>
	return GET_STATUS(get_sub_data(dev, type)->flags);
   2f00e:	6903      	ldr	r3, [r0, #16]
   2f010:	220c      	movs	r2, #12
   2f012:	fb01 3302 	mla	r3, r1, r2, r3
   2f016:	6c98      	ldr	r0, [r3, #72]	; 0x48
}
   2f018:	f000 0007 	and.w	r0, r0, #7
   2f01c:	bd08      	pop	{r3, pc}
   2f01e:	bf00      	nop
   2f020:	0003eca7 	.word	0x0003eca7
   2f024:	0003d1d7 	.word	0x0003d1d7

0002f028 <stop>:
{
   2f028:	b570      	push	{r4, r5, r6, lr}
   2f02a:	b2c9      	uxtb	r1, r1
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   2f02c:	2901      	cmp	r1, #1
	struct nrf_clock_control_data *data = dev->data;
   2f02e:	6903      	ldr	r3, [r0, #16]
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   2f030:	d90a      	bls.n	2f048 <stop+0x20>
   2f032:	4918      	ldr	r1, [pc, #96]	; (2f094 <stop+0x6c>)
   2f034:	4818      	ldr	r0, [pc, #96]	; (2f098 <stop+0x70>)
   2f036:	f44f 72a7 	mov.w	r2, #334	; 0x14e
   2f03a:	f009 fd6a 	bl	38b12 <assert_print>
   2f03e:	4815      	ldr	r0, [pc, #84]	; (2f094 <stop+0x6c>)
   2f040:	f44f 71a7 	mov.w	r1, #334	; 0x14e
   2f044:	f009 fd5e 	bl	38b04 <assert_post_action>
	__asm__ volatile(
   2f048:	f04f 0440 	mov.w	r4, #64	; 0x40
   2f04c:	f3ef 8511 	mrs	r5, BASEPRI
   2f050:	f384 8812 	msr	BASEPRI_MAX, r4
   2f054:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   2f058:	260c      	movs	r6, #12
   2f05a:	fb06 3401 	mla	r4, r6, r1, r3
   2f05e:	6ca4      	ldr	r4, [r4, #72]	; 0x48
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   2f060:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
   2f064:	d008      	beq.n	2f078 <stop+0x50>
   2f066:	42a2      	cmp	r2, r4
   2f068:	d006      	beq.n	2f078 <stop+0x50>
	__asm__ volatile(
   2f06a:	f385 8811 	msr	BASEPRI, r5
   2f06e:	f3bf 8f6f 	isb	sy
		err = -EPERM;
   2f072:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   2f076:	bd70      	pop	{r4, r5, r6, pc}
		*flags = CLOCK_CONTROL_STATUS_OFF;
   2f078:	4371      	muls	r1, r6
   2f07a:	440b      	add	r3, r1
   2f07c:	2201      	movs	r2, #1
   2f07e:	649a      	str	r2, [r3, #72]	; 0x48
   2f080:	f385 8811 	msr	BASEPRI, r5
   2f084:	f3bf 8f6f 	isb	sy
	get_sub_config(dev, type)->stop();
   2f088:	6843      	ldr	r3, [r0, #4]
   2f08a:	440b      	add	r3, r1
   2f08c:	685b      	ldr	r3, [r3, #4]
   2f08e:	4798      	blx	r3
	return 0;
   2f090:	2000      	movs	r0, #0
   2f092:	e7f0      	b.n	2f076 <stop+0x4e>
   2f094:	0003eca7 	.word	0x0003eca7
   2f098:	0003d1d7 	.word	0x0003d1d7

0002f09c <onoff_stop>:
{
   2f09c:	b570      	push	{r4, r5, r6, lr}
   2f09e:	460d      	mov	r5, r1
	size_t offset = (size_t)(mgr - data->mgr);
   2f0a0:	4906      	ldr	r1, [pc, #24]	; (2f0bc <onoff_stop+0x20>)
   2f0a2:	1a41      	subs	r1, r0, r1
{
   2f0a4:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   2f0a6:	1149      	asrs	r1, r1, #5
   2f0a8:	4805      	ldr	r0, [pc, #20]	; (2f0c0 <onoff_stop+0x24>)
   2f0aa:	2240      	movs	r2, #64	; 0x40
   2f0ac:	f7ff ffbc 	bl	2f028 <stop>
	notify(mgr, res);
   2f0b0:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   2f0b2:	4601      	mov	r1, r0
	notify(mgr, res);
   2f0b4:	4620      	mov	r0, r4
}
   2f0b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
   2f0ba:	4718      	bx	r3
   2f0bc:	20003078 	.word	0x20003078
   2f0c0:	0003c0e8 	.word	0x0003c0e8

0002f0c4 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   2f0c4:	2200      	movs	r2, #0
{
   2f0c6:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   2f0c8:	2101      	movs	r1, #1
{
   2f0ca:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   2f0cc:	4610      	mov	r0, r2
   2f0ce:	f7f7 ff0f 	bl	26ef0 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
   2f0d2:	480f      	ldr	r0, [pc, #60]	; (2f110 <clk_init+0x4c>)
   2f0d4:	f004 f840 	bl	33158 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   2f0d8:	4b0e      	ldr	r3, [pc, #56]	; (2f114 <clk_init+0x50>)
   2f0da:	4298      	cmp	r0, r3
   2f0dc:	d115      	bne.n	2f10a <clk_init+0x46>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   2f0de:	f00c fb9b 	bl	3b818 <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
   2f0e2:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
   2f0e4:	490c      	ldr	r1, [pc, #48]	; (2f118 <clk_init+0x54>)
   2f0e6:	4630      	mov	r0, r6
   2f0e8:	f009 fc88 	bl	389fc <onoff_manager_init>
					 &transitions);
		if (err < 0) {
   2f0ec:	2800      	cmp	r0, #0
   2f0ee:	db0b      	blt.n	2f108 <clk_init+0x44>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   2f0f0:	2501      	movs	r5, #1
   2f0f2:	64b5      	str	r5, [r6, #72]	; 0x48
	struct nrf_clock_control_data *data = dev->data;
   2f0f4:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
   2f0f6:	4908      	ldr	r1, [pc, #32]	; (2f118 <clk_init+0x54>)
   2f0f8:	f104 0020 	add.w	r0, r4, #32
   2f0fc:	f009 fc7e 	bl	389fc <onoff_manager_init>
		if (err < 0) {
   2f100:	2800      	cmp	r0, #0
   2f102:	db01      	blt.n	2f108 <clk_init+0x44>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   2f104:	6565      	str	r5, [r4, #84]	; 0x54
	}

	return 0;
   2f106:	2000      	movs	r0, #0
}
   2f108:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   2f10a:	f06f 0004 	mvn.w	r0, #4
   2f10e:	e7fb      	b.n	2f108 <clk_init+0x44>
   2f110:	0002f151 	.word	0x0002f151
   2f114:	0bad0000 	.word	0x0bad0000
   2f118:	0003cb18 	.word	0x0003cb18

0002f11c <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
   2f11c:	b570      	push	{r4, r5, r6, lr}
   2f11e:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
   2f120:	230c      	movs	r3, #12
   2f122:	4809      	ldr	r0, [pc, #36]	; (2f148 <clkstarted_handle.constprop.0+0x2c>)
   2f124:	434b      	muls	r3, r1
   2f126:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
   2f128:	e9d4 5610 	ldrd	r5, r6, [r4, #64]	; 0x40
	sub_data->cb = NULL;
   2f12c:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
   2f12e:	3348      	adds	r3, #72	; 0x48
	sub_data->cb = NULL;
   2f130:	6422      	str	r2, [r4, #64]	; 0x40
	set_on_state(&sub_data->flags);
   2f132:	4418      	add	r0, r3
   2f134:	f00b fd23 	bl	3ab7e <set_on_state>
	if (callback) {
   2f138:	b12d      	cbz	r5, 2f146 <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
   2f13a:	4632      	mov	r2, r6
   2f13c:	462b      	mov	r3, r5
   2f13e:	4803      	ldr	r0, [pc, #12]	; (2f14c <clkstarted_handle.constprop.0+0x30>)
}
   2f140:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
   2f144:	4718      	bx	r3
}
   2f146:	bd70      	pop	{r4, r5, r6, pc}
   2f148:	20003078 	.word	0x20003078
   2f14c:	0003c0e8 	.word	0x0003c0e8

0002f150 <clock_event_handler>:
	switch (event) {
   2f150:	2801      	cmp	r0, #1
{
   2f152:	b508      	push	{r3, lr}
	switch (event) {
   2f154:	d006      	beq.n	2f164 <clock_event_handler+0x14>
   2f156:	2803      	cmp	r0, #3
   2f158:	d008      	beq.n	2f16c <clock_event_handler+0x1c>
   2f15a:	b990      	cbnz	r0, 2f182 <clock_event_handler+0x32>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   2f15c:	4b0e      	ldr	r3, [pc, #56]	; (2f198 <clock_event_handler+0x48>)
   2f15e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   2f160:	075b      	lsls	r3, r3, #29
   2f162:	d117      	bne.n	2f194 <clock_event_handler+0x44>
}
   2f164:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   2f168:	f7ff bfd8 	b.w	2f11c <clkstarted_handle.constprop.0>
			__ASSERT_NO_MSG(false);
   2f16c:	490b      	ldr	r1, [pc, #44]	; (2f19c <clock_event_handler+0x4c>)
   2f16e:	480c      	ldr	r0, [pc, #48]	; (2f1a0 <clock_event_handler+0x50>)
   2f170:	f240 225f 	movw	r2, #607	; 0x25f
   2f174:	f009 fccd 	bl	38b12 <assert_print>
   2f178:	f240 215f 	movw	r1, #607	; 0x25f
		__ASSERT_NO_MSG(0);
   2f17c:	4807      	ldr	r0, [pc, #28]	; (2f19c <clock_event_handler+0x4c>)
   2f17e:	f009 fcc1 	bl	38b04 <assert_post_action>
   2f182:	4906      	ldr	r1, [pc, #24]	; (2f19c <clock_event_handler+0x4c>)
   2f184:	4806      	ldr	r0, [pc, #24]	; (2f1a0 <clock_event_handler+0x50>)
   2f186:	f240 2263 	movw	r2, #611	; 0x263
   2f18a:	f009 fcc2 	bl	38b12 <assert_print>
   2f18e:	f240 2163 	movw	r1, #611	; 0x263
   2f192:	e7f3      	b.n	2f17c <clock_event_handler+0x2c>
}
   2f194:	bd08      	pop	{r3, pc}
   2f196:	bf00      	nop
   2f198:	20003078 	.word	0x20003078
   2f19c:	0003eca7 	.word	0x0003eca7
   2f1a0:	0003d1d7 	.word	0x0003d1d7

0002f1a4 <generic_hfclk_start>:
{
   2f1a4:	b508      	push	{r3, lr}
	__asm__ volatile(
   2f1a6:	f04f 0340 	mov.w	r3, #64	; 0x40
   2f1aa:	f3ef 8111 	mrs	r1, BASEPRI
   2f1ae:	f383 8812 	msr	BASEPRI_MAX, r3
   2f1b2:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   2f1b6:	4a12      	ldr	r2, [pc, #72]	; (2f200 <generic_hfclk_start+0x5c>)
   2f1b8:	6813      	ldr	r3, [r2, #0]
   2f1ba:	f043 0002 	orr.w	r0, r3, #2
   2f1be:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   2f1c0:	07da      	lsls	r2, r3, #31
   2f1c2:	d408      	bmi.n	2f1d6 <generic_hfclk_start+0x32>
	__asm__ volatile(
   2f1c4:	f381 8811 	msr	BASEPRI, r1
   2f1c8:	f3bf 8f6f 	isb	sy
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   2f1cc:	2001      	movs	r0, #1
}
   2f1ce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   2f1d2:	f003 bf8b 	b.w	330ec <nrfx_clock_start>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   2f1d6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2f1da:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   2f1de:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   2f1e2:	07d3      	lsls	r3, r2, #31
   2f1e4:	d5ee      	bpl.n	2f1c4 <generic_hfclk_start+0x20>
			set_on_state(get_hf_flags());
   2f1e6:	4807      	ldr	r0, [pc, #28]	; (2f204 <generic_hfclk_start+0x60>)
   2f1e8:	f00b fcc9 	bl	3ab7e <set_on_state>
   2f1ec:	f381 8811 	msr	BASEPRI, r1
   2f1f0:	f3bf 8f6f 	isb	sy
		clkstarted_handle(CLOCK_DEVICE,
   2f1f4:	2000      	movs	r0, #0
}
   2f1f6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
   2f1fa:	f7ff bf8f 	b.w	2f11c <clkstarted_handle.constprop.0>
   2f1fe:	bf00      	nop
   2f200:	200030d0 	.word	0x200030d0
   2f204:	200030c0 	.word	0x200030c0

0002f208 <api_blocking_start>:
{
   2f208:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   2f20a:	2200      	movs	r2, #0
   2f20c:	2301      	movs	r3, #1
   2f20e:	e9cd 2302 	strd	r2, r3, [sp, #8]
   2f212:	ab04      	add	r3, sp, #16
   2f214:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   2f218:	4a09      	ldr	r2, [pc, #36]	; (2f240 <api_blocking_start+0x38>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   2f21a:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   2f21e:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   2f220:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   2f224:	f00b fcec 	bl	3ac00 <api_start>
	if (err < 0) {
   2f228:	2800      	cmp	r0, #0
   2f22a:	db05      	blt.n	2f238 <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
   2f22c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   2f230:	2300      	movs	r3, #0
   2f232:	4668      	mov	r0, sp
   2f234:	f006 faf2 	bl	3581c <z_impl_k_sem_take>
}
   2f238:	b007      	add	sp, #28
   2f23a:	f85d fb04 	ldr.w	pc, [sp], #4
   2f23e:	bf00      	nop
   2f240:	0003ac21 	.word	0x0003ac21

0002f244 <lfclk_start>:
{
   2f244:	b510      	push	{r4, lr}
	if (!once) {
   2f246:	4c07      	ldr	r4, [pc, #28]	; (2f264 <lfclk_start+0x20>)
   2f248:	7823      	ldrb	r3, [r4, #0]
   2f24a:	b92b      	cbnz	r3, 2f258 <lfclk_start+0x14>
	z_impl_k_busy_wait(usec_to_wait);
   2f24c:	f44f 70a5 	mov.w	r0, #330	; 0x14a
   2f250:	f00c fdc6 	bl	3bde0 <z_impl_k_busy_wait>
		once = true;
   2f254:	2301      	movs	r3, #1
   2f256:	7023      	strb	r3, [r4, #0]
}
   2f258:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   2f25c:	2000      	movs	r0, #0
   2f25e:	f003 bf45 	b.w	330ec <nrfx_clock_start>
   2f262:	bf00      	nop
   2f264:	200034b4 	.word	0x200034b4

0002f268 <generic_hfclk_stop>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2f268:	4b09      	ldr	r3, [pc, #36]	; (2f290 <generic_hfclk_stop+0x28>)
   2f26a:	f3bf 8f5b 	dmb	ish
   2f26e:	e853 2f00 	ldrex	r2, [r3]
   2f272:	f022 0102 	bic.w	r1, r2, #2
   2f276:	e843 1000 	strex	r0, r1, [r3]
   2f27a:	2800      	cmp	r0, #0
   2f27c:	d1f7      	bne.n	2f26e <generic_hfclk_stop+0x6>
   2f27e:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
   2f282:	07d3      	lsls	r3, r2, #31
   2f284:	d402      	bmi.n	2f28c <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   2f286:	2001      	movs	r0, #1
   2f288:	f003 bf50 	b.w	3312c <nrfx_clock_stop>
}
   2f28c:	4770      	bx	lr
   2f28e:	bf00      	nop
   2f290:	200030d0 	.word	0x200030d0

0002f294 <z_nrf_clock_control_lf_on>:
{
   2f294:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   2f298:	4944      	ldr	r1, [pc, #272]	; (2f3ac <z_nrf_clock_control_lf_on+0x118>)
   2f29a:	f3bf 8f5b 	dmb	ish
   2f29e:	4606      	mov	r6, r0
   2f2a0:	2201      	movs	r2, #1
   2f2a2:	e851 3f00 	ldrex	r3, [r1]
   2f2a6:	e841 2000 	strex	r0, r2, [r1]
   2f2aa:	2800      	cmp	r0, #0
   2f2ac:	d1f9      	bne.n	2f2a2 <z_nrf_clock_control_lf_on+0xe>
   2f2ae:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
   2f2b2:	b99b      	cbnz	r3, 2f2dc <z_nrf_clock_control_lf_on+0x48>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
   2f2b4:	493e      	ldr	r1, [pc, #248]	; (2f3b0 <z_nrf_clock_control_lf_on+0x11c>)
		err = onoff_request(mgr, &cli);
   2f2b6:	483f      	ldr	r0, [pc, #252]	; (2f3b4 <z_nrf_clock_control_lf_on+0x120>)
   2f2b8:	604b      	str	r3, [r1, #4]
   2f2ba:	60cb      	str	r3, [r1, #12]
   2f2bc:	608a      	str	r2, [r1, #8]
   2f2be:	f7f5 fc39 	bl	24b34 <onoff_request>
		__ASSERT_NO_MSG(err >= 0);
   2f2c2:	2800      	cmp	r0, #0
   2f2c4:	da0a      	bge.n	2f2dc <z_nrf_clock_control_lf_on+0x48>
   2f2c6:	493c      	ldr	r1, [pc, #240]	; (2f3b8 <z_nrf_clock_control_lf_on+0x124>)
   2f2c8:	483c      	ldr	r0, [pc, #240]	; (2f3bc <z_nrf_clock_control_lf_on+0x128>)
   2f2ca:	f240 2221 	movw	r2, #545	; 0x221
   2f2ce:	f009 fc20 	bl	38b12 <assert_print>
   2f2d2:	f240 2121 	movw	r1, #545	; 0x221
		__ASSERT_NO_MSG(false);
   2f2d6:	4838      	ldr	r0, [pc, #224]	; (2f3b8 <z_nrf_clock_control_lf_on+0x124>)
   2f2d8:	f009 fc14 	bl	38b04 <assert_post_action>
	switch (start_mode) {
   2f2dc:	b376      	cbz	r6, 2f33c <z_nrf_clock_control_lf_on+0xa8>
   2f2de:	1e73      	subs	r3, r6, #1
   2f2e0:	2b01      	cmp	r3, #1
   2f2e2:	d859      	bhi.n	2f398 <z_nrf_clock_control_lf_on+0x104>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   2f2e4:	2e01      	cmp	r6, #1
   2f2e6:	d107      	bne.n	2f2f8 <z_nrf_clock_control_lf_on+0x64>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   2f2e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2f2ec:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
   2f2f0:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   2f2f4:	2b01      	cmp	r3, #1
   2f2f6:	d021      	beq.n	2f33c <z_nrf_clock_control_lf_on+0xa8>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   2f2f8:	f00c fc7d 	bl	3bbf6 <k_is_in_isr>
   2f2fc:	4605      	mov	r5, r0
   2f2fe:	b9f8      	cbnz	r0, 2f340 <z_nrf_clock_control_lf_on+0xac>
	return !z_sys_post_kernel;
   2f300:	4b2f      	ldr	r3, [pc, #188]	; (2f3c0 <z_nrf_clock_control_lf_on+0x12c>)
   2f302:	781b      	ldrb	r3, [r3, #0]
   2f304:	b1e3      	cbz	r3, 2f340 <z_nrf_clock_control_lf_on+0xac>
    p_reg->INTENCLR = mask;
   2f306:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2f30a:	2202      	movs	r2, #2
   2f30c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
   2f310:	4607      	mov	r7, r0
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   2f312:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 2f3c4 <z_nrf_clock_control_lf_on+0x130>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   2f316:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
   2f31a:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   2f31e:	f8d4 2418 	ldr.w	r2, [r4, #1048]	; 0x418
   2f322:	03d2      	lsls	r2, r2, #15
   2f324:	d516      	bpl.n	2f354 <z_nrf_clock_control_lf_on+0xc0>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   2f326:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
   2f32a:	2b01      	cmp	r3, #1
   2f32c:	d001      	beq.n	2f332 <z_nrf_clock_control_lf_on+0x9e>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   2f32e:	2e01      	cmp	r6, #1
   2f330:	d110      	bne.n	2f354 <z_nrf_clock_control_lf_on+0xc0>
	if (isr_mode) {
   2f332:	b35d      	cbz	r5, 2f38c <z_nrf_clock_control_lf_on+0xf8>
   2f334:	f387 8811 	msr	BASEPRI, r7
   2f338:	f3bf 8f6f 	isb	sy
}
   2f33c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
   2f340:	f04f 0340 	mov.w	r3, #64	; 0x40
   2f344:	f3ef 8711 	mrs	r7, BASEPRI
   2f348:	f383 8812 	msr	BASEPRI_MAX, r3
   2f34c:	f3bf 8f6f 	isb	sy
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   2f350:	2501      	movs	r5, #1
   2f352:	e7de      	b.n	2f312 <z_nrf_clock_control_lf_on+0x7e>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   2f354:	b1ad      	cbz	r5, 2f382 <z_nrf_clock_control_lf_on+0xee>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   2f356:	4638      	mov	r0, r7
   2f358:	f7f7 fd1a 	bl	26d90 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   2f35c:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   2f360:	2b00      	cmp	r3, #0
   2f362:	d1da      	bne.n	2f31a <z_nrf_clock_control_lf_on+0x86>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   2f364:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
   2f368:	2a00      	cmp	r2, #0
   2f36a:	d0d6      	beq.n	2f31a <z_nrf_clock_control_lf_on+0x86>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2f36c:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
   2f370:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
   2f374:	2301      	movs	r3, #1
   2f376:	f8c4 3518 	str.w	r3, [r4, #1304]	; 0x518
   2f37a:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2f37e:	60a3      	str	r3, [r4, #8]
}
   2f380:	e7cb      	b.n	2f31a <z_nrf_clock_control_lf_on+0x86>
	return z_impl_k_sleep(timeout);
   2f382:	2100      	movs	r1, #0
   2f384:	2021      	movs	r0, #33	; 0x21
   2f386:	f007 fe8d 	bl	370a4 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   2f38a:	e7e7      	b.n	2f35c <z_nrf_clock_control_lf_on+0xc8>
    p_reg->INTENSET = mask;
   2f38c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2f390:	2202      	movs	r2, #2
   2f392:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   2f396:	e7d1      	b.n	2f33c <z_nrf_clock_control_lf_on+0xa8>
		__ASSERT_NO_MSG(false);
   2f398:	4907      	ldr	r1, [pc, #28]	; (2f3b8 <z_nrf_clock_control_lf_on+0x124>)
   2f39a:	4808      	ldr	r0, [pc, #32]	; (2f3bc <z_nrf_clock_control_lf_on+0x128>)
   2f39c:	f240 2233 	movw	r2, #563	; 0x233
   2f3a0:	f009 fbb7 	bl	38b12 <assert_print>
   2f3a4:	f240 2133 	movw	r1, #563	; 0x233
   2f3a8:	e795      	b.n	2f2d6 <z_nrf_clock_control_lf_on+0x42>
   2f3aa:	bf00      	nop
   2f3ac:	20003074 	.word	0x20003074
   2f3b0:	20003064 	.word	0x20003064
   2f3b4:	20003098 	.word	0x20003098
   2f3b8:	0003eca7 	.word	0x0003eca7
   2f3bc:	0003d1d7 	.word	0x0003d1d7
   2f3c0:	20004411 	.word	0x20004411
   2f3c4:	e000e100 	.word	0xe000e100

0002f3c8 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
   2f3c8:	b508      	push	{r3, lr}
   2f3ca:	4807      	ldr	r0, [pc, #28]	; (2f3e8 <uart_console_init+0x20>)
   2f3cc:	f00c fbe6 	bl	3bb9c <z_device_is_ready>

	ARG_UNUSED(arg);

	if (!device_is_ready(uart_console_dev)) {
   2f3d0:	b138      	cbz	r0, 2f3e2 <uart_console_init+0x1a>
	__stdout_hook_install(console_out);
   2f3d2:	4806      	ldr	r0, [pc, #24]	; (2f3ec <uart_console_init+0x24>)
   2f3d4:	f7f8 fbf4 	bl	27bc0 <__stdout_hook_install>
	__printk_hook_install(console_out);
   2f3d8:	4804      	ldr	r0, [pc, #16]	; (2f3ec <uart_console_init+0x24>)
   2f3da:	f7f5 f8af 	bl	2453c <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
   2f3de:	2000      	movs	r0, #0
}
   2f3e0:	bd08      	pop	{r3, pc}
		return -ENODEV;
   2f3e2:	f06f 0012 	mvn.w	r0, #18
   2f3e6:	e7fb      	b.n	2f3e0 <uart_console_init+0x18>
   2f3e8:	0003c148 	.word	0x0003c148
   2f3ec:	0002f3f1 	.word	0x0002f3f1

0002f3f0 <console_out>:
	if ('\n' == c) {
   2f3f0:	280a      	cmp	r0, #10
{
   2f3f2:	b538      	push	{r3, r4, r5, lr}
   2f3f4:	4d07      	ldr	r5, [pc, #28]	; (2f414 <console_out+0x24>)
   2f3f6:	4604      	mov	r4, r0
	if ('\n' == c) {
   2f3f8:	d104      	bne.n	2f404 <console_out+0x14>
   2f3fa:	68ab      	ldr	r3, [r5, #8]
   2f3fc:	210d      	movs	r1, #13
   2f3fe:	685b      	ldr	r3, [r3, #4]
   2f400:	4628      	mov	r0, r5
   2f402:	4798      	blx	r3
   2f404:	68ab      	ldr	r3, [r5, #8]
   2f406:	4803      	ldr	r0, [pc, #12]	; (2f414 <console_out+0x24>)
   2f408:	685b      	ldr	r3, [r3, #4]
   2f40a:	b2e1      	uxtb	r1, r4
   2f40c:	4798      	blx	r3
}
   2f40e:	4620      	mov	r0, r4
   2f410:	bd38      	pop	{r3, r4, r5, pc}
   2f412:	bf00      	nop
   2f414:	0003c148 	.word	0x0003c148

0002f418 <gpio_nrfx_manage_callback>:
}

static int gpio_nrfx_manage_callback(const struct device *port,
				     struct gpio_callback *callback,
				     bool set)
{
   2f418:	b510      	push	{r4, lr}
	return port->data;
   2f41a:	6903      	ldr	r3, [r0, #16]
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
	__ASSERT(callback, "No callback!");
   2f41c:	b941      	cbnz	r1, 2f430 <gpio_nrfx_manage_callback+0x18>
   2f41e:	491c      	ldr	r1, [pc, #112]	; (2f490 <gpio_nrfx_manage_callback+0x78>)
   2f420:	481c      	ldr	r0, [pc, #112]	; (2f494 <gpio_nrfx_manage_callback+0x7c>)
   2f422:	222a      	movs	r2, #42	; 0x2a
   2f424:	f009 fb75 	bl	38b12 <assert_print>
   2f428:	212a      	movs	r1, #42	; 0x2a
	__ASSERT(callback->handler, "No callback handler!");
   2f42a:	4819      	ldr	r0, [pc, #100]	; (2f490 <gpio_nrfx_manage_callback+0x78>)
   2f42c:	f009 fb6a 	bl	38b04 <assert_post_action>
   2f430:	6848      	ldr	r0, [r1, #4]
   2f432:	b930      	cbnz	r0, 2f442 <gpio_nrfx_manage_callback+0x2a>
   2f434:	4916      	ldr	r1, [pc, #88]	; (2f490 <gpio_nrfx_manage_callback+0x78>)
   2f436:	4817      	ldr	r0, [pc, #92]	; (2f494 <gpio_nrfx_manage_callback+0x7c>)
   2f438:	222b      	movs	r2, #43	; 0x2b
   2f43a:	f009 fb6a 	bl	38b12 <assert_print>
   2f43e:	212b      	movs	r1, #43	; 0x2b
   2f440:	e7f3      	b.n	2f42a <gpio_nrfx_manage_callback+0x12>
	return list->head;
   2f442:	6858      	ldr	r0, [r3, #4]

	if (!sys_slist_is_empty(callbacks)) {
   2f444:	b1f8      	cbz	r0, 2f486 <gpio_nrfx_manage_callback+0x6e>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2f446:	4288      	cmp	r0, r1
   2f448:	d119      	bne.n	2f47e <gpio_nrfx_manage_callback+0x66>
Z_GENLIST_REMOVE(slist, snode)
   2f44a:	689c      	ldr	r4, [r3, #8]
	return node->next;
   2f44c:	6808      	ldr	r0, [r1, #0]
	list->head = node;
   2f44e:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   2f450:	42a1      	cmp	r1, r4
   2f452:	d100      	bne.n	2f456 <gpio_nrfx_manage_callback+0x3e>
	list->tail = node;
   2f454:	6098      	str	r0, [r3, #8]
	parent->next = child;
   2f456:	2000      	movs	r0, #0
   2f458:	6008      	str	r0, [r1, #0]
		}
	} else if (!set) {
		return -EINVAL;
	}

	if (set) {
   2f45a:	b12a      	cbz	r2, 2f468 <gpio_nrfx_manage_callback+0x50>
	return list->head;
   2f45c:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   2f45e:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
   2f460:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   2f462:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   2f464:	b902      	cbnz	r2, 2f468 <gpio_nrfx_manage_callback+0x50>
	list->tail = node;
   2f466:	6099      	str	r1, [r3, #8]
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
   2f468:	2000      	movs	r0, #0
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   2f46a:	e010      	b.n	2f48e <gpio_nrfx_manage_callback+0x76>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2f46c:	4281      	cmp	r1, r0
   2f46e:	d106      	bne.n	2f47e <gpio_nrfx_manage_callback+0x66>
	return node->next;
   2f470:	6808      	ldr	r0, [r1, #0]
	parent->next = child;
   2f472:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   2f474:	6898      	ldr	r0, [r3, #8]
   2f476:	4281      	cmp	r1, r0
   2f478:	d1ed      	bne.n	2f456 <gpio_nrfx_manage_callback+0x3e>
	list->tail = node;
   2f47a:	609c      	str	r4, [r3, #8]
}
   2f47c:	e7eb      	b.n	2f456 <gpio_nrfx_manage_callback+0x3e>
	return node->next;
   2f47e:	4604      	mov	r4, r0
   2f480:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2f482:	2800      	cmp	r0, #0
   2f484:	d1f2      	bne.n	2f46c <gpio_nrfx_manage_callback+0x54>
			if (!set) {
   2f486:	2a00      	cmp	r2, #0
   2f488:	d1e8      	bne.n	2f45c <gpio_nrfx_manage_callback+0x44>
				return -EINVAL;
   2f48a:	f06f 0015 	mvn.w	r0, #21
				     callback, set);
}
   2f48e:	bd10      	pop	{r4, pc}
   2f490:	0003ed0d 	.word	0x0003ed0d
   2f494:	0003d1d7 	.word	0x0003d1d7

0002f498 <gpio_nrfx_pin_interrupt_configure>:
{
   2f498:	b530      	push	{r4, r5, lr}
	return port->config;
   2f49a:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   2f49c:	7b05      	ldrb	r5, [r0, #12]
   2f49e:	f001 041f 	and.w	r4, r1, #31
	if (mode == GPIO_INT_MODE_DISABLED) {
   2f4a2:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
{
   2f4a6:	b085      	sub	sp, #20
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   2f4a8:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
   2f4ac:	d105      	bne.n	2f4ba <gpio_nrfx_pin_interrupt_configure+0x22>
		nrfx_gpiote_trigger_disable(abs_pin);
   2f4ae:	4620      	mov	r0, r4
   2f4b0:	f004 fc0e 	bl	33cd0 <nrfx_gpiote_trigger_disable>
		return 0;
   2f4b4:	2000      	movs	r0, #0
}
   2f4b6:	b005      	add	sp, #20
   2f4b8:	bd30      	pop	{r4, r5, pc}
	nrfx_gpiote_trigger_config_t trigger_config = {
   2f4ba:	2500      	movs	r5, #0
	if (mode == GPIO_INT_MODE_LEVEL) {
   2f4bc:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
   2f4c0:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
   2f4c4:	d114      	bne.n	2f4f0 <gpio_nrfx_pin_interrupt_configure+0x58>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
   2f4c6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
	nrfx_gpiote_trigger_config_t trigger_config = {
   2f4ca:	bf0c      	ite	eq
   2f4cc:	2304      	moveq	r3, #4
   2f4ce:	2305      	movne	r3, #5
   2f4d0:	f88d 3008 	strb.w	r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   2f4d4:	2300      	movs	r3, #0
   2f4d6:	4619      	mov	r1, r3
   2f4d8:	aa02      	add	r2, sp, #8
   2f4da:	4620      	mov	r0, r4
   2f4dc:	f004 fa0a 	bl	338f4 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   2f4e0:	4b26      	ldr	r3, [pc, #152]	; (2f57c <gpio_nrfx_pin_interrupt_configure+0xe4>)
   2f4e2:	4298      	cmp	r0, r3
   2f4e4:	d147      	bne.n	2f576 <gpio_nrfx_pin_interrupt_configure+0xde>
	nrfx_gpiote_trigger_enable(abs_pin, true);
   2f4e6:	2101      	movs	r1, #1
   2f4e8:	4620      	mov	r0, r4
   2f4ea:	f004 fb8b 	bl	33c04 <nrfx_gpiote_trigger_enable>
	return 0;
   2f4ee:	e7e1      	b.n	2f4b4 <gpio_nrfx_pin_interrupt_configure+0x1c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   2f4f0:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
   2f4f4:	d021      	beq.n	2f53a <gpio_nrfx_pin_interrupt_configure+0xa2>
   2f4f6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
   2f4fa:	bf14      	ite	ne
   2f4fc:	2301      	movne	r3, #1
   2f4fe:	2302      	moveq	r3, #2
	nrfx_gpiote_trigger_config_t trigger_config = {
   2f500:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
   2f504:	6883      	ldr	r3, [r0, #8]
   2f506:	40cb      	lsrs	r3, r1
   2f508:	07d9      	lsls	r1, r3, #31
   2f50a:	d4e3      	bmi.n	2f4d4 <gpio_nrfx_pin_interrupt_configure+0x3c>
   2f50c:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
   2f510:	d1e0      	bne.n	2f4d4 <gpio_nrfx_pin_interrupt_configure+0x3c>
NRF_STATIC_INLINE bool nrf_gpio_pin_present_check(uint32_t pin_number)
{
    uint32_t port = pin_number >> 5;
    uint32_t mask = 0;

    switch (port)
   2f512:	0963      	lsrs	r3, r4, #5
   2f514:	d106      	bne.n	2f524 <gpio_nrfx_pin_interrupt_configure+0x8c>
            mask = P1_FEATURE_PINS_PRESENT;
            break;
#endif
    }

    pin_number &= 0x1F;
   2f516:	f004 031f 	and.w	r3, r4, #31

    return (mask & (1UL << pin_number)) ? true : false;
   2f51a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2f51e:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   2f520:	07d2      	lsls	r2, r2, #31
   2f522:	d40c      	bmi.n	2f53e <gpio_nrfx_pin_interrupt_configure+0xa6>
   2f524:	4916      	ldr	r1, [pc, #88]	; (2f580 <gpio_nrfx_pin_interrupt_configure+0xe8>)
   2f526:	4817      	ldr	r0, [pc, #92]	; (2f584 <gpio_nrfx_pin_interrupt_configure+0xec>)
   2f528:	f240 2247 	movw	r2, #583	; 0x247
   2f52c:	f009 faf1 	bl	38b12 <assert_print>
   2f530:	4813      	ldr	r0, [pc, #76]	; (2f580 <gpio_nrfx_pin_interrupt_configure+0xe8>)
   2f532:	f240 2147 	movw	r1, #583	; 0x247
   2f536:	f009 fae5 	bl	38b04 <assert_post_action>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   2f53a:	2303      	movs	r3, #3
   2f53c:	e7e0      	b.n	2f500 <gpio_nrfx_pin_interrupt_configure+0x68>
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   2f53e:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   2f542:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   2f546:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   2f54a:	07db      	lsls	r3, r3, #31
   2f54c:	d4c2      	bmi.n	2f4d4 <gpio_nrfx_pin_interrupt_configure+0x3c>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
   2f54e:	f10d 0507 	add.w	r5, sp, #7
   2f552:	4629      	mov	r1, r5
   2f554:	4620      	mov	r0, r4
   2f556:	f004 faf1 	bl	33b3c <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
   2f55a:	4b0b      	ldr	r3, [pc, #44]	; (2f588 <gpio_nrfx_pin_interrupt_configure+0xf0>)
   2f55c:	4298      	cmp	r0, r3
   2f55e:	d001      	beq.n	2f564 <gpio_nrfx_pin_interrupt_configure+0xcc>
		trigger_config.p_in_channel = &ch;
   2f560:	9503      	str	r5, [sp, #12]
   2f562:	e7b7      	b.n	2f4d4 <gpio_nrfx_pin_interrupt_configure+0x3c>
			err = nrfx_gpiote_channel_alloc(&ch);
   2f564:	4628      	mov	r0, r5
   2f566:	f004 fb47 	bl	33bf8 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
   2f56a:	4b04      	ldr	r3, [pc, #16]	; (2f57c <gpio_nrfx_pin_interrupt_configure+0xe4>)
   2f56c:	4298      	cmp	r0, r3
   2f56e:	d0f7      	beq.n	2f560 <gpio_nrfx_pin_interrupt_configure+0xc8>
				return -ENOMEM;
   2f570:	f06f 000b 	mvn.w	r0, #11
   2f574:	e79f      	b.n	2f4b6 <gpio_nrfx_pin_interrupt_configure+0x1e>
		return -EINVAL;
   2f576:	f06f 0015 	mvn.w	r0, #21
   2f57a:	e79c      	b.n	2f4b6 <gpio_nrfx_pin_interrupt_configure+0x1e>
   2f57c:	0bad0000 	.word	0x0bad0000
   2f580:	0003ed49 	.word	0x0003ed49
   2f584:	0003d1d7 	.word	0x0003d1d7
   2f588:	0bad0004 	.word	0x0bad0004

0002f58c <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   2f58c:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
   2f58e:	f004 fb23 	bl	33bd8 <nrfx_gpiote_is_init>
   2f592:	4604      	mov	r4, r0
   2f594:	b968      	cbnz	r0, 2f5b2 <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
   2f596:	f004 faf7 	bl	33b88 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
   2f59a:	4b08      	ldr	r3, [pc, #32]	; (2f5bc <gpio_nrfx_init+0x30>)
   2f59c:	4298      	cmp	r0, r3
   2f59e:	d10a      	bne.n	2f5b6 <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
   2f5a0:	4807      	ldr	r0, [pc, #28]	; (2f5c0 <gpio_nrfx_init+0x34>)
   2f5a2:	4621      	mov	r1, r4
   2f5a4:	f004 fac4 	bl	33b30 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   2f5a8:	4622      	mov	r2, r4
   2f5aa:	2105      	movs	r1, #5
   2f5ac:	2006      	movs	r0, #6
   2f5ae:	f7f7 fc9f 	bl	26ef0 <z_arm_irq_priority_set>
		return 0;
   2f5b2:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
   2f5b4:	bd10      	pop	{r4, pc}
		return -EIO;
   2f5b6:	f06f 0004 	mvn.w	r0, #4
   2f5ba:	e7fb      	b.n	2f5b4 <gpio_nrfx_init+0x28>
   2f5bc:	0bad0000 	.word	0x0bad0000
   2f5c0:	0002f5c5 	.word	0x0002f5c5

0002f5c4 <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   2f5c4:	0943      	lsrs	r3, r0, #5
{
   2f5c6:	b570      	push	{r4, r5, r6, lr}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   2f5c8:	d107      	bne.n	2f5da <nrfx_gpio_handler+0x16>
	return list->head;
   2f5ca:	4b10      	ldr	r3, [pc, #64]	; (2f60c <nrfx_gpio_handler+0x48>)
   2f5cc:	6859      	ldr	r1, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   2f5ce:	b121      	cbz	r1, 2f5da <nrfx_gpio_handler+0x16>
	gpio_fire_callbacks(list, port, BIT(pin));
   2f5d0:	2501      	movs	r5, #1
	return node->next;
   2f5d2:	680c      	ldr	r4, [r1, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   2f5d4:	4e0e      	ldr	r6, [pc, #56]	; (2f610 <nrfx_gpio_handler+0x4c>)
   2f5d6:	4085      	lsls	r5, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   2f5d8:	b901      	cbnz	r1, 2f5dc <nrfx_gpio_handler+0x18>
}
   2f5da:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->pin_mask & pins) {
   2f5dc:	688a      	ldr	r2, [r1, #8]
   2f5de:	402a      	ands	r2, r5
   2f5e0:	d00c      	beq.n	2f5fc <nrfx_gpio_handler+0x38>
			__ASSERT(cb->handler, "No callback handler!");
   2f5e2:	684b      	ldr	r3, [r1, #4]
   2f5e4:	b943      	cbnz	r3, 2f5f8 <nrfx_gpio_handler+0x34>
   2f5e6:	490b      	ldr	r1, [pc, #44]	; (2f614 <nrfx_gpio_handler+0x50>)
   2f5e8:	480b      	ldr	r0, [pc, #44]	; (2f618 <nrfx_gpio_handler+0x54>)
   2f5ea:	224d      	movs	r2, #77	; 0x4d
   2f5ec:	f009 fa91 	bl	38b12 <assert_print>
   2f5f0:	4808      	ldr	r0, [pc, #32]	; (2f614 <nrfx_gpio_handler+0x50>)
   2f5f2:	214d      	movs	r1, #77	; 0x4d
   2f5f4:	f009 fa86 	bl	38b04 <assert_post_action>
			cb->handler(port, cb, cb->pin_mask & pins);
   2f5f8:	4630      	mov	r0, r6
   2f5fa:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   2f5fc:	b11c      	cbz	r4, 2f606 <nrfx_gpio_handler+0x42>
   2f5fe:	6823      	ldr	r3, [r4, #0]
   2f600:	4621      	mov	r1, r4
   2f602:	461c      	mov	r4, r3
   2f604:	e7e8      	b.n	2f5d8 <nrfx_gpio_handler+0x14>
   2f606:	4623      	mov	r3, r4
   2f608:	e7fa      	b.n	2f600 <nrfx_gpio_handler+0x3c>
   2f60a:	bf00      	nop
   2f60c:	200030d4 	.word	0x200030d4
   2f610:	0003c100 	.word	0x0003c100
   2f614:	0003ed0d 	.word	0x0003ed0d
   2f618:	0003d1d7 	.word	0x0003d1d7

0002f61c <gpio_nrfx_pin_configure>:
{
   2f61c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return port->config;
   2f620:	f8d0 8004 	ldr.w	r8, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   2f624:	f898 300c 	ldrb.w	r3, [r8, #12]
   2f628:	f001 051f 	and.w	r5, r1, #31
   2f62c:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
{
   2f630:	460f      	mov	r7, r1
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   2f632:	4628      	mov	r0, r5
   2f634:	f10d 0103 	add.w	r1, sp, #3
{
   2f638:	4614      	mov	r4, r2
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   2f63a:	f004 fa7f 	bl	33b3c <nrfx_gpiote_channel_get>
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
   2f63e:	f414 3f40 	tst.w	r4, #196608	; 0x30000
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   2f642:	4606      	mov	r6, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
   2f644:	d114      	bne.n	2f670 <gpio_nrfx_pin_configure+0x54>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
   2f646:	4628      	mov	r0, r5
   2f648:	f004 fb6c 	bl	33d24 <nrfx_gpiote_pin_uninit>
		if (free_ch) {
   2f64c:	4b48      	ldr	r3, [pc, #288]	; (2f770 <gpio_nrfx_pin_configure+0x154>)
   2f64e:	429e      	cmp	r6, r3
   2f650:	d16f      	bne.n	2f732 <gpio_nrfx_pin_configure+0x116>
			err = nrfx_gpiote_channel_free(ch);
   2f652:	f89d 0003 	ldrb.w	r0, [sp, #3]
   2f656:	f004 fac9 	bl	33bec <nrfx_gpiote_channel_free>
			__ASSERT_NO_MSG(err == NRFX_SUCCESS);
   2f65a:	42b0      	cmp	r0, r6
   2f65c:	d069      	beq.n	2f732 <gpio_nrfx_pin_configure+0x116>
   2f65e:	4945      	ldr	r1, [pc, #276]	; (2f774 <gpio_nrfx_pin_configure+0x158>)
   2f660:	4845      	ldr	r0, [pc, #276]	; (2f778 <gpio_nrfx_pin_configure+0x15c>)
   2f662:	226a      	movs	r2, #106	; 0x6a
   2f664:	f009 fa55 	bl	38b12 <assert_print>
   2f668:	216a      	movs	r1, #106	; 0x6a
		__ASSERT_NO_MSG(err == NRFX_SUCCESS);
   2f66a:	4842      	ldr	r0, [pc, #264]	; (2f774 <gpio_nrfx_pin_configure+0x158>)
   2f66c:	f009 fa4a 	bl	38b04 <assert_post_action>
	nrfx_gpiote_trigger_config_t trigger_config = {
   2f670:	2300      	movs	r3, #0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   2f672:	4619      	mov	r1, r3
   2f674:	aa02      	add	r2, sp, #8
   2f676:	4628      	mov	r0, r5
	nrfx_gpiote_trigger_config_t trigger_config = {
   2f678:	e9cd 3302 	strd	r3, r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   2f67c:	f004 f93a 	bl	338f4 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   2f680:	4b3b      	ldr	r3, [pc, #236]	; (2f770 <gpio_nrfx_pin_configure+0x154>)
   2f682:	4298      	cmp	r0, r3
   2f684:	d004      	beq.n	2f690 <gpio_nrfx_pin_configure+0x74>
		return NRF_GPIO_PIN_PULLUP;
   2f686:	f06f 0015 	mvn.w	r0, #21
}
   2f68a:	b004      	add	sp, #16
   2f68c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (free_ch) {
   2f690:	4286      	cmp	r6, r0
   2f692:	d10c      	bne.n	2f6ae <gpio_nrfx_pin_configure+0x92>
		err = nrfx_gpiote_channel_free(ch);
   2f694:	f89d 0003 	ldrb.w	r0, [sp, #3]
   2f698:	f004 faa8 	bl	33bec <nrfx_gpiote_channel_free>
		__ASSERT_NO_MSG(err == NRFX_SUCCESS);
   2f69c:	42b0      	cmp	r0, r6
   2f69e:	d006      	beq.n	2f6ae <gpio_nrfx_pin_configure+0x92>
   2f6a0:	4934      	ldr	r1, [pc, #208]	; (2f774 <gpio_nrfx_pin_configure+0x158>)
   2f6a2:	4835      	ldr	r0, [pc, #212]	; (2f778 <gpio_nrfx_pin_configure+0x15c>)
   2f6a4:	227c      	movs	r2, #124	; 0x7c
   2f6a6:	f009 fa34 	bl	38b12 <assert_print>
   2f6aa:	217c      	movs	r1, #124	; 0x7c
   2f6ac:	e7dd      	b.n	2f66a <gpio_nrfx_pin_configure+0x4e>
	if (flags & GPIO_OUTPUT) {
   2f6ae:	03a6      	lsls	r6, r4, #14
   2f6b0:	d54e      	bpl.n	2f750 <gpio_nrfx_pin_configure+0x134>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   2f6b2:	f240 3306 	movw	r3, #774	; 0x306
   2f6b6:	4023      	ands	r3, r4
   2f6b8:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
   2f6bc:	d019      	beq.n	2f6f2 <gpio_nrfx_pin_configure+0xd6>
   2f6be:	d80c      	bhi.n	2f6da <gpio_nrfx_pin_configure+0xbe>
   2f6c0:	2b06      	cmp	r3, #6
   2f6c2:	d017      	beq.n	2f6f4 <gpio_nrfx_pin_configure+0xd8>
   2f6c4:	d804      	bhi.n	2f6d0 <gpio_nrfx_pin_configure+0xb4>
   2f6c6:	b1ab      	cbz	r3, 2f6f4 <gpio_nrfx_pin_configure+0xd8>
   2f6c8:	2b02      	cmp	r3, #2
   2f6ca:	d1dc      	bne.n	2f686 <gpio_nrfx_pin_configure+0x6a>
		*drive = NRF_GPIO_PIN_D0S1;
   2f6cc:	2304      	movs	r3, #4
   2f6ce:	e011      	b.n	2f6f4 <gpio_nrfx_pin_configure+0xd8>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   2f6d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   2f6d4:	d1d7      	bne.n	2f686 <gpio_nrfx_pin_configure+0x6a>
		*drive = NRF_GPIO_PIN_H0S1;
   2f6d6:	2301      	movs	r3, #1
   2f6d8:	e00c      	b.n	2f6f4 <gpio_nrfx_pin_configure+0xd8>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   2f6da:	f240 2202 	movw	r2, #514	; 0x202
   2f6de:	4293      	cmp	r3, r2
   2f6e0:	d029      	beq.n	2f736 <gpio_nrfx_pin_configure+0x11a>
   2f6e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
   2f6e6:	d028      	beq.n	2f73a <gpio_nrfx_pin_configure+0x11e>
   2f6e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   2f6ec:	d1cb      	bne.n	2f686 <gpio_nrfx_pin_configure+0x6a>
		*drive = NRF_GPIO_PIN_S0H1;
   2f6ee:	2302      	movs	r3, #2
   2f6f0:	e000      	b.n	2f6f4 <gpio_nrfx_pin_configure+0xd8>
		*drive = NRF_GPIO_PIN_H0D1;
   2f6f2:	2307      	movs	r3, #7
		nrfx_gpiote_output_config_t output_config = {
   2f6f4:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
   2f6f8:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
   2f6fc:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
   2f700:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
   2f702:	f88d 3005 	strb.w	r3, [sp, #5]
	} else if (flags & GPIO_PULL_DOWN) {
   2f706:	bf54      	ite	pl
   2f708:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
   2f70c:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   2f70e:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
   2f710:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   2f714:	d513      	bpl.n	2f73e <gpio_nrfx_pin_configure+0x122>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
   2f716:	f8d8 2004 	ldr.w	r2, [r8, #4]
   2f71a:	2301      	movs	r3, #1
   2f71c:	40bb      	lsls	r3, r7
    p_reg->OUTSET = set_mask;
   2f71e:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
   2f722:	2200      	movs	r2, #0
   2f724:	a901      	add	r1, sp, #4
   2f726:	4628      	mov	r0, r5
   2f728:	f004 f98e 	bl	33a48 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   2f72c:	4b10      	ldr	r3, [pc, #64]	; (2f770 <gpio_nrfx_pin_configure+0x154>)
   2f72e:	4298      	cmp	r0, r3
   2f730:	d1a9      	bne.n	2f686 <gpio_nrfx_pin_configure+0x6a>
   2f732:	2000      	movs	r0, #0
   2f734:	e7a9      	b.n	2f68a <gpio_nrfx_pin_configure+0x6e>
		*drive = NRF_GPIO_PIN_D0H1;
   2f736:	2305      	movs	r3, #5
   2f738:	e7dc      	b.n	2f6f4 <gpio_nrfx_pin_configure+0xd8>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   2f73a:	2303      	movs	r3, #3
   2f73c:	e7da      	b.n	2f6f4 <gpio_nrfx_pin_configure+0xd8>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
   2f73e:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
   2f740:	bf41      	itttt	mi
   2f742:	2301      	movmi	r3, #1
   2f744:	f8d8 2004 	ldrmi.w	r2, [r8, #4]
   2f748:	40bb      	lslmi	r3, r7
    p_reg->OUTCLR = clr_mask;
   2f74a:	f8c2 350c 	strmi.w	r3, [r2, #1292]	; 0x50c
}
   2f74e:	e7e8      	b.n	2f722 <gpio_nrfx_pin_configure+0x106>
	if (flags & GPIO_PULL_UP) {
   2f750:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   2f752:	f04f 0300 	mov.w	r3, #0
	} else if (flags & GPIO_PULL_DOWN) {
   2f756:	bf54      	ite	pl
   2f758:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
   2f75c:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   2f75e:	461a      	mov	r2, r3
   2f760:	a901      	add	r1, sp, #4
   2f762:	4628      	mov	r0, r5
	nrfx_gpiote_input_config_t input_config = {
   2f764:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   2f768:	f004 f8c4 	bl	338f4 <nrfx_gpiote_input_configure>
   2f76c:	e7de      	b.n	2f72c <gpio_nrfx_pin_configure+0x110>
   2f76e:	bf00      	nop
   2f770:	0bad0000 	.word	0x0bad0000
   2f774:	0003ed7c 	.word	0x0003ed7c
   2f778:	0003d1d7 	.word	0x0003d1d7

0002f77c <sx1509b_init>:
 *
 * @param dev Device struct
 * @return 0 if successful, failed otherwise.
 */
static int sx1509b_init(const struct device *dev)
{
   2f77c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2f780:	b086      	sub	sp, #24
	const struct sx1509b_config *cfg = dev->config;
   2f782:	6845      	ldr	r5, [r0, #4]
	struct sx1509b_drv_data *drv_data = dev->data;
   2f784:	6906      	ldr	r6, [r0, #16]
{
   2f786:	4681      	mov	r9, r0
   2f788:	af00      	add	r7, sp, #0
	int rc;

	if (!device_is_ready(cfg->bus.bus)) {
   2f78a:	6868      	ldr	r0, [r5, #4]
   2f78c:	f00c fa06 	bl	3bb9c <z_device_is_ready>
   2f790:	f8df 8180 	ldr.w	r8, [pc, #384]	; 2f914 <sx1509b_init+0x198>
   2f794:	4603      	mov	r3, r0
   2f796:	bba0      	cbnz	r0, 2f802 <sx1509b_init+0x86>
		LOG_ERR("I2C bus not ready");
   2f798:	f8d8 2000 	ldr.w	r2, [r8]
   2f79c:	0751      	lsls	r1, r2, #29
   2f79e:	d124      	bne.n	2f7ea <sx1509b_init+0x6e>
		rc = -ENODEV;
   2f7a0:	f06f 0412 	mvn.w	r4, #18
					   SX1509B_REG_MISC_FREQ);
	}

out:
	if (rc != 0) {
		LOG_ERR("%s init failed: %d", dev->name, rc);
   2f7a4:	f8d8 3000 	ldr.w	r3, [r8]
   2f7a8:	075b      	lsls	r3, r3, #29
   2f7aa:	d015      	beq.n	2f7d8 <sx1509b_init+0x5c>
   2f7ac:	466d      	mov	r5, sp
   2f7ae:	b08a      	sub	sp, #40	; 0x28
   2f7b0:	f8d9 3000 	ldr.w	r3, [r9]
   2f7b4:	466a      	mov	r2, sp
   2f7b6:	4958      	ldr	r1, [pc, #352]	; (2f918 <sx1509b_init+0x19c>)
   2f7b8:	61d4      	str	r4, [r2, #28]
   2f7ba:	e9c2 1305 	strd	r1, r3, [r2, #20]
   2f7be:	f44f 7300 	mov.w	r3, #512	; 0x200
   2f7c2:	8413      	strh	r3, [r2, #32]
   2f7c4:	4b55      	ldr	r3, [pc, #340]	; (2f91c <sx1509b_init+0x1a0>)
   2f7c6:	f842 3f10 	str.w	r3, [r2, #16]!
   2f7ca:	4852      	ldr	r0, [pc, #328]	; (2f914 <sx1509b_init+0x198>)
   2f7cc:	2300      	movs	r3, #0
   2f7ce:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   2f7d2:	f7f6 fceb 	bl	261ac <z_impl_z_log_msg_static_create>
   2f7d6:	46ad      	mov	sp, r5
	z_impl_k_sem_give(sem);
   2f7d8:	f106 001c 	add.w	r0, r6, #28
   2f7dc:	f005 ffe4 	bl	357a8 <z_impl_k_sem_give>
	} else {
		LOG_INF("%s init ok", dev->name);
	}
	k_sem_give(&drv_data->lock);
	return rc;
}
   2f7e0:	4620      	mov	r0, r4
   2f7e2:	3718      	adds	r7, #24
   2f7e4:	46bd      	mov	sp, r7
   2f7e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		LOG_ERR("I2C bus not ready");
   2f7ea:	4a4d      	ldr	r2, [pc, #308]	; (2f920 <sx1509b_init+0x1a4>)
   2f7ec:	617a      	str	r2, [r7, #20]
   2f7ee:	2202      	movs	r2, #2
   2f7f0:	613a      	str	r2, [r7, #16]
   2f7f2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   2f7f6:	f107 0210 	add.w	r2, r7, #16
   2f7fa:	4640      	mov	r0, r8
   2f7fc:	f7f6 fcd6 	bl	261ac <z_impl_z_log_msg_static_create>
   2f800:	e7ce      	b.n	2f7a0 <sx1509b_init+0x24>
 */
static inline int i2c_reg_write_byte(const struct device *dev,
				     uint16_t dev_addr,
				     uint8_t reg_addr, uint8_t value)
{
	uint8_t tx_buf[2] = {reg_addr, value};
   2f802:	f241 227d 	movw	r2, #4733	; 0x127d
 * @return a value from i2c_reg_write_byte()
 */
static inline int i2c_reg_write_byte_dt(const struct i2c_dt_spec *spec,
					uint8_t reg_addr, uint8_t value)
{
	return i2c_reg_write_byte(spec->bus, spec->addr, reg_addr, value);
   2f806:	6868      	ldr	r0, [r5, #4]
   2f808:	892b      	ldrh	r3, [r5, #8]
	uint8_t tx_buf[2] = {reg_addr, value};
   2f80a:	803a      	strh	r2, [r7, #0]
	return i2c_write(dev, tx_buf, 2, dev_addr);
   2f80c:	4639      	mov	r1, r7
   2f80e:	2202      	movs	r2, #2
   2f810:	f00b fa7a 	bl	3ad08 <i2c_write>
	if (rc != 0) {
   2f814:	4604      	mov	r4, r0
   2f816:	b1d0      	cbz	r0, 2f84e <sx1509b_init+0xd2>
		LOG_ERR("%s: reset m0 failed: %d\n", dev->name, rc);
   2f818:	f8d8 3000 	ldr.w	r3, [r8]
   2f81c:	075a      	lsls	r2, r3, #29
   2f81e:	d0c1      	beq.n	2f7a4 <sx1509b_init+0x28>
   2f820:	466d      	mov	r5, sp
   2f822:	b08a      	sub	sp, #40	; 0x28
   2f824:	f8d9 3000 	ldr.w	r3, [r9]
   2f828:	466a      	mov	r2, sp
   2f82a:	493e      	ldr	r1, [pc, #248]	; (2f924 <sx1509b_init+0x1a8>)
   2f82c:	61d0      	str	r0, [r2, #28]
   2f82e:	e9c2 1305 	strd	r1, r3, [r2, #20]
   2f832:	f44f 7300 	mov.w	r3, #512	; 0x200
   2f836:	8413      	strh	r3, [r2, #32]
   2f838:	4b38      	ldr	r3, [pc, #224]	; (2f91c <sx1509b_init+0x1a0>)
   2f83a:	f842 3f10 	str.w	r3, [r2, #16]!
   2f83e:	2300      	movs	r3, #0
   2f840:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   2f844:	4640      	mov	r0, r8
   2f846:	f7f6 fcb1 	bl	261ac <z_impl_z_log_msg_static_create>
   2f84a:	46ad      	mov	sp, r5
	if (rc != 0) {
   2f84c:	e7aa      	b.n	2f7a4 <sx1509b_init+0x28>
	uint8_t tx_buf[2] = {reg_addr, value};
   2f84e:	f243 427d 	movw	r2, #13437	; 0x347d
	return i2c_reg_write_byte(spec->bus, spec->addr, reg_addr, value);
   2f852:	6868      	ldr	r0, [r5, #4]
   2f854:	892b      	ldrh	r3, [r5, #8]
	uint8_t tx_buf[2] = {reg_addr, value};
   2f856:	803a      	strh	r2, [r7, #0]
	return i2c_write(dev, tx_buf, 2, dev_addr);
   2f858:	4639      	mov	r1, r7
   2f85a:	2202      	movs	r2, #2
   2f85c:	f00b fa54 	bl	3ad08 <i2c_write>
	if (rc != 0) {
   2f860:	4604      	mov	r4, r0
   2f862:	2800      	cmp	r0, #0
   2f864:	d19e      	bne.n	2f7a4 <sx1509b_init+0x28>
	return z_impl_k_sleep(timeout);
   2f866:	2100      	movs	r1, #0
   2f868:	2063      	movs	r0, #99	; 0x63
   2f86a:	f007 fc1b 	bl	370a4 <z_impl_k_sleep>
	drv_data->pin_state = (struct sx1509b_pin_state) {
   2f86e:	4621      	mov	r1, r4
   2f870:	2212      	movs	r2, #18
   2f872:	1d30      	adds	r0, r6, #4
   2f874:	f009 fda7 	bl	393c6 <memset>
   2f878:	f24e 03e0 	movw	r3, #57568	; 0xe0e0
	drv_data->debounce_state = (struct sx1509b_debounce_state) {
   2f87c:	8334      	strh	r4, [r6, #24]
   2f87e:	76b4      	strb	r4, [r6, #26]
	drv_data->pin_state = (struct sx1509b_pin_state) {
   2f880:	82b3      	strh	r3, [r6, #20]
	uint8_t tx_buf[2] = {reg_addr, value};
   2f882:	f244 021e 	movw	r2, #16414	; 0x401e
	return i2c_reg_write_byte(spec->bus, spec->addr, reg_addr, value);
   2f886:	6868      	ldr	r0, [r5, #4]
   2f888:	892b      	ldrh	r3, [r5, #8]
	uint8_t tx_buf[2] = {reg_addr, value};
   2f88a:	803a      	strh	r2, [r7, #0]
	return i2c_write(dev, tx_buf, 2, dev_addr);
   2f88c:	4639      	mov	r1, r7
   2f88e:	2202      	movs	r2, #2
   2f890:	f00b fa3a 	bl	3ad08 <i2c_write>
	drv_data->debounce_state = (struct sx1509b_debounce_state) {
   2f894:	46a2      	mov	sl, r4
	if (rc == 0) {
   2f896:	4604      	mov	r4, r0
   2f898:	2800      	cmp	r0, #0
   2f89a:	d183      	bne.n	2f7a4 <sx1509b_init+0x28>
	rc = i2c_reg_write_byte_dt(&cfg->bus, SX1509B_REG_RESET,
   2f89c:	3504      	adds	r5, #4
		rc = i2c_reg_write_word_be(&cfg->bus, SX1509B_REG_DATA,
   2f89e:	8ab2      	ldrh	r2, [r6, #20]
   2f8a0:	2110      	movs	r1, #16
   2f8a2:	4628      	mov	r0, r5
   2f8a4:	f00b fa41 	bl	3ad2a <i2c_reg_write_word_be>
	if (rc == 0) {
   2f8a8:	4604      	mov	r4, r0
   2f8aa:	2800      	cmp	r0, #0
   2f8ac:	f47f af7a 	bne.w	2f7a4 <sx1509b_init+0x28>
		rc = i2c_reg_write_word_be(&cfg->bus, SX1509B_REG_DIR,
   2f8b0:	8a72      	ldrh	r2, [r6, #18]
   2f8b2:	210e      	movs	r1, #14
   2f8b4:	4628      	mov	r0, r5
   2f8b6:	f00b fa38 	bl	3ad2a <i2c_reg_write_word_be>
	if (rc == 0) {
   2f8ba:	4604      	mov	r4, r0
   2f8bc:	2800      	cmp	r0, #0
   2f8be:	f47f af71 	bne.w	2f7a4 <sx1509b_init+0x28>
	uint8_t tx_buf[3] = { reg_addr, value };
   2f8c2:	f649 031f 	movw	r3, #38943	; 0x981f
   2f8c6:	803b      	strh	r3, [r7, #0]
   2f8c8:	f887 a002 	strb.w	sl, [r7, #2]
	return i2c_write_dt(bus, tx_buf, 2);
   2f8cc:	2202      	movs	r2, #2
   2f8ce:	4639      	mov	r1, r7
   2f8d0:	4628      	mov	r0, r5
   2f8d2:	f00b fa26 	bl	3ad22 <i2c_write_dt>
	if (rc != 0) {
   2f8d6:	4604      	mov	r4, r0
   2f8d8:	2800      	cmp	r0, #0
   2f8da:	f47f af63 	bne.w	2f7a4 <sx1509b_init+0x28>
		LOG_INF("%s init ok", dev->name);
   2f8de:	f8d8 3000 	ldr.w	r3, [r8]
   2f8e2:	f003 0307 	and.w	r3, r3, #7
   2f8e6:	2b02      	cmp	r3, #2
   2f8e8:	f67f af76 	bls.w	2f7d8 <sx1509b_init+0x5c>
   2f8ec:	466d      	mov	r5, sp
   2f8ee:	b088      	sub	sp, #32
   2f8f0:	f8d9 3000 	ldr.w	r3, [r9]
   2f8f4:	466a      	mov	r2, sp
   2f8f6:	490c      	ldr	r1, [pc, #48]	; (2f928 <sx1509b_init+0x1ac>)
   2f8f8:	e9c2 1305 	strd	r1, r3, [r2, #20]
   2f8fc:	f44f 7300 	mov.w	r3, #512	; 0x200
   2f900:	8393      	strh	r3, [r2, #28]
   2f902:	4b0a      	ldr	r3, [pc, #40]	; (2f92c <sx1509b_init+0x1b0>)
   2f904:	f842 3f10 	str.w	r3, [r2, #16]!
   2f908:	f44f 51e6 	mov.w	r1, #7360	; 0x1cc0
   2f90c:	4603      	mov	r3, r0
   2f90e:	4640      	mov	r0, r8
   2f910:	e75f      	b.n	2f7d2 <sx1509b_init+0x56>
   2f912:	bf00      	nop
   2f914:	20000b08 	.word	0x20000b08
   2f918:	0003ede1 	.word	0x0003ede1
   2f91c:	01000004 	.word	0x01000004
   2f920:	0003edb6 	.word	0x0003edb6
   2f924:	0003edc8 	.word	0x0003edc8
   2f928:	0003edf4 	.word	0x0003edf4
   2f92c:	01000003 	.word	0x01000003

0002f930 <port_write>:
{
   2f930:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2f934:	4606      	mov	r6, r0
   2f936:	4689      	mov	r9, r1
   2f938:	4614      	mov	r4, r2
   2f93a:	4698      	mov	r8, r3
	if (k_is_in_isr()) {
   2f93c:	f00c f95b 	bl	3bbf6 <k_is_in_isr>
   2f940:	bb68      	cbnz	r0, 2f99e <port_write+0x6e>
	const struct sx1509b_config *cfg = dev->config;
   2f942:	6875      	ldr	r5, [r6, #4]
	struct sx1509b_drv_data *drv_data = dev->data;
   2f944:	6936      	ldr	r6, [r6, #16]
	__ASSERT_NO_MSG(IS_PTR_ALIGNED(data, uint16_t));
   2f946:	07f3      	lsls	r3, r6, #31
   2f948:	d50a      	bpl.n	2f960 <port_write+0x30>
   2f94a:	4916      	ldr	r1, [pc, #88]	; (2f9a4 <port_write+0x74>)
   2f94c:	4816      	ldr	r0, [pc, #88]	; (2f9a8 <port_write+0x78>)
   2f94e:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
   2f952:	f009 f8de 	bl	38b12 <assert_print>
   2f956:	4813      	ldr	r0, [pc, #76]	; (2f9a4 <port_write+0x74>)
   2f958:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
   2f95c:	f009 f8d2 	bl	38b04 <assert_post_action>
	k_sem_take(&drv_data->lock, K_FOREVER);
   2f960:	f106 071c 	add.w	r7, r6, #28
   2f964:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2f968:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2f96c:	4638      	mov	r0, r7
   2f96e:	f00b f990 	bl	3ac92 <k_sem_take.constprop.0.isra.0>
	uint16_t orig_out = *outp;
   2f972:	8ab2      	ldrh	r2, [r6, #20]
	uint16_t out = ((orig_out & ~mask) | (value & mask)) ^ toggle;
   2f974:	4054      	eors	r4, r2
   2f976:	ea04 0409 	and.w	r4, r4, r9
   2f97a:	ea82 0208 	eor.w	r2, r2, r8
   2f97e:	4054      	eors	r4, r2
   2f980:	b2a4      	uxth	r4, r4
	int rc = i2c_reg_write_word_be(&cfg->bus, SX1509B_REG_DATA, out);
   2f982:	1d28      	adds	r0, r5, #4
   2f984:	4622      	mov	r2, r4
   2f986:	2110      	movs	r1, #16
   2f988:	f00b f9cf 	bl	3ad2a <i2c_reg_write_word_be>
	if (rc == 0) {
   2f98c:	4605      	mov	r5, r0
   2f98e:	b900      	cbnz	r0, 2f992 <port_write+0x62>
		*outp = out;
   2f990:	82b4      	strh	r4, [r6, #20]
	z_impl_k_sem_give(sem);
   2f992:	4638      	mov	r0, r7
   2f994:	f005 ff08 	bl	357a8 <z_impl_k_sem_give>
}
   2f998:	4628      	mov	r0, r5
   2f99a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -EWOULDBLOCK;
   2f99e:	f06f 050a 	mvn.w	r5, #10
   2f9a2:	e7f9      	b.n	2f998 <port_write+0x68>
   2f9a4:	0003edff 	.word	0x0003edff
   2f9a8:	0003d1d7 	.word	0x0003d1d7

0002f9ac <i2c_nrfx_twim_init>:
	return ret;
}
#endif /* CONFIG_PM_DEVICE */

static int i2c_nrfx_twim_init(const struct device *dev)
{
   2f9ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	const struct i2c_nrfx_twim_config *dev_config = dev->config;
   2f9ae:	6844      	ldr	r4, [r0, #4]
	struct i2c_nrfx_twim_data *dev_data = dev->data;
   2f9b0:	6906      	ldr	r6, [r0, #16]

	dev_config->irq_connect();
   2f9b2:	69e3      	ldr	r3, [r4, #28]
{
   2f9b4:	af00      	add	r7, sp, #0
   2f9b6:	4605      	mov	r5, r0
	dev_config->irq_connect();
   2f9b8:	4798      	blx	r3

#ifdef CONFIG_PINCTRL
	int err = pinctrl_apply_state(dev_config->pcfg,
   2f9ba:	6a20      	ldr	r0, [r4, #32]
   2f9bc:	f00b faac 	bl	3af18 <pinctrl_apply_state.constprop.0>
				      COND_CODE_1(CONFIG_PM_DEVICE_RUNTIME,
						  (PINCTRL_STATE_SLEEP),
						  (PINCTRL_STATE_DEFAULT)));
	if (err < 0) {
   2f9c0:	2800      	cmp	r0, #0
   2f9c2:	db0f      	blt.n	2f9e4 <i2c_nrfx_twim_init+0x38>
		return err;
	}
#endif

	if (nrfx_twim_init(&dev_config->twim, &dev_config->twim_config,
   2f9c4:	4633      	mov	r3, r6
   2f9c6:	4a15      	ldr	r2, [pc, #84]	; (2fa1c <i2c_nrfx_twim_init+0x70>)
   2f9c8:	f104 0108 	add.w	r1, r4, #8
   2f9cc:	4620      	mov	r0, r4
   2f9ce:	f004 fbe9 	bl	341a4 <nrfx_twim_init>
   2f9d2:	4b13      	ldr	r3, [pc, #76]	; (2fa20 <i2c_nrfx_twim_init+0x74>)
   2f9d4:	4298      	cmp	r0, r3
   2f9d6:	d01b      	beq.n	2fa10 <i2c_nrfx_twim_init+0x64>
			   event_handler, dev_data) != NRFX_SUCCESS) {
		LOG_ERR("Failed to initialize device: %s", dev->name);
   2f9d8:	4812      	ldr	r0, [pc, #72]	; (2fa24 <i2c_nrfx_twim_init+0x78>)
   2f9da:	6803      	ldr	r3, [r0, #0]
   2f9dc:	075b      	lsls	r3, r3, #29
   2f9de:	d103      	bne.n	2f9e8 <i2c_nrfx_twim_init+0x3c>
		return -EIO;
   2f9e0:	f06f 0004 	mvn.w	r0, #4
#else
	nrfx_twim_enable(&dev_config->twim);
#endif

	return 0;
}
   2f9e4:	46bd      	mov	sp, r7
   2f9e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		LOG_ERR("Failed to initialize device: %s", dev->name);
   2f9e8:	466c      	mov	r4, sp
   2f9ea:	b088      	sub	sp, #32
   2f9ec:	682b      	ldr	r3, [r5, #0]
   2f9ee:	466a      	mov	r2, sp
   2f9f0:	490d      	ldr	r1, [pc, #52]	; (2fa28 <i2c_nrfx_twim_init+0x7c>)
   2f9f2:	e9c2 1305 	strd	r1, r3, [r2, #20]
   2f9f6:	f44f 7300 	mov.w	r3, #512	; 0x200
   2f9fa:	8393      	strh	r3, [r2, #28]
   2f9fc:	4b0b      	ldr	r3, [pc, #44]	; (2fa2c <i2c_nrfx_twim_init+0x80>)
   2f9fe:	f842 3f10 	str.w	r3, [r2, #16]!
   2fa02:	2300      	movs	r3, #0
   2fa04:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   2fa08:	f7f6 fbd0 	bl	261ac <z_impl_z_log_msg_static_create>
   2fa0c:	46a5      	mov	sp, r4
   2fa0e:	e7e7      	b.n	2f9e0 <i2c_nrfx_twim_init+0x34>
	nrfx_twim_enable(&dev_config->twim);
   2fa10:	4620      	mov	r0, r4
   2fa12:	f004 fc33 	bl	3427c <nrfx_twim_enable>
	return 0;
   2fa16:	2000      	movs	r0, #0
   2fa18:	e7e4      	b.n	2f9e4 <i2c_nrfx_twim_init+0x38>
   2fa1a:	bf00      	nop
   2fa1c:	0002fa6d 	.word	0x0002fa6d
   2fa20:	0bad0000 	.word	0x0bad0000
   2fa24:	20000abc 	.word	0x20000abc
   2fa28:	0003ee45 	.word	0x0003ee45
   2fa2c:	01000003 	.word	0x01000003

0002fa30 <i2c_nrfx_twim_recover_bus>:
{
   2fa30:	b570      	push	{r4, r5, r6, lr}
	const struct i2c_nrfx_twim_config *dev_config = dev->config;
   2fa32:	6844      	ldr	r4, [r0, #4]
	scl_pin = nrf_twim_scl_pin_get(dev_config->twim.p_twim);
   2fa34:	6823      	ldr	r3, [r4, #0]
    p_reg->PSEL.SDA = sda_pin;
}

NRF_STATIC_INLINE uint32_t nrf_twim_scl_pin_get(NRF_TWIM_Type const * p_reg)
{
    return p_reg->PSEL.SCL;
   2fa36:	f8d3 5508 	ldr.w	r5, [r3, #1288]	; 0x508
}

NRF_STATIC_INLINE uint32_t nrf_twim_sda_pin_get(NRF_TWIM_Type const * p_reg)
{
    return p_reg->PSEL.SDA;
   2fa3a:	f8d3 650c 	ldr.w	r6, [r3, #1292]	; 0x50c
		nrfx_twim_disable(&dev_config->twim);
   2fa3e:	4620      	mov	r0, r4
   2fa40:	f004 fc40 	bl	342c4 <nrfx_twim_disable>
NRFX_STATIC_INLINE nrfx_err_t nrfx_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin);

#ifndef NRFX_DECLARE_ONLY
NRFX_STATIC_INLINE nrfx_err_t nrfx_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin)
{
    return nrfx_twi_twim_bus_recover(scl_pin, sda_pin);
   2fa44:	4631      	mov	r1, r6
   2fa46:	4628      	mov	r0, r5
   2fa48:	f004 fe7e 	bl	34748 <nrfx_twi_twim_bus_recover>
   2fa4c:	4605      	mov	r5, r0
		(void)pinctrl_apply_state(dev_config->pcfg,
   2fa4e:	6a20      	ldr	r0, [r4, #32]
   2fa50:	f00b fa62 	bl	3af18 <pinctrl_apply_state.constprop.0>
		nrfx_twim_enable(&dev_config->twim);
   2fa54:	4620      	mov	r0, r4
   2fa56:	f004 fc11 	bl	3427c <nrfx_twim_enable>
	return (err == NRFX_SUCCESS ? 0 : -EBUSY);
   2fa5a:	4b03      	ldr	r3, [pc, #12]	; (2fa68 <i2c_nrfx_twim_recover_bus+0x38>)
   2fa5c:	429d      	cmp	r5, r3
}
   2fa5e:	bf14      	ite	ne
   2fa60:	f06f 000f 	mvnne.w	r0, #15
   2fa64:	2000      	moveq	r0, #0
   2fa66:	bd70      	pop	{r4, r5, r6, pc}
   2fa68:	0bad0000 	.word	0x0bad0000

0002fa6c <event_handler>:
	switch (p_event->type) {
   2fa6c:	7803      	ldrb	r3, [r0, #0]
   2fa6e:	2b01      	cmp	r3, #1
   2fa70:	d008      	beq.n	2fa84 <event_handler+0x18>
   2fa72:	2b02      	cmp	r3, #2
   2fa74:	d008      	beq.n	2fa88 <event_handler+0x1c>
   2fa76:	b94b      	cbnz	r3, 2fa8c <event_handler+0x20>
		dev_data->res = NRFX_SUCCESS;
   2fa78:	4b05      	ldr	r3, [pc, #20]	; (2fa90 <event_handler+0x24>)
		dev_data->res = NRFX_ERROR_INTERNAL;
   2fa7a:	630b      	str	r3, [r1, #48]	; 0x30
   2fa7c:	f101 0018 	add.w	r0, r1, #24
   2fa80:	f005 be92 	b.w	357a8 <z_impl_k_sem_give>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_ANACK;
   2fa84:	4b03      	ldr	r3, [pc, #12]	; (2fa94 <event_handler+0x28>)
   2fa86:	e7f8      	b.n	2fa7a <event_handler+0xe>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_DNACK;
   2fa88:	4b03      	ldr	r3, [pc, #12]	; (2fa98 <event_handler+0x2c>)
   2fa8a:	e7f6      	b.n	2fa7a <event_handler+0xe>
		dev_data->res = NRFX_ERROR_INTERNAL;
   2fa8c:	4b03      	ldr	r3, [pc, #12]	; (2fa9c <event_handler+0x30>)
   2fa8e:	e7f4      	b.n	2fa7a <event_handler+0xe>
   2fa90:	0bad0000 	.word	0x0bad0000
   2fa94:	0bae0001 	.word	0x0bae0001
   2fa98:	0bae0002 	.word	0x0bae0002
   2fa9c:	0bad0001 	.word	0x0bad0001

0002faa0 <i2c_nrfx_twim_configure>:
{
   2faa0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (I2C_ADDR_10_BITS & i2c_config) {
   2faa2:	f011 0301 	ands.w	r3, r1, #1
	const struct i2c_nrfx_twim_config *dev_config = dev->config;
   2faa6:	6842      	ldr	r2, [r0, #4]
	if (I2C_ADDR_10_BITS & i2c_config) {
   2faa8:	d112      	bne.n	2fad0 <i2c_nrfx_twim_configure+0x30>
	switch (I2C_SPEED_GET(i2c_config)) {
   2faaa:	f3c1 0142 	ubfx	r1, r1, #1, #3
   2faae:	2901      	cmp	r1, #1
   2fab0:	d011      	beq.n	2fad6 <i2c_nrfx_twim_configure+0x36>
   2fab2:	2902      	cmp	r1, #2
   2fab4:	d018      	beq.n	2fae8 <i2c_nrfx_twim_configure+0x48>
		LOG_ERR("unsupported speed");
   2fab6:	480e      	ldr	r0, [pc, #56]	; (2faf0 <i2c_nrfx_twim_configure+0x50>)
   2fab8:	6802      	ldr	r2, [r0, #0]
   2faba:	0752      	lsls	r2, r2, #29
   2fabc:	d008      	beq.n	2fad0 <i2c_nrfx_twim_configure+0x30>
   2fabe:	4a0d      	ldr	r2, [pc, #52]	; (2faf4 <i2c_nrfx_twim_configure+0x54>)
   2fac0:	9205      	str	r2, [sp, #20]
   2fac2:	2202      	movs	r2, #2
   2fac4:	9204      	str	r2, [sp, #16]
   2fac6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   2faca:	aa04      	add	r2, sp, #16
   2facc:	f7f6 fb6e 	bl	261ac <z_impl_z_log_msg_static_create>
		return -EINVAL;
   2fad0:	f06f 0015 	mvn.w	r0, #21
   2fad4:	e005      	b.n	2fae2 <i2c_nrfx_twim_configure+0x42>
		nrf_twim_frequency_set(dev_config->twim.p_twim,
   2fad6:	6813      	ldr	r3, [r2, #0]
}

NRF_STATIC_INLINE void nrf_twim_frequency_set(NRF_TWIM_Type * p_reg,
                                              nrf_twim_frequency_t frequency)
{
    p_reg->FREQUENCY = frequency;
   2fad8:	f04f 72cc 	mov.w	r2, #26738688	; 0x1980000
   2fadc:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
	return 0;
   2fae0:	2000      	movs	r0, #0
}
   2fae2:	b007      	add	sp, #28
   2fae4:	f85d fb04 	ldr.w	pc, [sp], #4
		nrf_twim_frequency_set(dev_config->twim.p_twim,
   2fae8:	6813      	ldr	r3, [r2, #0]
   2faea:	f04f 62c8 	mov.w	r2, #104857600	; 0x6400000
   2faee:	e7f5      	b.n	2fadc <i2c_nrfx_twim_configure+0x3c>
   2faf0:	20000abc 	.word	0x20000abc
   2faf4:	0003ee65 	.word	0x0003ee65

0002faf8 <i2c_nrfx_twim_transfer>:
{
   2faf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2fafc:	b08d      	sub	sp, #52	; 0x34
	const struct i2c_nrfx_twim_config *dev_config = dev->config;
   2fafe:	f8d0 b004 	ldr.w	fp, [r0, #4]
	struct i2c_nrfx_twim_data *dev_data = dev->data;
   2fb02:	f8d0 9010 	ldr.w	r9, [r0, #16]
{
   2fb06:	af00      	add	r7, sp, #0
   2fb08:	461d      	mov	r5, r3
   2fb0a:	613a      	str	r2, [r7, #16]
	uint16_t concat_buf_size = dev_config->concat_buf_size;
   2fb0c:	f8bb 3018 	ldrh.w	r3, [fp, #24]
	uint8_t *msg_buf = dev_data->msg_buf;
   2fb10:	f8d9 a034 	ldr.w	sl, [r9, #52]	; 0x34
	uint16_t concat_buf_size = dev_config->concat_buf_size;
   2fb14:	617b      	str	r3, [r7, #20]
{
   2fb16:	4606      	mov	r6, r0
   2fb18:	460c      	mov	r4, r1
	nrfx_twim_xfer_desc_t cur_xfer = {
   2fb1a:	2214      	movs	r2, #20
   2fb1c:	2100      	movs	r1, #0
   2fb1e:	f107 001c 	add.w	r0, r7, #28
   2fb22:	f009 fc50 	bl	393c6 <memset>
   2fb26:	777d      	strb	r5, [r7, #29]
	return z_impl_k_sem_take(sem, timeout);
   2fb28:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2fb2c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2fb30:	4648      	mov	r0, r9
   2fb32:	f005 fe73 	bl	3581c <z_impl_k_sem_take>
	k_sem_take(&dev_data->completion_sync, K_NO_WAIT);
   2fb36:	f109 0318 	add.w	r3, r9, #24
   2fb3a:	60fb      	str	r3, [r7, #12]
   2fb3c:	2200      	movs	r2, #0
   2fb3e:	2300      	movs	r3, #0
   2fb40:	f109 0018 	add.w	r0, r9, #24
   2fb44:	f005 fe6a 	bl	3581c <z_impl_k_sem_take>
	for (size_t i = 0; i < num_msgs; i++) {
   2fb48:	f04f 0800 	mov.w	r8, #0
	uint16_t msg_buf_used = 0;
   2fb4c:	4645      	mov	r5, r8
	for (size_t i = 0; i < num_msgs; i++) {
   2fb4e:	693b      	ldr	r3, [r7, #16]
   2fb50:	4598      	cmp	r8, r3
   2fb52:	d301      	bcc.n	2fb58 <i2c_nrfx_twim_transfer+0x60>
   2fb54:	2400      	movs	r4, #0
   2fb56:	e03b      	b.n	2fbd0 <i2c_nrfx_twim_transfer+0xd8>
		if (I2C_MSG_ADDR_10_BITS & msgs[i].flags) {
   2fb58:	7a20      	ldrb	r0, [r4, #8]
   2fb5a:	0702      	lsls	r2, r0, #28
   2fb5c:	f100 80f7 	bmi.w	2fd4e <i2c_nrfx_twim_transfer+0x256>
				&& ((msgs[i].flags & I2C_MSG_READ)
   2fb60:	693a      	ldr	r2, [r7, #16]
		bool concat_next = ((i + 1) < num_msgs)
   2fb62:	f108 0301 	add.w	r3, r8, #1
				&& ((msgs[i].flags & I2C_MSG_READ)
   2fb66:	4293      	cmp	r3, r2
		bool concat_next = ((i + 1) < num_msgs)
   2fb68:	60bb      	str	r3, [r7, #8]
				&& ((msgs[i].flags & I2C_MSG_READ)
   2fb6a:	d20a      	bcs.n	2fb82 <i2c_nrfx_twim_transfer+0x8a>
				&& !(msgs[i].flags & I2C_MSG_STOP)
   2fb6c:	0783      	lsls	r3, r0, #30
   2fb6e:	d408      	bmi.n	2fb82 <i2c_nrfx_twim_transfer+0x8a>
				&& !(msgs[i + 1].flags & I2C_MSG_RESTART)
   2fb70:	7d23      	ldrb	r3, [r4, #20]
				    == (msgs[i + 1].flags & I2C_MSG_READ));
   2fb72:	ea80 0203 	eor.w	r2, r0, r3
				&& ((msgs[i].flags & I2C_MSG_READ)
   2fb76:	f002 0201 	and.w	r2, r2, #1
   2fb7a:	f003 0304 	and.w	r3, r3, #4
   2fb7e:	431a      	orrs	r2, r3
   2fb80:	d02e      	beq.n	2fbe0 <i2c_nrfx_twim_transfer+0xe8>
		if (concat_next || (msg_buf_used != 0)) {
   2fb82:	2d00      	cmp	r5, #0
   2fb84:	d042      	beq.n	2fc0c <i2c_nrfx_twim_transfer+0x114>
		bool concat_next = ((i + 1) < num_msgs)
   2fb86:	2300      	movs	r3, #0
			if ((msg_buf_used + msgs[i].len) > concat_buf_size) {
   2fb88:	6862      	ldr	r2, [r4, #4]
   2fb8a:	f8d7 c014 	ldr.w	ip, [r7, #20]
   2fb8e:	18a9      	adds	r1, r5, r2
   2fb90:	4561      	cmp	r1, ip
   2fb92:	d927      	bls.n	2fbe4 <i2c_nrfx_twim_transfer+0xec>
				LOG_ERR("Need to use concatenation buffer and "
   2fb94:	486f      	ldr	r0, [pc, #444]	; (2fd54 <i2c_nrfx_twim_transfer+0x25c>)
   2fb96:	6803      	ldr	r3, [r0, #0]
   2fb98:	075c      	lsls	r4, r3, #29
   2fb9a:	d017      	beq.n	2fbcc <i2c_nrfx_twim_transfer+0xd4>
   2fb9c:	466c      	mov	r4, sp
   2fb9e:	b08c      	sub	sp, #48	; 0x30
   2fba0:	6831      	ldr	r1, [r6, #0]
   2fba2:	466b      	mov	r3, sp
   2fba4:	61da      	str	r2, [r3, #28]
   2fba6:	697a      	ldr	r2, [r7, #20]
   2fba8:	4e6b      	ldr	r6, [pc, #428]	; (2fd58 <i2c_nrfx_twim_transfer+0x260>)
   2fbaa:	e9c3 2108 	strd	r2, r1, [r3, #32]
   2fbae:	f240 5203 	movw	r2, #1283	; 0x503
   2fbb2:	851a      	strh	r2, [r3, #40]	; 0x28
   2fbb4:	461a      	mov	r2, r3
   2fbb6:	e9c3 6505 	strd	r6, r5, [r3, #20]
   2fbba:	4b68      	ldr	r3, [pc, #416]	; (2fd5c <i2c_nrfx_twim_transfer+0x264>)
   2fbbc:	f842 3f10 	str.w	r3, [r2, #16]!
   2fbc0:	2300      	movs	r3, #0
   2fbc2:	f44f 5151 	mov.w	r1, #13376	; 0x3440
   2fbc6:	f7f6 faf1 	bl	261ac <z_impl_z_log_msg_static_create>
   2fbca:	46a5      	mov	sp, r4
				ret = -ENOSPC;
   2fbcc:	f06f 041b 	mvn.w	r4, #27
	z_impl_k_sem_give(sem);
   2fbd0:	4648      	mov	r0, r9
   2fbd2:	f005 fde9 	bl	357a8 <z_impl_k_sem_give>
}
   2fbd6:	4620      	mov	r0, r4
   2fbd8:	3734      	adds	r7, #52	; 0x34
   2fbda:	46bd      	mov	sp, r7
   2fbdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		bool concat_next = ((i + 1) < num_msgs)
   2fbe0:	2301      	movs	r3, #1
   2fbe2:	e7d1      	b.n	2fb88 <i2c_nrfx_twim_transfer+0x90>
			if (!(msgs[i].flags & I2C_MSG_READ)) {
   2fbe4:	07c1      	lsls	r1, r0, #31
   2fbe6:	d406      	bmi.n	2fbf6 <i2c_nrfx_twim_transfer+0xfe>
				memcpy(msg_buf + msg_buf_used,
   2fbe8:	6821      	ldr	r1, [r4, #0]
   2fbea:	607b      	str	r3, [r7, #4]
   2fbec:	eb0a 0005 	add.w	r0, sl, r5
   2fbf0:	f009 fbde 	bl	393b0 <memcpy>
   2fbf4:	687b      	ldr	r3, [r7, #4]
			msg_buf_used += msgs[i].len;
   2fbf6:	6862      	ldr	r2, [r4, #4]
   2fbf8:	442a      	add	r2, r5
   2fbfa:	b295      	uxth	r5, r2
		if (concat_next) {
   2fbfc:	2b00      	cmp	r3, #0
   2fbfe:	f040 808e 	bne.w	2fd1e <i2c_nrfx_twim_transfer+0x226>
		if (msg_buf_used == 0) {
   2fc02:	b13d      	cbz	r5, 2fc14 <i2c_nrfx_twim_transfer+0x11c>
			cur_xfer.p_primary_buf = msg_buf;
   2fc04:	f8c7 a028 	str.w	sl, [r7, #40]	; 0x28
			cur_xfer.primary_length = msg_buf_used;
   2fc08:	462b      	mov	r3, r5
   2fc0a:	e007      	b.n	2fc1c <i2c_nrfx_twim_transfer+0x124>
		} else if (!(msgs[i].flags & I2C_MSG_READ) &&
   2fc0c:	07c3      	lsls	r3, r0, #31
			   !nrfx_is_in_ram(msgs[i].buf)) {
   2fc0e:	e9d4 1200 	ldrd	r1, r2, [r4]
		} else if (!(msgs[i].flags & I2C_MSG_READ) &&
   2fc12:	d51b      	bpl.n	2fc4c <i2c_nrfx_twim_transfer+0x154>
			cur_xfer.p_primary_buf = msgs[i].buf;
   2fc14:	6823      	ldr	r3, [r4, #0]
   2fc16:	62bb      	str	r3, [r7, #40]	; 0x28
			cur_xfer.primary_length = msgs[i].len;
   2fc18:	6863      	ldr	r3, [r4, #4]
   2fc1a:	2500      	movs	r5, #0
		cur_xfer.type = (msgs[i].flags & I2C_MSG_READ) ?
   2fc1c:	7a22      	ldrb	r2, [r4, #8]
			cur_xfer.primary_length = msgs[i].len;
   2fc1e:	623b      	str	r3, [r7, #32]
			NRFX_TWIM_XFER_RX : NRFX_TWIM_XFER_TX;
   2fc20:	f002 0301 	and.w	r3, r2, #1
		nrfx_err_t res = nrfx_twim_xfer(&dev_config->twim,
   2fc24:	f082 0202 	eor.w	r2, r2, #2
   2fc28:	f3c2 0240 	ubfx	r2, r2, #1, #1
   2fc2c:	0152      	lsls	r2, r2, #5
   2fc2e:	f107 011c 	add.w	r1, r7, #28
   2fc32:	4658      	mov	r0, fp
		cur_xfer.type = (msgs[i].flags & I2C_MSG_READ) ?
   2fc34:	773b      	strb	r3, [r7, #28]
		nrfx_err_t res = nrfx_twim_xfer(&dev_config->twim,
   2fc36:	f004 fb75 	bl	34324 <nrfx_twim_xfer>
		if (res != NRFX_SUCCESS) {
   2fc3a:	4b49      	ldr	r3, [pc, #292]	; (2fd60 <i2c_nrfx_twim_transfer+0x268>)
   2fc3c:	4298      	cmp	r0, r3
   2fc3e:	d02f      	beq.n	2fca0 <i2c_nrfx_twim_transfer+0x1a8>
			if (res == NRFX_ERROR_BUSY) {
   2fc40:	330b      	adds	r3, #11
   2fc42:	4298      	cmp	r0, r3
   2fc44:	d14a      	bne.n	2fcdc <i2c_nrfx_twim_transfer+0x1e4>
				ret = -EBUSY;
   2fc46:	f06f 040f 	mvn.w	r4, #15
   2fc4a:	e7c1      	b.n	2fbd0 <i2c_nrfx_twim_transfer+0xd8>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   2fc4c:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
		} else if (!(msgs[i].flags & I2C_MSG_READ) &&
   2fc50:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   2fc54:	d0de      	beq.n	2fc14 <i2c_nrfx_twim_transfer+0x11c>
			if (msgs[i].len > dev_config->flash_buf_max_size) {
   2fc56:	f8bb 301a 	ldrh.w	r3, [fp, #26]
   2fc5a:	4293      	cmp	r3, r2
   2fc5c:	d21b      	bcs.n	2fc96 <i2c_nrfx_twim_transfer+0x19e>
				LOG_ERR("Cannot copy flash buffer of size: %u. "
   2fc5e:	483d      	ldr	r0, [pc, #244]	; (2fd54 <i2c_nrfx_twim_transfer+0x25c>)
   2fc60:	6803      	ldr	r3, [r0, #0]
   2fc62:	075c      	lsls	r4, r3, #29
   2fc64:	d014      	beq.n	2fc90 <i2c_nrfx_twim_transfer+0x198>
   2fc66:	466c      	mov	r4, sp
   2fc68:	b08a      	sub	sp, #40	; 0x28
   2fc6a:	6831      	ldr	r1, [r6, #0]
   2fc6c:	466b      	mov	r3, sp
   2fc6e:	4e3d      	ldr	r6, [pc, #244]	; (2fd64 <i2c_nrfx_twim_transfer+0x26c>)
   2fc70:	61d9      	str	r1, [r3, #28]
   2fc72:	e9c3 6205 	strd	r6, r2, [r3, #20]
   2fc76:	f240 3201 	movw	r2, #769	; 0x301
   2fc7a:	841a      	strh	r2, [r3, #32]
   2fc7c:	461a      	mov	r2, r3
   2fc7e:	4b3a      	ldr	r3, [pc, #232]	; (2fd68 <i2c_nrfx_twim_transfer+0x270>)
   2fc80:	f842 3f10 	str.w	r3, [r2, #16]!
   2fc84:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   2fc88:	462b      	mov	r3, r5
   2fc8a:	f7f6 fa8f 	bl	261ac <z_impl_z_log_msg_static_create>
   2fc8e:	46a5      	mov	sp, r4
				ret = -EINVAL;
   2fc90:	f06f 0415 	mvn.w	r4, #21
   2fc94:	e79c      	b.n	2fbd0 <i2c_nrfx_twim_transfer+0xd8>
			memcpy(msg_buf, msgs[i].buf, msgs[i].len);
   2fc96:	4650      	mov	r0, sl
   2fc98:	f009 fb8a 	bl	393b0 <memcpy>
			msg_buf_used = msgs[i].len;
   2fc9c:	88a5      	ldrh	r5, [r4, #4]
		if (concat_next) {
   2fc9e:	e7b0      	b.n	2fc02 <i2c_nrfx_twim_transfer+0x10a>
	return z_impl_k_sem_take(sem, timeout);
   2fca0:	2300      	movs	r3, #0
   2fca2:	68f8      	ldr	r0, [r7, #12]
   2fca4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   2fca8:	f005 fdb8 	bl	3581c <z_impl_k_sem_take>
		if (ret != 0) {
   2fcac:	4603      	mov	r3, r0
   2fcae:	b1c0      	cbz	r0, 2fce2 <i2c_nrfx_twim_transfer+0x1ea>
			LOG_ERR("Error on I2C line occurred for message %d", i);
   2fcb0:	4828      	ldr	r0, [pc, #160]	; (2fd54 <i2c_nrfx_twim_transfer+0x25c>)
   2fcb2:	6803      	ldr	r3, [r0, #0]
   2fcb4:	0759      	lsls	r1, r3, #29
   2fcb6:	d00e      	beq.n	2fcd6 <i2c_nrfx_twim_transfer+0x1de>
   2fcb8:	466c      	mov	r4, sp
   2fcba:	b088      	sub	sp, #32
   2fcbc:	466a      	mov	r2, sp
   2fcbe:	4b2b      	ldr	r3, [pc, #172]	; (2fd6c <i2c_nrfx_twim_transfer+0x274>)
   2fcc0:	e9c2 3805 	strd	r3, r8, [r2, #20]
   2fcc4:	2303      	movs	r3, #3
   2fcc6:	f842 3f10 	str.w	r3, [r2, #16]!
   2fcca:	2300      	movs	r3, #0
   2fccc:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   2fcd0:	f7f6 fa6c 	bl	261ac <z_impl_z_log_msg_static_create>
   2fcd4:	46a5      	mov	sp, r4
			(void)i2c_nrfx_twim_recover_bus(dev);
   2fcd6:	4630      	mov	r0, r6
   2fcd8:	f7ff feaa 	bl	2fa30 <i2c_nrfx_twim_recover_bus>
				ret = -EIO;
   2fcdc:	f06f 0404 	mvn.w	r4, #4
   2fce0:	e776      	b.n	2fbd0 <i2c_nrfx_twim_transfer+0xd8>
		res = dev_data->res;
   2fce2:	f8d9 1030 	ldr.w	r1, [r9, #48]	; 0x30
		if (res != NRFX_SUCCESS) {
   2fce6:	4a1e      	ldr	r2, [pc, #120]	; (2fd60 <i2c_nrfx_twim_transfer+0x268>)
   2fce8:	4291      	cmp	r1, r2
   2fcea:	d014      	beq.n	2fd16 <i2c_nrfx_twim_transfer+0x21e>
			LOG_ERR("Error 0x%08X occurred for message %d", res, i);
   2fcec:	4819      	ldr	r0, [pc, #100]	; (2fd54 <i2c_nrfx_twim_transfer+0x25c>)
   2fcee:	6802      	ldr	r2, [r0, #0]
   2fcf0:	0752      	lsls	r2, r2, #29
   2fcf2:	d0f3      	beq.n	2fcdc <i2c_nrfx_twim_transfer+0x1e4>
   2fcf4:	466c      	mov	r4, sp
   2fcf6:	b088      	sub	sp, #32
   2fcf8:	466a      	mov	r2, sp
   2fcfa:	4d1d      	ldr	r5, [pc, #116]	; (2fd70 <i2c_nrfx_twim_transfer+0x278>)
   2fcfc:	f8c2 801c 	str.w	r8, [r2, #28]
   2fd00:	e9c2 5105 	strd	r5, r1, [r2, #20]
   2fd04:	2104      	movs	r1, #4
   2fd06:	f842 1f10 	str.w	r1, [r2, #16]!
   2fd0a:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   2fd0e:	f7f6 fa4d 	bl	261ac <z_impl_z_log_msg_static_create>
   2fd12:	46a5      	mov	sp, r4
   2fd14:	e7e2      	b.n	2fcdc <i2c_nrfx_twim_transfer+0x1e4>
		if ((msgs[i].flags & I2C_MSG_READ)
   2fd16:	7a23      	ldrb	r3, [r4, #8]
   2fd18:	07db      	lsls	r3, r3, #31
   2fd1a:	d404      	bmi.n	2fd26 <i2c_nrfx_twim_transfer+0x22e>
		msg_buf_used = 0;
   2fd1c:	2500      	movs	r5, #0
   2fd1e:	f8d7 8008 	ldr.w	r8, [r7, #8]
   2fd22:	340c      	adds	r4, #12
   2fd24:	e713      	b.n	2fb4e <i2c_nrfx_twim_transfer+0x56>
		    && cur_xfer.p_primary_buf == msg_buf) {
   2fd26:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2fd28:	459a      	cmp	sl, r3
   2fd2a:	d1f7      	bne.n	2fd1c <i2c_nrfx_twim_transfer+0x224>
   2fd2c:	46a0      	mov	r8, r4
   2fd2e:	e007      	b.n	2fd40 <i2c_nrfx_twim_transfer+0x248>
				msg_buf_used -= msgs[j].len;
   2fd30:	1aa9      	subs	r1, r5, r2
   2fd32:	b28d      	uxth	r5, r1
				memcpy(msgs[j].buf,
   2fd34:	f8d8 000c 	ldr.w	r0, [r8, #12]
   2fd38:	fa1a f181 	uxtah	r1, sl, r1
   2fd3c:	f009 fb38 	bl	393b0 <memcpy>
			while (msg_buf_used >= msgs[j].len) {
   2fd40:	f8d8 2004 	ldr.w	r2, [r8, #4]
   2fd44:	4295      	cmp	r5, r2
   2fd46:	f1a8 080c 	sub.w	r8, r8, #12
   2fd4a:	d2f1      	bcs.n	2fd30 <i2c_nrfx_twim_transfer+0x238>
   2fd4c:	e7e6      	b.n	2fd1c <i2c_nrfx_twim_transfer+0x224>
			ret = -ENOTSUP;
   2fd4e:	f06f 0485 	mvn.w	r4, #133	; 0x85
   2fd52:	e73d      	b.n	2fbd0 <i2c_nrfx_twim_transfer+0xd8>
   2fd54:	20000abc 	.word	0x20000abc
   2fd58:	0003ee77 	.word	0x0003ee77
   2fd5c:	01000006 	.word	0x01000006
   2fd60:	0bad0000 	.word	0x0bad0000
   2fd64:	0003ef07 	.word	0x0003ef07
   2fd68:	01000004 	.word	0x01000004
   2fd6c:	0003ef6d 	.word	0x0003ef6d
   2fd70:	0003ef97 	.word	0x0003ef97

0002fd74 <ccs811_channel_get>:
{
	struct ccs811_data *drv_data = dev->data;
	const struct ccs811_result_type *rp = &drv_data->result;
	uint32_t uval;

	switch (chan) {
   2fd74:	391b      	subs	r1, #27
	struct ccs811_data *drv_data = dev->data;
   2fd76:	6903      	ldr	r3, [r0, #16]
	switch (chan) {
   2fd78:	2904      	cmp	r1, #4
   2fd7a:	d81c      	bhi.n	2fdb6 <ccs811_channel_get+0x42>
   2fd7c:	e8df f001 	tbb	[pc, r1]
   2fd80:	0b1b0903 	.word	0x0b1b0903
   2fd84:	17          	.byte	0x17
   2fd85:	00          	.byte	0x00
	case SENSOR_CHAN_CO2:
		val->val1 = rp->co2;
   2fd86:	8819      	ldrh	r1, [r3, #0]
		val->val2 = 0;

		break;
   2fd88:	2300      	movs	r3, #0
		val->val2 = 0;
   2fd8a:	e9c2 1300 	strd	r1, r3, [r2]
		break;
	default:
		return -ENOTSUP;
	}

	return 0;
   2fd8e:	2000      	movs	r0, #0
   2fd90:	4770      	bx	lr
		val->val1 = rp->voc;
   2fd92:	8859      	ldrh	r1, [r3, #2]
		break;
   2fd94:	e7f8      	b.n	2fd88 <ccs811_channel_get+0x14>
			>> CCS811_RAW_VOLTAGE_POS) * CCS811_RAW_VOLTAGE_SCALE;
   2fd96:	889b      	ldrh	r3, [r3, #4]
		val->val1 = uval / 1000000U;
   2fd98:	4808      	ldr	r0, [pc, #32]	; (2fdbc <ccs811_channel_get+0x48>)
		uval = ((rp->raw & CCS811_RAW_VOLTAGE_MSK)
   2fd9a:	f240 614c 	movw	r1, #1612	; 0x64c
			>> CCS811_RAW_VOLTAGE_POS) * CCS811_RAW_VOLTAGE_SCALE;
   2fd9e:	f3c3 0309 	ubfx	r3, r3, #0, #10
		uval = ((rp->raw & CCS811_RAW_VOLTAGE_MSK)
   2fda2:	434b      	muls	r3, r1
		val->val1 = uval / 1000000U;
   2fda4:	fbb3 f1f0 	udiv	r1, r3, r0
		val->val2 = uval % 1000000;
   2fda8:	fb00 3311 	mls	r3, r0, r1, r3
		break;
   2fdac:	e7ed      	b.n	2fd8a <ccs811_channel_get+0x16>
			>> CCS811_RAW_CURRENT_POS) * CCS811_RAW_CURRENT_SCALE;
   2fdae:	889b      	ldrh	r3, [r3, #4]
		break;
   2fdb0:	2100      	movs	r1, #0
		val->val2 = uval % 1000000;
   2fdb2:	0a9b      	lsrs	r3, r3, #10
		break;
   2fdb4:	e7e9      	b.n	2fd8a <ccs811_channel_get+0x16>
	switch (chan) {
   2fdb6:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   2fdba:	4770      	bx	lr
   2fdbc:	000f4240 	.word	0x000f4240

0002fdc0 <gpio_pin_set_dt.isra.0>:
 *
 * @param spec GPIO specification from devicetree
 * @param value Value assigned to the pin.
 * @return a value from gpio_pin_set()
 */
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
   2fdc0:	b510      	push	{r4, lr}
   2fdc2:	4603      	mov	r3, r0
   2fdc4:	460a      	mov	r2, r1
{
	return gpio_pin_set(spec->port, spec->pin, value);
   2fdc6:	6800      	ldr	r0, [r0, #0]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   2fdc8:	7919      	ldrb	r1, [r3, #4]
	const struct gpio_driver_data *const data =
   2fdca:	6904      	ldr	r4, [r0, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   2fdcc:	2301      	movs	r3, #1
   2fdce:	fa03 f101 	lsl.w	r1, r3, r1
   2fdd2:	6843      	ldr	r3, [r0, #4]
   2fdd4:	681b      	ldr	r3, [r3, #0]
   2fdd6:	4219      	tst	r1, r3
   2fdd8:	d10a      	bne.n	2fdf0 <gpio_pin_set_dt.isra.0+0x30>
   2fdda:	490c      	ldr	r1, [pc, #48]	; (2fe0c <gpio_pin_set_dt.isra.0+0x4c>)
   2fddc:	480c      	ldr	r0, [pc, #48]	; (2fe10 <gpio_pin_set_dt.isra.0+0x50>)
   2fdde:	f240 5227 	movw	r2, #1319	; 0x527
   2fde2:	f008 fe96 	bl	38b12 <assert_print>
   2fde6:	4809      	ldr	r0, [pc, #36]	; (2fe0c <gpio_pin_set_dt.isra.0+0x4c>)
   2fde8:	f240 5127 	movw	r1, #1319	; 0x527
   2fdec:	f008 fe8a 	bl	38b04 <assert_post_action>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   2fdf0:	6823      	ldr	r3, [r4, #0]
   2fdf2:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
   2fdf4:	bf18      	it	ne
   2fdf6:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
   2fdfa:	b122      	cbz	r2, 2fe06 <gpio_pin_set_dt.isra.0+0x46>
	return api->port_set_bits_raw(port, pins);
   2fdfc:	6883      	ldr	r3, [r0, #8]
   2fdfe:	68db      	ldr	r3, [r3, #12]
}
   2fe00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return api->port_clear_bits_raw(port, pins);
   2fe04:	4718      	bx	r3
   2fe06:	6883      	ldr	r3, [r0, #8]
   2fe08:	691b      	ldr	r3, [r3, #16]
   2fe0a:	e7f9      	b.n	2fe00 <gpio_pin_set_dt.isra.0+0x40>
   2fe0c:	0003d1a6 	.word	0x0003d1a6
   2fe10:	0003d1d7 	.word	0x0003d1d7

0002fe14 <gpio_pin_configure_dt.isra.0>:
static inline int gpio_pin_configure_dt(const struct gpio_dt_spec *spec,
   2fe14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2fe18:	4603      	mov	r3, r0
   2fe1a:	460a      	mov	r2, r1
				  spec->pin,
   2fe1c:	7919      	ldrb	r1, [r3, #4]
				  spec->dt_flags | extra_flags);
   2fe1e:	88db      	ldrh	r3, [r3, #6]
	return gpio_pin_configure(spec->port,
   2fe20:	6800      	ldr	r0, [r0, #0]
   2fe22:	4313      	orrs	r3, r2
	__ASSERT((flags & (GPIO_PULL_UP | GPIO_PULL_DOWN)) !=
   2fe24:	f003 0230 	and.w	r2, r3, #48	; 0x30
   2fe28:	2a30      	cmp	r2, #48	; 0x30
	__unused const struct gpio_driver_config *const cfg =
   2fe2a:	e9d0 4701 	ldrd	r4, r7, [r0, #4]
	struct gpio_driver_data *data =
   2fe2e:	6906      	ldr	r6, [r0, #16]
	__ASSERT((flags & (GPIO_PULL_UP | GPIO_PULL_DOWN)) !=
   2fe30:	d10a      	bne.n	2fe48 <gpio_pin_configure_dt.isra.0+0x34>
   2fe32:	4922      	ldr	r1, [pc, #136]	; (2febc <gpio_pin_configure_dt.isra.0+0xa8>)
   2fe34:	4822      	ldr	r0, [pc, #136]	; (2fec0 <gpio_pin_configure_dt.isra.0+0xac>)
   2fe36:	f240 22c1 	movw	r2, #705	; 0x2c1
   2fe3a:	f008 fe6a 	bl	38b12 <assert_print>
   2fe3e:	f240 21c1 	movw	r1, #705	; 0x2c1
	__ASSERT_NO_MSG((flags & GPIO_SINGLE_ENDED) != 0 ||
   2fe42:	481e      	ldr	r0, [pc, #120]	; (2febc <gpio_pin_configure_dt.isra.0+0xa8>)
   2fe44:	f008 fe5e 	bl	38b04 <assert_post_action>
   2fe48:	f003 0206 	and.w	r2, r3, #6
   2fe4c:	2a04      	cmp	r2, #4
   2fe4e:	d108      	bne.n	2fe62 <gpio_pin_configure_dt.isra.0+0x4e>
   2fe50:	491a      	ldr	r1, [pc, #104]	; (2febc <gpio_pin_configure_dt.isra.0+0xa8>)
   2fe52:	481b      	ldr	r0, [pc, #108]	; (2fec0 <gpio_pin_configure_dt.isra.0+0xac>)
   2fe54:	f240 22c9 	movw	r2, #713	; 0x2c9
   2fe58:	f008 fe5b 	bl	38b12 <assert_print>
   2fe5c:	f240 21c9 	movw	r1, #713	; 0x2c9
   2fe60:	e7ef      	b.n	2fe42 <gpio_pin_configure_dt.isra.0+0x2e>
	__ASSERT((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) == 0
   2fe62:	f403 2240 	and.w	r2, r3, #786432	; 0xc0000
	__ASSERT((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH))
   2fe66:	f5b2 2f40 	cmp.w	r2, #786432	; 0xc0000
   2fe6a:	d108      	bne.n	2fe7e <gpio_pin_configure_dt.isra.0+0x6a>
   2fe6c:	4913      	ldr	r1, [pc, #76]	; (2febc <gpio_pin_configure_dt.isra.0+0xa8>)
   2fe6e:	4814      	ldr	r0, [pc, #80]	; (2fec0 <gpio_pin_configure_dt.isra.0+0xac>)
   2fe70:	f44f 7234 	mov.w	r2, #720	; 0x2d0
   2fe74:	f008 fe4d 	bl	38b12 <assert_print>
   2fe78:	f44f 7134 	mov.w	r1, #720	; 0x2d0
   2fe7c:	e7e1      	b.n	2fe42 <gpio_pin_configure_dt.isra.0+0x2e>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   2fe7e:	6824      	ldr	r4, [r4, #0]
   2fe80:	2501      	movs	r5, #1
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
   2fe82:	07da      	lsls	r2, r3, #31
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   2fe84:	fa05 f501 	lsl.w	r5, r5, r1
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
   2fe88:	bf48      	it	mi
   2fe8a:	f483 2340 	eormi.w	r3, r3, #786432	; 0xc0000
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   2fe8e:	4225      	tst	r5, r4
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
   2fe90:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   2fe94:	d108      	bne.n	2fea8 <gpio_pin_configure_dt.isra.0+0x94>
   2fe96:	4909      	ldr	r1, [pc, #36]	; (2febc <gpio_pin_configure_dt.isra.0+0xa8>)
   2fe98:	4809      	ldr	r0, [pc, #36]	; (2fec0 <gpio_pin_configure_dt.isra.0+0xac>)
   2fe9a:	f44f 7237 	mov.w	r2, #732	; 0x2dc
   2fe9e:	f008 fe38 	bl	38b12 <assert_print>
   2fea2:	f44f 7137 	mov.w	r1, #732	; 0x2dc
   2fea6:	e7cc      	b.n	2fe42 <gpio_pin_configure_dt.isra.0+0x2e>
		data->invert |= (gpio_port_pins_t)BIT(pin);
   2fea8:	6834      	ldr	r4, [r6, #0]
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   2feaa:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
   2feac:	bf4c      	ite	mi
   2feae:	432c      	orrmi	r4, r5
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   2feb0:	43ac      	bicpl	r4, r5
   2feb2:	6034      	str	r4, [r6, #0]
	return api->pin_configure(port, pin, flags);
   2feb4:	683b      	ldr	r3, [r7, #0]
}
   2feb6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return api->pin_configure(port, pin, flags);
   2feba:	4718      	bx	r3
   2febc:	0003d1a6 	.word	0x0003d1a6
   2fec0:	0003d1d7 	.word	0x0003d1d7

0002fec4 <fetch_status.isra.0>:
static int fetch_status(const struct device *dev)
   2fec4:	b530      	push	{r4, r5, lr}
   2fec6:	b089      	sub	sp, #36	; 0x24
	if (i2c_reg_read_byte_dt(&config->i2c, CCS811_REG_STATUS, &status) < 0) {
   2fec8:	f10d 0206 	add.w	r2, sp, #6
   2fecc:	2100      	movs	r1, #0
static int fetch_status(const struct device *dev)
   2fece:	4605      	mov	r5, r0
	if (i2c_reg_read_byte_dt(&config->i2c, CCS811_REG_STATUS, &status) < 0) {
   2fed0:	f00b f85d 	bl	3af8e <i2c_reg_read_byte_dt>
   2fed4:	2800      	cmp	r0, #0
   2fed6:	da11      	bge.n	2fefc <fetch_status.isra.0+0x38>
		LOG_ERR("Failed to read Status register");
   2fed8:	4814      	ldr	r0, [pc, #80]	; (2ff2c <fetch_status.isra.0+0x68>)
   2feda:	6803      	ldr	r3, [r0, #0]
   2fedc:	0759      	lsls	r1, r3, #29
   2fede:	d008      	beq.n	2fef2 <fetch_status.isra.0+0x2e>
   2fee0:	4b13      	ldr	r3, [pc, #76]	; (2ff30 <fetch_status.isra.0+0x6c>)
			LOG_ERR("Failed to read ERROR_ID register");
   2fee2:	9307      	str	r3, [sp, #28]
   2fee4:	aa06      	add	r2, sp, #24
   2fee6:	2302      	movs	r3, #2
   2fee8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   2feec:	9306      	str	r3, [sp, #24]
   2feee:	f00b f823 	bl	3af38 <z_log_msg_static_create.constprop.0>
		return -EIO;
   2fef2:	f06f 0404 	mvn.w	r4, #4
}
   2fef6:	4620      	mov	r0, r4
   2fef8:	b009      	add	sp, #36	; 0x24
   2fefa:	bd30      	pop	{r4, r5, pc}
	rv = status;
   2fefc:	f89d 4006 	ldrb.w	r4, [sp, #6]
	if (status & CCS811_STATUS_ERROR) {
   2ff00:	07e2      	lsls	r2, r4, #31
   2ff02:	d5f8      	bpl.n	2fef6 <fetch_status.isra.0+0x32>
		if (i2c_reg_read_byte_dt(&config->i2c, CCS811_REG_ERROR_ID, &error_id) < 0) {
   2ff04:	f10d 0207 	add.w	r2, sp, #7
   2ff08:	21e0      	movs	r1, #224	; 0xe0
   2ff0a:	4628      	mov	r0, r5
   2ff0c:	f00b f83f 	bl	3af8e <i2c_reg_read_byte_dt>
   2ff10:	2800      	cmp	r0, #0
   2ff12:	da05      	bge.n	2ff20 <fetch_status.isra.0+0x5c>
			LOG_ERR("Failed to read ERROR_ID register");
   2ff14:	4805      	ldr	r0, [pc, #20]	; (2ff2c <fetch_status.isra.0+0x68>)
   2ff16:	6803      	ldr	r3, [r0, #0]
   2ff18:	075b      	lsls	r3, r3, #29
   2ff1a:	d0ea      	beq.n	2fef2 <fetch_status.isra.0+0x2e>
   2ff1c:	4b05      	ldr	r3, [pc, #20]	; (2ff34 <fetch_status.isra.0+0x70>)
   2ff1e:	e7e0      	b.n	2fee2 <fetch_status.isra.0+0x1e>
		rv |= (error_id << 8);
   2ff20:	f89d 3007 	ldrb.w	r3, [sp, #7]
   2ff24:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
   2ff28:	e7e5      	b.n	2fef6 <fetch_status.isra.0+0x32>
   2ff2a:	bf00      	nop
   2ff2c:	20000a60 	.word	0x20000a60
   2ff30:	0003efe4 	.word	0x0003efe4
   2ff34:	0003f003 	.word	0x0003f003

0002ff38 <ccs811_init>:
}

#endif /* CONFIG_CCS811_TRIGGER */

static int ccs811_init(const struct device *dev)
{
   2ff38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2ff3c:	b089      	sub	sp, #36	; 0x24
	struct ccs811_data *drv_data = dev->data;
	const struct ccs811_config *config = dev->config;
   2ff3e:	6844      	ldr	r4, [r0, #4]
	struct ccs811_data *drv_data = dev->data;
   2ff40:	f8d0 8010 	ldr.w	r8, [r0, #16]
{
   2ff44:	af00      	add	r7, sp, #0
   2ff46:	4606      	mov	r6, r0
	int status;
	uint16_t fw_ver;
	uint8_t cmd;
	uint8_t hw_id;

	if (!device_is_ready(config->i2c.bus)) {
   2ff48:	6820      	ldr	r0, [r4, #0]
   2ff4a:	f00b fe27 	bl	3bb9c <z_device_is_ready>
   2ff4e:	b9a0      	cbnz	r0, 2ff7a <ccs811_init+0x42>
		LOG_ERR("I2C bus device not ready");
   2ff50:	489d      	ldr	r0, [pc, #628]	; (301c8 <ccs811_init+0x290>)
   2ff52:	6803      	ldr	r3, [r0, #0]
   2ff54:	075c      	lsls	r4, r3, #29
   2ff56:	d009      	beq.n	2ff6c <ccs811_init+0x34>
   2ff58:	4b9c      	ldr	r3, [pc, #624]	; (301cc <ccs811_init+0x294>)
   2ff5a:	61fb      	str	r3, [r7, #28]
   2ff5c:	2302      	movs	r3, #2
   2ff5e:	61bb      	str	r3, [r7, #24]
   2ff60:	f107 0218 	add.w	r2, r7, #24
   2ff64:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   2ff68:	f00a ffe6 	bl	3af38 <z_log_msg_static_create.constprop.0>
		return -ENODEV;
   2ff6c:	f06f 0412 	mvn.w	r4, #18
#endif

out:
	set_wake(dev, false);
	return ret;
}
   2ff70:	4620      	mov	r0, r4
   2ff72:	3724      	adds	r7, #36	; 0x24
   2ff74:	46bd      	mov	sp, r7
   2ff76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (config->wake_gpio.port) {
   2ff7a:	69a0      	ldr	r0, [r4, #24]
   2ff7c:	b1a8      	cbz	r0, 2ffaa <ccs811_init+0x72>
   2ff7e:	f00b fe0d 	bl	3bb9c <z_device_is_ready>
		if (!device_is_ready(config->wake_gpio.port)) {
   2ff82:	b928      	cbnz	r0, 2ff90 <ccs811_init+0x58>
			LOG_ERR("GPIO device not ready");
   2ff84:	4890      	ldr	r0, [pc, #576]	; (301c8 <ccs811_init+0x290>)
   2ff86:	6803      	ldr	r3, [r0, #0]
   2ff88:	0759      	lsls	r1, r3, #29
   2ff8a:	d0ef      	beq.n	2ff6c <ccs811_init+0x34>
   2ff8c:	4b90      	ldr	r3, [pc, #576]	; (301d0 <ccs811_init+0x298>)
   2ff8e:	e7e4      	b.n	2ff5a <ccs811_init+0x22>
		gpio_pin_configure_dt(&config->wake_gpio, GPIO_OUTPUT_INACTIVE);
   2ff90:	f44f 11b0 	mov.w	r1, #1441792	; 0x160000
   2ff94:	f104 0018 	add.w	r0, r4, #24
   2ff98:	f7ff ff3c 	bl	2fe14 <gpio_pin_configure_dt.isra.0>
		set_wake(dev, true);
   2ff9c:	6870      	ldr	r0, [r6, #4]
   2ff9e:	2101      	movs	r1, #1
   2ffa0:	f00b f81d 	bl	3afde <set_wake.isra.0>
		k_msleep(1);
   2ffa4:	2001      	movs	r0, #1
   2ffa6:	f00a ffe2 	bl	3af6e <k_msleep.isra.0>
	if (config->reset_gpio.port) {
   2ffaa:	6920      	ldr	r0, [r4, #16]
   2ffac:	b160      	cbz	r0, 2ffc8 <ccs811_init+0x90>
   2ffae:	f00b fdf5 	bl	3bb9c <z_device_is_ready>
		if (!device_is_ready(config->reset_gpio.port)) {
   2ffb2:	2800      	cmp	r0, #0
   2ffb4:	d0e6      	beq.n	2ff84 <ccs811_init+0x4c>
		gpio_pin_configure_dt(&config->reset_gpio, GPIO_OUTPUT_ACTIVE);
   2ffb6:	f104 0010 	add.w	r0, r4, #16
   2ffba:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
   2ffbe:	f7ff ff29 	bl	2fe14 <gpio_pin_configure_dt.isra.0>
		k_msleep(1);
   2ffc2:	2001      	movs	r0, #1
   2ffc4:	f00a ffd3 	bl	3af6e <k_msleep.isra.0>
	if (config->irq_gpio.port) {
   2ffc8:	68a0      	ldr	r0, [r4, #8]
   2ffca:	b118      	cbz	r0, 2ffd4 <ccs811_init+0x9c>
   2ffcc:	f00b fde6 	bl	3bb9c <z_device_is_ready>
		if (!device_is_ready(config->irq_gpio.port)) {
   2ffd0:	2800      	cmp	r0, #0
   2ffd2:	d0d7      	beq.n	2ff84 <ccs811_init+0x4c>
	k_msleep(20);            /* t_START assuming recent power-on */
   2ffd4:	2014      	movs	r0, #20
   2ffd6:	f00a ffca 	bl	3af6e <k_msleep.isra.0>
	if (config->reset_gpio.port) {
   2ffda:	6923      	ldr	r3, [r4, #16]
   2ffdc:	b363      	cbz	r3, 30038 <ccs811_init+0x100>
		gpio_pin_set_dt(&config->reset_gpio, 1);
   2ffde:	f104 0510 	add.w	r5, r4, #16
   2ffe2:	2101      	movs	r1, #1
   2ffe4:	4628      	mov	r0, r5
   2ffe6:	f7ff feeb 	bl	2fdc0 <gpio_pin_set_dt.isra.0>
	z_impl_k_busy_wait(usec_to_wait);
   2ffea:	200f      	movs	r0, #15
   2ffec:	f00b fef8 	bl	3bde0 <z_impl_k_busy_wait>
		gpio_pin_set_dt(&config->reset_gpio, 0);
   2fff0:	2100      	movs	r1, #0
   2fff2:	4628      	mov	r0, r5
   2fff4:	f7ff fee4 	bl	2fdc0 <gpio_pin_set_dt.isra.0>
	k_msleep(2);             /* t_START after reset */
   2fff8:	2002      	movs	r0, #2
   2fffa:	f00a ffb8 	bl	3af6e <k_msleep.isra.0>
	const struct ccs811_config *config = dev->config;
   2fffe:	6875      	ldr	r5, [r6, #4]
	status = fetch_status(dev);
   30000:	4628      	mov	r0, r5
   30002:	f7ff ff5f 	bl	2fec4 <fetch_status.isra.0>
	if (status < 0) {
   30006:	2800      	cmp	r0, #0
   30008:	db2c      	blt.n	30064 <ccs811_init+0x12c>
	if (!(status & CCS811_STATUS_APP_VALID)) {
   3000a:	06c3      	lsls	r3, r0, #27
   3000c:	d42d      	bmi.n	3006a <ccs811_init+0x132>
		LOG_ERR("No Application firmware loaded");
   3000e:	486e      	ldr	r0, [pc, #440]	; (301c8 <ccs811_init+0x290>)
   30010:	6803      	ldr	r3, [r0, #0]
   30012:	075c      	lsls	r4, r3, #29
   30014:	d009      	beq.n	3002a <ccs811_init+0xf2>
   30016:	4b6f      	ldr	r3, [pc, #444]	; (301d4 <ccs811_init+0x29c>)
   30018:	61fb      	str	r3, [r7, #28]
   3001a:	2302      	movs	r3, #2
   3001c:	61bb      	str	r3, [r7, #24]
   3001e:	f107 0218 	add.w	r2, r7, #24
   30022:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   30026:	f00a ff87 	bl	3af38 <z_log_msg_static_create.constprop.0>
		return -EINVAL;
   3002a:	f06f 0415 	mvn.w	r4, #21
	set_wake(dev, false);
   3002e:	6870      	ldr	r0, [r6, #4]
   30030:	2100      	movs	r1, #0
   30032:	f00a ffd4 	bl	3afde <set_wake.isra.0>
	return ret;
   30036:	e79b      	b.n	2ff70 <ccs811_init+0x38>
	return i2c_write(spec->bus, buf, num_bytes, spec->addr);
   30038:	88a3      	ldrh	r3, [r4, #4]
   3003a:	4967      	ldr	r1, [pc, #412]	; (301d8 <ccs811_init+0x2a0>)
   3003c:	6820      	ldr	r0, [r4, #0]
   3003e:	2205      	movs	r2, #5
   30040:	f00a ffc0 	bl	3afc4 <i2c_write>
		if (i2c_write_dt(&config->i2c, reset_seq, sizeof(reset_seq)) < 0) {
   30044:	2800      	cmp	r0, #0
   30046:	dad7      	bge.n	2fff8 <ccs811_init+0xc0>
			LOG_ERR("Failed to issue SW reset");
   30048:	485f      	ldr	r0, [pc, #380]	; (301c8 <ccs811_init+0x290>)
   3004a:	6803      	ldr	r3, [r0, #0]
   3004c:	075a      	lsls	r2, r3, #29
   3004e:	d009      	beq.n	30064 <ccs811_init+0x12c>
   30050:	4b62      	ldr	r3, [pc, #392]	; (301dc <ccs811_init+0x2a4>)
		LOG_ERR("Failed to set Application mode");
   30052:	61fb      	str	r3, [r7, #28]
   30054:	2302      	movs	r3, #2
   30056:	61bb      	str	r3, [r7, #24]
   30058:	f107 0218 	add.w	r2, r7, #24
   3005c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   30060:	f00a ff6a 	bl	3af38 <z_log_msg_static_create.constprop.0>
		return -EIO;
   30064:	f06f 0404 	mvn.w	r4, #4
   30068:	e7e1      	b.n	3002e <ccs811_init+0xf6>
	if (status & CCS811_STATUS_FW_MODE) {
   3006a:	0601      	lsls	r1, r0, #24
   3006c:	d514      	bpl.n	30098 <ccs811_init+0x160>
	if (i2c_reg_read_byte_dt(&config->i2c, CCS811_REG_HW_ID, &hw_id) < 0) {
   3006e:	1d7a      	adds	r2, r7, #5
   30070:	2120      	movs	r1, #32
   30072:	4620      	mov	r0, r4
   30074:	f00a ff8b 	bl	3af8e <i2c_reg_read_byte_dt>
   30078:	2800      	cmp	r0, #0
   3007a:	4d53      	ldr	r5, [pc, #332]	; (301c8 <ccs811_init+0x290>)
   3007c:	da2c      	bge.n	300d8 <ccs811_init+0x1a0>
		LOG_ERR("Failed to read Hardware ID register");
   3007e:	682b      	ldr	r3, [r5, #0]
   30080:	075c      	lsls	r4, r3, #29
   30082:	d0ef      	beq.n	30064 <ccs811_init+0x12c>
   30084:	4b56      	ldr	r3, [pc, #344]	; (301e0 <ccs811_init+0x2a8>)
		LOG_ERR("Failed to read App Firmware Version register");
   30086:	61fb      	str	r3, [r7, #28]
   30088:	2302      	movs	r3, #2
   3008a:	61bb      	str	r3, [r7, #24]
   3008c:	f107 0218 	add.w	r2, r7, #24
   30090:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   30094:	4628      	mov	r0, r5
   30096:	e7e3      	b.n	30060 <ccs811_init+0x128>
	buf = CCS811_REG_APP_START;
   30098:	23f4      	movs	r3, #244	; 0xf4
   3009a:	71bb      	strb	r3, [r7, #6]
   3009c:	88ab      	ldrh	r3, [r5, #4]
   3009e:	6828      	ldr	r0, [r5, #0]
   300a0:	2201      	movs	r2, #1
   300a2:	1db9      	adds	r1, r7, #6
   300a4:	f00a ff8e 	bl	3afc4 <i2c_write>
	if (i2c_write_dt(&config->i2c, &buf, 1) < 0) {
   300a8:	2800      	cmp	r0, #0
   300aa:	da05      	bge.n	300b8 <ccs811_init+0x180>
		LOG_ERR("Failed to set Application mode");
   300ac:	4846      	ldr	r0, [pc, #280]	; (301c8 <ccs811_init+0x290>)
   300ae:	6803      	ldr	r3, [r0, #0]
   300b0:	075a      	lsls	r2, r3, #29
   300b2:	d0d7      	beq.n	30064 <ccs811_init+0x12c>
   300b4:	4b4b      	ldr	r3, [pc, #300]	; (301e4 <ccs811_init+0x2ac>)
   300b6:	e7cc      	b.n	30052 <ccs811_init+0x11a>
	k_msleep(1);             /* t_APP_START */
   300b8:	2001      	movs	r0, #1
   300ba:	f00a ff58 	bl	3af6e <k_msleep.isra.0>
	status = fetch_status(dev);
   300be:	6870      	ldr	r0, [r6, #4]
   300c0:	f7ff ff00 	bl	2fec4 <fetch_status.isra.0>
	if (status < 0) {
   300c4:	2800      	cmp	r0, #0
   300c6:	dbcd      	blt.n	30064 <ccs811_init+0x12c>
	if (!(status & CCS811_STATUS_FW_MODE)) {
   300c8:	0603      	lsls	r3, r0, #24
   300ca:	d4d0      	bmi.n	3006e <ccs811_init+0x136>
		LOG_ERR("Failed to start Application firmware");
   300cc:	483e      	ldr	r0, [pc, #248]	; (301c8 <ccs811_init+0x290>)
   300ce:	6803      	ldr	r3, [r0, #0]
   300d0:	075d      	lsls	r5, r3, #29
   300d2:	d0aa      	beq.n	3002a <ccs811_init+0xf2>
   300d4:	4b44      	ldr	r3, [pc, #272]	; (301e8 <ccs811_init+0x2b0>)
   300d6:	e79f      	b.n	30018 <ccs811_init+0xe0>
	if (hw_id != CCS881_HW_ID) {
   300d8:	797b      	ldrb	r3, [r7, #5]
   300da:	2b81      	cmp	r3, #129	; 0x81
   300dc:	d00c      	beq.n	300f8 <ccs811_init+0x1c0>
		LOG_ERR("Hardware ID mismatch!");
   300de:	682b      	ldr	r3, [r5, #0]
   300e0:	0758      	lsls	r0, r3, #29
   300e2:	d0a2      	beq.n	3002a <ccs811_init+0xf2>
   300e4:	4b41      	ldr	r3, [pc, #260]	; (301ec <ccs811_init+0x2b4>)
   300e6:	61fb      	str	r3, [r7, #28]
   300e8:	2302      	movs	r3, #2
   300ea:	61bb      	str	r3, [r7, #24]
   300ec:	f107 0218 	add.w	r2, r7, #24
   300f0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   300f4:	4628      	mov	r0, r5
   300f6:	e796      	b.n	30026 <ccs811_init+0xee>
	cmd = CCS811_REG_FW_APP_VERSION;
   300f8:	2324      	movs	r3, #36	; 0x24
   300fa:	713b      	strb	r3, [r7, #4]
	if (i2c_write_read_dt(&config->i2c, &cmd, sizeof(cmd), &fw_ver, sizeof(fw_ver)) < 0) {
   300fc:	1dba      	adds	r2, r7, #6
   300fe:	2302      	movs	r3, #2
   30100:	1d39      	adds	r1, r7, #4
   30102:	4620      	mov	r0, r4
   30104:	f00a ff1b 	bl	3af3e <i2c_write_read_dt.constprop.0>
   30108:	2800      	cmp	r0, #0
   3010a:	da04      	bge.n	30116 <ccs811_init+0x1de>
		LOG_ERR("Failed to read App Firmware Version register");
   3010c:	682b      	ldr	r3, [r5, #0]
   3010e:	0759      	lsls	r1, r3, #29
   30110:	d0a8      	beq.n	30064 <ccs811_init+0x12c>
   30112:	4b37      	ldr	r3, [pc, #220]	; (301f0 <ccs811_init+0x2b8>)
   30114:	e7b7      	b.n	30086 <ccs811_init+0x14e>
	fw_ver = sys_be16_to_cpu(fw_ver);
   30116:	88fb      	ldrh	r3, [r7, #6]
   30118:	ba5b      	rev16	r3, r3
   3011a:	b299      	uxth	r1, r3
   3011c:	80fb      	strh	r3, [r7, #6]
	LOG_INF("App FW %04x", fw_ver);
   3011e:	682b      	ldr	r3, [r5, #0]
   30120:	f003 0307 	and.w	r3, r3, #7
   30124:	2b02      	cmp	r3, #2
   30126:	d90e      	bls.n	30146 <ccs811_init+0x20e>
   30128:	46e9      	mov	r9, sp
   3012a:	b088      	sub	sp, #32
   3012c:	466a      	mov	r2, sp
   3012e:	4b31      	ldr	r3, [pc, #196]	; (301f4 <ccs811_init+0x2bc>)
   30130:	e9c2 3105 	strd	r3, r1, [r2, #20]
   30134:	2303      	movs	r3, #3
   30136:	f842 3f10 	str.w	r3, [r2, #16]!
   3013a:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
   3013e:	4628      	mov	r0, r5
   30140:	f00a fefa 	bl	3af38 <z_log_msg_static_create.constprop.0>
   30144:	46cd      	mov	sp, r9
	drv_data->app_fw_ver = fw_ver >> 8U;
   30146:	88fb      	ldrh	r3, [r7, #6]
   30148:	0a1b      	lsrs	r3, r3, #8
   3014a:	f888 3009 	strb.w	r3, [r8, #9]
	uint8_t tx_buf[2] = {reg_addr, value};
   3014e:	f241 0201 	movw	r2, #4097	; 0x1001
	return i2c_reg_write_byte(spec->bus, spec->addr, reg_addr, value);
   30152:	6820      	ldr	r0, [r4, #0]
   30154:	88a3      	ldrh	r3, [r4, #4]
	uint8_t tx_buf[2] = {reg_addr, value};
   30156:	813a      	strh	r2, [r7, #8]
	return i2c_write(dev, tx_buf, 2, dev_addr);
   30158:	f107 0108 	add.w	r1, r7, #8
   3015c:	2202      	movs	r2, #2
   3015e:	f00a ff31 	bl	3afc4 <i2c_write>
	if (i2c_reg_write_byte_dt(&config->i2c, CCS811_REG_MEAS_MODE, meas_mode) < 0) {
   30162:	2800      	cmp	r0, #0
   30164:	da0d      	bge.n	30182 <ccs811_init+0x24a>
		LOG_ERR("Failed to set Measurement mode");
   30166:	682b      	ldr	r3, [r5, #0]
   30168:	075a      	lsls	r2, r3, #29
   3016a:	f43f af7b 	beq.w	30064 <ccs811_init+0x12c>
   3016e:	4b22      	ldr	r3, [pc, #136]	; (301f8 <ccs811_init+0x2c0>)
   30170:	61fb      	str	r3, [r7, #28]
   30172:	2302      	movs	r3, #2
   30174:	4814      	ldr	r0, [pc, #80]	; (301c8 <ccs811_init+0x290>)
   30176:	61bb      	str	r3, [r7, #24]
   30178:	f107 0218 	add.w	r2, r7, #24
   3017c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   30180:	e76e      	b.n	30060 <ccs811_init+0x128>
	drv_data->mode = meas_mode;
   30182:	2310      	movs	r3, #16
   30184:	f888 3008 	strb.w	r3, [r8, #8]
	status = fetch_status(dev);
   30188:	6870      	ldr	r0, [r6, #4]
   3018a:	f7ff fe9b 	bl	2fec4 <fetch_status.isra.0>
	if (status < 0) {
   3018e:	2800      	cmp	r0, #0
   30190:	f6ff af68 	blt.w	30064 <ccs811_init+0x12c>
	if (status & CCS811_STATUS_ERROR) {
   30194:	f010 0401 	ands.w	r4, r0, #1
   30198:	f43f af49 	beq.w	3002e <ccs811_init+0xf6>
		LOG_ERR("CCS811 Error %02x during sensor configuration",
   3019c:	682b      	ldr	r3, [r5, #0]
   3019e:	075b      	lsls	r3, r3, #29
   301a0:	f43f af43 	beq.w	3002a <ccs811_init+0xf2>
   301a4:	466c      	mov	r4, sp
   301a6:	b088      	sub	sp, #32
   301a8:	466a      	mov	r2, sp
   301aa:	4b14      	ldr	r3, [pc, #80]	; (301fc <ccs811_init+0x2c4>)
   301ac:	6153      	str	r3, [r2, #20]
   301ae:	f3c0 2007 	ubfx	r0, r0, #8, #8
   301b2:	2303      	movs	r3, #3
   301b4:	6190      	str	r0, [r2, #24]
   301b6:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   301ba:	f842 3f10 	str.w	r3, [r2, #16]!
   301be:	4802      	ldr	r0, [pc, #8]	; (301c8 <ccs811_init+0x290>)
   301c0:	f00a feba 	bl	3af38 <z_log_msg_static_create.constprop.0>
   301c4:	46a5      	mov	sp, r4
   301c6:	e730      	b.n	3002a <ccs811_init+0xf2>
   301c8:	20000a60 	.word	0x20000a60
   301cc:	0003f024 	.word	0x0003f024
   301d0:	0003f03d 	.word	0x0003f03d
   301d4:	0003f06c 	.word	0x0003f06c
   301d8:	0003f18f 	.word	0x0003f18f
   301dc:	0003f053 	.word	0x0003f053
   301e0:	0003f0cf 	.word	0x0003f0cf
   301e4:	0003f08b 	.word	0x0003f08b
   301e8:	0003f0aa 	.word	0x0003f0aa
   301ec:	0003f0f3 	.word	0x0003f0f3
   301f0:	0003f109 	.word	0x0003f109
   301f4:	0003f136 	.word	0x0003f136
   301f8:	0003f142 	.word	0x0003f142
   301fc:	0003f161 	.word	0x0003f161

00030200 <hts221_channel_get>:
};

static int hts221_channel_get(const struct device *dev,
			      enum sensor_channel chan,
			      struct sensor_value *val)
{
   30200:	b530      	push	{r4, r5, lr}

	/*
	 * see "Interpreting humidity and temperature readings" document
	 * for more details
	 */
	if (chan == SENSOR_CHAN_AMBIENT_TEMP) {
   30202:	290d      	cmp	r1, #13
	struct hts221_data *data = dev->data;
   30204:	6900      	ldr	r0, [r0, #16]
	if (chan == SENSOR_CHAN_AMBIENT_TEMP) {
   30206:	d120      	bne.n	3024a <hts221_channel_get+0x4a>
		conv_val = (int32_t)(data->t1_degc_x8 - data->t0_degc_x8) *
   30208:	88c4      	ldrh	r4, [r0, #6]
			   (data->t_sample - data->t0_out) /
   3020a:	f9b0 500e 	ldrsh.w	r5, [r0, #14]
		conv_val = (int32_t)(data->t1_degc_x8 - data->t0_degc_x8) *
   3020e:	8903      	ldrh	r3, [r0, #8]
			   (data->t_sample - data->t0_out) /
   30210:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
		conv_val = (int32_t)(data->t1_degc_x8 - data->t0_degc_x8) *
   30214:	1b1b      	subs	r3, r3, r4
			   (data->t_sample - data->t0_out) /
   30216:	1b49      	subs	r1, r1, r5
		conv_val = (int32_t)(data->t1_degc_x8 - data->t0_degc_x8) *
   30218:	434b      	muls	r3, r1
			   (data->t1_out - data->t0_out) +
   3021a:	f9b0 1010 	ldrsh.w	r1, [r0, #16]
   3021e:	1b49      	subs	r1, r1, r5
			   (data->t_sample - data->t0_out) /
   30220:	fb93 f3f1 	sdiv	r3, r3, r1
		conv_val = (int32_t)(data->t1_degc_x8 - data->t0_degc_x8) *
   30224:	4423      	add	r3, r4
			   data->t0_degc_x8;

		/* convert temperature x8 to degrees Celsius */
		val->val1 = conv_val / 8;
   30226:	2b00      	cmp	r3, #0
   30228:	4619      	mov	r1, r3
   3022a:	bfb8      	it	lt
   3022c:	1dd9      	addlt	r1, r3, #7
		val->val2 = (conv_val % 8) * (1000000 / 8);
   3022e:	4258      	negs	r0, r3
   30230:	f000 0007 	and.w	r0, r0, #7
   30234:	f003 0307 	and.w	r3, r3, #7
   30238:	bf58      	it	pl
   3023a:	4243      	negpl	r3, r0
   3023c:	4812      	ldr	r0, [pc, #72]	; (30288 <hts221_channel_get+0x88>)
		val->val1 = conv_val / 8;
   3023e:	10c9      	asrs	r1, r1, #3
		val->val2 = (conv_val % 8) * (1000000 / 8);
   30240:	4343      	muls	r3, r0
   30242:	e9c2 1300 	strd	r1, r3, [r2]
		val->val2 = (conv_val % 2) * 500000;
	} else {
		return -ENOTSUP;
	}

	return 0;
   30246:	2000      	movs	r0, #0
}
   30248:	bd30      	pop	{r4, r5, pc}
	} else if (chan == SENSOR_CHAN_HUMIDITY) {
   3024a:	2910      	cmp	r1, #16
   3024c:	d119      	bne.n	30282 <hts221_channel_get+0x82>
		conv_val = (int32_t)(data->h1_rh_x2 - data->h0_rh_x2) *
   3024e:	7904      	ldrb	r4, [r0, #4]
			   (data->rh_sample - data->h0_t0_out) /
   30250:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
		conv_val = (int32_t)(data->h1_rh_x2 - data->h0_rh_x2) *
   30254:	7943      	ldrb	r3, [r0, #5]
			   (data->rh_sample - data->h0_t0_out) /
   30256:	f9b0 1000 	ldrsh.w	r1, [r0]
		conv_val = (int32_t)(data->h1_rh_x2 - data->h0_rh_x2) *
   3025a:	1b1b      	subs	r3, r3, r4
			   (data->rh_sample - data->h0_t0_out) /
   3025c:	1b49      	subs	r1, r1, r5
		conv_val = (int32_t)(data->h1_rh_x2 - data->h0_rh_x2) *
   3025e:	434b      	muls	r3, r1
			   (data->h1_t0_out - data->h0_t0_out) +
   30260:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
		val->val2 = (conv_val % 2) * 500000;
   30264:	4809      	ldr	r0, [pc, #36]	; (3028c <hts221_channel_get+0x8c>)
			   (data->h1_t0_out - data->h0_t0_out) +
   30266:	1b49      	subs	r1, r1, r5
			   (data->rh_sample - data->h0_t0_out) /
   30268:	fb93 f3f1 	sdiv	r3, r3, r1
		conv_val = (int32_t)(data->h1_rh_x2 - data->h0_rh_x2) *
   3026c:	4423      	add	r3, r4
		val->val1 = conv_val / 2;
   3026e:	eb03 71d3 	add.w	r1, r3, r3, lsr #31
		val->val2 = (conv_val % 2) * 500000;
   30272:	2b00      	cmp	r3, #0
   30274:	f003 0301 	and.w	r3, r3, #1
		val->val1 = conv_val / 2;
   30278:	ea4f 0161 	mov.w	r1, r1, asr #1
		val->val2 = (conv_val % 2) * 500000;
   3027c:	bfb8      	it	lt
   3027e:	425b      	neglt	r3, r3
   30280:	e7de      	b.n	30240 <hts221_channel_get+0x40>
		return -ENOTSUP;
   30282:	f06f 0085 	mvn.w	r0, #133	; 0x85
   30286:	e7df      	b.n	30248 <hts221_channel_get+0x48>
   30288:	0001e848 	.word	0x0001e848
   3028c:	0007a120 	.word	0x0007a120

00030290 <hts221_sample_fetch>:

static int hts221_sample_fetch(const struct device *dev,
			       enum sensor_channel chan)
{
   30290:	b530      	push	{r4, r5, lr}
	const struct hts221_config *cfg = dev->config;
	stmdev_ctx_t *ctx = (stmdev_ctx_t *)&cfg->ctx;
	uint8_t buf[4];
	int status;

	__ASSERT_NO_MSG(chan == SENSOR_CHAN_ALL);
   30292:	2939      	cmp	r1, #57	; 0x39
	struct hts221_data *data = dev->data;
   30294:	6905      	ldr	r5, [r0, #16]
	stmdev_ctx_t *ctx = (stmdev_ctx_t *)&cfg->ctx;
   30296:	6840      	ldr	r0, [r0, #4]
{
   30298:	b089      	sub	sp, #36	; 0x24
	__ASSERT_NO_MSG(chan == SENSOR_CHAN_ALL);
   3029a:	d008      	beq.n	302ae <hts221_sample_fetch+0x1e>
   3029c:	4914      	ldr	r1, [pc, #80]	; (302f0 <hts221_sample_fetch+0x60>)
   3029e:	4815      	ldr	r0, [pc, #84]	; (302f4 <hts221_sample_fetch+0x64>)
   302a0:	224c      	movs	r2, #76	; 0x4c
   302a2:	f008 fc36 	bl	38b12 <assert_print>
   302a6:	4812      	ldr	r0, [pc, #72]	; (302f0 <hts221_sample_fetch+0x60>)
   302a8:	214c      	movs	r1, #76	; 0x4c
   302aa:	f008 fc2b 	bl	38b04 <assert_post_action>

	status = hts221_read_reg(ctx, HTS221_HUMIDITY_OUT_L |
   302ae:	2304      	movs	r3, #4
   302b0:	eb0d 0203 	add.w	r2, sp, r3
   302b4:	21a8      	movs	r1, #168	; 0xa8
   302b6:	f008 fd85 	bl	38dc4 <hts221_read_reg>
				 HTS221_AUTOINCREMENT_ADDR, buf, 4);
	if (status < 0) {
   302ba:	1e04      	subs	r4, r0, #0
   302bc:	da0f      	bge.n	302de <hts221_sample_fetch+0x4e>
		LOG_ERR("Failed to fetch data sample.");
   302be:	480e      	ldr	r0, [pc, #56]	; (302f8 <hts221_sample_fetch+0x68>)
   302c0:	6803      	ldr	r3, [r0, #0]
   302c2:	075b      	lsls	r3, r3, #29
   302c4:	d008      	beq.n	302d8 <hts221_sample_fetch+0x48>
   302c6:	4b0d      	ldr	r3, [pc, #52]	; (302fc <hts221_sample_fetch+0x6c>)
   302c8:	9307      	str	r3, [sp, #28]
   302ca:	aa06      	add	r2, sp, #24
   302cc:	2302      	movs	r3, #2
   302ce:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   302d2:	9306      	str	r3, [sp, #24]
   302d4:	f00a fece 	bl	3b074 <z_log_msg_static_create.constprop.0>

	data->rh_sample = sys_le16_to_cpu(buf[0] | (buf[1] << 8));
	data->t_sample = sys_le16_to_cpu(buf[2] | (buf[3] << 8));

	return 0;
}
   302d8:	4620      	mov	r0, r4
   302da:	b009      	add	sp, #36	; 0x24
   302dc:	bd30      	pop	{r4, r5, pc}
	data->rh_sample = sys_le16_to_cpu(buf[0] | (buf[1] << 8));
   302de:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   302e2:	802b      	strh	r3, [r5, #0]
	data->t_sample = sys_le16_to_cpu(buf[2] | (buf[3] << 8));
   302e4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   302e8:	806b      	strh	r3, [r5, #2]
	return 0;
   302ea:	2400      	movs	r4, #0
   302ec:	e7f4      	b.n	302d8 <hts221_sample_fetch+0x48>
   302ee:	bf00      	nop
   302f0:	0003f1a5 	.word	0x0003f1a5
   302f4:	0003d1d7 	.word	0x0003d1d7
   302f8:	20000a64 	.word	0x20000a64
   302fc:	0003f1d7 	.word	0x0003f1d7

00030300 <hts221_init>:
	.sample_fetch = hts221_sample_fetch,
	.channel_get = hts221_channel_get,
};

int hts221_init(const struct device *dev)
{
   30300:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   30304:	b08c      	sub	sp, #48	; 0x30
	const struct hts221_config *cfg = dev->config;
	stmdev_ctx_t *ctx = (stmdev_ctx_t *)&cfg->ctx;
   30306:	6845      	ldr	r5, [r0, #4]
{
   30308:	af00      	add	r7, sp, #0
   3030a:	4606      	mov	r6, r0
	uint8_t id, idx;
	int status;

	/* check chip ID */

	status = hts221_device_id_get(ctx, &id);
   3030c:	1df9      	adds	r1, r7, #7
   3030e:	4628      	mov	r0, r5
   30310:	f008 fd92 	bl	38e38 <hts221_device_id_get>
	if (status < 0) {
   30314:	1e04      	subs	r4, r0, #0
   30316:	da0c      	bge.n	30332 <hts221_init+0x32>
		LOG_ERR("Failed to read chip ID.");
   30318:	4864      	ldr	r0, [pc, #400]	; (304ac <hts221_init+0x1ac>)
   3031a:	6803      	ldr	r3, [r0, #0]
   3031c:	075d      	lsls	r5, r3, #29
   3031e:	d011      	beq.n	30344 <hts221_init+0x44>
   30320:	4b63      	ldr	r3, [pc, #396]	; (304b0 <hts221_init+0x1b0>)
	}

#ifdef CONFIG_HTS221_TRIGGER
	status = hts221_init_interrupt(dev);
	if (status < 0) {
		LOG_ERR("Failed to initialize interrupt.");
   30322:	62fb      	str	r3, [r7, #44]	; 0x2c
   30324:	2302      	movs	r3, #2
   30326:	62bb      	str	r3, [r7, #40]	; 0x28
   30328:	f107 0228 	add.w	r2, r7, #40	; 0x28
   3032c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   30330:	e093      	b.n	3045a <hts221_init+0x15a>
	if (id != HTS221_ID) {
   30332:	79fb      	ldrb	r3, [r7, #7]
   30334:	2bbc      	cmp	r3, #188	; 0xbc
   30336:	d015      	beq.n	30364 <hts221_init+0x64>
		LOG_ERR("Invalid chip ID.");
   30338:	485c      	ldr	r0, [pc, #368]	; (304ac <hts221_init+0x1ac>)
   3033a:	6803      	ldr	r3, [r0, #0]
   3033c:	0759      	lsls	r1, r3, #29
   3033e:	d106      	bne.n	3034e <hts221_init+0x4e>
		return -EINVAL;
   30340:	f06f 0415 	mvn.w	r4, #21
#else
	LOG_INF("Cannot enable trigger without drdy-gpios");
#endif

	return 0;
}
   30344:	4620      	mov	r0, r4
   30346:	3730      	adds	r7, #48	; 0x30
   30348:	46bd      	mov	sp, r7
   3034a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LOG_ERR("Invalid chip ID.");
   3034e:	4b59      	ldr	r3, [pc, #356]	; (304b4 <hts221_init+0x1b4>)
   30350:	62fb      	str	r3, [r7, #44]	; 0x2c
   30352:	2302      	movs	r3, #2
   30354:	62bb      	str	r3, [r7, #40]	; 0x28
   30356:	f107 0228 	add.w	r2, r7, #40	; 0x28
   3035a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   3035e:	f00a fe89 	bl	3b074 <z_log_msg_static_create.constprop.0>
   30362:	e7ed      	b.n	30340 <hts221_init+0x40>
		if (!strcmp(hts221_odrs[idx].str, CONFIG_HTS221_ODR)) {
   30364:	4c54      	ldr	r4, [pc, #336]	; (304b8 <hts221_init+0x1b8>)
   30366:	4621      	mov	r1, r4
   30368:	4620      	mov	r0, r4
   3036a:	f008 ffee 	bl	3934a <strcmp>
   3036e:	4603      	mov	r3, r0
   30370:	b150      	cbz	r0, 30388 <hts221_init+0x88>
   30372:	4852      	ldr	r0, [pc, #328]	; (304bc <hts221_init+0x1bc>)
   30374:	4621      	mov	r1, r4
   30376:	f008 ffe8 	bl	3934a <strcmp>
   3037a:	b1a0      	cbz	r0, 303a6 <hts221_init+0xa6>
   3037c:	4850      	ldr	r0, [pc, #320]	; (304c0 <hts221_init+0x1c0>)
   3037e:	4621      	mov	r1, r4
   30380:	f008 ffe3 	bl	3934a <strcmp>
   30384:	b988      	cbnz	r0, 303aa <hts221_init+0xaa>
	for (idx = 0U; idx < ARRAY_SIZE(hts221_odrs); idx++) {
   30386:	2302      	movs	r3, #2
	status = hts221_data_rate_set(ctx, hts221_odrs[idx].odr);
   30388:	4a4e      	ldr	r2, [pc, #312]	; (304c4 <hts221_init+0x1c4>)
   3038a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   3038e:	4628      	mov	r0, r5
   30390:	7919      	ldrb	r1, [r3, #4]
   30392:	f008 fd23 	bl	38ddc <hts221_data_rate_set>
	if (status < 0) {
   30396:	1e04      	subs	r4, r0, #0
   30398:	da1d      	bge.n	303d6 <hts221_init+0xd6>
		LOG_ERR("Could not set output data rate");
   3039a:	4844      	ldr	r0, [pc, #272]	; (304ac <hts221_init+0x1ac>)
   3039c:	6803      	ldr	r3, [r0, #0]
   3039e:	075b      	lsls	r3, r3, #29
   303a0:	d0d0      	beq.n	30344 <hts221_init+0x44>
   303a2:	4b49      	ldr	r3, [pc, #292]	; (304c8 <hts221_init+0x1c8>)
   303a4:	e7bd      	b.n	30322 <hts221_init+0x22>
	for (idx = 0U; idx < ARRAY_SIZE(hts221_odrs); idx++) {
   303a6:	2301      	movs	r3, #1
   303a8:	e7ee      	b.n	30388 <hts221_init+0x88>
		LOG_ERR("Invalid ODR value %s.", CONFIG_HTS221_ODR);
   303aa:	4840      	ldr	r0, [pc, #256]	; (304ac <hts221_init+0x1ac>)
   303ac:	6803      	ldr	r3, [r0, #0]
   303ae:	075a      	lsls	r2, r3, #29
   303b0:	d0c6      	beq.n	30340 <hts221_init+0x40>
   303b2:	466d      	mov	r5, sp
   303b4:	b088      	sub	sp, #32
   303b6:	466a      	mov	r2, sp
   303b8:	4b44      	ldr	r3, [pc, #272]	; (304cc <hts221_init+0x1cc>)
   303ba:	e9c2 3405 	strd	r3, r4, [r2, #20]
   303be:	f44f 7300 	mov.w	r3, #512	; 0x200
   303c2:	8393      	strh	r3, [r2, #28]
   303c4:	4b42      	ldr	r3, [pc, #264]	; (304d0 <hts221_init+0x1d0>)
   303c6:	f842 3f10 	str.w	r3, [r2, #16]!
   303ca:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   303ce:	f00a fe51 	bl	3b074 <z_log_msg_static_create.constprop.0>
   303d2:	46ad      	mov	sp, r5
   303d4:	e7b4      	b.n	30340 <hts221_init+0x40>
	status = hts221_block_data_update_set(ctx, 1);
   303d6:	2101      	movs	r1, #1
   303d8:	4628      	mov	r0, r5
   303da:	f008 fd16 	bl	38e0a <hts221_block_data_update_set>
	if (status < 0) {
   303de:	1e04      	subs	r4, r0, #0
   303e0:	da05      	bge.n	303ee <hts221_init+0xee>
		LOG_ERR("Could not set BDU bit");
   303e2:	4832      	ldr	r0, [pc, #200]	; (304ac <hts221_init+0x1ac>)
   303e4:	6803      	ldr	r3, [r0, #0]
   303e6:	075e      	lsls	r6, r3, #29
   303e8:	d0ac      	beq.n	30344 <hts221_init+0x44>
   303ea:	4b3a      	ldr	r3, [pc, #232]	; (304d4 <hts221_init+0x1d4>)
   303ec:	e799      	b.n	30322 <hts221_init+0x22>
	status = hts221_power_on_set(ctx, 1);
   303ee:	2101      	movs	r1, #1
   303f0:	4628      	mov	r0, r5
   303f2:	f008 fd26 	bl	38e42 <hts221_power_on_set>
	if (status < 0) {
   303f6:	1e04      	subs	r4, r0, #0
   303f8:	da05      	bge.n	30406 <hts221_init+0x106>
		LOG_ERR("Could not set PD bit");
   303fa:	482c      	ldr	r0, [pc, #176]	; (304ac <hts221_init+0x1ac>)
   303fc:	6803      	ldr	r3, [r0, #0]
   303fe:	075d      	lsls	r5, r3, #29
   30400:	d0a0      	beq.n	30344 <hts221_init+0x44>
   30402:	4b35      	ldr	r3, [pc, #212]	; (304d8 <hts221_init+0x1d8>)
   30404:	e78d      	b.n	30322 <hts221_init+0x22>
	return z_impl_k_sleep(timeout);
   30406:	2100      	movs	r1, #0
   30408:	2063      	movs	r0, #99	; 0x63
   3040a:	f006 fe4b 	bl	370a4 <z_impl_k_sleep>
	status = hts221_read_reg(ctx, HTS221_H0_RH_X2 |
   3040e:	6870      	ldr	r0, [r6, #4]
	struct hts221_data *data = dev->data;
   30410:	6935      	ldr	r5, [r6, #16]
	status = hts221_read_reg(ctx, HTS221_H0_RH_X2 |
   30412:	2310      	movs	r3, #16
   30414:	f107 0208 	add.w	r2, r7, #8
   30418:	21b0      	movs	r1, #176	; 0xb0
   3041a:	f008 fcd3 	bl	38dc4 <hts221_read_reg>
	if (status < 0) {
   3041e:	1e04      	subs	r4, r0, #0
   30420:	da1e      	bge.n	30460 <hts221_init+0x160>
		LOG_ERR("Failed to read conversion data.");
   30422:	4d22      	ldr	r5, [pc, #136]	; (304ac <hts221_init+0x1ac>)
   30424:	682b      	ldr	r3, [r5, #0]
   30426:	0759      	lsls	r1, r3, #29
   30428:	d08c      	beq.n	30344 <hts221_init+0x44>
   3042a:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 304dc <hts221_init+0x1dc>
   3042e:	f8c7 802c 	str.w	r8, [r7, #44]	; 0x2c
   30432:	2602      	movs	r6, #2
   30434:	f107 0228 	add.w	r2, r7, #40	; 0x28
   30438:	62be      	str	r6, [r7, #40]	; 0x28
   3043a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   3043e:	4628      	mov	r0, r5
   30440:	f00a fe18 	bl	3b074 <z_log_msg_static_create.constprop.0>
		LOG_ERR("Failed to read conversion data.");
   30444:	682b      	ldr	r3, [r5, #0]
   30446:	075a      	lsls	r2, r3, #29
   30448:	f43f af7c 	beq.w	30344 <hts221_init+0x44>
   3044c:	e9c7 680a 	strd	r6, r8, [r7, #40]	; 0x28
   30450:	f107 0228 	add.w	r2, r7, #40	; 0x28
   30454:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   30458:	4628      	mov	r0, r5
		LOG_ERR("Failed to initialize interrupt.");
   3045a:	f00a fe0b 	bl	3b074 <z_log_msg_static_create.constprop.0>
   3045e:	e771      	b.n	30344 <hts221_init+0x44>
	data->h0_rh_x2 = buf[0];
   30460:	893b      	ldrh	r3, [r7, #8]
   30462:	80ab      	strh	r3, [r5, #4]
	data->t0_degc_x8 = sys_le16_to_cpu(buf[2] | ((buf[5] & 0x3) << 8));
   30464:	7b7b      	ldrb	r3, [r7, #13]
   30466:	7aba      	ldrb	r2, [r7, #10]
   30468:	0219      	lsls	r1, r3, #8
   3046a:	f401 7140 	and.w	r1, r1, #768	; 0x300
   3046e:	430a      	orrs	r2, r1
   30470:	80ea      	strh	r2, [r5, #6]
	data->t1_degc_x8 = sys_le16_to_cpu(buf[3] | ((buf[5] & 0xC) << 6));
   30472:	019b      	lsls	r3, r3, #6
   30474:	7afa      	ldrb	r2, [r7, #11]
   30476:	f403 7340 	and.w	r3, r3, #768	; 0x300
   3047a:	4313      	orrs	r3, r2
   3047c:	812b      	strh	r3, [r5, #8]
	data->h0_t0_out = sys_le16_to_cpu(buf[6] | (buf[7] << 8));
   3047e:	89fb      	ldrh	r3, [r7, #14]
   30480:	816b      	strh	r3, [r5, #10]
	data->h1_t0_out = sys_le16_to_cpu(buf[10] | (buf[11] << 8));
   30482:	8a7b      	ldrh	r3, [r7, #18]
   30484:	81ab      	strh	r3, [r5, #12]
	data->t0_out = sys_le16_to_cpu(buf[12] | (buf[13] << 8));
   30486:	8abb      	ldrh	r3, [r7, #20]
   30488:	81eb      	strh	r3, [r5, #14]
	data->t1_out = sys_le16_to_cpu(buf[14] | (buf[15] << 8));
   3048a:	8afb      	ldrh	r3, [r7, #22]
   3048c:	822b      	strh	r3, [r5, #16]
	status = hts221_init_interrupt(dev);
   3048e:	4630      	mov	r0, r6
   30490:	f000 f8b6 	bl	30600 <hts221_init_interrupt>
	if (status < 0) {
   30494:	1e04      	subs	r4, r0, #0
   30496:	db01      	blt.n	3049c <hts221_init+0x19c>
	return 0;
   30498:	2400      	movs	r4, #0
   3049a:	e753      	b.n	30344 <hts221_init+0x44>
		LOG_ERR("Failed to initialize interrupt.");
   3049c:	4803      	ldr	r0, [pc, #12]	; (304ac <hts221_init+0x1ac>)
   3049e:	6803      	ldr	r3, [r0, #0]
   304a0:	075b      	lsls	r3, r3, #29
   304a2:	f43f af4f 	beq.w	30344 <hts221_init+0x44>
   304a6:	4b0e      	ldr	r3, [pc, #56]	; (304e0 <hts221_init+0x1e0>)
   304a8:	e73b      	b.n	30322 <hts221_init+0x22>
   304aa:	bf00      	nop
   304ac:	20000a64 	.word	0x20000a64
   304b0:	0003f1f4 	.word	0x0003f1f4
   304b4:	0003f20c 	.word	0x0003f20c
   304b8:	0003f1a3 	.word	0x0003f1a3
   304bc:	0003f21d 	.word	0x0003f21d
   304c0:	0003f21f 	.word	0x0003f21f
   304c4:	0003ccc0 	.word	0x0003ccc0
   304c8:	0003f23a 	.word	0x0003f23a
   304cc:	0003f224 	.word	0x0003f224
   304d0:	01000003 	.word	0x01000003
   304d4:	0003f259 	.word	0x0003f259
   304d8:	0003f26f 	.word	0x0003f26f
   304dc:	0003f284 	.word	0x0003f284
   304e0:	0003f2a4 	.word	0x0003f2a4

000304e4 <setup_drdy.isra.0>:

#include "hts221.h"

LOG_MODULE_DECLARE(HTS221, CONFIG_SENSOR_LOG_LEVEL);

static inline void setup_drdy(const struct device *dev,
   304e4:	b570      	push	{r4, r5, r6, lr}
   304e6:	4603      	mov	r3, r0
			      bool enable)
{
	const struct hts221_config *cfg = dev->config;
	unsigned int flags = enable
		? GPIO_INT_EDGE_TO_ACTIVE
		: GPIO_INT_DISABLE;
   304e8:	2900      	cmp	r1, #0
	return gpio_pin_interrupt_configure(spec->port, spec->pin, flags);
   304ea:	6940      	ldr	r0, [r0, #20]
   304ec:	7e19      	ldrb	r1, [r3, #24]
   304ee:	bf0c      	ite	eq
   304f0:	f44f 1200 	moveq.w	r2, #2097152	; 0x200000
   304f4:	f04f 62b8 	movne.w	r2, #96468992	; 0x5c00000
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   304f8:	6846      	ldr	r6, [r0, #4]
	const struct gpio_driver_api *api =
   304fa:	6884      	ldr	r4, [r0, #8]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   304fc:	6836      	ldr	r6, [r6, #0]
	const struct gpio_driver_data *const data =
   304fe:	6905      	ldr	r5, [r0, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   30500:	2301      	movs	r3, #1
   30502:	408b      	lsls	r3, r1
   30504:	4233      	tst	r3, r6
   30506:	d10a      	bne.n	3051e <setup_drdy.isra.0+0x3a>
   30508:	490e      	ldr	r1, [pc, #56]	; (30544 <setup_drdy.isra.0+0x60>)
   3050a:	480f      	ldr	r0, [pc, #60]	; (30548 <setup_drdy.isra.0+0x64>)
   3050c:	f240 227e 	movw	r2, #638	; 0x27e
   30510:	f008 faff 	bl	38b12 <assert_print>
   30514:	480b      	ldr	r0, [pc, #44]	; (30544 <setup_drdy.isra.0+0x60>)
   30516:	f240 217e 	movw	r1, #638	; 0x27e
   3051a:	f008 faf3 	bl	38b04 <assert_post_action>
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   3051e:	0216      	lsls	r6, r2, #8
   30520:	d506      	bpl.n	30530 <setup_drdy.isra.0+0x4c>
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
   30522:	682a      	ldr	r2, [r5, #0]
		flags ^= (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1);
   30524:	4213      	tst	r3, r2
   30526:	bf0c      	ite	eq
   30528:	f04f 62b8 	moveq.w	r2, #96468992	; 0x5c00000
   3052c:	f04f 7270 	movne.w	r2, #62914560	; 0x3c00000
	return api->pin_interrupt_configure(port, pin, mode, trig);
   30530:	69a4      	ldr	r4, [r4, #24]
   30532:	f002 63c0 	and.w	r3, r2, #100663296	; 0x6000000
   30536:	46a4      	mov	ip, r4
   30538:	f002 72b0 	and.w	r2, r2, #23068672	; 0x1600000

	gpio_pin_interrupt_configure_dt(&cfg->gpio_drdy, flags);
}
   3053c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   30540:	4760      	bx	ip
   30542:	bf00      	nop
   30544:	0003d1a6 	.word	0x0003d1a6
   30548:	0003d1d7 	.word	0x0003d1d7

0003054c <hts221_trigger_set>:
}

int hts221_trigger_set(const struct device *dev,
		       const struct sensor_trigger *trig,
		       sensor_trigger_handler_t handler)
{
   3054c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct hts221_data *data = dev->data;
	const struct hts221_config *cfg = dev->config;

	__ASSERT_NO_MSG(trig->type == SENSOR_TRIG_DATA_READY);
   30550:	880f      	ldrh	r7, [r1, #0]
	struct hts221_data *data = dev->data;
   30552:	f8d0 9010 	ldr.w	r9, [r0, #16]
	const struct hts221_config *cfg = dev->config;
   30556:	f8d0 8004 	ldr.w	r8, [r0, #4]
	__ASSERT_NO_MSG(trig->type == SENSOR_TRIG_DATA_READY);
   3055a:	2f01      	cmp	r7, #1
{
   3055c:	4604      	mov	r4, r0
   3055e:	460d      	mov	r5, r1
   30560:	4616      	mov	r6, r2
	__ASSERT_NO_MSG(trig->type == SENSOR_TRIG_DATA_READY);
   30562:	d008      	beq.n	30576 <hts221_trigger_set+0x2a>
   30564:	4923      	ldr	r1, [pc, #140]	; (305f4 <hts221_trigger_set+0xa8>)
   30566:	4824      	ldr	r0, [pc, #144]	; (305f8 <hts221_trigger_set+0xac>)
   30568:	223f      	movs	r2, #63	; 0x3f
   3056a:	f008 fad2 	bl	38b12 <assert_print>
   3056e:	4821      	ldr	r0, [pc, #132]	; (305f4 <hts221_trigger_set+0xa8>)
   30570:	213f      	movs	r1, #63	; 0x3f
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   30572:	f008 fac7 	bl	38b04 <assert_post_action>

	setup_drdy(dev, false);
   30576:	2100      	movs	r1, #0
   30578:	4640      	mov	r0, r8
   3057a:	f7ff ffb3 	bl	304e4 <setup_drdy.isra.0>

	data->data_ready_handler = handler;
   3057e:	f8c9 6028 	str.w	r6, [r9, #40]	; 0x28
	if (handler == NULL) {
   30582:	2e00      	cmp	r6, #0
   30584:	d031      	beq.n	305ea <hts221_trigger_set+0x9e>
		return 0;
	}

	data->data_ready_trigger = *trig;
   30586:	6828      	ldr	r0, [r5, #0]
   30588:	f8c9 0024 	str.w	r0, [r9, #36]	; 0x24

	setup_drdy(dev, true);
   3058c:	6860      	ldr	r0, [r4, #4]
   3058e:	4639      	mov	r1, r7
   30590:	f7ff ffa8 	bl	304e4 <setup_drdy.isra.0>
   30594:	f898 3018 	ldrb.w	r3, [r8, #24]
	return gpio_pin_get(spec->port, spec->pin);
   30598:	f8d8 0014 	ldr.w	r0, [r8, #20]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   3059c:	409f      	lsls	r7, r3
   3059e:	6843      	ldr	r3, [r0, #4]
   305a0:	681b      	ldr	r3, [r3, #0]
   305a2:	421f      	tst	r7, r3
   305a4:	d109      	bne.n	305ba <hts221_trigger_set+0x6e>
   305a6:	4915      	ldr	r1, [pc, #84]	; (305fc <hts221_trigger_set+0xb0>)
   305a8:	4813      	ldr	r0, [pc, #76]	; (305f8 <hts221_trigger_set+0xac>)
   305aa:	f240 42ce 	movw	r2, #1230	; 0x4ce
   305ae:	f008 fab0 	bl	38b12 <assert_print>
   305b2:	4812      	ldr	r0, [pc, #72]	; (305fc <hts221_trigger_set+0xb0>)
   305b4:	f240 41ce 	movw	r1, #1230	; 0x4ce
   305b8:	e7db      	b.n	30572 <hts221_trigger_set+0x26>
	const struct gpio_driver_data *const data =
   305ba:	6905      	ldr	r5, [r0, #16]
	return api->port_get_raw(port, value);
   305bc:	6883      	ldr	r3, [r0, #8]
   305be:	a901      	add	r1, sp, #4
   305c0:	685b      	ldr	r3, [r3, #4]
   305c2:	4798      	blx	r3
	if (ret == 0) {
   305c4:	b930      	cbnz	r0, 305d4 <hts221_trigger_set+0x88>
		*value ^= data->invert;
   305c6:	682a      	ldr	r2, [r5, #0]
   305c8:	9b01      	ldr	r3, [sp, #4]
   305ca:	4053      	eors	r3, r2
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
   305cc:	423b      	tst	r3, r7
   305ce:	bf14      	ite	ne
   305d0:	2001      	movne	r0, #1
   305d2:	2000      	moveq	r0, #0

	/* If DRDY is active we probably won't get the rising edge, so
	 * invoke the callback manually.
	 */
	if (gpio_pin_get_dt(&cfg->gpio_drdy) > 0) {
   305d4:	2800      	cmp	r0, #0
   305d6:	dd08      	ble.n	305ea <hts221_trigger_set+0x9e>
	struct hts221_data *data = dev->data;
   305d8:	6925      	ldr	r5, [r4, #16]
	setup_drdy(dev, false);
   305da:	6860      	ldr	r0, [r4, #4]
   305dc:	2100      	movs	r1, #0
   305de:	f7ff ff81 	bl	304e4 <setup_drdy.isra.0>
	k_work_submit(&data->work);
   305e2:	f105 002c 	add.w	r0, r5, #44	; 0x2c
   305e6:	f005 fc09 	bl	35dfc <k_work_submit>
		handle_drdy(dev);
	}

	return 0;
}
   305ea:	2000      	movs	r0, #0
   305ec:	b003      	add	sp, #12
   305ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   305f2:	bf00      	nop
   305f4:	0003f2d5 	.word	0x0003f2d5
   305f8:	0003d1d7 	.word	0x0003d1d7
   305fc:	0003d1a6 	.word	0x0003d1a6

00030600 <hts221_init_interrupt>:
	process_drdy(data->dev);
}
#endif

int hts221_init_interrupt(const struct device *dev)
{
   30600:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   30604:	b087      	sub	sp, #28
	struct hts221_data *data = dev->data;
	const struct hts221_config *cfg = dev->config;
   30606:	6845      	ldr	r5, [r0, #4]
	struct hts221_data *data = dev->data;
   30608:	f8d0 8010 	ldr.w	r8, [r0, #16]
{
   3060c:	4606      	mov	r6, r0
	stmdev_ctx_t *ctx = (stmdev_ctx_t *)&cfg->ctx;
	int status;

	if (cfg->gpio_drdy.port == NULL) {
   3060e:	6968      	ldr	r0, [r5, #20]
{
   30610:	af00      	add	r7, sp, #0
	if (cfg->gpio_drdy.port == NULL) {
   30612:	2800      	cmp	r0, #0
   30614:	f000 80c8 	beq.w	307a8 <hts221_init_interrupt+0x1a8>
   30618:	f00b fac0 	bl	3bb9c <z_device_is_ready>
		LOG_DBG("gpio_drdy not defined in DT");
		return 0;
	}

	if (!device_is_ready(cfg->gpio_drdy.port)) {
   3061c:	4603      	mov	r3, r0
   3061e:	b9f0      	cbnz	r0, 3065e <hts221_init_interrupt+0x5e>
		LOG_ERR("device %s is not ready", cfg->gpio_drdy.port->name);
   30620:	4862      	ldr	r0, [pc, #392]	; (307ac <hts221_init_interrupt+0x1ac>)
   30622:	6802      	ldr	r2, [r0, #0]
   30624:	0754      	lsls	r4, r2, #29
   30626:	d106      	bne.n	30636 <hts221_init_interrupt+0x36>
		return -ENODEV;
   30628:	f06f 0412 	mvn.w	r4, #18
#endif

	setup_drdy(dev, true);

	return 0;
}
   3062c:	4620      	mov	r0, r4
   3062e:	371c      	adds	r7, #28
   30630:	46bd      	mov	sp, r7
   30632:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		LOG_ERR("device %s is not ready", cfg->gpio_drdy.port->name);
   30636:	696a      	ldr	r2, [r5, #20]
   30638:	466c      	mov	r4, sp
   3063a:	b088      	sub	sp, #32
   3063c:	6811      	ldr	r1, [r2, #0]
   3063e:	466a      	mov	r2, sp
   30640:	4d5b      	ldr	r5, [pc, #364]	; (307b0 <hts221_init_interrupt+0x1b0>)
   30642:	e9c2 5105 	strd	r5, r1, [r2, #20]
   30646:	f44f 7100 	mov.w	r1, #512	; 0x200
   3064a:	8391      	strh	r1, [r2, #28]
   3064c:	4959      	ldr	r1, [pc, #356]	; (307b4 <hts221_init_interrupt+0x1b4>)
   3064e:	f842 1f10 	str.w	r1, [r2, #16]!
   30652:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   30656:	f7f5 fda9 	bl	261ac <z_impl_z_log_msg_static_create>
   3065a:	46a5      	mov	sp, r4
   3065c:	e7e4      	b.n	30628 <hts221_init_interrupt+0x28>
	data->dev = dev;
   3065e:	f8c8 6014 	str.w	r6, [r8, #20]
				  spec->dt_flags | extra_flags);
   30662:	f8b5 c01a 	ldrh.w	ip, [r5, #26]
	return gpio_pin_configure(spec->port,
   30666:	6968      	ldr	r0, [r5, #20]
				  spec->pin,
   30668:	7e29      	ldrb	r1, [r5, #24]
	return gpio_pin_configure(spec->port,
   3066a:	f44c 3280 	orr.w	r2, ip, #65536	; 0x10000
	__ASSERT((flags & (GPIO_PULL_UP | GPIO_PULL_DOWN)) !=
   3066e:	f00c 0430 	and.w	r4, ip, #48	; 0x30
   30672:	2c30      	cmp	r4, #48	; 0x30
	__unused const struct gpio_driver_config *const cfg =
   30674:	e9d0 3901 	ldrd	r3, r9, [r0, #4]
	struct gpio_driver_data *data =
   30678:	f8d0 e010 	ldr.w	lr, [r0, #16]
	__ASSERT((flags & (GPIO_PULL_UP | GPIO_PULL_DOWN)) !=
   3067c:	d10a      	bne.n	30694 <hts221_init_interrupt+0x94>
   3067e:	494e      	ldr	r1, [pc, #312]	; (307b8 <hts221_init_interrupt+0x1b8>)
   30680:	484e      	ldr	r0, [pc, #312]	; (307bc <hts221_init_interrupt+0x1bc>)
   30682:	f240 22c1 	movw	r2, #705	; 0x2c1
   30686:	f008 fa44 	bl	38b12 <assert_print>
   3068a:	f240 21c1 	movw	r1, #705	; 0x2c1
	__ASSERT((flags & GPIO_OUTPUT) != 0 || (flags & GPIO_SINGLE_ENDED) == 0,
   3068e:	484a      	ldr	r0, [pc, #296]	; (307b8 <hts221_init_interrupt+0x1b8>)
   30690:	f008 fa38 	bl	38b04 <assert_post_action>
   30694:	f00c 1402 	and.w	r4, ip, #131074	; 0x20002
   30698:	b144      	cbz	r4, 306ac <hts221_init_interrupt+0xac>
   3069a:	4947      	ldr	r1, [pc, #284]	; (307b8 <hts221_init_interrupt+0x1b8>)
   3069c:	4847      	ldr	r0, [pc, #284]	; (307bc <hts221_init_interrupt+0x1bc>)
   3069e:	f240 22c5 	movw	r2, #709	; 0x2c5
   306a2:	f008 fa36 	bl	38b12 <assert_print>
   306a6:	f240 21c5 	movw	r1, #709	; 0x2c5
   306aa:	e7f0      	b.n	3068e <hts221_init_interrupt+0x8e>
	__ASSERT_NO_MSG((flags & GPIO_SINGLE_ENDED) != 0 ||
   306ac:	f00c 0406 	and.w	r4, ip, #6
   306b0:	2c04      	cmp	r4, #4
   306b2:	d108      	bne.n	306c6 <hts221_init_interrupt+0xc6>
   306b4:	4940      	ldr	r1, [pc, #256]	; (307b8 <hts221_init_interrupt+0x1b8>)
   306b6:	4841      	ldr	r0, [pc, #260]	; (307bc <hts221_init_interrupt+0x1bc>)
   306b8:	f240 22c9 	movw	r2, #713	; 0x2c9
   306bc:	f008 fa29 	bl	38b12 <assert_print>
   306c0:	f240 21c9 	movw	r1, #713	; 0x2c9
   306c4:	e7e3      	b.n	3068e <hts221_init_interrupt+0x8e>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   306c6:	681b      	ldr	r3, [r3, #0]
   306c8:	2401      	movs	r4, #1
   306ca:	408c      	lsls	r4, r1
   306cc:	421c      	tst	r4, r3
   306ce:	d108      	bne.n	306e2 <hts221_init_interrupt+0xe2>
   306d0:	4939      	ldr	r1, [pc, #228]	; (307b8 <hts221_init_interrupt+0x1b8>)
   306d2:	483a      	ldr	r0, [pc, #232]	; (307bc <hts221_init_interrupt+0x1bc>)
   306d4:	f44f 7237 	mov.w	r2, #732	; 0x2dc
   306d8:	f008 fa1b 	bl	38b12 <assert_print>
   306dc:	f44f 7137 	mov.w	r1, #732	; 0x2dc
   306e0:	e7d5      	b.n	3068e <hts221_init_interrupt+0x8e>
		data->invert |= (gpio_port_pins_t)BIT(pin);
   306e2:	f8de 3000 	ldr.w	r3, [lr]
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   306e6:	f01c 0f01 	tst.w	ip, #1
		data->invert |= (gpio_port_pins_t)BIT(pin);
   306ea:	bf14      	ite	ne
   306ec:	4323      	orrne	r3, r4
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   306ee:	43a3      	biceq	r3, r4
   306f0:	f8ce 3000 	str.w	r3, [lr]
	return api->pin_configure(port, pin, flags);
   306f4:	f8d9 3000 	ldr.w	r3, [r9]
   306f8:	4798      	blx	r3
	if (status < 0) {
   306fa:	1e04      	subs	r4, r0, #0
   306fc:	da1a      	bge.n	30734 <hts221_init_interrupt+0x134>
		LOG_ERR("Could not configure %s.%02u",
   306fe:	482b      	ldr	r0, [pc, #172]	; (307ac <hts221_init_interrupt+0x1ac>)
   30700:	6803      	ldr	r3, [r0, #0]
   30702:	0759      	lsls	r1, r3, #29
   30704:	d092      	beq.n	3062c <hts221_init_interrupt+0x2c>
   30706:	696b      	ldr	r3, [r5, #20]
   30708:	6819      	ldr	r1, [r3, #0]
   3070a:	7e2b      	ldrb	r3, [r5, #24]
   3070c:	466d      	mov	r5, sp
   3070e:	b08a      	sub	sp, #40	; 0x28
   30710:	466a      	mov	r2, sp
   30712:	4e2b      	ldr	r6, [pc, #172]	; (307c0 <hts221_init_interrupt+0x1c0>)
   30714:	61d3      	str	r3, [r2, #28]
   30716:	f44f 7300 	mov.w	r3, #512	; 0x200
   3071a:	8413      	strh	r3, [r2, #32]
   3071c:	4b29      	ldr	r3, [pc, #164]	; (307c4 <hts221_init_interrupt+0x1c4>)
   3071e:	e9c2 6105 	strd	r6, r1, [r2, #20]
   30722:	f842 3f10 	str.w	r3, [r2, #16]!
   30726:	2300      	movs	r3, #0
   30728:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   3072c:	f7f5 fd3e 	bl	261ac <z_impl_z_log_msg_static_create>
   30730:	46ad      	mov	sp, r5
   30732:	e77b      	b.n	3062c <hts221_init_interrupt+0x2c>
			   BIT(cfg->gpio_drdy.pin));
   30734:	7e2b      	ldrb	r3, [r5, #24]
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
   30736:	4a24      	ldr	r2, [pc, #144]	; (307c8 <hts221_init_interrupt+0x1c8>)
   30738:	f04f 0901 	mov.w	r9, #1
   3073c:	fa09 f303 	lsl.w	r3, r9, r3
	callback->pin_mask = pin_mask;
   30740:	e9c8 2307 	strd	r2, r3, [r8, #28]
	status = gpio_add_callback(cfg->gpio_drdy.port, &data->drdy_cb);
   30744:	6968      	ldr	r0, [r5, #20]
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
   30746:	6883      	ldr	r3, [r0, #8]
   30748:	69db      	ldr	r3, [r3, #28]
	gpio_init_callback(&data->drdy_cb,
   3074a:	f108 0118 	add.w	r1, r8, #24
   3074e:	b1a3      	cbz	r3, 3077a <hts221_init_interrupt+0x17a>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
   30750:	464a      	mov	r2, r9
   30752:	4798      	blx	r3
	if (status < 0) {
   30754:	1e04      	subs	r4, r0, #0
   30756:	da13      	bge.n	30780 <hts221_init_interrupt+0x180>
		LOG_ERR("Could not set gpio callback.");
   30758:	4814      	ldr	r0, [pc, #80]	; (307ac <hts221_init_interrupt+0x1ac>)
   3075a:	6803      	ldr	r3, [r0, #0]
   3075c:	075a      	lsls	r2, r3, #29
   3075e:	f43f af65 	beq.w	3062c <hts221_init_interrupt+0x2c>
   30762:	4b1a      	ldr	r3, [pc, #104]	; (307cc <hts221_init_interrupt+0x1cc>)
		LOG_ERR("Could not enable data-ready interrupt.");
   30764:	617b      	str	r3, [r7, #20]
   30766:	2302      	movs	r3, #2
   30768:	613b      	str	r3, [r7, #16]
   3076a:	2300      	movs	r3, #0
   3076c:	f107 0210 	add.w	r2, r7, #16
   30770:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   30774:	f7f5 fd1a 	bl	261ac <z_impl_z_log_msg_static_create>
   30778:	e758      	b.n	3062c <hts221_init_interrupt+0x2c>
		return -ENOTSUP;
   3077a:	f06f 0485 	mvn.w	r4, #133	; 0x85
   3077e:	e7eb      	b.n	30758 <hts221_init_interrupt+0x158>
	status = hts221_drdy_on_int_set(ctx, 1);
   30780:	4649      	mov	r1, r9
   30782:	4628      	mov	r0, r5
   30784:	f008 fb74 	bl	38e70 <hts221_drdy_on_int_set>
	if (status < 0) {
   30788:	1e04      	subs	r4, r0, #0
   3078a:	da06      	bge.n	3079a <hts221_init_interrupt+0x19a>
		LOG_ERR("Could not enable data-ready interrupt.");
   3078c:	4807      	ldr	r0, [pc, #28]	; (307ac <hts221_init_interrupt+0x1ac>)
   3078e:	6803      	ldr	r3, [r0, #0]
   30790:	075b      	lsls	r3, r3, #29
   30792:	f43f af4b 	beq.w	3062c <hts221_init_interrupt+0x2c>
   30796:	4b0e      	ldr	r3, [pc, #56]	; (307d0 <hts221_init_interrupt+0x1d0>)
   30798:	e7e4      	b.n	30764 <hts221_init_interrupt+0x164>
	data->work.handler = hts221_work_cb;
   3079a:	4b0e      	ldr	r3, [pc, #56]	; (307d4 <hts221_init_interrupt+0x1d4>)
   3079c:	f8c8 3030 	str.w	r3, [r8, #48]	; 0x30
	setup_drdy(dev, true);
   307a0:	6870      	ldr	r0, [r6, #4]
   307a2:	4649      	mov	r1, r9
   307a4:	f7ff fe9e 	bl	304e4 <setup_drdy.isra.0>
		return 0;
   307a8:	2400      	movs	r4, #0
   307aa:	e73f      	b.n	3062c <hts221_init_interrupt+0x2c>
   307ac:	20000a64 	.word	0x20000a64
   307b0:	0003f30f 	.word	0x0003f30f
   307b4:	01000003 	.word	0x01000003
   307b8:	0003d1a6 	.word	0x0003d1a6
   307bc:	0003d1d7 	.word	0x0003d1d7
   307c0:	0003f326 	.word	0x0003f326
   307c4:	01000004 	.word	0x01000004
   307c8:	0003b07b 	.word	0x0003b07b
   307cc:	0003f342 	.word	0x0003f342
   307d0:	0003f35f 	.word	0x0003f35f
   307d4:	0003b097 	.word	0x0003b097

000307d8 <lis2dh_channel_get>:
{
   307d8:	b570      	push	{r4, r5, r6, lr}
   307da:	2903      	cmp	r1, #3
	struct lis2dh_data *lis2dh = dev->data;
   307dc:	6904      	ldr	r4, [r0, #16]
	switch (chan) {
   307de:	d81c      	bhi.n	3081a <lis2dh_channel_get+0x42>
   307e0:	4b0f      	ldr	r3, [pc, #60]	; (30820 <lis2dh_channel_get+0x48>)
   307e2:	5658      	ldrsb	r0, [r3, r1]
   307e4:	4b0f      	ldr	r3, [pc, #60]	; (30824 <lis2dh_channel_get+0x4c>)
   307e6:	565e      	ldrsb	r6, [r3, r1]
	val->val1 = converted_val / 1000000;
   307e8:	490f      	ldr	r1, [pc, #60]	; (30828 <lis2dh_channel_get+0x50>)
	for (i = ofs_start; i <= ofs_end; i++, val++) {
   307ea:	42b0      	cmp	r0, r6
   307ec:	f102 0208 	add.w	r2, r2, #8
   307f0:	dd01      	ble.n	307f6 <lis2dh_channel_get+0x1e>
	return 0;
   307f2:	2000      	movs	r0, #0
}
   307f4:	bd70      	pop	{r4, r5, r6, pc}
		lis2dh_convert(lis2dh->sample.xyz[i], lis2dh->scale, val);
   307f6:	1d03      	adds	r3, r0, #4
   307f8:	eb04 0343 	add.w	r3, r4, r3, lsl #1
	converted_val = (raw_val >> 4) * scale;
   307fc:	6925      	ldr	r5, [r4, #16]
   307fe:	f9b3 3001 	ldrsh.w	r3, [r3, #1]
   30802:	111b      	asrs	r3, r3, #4
   30804:	436b      	muls	r3, r5
	val->val1 = converted_val / 1000000;
   30806:	fb93 f5f1 	sdiv	r5, r3, r1
	val->val2 = converted_val % 1000000;
   3080a:	fb01 3315 	mls	r3, r1, r5, r3
	val->val1 = converted_val / 1000000;
   3080e:	f842 5c08 	str.w	r5, [r2, #-8]
	val->val2 = converted_val % 1000000;
   30812:	f842 3c04 	str.w	r3, [r2, #-4]
	for (i = ofs_start; i <= ofs_end; i++, val++) {
   30816:	3001      	adds	r0, #1
   30818:	e7e7      	b.n	307ea <lis2dh_channel_get+0x12>
		return -ENOTSUP;
   3081a:	f06f 0085 	mvn.w	r0, #133	; 0x85
   3081e:	e7e9      	b.n	307f4 <lis2dh_channel_get+0x1c>
   30820:	0003f4e7 	.word	0x0003f4e7
   30824:	0003f4e3 	.word	0x0003f4e3
   30828:	000f4240 	.word	0x000f4240

0003082c <lis2dh_init>:
	.sample_fetch = lis2dh_sample_fetch,
	.channel_get = lis2dh_channel_get,
};

int lis2dh_init(const struct device *dev)
{
   3082c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   30830:	b08b      	sub	sp, #44	; 0x2c
	struct lis2dh_data *lis2dh = dev->data;
	const struct lis2dh_config *cfg = dev->config;
   30832:	f8d0 9004 	ldr.w	r9, [r0, #4]
	struct lis2dh_data *lis2dh = dev->data;
   30836:	f8d0 8010 	ldr.w	r8, [r0, #16]
	int status;
	uint8_t id;
	uint8_t raw[6];

	status = cfg->bus_init(dev);
   3083a:	f8d9 3000 	ldr.w	r3, [r9]
{
   3083e:	af00      	add	r7, sp, #0
   30840:	4605      	mov	r5, r0
	status = cfg->bus_init(dev);
   30842:	4798      	blx	r3
	if (status < 0) {
   30844:	1e04      	subs	r4, r0, #0
   30846:	db21      	blt.n	3088c <lis2dh_init+0x60>
		return status;
	}

	status = lis2dh->hw_tf->read_reg(dev, LIS2DH_REG_WAI, &id);
   30848:	f8d8 3004 	ldr.w	r3, [r8, #4]
   3084c:	4e56      	ldr	r6, [pc, #344]	; (309a8 <lis2dh_init+0x17c>)
   3084e:	689b      	ldr	r3, [r3, #8]
   30850:	1dfa      	adds	r2, r7, #7
   30852:	210f      	movs	r1, #15
   30854:	4628      	mov	r0, r5
   30856:	4798      	blx	r3
	if (status < 0) {
   30858:	1e04      	subs	r4, r0, #0
   3085a:	da0f      	bge.n	3087c <lis2dh_init+0x50>
		LOG_ERR("Failed to read chip id.");
   3085c:	6833      	ldr	r3, [r6, #0]
   3085e:	0759      	lsls	r1, r3, #29
   30860:	d014      	beq.n	3088c <lis2dh_init+0x60>
   30862:	4b52      	ldr	r3, [pc, #328]	; (309ac <lis2dh_init+0x180>)
   30864:	627b      	str	r3, [r7, #36]	; 0x24
   30866:	2302      	movs	r3, #2
   30868:	623b      	str	r3, [r7, #32]
   3086a:	2300      	movs	r3, #0
   3086c:	f107 0220 	add.w	r2, r7, #32
   30870:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   30874:	4630      	mov	r0, r6
   30876:	f7f5 fc99 	bl	261ac <z_impl_z_log_msg_static_create>
#else
	status = lis2dh->hw_tf->write_reg(dev, LIS2DH_REG_CTRL4, LIS2DH_FS_BITS | LIS2DH_HR_BIT);
#endif

	if (status < 0) {
		LOG_ERR("Failed to set full scale ctrl register.");
   3087a:	e007      	b.n	3088c <lis2dh_init+0x60>
	if (id != LIS2DH_CHIP_ID) {
   3087c:	79fb      	ldrb	r3, [r7, #7]
   3087e:	2b33      	cmp	r3, #51	; 0x33
   30880:	d01a      	beq.n	308b8 <lis2dh_init+0x8c>
		LOG_ERR("Invalid chip ID: %02x\n", id);
   30882:	6832      	ldr	r2, [r6, #0]
   30884:	0752      	lsls	r2, r2, #29
   30886:	d106      	bne.n	30896 <lis2dh_init+0x6a>
		return -EINVAL;
   30888:	f06f 0415 	mvn.w	r4, #21

	/* enable accel measurements and set power mode and data rate */
	return lis2dh->hw_tf->write_reg(dev, LIS2DH_REG_CTRL1,
					LIS2DH_ACCEL_EN_BITS | LIS2DH_LP_EN_BIT |
					LIS2DH_ODR_BITS);
}
   3088c:	4620      	mov	r0, r4
   3088e:	372c      	adds	r7, #44	; 0x2c
   30890:	46bd      	mov	sp, r7
   30892:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		LOG_ERR("Invalid chip ID: %02x\n", id);
   30896:	466c      	mov	r4, sp
   30898:	b088      	sub	sp, #32
   3089a:	466a      	mov	r2, sp
   3089c:	4944      	ldr	r1, [pc, #272]	; (309b0 <lis2dh_init+0x184>)
   3089e:	e9c2 1305 	strd	r1, r3, [r2, #20]
   308a2:	2303      	movs	r3, #3
   308a4:	f842 3f10 	str.w	r3, [r2, #16]!
   308a8:	2300      	movs	r3, #0
   308aa:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   308ae:	4630      	mov	r0, r6
   308b0:	f7f5 fc7c 	bl	261ac <z_impl_z_log_msg_static_create>
   308b4:	46a5      	mov	sp, r4
   308b6:	e7e7      	b.n	30888 <lis2dh_init+0x5c>
	if (cfg->hw.is_lsm303agr_dev) {
   308b8:	f899 200c 	ldrb.w	r2, [r9, #12]
   308bc:	07d3      	lsls	r3, r2, #31
   308be:	d50b      	bpl.n	308d8 <lis2dh_init+0xac>
		lis2dh_reg_val_to_scale[0] = ACCEL_SCALE(1563);
   308c0:	4b3c      	ldr	r3, [pc, #240]	; (309b4 <lis2dh_init+0x188>)
		lis2dh_reg_val_to_scale[1] = ACCEL_SCALE(3126);
   308c2:	f644 1116 	movw	r1, #18710	; 0x4916
   308c6:	f242 408b 	movw	r0, #9355	; 0x248b
   308ca:	e9c3 0100 	strd	r0, r1, [r3]
		lis2dh_reg_val_to_scale[3] = ACCEL_SCALE(18758);
   308ce:	493a      	ldr	r1, [pc, #232]	; (309b8 <lis2dh_init+0x18c>)
   308d0:	f249 242d 	movw	r4, #37421	; 0x922d
   308d4:	e9c3 4102 	strd	r4, r1, [r3, #8]
	if (cfg->hw.disc_pull_up) {
   308d8:	0792      	lsls	r2, r2, #30
   308da:	d517      	bpl.n	3090c <lis2dh_init+0xe0>
		status = lis2dh->hw_tf->update_reg(dev, LIS2DH_REG_CTRL0,
   308dc:	f8d8 3004 	ldr.w	r3, [r8, #4]
   308e0:	691c      	ldr	r4, [r3, #16]
   308e2:	2380      	movs	r3, #128	; 0x80
   308e4:	461a      	mov	r2, r3
   308e6:	211e      	movs	r1, #30
   308e8:	4628      	mov	r0, r5
   308ea:	47a0      	blx	r4
		if (status < 0) {
   308ec:	1e04      	subs	r4, r0, #0
   308ee:	da0d      	bge.n	3090c <lis2dh_init+0xe0>
			LOG_ERR("Failed to disconnect SDO/SA0 pull-up.");
   308f0:	6833      	ldr	r3, [r6, #0]
   308f2:	075b      	lsls	r3, r3, #29
   308f4:	d0ca      	beq.n	3088c <lis2dh_init+0x60>
   308f6:	4b31      	ldr	r3, [pc, #196]	; (309bc <lis2dh_init+0x190>)
		LOG_ERR("Failed to set full scale ctrl register.");
   308f8:	627b      	str	r3, [r7, #36]	; 0x24
   308fa:	2302      	movs	r3, #2
   308fc:	623b      	str	r3, [r7, #32]
   308fe:	482a      	ldr	r0, [pc, #168]	; (309a8 <lis2dh_init+0x17c>)
   30900:	2300      	movs	r3, #0
   30902:	f107 0220 	add.w	r2, r7, #32
   30906:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   3090a:	e7b4      	b.n	30876 <lis2dh_init+0x4a>
	(void)memset(raw, 0, sizeof(raw));
   3090c:	2206      	movs	r2, #6
   3090e:	2100      	movs	r1, #0
   30910:	f107 0008 	add.w	r0, r7, #8
   30914:	f008 fd57 	bl	393c6 <memset>
	raw[0] = LIS2DH_ACCEL_EN_BITS;
   30918:	2307      	movs	r3, #7
   3091a:	723b      	strb	r3, [r7, #8]
	status = lis2dh->hw_tf->write_data(dev, LIS2DH_REG_CTRL1, raw,
   3091c:	f8d8 3004 	ldr.w	r3, [r8, #4]
   30920:	f107 0208 	add.w	r2, r7, #8
   30924:	685c      	ldr	r4, [r3, #4]
   30926:	2120      	movs	r1, #32
   30928:	2306      	movs	r3, #6
   3092a:	4628      	mov	r0, r5
   3092c:	47a0      	blx	r4
	if (status < 0) {
   3092e:	1e04      	subs	r4, r0, #0
   30930:	da04      	bge.n	3093c <lis2dh_init+0x110>
		LOG_ERR("Failed to reset ctrl registers.");
   30932:	6833      	ldr	r3, [r6, #0]
   30934:	075e      	lsls	r6, r3, #29
   30936:	d0a9      	beq.n	3088c <lis2dh_init+0x60>
   30938:	4b21      	ldr	r3, [pc, #132]	; (309c0 <lis2dh_init+0x194>)
   3093a:	e7dd      	b.n	308f8 <lis2dh_init+0xcc>
	lis2dh->scale = lis2dh_reg_val_to_scale[LIS2DH_FS_IDX];
   3093c:	4b1d      	ldr	r3, [pc, #116]	; (309b4 <lis2dh_init+0x188>)
   3093e:	681b      	ldr	r3, [r3, #0]
   30940:	f8c8 3010 	str.w	r3, [r8, #16]
	status = lis2dh->hw_tf->write_reg(dev, LIS2DH_REG_CTRL4, LIS2DH_FS_BITS | LIS2DH_HR_BIT);
   30944:	f8d8 3004 	ldr.w	r3, [r8, #4]
   30948:	2200      	movs	r2, #0
   3094a:	68db      	ldr	r3, [r3, #12]
   3094c:	2123      	movs	r1, #35	; 0x23
   3094e:	4628      	mov	r0, r5
   30950:	4798      	blx	r3
	if (status < 0) {
   30952:	1e04      	subs	r4, r0, #0
		LOG_ERR("Failed to set full scale ctrl register.");
   30954:	6833      	ldr	r3, [r6, #0]
	if (status < 0) {
   30956:	da03      	bge.n	30960 <lis2dh_init+0x134>
		LOG_ERR("Failed to set full scale ctrl register.");
   30958:	075d      	lsls	r5, r3, #29
   3095a:	d097      	beq.n	3088c <lis2dh_init+0x60>
   3095c:	4b19      	ldr	r3, [pc, #100]	; (309c4 <lis2dh_init+0x198>)
   3095e:	e7cb      	b.n	308f8 <lis2dh_init+0xcc>
	LOG_INF("fs=%d, odr=0x%x lp_en=0x%x scale=%d", 1 << (LIS2DH_FS_IDX + 1), LIS2DH_ODR_IDX,
   30960:	f003 0307 	and.w	r3, r3, #7
   30964:	2b02      	cmp	r3, #2
   30966:	d916      	bls.n	30996 <lis2dh_init+0x16a>
   30968:	466c      	mov	r4, sp
   3096a:	b08a      	sub	sp, #40	; 0x28
   3096c:	f8d8 1010 	ldr.w	r1, [r8, #16]
   30970:	466a      	mov	r2, sp
   30972:	4b15      	ldr	r3, [pc, #84]	; (309c8 <lis2dh_init+0x19c>)
   30974:	6153      	str	r3, [r2, #20]
   30976:	2002      	movs	r0, #2
   30978:	2304      	movs	r3, #4
   3097a:	e9c2 0306 	strd	r0, r3, [r2, #24]
   3097e:	2300      	movs	r3, #0
   30980:	e9c2 3108 	strd	r3, r1, [r2, #32]
   30984:	2106      	movs	r1, #6
   30986:	f842 1f10 	str.w	r1, [r2, #16]!
   3098a:	4807      	ldr	r0, [pc, #28]	; (309a8 <lis2dh_init+0x17c>)
   3098c:	f44f 5143 	mov.w	r1, #12480	; 0x30c0
   30990:	f7f5 fc0c 	bl	261ac <z_impl_z_log_msg_static_create>
   30994:	46a5      	mov	sp, r4
	return lis2dh->hw_tf->write_reg(dev, LIS2DH_REG_CTRL1,
   30996:	f8d8 3004 	ldr.w	r3, [r8, #4]
   3099a:	2247      	movs	r2, #71	; 0x47
   3099c:	68db      	ldr	r3, [r3, #12]
   3099e:	2120      	movs	r1, #32
   309a0:	4628      	mov	r0, r5
   309a2:	4798      	blx	r3
   309a4:	4604      	mov	r4, r0
   309a6:	e771      	b.n	3088c <lis2dh_init+0x60>
   309a8:	20000ac0 	.word	0x20000ac0
   309ac:	0003f386 	.word	0x0003f386
   309b0:	0003f39e 	.word	0x0003f39e
   309b4:	20000864 	.word	0x20000864
   309b8:	0001b694 	.word	0x0001b694
   309bc:	0003f3b5 	.word	0x0003f3b5
   309c0:	0003f3db 	.word	0x0003f3db
   309c4:	0003f3fb 	.word	0x0003f3fb
   309c8:	0003f423 	.word	0x0003f423

000309cc <lis2dh_attr_set.part.0>:
static int lis2dh_attr_set(const struct device *dev, enum sensor_channel chan,
   309cc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
		LOG_WRN("attr_set() not supported on this channel.");
   309ce:	480a      	ldr	r0, [pc, #40]	; (309f8 <lis2dh_attr_set.part.0+0x2c>)
   309d0:	6803      	ldr	r3, [r0, #0]
   309d2:	f013 0f06 	tst.w	r3, #6
   309d6:	d009      	beq.n	309ec <lis2dh_attr_set.part.0+0x20>
   309d8:	4b08      	ldr	r3, [pc, #32]	; (309fc <lis2dh_attr_set.part.0+0x30>)
   309da:	9305      	str	r3, [sp, #20]
   309dc:	2302      	movs	r3, #2
   309de:	9304      	str	r3, [sp, #16]
   309e0:	2300      	movs	r3, #0
   309e2:	aa04      	add	r2, sp, #16
   309e4:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   309e8:	f7f5 fbe0 	bl	261ac <z_impl_z_log_msg_static_create>
}
   309ec:	f06f 0085 	mvn.w	r0, #133	; 0x85
   309f0:	b007      	add	sp, #28
   309f2:	f85d fb04 	ldr.w	pc, [sp], #4
   309f6:	bf00      	nop
   309f8:	20000ac0 	.word	0x20000ac0
   309fc:	0003f447 	.word	0x0003f447

00030a00 <lis2dh_fetch_xyz.constprop.0>:
static int lis2dh_fetch_xyz(const struct device *dev,
   30a00:	b530      	push	{r4, r5, lr}
	struct lis2dh_data *lis2dh = dev->data;
   30a02:	6905      	ldr	r5, [r0, #16]
	status = lis2dh->hw_tf->read_data(dev, LIS2DH_REG_STATUS,
   30a04:	686b      	ldr	r3, [r5, #4]
static int lis2dh_fetch_xyz(const struct device *dev,
   30a06:	b087      	sub	sp, #28
	status = lis2dh->hw_tf->read_data(dev, LIS2DH_REG_STATUS,
   30a08:	681c      	ldr	r4, [r3, #0]
   30a0a:	f105 0208 	add.w	r2, r5, #8
   30a0e:	2307      	movs	r3, #7
   30a10:	2127      	movs	r1, #39	; 0x27
   30a12:	47a0      	blx	r4
	if (status < 0) {
   30a14:	1e04      	subs	r4, r0, #0
   30a16:	da11      	bge.n	30a3c <lis2dh_fetch_xyz.constprop.0+0x3c>
		LOG_WRN("Could not read accel axis data");
   30a18:	480b      	ldr	r0, [pc, #44]	; (30a48 <lis2dh_fetch_xyz.constprop.0+0x48>)
   30a1a:	6803      	ldr	r3, [r0, #0]
   30a1c:	f013 0f06 	tst.w	r3, #6
   30a20:	d009      	beq.n	30a36 <lis2dh_fetch_xyz.constprop.0+0x36>
   30a22:	4b0a      	ldr	r3, [pc, #40]	; (30a4c <lis2dh_fetch_xyz.constprop.0+0x4c>)
   30a24:	9305      	str	r3, [sp, #20]
   30a26:	2302      	movs	r3, #2
   30a28:	9304      	str	r3, [sp, #16]
   30a2a:	2300      	movs	r3, #0
   30a2c:	aa04      	add	r2, sp, #16
   30a2e:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   30a32:	f7f5 fbbb 	bl	261ac <z_impl_z_log_msg_static_create>
}
   30a36:	4620      	mov	r0, r4
   30a38:	b007      	add	sp, #28
   30a3a:	bd30      	pop	{r4, r5, pc}
	if (lis2dh->sample.status & LIS2DH_STATUS_DRDY_MASK) {
   30a3c:	7a2b      	ldrb	r3, [r5, #8]
		status = 0;
   30a3e:	f013 0f0f 	tst.w	r3, #15
   30a42:	bf18      	it	ne
   30a44:	2400      	movne	r4, #0
   30a46:	e7f6      	b.n	30a36 <lis2dh_fetch_xyz.constprop.0+0x36>
   30a48:	20000ac0 	.word	0x20000ac0
   30a4c:	0003f471 	.word	0x0003f471

00030a50 <lis2dh_sample_fetch>:
	if (chan == SENSOR_CHAN_ALL) {
   30a50:	2939      	cmp	r1, #57	; 0x39
{
   30a52:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (chan == SENSOR_CHAN_ALL) {
   30a54:	d104      	bne.n	30a60 <lis2dh_sample_fetch+0x10>
}
   30a56:	b007      	add	sp, #28
   30a58:	f85d eb04 	ldr.w	lr, [sp], #4
		status = lis2dh_fetch_xyz(dev, chan);
   30a5c:	f7ff bfd0 	b.w	30a00 <lis2dh_fetch_xyz.constprop.0>
	} else if (chan == SENSOR_CHAN_ACCEL_XYZ) {
   30a60:	2903      	cmp	r1, #3
   30a62:	d0f8      	beq.n	30a56 <lis2dh_sample_fetch+0x6>
	} else if (chan == SENSOR_CHAN_DIE_TEMP) {
   30a64:	290c      	cmp	r1, #12
   30a66:	d113      	bne.n	30a90 <lis2dh_sample_fetch+0x40>
	LOG_WRN("Temperature measurement disabled");
   30a68:	480e      	ldr	r0, [pc, #56]	; (30aa4 <lis2dh_sample_fetch+0x54>)
   30a6a:	6803      	ldr	r3, [r0, #0]
   30a6c:	f013 0f06 	tst.w	r3, #6
   30a70:	d009      	beq.n	30a86 <lis2dh_sample_fetch+0x36>
   30a72:	4b0d      	ldr	r3, [pc, #52]	; (30aa8 <lis2dh_sample_fetch+0x58>)
   30a74:	9305      	str	r3, [sp, #20]
   30a76:	2302      	movs	r3, #2
   30a78:	9304      	str	r3, [sp, #16]
   30a7a:	2300      	movs	r3, #0
   30a7c:	aa04      	add	r2, sp, #16
   30a7e:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   30a82:	f7f5 fb93 	bl	261ac <z_impl_z_log_msg_static_create>
}
   30a86:	f06f 0085 	mvn.w	r0, #133	; 0x85
   30a8a:	b007      	add	sp, #28
   30a8c:	f85d fb04 	ldr.w	pc, [sp], #4
		__ASSERT(false, "Invalid sensor channel in fetch");
   30a90:	4906      	ldr	r1, [pc, #24]	; (30aac <lis2dh_sample_fetch+0x5c>)
   30a92:	4807      	ldr	r0, [pc, #28]	; (30ab0 <lis2dh_sample_fetch+0x60>)
   30a94:	22b4      	movs	r2, #180	; 0xb4
   30a96:	f008 f83c 	bl	38b12 <assert_print>
   30a9a:	4804      	ldr	r0, [pc, #16]	; (30aac <lis2dh_sample_fetch+0x5c>)
   30a9c:	21b4      	movs	r1, #180	; 0xb4
   30a9e:	f008 f831 	bl	38b04 <assert_post_action>
   30aa2:	bf00      	nop
   30aa4:	20000ac0 	.word	0x20000ac0
   30aa8:	0003f490 	.word	0x0003f490
   30aac:	0003f4b1 	.word	0x0003f4b1
   30ab0:	0003d1d7 	.word	0x0003d1d7

00030ab4 <lis2dh_i2c_init>:
	.write_reg  = lis2dh_i2c_write_reg,
	.update_reg = lis2dh_i2c_update_reg,
};

int lis2dh_i2c_init(const struct device *dev)
{
   30ab4:	b510      	push	{r4, lr}
	struct lis2dh_data *data = dev->data;
	const struct lis2dh_config *cfg = dev->config;

	if (!device_is_ready(cfg->bus_cfg.i2c.bus)) {
   30ab6:	6843      	ldr	r3, [r0, #4]
	struct lis2dh_data *data = dev->data;
   30ab8:	6904      	ldr	r4, [r0, #16]
	if (!device_is_ready(cfg->bus_cfg.i2c.bus)) {
   30aba:	6858      	ldr	r0, [r3, #4]
{
   30abc:	b086      	sub	sp, #24
   30abe:	f00b f86d 	bl	3bb9c <z_device_is_ready>
	if (!device_is_ready(cfg->bus_cfg.i2c.bus)) {
   30ac2:	4603      	mov	r3, r0
   30ac4:	b988      	cbnz	r0, 30aea <lis2dh_i2c_init+0x36>
		LOG_ERR("Bus device is not ready");
   30ac6:	480b      	ldr	r0, [pc, #44]	; (30af4 <lis2dh_i2c_init+0x40>)
   30ac8:	6802      	ldr	r2, [r0, #0]
   30aca:	0752      	lsls	r2, r2, #29
   30acc:	d103      	bne.n	30ad6 <lis2dh_i2c_init+0x22>
		return -ENODEV;
   30ace:	f06f 0012 	mvn.w	r0, #18
	}

	data->hw_tf = &lis2dh_i2c_transfer_fn;

	return 0;
}
   30ad2:	b006      	add	sp, #24
   30ad4:	bd10      	pop	{r4, pc}
		LOG_ERR("Bus device is not ready");
   30ad6:	4a08      	ldr	r2, [pc, #32]	; (30af8 <lis2dh_i2c_init+0x44>)
   30ad8:	9205      	str	r2, [sp, #20]
   30ada:	2202      	movs	r2, #2
   30adc:	9204      	str	r2, [sp, #16]
   30ade:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   30ae2:	aa04      	add	r2, sp, #16
   30ae4:	f7f5 fb62 	bl	261ac <z_impl_z_log_msg_static_create>
   30ae8:	e7f1      	b.n	30ace <lis2dh_i2c_init+0x1a>
	data->hw_tf = &lis2dh_i2c_transfer_fn;
   30aea:	4b04      	ldr	r3, [pc, #16]	; (30afc <lis2dh_i2c_init+0x48>)
   30aec:	6063      	str	r3, [r4, #4]
	return 0;
   30aee:	2000      	movs	r0, #0
   30af0:	e7ef      	b.n	30ad2 <lis2dh_i2c_init+0x1e>
   30af2:	bf00      	nop
   30af4:	20000ac0 	.word	0x20000ac0
   30af8:	0003f4fe 	.word	0x0003f4fe
   30afc:	0003ccfc 	.word	0x0003ccfc

00030b00 <lps22hb_channel_get>:
}

static int lps22hb_channel_get(const struct device *dev,
			       enum sensor_channel chan,
			       struct sensor_value *val)
{
   30b00:	b530      	push	{r4, r5, lr}
	struct lps22hb_data *data = dev->data;

	if (chan == SENSOR_CHAN_PRESS) {
   30b02:	290e      	cmp	r1, #14
	struct lps22hb_data *data = dev->data;
   30b04:	6903      	ldr	r3, [r0, #16]
	if (chan == SENSOR_CHAN_PRESS) {
   30b06:	d111      	bne.n	30b2c <lps22hb_channel_get+0x2c>
		lps22hb_press_convert(val, data->sample_press);
   30b08:	6819      	ldr	r1, [r3, #0]
		(((int32_t)((raw_val) & 0x0FFF) * 100000L) >> 12);
   30b0a:	4c11      	ldr	r4, [pc, #68]	; (30b50 <lps22hb_channel_get+0x50>)
	val->val1 = (raw_val >> 12) / 10;
   30b0c:	130b      	asrs	r3, r1, #12
   30b0e:	250a      	movs	r5, #10
		(((int32_t)((raw_val) & 0x0FFF) * 100000L) >> 12);
   30b10:	f3c1 010b 	ubfx	r1, r1, #0, #12
	val->val1 = (raw_val >> 12) / 10;
   30b14:	fb93 f0f5 	sdiv	r0, r3, r5
	val->val2 = (raw_val >> 12) % 10 * 100000 +
   30b18:	fb05 3310 	mls	r3, r5, r0, r3
		(((int32_t)((raw_val) & 0x0FFF) * 100000L) >> 12);
   30b1c:	4361      	muls	r1, r4
	val->val2 = (raw_val >> 12) % 10 * 100000 +
   30b1e:	4363      	muls	r3, r4
   30b20:	eb03 3311 	add.w	r3, r3, r1, lsr #12
   30b24:	e9c2 0300 	strd	r0, r3, [r2]
		lps22hb_temp_convert(val, data->sample_temp);
	} else {
		return -ENOTSUP;
	}

	return 0;
   30b28:	2000      	movs	r0, #0
}
   30b2a:	bd30      	pop	{r4, r5, pc}
	} else if (chan == SENSOR_CHAN_AMBIENT_TEMP) {
   30b2c:	290d      	cmp	r1, #13
   30b2e:	d10c      	bne.n	30b4a <lps22hb_channel_get+0x4a>
		lps22hb_temp_convert(val, data->sample_temp);
   30b30:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
	val->val1 = raw_val / 100;
   30b34:	2464      	movs	r4, #100	; 0x64
   30b36:	fb93 f1f4 	sdiv	r1, r3, r4
	val->val2 = ((int32_t)raw_val % 100) * 10000;
   30b3a:	fb04 3311 	mls	r3, r4, r1, r3
	val->val1 = raw_val / 100;
   30b3e:	b208      	sxth	r0, r1
	val->val2 = ((int32_t)raw_val % 100) * 10000;
   30b40:	f242 7110 	movw	r1, #10000	; 0x2710
   30b44:	fb13 f301 	smulbb	r3, r3, r1
}
   30b48:	e7ec      	b.n	30b24 <lps22hb_channel_get+0x24>
		return -ENOTSUP;
   30b4a:	f06f 0085 	mvn.w	r0, #133	; 0x85
   30b4e:	e7ec      	b.n	30b2a <lps22hb_channel_get+0x2a>
   30b50:	000186a0 	.word	0x000186a0

00030b54 <lps22hb_sample_fetch>:
{
   30b54:	b530      	push	{r4, r5, lr}
	__ASSERT_NO_MSG(chan == SENSOR_CHAN_ALL);
   30b56:	2939      	cmp	r1, #57	; 0x39
	struct lps22hb_data *data = dev->data;
   30b58:	6905      	ldr	r5, [r0, #16]
	const struct lps22hb_config *config = dev->config;
   30b5a:	6843      	ldr	r3, [r0, #4]
{
   30b5c:	b08b      	sub	sp, #44	; 0x2c
	__ASSERT_NO_MSG(chan == SENSOR_CHAN_ALL);
   30b5e:	d008      	beq.n	30b72 <lps22hb_sample_fetch+0x1e>
   30b60:	491b      	ldr	r1, [pc, #108]	; (30bd0 <lps22hb_sample_fetch+0x7c>)
   30b62:	481c      	ldr	r0, [pc, #112]	; (30bd4 <lps22hb_sample_fetch+0x80>)
   30b64:	2227      	movs	r2, #39	; 0x27
   30b66:	f007 ffd4 	bl	38b12 <assert_print>
   30b6a:	4819      	ldr	r0, [pc, #100]	; (30bd0 <lps22hb_sample_fetch+0x7c>)
   30b6c:	2127      	movs	r1, #39	; 0x27
   30b6e:	f007 ffc9 	bl	38b04 <assert_post_action>
	return i2c_burst_read(spec->bus, spec->addr,
   30b72:	2228      	movs	r2, #40	; 0x28
   30b74:	f88d 2007 	strb.w	r2, [sp, #7]
	msg[0].buf = (uint8_t *)write_buf;
   30b78:	f10d 0207 	add.w	r2, sp, #7
	return i2c_burst_read(spec->bus, spec->addr,
   30b7c:	6818      	ldr	r0, [r3, #0]
	msg[0].buf = (uint8_t *)write_buf;
   30b7e:	9204      	str	r2, [sp, #16]
	msg[0].len = num_write;
   30b80:	2201      	movs	r2, #1
	return i2c_burst_read(spec->bus, spec->addr,
   30b82:	889b      	ldrh	r3, [r3, #4]
	msg[0].len = num_write;
   30b84:	9205      	str	r2, [sp, #20]
	msg[1].buf = (uint8_t *)read_buf;
   30b86:	aa02      	add	r2, sp, #8
   30b88:	9207      	str	r2, [sp, #28]
	msg[1].len = num_read;
   30b8a:	2205      	movs	r2, #5
	msg[0].flags = I2C_MSG_WRITE;
   30b8c:	2400      	movs	r4, #0
	msg[1].len = num_read;
   30b8e:	9208      	str	r2, [sp, #32]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   30b90:	2207      	movs	r2, #7
	msg[0].flags = I2C_MSG_WRITE;
   30b92:	f88d 4018 	strb.w	r4, [sp, #24]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   30b96:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
		union { uintptr_t x; uint16_t val; } parm3 = { .val = addr };
		return (int) arch_syscall_invoke4(parm0.x, parm1.x, parm2.x, parm3.x, K_SYSCALL_I2C_TRANSFER);
	}
#endif
	compiler_barrier();
	return z_impl_i2c_transfer(dev, msgs, num_msgs, addr);
   30b9a:	2202      	movs	r2, #2
   30b9c:	a904      	add	r1, sp, #16
   30b9e:	f00a fb38 	bl	3b212 <z_impl_i2c_transfer>
	if (i2c_burst_read_dt(&config->i2c, LPS22HB_REG_PRESS_OUT_XL,
   30ba2:	42a0      	cmp	r0, r4
   30ba4:	db10      	blt.n	30bc8 <lps22hb_sample_fetch+0x74>
				     ((uint32_t)(out[2]) << 16));
   30ba6:	f89d 300a 	ldrb.w	r3, [sp, #10]
				     ((uint32_t)(out[1]) << 8) |
   30baa:	f89d 2009 	ldrb.w	r2, [sp, #9]
				     ((uint32_t)(out[2]) << 16));
   30bae:	041b      	lsls	r3, r3, #16
				     ((uint32_t)(out[1]) << 8) |
   30bb0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	data->sample_press = (int32_t)((uint32_t)(out[0]) |
   30bb4:	f89d 2008 	ldrb.w	r2, [sp, #8]
				     ((uint32_t)(out[1]) << 8) |
   30bb8:	4313      	orrs	r3, r2
	data->sample_press = (int32_t)((uint32_t)(out[0]) |
   30bba:	602b      	str	r3, [r5, #0]
	data->sample_temp = (int16_t)((uint16_t)(out[3]) |
   30bbc:	f8bd 300b 	ldrh.w	r3, [sp, #11]
   30bc0:	80ab      	strh	r3, [r5, #4]
	return 0;
   30bc2:	4620      	mov	r0, r4
}
   30bc4:	b00b      	add	sp, #44	; 0x2c
   30bc6:	bd30      	pop	{r4, r5, pc}
		return -EIO;
   30bc8:	f06f 0004 	mvn.w	r0, #4
   30bcc:	e7fa      	b.n	30bc4 <lps22hb_sample_fetch+0x70>
   30bce:	bf00      	nop
   30bd0:	0003f516 	.word	0x0003f516
   30bd4:	0003d1d7 	.word	0x0003d1d7

00030bd8 <lps22hb_init.part.0>:

err_poweroff:
	return -EIO;
}

static int lps22hb_init(const struct device *dev)
   30bd8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
{
	const struct lps22hb_config * const config = dev->config;

	if (!device_is_ready(config->i2c.bus)) {
		LOG_ERR("I2C bus device not ready");
   30bda:	4809      	ldr	r0, [pc, #36]	; (30c00 <lps22hb_init.part.0+0x28>)
   30bdc:	6803      	ldr	r3, [r0, #0]
   30bde:	075b      	lsls	r3, r3, #29
   30be0:	d009      	beq.n	30bf6 <lps22hb_init.part.0+0x1e>
   30be2:	4b08      	ldr	r3, [pc, #32]	; (30c04 <lps22hb_init.part.0+0x2c>)
   30be4:	9305      	str	r3, [sp, #20]
   30be6:	2302      	movs	r3, #2
   30be8:	9304      	str	r3, [sp, #16]
   30bea:	2300      	movs	r3, #0
   30bec:	aa04      	add	r2, sp, #16
   30bee:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   30bf2:	f7f5 fadb 	bl	261ac <z_impl_z_log_msg_static_create>
		LOG_DBG("Failed to initialize chip");
		return -EIO;
	}

	return 0;
}
   30bf6:	f06f 0012 	mvn.w	r0, #18
   30bfa:	b007      	add	sp, #28
   30bfc:	f85d fb04 	ldr.w	pc, [sp], #4
   30c00:	20000a68 	.word	0x20000a68
   30c04:	0003f024 	.word	0x0003f024

00030c08 <gpio_pin_set_dt>:
{
   30c08:	b510      	push	{r4, lr}
   30c0a:	4603      	mov	r3, r0
   30c0c:	460a      	mov	r2, r1
	return gpio_pin_set(spec->port, spec->pin, value);
   30c0e:	6800      	ldr	r0, [r0, #0]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   30c10:	7919      	ldrb	r1, [r3, #4]
	const struct gpio_driver_data *const data =
   30c12:	6904      	ldr	r4, [r0, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   30c14:	2301      	movs	r3, #1
   30c16:	fa03 f101 	lsl.w	r1, r3, r1
   30c1a:	6843      	ldr	r3, [r0, #4]
   30c1c:	681b      	ldr	r3, [r3, #0]
   30c1e:	4219      	tst	r1, r3
   30c20:	d10a      	bne.n	30c38 <gpio_pin_set_dt+0x30>
   30c22:	490c      	ldr	r1, [pc, #48]	; (30c54 <gpio_pin_set_dt+0x4c>)
   30c24:	480c      	ldr	r0, [pc, #48]	; (30c58 <gpio_pin_set_dt+0x50>)
   30c26:	f240 5227 	movw	r2, #1319	; 0x527
   30c2a:	f007 ff72 	bl	38b12 <assert_print>
   30c2e:	4809      	ldr	r0, [pc, #36]	; (30c54 <gpio_pin_set_dt+0x4c>)
   30c30:	f240 5127 	movw	r1, #1319	; 0x527
   30c34:	f007 ff66 	bl	38b04 <assert_post_action>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   30c38:	6823      	ldr	r3, [r4, #0]
   30c3a:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
   30c3c:	bf18      	it	ne
   30c3e:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
   30c42:	b122      	cbz	r2, 30c4e <gpio_pin_set_dt+0x46>
	return api->port_set_bits_raw(port, pins);
   30c44:	6883      	ldr	r3, [r0, #8]
   30c46:	68db      	ldr	r3, [r3, #12]
}
   30c48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return api->port_clear_bits_raw(port, pins);
   30c4c:	4718      	bx	r3
   30c4e:	6883      	ldr	r3, [r0, #8]
   30c50:	691b      	ldr	r3, [r3, #16]
   30c52:	e7f9      	b.n	30c48 <gpio_pin_set_dt+0x40>
   30c54:	0003d1a6 	.word	0x0003d1a6
   30c58:	0003d1d7 	.word	0x0003d1d7

00030c5c <finalize_transition>:

static void finalize_transition(struct driver_data_onoff *data,
				onoff_notify_fn notify,
				uint32_t delay_us,
				int rc)
{
   30c5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const struct driver_config *cfg = data->dev->config;

	LOG_DBG("%s: finalize %d delay %u us", cfg->regulator_name, rc, delay_us);

	/* If there's no error and we have to delay, do so. */
	if ((rc >= 0) && (delay_us > 0)) {
   30c60:	1e1c      	subs	r4, r3, #0
{
   30c62:	4605      	mov	r5, r0
   30c64:	460f      	mov	r7, r1
   30c66:	4690      	mov	r8, r2
	if ((rc >= 0) && (delay_us > 0)) {
   30c68:	db10      	blt.n	30c8c <finalize_transition+0x30>
   30c6a:	b17a      	cbz	r2, 30c8c <finalize_transition+0x30>
			return (uint32_t)((t * to_hz + off) / from_hz);
   30c6c:	ea4f 4952 	mov.w	r9, r2, lsr #17
   30c70:	03d6      	lsls	r6, r2, #15
   30c72:	2300      	movs	r3, #0
   30c74:	4a1a      	ldr	r2, [pc, #104]	; (30ce0 <finalize_transition+0x84>)
   30c76:	4630      	mov	r0, r6
   30c78:	4649      	mov	r1, r9
   30c7a:	f7dc fab9 	bl	d1f0 <__aeabi_uldivmod>
		/* If the delay is less than a tick or we're not
		 * sleep-capable we have to busy-wait.
		 */
		if ((k_us_to_ticks_floor32(delay_us) == 0)
		    || k_is_pre_kernel()
   30c7e:	b110      	cbz	r0, 30c86 <finalize_transition+0x2a>
	return !z_sys_post_kernel;
   30c80:	4b18      	ldr	r3, [pc, #96]	; (30ce4 <finalize_transition+0x88>)
   30c82:	781b      	ldrb	r3, [r3, #0]
   30c84:	b943      	cbnz	r3, 30c98 <finalize_transition+0x3c>
	z_impl_k_busy_wait(usec_to_wait);
   30c86:	4640      	mov	r0, r8
   30c88:	f00b f8aa 	bl	3bde0 <z_impl_k_busy_wait>
			}
#endif /* CONFIG_MULTITHREADING */
		}
	}

	notify(&data->mgr, rc);
   30c8c:	4621      	mov	r1, r4
   30c8e:	1d28      	adds	r0, r5, #4
   30c90:	463b      	mov	r3, r7
}
   30c92:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	notify(&data->mgr, rc);
   30c96:	4718      	bx	r3
			__ASSERT_NO_MSG(data->task == WORK_TASK_UNDEFINED);
   30c98:	f895 305c 	ldrb.w	r3, [r5, #92]	; 0x5c
   30c9c:	b143      	cbz	r3, 30cb0 <finalize_transition+0x54>
   30c9e:	4912      	ldr	r1, [pc, #72]	; (30ce8 <finalize_transition+0x8c>)
   30ca0:	4812      	ldr	r0, [pc, #72]	; (30cec <finalize_transition+0x90>)
   30ca2:	226b      	movs	r2, #107	; 0x6b
   30ca4:	f007 ff35 	bl	38b12 <assert_print>
   30ca8:	480f      	ldr	r0, [pc, #60]	; (30ce8 <finalize_transition+0x8c>)
   30caa:	216b      	movs	r1, #107	; 0x6b
   30cac:	f007 ff2a 	bl	38b04 <assert_post_action>
			return ((t * to_hz + off) / from_hz);
   30cb0:	480f      	ldr	r0, [pc, #60]	; (30cf0 <finalize_transition+0x94>)
   30cb2:	4a0b      	ldr	r2, [pc, #44]	; (30ce0 <finalize_transition+0x84>)
			data->notify = notify;
   30cb4:	65af      	str	r7, [r5, #88]	; 0x58
   30cb6:	1830      	adds	r0, r6, r0
			data->task = WORK_TASK_DELAY;
   30cb8:	f04f 0303 	mov.w	r3, #3
   30cbc:	f149 0100 	adc.w	r1, r9, #0
   30cc0:	f885 305c 	strb.w	r3, [r5, #92]	; 0x5c
   30cc4:	2300      	movs	r3, #0
   30cc6:	f7dc fa93 	bl	d1f0 <__aeabi_uldivmod>
   30cca:	4602      	mov	r2, r0
   30ccc:	460b      	mov	r3, r1
			rc = k_work_schedule(&data->dwork, K_USEC(delay_us));
   30cce:	f105 0028 	add.w	r0, r5, #40	; 0x28
   30cd2:	f005 f9e3 	bl	3609c <k_work_schedule>
			if (rc >= 0) {
   30cd6:	1e04      	subs	r4, r0, #0
   30cd8:	dbd8      	blt.n	30c8c <finalize_transition+0x30>
}
   30cda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   30cde:	bf00      	nop
   30ce0:	000f4240 	.word	0x000f4240
   30ce4:	20004411 	.word	0x20004411
   30ce8:	0003f563 	.word	0x0003f563
   30cec:	0003d1d7 	.word	0x0003d1d7
   30cf0:	000f423f 	.word	0x000f423f

00030cf4 <stop>:
	return;
}

static void stop(struct onoff_manager *mgr,
		 onoff_notify_fn notify)
{
   30cf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct driver_data_onoff *data =
		CONTAINER_OF(mgr, struct driver_data_onoff, mgr);
	const struct driver_config *cfg = data->dev->config;
   30cf8:	f850 3c04 	ldr.w	r3, [r0, #-4]
{
   30cfc:	4604      	mov	r4, r0
	struct driver_data_onoff *data =
   30cfe:	1f06      	subs	r6, r0, #4
	const struct driver_config *cfg = data->dev->config;
   30d00:	6858      	ldr	r0, [r3, #4]
{
   30d02:	460d      	mov	r5, r1
	uint32_t delay_us = cfg->off_on_delay_us;
	int rc = 0;

	LOG_DBG("%s: stop", cfg->regulator_name);

	if ((cfg->options & OPTION_ALWAYS_ON) != 0) {
   30d04:	7d01      	ldrb	r1, [r0, #20]
   30d06:	f011 0101 	ands.w	r1, r1, #1
   30d0a:	d11f      	bne.n	30d4c <stop+0x58>
	uint32_t delay_us = cfg->off_on_delay_us;
   30d0c:	6887      	ldr	r7, [r0, #8]
		delay_us = 0;
		goto finalize;
	}

	rc = gpio_pin_set_dt(&cfg->enable, false);
   30d0e:	300c      	adds	r0, #12
   30d10:	f7ff ff7a 	bl	30c08 <gpio_pin_set_dt>

#ifdef CONFIG_MULTITHREADING
	if (rc == -EWOULDBLOCK) {
   30d14:	f110 0f0b 	cmn.w	r0, #11
	rc = gpio_pin_set_dt(&cfg->enable, false);
   30d18:	4603      	mov	r3, r0
	if (rc == -EWOULDBLOCK) {
   30d1a:	d119      	bne.n	30d50 <stop+0x5c>
		/* Perform the disable and finalization in a work
		 * item.
		 */
		LOG_DBG("%s: stop deferred", cfg->regulator_name);
		__ASSERT_NO_MSG(data->task == WORK_TASK_UNDEFINED);
   30d1c:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
   30d20:	b143      	cbz	r3, 30d34 <stop+0x40>
   30d22:	490f      	ldr	r1, [pc, #60]	; (30d60 <stop+0x6c>)
   30d24:	480f      	ldr	r0, [pc, #60]	; (30d64 <stop+0x70>)
   30d26:	22dc      	movs	r2, #220	; 0xdc
   30d28:	f007 fef3 	bl	38b12 <assert_print>
   30d2c:	480c      	ldr	r0, [pc, #48]	; (30d60 <stop+0x6c>)
   30d2e:	21dc      	movs	r1, #220	; 0xdc
   30d30:	f007 fee8 	bl	38b04 <assert_post_action>
		data->task = WORK_TASK_DISABLE;
   30d34:	2302      	movs	r3, #2
   30d36:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
		data->notify = notify;
   30d3a:	6565      	str	r5, [r4, #84]	; 0x54
		k_work_schedule(&data->dwork, K_NO_WAIT);
   30d3c:	f104 0024 	add.w	r0, r4, #36	; 0x24
   30d40:	2200      	movs	r2, #0

finalize:
	finalize_transition(data, notify, delay_us, rc);

	return;
}
   30d42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		k_work_schedule(&data->dwork, K_NO_WAIT);
   30d46:	2300      	movs	r3, #0
   30d48:	f005 b9a8 	b.w	3609c <k_work_schedule>
	int rc = 0;
   30d4c:	2300      	movs	r3, #0
		delay_us = 0;
   30d4e:	461f      	mov	r7, r3
	finalize_transition(data, notify, delay_us, rc);
   30d50:	463a      	mov	r2, r7
   30d52:	4629      	mov	r1, r5
   30d54:	4630      	mov	r0, r6
}
   30d56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	finalize_transition(data, notify, delay_us, rc);
   30d5a:	f7ff bf7f 	b.w	30c5c <finalize_transition>
   30d5e:	bf00      	nop
   30d60:	0003f563 	.word	0x0003f563
   30d64:	0003d1d7 	.word	0x0003d1d7

00030d68 <start>:
{
   30d68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct driver_config *cfg = data->dev->config;
   30d6c:	f850 3c04 	ldr.w	r3, [r0, #-4]
{
   30d70:	4604      	mov	r4, r0
	struct driver_data_onoff *data =
   30d72:	1f07      	subs	r7, r0, #4
	const struct driver_config *cfg = data->dev->config;
   30d74:	6858      	ldr	r0, [r3, #4]
	if ((cfg->options & OPTION_ALWAYS_ON) != 0) {
   30d76:	7d03      	ldrb	r3, [r0, #20]
   30d78:	07db      	lsls	r3, r3, #31
{
   30d7a:	460d      	mov	r5, r1
	if ((cfg->options & OPTION_ALWAYS_ON) != 0) {
   30d7c:	d420      	bmi.n	30dc0 <start+0x58>
	uint32_t delay_us = cfg->startup_delay_us;
   30d7e:	6846      	ldr	r6, [r0, #4]
	rc = gpio_pin_set_dt(&cfg->enable, true);
   30d80:	2101      	movs	r1, #1
   30d82:	300c      	adds	r0, #12
   30d84:	f7ff ff40 	bl	30c08 <gpio_pin_set_dt>
	if (rc == -EWOULDBLOCK) {
   30d88:	f110 0f0b 	cmn.w	r0, #11
	rc = gpio_pin_set_dt(&cfg->enable, true);
   30d8c:	4603      	mov	r3, r0
	if (rc == -EWOULDBLOCK) {
   30d8e:	d119      	bne.n	30dc4 <start+0x5c>
		__ASSERT_NO_MSG(data->task == WORK_TASK_UNDEFINED);
   30d90:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
   30d94:	b143      	cbz	r3, 30da8 <start+0x40>
   30d96:	490f      	ldr	r1, [pc, #60]	; (30dd4 <start+0x6c>)
   30d98:	480f      	ldr	r0, [pc, #60]	; (30dd8 <start+0x70>)
   30d9a:	22b6      	movs	r2, #182	; 0xb6
   30d9c:	f007 feb9 	bl	38b12 <assert_print>
   30da0:	480c      	ldr	r0, [pc, #48]	; (30dd4 <start+0x6c>)
   30da2:	21b6      	movs	r1, #182	; 0xb6
   30da4:	f007 feae 	bl	38b04 <assert_post_action>
		data->task = WORK_TASK_ENABLE;
   30da8:	2301      	movs	r3, #1
   30daa:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
		data->notify = notify;
   30dae:	6565      	str	r5, [r4, #84]	; 0x54
		k_work_schedule(&data->dwork, K_NO_WAIT);
   30db0:	f104 0024 	add.w	r0, r4, #36	; 0x24
   30db4:	2200      	movs	r2, #0
}
   30db6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		k_work_schedule(&data->dwork, K_NO_WAIT);
   30dba:	2300      	movs	r3, #0
   30dbc:	f005 b96e 	b.w	3609c <k_work_schedule>
	int rc = 0;
   30dc0:	2300      	movs	r3, #0
		delay_us = 0;
   30dc2:	461e      	mov	r6, r3
	finalize_transition(data, notify, delay_us, rc);
   30dc4:	4632      	mov	r2, r6
   30dc6:	4629      	mov	r1, r5
   30dc8:	4638      	mov	r0, r7
}
   30dca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	finalize_transition(data, notify, delay_us, rc);
   30dce:	f7ff bf45 	b.w	30c5c <finalize_transition>
   30dd2:	bf00      	nop
   30dd4:	0003f563 	.word	0x0003f563
   30dd8:	0003d1d7 	.word	0x0003d1d7

00030ddc <common_init.isra.0>:
static int common_init(const struct device *dev)
   30ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   30dde:	4604      	mov	r4, r0
   30de0:	af00      	add	r7, sp, #0
	if (!device_is_ready(cfg->enable.port)) {
   30de2:	68c0      	ldr	r0, [r0, #12]
   30de4:	f00a feda 	bl	3bb9c <z_device_is_ready>
   30de8:	4603      	mov	r3, r0
   30dea:	b9c8      	cbnz	r0, 30e20 <common_init.isra.0+0x44>
		LOG_ERR("GPIO port: %s not ready", cfg->enable.port->name);
   30dec:	4837      	ldr	r0, [pc, #220]	; (30ecc <common_init.isra.0+0xf0>)
   30dee:	6802      	ldr	r2, [r0, #0]
   30df0:	0751      	lsls	r1, r2, #29
   30df2:	d012      	beq.n	30e1a <common_init.isra.0+0x3e>
   30df4:	68e2      	ldr	r2, [r4, #12]
   30df6:	466c      	mov	r4, sp
   30df8:	b088      	sub	sp, #32
   30dfa:	6811      	ldr	r1, [r2, #0]
   30dfc:	466a      	mov	r2, sp
   30dfe:	4d34      	ldr	r5, [pc, #208]	; (30ed0 <common_init.isra.0+0xf4>)
   30e00:	e9c2 5105 	strd	r5, r1, [r2, #20]
   30e04:	f44f 7100 	mov.w	r1, #512	; 0x200
   30e08:	8391      	strh	r1, [r2, #28]
   30e0a:	4932      	ldr	r1, [pc, #200]	; (30ed4 <common_init.isra.0+0xf8>)
   30e0c:	f842 1f10 	str.w	r1, [r2, #16]!
   30e10:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   30e14:	f7f5 f9ca 	bl	261ac <z_impl_z_log_msg_static_create>
   30e18:	46a5      	mov	sp, r4
		return -ENODEV;
   30e1a:	f06f 0412 	mvn.w	r4, #18
   30e1e:	e052      	b.n	30ec6 <common_init.isra.0+0xea>
	if (on) {
   30e20:	7d25      	ldrb	r5, [r4, #20]
				  spec->dt_flags | extra_flags);
   30e22:	8a63      	ldrh	r3, [r4, #18]
	return gpio_pin_configure(spec->port,
   30e24:	68e0      	ldr	r0, [r4, #12]
				  spec->pin,
   30e26:	7c21      	ldrb	r1, [r4, #16]
   30e28:	f015 0503 	ands.w	r5, r5, #3
		flags = GPIO_OUTPUT_ACTIVE;
   30e2c:	bf16      	itet	ne
   30e2e:	f44f 12d0 	movne.w	r2, #1703936	; 0x1a0000
		flags = GPIO_OUTPUT_INACTIVE;
   30e32:	f44f 12b0 	moveq.w	r2, #1441792	; 0x160000
		delay_us = cfg->startup_delay_us;
   30e36:	6865      	ldrne	r5, [r4, #4]
	return gpio_pin_configure(spec->port,
   30e38:	4313      	orrs	r3, r2
	__ASSERT((flags & (GPIO_PULL_UP | GPIO_PULL_DOWN)) !=
   30e3a:	f003 0230 	and.w	r2, r3, #48	; 0x30
   30e3e:	2a30      	cmp	r2, #48	; 0x30
	__unused const struct gpio_driver_config *const cfg =
   30e40:	e9d0 4e01 	ldrd	r4, lr, [r0, #4]
	struct gpio_driver_data *data =
   30e44:	f8d0 c010 	ldr.w	ip, [r0, #16]
	__ASSERT((flags & (GPIO_PULL_UP | GPIO_PULL_DOWN)) !=
   30e48:	d10a      	bne.n	30e60 <common_init.isra.0+0x84>
   30e4a:	4923      	ldr	r1, [pc, #140]	; (30ed8 <common_init.isra.0+0xfc>)
   30e4c:	4823      	ldr	r0, [pc, #140]	; (30edc <common_init.isra.0+0x100>)
   30e4e:	f240 22c1 	movw	r2, #705	; 0x2c1
   30e52:	f007 fe5e 	bl	38b12 <assert_print>
   30e56:	f240 21c1 	movw	r1, #705	; 0x2c1
	__ASSERT_NO_MSG((flags & GPIO_SINGLE_ENDED) != 0 ||
   30e5a:	481f      	ldr	r0, [pc, #124]	; (30ed8 <common_init.isra.0+0xfc>)
   30e5c:	f007 fe52 	bl	38b04 <assert_post_action>
   30e60:	f003 0206 	and.w	r2, r3, #6
   30e64:	2a04      	cmp	r2, #4
   30e66:	d108      	bne.n	30e7a <common_init.isra.0+0x9e>
   30e68:	491b      	ldr	r1, [pc, #108]	; (30ed8 <common_init.isra.0+0xfc>)
   30e6a:	481c      	ldr	r0, [pc, #112]	; (30edc <common_init.isra.0+0x100>)
   30e6c:	f240 22c9 	movw	r2, #713	; 0x2c9
   30e70:	f007 fe4f 	bl	38b12 <assert_print>
   30e74:	f240 21c9 	movw	r1, #713	; 0x2c9
   30e78:	e7ef      	b.n	30e5a <common_init.isra.0+0x7e>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   30e7a:	6824      	ldr	r4, [r4, #0]
   30e7c:	2601      	movs	r6, #1
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
   30e7e:	07da      	lsls	r2, r3, #31
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   30e80:	fa06 f601 	lsl.w	r6, r6, r1
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
   30e84:	bf48      	it	mi
   30e86:	f483 2340 	eormi.w	r3, r3, #786432	; 0xc0000
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   30e8a:	4226      	tst	r6, r4
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
   30e8c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   30e90:	d108      	bne.n	30ea4 <common_init.isra.0+0xc8>
   30e92:	4911      	ldr	r1, [pc, #68]	; (30ed8 <common_init.isra.0+0xfc>)
   30e94:	4811      	ldr	r0, [pc, #68]	; (30edc <common_init.isra.0+0x100>)
   30e96:	f44f 7237 	mov.w	r2, #732	; 0x2dc
   30e9a:	f007 fe3a 	bl	38b12 <assert_print>
   30e9e:	f44f 7137 	mov.w	r1, #732	; 0x2dc
   30ea2:	e7da      	b.n	30e5a <common_init.isra.0+0x7e>
		data->invert |= (gpio_port_pins_t)BIT(pin);
   30ea4:	f8dc 4000 	ldr.w	r4, [ip]
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   30ea8:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
   30eaa:	bf4c      	ite	mi
   30eac:	4334      	orrmi	r4, r6
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   30eae:	43b4      	bicpl	r4, r6
   30eb0:	f8cc 4000 	str.w	r4, [ip]
	return api->pin_configure(port, pin, flags);
   30eb4:	f8de 3000 	ldr.w	r3, [lr]
   30eb8:	4798      	blx	r3
	if ((rc == 0) && (delay_us > 0)) {
   30eba:	4604      	mov	r4, r0
   30ebc:	b918      	cbnz	r0, 30ec6 <common_init.isra.0+0xea>
   30ebe:	b115      	cbz	r5, 30ec6 <common_init.isra.0+0xea>
   30ec0:	4628      	mov	r0, r5
   30ec2:	f00a ff8d 	bl	3bde0 <z_impl_k_busy_wait>
}
   30ec6:	4620      	mov	r0, r4
   30ec8:	46bd      	mov	sp, r7
   30eca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   30ecc:	20000af4 	.word	0x20000af4
   30ed0:	0003f59a 	.word	0x0003f59a
   30ed4:	01000003 	.word	0x01000003
   30ed8:	0003d1a6 	.word	0x0003d1a6
   30edc:	0003d1d7 	.word	0x0003d1d7

00030ee0 <regulator_fixed_init_sync>:
	.enable = enable_sync,
	.disable = disable_sync,
};

static int regulator_fixed_init_sync(const struct device *dev)
{
   30ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	const struct driver_config *cfg = dev->config;
   30ee2:	6846      	ldr	r6, [r0, #4]
{
   30ee4:	af00      	add	r7, sp, #0
   30ee6:	4605      	mov	r5, r0
	int rc = common_init(dev);
   30ee8:	4630      	mov	r0, r6
   30eea:	f7ff ff77 	bl	30ddc <common_init.isra.0>

	(void)regulator_fixed_init_onoff;
	(void)api_onoff;
	(void)cfg;

	__ASSERT(cfg->startup_delay_us == 0,
   30eee:	6873      	ldr	r3, [r6, #4]
	int rc = common_init(dev);
   30ef0:	4604      	mov	r4, r0
	__ASSERT(cfg->startup_delay_us == 0,
   30ef2:	b153      	cbz	r3, 30f0a <regulator_fixed_init_sync+0x2a>
   30ef4:	4918      	ldr	r1, [pc, #96]	; (30f58 <regulator_fixed_init_sync+0x78>)
   30ef6:	4819      	ldr	r0, [pc, #100]	; (30f5c <regulator_fixed_init_sync+0x7c>)
   30ef8:	f44f 72a6 	mov.w	r2, #332	; 0x14c
   30efc:	f007 fe09 	bl	38b12 <assert_print>
   30f00:	f44f 71a6 	mov.w	r1, #332	; 0x14c
		 "sync not valid with startup delay");
	__ASSERT(cfg->off_on_delay_us == 0,
   30f04:	4814      	ldr	r0, [pc, #80]	; (30f58 <regulator_fixed_init_sync+0x78>)
   30f06:	f007 fdfd 	bl	38b04 <assert_post_action>
   30f0a:	68b3      	ldr	r3, [r6, #8]
   30f0c:	b143      	cbz	r3, 30f20 <regulator_fixed_init_sync+0x40>
   30f0e:	4912      	ldr	r1, [pc, #72]	; (30f58 <regulator_fixed_init_sync+0x78>)
   30f10:	4812      	ldr	r0, [pc, #72]	; (30f5c <regulator_fixed_init_sync+0x7c>)
   30f12:	f44f 72a7 	mov.w	r2, #334	; 0x14e
   30f16:	f007 fdfc 	bl	38b12 <assert_print>
   30f1a:	f44f 71a7 	mov.w	r1, #334	; 0x14e
   30f1e:	e7f1      	b.n	30f04 <regulator_fixed_init_sync+0x24>
		 "sync not valid with shutdown delay");

	LOG_INF("%s sync: %d", dev->name, rc);
   30f20:	480f      	ldr	r0, [pc, #60]	; (30f60 <regulator_fixed_init_sync+0x80>)
   30f22:	6802      	ldr	r2, [r0, #0]
   30f24:	f002 0207 	and.w	r2, r2, #7
   30f28:	2a02      	cmp	r2, #2
   30f2a:	d912      	bls.n	30f52 <regulator_fixed_init_sync+0x72>
   30f2c:	6829      	ldr	r1, [r5, #0]
   30f2e:	466d      	mov	r5, sp
   30f30:	b08a      	sub	sp, #40	; 0x28
   30f32:	466a      	mov	r2, sp
   30f34:	4e0b      	ldr	r6, [pc, #44]	; (30f64 <regulator_fixed_init_sync+0x84>)
   30f36:	61d4      	str	r4, [r2, #28]
   30f38:	e9c2 6105 	strd	r6, r1, [r2, #20]
   30f3c:	f44f 7100 	mov.w	r1, #512	; 0x200
   30f40:	8411      	strh	r1, [r2, #32]
   30f42:	4909      	ldr	r1, [pc, #36]	; (30f68 <regulator_fixed_init_sync+0x88>)
   30f44:	f842 1f10 	str.w	r1, [r2, #16]!
   30f48:	f44f 5113 	mov.w	r1, #9408	; 0x24c0
   30f4c:	f7f5 f92e 	bl	261ac <z_impl_z_log_msg_static_create>
   30f50:	46ad      	mov	sp, r5

	return rc;
}
   30f52:	4620      	mov	r0, r4
   30f54:	46bd      	mov	sp, r7
   30f56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   30f58:	0003f563 	.word	0x0003f563
   30f5c:	0003d1d7 	.word	0x0003d1d7
   30f60:	20000af4 	.word	0x20000af4
   30f64:	0003f5b2 	.word	0x0003f5b2
   30f68:	01000004 	.word	0x01000004

00030f6c <regulator_fixed_init_onoff>:
{
   30f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct driver_data_onoff *data = dev->data;
   30f6e:	6905      	ldr	r5, [r0, #16]
	rc = onoff_manager_init(&data->mgr, &transitions);
   30f70:	491d      	ldr	r1, [pc, #116]	; (30fe8 <regulator_fixed_init_onoff+0x7c>)
{
   30f72:	4604      	mov	r4, r0
	data->dev = dev;
   30f74:	4628      	mov	r0, r5
{
   30f76:	af00      	add	r7, sp, #0
	data->dev = dev;
   30f78:	f840 4b04 	str.w	r4, [r0], #4
	rc = onoff_manager_init(&data->mgr, &transitions);
   30f7c:	f007 fd3e 	bl	389fc <onoff_manager_init>
	__ASSERT_NO_MSG(rc == 0);
   30f80:	4606      	mov	r6, r0
   30f82:	b150      	cbz	r0, 30f9a <regulator_fixed_init_onoff+0x2e>
   30f84:	4919      	ldr	r1, [pc, #100]	; (30fec <regulator_fixed_init_onoff+0x80>)
   30f86:	481a      	ldr	r0, [pc, #104]	; (30ff0 <regulator_fixed_init_onoff+0x84>)
   30f88:	f240 1207 	movw	r2, #263	; 0x107
   30f8c:	f007 fdc1 	bl	38b12 <assert_print>
   30f90:	4816      	ldr	r0, [pc, #88]	; (30fec <regulator_fixed_init_onoff+0x80>)
   30f92:	f240 1107 	movw	r1, #263	; 0x107
   30f96:	f007 fdb5 	bl	38b04 <assert_post_action>
	k_work_init_delayable(&data->dwork, onoff_worker);
   30f9a:	f105 0028 	add.w	r0, r5, #40	; 0x28
   30f9e:	4915      	ldr	r1, [pc, #84]	; (30ff4 <regulator_fixed_init_onoff+0x88>)
   30fa0:	f004 fff6 	bl	35f90 <k_work_init_delayable>
	rc = common_init(dev);
   30fa4:	6860      	ldr	r0, [r4, #4]
   30fa6:	f7ff ff19 	bl	30ddc <common_init.isra.0>
	if (rc >= 0) {
   30faa:	ea00 75e0 	and.w	r5, r0, r0, asr #31
	LOG_INF("%s onoff: %d", dev->name, rc);
   30fae:	4812      	ldr	r0, [pc, #72]	; (30ff8 <regulator_fixed_init_onoff+0x8c>)
   30fb0:	6803      	ldr	r3, [r0, #0]
   30fb2:	f003 0307 	and.w	r3, r3, #7
   30fb6:	2b02      	cmp	r3, #2
   30fb8:	d913      	bls.n	30fe2 <regulator_fixed_init_onoff+0x76>
   30fba:	6823      	ldr	r3, [r4, #0]
   30fbc:	466c      	mov	r4, sp
   30fbe:	b08a      	sub	sp, #40	; 0x28
   30fc0:	466a      	mov	r2, sp
   30fc2:	490e      	ldr	r1, [pc, #56]	; (30ffc <regulator_fixed_init_onoff+0x90>)
   30fc4:	61d5      	str	r5, [r2, #28]
   30fc6:	e9c2 1305 	strd	r1, r3, [r2, #20]
   30fca:	f44f 7300 	mov.w	r3, #512	; 0x200
   30fce:	8413      	strh	r3, [r2, #32]
   30fd0:	4b0b      	ldr	r3, [pc, #44]	; (31000 <regulator_fixed_init_onoff+0x94>)
   30fd2:	f842 3f10 	str.w	r3, [r2, #16]!
   30fd6:	f44f 5113 	mov.w	r1, #9408	; 0x24c0
   30fda:	4633      	mov	r3, r6
   30fdc:	f7f5 f8e6 	bl	261ac <z_impl_z_log_msg_static_create>
   30fe0:	46a5      	mov	sp, r4
}
   30fe2:	4628      	mov	r0, r5
   30fe4:	46bd      	mov	sp, r7
   30fe6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   30fe8:	0003cd6c 	.word	0x0003cd6c
   30fec:	0003f563 	.word	0x0003f563
   30ff0:	0003d1d7 	.word	0x0003d1d7
   30ff4:	0003b41b 	.word	0x0003b41b
   30ff8:	20000af4 	.word	0x20000af4
   30ffc:	0003f5be 	.word	0x0003f5be
   31000:	01000004 	.word	0x01000004

00031004 <flash_nrf_pages_layout>:

static void flash_nrf_pages_layout(const struct device *dev,
				     const struct flash_pages_layout **layout,
				     size_t *layout_size)
{
	*layout = &dev_layout;
   31004:	4b02      	ldr	r3, [pc, #8]	; (31010 <flash_nrf_pages_layout+0xc>)
   31006:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
   31008:	2301      	movs	r3, #1
   3100a:	6013      	str	r3, [r2, #0]
}
   3100c:	4770      	bx	lr
   3100e:	bf00      	nop
   31010:	20003140 	.word	0x20003140

00031014 <flash_nrf_get_parameters>:
flash_nrf_get_parameters(const struct device *dev)
{
	ARG_UNUSED(dev);

	return &flash_nrf_parameters;
}
   31014:	4800      	ldr	r0, [pc, #0]	; (31018 <flash_nrf_get_parameters+0x4>)
   31016:	4770      	bx	lr
   31018:	0003cd8c 	.word	0x0003cd8c

0003101c <flash_nrf_read.part.0>:
static int flash_nrf_read(const struct device *dev, off_t addr,
   3101c:	b5b0      	push	{r4, r5, r7, lr}
   3101e:	4603      	mov	r3, r0
		LOG_ERR("invalid address: 0x%08lx:%zu",
   31020:	480c      	ldr	r0, [pc, #48]	; (31054 <flash_nrf_read.part.0+0x38>)
   31022:	6802      	ldr	r2, [r0, #0]
   31024:	0752      	lsls	r2, r2, #29
static int flash_nrf_read(const struct device *dev, off_t addr,
   31026:	af00      	add	r7, sp, #0
		LOG_ERR("invalid address: 0x%08lx:%zu",
   31028:	d00f      	beq.n	3104a <flash_nrf_read.part.0+0x2e>
   3102a:	466c      	mov	r4, sp
   3102c:	b088      	sub	sp, #32
   3102e:	466a      	mov	r2, sp
   31030:	4d09      	ldr	r5, [pc, #36]	; (31058 <flash_nrf_read.part.0+0x3c>)
   31032:	61d1      	str	r1, [r2, #28]
   31034:	e9c2 5305 	strd	r5, r3, [r2, #20]
   31038:	2304      	movs	r3, #4
   3103a:	f842 3f10 	str.w	r3, [r2, #16]!
   3103e:	2300      	movs	r3, #0
   31040:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   31044:	f7f5 f8b2 	bl	261ac <z_impl_z_log_msg_static_create>
   31048:	46a5      	mov	sp, r4
}
   3104a:	f06f 0015 	mvn.w	r0, #21
   3104e:	46bd      	mov	sp, r7
   31050:	bdb0      	pop	{r4, r5, r7, pc}
   31052:	bf00      	nop
   31054:	20000ab0 	.word	0x20000ab0
   31058:	0003f5f5 	.word	0x0003f5f5

0003105c <nrf_flash_init>:
	.page_layout = flash_nrf_pages_layout,
#endif
};

static int nrf_flash_init(const struct device *dev)
{
   3105c:	b510      	push	{r4, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   3105e:	2201      	movs	r2, #1
   31060:	4611      	mov	r1, r2
   31062:	4807      	ldr	r0, [pc, #28]	; (31080 <nrf_flash_init+0x24>)
#ifndef CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE
	nrf_flash_sync_init();
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

#if defined(CONFIG_FLASH_PAGE_LAYOUT)
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
   31064:	4c07      	ldr	r4, [pc, #28]	; (31084 <nrf_flash_init+0x28>)
   31066:	f00a fe10 	bl	3bc8a <z_impl_k_sem_init>
	nrf_flash_sync_init();
   3106a:	f002 f8db 	bl	33224 <nrf_flash_sync_init>
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
   3106e:	f00a fc8b 	bl	3b988 <nrfx_nvmc_flash_page_count_get>
   31072:	6020      	str	r0, [r4, #0]
	dev_layout.pages_size = nrfx_nvmc_flash_page_size_get();
   31074:	f00a fc84 	bl	3b980 <nrfx_nvmc_flash_page_size_get>
   31078:	6060      	str	r0, [r4, #4]
#endif

	return 0;
}
   3107a:	2000      	movs	r0, #0
   3107c:	bd10      	pop	{r4, pc}
   3107e:	bf00      	nop
   31080:	20003148 	.word	0x20003148
   31084:	20003140 	.word	0x20003140

00031088 <write_op>:
	w_ctx->data_addr += shift;
	w_ctx->len -= shift;
}

static int write_op(void *context)
{
   31088:	b538      	push	{r3, r4, r5, lr}
	struct flash_context *w_ctx = context;

#ifndef CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE
	uint32_t i = 1U;

	if (w_ctx->enable_time_limit) {
   3108a:	7b03      	ldrb	r3, [r0, #12]
{
   3108c:	4604      	mov	r4, r0
	if (w_ctx->enable_time_limit) {
   3108e:	b10b      	cbz	r3, 31094 <write_op+0xc>
		nrf_flash_sync_get_timestamp_begin();
   31090:	f00a fbc7 	bl	3b822 <nrf_flash_sync_get_timestamp_begin>
{
   31094:	2501      	movs	r5, #1
		}
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */
	}
#endif /* CONFIG_SOC_FLASH_NRF_EMULATE_ONE_BYTE_WRITE_ACCESS */
	/* Write all the 4-byte aligned data */
	while (w_ctx->len >= sizeof(uint32_t)) {
   31096:	68a3      	ldr	r3, [r4, #8]
   31098:	2b03      	cmp	r3, #3
   3109a:	d806      	bhi.n	310aa <write_op+0x22>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrf_nvmc_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   3109c:	4a12      	ldr	r2, [pc, #72]	; (310e8 <write_op+0x60>)
   3109e:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
   310a2:	07db      	lsls	r3, r3, #31
   310a4:	d5fb      	bpl.n	3109e <write_op+0x16>
		shift_write_context(w_ctx->len, w_ctx);
	}
#endif /* CONFIG_SOC_FLASH_NRF_EMULATE_ONE_BYTE_WRITE_ACCESS */
	nvmc_wait_ready();

	return FLASH_OP_DONE;
   310a6:	2000      	movs	r0, #0
}
   310a8:	bd38      	pop	{r3, r4, r5, pc}
				     UNALIGNED_GET((uint32_t *)w_ctx->data_addr));
   310aa:	6823      	ldr	r3, [r4, #0]
		nrfx_nvmc_word_write(w_ctx->flash_addr,
   310ac:	6860      	ldr	r0, [r4, #4]
   310ae:	6819      	ldr	r1, [r3, #0]
   310b0:	f002 ff5a 	bl	33f68 <nrfx_nvmc_word_write>
	w_ctx->flash_addr += shift;
   310b4:	6863      	ldr	r3, [r4, #4]
   310b6:	3304      	adds	r3, #4
   310b8:	6063      	str	r3, [r4, #4]
	w_ctx->data_addr += shift;
   310ba:	6823      	ldr	r3, [r4, #0]
   310bc:	3304      	adds	r3, #4
   310be:	6023      	str	r3, [r4, #0]
	w_ctx->len -= shift;
   310c0:	68a3      	ldr	r3, [r4, #8]
   310c2:	3b04      	subs	r3, #4
   310c4:	60a3      	str	r3, [r4, #8]
		if (w_ctx->enable_time_limit) {
   310c6:	7b23      	ldrb	r3, [r4, #12]
		i++;
   310c8:	3501      	adds	r5, #1
		if (w_ctx->enable_time_limit) {
   310ca:	2b00      	cmp	r3, #0
   310cc:	d0e3      	beq.n	31096 <write_op+0xe>
			if (nrf_flash_sync_check_time_limit(i)) {
   310ce:	4628      	mov	r0, r5
   310d0:	f002 f982 	bl	333d8 <nrf_flash_sync_check_time_limit>
   310d4:	2800      	cmp	r0, #0
   310d6:	d0de      	beq.n	31096 <write_op+0xe>
   310d8:	4a03      	ldr	r2, [pc, #12]	; (310e8 <write_op+0x60>)
   310da:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
   310de:	07d9      	lsls	r1, r3, #31
   310e0:	d5fb      	bpl.n	310da <write_op+0x52>
				return FLASH_OP_ONGOING;
   310e2:	2001      	movs	r0, #1
   310e4:	e7e0      	b.n	310a8 <write_op+0x20>
   310e6:	bf00      	nop
   310e8:	4001e000 	.word	0x4001e000

000310ec <flash_nrf_erase>:
{
   310ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   310f0:	b086      	sub	sp, #24
   310f2:	af00      	add	r7, sp, #0
   310f4:	460e      	mov	r6, r1
   310f6:	4615      	mov	r5, r2
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   310f8:	f00a fc42 	bl	3b980 <nrfx_nvmc_flash_page_size_get>
	if (is_regular_addr_valid(addr, size)) {
   310fc:	4629      	mov	r1, r5
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   310fe:	4680      	mov	r8, r0
	if (is_regular_addr_valid(addr, size)) {
   31100:	4630      	mov	r0, r6
   31102:	f00a f9d8 	bl	3b4b6 <is_regular_addr_valid>
   31106:	4603      	mov	r3, r0
   31108:	2800      	cmp	r0, #0
   3110a:	d03c      	beq.n	31186 <flash_nrf_erase+0x9a>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
   3110c:	fbb6 f3f8 	udiv	r3, r6, r8
   31110:	fb08 6313 	mls	r3, r8, r3, r6
   31114:	b923      	cbnz	r3, 31120 <flash_nrf_erase+0x34>
   31116:	fbb5 f4f8 	udiv	r4, r5, r8
   3111a:	fb08 5414 	mls	r4, r8, r4, r5
   3111e:	b1d4      	cbz	r4, 31156 <flash_nrf_erase+0x6a>
			LOG_ERR("unaligned address: 0x%08lx:%zu",
   31120:	482c      	ldr	r0, [pc, #176]	; (311d4 <flash_nrf_erase+0xe8>)
   31122:	6803      	ldr	r3, [r0, #0]
   31124:	0759      	lsls	r1, r3, #29
   31126:	d00f      	beq.n	31148 <flash_nrf_erase+0x5c>
   31128:	466c      	mov	r4, sp
   3112a:	b088      	sub	sp, #32
   3112c:	466a      	mov	r2, sp
   3112e:	4b2a      	ldr	r3, [pc, #168]	; (311d8 <flash_nrf_erase+0xec>)
   31130:	61d5      	str	r5, [r2, #28]
   31132:	e9c2 3605 	strd	r3, r6, [r2, #20]
   31136:	2304      	movs	r3, #4
   31138:	f842 3f10 	str.w	r3, [r2, #16]!
   3113c:	2300      	movs	r3, #0
   3113e:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   31142:	f7f5 f833 	bl	261ac <z_impl_z_log_msg_static_create>
   31146:	46a5      	mov	sp, r4
			return -EINVAL;
   31148:	f06f 0415 	mvn.w	r4, #21
}
   3114c:	4620      	mov	r0, r4
   3114e:	3718      	adds	r7, #24
   31150:	46bd      	mov	sp, r7
   31152:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!n_pages) {
   31156:	45a8      	cmp	r8, r5
   31158:	d8f8      	bhi.n	3114c <flash_nrf_erase+0x60>
	return z_impl_k_sem_take(sem, timeout);
   3115a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   3115e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   31162:	481e      	ldr	r0, [pc, #120]	; (311dc <flash_nrf_erase+0xf0>)
   31164:	f004 fb5a 	bl	3581c <z_impl_k_sem_take>
	if (nrf_flash_sync_is_required()) {
   31168:	f00a fb59 	bl	3b81e <nrf_flash_sync_is_required>
   3116c:	f107 0308 	add.w	r3, r7, #8
   31170:	4601      	mov	r1, r0
   31172:	b9b8      	cbnz	r0, 311a4 <flash_nrf_erase+0xb8>

static int erase(uint32_t addr, uint32_t size)
{
	struct flash_context context = {
   31174:	2210      	movs	r2, #16
   31176:	4618      	mov	r0, r3
   31178:	f008 f925 	bl	393c6 <memset>
   3117c:	e9c7 6503 	strd	r6, r5, [r7, #12]
#if defined(CONFIG_SOC_FLASH_NRF_PARTIAL_ERASE)
		.flash_addr_next = addr
#endif
	};

	return	erase_op(&context);
   31180:	f00a f975 	bl	3b46e <erase_op>
   31184:	e020      	b.n	311c8 <flash_nrf_erase+0xdc>
		LOG_ERR("invalid address: 0x%08lx:%zu",
   31186:	4813      	ldr	r0, [pc, #76]	; (311d4 <flash_nrf_erase+0xe8>)
   31188:	6802      	ldr	r2, [r0, #0]
   3118a:	0752      	lsls	r2, r2, #29
   3118c:	d0dc      	beq.n	31148 <flash_nrf_erase+0x5c>
   3118e:	466c      	mov	r4, sp
   31190:	b088      	sub	sp, #32
   31192:	466a      	mov	r2, sp
   31194:	4912      	ldr	r1, [pc, #72]	; (311e0 <flash_nrf_erase+0xf4>)
   31196:	61d5      	str	r5, [r2, #28]
   31198:	e9c2 1605 	strd	r1, r6, [r2, #20]
   3119c:	2104      	movs	r1, #4
   3119e:	f842 1f10 	str.w	r1, [r2, #16]!
   311a2:	e7cc      	b.n	3113e <flash_nrf_erase+0x52>
	struct flash_context context = {
   311a4:	2210      	movs	r2, #16
   311a6:	4621      	mov	r1, r4
   311a8:	4618      	mov	r0, r3
   311aa:	f008 f90c 	bl	393c6 <memset>
   311ae:	2201      	movs	r2, #1
   311b0:	753a      	strb	r2, [r7, #20]
	struct flash_op_desc flash_op_desc = {
   311b2:	4a0c      	ldr	r2, [pc, #48]	; (311e4 <flash_nrf_erase+0xf8>)
	struct flash_context context = {
   311b4:	e9c7 6503 	strd	r6, r5, [r7, #12]
	struct flash_op_desc flash_op_desc = {
   311b8:	e9c7 2000 	strd	r2, r0, [r7]
	nrf_flash_sync_set_context(FLASH_SLOT_ERASE);
   311bc:	480a      	ldr	r0, [pc, #40]	; (311e8 <flash_nrf_erase+0xfc>)
   311be:	f002 f839 	bl	33234 <nrf_flash_sync_set_context>
	return nrf_flash_sync_exe(&flash_op_desc);
   311c2:	4638      	mov	r0, r7
   311c4:	f002 f83c 	bl	33240 <nrf_flash_sync_exe>
	return	erase_op(&context);
   311c8:	4604      	mov	r4, r0
	z_impl_k_sem_give(sem);
   311ca:	4804      	ldr	r0, [pc, #16]	; (311dc <flash_nrf_erase+0xf0>)
   311cc:	f004 faec 	bl	357a8 <z_impl_k_sem_give>
}
   311d0:	e7bc      	b.n	3114c <flash_nrf_erase+0x60>
   311d2:	bf00      	nop
   311d4:	20000ab0 	.word	0x20000ab0
   311d8:	0003f612 	.word	0x0003f612
   311dc:	20003148 	.word	0x20003148
   311e0:	0003f5f5 	.word	0x0003f5f5
   311e4:	0003b46f 	.word	0x0003b46f
   311e8:	00015e64 	.word	0x00015e64

000311ec <flash_nrf_write>:
{
   311ec:	b5f0      	push	{r4, r5, r6, r7, lr}
   311ee:	460d      	mov	r5, r1
   311f0:	b087      	sub	sp, #28
	if (is_regular_addr_valid(addr, len)) {
   311f2:	4619      	mov	r1, r3
{
   311f4:	af00      	add	r7, sp, #0
	if (is_regular_addr_valid(addr, len)) {
   311f6:	4628      	mov	r0, r5
{
   311f8:	461c      	mov	r4, r3
   311fa:	4616      	mov	r6, r2
	if (is_regular_addr_valid(addr, len)) {
   311fc:	f00a f95b 	bl	3b4b6 <is_regular_addr_valid>
   31200:	4603      	mov	r3, r0
   31202:	b9c0      	cbnz	r0, 31236 <flash_nrf_write+0x4a>
		LOG_ERR("invalid address: 0x%08lx:%zu",
   31204:	4829      	ldr	r0, [pc, #164]	; (312ac <flash_nrf_write+0xc0>)
   31206:	6802      	ldr	r2, [r0, #0]
   31208:	0751      	lsls	r1, r2, #29
   3120a:	d00e      	beq.n	3122a <flash_nrf_write+0x3e>
   3120c:	466e      	mov	r6, sp
   3120e:	b088      	sub	sp, #32
   31210:	466a      	mov	r2, sp
   31212:	4927      	ldr	r1, [pc, #156]	; (312b0 <flash_nrf_write+0xc4>)
   31214:	61d4      	str	r4, [r2, #28]
   31216:	e9c2 1505 	strd	r1, r5, [r2, #20]
   3121a:	2104      	movs	r1, #4
   3121c:	f842 1f10 	str.w	r1, [r2, #16]!
   31220:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   31224:	f7f4 ffc2 	bl	261ac <z_impl_z_log_msg_static_create>
   31228:	46b5      	mov	sp, r6
		return -EINVAL;
   3122a:	f06f 0415 	mvn.w	r4, #21
}
   3122e:	4620      	mov	r0, r4
   31230:	371c      	adds	r7, #28
   31232:	46bd      	mov	sp, r7
   31234:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!is_aligned_32(addr) || (len % sizeof(uint32_t))) {
   31236:	ea45 0304 	orr.w	r3, r5, r4
   3123a:	079a      	lsls	r2, r3, #30
   3123c:	d00f      	beq.n	3125e <flash_nrf_write+0x72>
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
   3123e:	481b      	ldr	r0, [pc, #108]	; (312ac <flash_nrf_write+0xc0>)
   31240:	6803      	ldr	r3, [r0, #0]
   31242:	075b      	lsls	r3, r3, #29
   31244:	d0f1      	beq.n	3122a <flash_nrf_write+0x3e>
   31246:	466e      	mov	r6, sp
   31248:	b088      	sub	sp, #32
   3124a:	466a      	mov	r2, sp
   3124c:	4b19      	ldr	r3, [pc, #100]	; (312b4 <flash_nrf_write+0xc8>)
   3124e:	61d4      	str	r4, [r2, #28]
   31250:	e9c2 3505 	strd	r3, r5, [r2, #20]
   31254:	2304      	movs	r3, #4
   31256:	f842 3f10 	str.w	r3, [r2, #16]!
   3125a:	2300      	movs	r3, #0
   3125c:	e7e0      	b.n	31220 <flash_nrf_write+0x34>
	if (!len) {
   3125e:	2c00      	cmp	r4, #0
   31260:	d0e5      	beq.n	3122e <flash_nrf_write+0x42>
	return z_impl_k_sem_take(sem, timeout);
   31262:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   31266:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   3126a:	4813      	ldr	r0, [pc, #76]	; (312b8 <flash_nrf_write+0xcc>)
   3126c:	f004 fad6 	bl	3581c <z_impl_k_sem_take>
	if (nrf_flash_sync_is_required()) {
   31270:	f00a fad5 	bl	3b81e <nrf_flash_sync_is_required>
   31274:	4603      	mov	r3, r0
	struct flash_context context = {
   31276:	e9c7 6502 	strd	r6, r5, [r7, #8]
   3127a:	f107 0008 	add.w	r0, r7, #8
   3127e:	613c      	str	r4, [r7, #16]
	if (nrf_flash_sync_is_required()) {
   31280:	b183      	cbz	r3, 312a4 <flash_nrf_write+0xb8>
	struct flash_context context = {
   31282:	2301      	movs	r3, #1
   31284:	753b      	strb	r3, [r7, #20]
	struct flash_op_desc flash_op_desc = {
   31286:	4b0d      	ldr	r3, [pc, #52]	; (312bc <flash_nrf_write+0xd0>)
   31288:	e9c7 3000 	strd	r3, r0, [r7]
	nrf_flash_sync_set_context(FLASH_SLOT_WRITE);
   3128c:	f641 504c 	movw	r0, #7500	; 0x1d4c
   31290:	f001 ffd0 	bl	33234 <nrf_flash_sync_set_context>
	return nrf_flash_sync_exe(&flash_op_desc);
   31294:	4638      	mov	r0, r7
   31296:	f001 ffd3 	bl	33240 <nrf_flash_sync_exe>
#ifndef CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE
		.enable_time_limit = 0 /* disable time limit */
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */
	};

	return write_op(&context);
   3129a:	4604      	mov	r4, r0
	z_impl_k_sem_give(sem);
   3129c:	4806      	ldr	r0, [pc, #24]	; (312b8 <flash_nrf_write+0xcc>)
   3129e:	f004 fa83 	bl	357a8 <z_impl_k_sem_give>
}
   312a2:	e7c4      	b.n	3122e <flash_nrf_write+0x42>
	struct flash_context context = {
   312a4:	753b      	strb	r3, [r7, #20]
	return write_op(&context);
   312a6:	f7ff feef 	bl	31088 <write_op>
   312aa:	e7f6      	b.n	3129a <flash_nrf_write+0xae>
   312ac:	20000ab0 	.word	0x20000ab0
   312b0:	0003f5f5 	.word	0x0003f5f5
   312b4:	0003f631 	.word	0x0003f631
   312b8:	20003148 	.word	0x20003148
   312bc:	00031089 	.word	0x00031089

000312c0 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
   312c0:	b570      	push	{r4, r5, r6, lr}
		break;
	default:
		return -ENOTSUP;
	}
#else
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
   312c2:	794b      	ldrb	r3, [r1, #5]
   312c4:	2b01      	cmp	r3, #1
   312c6:	d120      	bne.n	3130a <uarte_nrfx_configure+0x4a>
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   312c8:	798b      	ldrb	r3, [r1, #6]
   312ca:	2b03      	cmp	r3, #3
   312cc:	d11d      	bne.n	3130a <uarte_nrfx_configure+0x4a>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   312ce:	79cd      	ldrb	r5, [r1, #7]
   312d0:	b10d      	cbz	r5, 312d6 <uarte_nrfx_configure+0x16>
   312d2:	2d01      	cmp	r5, #1
   312d4:	d119      	bne.n	3130a <uarte_nrfx_configure+0x4a>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   312d6:	790a      	ldrb	r2, [r1, #4]
   312d8:	b112      	cbz	r2, 312e0 <uarte_nrfx_configure+0x20>
   312da:	2a02      	cmp	r2, #2
   312dc:	d115      	bne.n	3130a <uarte_nrfx_configure+0x4a>
   312de:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   312e0:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   312e2:	6844      	ldr	r4, [r0, #4]
	switch (baudrate) {
   312e4:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
   312e8:	6826      	ldr	r6, [r4, #0]
	switch (baudrate) {
   312ea:	d064      	beq.n	313b6 <uarte_nrfx_configure+0xf6>
   312ec:	d82b      	bhi.n	31346 <uarte_nrfx_configure+0x86>
   312ee:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   312f2:	d063      	beq.n	313bc <uarte_nrfx_configure+0xfc>
   312f4:	d814      	bhi.n	31320 <uarte_nrfx_configure+0x60>
   312f6:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   312fa:	d061      	beq.n	313c0 <uarte_nrfx_configure+0x100>
   312fc:	d808      	bhi.n	31310 <uarte_nrfx_configure+0x50>
   312fe:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   31302:	d060      	beq.n	313c6 <uarte_nrfx_configure+0x106>
   31304:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   31308:	d060      	beq.n	313cc <uarte_nrfx_configure+0x10c>
   3130a:	f06f 0085 	mvn.w	r0, #133	; 0x85
   3130e:	e051      	b.n	313b4 <uarte_nrfx_configure+0xf4>
   31310:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   31314:	d05d      	beq.n	313d2 <uarte_nrfx_configure+0x112>
   31316:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   3131a:	d1f6      	bne.n	3130a <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   3131c:	4b37      	ldr	r3, [pc, #220]	; (313fc <uarte_nrfx_configure+0x13c>)
   3131e:	e03c      	b.n	3139a <uarte_nrfx_configure+0xda>
	switch (baudrate) {
   31320:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   31324:	d058      	beq.n	313d8 <uarte_nrfx_configure+0x118>
   31326:	d807      	bhi.n	31338 <uarte_nrfx_configure+0x78>
   31328:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   3132c:	d056      	beq.n	313dc <uarte_nrfx_configure+0x11c>
   3132e:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   31332:	d1ea      	bne.n	3130a <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   31334:	4b32      	ldr	r3, [pc, #200]	; (31400 <uarte_nrfx_configure+0x140>)
   31336:	e030      	b.n	3139a <uarte_nrfx_configure+0xda>
	switch (baudrate) {
   31338:	f647 2412 	movw	r4, #31250	; 0x7a12
   3133c:	42a3      	cmp	r3, r4
   3133e:	d1e4      	bne.n	3130a <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   31340:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   31344:	e029      	b.n	3139a <uarte_nrfx_configure+0xda>
	switch (baudrate) {
   31346:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   3134a:	d049      	beq.n	313e0 <uarte_nrfx_configure+0x120>
   3134c:	d813      	bhi.n	31376 <uarte_nrfx_configure+0xb6>
   3134e:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   31352:	d048      	beq.n	313e6 <uarte_nrfx_configure+0x126>
   31354:	d809      	bhi.n	3136a <uarte_nrfx_configure+0xaa>
   31356:	f64d 24c0 	movw	r4, #56000	; 0xdac0
   3135a:	42a3      	cmp	r3, r4
   3135c:	d045      	beq.n	313ea <uarte_nrfx_configure+0x12a>
   3135e:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   31362:	d1d2      	bne.n	3130a <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   31364:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   31368:	e017      	b.n	3139a <uarte_nrfx_configure+0xda>
	switch (baudrate) {
   3136a:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   3136e:	d1cc      	bne.n	3130a <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   31370:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   31374:	e011      	b.n	3139a <uarte_nrfx_configure+0xda>
	switch (baudrate) {
   31376:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   3137a:	d039      	beq.n	313f0 <uarte_nrfx_configure+0x130>
   3137c:	d808      	bhi.n	31390 <uarte_nrfx_configure+0xd0>
   3137e:	4c21      	ldr	r4, [pc, #132]	; (31404 <uarte_nrfx_configure+0x144>)
   31380:	42a3      	cmp	r3, r4
   31382:	d038      	beq.n	313f6 <uarte_nrfx_configure+0x136>
   31384:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   31388:	d1bf      	bne.n	3130a <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   3138a:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   3138e:	e004      	b.n	3139a <uarte_nrfx_configure+0xda>
	switch (baudrate) {
   31390:	4c1d      	ldr	r4, [pc, #116]	; (31408 <uarte_nrfx_configure+0x148>)
   31392:	42a3      	cmp	r3, r4
   31394:	d1b9      	bne.n	3130a <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   31396:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uarte_nrfx_data *data = dev->data;
   3139a:	6904      	ldr	r4, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   3139c:	f8c6 3524 	str.w	r3, [r6, #1316]	; 0x524
	return config->uarte_regs;
   313a0:	6843      	ldr	r3, [r0, #4]
   313a2:	681b      	ldr	r3, [r3, #0]
                    | (uint32_t)p_cfg->hwfc;
   313a4:	432a      	orrs	r2, r5
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   313a6:	f8c3 256c 	str.w	r2, [r3, #1388]	; 0x56c
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	data->uart_config = *cfg;
   313aa:	c903      	ldmia	r1, {r0, r1}
   313ac:	1d23      	adds	r3, r4, #4
   313ae:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   313b2:	2000      	movs	r0, #0
}
   313b4:	bd70      	pop	{r4, r5, r6, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   313b6:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   313ba:	e7ee      	b.n	3139a <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   313bc:	4b13      	ldr	r3, [pc, #76]	; (3140c <uarte_nrfx_configure+0x14c>)
   313be:	e7ec      	b.n	3139a <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   313c0:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   313c4:	e7e9      	b.n	3139a <uarte_nrfx_configure+0xda>
		nrf_baudrate = 0x00014000;
   313c6:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   313ca:	e7e6      	b.n	3139a <uarte_nrfx_configure+0xda>
	switch (baudrate) {
   313cc:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   313d0:	e7e3      	b.n	3139a <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   313d2:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   313d6:	e7e0      	b.n	3139a <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   313d8:	4b0d      	ldr	r3, [pc, #52]	; (31410 <uarte_nrfx_configure+0x150>)
   313da:	e7de      	b.n	3139a <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   313dc:	4b0d      	ldr	r3, [pc, #52]	; (31414 <uarte_nrfx_configure+0x154>)
   313de:	e7dc      	b.n	3139a <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   313e0:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   313e4:	e7d9      	b.n	3139a <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   313e6:	4b0c      	ldr	r3, [pc, #48]	; (31418 <uarte_nrfx_configure+0x158>)
   313e8:	e7d7      	b.n	3139a <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   313ea:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   313ee:	e7d4      	b.n	3139a <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   313f0:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   313f4:	e7d1      	b.n	3139a <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   313f6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   313fa:	e7ce      	b.n	3139a <uarte_nrfx_configure+0xda>
   313fc:	0013b000 	.word	0x0013b000
   31400:	004ea000 	.word	0x004ea000
   31404:	0003d090 	.word	0x0003d090
   31408:	000f4240 	.word	0x000f4240
   3140c:	00275000 	.word	0x00275000
   31410:	0075c000 	.word	0x0075c000
   31414:	003af000 	.word	0x003af000
   31418:	013a9000 	.word	0x013a9000

0003141c <uarte_0_init>:
		(__attribute__((__section__(LINKER_DT_NODE_REGION_NAME(	       \
			DT_PHANDLE(UARTE(idx), memory_regions)))))),	       \
		())

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
   3141c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   31420:	2200      	movs	r2, #0
   31422:	b087      	sub	sp, #28
   31424:	4680      	mov	r8, r0
   31426:	2101      	movs	r1, #1
   31428:	2002      	movs	r0, #2
   3142a:	f7f5 fd61 	bl	26ef0 <z_arm_irq_priority_set>
   3142e:	2002      	movs	r0, #2
   31430:	f7f5 fd2e 	bl	26e90 <arch_irq_enable>
	const struct uarte_nrfx_config *config = dev->config;
   31434:	f8d8 7004 	ldr.w	r7, [r8, #4]
	struct uarte_nrfx_data *data = dev->data;
   31438:	f8d8 6010 	ldr.w	r6, [r8, #16]
	return config->uarte_regs;
   3143c:	683c      	ldr	r4, [r7, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   3143e:	2100      	movs	r1, #0
   31440:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
	data->dev = dev;
   31444:	f8c6 8000 	str.w	r8, [r6]
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
   31448:	f8d7 900c 	ldr.w	r9, [r7, #12]
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
   3144c:	466a      	mov	r2, sp
   3144e:	4648      	mov	r0, r9
   31450:	f00a f8db 	bl	3b60a <pinctrl_lookup_state>
	if (ret < 0) {
   31454:	1e05      	subs	r5, r0, #0
   31456:	db28      	blt.n	314aa <uarte_0_init+0x8e>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
   31458:	9b00      	ldr	r3, [sp, #0]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   3145a:	f8d9 2000 	ldr.w	r2, [r9]
   3145e:	7919      	ldrb	r1, [r3, #4]
   31460:	6818      	ldr	r0, [r3, #0]
   31462:	f00a f8e8 	bl	3b636 <pinctrl_configure_pins>
	if (err < 0) {
   31466:	1e05      	subs	r5, r0, #0
   31468:	db1f      	blt.n	314aa <uarte_0_init+0x8e>
	err = uarte_nrfx_configure(dev, &data->uart_config);
   3146a:	1d31      	adds	r1, r6, #4
   3146c:	4640      	mov	r0, r8
   3146e:	f7ff ff27 	bl	312c0 <uarte_nrfx_configure>
	if (err) {
   31472:	4605      	mov	r5, r0
   31474:	b9c8      	cbnz	r0, 314aa <uarte_0_init+0x8e>
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
   31476:	687b      	ldr	r3, [r7, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
   31478:	0798      	lsls	r0, r3, #30
   3147a:	d52e      	bpl.n	314da <uarte_0_init+0xbe>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   3147c:	f106 0018 	add.w	r0, r6, #24
   31480:	f002 fda2 	bl	33fc8 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   31484:	4b29      	ldr	r3, [pc, #164]	; (3152c <uarte_0_init+0x110>)
   31486:	4298      	cmp	r0, r3
   31488:	d013      	beq.n	314b2 <uarte_0_init+0x96>
		LOG_ERR("Failed to allocate PPI Channel");
   3148a:	4829      	ldr	r0, [pc, #164]	; (31530 <uarte_0_init+0x114>)
   3148c:	6803      	ldr	r3, [r0, #0]
   3148e:	0759      	lsls	r1, r3, #29
   31490:	d009      	beq.n	314a6 <uarte_0_init+0x8a>
   31492:	4b28      	ldr	r3, [pc, #160]	; (31534 <uarte_0_init+0x118>)
   31494:	9305      	str	r3, [sp, #20]
   31496:	2302      	movs	r3, #2
   31498:	9304      	str	r3, [sp, #16]
   3149a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   3149e:	462b      	mov	r3, r5
   314a0:	aa04      	add	r2, sp, #16
   314a2:	f7f4 fe83 	bl	261ac <z_impl_z_log_msg_static_create>
		return -EIO;
   314a6:	f06f 0504 	mvn.w	r5, #4
UART_NRF_UARTE_DEVICE(0);
   314aa:	4628      	mov	r0, r5
   314ac:	b007      	add	sp, #28
   314ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
   314b2:	7e33      	ldrb	r3, [r6, #24]
   314b4:	00db      	lsls	r3, r3, #3
   314b6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   314ba:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    return (uint32_t)p_reg + (uint32_t)task;
   314be:	f104 020c 	add.w	r2, r4, #12
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
   314c2:	f504 7190 	add.w	r1, r4, #288	; 0x120
   314c6:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
   314ca:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   314ce:	7e32      	ldrb	r2, [r6, #24]
   314d0:	2301      	movs	r3, #1
   314d2:	4093      	lsls	r3, r2
    p_reg->CHENSET = mask;
   314d4:	4a18      	ldr	r2, [pc, #96]	; (31538 <uarte_0_init+0x11c>)
   314d6:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   314da:	2308      	movs	r3, #8
   314dc:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (!cfg->disable_rx) {
   314e0:	7a3b      	ldrb	r3, [r7, #8]
   314e2:	b953      	cbnz	r3, 314fa <uarte_0_init+0xde>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   314e4:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   314e8:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   314ec:	6973      	ldr	r3, [r6, #20]
   314ee:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   314f2:	2301      	movs	r3, #1
   314f4:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   314f8:	6023      	str	r3, [r4, #0]
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   314fa:	687b      	ldr	r3, [r7, #4]
   314fc:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
   314fe:	bf5c      	itt	pl
   31500:	f44f 7380 	movpl.w	r3, #256	; 0x100
   31504:	f8c4 3304 	strpl.w	r3, [r4, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   31508:	687b      	ldr	r3, [r7, #4]
   3150a:	06db      	lsls	r3, r3, #27
   3150c:	bf44      	itt	mi
   3150e:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
   31512:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   31516:	6933      	ldr	r3, [r6, #16]
   31518:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   3151c:	2300      	movs	r3, #0
   3151e:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   31522:	2301      	movs	r3, #1
   31524:	60a3      	str	r3, [r4, #8]
   31526:	60e3      	str	r3, [r4, #12]
UART_NRF_UARTE_DEVICE(0);
   31528:	e7bf      	b.n	314aa <uarte_0_init+0x8e>
   3152a:	bf00      	nop
   3152c:	0bad0000 	.word	0x0bad0000
   31530:	20000b10 	.word	0x20000b10
   31534:	0003f673 	.word	0x0003f673
   31538:	4001f000 	.word	0x4001f000

0003153c <uarte_nrfx_poll_out>:
{
   3153c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3153e:	4604      	mov	r4, r0
	struct uarte_nrfx_data *data = dev->data;
   31540:	6907      	ldr	r7, [r0, #16]
{
   31542:	460d      	mov	r5, r1
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   31544:	f00a fb57 	bl	3bbf6 <k_is_in_isr>
   31548:	b9b0      	cbnz	r0, 31578 <uarte_nrfx_poll_out+0x3c>
   3154a:	4b2e      	ldr	r3, [pc, #184]	; (31604 <uarte_nrfx_poll_out+0xc8>)
   3154c:	781b      	ldrb	r3, [r3, #0]
   3154e:	b19b      	cbz	r3, 31578 <uarte_nrfx_poll_out+0x3c>
{
   31550:	2664      	movs	r6, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   31552:	6860      	ldr	r0, [r4, #4]
   31554:	f009 fffa 	bl	3b54c <is_tx_ready.isra.0>
   31558:	bb00      	cbnz	r0, 3159c <uarte_nrfx_poll_out+0x60>
   3155a:	2001      	movs	r0, #1
   3155c:	f00a f981 	bl	3b862 <nrfx_busy_wait>
   31560:	3e01      	subs	r6, #1
   31562:	d1f6      	bne.n	31552 <uarte_nrfx_poll_out+0x16>
	return z_impl_k_sleep(timeout);
   31564:	2100      	movs	r1, #0
   31566:	2021      	movs	r0, #33	; 0x21
   31568:	f005 fd9c 	bl	370a4 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   3156c:	e7f0      	b.n	31550 <uarte_nrfx_poll_out+0x14>
	__asm__ volatile(
   3156e:	f386 8811 	msr	BASEPRI, r6
   31572:	f3bf 8f6f 	isb	sy
}
   31576:	e7f5      	b.n	31564 <uarte_nrfx_poll_out+0x28>
	__asm__ volatile(
   31578:	f04f 0340 	mov.w	r3, #64	; 0x40
   3157c:	f3ef 8611 	mrs	r6, BASEPRI
   31580:	f383 8812 	msr	BASEPRI_MAX, r3
   31584:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   31588:	6860      	ldr	r0, [r4, #4]
   3158a:	4631      	mov	r1, r6
   3158c:	f009 ffde 	bl	3b54c <is_tx_ready.isra.0>
   31590:	b990      	cbnz	r0, 315b8 <uarte_nrfx_poll_out+0x7c>
	__asm__ volatile(
   31592:	f386 8811 	msr	BASEPRI, r6
   31596:	f3bf 8f6f 	isb	sy
}
   3159a:	e7ed      	b.n	31578 <uarte_nrfx_poll_out+0x3c>
	__asm__ volatile(
   3159c:	f04f 0340 	mov.w	r3, #64	; 0x40
   315a0:	f3ef 8611 	mrs	r6, BASEPRI
   315a4:	f383 8812 	msr	BASEPRI_MAX, r3
   315a8:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   315ac:	6860      	ldr	r0, [r4, #4]
   315ae:	4631      	mov	r1, r6
   315b0:	f009 ffcc 	bl	3b54c <is_tx_ready.isra.0>
   315b4:	2800      	cmp	r0, #0
   315b6:	d0da      	beq.n	3156e <uarte_nrfx_poll_out+0x32>
	*data->char_out = c;
   315b8:	693b      	ldr	r3, [r7, #16]
   315ba:	701d      	strb	r5, [r3, #0]
	const struct uarte_nrfx_config *config = dev->config;
   315bc:	6862      	ldr	r2, [r4, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   315be:	6938      	ldr	r0, [r7, #16]
	return config->uarte_regs;
   315c0:	6813      	ldr	r3, [r2, #0]
   315c2:	f8c3 0544 	str.w	r0, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   315c6:	2001      	movs	r0, #1
   315c8:	f8c3 0548 	str.w	r0, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   315cc:	2000      	movs	r0, #0
   315ce:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
   315d2:	f8d3 5120 	ldr.w	r5, [r3, #288]	; 0x120
   315d6:	f8c3 0158 	str.w	r0, [r3, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   315da:	6852      	ldr	r2, [r2, #4]
   315dc:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
   315e0:	06d2      	lsls	r2, r2, #27
   315e2:	d508      	bpl.n	315f6 <uarte_nrfx_poll_out+0xba>
	return config->uarte_regs;
   315e4:	6862      	ldr	r2, [r4, #4]
   315e6:	6812      	ldr	r2, [r2, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   315e8:	2008      	movs	r0, #8
   315ea:	f8c2 0500 	str.w	r0, [r2, #1280]	; 0x500
    p_reg->INTENSET = mask;
   315ee:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   315f2:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   315f6:	2201      	movs	r2, #1
   315f8:	609a      	str	r2, [r3, #8]
	__asm__ volatile(
   315fa:	f381 8811 	msr	BASEPRI, r1
   315fe:	f3bf 8f6f 	isb	sy
}
   31602:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   31604:	20004411 	.word	0x20004411

00031608 <random_byte_get>:
	__asm__ volatile(
   31608:	f04f 0340 	mov.w	r3, #64	; 0x40
   3160c:	f3ef 8211 	mrs	r2, BASEPRI
   31610:	f383 8812 	msr	BASEPRI_MAX, r3
   31614:	f3bf 8f6f 	isb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)rng_event);
}

NRF_STATIC_INLINE bool nrf_rng_event_check(NRF_RNG_Type const * p_reg, nrf_rng_event_t rng_event)
{
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   31618:	4b09      	ldr	r3, [pc, #36]	; (31640 <random_byte_get+0x38>)
   3161a:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
	int retval = -EAGAIN;
	unsigned int key;

	key = irq_lock();

	if (nrf_rng_event_check(NRF_RNG, NRF_RNG_EVENT_VALRDY)) {
   3161e:	b161      	cbz	r1, 3163a <random_byte_get+0x32>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   31620:	2100      	movs	r1, #0
     p_reg->SHORTS &= ~mask;
}

NRF_STATIC_INLINE uint8_t nrf_rng_random_value_get(NRF_RNG_Type const * p_reg)
{
    return (uint8_t)(p_reg->VALUE & RNG_VALUE_VALUE_Msk);
   31622:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   31626:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
   3162a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
		retval = nrf_rng_random_value_get(NRF_RNG);
   3162e:	b2c0      	uxtb	r0, r0
	__asm__ volatile(
   31630:	f382 8811 	msr	BASEPRI, r2
   31634:	f3bf 8f6f 	isb	sy
	}

	irq_unlock(key);

	return retval;
}
   31638:	4770      	bx	lr
	int retval = -EAGAIN;
   3163a:	f06f 000a 	mvn.w	r0, #10
   3163e:	e7f7      	b.n	31630 <random_byte_get+0x28>
   31640:	4000d000 	.word	0x4000d000

00031644 <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static uint16_t rng_pool_get(struct rng_pool *rngp, uint8_t *buf, uint16_t len)
{
   31644:	b5f0      	push	{r4, r5, r6, r7, lr}
   31646:	4603      	mov	r3, r0
   31648:	4610      	mov	r0, r2
	uint32_t last  = rngp->last;
   3164a:	789c      	ldrb	r4, [r3, #2]
	uint32_t mask  = rngp->mask;
   3164c:	f893 c003 	ldrb.w	ip, [r3, #3]
	__asm__ volatile(
   31650:	f04f 0540 	mov.w	r5, #64	; 0x40
   31654:	f3ef 8211 	mrs	r2, BASEPRI
   31658:	f385 8812 	msr	BASEPRI_MAX, r5
   3165c:	f3bf 8f6f 	isb	sy
	uint32_t first, available;
	uint32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
   31660:	781f      	ldrb	r7, [r3, #0]
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
   31662:	f893 e001 	ldrb.w	lr, [r3, #1]

	available = (last - first) & mask;
   31666:	1be4      	subs	r4, r4, r7
   31668:	ea04 040c 	and.w	r4, r4, ip
	if (available < len) {
   3166c:	42a0      	cmp	r0, r4
		len = available;
   3166e:	bf88      	it	hi
   31670:	b2a0      	uxthhi	r0, r4

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
   31672:	183e      	adds	r6, r7, r0
   31674:	ea0c 0606 	and.w	r6, ip, r6
	first = rngp->first_alloc;
   31678:	463d      	mov	r5, r7
	rngp->first_alloc = (first + len) & mask;
   3167a:	701e      	strb	r6, [r3, #0]
	__asm__ volatile(
   3167c:	f382 8811 	msr	BASEPRI, r2
   31680:	f3bf 8f6f 	isb	sy
   31684:	180a      	adds	r2, r1, r0
	irq_unlock(key);

	while (likely(len--)) {
   31686:	428a      	cmp	r2, r1
   31688:	d117      	bne.n	316ba <rng_pool_get+0x76>
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
   3168a:	4577      	cmp	r7, lr
   3168c:	d10d      	bne.n	316aa <rng_pool_get+0x66>
	__asm__ volatile(
   3168e:	f04f 0140 	mov.w	r1, #64	; 0x40
   31692:	f3ef 8211 	mrs	r2, BASEPRI
   31696:	f381 8812 	msr	BASEPRI_MAX, r1
   3169a:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
   3169e:	7819      	ldrb	r1, [r3, #0]
   316a0:	7059      	strb	r1, [r3, #1]
	__asm__ volatile(
   316a2:	f382 8811 	msr	BASEPRI, r2
   316a6:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}

	len = dst - buf;
	available = available - len;
	if (available <= rngp->threshold) {
   316aa:	791b      	ldrb	r3, [r3, #4]
	available = available - len;
   316ac:	1a24      	subs	r4, r4, r0
	if (available <= rngp->threshold) {
   316ae:	42a3      	cmp	r3, r4
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   316b0:	bf22      	ittt	cs
   316b2:	4b06      	ldrcs	r3, [pc, #24]	; (316cc <rng_pool_get+0x88>)
   316b4:	2201      	movcs	r2, #1
   316b6:	601a      	strcs	r2, [r3, #0]
		nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);
	}

	return len;
}
   316b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*dst++ = rngp->buffer[first];
   316ba:	195e      	adds	r6, r3, r5
		first = (first + 1) & mask;
   316bc:	3501      	adds	r5, #1
		*dst++ = rngp->buffer[first];
   316be:	7976      	ldrb	r6, [r6, #5]
   316c0:	f801 6b01 	strb.w	r6, [r1], #1
		first = (first + 1) & mask;
   316c4:	ea05 050c 	and.w	r5, r5, ip
   316c8:	e7dd      	b.n	31686 <rng_pool_get+0x42>
   316ca:	bf00      	nop
   316cc:	4000d000 	.word	0x4000d000

000316d0 <entropy_nrf5_get_entropy_isr>:
}

static int entropy_nrf5_get_entropy_isr(const struct device *dev,
					uint8_t *buf, uint16_t len,
					uint32_t flags)
{
   316d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint16_t cnt = len;

	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == dev->data);
   316d4:	4d2b      	ldr	r5, [pc, #172]	; (31784 <entropy_nrf5_get_entropy_isr+0xb4>)
   316d6:	6900      	ldr	r0, [r0, #16]
   316d8:	42a8      	cmp	r0, r5
{
   316da:	460e      	mov	r6, r1
   316dc:	4614      	mov	r4, r2
	__ASSERT_NO_MSG(&entropy_nrf5_data == dev->data);
   316de:	d00a      	beq.n	316f6 <entropy_nrf5_get_entropy_isr+0x26>
   316e0:	4929      	ldr	r1, [pc, #164]	; (31788 <entropy_nrf5_get_entropy_isr+0xb8>)
   316e2:	482a      	ldr	r0, [pc, #168]	; (3178c <entropy_nrf5_get_entropy_isr+0xbc>)
   316e4:	f240 1207 	movw	r2, #263	; 0x107
   316e8:	f007 fa13 	bl	38b12 <assert_print>
   316ec:	4826      	ldr	r0, [pc, #152]	; (31788 <entropy_nrf5_get_entropy_isr+0xb8>)
   316ee:	f240 1107 	movw	r1, #263	; 0x107
   316f2:	f007 fa07 	bl	38b04 <assert_post_action>

	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   316f6:	43db      	mvns	r3, r3
   316f8:	f013 0501 	ands.w	r5, r3, #1
   316fc:	d004      	beq.n	31708 <entropy_nrf5_get_entropy_isr+0x38>
		return rng_pool_get((struct rng_pool *)(entropy_nrf5_data.isr),
   316fe:	3030      	adds	r0, #48	; 0x30
   31700:	f7ff ffa0 	bl	31644 <rng_pool_get>
			irq_enable(IRQN);
		}
	}

	return cnt;
}
   31704:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (len) {
   31708:	b3a2      	cbz	r2, 31774 <entropy_nrf5_get_entropy_isr+0xa4>
	__asm__ volatile(
   3170a:	f04f 0340 	mov.w	r3, #64	; 0x40
   3170e:	f3ef 8811 	mrs	r8, BASEPRI
   31712:	f383 8812 	msr	BASEPRI_MAX, r3
   31716:	f3bf 8f6f 	isb	sy
		irq_enabled = irq_is_enabled(IRQN);
   3171a:	200d      	movs	r0, #13
   3171c:	f7f5 fbda 	bl	26ed4 <arch_irq_is_enabled>
   31720:	4607      	mov	r7, r0
		irq_disable(IRQN);
   31722:	200d      	movs	r0, #13
   31724:	f7f5 fbc2 	bl	26eac <arch_irq_disable>
	__asm__ volatile(
   31728:	f388 8811 	msr	BASEPRI, r8
   3172c:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   31730:	f8df 805c 	ldr.w	r8, [pc, #92]	; 31790 <entropy_nrf5_get_entropy_isr+0xc0>
   31734:	f8df 905c 	ldr.w	r9, [pc, #92]	; 31794 <entropy_nrf5_get_entropy_isr+0xc4>
   31738:	f8c8 5100 	str.w	r5, [r8, #256]	; 0x100
   3173c:	f8d8 3100 	ldr.w	r3, [r8, #256]	; 0x100
   31740:	f44f 5a00 	mov.w	sl, #8192	; 0x2000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   31744:	2301      	movs	r3, #1
   31746:	f8c8 3000 	str.w	r3, [r8]
   3174a:	4625      	mov	r5, r4
   3174c:	f8c9 a180 	str.w	sl, [r9, #384]	; 0x180
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   31750:	f8d8 3100 	ldr.w	r3, [r8, #256]	; 0x100
			while (!nrf_rng_event_check(NRF_RNG,
   31754:	b183      	cbz	r3, 31778 <entropy_nrf5_get_entropy_isr+0xa8>
			byte = random_byte_get();
   31756:	f7ff ff57 	bl	31608 <random_byte_get>
			if (byte < 0) {
   3175a:	1e03      	subs	r3, r0, #0
   3175c:	f8c9 a180 	str.w	sl, [r9, #384]	; 0x180
   31760:	dbf6      	blt.n	31750 <entropy_nrf5_get_entropy_isr+0x80>
			buf[--len] = byte;
   31762:	3d01      	subs	r5, #1
   31764:	b2ad      	uxth	r5, r5
   31766:	5573      	strb	r3, [r6, r5]
		} while (len);
   31768:	2d00      	cmp	r5, #0
   3176a:	d1f1      	bne.n	31750 <entropy_nrf5_get_entropy_isr+0x80>
		if (irq_enabled) {
   3176c:	b117      	cbz	r7, 31774 <entropy_nrf5_get_entropy_isr+0xa4>
			irq_enable(IRQN);
   3176e:	200d      	movs	r0, #13
   31770:	f7f5 fb8e 	bl	26e90 <arch_irq_enable>
	return cnt;
   31774:	4620      	mov	r0, r4
   31776:	e7c5      	b.n	31704 <entropy_nrf5_get_entropy_isr+0x34>
   31778:	f3bf 8f4f 	dsb	sy
				__WFE();
   3177c:	bf20      	wfe
				__SEV();
   3177e:	bf40      	sev
				__WFE();
   31780:	bf20      	wfe
   31782:	e7e5      	b.n	31750 <entropy_nrf5_get_entropy_isr+0x80>
   31784:	20003160 	.word	0x20003160
   31788:	0003f6b0 	.word	0x0003f6b0
   3178c:	0003d1d7 	.word	0x0003d1d7
   31790:	4000d000 	.word	0x4000d000
   31794:	e000e100 	.word	0xe000e100

00031798 <entropy_nrf5_get_entropy>:
{
   31798:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(&entropy_nrf5_data == dev->data);
   3179c:	4b18      	ldr	r3, [pc, #96]	; (31800 <entropy_nrf5_get_entropy+0x68>)
   3179e:	6907      	ldr	r7, [r0, #16]
   317a0:	429f      	cmp	r7, r3
{
   317a2:	460d      	mov	r5, r1
   317a4:	4614      	mov	r4, r2
	__ASSERT_NO_MSG(&entropy_nrf5_data == dev->data);
   317a6:	d105      	bne.n	317b4 <entropy_nrf5_get_entropy+0x1c>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   317a8:	f107 0845 	add.w	r8, r7, #69	; 0x45
	while (len) {
   317ac:	b95c      	cbnz	r4, 317c6 <entropy_nrf5_get_entropy+0x2e>
}
   317ae:	4620      	mov	r0, r4
   317b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT_NO_MSG(&entropy_nrf5_data == dev->data);
   317b4:	4913      	ldr	r1, [pc, #76]	; (31804 <entropy_nrf5_get_entropy+0x6c>)
   317b6:	4814      	ldr	r0, [pc, #80]	; (31808 <entropy_nrf5_get_entropy+0x70>)
   317b8:	22e9      	movs	r2, #233	; 0xe9
   317ba:	f007 f9aa 	bl	38b12 <assert_print>
   317be:	4811      	ldr	r0, [pc, #68]	; (31804 <entropy_nrf5_get_entropy+0x6c>)
   317c0:	21e9      	movs	r1, #233	; 0xe9
   317c2:	f007 f99f 	bl	38b04 <assert_post_action>
	return z_impl_k_sem_take(sem, timeout);
   317c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   317ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   317ce:	4638      	mov	r0, r7
   317d0:	f004 f824 	bl	3581c <z_impl_k_sem_take>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   317d4:	4622      	mov	r2, r4
   317d6:	4629      	mov	r1, r5
   317d8:	4640      	mov	r0, r8
   317da:	f7ff ff33 	bl	31644 <rng_pool_get>
   317de:	4606      	mov	r6, r0
	z_impl_k_sem_give(sem);
   317e0:	4638      	mov	r0, r7
   317e2:	f003 ffe1 	bl	357a8 <z_impl_k_sem_give>
		if (bytes == 0U) {
   317e6:	b93e      	cbnz	r6, 317f8 <entropy_nrf5_get_entropy+0x60>
	return z_impl_k_sem_take(sem, timeout);
   317e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   317ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   317f0:	4806      	ldr	r0, [pc, #24]	; (3180c <entropy_nrf5_get_entropy+0x74>)
   317f2:	f004 f813 	bl	3581c <z_impl_k_sem_take>
	while (len) {
   317f6:	e7e6      	b.n	317c6 <entropy_nrf5_get_entropy+0x2e>
		len -= bytes;
   317f8:	1ba4      	subs	r4, r4, r6
   317fa:	b2a4      	uxth	r4, r4
		buf += bytes;
   317fc:	4435      	add	r5, r6
   317fe:	e7d5      	b.n	317ac <entropy_nrf5_get_entropy+0x14>
   31800:	20003160 	.word	0x20003160
   31804:	0003f6b0 	.word	0x0003f6b0
   31808:	0003d1d7 	.word	0x0003d1d7
   3180c:	20003178 	.word	0x20003178

00031810 <entropy_nrf5_init>:
		    &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_ENTROPY_INIT_PRIORITY,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(const struct device *dev)
{
   31810:	b538      	push	{r3, r4, r5, lr}
	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == dev->data);
   31812:	4b20      	ldr	r3, [pc, #128]	; (31894 <entropy_nrf5_init+0x84>)
   31814:	6904      	ldr	r4, [r0, #16]
   31816:	429c      	cmp	r4, r3
   31818:	d00a      	beq.n	31830 <entropy_nrf5_init+0x20>
   3181a:	491f      	ldr	r1, [pc, #124]	; (31898 <entropy_nrf5_init+0x88>)
   3181c:	481f      	ldr	r0, [pc, #124]	; (3189c <entropy_nrf5_init+0x8c>)
   3181e:	f44f 72ab 	mov.w	r2, #342	; 0x156
   31822:	f007 f976 	bl	38b12 <assert_print>
   31826:	481c      	ldr	r0, [pc, #112]	; (31898 <entropy_nrf5_init+0x88>)
   31828:	f44f 71ab 	mov.w	r1, #342	; 0x156
   3182c:	f007 f96a 	bl	38b04 <assert_post_action>
	return z_impl_k_sem_init(sem, initial_count, limit);
   31830:	2201      	movs	r2, #1
   31832:	4611      	mov	r1, r2
   31834:	4620      	mov	r0, r4
   31836:	f00a fa28 	bl	3bc8a <z_impl_k_sem_init>
   3183a:	2201      	movs	r2, #1
   3183c:	2100      	movs	r1, #0
   3183e:	f104 0018 	add.w	r0, r4, #24
   31842:	f00a fa22 	bl	3bc8a <z_impl_k_sem_init>
	rngp->mask	  = size - 1;
   31846:	f240 4307 	movw	r3, #1031	; 0x407
   3184a:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
	rngp->first_alloc = 0U;
   3184e:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   31852:	6323      	str	r3, [r4, #48]	; 0x30
	rngp->threshold	  = threshold;
   31854:	230c      	movs	r3, #12
   31856:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	rngp->first_alloc = 0U;
   3185a:	2500      	movs	r5, #0
    p_reg->CONFIG |= RNG_CONFIG_DERCEN_Msk;
}

NRF_STATIC_INLINE void nrf_rng_error_correction_disable(NRF_RNG_Type * p_reg)
{
    p_reg->CONFIG &= ~RNG_CONFIG_DERCEN_Msk;
   3185c:	4b10      	ldr	r3, [pc, #64]	; (318a0 <entropy_nrf5_init+0x90>)
   3185e:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
	rngp->first_read  = 0U;
   31862:	f8a4 5046 	strh.w	r5, [r4, #70]	; 0x46
   31866:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   3186a:	f022 0201 	bic.w	r2, r2, #1
   3186e:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    p_reg->INTENSET = mask;
   31872:	2101      	movs	r1, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   31874:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
   31878:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   3187c:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304

	nrf_rng_event_clear(NRF_RNG, NRF_RNG_EVENT_VALRDY);
	nrf_rng_int_enable(NRF_RNG, NRF_RNG_INT_VALRDY_MASK);
	nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);

	IRQ_CONNECT(IRQN, IRQ_PRIO, isr, &entropy_nrf5_data, 0);
   31880:	462a      	mov	r2, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   31882:	6019      	str	r1, [r3, #0]
   31884:	200d      	movs	r0, #13
   31886:	f7f5 fb33 	bl	26ef0 <z_arm_irq_priority_set>
	irq_enable(IRQN);
   3188a:	200d      	movs	r0, #13
   3188c:	f7f5 fb00 	bl	26e90 <arch_irq_enable>

	return 0;
}
   31890:	4628      	mov	r0, r5
   31892:	bd38      	pop	{r3, r4, r5, pc}
   31894:	20003160 	.word	0x20003160
   31898:	0003f6b0 	.word	0x0003f6b0
   3189c:	0003d1d7 	.word	0x0003d1d7
   318a0:	4000d000 	.word	0x4000d000

000318a4 <isr>:
{
   318a4:	b510      	push	{r4, lr}
	byte = random_byte_get();
   318a6:	f7ff feaf 	bl	31608 <random_byte_get>
	if (byte < 0) {
   318aa:	2800      	cmp	r0, #0
   318ac:	db20      	blt.n	318f0 <isr+0x4c>
	uint8_t last  = rngp->last;
   318ae:	4b17      	ldr	r3, [pc, #92]	; (3190c <isr+0x68>)
   318b0:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	if (((last - first) & mask) == mask) {
   318b4:	f893 4031 	ldrb.w	r4, [r3, #49]	; 0x31
	uint8_t mask  = rngp->mask;
   318b8:	f893 1033 	ldrb.w	r1, [r3, #51]	; 0x33
	if (((last - first) & mask) == mask) {
   318bc:	1b14      	subs	r4, r2, r4
   318be:	ea31 0404 	bics.w	r4, r1, r4
	ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.isr), byte);
   318c2:	b2c0      	uxtb	r0, r0
	if (((last - first) & mask) == mask) {
   318c4:	d10d      	bne.n	318e2 <isr+0x3e>
	uint8_t last  = rngp->last;
   318c6:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	if (((last - first) & mask) == mask) {
   318ca:	f893 4046 	ldrb.w	r4, [r3, #70]	; 0x46
	uint8_t mask  = rngp->mask;
   318ce:	f893 1048 	ldrb.w	r1, [r3, #72]	; 0x48
	if (((last - first) & mask) == mask) {
   318d2:	1b14      	subs	r4, r2, r4
   318d4:	ea31 0404 	bics.w	r4, r1, r4
   318d8:	d10b      	bne.n	318f2 <isr+0x4e>
   318da:	4b0d      	ldr	r3, [pc, #52]	; (31910 <isr+0x6c>)
   318dc:	2201      	movs	r2, #1
   318de:	605a      	str	r2, [r3, #4]
}
   318e0:	e00e      	b.n	31900 <isr+0x5c>
	rngp->buffer[last] = byte;
   318e2:	189c      	adds	r4, r3, r2
	rngp->last = (last + 1) & mask;
   318e4:	3201      	adds	r2, #1
   318e6:	4011      	ands	r1, r2
	rngp->buffer[last] = byte;
   318e8:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
	rngp->last = (last + 1) & mask;
   318ec:	f883 1032 	strb.w	r1, [r3, #50]	; 0x32
}
   318f0:	bd10      	pop	{r4, pc}
	rngp->buffer[last] = byte;
   318f2:	189c      	adds	r4, r3, r2
	rngp->last = (last + 1) & mask;
   318f4:	3201      	adds	r2, #1
   318f6:	4011      	ands	r1, r2
	rngp->buffer[last] = byte;
   318f8:	f884 004a 	strb.w	r0, [r4, #74]	; 0x4a
	rngp->last = (last + 1) & mask;
   318fc:	f883 1047 	strb.w	r1, [r3, #71]	; 0x47
	z_impl_k_sem_give(sem);
   31900:	4804      	ldr	r0, [pc, #16]	; (31914 <isr+0x70>)
}
   31902:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   31906:	f003 bf4f 	b.w	357a8 <z_impl_k_sem_give>
   3190a:	bf00      	nop
   3190c:	20003160 	.word	0x20003160
   31910:	4000d000 	.word	0x4000d000
   31914:	20003178 	.word	0x20003178

00031918 <sys_clock_timeout_handler>:
}

static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
   31918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   3191a:	491b      	ldr	r1, [pc, #108]	; (31988 <sys_clock_timeout_handler+0x70>)
{
   3191c:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
   3191e:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   31922:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
   31924:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
   31928:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   3192c:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
   3192e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
   31932:	d30f      	bcc.n	31954 <sys_clock_timeout_handler+0x3c>
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
   31934:	f005 fea8 	bl	37688 <sys_clock_announce>
    p_reg->CC[ch] = cc_val;
}

NRF_STATIC_INLINE  uint32_t nrf_rtc_cc_get(NRF_RTC_Type const * p_reg, uint32_t ch)
{
    return p_reg->CC[ch];
   31938:	00a3      	lsls	r3, r4, #2
   3193a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   3193e:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
   31942:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
   31946:	4295      	cmp	r5, r2
   31948:	d11d      	bne.n	31986 <sys_clock_timeout_handler+0x6e>
    p_reg->CC[ch] = cc_val;
   3194a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   3194e:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
}
   31952:	e012      	b.n	3197a <sys_clock_timeout_handler+0x62>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
   31954:	4b0d      	ldr	r3, [pc, #52]	; (3198c <sys_clock_timeout_handler+0x74>)
   31956:	681b      	ldr	r3, [r3, #0]
   31958:	0a1a      	lsrs	r2, r3, #8
   3195a:	061b      	lsls	r3, r3, #24
   3195c:	195e      	adds	r6, r3, r5
   3195e:	4b0c      	ldr	r3, [pc, #48]	; (31990 <sys_clock_timeout_handler+0x78>)
   31960:	f142 0700 	adc.w	r7, r2, #0
   31964:	e9c3 6700 	strd	r6, r7, [r3]
	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
   31968:	f005 fe8e 	bl	37688 <sys_clock_announce>
    return p_reg->CC[ch];
   3196c:	4a09      	ldr	r2, [pc, #36]	; (31994 <sys_clock_timeout_handler+0x7c>)
   3196e:	f504 73a8 	add.w	r3, r4, #336	; 0x150
   31972:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	if (cc_value == get_comparator(chan)) {
   31976:	429d      	cmp	r5, r3
   31978:	d105      	bne.n	31986 <sys_clock_timeout_handler+0x6e>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   3197a:	4a06      	ldr	r2, [pc, #24]	; (31994 <sys_clock_timeout_handler+0x7c>)
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   3197c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   31980:	40a3      	lsls	r3, r4
   31982:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
		if (!anchor_updated) {
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
   31986:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   31988:	20002aa0 	.word	0x20002aa0
   3198c:	200031bc 	.word	0x200031bc
   31990:	20002aa8 	.word	0x20002aa8
   31994:	40011000 	.word	0x40011000

00031998 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
   31998:	4b0d      	ldr	r3, [pc, #52]	; (319d0 <z_nrf_rtc_timer_read+0x38>)
   3199a:	6818      	ldr	r0, [r3, #0]
   3199c:	0a01      	lsrs	r1, r0, #8
   3199e:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
   319a0:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
   319a4:	4b0b      	ldr	r3, [pc, #44]	; (319d4 <z_nrf_rtc_timer_read+0x3c>)
   319a6:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
   319aa:	1818      	adds	r0, r3, r0
   319ac:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
   319b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   319b4:	d20a      	bcs.n	319cc <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
   319b6:	4b08      	ldr	r3, [pc, #32]	; (319d8 <z_nrf_rtc_timer_read+0x40>)
   319b8:	e9d3 2300 	ldrd	r2, r3, [r3]
   319bc:	4290      	cmp	r0, r2
   319be:	eb71 0303 	sbcs.w	r3, r1, r3
   319c2:	d203      	bcs.n	319cc <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
   319c4:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
   319c8:	f141 0100 	adc.w	r1, r1, #0
}
   319cc:	4770      	bx	lr
   319ce:	bf00      	nop
   319d0:	200031bc 	.word	0x200031bc
   319d4:	40011000 	.word	0x40011000
   319d8:	20002aa8 	.word	0x20002aa8

000319dc <rtc_nrf_isr>:
 * probably better abstract that at some point (e.g. query and reset
 * it by pointer at runtime, maybe?) so we don't have this leaky
 * symbol.
 */
void rtc_nrf_isr(const void *arg)
{
   319dc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
   319e0:	4c2b      	ldr	r4, [pc, #172]	; (31a90 <rtc_nrf_isr+0xb4>)
   319e2:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	ARG_UNUSED(arg);

	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
   319e6:	079a      	lsls	r2, r3, #30
   319e8:	d50b      	bpl.n	31a02 <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   319ea:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   319ee:	b143      	cbz	r3, 31a02 <rtc_nrf_isr+0x26>
	    nrf_rtc_event_check(RTC, NRF_RTC_EVENT_OVERFLOW)) {
		nrf_rtc_event_clear(RTC, NRF_RTC_EVENT_OVERFLOW);
		overflow_cnt++;
   319f0:	4a28      	ldr	r2, [pc, #160]	; (31a94 <rtc_nrf_isr+0xb8>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   319f2:	2300      	movs	r3, #0
   319f4:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
   319f8:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   319fc:	6813      	ldr	r3, [r2, #0]
   319fe:	3301      	adds	r3, #1
   31a00:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   31a02:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   31a06:	b672      	cpsid	i
    return p_reg->INTENSET & mask;
   31a08:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
   31a0c:	03db      	lsls	r3, r3, #15
   31a0e:	d522      	bpl.n	31a56 <rtc_nrf_isr+0x7a>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   31a10:	f3bf 8f5b 	dmb	ish
   31a14:	4b20      	ldr	r3, [pc, #128]	; (31a98 <rtc_nrf_isr+0xbc>)
   31a16:	e853 1f00 	ldrex	r1, [r3]
   31a1a:	f021 0001 	bic.w	r0, r1, #1
   31a1e:	e843 0500 	strex	r5, r0, [r3]
   31a22:	2d00      	cmp	r5, #0
   31a24:	d1f7      	bne.n	31a16 <rtc_nrf_isr+0x3a>
   31a26:	f3bf 8f5b 	dmb	ish
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
   31a2a:	b911      	cbnz	r1, 31a32 <rtc_nrf_isr+0x56>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   31a2c:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
   31a30:	b18b      	cbz	r3, 31a56 <rtc_nrf_isr+0x7a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   31a32:	2500      	movs	r5, #0
   31a34:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
   31a38:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   31a3c:	f382 8810 	msr	PRIMASK, r2
		curr_time = z_nrf_rtc_timer_read();
   31a40:	f7ff ffaa 	bl	31998 <z_nrf_rtc_timer_read>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   31a44:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   31a48:	b672      	cpsid	i
		expire_time = cc_data[chan].target_time;
   31a4a:	4b14      	ldr	r3, [pc, #80]	; (31a9c <rtc_nrf_isr+0xc0>)
   31a4c:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
   31a50:	42b0      	cmp	r0, r6
   31a52:	41b9      	sbcs	r1, r7
   31a54:	d204      	bcs.n	31a60 <rtc_nrf_isr+0x84>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   31a56:	f382 8810 	msr	PRIMASK, r2
	}

	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		process_channel(chan);
	}
}
   31a5a:	b003      	add	sp, #12
   31a5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   31a60:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   31a64:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
			user_context = cc_data[chan].user_context;
   31a68:	e9d3 1000 	ldrd	r1, r0, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   31a6c:	e9c3 8902 	strd	r8, r9, [r3, #8]
			cc_data[chan].callback = NULL;
   31a70:	601d      	str	r5, [r3, #0]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   31a72:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   31a76:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
   31a7a:	f382 8810 	msr	PRIMASK, r2
		if (handler) {
   31a7e:	2900      	cmp	r1, #0
   31a80:	d0eb      	beq.n	31a5a <rtc_nrf_isr+0x7e>
			handler(chan, expire_time, user_context);
   31a82:	9000      	str	r0, [sp, #0]
   31a84:	4632      	mov	r2, r6
   31a86:	463b      	mov	r3, r7
   31a88:	4628      	mov	r0, r5
   31a8a:	4788      	blx	r1
}
   31a8c:	e7e5      	b.n	31a5a <rtc_nrf_isr+0x7e>
   31a8e:	bf00      	nop
   31a90:	40011000 	.word	0x40011000
   31a94:	200031bc 	.word	0x200031bc
   31a98:	200031b4 	.word	0x200031b4
   31a9c:	20002a90 	.word	0x20002a90

00031aa0 <compare_set.constprop.0.isra.0>:
static int compare_set(int32_t chan, uint64_t target_time,
   31aa0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   31aa4:	4f53      	ldr	r7, [pc, #332]	; (31bf4 <compare_set.constprop.0.isra.0+0x154>)
   31aa6:	f3bf 8f5b 	dmb	ish
   31aaa:	4604      	mov	r4, r0
   31aac:	460d      	mov	r5, r1
   31aae:	e857 8f00 	ldrex	r8, [r7]
   31ab2:	f028 0301 	bic.w	r3, r8, #1
   31ab6:	e847 3200 	strex	r2, r3, [r7]
   31aba:	2a00      	cmp	r2, #0
   31abc:	d1f7      	bne.n	31aae <compare_set.constprop.0.isra.0+0xe>
   31abe:	f3bf 8f5b 	dmb	ish
    p_reg->INTENCLR = mask;
   31ac2:	f8df 9134 	ldr.w	r9, [pc, #308]	; 31bf8 <compare_set.constprop.0.isra.0+0x158>
   31ac6:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
   31aca:	f8c9 a308 	str.w	sl, [r9, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
   31ace:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
   31ad2:	f3bf 8f6f 	isb	sy
	uint64_t curr_time = z_nrf_rtc_timer_read();
   31ad6:	f7ff ff5f 	bl	31998 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
   31ada:	42a0      	cmp	r0, r4
   31adc:	eb71 0305 	sbcs.w	r3, r1, r5
	return prev & BIT(chan);
   31ae0:	f008 0801 	and.w	r8, r8, #1
	if (curr_time < target_time) {
   31ae4:	d277      	bcs.n	31bd6 <compare_set.constprop.0.isra.0+0x136>
		if (target_time - curr_time > COUNTER_SPAN) {
   31ae6:	4b45      	ldr	r3, [pc, #276]	; (31bfc <compare_set.constprop.0.isra.0+0x15c>)
   31ae8:	1a20      	subs	r0, r4, r0
   31aea:	eb65 0101 	sbc.w	r1, r5, r1
   31aee:	4298      	cmp	r0, r3
   31af0:	f171 0100 	sbcs.w	r1, r1, #0
   31af4:	d24a      	bcs.n	31b8c <compare_set.constprop.0.isra.0+0xec>
		if (target_time != cc_data[chan].target_time) {
   31af6:	4b42      	ldr	r3, [pc, #264]	; (31c00 <compare_set.constprop.0.isra.0+0x160>)
   31af8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
   31afc:	429d      	cmp	r5, r3
   31afe:	bf08      	it	eq
   31b00:	4294      	cmpeq	r4, r2
   31b02:	d03c      	beq.n	31b7e <compare_set.constprop.0.isra.0+0xde>
	return absolute_time & COUNTER_MAX;
   31b04:	f024 4b7f 	bic.w	fp, r4, #4278190080	; 0xff000000
    return p_reg->CC[ch];
   31b08:	f8d9 3540 	ldr.w	r3, [r9, #1344]	; 0x540
	uint32_t cc_val = abs_val & COUNTER_MAX;
   31b0c:	465e      	mov	r6, fp
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   31b0e:	2200      	movs	r2, #0
     return p_reg->COUNTER;
   31b10:	f8d9 1504 	ldr.w	r1, [r9, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   31b14:	1a5b      	subs	r3, r3, r1
   31b16:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   31b1a:	f021 407f 	bic.w	r0, r1, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
   31b1e:	2b01      	cmp	r3, #1
    p_reg->CC[ch] = cc_val;
   31b20:	f8c9 0540 	str.w	r0, [r9, #1344]	; 0x540
   31b24:	d105      	bne.n	31b32 <compare_set.constprop.0.isra.0+0x92>
   31b26:	9101      	str	r1, [sp, #4]
	z_impl_k_busy_wait(usec_to_wait);
   31b28:	2013      	movs	r0, #19
   31b2a:	f00a f959 	bl	3bde0 <z_impl_k_busy_wait>
   31b2e:	9901      	ldr	r1, [sp, #4]
   31b30:	2200      	movs	r2, #0
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
   31b32:	1c88      	adds	r0, r1, #2
	return (a - b) & COUNTER_MAX;
   31b34:	1a33      	subs	r3, r6, r0
   31b36:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   31b3a:	f8c9 2140 	str.w	r2, [r9, #320]	; 0x140
			cc_val = now + 2;
   31b3e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
   31b42:	bf88      	it	hi
   31b44:	4606      	movhi	r6, r0
   31b46:	f8d9 3140 	ldr.w	r3, [r9, #320]	; 0x140
    p_reg->EVTENSET = mask;
   31b4a:	f8c9 a344 	str.w	sl, [r9, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   31b4e:	f026 437f 	bic.w	r3, r6, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
   31b52:	f8c9 3540 	str.w	r3, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
   31b56:	f8d9 3504 	ldr.w	r3, [r9, #1284]	; 0x504
	} while ((now2 != now) &&
   31b5a:	4299      	cmp	r1, r3
   31b5c:	d006      	beq.n	31b6c <compare_set.constprop.0.isra.0+0xcc>
	return (a - b) & COUNTER_MAX;
   31b5e:	1af3      	subs	r3, r6, r3
   31b60:	3b02      	subs	r3, #2
   31b62:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	} while ((now2 != now) &&
   31b66:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
   31b6a:	d832      	bhi.n	31bd2 <compare_set.constprop.0.isra.0+0x132>
	return (a - b) & COUNTER_MAX;
   31b6c:	eba6 060b 	sub.w	r6, r6, fp
   31b70:	f026 467f 	bic.w	r6, r6, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
   31b74:	1936      	adds	r6, r6, r4
   31b76:	f145 0300 	adc.w	r3, r5, #0
   31b7a:	4634      	mov	r4, r6
   31b7c:	461d      	mov	r5, r3
	cc_data[chan].target_time = target_time;
   31b7e:	4b20      	ldr	r3, [pc, #128]	; (31c00 <compare_set.constprop.0.isra.0+0x160>)
	cc_data[chan].callback = handler;
   31b80:	4a20      	ldr	r2, [pc, #128]	; (31c04 <compare_set.constprop.0.isra.0+0x164>)
   31b82:	601a      	str	r2, [r3, #0]
	cc_data[chan].target_time = target_time;
   31b84:	e9c3 4502 	strd	r4, r5, [r3, #8]
	cc_data[chan].user_context = user_data;
   31b88:	2200      	movs	r2, #0
   31b8a:	605a      	str	r2, [r3, #4]
	if (key) {
   31b8c:	f1b8 0f00 	cmp.w	r8, #0
   31b90:	d01c      	beq.n	31bcc <compare_set.constprop.0.isra.0+0x12c>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   31b92:	f3bf 8f5b 	dmb	ish
   31b96:	e857 3f00 	ldrex	r3, [r7]
   31b9a:	f043 0301 	orr.w	r3, r3, #1
   31b9e:	e847 3200 	strex	r2, r3, [r7]
   31ba2:	2a00      	cmp	r2, #0
   31ba4:	d1f7      	bne.n	31b96 <compare_set.constprop.0.isra.0+0xf6>
   31ba6:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
   31baa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   31bae:	f8c9 3304 	str.w	r3, [r9, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   31bb2:	4b15      	ldr	r3, [pc, #84]	; (31c08 <compare_set.constprop.0.isra.0+0x168>)
   31bb4:	f3bf 8f5b 	dmb	ish
   31bb8:	681b      	ldr	r3, [r3, #0]
   31bba:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
   31bbe:	07db      	lsls	r3, r3, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   31bc0:	bf42      	ittt	mi
   31bc2:	4b12      	ldrmi	r3, [pc, #72]	; (31c0c <compare_set.constprop.0.isra.0+0x16c>)
   31bc4:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
   31bc8:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
   31bcc:	b003      	add	sp, #12
   31bce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   31bd2:	4633      	mov	r3, r6
   31bd4:	e79c      	b.n	31b10 <compare_set.constprop.0.isra.0+0x70>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   31bd6:	4b0c      	ldr	r3, [pc, #48]	; (31c08 <compare_set.constprop.0.isra.0+0x168>)
   31bd8:	f3bf 8f5b 	dmb	ish
   31bdc:	e853 1f00 	ldrex	r1, [r3]
   31be0:	f041 0101 	orr.w	r1, r1, #1
   31be4:	e843 1200 	strex	r2, r1, [r3]
   31be8:	2a00      	cmp	r2, #0
   31bea:	d1f7      	bne.n	31bdc <compare_set.constprop.0.isra.0+0x13c>
   31bec:	f3bf 8f5b 	dmb	ish
   31bf0:	e7c5      	b.n	31b7e <compare_set.constprop.0.isra.0+0xde>
   31bf2:	bf00      	nop
   31bf4:	200031b8 	.word	0x200031b8
   31bf8:	40011000 	.word	0x40011000
   31bfc:	01000001 	.word	0x01000001
   31c00:	20002a90 	.word	0x20002a90
   31c04:	00031919 	.word	0x00031919
   31c08:	200031b4 	.word	0x200031b4
   31c0c:	e000e100 	.word	0xe000e100

00031c10 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
   31c10:	b570      	push	{r4, r5, r6, lr}
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
   31c12:	4b16      	ldr	r3, [pc, #88]	; (31c6c <sys_clock_driver_init+0x5c>)
    p_reg->PRESCALER = val;
   31c14:	4c16      	ldr	r4, [pc, #88]	; (31c70 <sys_clock_driver_init+0x60>)
   31c16:	2500      	movs	r5, #0
   31c18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   31c1c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   31c20:	f8c4 5508 	str.w	r5, [r4, #1288]	; 0x508
   31c24:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
   31c28:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   31c2c:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   31c30:	4b10      	ldr	r3, [pc, #64]	; (31c74 <sys_clock_driver_init+0x64>)
   31c32:	2602      	movs	r6, #2
   31c34:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   31c38:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   31c3c:	2101      	movs	r1, #1
   31c3e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   31c42:	2011      	movs	r0, #17
   31c44:	462a      	mov	r2, r5
   31c46:	f7f5 f953 	bl	26ef0 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   31c4a:	2011      	movs	r0, #17
   31c4c:	f7f5 f920 	bl	26e90 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   31c50:	2301      	movs	r3, #1

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
   31c52:	4a09      	ldr	r2, [pc, #36]	; (31c78 <sys_clock_driver_init+0x68>)
   31c54:	60a3      	str	r3, [r4, #8]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   31c56:	2100      	movs	r1, #0
   31c58:	6023      	str	r3, [r4, #0]
   31c5a:	4808      	ldr	r0, [pc, #32]	; (31c7c <sys_clock_driver_init+0x6c>)
	int_mask = BIT_MASK(CHAN_COUNT);
   31c5c:	6013      	str	r3, [r2, #0]
	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   31c5e:	f7ff ff1f 	bl	31aa0 <compare_set.constprop.0.isra.0>

	z_nrf_clock_control_lf_on(mode);
   31c62:	4630      	mov	r0, r6
   31c64:	f7fd fb16 	bl	2f294 <z_nrf_clock_control_lf_on>

	return 0;
}
   31c68:	4628      	mov	r0, r5
   31c6a:	bd70      	pop	{r4, r5, r6, pc}
   31c6c:	20002a90 	.word	0x20002a90
   31c70:	40011000 	.word	0x40011000
   31c74:	e000e100 	.word	0xe000e100
   31c78:	200031b8 	.word	0x200031b8
   31c7c:	007fffff 	.word	0x007fffff

00031c80 <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   31c80:	1c43      	adds	r3, r0, #1
{
   31c82:	b510      	push	{r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   31c84:	d01c      	beq.n	31cc0 <sys_clock_set_timeout+0x40>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   31c86:	2801      	cmp	r0, #1
   31c88:	dd1c      	ble.n	31cc4 <sys_clock_set_timeout+0x44>
   31c8a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   31c8e:	da1b      	bge.n	31cc8 <sys_clock_set_timeout+0x48>
   31c90:	1e44      	subs	r4, r0, #1
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   31c92:	f7ff fe81 	bl	31998 <z_nrf_rtc_timer_read>
   31c96:	4a0d      	ldr	r2, [pc, #52]	; (31ccc <sys_clock_set_timeout+0x4c>)
   31c98:	e9d2 3100 	ldrd	r3, r1, [r2]
   31c9c:	1ac0      	subs	r0, r0, r3
		ticks = 0;
   31c9e:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   31ca2:	bf28      	it	cs
   31ca4:	2400      	movcs	r4, #0
	if (cyc > MAX_CYCLES) {
   31ca6:	4a0a      	ldr	r2, [pc, #40]	; (31cd0 <sys_clock_set_timeout+0x50>)
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   31ca8:	3001      	adds	r0, #1
   31caa:	4420      	add	r0, r4
	if (cyc > MAX_CYCLES) {
   31cac:	4290      	cmp	r0, r2
   31cae:	bf28      	it	cs
   31cb0:	4610      	movcs	r0, r2
	uint64_t target_time = cyc + last_count;
   31cb2:	18c0      	adds	r0, r0, r3
}
   31cb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   31cb8:	f141 0100 	adc.w	r1, r1, #0
   31cbc:	f7ff bef0 	b.w	31aa0 <compare_set.constprop.0.isra.0>
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   31cc0:	4803      	ldr	r0, [pc, #12]	; (31cd0 <sys_clock_set_timeout+0x50>)
   31cc2:	e7e5      	b.n	31c90 <sys_clock_set_timeout+0x10>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   31cc4:	2400      	movs	r4, #0
   31cc6:	e7e4      	b.n	31c92 <sys_clock_set_timeout+0x12>
   31cc8:	4c01      	ldr	r4, [pc, #4]	; (31cd0 <sys_clock_set_timeout+0x50>)
   31cca:	e7e2      	b.n	31c92 <sys_clock_set_timeout+0x12>
   31ccc:	20002aa0 	.word	0x20002aa0
   31cd0:	007fffff 	.word	0x007fffff

00031cd4 <sys_clock_elapsed>:
{
   31cd4:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
   31cd6:	f7ff fe5f 	bl	31998 <z_nrf_rtc_timer_read>
   31cda:	4b02      	ldr	r3, [pc, #8]	; (31ce4 <sys_clock_elapsed+0x10>)
   31cdc:	681b      	ldr	r3, [r3, #0]
}
   31cde:	1ac0      	subs	r0, r0, r3
   31ce0:	bd08      	pop	{r3, pc}
   31ce2:	bf00      	nop
   31ce4:	20002aa0 	.word	0x20002aa0

00031ce8 <nrf_gpio_pin_port_decode>:
{
   31ce8:	b508      	push	{r3, lr}
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   31cea:	6802      	ldr	r2, [r0, #0]
    switch (port)
   31cec:	0953      	lsrs	r3, r2, #5
   31cee:	d104      	bne.n	31cfa <nrf_gpio_pin_port_decode+0x12>
    return (mask & (1UL << pin_number)) ? true : false;
   31cf0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   31cf4:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   31cf6:	07db      	lsls	r3, r3, #31
   31cf8:	d40a      	bmi.n	31d10 <nrf_gpio_pin_port_decode+0x28>
   31cfa:	4907      	ldr	r1, [pc, #28]	; (31d18 <nrf_gpio_pin_port_decode+0x30>)
   31cfc:	4807      	ldr	r0, [pc, #28]	; (31d1c <nrf_gpio_pin_port_decode+0x34>)
   31cfe:	f240 2247 	movw	r2, #583	; 0x247
   31d02:	f006 ff06 	bl	38b12 <assert_print>
   31d06:	4804      	ldr	r0, [pc, #16]	; (31d18 <nrf_gpio_pin_port_decode+0x30>)
   31d08:	f240 2147 	movw	r1, #583	; 0x247
   31d0c:	f006 fefa 	bl	38b04 <assert_post_action>
}
   31d10:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
   31d14:	bd08      	pop	{r3, pc}
   31d16:	bf00      	nop
   31d18:	0003ed49 	.word	0x0003ed49
   31d1c:	0003d1d7 	.word	0x0003d1d7

00031d20 <gpio_pin_set>:
{
   31d20:	b510      	push	{r4, lr}
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   31d22:	2301      	movs	r3, #1
   31d24:	fa03 f101 	lsl.w	r1, r3, r1
   31d28:	6843      	ldr	r3, [r0, #4]
	const struct gpio_driver_data *const data =
   31d2a:	6904      	ldr	r4, [r0, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   31d2c:	681b      	ldr	r3, [r3, #0]
   31d2e:	4219      	tst	r1, r3
   31d30:	d10a      	bne.n	31d48 <gpio_pin_set+0x28>
   31d32:	490c      	ldr	r1, [pc, #48]	; (31d64 <gpio_pin_set+0x44>)
   31d34:	480c      	ldr	r0, [pc, #48]	; (31d68 <gpio_pin_set+0x48>)
   31d36:	f240 5227 	movw	r2, #1319	; 0x527
   31d3a:	f006 feea 	bl	38b12 <assert_print>
   31d3e:	4809      	ldr	r0, [pc, #36]	; (31d64 <gpio_pin_set+0x44>)
   31d40:	f240 5127 	movw	r1, #1319	; 0x527
   31d44:	f006 fede 	bl	38b04 <assert_post_action>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   31d48:	6823      	ldr	r3, [r4, #0]
   31d4a:	4219      	tst	r1, r3
   31d4c:	d003      	beq.n	31d56 <gpio_pin_set+0x36>
	if (value != 0)	{
   31d4e:	b122      	cbz	r2, 31d5a <gpio_pin_set+0x3a>
	return api->port_clear_bits_raw(port, pins);
   31d50:	6883      	ldr	r3, [r0, #8]
   31d52:	691b      	ldr	r3, [r3, #16]
   31d54:	e003      	b.n	31d5e <gpio_pin_set+0x3e>
	if (value != 0)	{
   31d56:	2a00      	cmp	r2, #0
   31d58:	d0fa      	beq.n	31d50 <gpio_pin_set+0x30>
	return api->port_set_bits_raw(port, pins);
   31d5a:	6883      	ldr	r3, [r0, #8]
   31d5c:	68db      	ldr	r3, [r3, #12]
}
   31d5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return api->port_clear_bits_raw(port, pins);
   31d62:	4718      	bx	r3
   31d64:	0003d1a6 	.word	0x0003d1a6
   31d68:	0003d1d7 	.word	0x0003d1d7

00031d6c <dk_set_led>:

	return 0;
}

int dk_set_led(uint8_t led_idx, uint32_t val)
{
   31d6c:	b510      	push	{r4, lr}
	int err;

	if (led_idx >= ARRAY_SIZE(leds)) {
   31d6e:	2802      	cmp	r0, #2
{
   31d70:	b086      	sub	sp, #24
   31d72:	460a      	mov	r2, r1
	if (led_idx >= ARRAY_SIZE(leds)) {
   31d74:	d912      	bls.n	31d9c <dk_set_led+0x30>
		LOG_ERR("LED index out of the range");
   31d76:	4816      	ldr	r0, [pc, #88]	; (31dd0 <dk_set_led+0x64>)
   31d78:	6803      	ldr	r3, [r0, #0]
   31d7a:	075a      	lsls	r2, r3, #29
   31d7c:	d104      	bne.n	31d88 <dk_set_led+0x1c>
		return -EINVAL;
   31d7e:	f06f 0415 	mvn.w	r4, #21
	err = gpio_pin_set_dt(&leds[led_idx], val);
	if (err) {
		LOG_ERR("Cannot write LED gpio");
	}
	return err;
}
   31d82:	4620      	mov	r0, r4
   31d84:	b006      	add	sp, #24
   31d86:	bd10      	pop	{r4, pc}
		LOG_ERR("LED index out of the range");
   31d88:	4b12      	ldr	r3, [pc, #72]	; (31dd4 <dk_set_led+0x68>)
   31d8a:	9305      	str	r3, [sp, #20]
   31d8c:	aa04      	add	r2, sp, #16
   31d8e:	2302      	movs	r3, #2
   31d90:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   31d94:	9304      	str	r3, [sp, #16]
   31d96:	f009 fcb7 	bl	3b708 <z_log_msg_static_create.constprop.0>
   31d9a:	e7f0      	b.n	31d7e <dk_set_led+0x12>
	return gpio_pin_set(spec->port, spec->pin, value);
   31d9c:	4b0e      	ldr	r3, [pc, #56]	; (31dd8 <dk_set_led+0x6c>)
   31d9e:	eb03 01c0 	add.w	r1, r3, r0, lsl #3
   31da2:	f853 0030 	ldr.w	r0, [r3, r0, lsl #3]
   31da6:	7909      	ldrb	r1, [r1, #4]
   31da8:	f7ff ffba 	bl	31d20 <gpio_pin_set>
	if (err) {
   31dac:	4604      	mov	r4, r0
   31dae:	2800      	cmp	r0, #0
   31db0:	d0e7      	beq.n	31d82 <dk_set_led+0x16>
		LOG_ERR("Cannot write LED gpio");
   31db2:	4807      	ldr	r0, [pc, #28]	; (31dd0 <dk_set_led+0x64>)
   31db4:	6803      	ldr	r3, [r0, #0]
   31db6:	075b      	lsls	r3, r3, #29
   31db8:	d0e3      	beq.n	31d82 <dk_set_led+0x16>
   31dba:	4b08      	ldr	r3, [pc, #32]	; (31ddc <dk_set_led+0x70>)
   31dbc:	9305      	str	r3, [sp, #20]
   31dbe:	aa04      	add	r2, sp, #16
   31dc0:	2302      	movs	r3, #2
   31dc2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   31dc6:	9304      	str	r3, [sp, #16]
   31dc8:	f009 fc9e 	bl	3b708 <z_log_msg_static_create.constprop.0>
   31dcc:	e7d9      	b.n	31d82 <dk_set_led+0x16>
   31dce:	bf00      	nop
   31dd0:	20000aa8 	.word	0x20000aa8
   31dd4:	0003f717 	.word	0x0003f717
   31dd8:	0003cde4 	.word	0x0003cde4
   31ddc:	0003f701 	.word	0x0003f701

00031de0 <multithreading_lock_acquire>:
#include "multithreading_lock.h"

static K_MUTEX_DEFINE(mpsl_lock);

int multithreading_lock_acquire(k_timeout_t timeout)
{
   31de0:	4602      	mov	r2, r0
   31de2:	460b      	mov	r3, r1
	return z_impl_k_mutex_lock(mutex, timeout);
   31de4:	4801      	ldr	r0, [pc, #4]	; (31dec <multithreading_lock_acquire+0xc>)
   31de6:	f003 ba85 	b.w	352f4 <z_impl_k_mutex_lock>
   31dea:	bf00      	nop
   31dec:	20000b74 	.word	0x20000b74

00031df0 <multithreading_lock_release>:
	return z_impl_k_mutex_unlock(mutex);
   31df0:	4801      	ldr	r0, [pc, #4]	; (31df8 <multithreading_lock_release+0x8>)
   31df2:	f003 bb35 	b.w	35460 <z_impl_k_mutex_unlock>
   31df6:	bf00      	nop
   31df8:	20000b74 	.word	0x20000b74

00031dfc <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   31dfc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	z_impl_log_panic();
   31dfe:	f7f3 ffb1 	bl	25d64 <z_impl_log_panic>
	defined(CONFIG_SPM_SERVICE_NS_HANDLER_FROM_SPM_FAULT)
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
   31e02:	4808      	ldr	r0, [pc, #32]	; (31e24 <k_sys_fatal_error_handler+0x28>)
   31e04:	6803      	ldr	r3, [r0, #0]
   31e06:	075b      	lsls	r3, r3, #29
   31e08:	d009      	beq.n	31e1e <k_sys_fatal_error_handler+0x22>
   31e0a:	4b07      	ldr	r3, [pc, #28]	; (31e28 <k_sys_fatal_error_handler+0x2c>)
   31e0c:	9305      	str	r3, [sp, #20]
   31e0e:	2302      	movs	r3, #2
   31e10:	9304      	str	r3, [sp, #16]
   31e12:	2300      	movs	r3, #0
   31e14:	aa04      	add	r2, sp, #16
   31e16:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   31e1a:	f7f4 f9c7 	bl	261ac <z_impl_z_log_msg_static_create>
		sys_arch_reboot(0);
   31e1e:	2000      	movs	r0, #0
   31e20:	f7f5 fee8 	bl	27bf4 <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
   31e24:	20000aac 	.word	0x20000aac
   31e28:	0003f746 	.word	0x0003f746

00031e2c <sfloat_from_float>:
	int8_t exp = 0;

	float_enc.val = sys_get_le32((uint8_t *) &float_num);

	/* Handle zero float values. */
	if ((float_enc.exp == 0) && (float_enc.mantissa == 0)) {
   31e2c:	f030 4300 	bics.w	r3, r0, #2147483648	; 0x80000000

	return sfloat;
}

struct sfloat sfloat_from_float(float float_num)
{
   31e30:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   31e34:	4604      	mov	r4, r0
	if ((float_enc.exp == 0) && (float_enc.mantissa == 0)) {
   31e36:	d011      	beq.n	31e5c <sfloat_from_float+0x30>
	if (float_enc.exp == UINT8_MAX) {
   31e38:	f3c0 430f 	ubfx	r3, r0, #16, #16
   31e3c:	f403 43ff 	and.w	r3, r3, #32640	; 0x7f80
   31e40:	f5b3 4fff 	cmp.w	r3, #32640	; 0x7f80
   31e44:	d10f      	bne.n	31e66 <sfloat_from_float+0x3a>
		if (float_enc.mantissa == 0) {
   31e46:	f3c0 0316 	ubfx	r3, r0, #0, #23
   31e4a:	b94b      	cbnz	r3, 31e60 <sfloat_from_float+0x34>
			sfloat.mantissa = float_enc.sign ?
   31e4c:	f240 73fe 	movw	r3, #2046	; 0x7fe
   31e50:	f640 0202 	movw	r2, #2050	; 0x802
   31e54:	ea33 0320 	bics.w	r3, r3, r0, asr #32
   31e58:	bf28      	it	cs
   31e5a:	4613      	movcs	r3, r2
		return sfloat;
   31e5c:	2500      	movs	r5, #0
   31e5e:	e060      	b.n	31f22 <sfloat_from_float+0xf6>
			sfloat.mantissa = SFLOAT_NAN;
   31e60:	f240 73ff 	movw	r3, #2047	; 0x7ff
		return sfloat;
   31e64:	e7fa      	b.n	31e5c <sfloat_from_float+0x30>
	float_abs = float_enc.sign ? (-float_num) : float_num;
   31e66:	1606      	asrs	r6, r0, #24
   31e68:	d562      	bpl.n	31f30 <sfloat_from_float+0x104>
	if ((float_abs < FLOAT_ABS_MIN) ||
   31e6a:	4945      	ldr	r1, [pc, #276]	; (31f80 <sfloat_from_float+0x154>)
   31e6c:	f7db f920 	bl	d0b0 <__aeabi_fcmpgt>
   31e70:	2800      	cmp	r0, #0
   31e72:	d17f      	bne.n	31f74 <sfloat_from_float+0x148>
   31e74:	4943      	ldr	r1, [pc, #268]	; (31f84 <sfloat_from_float+0x158>)
   31e76:	4620      	mov	r0, r4
   31e78:	f7db f8fc 	bl	d074 <__aeabi_fcmplt>
   31e7c:	4605      	mov	r5, r0
   31e7e:	2800      	cmp	r0, #0
   31e80:	d178      	bne.n	31f74 <sfloat_from_float+0x148>
	    (float_num < FLOAT_NEG_MIN) ||
   31e82:	4941      	ldr	r1, [pc, #260]	; (31f88 <sfloat_from_float+0x15c>)
   31e84:	4620      	mov	r0, r4
   31e86:	f7db f913 	bl	d0b0 <__aeabi_fcmpgt>
   31e8a:	2800      	cmp	r0, #0
   31e8c:	d175      	bne.n	31f7a <sfloat_from_float+0x14e>
	float_abs = float_enc.sign ? (-float_num) : float_num;
   31e8e:	f104 4400 	add.w	r4, r4, #2147483648	; 0x80000000
	mantissa_max = float_enc.sign ? ABS(SFLOAT_MANTISSA_MIN) : SFLOAT_MANTISSA_MAX;
   31e92:	f44f 6900 	mov.w	r9, #2048	; 0x800
	inc_exp = float_abs > mantissa_max;
   31e96:	4648      	mov	r0, r9
   31e98:	f7da fefa 	bl	cc90 <__aeabi_i2f>
	int8_t exp = 0;
   31e9c:	2700      	movs	r7, #0
			if ((float_abs * 10) > mantissa_max) {
   31e9e:	f8df b0ec 	ldr.w	fp, [pc, #236]	; 31f8c <sfloat_from_float+0x160>
	inc_exp = float_abs > mantissa_max;
   31ea2:	4682      	mov	sl, r0
   31ea4:	46a0      	mov	r8, r4
	while (exp > SFLOAT_EXP_MIN && exp < SFLOAT_EXP_MAX) {
   31ea6:	463d      	mov	r5, r7
		if (inc_exp) {
   31ea8:	4621      	mov	r1, r4
   31eaa:	4650      	mov	r0, sl
   31eac:	f7db f8e2 	bl	d074 <__aeabi_fcmplt>
   31eb0:	2800      	cmp	r0, #0
   31eb2:	d04f      	beq.n	31f54 <sfloat_from_float+0x128>
			if (float_abs <= mantissa_max) {
   31eb4:	4641      	mov	r1, r8
   31eb6:	4650      	mov	r0, sl
   31eb8:	f7db f8f0 	bl	d09c <__aeabi_fcmpge>
   31ebc:	b958      	cbnz	r0, 31ed6 <sfloat_from_float+0xaa>
			float_abs /= 10;
   31ebe:	4640      	mov	r0, r8
   31ec0:	4659      	mov	r1, fp
   31ec2:	f7da ffed 	bl	cea0 <__aeabi_fdiv>
			exp++;
   31ec6:	1c6f      	adds	r7, r5, #1
			float_abs /= 10;
   31ec8:	4680      	mov	r8, r0
			exp++;
   31eca:	b27f      	sxtb	r7, r7
	while (exp > SFLOAT_EXP_MIN && exp < SFLOAT_EXP_MAX) {
   31ecc:	b2fd      	uxtb	r5, r7
   31ece:	1deb      	adds	r3, r5, #7
   31ed0:	b2db      	uxtb	r3, r3
   31ed2:	2b0d      	cmp	r3, #13
   31ed4:	d9e8      	bls.n	31ea8 <sfloat_from_float+0x7c>
	mantissa = (uint16_t) float_abs;
   31ed6:	4640      	mov	r0, r8
   31ed8:	f7db f91a 	bl	d110 <__aeabi_f2uiz>
   31edc:	b284      	uxth	r4, r0
	if (((float_abs - mantissa) * 10 >= 5) && (mantissa + 1 <= mantissa_max)) {
   31ede:	4620      	mov	r0, r4
   31ee0:	f7da fed6 	bl	cc90 <__aeabi_i2f>
   31ee4:	4601      	mov	r1, r0
   31ee6:	4640      	mov	r0, r8
   31ee8:	f7da fe1c 	bl	cb24 <__aeabi_fsub>
   31eec:	4927      	ldr	r1, [pc, #156]	; (31f8c <sfloat_from_float+0x160>)
   31eee:	f7da ff23 	bl	cd38 <__aeabi_fmul>
   31ef2:	4927      	ldr	r1, [pc, #156]	; (31f90 <sfloat_from_float+0x164>)
   31ef4:	f7db f8d2 	bl	d09c <__aeabi_fcmpge>
   31ef8:	b118      	cbz	r0, 31f02 <sfloat_from_float+0xd6>
   31efa:	45a1      	cmp	r9, r4
		mantissa++;
   31efc:	bf84      	itt	hi
   31efe:	1c63      	addhi	r3, r4, #1
   31f00:	b29c      	uxthhi	r4, r3
	if (exp >= 0) {
   31f02:	2f00      	cmp	r7, #0
		sfloat.exponent = (~sfloat.exponent & 0x0F) + 1;
   31f04:	bfbe      	ittt	lt
   31f06:	f105 35ff 	addlt.w	r5, r5, #4294967295	; 0xffffffff
   31f0a:	f005 050f 	andlt.w	r5, r5, #15
   31f0e:	3501      	addlt	r5, #1
	if (float_enc.sign) {
   31f10:	2e00      	cmp	r6, #0
	sfloat.mantissa = mantissa & SFLOAT_MANTISSA_MASK;
   31f12:	f3c4 030b 	ubfx	r3, r4, #0, #12
	if (float_enc.sign) {
   31f16:	da04      	bge.n	31f22 <sfloat_from_float+0xf6>
		sfloat.mantissa = (~sfloat.mantissa & SFLOAT_MANTISSA_MASK) + 1;
   31f18:	f483 637f 	eor.w	r3, r3, #4080	; 0xff0
   31f1c:	f083 030f 	eor.w	r3, r3, #15
   31f20:	3301      	adds	r3, #1
	struct sfloat_desc sfloat_desc;

	sfloat_desc = sfloat_desc_from_float(float_num);
	sfloat = sfloat_encode(&sfloat_desc);

	return sfloat;
   31f22:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
   31f26:	ea43 3005 	orr.w	r0, r3, r5, lsl #12
   31f2a:	b003      	add	sp, #12
   31f2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if ((float_abs < FLOAT_ABS_MIN) ||
   31f30:	4918      	ldr	r1, [pc, #96]	; (31f94 <sfloat_from_float+0x168>)
   31f32:	f7db f89f 	bl	d074 <__aeabi_fcmplt>
   31f36:	b9e8      	cbnz	r0, 31f74 <sfloat_from_float+0x148>
   31f38:	4912      	ldr	r1, [pc, #72]	; (31f84 <sfloat_from_float+0x158>)
   31f3a:	4620      	mov	r0, r4
   31f3c:	f7db f89a 	bl	d074 <__aeabi_fcmplt>
   31f40:	4605      	mov	r5, r0
   31f42:	b9b8      	cbnz	r0, 31f74 <sfloat_from_float+0x148>
	    (float_num < FLOAT_NEG_MIN) ||
   31f44:	4910      	ldr	r1, [pc, #64]	; (31f88 <sfloat_from_float+0x15c>)
   31f46:	4620      	mov	r0, r4
   31f48:	f7db f8b2 	bl	d0b0 <__aeabi_fcmpgt>
   31f4c:	b9a8      	cbnz	r0, 31f7a <sfloat_from_float+0x14e>
	mantissa_max = float_enc.sign ? ABS(SFLOAT_MANTISSA_MIN) : SFLOAT_MANTISSA_MAX;
   31f4e:	f240 79ff 	movw	r9, #2047	; 0x7ff
   31f52:	e7a0      	b.n	31e96 <sfloat_from_float+0x6a>
			if ((float_abs * 10) > mantissa_max) {
   31f54:	4659      	mov	r1, fp
   31f56:	4640      	mov	r0, r8
   31f58:	f7da feee 	bl	cd38 <__aeabi_fmul>
   31f5c:	4601      	mov	r1, r0
   31f5e:	9001      	str	r0, [sp, #4]
   31f60:	4650      	mov	r0, sl
   31f62:	f7db f887 	bl	d074 <__aeabi_fcmplt>
   31f66:	2800      	cmp	r0, #0
   31f68:	d1b5      	bne.n	31ed6 <sfloat_from_float+0xaa>
			float_abs *= 10;
   31f6a:	9901      	ldr	r1, [sp, #4]
			exp--;
   31f6c:	1e6f      	subs	r7, r5, #1
   31f6e:	b27f      	sxtb	r7, r7
			float_abs *= 10;
   31f70:	4688      	mov	r8, r1
   31f72:	e7ab      	b.n	31ecc <sfloat_from_float+0xa0>
		return sfloat;
   31f74:	f44f 6300 	mov.w	r3, #2048	; 0x800
   31f78:	e770      	b.n	31e5c <sfloat_from_float+0x30>
   31f7a:	f44f 6300 	mov.w	r3, #2048	; 0x800
   31f7e:	e7d0      	b.n	31f22 <sfloat_from_float+0xf6>
   31f80:	b58637bd 	.word	0xb58637bd
   31f84:	d0989680 	.word	0xd0989680
   31f88:	5098836d 	.word	0x5098836d
   31f8c:	41200000 	.word	0x41200000
   31f90:	40a00000 	.word	0x40a00000
   31f94:	358637bd 	.word	0x358637bd

00031f98 <sdc_assertion_handler>:
	bt_ctlr_assert_handle((char *) file, line);
}

#else /* !IS_ENABLED(CONFIG_BT_CTLR_ASSERT_HANDLER) */
void sdc_assertion_handler(const char *const file, const uint32_t line)
{
   31f98:	b5b0      	push	{r4, r5, r7, lr}
   31f9a:	4603      	mov	r3, r0
	BT_ERR("SoftDevice Controller ASSERT: %s, %d", file, line);
   31f9c:	480f      	ldr	r0, [pc, #60]	; (31fdc <sdc_assertion_handler+0x44>)
   31f9e:	6802      	ldr	r2, [r0, #0]
   31fa0:	0752      	lsls	r2, r2, #29
{
   31fa2:	af00      	add	r7, sp, #0
	BT_ERR("SoftDevice Controller ASSERT: %s, %d", file, line);
   31fa4:	d012      	beq.n	31fcc <sdc_assertion_handler+0x34>
   31fa6:	466c      	mov	r4, sp
   31fa8:	b08a      	sub	sp, #40	; 0x28
   31faa:	466a      	mov	r2, sp
   31fac:	4d0c      	ldr	r5, [pc, #48]	; (31fe0 <sdc_assertion_handler+0x48>)
   31fae:	61d1      	str	r1, [r2, #28]
   31fb0:	e9c2 5305 	strd	r5, r3, [r2, #20]
   31fb4:	f44f 7300 	mov.w	r3, #512	; 0x200
   31fb8:	8413      	strh	r3, [r2, #32]
   31fba:	4b0a      	ldr	r3, [pc, #40]	; (31fe4 <sdc_assertion_handler+0x4c>)
   31fbc:	f842 3f10 	str.w	r3, [r2, #16]!
   31fc0:	2300      	movs	r3, #0
   31fc2:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   31fc6:	f7f4 f8f1 	bl	261ac <z_impl_z_log_msg_static_create>
   31fca:	46a5      	mov	sp, r4
	k_oops();
   31fcc:	4040      	eors	r0, r0
   31fce:	f380 8811 	msr	BASEPRI, r0
   31fd2:	f04f 0003 	mov.w	r0, #3
   31fd6:	df02      	svc	2
}
   31fd8:	46bd      	mov	sp, r7
   31fda:	bdb0      	pop	{r4, r5, r7, pc}
   31fdc:	20000afc 	.word	0x20000afc
   31fe0:	0003f763 	.word	0x0003f763
   31fe4:	01000004 	.word	0x01000004

00031fe8 <rand_prio_low_vector_get_blocking>:
	__ASSERT(ret >= 0, "The entropy source returned an error in the high priority context");
	return ret >= 0 ? ret : 0;
}

static void rand_prio_low_vector_get_blocking(uint8_t *p_buff, uint8_t length)
{
   31fe8:	b510      	push	{r4, lr}
   31fea:	4603      	mov	r3, r0
   31fec:	460a      	mov	r2, r1

static inline int z_impl_entropy_get_entropy(const struct device *dev,
					     uint8_t *buffer,
					     uint16_t length)
{
	const struct entropy_driver_api *api =
   31fee:	480d      	ldr	r0, [pc, #52]	; (32024 <CONFIG_FLASH_LOAD_SIZE+0x24>)
		(const struct entropy_driver_api *)dev->api;

	__ASSERT(api->get_entropy != NULL,
   31ff0:	6881      	ldr	r1, [r0, #8]
   31ff2:	680c      	ldr	r4, [r1, #0]
   31ff4:	b944      	cbnz	r4, 32008 <CONFIG_FLASH_LOAD_SIZE+0x8>
   31ff6:	490c      	ldr	r1, [pc, #48]	; (32028 <CONFIG_FLASH_LOAD_SIZE+0x28>)
   31ff8:	480c      	ldr	r0, [pc, #48]	; (3202c <CONFIG_FLASH_LOAD_SIZE+0x2c>)
   31ffa:	224d      	movs	r2, #77	; 0x4d
   31ffc:	f006 fd89 	bl	38b12 <assert_print>
   32000:	4809      	ldr	r0, [pc, #36]	; (32028 <CONFIG_FLASH_LOAD_SIZE+0x28>)
   32002:	214d      	movs	r1, #77	; 0x4d
	int err = entropy_get_entropy(entropy_source, p_buff, length);

	__ASSERT(err == 0, "The entropy source returned an error in a blocking call");
   32004:	f006 fd7e 	bl	38b04 <assert_post_action>
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
   32008:	4619      	mov	r1, r3
   3200a:	47a0      	blx	r4
   3200c:	b148      	cbz	r0, 32022 <CONFIG_FLASH_LOAD_SIZE+0x22>
   3200e:	4908      	ldr	r1, [pc, #32]	; (32030 <CONFIG_FLASH_LOAD_SIZE+0x30>)
   32010:	4806      	ldr	r0, [pc, #24]	; (3202c <CONFIG_FLASH_LOAD_SIZE+0x2c>)
   32012:	f240 12a9 	movw	r2, #425	; 0x1a9
   32016:	f006 fd7c 	bl	38b12 <assert_print>
   3201a:	4805      	ldr	r0, [pc, #20]	; (32030 <CONFIG_FLASH_LOAD_SIZE+0x30>)
   3201c:	f240 11a9 	movw	r1, #425	; 0x1a9
   32020:	e7f0      	b.n	32004 <CONFIG_FLASH_LOAD_SIZE+0x4>
	(void) err;
}
   32022:	bd10      	pop	{r4, pc}
   32024:	0003c118 	.word	0x0003c118
   32028:	0003f788 	.word	0x0003f788
   3202c:	0003d1d7 	.word	0x0003d1d7
   32030:	0003f7bc 	.word	0x0003f7bc

00032034 <rand_prio_low_vector_get>:
{
   32034:	b538      	push	{r3, r4, r5, lr}
   32036:	4604      	mov	r4, r0
static inline int entropy_get_entropy_isr(const struct device *dev,
					  uint8_t *buffer,
					  uint16_t length,
					  uint32_t flags)
{
	const struct entropy_driver_api *api =
   32038:	480b      	ldr	r0, [pc, #44]	; (32068 <rand_prio_low_vector_get+0x34>)
		(const struct entropy_driver_api *)dev->api;

	if (unlikely(!api->get_entropy_isr)) {
   3203a:	6883      	ldr	r3, [r0, #8]
   3203c:	685d      	ldr	r5, [r3, #4]
   3203e:	460a      	mov	r2, r1
   32040:	b955      	cbnz	r5, 32058 <rand_prio_low_vector_get+0x24>
	__ASSERT(ret >= 0, "The entropy source returned an error in the low priority context");
   32042:	490a      	ldr	r1, [pc, #40]	; (3206c <rand_prio_low_vector_get+0x38>)
   32044:	480a      	ldr	r0, [pc, #40]	; (32070 <rand_prio_low_vector_get+0x3c>)
   32046:	f240 1299 	movw	r2, #409	; 0x199
   3204a:	f006 fd62 	bl	38b12 <assert_print>
   3204e:	4807      	ldr	r0, [pc, #28]	; (3206c <rand_prio_low_vector_get+0x38>)
   32050:	f240 1199 	movw	r1, #409	; 0x199
   32054:	f006 fd56 	bl	38b04 <assert_post_action>
		return -ENOTSUP;
	}

	return api->get_entropy_isr(dev, buffer, length, flags);
   32058:	2300      	movs	r3, #0
   3205a:	4621      	mov	r1, r4
   3205c:	47a8      	blx	r5
   3205e:	2800      	cmp	r0, #0
   32060:	dbef      	blt.n	32042 <rand_prio_low_vector_get+0xe>
}
   32062:	b2c0      	uxtb	r0, r0
   32064:	bd38      	pop	{r3, r4, r5, pc}
   32066:	bf00      	nop
   32068:	0003c118 	.word	0x0003c118
   3206c:	0003f7bc 	.word	0x0003f7bc
   32070:	0003d1d7 	.word	0x0003d1d7

00032074 <receive_signal_raise>:
 *
 * @return N/A
 */
static inline int mpsl_work_submit(struct k_work *work)
{
	return k_work_submit_to_queue(&mpsl_work_q, work);
   32074:	4901      	ldr	r1, [pc, #4]	; (3207c <receive_signal_raise+0x8>)
   32076:	4802      	ldr	r0, [pc, #8]	; (32080 <receive_signal_raise+0xc>)
   32078:	f009 be6a 	b.w	3bd50 <k_work_submit_to_queue>
   3207c:	200031c0 	.word	0x200031c0
   32080:	20002b30 	.word	0x20002b30

00032084 <rand_prio_high_vector_get>:
{
   32084:	b538      	push	{r3, r4, r5, lr}
   32086:	4604      	mov	r4, r0
	const struct entropy_driver_api *api =
   32088:	480b      	ldr	r0, [pc, #44]	; (320b8 <rand_prio_high_vector_get+0x34>)
	if (unlikely(!api->get_entropy_isr)) {
   3208a:	6883      	ldr	r3, [r0, #8]
   3208c:	685d      	ldr	r5, [r3, #4]
   3208e:	460a      	mov	r2, r1
   32090:	b955      	cbnz	r5, 320a8 <rand_prio_high_vector_get+0x24>
	__ASSERT(ret >= 0, "The entropy source returned an error in the high priority context");
   32092:	490a      	ldr	r1, [pc, #40]	; (320bc <rand_prio_high_vector_get+0x38>)
   32094:	480a      	ldr	r0, [pc, #40]	; (320c0 <rand_prio_high_vector_get+0x3c>)
   32096:	f240 12a1 	movw	r2, #417	; 0x1a1
   3209a:	f006 fd3a 	bl	38b12 <assert_print>
   3209e:	4807      	ldr	r0, [pc, #28]	; (320bc <rand_prio_high_vector_get+0x38>)
   320a0:	f240 11a1 	movw	r1, #417	; 0x1a1
   320a4:	f006 fd2e 	bl	38b04 <assert_post_action>
	return api->get_entropy_isr(dev, buffer, length, flags);
   320a8:	2300      	movs	r3, #0
   320aa:	4621      	mov	r1, r4
   320ac:	47a8      	blx	r5
   320ae:	2800      	cmp	r0, #0
   320b0:	dbef      	blt.n	32092 <rand_prio_high_vector_get+0xe>
}
   320b2:	b2c0      	uxtb	r0, r0
   320b4:	bd38      	pop	{r3, r4, r5, pc}
   320b6:	bf00      	nop
   320b8:	0003c118 	.word	0x0003c118
   320bc:	0003f7bc 	.word	0x0003f7bc
   320c0:	0003d1d7 	.word	0x0003d1d7

000320c4 <hci_driver_init>:

	(void)sdc_hci_cmd_vs_zephyr_write_bd_addr(bd_addr);
}

static int hci_driver_init(const struct device *unused)
{
   320c4:	b5b0      	push	{r4, r5, r7, lr}
   320c6:	b082      	sub	sp, #8
	ARG_UNUSED(unused);
	int err = 0;

	bt_hci_driver_register(&drv);
   320c8:	483c      	ldr	r0, [pc, #240]	; (321bc <hci_driver_init+0xf8>)
{
   320ca:	af00      	add	r7, sp, #0
	bt_hci_driver_register(&drv);
   320cc:	f7f7 f848 	bl	29160 <bt_hci_driver_register>

	err = sdc_init(sdc_assertion_handler);
   320d0:	483b      	ldr	r0, [pc, #236]	; (321c0 <hci_driver_init+0xfc>)
   320d2:	f7df fc0f 	bl	118f4 <sdc_init>
			err = sdc_support_ext_adv();
   320d6:	f7df fc97 	bl	11a08 <sdc_support_ext_adv>
			if (err) {
   320da:	b120      	cbz	r0, 320e6 <hci_driver_init+0x22>
				return -ENOTSUP;
   320dc:	f06f 0085 	mvn.w	r0, #133	; 0x85
	if (err) {
		return err;
	}

	return err;
}
   320e0:	3708      	adds	r7, #8
   320e2:	46bd      	mov	sp, r7
   320e4:	bdb0      	pop	{r4, r5, r7, pc}
		err = sdc_support_peripheral();
   320e6:	f7df fcaf 	bl	11a48 <sdc_support_peripheral>
		if (err) {
   320ea:	2800      	cmp	r0, #0
   320ec:	d1f6      	bne.n	320dc <hci_driver_init+0x18>
			err = sdc_support_dle_peripheral();
   320ee:	f7df fc7b 	bl	119e8 <sdc_support_dle_peripheral>
			if (err) {
   320f2:	2800      	cmp	r0, #0
   320f4:	d1f2      	bne.n	320dc <hci_driver_init+0x18>
		err = sdc_support_le_2m_phy();
   320f6:	f7df fc97 	bl	11a28 <sdc_support_le_2m_phy>
		if (err) {
   320fa:	2800      	cmp	r0, #0
   320fc:	d1ee      	bne.n	320dc <hci_driver_init+0x18>
			err = sdc_support_phy_update_peripheral();
   320fe:	f7df fcb3 	bl	11a68 <sdc_support_phy_update_peripheral>
			if (err) {
   32102:	4604      	mov	r4, r0
   32104:	2800      	cmp	r0, #0
   32106:	d1e9      	bne.n	320dc <hci_driver_init+0x18>
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   32108:	1d3a      	adds	r2, r7, #4
   3210a:	2101      	movs	r1, #1
	cfg.central_count.count = SDC_CENTRAL_COUNT;
   3210c:	7138      	strb	r0, [r7, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   3210e:	f7df fb4d 	bl	117ac <sdc_cfg_set>
	if (required_memory < 0) {
   32112:	2800      	cmp	r0, #0
   32114:	dbe4      	blt.n	320e0 <hci_driver_init+0x1c>
	cfg.peripheral_count.count = CONFIG_BT_CTLR_SDC_PERIPHERAL_COUNT;
   32116:	2301      	movs	r3, #1
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   32118:	1d3a      	adds	r2, r7, #4
   3211a:	2102      	movs	r1, #2
   3211c:	4620      	mov	r0, r4
	cfg.peripheral_count.count = CONFIG_BT_CTLR_SDC_PERIPHERAL_COUNT;
   3211e:	713b      	strb	r3, [r7, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   32120:	f7df fb44 	bl	117ac <sdc_cfg_set>
	if (required_memory < 0) {
   32124:	2800      	cmp	r0, #0
   32126:	dbdb      	blt.n	320e0 <hci_driver_init+0x1c>
	cfg.buffer_cfg.tx_packet_size = MAX_TX_PACKET_SIZE;
   32128:	4b26      	ldr	r3, [pc, #152]	; (321c4 <hci_driver_init+0x100>)
   3212a:	607b      	str	r3, [r7, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   3212c:	1d3a      	adds	r2, r7, #4
   3212e:	2103      	movs	r1, #3
   32130:	4620      	mov	r0, r4
   32132:	f7df fb3b 	bl	117ac <sdc_cfg_set>
	if (required_memory < 0) {
   32136:	2800      	cmp	r0, #0
   32138:	dbd2      	blt.n	320e0 <hci_driver_init+0x1c>
	cfg.event_length.event_length_us =
   3213a:	f641 534c 	movw	r3, #7500	; 0x1d4c
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   3213e:	1d3a      	adds	r2, r7, #4
   32140:	2104      	movs	r1, #4
   32142:	4620      	mov	r0, r4
	cfg.event_length.event_length_us =
   32144:	607b      	str	r3, [r7, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   32146:	f7df fb31 	bl	117ac <sdc_cfg_set>
	if (required_memory < 0) {
   3214a:	2800      	cmp	r0, #0
   3214c:	dbc8      	blt.n	320e0 <hci_driver_init+0x1c>
	cfg.adv_count.count = SDC_ADV_SET_COUNT;
   3214e:	2302      	movs	r3, #2
	sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   32150:	1d3a      	adds	r2, r7, #4
   32152:	2105      	movs	r1, #5
   32154:	4620      	mov	r0, r4
	cfg.adv_count.count = SDC_ADV_SET_COUNT;
   32156:	713b      	strb	r3, [r7, #4]
	sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   32158:	f7df fb28 	bl	117ac <sdc_cfg_set>
	if (required_memory < 0) {
   3215c:	2800      	cmp	r0, #0
   3215e:	dbbf      	blt.n	320e0 <hci_driver_init+0x1c>
		cfg.adv_buffer_cfg.max_adv_data = CONFIG_BT_CTLR_ADV_DATA_LEN_MAX;
   32160:	231f      	movs	r3, #31
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   32162:	1d3a      	adds	r2, r7, #4
   32164:	2107      	movs	r1, #7
   32166:	2000      	movs	r0, #0
		cfg.adv_buffer_cfg.max_adv_data = CONFIG_BT_CTLR_ADV_DATA_LEN_MAX;
   32168:	80bb      	strh	r3, [r7, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   3216a:	f7df fb1f 	bl	117ac <sdc_cfg_set>
		if (required_memory < 0) {
   3216e:	2800      	cmp	r0, #0
   32170:	dbb6      	blt.n	320e0 <hci_driver_init+0x1c>
	if (required_memory > sizeof(sdc_mempool)) {
   32172:	f5b0 6f18 	cmp.w	r0, #2432	; 0x980
   32176:	db1f      	blt.n	321b8 <hci_driver_init+0xf4>
		BT_ERR("Allocated memory too low: %u < %u",
   32178:	4c13      	ldr	r4, [pc, #76]	; (321c8 <hci_driver_init+0x104>)
   3217a:	6823      	ldr	r3, [r4, #0]
   3217c:	075b      	lsls	r3, r3, #29
   3217e:	d012      	beq.n	321a6 <hci_driver_init+0xe2>
   32180:	466d      	mov	r5, sp
   32182:	b088      	sub	sp, #32
   32184:	466a      	mov	r2, sp
   32186:	4b11      	ldr	r3, [pc, #68]	; (321cc <hci_driver_init+0x108>)
   32188:	6153      	str	r3, [r2, #20]
   3218a:	f640 137f 	movw	r3, #2431	; 0x97f
   3218e:	e9c2 3006 	strd	r3, r0, [r2, #24]
   32192:	2304      	movs	r3, #4
   32194:	f842 3f10 	str.w	r3, [r2, #16]!
   32198:	2300      	movs	r3, #0
   3219a:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   3219e:	4620      	mov	r0, r4
   321a0:	f7f4 f804 	bl	261ac <z_impl_z_log_msg_static_create>
   321a4:	46ad      	mov	sp, r5
		k_panic();
   321a6:	4040      	eors	r0, r0
   321a8:	f380 8811 	msr	BASEPRI, r0
   321ac:	f04f 0004 	mov.w	r0, #4
   321b0:	df02      	svc	2
		return -ENOMEM;
   321b2:	f06f 000b 	mvn.w	r0, #11
   321b6:	e793      	b.n	320e0 <hci_driver_init+0x1c>
	return 0;
   321b8:	2000      	movs	r0, #0
	if (err) {
   321ba:	e791      	b.n	320e0 <hci_driver_init+0x1c>
   321bc:	0003cdfc 	.word	0x0003cdfc
   321c0:	00031f99 	.word	0x00031f99
   321c4:	02031b1b 	.word	0x02031b1b
   321c8:	20000afc 	.word	0x20000afc
   321cc:	0003f7f5 	.word	0x0003f7f5

000321d0 <hci_driver_open>:
{
   321d0:	b5b0      	push	{r4, r5, r7, lr}
   321d2:	b08c      	sub	sp, #48	; 0x30
	k_work_init(&receive_work, receive_work_handler);
   321d4:	4937      	ldr	r1, [pc, #220]	; (322b4 <hci_driver_open+0xe4>)
   321d6:	4838      	ldr	r0, [pc, #224]	; (322b8 <hci_driver_open+0xe8>)
	LOG_HEXDUMP_INF(build_revision, sizeof(build_revision),
   321d8:	4c38      	ldr	r4, [pc, #224]	; (322bc <hci_driver_open+0xec>)
{
   321da:	af00      	add	r7, sp, #0
	k_work_init(&receive_work, receive_work_handler);
   321dc:	f003 fd74 	bl	35cc8 <k_work_init>
		hci_ecdh_init();
   321e0:	f000 fe62 	bl	32ea8 <hci_ecdh_init>
	sdc_build_revision_get(build_revision);
   321e4:	1d38      	adds	r0, r7, #4
   321e6:	f7df fad3 	bl	11790 <sdc_build_revision_get>
	LOG_HEXDUMP_INF(build_revision, sizeof(build_revision),
   321ea:	6823      	ldr	r3, [r4, #0]
   321ec:	f003 0307 	and.w	r3, r3, #7
   321f0:	2b02      	cmp	r3, #2
   321f2:	d912      	bls.n	3221a <hci_driver_open+0x4a>
   321f4:	466d      	mov	r5, sp
   321f6:	b088      	sub	sp, #32
   321f8:	466a      	mov	r2, sp
   321fa:	4b31      	ldr	r3, [pc, #196]	; (322c0 <hci_driver_open+0xf0>)
   321fc:	6153      	str	r3, [r2, #20]
   321fe:	4b31      	ldr	r3, [pc, #196]	; (322c4 <hci_driver_open+0xf4>)
   32200:	6193      	str	r3, [r2, #24]
   32202:	f44f 7300 	mov.w	r3, #512	; 0x200
   32206:	8393      	strh	r3, [r2, #28]
   32208:	4b2f      	ldr	r3, [pc, #188]	; (322c8 <hci_driver_open+0xf8>)
   3220a:	f842 3f10 	str.w	r3, [r2, #16]!
   3220e:	492f      	ldr	r1, [pc, #188]	; (322cc <hci_driver_open+0xfc>)
   32210:	1d3b      	adds	r3, r7, #4
   32212:	4620      	mov	r0, r4
   32214:	f7f3 ffca 	bl	261ac <z_impl_z_log_msg_static_create>
   32218:	46ad      	mov	sp, r5
   3221a:	482d      	ldr	r0, [pc, #180]	; (322d0 <hci_driver_open+0x100>)
   3221c:	f009 fcbe 	bl	3bb9c <z_device_is_ready>
	if (!device_is_ready(entropy_source)) {
   32220:	4603      	mov	r3, r0
   32222:	b9a0      	cbnz	r0, 3224e <hci_driver_open+0x7e>
		BT_ERR("Entropy source device not ready");
   32224:	6822      	ldr	r2, [r4, #0]
   32226:	0752      	lsls	r2, r2, #29
   32228:	d105      	bne.n	32236 <hci_driver_open+0x66>
		return -ENODEV;
   3222a:	f06f 0412 	mvn.w	r4, #18
}
   3222e:	4620      	mov	r0, r4
   32230:	3730      	adds	r7, #48	; 0x30
   32232:	46bd      	mov	sp, r7
   32234:	bdb0      	pop	{r4, r5, r7, pc}
		BT_ERR("Entropy source device not ready");
   32236:	4a27      	ldr	r2, [pc, #156]	; (322d4 <hci_driver_open+0x104>)
   32238:	62fa      	str	r2, [r7, #44]	; 0x2c
   3223a:	2202      	movs	r2, #2
   3223c:	62ba      	str	r2, [r7, #40]	; 0x28
   3223e:	481f      	ldr	r0, [pc, #124]	; (322bc <hci_driver_open+0xec>)
   32240:	f107 0228 	add.w	r2, r7, #40	; 0x28
   32244:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   32248:	f7f3 ffb0 	bl	261ac <z_impl_z_log_msg_static_create>
   3224c:	e7ed      	b.n	3222a <hci_driver_open+0x5a>
	sdc_rand_source_t rand_functions = {
   3224e:	4a22      	ldr	r2, [pc, #136]	; (322d8 <hci_driver_open+0x108>)
   32250:	ca07      	ldmia	r2, {r0, r1, r2}
   32252:	f107 0318 	add.w	r3, r7, #24
   32256:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	err = sdc_rand_source_register(&rand_functions);
   3225a:	4618      	mov	r0, r3
   3225c:	f7df fc5a 	bl	11b14 <sdc_rand_source_register>
	if (err) {
   32260:	b1b0      	cbz	r0, 32290 <hci_driver_open+0xc0>
		BT_ERR("Failed to register rand source (%d)", err);
   32262:	6823      	ldr	r3, [r4, #0]
   32264:	075b      	lsls	r3, r3, #29
   32266:	d102      	bne.n	3226e <hci_driver_open+0x9e>
		return -EINVAL;
   32268:	f06f 0415 	mvn.w	r4, #21
   3226c:	e7df      	b.n	3222e <hci_driver_open+0x5e>
		BT_ERR("Failed to register rand source (%d)", err);
   3226e:	466c      	mov	r4, sp
   32270:	b088      	sub	sp, #32
   32272:	466a      	mov	r2, sp
   32274:	4b19      	ldr	r3, [pc, #100]	; (322dc <hci_driver_open+0x10c>)
   32276:	e9c2 3005 	strd	r3, r0, [r2, #20]
   3227a:	2303      	movs	r3, #3
   3227c:	f842 3f10 	str.w	r3, [r2, #16]!
   32280:	480e      	ldr	r0, [pc, #56]	; (322bc <hci_driver_open+0xec>)
   32282:	2300      	movs	r3, #0
   32284:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   32288:	f7f3 ff90 	bl	261ac <z_impl_z_log_msg_static_create>
   3228c:	46a5      	mov	sp, r4
   3228e:	e7eb      	b.n	32268 <hci_driver_open+0x98>
	err = MULTITHREADING_LOCK_ACQUIRE();
   32290:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   32294:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   32298:	f7ff fda2 	bl	31de0 <multithreading_lock_acquire>
	if (err) {
   3229c:	4604      	mov	r4, r0
   3229e:	2800      	cmp	r0, #0
   322a0:	d1c5      	bne.n	3222e <hci_driver_open+0x5e>
	err = sdc_enable(receive_signal_raise, sdc_mempool);
   322a2:	490f      	ldr	r1, [pc, #60]	; (322e0 <hci_driver_open+0x110>)
   322a4:	480f      	ldr	r0, [pc, #60]	; (322e4 <hci_driver_open+0x114>)
   322a6:	f7df fafd 	bl	118a4 <sdc_enable>
	if (err) {
   322aa:	4604      	mov	r4, r0
	MULTITHREADING_LOCK_RELEASE();
   322ac:	f7ff fda0 	bl	31df0 <multithreading_lock_release>
	return 0;
   322b0:	e7bd      	b.n	3222e <hci_driver_open+0x5e>
   322b2:	bf00      	nop
   322b4:	0003b79f 	.word	0x0003b79f
   322b8:	200031c0 	.word	0x200031c0
   322bc:	20000afc 	.word	0x20000afc
   322c0:	0003ee62 	.word	0x0003ee62
   322c4:	0003f817 	.word	0x0003f817
   322c8:	01000003 	.word	0x01000003
   322cc:	00a01cc0 	.word	0x00a01cc0
   322d0:	0003c118 	.word	0x0003c118
   322d4:	0003f83e 	.word	0x0003f83e
   322d8:	0003c660 	.word	0x0003c660
   322dc:	0003f85e 	.word	0x0003f85e
   322e0:	200035db 	.word	0x200035db
   322e4:	00032075 	.word	0x00032075

000322e8 <hci_driver_receive_process>:
{
   322e8:	b570      	push	{r4, r5, r6, lr}
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   322ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
{
   322ee:	b088      	sub	sp, #32
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   322f0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   322f4:	f7ff fd74 	bl	31de0 <multithreading_lock_acquire>
	if (!errcode) {
   322f8:	2800      	cmp	r0, #0
   322fa:	d174      	bne.n	323e6 <hci_driver_receive_process+0xfe>
		errcode = hci_internal_msg_get(p_hci_buffer, &msg_type);
   322fc:	4d3b      	ldr	r5, [pc, #236]	; (323ec <hci_driver_receive_process+0x104>)
   322fe:	f10d 0107 	add.w	r1, sp, #7
   32302:	4628      	mov	r0, r5
   32304:	f000 fc5c 	bl	32bc0 <hci_internal_msg_get>
   32308:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   3230a:	f7ff fd71 	bl	31df0 <multithreading_lock_release>
	if (errcode) {
   3230e:	2c00      	cmp	r4, #0
   32310:	d169      	bne.n	323e6 <hci_driver_receive_process+0xfe>
	if (msg_type == SDC_HCI_MSG_TYPE_EVT) {
   32312:	f89d 6007 	ldrb.w	r6, [sp, #7]
   32316:	2e04      	cmp	r6, #4
   32318:	d13f      	bne.n	3239a <hci_driver_receive_process+0xb2>
	switch (hdr->evt) {
   3231a:	7828      	ldrb	r0, [r5, #0]
   3231c:	283e      	cmp	r0, #62	; 0x3e
   3231e:	d01e      	beq.n	3235e <hci_driver_receive_process+0x76>
   32320:	28ff      	cmp	r0, #255	; 0xff
   32322:	d02c      	beq.n	3237e <hci_driver_receive_process+0x96>
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   32324:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   32328:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   3232c:	4621      	mov	r1, r4
   3232e:	f7f5 fda9 	bl	27e84 <bt_buf_get_evt>
	if (!evt_buf) {
   32332:	4606      	mov	r6, r0
   32334:	bb38      	cbnz	r0, 32386 <hci_driver_receive_process+0x9e>
		if (discardable) {
   32336:	b96c      	cbnz	r4, 32354 <hci_driver_receive_process+0x6c>
		BT_ERR("No event buffer available");
   32338:	482d      	ldr	r0, [pc, #180]	; (323f0 <hci_driver_receive_process+0x108>)
   3233a:	6803      	ldr	r3, [r0, #0]
   3233c:	075a      	lsls	r2, r3, #29
   3233e:	d009      	beq.n	32354 <hci_driver_receive_process+0x6c>
   32340:	4b2c      	ldr	r3, [pc, #176]	; (323f4 <hci_driver_receive_process+0x10c>)
   32342:	9307      	str	r3, [sp, #28]
   32344:	2302      	movs	r3, #2
   32346:	9306      	str	r3, [sp, #24]
   32348:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   3234c:	4623      	mov	r3, r4
   3234e:	aa06      	add	r2, sp, #24
   32350:	f7f3 ff2c 	bl	261ac <z_impl_z_log_msg_static_create>
}
   32354:	b008      	add	sp, #32
   32356:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		receive_signal_raise();
   3235a:	f7ff be8b 	b.w	32074 <receive_signal_raise>
		switch (me->subevent) {
   3235e:	78ab      	ldrb	r3, [r5, #2]
   32360:	2b02      	cmp	r3, #2
   32362:	d008      	beq.n	32376 <hci_driver_receive_process+0x8e>
   32364:	2b0d      	cmp	r3, #13
   32366:	d1dd      	bne.n	32324 <hci_driver_receive_process+0x3c>
			return (ext_adv->num_reports == 1) &&
   32368:	78e9      	ldrb	r1, [r5, #3]
   3236a:	2901      	cmp	r1, #1
   3236c:	d1da      	bne.n	32324 <hci_driver_receive_process+0x3c>
				   ((ext_adv->adv_info->evt_type &
   3236e:	88ac      	ldrh	r4, [r5, #4]
			return (ext_adv->num_reports == 1) &&
   32370:	f014 0410 	ands.w	r4, r4, #16
   32374:	d0d6      	beq.n	32324 <hci_driver_receive_process+0x3c>
		switch (subevent) {
   32376:	2200      	movs	r2, #0
   32378:	2300      	movs	r3, #0
   3237a:	2401      	movs	r4, #1
   3237c:	e7d6      	b.n	3232c <hci_driver_receive_process+0x44>
   3237e:	78ab      	ldrb	r3, [r5, #2]
   32380:	2b80      	cmp	r3, #128	; 0x80
   32382:	d1cf      	bne.n	32324 <hci_driver_receive_process+0x3c>
   32384:	e7f7      	b.n	32376 <hci_driver_receive_process+0x8e>
	net_buf_add_mem(evt_buf, &hci_buf[0], hdr->len + sizeof(*hdr));
   32386:	786a      	ldrb	r2, [r5, #1]
	return net_buf_simple_add_mem(&buf->b, mem, len);
   32388:	4918      	ldr	r1, [pc, #96]	; (323ec <hci_driver_receive_process+0x104>)
   3238a:	3202      	adds	r2, #2
   3238c:	3008      	adds	r0, #8
   3238e:	f008 fbc3 	bl	3ab18 <net_buf_simple_add_mem>
	bt_recv(evt_buf);
   32392:	4630      	mov	r0, r6
	bt_recv(data_buf);
   32394:	f7f6 feac 	bl	290f0 <bt_recv>
   32398:	e7dc      	b.n	32354 <hci_driver_receive_process+0x6c>
	} else if (msg_type == SDC_HCI_MSG_TYPE_DATA) {
   3239a:	2e02      	cmp	r6, #2
   3239c:	d118      	bne.n	323d0 <hci_driver_receive_process+0xe8>
	struct net_buf *data_buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
   3239e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   323a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   323a6:	2003      	movs	r0, #3
   323a8:	f7f5 fd2e 	bl	27e08 <bt_buf_get_rx>
	if (!data_buf) {
   323ac:	4604      	mov	r4, r0
   323ae:	b938      	cbnz	r0, 323c0 <hci_driver_receive_process+0xd8>
		BT_ERR("No data buffer available");
   323b0:	480f      	ldr	r0, [pc, #60]	; (323f0 <hci_driver_receive_process+0x108>)
   323b2:	6803      	ldr	r3, [r0, #0]
   323b4:	075b      	lsls	r3, r3, #29
   323b6:	d0cd      	beq.n	32354 <hci_driver_receive_process+0x6c>
   323b8:	4b0f      	ldr	r3, [pc, #60]	; (323f8 <hci_driver_receive_process+0x110>)
   323ba:	e9cd 6306 	strd	r6, r3, [sp, #24]
   323be:	e7c3      	b.n	32348 <hci_driver_receive_process+0x60>
	net_buf_add_mem(data_buf, &hci_buf[0], len + sizeof(*hdr));
   323c0:	886a      	ldrh	r2, [r5, #2]
   323c2:	4629      	mov	r1, r5
   323c4:	3204      	adds	r2, #4
   323c6:	3008      	adds	r0, #8
   323c8:	f008 fba6 	bl	3ab18 <net_buf_simple_add_mem>
	bt_recv(data_buf);
   323cc:	4620      	mov	r0, r4
   323ce:	e7e1      	b.n	32394 <hci_driver_receive_process+0xac>
		__ASSERT(false, "sdc_hci_msg_type_t has changed. This if-else needs a new branch");
   323d0:	490a      	ldr	r1, [pc, #40]	; (323fc <hci_driver_receive_process+0x114>)
   323d2:	480b      	ldr	r0, [pc, #44]	; (32400 <hci_driver_receive_process+0x118>)
   323d4:	f44f 72bb 	mov.w	r2, #374	; 0x176
   323d8:	f006 fb9b 	bl	38b12 <assert_print>
   323dc:	4807      	ldr	r0, [pc, #28]	; (323fc <hci_driver_receive_process+0x114>)
   323de:	f44f 71bb 	mov.w	r1, #374	; 0x176
   323e2:	f006 fb8f 	bl	38b04 <assert_post_action>
}
   323e6:	b008      	add	sp, #32
   323e8:	bd70      	pop	{r4, r5, r6, pc}
   323ea:	bf00      	nop
   323ec:	200034d7 	.word	0x200034d7
   323f0:	20000afc 	.word	0x20000afc
   323f4:	0003f882 	.word	0x0003f882
   323f8:	0003f89c 	.word	0x0003f89c
   323fc:	0003f7bc 	.word	0x0003f7bc
   32400:	0003d1d7 	.word	0x0003d1d7

00032404 <hci_internal_cmd_put>:
		encode_command_complete_header(raw_event_out, opcode, return_param_length, status);
	}
}

int hci_internal_cmd_put(uint8_t *cmd_in)
{
   32404:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	uint16_t opcode = sys_get_le16(cmd_in);

	if (cmd_complete_or_status.occurred) {
   32406:	4db4      	ldr	r5, [pc, #720]	; (326d8 <hci_internal_cmd_put+0x2d4>)
   32408:	782b      	ldrb	r3, [r5, #0]
{
   3240a:	4606      	mov	r6, r0
	if (cmd_complete_or_status.occurred) {
   3240c:	2b00      	cmp	r3, #0
   3240e:	f040 83d2 	bne.w	32bb6 <hci_internal_cmd_put+0x7b2>
	uint8_t return_param_length = sizeof(struct bt_hci_evt_cmd_complete)
   32412:	2304      	movs	r3, #4
   32414:	f88d 3007 	strb.w	r3, [sp, #7]
	if (user_cmd_handler) {
   32418:	4bb0      	ldr	r3, [pc, #704]	; (326dc <hci_internal_cmd_put+0x2d8>)
   3241a:	8804      	ldrh	r4, [r0, #0]
   3241c:	681f      	ldr	r7, [r3, #0]
   3241e:	b1a7      	cbz	r7, 3244a <hci_internal_cmd_put+0x46>
		status = user_cmd_handler(cmd_in,
   32420:	f10d 0306 	add.w	r3, sp, #6
   32424:	f10d 0207 	add.w	r2, sp, #7
   32428:	1c69      	adds	r1, r5, #1
   3242a:	47b8      	blx	r7
	if (status == BT_HCI_ERR_UNKNOWN_CMD) {
   3242c:	2801      	cmp	r0, #1
   3242e:	d00c      	beq.n	3244a <hci_internal_cmd_put+0x46>
	if (generate_command_status_event ||
   32430:	f89d 3006 	ldrb.w	r3, [sp, #6]
   32434:	bbab      	cbnz	r3, 324a2 <hci_internal_cmd_put+0x9e>
		encode_command_complete_header(raw_event_out, opcode, return_param_length, status);
   32436:	f89d 3007 	ldrb.w	r3, [sp, #7]
	evt_hdr->len = param_length;
   3243a:	70ab      	strb	r3, [r5, #2]
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   3243c:	220e      	movs	r2, #14
	evt_data->ncmd = 1;
   3243e:	2301      	movs	r3, #1
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   32440:	706a      	strb	r2, [r5, #1]
	evt_data->ncmd = 1;
   32442:	70eb      	strb	r3, [r5, #3]
	evt_data->opcode = hci_opcode;
   32444:	80ac      	strh	r4, [r5, #4]
	event[BT_HCI_EVT_HDR_SIZE + sizeof(struct bt_hci_evt_cmd_complete)] = status;
   32446:	71a8      	strb	r0, [r5, #6]
}
   32448:	e034      	b.n	324b4 <hci_internal_cmd_put+0xb0>
		switch (BT_OGF(opcode)) {
   3244a:	f5b4 5f10 	cmp.w	r4, #9216	; 0x2400
   3244e:	ea4f 2394 	mov.w	r3, r4, lsr #10
   32452:	d20d      	bcs.n	32470 <hci_internal_cmd_put+0x6c>
   32454:	b17b      	cbz	r3, 32476 <hci_internal_cmd_put+0x72>
   32456:	3b01      	subs	r3, #1
   32458:	2b07      	cmp	r3, #7
   3245a:	d819      	bhi.n	32490 <hci_internal_cmd_put+0x8c>
   3245c:	e8df f013 	tbh	[pc, r3, lsl #1]
   32460:	0018000d 	.word	0x0018000d
   32464:	0081003f 	.word	0x0081003f
   32468:	00180018 	.word	0x00180018
   3246c:	01440018 	.word	0x01440018
   32470:	2b3f      	cmp	r3, #63	; 0x3f
   32472:	f000 82dc 	beq.w	32a2e <hci_internal_cmd_put+0x62a>
	switch (opcode)	{
   32476:	2001      	movs	r0, #1
   32478:	e013      	b.n	324a2 <hci_internal_cmd_put+0x9e>
	return ((uint16_t)src[1] << 8) | src[0];
   3247a:	4630      	mov	r0, r6
	switch (opcode)	{
   3247c:	f240 4206 	movw	r2, #1030	; 0x406
   32480:	f930 3b03 	ldrsh.w	r3, [r0], #3
   32484:	4293      	cmp	r3, r2
   32486:	d005      	beq.n	32494 <hci_internal_cmd_put+0x90>
   32488:	f240 421d 	movw	r2, #1053	; 0x41d
   3248c:	4293      	cmp	r3, r2
   3248e:	d016      	beq.n	324be <hci_internal_cmd_put+0xba>
		switch (BT_OGF(opcode)) {
   32490:	2001      	movs	r0, #1
   32492:	e001      	b.n	32498 <hci_internal_cmd_put+0x94>
		return sdc_hci_cmd_lc_disconnect((void *)cmd_params);
   32494:	f7ed f8cd 	bl	1f632 <sdc_hci_cmd_lc_disconnect>
	switch (hci_opcode) {
   32498:	f240 4306 	movw	r3, #1030	; 0x406
   3249c:	429c      	cmp	r4, r3
   3249e:	f040 8379 	bne.w	32b94 <hci_internal_cmd_put+0x790>
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
   324a2:	230f      	movs	r3, #15
   324a4:	706b      	strb	r3, [r5, #1]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
   324a6:	2304      	movs	r3, #4
   324a8:	70ab      	strb	r3, [r5, #2]
	evt_data->ncmd = 1;
   324aa:	2301      	movs	r3, #1
	evt_data->status = status_code;
   324ac:	70e8      	strb	r0, [r5, #3]
	evt_data->ncmd = 1;
   324ae:	712b      	strb	r3, [r5, #4]
	evt_data->opcode = hci_opcode;
   324b0:	f8a5 4005 	strh.w	r4, [r5, #5]
	{
		/* SDC_HCI_OPCODE_CMD_CB_HOST_NUMBER_OF_COMPLETED_PACKETS will only generate
		 *  command complete if it fails.
		 */

		cmd_complete_or_status.occurred = true;
   324b4:	2301      	movs	r3, #1
   324b6:	702b      	strb	r3, [r5, #0]
	}

	return 0;
   324b8:	2000      	movs	r0, #0
}
   324ba:	b003      	add	sp, #12
   324bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return sdc_hci_cmd_lc_read_remote_version_information((void *)cmd_params);
   324be:	f7ed f8ba 	bl	1f636 <sdc_hci_cmd_lc_read_remote_version_information>
	switch (hci_opcode) {
   324c2:	f242 030c 	movw	r3, #8204	; 0x200c
   324c6:	429c      	cmp	r4, r3
   324c8:	d9e6      	bls.n	32498 <hci_internal_cmd_put+0x94>
   324ca:	f5a4 5300 	sub.w	r3, r4, #8192	; 0x2000
   324ce:	4a84      	ldr	r2, [pc, #528]	; (326e0 <hci_internal_cmd_put+0x2dc>)
   324d0:	3b0d      	subs	r3, #13
   324d2:	b29b      	uxth	r3, r3
   324d4:	fa22 f303 	lsr.w	r3, r2, r3
   324d8:	07db      	lsls	r3, r3, #31
   324da:	d516      	bpl.n	3250a <hci_internal_cmd_put+0x106>
   324dc:	e7e1      	b.n	324a2 <hci_internal_cmd_put+0x9e>
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   324de:	4630      	mov	r0, r6
	switch (opcode)	{
   324e0:	f640 4263 	movw	r2, #3171	; 0xc63
   324e4:	f930 3b03 	ldrsh.w	r3, [r0], #3
   324e8:	4293      	cmp	r3, r2
   324ea:	d02e      	beq.n	3254a <hci_internal_cmd_put+0x146>
   324ec:	dc10      	bgt.n	32510 <hci_internal_cmd_put+0x10c>
   324ee:	f640 4203 	movw	r2, #3075	; 0xc03
   324f2:	4293      	cmp	r3, r2
   324f4:	d01d      	beq.n	32532 <hci_internal_cmd_put+0x12e>
   324f6:	f640 422d 	movw	r2, #3117	; 0xc2d
   324fa:	4293      	cmp	r3, r2
   324fc:	d01c      	beq.n	32538 <hci_internal_cmd_put+0x134>
   324fe:	f640 4201 	movw	r2, #3073	; 0xc01
   32502:	4293      	cmp	r3, r2
   32504:	d1b7      	bne.n	32476 <hci_internal_cmd_put+0x72>
		return sdc_hci_cmd_cb_set_event_mask((void *)cmd_params);
   32506:	f7ec ff32 	bl	1f36e <sdc_hci_cmd_cb_set_event_mask>
	if (generate_command_status_event ||
   3250a:	2801      	cmp	r0, #1
   3250c:	d0b3      	beq.n	32476 <hci_internal_cmd_put+0x72>
   3250e:	e792      	b.n	32436 <hci_internal_cmd_put+0x32>
	switch (opcode)	{
   32510:	f640 427b 	movw	r2, #3195	; 0xc7b
   32514:	4293      	cmp	r3, r2
   32516:	d01b      	beq.n	32550 <hci_internal_cmd_put+0x14c>
   32518:	f640 427c 	movw	r2, #3196	; 0xc7c
   3251c:	4293      	cmp	r3, r2
   3251e:	d1aa      	bne.n	32476 <hci_internal_cmd_put+0x72>
		*param_length_out +=
   32520:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_cb_write_authenticated_payload_timeout((void *)cmd_params,
   32524:	496f      	ldr	r1, [pc, #444]	; (326e4 <hci_internal_cmd_put+0x2e0>)
		*param_length_out +=
   32526:	3302      	adds	r3, #2
   32528:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_cb_write_authenticated_payload_timeout((void *)cmd_params,
   3252c:	f7ec ff29 	bl	1f382 <sdc_hci_cmd_cb_write_authenticated_payload_timeout>
	if (generate_command_status_event ||
   32530:	e7eb      	b.n	3250a <hci_internal_cmd_put+0x106>
		return sdc_hci_cmd_cb_reset();
   32532:	f7df fc13 	bl	11d5c <sdc_hci_cmd_cb_reset>
	if (generate_command_status_event ||
   32536:	e7e8      	b.n	3250a <hci_internal_cmd_put+0x106>
		*param_length_out += sizeof(sdc_hci_cmd_cb_read_transmit_power_level_return_t);
   32538:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_cb_read_transmit_power_level((void *)cmd_params,
   3253c:	4969      	ldr	r1, [pc, #420]	; (326e4 <hci_internal_cmd_put+0x2e0>)
		*param_length_out += sizeof(sdc_hci_cmd_cb_read_transmit_power_level_return_t);
   3253e:	3303      	adds	r3, #3
   32540:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_cb_read_transmit_power_level((void *)cmd_params,
   32544:	f7ec ff11 	bl	1f36a <sdc_hci_cmd_cb_read_transmit_power_level>
	if (generate_command_status_event ||
   32548:	e7df      	b.n	3250a <hci_internal_cmd_put+0x106>
		return sdc_hci_cmd_cb_set_event_mask_page_2((void *)cmd_params);
   3254a:	f7ec ff15 	bl	1f378 <sdc_hci_cmd_cb_set_event_mask_page_2>
	if (generate_command_status_event ||
   3254e:	e7dc      	b.n	3250a <hci_internal_cmd_put+0x106>
		*param_length_out +=
   32550:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_cb_read_authenticated_payload_timeout((void *)cmd_params,
   32554:	4963      	ldr	r1, [pc, #396]	; (326e4 <hci_internal_cmd_put+0x2e0>)
		*param_length_out +=
   32556:	3304      	adds	r3, #4
   32558:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_cb_read_authenticated_payload_timeout((void *)cmd_params,
   3255c:	f7ec ff03 	bl	1f366 <sdc_hci_cmd_cb_read_authenticated_payload_timeout>
	if (generate_command_status_event ||
   32560:	e7d3      	b.n	3250a <hci_internal_cmd_put+0x106>
	switch (opcode)	{
   32562:	8833      	ldrh	r3, [r6, #0]
   32564:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
   32568:	3b01      	subs	r3, #1
   3256a:	2b08      	cmp	r3, #8
   3256c:	d883      	bhi.n	32476 <hci_internal_cmd_put+0x72>
   3256e:	a201      	add	r2, pc, #4	; (adr r2, 32574 <hci_internal_cmd_put+0x170>)
   32570:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   32574:	00032599 	.word	0x00032599
   32578:	000325ab 	.word	0x000325ab
   3257c:	000326a5 	.word	0x000326a5
   32580:	00032477 	.word	0x00032477
   32584:	00032477 	.word	0x00032477
   32588:	00032477 	.word	0x00032477
   3258c:	00032477 	.word	0x00032477
   32590:	00032477 	.word	0x00032477
   32594:	000326c7 	.word	0x000326c7
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_version_information_return_t);
   32598:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_ip_read_local_version_information((void *)event_out_params);
   3259c:	4851      	ldr	r0, [pc, #324]	; (326e4 <hci_internal_cmd_put+0x2e0>)
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_version_information_return_t);
   3259e:	3308      	adds	r3, #8
   325a0:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_ip_read_local_version_information((void *)event_out_params);
   325a4:	f7ec ffea 	bl	1f57c <sdc_hci_cmd_ip_read_local_version_information>
	if (generate_command_status_event ||
   325a8:	e7af      	b.n	3250a <hci_internal_cmd_put+0x106>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_commands_return_t);
   325aa:	f89d 3007 	ldrb.w	r3, [sp, #7]
	memset(cmds, 0, sizeof(*cmds));
   325ae:	484d      	ldr	r0, [pc, #308]	; (326e4 <hci_internal_cmd_put+0x2e0>)
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_commands_return_t);
   325b0:	3340      	adds	r3, #64	; 0x40
	memset(cmds, 0, sizeof(*cmds));
   325b2:	222f      	movs	r2, #47	; 0x2f
   325b4:	2100      	movs	r1, #0
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_commands_return_t);
   325b6:	f88d 3007 	strb.w	r3, [sp, #7]
	memset(cmds, 0, sizeof(*cmds));
   325ba:	f006 ff04 	bl	393c6 <memset>
	cmds->hci_disconnect = 1;
   325be:	79eb      	ldrb	r3, [r5, #7]
   325c0:	f043 0320 	orr.w	r3, r3, #32
   325c4:	71eb      	strb	r3, [r5, #7]
	cmds->hci_read_remote_version_information = 1;
   325c6:	7a6b      	ldrb	r3, [r5, #9]
   325c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   325cc:	726b      	strb	r3, [r5, #9]
	cmds->hci_set_event_mask = 1;
   325ce:	7b2b      	ldrb	r3, [r5, #12]
   325d0:	f063 033f 	orn	r3, r3, #63	; 0x3f
   325d4:	732b      	strb	r3, [r5, #12]
	cmds->hci_read_transmit_power_level = 1;
   325d6:	7c6b      	ldrb	r3, [r5, #17]
   325d8:	f043 0304 	orr.w	r3, r3, #4
   325dc:	746b      	strb	r3, [r5, #17]
	cmds->hci_read_local_version_information = 1;
   325de:	7d6b      	ldrb	r3, [r5, #21]
   325e0:	f023 0328 	bic.w	r3, r3, #40	; 0x28
   325e4:	f043 0328 	orr.w	r3, r3, #40	; 0x28
   325e8:	756b      	strb	r3, [r5, #21]
	cmds->hci_read_bd_addr = 1;
   325ea:	7dab      	ldrb	r3, [r5, #22]
   325ec:	f043 0302 	orr.w	r3, r3, #2
   325f0:	75ab      	strb	r3, [r5, #22]
	cmds->hci_set_event_mask_page_2 = 1;
   325f2:	7f6b      	ldrb	r3, [r5, #29]
   325f4:	f043 0304 	orr.w	r3, r3, #4
   325f8:	776b      	strb	r3, [r5, #29]
	cmds->hci_le_set_event_mask = 1;
   325fa:	f895 3020 	ldrb.w	r3, [r5, #32]
   325fe:	f063 0308 	orn	r3, r3, #8
   32602:	f885 3020 	strb.w	r3, [r5, #32]
	cmds->hci_le_set_scan_response_data = 1;
   32606:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
   3260a:	f063 033c 	orn	r3, r3, #60	; 0x3c
   3260e:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
	cmds->hci_le_add_device_to_filter_accept_list = 1;
   32612:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
   32616:	f063 0304 	orn	r3, r3, #4
   3261a:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
	cmds->hci_le_long_term_key_request_reply = 1;
   3261e:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
   32622:	f023 037e 	bic.w	r3, r3, #126	; 0x7e
   32626:	f043 037e 	orr.w	r3, r3, #126	; 0x7e
   3262a:	f885 3023 	strb.w	r3, [r5, #35]	; 0x23
	cmds->hci_read_authenticated_payload_timeout = 1;
   3262e:	f895 3027 	ldrb.w	r3, [r5, #39]	; 0x27
   32632:	f023 0330 	bic.w	r3, r3, #48	; 0x30
   32636:	f043 0330 	orr.w	r3, r3, #48	; 0x30
   3263a:	f885 3027 	strb.w	r3, [r5, #39]	; 0x27
	cmds->hci_le_set_data_length = 1;
   3263e:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
   32642:	f063 033f 	orn	r3, r3, #63	; 0x3f
   32646:	f885 3028 	strb.w	r3, [r5, #40]	; 0x28
	cmds->hci_le_write_suggested_default_data_length = 1;
   3264a:	f895 3029 	ldrb.w	r3, [r5, #41]	; 0x29
   3264e:	f023 0307 	bic.w	r3, r3, #7
   32652:	f043 0307 	orr.w	r3, r3, #7
   32656:	f885 3029 	strb.w	r3, [r5, #41]	; 0x29
	cmds->hci_le_read_maximum_data_length = 1;
   3265a:	f895 302a 	ldrb.w	r3, [r5, #42]	; 0x2a
   3265e:	f063 0307 	orn	r3, r3, #7
   32662:	f885 302a 	strb.w	r3, [r5, #42]	; 0x2a
	cmds->hci_le_transmitter_test_v2 = 1;
   32666:	23ff      	movs	r3, #255	; 0xff
   32668:	f885 302b 	strb.w	r3, [r5, #43]	; 0x2b
	cmds->hci_le_remove_advertising_set = 1;
   3266c:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
   32670:	f023 0303 	bic.w	r3, r3, #3
   32674:	f043 0303 	orr.w	r3, r3, #3
   32678:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
	cmds->hci_le_read_transmit_power = 1;
   3267c:	f895 302d 	ldrb.w	r3, [r5, #45]	; 0x2d
   32680:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   32684:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
	cmds->hci_le_generate_dhkey_v2 = 1;
   32688:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
   3268c:	f043 0304 	orr.w	r3, r3, #4
   32690:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
	cmds->hci_le_set_data_related_address_changes = 1;
   32694:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
   32698:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   3269c:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
		return 0;
   326a0:	2000      	movs	r0, #0
   326a2:	e6c8      	b.n	32436 <hci_internal_cmd_put+0x32>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_features_return_t);
   326a4:	f89d 3007 	ldrb.w	r3, [sp, #7]
	memset(features, 0, sizeof(*features));
   326a8:	480e      	ldr	r0, [pc, #56]	; (326e4 <hci_internal_cmd_put+0x2e0>)
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_features_return_t);
   326aa:	3308      	adds	r3, #8
	memset(features, 0, sizeof(*features));
   326ac:	2208      	movs	r2, #8
   326ae:	2100      	movs	r1, #0
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_features_return_t);
   326b0:	f88d 3007 	strb.w	r3, [sp, #7]
	memset(features, 0, sizeof(*features));
   326b4:	f006 fe87 	bl	393c6 <memset>
	features->bdedr_not_supported = 1;
   326b8:	7aeb      	ldrb	r3, [r5, #11]
   326ba:	f023 0360 	bic.w	r3, r3, #96	; 0x60
   326be:	f043 0360 	orr.w	r3, r3, #96	; 0x60
   326c2:	72eb      	strb	r3, [r5, #11]
	if (generate_command_status_event ||
   326c4:	e7ec      	b.n	326a0 <hci_internal_cmd_put+0x29c>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_bd_addr_return_t);
   326c6:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_ip_read_bd_addr((void *)event_out_params);
   326ca:	4806      	ldr	r0, [pc, #24]	; (326e4 <hci_internal_cmd_put+0x2e0>)
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_bd_addr_return_t);
   326cc:	3306      	adds	r3, #6
   326ce:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_ip_read_bd_addr((void *)event_out_params);
   326d2:	f7ec ff51 	bl	1f578 <sdc_hci_cmd_ip_read_bd_addr>
	if (generate_command_status_event ||
   326d6:	e718      	b.n	3250a <hci_internal_cmd_put+0x106>
   326d8:	20003f5a 	.word	0x20003f5a
   326dc:	200031d0 	.word	0x200031d0
   326e0:	03001241 	.word	0x03001241
   326e4:	20003f61 	.word	0x20003f61
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   326e8:	4630      	mov	r0, r6
	switch (opcode)	{
   326ea:	f242 0626 	movw	r6, #8230	; 0x2026
   326ee:	f830 3b03 	ldrh.w	r3, [r0], #3
   326f2:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
   326f6:	3b01      	subs	r3, #1
   326f8:	2b7b      	cmp	r3, #123	; 0x7b
   326fa:	f200 8243 	bhi.w	32b84 <hci_internal_cmd_put+0x780>
   326fe:	e8df f013 	tbh	[pc, r3, lsl #1]
   32702:	007c      	.short	0x007c
   32704:	00a30097 	.word	0x00a30097
   32708:	00c00241 	.word	0x00c00241
   3270c:	00c600c3 	.word	0x00c600c3
   32710:	00d200cf 	.word	0x00d200cf
   32714:	024100d5 	.word	0x024100d5
   32718:	02410241 	.word	0x02410241
   3271c:	00db0241 	.word	0x00db0241
   32720:	00e700e4 	.word	0x00e700e4
   32724:	024100ea 	.word	0x024100ea
   32728:	00f000ed 	.word	0x00f000ed
   3272c:	00fc00f9 	.word	0x00fc00f9
   32730:	02410105 	.word	0x02410105
   32734:	0117010e 	.word	0x0117010e
   32738:	02410120 	.word	0x02410120
   3273c:	02410241 	.word	0x02410241
   32740:	02410241 	.word	0x02410241
   32744:	0133012a 	.word	0x0133012a
   32748:	013f013c 	.word	0x013f013c
   3274c:	02410142 	.word	0x02410142
   32750:	02410241 	.word	0x02410241
   32754:	02410241 	.word	0x02410241
   32758:	02410241 	.word	0x02410241
   3275c:	01480241 	.word	0x01480241
   32760:	015a0151 	.word	0x015a0151
   32764:	0241015d 	.word	0x0241015d
   32768:	01600241 	.word	0x01600241
   3276c:	016c0163 	.word	0x016c0163
   32770:	0172016f 	.word	0x0172016f
   32774:	017e0175 	.word	0x017e0175
   32778:	018a0187 	.word	0x018a0187
   3277c:	02410241 	.word	0x02410241
   32780:	02410241 	.word	0x02410241
   32784:	02410241 	.word	0x02410241
   32788:	02410241 	.word	0x02410241
   3278c:	02410241 	.word	0x02410241
   32790:	02410241 	.word	0x02410241
   32794:	018d0241 	.word	0x018d0241
   32798:	02410241 	.word	0x02410241
   3279c:	02410241 	.word	0x02410241
   327a0:	02410241 	.word	0x02410241
   327a4:	02410241 	.word	0x02410241
   327a8:	02410241 	.word	0x02410241
   327ac:	02410241 	.word	0x02410241
   327b0:	02410241 	.word	0x02410241
   327b4:	02410241 	.word	0x02410241
   327b8:	02410241 	.word	0x02410241
   327bc:	02410145 	.word	0x02410145
   327c0:	02410241 	.word	0x02410241
   327c4:	02410241 	.word	0x02410241
   327c8:	02410241 	.word	0x02410241
   327cc:	02410241 	.word	0x02410241
   327d0:	02410241 	.word	0x02410241
   327d4:	02410241 	.word	0x02410241
   327d8:	02410241 	.word	0x02410241
   327dc:	02410241 	.word	0x02410241
   327e0:	02410241 	.word	0x02410241
   327e4:	02410241 	.word	0x02410241
   327e8:	02410241 	.word	0x02410241
   327ec:	02410241 	.word	0x02410241
   327f0:	02410241 	.word	0x02410241
   327f4:	02410241 	.word	0x02410241
   327f8:	00d8      	.short	0x00d8
		return sdc_hci_cmd_le_set_event_mask((void *)cmd_params);
   327fa:	f7ec fefb 	bl	1f5f4 <sdc_hci_cmd_le_set_event_mask>
	switch (hci_opcode) {
   327fe:	42b4      	cmp	r4, r6
   32800:	f240 81d2 	bls.w	32ba8 <hci_internal_cmd_put+0x7a4>
   32804:	f242 0377 	movw	r3, #8311	; 0x2077
   32808:	429c      	cmp	r4, r3
   3280a:	f43f ae4a 	beq.w	324a2 <hci_internal_cmd_put+0x9e>
   3280e:	f242 0377 	movw	r3, #8311	; 0x2077
   32812:	429c      	cmp	r4, r3
   32814:	f200 8151 	bhi.w	32aba <hci_internal_cmd_put+0x6b6>
   32818:	f242 0332 	movw	r3, #8242	; 0x2032
   3281c:	429c      	cmp	r4, r3
   3281e:	f43f ae40 	beq.w	324a2 <hci_internal_cmd_put+0x9e>
   32822:	f5a4 5301 	sub.w	r3, r4, #8256	; 0x2040
   32826:	3b03      	subs	r3, #3
   32828:	2b01      	cmp	r3, #1
   3282a:	f63f ae6e 	bhi.w	3250a <hci_internal_cmd_put+0x106>
   3282e:	e638      	b.n	324a2 <hci_internal_cmd_put+0x9e>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_buffer_size_return_t);
   32830:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_buffer_size((void *)event_out_params);
   32834:	48bf      	ldr	r0, [pc, #764]	; (32b34 <hci_internal_cmd_put+0x730>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_buffer_size_return_t);
   32836:	3303      	adds	r3, #3
   32838:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_buffer_size((void *)event_out_params);
   3283c:	f7ec feb4 	bl	1f5a8 <sdc_hci_cmd_le_read_buffer_size>
	switch (hci_opcode) {
   32840:	f242 0326 	movw	r3, #8230	; 0x2026
   32844:	429c      	cmp	r4, r3
   32846:	e7db      	b.n	32800 <hci_internal_cmd_put+0x3fc>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_local_supported_features_return_t);
   32848:	f89d 3007 	ldrb.w	r3, [sp, #7]
	memset(features, 0, sizeof(*features));
   3284c:	48b9      	ldr	r0, [pc, #740]	; (32b34 <hci_internal_cmd_put+0x730>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_local_supported_features_return_t);
   3284e:	3308      	adds	r3, #8
	memset(features, 0, sizeof(*features));
   32850:	2205      	movs	r2, #5
   32852:	2100      	movs	r1, #0
		*param_length_out += sizeof(sdc_hci_cmd_le_read_local_supported_features_return_t);
   32854:	f88d 3007 	strb.w	r3, [sp, #7]
	memset(features, 0, sizeof(*features));
   32858:	f006 fdb5 	bl	393c6 <memset>
	features->le_encryption = 1;
   3285c:	79eb      	ldrb	r3, [r5, #7]
   3285e:	f023 033d 	bic.w	r3, r3, #61	; 0x3d
   32862:	f043 033d 	orr.w	r3, r3, #61	; 0x3d
   32866:	71eb      	strb	r3, [r5, #7]
	features->le_2m_phy = 1;
   32868:	7a2b      	ldrb	r3, [r5, #8]
   3286a:	f023 0351 	bic.w	r3, r3, #81	; 0x51
   3286e:	f043 0351 	orr.w	r3, r3, #81	; 0x51
   32872:	722b      	strb	r3, [r5, #8]
	switch (hci_opcode) {
   32874:	f242 0326 	movw	r3, #8230	; 0x2026
   32878:	429c      	cmp	r4, r3
   3287a:	f240 8191 	bls.w	32ba0 <hci_internal_cmd_put+0x79c>
		return 0;
   3287e:	2000      	movs	r0, #0
   32880:	e7c0      	b.n	32804 <hci_internal_cmd_put+0x400>
		return sdc_hci_cmd_le_set_random_address((void *)cmd_params);
   32882:	f7ec fed0 	bl	1f626 <sdc_hci_cmd_le_set_random_address>
	switch (hci_opcode) {
   32886:	e7ba      	b.n	327fe <hci_internal_cmd_put+0x3fa>
		return sdc_hci_cmd_le_set_adv_params((void *)cmd_params);
   32888:	f7ec feaa 	bl	1f5e0 <sdc_hci_cmd_le_set_adv_params>
	switch (hci_opcode) {
   3288c:	e7b7      	b.n	327fe <hci_internal_cmd_put+0x3fa>
		*param_length_out +=
   3288e:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_adv_physical_channel_tx_power((void *)event_out_params);
   32892:	48a8      	ldr	r0, [pc, #672]	; (32b34 <hci_internal_cmd_put+0x730>)
		*param_length_out +=
   32894:	3301      	adds	r3, #1
   32896:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_adv_physical_channel_tx_power((void *)event_out_params);
   3289a:	f7ec fe83 	bl	1f5a4 <sdc_hci_cmd_le_read_adv_physical_channel_tx_power>
	switch (hci_opcode) {
   3289e:	e7cf      	b.n	32840 <hci_internal_cmd_put+0x43c>
		return sdc_hci_cmd_le_set_adv_data((void *)cmd_params);
   328a0:	f7ec fe9a 	bl	1f5d8 <sdc_hci_cmd_le_set_adv_data>
	switch (hci_opcode) {
   328a4:	e7ab      	b.n	327fe <hci_internal_cmd_put+0x3fa>
		return sdc_hci_cmd_le_set_scan_response_data((void *)cmd_params);
   328a6:	f7ec fec0 	bl	1f62a <sdc_hci_cmd_le_set_scan_response_data>
	switch (hci_opcode) {
   328aa:	e7a8      	b.n	327fe <hci_internal_cmd_put+0x3fa>
		return sdc_hci_cmd_le_set_adv_enable((void *)cmd_params);
   328ac:	f7ec fe96 	bl	1f5dc <sdc_hci_cmd_le_set_adv_enable>
	switch (hci_opcode) {
   328b0:	e7a5      	b.n	327fe <hci_internal_cmd_put+0x3fa>
		return sdc_hci_cmd_le_set_data_related_address_changes((void *)cmd_params);
   328b2:	f7ec fe9b 	bl	1f5ec <sdc_hci_cmd_le_set_data_related_address_changes>
	switch (hci_opcode) {
   328b6:	e7a2      	b.n	327fe <hci_internal_cmd_put+0x3fa>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_filter_accept_list_size_return_t);
   328b8:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_filter_accept_list_size((void *)event_out_params);
   328bc:	489d      	ldr	r0, [pc, #628]	; (32b34 <hci_internal_cmd_put+0x730>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_filter_accept_list_size_return_t);
   328be:	3301      	adds	r3, #1
   328c0:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_filter_accept_list_size((void *)event_out_params);
   328c4:	f7ec fe74 	bl	1f5b0 <sdc_hci_cmd_le_read_filter_accept_list_size>
	switch (hci_opcode) {
   328c8:	e7ba      	b.n	32840 <hci_internal_cmd_put+0x43c>
		return sdc_hci_cmd_le_clear_filter_accept_list();
   328ca:	f7ec fe5d 	bl	1f588 <sdc_hci_cmd_le_clear_filter_accept_list>
	switch (hci_opcode) {
   328ce:	e796      	b.n	327fe <hci_internal_cmd_put+0x3fa>
		return sdc_hci_cmd_le_add_device_to_filter_accept_list((void *)cmd_params);
   328d0:	f7ec fe56 	bl	1f580 <sdc_hci_cmd_le_add_device_to_filter_accept_list>
	switch (hci_opcode) {
   328d4:	e793      	b.n	327fe <hci_internal_cmd_put+0x3fa>
		return sdc_hci_cmd_le_remove_device_from_filter_accept_list((void *)cmd_params);
   328d6:	f7ec fe7d 	bl	1f5d4 <sdc_hci_cmd_le_remove_device_from_filter_accept_list>
	switch (hci_opcode) {
   328da:	e790      	b.n	327fe <hci_internal_cmd_put+0x3fa>
		return sdc_hci_cmd_le_set_host_channel_classification((void *)cmd_params);
   328dc:	f7ec fe9f 	bl	1f61e <sdc_hci_cmd_le_set_host_channel_classification>
	switch (hci_opcode) {
   328e0:	e78d      	b.n	327fe <hci_internal_cmd_put+0x3fa>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_channel_map_return_t);
   328e2:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_channel_map((void *)cmd_params,
   328e6:	4993      	ldr	r1, [pc, #588]	; (32b34 <hci_internal_cmd_put+0x730>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_channel_map_return_t);
   328e8:	3307      	adds	r3, #7
   328ea:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_channel_map((void *)cmd_params,
   328ee:	f7ec fe5d 	bl	1f5ac <sdc_hci_cmd_le_read_channel_map>
	switch (hci_opcode) {
   328f2:	e7a5      	b.n	32840 <hci_internal_cmd_put+0x43c>
		return sdc_hci_cmd_le_read_remote_features((void *)cmd_params);
   328f4:	f7ec fe66 	bl	1f5c4 <sdc_hci_cmd_le_read_remote_features>
	switch (hci_opcode) {
   328f8:	e781      	b.n	327fe <hci_internal_cmd_put+0x3fa>
		*param_length_out += sizeof(sdc_hci_cmd_le_encrypt_return_t);
   328fa:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_encrypt((void *)cmd_params, (void *)event_out_params);
   328fe:	498d      	ldr	r1, [pc, #564]	; (32b34 <hci_internal_cmd_put+0x730>)
		*param_length_out += sizeof(sdc_hci_cmd_le_encrypt_return_t);
   32900:	3310      	adds	r3, #16
   32902:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_encrypt((void *)cmd_params, (void *)event_out_params);
   32906:	f7ec fe41 	bl	1f58c <sdc_hci_cmd_le_encrypt>
	switch (hci_opcode) {
   3290a:	e799      	b.n	32840 <hci_internal_cmd_put+0x43c>
		*param_length_out += sizeof(sdc_hci_cmd_le_rand_return_t);
   3290c:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_rand((void *)event_out_params);
   32910:	4888      	ldr	r0, [pc, #544]	; (32b34 <hci_internal_cmd_put+0x730>)
		*param_length_out += sizeof(sdc_hci_cmd_le_rand_return_t);
   32912:	3308      	adds	r3, #8
   32914:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_rand((void *)event_out_params);
   32918:	f7ec fe42 	bl	1f5a0 <sdc_hci_cmd_le_rand>
	switch (hci_opcode) {
   3291c:	e790      	b.n	32840 <hci_internal_cmd_put+0x43c>
		*param_length_out += sizeof(sdc_hci_cmd_le_long_term_key_request_reply_return_t);
   3291e:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_long_term_key_request_reply((void *)cmd_params,
   32922:	4984      	ldr	r1, [pc, #528]	; (32b34 <hci_internal_cmd_put+0x730>)
		*param_length_out += sizeof(sdc_hci_cmd_le_long_term_key_request_reply_return_t);
   32924:	3302      	adds	r3, #2
   32926:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_long_term_key_request_reply((void *)cmd_params,
   3292a:	f7ec fe35 	bl	1f598 <sdc_hci_cmd_le_long_term_key_request_reply>
	switch (hci_opcode) {
   3292e:	e787      	b.n	32840 <hci_internal_cmd_put+0x43c>
		*param_length_out +=
   32930:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_long_term_key_request_negative_reply(
   32934:	497f      	ldr	r1, [pc, #508]	; (32b34 <hci_internal_cmd_put+0x730>)
		*param_length_out +=
   32936:	3302      	adds	r3, #2
   32938:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_long_term_key_request_negative_reply(
   3293c:	f7ec fe28 	bl	1f590 <sdc_hci_cmd_le_long_term_key_request_negative_reply>
	switch (hci_opcode) {
   32940:	e77e      	b.n	32840 <hci_internal_cmd_put+0x43c>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_supported_states_return_t);
   32942:	f89d 3007 	ldrb.w	r3, [sp, #7]
   32946:	3308      	adds	r3, #8
   32948:	f88d 3007 	strb.w	r3, [sp, #7]
	*buf = states1;
   3294c:	238f      	movs	r3, #143	; 0x8f
   3294e:	71eb      	strb	r3, [r5, #7]
	*(buf + 4) = states2;
   32950:	23c0      	movs	r3, #192	; 0xc0
   32952:	72eb      	strb	r3, [r5, #11]
   32954:	e78e      	b.n	32874 <hci_internal_cmd_put+0x470>
		*param_length_out += sizeof(sdc_hci_cmd_le_set_data_length_return_t);
   32956:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_set_data_length((void *)cmd_params, (void *)event_out_params);
   3295a:	4976      	ldr	r1, [pc, #472]	; (32b34 <hci_internal_cmd_put+0x730>)
		*param_length_out += sizeof(sdc_hci_cmd_le_set_data_length_return_t);
   3295c:	3302      	adds	r3, #2
   3295e:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_set_data_length((void *)cmd_params, (void *)event_out_params);
   32962:	f7ec fe41 	bl	1f5e8 <sdc_hci_cmd_le_set_data_length>
	switch (hci_opcode) {
   32966:	e76b      	b.n	32840 <hci_internal_cmd_put+0x43c>
		*param_length_out +=
   32968:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_suggested_default_data_length((void *)event_out_params);
   3296c:	4871      	ldr	r0, [pc, #452]	; (32b34 <hci_internal_cmd_put+0x730>)
		*param_length_out +=
   3296e:	3304      	adds	r3, #4
   32970:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_suggested_default_data_length((void *)event_out_params);
   32974:	f7ec fe28 	bl	1f5c8 <sdc_hci_cmd_le_read_suggested_default_data_length>
	switch (hci_opcode) {
   32978:	e762      	b.n	32840 <hci_internal_cmd_put+0x43c>
		return sdc_hci_cmd_le_write_suggested_default_data_length((void *)cmd_params);
   3297a:	f7ec fe58 	bl	1f62e <sdc_hci_cmd_le_write_suggested_default_data_length>
	switch (hci_opcode) {
   3297e:	e73e      	b.n	327fe <hci_internal_cmd_put+0x3fa>
		return hci_cmd_le_read_local_p256_public_key();
   32980:	f000 fac2 	bl	32f08 <hci_cmd_le_read_local_p256_public_key>
	switch (hci_opcode) {
   32984:	e73b      	b.n	327fe <hci_internal_cmd_put+0x3fa>
		return hci_cmd_le_generate_dhkey((void *)cmd_params);
   32986:	f008 ff0c 	bl	3b7a2 <hci_cmd_le_generate_dhkey>
	switch (hci_opcode) {
   3298a:	e738      	b.n	327fe <hci_internal_cmd_put+0x3fa>
		return hci_cmd_le_generate_dhkey_v2((void *)cmd_params);
   3298c:	f008 ff0c 	bl	3b7a8 <hci_cmd_le_generate_dhkey_v2>
	switch (hci_opcode) {
   32990:	e735      	b.n	327fe <hci_internal_cmd_put+0x3fa>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_max_data_length_return_t);
   32992:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_max_data_length((void *)event_out_params);
   32996:	4867      	ldr	r0, [pc, #412]	; (32b34 <hci_internal_cmd_put+0x730>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_max_data_length_return_t);
   32998:	3308      	adds	r3, #8
   3299a:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_max_data_length((void *)event_out_params);
   3299e:	f7ec fe0b 	bl	1f5b8 <sdc_hci_cmd_le_read_max_data_length>
	switch (hci_opcode) {
   329a2:	e74d      	b.n	32840 <hci_internal_cmd_put+0x43c>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_phy_return_t);
   329a4:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_phy((void *)cmd_params, (void *)event_out_params);
   329a8:	4962      	ldr	r1, [pc, #392]	; (32b34 <hci_internal_cmd_put+0x730>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_phy_return_t);
   329aa:	3304      	adds	r3, #4
   329ac:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_phy((void *)cmd_params, (void *)event_out_params);
   329b0:	f7ec fe06 	bl	1f5c0 <sdc_hci_cmd_le_read_phy>
	switch (hci_opcode) {
   329b4:	e744      	b.n	32840 <hci_internal_cmd_put+0x43c>
		return sdc_hci_cmd_le_set_default_phy((void *)cmd_params);
   329b6:	f7ec fe1b 	bl	1f5f0 <sdc_hci_cmd_le_set_default_phy>
	switch (hci_opcode) {
   329ba:	e720      	b.n	327fe <hci_internal_cmd_put+0x3fa>
		return sdc_hci_cmd_le_set_phy((void *)cmd_params);
   329bc:	f7ec fe31 	bl	1f622 <sdc_hci_cmd_le_set_phy>
	switch (hci_opcode) {
   329c0:	e71d      	b.n	327fe <hci_internal_cmd_put+0x3fa>
		return sdc_hci_cmd_le_set_adv_set_random_address((void *)cmd_params);
   329c2:	f7ec fe0f 	bl	1f5e4 <sdc_hci_cmd_le_set_adv_set_random_address>
	switch (hci_opcode) {
   329c6:	e71a      	b.n	327fe <hci_internal_cmd_put+0x3fa>
		*param_length_out += sizeof(sdc_hci_cmd_le_set_ext_adv_params_return_t);
   329c8:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_set_ext_adv_params((void *)cmd_params,
   329cc:	4959      	ldr	r1, [pc, #356]	; (32b34 <hci_internal_cmd_put+0x730>)
		*param_length_out += sizeof(sdc_hci_cmd_le_set_ext_adv_params_return_t);
   329ce:	3301      	adds	r3, #1
   329d0:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_set_ext_adv_params((void *)cmd_params,
   329d4:	f7ec fe1f 	bl	1f616 <sdc_hci_cmd_le_set_ext_adv_params>
	switch (hci_opcode) {
   329d8:	e732      	b.n	32840 <hci_internal_cmd_put+0x43c>
		return sdc_hci_cmd_le_set_ext_adv_data((void *)cmd_params);
   329da:	f7ec fe10 	bl	1f5fe <sdc_hci_cmd_le_set_ext_adv_data>
	switch (hci_opcode) {
   329de:	e70e      	b.n	327fe <hci_internal_cmd_put+0x3fa>
		return sdc_hci_cmd_le_set_ext_scan_response_data((void *)cmd_params);
   329e0:	f7ec fe1b 	bl	1f61a <sdc_hci_cmd_le_set_ext_scan_response_data>
	switch (hci_opcode) {
   329e4:	e70b      	b.n	327fe <hci_internal_cmd_put+0x3fa>
		return sdc_hci_cmd_le_set_ext_adv_enable((void *)cmd_params);
   329e6:	f7ec fe0c 	bl	1f602 <sdc_hci_cmd_le_set_ext_adv_enable>
	switch (hci_opcode) {
   329ea:	e708      	b.n	327fe <hci_internal_cmd_put+0x3fa>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_max_adv_data_length_return_t);
   329ec:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_max_adv_data_length((void *)event_out_params);
   329f0:	4850      	ldr	r0, [pc, #320]	; (32b34 <hci_internal_cmd_put+0x730>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_max_adv_data_length_return_t);
   329f2:	3302      	adds	r3, #2
   329f4:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_max_adv_data_length((void *)event_out_params);
   329f8:	f7ec fddc 	bl	1f5b4 <sdc_hci_cmd_le_read_max_adv_data_length>
	switch (hci_opcode) {
   329fc:	e720      	b.n	32840 <hci_internal_cmd_put+0x43c>
		*param_length_out +=
   329fe:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_number_of_supported_adv_sets((void *)event_out_params);
   32a02:	484c      	ldr	r0, [pc, #304]	; (32b34 <hci_internal_cmd_put+0x730>)
		*param_length_out +=
   32a04:	3301      	adds	r3, #1
   32a06:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_number_of_supported_adv_sets((void *)event_out_params);
   32a0a:	f7ec fdd7 	bl	1f5bc <sdc_hci_cmd_le_read_number_of_supported_adv_sets>
	switch (hci_opcode) {
   32a0e:	e717      	b.n	32840 <hci_internal_cmd_put+0x43c>
		return sdc_hci_cmd_le_remove_adv_set((void *)cmd_params);
   32a10:	f7ec fdde 	bl	1f5d0 <sdc_hci_cmd_le_remove_adv_set>
   32a14:	e6f3      	b.n	327fe <hci_internal_cmd_put+0x3fa>
		return sdc_hci_cmd_le_clear_adv_sets();
   32a16:	f7ec fdb5 	bl	1f584 <sdc_hci_cmd_le_clear_adv_sets>
	switch (hci_opcode) {
   32a1a:	e6f0      	b.n	327fe <hci_internal_cmd_put+0x3fa>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_transmit_power_return_t);
   32a1c:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_transmit_power((void *)event_out_params);
   32a20:	4844      	ldr	r0, [pc, #272]	; (32b34 <hci_internal_cmd_put+0x730>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_transmit_power_return_t);
   32a22:	3302      	adds	r3, #2
   32a24:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_transmit_power((void *)event_out_params);
   32a28:	f7ec fdd0 	bl	1f5cc <sdc_hci_cmd_le_read_transmit_power>
   32a2c:	e708      	b.n	32840 <hci_internal_cmd_put+0x43c>
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   32a2e:	4630      	mov	r0, r6
	switch (opcode)	{
   32a30:	f64f 420b 	movw	r2, #64523	; 0xfc0b
   32a34:	f830 3b03 	ldrh.w	r3, [r0], #3
   32a38:	4293      	cmp	r3, r2
   32a3a:	d823      	bhi.n	32a84 <hci_internal_cmd_put+0x680>
   32a3c:	f5b3 4f7c 	cmp.w	r3, #64512	; 0xfc00
   32a40:	d801      	bhi.n	32a46 <hci_internal_cmd_put+0x642>
   32a42:	2001      	movs	r0, #1
   32a44:	e039      	b.n	32aba <hci_internal_cmd_put+0x6b6>
   32a46:	f5a3 437c 	sub.w	r3, r3, #64512	; 0xfc00
   32a4a:	3b01      	subs	r3, #1
   32a4c:	2b0a      	cmp	r3, #10
   32a4e:	d8f8      	bhi.n	32a42 <hci_internal_cmd_put+0x63e>
   32a50:	a201      	add	r2, pc, #4	; (adr r2, 32a58 <hci_internal_cmd_put+0x654>)
   32a52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   32a56:	bf00      	nop
   32a58:	00032aab 	.word	0x00032aab
   32a5c:	00032ac7 	.word	0x00032ac7
   32a60:	00032a43 	.word	0x00032a43
   32a64:	00032a43 	.word	0x00032a43
   32a68:	00032a43 	.word	0x00032a43
   32a6c:	00032b1b 	.word	0x00032b1b
   32a70:	00032a43 	.word	0x00032a43
   32a74:	00032a43 	.word	0x00032a43
   32a78:	00032af7 	.word	0x00032af7
   32a7c:	00032b09 	.word	0x00032b09
   32a80:	00032b21 	.word	0x00032b21
   32a84:	f503 7240 	add.w	r2, r3, #768	; 0x300
   32a88:	b292      	uxth	r2, r2
   32a8a:	2a0c      	cmp	r2, #12
   32a8c:	d8d9      	bhi.n	32a42 <hci_internal_cmd_put+0x63e>
   32a8e:	f5a3 437d 	sub.w	r3, r3, #64768	; 0xfd00
   32a92:	2b0c      	cmp	r3, #12
   32a94:	f200 808d 	bhi.w	32bb2 <hci_internal_cmd_put+0x7ae>
   32a98:	e8df f003 	tbb	[pc, r3]
   32a9c:	65625f4e 	.word	0x65625f4e
   32aa0:	8b8b6b68 	.word	0x8b8b6b68
   32aa4:	8b8b6e8b 	.word	0x8b8b6e8b
   32aa8:	71          	.byte	0x71
   32aa9:	00          	.byte	0x00
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_version_info_return_t);
   32aaa:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_version_info((void *)event_out_params);
   32aae:	4821      	ldr	r0, [pc, #132]	; (32b34 <hci_internal_cmd_put+0x730>)
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_version_info_return_t);
   32ab0:	330c      	adds	r3, #12
   32ab2:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_version_info((void *)event_out_params);
   32ab6:	f7df f969 	bl	11d8c <sdc_hci_cmd_vs_zephyr_read_version_info>
	switch (hci_opcode) {
   32aba:	f024 0308 	bic.w	r3, r4, #8
   32abe:	f64f 5202 	movw	r2, #64770	; 0xfd02
   32ac2:	4293      	cmp	r3, r2
   32ac4:	e069      	b.n	32b9a <hci_internal_cmd_put+0x796>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_supported_commands_return_t);
   32ac6:	f89d 3007 	ldrb.w	r3, [sp, #7]
	memset(cmds, 0, sizeof(*cmds));
   32aca:	481a      	ldr	r0, [pc, #104]	; (32b34 <hci_internal_cmd_put+0x730>)
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_supported_commands_return_t);
   32acc:	3340      	adds	r3, #64	; 0x40
	memset(cmds, 0, sizeof(*cmds));
   32ace:	2202      	movs	r2, #2
   32ad0:	2100      	movs	r1, #0
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_supported_commands_return_t);
   32ad2:	f88d 3007 	strb.w	r3, [sp, #7]
	memset(cmds, 0, sizeof(*cmds));
   32ad6:	f006 fc76 	bl	393c6 <memset>
	cmds->read_version_info = 1;
   32ada:	79eb      	ldrb	r3, [r5, #7]
   32adc:	f023 0323 	bic.w	r3, r3, #35	; 0x23
   32ae0:	f043 0323 	orr.w	r3, r3, #35	; 0x23
   32ae4:	71eb      	strb	r3, [r5, #7]
	cmds->read_static_addresses = 1;
   32ae6:	7a2b      	ldrb	r3, [r5, #8]
   32ae8:	f023 0307 	bic.w	r3, r3, #7
   32aec:	f043 0307 	orr.w	r3, r3, #7
   32af0:	722b      	strb	r3, [r5, #8]
		return 0;
   32af2:	2000      	movs	r0, #0
   32af4:	e7e1      	b.n	32aba <hci_internal_cmd_put+0x6b6>
		*param_length_out += sizeof(sdc_hci_vs_zephyr_static_address_t);
   32af6:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_static_addresses((void *)event_out_params);
   32afa:	480e      	ldr	r0, [pc, #56]	; (32b34 <hci_internal_cmd_put+0x730>)
		*param_length_out += sizeof(sdc_hci_vs_zephyr_static_address_t);
   32afc:	3317      	adds	r3, #23
   32afe:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_static_addresses((void *)event_out_params);
   32b02:	f7ec fce8 	bl	1f4d6 <sdc_hci_cmd_vs_zephyr_read_static_addresses>
   32b06:	e7d8      	b.n	32aba <hci_internal_cmd_put+0x6b6>
		*param_length_out +=
   32b08:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots((void *)event_out_params);
   32b0c:	4809      	ldr	r0, [pc, #36]	; (32b34 <hci_internal_cmd_put+0x730>)
		*param_length_out +=
   32b0e:	3320      	adds	r3, #32
   32b10:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots((void *)event_out_params);
   32b14:	f7ec fc92 	bl	1f43c <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>
   32b18:	e7cf      	b.n	32aba <hci_internal_cmd_put+0x6b6>
		return sdc_hci_cmd_vs_zephyr_write_bd_addr((void *)cmd_params);
   32b1a:	f7ec fd2b 	bl	1f574 <sdc_hci_cmd_vs_zephyr_write_bd_addr>
   32b1e:	e7cc      	b.n	32aba <hci_internal_cmd_put+0x6b6>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_chip_temp_return_t);
   32b20:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_chip_temp((void *)event_out_params);
   32b24:	4803      	ldr	r0, [pc, #12]	; (32b34 <hci_internal_cmd_put+0x730>)
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_chip_temp_return_t);
   32b26:	3301      	adds	r3, #1
   32b28:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_chip_temp((void *)event_out_params);
   32b2c:	f7ec fc72 	bl	1f414 <sdc_hci_cmd_vs_zephyr_read_chip_temp>
   32b30:	e7c3      	b.n	32aba <hci_internal_cmd_put+0x6b6>
   32b32:	bf00      	nop
   32b34:	20003f61 	.word	0x20003f61
		*param_length_out += sizeof(sdc_hci_cmd_vs_read_supported_vs_commands_return_t);
   32b38:	f89d 3007 	ldrb.w	r3, [sp, #7]
	memset(cmds, 0, sizeof(*cmds));
   32b3c:	481f      	ldr	r0, [pc, #124]	; (32bbc <hci_internal_cmd_put+0x7b8>)
		*param_length_out += sizeof(sdc_hci_cmd_vs_read_supported_vs_commands_return_t);
   32b3e:	3340      	adds	r3, #64	; 0x40
	memset(cmds, 0, sizeof(*cmds));
   32b40:	2202      	movs	r2, #2
   32b42:	2100      	movs	r1, #0
		*param_length_out += sizeof(sdc_hci_cmd_vs_read_supported_vs_commands_return_t);
   32b44:	f88d 3007 	strb.w	r3, [sp, #7]
	memset(cmds, 0, sizeof(*cmds));
   32b48:	f006 fc3d 	bl	393c6 <memset>
	cmds->read_supported_vs_commands = 1;
   32b4c:	79eb      	ldrb	r3, [r5, #7]
   32b4e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   32b52:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
   32b56:	71eb      	strb	r3, [r5, #7]
}
   32b58:	e7cb      	b.n	32af2 <hci_internal_cmd_put+0x6ee>
		return sdc_hci_cmd_vs_llpm_mode_set((void *)cmd_params);
   32b5a:	f7ec fc48 	bl	1f3ee <sdc_hci_cmd_vs_llpm_mode_set>
   32b5e:	e7ac      	b.n	32aba <hci_internal_cmd_put+0x6b6>
		return sdc_hci_cmd_vs_conn_update((void *)cmd_params);
   32b60:	f7ec fc19 	bl	1f396 <sdc_hci_cmd_vs_conn_update>
   32b64:	e7a9      	b.n	32aba <hci_internal_cmd_put+0x6b6>
		return sdc_hci_cmd_vs_conn_event_extend((void *)cmd_params);
   32b66:	f7ec fc0e 	bl	1f386 <sdc_hci_cmd_vs_conn_event_extend>
   32b6a:	e7a6      	b.n	32aba <hci_internal_cmd_put+0x6b6>
		return sdc_hci_cmd_vs_qos_conn_event_report_enable((void *)cmd_params);
   32b6c:	f7ec fc4b 	bl	1f406 <sdc_hci_cmd_vs_qos_conn_event_report_enable>
   32b70:	e7a3      	b.n	32aba <hci_internal_cmd_put+0x6b6>
		return sdc_hci_cmd_vs_event_length_set((void *)cmd_params);
   32b72:	f7ec fc3a 	bl	1f3ea <sdc_hci_cmd_vs_event_length_set>
   32b76:	e7a0      	b.n	32aba <hci_internal_cmd_put+0x6b6>
		return sdc_hci_cmd_vs_peripheral_latency_mode_set((void *)cmd_params);
   32b78:	f7ec fc41 	bl	1f3fe <sdc_hci_cmd_vs_peripheral_latency_mode_set>
   32b7c:	e79d      	b.n	32aba <hci_internal_cmd_put+0x6b6>
		return sdc_hci_cmd_vs_set_adv_randomness((void *)cmd_params);
   32b7e:	f7ec fc47 	bl	1f410 <sdc_hci_cmd_vs_set_adv_randomness>
   32b82:	e79a      	b.n	32aba <hci_internal_cmd_put+0x6b6>
	switch (hci_opcode) {
   32b84:	42b4      	cmp	r4, r6
   32b86:	d812      	bhi.n	32bae <hci_internal_cmd_put+0x7aa>
   32b88:	f242 030c 	movw	r3, #8204	; 0x200c
   32b8c:	2001      	movs	r0, #1
   32b8e:	429c      	cmp	r4, r3
   32b90:	f63f ac9b 	bhi.w	324ca <hci_internal_cmd_put+0xc6>
   32b94:	f240 431d 	movw	r3, #1053	; 0x41d
   32b98:	429c      	cmp	r4, r3
   32b9a:	f47f acb6 	bne.w	3250a <hci_internal_cmd_put+0x106>
   32b9e:	e480      	b.n	324a2 <hci_internal_cmd_put+0x9e>
   32ba0:	f242 030c 	movw	r3, #8204	; 0x200c
		return 0;
   32ba4:	2000      	movs	r0, #0
   32ba6:	e7f2      	b.n	32b8e <hci_internal_cmd_put+0x78a>
	switch (hci_opcode) {
   32ba8:	f242 030c 	movw	r3, #8204	; 0x200c
   32bac:	e7ef      	b.n	32b8e <hci_internal_cmd_put+0x78a>
   32bae:	2001      	movs	r0, #1
   32bb0:	e628      	b.n	32804 <hci_internal_cmd_put+0x400>
	switch (opcode)	{
   32bb2:	2001      	movs	r0, #1
   32bb4:	e62b      	b.n	3280e <hci_internal_cmd_put+0x40a>
		return -NRF_EPERM;
   32bb6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   32bba:	e47e      	b.n	324ba <hci_internal_cmd_put+0xb6>
   32bbc:	20003f61 	.word	0x20003f61

00032bc0 <hci_internal_msg_get>:

int hci_internal_msg_get(uint8_t *msg_out, sdc_hci_msg_type_t *msg_type_out)
{
   32bc0:	b538      	push	{r3, r4, r5, lr}
	if (cmd_complete_or_status.occurred) {
   32bc2:	4c09      	ldr	r4, [pc, #36]	; (32be8 <hci_internal_msg_get+0x28>)
   32bc4:	7823      	ldrb	r3, [r4, #0]
{
   32bc6:	460d      	mov	r5, r1
	if (cmd_complete_or_status.occurred) {
   32bc8:	b91b      	cbnz	r3, 32bd2 <hci_internal_msg_get+0x12>

		return 0;
	}

	return sdc_hci_get(msg_out, msg_type_out);
}
   32bca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return sdc_hci_get(msg_out, msg_type_out);
   32bce:	f7ec bbba 	b.w	1f346 <sdc_hci_get>
					 evt_hdr->len + BT_HCI_EVT_HDR_SIZE);
   32bd2:	78a2      	ldrb	r2, [r4, #2]
		memcpy(msg_out,
   32bd4:	1c61      	adds	r1, r4, #1
   32bd6:	3202      	adds	r2, #2
   32bd8:	f006 fbea 	bl	393b0 <memcpy>
		cmd_complete_or_status.occurred = false;
   32bdc:	2000      	movs	r0, #0
		*msg_type_out = SDC_HCI_MSG_TYPE_EVT;
   32bde:	2304      	movs	r3, #4
		cmd_complete_or_status.occurred = false;
   32be0:	7020      	strb	r0, [r4, #0]
		*msg_type_out = SDC_HCI_MSG_TYPE_EVT;
   32be2:	702b      	strb	r3, [r5, #0]
}
   32be4:	bd38      	pop	{r3, r4, r5, pc}
   32be6:	bf00      	nop
   32be8:	20003f5a 	.word	0x20003f5a

00032bec <bt_rand>:
#define BT_ECB_BLOCK_SIZE 16

static const struct device *dev = DEVICE_DT_GET(DT_NODELABEL(rng));

int bt_rand(void *buf, size_t len)
{
   32bec:	b570      	push	{r4, r5, r6, lr}
   32bee:	4606      	mov	r6, r0
   32bf0:	460c      	mov	r4, r1
   32bf2:	4d0d      	ldr	r5, [pc, #52]	; (32c28 <bt_rand+0x3c>)
   32bf4:	4628      	mov	r0, r5
   32bf6:	f008 ffd1 	bl	3bb9c <z_device_is_ready>
	if (unlikely(!device_is_ready(dev))) {
   32bfa:	b188      	cbz	r0, 32c20 <bt_rand+0x34>
		return -ENODEV;
	}

	return entropy_get_entropy(dev, (uint8_t *)buf, len);
   32bfc:	b2a2      	uxth	r2, r4
	__ASSERT(api->get_entropy != NULL,
   32bfe:	68ab      	ldr	r3, [r5, #8]
   32c00:	681b      	ldr	r3, [r3, #0]
   32c02:	b943      	cbnz	r3, 32c16 <bt_rand+0x2a>
   32c04:	4909      	ldr	r1, [pc, #36]	; (32c2c <bt_rand+0x40>)
   32c06:	480a      	ldr	r0, [pc, #40]	; (32c30 <bt_rand+0x44>)
   32c08:	224d      	movs	r2, #77	; 0x4d
   32c0a:	f005 ff82 	bl	38b12 <assert_print>
   32c0e:	4807      	ldr	r0, [pc, #28]	; (32c2c <bt_rand+0x40>)
   32c10:	214d      	movs	r1, #77	; 0x4d
   32c12:	f005 ff77 	bl	38b04 <assert_post_action>
	return api->get_entropy(dev, buffer, length);
   32c16:	4631      	mov	r1, r6
   32c18:	4628      	mov	r0, r5
}
   32c1a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   32c1e:	4718      	bx	r3
   32c20:	f06f 0012 	mvn.w	r0, #18
   32c24:	bd70      	pop	{r4, r5, r6, pc}
   32c26:	bf00      	nop
   32c28:	0003c118 	.word	0x0003c118
   32c2c:	0003f788 	.word	0x0003f788
   32c30:	0003d1d7 	.word	0x0003d1d7

00032c34 <sys_memcpy_swap.constprop.0>:
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   32c34:	4288      	cmp	r0, r1
static inline void sys_memcpy_swap(void *dst, const void *src, size_t length)
   32c36:	b508      	push	{r3, lr}
   32c38:	f101 0320 	add.w	r3, r1, #32
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   32c3c:	d90c      	bls.n	32c58 <sys_memcpy_swap.constprop.0+0x24>
   32c3e:	4298      	cmp	r0, r3
   32c40:	d20f      	bcs.n	32c62 <sys_memcpy_swap.constprop.0+0x2e>
   32c42:	490c      	ldr	r1, [pc, #48]	; (32c74 <sys_memcpy_swap.constprop.0+0x40>)
   32c44:	480c      	ldr	r0, [pc, #48]	; (32c78 <sys_memcpy_swap.constprop.0+0x44>)
   32c46:	f240 2215 	movw	r2, #533	; 0x215
   32c4a:	f005 ff62 	bl	38b12 <assert_print>
   32c4e:	4809      	ldr	r0, [pc, #36]	; (32c74 <sys_memcpy_swap.constprop.0+0x40>)
   32c50:	f240 2115 	movw	r1, #533	; 0x215
   32c54:	f005 ff56 	bl	38b04 <assert_post_action>
   32c58:	d0f3      	beq.n	32c42 <sys_memcpy_swap.constprop.0+0xe>
   32c5a:	f100 0220 	add.w	r2, r0, #32
   32c5e:	4291      	cmp	r1, r2
   32c60:	e7ee      	b.n	32c40 <sys_memcpy_swap.constprop.0+0xc>
	for (; length > 0; length--) {
   32c62:	3801      	subs	r0, #1
		*pdst++ = *psrc--;
   32c64:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   32c68:	f800 2f01 	strb.w	r2, [r0, #1]!
	for (; length > 0; length--) {
   32c6c:	428b      	cmp	r3, r1
   32c6e:	d1f9      	bne.n	32c64 <sys_memcpy_swap.constprop.0+0x30>
}
   32c70:	bd08      	pop	{r3, pc}
   32c72:	bf00      	nop
   32c74:	0003f8eb 	.word	0x0003f8eb
   32c78:	0003d1d7 	.word	0x0003d1d7

00032c7c <ecdh_p256_common_secret>:

	return buf;
}

static struct net_buf *ecdh_p256_common_secret(bool use_debug)
{
   32c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	err = ocrypto_ecdh_p256_common_secret(ecdh.dhkey_be,
   32c7e:	4b25      	ldr	r3, [pc, #148]	; (32d14 <ecdh_p256_common_secret+0x98>)
   32c80:	4925      	ldr	r1, [pc, #148]	; (32d18 <ecdh_p256_common_secret+0x9c>)
   32c82:	f103 0220 	add.w	r2, r3, #32
   32c86:	2800      	cmp	r0, #0
   32c88:	bf08      	it	eq
   32c8a:	4619      	moveq	r1, r3
{
   32c8c:	af00      	add	r7, sp, #0
	err = ocrypto_ecdh_p256_common_secret(ecdh.dhkey_be,
   32c8e:	4610      	mov	r0, r2
   32c90:	f005 f978 	bl	37f84 <ocrypto_ecdh_p256_common_secret>
	if (err) {
   32c94:	4604      	mov	r4, r0
   32c96:	b198      	cbz	r0, 32cc0 <ecdh_p256_common_secret+0x44>
		BT_ERR("public key is not valid (err %d)", err);
   32c98:	4820      	ldr	r0, [pc, #128]	; (32d1c <ecdh_p256_common_secret+0xa0>)
   32c9a:	6803      	ldr	r3, [r0, #0]
   32c9c:	075b      	lsls	r3, r3, #29
   32c9e:	d00e      	beq.n	32cbe <ecdh_p256_common_secret+0x42>
   32ca0:	466d      	mov	r5, sp
   32ca2:	b088      	sub	sp, #32
   32ca4:	466a      	mov	r2, sp
   32ca6:	4b1e      	ldr	r3, [pc, #120]	; (32d20 <ecdh_p256_common_secret+0xa4>)
   32ca8:	e9c2 3405 	strd	r3, r4, [r2, #20]
   32cac:	2303      	movs	r3, #3
   32cae:	f842 3f10 	str.w	r3, [r2, #16]!
   32cb2:	2300      	movs	r3, #0
   32cb4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   32cb8:	f7f3 fa78 	bl	261ac <z_impl_z_log_msg_static_create>
   32cbc:	46ad      	mov	sp, r5
		return BT_HCI_ERR_INVALID_PARAM;
   32cbe:	2412      	movs	r4, #18
	struct net_buf *buf;
	uint8_t status;

	status = common_secret(use_debug);

	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   32cc0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   32cc4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   32cc8:	2001      	movs	r0, #1
   32cca:	f7f5 f89d 	bl	27e08 <bt_buf_get_rx>
	return net_buf_simple_add(&buf->b, len);
   32cce:	f100 0608 	add.w	r6, r0, #8
   32cd2:	2102      	movs	r1, #2
   32cd4:	4605      	mov	r5, r0
   32cd6:	4630      	mov	r0, r6
   32cd8:	f7fb fed8 	bl	2ea8c <net_buf_simple_add>

	hdr = net_buf_add(buf, sizeof(*hdr));
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
   32cdc:	233e      	movs	r3, #62	; 0x3e
   32cde:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
   32ce0:	2322      	movs	r3, #34	; 0x22
   32ce2:	7043      	strb	r3, [r0, #1]
   32ce4:	2101      	movs	r1, #1
   32ce6:	4630      	mov	r0, r6
   32ce8:	f7fb fed0 	bl	2ea8c <net_buf_simple_add>

	meta = net_buf_add(buf, sizeof(*meta));
	meta->subevent = BT_HCI_EVT_LE_GENERATE_DHKEY_COMPLETE;
   32cec:	2309      	movs	r3, #9
   32cee:	7003      	strb	r3, [r0, #0]
   32cf0:	2121      	movs	r1, #33	; 0x21
   32cf2:	4630      	mov	r0, r6
   32cf4:	f7fb feca 	bl	2ea8c <net_buf_simple_add>

	evt = net_buf_add(buf, sizeof(*evt));
	evt->status = status;
   32cf8:	f800 4b01 	strb.w	r4, [r0], #1

	if (status) {
   32cfc:	b134      	cbz	r4, 32d0c <ecdh_p256_common_secret+0x90>
		memset(evt->dhkey, 0xff, sizeof(evt->dhkey));
   32cfe:	2220      	movs	r2, #32
   32d00:	21ff      	movs	r1, #255	; 0xff
   32d02:	f006 fb60 	bl	393c6 <memset>
		sys_memcpy_swap(evt->dhkey, ecdh.dhkey_be,
				sizeof(ecdh.dhkey_be));
	}

	return buf;
}
   32d06:	4628      	mov	r0, r5
   32d08:	46bd      	mov	sp, r7
   32d0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		sys_memcpy_swap(evt->dhkey, ecdh.dhkey_be,
   32d0c:	4905      	ldr	r1, [pc, #20]	; (32d24 <ecdh_p256_common_secret+0xa8>)
   32d0e:	f7ff ff91 	bl	32c34 <sys_memcpy_swap.constprop.0>
   32d12:	e7f8      	b.n	32d06 <ecdh_p256_common_secret+0x8a>
   32d14:	20003fa1 	.word	0x20003fa1
   32d18:	0003f966 	.word	0x0003f966
   32d1c:	20000a84 	.word	0x20000a84
   32d20:	0003f928 	.word	0x0003f928
   32d24:	20003fc1 	.word	0x20003fc1

00032d28 <ecdh_cmd_process>:

void ecdh_cmd_process(void)
{
   32d28:	b5f0      	push	{r4, r5, r6, r7, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   32d2a:	4c48      	ldr	r4, [pc, #288]	; (32e4c <ecdh_cmd_process+0x124>)
   32d2c:	f3bf 8f5b 	dmb	ish
   32d30:	6823      	ldr	r3, [r4, #0]
   32d32:	f3bf 8f5b 	dmb	ish
	struct net_buf *buf;

	switch (atomic_get(&cmd)) {
   32d36:	2b02      	cmp	r3, #2
{
   32d38:	b087      	sub	sp, #28
   32d3a:	4627      	mov	r7, r4
	switch (atomic_get(&cmd)) {
   32d3c:	d05a      	beq.n	32df4 <ecdh_cmd_process+0xcc>
   32d3e:	2b04      	cmp	r3, #4
   32d40:	d05d      	beq.n	32dfe <ecdh_cmd_process+0xd6>
   32d42:	2b01      	cmp	r3, #1
   32d44:	d15d      	bne.n	32e02 <ecdh_cmd_process+0xda>
		err = bt_rand(ecdh.private_key_be, 32);
   32d46:	4c42      	ldr	r4, [pc, #264]	; (32e50 <ecdh_cmd_process+0x128>)
		if (!memcmp(ecdh.private_key_be, debug_private_key_be, 32)) {
   32d48:	4e42      	ldr	r6, [pc, #264]	; (32e54 <ecdh_cmd_process+0x12c>)
		err = bt_rand(ecdh.private_key_be, 32);
   32d4a:	2120      	movs	r1, #32
   32d4c:	4620      	mov	r0, r4
   32d4e:	f7ff ff4d 	bl	32bec <bt_rand>
		if (err) {
   32d52:	2800      	cmp	r0, #0
   32d54:	d143      	bne.n	32dde <ecdh_cmd_process+0xb6>
		if (!memcmp(ecdh.private_key_be, debug_private_key_be, 32)) {
   32d56:	2220      	movs	r2, #32
   32d58:	4631      	mov	r1, r6
   32d5a:	4620      	mov	r0, r4
   32d5c:	f006 fb01 	bl	39362 <memcmp>
   32d60:	2800      	cmp	r0, #0
   32d62:	d0f2      	beq.n	32d4a <ecdh_cmd_process+0x22>
		err = ocrypto_ecdh_p256_public_key(ecdh.public_key_be,
   32d64:	483c      	ldr	r0, [pc, #240]	; (32e58 <ecdh_cmd_process+0x130>)
   32d66:	4621      	mov	r1, r4
   32d68:	f005 f8f8 	bl	37f5c <ocrypto_ecdh_p256_public_key>
	} while (err);
   32d6c:	4605      	mov	r5, r0
   32d6e:	2800      	cmp	r0, #0
   32d70:	d1eb      	bne.n	32d4a <ecdh_cmd_process+0x22>
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   32d72:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   32d76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   32d7a:	2001      	movs	r0, #1
   32d7c:	f7f5 f844 	bl	27e08 <bt_buf_get_rx>
   32d80:	f100 0608 	add.w	r6, r0, #8
   32d84:	2102      	movs	r1, #2
   32d86:	4604      	mov	r4, r0
   32d88:	4630      	mov	r0, r6
   32d8a:	f7fb fe7f 	bl	2ea8c <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
   32d8e:	233e      	movs	r3, #62	; 0x3e
   32d90:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
   32d92:	2342      	movs	r3, #66	; 0x42
   32d94:	7043      	strb	r3, [r0, #1]
   32d96:	2101      	movs	r1, #1
   32d98:	4630      	mov	r0, r6
   32d9a:	f7fb fe77 	bl	2ea8c <net_buf_simple_add>
	meta->subevent = BT_HCI_EVT_LE_P256_PUBLIC_KEY_COMPLETE;
   32d9e:	2308      	movs	r3, #8
   32da0:	7003      	strb	r3, [r0, #0]
   32da2:	2141      	movs	r1, #65	; 0x41
   32da4:	4630      	mov	r0, r6
   32da6:	f7fb fe71 	bl	2ea8c <net_buf_simple_add>
   32daa:	4606      	mov	r6, r0
	evt->status = status;
   32dac:	f800 5b01 	strb.w	r5, [r0], #1
	if (status) {
   32db0:	b1bd      	cbz	r5, 32de2 <ecdh_cmd_process+0xba>
		(void)memset(evt->key, 0, sizeof(evt->key));
   32db2:	2240      	movs	r2, #64	; 0x40
   32db4:	2100      	movs	r1, #0
   32db6:	f006 fb06 	bl	393c6 <memset>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   32dba:	f3bf 8f5b 	dmb	ish
   32dbe:	2300      	movs	r3, #0
   32dc0:	e857 2f00 	ldrex	r2, [r7]
   32dc4:	e847 3100 	strex	r1, r3, [r7]
   32dc8:	2900      	cmp	r1, #0
   32dca:	d1f9      	bne.n	32dc0 <ecdh_cmd_process+0x98>
   32dcc:	f3bf 8f5b 	dmb	ish
		buf = NULL;
		break;
	}

	atomic_set(&cmd, 0);
	if (buf) {
   32dd0:	b38c      	cbz	r4, 32e36 <ecdh_cmd_process+0x10e>
		bt_recv(buf);
   32dd2:	4620      	mov	r0, r4
	}
}
   32dd4:	b007      	add	sp, #28
   32dd6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_recv(buf);
   32dda:	f7f6 b989 	b.w	290f0 <bt_recv>
			return BT_HCI_ERR_UNSPECIFIED;
   32dde:	251f      	movs	r5, #31
   32de0:	e7c7      	b.n	32d72 <ecdh_cmd_process+0x4a>
		sys_memcpy_swap(&evt->key[0], &ecdh.public_key_be[0], 32);
   32de2:	491d      	ldr	r1, [pc, #116]	; (32e58 <ecdh_cmd_process+0x130>)
   32de4:	f7ff ff26 	bl	32c34 <sys_memcpy_swap.constprop.0>
		sys_memcpy_swap(&evt->key[32], &ecdh.public_key_be[32], 32);
   32de8:	491c      	ldr	r1, [pc, #112]	; (32e5c <ecdh_cmd_process+0x134>)
   32dea:	f106 0021 	add.w	r0, r6, #33	; 0x21
   32dee:	f7ff ff21 	bl	32c34 <sys_memcpy_swap.constprop.0>
		break;
   32df2:	e7e2      	b.n	32dba <ecdh_cmd_process+0x92>
		buf = ecdh_p256_common_secret(false);
   32df4:	2000      	movs	r0, #0
		buf = ecdh_p256_common_secret(true);
   32df6:	f7ff ff41 	bl	32c7c <ecdh_p256_common_secret>
   32dfa:	4604      	mov	r4, r0
		break;
   32dfc:	e7dd      	b.n	32dba <ecdh_cmd_process+0x92>
		buf = ecdh_p256_common_secret(true);
   32dfe:	2001      	movs	r0, #1
   32e00:	e7f9      	b.n	32df6 <ecdh_cmd_process+0xce>
		BT_WARN("Unknown command");
   32e02:	4817      	ldr	r0, [pc, #92]	; (32e60 <ecdh_cmd_process+0x138>)
   32e04:	6803      	ldr	r3, [r0, #0]
   32e06:	f013 0306 	ands.w	r3, r3, #6
   32e0a:	d016      	beq.n	32e3a <ecdh_cmd_process+0x112>
   32e0c:	4b15      	ldr	r3, [pc, #84]	; (32e64 <ecdh_cmd_process+0x13c>)
   32e0e:	9305      	str	r3, [sp, #20]
   32e10:	2302      	movs	r3, #2
   32e12:	9304      	str	r3, [sp, #16]
   32e14:	2300      	movs	r3, #0
   32e16:	aa04      	add	r2, sp, #16
   32e18:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   32e1c:	f7f3 f9c6 	bl	261ac <z_impl_z_log_msg_static_create>
   32e20:	f3bf 8f5b 	dmb	ish
   32e24:	2300      	movs	r3, #0
   32e26:	e854 2f00 	ldrex	r2, [r4]
   32e2a:	e844 3100 	strex	r1, r3, [r4]
   32e2e:	2900      	cmp	r1, #0
   32e30:	d1f9      	bne.n	32e26 <ecdh_cmd_process+0xfe>
   32e32:	f3bf 8f5b 	dmb	ish
}
   32e36:	b007      	add	sp, #28
   32e38:	bdf0      	pop	{r4, r5, r6, r7, pc}
   32e3a:	f3bf 8f5b 	dmb	ish
   32e3e:	e854 2f00 	ldrex	r2, [r4]
   32e42:	e844 3100 	strex	r1, r3, [r4]
   32e46:	2900      	cmp	r1, #0
   32e48:	d0f3      	beq.n	32e32 <ecdh_cmd_process+0x10a>
   32e4a:	e7f8      	b.n	32e3e <ecdh_cmd_process+0x116>
   32e4c:	200031e4 	.word	0x200031e4
   32e50:	20003fa1 	.word	0x20003fa1
   32e54:	0003f966 	.word	0x0003f966
   32e58:	20003fc1 	.word	0x20003fc1
   32e5c:	20003fe1 	.word	0x20003fe1
   32e60:	20000a84 	.word	0x20000a84
   32e64:	0003f949 	.word	0x0003f949

00032e68 <ecdh_thread>:
{
	k_poll_signal_raise(&ecdh_signal, 0);
}

static void ecdh_thread(void *p1, void *p2, void *p3)
{
   32e68:	b510      	push	{r4, lr}
   32e6a:	b086      	sub	sp, #24
	struct k_poll_event events[1] = {
   32e6c:	2210      	movs	r2, #16
   32e6e:	2100      	movs	r1, #0
   32e70:	a801      	add	r0, sp, #4
   32e72:	f006 faa8 	bl	393c6 <memset>
   32e76:	4c0b      	ldr	r4, [pc, #44]	; (32ea4 <ecdh_thread+0x3c>)
   32e78:	9405      	str	r4, [sp, #20]
   32e7a:	2301      	movs	r3, #1
   32e7c:	f88d 3011 	strb.w	r3, [sp, #17]
	return z_impl_k_poll(events, num_events, timeout);
   32e80:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   32e84:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   32e88:	2101      	movs	r1, #1
   32e8a:	a801      	add	r0, sp, #4
   32e8c:	f004 ff36 	bl	37cfc <z_impl_k_poll>
	z_impl_k_poll_signal_reset(sig);
   32e90:	4620      	mov	r0, r4
   32e92:	f009 f892 	bl	3bfba <z_impl_k_poll_signal_reset>

	while (true) {
		k_poll(events, 1, K_FOREVER);

		k_poll_signal_reset(&ecdh_signal);
		events[0].state = K_POLL_STATE_NOT_READY;
   32e96:	9b04      	ldr	r3, [sp, #16]
   32e98:	f36f 3394 	bfc	r3, #14, #7
   32e9c:	9304      	str	r3, [sp, #16]

		ecdh_cmd_process();
   32e9e:	f7ff ff43 	bl	32d28 <ecdh_cmd_process>
	while (true) {
   32ea2:	e7ed      	b.n	32e80 <ecdh_thread+0x18>
   32ea4:	200031d4 	.word	0x200031d4

00032ea8 <hci_ecdh_init>:
	}
}
#endif /* !defined(CONFIG_BT_CTLR_ECDH_IN_MPSL_WORK) */

void hci_ecdh_init(void)
{
   32ea8:	b510      	push	{r4, lr}
   32eaa:	b088      	sub	sp, #32
	z_impl_k_poll_signal_init(sig);
   32eac:	480e      	ldr	r0, [pc, #56]	; (32ee8 <hci_ecdh_init+0x40>)
   32eae:	f009 f87f 	bl	3bfb0 <z_impl_k_poll_signal_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   32eb2:	4c0e      	ldr	r4, [pc, #56]	; (32eec <hci_ecdh_init+0x44>)
   32eb4:	490e      	ldr	r1, [pc, #56]	; (32ef0 <hci_ecdh_init+0x48>)
   32eb6:	2200      	movs	r2, #0
   32eb8:	2300      	movs	r3, #0
   32eba:	e9cd 2306 	strd	r2, r3, [sp, #24]
   32ebe:	2300      	movs	r3, #0
   32ec0:	220a      	movs	r2, #10
   32ec2:	e9cd 2303 	strd	r2, r3, [sp, #12]
   32ec6:	e9cd 3301 	strd	r3, r3, [sp, #4]
   32eca:	9300      	str	r3, [sp, #0]
   32ecc:	f44f 7262 	mov.w	r2, #904	; 0x388
   32ed0:	4b08      	ldr	r3, [pc, #32]	; (32ef4 <hci_ecdh_init+0x4c>)
   32ed2:	4620      	mov	r0, r4
   32ed4:	f002 f904 	bl	350e0 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   32ed8:	4907      	ldr	r1, [pc, #28]	; (32ef8 <hci_ecdh_init+0x50>)
   32eda:	4620      	mov	r0, r4
			NULL, NULL, NULL, K_PRIO_PREEMPT(10), 0, K_NO_WAIT);
	k_thread_name_set(&ecdh_thread_data, "BT CTLR ECDH");
#else
	k_work_init(&ecdh_work, ecdh_work_handler);
#endif /* !defined(CONFIG_BT_CTLR_ECDH_IN_MPSL_WORK) */
}
   32edc:	b008      	add	sp, #32
   32ede:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   32ee2:	f008 be8e 	b.w	3bc02 <z_impl_k_thread_name_set>
   32ee6:	bf00      	nop
   32ee8:	200031d4 	.word	0x200031d4
   32eec:	20002ab0 	.word	0x20002ab0
   32ef0:	200064c0 	.word	0x200064c0
   32ef4:	00032e69 	.word	0x00032e69
   32ef8:	0003f959 	.word	0x0003f959

00032efc <hci_ecdh_uninit>:
	z_impl_k_thread_abort(thread);
   32efc:	4801      	ldr	r0, [pc, #4]	; (32f04 <hci_ecdh_uninit+0x8>)
   32efe:	f7f4 bd19 	b.w	27934 <z_impl_k_thread_abort>
   32f02:	bf00      	nop
   32f04:	20002ab0 	.word	0x20002ab0

00032f08 <hci_cmd_le_read_local_p256_public_key>:
#endif /* !defined(CONFIG_BT_CTLR_ECDH_IN_MPSL_WORK) */
}


uint8_t hci_cmd_le_read_local_p256_public_key(void)
{
   32f08:	b508      	push	{r3, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   32f0a:	4b0b      	ldr	r3, [pc, #44]	; (32f38 <hci_cmd_le_read_local_p256_public_key+0x30>)
   32f0c:	f3bf 8f5b 	dmb	ish
   32f10:	2201      	movs	r2, #1
   32f12:	e853 1f00 	ldrex	r1, [r3]
   32f16:	2900      	cmp	r1, #0
   32f18:	d103      	bne.n	32f22 <hci_cmd_le_read_local_p256_public_key+0x1a>
   32f1a:	e843 2000 	strex	r0, r2, [r3]
   32f1e:	2800      	cmp	r0, #0
   32f20:	d1f7      	bne.n	32f12 <hci_cmd_le_read_local_p256_public_key+0xa>
   32f22:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&cmd, 0, GEN_PUBLIC_KEY)) {
   32f26:	d105      	bne.n	32f34 <hci_cmd_le_read_local_p256_public_key+0x2c>
	return z_impl_k_poll_signal_raise(sig, result);
   32f28:	4804      	ldr	r0, [pc, #16]	; (32f3c <hci_cmd_le_read_local_p256_public_key+0x34>)
   32f2a:	2100      	movs	r1, #0
   32f2c:	f004 ff98 	bl	37e60 <z_impl_k_poll_signal_raise>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	work_submit();

	return 0;
   32f30:	2000      	movs	r0, #0
}
   32f32:	bd08      	pop	{r3, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   32f34:	200c      	movs	r0, #12
   32f36:	e7fc      	b.n	32f32 <hci_cmd_le_read_local_p256_public_key+0x2a>
   32f38:	200031e4 	.word	0x200031e4
   32f3c:	200031d4 	.word	0x200031d4

00032f40 <cmd_le_generate_dhkey>:

uint8_t cmd_le_generate_dhkey(uint8_t *key, uint8_t key_type)
{
   32f40:	b510      	push	{r4, lr}
	if (!atomic_cas(&cmd, 0, key_type ? GEN_DHKEY_DEBUG : GEN_DHKEY)) {
   32f42:	2900      	cmp	r1, #0
   32f44:	4b11      	ldr	r3, [pc, #68]	; (32f8c <cmd_le_generate_dhkey+0x4c>)
   32f46:	f3bf 8f5b 	dmb	ish
{
   32f4a:	4604      	mov	r4, r0
	if (!atomic_cas(&cmd, 0, key_type ? GEN_DHKEY_DEBUG : GEN_DHKEY)) {
   32f4c:	bf0c      	ite	eq
   32f4e:	2202      	moveq	r2, #2
   32f50:	2204      	movne	r2, #4
   32f52:	e853 1f00 	ldrex	r1, [r3]
   32f56:	2900      	cmp	r1, #0
   32f58:	d103      	bne.n	32f62 <cmd_le_generate_dhkey+0x22>
   32f5a:	e843 2000 	strex	r0, r2, [r3]
   32f5e:	2800      	cmp	r0, #0
   32f60:	d1f7      	bne.n	32f52 <cmd_le_generate_dhkey+0x12>
   32f62:	f3bf 8f5b 	dmb	ish
   32f66:	d10e      	bne.n	32f86 <cmd_le_generate_dhkey+0x46>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	sys_memcpy_swap(&ecdh.public_key_be[0], &key[0], 32);
   32f68:	4621      	mov	r1, r4
   32f6a:	4809      	ldr	r0, [pc, #36]	; (32f90 <cmd_le_generate_dhkey+0x50>)
   32f6c:	f7ff fe62 	bl	32c34 <sys_memcpy_swap.constprop.0>
	sys_memcpy_swap(&ecdh.public_key_be[32], &key[32], 32);
   32f70:	4808      	ldr	r0, [pc, #32]	; (32f94 <cmd_le_generate_dhkey+0x54>)
   32f72:	f104 0120 	add.w	r1, r4, #32
   32f76:	f7ff fe5d 	bl	32c34 <sys_memcpy_swap.constprop.0>
   32f7a:	4807      	ldr	r0, [pc, #28]	; (32f98 <cmd_le_generate_dhkey+0x58>)
   32f7c:	2100      	movs	r1, #0
   32f7e:	f004 ff6f 	bl	37e60 <z_impl_k_poll_signal_raise>

	work_submit();

	return 0;
   32f82:	2000      	movs	r0, #0
}
   32f84:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   32f86:	200c      	movs	r0, #12
   32f88:	e7fc      	b.n	32f84 <cmd_le_generate_dhkey+0x44>
   32f8a:	bf00      	nop
   32f8c:	200031e4 	.word	0x200031e4
   32f90:	20003fc1 	.word	0x20003fc1
   32f94:	20003fe1 	.word	0x20003fe1
   32f98:	200031d4 	.word	0x200031d4

00032f9c <mpsl_low_prio_irq_handler>:
static uint8_t __aligned(4) timeslot_context[TIMESLOT_MEM_SIZE];
#endif

static void mpsl_low_prio_irq_handler(const void *arg)
{
	k_work_submit_to_queue(&mpsl_work_q, &mpsl_low_prio_work);
   32f9c:	4901      	ldr	r1, [pc, #4]	; (32fa4 <mpsl_low_prio_irq_handler+0x8>)
   32f9e:	4802      	ldr	r0, [pc, #8]	; (32fa8 <mpsl_low_prio_irq_handler+0xc>)
   32fa0:	f008 bed6 	b.w	3bd50 <k_work_submit_to_queue>
   32fa4:	20003218 	.word	0x20003218
   32fa8:	20002b30 	.word	0x20002b30

00032fac <mpsl_lib_init_sys>:

	return 0;
}

static int mpsl_lib_init_sys(const struct device *dev)
{
   32fac:	b537      	push	{r0, r1, r2, r4, r5, lr}
	clock_cfg.accuracy_ppm = CONFIG_CLOCK_CONTROL_NRF_ACCURACY;
   32fae:	2332      	movs	r3, #50	; 0x32
   32fb0:	f8ad 3004 	strh.w	r3, [sp, #4]
	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   32fb4:	4a13      	ldr	r2, [pc, #76]	; (33004 <mpsl_lib_init_sys+0x58>)
	clock_cfg.skip_wait_lfclk_started =
   32fb6:	2300      	movs	r3, #0
	clock_cfg.source = m_config_clock_source_get();
   32fb8:	2501      	movs	r5, #1
	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   32fba:	2119      	movs	r1, #25
   32fbc:	4668      	mov	r0, sp
	clock_cfg.skip_wait_lfclk_started =
   32fbe:	f88d 3006 	strb.w	r3, [sp, #6]
	clock_cfg.source = m_config_clock_source_get();
   32fc2:	f8ad 5000 	strh.w	r5, [sp]
	clock_cfg.rc_temp_ctiv = 0;
   32fc6:	f88d 3002 	strb.w	r3, [sp, #2]
	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   32fca:	f7de f8c5 	bl	11158 <mpsl_init>
	if (err) {
   32fce:	4604      	mov	r4, r0
   32fd0:	b9a0      	cbnz	r0, 32ffc <mpsl_lib_init_sys+0x50>
	err = mpsl_timeslot_session_count_set((void *) timeslot_context,
   32fd2:	480d      	ldr	r0, [pc, #52]	; (33008 <mpsl_lib_init_sys+0x5c>)
   32fd4:	4629      	mov	r1, r5
   32fd6:	f7eb faaa 	bl	1e52e <mpsl_timeslot_session_count_set>
	ARG_UNUSED(dev);
	int err = 0;

	err = mpsl_lib_init_internal();
	if (err) {
   32fda:	4604      	mov	r4, r0
   32fdc:	b970      	cbnz	r0, 32ffc <mpsl_lib_init_sys+0x50>
	ARM_IRQ_DIRECT_DYNAMIC_CONNECT(RADIO_IRQn, MPSL_HIGH_IRQ_PRIORITY,
			IRQ_CONNECT_FLAGS, reschedule);

	mpsl_lib_irq_connect();
#else /* !IS_ENABLED(CONFIG_MPSL_DYNAMIC_INTERRUPTS) */
	IRQ_DIRECT_CONNECT(TIMER0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   32fde:	4601      	mov	r1, r0
   32fe0:	462a      	mov	r2, r5
   32fe2:	2008      	movs	r0, #8
   32fe4:	f7f3 ff84 	bl	26ef0 <z_arm_irq_priority_set>
			   mpsl_timer0_isr_wrapper, IRQ_CONNECT_FLAGS);
	IRQ_DIRECT_CONNECT(RTC0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   32fe8:	462a      	mov	r2, r5
   32fea:	4621      	mov	r1, r4
   32fec:	200b      	movs	r0, #11
   32fee:	f7f3 ff7f 	bl	26ef0 <z_arm_irq_priority_set>
			   mpsl_rtc0_isr_wrapper, IRQ_CONNECT_FLAGS);
	IRQ_DIRECT_CONNECT(RADIO_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   32ff2:	462a      	mov	r2, r5
   32ff4:	4621      	mov	r1, r4
   32ff6:	4628      	mov	r0, r5
   32ff8:	f7f3 ff7a 	bl	26ef0 <z_arm_irq_priority_set>
			   mpsl_radio_isr_wrapper, IRQ_CONNECT_FLAGS);
#endif /* IS_ENABLED(CONFIG_MPSL_DYNAMIC_INTERRUPTS) */

	return 0;
}
   32ffc:	4620      	mov	r0, r4
   32ffe:	b003      	add	sp, #12
   33000:	bd30      	pop	{r4, r5, pc}
   33002:	bf00      	nop
   33004:	00033045 	.word	0x00033045
   33008:	200031e8 	.word	0x200031e8

0003300c <mpsl_low_prio_work_handler>:
{
   3300c:	b508      	push	{r3, lr}
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   3300e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   33012:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   33016:	f7fe fee3 	bl	31de0 <multithreading_lock_acquire>
	__ASSERT_NO_MSG(errcode == 0);
   3301a:	b140      	cbz	r0, 3302e <mpsl_low_prio_work_handler+0x22>
   3301c:	4907      	ldr	r1, [pc, #28]	; (3303c <mpsl_low_prio_work_handler+0x30>)
   3301e:	4808      	ldr	r0, [pc, #32]	; (33040 <mpsl_low_prio_work_handler+0x34>)
   33020:	2247      	movs	r2, #71	; 0x47
   33022:	f005 fd76 	bl	38b12 <assert_print>
   33026:	4805      	ldr	r0, [pc, #20]	; (3303c <mpsl_low_prio_work_handler+0x30>)
   33028:	2147      	movs	r1, #71	; 0x47
   3302a:	f005 fd6b 	bl	38b04 <assert_post_action>
	mpsl_low_priority_process();
   3302e:	f7eb fb9f 	bl	1e770 <mpsl_low_priority_process>
}
   33032:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	MULTITHREADING_LOCK_RELEASE();
   33036:	f7fe bedb 	b.w	31df0 <multithreading_lock_release>
   3303a:	bf00      	nop
   3303c:	0003f98e 	.word	0x0003f98e
   33040:	0003d1d7 	.word	0x0003d1d7

00033044 <m_assert_handler>:
{
   33044:	b5b0      	push	{r4, r5, r7, lr}
   33046:	4603      	mov	r3, r0
	LOG_ERR("MPSL ASSERT: %s, %d", file, line);
   33048:	480f      	ldr	r0, [pc, #60]	; (33088 <m_assert_handler+0x44>)
   3304a:	6802      	ldr	r2, [r0, #0]
   3304c:	0752      	lsls	r2, r2, #29
{
   3304e:	af00      	add	r7, sp, #0
	LOG_ERR("MPSL ASSERT: %s, %d", file, line);
   33050:	d012      	beq.n	33078 <m_assert_handler+0x34>
   33052:	466c      	mov	r4, sp
   33054:	b08a      	sub	sp, #40	; 0x28
   33056:	466a      	mov	r2, sp
   33058:	4d0c      	ldr	r5, [pc, #48]	; (3308c <m_assert_handler+0x48>)
   3305a:	61d1      	str	r1, [r2, #28]
   3305c:	e9c2 5305 	strd	r5, r3, [r2, #20]
   33060:	f44f 7300 	mov.w	r3, #512	; 0x200
   33064:	8413      	strh	r3, [r2, #32]
   33066:	4b0a      	ldr	r3, [pc, #40]	; (33090 <m_assert_handler+0x4c>)
   33068:	f842 3f10 	str.w	r3, [r2, #16]!
   3306c:	2300      	movs	r3, #0
   3306e:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   33072:	f7f3 f89b 	bl	261ac <z_impl_z_log_msg_static_create>
   33076:	46a5      	mov	sp, r4
	k_oops();
   33078:	4040      	eors	r0, r0
   3307a:	f380 8811 	msr	BASEPRI, r0
   3307e:	f04f 0003 	mov.w	r0, #3
   33082:	df02      	svc	2
}
   33084:	46bd      	mov	sp, r7
   33086:	bdb0      	pop	{r4, r5, r7, pc}
   33088:	20000ae0 	.word	0x20000ae0
   3308c:	0003f9bb 	.word	0x0003f9bb
   33090:	01000004 	.word	0x01000004

00033094 <mpsl_low_prio_init>:

static int mpsl_low_prio_init(const struct device *dev)
{
   33094:	b537      	push	{r0, r1, r2, r4, r5, lr}
	ARG_UNUSED(dev);

	k_work_queue_start(&mpsl_work_q, mpsl_work_stack,
   33096:	4d0d      	ldr	r5, [pc, #52]	; (330cc <mpsl_low_prio_init+0x38>)
   33098:	490d      	ldr	r1, [pc, #52]	; (330d0 <mpsl_low_prio_init+0x3c>)
   3309a:	2400      	movs	r4, #0
   3309c:	9400      	str	r4, [sp, #0]
   3309e:	f06f 0309 	mvn.w	r3, #9
   330a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
   330a6:	4628      	mov	r0, r5
   330a8:	f002 ff12 	bl	35ed0 <k_work_queue_start>
	return z_impl_k_thread_name_set(thread, str);
   330ac:	4909      	ldr	r1, [pc, #36]	; (330d4 <mpsl_low_prio_init+0x40>)
   330ae:	4628      	mov	r0, r5
   330b0:	f008 fda7 	bl	3bc02 <z_impl_k_thread_name_set>
			   K_THREAD_STACK_SIZEOF(mpsl_work_stack),
			   K_PRIO_COOP(CONFIG_MPSL_THREAD_COOP_PRIO), NULL);
	k_thread_name_set(&mpsl_work_q.thread, "MPSL Work");
	k_work_init(&mpsl_low_prio_work, mpsl_low_prio_work_handler);
   330b4:	4908      	ldr	r1, [pc, #32]	; (330d8 <mpsl_low_prio_init+0x44>)
   330b6:	4809      	ldr	r0, [pc, #36]	; (330dc <mpsl_low_prio_init+0x48>)
   330b8:	f002 fe06 	bl	35cc8 <k_work_init>

	IRQ_CONNECT(MPSL_LOW_PRIO_IRQn, MPSL_LOW_PRIO,
   330bc:	4622      	mov	r2, r4
   330be:	2104      	movs	r1, #4
   330c0:	2019      	movs	r0, #25
   330c2:	f7f3 ff15 	bl	26ef0 <z_arm_irq_priority_set>
		    mpsl_low_prio_irq_handler, NULL, 0);

	return 0;
}
   330c6:	4620      	mov	r0, r4
   330c8:	b003      	add	sp, #12
   330ca:	bd30      	pop	{r4, r5, pc}
   330cc:	20002b30 	.word	0x20002b30
   330d0:	200068c0 	.word	0x200068c0
   330d4:	0003f9cf 	.word	0x0003f9cf
   330d8:	0003300d 	.word	0x0003300d
   330dc:	20003218 	.word	0x20003218

000330e0 <mpsl_hfclk_callback>:

static nrfx_clock_event_handler_t event_handler;

static void mpsl_hfclk_callback(void)
{
	event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   330e0:	4b01      	ldr	r3, [pc, #4]	; (330e8 <mpsl_hfclk_callback+0x8>)
   330e2:	2000      	movs	r0, #0
   330e4:	681b      	ldr	r3, [r3, #0]
   330e6:	4718      	bx	r3
   330e8:	20003228 	.word	0x20003228

000330ec <nrfx_clock_start>:
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
   330ec:	b510      	push	{r4, lr}
	switch (domain) {
   330ee:	b130      	cbz	r0, 330fe <nrfx_clock_start+0x12>
   330f0:	2801      	cmp	r0, #1
   330f2:	d10a      	bne.n	3310a <nrfx_clock_start+0x1e>
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
		break;
	default:
		__ASSERT(0, "Not supported");
	}
}
   330f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		mpsl_clock_hfclk_request(mpsl_hfclk_callback);
   330f8:	4808      	ldr	r0, [pc, #32]	; (3311c <nrfx_clock_start+0x30>)
   330fa:	f7dd bea3 	b.w	10e44 <mpsl_clock_hfclk_request>
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   330fe:	4b08      	ldr	r3, [pc, #32]	; (33120 <nrfx_clock_start+0x34>)
}
   33100:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   33104:	681b      	ldr	r3, [r3, #0]
   33106:	2001      	movs	r0, #1
   33108:	4718      	bx	r3
		__ASSERT(0, "Not supported");
   3310a:	4906      	ldr	r1, [pc, #24]	; (33124 <nrfx_clock_start+0x38>)
   3310c:	4806      	ldr	r0, [pc, #24]	; (33128 <nrfx_clock_start+0x3c>)
   3310e:	221c      	movs	r2, #28
   33110:	f005 fcff 	bl	38b12 <assert_print>
   33114:	4803      	ldr	r0, [pc, #12]	; (33124 <nrfx_clock_start+0x38>)
   33116:	211c      	movs	r1, #28
   33118:	f005 fcf4 	bl	38b04 <assert_post_action>
   3311c:	000330e1 	.word	0x000330e1
   33120:	20003228 	.word	0x20003228
   33124:	0003f9e3 	.word	0x0003f9e3
   33128:	0003d1d7 	.word	0x0003d1d7

0003312c <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
   3312c:	b508      	push	{r3, lr}
	switch (domain) {
   3312e:	b170      	cbz	r0, 3314e <nrfx_clock_stop+0x22>
   33130:	2801      	cmp	r0, #1
   33132:	d103      	bne.n	3313c <nrfx_clock_stop+0x10>
		/* empty */
		break;
	default:
		__ASSERT(0, "Not supported");
	}
}
   33134:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		mpsl_clock_hfclk_release();
   33138:	f7dd be76 	b.w	10e28 <mpsl_clock_hfclk_release>
		__ASSERT(0, "Not supported");
   3313c:	4904      	ldr	r1, [pc, #16]	; (33150 <nrfx_clock_stop+0x24>)
   3313e:	4805      	ldr	r0, [pc, #20]	; (33154 <nrfx_clock_stop+0x28>)
   33140:	222a      	movs	r2, #42	; 0x2a
   33142:	f005 fce6 	bl	38b12 <assert_print>
   33146:	4802      	ldr	r0, [pc, #8]	; (33150 <nrfx_clock_stop+0x24>)
   33148:	212a      	movs	r1, #42	; 0x2a
   3314a:	f005 fcdb 	bl	38b04 <assert_post_action>
}
   3314e:	bd08      	pop	{r3, pc}
   33150:	0003f9e3 	.word	0x0003f9e3
   33154:	0003d1d7 	.word	0x0003d1d7

00033158 <nrfx_clock_init>:

}

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t handler)
{
	event_handler = handler;
   33158:	4b01      	ldr	r3, [pc, #4]	; (33160 <nrfx_clock_init+0x8>)
   3315a:	6018      	str	r0, [r3, #0]

	return NRFX_SUCCESS;
}
   3315c:	4801      	ldr	r0, [pc, #4]	; (33164 <nrfx_clock_init+0xc>)
   3315e:	4770      	bx	lr
   33160:	20003228 	.word	0x20003228
   33164:	0bad0000 	.word	0x0bad0000

00033168 <timeslot_callback>:
		      "mpsl_timeslot_request failed: %d", ret);
}

static mpsl_timeslot_signal_return_param_t *
timeslot_callback(mpsl_timeslot_session_id_t session_id, uint32_t signal)
{
   33168:	b510      	push	{r4, lr}
	int rc;
	__ASSERT_NO_MSG(session_id == _context.session_id);
   3316a:	4c28      	ldr	r4, [pc, #160]	; (3320c <timeslot_callback+0xa4>)
   3316c:	7e23      	ldrb	r3, [r4, #24]
   3316e:	4283      	cmp	r3, r0
   33170:	d008      	beq.n	33184 <timeslot_callback+0x1c>
   33172:	4927      	ldr	r1, [pc, #156]	; (33210 <timeslot_callback+0xa8>)
   33174:	4827      	ldr	r0, [pc, #156]	; (33214 <timeslot_callback+0xac>)
   33176:	2250      	movs	r2, #80	; 0x50
   33178:	f005 fccb 	bl	38b12 <assert_print>
   3317c:	2150      	movs	r1, #80	; 0x50
	__ASSERT_EVAL((void)ret, (void)ret, ret == 0,
   3317e:	4824      	ldr	r0, [pc, #144]	; (33210 <timeslot_callback+0xa8>)
   33180:	f005 fcc0 	bl	38b04 <assert_post_action>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   33184:	f3bf 8f5b 	dmb	ish
   33188:	6c23      	ldr	r3, [r4, #64]	; 0x40
   3318a:	f3bf 8f5b 	dmb	ish

	if (atomic_get(&_context.timeout_occured)) {
   3318e:	bb13      	cbnz	r3, 331d6 <timeslot_callback+0x6e>
		return NULL;
	}

	switch (signal) {
   33190:	2909      	cmp	r1, #9
   33192:	d834      	bhi.n	331fe <timeslot_callback+0x96>
   33194:	e8df f001 	tbb	[pc, r1]
   33198:	33333305 	.word	0x33333305
   3319c:	1c212133 	.word	0x1c212133
   331a0:	1f33      	.short	0x1f33
	case MPSL_TIMESLOT_SIGNAL_START:
		rc = _context.op_desc->handler(_context.op_desc->context);
   331a2:	6a23      	ldr	r3, [r4, #32]
   331a4:	e9d3 2000 	ldrd	r2, r0, [r3]
   331a8:	4790      	blx	r2
		if (rc != FLASH_OP_ONGOING) {
   331aa:	2801      	cmp	r0, #1
   331ac:	d005      	beq.n	331ba <timeslot_callback+0x52>
			_context.status = (rc == FLASH_OP_DONE) ? 0 : rc;
			_context.return_param.callback_action =
   331ae:	2302      	movs	r3, #2
			_context.status = (rc == FLASH_OP_DONE) ? 0 : rc;
   331b0:	63e0      	str	r0, [r4, #60]	; 0x3c
			_context.return_param.callback_action =
   331b2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	default:
		__ASSERT(false, "unexpected signal: %u", signal);
		return NULL;
	}

	return &_context.return_param;
   331b6:	4818      	ldr	r0, [pc, #96]	; (33218 <timeslot_callback+0xb0>)
   331b8:	e00e      	b.n	331d8 <timeslot_callback+0x70>
			_context.timeslot_request.params.earliest.timeout_us =
   331ba:	f247 5330 	movw	r3, #30000	; 0x7530
   331be:	6323      	str	r3, [r4, #48]	; 0x30
			_context.return_param.callback_action =
   331c0:	2303      	movs	r3, #3
   331c2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
			_context.return_param.params.request.p_next =
   331c6:	4b15      	ldr	r3, [pc, #84]	; (3321c <timeslot_callback+0xb4>)
			_context.timeslot_request.params.earliest.priority =
   331c8:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
			_context.return_param.params.request.p_next =
   331cc:	63a3      	str	r3, [r4, #56]	; 0x38
   331ce:	e7f2      	b.n	331b6 <timeslot_callback+0x4e>
	z_impl_k_sem_give(sem);
   331d0:	480e      	ldr	r0, [pc, #56]	; (3320c <timeslot_callback+0xa4>)
   331d2:	f002 fae9 	bl	357a8 <z_impl_k_sem_give>
		return NULL;
   331d6:	2000      	movs	r0, #0
}
   331d8:	bd10      	pop	{r4, pc}
	_context.timeslot_request.params.earliest.priority =
   331da:	2300      	movs	r3, #0
   331dc:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	int32_t ret = mpsl_timeslot_request(_context.session_id,
   331e0:	490e      	ldr	r1, [pc, #56]	; (3321c <timeslot_callback+0xb4>)
	_context.timeslot_request.params.earliest.timeout_us =
   331e2:	4b0f      	ldr	r3, [pc, #60]	; (33220 <timeslot_callback+0xb8>)
	int32_t ret = mpsl_timeslot_request(_context.session_id,
   331e4:	7e20      	ldrb	r0, [r4, #24]
	_context.timeslot_request.params.earliest.timeout_us =
   331e6:	6323      	str	r3, [r4, #48]	; 0x30
	int32_t ret = mpsl_timeslot_request(_context.session_id,
   331e8:	f7eb f945 	bl	1e476 <mpsl_timeslot_request>
	__ASSERT_EVAL((void)ret, (void)ret, ret == 0,
   331ec:	2800      	cmp	r0, #0
   331ee:	d0f2      	beq.n	331d6 <timeslot_callback+0x6e>
   331f0:	4907      	ldr	r1, [pc, #28]	; (33210 <timeslot_callback+0xa8>)
   331f2:	4808      	ldr	r0, [pc, #32]	; (33214 <timeslot_callback+0xac>)
   331f4:	2248      	movs	r2, #72	; 0x48
   331f6:	f005 fc8c 	bl	38b12 <assert_print>
   331fa:	2148      	movs	r1, #72	; 0x48
   331fc:	e7bf      	b.n	3317e <timeslot_callback+0x16>
		__ASSERT(false, "unexpected signal: %u", signal);
   331fe:	4904      	ldr	r1, [pc, #16]	; (33210 <timeslot_callback+0xa8>)
   33200:	4804      	ldr	r0, [pc, #16]	; (33214 <timeslot_callback+0xac>)
   33202:	227c      	movs	r2, #124	; 0x7c
   33204:	f005 fc85 	bl	38b12 <assert_print>
   33208:	217c      	movs	r1, #124	; 0x7c
   3320a:	e7b8      	b.n	3317e <timeslot_callback+0x16>
   3320c:	2000322c 	.word	0x2000322c
   33210:	0003fa20 	.word	0x0003fa20
   33214:	0003d1d7 	.word	0x0003d1d7
   33218:	20003260 	.word	0x20003260
   3321c:	20003250 	.word	0x20003250
   33220:	0f423fff 	.word	0x0f423fff

00033224 <nrf_flash_sync_init>:
	return z_impl_k_sem_init(sem, initial_count, limit);
   33224:	4802      	ldr	r0, [pc, #8]	; (33230 <nrf_flash_sync_init+0xc>)
   33226:	2201      	movs	r2, #1
   33228:	2100      	movs	r1, #0
   3322a:	f008 bd2e 	b.w	3bc8a <z_impl_k_sem_init>
   3322e:	bf00      	nop
   33230:	2000322c 	.word	0x2000322c

00033234 <nrf_flash_sync_set_context>:
}

void nrf_flash_sync_set_context(uint32_t duration)
{
	LOG_DBG("duration: %u", duration);
	_context.request_length_us = duration;
   33234:	4b01      	ldr	r3, [pc, #4]	; (3323c <nrf_flash_sync_set_context+0x8>)
   33236:	61d8      	str	r0, [r3, #28]
}
   33238:	4770      	bx	lr
   3323a:	bf00      	nop
   3323c:	2000322c 	.word	0x2000322c

00033240 <nrf_flash_sync_exe>:
{
	return mpsl_is_initialized();
}

int nrf_flash_sync_exe(struct flash_op_desc *op_desc)
{
   33240:	b5f0      	push	{r4, r5, r6, r7, lr}
   33242:	b087      	sub	sp, #28
   33244:	4606      	mov	r6, r0
   33246:	af00      	add	r7, sp, #0
	LOG_DBG("");

	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   33248:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3324c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   33250:	f7fe fdc6 	bl	31de0 <multithreading_lock_acquire>
	__ASSERT_NO_MSG(errcode == 0);
   33254:	4605      	mov	r5, r0
   33256:	b140      	cbz	r0, 3326a <nrf_flash_sync_exe+0x2a>
   33258:	4956      	ldr	r1, [pc, #344]	; (333b4 <nrf_flash_sync_exe+0x174>)
   3325a:	4857      	ldr	r0, [pc, #348]	; (333b8 <nrf_flash_sync_exe+0x178>)
   3325c:	2299      	movs	r2, #153	; 0x99
   3325e:	f005 fc58 	bl	38b12 <assert_print>
   33262:	2199      	movs	r1, #153	; 0x99

	_context.op_desc = op_desc;
	_context.status = -ETIMEDOUT;
	atomic_clear(&_context.timeout_occured);

	__ASSERT_NO_MSG(k_sem_count_get(&_context.timeout_sem) == 0);
   33264:	4853      	ldr	r0, [pc, #332]	; (333b4 <nrf_flash_sync_exe+0x174>)
   33266:	f005 fc4d 	bl	38b04 <assert_post_action>
	int32_t ret = mpsl_timeslot_session_open(timeslot_callback,
   3326a:	4954      	ldr	r1, [pc, #336]	; (333bc <nrf_flash_sync_exe+0x17c>)
   3326c:	4854      	ldr	r0, [pc, #336]	; (333c0 <nrf_flash_sync_exe+0x180>)
   3326e:	f7da fbc7 	bl	da00 <mpsl_timeslot_session_open>
   33272:	4604      	mov	r4, r0
	MULTITHREADING_LOCK_RELEASE();
   33274:	f7fe fdbc 	bl	31df0 <multithreading_lock_release>
	if (ret < 0) {
   33278:	2c00      	cmp	r4, #0
   3327a:	da18      	bge.n	332ae <nrf_flash_sync_exe+0x6e>
		LOG_ERR("mpsl_timeslot_session_open failed: %d", ret);
   3327c:	4851      	ldr	r0, [pc, #324]	; (333c4 <nrf_flash_sync_exe+0x184>)
   3327e:	6803      	ldr	r3, [r0, #0]
   33280:	075a      	lsls	r2, r3, #29
   33282:	d104      	bne.n	3328e <nrf_flash_sync_exe+0x4e>
		return -ENOMEM;
   33284:	f06f 000b 	mvn.w	r0, #11
	if (atomic_get(&_context.timeout_occured)) {
		k_sem_reset(&_context.timeout_sem);
	}

	return _context.status;
}
   33288:	371c      	adds	r7, #28
   3328a:	46bd      	mov	sp, r7
   3328c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_ERR("mpsl_timeslot_session_open failed: %d", ret);
   3328e:	466e      	mov	r6, sp
   33290:	b088      	sub	sp, #32
   33292:	466a      	mov	r2, sp
   33294:	4b4c      	ldr	r3, [pc, #304]	; (333c8 <nrf_flash_sync_exe+0x188>)
   33296:	e9c2 3405 	strd	r3, r4, [r2, #20]
   3329a:	2303      	movs	r3, #3
   3329c:	f842 3f10 	str.w	r3, [r2, #16]!
   332a0:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   332a4:	462b      	mov	r3, r5
   332a6:	f7f2 ff81 	bl	261ac <z_impl_z_log_msg_static_create>
   332aa:	46b5      	mov	sp, r6
   332ac:	e7ea      	b.n	33284 <nrf_flash_sync_exe+0x44>
	req->request_type = MPSL_TIMESLOT_REQ_TYPE_EARLIEST;
   332ae:	4c47      	ldr	r4, [pc, #284]	; (333cc <nrf_flash_sync_exe+0x18c>)
	req->params.earliest.hfclk = MPSL_TIMESLOT_HFCLK_CFG_NO_GUARANTEE;
   332b0:	f240 1301 	movw	r3, #257	; 0x101
   332b4:	8523      	strh	r3, [r4, #40]	; 0x28
		_context.request_length_us + TIMESLOT_LENGTH_SLACK_US;
   332b6:	69e3      	ldr	r3, [r4, #28]
	req->request_type = MPSL_TIMESLOT_REQ_TYPE_EARLIEST;
   332b8:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
		_context.request_length_us + TIMESLOT_LENGTH_SLACK_US;
   332bc:	3364      	adds	r3, #100	; 0x64
	req->params.earliest.length_us =
   332be:	62e3      	str	r3, [r4, #44]	; 0x2c
	req->params.earliest.timeout_us = TIMESLOT_TIMEOUT_PRIORITY_NORMAL_US;
   332c0:	f247 5330 	movw	r3, #30000	; 0x7530
   332c4:	6323      	str	r3, [r4, #48]	; 0x30
	_context.status = -ETIMEDOUT;
   332c6:	f06f 0373 	mvn.w	r3, #115	; 0x73
	_context.op_desc = op_desc;
   332ca:	6226      	str	r6, [r4, #32]
	_context.status = -ETIMEDOUT;
   332cc:	63e3      	str	r3, [r4, #60]	; 0x3c
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   332ce:	f104 0240 	add.w	r2, r4, #64	; 0x40
   332d2:	f3bf 8f5b 	dmb	ish
   332d6:	e852 3f00 	ldrex	r3, [r2]
   332da:	e842 5100 	strex	r1, r5, [r2]
   332de:	2900      	cmp	r1, #0
   332e0:	d1f9      	bne.n	332d6 <nrf_flash_sync_exe+0x96>
   332e2:	f3bf 8f5b 	dmb	ish
	__ASSERT_NO_MSG(k_sem_count_get(&_context.timeout_sem) == 0);
   332e6:	68a3      	ldr	r3, [r4, #8]
   332e8:	4616      	mov	r6, r2
   332ea:	b133      	cbz	r3, 332fa <nrf_flash_sync_exe+0xba>
   332ec:	4931      	ldr	r1, [pc, #196]	; (333b4 <nrf_flash_sync_exe+0x174>)
   332ee:	4832      	ldr	r0, [pc, #200]	; (333b8 <nrf_flash_sync_exe+0x178>)
   332f0:	22af      	movs	r2, #175	; 0xaf
   332f2:	f005 fc0e 	bl	38b12 <assert_print>
   332f6:	21af      	movs	r1, #175	; 0xaf
   332f8:	e7b4      	b.n	33264 <nrf_flash_sync_exe+0x24>
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   332fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   332fe:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   33302:	f7fe fd6d 	bl	31de0 <multithreading_lock_acquire>
	__ASSERT_NO_MSG(errcode == 0);
   33306:	b130      	cbz	r0, 33316 <nrf_flash_sync_exe+0xd6>
   33308:	492a      	ldr	r1, [pc, #168]	; (333b4 <nrf_flash_sync_exe+0x174>)
   3330a:	482b      	ldr	r0, [pc, #172]	; (333b8 <nrf_flash_sync_exe+0x178>)
   3330c:	22b2      	movs	r2, #178	; 0xb2
   3330e:	f005 fc00 	bl	38b12 <assert_print>
   33312:	21b2      	movs	r1, #178	; 0xb2
   33314:	e7a6      	b.n	33264 <nrf_flash_sync_exe+0x24>
	ret = mpsl_timeslot_request(_context.session_id, req);
   33316:	7e20      	ldrb	r0, [r4, #24]
   33318:	f104 0124 	add.w	r1, r4, #36	; 0x24
   3331c:	f7eb f8ab 	bl	1e476 <mpsl_timeslot_request>
	__ASSERT_EVAL((void)ret, (void)ret, ret == 0,
   33320:	4605      	mov	r5, r0
   33322:	b130      	cbz	r0, 33332 <nrf_flash_sync_exe+0xf2>
   33324:	4923      	ldr	r1, [pc, #140]	; (333b4 <nrf_flash_sync_exe+0x174>)
   33326:	4824      	ldr	r0, [pc, #144]	; (333b8 <nrf_flash_sync_exe+0x178>)
   33328:	22b4      	movs	r2, #180	; 0xb4
   3332a:	f005 fbf2 	bl	38b12 <assert_print>
   3332e:	21b4      	movs	r1, #180	; 0xb4
   33330:	e798      	b.n	33264 <nrf_flash_sync_exe+0x24>
	MULTITHREADING_LOCK_RELEASE();
   33332:	f7fe fd5d 	bl	31df0 <multithreading_lock_release>
	return z_impl_k_sem_take(sem, timeout);
   33336:	4a26      	ldr	r2, [pc, #152]	; (333d0 <nrf_flash_sync_exe+0x190>)
   33338:	2300      	movs	r3, #0
   3333a:	4620      	mov	r0, r4
   3333c:	f002 fa6e 	bl	3581c <z_impl_k_sem_take>
	if (k_sem_take(&_context.timeout_sem, K_MSEC(FLASH_TIMEOUT_MS)) < 0) {
   33340:	2800      	cmp	r0, #0
   33342:	da19      	bge.n	33378 <nrf_flash_sync_exe+0x138>
		LOG_ERR("timeout");
   33344:	481f      	ldr	r0, [pc, #124]	; (333c4 <nrf_flash_sync_exe+0x184>)
   33346:	6803      	ldr	r3, [r0, #0]
   33348:	075b      	lsls	r3, r3, #29
   3334a:	d00a      	beq.n	33362 <nrf_flash_sync_exe+0x122>
   3334c:	4b21      	ldr	r3, [pc, #132]	; (333d4 <nrf_flash_sync_exe+0x194>)
   3334e:	617b      	str	r3, [r7, #20]
   33350:	2302      	movs	r3, #2
   33352:	613b      	str	r3, [r7, #16]
   33354:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   33358:	462b      	mov	r3, r5
   3335a:	f107 0210 	add.w	r2, r7, #16
   3335e:	f7f2 ff25 	bl	261ac <z_impl_z_log_msg_static_create>
   33362:	f3bf 8f5b 	dmb	ish
   33366:	2301      	movs	r3, #1
   33368:	e856 2f00 	ldrex	r2, [r6]
   3336c:	e846 3100 	strex	r1, r3, [r6]
   33370:	2900      	cmp	r1, #0
   33372:	d1f9      	bne.n	33368 <nrf_flash_sync_exe+0x128>
   33374:	f3bf 8f5b 	dmb	ish
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   33378:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3337c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   33380:	f7fe fd2e 	bl	31de0 <multithreading_lock_acquire>
	__ASSERT_NO_MSG(errcode == 0);
   33384:	b130      	cbz	r0, 33394 <nrf_flash_sync_exe+0x154>
   33386:	490b      	ldr	r1, [pc, #44]	; (333b4 <nrf_flash_sync_exe+0x174>)
   33388:	480b      	ldr	r0, [pc, #44]	; (333b8 <nrf_flash_sync_exe+0x178>)
   3338a:	22bf      	movs	r2, #191	; 0xbf
   3338c:	f005 fbc1 	bl	38b12 <assert_print>
   33390:	21bf      	movs	r1, #191	; 0xbf
   33392:	e767      	b.n	33264 <nrf_flash_sync_exe+0x24>
	mpsl_timeslot_session_close(_context.session_id);
   33394:	7e20      	ldrb	r0, [r4, #24]
   33396:	f7eb f8a9 	bl	1e4ec <mpsl_timeslot_session_close>
	MULTITHREADING_LOCK_RELEASE();
   3339a:	f7fe fd29 	bl	31df0 <multithreading_lock_release>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   3339e:	f3bf 8f5b 	dmb	ish
   333a2:	6c23      	ldr	r3, [r4, #64]	; 0x40
   333a4:	f3bf 8f5b 	dmb	ish
	if (atomic_get(&_context.timeout_occured)) {
   333a8:	b113      	cbz	r3, 333b0 <nrf_flash_sync_exe+0x170>
	z_impl_k_sem_reset(sem);
   333aa:	4808      	ldr	r0, [pc, #32]	; (333cc <nrf_flash_sync_exe+0x18c>)
   333ac:	f002 fa96 	bl	358dc <z_impl_k_sem_reset>
	return _context.status;
   333b0:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   333b2:	e769      	b.n	33288 <nrf_flash_sync_exe+0x48>
   333b4:	0003fa20 	.word	0x0003fa20
   333b8:	0003d1d7 	.word	0x0003d1d7
   333bc:	20003244 	.word	0x20003244
   333c0:	00033169 	.word	0x00033169
   333c4:	20000ab4 	.word	0x20000ab4
   333c8:	0003fa5a 	.word	0x0003fa5a
   333cc:	2000322c 	.word	0x2000322c
   333d0:	000b7b44 	.word	0x000b7b44
   333d4:	0003e475 	.word	0x0003e475

000333d8 <nrf_flash_sync_check_time_limit>:
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_timer_task_trigger(NRF_TIMER_Type * p_reg,
                                              nrf_timer_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   333d8:	4b07      	ldr	r3, [pc, #28]	; (333f8 <nrf_flash_sync_check_time_limit+0x20>)
   333da:	2201      	movs	r2, #1
   333dc:	641a      	str	r2, [r3, #64]	; 0x40
}

NRF_STATIC_INLINE uint32_t nrf_timer_cc_get(NRF_TIMER_Type const * p_reg,
                                            nrf_timer_cc_channel_t cc_channel)
{
    return (uint32_t)p_reg->CC[cc_channel];
   333de:	f8d3 3540 	ldr.w	r3, [r3, #1344]	; 0x540
}

bool nrf_flash_sync_check_time_limit(uint32_t iteration)
{
	uint32_t now_us = get_timeslot_time_us();
	uint32_t time_per_iteration_us = now_us / iteration;
   333e2:	fbb3 f0f0 	udiv	r0, r3, r0
	return now_us + time_per_iteration_us >= _context.request_length_us;
   333e6:	4418      	add	r0, r3
   333e8:	4b04      	ldr	r3, [pc, #16]	; (333fc <nrf_flash_sync_check_time_limit+0x24>)
   333ea:	69db      	ldr	r3, [r3, #28]
}
   333ec:	4298      	cmp	r0, r3
   333ee:	bf34      	ite	cc
   333f0:	2000      	movcc	r0, #0
   333f2:	2001      	movcs	r0, #1
   333f4:	4770      	bx	lr
   333f6:	bf00      	nop
   333f8:	40008000 	.word	0x40008000
   333fc:	2000322c 	.word	0x2000322c

00033400 <temp_nrf5_mpsl_channel_get>:
}

static int temp_nrf5_mpsl_channel_get(const struct device *dev,
				      enum sensor_channel chan,
				      struct sensor_value *val)
{
   33400:	b510      	push	{r4, lr}
	int32_t uval;
	uint32_t uval_abs;
	uint32_t val1_abs;
	uint32_t val2_abs;

	if (chan != SENSOR_CHAN_DIE_TEMP) {
   33402:	290c      	cmp	r1, #12
	struct temp_nrf5_mpsl_data *data = dev->data;
   33404:	6903      	ldr	r3, [r0, #16]
	if (chan != SENSOR_CHAN_DIE_TEMP) {
   33406:	d112      	bne.n	3342e <temp_nrf5_mpsl_channel_get+0x2e>
		return -ENOTSUP;
	}

	uval = data->sample;
   33408:	6818      	ldr	r0, [r3, #0]
	uval_abs = (uval < 0) ? (-uval) : uval;

	val1_abs = uval_abs / TEMP_NRF5_MPSL_INC_PER_DEGREE_C;
	val2_abs = (uval_abs & TEMP_NRF5_MPSL_FRACTIONAL_INC_MSK) *
   3340a:	4c0a      	ldr	r4, [pc, #40]	; (33434 <temp_nrf5_mpsl_channel_get+0x34>)
	uval_abs = (uval < 0) ? (-uval) : uval;
   3340c:	ea80 73e0 	eor.w	r3, r0, r0, asr #31
   33410:	eba3 73e0 	sub.w	r3, r3, r0, asr #31
	val1_abs = uval_abs / TEMP_NRF5_MPSL_INC_PER_DEGREE_C;
   33414:	0899      	lsrs	r1, r3, #2
	val2_abs = (uval_abs & TEMP_NRF5_MPSL_FRACTIONAL_INC_MSK) *
   33416:	f003 0303 	and.w	r3, r3, #3
		   TEMP_NRF5_MPSL_MILLIDEGREE_C_PER_INC;

	if (uval < 0) {
   3341a:	2800      	cmp	r0, #0
	val2_abs = (uval_abs & TEMP_NRF5_MPSL_FRACTIONAL_INC_MSK) *
   3341c:	fb04 f303 	mul.w	r3, r4, r3
		val->val1 = -(int32_t)val1_abs;
   33420:	bfbc      	itt	lt
   33422:	4249      	neglt	r1, r1
		val->val2 = -(int32_t)val2_abs;
   33424:	425b      	neglt	r3, r3
	} else {
		val->val1 = (int32_t)val1_abs;
		val->val2 = (int32_t)val2_abs;
   33426:	e9c2 1300 	strd	r1, r3, [r2]
	}

	LOG_DBG("Temperature:%d,%d", val->val1, val->val2);

	return 0;
   3342a:	2000      	movs	r0, #0
}
   3342c:	bd10      	pop	{r4, pc}
		return -ENOTSUP;
   3342e:	f06f 0085 	mvn.w	r0, #133	; 0x85
   33432:	e7fb      	b.n	3342c <temp_nrf5_mpsl_channel_get+0x2c>
   33434:	0003d090 	.word	0x0003d090

00033438 <nrf52_errata_16>:
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   33438:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
   3343c:	f893 2fe0 	ldrb.w	r2, [r3, #4064]	; 0xfe0
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   33440:	2a06      	cmp	r2, #6
   33442:	d109      	bne.n	33458 <nrf52_errata_16+0x20>
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   33444:	f8d3 3fe8 	ldr.w	r3, [r3, #4072]	; 0xfe8
   33448:	f3c3 1303 	ubfx	r3, r3, #4, #4
   3344c:	3b03      	subs	r3, #3
   3344e:	2b04      	cmp	r3, #4
   33450:	d802      	bhi.n	33458 <nrf52_errata_16+0x20>
   33452:	4a02      	ldr	r2, [pc, #8]	; (3345c <nrf52_errata_16+0x24>)
   33454:	5cd0      	ldrb	r0, [r2, r3]
   33456:	4770      	bx	lr
                switch(var2)
                {
                    case 0x03ul:
                        return true;
                    case 0x04ul:
                        return false;
   33458:	2000      	movs	r0, #0
                }
            }
        #endif
        return false;
    #endif
}
   3345a:	4770      	bx	lr
   3345c:	0003fac9 	.word	0x0003fac9

00033460 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   33460:	4a02      	ldr	r2, [pc, #8]	; (3346c <nvmc_wait+0xc>)
   33462:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
   33466:	2b00      	cmp	r3, #0
   33468:	d0fb      	beq.n	33462 <nvmc_wait+0x2>
}
   3346a:	4770      	bx	lr
   3346c:	4001e000 	.word	0x4001e000

00033470 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
   33470:	b510      	push	{r4, lr}
    #endif

    #if NRF52_ERRATA_12_ENABLE_WORKAROUND
        /* Workaround for Errata 12 "COMP: Reference ladder not correctly calibrated" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_12()){
   33472:	f008 f9e7 	bl	3b844 <nrf52_errata_108>
   33476:	b140      	cbz	r0, 3348a <SystemInit+0x1a>
            *(volatile uint32_t *)0x40013540 = (*(uint32_t *)0x10000324 & 0x00001F00) >> 8;
   33478:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   3347c:	4a90      	ldr	r2, [pc, #576]	; (336c0 <SystemInit+0x250>)
   3347e:	f8d3 3324 	ldr.w	r3, [r3, #804]	; 0x324
   33482:	f3c3 2304 	ubfx	r3, r3, #8, #5
   33486:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
    #endif

    #if NRF52_ERRATA_16_ENABLE_WORKAROUND
        /* Workaround for Errata 16 "System: RAM may be corrupt on wakeup from CPU IDLE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_16()){
   3348a:	f7ff ffd5 	bl	33438 <nrf52_errata_16>
   3348e:	b110      	cbz	r0, 33496 <SystemInit+0x26>
            *(volatile uint32_t *)0x4007C074 = 3131961357ul;
   33490:	4b8c      	ldr	r3, [pc, #560]	; (336c4 <SystemInit+0x254>)
   33492:	4a8d      	ldr	r2, [pc, #564]	; (336c8 <SystemInit+0x258>)
   33494:	675a      	str	r2, [r3, #116]	; 0x74
    #endif

    #if NRF52_ERRATA_31_ENABLE_WORKAROUND
        /* Workaround for Errata 31 "CLOCK: Calibration values are not correctly loaded from FICR at reset" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_31()){
   33496:	f008 f9d5 	bl	3b844 <nrf52_errata_108>
   3349a:	b148      	cbz	r0, 334b0 <SystemInit+0x40>
            *(volatile uint32_t *)0x4000053C = ((*(volatile uint32_t *)0x10000244) & 0x0000E000) >> 13;
   3349c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   334a0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   334a4:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
   334a8:	f3c3 3342 	ubfx	r3, r3, #13, #3
   334ac:	f8c2 353c 	str.w	r3, [r2, #1340]	; 0x53c
    #endif

    #if NRF52_ERRATA_32_ENABLE_WORKAROUND
        /* Workaround for Errata 32 "DIF: Debug session automatically enables TracePort pins" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_32()){
   334b0:	f7ff ffc2 	bl	33438 <nrf52_errata_16>
   334b4:	b130      	cbz	r0, 334c4 <SystemInit+0x54>
            CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
   334b6:	4a85      	ldr	r2, [pc, #532]	; (336cc <SystemInit+0x25c>)
   334b8:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
   334bc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   334c0:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
   334c4:	f008 f9be 	bl	3b844 <nrf52_errata_108>
   334c8:	b140      	cbz	r0, 334dc <SystemInit+0x6c>
            NRF_CLOCK->EVENTS_DONE = 0;
   334ca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   334ce:	2200      	movs	r2, #0
   334d0:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
   334d4:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
   334d8:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_37_ENABLE_WORKAROUND
        /* Workaround for Errata 37 "RADIO: Encryption engine is slow by default" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_37()){
   334dc:	f7ff ffac 	bl	33438 <nrf52_errata_16>
   334e0:	b120      	cbz	r0, 334ec <SystemInit+0x7c>
            *(volatile uint32_t *)0x400005A0 = 0x3;
   334e2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   334e6:	2203      	movs	r2, #3
   334e8:	f8c3 25a0 	str.w	r2, [r3, #1440]	; 0x5a0
    #endif

    #if NRF52_ERRATA_57_ENABLE_WORKAROUND
        /* Workaround for Errata 57 "NFCT: NFC Modulation amplitude" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_57()){
   334ec:	f7ff ffa4 	bl	33438 <nrf52_errata_16>
   334f0:	b160      	cbz	r0, 3350c <SystemInit+0x9c>
            *(volatile uint32_t *)0x40005610 = 0x00000005;
   334f2:	4b77      	ldr	r3, [pc, #476]	; (336d0 <SystemInit+0x260>)
   334f4:	2205      	movs	r2, #5
   334f6:	f8c3 2610 	str.w	r2, [r3, #1552]	; 0x610
            *(volatile uint32_t *)0x40005688 = 0x00000001;
   334fa:	2201      	movs	r2, #1
   334fc:	f8c3 2688 	str.w	r2, [r3, #1672]	; 0x688
            *(volatile uint32_t *)0x40005618 = 0x00000000;
   33500:	2200      	movs	r2, #0
   33502:	f8c3 2618 	str.w	r2, [r3, #1560]	; 0x618
            *(volatile uint32_t *)0x40005614 = 0x0000003F;
   33506:	223f      	movs	r2, #63	; 0x3f
   33508:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
   3350c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   33510:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   33514:	1c51      	adds	r1, r2, #1
            {
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   33516:	bf09      	itett	eq
   33518:	f04f 4370 	moveq.w	r3, #4026531840	; 0xf0000000
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
            }
            else
            {
                var1 = *(uint32_t *)0x10000130ul;
                var2 = *(uint32_t *)0x10000134ul;
   3351c:	f8d3 3134 	ldrne.w	r3, [r3, #308]	; 0x134
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   33520:	f893 2fe0 	ldrbeq.w	r2, [r3, #4064]	; 0xfe0
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   33524:	f8d3 3fe8 	ldreq.w	r3, [r3, #4072]	; 0xfe8
   33528:	bf08      	it	eq
   3352a:	f3c3 1303 	ubfxeq	r3, r3, #4, #4
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   3352e:	2a06      	cmp	r2, #6
   33530:	d14d      	bne.n	335ce <SystemInit+0x15e>
            {
                switch(var2)
   33532:	3b03      	subs	r3, #3
   33534:	2b04      	cmp	r3, #4
   33536:	d803      	bhi.n	33540 <SystemInit+0xd0>
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
   33538:	4a66      	ldr	r2, [pc, #408]	; (336d4 <SystemInit+0x264>)
   3353a:	5cd3      	ldrb	r3, [r2, r3]
   3353c:	2b00      	cmp	r3, #0
   3353e:	d046      	beq.n	335ce <SystemInit+0x15e>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
   33540:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   33544:	4b64      	ldr	r3, [pc, #400]	; (336d8 <SystemInit+0x268>)
   33546:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
   3354a:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
   3354e:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
   33552:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
   33556:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
   3355a:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
   3355e:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
   33562:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
   33566:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
   3356a:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
   3356e:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
   33572:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
   33576:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
   3357a:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
   3357e:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
   33582:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
   33586:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
   3358a:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
   3358e:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
   33592:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
   33596:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
   3359a:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
   3359e:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
   335a2:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
   335a6:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
   335aa:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
   335ae:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
   335b2:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
   335b6:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
   335ba:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
   335be:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
   335c2:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
   335c6:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
   335ca:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_108_ENABLE_WORKAROUND
        /* Workaround for Errata 108 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_108()){
   335ce:	f008 f939 	bl	3b844 <nrf52_errata_108>
   335d2:	b148      	cbz	r0, 335e8 <SystemInit+0x178>
            *(volatile uint32_t *)0x40000EE4ul = *(volatile uint32_t *)0x10000258ul & 0x0000004Ful;
   335d4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   335d8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   335dc:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
   335e0:	f003 034f 	and.w	r3, r3, #79	; 0x4f
   335e4:	f8c2 3ee4 	str.w	r3, [r2, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
   335e8:	f008 f92c 	bl	3b844 <nrf52_errata_108>
   335ec:	b148      	cbz	r0, 33602 <SystemInit+0x192>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
   335ee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   335f2:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   335f6:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
   335f8:	bf44      	itt	mi
   335fa:	f06f 0201 	mvnmi.w	r2, #1
   335fe:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   33602:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   33606:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   3360a:	2a06      	cmp	r2, #6
   3360c:	d126      	bne.n	3365c <SystemInit+0x1ec>
            {
                switch(var2)
   3360e:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
   33612:	3b03      	subs	r3, #3
   33614:	2b04      	cmp	r3, #4
   33616:	d802      	bhi.n	3361e <SystemInit+0x1ae>
    #endif

    #if NRF52_ERRATA_182_ENABLE_WORKAROUND
        /* Workaround for Errata 182 "RADIO: Fixes for anomalies #102, #106, and #107 do not take effect" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_182()){
   33618:	4a30      	ldr	r2, [pc, #192]	; (336dc <SystemInit+0x26c>)
   3361a:	5cd3      	ldrb	r3, [r2, r3]
   3361c:	b163      	cbz	r3, 33638 <SystemInit+0x1c8>
            *(volatile uint32_t *) 0x4000173C |= (0x1 << 10);
   3361e:	4a30      	ldr	r2, [pc, #192]	; (336e0 <SystemInit+0x270>)
   33620:	f8d2 373c 	ldr.w	r3, [r2, #1852]	; 0x73c
   33624:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   33628:	f8c2 373c 	str.w	r3, [r2, #1852]	; 0x73c
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   3362c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   33630:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   33634:	2b06      	cmp	r3, #6
   33636:	d111      	bne.n	3365c <SystemInit+0x1ec>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   33638:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   3363c:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
   33640:	3b03      	subs	r3, #3
   33642:	2b04      	cmp	r3, #4
   33644:	d802      	bhi.n	3364c <SystemInit+0x1dc>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
   33646:	4a27      	ldr	r2, [pc, #156]	; (336e4 <SystemInit+0x274>)
   33648:	5cd3      	ldrb	r3, [r2, r3]
   3364a:	b13b      	cbz	r3, 3365c <SystemInit+0x1ec>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
   3364c:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   33650:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
   33654:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   33658:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   3365c:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   33660:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   33664:	2a00      	cmp	r2, #0
   33666:	db03      	blt.n	33670 <SystemInit+0x200>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
   33668:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   3366c:	2b00      	cmp	r3, #0
   3366e:	da22      	bge.n	336b6 <SystemInit+0x246>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   33670:	491d      	ldr	r1, [pc, #116]	; (336e8 <SystemInit+0x278>)
   33672:	2301      	movs	r3, #1
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   33674:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   33678:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   3367c:	2415      	movs	r4, #21
    nvmc_wait();
   3367e:	f7ff feef 	bl	33460 <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   33682:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
   33686:	f7ff feeb 	bl	33460 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
   3368a:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
   3368e:	f7ff fee7 	bl	33460 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   33692:	2300      	movs	r3, #0
   33694:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
   33698:	f7ff fee2 	bl	33460 <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
   3369c:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   336a0:	490a      	ldr	r1, [pc, #40]	; (336cc <SystemInit+0x25c>)
   336a2:	4b12      	ldr	r3, [pc, #72]	; (336ec <SystemInit+0x27c>)
   336a4:	68ca      	ldr	r2, [r1, #12]
   336a6:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   336aa:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   336ac:	60cb      	str	r3, [r1, #12]
   336ae:	f3bf 8f4f 	dsb	sy
    __NOP();
   336b2:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   336b4:	e7fd      	b.n	336b2 <SystemInit+0x242>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
   336b6:	4b0e      	ldr	r3, [pc, #56]	; (336f0 <SystemInit+0x280>)
   336b8:	4a0e      	ldr	r2, [pc, #56]	; (336f4 <SystemInit+0x284>)
   336ba:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
   336bc:	bd10      	pop	{r4, pc}
   336be:	bf00      	nop
   336c0:	40013000 	.word	0x40013000
   336c4:	4007c000 	.word	0x4007c000
   336c8:	baadf00d 	.word	0xbaadf00d
   336cc:	e000ed00 	.word	0xe000ed00
   336d0:	40005000 	.word	0x40005000
   336d4:	0003fac4 	.word	0x0003fac4
   336d8:	4000c000 	.word	0x4000c000
   336dc:	0003fabf 	.word	0x0003fabf
   336e0:	40001000 	.word	0x40001000
   336e4:	0003faba 	.word	0x0003faba
   336e8:	4001e000 	.word	0x4001e000
   336ec:	05fa0004 	.word	0x05fa0004
   336f0:	20000890 	.word	0x20000890
   336f4:	03d09000 	.word	0x03d09000

000336f8 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
   336f8:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
   336fa:	2501      	movs	r5, #1
        prev_mask = *p_mask;
   336fc:	6802      	ldr	r2, [r0, #0]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   336fe:	f3bf 8f5b 	dmb	ish
        idx = 31 - NRF_CLZ(prev_mask);
   33702:	fab2 f382 	clz	r3, r2
   33706:	f1c3 031f 	rsb	r3, r3, #31
   3370a:	b2db      	uxtb	r3, r3
        new_mask = prev_mask & ~NRFX_BIT(idx);
   3370c:	fa05 f403 	lsl.w	r4, r5, r3
   33710:	ea22 0404 	bic.w	r4, r2, r4
   33714:	e850 6f00 	ldrex	r6, [r0]
   33718:	4296      	cmp	r6, r2
   3371a:	d104      	bne.n	33726 <nrfx_flag32_alloc+0x2e>
   3371c:	e840 4c00 	strex	ip, r4, [r0]
   33720:	f1bc 0f00 	cmp.w	ip, #0
   33724:	d1f6      	bne.n	33714 <nrfx_flag32_alloc+0x1c>
   33726:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   3372a:	d1e7      	bne.n	336fc <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
}
   3372c:	4801      	ldr	r0, [pc, #4]	; (33734 <nrfx_flag32_alloc+0x3c>)
    *p_flag = idx;
   3372e:	700b      	strb	r3, [r1, #0]
}
   33730:	bd70      	pop	{r4, r5, r6, pc}
   33732:	bf00      	nop
   33734:	0bad0000 	.word	0x0bad0000

00033738 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
   33738:	b510      	push	{r4, lr}
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
   3373a:	6803      	ldr	r3, [r0, #0]
   3373c:	40cb      	lsrs	r3, r1
   3373e:	07db      	lsls	r3, r3, #31
   33740:	d414      	bmi.n	3376c <nrfx_flag32_free+0x34>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
   33742:	2301      	movs	r3, #1
   33744:	408b      	lsls	r3, r1
        prev_mask = *p_mask;
   33746:	6802      	ldr	r2, [r0, #0]
   33748:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
   3374c:	ea43 0102 	orr.w	r1, r3, r2
   33750:	e850 4f00 	ldrex	r4, [r0]
   33754:	4294      	cmp	r4, r2
   33756:	d104      	bne.n	33762 <nrfx_flag32_free+0x2a>
   33758:	e840 1c00 	strex	ip, r1, [r0]
   3375c:	f1bc 0f00 	cmp.w	ip, #0
   33760:	d1f6      	bne.n	33750 <nrfx_flag32_free+0x18>
   33762:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   33766:	d1ee      	bne.n	33746 <nrfx_flag32_free+0xe>

    return NRFX_SUCCESS;
   33768:	4801      	ldr	r0, [pc, #4]	; (33770 <nrfx_flag32_free+0x38>)
}
   3376a:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   3376c:	4801      	ldr	r0, [pc, #4]	; (33774 <nrfx_flag32_free+0x3c>)
   3376e:	e7fc      	b.n	3376a <nrfx_flag32_free+0x32>
   33770:	0bad0000 	.word	0x0bad0000
   33774:	0bad0004 	.word	0x0bad0004

00033778 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   33778:	4b03      	ldr	r3, [pc, #12]	; (33788 <pin_in_use_by_te+0x10>)
   3377a:	3008      	adds	r0, #8
   3377c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   33780:	f3c0 1040 	ubfx	r0, r0, #5, #1
   33784:	4770      	bx	lr
   33786:	bf00      	nop
   33788:	20000894 	.word	0x20000894

0003378c <pin_has_trigger>:
 *
 * @return True if pin has trigger.
 */
static bool pin_has_trigger(uint32_t pin)
{
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
   3378c:	4b04      	ldr	r3, [pc, #16]	; (337a0 <pin_has_trigger+0x14>)
   3378e:	3008      	adds	r0, #8
   33790:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   33794:	f010 001c 	ands.w	r0, r0, #28
   33798:	bf18      	it	ne
   3379a:	2001      	movne	r0, #1
   3379c:	4770      	bx	lr
   3379e:	bf00      	nop
   337a0:	20000894 	.word	0x20000894

000337a4 <pin_is_output>:
 *
 * @return True if pin is output.
 */
static bool pin_is_output(uint32_t pin)
{
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   337a4:	4b03      	ldr	r3, [pc, #12]	; (337b4 <pin_is_output+0x10>)
   337a6:	3008      	adds	r0, #8
   337a8:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   337ac:	f3c0 0040 	ubfx	r0, r0, #1, #1
   337b0:	4770      	bx	lr
   337b2:	bf00      	nop
   337b4:	20000894 	.word	0x20000894

000337b8 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
   337b8:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   337ba:	f100 0308 	add.w	r3, r0, #8
   337be:	4c0c      	ldr	r4, [pc, #48]	; (337f0 <call_handler+0x38>)
   337c0:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
   337c4:	05da      	lsls	r2, r3, #23
{
   337c6:	4605      	mov	r5, r0
   337c8:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   337ca:	d507      	bpl.n	337dc <call_handler+0x24>
   337cc:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
   337d0:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
   337d4:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
   337d8:	6852      	ldr	r2, [r2, #4]
   337da:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
   337dc:	68a3      	ldr	r3, [r4, #8]
   337de:	b12b      	cbz	r3, 337ec <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   337e0:	68e2      	ldr	r2, [r4, #12]
   337e2:	4631      	mov	r1, r6
   337e4:	4628      	mov	r0, r5
    }
}
   337e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   337ea:	4718      	bx	r3
}
   337ec:	bd70      	pop	{r4, r5, r6, pc}
   337ee:	bf00      	nop
   337f0:	20000894 	.word	0x20000894

000337f4 <release_handler>:
{
   337f4:	b510      	push	{r4, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   337f6:	4a18      	ldr	r2, [pc, #96]	; (33858 <release_handler+0x64>)
   337f8:	3008      	adds	r0, #8
   337fa:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
   337fe:	05d9      	lsls	r1, r3, #23
   33800:	d51d      	bpl.n	3383e <release_handler+0x4a>
   33802:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
   33806:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   3380a:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   3380e:	f102 040e 	add.w	r4, r2, #14
   33812:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   33814:	f834 3f02 	ldrh.w	r3, [r4, #2]!
   33818:	f413 7f80 	tst.w	r3, #256	; 0x100
   3381c:	d003      	beq.n	33826 <release_handler+0x32>
   3381e:	f3c3 2343 	ubfx	r3, r3, #9, #4
   33822:	4299      	cmp	r1, r3
   33824:	d00b      	beq.n	3383e <release_handler+0x4a>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   33826:	3001      	adds	r0, #1
   33828:	2820      	cmp	r0, #32
   3382a:	d1f3      	bne.n	33814 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
   3382c:	2300      	movs	r3, #0
   3382e:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   33832:	480a      	ldr	r0, [pc, #40]	; (3385c <release_handler+0x68>)
   33834:	f7ff ff80 	bl	33738 <nrfx_flag32_free>
        NRFX_ASSERT(err == NRFX_SUCCESS);
   33838:	4b09      	ldr	r3, [pc, #36]	; (33860 <release_handler+0x6c>)
   3383a:	4298      	cmp	r0, r3
   3383c:	d100      	bne.n	33840 <release_handler+0x4c>
}
   3383e:	bd10      	pop	{r4, pc}
        NRFX_ASSERT(err == NRFX_SUCCESS);
   33840:	4908      	ldr	r1, [pc, #32]	; (33864 <release_handler+0x70>)
   33842:	4809      	ldr	r0, [pc, #36]	; (33868 <release_handler+0x74>)
   33844:	f44f 7299 	mov.w	r2, #306	; 0x132
   33848:	f005 f963 	bl	38b12 <assert_print>
   3384c:	4805      	ldr	r0, [pc, #20]	; (33864 <release_handler+0x70>)
   3384e:	f44f 7199 	mov.w	r1, #306	; 0x132
   33852:	f005 f957 	bl	38b04 <assert_post_action>
   33856:	bf00      	nop
   33858:	20000894 	.word	0x20000894
   3385c:	200008e8 	.word	0x200008e8
   33860:	0bad0000 	.word	0x0bad0000
   33864:	0003face 	.word	0x0003face
   33868:	0003d1d7 	.word	0x0003d1d7

0003386c <pin_handler_trigger_uninit>:
{
   3386c:	b538      	push	{r3, r4, r5, lr}
   3386e:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
   33870:	f7ff ff82 	bl	33778 <pin_in_use_by_te>
   33874:	4c09      	ldr	r4, [pc, #36]	; (3389c <pin_handler_trigger_uninit+0x30>)
   33876:	f102 0508 	add.w	r5, r2, #8
   3387a:	b140      	cbz	r0, 3388e <pin_handler_trigger_uninit+0x22>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   3387c:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
   33880:	4907      	ldr	r1, [pc, #28]	; (338a0 <pin_handler_trigger_uninit+0x34>)
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
   33882:	0b5b      	lsrs	r3, r3, #13
   33884:	f503 73a2 	add.w	r3, r3, #324	; 0x144
   33888:	2000      	movs	r0, #0
   3388a:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    release_handler(pin);
   3388e:	4610      	mov	r0, r2
   33890:	f7ff ffb0 	bl	337f4 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
   33894:	2300      	movs	r3, #0
   33896:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
   3389a:	bd38      	pop	{r3, r4, r5, pc}
   3389c:	20000894 	.word	0x20000894
   338a0:	40006000 	.word	0x40006000

000338a4 <nrf_gpio_pin_port_decode>:
{
   338a4:	b508      	push	{r3, lr}
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   338a6:	6802      	ldr	r2, [r0, #0]
{
   338a8:	4601      	mov	r1, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   338aa:	4610      	mov	r0, r2
   338ac:	f007 ffdb 	bl	3b866 <nrf_gpio_pin_present_check>
   338b0:	b950      	cbnz	r0, 338c8 <nrf_gpio_pin_port_decode+0x24>
   338b2:	490e      	ldr	r1, [pc, #56]	; (338ec <nrf_gpio_pin_port_decode+0x48>)
   338b4:	480e      	ldr	r0, [pc, #56]	; (338f0 <nrf_gpio_pin_port_decode+0x4c>)
   338b6:	f240 2247 	movw	r2, #583	; 0x247
   338ba:	f005 f92a 	bl	38b12 <assert_print>
   338be:	f240 2147 	movw	r1, #583	; 0x247
            NRFX_ASSERT(0);
   338c2:	480a      	ldr	r0, [pc, #40]	; (338ec <nrf_gpio_pin_port_decode+0x48>)
   338c4:	f005 f91e 	bl	38b04 <assert_post_action>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
   338c8:	f002 031f 	and.w	r3, r2, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   338cc:	0952      	lsrs	r2, r2, #5
    *p_pin = pin_number & 0x1F;
   338ce:	600b      	str	r3, [r1, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   338d0:	d008      	beq.n	338e4 <nrf_gpio_pin_port_decode+0x40>
            NRFX_ASSERT(0);
   338d2:	4906      	ldr	r1, [pc, #24]	; (338ec <nrf_gpio_pin_port_decode+0x48>)
   338d4:	4806      	ldr	r0, [pc, #24]	; (338f0 <nrf_gpio_pin_port_decode+0x4c>)
   338d6:	f44f 7213 	mov.w	r2, #588	; 0x24c
   338da:	f005 f91a 	bl	38b12 <assert_print>
   338de:	f44f 7113 	mov.w	r1, #588	; 0x24c
   338e2:	e7ee      	b.n	338c2 <nrf_gpio_pin_port_decode+0x1e>
}
   338e4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
   338e8:	bd08      	pop	{r3, pc}
   338ea:	bf00      	nop
   338ec:	0003ed49 	.word	0x0003ed49
   338f0:	0003d1d7 	.word	0x0003d1d7

000338f4 <nrfx_gpiote_input_configure>:
{
   338f4:	b5f0      	push	{r4, r5, r6, r7, lr}
   338f6:	4604      	mov	r4, r0
   338f8:	b085      	sub	sp, #20
   338fa:	4617      	mov	r7, r2
   338fc:	461d      	mov	r5, r3
    if (p_input_config)
   338fe:	b1d9      	cbz	r1, 33938 <nrfx_gpiote_input_configure+0x44>
        if (pin_is_task_output(pin))
   33900:	f007 ffbd 	bl	3b87e <pin_is_task_output>
   33904:	bb00      	cbnz	r0, 33948 <nrfx_gpiote_input_configure+0x54>
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   33906:	460b      	mov	r3, r1
   33908:	e9cd 0000 	strd	r0, r0, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
   3390c:	f88d 000e 	strb.w	r0, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
   33910:	f88d 000f 	strb.w	r0, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   33914:	f10d 020f 	add.w	r2, sp, #15
   33918:	f10d 010e 	add.w	r1, sp, #14
   3391c:	4620      	mov	r0, r4
   3391e:	f007 ffb9 	bl	3b894 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   33922:	4a44      	ldr	r2, [pc, #272]	; (33a34 <nrfx_gpiote_input_configure+0x140>)
   33924:	f104 0108 	add.w	r1, r4, #8
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
   33928:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   3392c:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   33930:	f043 0301 	orr.w	r3, r3, #1
   33934:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_trigger_config)
   33938:	b34f      	cbz	r7, 3398e <nrfx_gpiote_input_configure+0x9a>
        if (pin_is_output(pin))
   3393a:	4620      	mov	r0, r4
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
   3393c:	783e      	ldrb	r6, [r7, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
   3393e:	687a      	ldr	r2, [r7, #4]
        if (pin_is_output(pin))
   33940:	f7ff ff30 	bl	337a4 <pin_is_output>
   33944:	b110      	cbz	r0, 3394c <nrfx_gpiote_input_configure+0x58>
            if (use_evt)
   33946:	b1ba      	cbz	r2, 33978 <nrfx_gpiote_input_configure+0x84>
            return NRFX_ERROR_INVALID_PARAM;
   33948:	483b      	ldr	r0, [pc, #236]	; (33a38 <nrfx_gpiote_input_configure+0x144>)
   3394a:	e022      	b.n	33992 <nrfx_gpiote_input_configure+0x9e>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
   3394c:	4b39      	ldr	r3, [pc, #228]	; (33a34 <nrfx_gpiote_input_configure+0x140>)
   3394e:	f104 0c08 	add.w	ip, r4, #8
   33952:	f833 101c 	ldrh.w	r1, [r3, ip, lsl #1]
   33956:	f021 0120 	bic.w	r1, r1, #32
   3395a:	04c9      	lsls	r1, r1, #19
   3395c:	0cc9      	lsrs	r1, r1, #19
   3395e:	f823 101c 	strh.w	r1, [r3, ip, lsl #1]
            if (use_evt)
   33962:	b14a      	cbz	r2, 33978 <nrfx_gpiote_input_configure+0x84>
                if (!edge)
   33964:	2e03      	cmp	r6, #3
   33966:	d8ef      	bhi.n	33948 <nrfx_gpiote_input_configure+0x54>
                uint8_t ch = *p_trigger_config->p_in_channel;
   33968:	687a      	ldr	r2, [r7, #4]
   3396a:	7817      	ldrb	r7, [r2, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
   3396c:	b99e      	cbnz	r6, 33996 <nrfx_gpiote_input_configure+0xa2>
   3396e:	4b33      	ldr	r3, [pc, #204]	; (33a3c <nrfx_gpiote_input_configure+0x148>)
   33970:	f507 77a2 	add.w	r7, r7, #324	; 0x144
   33974:	f843 6027 	str.w	r6, [r3, r7, lsl #2]
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   33978:	4a2e      	ldr	r2, [pc, #184]	; (33a34 <nrfx_gpiote_input_configure+0x140>)
   3397a:	f104 0108 	add.w	r1, r4, #8
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
   3397e:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   33982:	f023 031c 	bic.w	r3, r3, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   33986:	ea43 0386 	orr.w	r3, r3, r6, lsl #2
   3398a:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_handler_config)
   3398e:	bb3d      	cbnz	r5, 339e0 <nrfx_gpiote_input_configure+0xec>
        err = NRFX_SUCCESS;
   33990:	482b      	ldr	r0, [pc, #172]	; (33a40 <nrfx_gpiote_input_configure+0x14c>)
}
   33992:	b005      	add	sp, #20
   33994:	bdf0      	pop	{r4, r5, r6, r7, pc}
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   33996:	00ba      	lsls	r2, r7, #2
   33998:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   3399c:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   339a0:	ea41 3147 	orr.w	r1, r1, r7, lsl #13
   339a4:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   339a8:	f020 0003 	bic.w	r0, r0, #3
   339ac:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   339b0:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   339b4:	f420 3047 	bic.w	r0, r0, #203776	; 0x31c00
   339b8:	f420 7040 	bic.w	r0, r0, #768	; 0x300
   339bc:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   339c0:	0220      	lsls	r0, r4, #8
   339c2:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
   339c6:	f400 50f8 	and.w	r0, r0, #7936	; 0x1f00
   339ca:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
   339ce:	ea40 000e 	orr.w	r0, r0, lr
   339d2:	f041 0120 	orr.w	r1, r1, #32
   339d6:	f823 101c 	strh.w	r1, [r3, ip, lsl #1]
   339da:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
   339de:	e7cb      	b.n	33978 <nrfx_gpiote_input_configure+0x84>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
   339e0:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
   339e4:	4620      	mov	r0, r4
   339e6:	f7ff ff05 	bl	337f4 <release_handler>
    if (!handler)
   339ea:	2e00      	cmp	r6, #0
   339ec:	d0d0      	beq.n	33990 <nrfx_gpiote_input_configure+0x9c>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   339ee:	4d11      	ldr	r5, [pc, #68]	; (33a34 <nrfx_gpiote_input_configure+0x140>)
   339f0:	e9d5 2300 	ldrd	r2, r3, [r5]
   339f4:	4296      	cmp	r6, r2
   339f6:	d101      	bne.n	339fc <nrfx_gpiote_input_configure+0x108>
   339f8:	429f      	cmp	r7, r3
   339fa:	d018      	beq.n	33a2e <nrfx_gpiote_input_configure+0x13a>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
   339fc:	4811      	ldr	r0, [pc, #68]	; (33a44 <nrfx_gpiote_input_configure+0x150>)
   339fe:	f10d 010f 	add.w	r1, sp, #15
   33a02:	f7ff fe79 	bl	336f8 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
   33a06:	4b0e      	ldr	r3, [pc, #56]	; (33a40 <nrfx_gpiote_input_configure+0x14c>)
   33a08:	4298      	cmp	r0, r3
   33a0a:	d1c2      	bne.n	33992 <nrfx_gpiote_input_configure+0x9e>
        handler_id = (int32_t)id;
   33a0c:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].handler = handler;
   33a10:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
   33a14:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   33a18:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
   33a1a:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   33a1c:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
   33a20:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
   33a24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   33a28:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    return NRFX_SUCCESS;
   33a2c:	e7b0      	b.n	33990 <nrfx_gpiote_input_configure+0x9c>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   33a2e:	2200      	movs	r2, #0
   33a30:	e7ee      	b.n	33a10 <nrfx_gpiote_input_configure+0x11c>
   33a32:	bf00      	nop
   33a34:	20000894 	.word	0x20000894
   33a38:	0bad0004 	.word	0x0bad0004
   33a3c:	40006000 	.word	0x40006000
   33a40:	0bad0000 	.word	0x0bad0000
   33a44:	200008e8 	.word	0x200008e8

00033a48 <nrfx_gpiote_output_configure>:
{
   33a48:	b5f0      	push	{r4, r5, r6, r7, lr}
   33a4a:	4604      	mov	r4, r0
   33a4c:	b085      	sub	sp, #20
   33a4e:	4615      	mov	r5, r2
    if (p_config)
   33a50:	b321      	cbz	r1, 33a9c <nrfx_gpiote_output_configure+0x54>
    return !pin_is_output(pin);
   33a52:	f7ff fea7 	bl	337a4 <pin_is_output>
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
   33a56:	b920      	cbnz	r0, 33a62 <nrfx_gpiote_output_configure+0x1a>
   33a58:	4620      	mov	r0, r4
   33a5a:	f7ff fe8d 	bl	33778 <pin_in_use_by_te>
   33a5e:	2800      	cmp	r0, #0
   33a60:	d15e      	bne.n	33b20 <nrfx_gpiote_output_configure+0xd8>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
   33a62:	4620      	mov	r0, r4
   33a64:	f7ff fe92 	bl	3378c <pin_has_trigger>
   33a68:	b110      	cbz	r0, 33a70 <nrfx_gpiote_output_configure+0x28>
   33a6a:	784b      	ldrb	r3, [r1, #1]
   33a6c:	2b01      	cmp	r3, #1
   33a6e:	d057      	beq.n	33b20 <nrfx_gpiote_output_configure+0xd8>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
   33a70:	2301      	movs	r3, #1
   33a72:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
   33a76:	2300      	movs	r3, #0
   33a78:	e9cd 1300 	strd	r1, r3, [sp]
   33a7c:	1c4a      	adds	r2, r1, #1
   33a7e:	1c8b      	adds	r3, r1, #2
   33a80:	4620      	mov	r0, r4
   33a82:	f10d 010f 	add.w	r1, sp, #15
   33a86:	f007 ff05 	bl	3b894 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
   33a8a:	4a26      	ldr	r2, [pc, #152]	; (33b24 <nrfx_gpiote_output_configure+0xdc>)
   33a8c:	f104 0108 	add.w	r1, r4, #8
   33a90:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   33a94:	f043 0303 	orr.w	r3, r3, #3
   33a98:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_task_config)
   33a9c:	b915      	cbnz	r5, 33aa4 <nrfx_gpiote_output_configure+0x5c>
    return NRFX_SUCCESS;
   33a9e:	4822      	ldr	r0, [pc, #136]	; (33b28 <nrfx_gpiote_output_configure+0xe0>)
}
   33aa0:	b005      	add	sp, #20
   33aa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return !pin_is_output(pin);
   33aa4:	4620      	mov	r0, r4
   33aa6:	f7ff fe7d 	bl	337a4 <pin_is_output>
        if (pin_is_input(pin))
   33aaa:	b3c8      	cbz	r0, 33b20 <nrfx_gpiote_output_configure+0xd8>
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
   33aac:	4e1d      	ldr	r6, [pc, #116]	; (33b24 <nrfx_gpiote_output_configure+0xdc>)
        uint32_t ch = p_task_config->task_ch;
   33aae:	f895 c000 	ldrb.w	ip, [r5]
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
   33ab2:	f104 0708 	add.w	r7, r4, #8
   33ab6:	4661      	mov	r1, ip
   33ab8:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
   33abc:	0089      	lsls	r1, r1, #2
   33abe:	f020 0020 	bic.w	r0, r0, #32
   33ac2:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   33ac6:	04c0      	lsls	r0, r0, #19
   33ac8:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
   33acc:	0cc0      	lsrs	r0, r0, #19
   33ace:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    p_reg->CONFIG[idx] = 0;
   33ad2:	2300      	movs	r3, #0
   33ad4:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
   33ad8:	786a      	ldrb	r2, [r5, #1]
   33ada:	2a00      	cmp	r2, #0
   33adc:	d0df      	beq.n	33a9e <nrfx_gpiote_output_configure+0x56>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
   33ade:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
                                      p_task_config->init_val);
   33ae2:	78ad      	ldrb	r5, [r5, #2]
   33ae4:	f423 1398 	bic.w	r3, r3, #1245184	; 0x130000
   33ae8:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   33aec:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   33af0:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
   33af4:	0223      	lsls	r3, r4, #8
   33af6:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   33afa:	0412      	lsls	r2, r2, #16
   33afc:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   33b00:	ea43 030e 	orr.w	r3, r3, lr
   33b04:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   33b06:	052a      	lsls	r2, r5, #20
   33b08:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   33b0c:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   33b10:	4313      	orrs	r3, r2
   33b12:	f040 0020 	orr.w	r0, r0, #32
   33b16:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   33b1a:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   33b1e:	e7be      	b.n	33a9e <nrfx_gpiote_output_configure+0x56>
{
   33b20:	4802      	ldr	r0, [pc, #8]	; (33b2c <nrfx_gpiote_output_configure+0xe4>)
   33b22:	e7bd      	b.n	33aa0 <nrfx_gpiote_output_configure+0x58>
   33b24:	20000894 	.word	0x20000894
   33b28:	0bad0000 	.word	0x0bad0000
   33b2c:	0bad0004 	.word	0x0bad0004

00033b30 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
   33b30:	4b01      	ldr	r3, [pc, #4]	; (33b38 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
   33b32:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
   33b36:	4770      	bx	lr
   33b38:	20000894 	.word	0x20000894

00033b3c <nrfx_gpiote_channel_get>:
{
   33b3c:	b508      	push	{r3, lr}
   33b3e:	4602      	mov	r2, r0
    NRFX_ASSERT(p_channel);
   33b40:	b951      	cbnz	r1, 33b58 <nrfx_gpiote_channel_get+0x1c>
   33b42:	490c      	ldr	r1, [pc, #48]	; (33b74 <nrfx_gpiote_channel_get+0x38>)
   33b44:	480c      	ldr	r0, [pc, #48]	; (33b78 <nrfx_gpiote_channel_get+0x3c>)
   33b46:	f240 2235 	movw	r2, #565	; 0x235
   33b4a:	f004 ffe2 	bl	38b12 <assert_print>
   33b4e:	4809      	ldr	r0, [pc, #36]	; (33b74 <nrfx_gpiote_channel_get+0x38>)
   33b50:	f240 2135 	movw	r1, #565	; 0x235
   33b54:	f004 ffd6 	bl	38b04 <assert_post_action>
    if (pin_in_use_by_te(pin))
   33b58:	f7ff fe0e 	bl	33778 <pin_in_use_by_te>
   33b5c:	b138      	cbz	r0, 33b6e <nrfx_gpiote_channel_get+0x32>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   33b5e:	4b07      	ldr	r3, [pc, #28]	; (33b7c <nrfx_gpiote_channel_get+0x40>)
        return NRFX_SUCCESS;
   33b60:	4807      	ldr	r0, [pc, #28]	; (33b80 <nrfx_gpiote_channel_get+0x44>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   33b62:	3208      	adds	r2, #8
   33b64:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   33b68:	0b5b      	lsrs	r3, r3, #13
   33b6a:	700b      	strb	r3, [r1, #0]
}
   33b6c:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
   33b6e:	4805      	ldr	r0, [pc, #20]	; (33b84 <nrfx_gpiote_channel_get+0x48>)
   33b70:	e7fc      	b.n	33b6c <nrfx_gpiote_channel_get+0x30>
   33b72:	bf00      	nop
   33b74:	0003face 	.word	0x0003face
   33b78:	0003d1d7 	.word	0x0003d1d7
   33b7c:	20000894 	.word	0x20000894
   33b80:	0bad0000 	.word	0x0bad0000
   33b84:	0bad0004 	.word	0x0bad0004

00033b88 <nrfx_gpiote_init>:
{
   33b88:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   33b8a:	4c0f      	ldr	r4, [pc, #60]	; (33bc8 <nrfx_gpiote_init+0x40>)
   33b8c:	f894 5058 	ldrb.w	r5, [r4, #88]	; 0x58
   33b90:	b9bd      	cbnz	r5, 33bc2 <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
   33b92:	2240      	movs	r2, #64	; 0x40
   33b94:	4629      	mov	r1, r5
   33b96:	f104 0010 	add.w	r0, r4, #16
   33b9a:	f005 fc14 	bl	393c6 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
   33b9e:	2006      	movs	r0, #6
   33ba0:	f7f3 f976 	bl	26e90 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   33ba4:	4b09      	ldr	r3, [pc, #36]	; (33bcc <nrfx_gpiote_init+0x44>)
    return err_code;
   33ba6:	480a      	ldr	r0, [pc, #40]	; (33bd0 <nrfx_gpiote_init+0x48>)
   33ba8:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
   33bac:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
   33bb0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   33bb4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
   33bb8:	2301      	movs	r3, #1
   33bba:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
   33bbe:	6563      	str	r3, [r4, #84]	; 0x54
}
   33bc0:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
   33bc2:	4804      	ldr	r0, [pc, #16]	; (33bd4 <nrfx_gpiote_init+0x4c>)
   33bc4:	e7fc      	b.n	33bc0 <nrfx_gpiote_init+0x38>
   33bc6:	bf00      	nop
   33bc8:	20000894 	.word	0x20000894
   33bcc:	40006000 	.word	0x40006000
   33bd0:	0bad0000 	.word	0x0bad0000
   33bd4:	0bad0005 	.word	0x0bad0005

00033bd8 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
   33bd8:	4b03      	ldr	r3, [pc, #12]	; (33be8 <nrfx_gpiote_is_init+0x10>)
   33bda:	f893 0058 	ldrb.w	r0, [r3, #88]	; 0x58
}
   33bde:	3800      	subs	r0, #0
   33be0:	bf18      	it	ne
   33be2:	2001      	movne	r0, #1
   33be4:	4770      	bx	lr
   33be6:	bf00      	nop
   33be8:	20000894 	.word	0x20000894

00033bec <nrfx_gpiote_channel_free>:
{
   33bec:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
   33bee:	4801      	ldr	r0, [pc, #4]	; (33bf4 <nrfx_gpiote_channel_free+0x8>)
   33bf0:	f7ff bda2 	b.w	33738 <nrfx_flag32_free>
   33bf4:	200008e4 	.word	0x200008e4

00033bf8 <nrfx_gpiote_channel_alloc>:
{
   33bf8:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
   33bfa:	4801      	ldr	r0, [pc, #4]	; (33c00 <nrfx_gpiote_channel_alloc+0x8>)
   33bfc:	f7ff bd7c 	b.w	336f8 <nrfx_flag32_alloc>
   33c00:	200008e4 	.word	0x200008e4

00033c04 <nrfx_gpiote_trigger_enable>:
{
   33c04:	b537      	push	{r0, r1, r2, r4, r5, lr}
   33c06:	4604      	mov	r4, r0
    NRFX_ASSERT(pin_has_trigger(pin));
   33c08:	f7ff fdc0 	bl	3378c <pin_has_trigger>
   33c0c:	b950      	cbnz	r0, 33c24 <nrfx_gpiote_trigger_enable+0x20>
   33c0e:	492c      	ldr	r1, [pc, #176]	; (33cc0 <nrfx_gpiote_trigger_enable+0xbc>)
   33c10:	482c      	ldr	r0, [pc, #176]	; (33cc4 <nrfx_gpiote_trigger_enable+0xc0>)
   33c12:	f240 32df 	movw	r2, #991	; 0x3df
   33c16:	f004 ff7c 	bl	38b12 <assert_print>
   33c1a:	f240 31df 	movw	r1, #991	; 0x3df
        NRFX_ASSERT(int_enable);
   33c1e:	4828      	ldr	r0, [pc, #160]	; (33cc0 <nrfx_gpiote_trigger_enable+0xbc>)
   33c20:	f004 ff70 	bl	38b04 <assert_post_action>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   33c24:	4620      	mov	r0, r4
   33c26:	f7ff fda7 	bl	33778 <pin_in_use_by_te>
   33c2a:	4a27      	ldr	r2, [pc, #156]	; (33cc8 <nrfx_gpiote_trigger_enable+0xc4>)
   33c2c:	f104 0508 	add.w	r5, r4, #8
   33c30:	b1f8      	cbz	r0, 33c72 <nrfx_gpiote_trigger_enable+0x6e>
    return !pin_is_output(pin);
   33c32:	4620      	mov	r0, r4
   33c34:	f7ff fdb6 	bl	337a4 <pin_is_output>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   33c38:	b9d8      	cbnz	r0, 33c72 <nrfx_gpiote_trigger_enable+0x6e>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   33c3a:	f832 2015 	ldrh.w	r2, [r2, r5, lsl #1]
   33c3e:	0b52      	lsrs	r2, r2, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
   33c40:	0093      	lsls	r3, r2, #2
    return ((uint32_t)p_reg + event);
   33c42:	f103 4480 	add.w	r4, r3, #1073741824	; 0x40000000
   33c46:	f504 44c2 	add.w	r4, r4, #24832	; 0x6100
   33c4a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   33c4e:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   33c52:	6020      	str	r0, [r4, #0]
   33c54:	6820      	ldr	r0, [r4, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   33c56:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
   33c5a:	f040 0001 	orr.w	r0, r0, #1
   33c5e:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
        if (int_enable)
   33c62:	b121      	cbz	r1, 33c6e <nrfx_gpiote_trigger_enable+0x6a>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
   33c64:	2301      	movs	r3, #1
   33c66:	4093      	lsls	r3, r2
    p_reg->INTENSET = mask;
   33c68:	4a18      	ldr	r2, [pc, #96]	; (33ccc <nrfx_gpiote_trigger_enable+0xc8>)
   33c6a:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   33c6e:	b003      	add	sp, #12
   33c70:	bd30      	pop	{r4, r5, pc}
        NRFX_ASSERT(int_enable);
   33c72:	b941      	cbnz	r1, 33c86 <nrfx_gpiote_trigger_enable+0x82>
   33c74:	4912      	ldr	r1, [pc, #72]	; (33cc0 <nrfx_gpiote_trigger_enable+0xbc>)
   33c76:	4813      	ldr	r0, [pc, #76]	; (33cc4 <nrfx_gpiote_trigger_enable+0xc0>)
   33c78:	f240 32ee 	movw	r2, #1006	; 0x3ee
   33c7c:	f004 ff49 	bl	38b12 <assert_print>
   33c80:	f240 31ee 	movw	r1, #1006	; 0x3ee
   33c84:	e7cb      	b.n	33c1e <nrfx_gpiote_trigger_enable+0x1a>
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   33c86:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
   33c8a:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
   33c8e:	2b04      	cmp	r3, #4
   33c90:	d012      	beq.n	33cb8 <nrfx_gpiote_trigger_enable+0xb4>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
   33c92:	2b05      	cmp	r3, #5
   33c94:	d012      	beq.n	33cbc <nrfx_gpiote_trigger_enable+0xb8>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   33c96:	a801      	add	r0, sp, #4
   33c98:	9401      	str	r4, [sp, #4]
   33c9a:	f7ff fe03 	bl	338a4 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   33c9e:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
   33ca0:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   33ca4:	40d9      	lsrs	r1, r3
   33ca6:	f001 0101 	and.w	r1, r1, #1
   33caa:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   33cac:	4620      	mov	r0, r4
}
   33cae:	b003      	add	sp, #12
   33cb0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   33cb4:	f007 be3b 	b.w	3b92e <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
   33cb8:	2103      	movs	r1, #3
   33cba:	e7f7      	b.n	33cac <nrfx_gpiote_trigger_enable+0xa8>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
   33cbc:	2102      	movs	r1, #2
   33cbe:	e7f5      	b.n	33cac <nrfx_gpiote_trigger_enable+0xa8>
   33cc0:	0003face 	.word	0x0003face
   33cc4:	0003d1d7 	.word	0x0003d1d7
   33cc8:	20000894 	.word	0x20000894
   33ccc:	40006000 	.word	0x40006000

00033cd0 <nrfx_gpiote_trigger_disable>:
{
   33cd0:	b508      	push	{r3, lr}
   33cd2:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   33cd4:	f7ff fd50 	bl	33778 <pin_in_use_by_te>
   33cd8:	b1c8      	cbz	r0, 33d0e <nrfx_gpiote_trigger_disable+0x3e>
    return !pin_is_output(pin);
   33cda:	4610      	mov	r0, r2
   33cdc:	f7ff fd62 	bl	337a4 <pin_is_output>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   33ce0:	b9a8      	cbnz	r0, 33d0e <nrfx_gpiote_trigger_disable+0x3e>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   33ce2:	3208      	adds	r2, #8
   33ce4:	4b0d      	ldr	r3, [pc, #52]	; (33d1c <nrfx_gpiote_trigger_disable+0x4c>)
    p_reg->INTENCLR = mask;
   33ce6:	490e      	ldr	r1, [pc, #56]	; (33d20 <nrfx_gpiote_trigger_disable+0x50>)
   33ce8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   33cec:	2201      	movs	r2, #1
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   33cee:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   33cf0:	409a      	lsls	r2, r3
   33cf2:	009b      	lsls	r3, r3, #2
   33cf4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   33cf8:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   33cfc:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   33d00:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   33d04:	f022 0203 	bic.w	r2, r2, #3
   33d08:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
   33d0c:	bd08      	pop	{r3, pc}
   33d0e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   33d12:	2100      	movs	r1, #0
   33d14:	4610      	mov	r0, r2
   33d16:	f007 be0a 	b.w	3b92e <nrf_gpio_cfg_sense_set>
   33d1a:	bf00      	nop
   33d1c:	20000894 	.word	0x20000894
   33d20:	40006000 	.word	0x40006000

00033d24 <nrfx_gpiote_pin_uninit>:
{
   33d24:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   33d26:	4b0e      	ldr	r3, [pc, #56]	; (33d60 <nrfx_gpiote_pin_uninit+0x3c>)
   33d28:	f100 0208 	add.w	r2, r0, #8
{
   33d2c:	4604      	mov	r4, r0
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   33d2e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
   33d32:	07db      	lsls	r3, r3, #31
   33d34:	d511      	bpl.n	33d5a <nrfx_gpiote_pin_uninit+0x36>
    nrfx_gpiote_trigger_disable(pin);
   33d36:	f7ff ffcb 	bl	33cd0 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
   33d3a:	4620      	mov	r0, r4
   33d3c:	f7ff fd96 	bl	3386c <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   33d40:	a801      	add	r0, sp, #4
   33d42:	9401      	str	r4, [sp, #4]
   33d44:	f7ff fdae 	bl	338a4 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   33d48:	9b01      	ldr	r3, [sp, #4]
   33d4a:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   33d4e:	2202      	movs	r2, #2
   33d50:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    nrf_gpio_cfg(
   33d54:	4803      	ldr	r0, [pc, #12]	; (33d64 <nrfx_gpiote_pin_uninit+0x40>)
}
   33d56:	b002      	add	sp, #8
   33d58:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   33d5a:	4803      	ldr	r0, [pc, #12]	; (33d68 <nrfx_gpiote_pin_uninit+0x44>)
   33d5c:	e7fb      	b.n	33d56 <nrfx_gpiote_pin_uninit+0x32>
   33d5e:	bf00      	nop
   33d60:	20000894 	.word	0x20000894
   33d64:	0bad0000 	.word	0x0bad0000
   33d68:	0bad0004 	.word	0x0bad0004

00033d6c <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
   33d6c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   33d70:	4b59      	ldr	r3, [pc, #356]	; (33ed8 <nrfx_gpiote_irq_handler+0x16c>)
    return p_reg->INTENSET & mask;
   33d72:	485a      	ldr	r0, [pc, #360]	; (33edc <nrfx_gpiote_irq_handler+0x170>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   33d74:	495a      	ldr	r1, [pc, #360]	; (33ee0 <nrfx_gpiote_irq_handler+0x174>)
    uint32_t status = 0;
   33d76:	2600      	movs	r6, #0
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
   33d78:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   33d7a:	4634      	mov	r4, r6
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   33d7c:	681d      	ldr	r5, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
   33d7e:	b135      	cbz	r5, 33d8e <nrfx_gpiote_irq_handler+0x22>
    return p_reg->INTENSET & mask;
   33d80:	f8d0 5304 	ldr.w	r5, [r0, #772]	; 0x304
   33d84:	4215      	tst	r5, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   33d86:	bf1e      	ittt	ne
   33d88:	601c      	strne	r4, [r3, #0]
   33d8a:	681d      	ldrne	r5, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
   33d8c:	4316      	orrne	r6, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   33d8e:	3304      	adds	r3, #4
   33d90:	428b      	cmp	r3, r1
        }
        mask <<= 1;
   33d92:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   33d96:	d1f1      	bne.n	33d7c <nrfx_gpiote_irq_handler+0x10>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   33d98:	4f50      	ldr	r7, [pc, #320]	; (33edc <nrfx_gpiote_irq_handler+0x170>)
   33d9a:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
   33d9e:	b1bb      	cbz	r3, 33dd0 <nrfx_gpiote_irq_handler+0x64>
        *p_masks = gpio_regs[i]->LATCH;
   33da0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   33da4:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
   33da8:	9200      	str	r2, [sp, #0]
        gpio_regs[i]->LATCH = *p_masks;
   33daa:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
   33dae:	f04f 0801 	mov.w	r8, #1
            while (latch[i])
   33db2:	9c00      	ldr	r4, [sp, #0]
   33db4:	b994      	cbnz	r4, 33ddc <nrfx_gpiote_irq_handler+0x70>
        *p_masks = gpio_regs[i]->LATCH;
   33db6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   33dba:	f8c7 417c 	str.w	r4, [r7, #380]	; 0x17c
   33dbe:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
   33dc2:	f8d2 3520 	ldr.w	r3, [r2, #1312]	; 0x520
   33dc6:	9300      	str	r3, [sp, #0]
        gpio_regs[i]->LATCH = *p_masks;
   33dc8:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520
        if (latch[port_idx])
   33dcc:	2b00      	cmp	r3, #0
   33dce:	d1ee      	bne.n	33dae <nrfx_gpiote_irq_handler+0x42>
        mask &= ~NRFX_BIT(ch);
   33dd0:	2401      	movs	r4, #1
    while (mask)
   33dd2:	2e00      	cmp	r6, #0
   33dd4:	d168      	bne.n	33ea8 <nrfx_gpiote_irq_handler+0x13c>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
   33dd6:	b003      	add	sp, #12
   33dd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                uint32_t pin = NRF_CTZ(latch[i]);
   33ddc:	fa94 f4a4 	rbit	r4, r4
   33de0:	fab4 f484 	clz	r4, r4
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
   33de4:	08e0      	lsrs	r0, r4, #3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   33de6:	4a3f      	ldr	r2, [pc, #252]	; (33ee4 <nrfx_gpiote_irq_handler+0x178>)
   33de8:	9401      	str	r4, [sp, #4]
   33dea:	f104 0308 	add.w	r3, r4, #8
    bit = BITMASK_RELBIT_GET(bit);
   33dee:	f004 0107 	and.w	r1, r4, #7
   33df2:	f832 a013 	ldrh.w	sl, [r2, r3, lsl #1]
    p_mask8[byte_idx] &= ~(1 << bit);
   33df6:	f81d 2000 	ldrb.w	r2, [sp, r0]
   33dfa:	fa08 f101 	lsl.w	r1, r8, r1
   33dfe:	ea22 0201 	bic.w	r2, r2, r1
   33e02:	f80d 2000 	strb.w	r2, [sp, r0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   33e06:	a801      	add	r0, sp, #4
   33e08:	f7ff fd4c 	bl	338a4 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   33e0c:	9a01      	ldr	r2, [sp, #4]
   33e0e:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
   33e12:	ea4f 099a 	mov.w	r9, sl, lsr #2
   33e16:	f850 5022 	ldr.w	r5, [r0, r2, lsl #2]
   33e1a:	f3ca 0b82 	ubfx	fp, sl, #2, #3
    if (is_level(trigger))
   33e1e:	f019 0f04 	tst.w	r9, #4
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   33e22:	46da      	mov	sl, fp
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
   33e24:	f3c5 4501 	ubfx	r5, r5, #16, #2
    if (is_level(trigger))
   33e28:	d023      	beq.n	33e72 <nrfx_gpiote_irq_handler+0x106>
        call_handler(pin, trigger);
   33e2a:	4659      	mov	r1, fp
   33e2c:	4620      	mov	r0, r4
   33e2e:	f7ff fcc3 	bl	337b8 <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   33e32:	a801      	add	r0, sp, #4
   33e34:	9401      	str	r4, [sp, #4]
   33e36:	f7ff fd35 	bl	338a4 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   33e3a:	9b01      	ldr	r3, [sp, #4]
   33e3c:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   33e40:	b2ed      	uxtb	r5, r5
   33e42:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
   33e46:	f3c3 4301 	ubfx	r3, r3, #16, #2
   33e4a:	429d      	cmp	r5, r3
   33e4c:	d107      	bne.n	33e5e <nrfx_gpiote_irq_handler+0xf2>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   33e4e:	2100      	movs	r1, #0
   33e50:	4620      	mov	r0, r4
   33e52:	f007 fd6c 	bl	3b92e <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
   33e56:	4629      	mov	r1, r5
   33e58:	4620      	mov	r0, r4
   33e5a:	f007 fd68 	bl	3b92e <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   33e5e:	a801      	add	r0, sp, #4
   33e60:	9401      	str	r4, [sp, #4]
   33e62:	f7ff fd1f 	bl	338a4 <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
   33e66:	9b01      	ldr	r3, [sp, #4]
   33e68:	fa08 f303 	lsl.w	r3, r8, r3
   33e6c:	f8c0 3520 	str.w	r3, [r0, #1312]	; 0x520
   33e70:	e79f      	b.n	33db2 <nrfx_gpiote_irq_handler+0x46>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   33e72:	2d02      	cmp	r5, #2
   33e74:	d10c      	bne.n	33e90 <nrfx_gpiote_irq_handler+0x124>
        nrf_gpio_cfg_sense_set(pin, next_sense);
   33e76:	2103      	movs	r1, #3
   33e78:	4620      	mov	r0, r4
   33e7a:	f007 fd58 	bl	3b92e <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   33e7e:	f00b 0305 	and.w	r3, fp, #5
   33e82:	2b01      	cmp	r3, #1
   33e84:	d1eb      	bne.n	33e5e <nrfx_gpiote_irq_handler+0xf2>
            call_handler(pin, trigger);
   33e86:	4651      	mov	r1, sl
   33e88:	4620      	mov	r0, r4
   33e8a:	f7ff fc95 	bl	337b8 <call_handler>
   33e8e:	e7e6      	b.n	33e5e <nrfx_gpiote_irq_handler+0xf2>
        nrf_gpio_cfg_sense_set(pin, next_sense);
   33e90:	2102      	movs	r1, #2
   33e92:	4620      	mov	r0, r4
   33e94:	f007 fd4b 	bl	3b92e <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   33e98:	f1bb 0f03 	cmp.w	fp, #3
   33e9c:	d0f3      	beq.n	33e86 <nrfx_gpiote_irq_handler+0x11a>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   33e9e:	2d03      	cmp	r5, #3
   33ea0:	d1dd      	bne.n	33e5e <nrfx_gpiote_irq_handler+0xf2>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   33ea2:	f1bb 0f02 	cmp.w	fp, #2
   33ea6:	e7ed      	b.n	33e84 <nrfx_gpiote_irq_handler+0x118>
        uint32_t ch = NRF_CTZ(mask);
   33ea8:	fa96 f3a6 	rbit	r3, r6
   33eac:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
   33eb0:	fa04 f203 	lsl.w	r2, r4, r3
   33eb4:	009b      	lsls	r3, r3, #2
   33eb6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   33eba:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   33ebe:	ea26 0602 	bic.w	r6, r6, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   33ec2:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
   33ec6:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   33eca:	f3c0 2004 	ubfx	r0, r0, #8, #5
   33ece:	f3c1 4101 	ubfx	r1, r1, #16, #2
   33ed2:	f7ff fc71 	bl	337b8 <call_handler>
   33ed6:	e77c      	b.n	33dd2 <nrfx_gpiote_irq_handler+0x66>
   33ed8:	40006100 	.word	0x40006100
   33edc:	40006000 	.word	0x40006000
   33ee0:	40006120 	.word	0x40006120
   33ee4:	20000894 	.word	0x20000894

00033ee8 <nvmc_word_write>:
   33ee8:	4a04      	ldr	r2, [pc, #16]	; (33efc <nvmc_word_write+0x14>)
   33eea:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
{
#if defined(NRF9160_XXAA)
    while (!nrf_nvmc_write_ready_check(NRF_NVMC))
    {}
#else
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   33eee:	07db      	lsls	r3, r3, #31
   33ef0:	d5fb      	bpl.n	33eea <nvmc_word_write+0x2>
    {}
#endif

    *(volatile uint32_t *)addr = value;
   33ef2:	6001      	str	r1, [r0, #0]
  __ASM volatile ("dmb 0xF":::"memory");
   33ef4:	f3bf 8f5f 	dmb	sy
    __DMB();
}
   33ef8:	4770      	bx	lr
   33efa:	bf00      	nop
   33efc:	4001e000 	.word	0x4001e000

00033f00 <nrfx_nvmc_page_erase>:
        nvmc_word_write(addr + (NVMC_BYTES_IN_WORD * i), ((uint32_t const *)src)[i]);
    }
}

nrfx_err_t nrfx_nvmc_page_erase(uint32_t addr)
{
   33f00:	b508      	push	{r3, lr}
NRF_STATIC_INLINE uint32_t nrf_ficr_codepagesize_get(NRF_FICR_Type const * p_reg)
{
#if defined(FICR_INFO_CODEPAGESIZE_CODEPAGESIZE_Msk)
    return p_reg->INFO.CODEPAGESIZE;
#else
    return p_reg->CODEPAGESIZE;
   33f02:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   33f06:	691a      	ldr	r2, [r3, #16]
NRF_STATIC_INLINE uint32_t nrf_ficr_codesize_get(NRF_FICR_Type const * p_reg)
{
#if defined(FICR_INFO_CODESIZE_CODESIZE_Msk)
    return p_reg->INFO.CODESIZE;
#else
    return p_reg->CODESIZE;
   33f08:	6959      	ldr	r1, [r3, #20]
    return flash_page_size_get() * flash_page_count_get();
   33f0a:	434a      	muls	r2, r1
    if ((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get())
   33f0c:	4290      	cmp	r0, r2
   33f0e:	d207      	bcs.n	33f20 <nrfx_nvmc_page_erase+0x20>
    return p_reg->CODEPAGESIZE;
   33f10:	691a      	ldr	r2, [r3, #16]
    return !(addr % flash_page_size_get());
   33f12:	fbb0 f3f2 	udiv	r3, r0, r2
   33f16:	fb02 0313 	mls	r3, r2, r3, r0
    NRFX_ASSERT(is_valid_address(addr, false));

    if (!is_page_aligned_check(addr))
   33f1a:	b163      	cbz	r3, 33f36 <nrfx_nvmc_page_erase+0x36>
    {
        return NRFX_ERROR_INVALID_ADDR;
   33f1c:	480d      	ldr	r0, [pc, #52]	; (33f54 <nrfx_nvmc_page_erase+0x54>)
   33f1e:	e018      	b.n	33f52 <nrfx_nvmc_page_erase+0x52>
    NRFX_ASSERT(is_valid_address(addr, false));
   33f20:	490d      	ldr	r1, [pc, #52]	; (33f58 <nrfx_nvmc_page_erase+0x58>)
   33f22:	480e      	ldr	r0, [pc, #56]	; (33f5c <nrfx_nvmc_page_erase+0x5c>)
   33f24:	f44f 7283 	mov.w	r2, #262	; 0x106
   33f28:	f004 fdf3 	bl	38b12 <assert_print>
   33f2c:	480a      	ldr	r0, [pc, #40]	; (33f58 <nrfx_nvmc_page_erase+0x58>)
   33f2e:	f44f 7183 	mov.w	r1, #262	; 0x106
   33f32:	f004 fde7 	bl	38b04 <assert_post_action>
#endif

NRF_STATIC_INLINE void nrf_nvmc_mode_set(NRF_NVMC_Type * p_reg,
                                         nrf_nvmc_mode_t mode)
{
    p_reg->CONFIG = (uint32_t)mode;
   33f36:	4b0a      	ldr	r3, [pc, #40]	; (33f60 <nrfx_nvmc_page_erase+0x60>)
   33f38:	2202      	movs	r2, #2
   33f3a:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    else
    {
        p_reg->ERASEPCR1 = page_addr;
    }
#elif defined(NRF52_SERIES)
    p_reg->ERASEPAGE = page_addr;
   33f3e:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   33f42:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    }

    nvmc_erase_mode_set();
    nrf_nvmc_page_erase_start(NRF_NVMC, addr);
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   33f46:	07d2      	lsls	r2, r2, #31
   33f48:	d5fb      	bpl.n	33f42 <nrfx_nvmc_page_erase+0x42>
    p_reg->CONFIG = (uint32_t)mode;
   33f4a:	2200      	movs	r2, #0
    {}
    nvmc_readonly_mode_set();

    return NRFX_SUCCESS;
   33f4c:	4805      	ldr	r0, [pc, #20]	; (33f64 <nrfx_nvmc_page_erase+0x64>)
   33f4e:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   33f52:	bd08      	pop	{r3, pc}
   33f54:	0bad000a 	.word	0x0bad000a
   33f58:	0003fb0c 	.word	0x0003fb0c
   33f5c:	0003d1d7 	.word	0x0003d1d7
   33f60:	4001e000 	.word	0x4001e000
   33f64:	0bad0000 	.word	0x0bad0000

00033f68 <nrfx_nvmc_word_write>:

    nrfx_nvmc_word_write(aligned_addr, partial_word_create(addr, (const uint8_t *)&value, 2));
}

void nrfx_nvmc_word_write(uint32_t addr, uint32_t value)
{
   33f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   33f6a:	460d      	mov	r5, r1
    NRFX_ASSERT(is_valid_address(addr, true));
   33f6c:	2101      	movs	r1, #1
{
   33f6e:	4604      	mov	r4, r0
    NRFX_ASSERT(is_valid_address(addr, true));
   33f70:	f007 fcec 	bl	3b94c <is_valid_address>
   33f74:	b950      	cbnz	r0, 33f8c <nrfx_nvmc_word_write+0x24>
   33f76:	4911      	ldr	r1, [pc, #68]	; (33fbc <nrfx_nvmc_word_write+0x54>)
   33f78:	4811      	ldr	r0, [pc, #68]	; (33fc0 <nrfx_nvmc_word_write+0x58>)
   33f7a:	f44f 72ca 	mov.w	r2, #404	; 0x194
   33f7e:	f004 fdc8 	bl	38b12 <assert_print>
   33f82:	f44f 71ca 	mov.w	r1, #404	; 0x194
    NRFX_ASSERT(nrfx_is_word_aligned((void const *)addr));
   33f86:	480d      	ldr	r0, [pc, #52]	; (33fbc <nrfx_nvmc_word_write+0x54>)
   33f88:	f004 fdbc 	bl	38b04 <assert_post_action>
   33f8c:	f014 0703 	ands.w	r7, r4, #3
   33f90:	d008      	beq.n	33fa4 <nrfx_nvmc_word_write+0x3c>
   33f92:	490a      	ldr	r1, [pc, #40]	; (33fbc <nrfx_nvmc_word_write+0x54>)
   33f94:	480a      	ldr	r0, [pc, #40]	; (33fc0 <nrfx_nvmc_word_write+0x58>)
   33f96:	f240 1295 	movw	r2, #405	; 0x195
   33f9a:	f004 fdba 	bl	38b12 <assert_print>
   33f9e:	f240 1195 	movw	r1, #405	; 0x195
   33fa2:	e7f0      	b.n	33f86 <nrfx_nvmc_word_write+0x1e>
   33fa4:	4e07      	ldr	r6, [pc, #28]	; (33fc4 <nrfx_nvmc_word_write+0x5c>)
   33fa6:	2301      	movs	r3, #1
   33fa8:	f8c6 3504 	str.w	r3, [r6, #1284]	; 0x504

    nvmc_write_mode_set();

    nvmc_word_write(addr, value);
   33fac:	4629      	mov	r1, r5
   33fae:	4620      	mov	r0, r4
   33fb0:	f7ff ff9a 	bl	33ee8 <nvmc_word_write>
   33fb4:	f8c6 7504 	str.w	r7, [r6, #1284]	; 0x504

    nvmc_readonly_mode_set();
}
   33fb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   33fba:	bf00      	nop
   33fbc:	0003fb0c 	.word	0x0003fb0c
   33fc0:	0003d1d7 	.word	0x0003d1d7
   33fc4:	4001e000 	.word	0x4001e000

00033fc8 <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
   33fc8:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
   33fca:	4801      	ldr	r0, [pc, #4]	; (33fd0 <nrfx_ppi_channel_alloc+0x8>)
   33fcc:	f7ff bb94 	b.w	336f8 <nrfx_flag32_alloc>
   33fd0:	200008f0 	.word	0x200008f0

00033fd4 <nrf_gpio_pin_port_decode>:
{
   33fd4:	b508      	push	{r3, lr}
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   33fd6:	6802      	ldr	r2, [r0, #0]
    switch (port)
   33fd8:	0953      	lsrs	r3, r2, #5
   33fda:	d104      	bne.n	33fe6 <nrf_gpio_pin_port_decode+0x12>
    return (mask & (1UL << pin_number)) ? true : false;
   33fdc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   33fe0:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   33fe2:	07db      	lsls	r3, r3, #31
   33fe4:	d40a      	bmi.n	33ffc <nrf_gpio_pin_port_decode+0x28>
   33fe6:	4907      	ldr	r1, [pc, #28]	; (34004 <nrf_gpio_pin_port_decode+0x30>)
   33fe8:	4807      	ldr	r0, [pc, #28]	; (34008 <nrf_gpio_pin_port_decode+0x34>)
   33fea:	f240 2247 	movw	r2, #583	; 0x247
   33fee:	f004 fd90 	bl	38b12 <assert_print>
   33ff2:	4804      	ldr	r0, [pc, #16]	; (34004 <nrf_gpio_pin_port_decode+0x30>)
   33ff4:	f240 2147 	movw	r1, #583	; 0x247
   33ff8:	f004 fd84 	bl	38b04 <assert_post_action>
}
   33ffc:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
   34000:	bd08      	pop	{r3, pc}
   34002:	bf00      	nop
   34004:	0003ed49 	.word	0x0003ed49
   34008:	0003d1d7 	.word	0x0003d1d7

0003400c <twim_irq_handler>:
{
    return nrf_twim_event_address_get(p_instance->p_twim, NRF_TWIM_EVENT_STOPPED);
}

static void twim_irq_handler(NRF_TWIM_Type * p_twim, twim_control_block_t * p_cb)
{
   3400c:	b5f0      	push	{r4, r5, r6, r7, lr}
            return;
        }
    }
#endif

    NRFX_ASSERT(p_cb->handler);
   3400e:	680b      	ldr	r3, [r1, #0]
{
   34010:	b087      	sub	sp, #28
   34012:	4604      	mov	r4, r0
   34014:	460d      	mov	r5, r1
    NRFX_ASSERT(p_cb->handler);
   34016:	b953      	cbnz	r3, 3402e <twim_irq_handler+0x22>
   34018:	495e      	ldr	r1, [pc, #376]	; (34194 <twim_irq_handler+0x188>)
   3401a:	485f      	ldr	r0, [pc, #380]	; (34198 <twim_irq_handler+0x18c>)
   3401c:	f44f 7237 	mov.w	r2, #732	; 0x2dc
   34020:	f004 fd77 	bl	38b12 <assert_print>
   34024:	485b      	ldr	r0, [pc, #364]	; (34194 <twim_irq_handler+0x188>)
   34026:	f44f 7137 	mov.w	r1, #732	; 0x2dc
   3402a:	f004 fd6b 	bl	38b04 <assert_post_action>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3402e:	f8d0 3124 	ldr.w	r3, [r0, #292]	; 0x124

    if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_ERROR))
   34032:	b1f3      	cbz	r3, 34072 <twim_irq_handler+0x66>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   34034:	2300      	movs	r3, #0
   34036:	f8c0 3124 	str.w	r3, [r0, #292]	; 0x124
   3403a:	f8d0 3124 	ldr.w	r3, [r0, #292]	; 0x124
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3403e:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
    {
        nrf_twim_event_clear(p_twim, NRF_TWIM_EVENT_ERROR);
        NRFX_LOG_DEBUG("TWIM: Event: %s.", EVT_TO_STR_TWIM(NRF_TWIM_EVENT_ERROR));
        if (!nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
   34042:	b9b3      	cbnz	r3, 34072 <twim_irq_handler+0x66>
        {
            nrf_twim_int_disable(p_twim, p_cb->int_mask);
   34044:	688b      	ldr	r3, [r1, #8]
    p_reg->INTENCLR = mask;
   34046:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   3404a:	2302      	movs	r3, #2
   3404c:	608b      	str	r3, [r1, #8]
            nrf_twim_int_enable(p_twim, p_cb->int_mask);
   3404e:	688b      	ldr	r3, [r1, #8]
    p_reg->INTENSET = mask;
   34050:	f8c0 3304 	str.w	r3, [r0, #772]	; 0x304
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   34054:	f8d0 3160 	ldr.w	r3, [r0, #352]	; 0x160

            if (!(nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_LASTTX) &&
   34058:	b11b      	cbz	r3, 34062 <twim_irq_handler+0x56>
    p_reg->SHORTS = mask;
}

NRF_STATIC_INLINE uint32_t nrf_twim_shorts_get(NRF_TWIM_Type const * p_reg)
{
    return p_reg->SHORTS;
   3405a:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
   3405e:	059f      	lsls	r7, r3, #22
   34060:	d402      	bmi.n	34068 <twim_irq_handler+0x5c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   34062:	2301      	movs	r3, #1
   34064:	6223      	str	r3, [r4, #32]
   34066:	6163      	str	r3, [r4, #20]
            {
                nrf_twim_task_trigger(p_twim, NRF_TWIM_TASK_RESUME);
                nrf_twim_task_trigger(p_twim, NRF_TWIM_TASK_STOP);
            }

            p_cb->error = true;
   34068:	2301      	movs	r3, #1
   3406a:	f885 302e 	strb.w	r3, [r5, #46]	; 0x2e

    if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER) || p_cb->error)
    {
        p_cb->handler(&event, p_cb->p_context);
    }
}
   3406e:	b007      	add	sp, #28
   34070:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   34072:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
   34076:	2b00      	cmp	r3, #0
   34078:	d041      	beq.n	340fe <twim_irq_handler+0xf2>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3407a:	2300      	movs	r3, #0
   3407c:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
   34080:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
        if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK) && !p_cb->error)
   34084:	6a2b      	ldr	r3, [r5, #32]
   34086:	065e      	lsls	r6, r3, #25
   34088:	d40a      	bmi.n	340a0 <twim_irq_handler+0x94>
   3408a:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
   3408e:	b93b      	cbnz	r3, 340a0 <twim_irq_handler+0x94>
            p_cb->error = !xfer_completeness_check(p_twim, p_cb);
   34090:	4629      	mov	r1, r5
   34092:	4620      	mov	r0, r4
   34094:	f007 fc7c 	bl	3b990 <xfer_completeness_check>
   34098:	f080 0001 	eor.w	r0, r0, #1
   3409c:	f885 002e 	strb.w	r0, [r5, #46]	; 0x2e
        if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER))
   340a0:	6a2b      	ldr	r3, [r5, #32]
   340a2:	f013 0c04 	ands.w	ip, r3, #4
   340a6:	d13b      	bne.n	34120 <twim_irq_handler+0x114>
            event.xfer_desc = p_cb->xfer_desc;
   340a8:	f105 070c 	add.w	r7, r5, #12
   340ac:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   340ae:	ae01      	add	r6, sp, #4
   340b0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   340b2:	683b      	ldr	r3, [r7, #0]
   340b4:	f8c4 c160 	str.w	ip, [r4, #352]	; 0x160
   340b8:	6033      	str	r3, [r6, #0]
   340ba:	f8d4 3160 	ldr.w	r3, [r4, #352]	; 0x160
   340be:	f8c4 c15c 	str.w	ip, [r4, #348]	; 0x15c
   340c2:	f8d4 315c 	ldr.w	r3, [r4, #348]	; 0x15c
            if (!p_cb->repeated || p_cb->error)
   340c6:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
   340ca:	b113      	cbz	r3, 340d2 <twim_irq_handler+0xc6>
   340cc:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
   340d0:	b333      	cbz	r3, 34120 <twim_irq_handler+0x114>
    p_reg->SHORTS = mask;
   340d2:	2300      	movs	r3, #0
   340d4:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
                p_cb->int_mask = 0;
   340d8:	60ab      	str	r3, [r5, #8]
    p_reg->INTENCLR = mask;
   340da:	4b30      	ldr	r3, [pc, #192]	; (3419c <twim_irq_handler+0x190>)
   340dc:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    return ((((uint32_t)p_object) & 0x3u) == 0u);
}

NRF_STATIC_INLINE IRQn_Type nrfx_get_irq_number(void const * p_reg)
{
    return (IRQn_Type)NRFX_IRQ_NUMBER_GET(p_reg);
   340e0:	f344 3307 	sbfx	r3, r4, #12, #8
  if ((int32_t)(IRQn) >= 0)
   340e4:	2b00      	cmp	r3, #0
   340e6:	db1b      	blt.n	34120 <twim_irq_handler+0x114>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   340e8:	095a      	lsrs	r2, r3, #5
   340ea:	2101      	movs	r1, #1
   340ec:	f003 031f 	and.w	r3, r3, #31
   340f0:	4099      	lsls	r1, r3
   340f2:	f102 0360 	add.w	r3, r2, #96	; 0x60
   340f6:	4a2a      	ldr	r2, [pc, #168]	; (341a0 <twim_irq_handler+0x194>)
   340f8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
   340fc:	e010      	b.n	34120 <twim_irq_handler+0x114>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   340fe:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   34102:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
        if (p_cb->xfer_desc.type == NRFX_TWIM_XFER_TX)
   34106:	7b2b      	ldrb	r3, [r5, #12]
   34108:	bb5b      	cbnz	r3, 34162 <twim_irq_handler+0x156>
            event.xfer_desc = p_cb->xfer_desc;
   3410a:	f105 070c 	add.w	r7, r5, #12
   3410e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   34110:	ae01      	add	r6, sp, #4
   34112:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   34114:	683b      	ldr	r3, [r7, #0]
   34116:	6033      	str	r3, [r6, #0]
            if (!p_cb->repeated)
   34118:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
   3411c:	2b00      	cmp	r3, #0
   3411e:	d0d9      	beq.n	340d4 <twim_irq_handler+0xc8>
    uint32_t error_source = p_reg->ERRORSRC;
   34120:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
   34124:	f8c4 34c4 	str.w	r3, [r4, #1220]	; 0x4c4
    if (errorsrc & NRF_TWIM_ERROR_ADDRESS_NACK)
   34128:	0798      	lsls	r0, r3, #30
   3412a:	d42c      	bmi.n	34186 <twim_irq_handler+0x17a>
    else if (errorsrc & NRF_TWIM_ERROR_DATA_NACK)
   3412c:	0759      	lsls	r1, r3, #29
   3412e:	d42c      	bmi.n	3418a <twim_irq_handler+0x17e>
    else if (errorsrc & NRF_TWIM_ERROR_OVERRUN)
   34130:	07da      	lsls	r2, r3, #31
   34132:	d42c      	bmi.n	3418e <twim_irq_handler+0x182>
    else if (p_cb->error)
   34134:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
   34138:	009b      	lsls	r3, r3, #2
   3413a:	b2db      	uxtb	r3, r3
        event.type = NRFX_TWIM_EVT_ADDRESS_NACK;
   3413c:	f88d 3000 	strb.w	r3, [sp]
    if (!p_cb->repeated)
   34140:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
   34144:	b90b      	cbnz	r3, 3414a <twim_irq_handler+0x13e>
        p_cb->busy = false;
   34146:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f
    if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER) || p_cb->error)
   3414a:	6a2b      	ldr	r3, [r5, #32]
   3414c:	075b      	lsls	r3, r3, #29
   3414e:	d503      	bpl.n	34158 <twim_irq_handler+0x14c>
   34150:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
   34154:	2b00      	cmp	r3, #0
   34156:	d08a      	beq.n	3406e <twim_irq_handler+0x62>
        p_cb->handler(&event, p_cb->p_context);
   34158:	e9d5 3100 	ldrd	r3, r1, [r5]
   3415c:	4668      	mov	r0, sp
   3415e:	4798      	blx	r3
   34160:	e785      	b.n	3406e <twim_irq_handler+0x62>
    p_reg->SHORTS = mask;
   34162:	f44f 7300 	mov.w	r3, #512	; 0x200
   34166:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK | NRF_TWIM_INT_ERROR_MASK;
   3416a:	f240 2302 	movw	r3, #514	; 0x202
   3416e:	60ab      	str	r3, [r5, #8]
    p_reg->INTENCLR = mask;
   34170:	f103 73ce 	add.w	r3, r3, #27000832	; 0x19c0000
   34174:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
            nrf_twim_int_enable(p_twim, p_cb->int_mask);
   34178:	68ab      	ldr	r3, [r5, #8]
    p_reg->INTENSET = mask;
   3417a:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3417e:	2301      	movs	r3, #1
   34180:	60a3      	str	r3, [r4, #8]
   34182:	6223      	str	r3, [r4, #32]
            return;
   34184:	e773      	b.n	3406e <twim_irq_handler+0x62>
   34186:	2301      	movs	r3, #1
   34188:	e7d8      	b.n	3413c <twim_irq_handler+0x130>
   3418a:	2302      	movs	r3, #2
   3418c:	e7d6      	b.n	3413c <twim_irq_handler+0x130>
   3418e:	2303      	movs	r3, #3
   34190:	e7d4      	b.n	3413c <twim_irq_handler+0x130>
   34192:	bf00      	nop
   34194:	0003fb48 	.word	0x0003fb48
   34198:	0003d1d7 	.word	0x0003d1d7
   3419c:	019c0202 	.word	0x019c0202
   341a0:	e000e100 	.word	0xe000e100

000341a4 <nrfx_twim_init>:
{
   341a4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   341a8:	4606      	mov	r6, r0
    NRFX_ASSERT(p_config);
   341aa:	460c      	mov	r4, r1
   341ac:	b951      	cbnz	r1, 341c4 <nrfx_twim_init+0x20>
   341ae:	492e      	ldr	r1, [pc, #184]	; (34268 <nrfx_twim_init+0xc4>)
   341b0:	482e      	ldr	r0, [pc, #184]	; (3426c <nrfx_twim_init+0xc8>)
   341b2:	f240 1215 	movw	r2, #277	; 0x115
   341b6:	f004 fcac 	bl	38b12 <assert_print>
   341ba:	482b      	ldr	r0, [pc, #172]	; (34268 <nrfx_twim_init+0xc4>)
   341bc:	f240 1115 	movw	r1, #277	; 0x115
   341c0:	f004 fca0 	bl	38b04 <assert_post_action>
    twim_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   341c4:	f890 8004 	ldrb.w	r8, [r0, #4]
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   341c8:	4d29      	ldr	r5, [pc, #164]	; (34270 <nrfx_twim_init+0xcc>)
   341ca:	2734      	movs	r7, #52	; 0x34
   341cc:	fb07 f708 	mul.w	r7, r7, r8
   341d0:	19e9      	adds	r1, r5, r7
   341d2:	f891 002d 	ldrb.w	r0, [r1, #45]	; 0x2d
   341d6:	2800      	cmp	r0, #0
   341d8:	d143      	bne.n	34262 <nrfx_twim_init+0xbe>
    NRF_TWIM_Type * p_twim = p_instance->p_twim;
   341da:	f8d6 9000 	ldr.w	r9, [r6]
    p_cb->handler         = event_handler;
   341de:	51ea      	str	r2, [r5, r7]
    p_cb->int_mask        = 0;
   341e0:	6088      	str	r0, [r1, #8]
    p_cb->p_context       = p_context;
   341e2:	604b      	str	r3, [r1, #4]
    p_cb->repeated        = false;
   341e4:	f881 0030 	strb.w	r0, [r1, #48]	; 0x30
    p_cb->busy            = false;
   341e8:	f881 002f 	strb.w	r0, [r1, #47]	; 0x2f
    p_cb->hold_bus_uninit = p_config->hold_bus_uninit;
   341ec:	7b63      	ldrb	r3, [r4, #13]
   341ee:	f881 3032 	strb.w	r3, [r1, #50]	; 0x32
    p_cb->skip_gpio_cfg   = p_config->skip_gpio_cfg;
   341f2:	7ba3      	ldrb	r3, [r4, #14]
   341f4:	f881 3033 	strb.w	r3, [r1, #51]	; 0x33
    if (p_config->skip_gpio_cfg && p_config->skip_psel_cfg)
   341f8:	b1f3      	cbz	r3, 34238 <nrfx_twim_init+0x94>
   341fa:	7be3      	ldrb	r3, [r4, #15]
   341fc:	b92b      	cbnz	r3, 3420a <nrfx_twim_init+0x66>
        nrf_twim_pins_set(p_twim, p_config->scl, p_config->sda);
   341fe:	e9d4 2300 	ldrd	r2, r3, [r4]
    p_reg->PSEL.SCL = scl_pin;
   34202:	f8c9 2508 	str.w	r2, [r9, #1288]	; 0x508
    p_reg->PSEL.SDA = sda_pin;
   34206:	f8c9 350c 	str.w	r3, [r9, #1292]	; 0x50c
    nrf_twim_frequency_set(p_twim, (nrf_twim_frequency_t)p_config->frequency);
   3420a:	68a3      	ldr	r3, [r4, #8]
    p_reg->FREQUENCY = frequency;
   3420c:	f8c9 3524 	str.w	r3, [r9, #1316]	; 0x524
    if (p_cb->handler)
   34210:	2334      	movs	r3, #52	; 0x34
   34212:	fb03 f308 	mul.w	r3, r3, r8
   34216:	58eb      	ldr	r3, [r5, r3]
   34218:	b123      	cbz	r3, 34224 <nrfx_twim_init+0x80>
   3421a:	6830      	ldr	r0, [r6, #0]
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_twim));
   3421c:	f340 3007 	sbfx	r0, r0, #12, #8
   34220:	f7f2 fe36 	bl	26e90 <arch_irq_enable>
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   34224:	2334      	movs	r3, #52	; 0x34
   34226:	fb03 5508 	mla	r5, r3, r8, r5
    return err_code;
   3422a:	4812      	ldr	r0, [pc, #72]	; (34274 <nrfx_twim_init+0xd0>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   3422c:	2301      	movs	r3, #1
   3422e:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
}
   34232:	b002      	add	sp, #8
   34234:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        TWIM_PIN_INIT(p_config->scl, drive);
   34238:	6827      	ldr	r7, [r4, #0]
   3423a:	9701      	str	r7, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   3423c:	a801      	add	r0, sp, #4
   3423e:	f7ff fec9 	bl	33fd4 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   34242:	f507 77e0 	add.w	r7, r7, #448	; 0x1c0
   34246:	f240 6a0c 	movw	sl, #1548	; 0x60c
   3424a:	f840 a027 	str.w	sl, [r0, r7, lsl #2]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   3424e:	a801      	add	r0, sp, #4
        TWIM_PIN_INIT(p_config->sda, drive);
   34250:	6867      	ldr	r7, [r4, #4]
   34252:	9701      	str	r7, [sp, #4]
   34254:	f7ff febe 	bl	33fd4 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   34258:	f507 77e0 	add.w	r7, r7, #448	; 0x1c0
   3425c:	f840 a027 	str.w	sl, [r0, r7, lsl #2]
    if (!p_config->skip_psel_cfg)
   34260:	e7cb      	b.n	341fa <nrfx_twim_init+0x56>
        return err_code;
   34262:	4805      	ldr	r0, [pc, #20]	; (34278 <nrfx_twim_init+0xd4>)
   34264:	e7e5      	b.n	34232 <nrfx_twim_init+0x8e>
   34266:	bf00      	nop
   34268:	0003fb48 	.word	0x0003fb48
   3426c:	0003d1d7 	.word	0x0003d1d7
   34270:	20003274 	.word	0x20003274
   34274:	0bad0000 	.word	0x0bad0000
   34278:	0bad0005 	.word	0x0bad0005

0003427c <nrfx_twim_enable>:
{
   3427c:	b508      	push	{r3, lr}
    NRFX_ASSERT(p_cb->state == NRFX_DRV_STATE_INITIALIZED);
   3427e:	4b0e      	ldr	r3, [pc, #56]	; (342b8 <nrfx_twim_enable+0x3c>)
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   34280:	7902      	ldrb	r2, [r0, #4]
    NRFX_ASSERT(p_cb->state == NRFX_DRV_STATE_INITIALIZED);
   34282:	2134      	movs	r1, #52	; 0x34
   34284:	fb01 3302 	mla	r3, r1, r2, r3
   34288:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
   3428c:	2a01      	cmp	r2, #1
   3428e:	d00a      	beq.n	342a6 <nrfx_twim_enable+0x2a>
   34290:	490a      	ldr	r1, [pc, #40]	; (342bc <nrfx_twim_enable+0x40>)
   34292:	480b      	ldr	r0, [pc, #44]	; (342c0 <nrfx_twim_enable+0x44>)
   34294:	f240 1279 	movw	r2, #377	; 0x179
   34298:	f004 fc3b 	bl	38b12 <assert_print>
   3429c:	4807      	ldr	r0, [pc, #28]	; (342bc <nrfx_twim_enable+0x40>)
   3429e:	f240 1179 	movw	r1, #377	; 0x179
   342a2:	f004 fc2f 	bl	38b04 <assert_post_action>
    nrf_twim_enable(p_instance->p_twim);
   342a6:	6802      	ldr	r2, [r0, #0]
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
   342a8:	2106      	movs	r1, #6
   342aa:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
   342ae:	2202      	movs	r2, #2
   342b0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
   342b4:	bd08      	pop	{r3, pc}
   342b6:	bf00      	nop
   342b8:	20003274 	.word	0x20003274
   342bc:	0003fb48 	.word	0x0003fb48
   342c0:	0003d1d7 	.word	0x0003d1d7

000342c4 <nrfx_twim_disable>:
{
   342c4:	b508      	push	{r3, lr}
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   342c6:	4b13      	ldr	r3, [pc, #76]	; (34314 <nrfx_twim_disable+0x50>)
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   342c8:	7902      	ldrb	r2, [r0, #4]
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   342ca:	2134      	movs	r1, #52	; 0x34
   342cc:	fb01 3302 	mla	r3, r1, r2, r3
   342d0:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
   342d4:	b952      	cbnz	r2, 342ec <nrfx_twim_disable+0x28>
   342d6:	4910      	ldr	r1, [pc, #64]	; (34318 <nrfx_twim_disable+0x54>)
   342d8:	4810      	ldr	r0, [pc, #64]	; (3431c <nrfx_twim_disable+0x58>)
   342da:	f44f 72c2 	mov.w	r2, #388	; 0x184
   342de:	f004 fc18 	bl	38b12 <assert_print>
   342e2:	480d      	ldr	r0, [pc, #52]	; (34318 <nrfx_twim_disable+0x54>)
   342e4:	f44f 71c2 	mov.w	r1, #388	; 0x184
   342e8:	f004 fc0c 	bl	38b04 <assert_post_action>
    NRF_TWIM_Type * p_twim = p_instance->p_twim;
   342ec:	6802      	ldr	r2, [r0, #0]
    p_reg->INTENCLR = mask;
   342ee:	480c      	ldr	r0, [pc, #48]	; (34320 <nrfx_twim_disable+0x5c>)
    p_cb->int_mask = 0;
   342f0:	2100      	movs	r1, #0
   342f2:	6099      	str	r1, [r3, #8]
   342f4:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    p_reg->SHORTS &= ~(mask);
   342f8:	f8d2 0200 	ldr.w	r0, [r2, #512]	; 0x200
   342fc:	f420 50bc 	bic.w	r0, r0, #6016	; 0x1780
   34300:	f8c2 0200 	str.w	r0, [r2, #512]	; 0x200
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
   34304:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   34308:	2201      	movs	r2, #1
   3430a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    p_cb->busy = false;
   3430e:	f883 102f 	strb.w	r1, [r3, #47]	; 0x2f
}
   34312:	bd08      	pop	{r3, pc}
   34314:	20003274 	.word	0x20003274
   34318:	0003fb48 	.word	0x0003fb48
   3431c:	0003d1d7 	.word	0x0003d1d7
   34320:	019c0202 	.word	0x019c0202

00034324 <nrfx_twim_xfer>:
{
   34324:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    NRFX_ASSERT(TWIM_LENGTH_VALIDATE(p_instance->drv_inst_idx,
   34328:	f890 e004 	ldrb.w	lr, [r0, #4]
   3432c:	f1be 0f01 	cmp.w	lr, #1
{
   34330:	460d      	mov	r5, r1
   34332:	4616      	mov	r6, r2
    NRFX_ASSERT(TWIM_LENGTH_VALIDATE(p_instance->drv_inst_idx,
   34334:	d805      	bhi.n	34342 <nrfx_twim_xfer+0x1e>
   34336:	684b      	ldr	r3, [r1, #4]
   34338:	2bff      	cmp	r3, #255	; 0xff
   3433a:	d802      	bhi.n	34342 <nrfx_twim_xfer+0x1e>
   3433c:	688b      	ldr	r3, [r1, #8]
   3433e:	2bff      	cmp	r3, #255	; 0xff
   34340:	d90a      	bls.n	34358 <nrfx_twim_xfer+0x34>
   34342:	49b3      	ldr	r1, [pc, #716]	; (34610 <nrfx_twim_xfer+0x2ec>)
   34344:	48b3      	ldr	r0, [pc, #716]	; (34614 <nrfx_twim_xfer+0x2f0>)
   34346:	f240 2299 	movw	r2, #665	; 0x299
   3434a:	f004 fbe2 	bl	38b12 <assert_print>
   3434e:	f240 2199 	movw	r1, #665	; 0x299
    NRFX_ASSERT( !((p_cb->handler == NULL) && (p_xfer_desc->type == NRFX_TWIM_XFER_TXRX)));
   34352:	48af      	ldr	r0, [pc, #700]	; (34610 <nrfx_twim_xfer+0x2ec>)
   34354:	f004 fbd6 	bl	38b04 <assert_post_action>
   34358:	2334      	movs	r3, #52	; 0x34
   3435a:	f8df c2bc 	ldr.w	ip, [pc, #700]	; 34618 <nrfx_twim_xfer+0x2f4>
   3435e:	fb03 f30e 	mul.w	r3, r3, lr
   34362:	f85c 3003 	ldr.w	r3, [ip, r3]
   34366:	b9b3      	cbnz	r3, 34396 <nrfx_twim_xfer+0x72>
   34368:	780b      	ldrb	r3, [r1, #0]
   3436a:	2b02      	cmp	r3, #2
   3436c:	d108      	bne.n	34380 <nrfx_twim_xfer+0x5c>
   3436e:	49a8      	ldr	r1, [pc, #672]	; (34610 <nrfx_twim_xfer+0x2ec>)
   34370:	48a8      	ldr	r0, [pc, #672]	; (34614 <nrfx_twim_xfer+0x2f0>)
   34372:	f240 22a1 	movw	r2, #673	; 0x2a1
   34376:	f004 fbcc 	bl	38b12 <assert_print>
   3437a:	f240 21a1 	movw	r1, #673	; 0x2a1
   3437e:	e7e8      	b.n	34352 <nrfx_twim_xfer+0x2e>
    NRFX_ASSERT( !((p_cb->handler == NULL) && (p_xfer_desc->type == NRFX_TWIM_XFER_TXTX)));
   34380:	2b03      	cmp	r3, #3
   34382:	d108      	bne.n	34396 <nrfx_twim_xfer+0x72>
   34384:	49a2      	ldr	r1, [pc, #648]	; (34610 <nrfx_twim_xfer+0x2ec>)
   34386:	48a3      	ldr	r0, [pc, #652]	; (34614 <nrfx_twim_xfer+0x2f0>)
   34388:	f240 22a2 	movw	r2, #674	; 0x2a2
   3438c:	f004 fbc1 	bl	38b12 <assert_print>
   34390:	f240 21a2 	movw	r1, #674	; 0x2a2
   34394:	e7dd      	b.n	34352 <nrfx_twim_xfer+0x2e>
    p_cb->error = false;
   34396:	2334      	movs	r3, #52	; 0x34
   34398:	fb03 c30e 	mla	r3, r3, lr, ip
   3439c:	2200      	movs	r2, #0
    err_code = twim_xfer(p_cb, (NRF_TWIM_Type *)p_instance->p_twim, p_xfer_desc, flags);
   3439e:	6804      	ldr	r4, [r0, #0]
    p_cb->error = false;
   343a0:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
    if (p_xfer_desc->primary_length != 0 && !nrfx_is_in_ram(p_xfer_desc->p_primary_buf))
   343a4:	686b      	ldr	r3, [r5, #4]
   343a6:	b14b      	cbz	r3, 343bc <nrfx_twim_xfer+0x98>
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   343a8:	68eb      	ldr	r3, [r5, #12]
   343aa:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
   343ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   343b2:	d003      	beq.n	343bc <nrfx_twim_xfer+0x98>
        return err_code;
   343b4:	4f99      	ldr	r7, [pc, #612]	; (3461c <nrfx_twim_xfer+0x2f8>)
}
   343b6:	4638      	mov	r0, r7
   343b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (p_cb->busy)
   343bc:	2734      	movs	r7, #52	; 0x34
    p_reg->INTENCLR = mask;
   343be:	4b98      	ldr	r3, [pc, #608]	; (34620 <nrfx_twim_xfer+0x2fc>)
   343c0:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
   343c4:	fb07 c70e 	mla	r7, r7, lr, ip
   343c8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   343cc:	f003 0aff 	and.w	sl, r3, #255	; 0xff
   343d0:	b123      	cbz	r3, 343dc <nrfx_twim_xfer+0xb8>
        nrf_twim_int_enable(p_twim, p_cb->int_mask);
   343d2:	68bb      	ldr	r3, [r7, #8]
    p_reg->INTENSET = mask;
   343d4:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
        return err_code;
   343d8:	4f92      	ldr	r7, [pc, #584]	; (34624 <nrfx_twim_xfer+0x300>)
   343da:	e7ec      	b.n	343b6 <nrfx_twim_xfer+0x92>
                      (NRFX_TWIM_FLAG_REPEATED_XFER & flags)) ? false: true;
   343dc:	f016 0f14 	tst.w	r6, #20
   343e0:	bf0c      	ite	eq
   343e2:	2301      	moveq	r3, #1
   343e4:	2300      	movne	r3, #0
        p_cb->busy = ((NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER & flags) ||
   343e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    p_cb->xfer_desc = *p_xfer_desc;
   343ea:	46a9      	mov	r9, r5
   343ec:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
   343f0:	f107 080c 	add.w	r8, r7, #12
   343f4:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
   343f8:	f8d9 3000 	ldr.w	r3, [r9]
   343fc:	f8c8 3000 	str.w	r3, [r8]
    p_cb->repeated = (flags & NRFX_TWIM_FLAG_REPEATED_XFER) ? true : false;
   34400:	f3c6 1300 	ubfx	r3, r6, #4, #1
   34404:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    p_cb->flags = flags;
   34408:	623e      	str	r6, [r7, #32]
    p_reg->ADDRESS = address;
   3440a:	786b      	ldrb	r3, [r5, #1]
   3440c:	f8c4 3588 	str.w	r3, [r4, #1416]	; 0x588
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   34410:	f8c4 a104 	str.w	sl, [r4, #260]	; 0x104
   34414:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   34418:	f8c4 a124 	str.w	sl, [r4, #292]	; 0x124
   3441c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   34420:	f8c4 a160 	str.w	sl, [r4, #352]	; 0x160
   34424:	f8d4 3160 	ldr.w	r3, [r4, #352]	; 0x160
   34428:	f8c4 a148 	str.w	sl, [r4, #328]	; 0x148
   3442c:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    if (NRFX_TWIM_FLAG_TX_POSTINC & flags)
   34430:	f016 0301 	ands.w	r3, r6, #1
    return p_reg->RXD.AMOUNT;
}

NRF_STATIC_INLINE void nrf_twim_tx_list_enable(NRF_TWIM_Type * p_reg)
{
    p_reg->TXD.LIST = TWIM_TXD_LIST_LIST_ArrayList << TWIM_TXD_LIST_LIST_Pos;
   34434:	bf18      	it	ne
   34436:	2301      	movne	r3, #1
}

NRF_STATIC_INLINE void nrf_twim_tx_list_disable(NRF_TWIM_Type * p_reg)
{
    p_reg->TXD.LIST = TWIM_TXD_LIST_LIST_Disabled << TWIM_TXD_LIST_LIST_Pos;
   34438:	f8c4 3550 	str.w	r3, [r4, #1360]	; 0x550
    if (NRFX_TWIM_FLAG_RX_POSTINC & flags)
   3443c:	f016 0302 	ands.w	r3, r6, #2
}

NRF_STATIC_INLINE void nrf_twim_rx_list_enable(NRF_TWIM_Type * p_reg)
{
    p_reg->RXD.LIST = TWIM_RXD_LIST_LIST_ArrayList << TWIM_RXD_LIST_LIST_Pos;
   34440:	bf18      	it	ne
   34442:	2301      	movne	r3, #1
}

NRF_STATIC_INLINE void nrf_twim_rx_list_disable(NRF_TWIM_Type * p_reg)
{
    p_reg->RXD.LIST = TWIM_RXD_LIST_LIST_Disabled << TWIM_RXD_LIST_LIST_Pos;
   34444:	f8c4 3540 	str.w	r3, [r4, #1344]	; 0x540
    switch (p_xfer_desc->type)
   34448:	782b      	ldrb	r3, [r5, #0]
   3444a:	2b03      	cmp	r3, #3
   3444c:	f200 80dd 	bhi.w	3460a <nrfx_twim_xfer+0x2e6>
   34450:	e8df f003 	tbb	[pc, r3]
   34454:	0291c8af 	.word	0x0291c8af
        NRFX_ASSERT(!(flags & NRFX_TWIM_FLAG_REPEATED_XFER));
   34458:	06f3      	lsls	r3, r6, #27
   3445a:	d508      	bpl.n	3446e <nrfx_twim_xfer+0x14a>
   3445c:	496c      	ldr	r1, [pc, #432]	; (34610 <nrfx_twim_xfer+0x2ec>)
   3445e:	486d      	ldr	r0, [pc, #436]	; (34614 <nrfx_twim_xfer+0x2f0>)
   34460:	f240 12dd 	movw	r2, #477	; 0x1dd
   34464:	f004 fb55 	bl	38b12 <assert_print>
   34468:	f240 11dd 	movw	r1, #477	; 0x1dd
   3446c:	e771      	b.n	34352 <nrfx_twim_xfer+0x2e>
        NRFX_ASSERT(!(flags & NRFX_TWIM_FLAG_HOLD_XFER));
   3446e:	0737      	lsls	r7, r6, #28
   34470:	d508      	bpl.n	34484 <nrfx_twim_xfer+0x160>
   34472:	4967      	ldr	r1, [pc, #412]	; (34610 <nrfx_twim_xfer+0x2ec>)
   34474:	4867      	ldr	r0, [pc, #412]	; (34614 <nrfx_twim_xfer+0x2f0>)
   34476:	f44f 72ef 	mov.w	r2, #478	; 0x1de
   3447a:	f004 fb4a 	bl	38b12 <assert_print>
   3447e:	f44f 71ef 	mov.w	r1, #478	; 0x1de
   34482:	e766      	b.n	34352 <nrfx_twim_xfer+0x2e>
        NRFX_ASSERT(!(flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER));
   34484:	f016 0204 	ands.w	r2, r6, #4
   34488:	d008      	beq.n	3449c <nrfx_twim_xfer+0x178>
   3448a:	4961      	ldr	r1, [pc, #388]	; (34610 <nrfx_twim_xfer+0x2ec>)
   3448c:	4861      	ldr	r0, [pc, #388]	; (34614 <nrfx_twim_xfer+0x2f0>)
   3448e:	f240 12df 	movw	r2, #479	; 0x1df
   34492:	f004 fb3e 	bl	38b12 <assert_print>
   34496:	f240 11df 	movw	r1, #479	; 0x1df
   3449a:	e75a      	b.n	34352 <nrfx_twim_xfer+0x2e>
   3449c:	692b      	ldr	r3, [r5, #16]
   3449e:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
        if (!nrfx_is_in_ram(p_xfer_desc->p_secondary_buf))
   344a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   344a6:	d185      	bne.n	343b4 <nrfx_twim_xfer+0x90>
    p_reg->SHORTS = mask;
   344a8:	f44f 7380 	mov.w	r3, #256	; 0x100
   344ac:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
   344b0:	686b      	ldr	r3, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   344b2:	68e9      	ldr	r1, [r5, #12]
   344b4:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   344b8:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   344bc:	f8c4 2150 	str.w	r2, [r4, #336]	; 0x150
   344c0:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   344c4:	2301      	movs	r3, #1
   344c6:	6223      	str	r3, [r4, #32]
   344c8:	60a3      	str	r3, [r4, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   344ca:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
        while (!nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_TXSTARTED))
   344ce:	2b00      	cmp	r3, #0
   344d0:	d0fb      	beq.n	344ca <nrfx_twim_xfer+0x1a6>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   344d2:	2300      	movs	r3, #0
   344d4:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150
   344d8:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   344dc:	692a      	ldr	r2, [r5, #16]
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_secondary_buf, p_xfer_desc->secondary_length);
   344de:	68ab      	ldr	r3, [r5, #8]
   344e0:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   344e4:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
        p_cb->int_mask = NRF_TWIM_INT_SUSPENDED_MASK;
   344e8:	2334      	movs	r3, #52	; 0x34
   344ea:	fb03 c30e 	mla	r3, r3, lr, ip
   344ee:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   344f2:	609a      	str	r2, [r3, #8]
    nrf_twim_task_t  start_task = NRF_TWIM_TASK_STARTTX;
   344f4:	2308      	movs	r3, #8
    nrfx_err_t err_code = NRFX_SUCCESS;
   344f6:	4f4c      	ldr	r7, [pc, #304]	; (34628 <nrfx_twim_xfer+0x304>)
    if (!(flags & NRFX_TWIM_FLAG_HOLD_XFER) && (p_xfer_desc->type != NRFX_TWIM_XFER_TXTX))
   344f8:	0730      	lsls	r0, r6, #28
   344fa:	d407      	bmi.n	3450c <nrfx_twim_xfer+0x1e8>
   344fc:	782a      	ldrb	r2, [r5, #0]
   344fe:	2a03      	cmp	r2, #3
   34500:	d004      	beq.n	3450c <nrfx_twim_xfer+0x1e8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   34502:	2201      	movs	r2, #1
   34504:	50e2      	str	r2, [r4, r3]
        if (p_xfer_desc->primary_length == 0)
   34506:	686b      	ldr	r3, [r5, #4]
   34508:	b903      	cbnz	r3, 3450c <nrfx_twim_xfer+0x1e8>
   3450a:	6162      	str	r2, [r4, #20]
    if (p_cb->handler)
   3450c:	2334      	movs	r3, #52	; 0x34
   3450e:	fb03 f30e 	mul.w	r3, r3, lr
   34512:	eb0c 0203 	add.w	r2, ip, r3
   34516:	f85c 1003 	ldr.w	r1, [ip, r3]
   3451a:	2900      	cmp	r1, #0
   3451c:	f040 8088 	bne.w	34630 <nrfx_twim_xfer+0x30c>
   34520:	2001      	movs	r0, #1
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   34522:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_SUSPENDED))
   34526:	2b00      	cmp	r3, #0
   34528:	f000 809a 	beq.w	34660 <nrfx_twim_xfer+0x33c>
   3452c:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
   34530:	2b00      	cmp	r3, #0
   34532:	f040 8098 	bne.w	34666 <nrfx_twim_xfer+0x342>
   34536:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_ERROR))
   3453a:	2b00      	cmp	r3, #0
   3453c:	f000 80a7 	beq.w	3468e <nrfx_twim_xfer+0x36a>
                transmission_finished = true;
   34540:	2301      	movs	r3, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   34542:	f8c4 1124 	str.w	r1, [r4, #292]	; 0x124
   34546:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3454a:	f8d4 5160 	ldr.w	r5, [r4, #352]	; 0x160
    return p_reg->SHORTS;
   3454e:	f8d4 2200 	ldr.w	r2, [r4, #512]	; 0x200
                if (!(lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_STOP_MASK)))
   34552:	2d00      	cmp	r5, #0
   34554:	f000 8092 	beq.w	3467c <nrfx_twim_xfer+0x358>
   34558:	f412 7f00 	tst.w	r2, #512	; 0x200
   3455c:	f402 7280 	and.w	r2, r2, #256	; 0x100
   34560:	f040 808f 	bne.w	34682 <nrfx_twim_xfer+0x35e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   34564:	6220      	str	r0, [r4, #32]
   34566:	6160      	str	r0, [r4, #20]
                if (lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_SUSPEND_MASK))
   34568:	2a00      	cmp	r2, #0
   3456a:	d0da      	beq.n	34522 <nrfx_twim_xfer+0x1fe>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3456c:	f8c4 1148 	str.w	r1, [r4, #328]	; 0x148
   34570:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
                    transmission_finished = false;
   34574:	e7d5      	b.n	34522 <nrfx_twim_xfer+0x1fe>
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
   34576:	686b      	ldr	r3, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   34578:	68ea      	ldr	r2, [r5, #12]
   3457a:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   3457e:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
   34582:	692b      	ldr	r3, [r5, #16]
   34584:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
        if (!nrfx_is_in_ram(p_xfer_desc->p_secondary_buf))
   34588:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
   3458c:	f47f af12 	bne.w	343b4 <nrfx_twim_xfer+0x90>
        nrf_twim_rx_buffer_set(p_twim, p_xfer_desc->p_secondary_buf, p_xfer_desc->secondary_length);
   34590:	68aa      	ldr	r2, [r5, #8]
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   34592:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->SHORTS = mask;
   34596:	f44f 5384 	mov.w	r3, #4224	; 0x1080
    p_reg->RXD.MAXCNT = length;
   3459a:	f8c4 2538 	str.w	r2, [r4, #1336]	; 0x538
    p_reg->SHORTS = mask;
   3459e:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   345a2:	2334      	movs	r3, #52	; 0x34
   345a4:	fb03 c30e 	mla	r3, r3, lr, ip
   345a8:	2202      	movs	r2, #2
   345aa:	609a      	str	r2, [r3, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   345ac:	2301      	movs	r3, #1
   345ae:	6223      	str	r3, [r4, #32]
   345b0:	e7a0      	b.n	344f4 <nrfx_twim_xfer+0x1d0>
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
   345b2:	686b      	ldr	r3, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   345b4:	68ea      	ldr	r2, [r5, #12]
   345b6:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
        if (NRFX_TWIM_FLAG_TX_NO_STOP & flags)
   345ba:	f016 0f20 	tst.w	r6, #32
    p_reg->TXD.MAXCNT = length;
   345be:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
   345c2:	f04f 0334 	mov.w	r3, #52	; 0x34
   345c6:	d008      	beq.n	345da <nrfx_twim_xfer+0x2b6>
    p_reg->SHORTS = mask;
   345c8:	f44f 7280 	mov.w	r2, #256	; 0x100
   345cc:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200
            p_cb->int_mask = NRF_TWIM_INT_SUSPENDED_MASK;
   345d0:	fb03 c30e 	mla	r3, r3, lr, ip
   345d4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   345d8:	e7e7      	b.n	345aa <nrfx_twim_xfer+0x286>
   345da:	f44f 7200 	mov.w	r2, #512	; 0x200
   345de:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   345e2:	e7df      	b.n	345a4 <nrfx_twim_xfer+0x280>
        nrf_twim_rx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
   345e4:	686b      	ldr	r3, [r5, #4]
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   345e6:	68ea      	ldr	r2, [r5, #12]
   345e8:	f8c4 2534 	str.w	r2, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   345ec:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    p_reg->SHORTS = mask;
   345f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   345f4:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   345f8:	2334      	movs	r3, #52	; 0x34
   345fa:	fb03 c30e 	mla	r3, r3, lr, ip
   345fe:	2202      	movs	r2, #2
   34600:	609a      	str	r2, [r3, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   34602:	2301      	movs	r3, #1
   34604:	6223      	str	r3, [r4, #32]
        start_task = NRF_TWIM_TASK_STARTRX;
   34606:	2300      	movs	r3, #0
   34608:	e775      	b.n	344f6 <nrfx_twim_xfer+0x1d2>
    switch (p_xfer_desc->type)
   3460a:	4f08      	ldr	r7, [pc, #32]	; (3462c <nrfx_twim_xfer+0x308>)
   3460c:	2308      	movs	r3, #8
   3460e:	e773      	b.n	344f8 <nrfx_twim_xfer+0x1d4>
   34610:	0003fb48 	.word	0x0003fb48
   34614:	0003d1d7 	.word	0x0003d1d7
   34618:	20003274 	.word	0x20003274
   3461c:	0bad000a 	.word	0x0bad000a
   34620:	019c0202 	.word	0x019c0202
   34624:	0bad000b 	.word	0x0bad000b
   34628:	0bad0000 	.word	0x0bad0000
   3462c:	0bad0004 	.word	0x0bad0004
        if (flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER)
   34630:	0771      	lsls	r1, r6, #29
            p_cb->int_mask = 0;
   34632:	bf44      	itt	mi
   34634:	2300      	movmi	r3, #0
   34636:	6093      	strmi	r3, [r2, #8]
        if (!(flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK))
   34638:	0672      	lsls	r2, r6, #25
   3463a:	d406      	bmi.n	3464a <nrfx_twim_xfer+0x326>
            p_cb->int_mask |= NRF_TWIM_INT_STOPPED_MASK;
   3463c:	2334      	movs	r3, #52	; 0x34
   3463e:	fb03 c30e 	mla	r3, r3, lr, ip
   34642:	689a      	ldr	r2, [r3, #8]
   34644:	f042 0202 	orr.w	r2, r2, #2
   34648:	609a      	str	r2, [r3, #8]
        p_cb->int_mask |= NRF_TWIM_INT_ERROR_MASK;
   3464a:	2334      	movs	r3, #52	; 0x34
   3464c:	fb03 c30e 	mla	r3, r3, lr, ip
   34650:	689a      	ldr	r2, [r3, #8]
   34652:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   34656:	609a      	str	r2, [r3, #8]
        nrf_twim_int_enable(p_twim, p_cb->int_mask);
   34658:	689b      	ldr	r3, [r3, #8]
    p_reg->INTENSET = mask;
   3465a:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
}
   3465e:	e6aa      	b.n	343b6 <nrfx_twim_xfer+0x92>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   34660:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
   34664:	b123      	cbz	r3, 34670 <nrfx_twim_xfer+0x34c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   34666:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   3466a:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3466e:	e762      	b.n	34536 <nrfx_twim_xfer+0x212>
   34670:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_ERROR))
   34674:	2a00      	cmp	r2, #0
   34676:	f43f af54 	beq.w	34522 <nrfx_twim_xfer+0x1fe>
   3467a:	e762      	b.n	34542 <nrfx_twim_xfer+0x21e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3467c:	6220      	str	r0, [r4, #32]
   3467e:	6160      	str	r0, [r4, #20]
                if (lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_SUSPEND_MASK))
   34680:	e74f      	b.n	34522 <nrfx_twim_xfer+0x1fe>
   34682:	2a00      	cmp	r2, #0
   34684:	f47f af72 	bne.w	3456c <nrfx_twim_xfer+0x248>
        } while (!transmission_finished);
   34688:	2b00      	cmp	r3, #0
   3468a:	f43f af4a 	beq.w	34522 <nrfx_twim_xfer+0x1fe>
        p_cb->busy = false;
   3468e:	2134      	movs	r1, #52	; 0x34
    uint32_t error_source = p_reg->ERRORSRC;
   34690:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
   34694:	f8c4 34c4 	str.w	r3, [r4, #1220]	; 0x4c4
   34698:	fb01 c20e 	mla	r2, r1, lr, ip
   3469c:	2000      	movs	r0, #0
   3469e:	f882 002f 	strb.w	r0, [r2, #47]	; 0x2f
        if (errorsrc)
   346a2:	b18b      	cbz	r3, 346c8 <nrfx_twim_xfer+0x3a4>
        ret = NRFX_ERROR_DRV_TWI_ERR_OVERRUN;
   346a4:	4a0f      	ldr	r2, [pc, #60]	; (346e4 <nrfx_twim_xfer+0x3c0>)
   346a6:	4f10      	ldr	r7, [pc, #64]	; (346e8 <nrfx_twim_xfer+0x3c4>)
   346a8:	f013 0f01 	tst.w	r3, #1
   346ac:	bf18      	it	ne
   346ae:	4617      	movne	r7, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_ANACK;
   346b0:	f013 0f02 	tst.w	r3, #2
   346b4:	f102 0201 	add.w	r2, r2, #1
   346b8:	bf18      	it	ne
   346ba:	4617      	movne	r7, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_DNACK;
   346bc:	f013 0f04 	tst.w	r3, #4
   346c0:	4b0a      	ldr	r3, [pc, #40]	; (346ec <nrfx_twim_xfer+0x3c8>)
   346c2:	bf18      	it	ne
   346c4:	461f      	movne	r7, r3
   346c6:	e676      	b.n	343b6 <nrfx_twim_xfer+0x92>
            if (!(flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK) &&
   346c8:	0673      	lsls	r3, r6, #25
   346ca:	f53f ae74 	bmi.w	343b6 <nrfx_twim_xfer+0x92>
                !xfer_completeness_check(p_twim, p_cb))
   346ce:	fb0e c101 	mla	r1, lr, r1, ip
   346d2:	4620      	mov	r0, r4
   346d4:	f007 f95c 	bl	3b990 <xfer_completeness_check>
                err_code = NRFX_ERROR_INTERNAL;
   346d8:	4b03      	ldr	r3, [pc, #12]	; (346e8 <nrfx_twim_xfer+0x3c4>)
   346da:	2800      	cmp	r0, #0
   346dc:	bf08      	it	eq
   346de:	461f      	moveq	r7, r3
   346e0:	e669      	b.n	343b6 <nrfx_twim_xfer+0x92>
   346e2:	bf00      	nop
   346e4:	0bae0000 	.word	0x0bae0000
   346e8:	0bad0001 	.word	0x0bad0001
   346ec:	0bae0002 	.word	0x0bae0002

000346f0 <nrfx_twim_0_irq_handler>:

#if NRFX_CHECK(NRFX_TWIM0_ENABLED)
void nrfx_twim_0_irq_handler(void)
{
    twim_irq_handler(NRF_TWIM0, &m_cb[NRFX_TWIM0_INST_IDX]);
   346f0:	4901      	ldr	r1, [pc, #4]	; (346f8 <nrfx_twim_0_irq_handler+0x8>)
   346f2:	4802      	ldr	r0, [pc, #8]	; (346fc <nrfx_twim_0_irq_handler+0xc>)
   346f4:	f7ff bc8a 	b.w	3400c <twim_irq_handler>
   346f8:	20003274 	.word	0x20003274
   346fc:	40003000 	.word	0x40003000

00034700 <nrfx_twim_1_irq_handler>:
#endif

#if NRFX_CHECK(NRFX_TWIM1_ENABLED)
void nrfx_twim_1_irq_handler(void)
{
    twim_irq_handler(NRF_TWIM1, &m_cb[NRFX_TWIM1_INST_IDX]);
   34700:	4902      	ldr	r1, [pc, #8]	; (3470c <nrfx_twim_1_irq_handler+0xc>)
   34702:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
   34706:	f7ff bc81 	b.w	3400c <twim_irq_handler>
   3470a:	bf00      	nop
   3470c:	200032a8 	.word	0x200032a8

00034710 <nrf_gpio_pin_port_decode>:
{
   34710:	b508      	push	{r3, lr}
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   34712:	6802      	ldr	r2, [r0, #0]
    switch (port)
   34714:	0953      	lsrs	r3, r2, #5
   34716:	d104      	bne.n	34722 <nrf_gpio_pin_port_decode+0x12>
    return (mask & (1UL << pin_number)) ? true : false;
   34718:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   3471c:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   3471e:	07db      	lsls	r3, r3, #31
   34720:	d40a      	bmi.n	34738 <nrf_gpio_pin_port_decode+0x28>
   34722:	4907      	ldr	r1, [pc, #28]	; (34740 <nrf_gpio_pin_port_decode+0x30>)
   34724:	4807      	ldr	r0, [pc, #28]	; (34744 <nrf_gpio_pin_port_decode+0x34>)
   34726:	f240 2247 	movw	r2, #583	; 0x247
   3472a:	f004 f9f2 	bl	38b12 <assert_print>
   3472e:	4804      	ldr	r0, [pc, #16]	; (34740 <nrf_gpio_pin_port_decode+0x30>)
   34730:	f240 2147 	movw	r1, #583	; 0x247
   34734:	f004 f9e6 	bl	38b04 <assert_post_action>
}
   34738:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
   3473c:	bd08      	pop	{r3, pc}
   3473e:	bf00      	nop
   34740:	0003ed49 	.word	0x0003ed49
   34744:	0003d1d7 	.word	0x0003d1d7

00034748 <nrfx_twi_twim_bus_recover>:
                                                  NRF_GPIO_PIN_PULLUP,        \
                                                  NRF_GPIO_PIN_S0D1,          \
                                                  NRF_GPIO_PIN_NOSENSE)

nrfx_err_t nrfx_twi_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin)
{
   34748:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   3474c:	460c      	mov	r4, r1
   3474e:	4605      	mov	r5, r0
    nrf_gpio_pin_set(scl_pin);
   34750:	f007 f94e 	bl	3b9f0 <nrf_gpio_pin_set>
    nrf_gpio_pin_set(sda_pin);
   34754:	4620      	mov	r0, r4
   34756:	f007 f94b 	bl	3b9f0 <nrf_gpio_pin_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   3475a:	a801      	add	r0, sp, #4
   3475c:	9501      	str	r5, [sp, #4]
   3475e:	f7ff ffd7 	bl	34710 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   34762:	f505 73e0 	add.w	r3, r5, #448	; 0x1c0
   34766:	f240 660d 	movw	r6, #1549	; 0x60d
   3476a:	f840 6023 	str.w	r6, [r0, r3, lsl #2]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   3476e:	a801      	add	r0, sp, #4
   34770:	9401      	str	r4, [sp, #4]
   34772:	f7ff ffcd 	bl	34710 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   34776:	f504 73e0 	add.w	r3, r4, #448	; 0x1c0
   3477a:	2701      	movs	r7, #1
   3477c:	f840 6023 	str.w	r6, [r0, r3, lsl #2]

    TWI_TWIM_PIN_CONFIGURE(scl_pin);
    TWI_TWIM_PIN_CONFIGURE(sda_pin);
    NRFX_DELAY_US(4);
   34780:	2004      	movs	r0, #4
   34782:	f007 f86e 	bl	3b862 <nrfx_busy_wait>

    for (uint8_t i = 0; i < 9; i++)
   34786:	fa07 f804 	lsl.w	r8, r7, r4
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   3478a:	2609      	movs	r6, #9
   3478c:	40af      	lsls	r7, r5
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   3478e:	a801      	add	r0, sp, #4
   34790:	9401      	str	r4, [sp, #4]
   34792:	f7ff ffbd 	bl	34710 <nrf_gpio_pin_port_decode>
    return p_reg->IN;
   34796:	f8d0 3510 	ldr.w	r3, [r0, #1296]	; 0x510
    {
        if (nrf_gpio_pin_read(sda_pin))
   3479a:	ea18 0f03 	tst.w	r8, r3
   3479e:	d112      	bne.n	347c6 <nrfx_twi_twim_bus_recover+0x7e>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   347a0:	a801      	add	r0, sp, #4
   347a2:	9501      	str	r5, [sp, #4]
   347a4:	f7ff ffb4 	bl	34710 <nrf_gpio_pin_port_decode>
    p_reg->OUTCLR = clr_mask;
   347a8:	f8c0 750c 	str.w	r7, [r0, #1292]	; 0x50c
        }
        else
        {
            // Pulse CLOCK signal
            nrf_gpio_pin_clear(scl_pin);
            NRFX_DELAY_US(4);
   347ac:	2004      	movs	r0, #4
   347ae:	f007 f858 	bl	3b862 <nrfx_busy_wait>
            nrf_gpio_pin_set(scl_pin);
   347b2:	4628      	mov	r0, r5
   347b4:	f007 f91c 	bl	3b9f0 <nrf_gpio_pin_set>
    for (uint8_t i = 0; i < 9; i++)
   347b8:	3e01      	subs	r6, #1
            NRFX_DELAY_US(4);
   347ba:	2004      	movs	r0, #4
   347bc:	f007 f851 	bl	3b862 <nrfx_busy_wait>
    for (uint8_t i = 0; i < 9; i++)
   347c0:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
   347c4:	d1e3      	bne.n	3478e <nrfx_twi_twim_bus_recover+0x46>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   347c6:	a801      	add	r0, sp, #4
   347c8:	9401      	str	r4, [sp, #4]
   347ca:	f7ff ffa1 	bl	34710 <nrf_gpio_pin_port_decode>
    p_reg->OUTCLR = clr_mask;
   347ce:	f8c0 850c 	str.w	r8, [r0, #1292]	; 0x50c
        }
    }

    // Generate a STOP condition on the bus
    nrf_gpio_pin_clear(sda_pin);
    NRFX_DELAY_US(4);
   347d2:	2004      	movs	r0, #4
   347d4:	f007 f845 	bl	3b862 <nrfx_busy_wait>
    nrf_gpio_pin_set(sda_pin);
   347d8:	4620      	mov	r0, r4
   347da:	f007 f909 	bl	3b9f0 <nrf_gpio_pin_set>
    NRFX_DELAY_US(4);
   347de:	2004      	movs	r0, #4
   347e0:	f007 f83f 	bl	3b862 <nrfx_busy_wait>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   347e4:	a801      	add	r0, sp, #4
   347e6:	9401      	str	r4, [sp, #4]
   347e8:	f7ff ff92 	bl	34710 <nrf_gpio_pin_port_decode>
    return p_reg->IN;
   347ec:	f8d0 3510 	ldr.w	r3, [r0, #1296]	; 0x510
    }
    else
    {
        return NRFX_ERROR_INTERNAL;
    }
}
   347f0:	4803      	ldr	r0, [pc, #12]	; (34800 <nrfx_twi_twim_bus_recover+0xb8>)
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   347f2:	40e3      	lsrs	r3, r4
   347f4:	f003 0301 	and.w	r3, r3, #1
   347f8:	1ac0      	subs	r0, r0, r3
   347fa:	b002      	add	sp, #8
   347fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   34800:	0bad0001 	.word	0x0bad0001

00034804 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
   34804:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   34806:	4c11      	ldr	r4, [pc, #68]	; (3484c <_DoInit+0x48>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
   34808:	4a11      	ldr	r2, [pc, #68]	; (34850 <_DoInit+0x4c>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
   3480a:	4912      	ldr	r1, [pc, #72]	; (34854 <_DoInit+0x50>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   3480c:	2303      	movs	r3, #3
   3480e:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
   34810:	6163      	str	r3, [r4, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
   34812:	4b11      	ldr	r3, [pc, #68]	; (34858 <_DoInit+0x54>)
  p->aUp[0].sName         = "Terminal";
   34814:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
   34816:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
   34818:	f44f 6380 	mov.w	r3, #1024	; 0x400
   3481c:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
   3481e:	2300      	movs	r3, #0
   34820:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
   34822:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   34824:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].sName         = "Terminal";
   34826:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
   34828:	4a0c      	ldr	r2, [pc, #48]	; (3485c <_DoInit+0x58>)
   3482a:	6662      	str	r2, [r4, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
   3482c:	2210      	movs	r2, #16
   3482e:	66a2      	str	r2, [r4, #104]	; 0x68
  STRCPY((char*)&p->acID[7], "RTT");
   34830:	1de0      	adds	r0, r4, #7
  p->aDown[0].RdOff         = 0u;
   34832:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
   34834:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   34836:	6763      	str	r3, [r4, #116]	; 0x74
  STRCPY((char*)&p->acID[7], "RTT");
   34838:	f004 fd6d 	bl	39316 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  STRCPY((char*)&p->acID[0], "SEGGER");
   3483c:	4908      	ldr	r1, [pc, #32]	; (34860 <_DoInit+0x5c>)
   3483e:	4620      	mov	r0, r4
   34840:	f004 fd69 	bl	39316 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  p->acID[6] = ' ';
   34844:	2320      	movs	r3, #32
   34846:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
}
   34848:	bd10      	pop	{r4, pc}
   3484a:	bf00      	nop
   3484c:	200032dc 	.word	0x200032dc
   34850:	0003fb84 	.word	0x0003fb84
   34854:	0003fb8d 	.word	0x0003fb8d
   34858:	20004011 	.word	0x20004011
   3485c:	20004001 	.word	0x20004001
   34860:	0003fb91 	.word	0x0003fb91

00034864 <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   34864:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  RdOff = pRing->RdOff;
   34868:	4f21      	ldr	r7, [pc, #132]	; (348f0 <SEGGER_RTT_WriteSkipNoLock+0x8c>)
   3486a:	f04f 0b18 	mov.w	fp, #24
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   3486e:	4614      	mov	r4, r2
  RdOff = pRing->RdOff;
   34870:	fb0b 7200 	mla	r2, fp, r0, r7
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   34874:	4606      	mov	r6, r0
  RdOff = pRing->RdOff;
   34876:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
   34878:	6a55      	ldr	r5, [r2, #36]	; 0x24
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
   3487a:	42ab      	cmp	r3, r5
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   3487c:	4688      	mov	r8, r1
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
   3487e:	d831      	bhi.n	348e4 <SEGGER_RTT_WriteSkipNoLock+0x80>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
   34880:	f8d2 a020 	ldr.w	sl, [r2, #32]
   34884:	ebaa 0905 	sub.w	r9, sl, r5
   34888:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
    if (Avail >= NumBytes) {                            // Case 1)?
   3488c:	4294      	cmp	r4, r2
   3488e:	d811      	bhi.n	348b4 <SEGGER_RTT_WriteSkipNoLock+0x50>
CopyStraight:
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   34890:	2318      	movs	r3, #24
   34892:	fb06 3303 	mla	r3, r6, r3, r3
   34896:	443b      	add	r3, r7
      memcpy((void*)pDst, pData, NumBytes);
   34898:	4622      	mov	r2, r4
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   3489a:	6858      	ldr	r0, [r3, #4]
      memcpy((void*)pDst, pData, NumBytes);
   3489c:	4641      	mov	r1, r8
   3489e:	4428      	add	r0, r5
   348a0:	f004 fd86 	bl	393b0 <memcpy>
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = WrOff + NumBytes;
   348a4:	442c      	add	r4, r5
      if (NumBytes) {
        pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
        memcpy((void*)pDst, pData + Rem, NumBytes);
      }
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = NumBytes;
   348a6:	2318      	movs	r3, #24
   348a8:	fb03 7306 	mla	r3, r3, r6, r7
      return 1;
   348ac:	2001      	movs	r0, #1
      pRing->WrOff = NumBytes;
   348ae:	625c      	str	r4, [r3, #36]	; 0x24
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
}
   348b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Avail += RdOff;                                     // Space incl. wrap-around
   348b4:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
   348b6:	429c      	cmp	r4, r3
   348b8:	d818      	bhi.n	348ec <SEGGER_RTT_WriteSkipNoLock+0x88>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   348ba:	fb00 bb0b 	mla	fp, r0, fp, fp
   348be:	44bb      	add	fp, r7
      memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
   348c0:	464a      	mov	r2, r9
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   348c2:	f8db 0004 	ldr.w	r0, [fp, #4]
   348c6:	442c      	add	r4, r5
      memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
   348c8:	4428      	add	r0, r5
   348ca:	f004 fd71 	bl	393b0 <memcpy>
      if (NumBytes) {
   348ce:	ebb4 040a 	subs.w	r4, r4, sl
   348d2:	d0e8      	beq.n	348a6 <SEGGER_RTT_WriteSkipNoLock+0x42>
        memcpy((void*)pDst, pData + Rem, NumBytes);
   348d4:	f8db 0004 	ldr.w	r0, [fp, #4]
   348d8:	4622      	mov	r2, r4
   348da:	eb08 0109 	add.w	r1, r8, r9
   348de:	f004 fd67 	bl	393b0 <memcpy>
      return 1;
   348e2:	e7e0      	b.n	348a6 <SEGGER_RTT_WriteSkipNoLock+0x42>
    Avail = RdOff - WrOff - 1u;
   348e4:	3b01      	subs	r3, #1
   348e6:	1b5b      	subs	r3, r3, r5
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
   348e8:	42a3      	cmp	r3, r4
   348ea:	d2d1      	bcs.n	34890 <SEGGER_RTT_WriteSkipNoLock+0x2c>
  return 0;     // No space in buffer
   348ec:	2000      	movs	r0, #0
   348ee:	e7df      	b.n	348b0 <SEGGER_RTT_WriteSkipNoLock+0x4c>
   348f0:	200032dc 	.word	0x200032dc

000348f4 <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  v = pRing->RdOff;
   348f4:	4b03      	ldr	r3, [pc, #12]	; (34904 <SEGGER_RTT_HasDataUp+0x10>)
   348f6:	2218      	movs	r2, #24
   348f8:	fb02 3300 	mla	r3, r2, r0, r3
   348fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  return pRing->WrOff - v;
   348fe:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
   34900:	1a80      	subs	r0, r0, r2
   34902:	4770      	bx	lr
   34904:	200032dc 	.word	0x200032dc

00034908 <zephyr_rtt_mutex_lock>:
	return z_impl_k_mutex_lock(mutex, timeout);
   34908:	4803      	ldr	r0, [pc, #12]	; (34918 <zephyr_rtt_mutex_lock+0x10>)
   3490a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   3490e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   34912:	f000 bcef 	b.w	352f4 <z_impl_k_mutex_lock>
   34916:	bf00      	nop
   34918:	20000b88 	.word	0x20000b88

0003491c <zephyr_rtt_mutex_unlock>:
	return z_impl_k_mutex_unlock(mutex);
   3491c:	4801      	ldr	r0, [pc, #4]	; (34924 <zephyr_rtt_mutex_unlock+0x8>)
   3491e:	f000 bd9f 	b.w	35460 <z_impl_k_mutex_unlock>
   34922:	bf00      	nop
   34924:	20000b88 	.word	0x20000b88

00034928 <get_result_len>:
	return true;
}


static uint_fast32_t get_result_len(const void *const input, uint_fast32_t max_result_len)
{
   34928:	4603      	mov	r3, r0
   3492a:	4608      	mov	r0, r1
	uint8_t *u8_result  = (uint8_t *)input;
	uint_fast32_t len = max_result_len;

	for (; len > 0; len--) {
   3492c:	b900      	cbnz	r0, 34930 <get_result_len+0x8>
   3492e:	4770      	bx	lr
#ifdef CONFIG_BIG_ENDIAN
		if (u8_result[max_result_len - len] != 0) {
#else
		if (u8_result[len - 1] != 0) {
   34930:	1e42      	subs	r2, r0, #1
   34932:	5c99      	ldrb	r1, [r3, r2]
   34934:	b909      	cbnz	r1, 3493a <get_result_len+0x12>
	for (; len > 0; len--) {
   34936:	4610      	mov	r0, r2
   34938:	e7f8      	b.n	3492c <get_result_len+0x4>
			break;
		}
	}

	/* Round up to nearest power of 2. */
	return len <= 2 ? len : (uint8_t)(1 << log2ceil(len));
   3493a:	2802      	cmp	r0, #2
   3493c:	d907      	bls.n	3494e <get_result_len+0x26>
	switch(val) {
   3493e:	3802      	subs	r0, #2
   34940:	2806      	cmp	r0, #6
   34942:	bf9a      	itte	ls
   34944:	4b02      	ldrls	r3, [pc, #8]	; (34950 <get_result_len+0x28>)
   34946:	5c1b      	ldrbls	r3, [r3, r0]
	return len <= 2 ? len : (uint8_t)(1 << log2ceil(len));
   34948:	2300      	movhi	r3, #0
   3494a:	2001      	movs	r0, #1
   3494c:	4098      	lsls	r0, r3
}
   3494e:	4770      	bx	lr
   34950:	0003fb98 	.word	0x0003fb98

00034954 <value_encode_len>:
{
   34954:	b570      	push	{r4, r5, r6, lr}
   34956:	461c      	mov	r4, r3

static uint_fast32_t get_encoded_len(const void *const result, uint_fast32_t result_len)
{
	const uint8_t *u8_result  = (const uint8_t *)result;

	if ((result_len == 1) && (u8_result[0] <= ZCBOR_VALUE_IN_HEADER)) {
   34958:	2c01      	cmp	r4, #1
	if ((state->payload + 1 + encoded_len) > state->payload_end) {
   3495a:	6803      	ldr	r3, [r0, #0]
{
   3495c:	4605      	mov	r5, r0
   3495e:	4616      	mov	r6, r2
	if ((state->payload + 1 + encoded_len) > state->payload_end) {
   34960:	68c0      	ldr	r0, [r0, #12]
	if ((result_len == 1) && (u8_result[0] <= ZCBOR_VALUE_IN_HEADER)) {
   34962:	d116      	bne.n	34992 <value_encode_len+0x3e>
   34964:	7812      	ldrb	r2, [r2, #0]
   34966:	2a17      	cmp	r2, #23
   34968:	d904      	bls.n	34974 <value_encode_len+0x20>
	if ((state->payload + 1 + encoded_len) > state->payload_end) {
   3496a:	3302      	adds	r3, #2
   3496c:	4298      	cmp	r0, r3
   3496e:	d314      	bcc.n	3499a <value_encode_len+0x46>
	return len == 0 ? value0 : (uint8_t)(24 + log2ceil(len));
   34970:	2300      	movs	r3, #0
   34972:	e020      	b.n	349b6 <value_encode_len+0x62>
	if ((state->payload + 1 + encoded_len) > state->payload_end) {
   34974:	3301      	adds	r3, #1
   34976:	4298      	cmp	r0, r3
   34978:	d30f      	bcc.n	3499a <value_encode_len+0x46>
		return 0;
   3497a:	2400      	movs	r4, #0
	if (!encode_header_byte(state, major_type,
   3497c:	4628      	mov	r0, r5
   3497e:	f007 f86f 	bl	3ba60 <encode_header_byte>
   34982:	b170      	cbz	r0, 349a2 <value_encode_len+0x4e>
   34984:	4434      	add	r4, r6
	for (; encoded_len > 0; encoded_len--) {
   34986:	42b4      	cmp	r4, r6
   34988:	d118      	bne.n	349bc <_flash_used>
	state->elem_count++;
   3498a:	68ab      	ldr	r3, [r5, #8]
   3498c:	3301      	adds	r3, #1
   3498e:	60ab      	str	r3, [r5, #8]
	return true;
   34990:	e008      	b.n	349a4 <value_encode_len+0x50>
	if ((state->payload + 1 + encoded_len) > state->payload_end) {
   34992:	1c62      	adds	r2, r4, #1
   34994:	4413      	add	r3, r2
   34996:	4298      	cmp	r0, r3
   34998:	d205      	bcs.n	349a6 <value_encode_len+0x52>
		ZCBOR_ERR(ZCBOR_ERR_NO_PAYLOAD);
   3499a:	6968      	ldr	r0, [r5, #20]
   3499c:	2108      	movs	r1, #8
   3499e:	f007 f85c 	bl	3ba5a <zcbor_error.isra.0>
   349a2:	2000      	movs	r0, #0
}
   349a4:	bd70      	pop	{r4, r5, r6, pc}
	return len == 0 ? value0 : (uint8_t)(24 + log2ceil(len));
   349a6:	b90c      	cbnz	r4, 349ac <value_encode_len+0x58>
	if (!encode_header_byte(state, major_type,
   349a8:	7832      	ldrb	r2, [r6, #0]
   349aa:	e7e7      	b.n	3497c <value_encode_len+0x28>
	switch(val) {
   349ac:	1ea3      	subs	r3, r4, #2
   349ae:	2b06      	cmp	r3, #6
   349b0:	d8de      	bhi.n	34970 <value_encode_len+0x1c>
   349b2:	4a06      	ldr	r2, [pc, #24]	; (349cc <_flash_used+0x10>)
   349b4:	5cd3      	ldrb	r3, [r2, r3]
	return len == 0 ? value0 : (uint8_t)(24 + log2ceil(len));
   349b6:	3318      	adds	r3, #24
   349b8:	b2da      	uxtb	r2, r3
   349ba:	e7df      	b.n	3497c <value_encode_len+0x28>
		*(state->payload_mut++) = u8_result[encoded_len - 1];
   349bc:	682b      	ldr	r3, [r5, #0]
   349be:	1c5a      	adds	r2, r3, #1
   349c0:	602a      	str	r2, [r5, #0]
   349c2:	f814 2d01 	ldrb.w	r2, [r4, #-1]!
   349c6:	701a      	strb	r2, [r3, #0]
	for (; encoded_len > 0; encoded_len--) {
   349c8:	e7dd      	b.n	34986 <value_encode_len+0x32>
   349ca:	bf00      	nop
   349cc:	0003fb98 	.word	0x0003fb98

000349d0 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   349d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   349d4:	b086      	sub	sp, #24
   349d6:	4604      	mov	r4, r0
   349d8:	af00      	add	r7, sp, #0
   349da:	460e      	mov	r6, r1
	__asm__ volatile(
   349dc:	f04f 0340 	mov.w	r3, #64	; 0x40
   349e0:	f3ef 8911 	mrs	r9, BASEPRI
   349e4:	f383 8812 	msr	BASEPRI_MAX, r3
   349e8:	f3bf 8f6f 	isb	sy
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   349ec:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 34ae0 <z_fatal_error+0x110>
	return z_impl_z_current_get();
   349f0:	f002 fb84 	bl	370fc <z_impl_z_current_get>
   349f4:	f8d8 3000 	ldr.w	r3, [r8]
   349f8:	0759      	lsls	r1, r3, #29
   349fa:	4605      	mov	r5, r0
   349fc:	d06c      	beq.n	34ad8 <z_fatal_error+0x108>
	switch (reason) {
   349fe:	2c04      	cmp	r4, #4
   34a00:	bf96      	itet	ls
   34a02:	4b38      	ldrls	r3, [pc, #224]	; (34ae4 <z_fatal_error+0x114>)
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   34a04:	4b38      	ldrhi	r3, [pc, #224]	; (34ae8 <z_fatal_error+0x118>)
   34a06:	f853 3024 	ldrls.w	r3, [r3, r4, lsl #2]
   34a0a:	46ea      	mov	sl, sp
   34a0c:	b08a      	sub	sp, #40	; 0x28
   34a0e:	466a      	mov	r2, sp
   34a10:	4936      	ldr	r1, [pc, #216]	; (34aec <z_fatal_error+0x11c>)
   34a12:	61d3      	str	r3, [r2, #28]
   34a14:	e9c2 1405 	strd	r1, r4, [r2, #20]
   34a18:	f240 3101 	movw	r1, #769	; 0x301
   34a1c:	8491      	strh	r1, [r2, #36]	; 0x24
   34a1e:	2300      	movs	r3, #0
   34a20:	4933      	ldr	r1, [pc, #204]	; (34af0 <z_fatal_error+0x120>)
   34a22:	6213      	str	r3, [r2, #32]
   34a24:	f842 1f10 	str.w	r1, [r2, #16]!
   34a28:	482d      	ldr	r0, [pc, #180]	; (34ae0 <z_fatal_error+0x110>)
   34a2a:	f44f 5131 	mov.w	r1, #11328	; 0x2c40
   34a2e:	f7f1 fbbd 	bl	261ac <z_impl_z_log_msg_static_create>
   34a32:	46d5      	mov	sp, sl
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   34a34:	b19e      	cbz	r6, 34a5e <z_fatal_error+0x8e>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   34a36:	69f3      	ldr	r3, [r6, #28]
		LOG_ERR("Fault during interrupt handling\n");
   34a38:	f8d8 2000 	ldr.w	r2, [r8]
   34a3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   34a40:	b16b      	cbz	r3, 34a5e <z_fatal_error+0x8e>
		LOG_ERR("Fault during interrupt handling\n");
   34a42:	0752      	lsls	r2, r2, #29
   34a44:	d025      	beq.n	34a92 <z_fatal_error+0xc2>
   34a46:	4b2b      	ldr	r3, [pc, #172]	; (34af4 <z_fatal_error+0x124>)
   34a48:	617b      	str	r3, [r7, #20]
   34a4a:	2302      	movs	r3, #2
   34a4c:	613b      	str	r3, [r7, #16]
   34a4e:	4824      	ldr	r0, [pc, #144]	; (34ae0 <z_fatal_error+0x110>)
   34a50:	2300      	movs	r3, #0
   34a52:	f107 0210 	add.w	r2, r7, #16
   34a56:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   34a5a:	f7f1 fba7 	bl	261ac <z_impl_z_log_msg_static_create>
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   34a5e:	f8d8 3000 	ldr.w	r3, [r8]
   34a62:	075b      	lsls	r3, r3, #29
   34a64:	d015      	beq.n	34a92 <z_fatal_error+0xc2>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   34a66:	bb1d      	cbnz	r5, 34ab0 <z_fatal_error+0xe0>
		thread_name = "unknown";
   34a68:	4823      	ldr	r0, [pc, #140]	; (34af8 <z_fatal_error+0x128>)
	LOG_ERR("Current thread: %p (%s)", thread,
   34a6a:	46e8      	mov	r8, sp
   34a6c:	b08a      	sub	sp, #40	; 0x28
   34a6e:	466a      	mov	r2, sp
   34a70:	4b22      	ldr	r3, [pc, #136]	; (34afc <z_fatal_error+0x12c>)
   34a72:	61d0      	str	r0, [r2, #28]
   34a74:	e9c2 3505 	strd	r3, r5, [r2, #20]
   34a78:	f240 3301 	movw	r3, #769	; 0x301
   34a7c:	8413      	strh	r3, [r2, #32]
   34a7e:	4b20      	ldr	r3, [pc, #128]	; (34b00 <z_fatal_error+0x130>)
   34a80:	f842 3f10 	str.w	r3, [r2, #16]!
   34a84:	4816      	ldr	r0, [pc, #88]	; (34ae0 <z_fatal_error+0x110>)
   34a86:	2300      	movs	r3, #0
   34a88:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   34a8c:	f7f1 fb8e 	bl	261ac <z_impl_z_log_msg_static_create>
   34a90:	46c5      	mov	sp, r8

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
   34a92:	4631      	mov	r1, r6
   34a94:	4620      	mov	r0, r4
   34a96:	f7fd f9b1 	bl	31dfc <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
   34a9a:	2c04      	cmp	r4, #4
   34a9c:	d111      	bne.n	34ac2 <z_fatal_error+0xf2>
   34a9e:	4919      	ldr	r1, [pc, #100]	; (34b04 <z_fatal_error+0x134>)
   34aa0:	4819      	ldr	r0, [pc, #100]	; (34b08 <z_fatal_error+0x138>)
   34aa2:	2293      	movs	r2, #147	; 0x93
   34aa4:	f004 f835 	bl	38b12 <assert_print>
   34aa8:	4816      	ldr	r0, [pc, #88]	; (34b04 <z_fatal_error+0x134>)
   34aaa:	2193      	movs	r1, #147	; 0x93
   34aac:	f004 f82a 	bl	38b04 <assert_post_action>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   34ab0:	4628      	mov	r0, r5
   34ab2:	f007 f8a9 	bl	3bc08 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
   34ab6:	2800      	cmp	r0, #0
   34ab8:	d0d6      	beq.n	34a68 <z_fatal_error+0x98>
   34aba:	7803      	ldrb	r3, [r0, #0]
   34abc:	2b00      	cmp	r3, #0
   34abe:	d0d3      	beq.n	34a68 <z_fatal_error+0x98>
   34ac0:	e7d3      	b.n	34a6a <z_fatal_error+0x9a>
	__asm__ volatile(
   34ac2:	f389 8811 	msr	BASEPRI, r9
   34ac6:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   34aca:	4628      	mov	r0, r5
   34acc:	f7f2 ff32 	bl	27934 <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   34ad0:	3718      	adds	r7, #24
   34ad2:	46bd      	mov	sp, r7
   34ad4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   34ad8:	2e00      	cmp	r6, #0
   34ada:	d1ac      	bne.n	34a36 <z_fatal_error+0x66>
   34adc:	e7d9      	b.n	34a92 <z_fatal_error+0xc2>
   34ade:	bf00      	nop
   34ae0:	20000aec 	.word	0x20000aec
   34ae4:	0003ce2c 	.word	0x0003ce2c
   34ae8:	0003fb9f 	.word	0x0003fb9f
   34aec:	0003fbb5 	.word	0x0003fbb5
   34af0:	01000005 	.word	0x01000005
   34af4:	0003fbdd 	.word	0x0003fbdd
   34af8:	0003fbad 	.word	0x0003fbad
   34afc:	0003fbfe 	.word	0x0003fbfe
   34b00:	01000004 	.word	0x01000004
   34b04:	0003fc16 	.word	0x0003fc16
   34b08:	0003d1d7 	.word	0x0003d1d7

00034b0c <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   34b0c:	4b0f      	ldr	r3, [pc, #60]	; (34b4c <z_sys_init_run_level+0x40>)
{
   34b0e:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   34b10:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   34b14:	3001      	adds	r0, #1
   34b16:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   34b1a:	42a6      	cmp	r6, r4
   34b1c:	d800      	bhi.n	34b20 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
   34b1e:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
   34b20:	e9d4 3500 	ldrd	r3, r5, [r4]
   34b24:	4628      	mov	r0, r5
   34b26:	4798      	blx	r3
		if (dev != NULL) {
   34b28:	b16d      	cbz	r5, 34b46 <z_sys_init_run_level+0x3a>
			if (rc != 0) {
   34b2a:	b138      	cbz	r0, 34b3c <z_sys_init_run_level+0x30>
				if (rc < 0) {
   34b2c:	2800      	cmp	r0, #0
   34b2e:	bfb8      	it	lt
   34b30:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
   34b32:	68eb      	ldr	r3, [r5, #12]
				if (rc > UINT8_MAX) {
   34b34:	28ff      	cmp	r0, #255	; 0xff
   34b36:	bfa8      	it	ge
   34b38:	20ff      	movge	r0, #255	; 0xff
				dev->state->init_res = rc;
   34b3a:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
   34b3c:	68ea      	ldr	r2, [r5, #12]
   34b3e:	7853      	ldrb	r3, [r2, #1]
   34b40:	f043 0301 	orr.w	r3, r3, #1
   34b44:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   34b46:	3408      	adds	r4, #8
   34b48:	e7e7      	b.n	34b1a <z_sys_init_run_level+0xe>
   34b4a:	bf00      	nop
   34b4c:	0003ce40 	.word	0x0003ce40

00034b50 <bg_thread_main>:
 * This routine completes kernel initialization by invoking the remaining
 * init functions, then invokes application's main() routine.
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
   34b50:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
   34b52:	4b0a      	ldr	r3, [pc, #40]	; (34b7c <bg_thread_main+0x2c>)
   34b54:	2201      	movs	r2, #1

	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
   34b56:	2003      	movs	r0, #3
	z_sys_post_kernel = true;
   34b58:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
   34b5a:	f7ff ffd7 	bl	34b0c <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
   34b5e:	f003 f9f7 	bl	37f50 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
   34b62:	2004      	movs	r0, #4
   34b64:	f7ff ffd2 	bl	34b0c <z_sys_init_run_level>

	z_init_static_threads();
   34b68:	f000 faf8 	bl	3515c <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern void main(void);

	main();
   34b6c:	f7ee ff56 	bl	23a1c <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   34b70:	4a03      	ldr	r2, [pc, #12]	; (34b80 <bg_thread_main+0x30>)
   34b72:	7b13      	ldrb	r3, [r2, #12]
   34b74:	f023 0301 	bic.w	r3, r3, #1
   34b78:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   34b7a:	bd08      	pop	{r3, pc}
   34b7c:	20004411 	.word	0x20004411
   34b80:	20002c50 	.word	0x20002c50

00034b84 <z_bss_zero>:
{
   34b84:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
   34b86:	4803      	ldr	r0, [pc, #12]	; (34b94 <z_bss_zero+0x10>)
   34b88:	4a03      	ldr	r2, [pc, #12]	; (34b98 <z_bss_zero+0x14>)
   34b8a:	2100      	movs	r1, #0
   34b8c:	1a12      	subs	r2, r2, r0
   34b8e:	f007 f810 	bl	3bbb2 <z_early_memset>
}
   34b92:	bd08      	pop	{r3, pc}
   34b94:	20000d58 	.word	0x20000d58
   34b98:	20004414 	.word	0x20004414

00034b9c <z_init_cpu>:
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
   34b9c:	b570      	push	{r4, r5, r6, lr}
	z_setup_new_thread(thread, stack,
   34b9e:	2300      	movs	r3, #0
{
   34ba0:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
   34ba2:	2201      	movs	r2, #1
   34ba4:	e9cd 2304 	strd	r2, r3, [sp, #16]
	struct k_thread *thread = &z_idle_threads[i];
   34ba8:	4e13      	ldr	r6, [pc, #76]	; (34bf8 <z_init_cpu+0x5c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   34baa:	4d14      	ldr	r5, [pc, #80]	; (34bfc <z_init_cpu+0x60>)
	z_setup_new_thread(thread, stack,
   34bac:	9301      	str	r3, [sp, #4]
   34bae:	220f      	movs	r2, #15
   34bb0:	e9cd 3202 	strd	r3, r2, [sp, #8]
   34bb4:	4912      	ldr	r1, [pc, #72]	; (34c00 <z_init_cpu+0x64>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   34bb6:	2318      	movs	r3, #24
   34bb8:	fb03 5500 	mla	r5, r3, r0, r5
	struct k_thread *thread = &z_idle_threads[i];
   34bbc:	eb06 16c0 	add.w	r6, r6, r0, lsl #7
{
   34bc0:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
   34bc2:	f44f 70c0 	mov.w	r0, #384	; 0x180
   34bc6:	fb00 1104 	mla	r1, r0, r4, r1
   34bca:	4b0e      	ldr	r3, [pc, #56]	; (34c04 <z_init_cpu+0x68>)
   34bcc:	9500      	str	r5, [sp, #0]
   34bce:	f44f 72a0 	mov.w	r2, #320	; 0x140
   34bd2:	4630      	mov	r0, r6
   34bd4:	f000 fa38 	bl	35048 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   34bd8:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   34bda:	4a0b      	ldr	r2, [pc, #44]	; (34c08 <z_init_cpu+0x6c>)
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
   34bdc:	60ee      	str	r6, [r5, #12]
   34bde:	f023 0304 	bic.w	r3, r3, #4
   34be2:	7373      	strb	r3, [r6, #13]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   34be4:	f44f 6304 	mov.w	r3, #2112	; 0x840
   34be8:	fb04 3303 	mla	r3, r4, r3, r3
   34bec:	4413      	add	r3, r2
	_kernel.cpus[id].id = id;
   34bee:	752c      	strb	r4, [r5, #20]
	_kernel.cpus[id].irq_stack =
   34bf0:	606b      	str	r3, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
   34bf2:	b006      	add	sp, #24
   34bf4:	bd70      	pop	{r4, r5, r6, pc}
   34bf6:	bf00      	nop
   34bf8:	20002bd0 	.word	0x20002bd0
   34bfc:	20003384 	.word	0x20003384
   34c00:	20007540 	.word	0x20007540
   34c04:	00035299 	.word	0x00035299
   34c08:	20006d00 	.word	0x20006d00

00034c0c <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
   34c0c:	b580      	push	{r7, lr}
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
   34c0e:	2000      	movs	r0, #0
{
   34c10:	b0a6      	sub	sp, #152	; 0x98
	z_sys_init_run_level(INIT_LEVEL_EARLY);
   34c12:	f7ff ff7b 	bl	34b0c <z_sys_init_run_level>
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
   34c16:	4b2e      	ldr	r3, [pc, #184]	; (34cd0 <z_cstart+0xc4>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   34c18:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
   34c1c:	4d2d      	ldr	r5, [pc, #180]	; (34cd4 <z_cstart+0xc8>)

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
   34c1e:	4e2e      	ldr	r6, [pc, #184]	; (34cd8 <z_cstart+0xcc>)
   34c20:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   34c22:	4f2e      	ldr	r7, [pc, #184]	; (34cdc <z_cstart+0xd0>)
   34c24:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   34c28:	616b      	str	r3, [r5, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   34c2a:	23e0      	movs	r3, #224	; 0xe0
   34c2c:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   34c30:	2400      	movs	r4, #0
   34c32:	2320      	movs	r3, #32
   34c34:	77eb      	strb	r3, [r5, #31]
   34c36:	762c      	strb	r4, [r5, #24]
   34c38:	766c      	strb	r4, [r5, #25]
   34c3a:	76ac      	strb	r4, [r5, #26]
   34c3c:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   34c40:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   34c42:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   34c46:	626b      	str	r3, [r5, #36]	; 0x24
   34c48:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   34c4c:	f7f2 fde6 	bl	2781c <z_arm_fault_init>
	z_arm_cpu_idle_init();
   34c50:	f7f2 f88a 	bl	26d68 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   34c54:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   34c58:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   34c5a:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   34c5c:	f7f2 ff64 	bl	27b28 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   34c60:	f7f2 fe7e 	bl	27960 <z_arm_configure_static_mpu_regions>

	/* perform any architecture-specific initialization */
	arch_kernel_init();

	LOG_CORE_INIT();
   34c64:	f7f0 ffbe 	bl	25be4 <log_core_init>
	dummy_thread->base.user_options = K_ESSENTIAL;
   34c68:	f240 1301 	movw	r3, #257	; 0x101
   34c6c:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
   34c70:	ab06      	add	r3, sp, #24
   34c72:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
   34c74:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
	dummy_thread->resource_pool = NULL;
   34c78:	9423      	str	r4, [sp, #140]	; 0x8c
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   34c7a:	f006 ff8e 	bl	3bb9a <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
   34c7e:	2001      	movs	r0, #1
   34c80:	f7ff ff44 	bl	34b0c <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
   34c84:	2002      	movs	r0, #2
	_kernel.ready_q.cache = &z_main_thread;
   34c86:	4d16      	ldr	r5, [pc, #88]	; (34ce0 <z_cstart+0xd4>)
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
   34c88:	f7ff ff40 	bl	34b0c <z_sys_init_run_level>
	z_sched_init();
   34c8c:	f002 f900 	bl	36e90 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   34c90:	4b14      	ldr	r3, [pc, #80]	; (34ce4 <z_cstart+0xd8>)
	_kernel.ready_q.cache = &z_main_thread;
   34c92:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   34c94:	9305      	str	r3, [sp, #20]
   34c96:	2301      	movs	r3, #1
   34c98:	4913      	ldr	r1, [pc, #76]	; (34ce8 <z_cstart+0xdc>)
   34c9a:	9400      	str	r4, [sp, #0]
   34c9c:	e9cd 4303 	strd	r4, r3, [sp, #12]
   34ca0:	f44f 6280 	mov.w	r2, #1024	; 0x400
   34ca4:	463b      	mov	r3, r7
   34ca6:	e9cd 4401 	strd	r4, r4, [sp, #4]
   34caa:	4628      	mov	r0, r5
   34cac:	f000 f9cc 	bl	35048 <z_setup_new_thread>
   34cb0:	7b6a      	ldrb	r2, [r5, #13]
   34cb2:	4606      	mov	r6, r0
   34cb4:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
   34cb8:	4628      	mov	r0, r5
   34cba:	736a      	strb	r2, [r5, #13]
   34cbc:	f001 fbec 	bl	36498 <z_ready_thread>
	z_init_cpu(0);
   34cc0:	4620      	mov	r0, r4
   34cc2:	f7ff ff6b 	bl	34b9c <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   34cc6:	463a      	mov	r2, r7
   34cc8:	4631      	mov	r1, r6
   34cca:	4628      	mov	r0, r5
   34ccc:	f7f2 f9ee 	bl	270ac <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   34cd0:	20007540 	.word	0x20007540
   34cd4:	e000ed00 	.word	0xe000ed00
   34cd8:	20003384 	.word	0x20003384
   34cdc:	00034b51 	.word	0x00034b51
   34ce0:	20002c50 	.word	0x20002c50
   34ce4:	0003d0e3 	.word	0x0003d0e3
   34ce8:	200076c0 	.word	0x200076c0

00034cec <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
   34cec:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
   34cee:	4c0b      	ldr	r4, [pc, #44]	; (34d1c <statics_init+0x30>)
   34cf0:	4d0b      	ldr	r5, [pc, #44]	; (34d20 <statics_init+0x34>)
   34cf2:	42ac      	cmp	r4, r5
   34cf4:	d90f      	bls.n	34d16 <statics_init+0x2a>
   34cf6:	490b      	ldr	r1, [pc, #44]	; (34d24 <statics_init+0x38>)
   34cf8:	480b      	ldr	r0, [pc, #44]	; (34d28 <statics_init+0x3c>)
   34cfa:	2218      	movs	r2, #24
   34cfc:	f003 ff09 	bl	38b12 <assert_print>
   34d00:	4808      	ldr	r0, [pc, #32]	; (34d24 <statics_init+0x38>)
   34d02:	2118      	movs	r1, #24
   34d04:	f003 fefe 	bl	38b04 <assert_post_action>
		}

		if (do_clear)
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   34d08:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   34d0c:	4620      	mov	r0, r4
   34d0e:	f006 ff54 	bl	3bbba <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
   34d12:	3418      	adds	r4, #24
   34d14:	e7ed      	b.n	34cf2 <statics_init+0x6>
   34d16:	d3f7      	bcc.n	34d08 <statics_init+0x1c>
		}
	}
	return 0;
}
   34d18:	2000      	movs	r0, #0
   34d1a:	bd38      	pop	{r3, r4, r5, pc}
   34d1c:	20000b74 	.word	0x20000b74
   34d20:	20000b74 	.word	0x20000b74
   34d24:	0003fc85 	.word	0x0003fc85
   34d28:	0003d1d7 	.word	0x0003d1d7

00034d2c <k_heap_aligned_alloc>:
SYS_INIT_NAMED(statics_init_post, statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   34d2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   34d30:	b085      	sub	sp, #20
   34d32:	e9dd 9b0e 	ldrd	r9, fp, [sp, #56]	; 0x38
   34d36:	4680      	mov	r8, r0
   34d38:	9103      	str	r1, [sp, #12]
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   34d3a:	4648      	mov	r0, r9
   34d3c:	4659      	mov	r1, fp
{
   34d3e:	4692      	mov	sl, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   34d40:	f007 f852 	bl	3bde8 <sys_clock_timeout_end_calc>
	void *ret = NULL;

	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
   34d44:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
   34d48:	bf08      	it	eq
   34d4a:	f1b9 3fff 	cmpeq.w	r9, #4294967295	; 0xffffffff
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   34d4e:	4605      	mov	r5, r0
   34d50:	460f      	mov	r7, r1
	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
   34d52:	bf04      	itt	eq
   34d54:	f04f 35ff 	moveq.w	r5, #4294967295	; 0xffffffff
   34d58:	f06f 4700 	mvneq.w	r7, #2147483648	; 0x80000000

	k_spinlock_key_t key = k_spin_lock(&h->lock);
   34d5c:	f108 0614 	add.w	r6, r8, #20
	__asm__ volatile(
   34d60:	f04f 0340 	mov.w	r3, #64	; 0x40
   34d64:	f3ef 8411 	mrs	r4, BASEPRI
   34d68:	f383 8812 	msr	BASEPRI_MAX, r3
   34d6c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   34d70:	4630      	mov	r0, r6
   34d72:	f000 fa6b 	bl	3524c <z_spin_lock_valid>
   34d76:	b938      	cbnz	r0, 34d88 <k_heap_aligned_alloc+0x5c>
   34d78:	492c      	ldr	r1, [pc, #176]	; (34e2c <k_heap_aligned_alloc+0x100>)
   34d7a:	482d      	ldr	r0, [pc, #180]	; (34e30 <k_heap_aligned_alloc+0x104>)
   34d7c:	2294      	movs	r2, #148	; 0x94
   34d7e:	f003 fec8 	bl	38b12 <assert_print>
   34d82:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   34d84:	4829      	ldr	r0, [pc, #164]	; (34e2c <k_heap_aligned_alloc+0x100>)
   34d86:	e027      	b.n	34dd8 <k_heap_aligned_alloc+0xac>
	z_spin_lock_set_owner(l);
   34d88:	4630      	mov	r0, r6
   34d8a:	f000 fa7d 	bl	35288 <z_spin_lock_set_owner>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   34d8e:	f3ef 8305 	mrs	r3, IPSR

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap, aligned_alloc, h, timeout);

	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
   34d92:	b113      	cbz	r3, 34d9a <k_heap_aligned_alloc+0x6e>
   34d94:	ea5b 0909 	orrs.w	r9, fp, r9
   34d98:	d117      	bne.n	34dca <k_heap_aligned_alloc+0x9e>
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   34d9a:	f108 0b0c 	add.w	fp, r8, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   34d9e:	9903      	ldr	r1, [sp, #12]
   34da0:	4652      	mov	r2, sl
   34da2:	4640      	mov	r0, r8
   34da4:	f7ef fc18 	bl	245d8 <sys_heap_aligned_alloc>
   34da8:	4681      	mov	r9, r0
		now = sys_clock_tick_get();
   34daa:	f002 fcfb 	bl	377a4 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   34dae:	f1b9 0f00 	cmp.w	r9, #0
   34db2:	d013      	beq.n	34ddc <k_heap_aligned_alloc+0xb0>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   34db4:	4630      	mov	r0, r6
   34db6:	f000 fa57 	bl	35268 <z_spin_unlock_valid>
   34dba:	bb70      	cbnz	r0, 34e1a <k_heap_aligned_alloc+0xee>
   34dbc:	491b      	ldr	r1, [pc, #108]	; (34e2c <k_heap_aligned_alloc+0x100>)
   34dbe:	481c      	ldr	r0, [pc, #112]	; (34e30 <k_heap_aligned_alloc+0x104>)
   34dc0:	22c2      	movs	r2, #194	; 0xc2
   34dc2:	f003 fea6 	bl	38b12 <assert_print>
   34dc6:	21c2      	movs	r1, #194	; 0xc2
   34dc8:	e7dc      	b.n	34d84 <k_heap_aligned_alloc+0x58>
	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
   34dca:	491a      	ldr	r1, [pc, #104]	; (34e34 <k_heap_aligned_alloc+0x108>)
   34dcc:	4818      	ldr	r0, [pc, #96]	; (34e30 <k_heap_aligned_alloc+0x104>)
   34dce:	224c      	movs	r2, #76	; 0x4c
   34dd0:	f003 fe9f 	bl	38b12 <assert_print>
   34dd4:	4817      	ldr	r0, [pc, #92]	; (34e34 <k_heap_aligned_alloc+0x108>)
   34dd6:	214c      	movs	r1, #76	; 0x4c
   34dd8:	f003 fe94 	bl	38b04 <assert_post_action>
		    (ret != NULL) || ((end - now) <= 0)) {
   34ddc:	1a28      	subs	r0, r5, r0
   34dde:	eb67 0101 	sbc.w	r1, r7, r1
   34de2:	2801      	cmp	r0, #1
   34de4:	f171 0300 	sbcs.w	r3, r1, #0
   34de8:	dbe4      	blt.n	34db4 <k_heap_aligned_alloc+0x88>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   34dea:	e9cd 0100 	strd	r0, r1, [sp]
   34dee:	465a      	mov	r2, fp
   34df0:	4621      	mov	r1, r4
   34df2:	4630      	mov	r0, r6
   34df4:	f001 fe0c 	bl	36a10 <z_pend_curr>
   34df8:	f04f 0340 	mov.w	r3, #64	; 0x40
   34dfc:	f3ef 8411 	mrs	r4, BASEPRI
   34e00:	f383 8812 	msr	BASEPRI_MAX, r3
   34e04:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   34e08:	4630      	mov	r0, r6
   34e0a:	f000 fa1f 	bl	3524c <z_spin_lock_valid>
   34e0e:	2800      	cmp	r0, #0
   34e10:	d0b2      	beq.n	34d78 <k_heap_aligned_alloc+0x4c>
	z_spin_lock_set_owner(l);
   34e12:	4630      	mov	r0, r6
   34e14:	f000 fa38 	bl	35288 <z_spin_lock_set_owner>
	return k;
   34e18:	e7c1      	b.n	34d9e <k_heap_aligned_alloc+0x72>
	__asm__ volatile(
   34e1a:	f384 8811 	msr	BASEPRI, r4
   34e1e:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   34e22:	4648      	mov	r0, r9
   34e24:	b005      	add	sp, #20
   34e26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   34e2a:	bf00      	nop
   34e2c:	0003d39d 	.word	0x0003d39d
   34e30:	0003d1d7 	.word	0x0003d1d7
   34e34:	0003fc85 	.word	0x0003fc85

00034e38 <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
   34e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   34e3a:	4604      	mov	r4, r0
   34e3c:	460e      	mov	r6, r1
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   34e3e:	f100 0514 	add.w	r5, r0, #20
	__asm__ volatile(
   34e42:	f04f 0340 	mov.w	r3, #64	; 0x40
   34e46:	f3ef 8711 	mrs	r7, BASEPRI
   34e4a:	f383 8812 	msr	BASEPRI_MAX, r3
   34e4e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   34e52:	4628      	mov	r0, r5
   34e54:	f000 f9fa 	bl	3524c <z_spin_lock_valid>
   34e58:	b940      	cbnz	r0, 34e6c <k_heap_free+0x34>
   34e5a:	4915      	ldr	r1, [pc, #84]	; (34eb0 <k_heap_free+0x78>)
   34e5c:	4815      	ldr	r0, [pc, #84]	; (34eb4 <k_heap_free+0x7c>)
   34e5e:	2294      	movs	r2, #148	; 0x94
   34e60:	f003 fe57 	bl	38b12 <assert_print>
   34e64:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   34e66:	4812      	ldr	r0, [pc, #72]	; (34eb0 <k_heap_free+0x78>)
   34e68:	f003 fe4c 	bl	38b04 <assert_post_action>
	z_spin_lock_set_owner(l);
   34e6c:	4628      	mov	r0, r5
   34e6e:	f000 fa0b 	bl	35288 <z_spin_lock_set_owner>

	sys_heap_free(&h->heap, mem);
   34e72:	4620      	mov	r0, r4
   34e74:	4631      	mov	r1, r6
   34e76:	f7ef fb7d 	bl	24574 <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   34e7a:	f104 000c 	add.w	r0, r4, #12
   34e7e:	f006 ff99 	bl	3bdb4 <z_unpend_all>
   34e82:	b128      	cbz	r0, 34e90 <k_heap_free+0x58>
		z_reschedule(&h->lock, key);
   34e84:	4639      	mov	r1, r7
   34e86:	4628      	mov	r0, r5
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   34e88:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		z_reschedule(&h->lock, key);
   34e8c:	f001 bb6c 	b.w	36568 <z_reschedule>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   34e90:	4628      	mov	r0, r5
   34e92:	f000 f9e9 	bl	35268 <z_spin_unlock_valid>
   34e96:	b930      	cbnz	r0, 34ea6 <k_heap_free+0x6e>
   34e98:	4905      	ldr	r1, [pc, #20]	; (34eb0 <k_heap_free+0x78>)
   34e9a:	4806      	ldr	r0, [pc, #24]	; (34eb4 <k_heap_free+0x7c>)
   34e9c:	22c2      	movs	r2, #194	; 0xc2
   34e9e:	f003 fe38 	bl	38b12 <assert_print>
   34ea2:	21c2      	movs	r1, #194	; 0xc2
   34ea4:	e7df      	b.n	34e66 <k_heap_free+0x2e>
	__asm__ volatile(
   34ea6:	f387 8811 	msr	BASEPRI, r7
   34eaa:	f3bf 8f6f 	isb	sy
}
   34eae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   34eb0:	0003d39d 	.word	0x0003d39d
   34eb4:	0003d1d7 	.word	0x0003d1d7

00034eb8 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
   34eb8:	b538      	push	{r3, r4, r5, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   34eba:	4c0b      	ldr	r4, [pc, #44]	; (34ee8 <init_mem_slab_module+0x30>)
   34ebc:	4d0b      	ldr	r5, [pc, #44]	; (34eec <init_mem_slab_module+0x34>)
	int rc = 0;
   34ebe:	2000      	movs	r0, #0
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   34ec0:	42ac      	cmp	r4, r5
   34ec2:	d90f      	bls.n	34ee4 <init_mem_slab_module+0x2c>
   34ec4:	490a      	ldr	r1, [pc, #40]	; (34ef0 <init_mem_slab_module+0x38>)
   34ec6:	480b      	ldr	r0, [pc, #44]	; (34ef4 <init_mem_slab_module+0x3c>)
   34ec8:	223d      	movs	r2, #61	; 0x3d
   34eca:	f003 fe22 	bl	38b12 <assert_print>
   34ece:	4808      	ldr	r0, [pc, #32]	; (34ef0 <init_mem_slab_module+0x38>)
   34ed0:	213d      	movs	r1, #61	; 0x3d
   34ed2:	f003 fe17 	bl	38b04 <assert_post_action>
		rc = create_free_list(slab);
   34ed6:	4620      	mov	r0, r4
   34ed8:	f006 fe77 	bl	3bbca <create_free_list>
		if (rc < 0) {
   34edc:	2800      	cmp	r0, #0
   34ede:	db02      	blt.n	34ee6 <init_mem_slab_module+0x2e>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   34ee0:	3420      	adds	r4, #32
   34ee2:	e7ed      	b.n	34ec0 <init_mem_slab_module+0x8>
   34ee4:	d3f7      	bcc.n	34ed6 <init_mem_slab_module+0x1e>
		z_object_init(slab);
	}

out:
	return rc;
}
   34ee6:	bd38      	pop	{r3, r4, r5, pc}
   34ee8:	20000b14 	.word	0x20000b14
   34eec:	20000b74 	.word	0x20000b74
   34ef0:	0003fca7 	.word	0x0003fca7
   34ef4:	0003d1d7 	.word	0x0003d1d7

00034ef8 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   34ef8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   34efc:	4604      	mov	r4, r0
   34efe:	460d      	mov	r5, r1
   34f00:	4690      	mov	r8, r2
   34f02:	461f      	mov	r7, r3
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
   34f04:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   34f08:	f04f 0340 	mov.w	r3, #64	; 0x40
   34f0c:	f3ef 8911 	mrs	r9, BASEPRI
   34f10:	f383 8812 	msr	BASEPRI_MAX, r3
   34f14:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   34f18:	4630      	mov	r0, r6
   34f1a:	f000 f997 	bl	3524c <z_spin_lock_valid>
   34f1e:	b940      	cbnz	r0, 34f32 <k_mem_slab_alloc+0x3a>
   34f20:	491e      	ldr	r1, [pc, #120]	; (34f9c <k_mem_slab_alloc+0xa4>)
   34f22:	481f      	ldr	r0, [pc, #124]	; (34fa0 <k_mem_slab_alloc+0xa8>)
   34f24:	2294      	movs	r2, #148	; 0x94
   34f26:	f003 fdf4 	bl	38b12 <assert_print>
   34f2a:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   34f2c:	481b      	ldr	r0, [pc, #108]	; (34f9c <k_mem_slab_alloc+0xa4>)
   34f2e:	f003 fde9 	bl	38b04 <assert_post_action>
	z_spin_lock_set_owner(l);
   34f32:	4630      	mov	r0, r6
   34f34:	f000 f9a8 	bl	35288 <z_spin_lock_set_owner>
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
   34f38:	69a3      	ldr	r3, [r4, #24]
   34f3a:	b18b      	cbz	r3, 34f60 <k_mem_slab_alloc+0x68>
		/* take a free block */
		*mem = slab->free_list;
   34f3c:	602b      	str	r3, [r5, #0]
		slab->free_list = *(char **)(slab->free_list);
   34f3e:	681b      	ldr	r3, [r3, #0]
   34f40:	61a3      	str	r3, [r4, #24]
		slab->num_used++;
   34f42:	69e3      	ldr	r3, [r4, #28]
   34f44:	3301      	adds	r3, #1
   34f46:	61e3      	str	r3, [r4, #28]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   34f48:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   34f4a:	4630      	mov	r0, r6
   34f4c:	f000 f98c 	bl	35268 <z_spin_unlock_valid>
   34f50:	b9f0      	cbnz	r0, 34f90 <k_mem_slab_alloc+0x98>
   34f52:	4912      	ldr	r1, [pc, #72]	; (34f9c <k_mem_slab_alloc+0xa4>)
   34f54:	4812      	ldr	r0, [pc, #72]	; (34fa0 <k_mem_slab_alloc+0xa8>)
   34f56:	22c2      	movs	r2, #194	; 0xc2
   34f58:	f003 fddb 	bl	38b12 <assert_print>
   34f5c:	21c2      	movs	r1, #194	; 0xc2
   34f5e:	e7e5      	b.n	34f2c <k_mem_slab_alloc+0x34>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
   34f60:	ea58 0207 	orrs.w	r2, r8, r7
   34f64:	d103      	bne.n	34f6e <k_mem_slab_alloc+0x76>
		   !IS_ENABLED(CONFIG_MULTITHREADING)) {
		/* don't wait for a free block to become available */
		*mem = NULL;
   34f66:	602b      	str	r3, [r5, #0]
		result = -ENOMEM;
   34f68:	f06f 040b 	mvn.w	r4, #11
   34f6c:	e7ed      	b.n	34f4a <k_mem_slab_alloc+0x52>
	} else {
		SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_mem_slab, alloc, slab, timeout);

		/* wait for a free block or timeout */
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
   34f6e:	4622      	mov	r2, r4
   34f70:	e9cd 8700 	strd	r8, r7, [sp]
   34f74:	4649      	mov	r1, r9
   34f76:	4630      	mov	r0, r6
   34f78:	f001 fd4a 	bl	36a10 <z_pend_curr>
		if (result == 0) {
   34f7c:	4604      	mov	r4, r0
   34f7e:	b918      	cbnz	r0, 34f88 <k_mem_slab_alloc+0x90>
			*mem = _current->base.swap_data;
   34f80:	4b08      	ldr	r3, [pc, #32]	; (34fa4 <k_mem_slab_alloc+0xac>)
   34f82:	689b      	ldr	r3, [r3, #8]
   34f84:	695b      	ldr	r3, [r3, #20]
   34f86:	602b      	str	r3, [r5, #0]
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
}
   34f88:	4620      	mov	r0, r4
   34f8a:	b003      	add	sp, #12
   34f8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	__asm__ volatile(
   34f90:	f389 8811 	msr	BASEPRI, r9
   34f94:	f3bf 8f6f 	isb	sy
	return result;
   34f98:	e7f6      	b.n	34f88 <k_mem_slab_alloc+0x90>
   34f9a:	bf00      	nop
   34f9c:	0003d39d 	.word	0x0003d39d
   34fa0:	0003d1d7 	.word	0x0003d1d7
   34fa4:	20003384 	.word	0x20003384

00034fa8 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   34fa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   34fac:	4604      	mov	r4, r0
   34fae:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
   34fb0:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   34fb4:	f04f 0340 	mov.w	r3, #64	; 0x40
   34fb8:	f3ef 8711 	mrs	r7, BASEPRI
   34fbc:	f383 8812 	msr	BASEPRI_MAX, r3
   34fc0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   34fc4:	4630      	mov	r0, r6
   34fc6:	f000 f941 	bl	3524c <z_spin_lock_valid>
   34fca:	b940      	cbnz	r0, 34fde <k_mem_slab_free+0x36>
   34fcc:	491c      	ldr	r1, [pc, #112]	; (35040 <k_mem_slab_free+0x98>)
   34fce:	481d      	ldr	r0, [pc, #116]	; (35044 <k_mem_slab_free+0x9c>)
   34fd0:	2294      	movs	r2, #148	; 0x94
   34fd2:	f003 fd9e 	bl	38b12 <assert_print>
   34fd6:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   34fd8:	4819      	ldr	r0, [pc, #100]	; (35040 <k_mem_slab_free+0x98>)
   34fda:	f003 fd93 	bl	38b04 <assert_post_action>
	z_spin_lock_set_owner(l);
   34fde:	4630      	mov	r0, r6
   34fe0:	f000 f952 	bl	35288 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   34fe4:	f8d4 8018 	ldr.w	r8, [r4, #24]
   34fe8:	f1b8 0f00 	cmp.w	r8, #0
   34fec:	d10f      	bne.n	3500e <k_mem_slab_free+0x66>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   34fee:	4620      	mov	r0, r4
   34ff0:	f001 ff10 	bl	36e14 <z_unpend_first_thread>

		if (pending_thread != NULL) {
   34ff4:	b158      	cbz	r0, 3500e <k_mem_slab_free+0x66>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   34ff6:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   34ff8:	6142      	str	r2, [r0, #20]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   34ffa:	f8c0 807c 	str.w	r8, [r0, #124]	; 0x7c
			z_ready_thread(pending_thread);
   34ffe:	f001 fa4b 	bl	36498 <z_ready_thread>
			z_reschedule(&slab->lock, key);
   35002:	4639      	mov	r1, r7
   35004:	4630      	mov	r0, r6
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   35006:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			z_reschedule(&slab->lock, key);
   3500a:	f001 baad 	b.w	36568 <z_reschedule>
	**(char ***) mem = slab->free_list;
   3500e:	682b      	ldr	r3, [r5, #0]
   35010:	69a2      	ldr	r2, [r4, #24]
   35012:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   35014:	682b      	ldr	r3, [r5, #0]
   35016:	61a3      	str	r3, [r4, #24]
	slab->num_used--;
   35018:	69e3      	ldr	r3, [r4, #28]
   3501a:	3b01      	subs	r3, #1
   3501c:	61e3      	str	r3, [r4, #28]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3501e:	4630      	mov	r0, r6
   35020:	f000 f922 	bl	35268 <z_spin_unlock_valid>
   35024:	b930      	cbnz	r0, 35034 <k_mem_slab_free+0x8c>
   35026:	4906      	ldr	r1, [pc, #24]	; (35040 <k_mem_slab_free+0x98>)
   35028:	4806      	ldr	r0, [pc, #24]	; (35044 <k_mem_slab_free+0x9c>)
   3502a:	22c2      	movs	r2, #194	; 0xc2
   3502c:	f003 fd71 	bl	38b12 <assert_print>
   35030:	21c2      	movs	r1, #194	; 0xc2
   35032:	e7d1      	b.n	34fd8 <k_mem_slab_free+0x30>
	__asm__ volatile(
   35034:	f387 8811 	msr	BASEPRI, r7
   35038:	f3bf 8f6f 	isb	sy
}
   3503c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   35040:	0003d39d 	.word	0x0003d39d
   35044:	0003d1d7 	.word	0x0003d1d7

00035048 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   35048:	b5f0      	push	{r4, r5, r6, r7, lr}
   3504a:	b085      	sub	sp, #20
   3504c:	4604      	mov	r4, r0
   3504e:	980d      	ldr	r0, [sp, #52]	; 0x34
	char *stack_ptr;

	Z_ASSERT_VALID_PRIO(prio, entry);
   35050:	280f      	cmp	r0, #15
   35052:	d12e      	bne.n	350b2 <z_setup_new_thread+0x6a>
   35054:	4d1e      	ldr	r5, [pc, #120]	; (350d0 <z_setup_new_thread+0x88>)
   35056:	42ab      	cmp	r3, r5
   35058:	d12f      	bne.n	350ba <z_setup_new_thread+0x72>
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   3505a:	f104 0558 	add.w	r5, r4, #88	; 0x58
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
   3505e:	e9c4 5516 	strd	r5, r5, [r4, #88]	; 0x58
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
   35062:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   35064:	7325      	strb	r5, [r4, #12]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   35066:	3207      	adds	r2, #7
	thread_base->thread_state = (uint8_t)initial_state;
   35068:	2504      	movs	r5, #4
   3506a:	7365      	strb	r5, [r4, #13]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   3506c:	f022 0507 	bic.w	r5, r2, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
   35070:	f101 0240 	add.w	r2, r1, #64	; 0x40
	new_thread->stack_info.size = stack_buf_size;
   35074:	e9c4 251a 	strd	r2, r5, [r4, #104]	; 0x68
	thread_base->pended_on = NULL;
   35078:	2600      	movs	r6, #0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   3507a:	9a0c      	ldr	r2, [sp, #48]	; 0x30

	thread_base->prio = priority;
   3507c:	73a0      	strb	r0, [r4, #14]
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
   3507e:	e9c4 6606 	strd	r6, r6, [r4, #24]
	thread_base->pended_on = NULL;
   35082:	60a6      	str	r6, [r4, #8]

	thread_base->sched_locked = 0U;
   35084:	73e6      	strb	r6, [r4, #15]
	new_thread->stack_info.delta = delta;
   35086:	6726      	str	r6, [r4, #112]	; 0x70
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   35088:	f105 0740 	add.w	r7, r5, #64	; 0x40
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   3508c:	9202      	str	r2, [sp, #8]
   3508e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   35090:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
   35092:	440f      	add	r7, r1
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   35094:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   35096:	9200      	str	r2, [sp, #0]
   35098:	4620      	mov	r0, r4
   3509a:	463a      	mov	r2, r7
   3509c:	f7f1 ffd4 	bl	27048 <arch_new_thread>
	if (!_current) {
   350a0:	4b0c      	ldr	r3, [pc, #48]	; (350d4 <z_setup_new_thread+0x8c>)
	new_thread->init_data = NULL;
   350a2:	6566      	str	r6, [r4, #84]	; 0x54
	if (!_current) {
   350a4:	689b      	ldr	r3, [r3, #8]
   350a6:	b103      	cbz	r3, 350aa <z_setup_new_thread+0x62>
	new_thread->resource_pool = _current->resource_pool;
   350a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	return stack_ptr;
   350aa:	6763      	str	r3, [r4, #116]	; 0x74
}
   350ac:	4638      	mov	r0, r7
   350ae:	b005      	add	sp, #20
   350b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	Z_ASSERT_VALID_PRIO(prio, entry);
   350b2:	f100 0510 	add.w	r5, r0, #16
   350b6:	2d1e      	cmp	r5, #30
   350b8:	d9cf      	bls.n	3505a <z_setup_new_thread+0x12>
   350ba:	4907      	ldr	r1, [pc, #28]	; (350d8 <z_setup_new_thread+0x90>)
   350bc:	4807      	ldr	r0, [pc, #28]	; (350dc <z_setup_new_thread+0x94>)
   350be:	f44f 7206 	mov.w	r2, #536	; 0x218
   350c2:	f003 fd26 	bl	38b12 <assert_print>
   350c6:	4804      	ldr	r0, [pc, #16]	; (350d8 <z_setup_new_thread+0x90>)
   350c8:	f44f 7106 	mov.w	r1, #536	; 0x218
   350cc:	f003 fd1a 	bl	38b04 <assert_post_action>
   350d0:	00035299 	.word	0x00035299
   350d4:	20003384 	.word	0x20003384
   350d8:	0003fccc 	.word	0x0003fccc
   350dc:	0003d1d7 	.word	0x0003d1d7

000350e0 <z_impl_k_thread_create>:
{
   350e0:	b5f0      	push	{r4, r5, r6, r7, lr}
   350e2:	b087      	sub	sp, #28
   350e4:	e9dd 7612 	ldrd	r7, r6, [sp, #72]	; 0x48
   350e8:	4604      	mov	r4, r0
   350ea:	f3ef 8505 	mrs	r5, IPSR
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
   350ee:	b155      	cbz	r5, 35106 <z_impl_k_thread_create+0x26>
   350f0:	4917      	ldr	r1, [pc, #92]	; (35150 <z_impl_k_thread_create+0x70>)
   350f2:	4818      	ldr	r0, [pc, #96]	; (35154 <z_impl_k_thread_create+0x74>)
   350f4:	f240 2287 	movw	r2, #647	; 0x287
   350f8:	f003 fd0b 	bl	38b12 <assert_print>
   350fc:	4814      	ldr	r0, [pc, #80]	; (35150 <z_impl_k_thread_create+0x70>)
   350fe:	f240 2187 	movw	r1, #647	; 0x287
   35102:	f003 fcff 	bl	38b04 <assert_post_action>
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   35106:	9505      	str	r5, [sp, #20]
   35108:	9d10      	ldr	r5, [sp, #64]	; 0x40
   3510a:	9504      	str	r5, [sp, #16]
   3510c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   3510e:	9503      	str	r5, [sp, #12]
   35110:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   35112:	9502      	str	r5, [sp, #8]
   35114:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   35116:	9501      	str	r5, [sp, #4]
   35118:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   3511a:	9500      	str	r5, [sp, #0]
   3511c:	f7ff ff94 	bl	35048 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   35120:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
   35124:	bf08      	it	eq
   35126:	f1b7 3fff 	cmpeq.w	r7, #4294967295	; 0xffffffff
   3512a:	d005      	beq.n	35138 <z_impl_k_thread_create+0x58>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   3512c:	ea56 0307 	orrs.w	r3, r6, r7
   35130:	d105      	bne.n	3513e <z_impl_k_thread_create+0x5e>
	z_sched_start(thread);
   35132:	4620      	mov	r0, r4
   35134:	f001 fa4c 	bl	365d0 <z_sched_start>
}
   35138:	4620      	mov	r0, r4
   3513a:	b007      	add	sp, #28
   3513c:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   3513e:	4906      	ldr	r1, [pc, #24]	; (35158 <z_impl_k_thread_create+0x78>)
   35140:	463a      	mov	r2, r7
   35142:	4633      	mov	r3, r6
   35144:	f104 0018 	add.w	r0, r4, #24
   35148:	f002 f946 	bl	373d8 <z_add_timeout>
   3514c:	e7f4      	b.n	35138 <z_impl_k_thread_create+0x58>
   3514e:	bf00      	nop
   35150:	0003fccc 	.word	0x0003fccc
   35154:	0003d1d7 	.word	0x0003d1d7
   35158:	00036d15 	.word	0x00036d15

0003515c <z_init_static_threads>:
{
   3515c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   35160:	4c35      	ldr	r4, [pc, #212]	; (35238 <z_init_static_threads+0xdc>)
	_FOREACH_STATIC_THREAD(thread_data) {
   35162:	4d36      	ldr	r5, [pc, #216]	; (3523c <z_init_static_threads+0xe0>)
{
   35164:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
   35166:	42ac      	cmp	r4, r5
   35168:	4626      	mov	r6, r4
   3516a:	d926      	bls.n	351ba <z_init_static_threads+0x5e>
   3516c:	4934      	ldr	r1, [pc, #208]	; (35240 <z_init_static_threads+0xe4>)
   3516e:	4835      	ldr	r0, [pc, #212]	; (35244 <z_init_static_threads+0xe8>)
   35170:	f240 22ee 	movw	r2, #750	; 0x2ee
   35174:	f003 fccd 	bl	38b12 <assert_print>
   35178:	f240 21ee 	movw	r1, #750	; 0x2ee
	_FOREACH_STATIC_THREAD(thread_data) {
   3517c:	4830      	ldr	r0, [pc, #192]	; (35240 <z_init_static_threads+0xe4>)
   3517e:	f003 fcc1 	bl	38b04 <assert_post_action>
		z_setup_new_thread(
   35182:	f854 3c04 	ldr.w	r3, [r4, #-4]
   35186:	9305      	str	r3, [sp, #20]
   35188:	f854 3c10 	ldr.w	r3, [r4, #-16]
   3518c:	9304      	str	r3, [sp, #16]
   3518e:	f854 3c14 	ldr.w	r3, [r4, #-20]
   35192:	9303      	str	r3, [sp, #12]
   35194:	f854 3c18 	ldr.w	r3, [r4, #-24]
   35198:	9302      	str	r3, [sp, #8]
   3519a:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   3519e:	9301      	str	r3, [sp, #4]
   351a0:	f854 3c20 	ldr.w	r3, [r4, #-32]
   351a4:	9300      	str	r3, [sp, #0]
   351a6:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   351aa:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   351ae:	f7ff ff4b 	bl	35048 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   351b2:	f854 3c30 	ldr.w	r3, [r4, #-48]
   351b6:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
   351b8:	e7d5      	b.n	35166 <z_init_static_threads+0xa>
   351ba:	42ae      	cmp	r6, r5
   351bc:	f104 0430 	add.w	r4, r4, #48	; 0x30
   351c0:	d3df      	bcc.n	35182 <z_init_static_threads+0x26>
	k_sched_lock();
   351c2:	f001 fa45 	bl	36650 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   351c6:	4c1c      	ldr	r4, [pc, #112]	; (35238 <z_init_static_threads+0xdc>)
   351c8:	f8df 907c 	ldr.w	r9, [pc, #124]	; 35248 <z_init_static_threads+0xec>
   351cc:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   351d0:	f240 37e7 	movw	r7, #999	; 0x3e7
   351d4:	42ac      	cmp	r4, r5
   351d6:	d928      	bls.n	3522a <z_init_static_threads+0xce>
   351d8:	4919      	ldr	r1, [pc, #100]	; (35240 <z_init_static_threads+0xe4>)
   351da:	481a      	ldr	r0, [pc, #104]	; (35244 <z_init_static_threads+0xe8>)
   351dc:	f240 320d 	movw	r2, #781	; 0x30d
   351e0:	f003 fc97 	bl	38b12 <assert_print>
   351e4:	f240 310d 	movw	r1, #781	; 0x30d
   351e8:	e7c8      	b.n	3517c <z_init_static_threads+0x20>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   351ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
   351ec:	1c5a      	adds	r2, r3, #1
   351ee:	d00d      	beq.n	3520c <z_init_static_threads+0xb0>
					    K_MSEC(thread_data->init_delay));
   351f0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   351f4:	2100      	movs	r1, #0
   351f6:	4638      	mov	r0, r7
   351f8:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   351fc:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
   35200:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   35204:	d104      	bne.n	35210 <z_init_static_threads+0xb4>
	z_sched_start(thread);
   35206:	4640      	mov	r0, r8
   35208:	f001 f9e2 	bl	365d0 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   3520c:	3430      	adds	r4, #48	; 0x30
   3520e:	e7e1      	b.n	351d4 <z_init_static_threads+0x78>
   35210:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   35214:	2300      	movs	r3, #0
   35216:	f7d7 ffeb 	bl	d1f0 <__aeabi_uldivmod>
   3521a:	4602      	mov	r2, r0
   3521c:	460b      	mov	r3, r1
   3521e:	f108 0018 	add.w	r0, r8, #24
   35222:	4649      	mov	r1, r9
   35224:	f002 f8d8 	bl	373d8 <z_add_timeout>
   35228:	e7f0      	b.n	3520c <z_init_static_threads+0xb0>
   3522a:	d3de      	bcc.n	351ea <z_init_static_threads+0x8e>
}
   3522c:	b007      	add	sp, #28
   3522e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
   35232:	f001 ba59 	b.w	366e8 <k_sched_unlock>
   35236:	bf00      	nop
   35238:	0003c3b8 	.word	0x0003c3b8
   3523c:	0003c3b8 	.word	0x0003c3b8
   35240:	0003fccc 	.word	0x0003fccc
   35244:	0003d1d7 	.word	0x0003d1d7
   35248:	00036d15 	.word	0x00036d15

0003524c <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
   3524c:	6800      	ldr	r0, [r0, #0]

	if (thread_cpu != 0U) {
   3524e:	b138      	cbz	r0, 35260 <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3U) == _current_cpu->id) {
   35250:	4b04      	ldr	r3, [pc, #16]	; (35264 <z_spin_lock_valid+0x18>)
   35252:	7d1b      	ldrb	r3, [r3, #20]
   35254:	f000 0003 	and.w	r0, r0, #3
   35258:	1ac0      	subs	r0, r0, r3
   3525a:	bf18      	it	ne
   3525c:	2001      	movne	r0, #1
   3525e:	4770      	bx	lr
			return false;
		}
	}
	return true;
   35260:	2001      	movs	r0, #1
}
   35262:	4770      	bx	lr
   35264:	20003384 	.word	0x20003384

00035268 <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   35268:	4a06      	ldr	r2, [pc, #24]	; (35284 <z_spin_unlock_valid+0x1c>)
   3526a:	7d11      	ldrb	r1, [r2, #20]
   3526c:	6892      	ldr	r2, [r2, #8]
   3526e:	430a      	orrs	r2, r1
   35270:	6801      	ldr	r1, [r0, #0]
{
   35272:	4603      	mov	r3, r0
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   35274:	4291      	cmp	r1, r2
   35276:	f04f 0000 	mov.w	r0, #0
		return false;
	}
	l->thread_cpu = 0;
   3527a:	bf04      	itt	eq
   3527c:	6018      	streq	r0, [r3, #0]
	return true;
   3527e:	2001      	moveq	r0, #1
}
   35280:	4770      	bx	lr
   35282:	bf00      	nop
   35284:	20003384 	.word	0x20003384

00035288 <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
   35288:	4b02      	ldr	r3, [pc, #8]	; (35294 <z_spin_lock_set_owner+0xc>)
   3528a:	7d1a      	ldrb	r2, [r3, #20]
   3528c:	689b      	ldr	r3, [r3, #8]
   3528e:	4313      	orrs	r3, r2
   35290:	6003      	str	r3, [r0, #0]
}
   35292:	4770      	bx	lr
   35294:	20003384 	.word	0x20003384

00035298 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
   35298:	b508      	push	{r3, lr}
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	__ASSERT_NO_MSG(_current->base.prio >= 0);
   3529a:	4c12      	ldr	r4, [pc, #72]	; (352e4 <idle+0x4c>)
   3529c:	68a3      	ldr	r3, [r4, #8]
   3529e:	f993 300e 	ldrsb.w	r3, [r3, #14]
   352a2:	2b00      	cmp	r3, #0
   352a4:	db10      	blt.n	352c8 <idle+0x30>
	return !z_sys_post_kernel;
   352a6:	4d10      	ldr	r5, [pc, #64]	; (352e8 <idle+0x50>)
	__asm__ volatile(
   352a8:	f04f 0240 	mov.w	r2, #64	; 0x40
   352ac:	f3ef 8311 	mrs	r3, BASEPRI
   352b0:	f382 8812 	msr	BASEPRI_MAX, r2
   352b4:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
   352b8:	f002 f974 	bl	375a4 <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   352bc:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
   352be:	61a0      	str	r0, [r4, #24]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   352c0:	b95b      	cbnz	r3, 352da <idle+0x42>
	arch_cpu_idle();
   352c2:	f7f1 fd57 	bl	26d74 <arch_cpu_idle>
}
   352c6:	e7ef      	b.n	352a8 <idle+0x10>
	__ASSERT_NO_MSG(_current->base.prio >= 0);
   352c8:	4908      	ldr	r1, [pc, #32]	; (352ec <idle+0x54>)
   352ca:	4809      	ldr	r0, [pc, #36]	; (352f0 <idle+0x58>)
   352cc:	2227      	movs	r2, #39	; 0x27
   352ce:	f003 fc20 	bl	38b12 <assert_print>
   352d2:	4806      	ldr	r0, [pc, #24]	; (352ec <idle+0x54>)
   352d4:	2127      	movs	r1, #39	; 0x27
   352d6:	f003 fc15 	bl	38b04 <assert_post_action>
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   352da:	f7f1 fbb1 	bl	26a40 <pm_system_suspend>
   352de:	2800      	cmp	r0, #0
   352e0:	d1e2      	bne.n	352a8 <idle+0x10>
   352e2:	e7ee      	b.n	352c2 <idle+0x2a>
   352e4:	20003384 	.word	0x20003384
   352e8:	20004411 	.word	0x20004411
   352ec:	0003fcef 	.word	0x0003fcef
   352f0:	0003d1d7 	.word	0x0003d1d7

000352f4 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   352f4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   352f8:	4604      	mov	r4, r0
   352fa:	4617      	mov	r7, r2
   352fc:	461e      	mov	r6, r3
   352fe:	f3ef 8505 	mrs	r5, IPSR
	int new_prio;
	k_spinlock_key_t key;
	bool resched = false;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   35302:	b145      	cbz	r5, 35316 <z_impl_k_mutex_lock+0x22>
   35304:	4951      	ldr	r1, [pc, #324]	; (3544c <z_impl_k_mutex_lock+0x158>)
   35306:	4852      	ldr	r0, [pc, #328]	; (35450 <z_impl_k_mutex_lock+0x15c>)
   35308:	2265      	movs	r2, #101	; 0x65
   3530a:	f003 fc02 	bl	38b12 <assert_print>
   3530e:	484f      	ldr	r0, [pc, #316]	; (3544c <z_impl_k_mutex_lock+0x158>)
   35310:	2165      	movs	r1, #101	; 0x65
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   35312:	f003 fbf7 	bl	38b04 <assert_post_action>
   35316:	f04f 0340 	mov.w	r3, #64	; 0x40
   3531a:	f3ef 8811 	mrs	r8, BASEPRI
   3531e:	f383 8812 	msr	BASEPRI_MAX, r3
   35322:	f3bf 8f6f 	isb	sy
   35326:	484b      	ldr	r0, [pc, #300]	; (35454 <z_impl_k_mutex_lock+0x160>)
   35328:	f7ff ff90 	bl	3524c <z_spin_lock_valid>
   3532c:	b938      	cbnz	r0, 3533e <z_impl_k_mutex_lock+0x4a>
   3532e:	494a      	ldr	r1, [pc, #296]	; (35458 <z_impl_k_mutex_lock+0x164>)
   35330:	4847      	ldr	r0, [pc, #284]	; (35450 <z_impl_k_mutex_lock+0x15c>)
   35332:	2294      	movs	r2, #148	; 0x94
   35334:	f003 fbed 	bl	38b12 <assert_print>
   35338:	2194      	movs	r1, #148	; 0x94
   3533a:	4847      	ldr	r0, [pc, #284]	; (35458 <z_impl_k_mutex_lock+0x164>)
   3533c:	e7e9      	b.n	35312 <z_impl_k_mutex_lock+0x1e>
	z_spin_lock_set_owner(l);
   3533e:	4845      	ldr	r0, [pc, #276]	; (35454 <z_impl_k_mutex_lock+0x160>)
   35340:	f7ff ffa2 	bl	35288 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   35344:	68e3      	ldr	r3, [r4, #12]
   35346:	4a45      	ldr	r2, [pc, #276]	; (3545c <z_impl_k_mutex_lock+0x168>)
   35348:	b19b      	cbz	r3, 35372 <z_impl_k_mutex_lock+0x7e>
   3534a:	68a0      	ldr	r0, [r4, #8]
   3534c:	6891      	ldr	r1, [r2, #8]
   3534e:	4288      	cmp	r0, r1
   35350:	d022      	beq.n	35398 <z_impl_k_mutex_lock+0xa4>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   35352:	ea57 0306 	orrs.w	r3, r7, r6
   35356:	d127      	bne.n	353a8 <z_impl_k_mutex_lock+0xb4>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   35358:	483e      	ldr	r0, [pc, #248]	; (35454 <z_impl_k_mutex_lock+0x160>)
   3535a:	f7ff ff85 	bl	35268 <z_spin_unlock_valid>
   3535e:	b1a0      	cbz	r0, 3538a <z_impl_k_mutex_lock+0x96>
	__asm__ volatile(
   35360:	f388 8811 	msr	BASEPRI, r8
   35364:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
   35368:	f06f 000f 	mvn.w	r0, #15
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   3536c:	b002      	add	sp, #8
   3536e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   35372:	6891      	ldr	r1, [r2, #8]
   35374:	f991 100e 	ldrsb.w	r1, [r1, #14]
   35378:	4836      	ldr	r0, [pc, #216]	; (35454 <z_impl_k_mutex_lock+0x160>)
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   3537a:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
   3537c:	3301      	adds	r3, #1
   3537e:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   35380:	6893      	ldr	r3, [r2, #8]
   35382:	60a3      	str	r3, [r4, #8]
   35384:	f7ff ff70 	bl	35268 <z_spin_unlock_valid>
   35388:	b940      	cbnz	r0, 3539c <z_impl_k_mutex_lock+0xa8>
   3538a:	4933      	ldr	r1, [pc, #204]	; (35458 <z_impl_k_mutex_lock+0x164>)
   3538c:	4830      	ldr	r0, [pc, #192]	; (35450 <z_impl_k_mutex_lock+0x15c>)
   3538e:	22c2      	movs	r2, #194	; 0xc2
   35390:	f003 fbbf 	bl	38b12 <assert_print>
   35394:	21c2      	movs	r1, #194	; 0xc2
   35396:	e7d0      	b.n	3533a <z_impl_k_mutex_lock+0x46>
					_current->base.prio :
   35398:	6921      	ldr	r1, [r4, #16]
   3539a:	e7ed      	b.n	35378 <z_impl_k_mutex_lock+0x84>
   3539c:	f388 8811 	msr	BASEPRI, r8
   353a0:	f3bf 8f6f 	isb	sy
		return 0;
   353a4:	2000      	movs	r0, #0
   353a6:	e7e1      	b.n	3536c <z_impl_k_mutex_lock+0x78>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   353a8:	f991 100e 	ldrsb.w	r1, [r1, #14]
   353ac:	f990 300e 	ldrsb.w	r3, [r0, #14]
	return prio >= CONFIG_PRIORITY_CEILING;
}

static inline int z_get_new_prio_with_ceiling(int prio)
{
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
   353b0:	4299      	cmp	r1, r3
   353b2:	bfa8      	it	ge
   353b4:	4619      	movge	r1, r3
   353b6:	f06f 027e 	mvn.w	r2, #126	; 0x7e
   353ba:	4291      	cmp	r1, r2
   353bc:	bfb8      	it	lt
   353be:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   353c0:	428b      	cmp	r3, r1
   353c2:	dd02      	ble.n	353ca <z_impl_k_mutex_lock+0xd6>
		resched = adjust_owner_prio(mutex, new_prio);
   353c4:	f006 fc2b 	bl	3bc1e <adjust_owner_prio.isra.0>
   353c8:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   353ca:	e9cd 7600 	strd	r7, r6, [sp]
   353ce:	4821      	ldr	r0, [pc, #132]	; (35454 <z_impl_k_mutex_lock+0x160>)
   353d0:	4622      	mov	r2, r4
   353d2:	4641      	mov	r1, r8
   353d4:	f001 fb1c 	bl	36a10 <z_pend_curr>
	if (got_mutex == 0) {
   353d8:	2800      	cmp	r0, #0
   353da:	d0e3      	beq.n	353a4 <z_impl_k_mutex_lock+0xb0>
	__asm__ volatile(
   353dc:	f04f 0340 	mov.w	r3, #64	; 0x40
   353e0:	f3ef 8611 	mrs	r6, BASEPRI
   353e4:	f383 8812 	msr	BASEPRI_MAX, r3
   353e8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   353ec:	4819      	ldr	r0, [pc, #100]	; (35454 <z_impl_k_mutex_lock+0x160>)
   353ee:	f7ff ff2d 	bl	3524c <z_spin_lock_valid>
   353f2:	2800      	cmp	r0, #0
   353f4:	d09b      	beq.n	3532e <z_impl_k_mutex_lock+0x3a>
	z_spin_lock_set_owner(l);
   353f6:	4817      	ldr	r0, [pc, #92]	; (35454 <z_impl_k_mutex_lock+0x160>)
   353f8:	f7ff ff46 	bl	35288 <z_spin_lock_set_owner>
	if (likely(mutex->owner != NULL)) {
   353fc:	68a0      	ldr	r0, [r4, #8]
   353fe:	b1c0      	cbz	r0, 35432 <z_impl_k_mutex_lock+0x13e>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   35400:	6823      	ldr	r3, [r4, #0]
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   35402:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   35404:	429c      	cmp	r4, r3
   35406:	d00a      	beq.n	3541e <z_impl_k_mutex_lock+0x12a>
   35408:	b14b      	cbz	r3, 3541e <z_impl_k_mutex_lock+0x12a>
   3540a:	f993 300e 	ldrsb.w	r3, [r3, #14]
   3540e:	4299      	cmp	r1, r3
   35410:	bfa8      	it	ge
   35412:	4619      	movge	r1, r3
   35414:	f06f 037e 	mvn.w	r3, #126	; 0x7e
   35418:	4299      	cmp	r1, r3
   3541a:	bfb8      	it	lt
   3541c:	4619      	movlt	r1, r3
		resched = adjust_owner_prio(mutex, new_prio) || resched;
   3541e:	f006 fbfe 	bl	3bc1e <adjust_owner_prio.isra.0>
   35422:	b130      	cbz	r0, 35432 <z_impl_k_mutex_lock+0x13e>
		z_reschedule(&lock, key);
   35424:	480b      	ldr	r0, [pc, #44]	; (35454 <z_impl_k_mutex_lock+0x160>)
   35426:	4631      	mov	r1, r6
   35428:	f001 f89e 	bl	36568 <z_reschedule>
	return -EAGAIN;
   3542c:	f06f 000a 	mvn.w	r0, #10
   35430:	e79c      	b.n	3536c <z_impl_k_mutex_lock+0x78>
	if (resched) {
   35432:	2d00      	cmp	r5, #0
   35434:	d1f6      	bne.n	35424 <z_impl_k_mutex_lock+0x130>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   35436:	4807      	ldr	r0, [pc, #28]	; (35454 <z_impl_k_mutex_lock+0x160>)
   35438:	f7ff ff16 	bl	35268 <z_spin_unlock_valid>
   3543c:	2800      	cmp	r0, #0
   3543e:	d0a4      	beq.n	3538a <z_impl_k_mutex_lock+0x96>
	__asm__ volatile(
   35440:	f386 8811 	msr	BASEPRI, r6
   35444:	f3bf 8f6f 	isb	sy
   35448:	e7f0      	b.n	3542c <z_impl_k_mutex_lock+0x138>
   3544a:	bf00      	nop
   3544c:	0003fd10 	.word	0x0003fd10
   35450:	0003d1d7 	.word	0x0003d1d7
   35454:	200033ac 	.word	0x200033ac
   35458:	0003d39d 	.word	0x0003d39d
   3545c:	20003384 	.word	0x20003384

00035460 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   35460:	b570      	push	{r4, r5, r6, lr}
   35462:	4604      	mov	r4, r0
   35464:	f3ef 8605 	mrs	r6, IPSR
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   35468:	b146      	cbz	r6, 3547c <z_impl_k_mutex_unlock+0x1c>
   3546a:	4930      	ldr	r1, [pc, #192]	; (3552c <z_impl_k_mutex_unlock+0xcc>)
   3546c:	4830      	ldr	r0, [pc, #192]	; (35530 <z_impl_k_mutex_unlock+0xd0>)
   3546e:	22cd      	movs	r2, #205	; 0xcd
   35470:	f003 fb4f 	bl	38b12 <assert_print>
   35474:	21cd      	movs	r1, #205	; 0xcd
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
   35476:	482d      	ldr	r0, [pc, #180]	; (3552c <z_impl_k_mutex_unlock+0xcc>)
   35478:	f003 fb44 	bl	38b04 <assert_post_action>
	CHECKIF(mutex->owner == NULL) {
   3547c:	6883      	ldr	r3, [r0, #8]
   3547e:	2b00      	cmp	r3, #0
   35480:	d04e      	beq.n	35520 <z_impl_k_mutex_unlock+0xc0>
	CHECKIF(mutex->owner != _current) {
   35482:	4a2c      	ldr	r2, [pc, #176]	; (35534 <z_impl_k_mutex_unlock+0xd4>)
   35484:	6892      	ldr	r2, [r2, #8]
   35486:	4293      	cmp	r3, r2
   35488:	d14d      	bne.n	35526 <z_impl_k_mutex_unlock+0xc6>
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
   3548a:	68c3      	ldr	r3, [r0, #12]
   3548c:	b933      	cbnz	r3, 3549c <z_impl_k_mutex_unlock+0x3c>
   3548e:	4927      	ldr	r1, [pc, #156]	; (3552c <z_impl_k_mutex_unlock+0xcc>)
   35490:	4827      	ldr	r0, [pc, #156]	; (35530 <z_impl_k_mutex_unlock+0xd0>)
   35492:	22e5      	movs	r2, #229	; 0xe5
   35494:	f003 fb3d 	bl	38b12 <assert_print>
   35498:	21e5      	movs	r1, #229	; 0xe5
   3549a:	e7ec      	b.n	35476 <z_impl_k_mutex_unlock+0x16>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   3549c:	2b01      	cmp	r3, #1
   3549e:	d003      	beq.n	354a8 <z_impl_k_mutex_unlock+0x48>
		mutex->lock_count--;
   354a0:	3b01      	subs	r3, #1
   354a2:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
   354a4:	2000      	movs	r0, #0
}
   354a6:	bd70      	pop	{r4, r5, r6, pc}
	__asm__ volatile(
   354a8:	f04f 0340 	mov.w	r3, #64	; 0x40
   354ac:	f3ef 8511 	mrs	r5, BASEPRI
   354b0:	f383 8812 	msr	BASEPRI_MAX, r3
   354b4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   354b8:	481f      	ldr	r0, [pc, #124]	; (35538 <z_impl_k_mutex_unlock+0xd8>)
   354ba:	f7ff fec7 	bl	3524c <z_spin_lock_valid>
   354be:	b938      	cbnz	r0, 354d0 <z_impl_k_mutex_unlock+0x70>
   354c0:	491e      	ldr	r1, [pc, #120]	; (3553c <z_impl_k_mutex_unlock+0xdc>)
   354c2:	481b      	ldr	r0, [pc, #108]	; (35530 <z_impl_k_mutex_unlock+0xd0>)
   354c4:	2294      	movs	r2, #148	; 0x94
   354c6:	f003 fb24 	bl	38b12 <assert_print>
   354ca:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   354cc:	481b      	ldr	r0, [pc, #108]	; (3553c <z_impl_k_mutex_unlock+0xdc>)
   354ce:	e7d3      	b.n	35478 <z_impl_k_mutex_unlock+0x18>
	z_spin_lock_set_owner(l);
   354d0:	4819      	ldr	r0, [pc, #100]	; (35538 <z_impl_k_mutex_unlock+0xd8>)
   354d2:	f7ff fed9 	bl	35288 <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   354d6:	6921      	ldr	r1, [r4, #16]
   354d8:	68a0      	ldr	r0, [r4, #8]
   354da:	f006 fba0 	bl	3bc1e <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   354de:	4620      	mov	r0, r4
   354e0:	f001 fc98 	bl	36e14 <z_unpend_first_thread>
	mutex->owner = new_owner;
   354e4:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   354e6:	b150      	cbz	r0, 354fe <z_impl_k_mutex_unlock+0x9e>
		mutex->owner_orig_prio = new_owner->base.prio;
   354e8:	f990 200e 	ldrsb.w	r2, [r0, #14]
   354ec:	6122      	str	r2, [r4, #16]
   354ee:	67c6      	str	r6, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
   354f0:	f000 ffd2 	bl	36498 <z_ready_thread>
		z_reschedule(&lock, key);
   354f4:	4810      	ldr	r0, [pc, #64]	; (35538 <z_impl_k_mutex_unlock+0xd8>)
   354f6:	4629      	mov	r1, r5
   354f8:	f001 f836 	bl	36568 <z_reschedule>
   354fc:	e7d2      	b.n	354a4 <z_impl_k_mutex_unlock+0x44>
		mutex->lock_count = 0U;
   354fe:	60e0      	str	r0, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   35500:	480d      	ldr	r0, [pc, #52]	; (35538 <z_impl_k_mutex_unlock+0xd8>)
   35502:	f7ff feb1 	bl	35268 <z_spin_unlock_valid>
   35506:	b930      	cbnz	r0, 35516 <z_impl_k_mutex_unlock+0xb6>
   35508:	490c      	ldr	r1, [pc, #48]	; (3553c <z_impl_k_mutex_unlock+0xdc>)
   3550a:	4809      	ldr	r0, [pc, #36]	; (35530 <z_impl_k_mutex_unlock+0xd0>)
   3550c:	22c2      	movs	r2, #194	; 0xc2
   3550e:	f003 fb00 	bl	38b12 <assert_print>
   35512:	21c2      	movs	r1, #194	; 0xc2
   35514:	e7da      	b.n	354cc <z_impl_k_mutex_unlock+0x6c>
	__asm__ volatile(
   35516:	f385 8811 	msr	BASEPRI, r5
   3551a:	f3bf 8f6f 	isb	sy
   3551e:	e7c1      	b.n	354a4 <z_impl_k_mutex_unlock+0x44>
		return -EINVAL;
   35520:	f06f 0015 	mvn.w	r0, #21
   35524:	e7bf      	b.n	354a6 <z_impl_k_mutex_unlock+0x46>
		return -EPERM;
   35526:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3552a:	e7bc      	b.n	354a6 <z_impl_k_mutex_unlock+0x46>
   3552c:	0003fd10 	.word	0x0003fd10
   35530:	0003d1d7 	.word	0x0003d1d7
   35534:	20003384 	.word	0x20003384
   35538:	200033ac 	.word	0x200033ac
   3553c:	0003d39d 	.word	0x0003d39d

00035540 <queue_insert>:
#include <syscalls/k_queue_cancel_wait_mrsh.c>
#endif

static int32_t queue_insert(struct k_queue *queue, void *prev, void *data,
			    bool alloc, bool is_append)
{
   35540:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   35544:	4604      	mov	r4, r0
   35546:	f89d a020 	ldrb.w	sl, [sp, #32]
   3554a:	460d      	mov	r5, r1
   3554c:	4690      	mov	r8, r2
   3554e:	4699      	mov	r9, r3
	struct k_thread *first_pending_thread;
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   35550:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   35554:	f04f 0340 	mov.w	r3, #64	; 0x40
   35558:	f3ef 8711 	mrs	r7, BASEPRI
   3555c:	f383 8812 	msr	BASEPRI_MAX, r3
   35560:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   35564:	4630      	mov	r0, r6
   35566:	f7ff fe71 	bl	3524c <z_spin_lock_valid>
   3556a:	b940      	cbnz	r0, 3557e <queue_insert+0x3e>
   3556c:	4936      	ldr	r1, [pc, #216]	; (35648 <queue_insert+0x108>)
   3556e:	4837      	ldr	r0, [pc, #220]	; (3564c <queue_insert+0x10c>)
   35570:	2294      	movs	r2, #148	; 0x94
   35572:	f003 face 	bl	38b12 <assert_print>
   35576:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   35578:	4833      	ldr	r0, [pc, #204]	; (35648 <queue_insert+0x108>)
   3557a:	f003 fac3 	bl	38b04 <assert_post_action>
	z_spin_lock_set_owner(l);
   3557e:	4630      	mov	r0, r6
   35580:	f7ff fe82 	bl	35288 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, queue_insert, queue, alloc);

	if (is_append) {
   35584:	f1ba 0f00 	cmp.w	sl, #0
   35588:	d000      	beq.n	3558c <queue_insert+0x4c>
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_tail(sys_sflist_t *list)
{
	return list->tail;
   3558a:	6865      	ldr	r5, [r4, #4]
		prev = sys_sflist_peek_tail(&queue->data_q);
	}
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   3558c:	f104 000c 	add.w	r0, r4, #12
   35590:	f001 fc40 	bl	36e14 <z_unpend_first_thread>

	if (first_pending_thread != NULL) {
   35594:	b158      	cbz	r0, 355ae <queue_insert+0x6e>
   35596:	2300      	movs	r3, #0
   35598:	67c3      	str	r3, [r0, #124]	; 0x7c
   3559a:	f8c0 8014 	str.w	r8, [r0, #20]
	z_ready_thread(thread);
   3559e:	f000 ff7b 	bl	36498 <z_ready_thread>

	SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_queue, queue_insert, queue, alloc, K_FOREVER);

	sys_sflist_insert(&queue->data_q, prev, data);
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
	z_reschedule(&queue->lock, key);
   355a2:	4630      	mov	r0, r6
   355a4:	4639      	mov	r1, r7
   355a6:	f000 ffdf 	bl	36568 <z_reschedule>
		return 0;
   355aa:	2000      	movs	r0, #0
   355ac:	e017      	b.n	355de <queue_insert+0x9e>
	if (alloc) {
   355ae:	f1b9 0f00 	cmp.w	r9, #0
   355b2:	d026      	beq.n	35602 <queue_insert+0xc2>
	return z_thread_aligned_alloc(0, size);
   355b4:	2108      	movs	r1, #8
   355b6:	f002 fc9b 	bl	37ef0 <z_thread_aligned_alloc>
		if (anode == NULL) {
   355ba:	b990      	cbnz	r0, 355e2 <queue_insert+0xa2>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   355bc:	4630      	mov	r0, r6
   355be:	f7ff fe53 	bl	35268 <z_spin_unlock_valid>
   355c2:	b930      	cbnz	r0, 355d2 <queue_insert+0x92>
   355c4:	4920      	ldr	r1, [pc, #128]	; (35648 <queue_insert+0x108>)
   355c6:	4821      	ldr	r0, [pc, #132]	; (3564c <queue_insert+0x10c>)
   355c8:	22c2      	movs	r2, #194	; 0xc2
   355ca:	f003 faa2 	bl	38b12 <assert_print>
   355ce:	21c2      	movs	r1, #194	; 0xc2
   355d0:	e7d2      	b.n	35578 <queue_insert+0x38>
	__asm__ volatile(
   355d2:	f387 8811 	msr	BASEPRI, r7
   355d6:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   355da:	f06f 000b 	mvn.w	r0, #11

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, queue_insert, queue, alloc, 0);

	return 0;
}
   355de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 * @param flags A value between 0 and 3 to set the flags value
 */
static inline void sys_sfnode_init(sys_sfnode_t *node, uint8_t flags)
{
	__ASSERT((flags & ~SYS_SFLIST_FLAGS_MASK) == 0UL, "flags too large");
	node->next_and_flags = flags;
   355e2:	2201      	movs	r2, #1
		anode->data = data;
   355e4:	f8c0 8004 	str.w	r8, [r0, #4]
   355e8:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   355ea:	6801      	ldr	r1, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   355ec:	f001 0103 	and.w	r1, r1, #3
 */
static inline void sys_sflist_insert(sys_sflist_t *list,
				     sys_sfnode_t *prev,
				     sys_sfnode_t *node);

Z_GENLIST_INSERT(sflist, sfnode)
   355f0:	b95d      	cbnz	r5, 3560a <queue_insert+0xca>
	parent->next_and_flags = cur_flags | (unative_t)child;
   355f2:	6822      	ldr	r2, [r4, #0]
   355f4:	430a      	orrs	r2, r1
   355f6:	6002      	str	r2, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   355f8:	6862      	ldr	r2, [r4, #4]
	list->head = node;
   355fa:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   355fc:	b96a      	cbnz	r2, 3561a <queue_insert+0xda>
	list->tail = node;
   355fe:	6060      	str	r0, [r4, #4]
}
   35600:	e00b      	b.n	3561a <queue_insert+0xda>
	node->next_and_flags = flags;
   35602:	f8c8 9000 	str.w	r9, [r8]
}
   35606:	4640      	mov	r0, r8
   35608:	e7ef      	b.n	355ea <queue_insert+0xaa>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   3560a:	682a      	ldr	r2, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   3560c:	2a03      	cmp	r2, #3
   3560e:	d810      	bhi.n	35632 <queue_insert+0xf2>
	parent->next_and_flags = cur_flags | (unative_t)child;
   35610:	6001      	str	r1, [r0, #0]
	return list->tail;
   35612:	6861      	ldr	r1, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   35614:	b939      	cbnz	r1, 35626 <queue_insert+0xe6>
	list->head = node;
   35616:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   3561a:	2104      	movs	r1, #4
   3561c:	f104 0014 	add.w	r0, r4, #20
   35620:	f006 fcb8 	bl	3bf94 <z_handle_obj_poll_events>
   35624:	e7bd      	b.n	355a2 <queue_insert+0x62>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   35626:	680a      	ldr	r2, [r1, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   35628:	f002 0203 	and.w	r2, r2, #3
   3562c:	4302      	orrs	r2, r0
   3562e:	600a      	str	r2, [r1, #0]
   35630:	e7e5      	b.n	355fe <queue_insert+0xbe>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   35632:	f022 0203 	bic.w	r2, r2, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   35636:	430a      	orrs	r2, r1
   35638:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   3563a:	682a      	ldr	r2, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   3563c:	f002 0203 	and.w	r2, r2, #3
   35640:	ea40 0302 	orr.w	r3, r0, r2
   35644:	602b      	str	r3, [r5, #0]
}
   35646:	e7e8      	b.n	3561a <queue_insert+0xda>
   35648:	0003d39d 	.word	0x0003d39d
   3564c:	0003d1d7 	.word	0x0003d1d7

00035650 <k_queue_append_list>:
}
#include <syscalls/k_queue_alloc_prepend_mrsh.c>
#endif

int k_queue_append_list(struct k_queue *queue, void *head, void *tail)
{
   35650:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   35654:	4605      	mov	r5, r0
   35656:	4616      	mov	r6, r2
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, append_list, queue);

	/* invalid head or tail of list */
	CHECKIF(head == NULL || tail == NULL) {
   35658:	460c      	mov	r4, r1
   3565a:	2900      	cmp	r1, #0
   3565c:	d045      	beq.n	356ea <k_queue_append_list+0x9a>
   3565e:	2a00      	cmp	r2, #0
   35660:	d043      	beq.n	356ea <k_queue_append_list+0x9a>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, append_list, queue, -EINVAL);

		return -EINVAL;
	}

	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   35662:	f100 0708 	add.w	r7, r0, #8
	__asm__ volatile(
   35666:	f04f 0340 	mov.w	r3, #64	; 0x40
   3566a:	f3ef 8911 	mrs	r9, BASEPRI
   3566e:	f383 8812 	msr	BASEPRI_MAX, r3
   35672:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   35676:	4638      	mov	r0, r7
   35678:	f7ff fde8 	bl	3524c <z_spin_lock_valid>
   3567c:	b940      	cbnz	r0, 35690 <k_queue_append_list+0x40>
   3567e:	491c      	ldr	r1, [pc, #112]	; (356f0 <k_queue_append_list+0xa0>)
   35680:	481c      	ldr	r0, [pc, #112]	; (356f4 <k_queue_append_list+0xa4>)
   35682:	2294      	movs	r2, #148	; 0x94
   35684:	f003 fa45 	bl	38b12 <assert_print>
   35688:	4819      	ldr	r0, [pc, #100]	; (356f0 <k_queue_append_list+0xa0>)
   3568a:	2194      	movs	r1, #148	; 0x94
   3568c:	f003 fa3a 	bl	38b04 <assert_post_action>
	z_spin_lock_set_owner(l);
   35690:	4638      	mov	r0, r7
	struct k_thread *thread = NULL;

	if (head != NULL) {
		thread = z_unpend_first_thread(&queue->wait_q);
   35692:	f105 080c 	add.w	r8, r5, #12
   35696:	f7ff fdf7 	bl	35288 <z_spin_lock_set_owner>
   3569a:	4640      	mov	r0, r8
   3569c:	f001 fbba 	bl	36e14 <z_unpend_first_thread>
	}

	while ((head != NULL) && (thread != NULL)) {
   356a0:	b168      	cbz	r0, 356be <k_queue_append_list+0x6e>
   356a2:	f04f 0a00 	mov.w	sl, #0
	thread->base.swap_data = data;
   356a6:	6144      	str	r4, [r0, #20]
   356a8:	f8c0 a07c 	str.w	sl, [r0, #124]	; 0x7c
	z_ready_thread(thread);
   356ac:	f000 fef4 	bl	36498 <z_ready_thread>
		prepare_thread_to_run(thread, head);
		head = *(void **)head;
   356b0:	6824      	ldr	r4, [r4, #0]
		thread = z_unpend_first_thread(&queue->wait_q);
   356b2:	4640      	mov	r0, r8
   356b4:	f001 fbae 	bl	36e14 <z_unpend_first_thread>
	while ((head != NULL) && (thread != NULL)) {
   356b8:	b12c      	cbz	r4, 356c6 <k_queue_append_list+0x76>
   356ba:	2800      	cmp	r0, #0
   356bc:	d1f3      	bne.n	356a6 <k_queue_append_list+0x56>
	return list->tail;
   356be:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   356c0:	b96b      	cbnz	r3, 356de <k_queue_append_list+0x8e>
	list->head = node;
   356c2:	602c      	str	r4, [r5, #0]
	list->tail = node;
   356c4:	606e      	str	r6, [r5, #4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   356c6:	2104      	movs	r1, #4
   356c8:	f105 0014 	add.w	r0, r5, #20
   356cc:	f006 fc62 	bl	3bf94 <z_handle_obj_poll_events>
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, append_list, queue, 0);

	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
	z_reschedule(&queue->lock, key);
   356d0:	4638      	mov	r0, r7
   356d2:	4649      	mov	r1, r9
   356d4:	f000 ff48 	bl	36568 <z_reschedule>
	return 0;
   356d8:	2000      	movs	r0, #0
}
   356da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   356de:	681a      	ldr	r2, [r3, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   356e0:	f002 0203 	and.w	r2, r2, #3
   356e4:	4314      	orrs	r4, r2
   356e6:	601c      	str	r4, [r3, #0]
}
   356e8:	e7ec      	b.n	356c4 <k_queue_append_list+0x74>
		return -EINVAL;
   356ea:	f06f 0015 	mvn.w	r0, #21
   356ee:	e7f4      	b.n	356da <k_queue_append_list+0x8a>
   356f0:	0003d39d 	.word	0x0003d39d
   356f4:	0003d1d7 	.word	0x0003d1d7

000356f8 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   356f8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   356fc:	4605      	mov	r5, r0
   356fe:	4691      	mov	r9, r2
   35700:	461f      	mov	r7, r3
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   35702:	f100 0608 	add.w	r6, r0, #8
   35706:	f04f 0340 	mov.w	r3, #64	; 0x40
   3570a:	f3ef 8811 	mrs	r8, BASEPRI
   3570e:	f383 8812 	msr	BASEPRI_MAX, r3
   35712:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   35716:	4630      	mov	r0, r6
   35718:	f7ff fd98 	bl	3524c <z_spin_lock_valid>
   3571c:	b940      	cbnz	r0, 35730 <z_impl_k_queue_get+0x38>
   3571e:	491f      	ldr	r1, [pc, #124]	; (3579c <z_impl_k_queue_get+0xa4>)
   35720:	481f      	ldr	r0, [pc, #124]	; (357a0 <z_impl_k_queue_get+0xa8>)
   35722:	2294      	movs	r2, #148	; 0x94
   35724:	f003 f9f5 	bl	38b12 <assert_print>
   35728:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3572a:	481c      	ldr	r0, [pc, #112]	; (3579c <z_impl_k_queue_get+0xa4>)
   3572c:	f003 f9ea 	bl	38b04 <assert_post_action>
	z_spin_lock_set_owner(l);
   35730:	4630      	mov	r0, r6
   35732:	f7ff fda9 	bl	35288 <z_spin_lock_set_owner>
	return list->head;
   35736:	682c      	ldr	r4, [r5, #0]
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   35738:	b1bc      	cbz	r4, 3576a <z_impl_k_queue_get+0x72>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   3573a:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   3573c:	686a      	ldr	r2, [r5, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   3573e:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   35742:	4294      	cmp	r4, r2
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   35744:	4620      	mov	r0, r4
	list->head = node;
   35746:	602b      	str	r3, [r5, #0]
	list->tail = node;
   35748:	bf08      	it	eq
   3574a:	606b      	streq	r3, [r5, #4]
   3574c:	2101      	movs	r1, #1
   3574e:	f006 fa6e 	bl	3bc2e <z_queue_node_peek>
   35752:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   35754:	4630      	mov	r0, r6
   35756:	f7ff fd87 	bl	35268 <z_spin_unlock_valid>
   3575a:	b9b0      	cbnz	r0, 3578a <z_impl_k_queue_get+0x92>
   3575c:	490f      	ldr	r1, [pc, #60]	; (3579c <z_impl_k_queue_get+0xa4>)
   3575e:	4810      	ldr	r0, [pc, #64]	; (357a0 <z_impl_k_queue_get+0xa8>)
   35760:	22c2      	movs	r2, #194	; 0xc2
   35762:	f003 f9d6 	bl	38b12 <assert_print>
   35766:	21c2      	movs	r1, #194	; 0xc2
   35768:	e7df      	b.n	3572a <z_impl_k_queue_get+0x32>
		return data;
	}

	SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_queue, get, queue, timeout);

	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   3576a:	ea59 0307 	orrs.w	r3, r9, r7
   3576e:	d0f1      	beq.n	35754 <z_impl_k_queue_get+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout, NULL);

		return NULL;
	}

	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   35770:	e9cd 9700 	strd	r9, r7, [sp]
   35774:	f105 020c 	add.w	r2, r5, #12
   35778:	4641      	mov	r1, r8
   3577a:	4630      	mov	r0, r6
   3577c:	f001 f948 	bl	36a10 <z_pend_curr>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
   35780:	b938      	cbnz	r0, 35792 <z_impl_k_queue_get+0x9a>
   35782:	4b08      	ldr	r3, [pc, #32]	; (357a4 <z_impl_k_queue_get+0xac>)
   35784:	689b      	ldr	r3, [r3, #8]
   35786:	695c      	ldr	r4, [r3, #20]
   35788:	e003      	b.n	35792 <z_impl_k_queue_get+0x9a>
	__asm__ volatile(
   3578a:	f388 8811 	msr	BASEPRI, r8
   3578e:	f3bf 8f6f 	isb	sy
}
   35792:	4620      	mov	r0, r4
   35794:	b003      	add	sp, #12
   35796:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   3579a:	bf00      	nop
   3579c:	0003d39d 	.word	0x0003d39d
   357a0:	0003d1d7 	.word	0x0003d1d7
   357a4:	20003384 	.word	0x20003384

000357a8 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   357a8:	b538      	push	{r3, r4, r5, lr}
   357aa:	4604      	mov	r4, r0
	__asm__ volatile(
   357ac:	f04f 0340 	mov.w	r3, #64	; 0x40
   357b0:	f3ef 8511 	mrs	r5, BASEPRI
   357b4:	f383 8812 	msr	BASEPRI_MAX, r3
   357b8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   357bc:	4814      	ldr	r0, [pc, #80]	; (35810 <z_impl_k_sem_give+0x68>)
   357be:	f7ff fd45 	bl	3524c <z_spin_lock_valid>
   357c2:	b940      	cbnz	r0, 357d6 <z_impl_k_sem_give+0x2e>
   357c4:	4913      	ldr	r1, [pc, #76]	; (35814 <z_impl_k_sem_give+0x6c>)
   357c6:	4814      	ldr	r0, [pc, #80]	; (35818 <z_impl_k_sem_give+0x70>)
   357c8:	2294      	movs	r2, #148	; 0x94
   357ca:	f003 f9a2 	bl	38b12 <assert_print>
   357ce:	4811      	ldr	r0, [pc, #68]	; (35814 <z_impl_k_sem_give+0x6c>)
   357d0:	2194      	movs	r1, #148	; 0x94
   357d2:	f003 f997 	bl	38b04 <assert_post_action>
	z_spin_lock_set_owner(l);
   357d6:	480e      	ldr	r0, [pc, #56]	; (35810 <z_impl_k_sem_give+0x68>)
   357d8:	f7ff fd56 	bl	35288 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   357dc:	4620      	mov	r0, r4
   357de:	f001 fb19 	bl	36e14 <z_unpend_first_thread>

	if (thread != NULL) {
   357e2:	b148      	cbz	r0, 357f8 <z_impl_k_sem_give+0x50>
   357e4:	2200      	movs	r2, #0
   357e6:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   357e8:	f000 fe56 	bl	36498 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   357ec:	4629      	mov	r1, r5
   357ee:	4808      	ldr	r0, [pc, #32]	; (35810 <z_impl_k_sem_give+0x68>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   357f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   357f4:	f000 beb8 	b.w	36568 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   357f8:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   357fc:	429a      	cmp	r2, r3
   357fe:	bf18      	it	ne
   35800:	3301      	addne	r3, #1
   35802:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   35804:	2102      	movs	r1, #2
   35806:	f104 0010 	add.w	r0, r4, #16
   3580a:	f006 fbc3 	bl	3bf94 <z_handle_obj_poll_events>
}
   3580e:	e7ed      	b.n	357ec <z_impl_k_sem_give+0x44>
   35810:	200033b0 	.word	0x200033b0
   35814:	0003d39d 	.word	0x0003d39d
   35818:	0003d1d7 	.word	0x0003d1d7

0003581c <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   3581c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   3581e:	4604      	mov	r4, r0
   35820:	4616      	mov	r6, r2
   35822:	461d      	mov	r5, r3
   35824:	f3ef 8305 	mrs	r3, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) ||
   35828:	b15b      	cbz	r3, 35842 <z_impl_k_sem_take+0x26>
   3582a:	ea52 0305 	orrs.w	r3, r2, r5
   3582e:	d008      	beq.n	35842 <z_impl_k_sem_take+0x26>
   35830:	4926      	ldr	r1, [pc, #152]	; (358cc <z_impl_k_sem_take+0xb0>)
   35832:	4827      	ldr	r0, [pc, #156]	; (358d0 <z_impl_k_sem_take+0xb4>)
   35834:	2279      	movs	r2, #121	; 0x79
   35836:	f003 f96c 	bl	38b12 <assert_print>
   3583a:	4824      	ldr	r0, [pc, #144]	; (358cc <z_impl_k_sem_take+0xb0>)
   3583c:	2179      	movs	r1, #121	; 0x79
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3583e:	f003 f961 	bl	38b04 <assert_post_action>
   35842:	f04f 0340 	mov.w	r3, #64	; 0x40
   35846:	f3ef 8711 	mrs	r7, BASEPRI
   3584a:	f383 8812 	msr	BASEPRI_MAX, r3
   3584e:	f3bf 8f6f 	isb	sy
   35852:	4820      	ldr	r0, [pc, #128]	; (358d4 <z_impl_k_sem_take+0xb8>)
   35854:	f7ff fcfa 	bl	3524c <z_spin_lock_valid>
   35858:	b938      	cbnz	r0, 3586a <z_impl_k_sem_take+0x4e>
   3585a:	491f      	ldr	r1, [pc, #124]	; (358d8 <z_impl_k_sem_take+0xbc>)
   3585c:	481c      	ldr	r0, [pc, #112]	; (358d0 <z_impl_k_sem_take+0xb4>)
   3585e:	2294      	movs	r2, #148	; 0x94
   35860:	f003 f957 	bl	38b12 <assert_print>
   35864:	2194      	movs	r1, #148	; 0x94
   35866:	481c      	ldr	r0, [pc, #112]	; (358d8 <z_impl_k_sem_take+0xbc>)
   35868:	e7e9      	b.n	3583e <z_impl_k_sem_take+0x22>
	z_spin_lock_set_owner(l);
   3586a:	481a      	ldr	r0, [pc, #104]	; (358d4 <z_impl_k_sem_take+0xb8>)
   3586c:	f7ff fd0c 	bl	35288 <z_spin_lock_set_owner>

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   35870:	68a3      	ldr	r3, [r4, #8]
   35872:	b19b      	cbz	r3, 3589c <z_impl_k_sem_take+0x80>
		sem->count--;
   35874:	3b01      	subs	r3, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   35876:	4817      	ldr	r0, [pc, #92]	; (358d4 <z_impl_k_sem_take+0xb8>)
   35878:	60a3      	str	r3, [r4, #8]
   3587a:	f7ff fcf5 	bl	35268 <z_spin_unlock_valid>
   3587e:	b930      	cbnz	r0, 3588e <z_impl_k_sem_take+0x72>
   35880:	4915      	ldr	r1, [pc, #84]	; (358d8 <z_impl_k_sem_take+0xbc>)
   35882:	4813      	ldr	r0, [pc, #76]	; (358d0 <z_impl_k_sem_take+0xb4>)
   35884:	22c2      	movs	r2, #194	; 0xc2
   35886:	f003 f944 	bl	38b12 <assert_print>
   3588a:	21c2      	movs	r1, #194	; 0xc2
   3588c:	e7eb      	b.n	35866 <z_impl_k_sem_take+0x4a>
	__asm__ volatile(
   3588e:	f387 8811 	msr	BASEPRI, r7
   35892:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   35896:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   35898:	b003      	add	sp, #12
   3589a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   3589c:	ea56 0305 	orrs.w	r3, r6, r5
   358a0:	d10b      	bne.n	358ba <z_impl_k_sem_take+0x9e>
   358a2:	480c      	ldr	r0, [pc, #48]	; (358d4 <z_impl_k_sem_take+0xb8>)
   358a4:	f7ff fce0 	bl	35268 <z_spin_unlock_valid>
   358a8:	2800      	cmp	r0, #0
   358aa:	d0e9      	beq.n	35880 <z_impl_k_sem_take+0x64>
   358ac:	f387 8811 	msr	BASEPRI, r7
   358b0:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   358b4:	f06f 000f 	mvn.w	r0, #15
   358b8:	e7ee      	b.n	35898 <z_impl_k_sem_take+0x7c>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   358ba:	e9cd 6500 	strd	r6, r5, [sp]
   358be:	4622      	mov	r2, r4
   358c0:	4639      	mov	r1, r7
   358c2:	4804      	ldr	r0, [pc, #16]	; (358d4 <z_impl_k_sem_take+0xb8>)
   358c4:	f001 f8a4 	bl	36a10 <z_pend_curr>
	return ret;
   358c8:	e7e6      	b.n	35898 <z_impl_k_sem_take+0x7c>
   358ca:	bf00      	nop
   358cc:	0003fd32 	.word	0x0003fd32
   358d0:	0003d1d7 	.word	0x0003d1d7
   358d4:	200033b0 	.word	0x200033b0
   358d8:	0003d39d 	.word	0x0003d39d

000358dc <z_impl_k_sem_reset>:

void z_impl_k_sem_reset(struct k_sem *sem)
{
   358dc:	b570      	push	{r4, r5, r6, lr}
   358de:	4604      	mov	r4, r0
	__asm__ volatile(
   358e0:	f04f 0340 	mov.w	r3, #64	; 0x40
   358e4:	f3ef 8511 	mrs	r5, BASEPRI
   358e8:	f383 8812 	msr	BASEPRI_MAX, r3
   358ec:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   358f0:	4812      	ldr	r0, [pc, #72]	; (3593c <z_impl_k_sem_reset+0x60>)
   358f2:	f7ff fcab 	bl	3524c <z_spin_lock_valid>
   358f6:	b940      	cbnz	r0, 3590a <z_impl_k_sem_reset+0x2e>
   358f8:	4911      	ldr	r1, [pc, #68]	; (35940 <z_impl_k_sem_reset+0x64>)
   358fa:	4812      	ldr	r0, [pc, #72]	; (35944 <z_impl_k_sem_reset+0x68>)
   358fc:	2294      	movs	r2, #148	; 0x94
   358fe:	f003 f908 	bl	38b12 <assert_print>
   35902:	480f      	ldr	r0, [pc, #60]	; (35940 <z_impl_k_sem_reset+0x64>)
   35904:	2194      	movs	r1, #148	; 0x94
   35906:	f003 f8fd 	bl	38b04 <assert_post_action>
	z_spin_lock_set_owner(l);
   3590a:	480c      	ldr	r0, [pc, #48]	; (3593c <z_impl_k_sem_reset+0x60>)
   3590c:	f7ff fcbc 	bl	35288 <z_spin_lock_set_owner>
   35910:	f06f 060a 	mvn.w	r6, #10
	struct k_thread *thread;
	k_spinlock_key_t key = k_spin_lock(&lock);

	while (true) {
		thread = z_unpend_first_thread(&sem->wait_q);
   35914:	4620      	mov	r0, r4
   35916:	f001 fa7d 	bl	36e14 <z_unpend_first_thread>
		if (thread == NULL) {
   3591a:	b118      	cbz	r0, 35924 <z_impl_k_sem_reset+0x48>
   3591c:	67c6      	str	r6, [r0, #124]	; 0x7c
			break;
		}
		arch_thread_return_value_set(thread, -EAGAIN);
		z_ready_thread(thread);
   3591e:	f000 fdbb 	bl	36498 <z_ready_thread>
		thread = z_unpend_first_thread(&sem->wait_q);
   35922:	e7f7      	b.n	35914 <z_impl_k_sem_reset+0x38>
	}
	sem->count = 0;
   35924:	60a0      	str	r0, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   35926:	2102      	movs	r1, #2
   35928:	f104 0010 	add.w	r0, r4, #16
   3592c:	f006 fb32 	bl	3bf94 <z_handle_obj_poll_events>

	SYS_PORT_TRACING_OBJ_FUNC(k_sem, reset, sem);

	handle_poll_events(sem);

	z_reschedule(&lock, key);
   35930:	4629      	mov	r1, r5
   35932:	4802      	ldr	r0, [pc, #8]	; (3593c <z_impl_k_sem_reset+0x60>)
}
   35934:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_reschedule(&lock, key);
   35938:	f000 be16 	b.w	36568 <z_reschedule>
   3593c:	200033b0 	.word	0x200033b0
   35940:	0003d39d 	.word	0x0003d39d
   35944:	0003d1d7 	.word	0x0003d1d7

00035948 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   35948:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
   3594a:	4b09      	ldr	r3, [pc, #36]	; (35970 <k_sys_work_q_init+0x28>)
   3594c:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   3594e:	ab02      	add	r3, sp, #8
	struct k_work_queue_config cfg = {
   35950:	2400      	movs	r4, #0
	k_work_queue_start(&k_sys_work_q,
   35952:	9300      	str	r3, [sp, #0]
   35954:	4907      	ldr	r1, [pc, #28]	; (35974 <k_sys_work_q_init+0x2c>)
   35956:	4808      	ldr	r0, [pc, #32]	; (35978 <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
   35958:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
   3595c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   35960:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   35964:	f000 fab4 	bl	35ed0 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   35968:	4620      	mov	r0, r4
   3596a:	b004      	add	sp, #16
   3596c:	bd10      	pop	{r4, pc}
   3596e:	bf00      	nop
   35970:	0003fd52 	.word	0x0003fd52
   35974:	20007b00 	.word	0x20007b00
   35978:	20002cd0 	.word	0x20002cd0

0003597c <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   3597c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   35980:	4e68      	ldr	r6, [pc, #416]	; (35b24 <work_queue_main+0x1a8>)
	return list->head;
   35982:	4f69      	ldr	r7, [pc, #420]	; (35b28 <work_queue_main+0x1ac>)
   35984:	b085      	sub	sp, #20
   35986:	4604      	mov	r4, r0
   35988:	f04f 0340 	mov.w	r3, #64	; 0x40
   3598c:	f3ef 8811 	mrs	r8, BASEPRI
   35990:	f383 8812 	msr	BASEPRI_MAX, r3
   35994:	f3bf 8f6f 	isb	sy
   35998:	4630      	mov	r0, r6
   3599a:	f7ff fc57 	bl	3524c <z_spin_lock_valid>
   3599e:	b940      	cbnz	r0, 359b2 <work_queue_main+0x36>
   359a0:	4962      	ldr	r1, [pc, #392]	; (35b2c <work_queue_main+0x1b0>)
   359a2:	4863      	ldr	r0, [pc, #396]	; (35b30 <work_queue_main+0x1b4>)
   359a4:	2294      	movs	r2, #148	; 0x94
   359a6:	f003 f8b4 	bl	38b12 <assert_print>
   359aa:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   359ac:	485f      	ldr	r0, [pc, #380]	; (35b2c <work_queue_main+0x1b0>)
   359ae:	f003 f8a9 	bl	38b04 <assert_post_action>
	z_spin_lock_set_owner(l);
   359b2:	4630      	mov	r0, r6
   359b4:	f7ff fc68 	bl	35288 <z_spin_lock_set_owner>
   359b8:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
Z_GENLIST_GET(slist, snode)
   359bc:	b9a5      	cbnz	r5, 359e8 <work_queue_main+0x6c>
			 * which should never happen, even line 'if (work != NULL)'
			 * ensures that.
			 * This means that if node is not NULL, then work will not be NULL.
			 */
			handler = work->handler;
		} else if (flag_test_and_clear(&queue->flags,
   359be:	2102      	movs	r1, #2
   359c0:	f104 0098 	add.w	r0, r4, #152	; 0x98
   359c4:	f006 f971 	bl	3bcaa <flag_test_and_clear>
   359c8:	bb80      	cbnz	r0, 35a2c <work_queue_main+0xb0>
			 * the lock, and we didn't find work nor got asked to
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
   359ca:	2300      	movs	r3, #0
   359cc:	9302      	str	r3, [sp, #8]
   359ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   359d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   359d6:	e9cd 2300 	strd	r2, r3, [sp]
   359da:	4641      	mov	r1, r8
   359dc:	f104 0288 	add.w	r2, r4, #136	; 0x88
   359e0:	4630      	mov	r0, r6
   359e2:	f001 fc7f 	bl	372e4 <z_sched_wait>
					   K_FOREVER, NULL);
			continue;
   359e6:	e7cf      	b.n	35988 <work_queue_main+0xc>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   359e8:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
	return node->next;
   359ec:	682b      	ldr	r3, [r5, #0]
	list->head = node;
   359ee:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   359f2:	4295      	cmp	r5, r2
	list->tail = node;
   359f4:	bf08      	it	eq
   359f6:	f8c4 3084 	streq.w	r3, [r4, #132]	; 0x84
	*flagp |= BIT(bit);
   359fa:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   359fe:	f043 0302 	orr.w	r3, r3, #2
   35a02:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	*flagp &= ~BIT(bit);
   35a06:	68eb      	ldr	r3, [r5, #12]
			handler = work->handler;
   35a08:	f8d5 9004 	ldr.w	r9, [r5, #4]
	*flagp &= ~BIT(bit);
   35a0c:	f023 0304 	bic.w	r3, r3, #4
   35a10:	f043 0301 	orr.w	r3, r3, #1
   35a14:	60eb      	str	r3, [r5, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   35a16:	4630      	mov	r0, r6
   35a18:	f7ff fc26 	bl	35268 <z_spin_unlock_valid>
   35a1c:	b980      	cbnz	r0, 35a40 <work_queue_main+0xc4>
   35a1e:	4943      	ldr	r1, [pc, #268]	; (35b2c <work_queue_main+0x1b0>)
   35a20:	4843      	ldr	r0, [pc, #268]	; (35b30 <work_queue_main+0x1b4>)
   35a22:	22c2      	movs	r2, #194	; 0xc2
   35a24:	f003 f875 	bl	38b12 <assert_print>
   35a28:	21c2      	movs	r1, #194	; 0xc2
   35a2a:	e7bf      	b.n	359ac <work_queue_main+0x30>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   35a2c:	f104 0590 	add.w	r5, r4, #144	; 0x90
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   35a30:	2200      	movs	r2, #0
   35a32:	2101      	movs	r1, #1
   35a34:	4628      	mov	r0, r5
   35a36:	f001 fc09 	bl	3724c <z_sched_wake>
   35a3a:	2800      	cmp	r0, #0
   35a3c:	d1f8      	bne.n	35a30 <work_queue_main+0xb4>
   35a3e:	e7c4      	b.n	359ca <work_queue_main+0x4e>
	__asm__ volatile(
   35a40:	f388 8811 	msr	BASEPRI, r8
   35a44:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
   35a48:	f1b9 0f00 	cmp.w	r9, #0
   35a4c:	d109      	bne.n	35a62 <work_queue_main+0xe6>
   35a4e:	4939      	ldr	r1, [pc, #228]	; (35b34 <work_queue_main+0x1b8>)
   35a50:	4837      	ldr	r0, [pc, #220]	; (35b30 <work_queue_main+0x1b4>)
   35a52:	f240 229b 	movw	r2, #667	; 0x29b
   35a56:	f003 f85c 	bl	38b12 <assert_print>
   35a5a:	4836      	ldr	r0, [pc, #216]	; (35b34 <work_queue_main+0x1b8>)
   35a5c:	f240 219b 	movw	r1, #667	; 0x29b
   35a60:	e7a5      	b.n	359ae <work_queue_main+0x32>
		handler(work);
   35a62:	4628      	mov	r0, r5
   35a64:	47c8      	blx	r9
	__asm__ volatile(
   35a66:	f04f 0340 	mov.w	r3, #64	; 0x40
   35a6a:	f3ef 8a11 	mrs	sl, BASEPRI
   35a6e:	f383 8812 	msr	BASEPRI_MAX, r3
   35a72:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   35a76:	4630      	mov	r0, r6
   35a78:	f7ff fbe8 	bl	3524c <z_spin_lock_valid>
   35a7c:	2800      	cmp	r0, #0
   35a7e:	d08f      	beq.n	359a0 <work_queue_main+0x24>
	z_spin_lock_set_owner(l);
   35a80:	4630      	mov	r0, r6
   35a82:	f7ff fc01 	bl	35288 <z_spin_lock_set_owner>
	*flagp &= ~BIT(bit);
   35a86:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   35a88:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
   35a8a:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   35a8e:	d417      	bmi.n	35ac0 <work_queue_main+0x144>
	*flagp &= ~BIT(bit);
   35a90:	60ea      	str	r2, [r5, #12]
   35a92:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   35a96:	f023 0302 	bic.w	r3, r3, #2
   35a9a:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   35a9e:	4630      	mov	r0, r6
	return (*flagp & BIT(bit)) != 0U;
   35aa0:	f3c3 2500 	ubfx	r5, r3, #8, #1
   35aa4:	f7ff fbe0 	bl	35268 <z_spin_unlock_valid>
   35aa8:	2800      	cmp	r0, #0
   35aaa:	d0b8      	beq.n	35a1e <work_queue_main+0xa2>
	__asm__ volatile(
   35aac:	f38a 8811 	msr	BASEPRI, sl
   35ab0:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
   35ab4:	2d00      	cmp	r5, #0
   35ab6:	f47f af67 	bne.w	35988 <work_queue_main+0xc>
	z_impl_k_yield();
   35aba:	f001 f9f5 	bl	36ea8 <z_impl_k_yield>
}
   35abe:	e763      	b.n	35988 <work_queue_main+0xc>
	return list->head;
   35ac0:	6838      	ldr	r0, [r7, #0]
	*flagp &= ~BIT(bit);
   35ac2:	f023 0303 	bic.w	r3, r3, #3
   35ac6:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   35ac8:	2800      	cmp	r0, #0
   35aca:	d0e2      	beq.n	35a92 <work_queue_main+0x116>
	return node->next;
   35acc:	f04f 0800 	mov.w	r8, #0
   35ad0:	f8d0 9000 	ldr.w	r9, [r0]
	parent->next = child;
   35ad4:	46c3      	mov	fp, r8
   35ad6:	2800      	cmp	r0, #0
   35ad8:	d0db      	beq.n	35a92 <work_queue_main+0x116>
		if (wc->work == work) {
   35ada:	6843      	ldr	r3, [r0, #4]
   35adc:	429d      	cmp	r5, r3
			sys_slist_remove(&pending_cancels, prev, &wc->node);
   35ade:	4602      	mov	r2, r0
		if (wc->work == work) {
   35ae0:	d10d      	bne.n	35afe <work_queue_main+0x182>
	return node->next;
   35ae2:	6802      	ldr	r2, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   35ae4:	f1b8 0f00 	cmp.w	r8, #0
   35ae8:	d112      	bne.n	35b10 <work_queue_main+0x194>
   35aea:	687b      	ldr	r3, [r7, #4]
	list->head = node;
   35aec:	603a      	str	r2, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
   35aee:	4283      	cmp	r3, r0
   35af0:	d100      	bne.n	35af4 <work_queue_main+0x178>
	list->tail = node;
   35af2:	607a      	str	r2, [r7, #4]
	parent->next = child;
   35af4:	f840 bb08 	str.w	fp, [r0], #8
	z_impl_k_sem_give(sem);
   35af8:	f7ff fe56 	bl	357a8 <z_impl_k_sem_give>
}
   35afc:	4642      	mov	r2, r8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   35afe:	f1b9 0f00 	cmp.w	r9, #0
   35b02:	d00d      	beq.n	35b20 <work_queue_main+0x1a4>
	return node->next;
   35b04:	f8d9 3000 	ldr.w	r3, [r9]
   35b08:	4648      	mov	r0, r9
   35b0a:	4690      	mov	r8, r2
   35b0c:	4699      	mov	r9, r3
   35b0e:	e7e2      	b.n	35ad6 <work_queue_main+0x15a>
	parent->next = child;
   35b10:	f8c8 2000 	str.w	r2, [r8]
Z_GENLIST_REMOVE(slist, snode)
   35b14:	687b      	ldr	r3, [r7, #4]
   35b16:	4283      	cmp	r3, r0
	list->tail = node;
   35b18:	bf08      	it	eq
   35b1a:	f8c7 8004 	streq.w	r8, [r7, #4]
}
   35b1e:	e7e9      	b.n	35af4 <work_queue_main+0x178>
   35b20:	464b      	mov	r3, r9
   35b22:	e7f1      	b.n	35b08 <work_queue_main+0x18c>
   35b24:	200033bc 	.word	0x200033bc
   35b28:	200033b4 	.word	0x200033b4
   35b2c:	0003d39d 	.word	0x0003d39d
   35b30:	0003d1d7 	.word	0x0003d1d7
   35b34:	0003fd5b 	.word	0x0003fd5b

00035b38 <cancel_sync_locked>:
{
   35b38:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   35b3a:	68c3      	ldr	r3, [r0, #12]
   35b3c:	f3c3 0640 	ubfx	r6, r3, #1, #1
	if (ret) {
   35b40:	079b      	lsls	r3, r3, #30
{
   35b42:	4605      	mov	r5, r0
   35b44:	460c      	mov	r4, r1
	if (ret) {
   35b46:	d50d      	bpl.n	35b64 <cancel_sync_locked+0x2c>
	return z_impl_k_sem_init(sem, initial_count, limit);
   35b48:	2201      	movs	r2, #1
   35b4a:	2100      	movs	r1, #0
   35b4c:	f104 0008 	add.w	r0, r4, #8
   35b50:	f006 f89b 	bl	3bc8a <z_impl_k_sem_init>
	parent->next = child;
   35b54:	2300      	movs	r3, #0
   35b56:	6023      	str	r3, [r4, #0]
	return list->tail;
   35b58:	4b05      	ldr	r3, [pc, #20]	; (35b70 <cancel_sync_locked+0x38>)
	canceler->work = work;
   35b5a:	6065      	str	r5, [r4, #4]
   35b5c:	685a      	ldr	r2, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   35b5e:	b91a      	cbnz	r2, 35b68 <cancel_sync_locked+0x30>
	list->head = node;
   35b60:	e9c3 4400 	strd	r4, r4, [r3]
}
   35b64:	4630      	mov	r0, r6
   35b66:	bd70      	pop	{r4, r5, r6, pc}
	parent->next = child;
   35b68:	6014      	str	r4, [r2, #0]
	list->tail = node;
   35b6a:	605c      	str	r4, [r3, #4]
}
   35b6c:	e7fa      	b.n	35b64 <cancel_sync_locked+0x2c>
   35b6e:	bf00      	nop
   35b70:	200033b4 	.word	0x200033b4

00035b74 <submit_to_queue_locked>:
{
   35b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
   35b76:	68c3      	ldr	r3, [r0, #12]
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   35b78:	079a      	lsls	r2, r3, #30
{
   35b7a:	4604      	mov	r4, r0
   35b7c:	460f      	mov	r7, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   35b7e:	f3c3 0640 	ubfx	r6, r3, #1, #1
   35b82:	d438      	bmi.n	35bf6 <submit_to_queue_locked+0x82>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   35b84:	075b      	lsls	r3, r3, #29
   35b86:	d424      	bmi.n	35bd2 <submit_to_queue_locked+0x5e>
		if (*queuep == NULL) {
   35b88:	680b      	ldr	r3, [r1, #0]
   35b8a:	b90b      	cbnz	r3, 35b90 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
   35b8c:	6883      	ldr	r3, [r0, #8]
   35b8e:	600b      	str	r3, [r1, #0]
	return (*flagp & BIT(bit)) != 0U;
   35b90:	68e3      	ldr	r3, [r4, #12]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   35b92:	07dd      	lsls	r5, r3, #31
   35b94:	d520      	bpl.n	35bd8 <submit_to_queue_locked+0x64>
			__ASSERT_NO_MSG(work->queue != NULL);
   35b96:	68a3      	ldr	r3, [r4, #8]
   35b98:	b953      	cbnz	r3, 35bb0 <submit_to_queue_locked+0x3c>
   35b9a:	4928      	ldr	r1, [pc, #160]	; (35c3c <submit_to_queue_locked+0xc8>)
   35b9c:	4828      	ldr	r0, [pc, #160]	; (35c40 <submit_to_queue_locked+0xcc>)
   35b9e:	f44f 72a7 	mov.w	r2, #334	; 0x14e
   35ba2:	f002 ffb6 	bl	38b12 <assert_print>
   35ba6:	4825      	ldr	r0, [pc, #148]	; (35c3c <submit_to_queue_locked+0xc8>)
   35ba8:	f44f 71a7 	mov.w	r1, #334	; 0x14e
   35bac:	f002 ffaa 	bl	38b04 <assert_post_action>
			*queuep = work->queue;
   35bb0:	603b      	str	r3, [r7, #0]
			ret = 2;
   35bb2:	2602      	movs	r6, #2
		int rc = queue_submit_locked(*queuep, work);
   35bb4:	683d      	ldr	r5, [r7, #0]
	if (queue == NULL) {
   35bb6:	2d00      	cmp	r5, #0
   35bb8:	d03c      	beq.n	35c34 <submit_to_queue_locked+0xc0>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   35bba:	4b22      	ldr	r3, [pc, #136]	; (35c44 <submit_to_queue_locked+0xd0>)
   35bbc:	689b      	ldr	r3, [r3, #8]
   35bbe:	42ab      	cmp	r3, r5
   35bc0:	d00c      	beq.n	35bdc <submit_to_queue_locked+0x68>
	return (*flagp & BIT(bit)) != 0U;
   35bc2:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   35bc6:	07d8      	lsls	r0, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   35bc8:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   35bcc:	d416      	bmi.n	35bfc <submit_to_queue_locked+0x88>
		ret = -EBUSY;
   35bce:	f06f 0612 	mvn.w	r6, #18
		*queuep = NULL;
   35bd2:	2300      	movs	r3, #0
   35bd4:	603b      	str	r3, [r7, #0]
	return ret;
   35bd6:	e027      	b.n	35c28 <submit_to_queue_locked+0xb4>
		ret = 1;
   35bd8:	2601      	movs	r6, #1
   35bda:	e7eb      	b.n	35bb4 <submit_to_queue_locked+0x40>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   35bdc:	f006 f80b 	bl	3bbf6 <k_is_in_isr>
   35be0:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
   35be4:	2800      	cmp	r0, #0
   35be6:	d1ee      	bne.n	35bc6 <submit_to_queue_locked+0x52>
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   35be8:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   35bea:	f3c3 02c0 	ubfx	r2, r3, #3, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   35bee:	d5ee      	bpl.n	35bce <submit_to_queue_locked+0x5a>
	} else if (plugged && !draining) {
   35bf0:	b152      	cbz	r2, 35c08 <submit_to_queue_locked+0x94>
   35bf2:	075b      	lsls	r3, r3, #29
   35bf4:	d408      	bmi.n	35c08 <submit_to_queue_locked+0x94>
		ret = -EBUSY;
   35bf6:	f06f 060f 	mvn.w	r6, #15
   35bfa:	e7ea      	b.n	35bd2 <submit_to_queue_locked+0x5e>
	} else if (draining && !chained) {
   35bfc:	2a00      	cmp	r2, #0
   35bfe:	d1fa      	bne.n	35bf6 <submit_to_queue_locked+0x82>
	return (*flagp & BIT(bit)) != 0U;
   35c00:	f3c3 03c0 	ubfx	r3, r3, #3, #1
	} else if (plugged && !draining) {
   35c04:	2b00      	cmp	r3, #0
   35c06:	d1f6      	bne.n	35bf6 <submit_to_queue_locked+0x82>
	parent->next = child;
   35c08:	2300      	movs	r3, #0
   35c0a:	6023      	str	r3, [r4, #0]
	return list->tail;
   35c0c:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
Z_GENLIST_APPEND(slist, snode)
   35c10:	b963      	cbnz	r3, 35c2c <submit_to_queue_locked+0xb8>
	list->head = node;
   35c12:	e9c5 4420 	strd	r4, r4, [r5, #128]	; 0x80
		(void)notify_queue_locked(queue);
   35c16:	4628      	mov	r0, r5
   35c18:	f006 f860 	bl	3bcdc <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
   35c1c:	68e3      	ldr	r3, [r4, #12]
   35c1e:	f043 0304 	orr.w	r3, r3, #4
   35c22:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
   35c24:	683b      	ldr	r3, [r7, #0]
   35c26:	60a3      	str	r3, [r4, #8]
}
   35c28:	4630      	mov	r0, r6
   35c2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
   35c2c:	601c      	str	r4, [r3, #0]
	list->tail = node;
   35c2e:	f8c5 4084 	str.w	r4, [r5, #132]	; 0x84
}
   35c32:	e7f0      	b.n	35c16 <submit_to_queue_locked+0xa2>
		return -EINVAL;
   35c34:	f06f 0615 	mvn.w	r6, #21
   35c38:	e7cb      	b.n	35bd2 <submit_to_queue_locked+0x5e>
   35c3a:	bf00      	nop
   35c3c:	0003fd5b 	.word	0x0003fd5b
   35c40:	0003d1d7 	.word	0x0003d1d7
   35c44:	20003384 	.word	0x20003384

00035c48 <work_timeout>:
 * Invoked by timeout infrastructure.
 * Takes and releases work lock.
 * Conditionally reschedules.
 */
static void work_timeout(struct _timeout *to)
{
   35c48:	b573      	push	{r0, r1, r4, r5, r6, lr}
   35c4a:	4604      	mov	r4, r0
	__asm__ volatile(
   35c4c:	f04f 0340 	mov.w	r3, #64	; 0x40
   35c50:	f3ef 8511 	mrs	r5, BASEPRI
   35c54:	f383 8812 	msr	BASEPRI_MAX, r3
   35c58:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   35c5c:	4817      	ldr	r0, [pc, #92]	; (35cbc <work_timeout+0x74>)
   35c5e:	f7ff faf5 	bl	3524c <z_spin_lock_valid>
   35c62:	b940      	cbnz	r0, 35c76 <work_timeout+0x2e>
   35c64:	4916      	ldr	r1, [pc, #88]	; (35cc0 <work_timeout+0x78>)
   35c66:	4817      	ldr	r0, [pc, #92]	; (35cc4 <work_timeout+0x7c>)
   35c68:	2294      	movs	r2, #148	; 0x94
   35c6a:	f002 ff52 	bl	38b12 <assert_print>
   35c6e:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   35c70:	4813      	ldr	r0, [pc, #76]	; (35cc0 <work_timeout+0x78>)
   35c72:	f002 ff47 	bl	38b04 <assert_post_action>
	z_spin_lock_set_owner(l);
   35c76:	4811      	ldr	r0, [pc, #68]	; (35cbc <work_timeout+0x74>)
   35c78:	f7ff fb06 	bl	35288 <z_spin_lock_set_owner>
	struct k_work_delayable *dw
		= CONTAINER_OF(to, struct k_work_delayable, timeout);
	struct k_work *wp = &dw->work;
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_work_q *queue = NULL;
   35c7c:	2300      	movs	r3, #0
	 * notified of new work at the next reschedule point.
	 *
	 * If not successful there is no notification that the work has been
	 * abandoned.  Sorry.
	 */
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   35c7e:	2103      	movs	r1, #3
   35c80:	1f20      	subs	r0, r4, #4
	struct k_work_q *queue = NULL;
   35c82:	9301      	str	r3, [sp, #4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   35c84:	f1a4 0610 	sub.w	r6, r4, #16
   35c88:	f006 f80f 	bl	3bcaa <flag_test_and_clear>
   35c8c:	b128      	cbz	r0, 35c9a <work_timeout+0x52>
		queue = dw->queue;
   35c8e:	69a3      	ldr	r3, [r4, #24]
   35c90:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   35c92:	a901      	add	r1, sp, #4
   35c94:	4630      	mov	r0, r6
   35c96:	f7ff ff6d 	bl	35b74 <submit_to_queue_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   35c9a:	4808      	ldr	r0, [pc, #32]	; (35cbc <work_timeout+0x74>)
   35c9c:	f7ff fae4 	bl	35268 <z_spin_unlock_valid>
   35ca0:	b930      	cbnz	r0, 35cb0 <work_timeout+0x68>
   35ca2:	4907      	ldr	r1, [pc, #28]	; (35cc0 <work_timeout+0x78>)
   35ca4:	4807      	ldr	r0, [pc, #28]	; (35cc4 <work_timeout+0x7c>)
   35ca6:	22c2      	movs	r2, #194	; 0xc2
   35ca8:	f002 ff33 	bl	38b12 <assert_print>
   35cac:	21c2      	movs	r1, #194	; 0xc2
   35cae:	e7df      	b.n	35c70 <work_timeout+0x28>
	__asm__ volatile(
   35cb0:	f385 8811 	msr	BASEPRI, r5
   35cb4:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);
}
   35cb8:	b002      	add	sp, #8
   35cba:	bd70      	pop	{r4, r5, r6, pc}
   35cbc:	200033bc 	.word	0x200033bc
   35cc0:	0003d39d 	.word	0x0003d39d
   35cc4:	0003d1d7 	.word	0x0003d1d7

00035cc8 <k_work_init>:
{
   35cc8:	b538      	push	{r3, r4, r5, lr}
   35cca:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(work != NULL);
   35ccc:	4604      	mov	r4, r0
   35cce:	b940      	cbnz	r0, 35ce2 <k_work_init+0x1a>
   35cd0:	490b      	ldr	r1, [pc, #44]	; (35d00 <k_work_init+0x38>)
   35cd2:	480c      	ldr	r0, [pc, #48]	; (35d04 <k_work_init+0x3c>)
   35cd4:	2289      	movs	r2, #137	; 0x89
   35cd6:	f002 ff1c 	bl	38b12 <assert_print>
   35cda:	2189      	movs	r1, #137	; 0x89
	__ASSERT_NO_MSG(handler != NULL);
   35cdc:	4808      	ldr	r0, [pc, #32]	; (35d00 <k_work_init+0x38>)
   35cde:	f002 ff11 	bl	38b04 <assert_post_action>
   35ce2:	b931      	cbnz	r1, 35cf2 <k_work_init+0x2a>
   35ce4:	4906      	ldr	r1, [pc, #24]	; (35d00 <k_work_init+0x38>)
   35ce6:	4807      	ldr	r0, [pc, #28]	; (35d04 <k_work_init+0x3c>)
   35ce8:	228a      	movs	r2, #138	; 0x8a
   35cea:	f002 ff12 	bl	38b12 <assert_print>
   35cee:	218a      	movs	r1, #138	; 0x8a
   35cf0:	e7f4      	b.n	35cdc <k_work_init+0x14>
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   35cf2:	2210      	movs	r2, #16
   35cf4:	2100      	movs	r1, #0
   35cf6:	f003 fb66 	bl	393c6 <memset>
   35cfa:	6065      	str	r5, [r4, #4]
}
   35cfc:	bd38      	pop	{r3, r4, r5, pc}
   35cfe:	bf00      	nop
   35d00:	0003fd5b 	.word	0x0003fd5b
   35d04:	0003d1d7 	.word	0x0003d1d7

00035d08 <k_work_busy_get>:
{
   35d08:	b538      	push	{r3, r4, r5, lr}
   35d0a:	4604      	mov	r4, r0
	__asm__ volatile(
   35d0c:	f04f 0340 	mov.w	r3, #64	; 0x40
   35d10:	f3ef 8511 	mrs	r5, BASEPRI
   35d14:	f383 8812 	msr	BASEPRI_MAX, r3
   35d18:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   35d1c:	4811      	ldr	r0, [pc, #68]	; (35d64 <k_work_busy_get+0x5c>)
   35d1e:	f7ff fa95 	bl	3524c <z_spin_lock_valid>
   35d22:	b940      	cbnz	r0, 35d36 <k_work_busy_get+0x2e>
   35d24:	4910      	ldr	r1, [pc, #64]	; (35d68 <k_work_busy_get+0x60>)
   35d26:	4811      	ldr	r0, [pc, #68]	; (35d6c <k_work_busy_get+0x64>)
   35d28:	2294      	movs	r2, #148	; 0x94
   35d2a:	f002 fef2 	bl	38b12 <assert_print>
   35d2e:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   35d30:	480d      	ldr	r0, [pc, #52]	; (35d68 <k_work_busy_get+0x60>)
   35d32:	f002 fee7 	bl	38b04 <assert_post_action>
	z_spin_lock_set_owner(l);
   35d36:	480b      	ldr	r0, [pc, #44]	; (35d64 <k_work_busy_get+0x5c>)
   35d38:	f7ff faa6 	bl	35288 <z_spin_lock_set_owner>
	return flags_get(&work->flags) & K_WORK_MASK;
   35d3c:	68e4      	ldr	r4, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   35d3e:	4809      	ldr	r0, [pc, #36]	; (35d64 <k_work_busy_get+0x5c>)
   35d40:	f004 040f 	and.w	r4, r4, #15
   35d44:	f7ff fa90 	bl	35268 <z_spin_unlock_valid>
   35d48:	b930      	cbnz	r0, 35d58 <k_work_busy_get+0x50>
   35d4a:	4907      	ldr	r1, [pc, #28]	; (35d68 <k_work_busy_get+0x60>)
   35d4c:	4807      	ldr	r0, [pc, #28]	; (35d6c <k_work_busy_get+0x64>)
   35d4e:	22c2      	movs	r2, #194	; 0xc2
   35d50:	f002 fedf 	bl	38b12 <assert_print>
   35d54:	21c2      	movs	r1, #194	; 0xc2
   35d56:	e7eb      	b.n	35d30 <k_work_busy_get+0x28>
	__asm__ volatile(
   35d58:	f385 8811 	msr	BASEPRI, r5
   35d5c:	f3bf 8f6f 	isb	sy
}
   35d60:	4620      	mov	r0, r4
   35d62:	bd38      	pop	{r3, r4, r5, pc}
   35d64:	200033bc 	.word	0x200033bc
   35d68:	0003d39d 	.word	0x0003d39d
   35d6c:	0003d1d7 	.word	0x0003d1d7

00035d70 <z_work_submit_to_queue>:
{
   35d70:	b537      	push	{r0, r1, r2, r4, r5, lr}
	__ASSERT_NO_MSG(work != NULL);
   35d72:	460c      	mov	r4, r1
{
   35d74:	9001      	str	r0, [sp, #4]
	__ASSERT_NO_MSG(work != NULL);
   35d76:	b951      	cbnz	r1, 35d8e <z_work_submit_to_queue+0x1e>
   35d78:	491c      	ldr	r1, [pc, #112]	; (35dec <z_work_submit_to_queue+0x7c>)
   35d7a:	481d      	ldr	r0, [pc, #116]	; (35df0 <z_work_submit_to_queue+0x80>)
   35d7c:	f44f 72ba 	mov.w	r2, #372	; 0x174
   35d80:	f002 fec7 	bl	38b12 <assert_print>
   35d84:	4819      	ldr	r0, [pc, #100]	; (35dec <z_work_submit_to_queue+0x7c>)
   35d86:	f44f 71ba 	mov.w	r1, #372	; 0x174
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   35d8a:	f002 febb 	bl	38b04 <assert_post_action>
	__asm__ volatile(
   35d8e:	f04f 0340 	mov.w	r3, #64	; 0x40
   35d92:	f3ef 8511 	mrs	r5, BASEPRI
   35d96:	f383 8812 	msr	BASEPRI_MAX, r3
   35d9a:	f3bf 8f6f 	isb	sy
   35d9e:	4815      	ldr	r0, [pc, #84]	; (35df4 <z_work_submit_to_queue+0x84>)
   35da0:	f7ff fa54 	bl	3524c <z_spin_lock_valid>
   35da4:	b938      	cbnz	r0, 35db6 <z_work_submit_to_queue+0x46>
   35da6:	4914      	ldr	r1, [pc, #80]	; (35df8 <z_work_submit_to_queue+0x88>)
   35da8:	4811      	ldr	r0, [pc, #68]	; (35df0 <z_work_submit_to_queue+0x80>)
   35daa:	2294      	movs	r2, #148	; 0x94
   35dac:	f002 feb1 	bl	38b12 <assert_print>
   35db0:	2194      	movs	r1, #148	; 0x94
   35db2:	4811      	ldr	r0, [pc, #68]	; (35df8 <z_work_submit_to_queue+0x88>)
   35db4:	e7e9      	b.n	35d8a <z_work_submit_to_queue+0x1a>
	z_spin_lock_set_owner(l);
   35db6:	480f      	ldr	r0, [pc, #60]	; (35df4 <z_work_submit_to_queue+0x84>)
   35db8:	f7ff fa66 	bl	35288 <z_spin_lock_set_owner>
	int ret = submit_to_queue_locked(work, &queue);
   35dbc:	4620      	mov	r0, r4
   35dbe:	a901      	add	r1, sp, #4
   35dc0:	f7ff fed8 	bl	35b74 <submit_to_queue_locked>
   35dc4:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   35dc6:	480b      	ldr	r0, [pc, #44]	; (35df4 <z_work_submit_to_queue+0x84>)
   35dc8:	f7ff fa4e 	bl	35268 <z_spin_unlock_valid>
   35dcc:	b930      	cbnz	r0, 35ddc <z_work_submit_to_queue+0x6c>
   35dce:	490a      	ldr	r1, [pc, #40]	; (35df8 <z_work_submit_to_queue+0x88>)
   35dd0:	4807      	ldr	r0, [pc, #28]	; (35df0 <z_work_submit_to_queue+0x80>)
   35dd2:	22c2      	movs	r2, #194	; 0xc2
   35dd4:	f002 fe9d 	bl	38b12 <assert_print>
   35dd8:	21c2      	movs	r1, #194	; 0xc2
   35dda:	e7ea      	b.n	35db2 <z_work_submit_to_queue+0x42>
	__asm__ volatile(
   35ddc:	f385 8811 	msr	BASEPRI, r5
   35de0:	f3bf 8f6f 	isb	sy
}
   35de4:	4620      	mov	r0, r4
   35de6:	b003      	add	sp, #12
   35de8:	bd30      	pop	{r4, r5, pc}
   35dea:	bf00      	nop
   35dec:	0003fd5b 	.word	0x0003fd5b
   35df0:	0003d1d7 	.word	0x0003d1d7
   35df4:	200033bc 	.word	0x200033bc
   35df8:	0003d39d 	.word	0x0003d39d

00035dfc <k_work_submit>:
{
   35dfc:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
   35dfe:	4801      	ldr	r0, [pc, #4]	; (35e04 <k_work_submit+0x8>)
   35e00:	f005 bfa6 	b.w	3bd50 <k_work_submit_to_queue>
   35e04:	20002cd0 	.word	0x20002cd0

00035e08 <k_work_cancel>:
{
   35e08:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(work != NULL);
   35e0a:	4604      	mov	r4, r0
   35e0c:	b950      	cbnz	r0, 35e24 <k_work_cancel+0x1c>
   35e0e:	4921      	ldr	r1, [pc, #132]	; (35e94 <k_work_cancel+0x8c>)
   35e10:	4821      	ldr	r0, [pc, #132]	; (35e98 <k_work_cancel+0x90>)
   35e12:	f240 2221 	movw	r2, #545	; 0x221
   35e16:	f002 fe7c 	bl	38b12 <assert_print>
   35e1a:	f240 2121 	movw	r1, #545	; 0x221
	__ASSERT_NO_MSG(!flag_test(&work->flags, K_WORK_DELAYABLE_BIT));
   35e1e:	481d      	ldr	r0, [pc, #116]	; (35e94 <k_work_cancel+0x8c>)
   35e20:	f002 fe70 	bl	38b04 <assert_post_action>
	return (*flagp & BIT(bit)) != 0U;
   35e24:	68c3      	ldr	r3, [r0, #12]
	__ASSERT_NO_MSG(!flag_test(&work->flags, K_WORK_DELAYABLE_BIT));
   35e26:	05db      	lsls	r3, r3, #23
   35e28:	d508      	bpl.n	35e3c <k_work_cancel+0x34>
   35e2a:	491a      	ldr	r1, [pc, #104]	; (35e94 <k_work_cancel+0x8c>)
   35e2c:	481a      	ldr	r0, [pc, #104]	; (35e98 <k_work_cancel+0x90>)
   35e2e:	f240 2222 	movw	r2, #546	; 0x222
   35e32:	f002 fe6e 	bl	38b12 <assert_print>
   35e36:	f240 2122 	movw	r1, #546	; 0x222
   35e3a:	e7f0      	b.n	35e1e <k_work_cancel+0x16>
	__asm__ volatile(
   35e3c:	f04f 0340 	mov.w	r3, #64	; 0x40
   35e40:	f3ef 8511 	mrs	r5, BASEPRI
   35e44:	f383 8812 	msr	BASEPRI_MAX, r3
   35e48:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   35e4c:	4813      	ldr	r0, [pc, #76]	; (35e9c <k_work_cancel+0x94>)
   35e4e:	f7ff f9fd 	bl	3524c <z_spin_lock_valid>
   35e52:	b938      	cbnz	r0, 35e64 <k_work_cancel+0x5c>
   35e54:	4912      	ldr	r1, [pc, #72]	; (35ea0 <k_work_cancel+0x98>)
   35e56:	4810      	ldr	r0, [pc, #64]	; (35e98 <k_work_cancel+0x90>)
   35e58:	2294      	movs	r2, #148	; 0x94
   35e5a:	f002 fe5a 	bl	38b12 <assert_print>
   35e5e:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   35e60:	480f      	ldr	r0, [pc, #60]	; (35ea0 <k_work_cancel+0x98>)
   35e62:	e7dd      	b.n	35e20 <k_work_cancel+0x18>
	z_spin_lock_set_owner(l);
   35e64:	480d      	ldr	r0, [pc, #52]	; (35e9c <k_work_cancel+0x94>)
   35e66:	f7ff fa0f 	bl	35288 <z_spin_lock_set_owner>
	int ret = cancel_async_locked(work);
   35e6a:	4620      	mov	r0, r4
   35e6c:	f005 ff3d 	bl	3bcea <cancel_async_locked>
   35e70:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   35e72:	480a      	ldr	r0, [pc, #40]	; (35e9c <k_work_cancel+0x94>)
   35e74:	f7ff f9f8 	bl	35268 <z_spin_unlock_valid>
   35e78:	b930      	cbnz	r0, 35e88 <k_work_cancel+0x80>
   35e7a:	4909      	ldr	r1, [pc, #36]	; (35ea0 <k_work_cancel+0x98>)
   35e7c:	4806      	ldr	r0, [pc, #24]	; (35e98 <k_work_cancel+0x90>)
   35e7e:	22c2      	movs	r2, #194	; 0xc2
   35e80:	f002 fe47 	bl	38b12 <assert_print>
   35e84:	21c2      	movs	r1, #194	; 0xc2
   35e86:	e7eb      	b.n	35e60 <k_work_cancel+0x58>
	__asm__ volatile(
   35e88:	f385 8811 	msr	BASEPRI, r5
   35e8c:	f3bf 8f6f 	isb	sy
}
   35e90:	4620      	mov	r0, r4
   35e92:	bd38      	pop	{r3, r4, r5, pc}
   35e94:	0003fd5b 	.word	0x0003fd5b
   35e98:	0003d1d7 	.word	0x0003d1d7
   35e9c:	200033bc 	.word	0x200033bc
   35ea0:	0003d39d 	.word	0x0003d39d

00035ea4 <k_work_queue_init>:
{
   35ea4:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(queue != NULL);
   35ea6:	b950      	cbnz	r0, 35ebe <k_work_queue_init+0x1a>
   35ea8:	4907      	ldr	r1, [pc, #28]	; (35ec8 <k_work_queue_init+0x24>)
   35eaa:	4808      	ldr	r0, [pc, #32]	; (35ecc <k_work_queue_init+0x28>)
   35eac:	f240 22b9 	movw	r2, #697	; 0x2b9
   35eb0:	f002 fe2f 	bl	38b12 <assert_print>
   35eb4:	4804      	ldr	r0, [pc, #16]	; (35ec8 <k_work_queue_init+0x24>)
   35eb6:	f240 21b9 	movw	r1, #697	; 0x2b9
   35eba:	f002 fe23 	bl	38b04 <assert_post_action>
	*queue = (struct k_work_q) {
   35ebe:	22a0      	movs	r2, #160	; 0xa0
   35ec0:	2100      	movs	r1, #0
   35ec2:	f003 fa80 	bl	393c6 <memset>
}
   35ec6:	bd08      	pop	{r3, pc}
   35ec8:	0003fd5b 	.word	0x0003fd5b
   35ecc:	0003d1d7 	.word	0x0003d1d7

00035ed0 <k_work_queue_start>:
{
   35ed0:	b5f0      	push	{r4, r5, r6, r7, lr}
   35ed2:	b089      	sub	sp, #36	; 0x24
	__ASSERT_NO_MSG(queue);
   35ed4:	4604      	mov	r4, r0
{
   35ed6:	9d0e      	ldr	r5, [sp, #56]	; 0x38
	__ASSERT_NO_MSG(queue);
   35ed8:	b950      	cbnz	r0, 35ef0 <k_work_queue_start+0x20>
   35eda:	492a      	ldr	r1, [pc, #168]	; (35f84 <k_work_queue_start+0xb4>)
   35edc:	482a      	ldr	r0, [pc, #168]	; (35f88 <k_work_queue_start+0xb8>)
   35ede:	f44f 7232 	mov.w	r2, #712	; 0x2c8
   35ee2:	f002 fe16 	bl	38b12 <assert_print>
   35ee6:	f44f 7132 	mov.w	r1, #712	; 0x2c8
	__ASSERT_NO_MSG(stack);
   35eea:	4826      	ldr	r0, [pc, #152]	; (35f84 <k_work_queue_start+0xb4>)
   35eec:	f002 fe0a 	bl	38b04 <assert_post_action>
   35ef0:	b941      	cbnz	r1, 35f04 <k_work_queue_start+0x34>
   35ef2:	4924      	ldr	r1, [pc, #144]	; (35f84 <k_work_queue_start+0xb4>)
   35ef4:	4824      	ldr	r0, [pc, #144]	; (35f88 <k_work_queue_start+0xb8>)
   35ef6:	f240 22c9 	movw	r2, #713	; 0x2c9
   35efa:	f002 fe0a 	bl	38b12 <assert_print>
   35efe:	f240 21c9 	movw	r1, #713	; 0x2c9
   35f02:	e7f2      	b.n	35eea <k_work_queue_start+0x1a>
	return (*flagp & BIT(bit)) != 0U;
   35f04:	f8d0 0098 	ldr.w	r0, [r0, #152]	; 0x98
	__ASSERT_NO_MSG(!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT));
   35f08:	f010 0001 	ands.w	r0, r0, #1
   35f0c:	d008      	beq.n	35f20 <k_work_queue_start+0x50>
   35f0e:	491d      	ldr	r1, [pc, #116]	; (35f84 <k_work_queue_start+0xb4>)
   35f10:	481d      	ldr	r0, [pc, #116]	; (35f88 <k_work_queue_start+0xb8>)
   35f12:	f240 22ca 	movw	r2, #714	; 0x2ca
   35f16:	f002 fdfc 	bl	38b12 <assert_print>
   35f1a:	f240 21ca 	movw	r1, #714	; 0x2ca
   35f1e:	e7e4      	b.n	35eea <k_work_queue_start+0x1a>
	list->tail = NULL;
   35f20:	e9c4 0020 	strd	r0, r0, [r4, #128]	; 0x80
   35f24:	f104 0088 	add.w	r0, r4, #136	; 0x88
	list->tail = (sys_dnode_t *)list;
   35f28:	e9c4 0022 	strd	r0, r0, [r4, #136]	; 0x88
   35f2c:	f104 0090 	add.w	r0, r4, #144	; 0x90
   35f30:	e9c4 0024 	strd	r0, r0, [r4, #144]	; 0x90
	if ((cfg != NULL) && cfg->no_yield) {
   35f34:	b31d      	cbz	r5, 35f7e <k_work_queue_start+0xae>
   35f36:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
   35f38:	2800      	cmp	r0, #0
   35f3a:	f240 1001 	movw	r0, #257	; 0x101
   35f3e:	bf08      	it	eq
   35f40:	2001      	moveq	r0, #1
	*flagp = flags;
   35f42:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   35f46:	2000      	movs	r0, #0
   35f48:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   35f4c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   35f50:	e9cd 3003 	strd	r3, r0, [sp, #12]
   35f54:	e9cd 0001 	strd	r0, r0, [sp, #4]
   35f58:	e9cd 6706 	strd	r6, r7, [sp, #24]
   35f5c:	4b0b      	ldr	r3, [pc, #44]	; (35f8c <k_work_queue_start+0xbc>)
   35f5e:	9400      	str	r4, [sp, #0]
   35f60:	4620      	mov	r0, r4
   35f62:	f7ff f8bd 	bl	350e0 <z_impl_k_thread_create>
	if ((cfg != NULL) && (cfg->name != NULL)) {
   35f66:	b125      	cbz	r5, 35f72 <k_work_queue_start+0xa2>
   35f68:	6829      	ldr	r1, [r5, #0]
   35f6a:	b111      	cbz	r1, 35f72 <k_work_queue_start+0xa2>
	return z_impl_k_thread_name_set(thread, str);
   35f6c:	4620      	mov	r0, r4
   35f6e:	f005 fe48 	bl	3bc02 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   35f72:	4620      	mov	r0, r4
}
   35f74:	b009      	add	sp, #36	; 0x24
   35f76:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   35f7a:	f005 be47 	b.w	3bc0c <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   35f7e:	2001      	movs	r0, #1
   35f80:	e7df      	b.n	35f42 <k_work_queue_start+0x72>
   35f82:	bf00      	nop
   35f84:	0003fd5b 	.word	0x0003fd5b
   35f88:	0003d1d7 	.word	0x0003d1d7
   35f8c:	0003597d 	.word	0x0003597d

00035f90 <k_work_init_delayable>:

void k_work_init_delayable(struct k_work_delayable *dwork,
			    k_work_handler_t handler)
{
   35f90:	b538      	push	{r3, r4, r5, lr}
   35f92:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(dwork != NULL);
   35f94:	4604      	mov	r4, r0
   35f96:	b950      	cbnz	r0, 35fae <k_work_init_delayable+0x1e>
   35f98:	490e      	ldr	r1, [pc, #56]	; (35fd4 <k_work_init_delayable+0x44>)
   35f9a:	480f      	ldr	r0, [pc, #60]	; (35fd8 <k_work_init_delayable+0x48>)
   35f9c:	f44f 7250 	mov.w	r2, #832	; 0x340
   35fa0:	f002 fdb7 	bl	38b12 <assert_print>
   35fa4:	f44f 7150 	mov.w	r1, #832	; 0x340
	__ASSERT_NO_MSG(handler != NULL);
   35fa8:	480a      	ldr	r0, [pc, #40]	; (35fd4 <k_work_init_delayable+0x44>)
   35faa:	f002 fdab 	bl	38b04 <assert_post_action>
   35fae:	b941      	cbnz	r1, 35fc2 <k_work_init_delayable+0x32>
   35fb0:	4908      	ldr	r1, [pc, #32]	; (35fd4 <k_work_init_delayable+0x44>)
   35fb2:	4809      	ldr	r0, [pc, #36]	; (35fd8 <k_work_init_delayable+0x48>)
   35fb4:	f240 3241 	movw	r2, #833	; 0x341
   35fb8:	f002 fdab 	bl	38b12 <assert_print>
   35fbc:	f240 3141 	movw	r1, #833	; 0x341
   35fc0:	e7f2      	b.n	35fa8 <k_work_init_delayable+0x18>

	*dwork = (struct k_work_delayable){
   35fc2:	2230      	movs	r2, #48	; 0x30
   35fc4:	2100      	movs	r1, #0
   35fc6:	f003 f9fe 	bl	393c6 <memset>
   35fca:	f44f 7380 	mov.w	r3, #256	; 0x100
   35fce:	6065      	str	r5, [r4, #4]
   35fd0:	60e3      	str	r3, [r4, #12]
		},
	};
	z_init_timeout(&dwork->timeout);

	SYS_PORT_TRACING_OBJ_INIT(k_work_delayable, dwork);
}
   35fd2:	bd38      	pop	{r3, r4, r5, pc}
   35fd4:	0003fd5b 	.word	0x0003fd5b
   35fd8:	0003d1d7 	.word	0x0003d1d7

00035fdc <k_work_schedule_for_queue>:
}

int k_work_schedule_for_queue(struct k_work_q *queue,
			       struct k_work_delayable *dwork,
			       k_timeout_t delay)
{
   35fdc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   35fde:	4616      	mov	r6, r2
   35fe0:	9001      	str	r0, [sp, #4]
   35fe2:	461d      	mov	r5, r3
	__ASSERT_NO_MSG(dwork != NULL);
   35fe4:	460c      	mov	r4, r1
   35fe6:	b951      	cbnz	r1, 35ffe <k_work_schedule_for_queue+0x22>
   35fe8:	4927      	ldr	r1, [pc, #156]	; (36088 <k_work_schedule_for_queue+0xac>)
   35fea:	4828      	ldr	r0, [pc, #160]	; (3608c <k_work_schedule_for_queue+0xb0>)
   35fec:	f240 32b7 	movw	r2, #951	; 0x3b7
   35ff0:	f002 fd8f 	bl	38b12 <assert_print>
   35ff4:	4824      	ldr	r0, [pc, #144]	; (36088 <k_work_schedule_for_queue+0xac>)
   35ff6:	f240 31b7 	movw	r1, #951	; 0x3b7
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   35ffa:	f002 fd83 	bl	38b04 <assert_post_action>
	__asm__ volatile(
   35ffe:	f04f 0340 	mov.w	r3, #64	; 0x40
   36002:	f3ef 8711 	mrs	r7, BASEPRI
   36006:	f383 8812 	msr	BASEPRI_MAX, r3
   3600a:	f3bf 8f6f 	isb	sy
   3600e:	4820      	ldr	r0, [pc, #128]	; (36090 <k_work_schedule_for_queue+0xb4>)
   36010:	f7ff f91c 	bl	3524c <z_spin_lock_valid>
   36014:	b938      	cbnz	r0, 36026 <k_work_schedule_for_queue+0x4a>
   36016:	491f      	ldr	r1, [pc, #124]	; (36094 <k_work_schedule_for_queue+0xb8>)
   36018:	481c      	ldr	r0, [pc, #112]	; (3608c <k_work_schedule_for_queue+0xb0>)
   3601a:	2294      	movs	r2, #148	; 0x94
   3601c:	f002 fd79 	bl	38b12 <assert_print>
   36020:	2194      	movs	r1, #148	; 0x94
   36022:	481c      	ldr	r0, [pc, #112]	; (36094 <k_work_schedule_for_queue+0xb8>)
   36024:	e7e9      	b.n	35ffa <k_work_schedule_for_queue+0x1e>
	z_spin_lock_set_owner(l);
   36026:	481a      	ldr	r0, [pc, #104]	; (36090 <k_work_schedule_for_queue+0xb4>)
   36028:	f7ff f92e 	bl	35288 <z_spin_lock_set_owner>
	return *flagp;
   3602c:	68e3      	ldr	r3, [r4, #12]
	struct k_work *work = &dwork->work;
	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Schedule the work item if it's idle or running. */
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
   3602e:	f013 0f0e 	tst.w	r3, #14
   36032:	d120      	bne.n	36076 <k_work_schedule_for_queue+0x9a>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   36034:	ea55 0206 	orrs.w	r2, r5, r6
   36038:	d10f      	bne.n	3605a <k_work_schedule_for_queue+0x7e>
		return submit_to_queue_locked(work, queuep);
   3603a:	4620      	mov	r0, r4
   3603c:	a901      	add	r1, sp, #4
   3603e:	f7ff fd99 	bl	35b74 <submit_to_queue_locked>
   36042:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   36044:	4812      	ldr	r0, [pc, #72]	; (36090 <k_work_schedule_for_queue+0xb4>)
   36046:	f7ff f90f 	bl	35268 <z_spin_unlock_valid>
   3604a:	b9b0      	cbnz	r0, 3607a <k_work_schedule_for_queue+0x9e>
   3604c:	4911      	ldr	r1, [pc, #68]	; (36094 <k_work_schedule_for_queue+0xb8>)
   3604e:	480f      	ldr	r0, [pc, #60]	; (3608c <k_work_schedule_for_queue+0xb0>)
   36050:	22c2      	movs	r2, #194	; 0xc2
   36052:	f002 fd5e 	bl	38b12 <assert_print>
   36056:	21c2      	movs	r1, #194	; 0xc2
   36058:	e7e3      	b.n	36022 <k_work_schedule_for_queue+0x46>
	*flagp |= BIT(bit);
   3605a:	f043 0308 	orr.w	r3, r3, #8
   3605e:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   36060:	9b01      	ldr	r3, [sp, #4]
   36062:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   36064:	f104 0010 	add.w	r0, r4, #16
   36068:	490b      	ldr	r1, [pc, #44]	; (36098 <k_work_schedule_for_queue+0xbc>)
   3606a:	4632      	mov	r2, r6
   3606c:	462b      	mov	r3, r5
   3606e:	f001 f9b3 	bl	373d8 <z_add_timeout>
	return ret;
   36072:	2401      	movs	r4, #1
   36074:	e7e6      	b.n	36044 <k_work_schedule_for_queue+0x68>
	int ret = 0;
   36076:	2400      	movs	r4, #0
   36078:	e7e4      	b.n	36044 <k_work_schedule_for_queue+0x68>
	__asm__ volatile(
   3607a:	f387 8811 	msr	BASEPRI, r7
   3607e:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   36082:	4620      	mov	r0, r4
   36084:	b003      	add	sp, #12
   36086:	bdf0      	pop	{r4, r5, r6, r7, pc}
   36088:	0003fd5b 	.word	0x0003fd5b
   3608c:	0003d1d7 	.word	0x0003d1d7
   36090:	200033bc 	.word	0x200033bc
   36094:	0003d39d 	.word	0x0003d39d
   36098:	00035c49 	.word	0x00035c49

0003609c <k_work_schedule>:

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
   3609c:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
   3609e:	4801      	ldr	r0, [pc, #4]	; (360a4 <k_work_schedule+0x8>)
   360a0:	f7ff bf9c 	b.w	35fdc <k_work_schedule_for_queue>
   360a4:	20002cd0 	.word	0x20002cd0

000360a8 <k_work_reschedule_for_queue>:
}

int k_work_reschedule_for_queue(struct k_work_q *queue,
				 struct k_work_delayable *dwork,
				 k_timeout_t delay)
{
   360a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   360aa:	4616      	mov	r6, r2
   360ac:	9001      	str	r0, [sp, #4]
   360ae:	461d      	mov	r5, r3
	__ASSERT_NO_MSG(dwork != NULL);
   360b0:	460c      	mov	r4, r1
   360b2:	b951      	cbnz	r1, 360ca <k_work_reschedule_for_queue+0x22>
   360b4:	4926      	ldr	r1, [pc, #152]	; (36150 <k_work_reschedule_for_queue+0xa8>)
   360b6:	4827      	ldr	r0, [pc, #156]	; (36154 <k_work_reschedule_for_queue+0xac>)
   360b8:	f240 32db 	movw	r2, #987	; 0x3db
   360bc:	f002 fd29 	bl	38b12 <assert_print>
   360c0:	4823      	ldr	r0, [pc, #140]	; (36150 <k_work_reschedule_for_queue+0xa8>)
   360c2:	f240 31db 	movw	r1, #987	; 0x3db
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   360c6:	f002 fd1d 	bl	38b04 <assert_post_action>
	__asm__ volatile(
   360ca:	f04f 0340 	mov.w	r3, #64	; 0x40
   360ce:	f3ef 8711 	mrs	r7, BASEPRI
   360d2:	f383 8812 	msr	BASEPRI_MAX, r3
   360d6:	f3bf 8f6f 	isb	sy
   360da:	481f      	ldr	r0, [pc, #124]	; (36158 <k_work_reschedule_for_queue+0xb0>)
   360dc:	f7ff f8b6 	bl	3524c <z_spin_lock_valid>
   360e0:	b938      	cbnz	r0, 360f2 <k_work_reschedule_for_queue+0x4a>
   360e2:	491e      	ldr	r1, [pc, #120]	; (3615c <k_work_reschedule_for_queue+0xb4>)
   360e4:	481b      	ldr	r0, [pc, #108]	; (36154 <k_work_reschedule_for_queue+0xac>)
   360e6:	2294      	movs	r2, #148	; 0x94
   360e8:	f002 fd13 	bl	38b12 <assert_print>
   360ec:	2194      	movs	r1, #148	; 0x94
   360ee:	481b      	ldr	r0, [pc, #108]	; (3615c <k_work_reschedule_for_queue+0xb4>)
   360f0:	e7e9      	b.n	360c6 <k_work_reschedule_for_queue+0x1e>
	z_spin_lock_set_owner(l);
   360f2:	4819      	ldr	r0, [pc, #100]	; (36158 <k_work_reschedule_for_queue+0xb0>)
   360f4:	f7ff f8c8 	bl	35288 <z_spin_lock_set_owner>

	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Remove any active scheduling. */
	(void)unschedule_locked(dwork);
   360f8:	4620      	mov	r0, r4
   360fa:	f005 fde1 	bl	3bcc0 <unschedule_locked>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   360fe:	ea55 0306 	orrs.w	r3, r5, r6
   36102:	d10f      	bne.n	36124 <k_work_reschedule_for_queue+0x7c>
		return submit_to_queue_locked(work, queuep);
   36104:	4620      	mov	r0, r4
   36106:	a901      	add	r1, sp, #4
   36108:	f7ff fd34 	bl	35b74 <submit_to_queue_locked>
   3610c:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3610e:	4812      	ldr	r0, [pc, #72]	; (36158 <k_work_reschedule_for_queue+0xb0>)
   36110:	f7ff f8aa 	bl	35268 <z_spin_unlock_valid>
   36114:	b9a8      	cbnz	r0, 36142 <k_work_reschedule_for_queue+0x9a>
   36116:	4911      	ldr	r1, [pc, #68]	; (3615c <k_work_reschedule_for_queue+0xb4>)
   36118:	480e      	ldr	r0, [pc, #56]	; (36154 <k_work_reschedule_for_queue+0xac>)
   3611a:	22c2      	movs	r2, #194	; 0xc2
   3611c:	f002 fcf9 	bl	38b12 <assert_print>
   36120:	21c2      	movs	r1, #194	; 0xc2
   36122:	e7e4      	b.n	360ee <k_work_reschedule_for_queue+0x46>
	*flagp |= BIT(bit);
   36124:	68e3      	ldr	r3, [r4, #12]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   36126:	490e      	ldr	r1, [pc, #56]	; (36160 <k_work_reschedule_for_queue+0xb8>)
	*flagp |= BIT(bit);
   36128:	f043 0308 	orr.w	r3, r3, #8
   3612c:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   3612e:	9b01      	ldr	r3, [sp, #4]
   36130:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   36132:	f104 0010 	add.w	r0, r4, #16
   36136:	4632      	mov	r2, r6
   36138:	462b      	mov	r3, r5
   3613a:	f001 f94d 	bl	373d8 <z_add_timeout>
	return ret;
   3613e:	2401      	movs	r4, #1
   36140:	e7e5      	b.n	3610e <k_work_reschedule_for_queue+0x66>
	__asm__ volatile(
   36142:	f387 8811 	msr	BASEPRI, r7
   36146:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   3614a:	4620      	mov	r0, r4
   3614c:	b003      	add	sp, #12
   3614e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   36150:	0003fd5b 	.word	0x0003fd5b
   36154:	0003d1d7 	.word	0x0003d1d7
   36158:	200033bc 	.word	0x200033bc
   3615c:	0003d39d 	.word	0x0003d39d
   36160:	00035c49 	.word	0x00035c49

00036164 <k_work_reschedule>:

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   36164:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
   36166:	4801      	ldr	r0, [pc, #4]	; (3616c <k_work_reschedule+0x8>)
   36168:	f7ff bf9e 	b.w	360a8 <k_work_reschedule_for_queue>
   3616c:	20002cd0 	.word	0x20002cd0

00036170 <k_work_cancel_delayable>:

	return ret;
}

int k_work_cancel_delayable(struct k_work_delayable *dwork)
{
   36170:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(dwork != NULL);
   36172:	4604      	mov	r4, r0
   36174:	b950      	cbnz	r0, 3618c <k_work_cancel_delayable+0x1c>
   36176:	491d      	ldr	r1, [pc, #116]	; (361ec <k_work_cancel_delayable+0x7c>)
   36178:	481d      	ldr	r0, [pc, #116]	; (361f0 <k_work_cancel_delayable+0x80>)
   3617a:	f240 32fd 	movw	r2, #1021	; 0x3fd
   3617e:	f002 fcc8 	bl	38b12 <assert_print>
   36182:	481a      	ldr	r0, [pc, #104]	; (361ec <k_work_cancel_delayable+0x7c>)
   36184:	f240 31fd 	movw	r1, #1021	; 0x3fd
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   36188:	f002 fcbc 	bl	38b04 <assert_post_action>
	__asm__ volatile(
   3618c:	f04f 0340 	mov.w	r3, #64	; 0x40
   36190:	f3ef 8511 	mrs	r5, BASEPRI
   36194:	f383 8812 	msr	BASEPRI_MAX, r3
   36198:	f3bf 8f6f 	isb	sy
   3619c:	4815      	ldr	r0, [pc, #84]	; (361f4 <k_work_cancel_delayable+0x84>)
   3619e:	f7ff f855 	bl	3524c <z_spin_lock_valid>
   361a2:	b938      	cbnz	r0, 361b4 <k_work_cancel_delayable+0x44>
   361a4:	4914      	ldr	r1, [pc, #80]	; (361f8 <k_work_cancel_delayable+0x88>)
   361a6:	4812      	ldr	r0, [pc, #72]	; (361f0 <k_work_cancel_delayable+0x80>)
   361a8:	2294      	movs	r2, #148	; 0x94
   361aa:	f002 fcb2 	bl	38b12 <assert_print>
   361ae:	2194      	movs	r1, #148	; 0x94
   361b0:	4811      	ldr	r0, [pc, #68]	; (361f8 <k_work_cancel_delayable+0x88>)
   361b2:	e7e9      	b.n	36188 <k_work_cancel_delayable+0x18>
	z_spin_lock_set_owner(l);
   361b4:	480f      	ldr	r0, [pc, #60]	; (361f4 <k_work_cancel_delayable+0x84>)
   361b6:	f7ff f867 	bl	35288 <z_spin_lock_set_owner>
	(void)unschedule_locked(dwork);
   361ba:	4620      	mov	r0, r4
   361bc:	f005 fd80 	bl	3bcc0 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   361c0:	4620      	mov	r0, r4
   361c2:	f005 fd92 	bl	3bcea <cancel_async_locked>
   361c6:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   361c8:	480a      	ldr	r0, [pc, #40]	; (361f4 <k_work_cancel_delayable+0x84>)
   361ca:	f7ff f84d 	bl	35268 <z_spin_unlock_valid>
   361ce:	b930      	cbnz	r0, 361de <k_work_cancel_delayable+0x6e>
   361d0:	4909      	ldr	r1, [pc, #36]	; (361f8 <k_work_cancel_delayable+0x88>)
   361d2:	4807      	ldr	r0, [pc, #28]	; (361f0 <k_work_cancel_delayable+0x80>)
   361d4:	22c2      	movs	r2, #194	; 0xc2
   361d6:	f002 fc9c 	bl	38b12 <assert_print>
   361da:	21c2      	movs	r1, #194	; 0xc2
   361dc:	e7e8      	b.n	361b0 <k_work_cancel_delayable+0x40>
	__asm__ volatile(
   361de:	f385 8811 	msr	BASEPRI, r5
   361e2:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable, dwork, ret);

	return ret;
}
   361e6:	4620      	mov	r0, r4
   361e8:	bd38      	pop	{r3, r4, r5, pc}
   361ea:	bf00      	nop
   361ec:	0003fd5b 	.word	0x0003fd5b
   361f0:	0003d1d7 	.word	0x0003d1d7
   361f4:	200033bc 	.word	0x200033bc
   361f8:	0003d39d 	.word	0x0003d39d

000361fc <k_work_cancel_delayable_sync>:

bool k_work_cancel_delayable_sync(struct k_work_delayable *dwork,
				  struct k_work_sync *sync)
{
   361fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   36200:	460e      	mov	r6, r1
	__ASSERT_NO_MSG(dwork != NULL);
   36202:	4605      	mov	r5, r0
   36204:	b950      	cbnz	r0, 3621c <k_work_cancel_delayable_sync+0x20>
   36206:	4933      	ldr	r1, [pc, #204]	; (362d4 <k_work_cancel_delayable_sync+0xd8>)
   36208:	4833      	ldr	r0, [pc, #204]	; (362d8 <k_work_cancel_delayable_sync+0xdc>)
   3620a:	f240 420e 	movw	r2, #1038	; 0x40e
   3620e:	f002 fc80 	bl	38b12 <assert_print>
   36212:	f240 410e 	movw	r1, #1038	; 0x40e
	__ASSERT_NO_MSG(sync != NULL);
   36216:	482f      	ldr	r0, [pc, #188]	; (362d4 <k_work_cancel_delayable_sync+0xd8>)
   36218:	f002 fc74 	bl	38b04 <assert_post_action>
   3621c:	b941      	cbnz	r1, 36230 <k_work_cancel_delayable_sync+0x34>
   3621e:	492d      	ldr	r1, [pc, #180]	; (362d4 <k_work_cancel_delayable_sync+0xd8>)
   36220:	482d      	ldr	r0, [pc, #180]	; (362d8 <k_work_cancel_delayable_sync+0xdc>)
   36222:	f240 420f 	movw	r2, #1039	; 0x40f
   36226:	f002 fc74 	bl	38b12 <assert_print>
   3622a:	f240 410f 	movw	r1, #1039	; 0x40f
   3622e:	e7f2      	b.n	36216 <k_work_cancel_delayable_sync+0x1a>
	__ASSERT_NO_MSG(!k_is_in_isr());
   36230:	f005 fce1 	bl	3bbf6 <k_is_in_isr>
   36234:	4604      	mov	r4, r0
   36236:	b140      	cbz	r0, 3624a <k_work_cancel_delayable_sync+0x4e>
   36238:	4926      	ldr	r1, [pc, #152]	; (362d4 <k_work_cancel_delayable_sync+0xd8>)
   3623a:	4827      	ldr	r0, [pc, #156]	; (362d8 <k_work_cancel_delayable_sync+0xdc>)
   3623c:	f44f 6282 	mov.w	r2, #1040	; 0x410
   36240:	f002 fc67 	bl	38b12 <assert_print>
   36244:	f44f 6182 	mov.w	r1, #1040	; 0x410
   36248:	e7e5      	b.n	36216 <k_work_cancel_delayable_sync+0x1a>
	__asm__ volatile(
   3624a:	f04f 0340 	mov.w	r3, #64	; 0x40
   3624e:	f3ef 8811 	mrs	r8, BASEPRI
   36252:	f383 8812 	msr	BASEPRI_MAX, r3
   36256:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3625a:	4820      	ldr	r0, [pc, #128]	; (362dc <k_work_cancel_delayable_sync+0xe0>)
   3625c:	f7fe fff6 	bl	3524c <z_spin_lock_valid>
   36260:	b938      	cbnz	r0, 36272 <k_work_cancel_delayable_sync+0x76>
   36262:	491f      	ldr	r1, [pc, #124]	; (362e0 <k_work_cancel_delayable_sync+0xe4>)
   36264:	481c      	ldr	r0, [pc, #112]	; (362d8 <k_work_cancel_delayable_sync+0xdc>)
   36266:	2294      	movs	r2, #148	; 0x94
   36268:	f002 fc53 	bl	38b12 <assert_print>
   3626c:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3626e:	481c      	ldr	r0, [pc, #112]	; (362e0 <k_work_cancel_delayable_sync+0xe4>)
   36270:	e7d2      	b.n	36218 <k_work_cancel_delayable_sync+0x1c>
	z_spin_lock_set_owner(l);
   36272:	481a      	ldr	r0, [pc, #104]	; (362dc <k_work_cancel_delayable_sync+0xe0>)
   36274:	f7ff f808 	bl	35288 <z_spin_lock_set_owner>
	return *flagp;
   36278:	68eb      	ldr	r3, [r5, #12]
   3627a:	f003 030f 	and.w	r3, r3, #15

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, cancel_delayable_sync, dwork, sync);

	struct z_work_canceller *canceller = &sync->canceller;
	k_spinlock_key_t key = k_spin_lock(&lock);
	bool pending = (work_delayable_busy_get_locked(dwork) != 0U);
   3627e:	2b00      	cmp	r3, #0
   36280:	bf14      	ite	ne
   36282:	2701      	movne	r7, #1
   36284:	2700      	moveq	r7, #0
	bool need_wait = false;

	if (pending) {
   36286:	d00a      	beq.n	3629e <k_work_cancel_delayable_sync+0xa2>
	(void)unschedule_locked(dwork);
   36288:	4628      	mov	r0, r5
   3628a:	f005 fd19 	bl	3bcc0 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   3628e:	4628      	mov	r0, r5
   36290:	f005 fd2b 	bl	3bcea <cancel_async_locked>
		(void)cancel_delayable_async_locked(dwork);
		need_wait = cancel_sync_locked(&dwork->work, canceller);
   36294:	4631      	mov	r1, r6
   36296:	4628      	mov	r0, r5
   36298:	f7ff fc4e 	bl	35b38 <cancel_sync_locked>
   3629c:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3629e:	480f      	ldr	r0, [pc, #60]	; (362dc <k_work_cancel_delayable_sync+0xe0>)
   362a0:	f7fe ffe2 	bl	35268 <z_spin_unlock_valid>
   362a4:	b930      	cbnz	r0, 362b4 <k_work_cancel_delayable_sync+0xb8>
   362a6:	490e      	ldr	r1, [pc, #56]	; (362e0 <k_work_cancel_delayable_sync+0xe4>)
   362a8:	480b      	ldr	r0, [pc, #44]	; (362d8 <k_work_cancel_delayable_sync+0xdc>)
   362aa:	22c2      	movs	r2, #194	; 0xc2
   362ac:	f002 fc31 	bl	38b12 <assert_print>
   362b0:	21c2      	movs	r1, #194	; 0xc2
   362b2:	e7dc      	b.n	3626e <k_work_cancel_delayable_sync+0x72>
	__asm__ volatile(
   362b4:	f388 8811 	msr	BASEPRI, r8
   362b8:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);

	if (need_wait) {
   362bc:	b13c      	cbz	r4, 362ce <k_work_cancel_delayable_sync+0xd2>
	return z_impl_k_sem_take(sem, timeout);
   362be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   362c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   362c6:	f106 0008 	add.w	r0, r6, #8
   362ca:	f7ff faa7 	bl	3581c <z_impl_k_sem_take>
		k_sem_take(&canceller->sem, K_FOREVER);
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable_sync, dwork, sync, pending);
	return pending;
}
   362ce:	4638      	mov	r0, r7
   362d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   362d4:	0003fd5b 	.word	0x0003fd5b
   362d8:	0003d1d7 	.word	0x0003d1d7
   362dc:	200033bc 	.word	0x200033bc
   362e0:	0003d39d 	.word	0x0003d39d

000362e4 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(struct k_thread *curr)
{
   362e4:	b538      	push	{r3, r4, r5, lr}
	int ret = slice_ticks;
   362e6:	4d07      	ldr	r5, [pc, #28]	; (36304 <z_reset_time_slice+0x20>)
   362e8:	682c      	ldr	r4, [r5, #0]
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time(curr) != 0) {
   362ea:	b154      	cbz	r4, 36302 <z_reset_time_slice+0x1e>
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
   362ec:	f7fb fcf2 	bl	31cd4 <sys_clock_elapsed>
   362f0:	4b05      	ldr	r3, [pc, #20]	; (36308 <z_reset_time_slice+0x24>)
   362f2:	4404      	add	r4, r0
   362f4:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
   362f6:	6828      	ldr	r0, [r5, #0]
   362f8:	2100      	movs	r1, #0
	}
}
   362fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_set_timeout_expiry(slice_time(curr), false);
   362fe:	f001 b985 	b.w	3760c <z_set_timeout_expiry>
}
   36302:	bd38      	pop	{r3, r4, r5, pc}
   36304:	200033c8 	.word	0x200033c8
   36308:	20003384 	.word	0x20003384

0003630c <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
   3630c:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
   3630e:	4d12      	ldr	r5, [pc, #72]	; (36358 <update_cache+0x4c>)
   36310:	462b      	mov	r3, r5
   36312:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   36316:	429c      	cmp	r4, r3
   36318:	d000      	beq.n	3631c <update_cache+0x10>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   3631a:	b904      	cbnz	r4, 3631e <update_cache+0x12>
   3631c:	68ec      	ldr	r4, [r5, #12]
	__ASSERT(_current != NULL, "");
   3631e:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
   36320:	b988      	cbnz	r0, 36346 <update_cache+0x3a>
	__ASSERT(_current != NULL, "");
   36322:	b943      	cbnz	r3, 36336 <update_cache+0x2a>
   36324:	490d      	ldr	r1, [pc, #52]	; (3635c <update_cache+0x50>)
   36326:	480e      	ldr	r0, [pc, #56]	; (36360 <update_cache+0x54>)
   36328:	2289      	movs	r2, #137	; 0x89
   3632a:	f002 fbf2 	bl	38b12 <assert_print>
   3632e:	480b      	ldr	r0, [pc, #44]	; (3635c <update_cache+0x50>)
   36330:	2189      	movs	r1, #137	; 0x89
   36332:	f002 fbe7 	bl	38b04 <assert_post_action>
	if (z_is_thread_prevented_from_running(_current)) {
   36336:	7b5a      	ldrb	r2, [r3, #13]
   36338:	06d2      	lsls	r2, r2, #27
   3633a:	d104      	bne.n	36346 <update_cache+0x3a>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   3633c:	69a2      	ldr	r2, [r4, #24]
   3633e:	b912      	cbnz	r2, 36346 <update_cache+0x3a>
	if (is_preempt(_current) || is_metairq(thread)) {
   36340:	89da      	ldrh	r2, [r3, #14]
   36342:	2a7f      	cmp	r2, #127	; 0x7f
   36344:	d805      	bhi.n	36352 <update_cache+0x46>
#ifndef CONFIG_SMP
	struct k_thread *thread = next_up();

	if (should_preempt(thread, preempt_ok)) {
#ifdef CONFIG_TIMESLICING
		if (thread != _current) {
   36346:	429c      	cmp	r4, r3
   36348:	d002      	beq.n	36350 <update_cache+0x44>
			z_reset_time_slice(thread);
   3634a:	4620      	mov	r0, r4
   3634c:	f7ff ffca 	bl	362e4 <z_reset_time_slice>
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
   36350:	4623      	mov	r3, r4
   36352:	61eb      	str	r3, [r5, #28]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
   36354:	bd38      	pop	{r3, r4, r5, pc}
   36356:	bf00      	nop
   36358:	20003384 	.word	0x20003384
   3635c:	0003fd7c 	.word	0x0003fd7c
   36360:	0003d1d7 	.word	0x0003d1d7

00036364 <ready_thread>:
	}
#endif
}

static void ready_thread(struct k_thread *thread)
{
   36364:	b570      	push	{r4, r5, r6, lr}
#endif

	/* If thread is queued already, do not try and added it to the
	 * run queue again
	 */
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   36366:	f990 300d 	ldrsb.w	r3, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   3636a:	7b42      	ldrb	r2, [r0, #13]
   3636c:	2b00      	cmp	r3, #0
   3636e:	db37      	blt.n	363e0 <ready_thread+0x7c>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   36370:	06d3      	lsls	r3, r2, #27
   36372:	d135      	bne.n	363e0 <ready_thread+0x7c>
	return node->next != NULL;
   36374:	6983      	ldr	r3, [r0, #24]
   36376:	2b00      	cmp	r3, #0
   36378:	d132      	bne.n	363e0 <ready_thread+0x7c>
	thread->base.thread_state |= _THREAD_QUEUED;
   3637a:	f062 027f 	orn	r2, r2, #127	; 0x7f
   3637e:	7342      	strb	r2, [r0, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   36380:	4a18      	ldr	r2, [pc, #96]	; (363e4 <ready_thread+0x80>)
   36382:	4290      	cmp	r0, r2
   36384:	d108      	bne.n	36398 <ready_thread+0x34>
   36386:	4918      	ldr	r1, [pc, #96]	; (363e8 <ready_thread+0x84>)
   36388:	4818      	ldr	r0, [pc, #96]	; (363ec <ready_thread+0x88>)
   3638a:	22ba      	movs	r2, #186	; 0xba
   3638c:	f002 fbc1 	bl	38b12 <assert_print>
   36390:	4815      	ldr	r0, [pc, #84]	; (363e8 <ready_thread+0x84>)
   36392:	21ba      	movs	r1, #186	; 0xba
   36394:	f002 fbb6 	bl	38b04 <assert_post_action>
	return list->head == list;
   36398:	4915      	ldr	r1, [pc, #84]	; (363f0 <ready_thread+0x8c>)
   3639a:	460a      	mov	r2, r1
   3639c:	f852 4f20 	ldr.w	r4, [r2, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   363a0:	4294      	cmp	r4, r2
   363a2:	bf18      	it	ne
   363a4:	4623      	movne	r3, r4
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   363a6:	6a4c      	ldr	r4, [r1, #36]	; 0x24
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   363a8:	b923      	cbnz	r3, 363b4 <ready_thread+0x50>
static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
	node->prev = tail;
   363aa:	e9c0 2400 	strd	r2, r4, [r0]

	tail->next = node;
   363ae:	6020      	str	r0, [r4, #0]
	list->tail = node;
   363b0:	6248      	str	r0, [r1, #36]	; 0x24
}
   363b2:	e00c      	b.n	363ce <ready_thread+0x6a>
	int32_t b1 = thread_1->base.prio;
   363b4:	f990 500e 	ldrsb.w	r5, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   363b8:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
   363bc:	42b5      	cmp	r5, r6
   363be:	d00b      	beq.n	363d8 <ready_thread+0x74>
		if (z_sched_prio_cmp(thread, t) > 0) {
   363c0:	42ae      	cmp	r6, r5
   363c2:	dd09      	ble.n	363d8 <ready_thread+0x74>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
   363c4:	685a      	ldr	r2, [r3, #4]

	node->prev = prev;
	node->next = successor;
   363c6:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
   363ca:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   363cc:	6058      	str	r0, [r3, #4]

		queue_thread(thread);
		update_cache(0);
		flag_ipi();
	}
}
   363ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		update_cache(0);
   363d2:	2000      	movs	r0, #0
   363d4:	f7ff bf9a 	b.w	3630c <update_cache>
	return (node == list->tail) ? NULL : node->next;
   363d8:	42a3      	cmp	r3, r4
   363da:	d0e6      	beq.n	363aa <ready_thread+0x46>
   363dc:	681b      	ldr	r3, [r3, #0]
   363de:	e7e3      	b.n	363a8 <ready_thread+0x44>
}
   363e0:	bd70      	pop	{r4, r5, r6, pc}
   363e2:	bf00      	nop
   363e4:	20002bd0 	.word	0x20002bd0
   363e8:	0003fd7c 	.word	0x0003fd7c
   363ec:	0003d1d7 	.word	0x0003d1d7
   363f0:	20003384 	.word	0x20003384

000363f4 <k_sched_time_slice_set>:
{
   363f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   363f6:	4604      	mov	r4, r0
   363f8:	460d      	mov	r5, r1
	__asm__ volatile(
   363fa:	f04f 0340 	mov.w	r3, #64	; 0x40
   363fe:	f3ef 8711 	mrs	r7, BASEPRI
   36402:	f383 8812 	msr	BASEPRI_MAX, r3
   36406:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3640a:	481d      	ldr	r0, [pc, #116]	; (36480 <k_sched_time_slice_set+0x8c>)
   3640c:	f7fe ff1e 	bl	3524c <z_spin_lock_valid>
   36410:	b940      	cbnz	r0, 36424 <k_sched_time_slice_set+0x30>
   36412:	491c      	ldr	r1, [pc, #112]	; (36484 <k_sched_time_slice_set+0x90>)
   36414:	481c      	ldr	r0, [pc, #112]	; (36488 <k_sched_time_slice_set+0x94>)
   36416:	2294      	movs	r2, #148	; 0x94
   36418:	f002 fb7b 	bl	38b12 <assert_print>
   3641c:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3641e:	4819      	ldr	r0, [pc, #100]	; (36484 <k_sched_time_slice_set+0x90>)
   36420:	f002 fb70 	bl	38b04 <assert_post_action>
	z_spin_lock_set_owner(l);
   36424:	4816      	ldr	r0, [pc, #88]	; (36480 <k_sched_time_slice_set+0x8c>)
			return (uint32_t)((t * to_hz + off) / from_hz);
   36426:	2600      	movs	r6, #0
   36428:	f7fe ff2e 	bl	35288 <z_spin_lock_set_owner>
   3642c:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
   36430:	f240 30e7 	movw	r0, #999	; 0x3e7
   36434:	4631      	mov	r1, r6
   36436:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   3643a:	2300      	movs	r3, #0
   3643c:	fbe4 010c 	umlal	r0, r1, r4, ip
   36440:	f7d6 fed6 	bl	d1f0 <__aeabi_uldivmod>
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   36444:	42b4      	cmp	r4, r6
   36446:	dd02      	ble.n	3644e <k_sched_time_slice_set+0x5a>
			slice_ticks = MAX(2, slice_ticks);
   36448:	2802      	cmp	r0, #2
   3644a:	bfb8      	it	lt
   3644c:	2002      	movlt	r0, #2
		slice_ticks = k_ms_to_ticks_ceil32(slice);
   3644e:	4a0f      	ldr	r2, [pc, #60]	; (3648c <k_sched_time_slice_set+0x98>)
		_current_cpu->slice_ticks = 0;
   36450:	4b0f      	ldr	r3, [pc, #60]	; (36490 <k_sched_time_slice_set+0x9c>)
		slice_ticks = k_ms_to_ticks_ceil32(slice);
   36452:	6010      	str	r0, [r2, #0]
		slice_max_prio = prio;
   36454:	4a0f      	ldr	r2, [pc, #60]	; (36494 <k_sched_time_slice_set+0xa0>)
		z_reset_time_slice(_current);
   36456:	6898      	ldr	r0, [r3, #8]
		_current_cpu->slice_ticks = 0;
   36458:	611e      	str	r6, [r3, #16]
		slice_max_prio = prio;
   3645a:	6015      	str	r5, [r2, #0]
		z_reset_time_slice(_current);
   3645c:	f7ff ff42 	bl	362e4 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   36460:	4807      	ldr	r0, [pc, #28]	; (36480 <k_sched_time_slice_set+0x8c>)
   36462:	f7fe ff01 	bl	35268 <z_spin_unlock_valid>
   36466:	b930      	cbnz	r0, 36476 <k_sched_time_slice_set+0x82>
   36468:	4906      	ldr	r1, [pc, #24]	; (36484 <k_sched_time_slice_set+0x90>)
   3646a:	4807      	ldr	r0, [pc, #28]	; (36488 <k_sched_time_slice_set+0x94>)
   3646c:	22c2      	movs	r2, #194	; 0xc2
   3646e:	f002 fb50 	bl	38b12 <assert_print>
   36472:	21c2      	movs	r1, #194	; 0xc2
   36474:	e7d3      	b.n	3641e <k_sched_time_slice_set+0x2a>
	__asm__ volatile(
   36476:	f387 8811 	msr	BASEPRI, r7
   3647a:	f3bf 8f6f 	isb	sy
}
   3647e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   36480:	200033cc 	.word	0x200033cc
   36484:	0003d39d 	.word	0x0003d39d
   36488:	0003d1d7 	.word	0x0003d1d7
   3648c:	200033c8 	.word	0x200033c8
   36490:	20003384 	.word	0x20003384
   36494:	200033c4 	.word	0x200033c4

00036498 <z_ready_thread>:

void z_ready_thread(struct k_thread *thread)
{
   36498:	b538      	push	{r3, r4, r5, lr}
   3649a:	4604      	mov	r4, r0
	__asm__ volatile(
   3649c:	f04f 0340 	mov.w	r3, #64	; 0x40
   364a0:	f3ef 8511 	mrs	r5, BASEPRI
   364a4:	f383 8812 	msr	BASEPRI_MAX, r3
   364a8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   364ac:	4811      	ldr	r0, [pc, #68]	; (364f4 <z_ready_thread+0x5c>)
   364ae:	f7fe fecd 	bl	3524c <z_spin_lock_valid>
   364b2:	b940      	cbnz	r0, 364c6 <z_ready_thread+0x2e>
   364b4:	4910      	ldr	r1, [pc, #64]	; (364f8 <z_ready_thread+0x60>)
   364b6:	4811      	ldr	r0, [pc, #68]	; (364fc <z_ready_thread+0x64>)
   364b8:	2294      	movs	r2, #148	; 0x94
   364ba:	f002 fb2a 	bl	38b12 <assert_print>
   364be:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   364c0:	480d      	ldr	r0, [pc, #52]	; (364f8 <z_ready_thread+0x60>)
   364c2:	f002 fb1f 	bl	38b04 <assert_post_action>
	z_spin_lock_set_owner(l);
   364c6:	480b      	ldr	r0, [pc, #44]	; (364f4 <z_ready_thread+0x5c>)
   364c8:	f7fe fede 	bl	35288 <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		if (!thread_active_elsewhere(thread)) {
			ready_thread(thread);
   364cc:	4620      	mov	r0, r4
   364ce:	f7ff ff49 	bl	36364 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   364d2:	4808      	ldr	r0, [pc, #32]	; (364f4 <z_ready_thread+0x5c>)
   364d4:	f7fe fec8 	bl	35268 <z_spin_unlock_valid>
   364d8:	b930      	cbnz	r0, 364e8 <z_ready_thread+0x50>
   364da:	4907      	ldr	r1, [pc, #28]	; (364f8 <z_ready_thread+0x60>)
   364dc:	4807      	ldr	r0, [pc, #28]	; (364fc <z_ready_thread+0x64>)
   364de:	22c2      	movs	r2, #194	; 0xc2
   364e0:	f002 fb17 	bl	38b12 <assert_print>
   364e4:	21c2      	movs	r1, #194	; 0xc2
   364e6:	e7eb      	b.n	364c0 <z_ready_thread+0x28>
	__asm__ volatile(
   364e8:	f385 8811 	msr	BASEPRI, r5
   364ec:	f3bf 8f6f 	isb	sy
		}
	}
}
   364f0:	bd38      	pop	{r3, r4, r5, pc}
   364f2:	bf00      	nop
   364f4:	200033cc 	.word	0x200033cc
   364f8:	0003d39d 	.word	0x0003d39d
   364fc:	0003d1d7 	.word	0x0003d1d7

00036500 <z_unpend_thread_no_timeout>:
	z_mark_thread_as_not_pending(thread);
	thread->base.pended_on = NULL;
}

ALWAYS_INLINE void z_unpend_thread_no_timeout(struct k_thread *thread)
{
   36500:	b538      	push	{r3, r4, r5, lr}
   36502:	4604      	mov	r4, r0
	__asm__ volatile(
   36504:	f04f 0340 	mov.w	r3, #64	; 0x40
   36508:	f3ef 8511 	mrs	r5, BASEPRI
   3650c:	f383 8812 	msr	BASEPRI_MAX, r3
   36510:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   36514:	4811      	ldr	r0, [pc, #68]	; (3655c <z_unpend_thread_no_timeout+0x5c>)
   36516:	f7fe fe99 	bl	3524c <z_spin_lock_valid>
   3651a:	b940      	cbnz	r0, 3652e <z_unpend_thread_no_timeout+0x2e>
   3651c:	4910      	ldr	r1, [pc, #64]	; (36560 <z_unpend_thread_no_timeout+0x60>)
   3651e:	4811      	ldr	r0, [pc, #68]	; (36564 <z_unpend_thread_no_timeout+0x64>)
   36520:	2294      	movs	r2, #148	; 0x94
   36522:	f002 faf6 	bl	38b12 <assert_print>
   36526:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   36528:	480d      	ldr	r0, [pc, #52]	; (36560 <z_unpend_thread_no_timeout+0x60>)
   3652a:	f002 faeb 	bl	38b04 <assert_post_action>
	z_spin_lock_set_owner(l);
   3652e:	480b      	ldr	r0, [pc, #44]	; (3655c <z_unpend_thread_no_timeout+0x5c>)
   36530:	f7fe feaa 	bl	35288 <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		unpend_thread_no_timeout(thread);
   36534:	4620      	mov	r0, r4
   36536:	f000 fb97 	bl	36c68 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3653a:	4808      	ldr	r0, [pc, #32]	; (3655c <z_unpend_thread_no_timeout+0x5c>)
   3653c:	f7fe fe94 	bl	35268 <z_spin_unlock_valid>
   36540:	b930      	cbnz	r0, 36550 <z_unpend_thread_no_timeout+0x50>
   36542:	4907      	ldr	r1, [pc, #28]	; (36560 <z_unpend_thread_no_timeout+0x60>)
   36544:	4807      	ldr	r0, [pc, #28]	; (36564 <z_unpend_thread_no_timeout+0x64>)
   36546:	22c2      	movs	r2, #194	; 0xc2
   36548:	f002 fae3 	bl	38b12 <assert_print>
   3654c:	21c2      	movs	r1, #194	; 0xc2
   3654e:	e7eb      	b.n	36528 <z_unpend_thread_no_timeout+0x28>
	__asm__ volatile(
   36550:	f385 8811 	msr	BASEPRI, r5
   36554:	f3bf 8f6f 	isb	sy
	}
}
   36558:	bd38      	pop	{r3, r4, r5, pc}
   3655a:	bf00      	nop
   3655c:	200033cc 	.word	0x200033cc
   36560:	0003d39d 	.word	0x0003d39d
   36564:	0003d1d7 	.word	0x0003d1d7

00036568 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
   36568:	b538      	push	{r3, r4, r5, lr}
   3656a:	4603      	mov	r3, r0
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   3656c:	460c      	mov	r4, r1
   3656e:	b9c1      	cbnz	r1, 365a2 <z_reschedule+0x3a>
   36570:	f3ef 8505 	mrs	r5, IPSR
   36574:	b9ad      	cbnz	r5, 365a2 <z_reschedule+0x3a>
	new_thread = _kernel.ready_q.cache;
   36576:	4a13      	ldr	r2, [pc, #76]	; (365c4 <z_reschedule+0x5c>)
	if (resched(key.key) && need_swap()) {
   36578:	69d1      	ldr	r1, [r2, #28]
   3657a:	6892      	ldr	r2, [r2, #8]
   3657c:	4291      	cmp	r1, r2
   3657e:	d010      	beq.n	365a2 <z_reschedule+0x3a>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   36580:	f7fe fe72 	bl	35268 <z_spin_unlock_valid>
   36584:	b940      	cbnz	r0, 36598 <z_reschedule+0x30>
   36586:	4910      	ldr	r1, [pc, #64]	; (365c8 <z_reschedule+0x60>)
   36588:	4810      	ldr	r0, [pc, #64]	; (365cc <z_reschedule+0x64>)
   3658a:	22e1      	movs	r2, #225	; 0xe1
   3658c:	f002 fac1 	bl	38b12 <assert_print>
   36590:	21e1      	movs	r1, #225	; 0xe1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   36592:	480d      	ldr	r0, [pc, #52]	; (365c8 <z_reschedule+0x60>)
   36594:	f002 fab6 	bl	38b04 <assert_post_action>
	ret = arch_swap(key);
   36598:	4628      	mov	r0, r5
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
		signal_pending_ipi();
	}
}
   3659a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   3659e:	f7f0 bcff 	b.w	26fa0 <arch_swap>
   365a2:	4618      	mov	r0, r3
   365a4:	f7fe fe60 	bl	35268 <z_spin_unlock_valid>
   365a8:	b930      	cbnz	r0, 365b8 <z_reschedule+0x50>
   365aa:	4907      	ldr	r1, [pc, #28]	; (365c8 <z_reschedule+0x60>)
   365ac:	4807      	ldr	r0, [pc, #28]	; (365cc <z_reschedule+0x64>)
   365ae:	22c2      	movs	r2, #194	; 0xc2
   365b0:	f002 faaf 	bl	38b12 <assert_print>
   365b4:	21c2      	movs	r1, #194	; 0xc2
   365b6:	e7ec      	b.n	36592 <z_reschedule+0x2a>
   365b8:	f384 8811 	msr	BASEPRI, r4
   365bc:	f3bf 8f6f 	isb	sy
   365c0:	bd38      	pop	{r3, r4, r5, pc}
   365c2:	bf00      	nop
   365c4:	20003384 	.word	0x20003384
   365c8:	0003d39d 	.word	0x0003d39d
   365cc:	0003d1d7 	.word	0x0003d1d7

000365d0 <z_sched_start>:
{
   365d0:	b538      	push	{r3, r4, r5, lr}
   365d2:	4604      	mov	r4, r0
	__asm__ volatile(
   365d4:	f04f 0340 	mov.w	r3, #64	; 0x40
   365d8:	f3ef 8511 	mrs	r5, BASEPRI
   365dc:	f383 8812 	msr	BASEPRI_MAX, r3
   365e0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   365e4:	4817      	ldr	r0, [pc, #92]	; (36644 <z_sched_start+0x74>)
   365e6:	f7fe fe31 	bl	3524c <z_spin_lock_valid>
   365ea:	b940      	cbnz	r0, 365fe <z_sched_start+0x2e>
   365ec:	4916      	ldr	r1, [pc, #88]	; (36648 <z_sched_start+0x78>)
   365ee:	4817      	ldr	r0, [pc, #92]	; (3664c <z_sched_start+0x7c>)
   365f0:	2294      	movs	r2, #148	; 0x94
   365f2:	f002 fa8e 	bl	38b12 <assert_print>
   365f6:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   365f8:	4813      	ldr	r0, [pc, #76]	; (36648 <z_sched_start+0x78>)
   365fa:	f002 fa83 	bl	38b04 <assert_post_action>
	z_spin_lock_set_owner(l);
   365fe:	4811      	ldr	r0, [pc, #68]	; (36644 <z_sched_start+0x74>)
   36600:	f7fe fe42 	bl	35288 <z_spin_lock_set_owner>
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   36604:	7b63      	ldrb	r3, [r4, #13]
	if (z_has_thread_started(thread)) {
   36606:	075a      	lsls	r2, r3, #29
   36608:	d40f      	bmi.n	3662a <z_sched_start+0x5a>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3660a:	480e      	ldr	r0, [pc, #56]	; (36644 <z_sched_start+0x74>)
   3660c:	f7fe fe2c 	bl	35268 <z_spin_unlock_valid>
   36610:	b930      	cbnz	r0, 36620 <z_sched_start+0x50>
   36612:	490d      	ldr	r1, [pc, #52]	; (36648 <z_sched_start+0x78>)
   36614:	480d      	ldr	r0, [pc, #52]	; (3664c <z_sched_start+0x7c>)
   36616:	22c2      	movs	r2, #194	; 0xc2
   36618:	f002 fa7b 	bl	38b12 <assert_print>
   3661c:	21c2      	movs	r1, #194	; 0xc2
   3661e:	e7eb      	b.n	365f8 <z_sched_start+0x28>
	__asm__ volatile(
   36620:	f385 8811 	msr	BASEPRI, r5
   36624:	f3bf 8f6f 	isb	sy
}
   36628:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   3662a:	f023 0304 	bic.w	r3, r3, #4
	ready_thread(thread);
   3662e:	4620      	mov	r0, r4
   36630:	7363      	strb	r3, [r4, #13]
   36632:	f7ff fe97 	bl	36364 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   36636:	4629      	mov	r1, r5
   36638:	4802      	ldr	r0, [pc, #8]	; (36644 <z_sched_start+0x74>)
}
   3663a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&sched_spinlock, key);
   3663e:	f7ff bf93 	b.w	36568 <z_reschedule>
   36642:	bf00      	nop
   36644:	200033cc 	.word	0x200033cc
   36648:	0003d39d 	.word	0x0003d39d
   3664c:	0003d1d7 	.word	0x0003d1d7

00036650 <k_sched_lock>:
		signal_pending_ipi();
	}
}

void k_sched_lock(void)
{
   36650:	b510      	push	{r4, lr}
	__asm__ volatile(
   36652:	f04f 0340 	mov.w	r3, #64	; 0x40
   36656:	f3ef 8411 	mrs	r4, BASEPRI
   3665a:	f383 8812 	msr	BASEPRI_MAX, r3
   3665e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   36662:	481c      	ldr	r0, [pc, #112]	; (366d4 <k_sched_lock+0x84>)
   36664:	f7fe fdf2 	bl	3524c <z_spin_lock_valid>
   36668:	b938      	cbnz	r0, 3667a <k_sched_lock+0x2a>
   3666a:	491b      	ldr	r1, [pc, #108]	; (366d8 <k_sched_lock+0x88>)
   3666c:	481b      	ldr	r0, [pc, #108]	; (366dc <k_sched_lock+0x8c>)
   3666e:	2294      	movs	r2, #148	; 0x94
   36670:	f002 fa4f 	bl	38b12 <assert_print>
   36674:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   36676:	4818      	ldr	r0, [pc, #96]	; (366d8 <k_sched_lock+0x88>)
   36678:	e00c      	b.n	36694 <k_sched_lock+0x44>
	z_spin_lock_set_owner(l);
   3667a:	4816      	ldr	r0, [pc, #88]	; (366d4 <k_sched_lock+0x84>)
   3667c:	f7fe fe04 	bl	35288 <z_spin_lock_set_owner>
   36680:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   36684:	b143      	cbz	r3, 36698 <k_sched_lock+0x48>
   36686:	4916      	ldr	r1, [pc, #88]	; (366e0 <k_sched_lock+0x90>)
   36688:	4814      	ldr	r0, [pc, #80]	; (366dc <k_sched_lock+0x8c>)
   3668a:	22fd      	movs	r2, #253	; 0xfd
   3668c:	f002 fa41 	bl	38b12 <assert_print>
   36690:	21fd      	movs	r1, #253	; 0xfd
   36692:	4813      	ldr	r0, [pc, #76]	; (366e0 <k_sched_lock+0x90>)
   36694:	f002 fa36 	bl	38b04 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
   36698:	4b12      	ldr	r3, [pc, #72]	; (366e4 <k_sched_lock+0x94>)
   3669a:	689a      	ldr	r2, [r3, #8]
   3669c:	7bd3      	ldrb	r3, [r2, #15]
   3669e:	2b01      	cmp	r3, #1
   366a0:	d106      	bne.n	366b0 <k_sched_lock+0x60>
   366a2:	490f      	ldr	r1, [pc, #60]	; (366e0 <k_sched_lock+0x90>)
   366a4:	480d      	ldr	r0, [pc, #52]	; (366dc <k_sched_lock+0x8c>)
   366a6:	22fe      	movs	r2, #254	; 0xfe
   366a8:	f002 fa33 	bl	38b12 <assert_print>
   366ac:	21fe      	movs	r1, #254	; 0xfe
   366ae:	e7f0      	b.n	36692 <k_sched_lock+0x42>
	--_current->base.sched_locked;
   366b0:	3b01      	subs	r3, #1
   366b2:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   366b4:	4807      	ldr	r0, [pc, #28]	; (366d4 <k_sched_lock+0x84>)
   366b6:	f7fe fdd7 	bl	35268 <z_spin_unlock_valid>
   366ba:	b930      	cbnz	r0, 366ca <k_sched_lock+0x7a>
   366bc:	4906      	ldr	r1, [pc, #24]	; (366d8 <k_sched_lock+0x88>)
   366be:	4807      	ldr	r0, [pc, #28]	; (366dc <k_sched_lock+0x8c>)
   366c0:	22c2      	movs	r2, #194	; 0xc2
   366c2:	f002 fa26 	bl	38b12 <assert_print>
   366c6:	21c2      	movs	r1, #194	; 0xc2
   366c8:	e7d5      	b.n	36676 <k_sched_lock+0x26>
	__asm__ volatile(
   366ca:	f384 8811 	msr	BASEPRI, r4
   366ce:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
   366d2:	bd10      	pop	{r4, pc}
   366d4:	200033cc 	.word	0x200033cc
   366d8:	0003d39d 	.word	0x0003d39d
   366dc:	0003d1d7 	.word	0x0003d1d7
   366e0:	0003fd9e 	.word	0x0003fd9e
   366e4:	20003384 	.word	0x20003384

000366e8 <k_sched_unlock>:

void k_sched_unlock(void)
{
   366e8:	b510      	push	{r4, lr}
	__asm__ volatile(
   366ea:	f04f 0340 	mov.w	r3, #64	; 0x40
   366ee:	f3ef 8411 	mrs	r4, BASEPRI
   366f2:	f383 8812 	msr	BASEPRI_MAX, r3
   366f6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   366fa:	4820      	ldr	r0, [pc, #128]	; (3677c <k_sched_unlock+0x94>)
   366fc:	f7fe fda6 	bl	3524c <z_spin_lock_valid>
   36700:	b938      	cbnz	r0, 36712 <k_sched_unlock+0x2a>
   36702:	491f      	ldr	r1, [pc, #124]	; (36780 <k_sched_unlock+0x98>)
   36704:	481f      	ldr	r0, [pc, #124]	; (36784 <k_sched_unlock+0x9c>)
   36706:	2294      	movs	r2, #148	; 0x94
   36708:	f002 fa03 	bl	38b12 <assert_print>
   3670c:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3670e:	481c      	ldr	r0, [pc, #112]	; (36780 <k_sched_unlock+0x98>)
   36710:	e00f      	b.n	36732 <k_sched_unlock+0x4a>
	z_spin_lock_set_owner(l);
   36712:	481a      	ldr	r0, [pc, #104]	; (3677c <k_sched_unlock+0x94>)
   36714:	f7fe fdb8 	bl	35288 <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		__ASSERT(_current->base.sched_locked != 0U, "");
   36718:	4b1b      	ldr	r3, [pc, #108]	; (36788 <k_sched_unlock+0xa0>)
   3671a:	689a      	ldr	r2, [r3, #8]
   3671c:	7bd3      	ldrb	r3, [r2, #15]
   3671e:	b953      	cbnz	r3, 36736 <k_sched_unlock+0x4e>
   36720:	491a      	ldr	r1, [pc, #104]	; (3678c <k_sched_unlock+0xa4>)
   36722:	4818      	ldr	r0, [pc, #96]	; (36784 <k_sched_unlock+0x9c>)
   36724:	f240 32e7 	movw	r2, #999	; 0x3e7
   36728:	f002 f9f3 	bl	38b12 <assert_print>
   3672c:	f240 31e7 	movw	r1, #999	; 0x3e7
   36730:	4816      	ldr	r0, [pc, #88]	; (3678c <k_sched_unlock+0xa4>)
   36732:	f002 f9e7 	bl	38b04 <assert_post_action>
   36736:	f3ef 8005 	mrs	r0, IPSR
		__ASSERT(!arch_is_in_isr(), "");
   3673a:	b140      	cbz	r0, 3674e <k_sched_unlock+0x66>
   3673c:	4913      	ldr	r1, [pc, #76]	; (3678c <k_sched_unlock+0xa4>)
   3673e:	4811      	ldr	r0, [pc, #68]	; (36784 <k_sched_unlock+0x9c>)
   36740:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   36744:	f002 f9e5 	bl	38b12 <assert_print>
   36748:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   3674c:	e7f0      	b.n	36730 <k_sched_unlock+0x48>

		++_current->base.sched_locked;
   3674e:	3301      	adds	r3, #1
   36750:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   36752:	f7ff fddb 	bl	3630c <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   36756:	4809      	ldr	r0, [pc, #36]	; (3677c <k_sched_unlock+0x94>)
   36758:	f7fe fd86 	bl	35268 <z_spin_unlock_valid>
   3675c:	b930      	cbnz	r0, 3676c <k_sched_unlock+0x84>
   3675e:	4908      	ldr	r1, [pc, #32]	; (36780 <k_sched_unlock+0x98>)
   36760:	4808      	ldr	r0, [pc, #32]	; (36784 <k_sched_unlock+0x9c>)
   36762:	22c2      	movs	r2, #194	; 0xc2
   36764:	f002 f9d5 	bl	38b12 <assert_print>
   36768:	21c2      	movs	r1, #194	; 0xc2
   3676a:	e7d0      	b.n	3670e <k_sched_unlock+0x26>
	__asm__ volatile(
   3676c:	f384 8811 	msr	BASEPRI, r4
   36770:	f3bf 8f6f 	isb	sy
		_current, _current->base.sched_locked);

	SYS_PORT_TRACING_FUNC(k_thread, sched_unlock);

	z_reschedule_unlocked();
}
   36774:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   36778:	f005 bb12 	b.w	3bda0 <z_reschedule_unlocked>
   3677c:	200033cc 	.word	0x200033cc
   36780:	0003d39d 	.word	0x0003d39d
   36784:	0003d1d7 	.word	0x0003d1d7
   36788:	20003384 	.word	0x20003384
   3678c:	0003fd7c 	.word	0x0003fd7c

00036790 <z_priq_dumb_remove>:
#endif
}
#endif

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
   36790:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   36792:	4b0b      	ldr	r3, [pc, #44]	; (367c0 <z_priq_dumb_remove+0x30>)
   36794:	4299      	cmp	r1, r3
   36796:	d10a      	bne.n	367ae <z_priq_dumb_remove+0x1e>
   36798:	490a      	ldr	r1, [pc, #40]	; (367c4 <z_priq_dumb_remove+0x34>)
   3679a:	480b      	ldr	r0, [pc, #44]	; (367c8 <z_priq_dumb_remove+0x38>)
   3679c:	f240 4273 	movw	r2, #1139	; 0x473
   367a0:	f002 f9b7 	bl	38b12 <assert_print>
   367a4:	4807      	ldr	r0, [pc, #28]	; (367c4 <z_priq_dumb_remove+0x34>)
   367a6:	f240 4173 	movw	r1, #1139	; 0x473
   367aa:	f002 f9ab 	bl	38b04 <assert_post_action>
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
   367ae:	e9d1 3200 	ldrd	r3, r2, [r1]

	prev->next = next;
   367b2:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   367b4:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   367b6:	2300      	movs	r3, #0
	node->prev = NULL;
   367b8:	e9c1 3300 	strd	r3, r3, [r1]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   367bc:	bd08      	pop	{r3, pc}
   367be:	bf00      	nop
   367c0:	20002bd0 	.word	0x20002bd0
   367c4:	0003fd7c 	.word	0x0003fd7c
   367c8:	0003d1d7 	.word	0x0003d1d7

000367cc <move_thread_to_end_of_prio_q>:
{
   367cc:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   367ce:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   367d2:	7b43      	ldrb	r3, [r0, #13]
   367d4:	2a00      	cmp	r2, #0
{
   367d6:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   367d8:	da06      	bge.n	367e8 <move_thread_to_end_of_prio_q+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   367da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   367de:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   367e0:	4601      	mov	r1, r0
   367e2:	481d      	ldr	r0, [pc, #116]	; (36858 <move_thread_to_end_of_prio_q+0x8c>)
   367e4:	f7ff ffd4 	bl	36790 <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   367e8:	7b63      	ldrb	r3, [r4, #13]
   367ea:	f063 037f 	orn	r3, r3, #127	; 0x7f
   367ee:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   367f0:	4b1a      	ldr	r3, [pc, #104]	; (3685c <move_thread_to_end_of_prio_q+0x90>)
   367f2:	429c      	cmp	r4, r3
   367f4:	d108      	bne.n	36808 <move_thread_to_end_of_prio_q+0x3c>
   367f6:	491a      	ldr	r1, [pc, #104]	; (36860 <move_thread_to_end_of_prio_q+0x94>)
   367f8:	481a      	ldr	r0, [pc, #104]	; (36864 <move_thread_to_end_of_prio_q+0x98>)
   367fa:	22ba      	movs	r2, #186	; 0xba
   367fc:	f002 f989 	bl	38b12 <assert_print>
   36800:	4817      	ldr	r0, [pc, #92]	; (36860 <move_thread_to_end_of_prio_q+0x94>)
   36802:	21ba      	movs	r1, #186	; 0xba
   36804:	f002 f97e 	bl	38b04 <assert_post_action>
	return list->head == list;
   36808:	4a17      	ldr	r2, [pc, #92]	; (36868 <move_thread_to_end_of_prio_q+0x9c>)
   3680a:	4611      	mov	r1, r2
	return (node == list->tail) ? NULL : node->next;
   3680c:	6a50      	ldr	r0, [r2, #36]	; 0x24
	return list->head == list;
   3680e:	f851 3f20 	ldr.w	r3, [r1, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   36812:	428b      	cmp	r3, r1
   36814:	bf08      	it	eq
   36816:	2300      	moveq	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   36818:	b923      	cbnz	r3, 36824 <move_thread_to_end_of_prio_q+0x58>
	node->prev = tail;
   3681a:	e9c4 1000 	strd	r1, r0, [r4]
	tail->next = node;
   3681e:	6004      	str	r4, [r0, #0]
	list->tail = node;
   36820:	6254      	str	r4, [r2, #36]	; 0x24
}
   36822:	e00c      	b.n	3683e <move_thread_to_end_of_prio_q+0x72>
	int32_t b1 = thread_1->base.prio;
   36824:	f994 500e 	ldrsb.w	r5, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   36828:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
   3682c:	42b5      	cmp	r5, r6
   3682e:	d00e      	beq.n	3684e <move_thread_to_end_of_prio_q+0x82>
		if (z_sched_prio_cmp(thread, t) > 0) {
   36830:	42ae      	cmp	r6, r5
   36832:	dd0c      	ble.n	3684e <move_thread_to_end_of_prio_q+0x82>
	sys_dnode_t *const prev = successor->prev;
   36834:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   36836:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
   3683a:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   3683c:	605c      	str	r4, [r3, #4]
	update_cache(thread == _current);
   3683e:	6890      	ldr	r0, [r2, #8]
   36840:	1b03      	subs	r3, r0, r4
   36842:	4258      	negs	r0, r3
}
   36844:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   36848:	4158      	adcs	r0, r3
   3684a:	f7ff bd5f 	b.w	3630c <update_cache>
	return (node == list->tail) ? NULL : node->next;
   3684e:	4298      	cmp	r0, r3
   36850:	d0e3      	beq.n	3681a <move_thread_to_end_of_prio_q+0x4e>
   36852:	681b      	ldr	r3, [r3, #0]
   36854:	e7e0      	b.n	36818 <move_thread_to_end_of_prio_q+0x4c>
   36856:	bf00      	nop
   36858:	200033a4 	.word	0x200033a4
   3685c:	20002bd0 	.word	0x20002bd0
   36860:	0003fd7c 	.word	0x0003fd7c
   36864:	0003d1d7 	.word	0x0003d1d7
   36868:	20003384 	.word	0x20003384

0003686c <z_time_slice>:
{
   3686c:	b570      	push	{r4, r5, r6, lr}
   3686e:	4605      	mov	r5, r0
	__asm__ volatile(
   36870:	f04f 0340 	mov.w	r3, #64	; 0x40
   36874:	f3ef 8611 	mrs	r6, BASEPRI
   36878:	f383 8812 	msr	BASEPRI_MAX, r3
   3687c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   36880:	4824      	ldr	r0, [pc, #144]	; (36914 <z_time_slice+0xa8>)
   36882:	f7fe fce3 	bl	3524c <z_spin_lock_valid>
   36886:	b940      	cbnz	r0, 3689a <z_time_slice+0x2e>
   36888:	4923      	ldr	r1, [pc, #140]	; (36918 <z_time_slice+0xac>)
   3688a:	4824      	ldr	r0, [pc, #144]	; (3691c <z_time_slice+0xb0>)
   3688c:	2294      	movs	r2, #148	; 0x94
   3688e:	f002 f940 	bl	38b12 <assert_print>
   36892:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   36894:	4820      	ldr	r0, [pc, #128]	; (36918 <z_time_slice+0xac>)
   36896:	f002 f935 	bl	38b04 <assert_post_action>
	z_spin_lock_set_owner(l);
   3689a:	481e      	ldr	r0, [pc, #120]	; (36914 <z_time_slice+0xa8>)
   3689c:	f7fe fcf4 	bl	35288 <z_spin_lock_set_owner>
	if (pending_current == _current) {
   368a0:	4b1f      	ldr	r3, [pc, #124]	; (36920 <z_time_slice+0xb4>)
   368a2:	4a20      	ldr	r2, [pc, #128]	; (36924 <z_time_slice+0xb8>)
   368a4:	689c      	ldr	r4, [r3, #8]
   368a6:	6811      	ldr	r1, [r2, #0]
   368a8:	428c      	cmp	r4, r1
   368aa:	d10d      	bne.n	368c8 <z_time_slice+0x5c>
		z_reset_time_slice(_current);
   368ac:	4620      	mov	r0, r4
   368ae:	f7ff fd19 	bl	362e4 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   368b2:	4818      	ldr	r0, [pc, #96]	; (36914 <z_time_slice+0xa8>)
   368b4:	f7fe fcd8 	bl	35268 <z_spin_unlock_valid>
   368b8:	bb30      	cbnz	r0, 36908 <z_time_slice+0x9c>
   368ba:	4917      	ldr	r1, [pc, #92]	; (36918 <z_time_slice+0xac>)
   368bc:	4817      	ldr	r0, [pc, #92]	; (3691c <z_time_slice+0xb0>)
   368be:	22c2      	movs	r2, #194	; 0xc2
   368c0:	f002 f927 	bl	38b12 <assert_print>
   368c4:	21c2      	movs	r1, #194	; 0xc2
   368c6:	e7e5      	b.n	36894 <z_time_slice+0x28>
	pending_current = NULL;
   368c8:	2100      	movs	r1, #0
   368ca:	6011      	str	r1, [r2, #0]
	int ret = slice_ticks;
   368cc:	4a16      	ldr	r2, [pc, #88]	; (36928 <z_time_slice+0xbc>)
	if (slice_time(_current) && sliceable(_current)) {
   368ce:	6812      	ldr	r2, [r2, #0]
   368d0:	b1c2      	cbz	r2, 36904 <z_time_slice+0x98>
		&& !z_is_idle_thread_object(thread);
   368d2:	89e2      	ldrh	r2, [r4, #14]
   368d4:	2a7f      	cmp	r2, #127	; 0x7f
   368d6:	d815      	bhi.n	36904 <z_time_slice+0x98>
		&& !z_is_thread_prevented_from_running(thread)
   368d8:	7b62      	ldrb	r2, [r4, #13]
   368da:	06d2      	lsls	r2, r2, #27
   368dc:	d112      	bne.n	36904 <z_time_slice+0x98>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   368de:	4a13      	ldr	r2, [pc, #76]	; (3692c <z_time_slice+0xc0>)
   368e0:	f994 100e 	ldrsb.w	r1, [r4, #14]
   368e4:	6812      	ldr	r2, [r2, #0]
   368e6:	4291      	cmp	r1, r2
   368e8:	db0c      	blt.n	36904 <z_time_slice+0x98>
		&& !z_is_idle_thread_object(thread);
   368ea:	4a11      	ldr	r2, [pc, #68]	; (36930 <z_time_slice+0xc4>)
   368ec:	4294      	cmp	r4, r2
   368ee:	d009      	beq.n	36904 <z_time_slice+0x98>
		if (ticks >= _current_cpu->slice_ticks) {
   368f0:	691a      	ldr	r2, [r3, #16]
   368f2:	42aa      	cmp	r2, r5
   368f4:	dc03      	bgt.n	368fe <z_time_slice+0x92>
		move_thread_to_end_of_prio_q(curr);
   368f6:	4620      	mov	r0, r4
   368f8:	f7ff ff68 	bl	367cc <move_thread_to_end_of_prio_q>
	z_reset_time_slice(curr);
   368fc:	e7d6      	b.n	368ac <z_time_slice+0x40>
			_current_cpu->slice_ticks -= ticks;
   368fe:	1b52      	subs	r2, r2, r5
		_current_cpu->slice_ticks = 0;
   36900:	611a      	str	r2, [r3, #16]
   36902:	e7d6      	b.n	368b2 <z_time_slice+0x46>
   36904:	2200      	movs	r2, #0
   36906:	e7fb      	b.n	36900 <z_time_slice+0x94>
	__asm__ volatile(
   36908:	f386 8811 	msr	BASEPRI, r6
   3690c:	f3bf 8f6f 	isb	sy
}
   36910:	bd70      	pop	{r4, r5, r6, pc}
   36912:	bf00      	nop
   36914:	200033cc 	.word	0x200033cc
   36918:	0003d39d 	.word	0x0003d39d
   3691c:	0003d1d7 	.word	0x0003d1d7
   36920:	20003384 	.word	0x20003384
   36924:	200033c0 	.word	0x200033c0
   36928:	200033c8 	.word	0x200033c8
   3692c:	200033c4 	.word	0x200033c4
   36930:	20002bd0 	.word	0x20002bd0

00036934 <unready_thread>:
{
   36934:	b510      	push	{r4, lr}
	if (z_is_thread_queued(thread)) {
   36936:	f990 200d 	ldrsb.w	r2, [r0, #13]
   3693a:	7b43      	ldrb	r3, [r0, #13]
   3693c:	2a00      	cmp	r2, #0
{
   3693e:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   36940:	da06      	bge.n	36950 <unready_thread+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   36942:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   36946:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   36948:	4601      	mov	r1, r0
   3694a:	4806      	ldr	r0, [pc, #24]	; (36964 <unready_thread+0x30>)
   3694c:	f7ff ff20 	bl	36790 <z_priq_dumb_remove>
	update_cache(thread == _current);
   36950:	4b05      	ldr	r3, [pc, #20]	; (36968 <unready_thread+0x34>)
   36952:	6898      	ldr	r0, [r3, #8]
   36954:	1b03      	subs	r3, r0, r4
   36956:	4258      	negs	r0, r3
}
   36958:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	update_cache(thread == _current);
   3695c:	4158      	adcs	r0, r3
   3695e:	f7ff bcd5 	b.w	3630c <update_cache>
   36962:	bf00      	nop
   36964:	200033a4 	.word	0x200033a4
   36968:	20003384 	.word	0x20003384

0003696c <add_to_waitq_locked>:
{
   3696c:	b538      	push	{r3, r4, r5, lr}
   3696e:	4604      	mov	r4, r0
   36970:	460d      	mov	r5, r1
	unready_thread(thread);
   36972:	f7ff ffdf 	bl	36934 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   36976:	7b63      	ldrb	r3, [r4, #13]
   36978:	f043 0302 	orr.w	r3, r3, #2
   3697c:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   3697e:	b345      	cbz	r5, 369d2 <add_to_waitq_locked+0x66>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   36980:	4b14      	ldr	r3, [pc, #80]	; (369d4 <add_to_waitq_locked+0x68>)
		thread->base.pended_on = wait_q;
   36982:	60a5      	str	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   36984:	429c      	cmp	r4, r3
   36986:	d108      	bne.n	3699a <add_to_waitq_locked+0x2e>
   36988:	4913      	ldr	r1, [pc, #76]	; (369d8 <add_to_waitq_locked+0x6c>)
   3698a:	4814      	ldr	r0, [pc, #80]	; (369dc <add_to_waitq_locked+0x70>)
   3698c:	22ba      	movs	r2, #186	; 0xba
   3698e:	f002 f8c0 	bl	38b12 <assert_print>
   36992:	4811      	ldr	r0, [pc, #68]	; (369d8 <add_to_waitq_locked+0x6c>)
   36994:	21ba      	movs	r1, #186	; 0xba
   36996:	f002 f8b5 	bl	38b04 <assert_post_action>
	return list->head == list;
   3699a:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   3699c:	429d      	cmp	r5, r3
   3699e:	d109      	bne.n	369b4 <add_to_waitq_locked+0x48>
	sys_dnode_t *const tail = list->tail;
   369a0:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   369a2:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   369a6:	601c      	str	r4, [r3, #0]
	list->tail = node;
   369a8:	606c      	str	r4, [r5, #4]
}
   369aa:	e012      	b.n	369d2 <add_to_waitq_locked+0x66>
	return (node == list->tail) ? NULL : node->next;
   369ac:	686a      	ldr	r2, [r5, #4]
   369ae:	4293      	cmp	r3, r2
   369b0:	d0f6      	beq.n	369a0 <add_to_waitq_locked+0x34>
   369b2:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   369b4:	2b00      	cmp	r3, #0
   369b6:	d0f3      	beq.n	369a0 <add_to_waitq_locked+0x34>
	int32_t b1 = thread_1->base.prio;
   369b8:	f994 200e 	ldrsb.w	r2, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   369bc:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
   369c0:	428a      	cmp	r2, r1
   369c2:	d0f3      	beq.n	369ac <add_to_waitq_locked+0x40>
		if (z_sched_prio_cmp(thread, t) > 0) {
   369c4:	4291      	cmp	r1, r2
   369c6:	ddf1      	ble.n	369ac <add_to_waitq_locked+0x40>
	sys_dnode_t *const prev = successor->prev;
   369c8:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   369ca:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   369ce:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   369d0:	605c      	str	r4, [r3, #4]
}
   369d2:	bd38      	pop	{r3, r4, r5, pc}
   369d4:	20002bd0 	.word	0x20002bd0
   369d8:	0003fd7c 	.word	0x0003fd7c
   369dc:	0003d1d7 	.word	0x0003d1d7

000369e0 <pend_locked>:
{
   369e0:	b570      	push	{r4, r5, r6, lr}
   369e2:	4615      	mov	r5, r2
   369e4:	461c      	mov	r4, r3
   369e6:	4606      	mov	r6, r0
	add_to_waitq_locked(thread, wait_q);
   369e8:	f7ff ffc0 	bl	3696c <add_to_waitq_locked>
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   369ec:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   369f0:	bf08      	it	eq
   369f2:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
   369f6:	d008      	beq.n	36a0a <pend_locked+0x2a>
   369f8:	462a      	mov	r2, r5
   369fa:	4623      	mov	r3, r4
   369fc:	f106 0018 	add.w	r0, r6, #24
   36a00:	4902      	ldr	r1, [pc, #8]	; (36a0c <pend_locked+0x2c>)
}
   36a02:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   36a06:	f000 bce7 	b.w	373d8 <z_add_timeout>
   36a0a:	bd70      	pop	{r4, r5, r6, pc}
   36a0c:	00036d15 	.word	0x00036d15

00036a10 <z_pend_curr>:
{
   36a10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	pending_current = _current;
   36a14:	f8df a094 	ldr.w	sl, [pc, #148]	; 36aac <z_pend_curr+0x9c>
	__ASSERT_NO_MSG(sizeof(sched_spinlock) == 0 || lock != &sched_spinlock);
   36a18:	4c25      	ldr	r4, [pc, #148]	; (36ab0 <z_pend_curr+0xa0>)
	pending_current = _current;
   36a1a:	4b26      	ldr	r3, [pc, #152]	; (36ab4 <z_pend_curr+0xa4>)
{
   36a1c:	4617      	mov	r7, r2
	__ASSERT_NO_MSG(sizeof(sched_spinlock) == 0 || lock != &sched_spinlock);
   36a1e:	42a0      	cmp	r0, r4
	pending_current = _current;
   36a20:	f8da 2008 	ldr.w	r2, [sl, #8]
   36a24:	601a      	str	r2, [r3, #0]
{
   36a26:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   36a2a:	4605      	mov	r5, r0
   36a2c:	460e      	mov	r6, r1
	__ASSERT_NO_MSG(sizeof(sched_spinlock) == 0 || lock != &sched_spinlock);
   36a2e:	d10a      	bne.n	36a46 <z_pend_curr+0x36>
   36a30:	4921      	ldr	r1, [pc, #132]	; (36ab8 <z_pend_curr+0xa8>)
   36a32:	4822      	ldr	r0, [pc, #136]	; (36abc <z_pend_curr+0xac>)
   36a34:	f240 324e 	movw	r2, #846	; 0x34e
   36a38:	f002 f86b 	bl	38b12 <assert_print>
   36a3c:	481e      	ldr	r0, [pc, #120]	; (36ab8 <z_pend_curr+0xa8>)
   36a3e:	f240 314e 	movw	r1, #846	; 0x34e
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   36a42:	f002 f85f 	bl	38b04 <assert_post_action>
	__asm__ volatile(
   36a46:	f04f 0240 	mov.w	r2, #64	; 0x40
   36a4a:	f3ef 8311 	mrs	r3, BASEPRI
   36a4e:	f382 8812 	msr	BASEPRI_MAX, r2
   36a52:	f3bf 8f6f 	isb	sy
   36a56:	4620      	mov	r0, r4
   36a58:	f7fe fbf8 	bl	3524c <z_spin_lock_valid>
   36a5c:	b938      	cbnz	r0, 36a6e <z_pend_curr+0x5e>
   36a5e:	4918      	ldr	r1, [pc, #96]	; (36ac0 <z_pend_curr+0xb0>)
   36a60:	4816      	ldr	r0, [pc, #88]	; (36abc <z_pend_curr+0xac>)
   36a62:	2294      	movs	r2, #148	; 0x94
   36a64:	f002 f855 	bl	38b12 <assert_print>
   36a68:	2194      	movs	r1, #148	; 0x94
   36a6a:	4815      	ldr	r0, [pc, #84]	; (36ac0 <z_pend_curr+0xb0>)
   36a6c:	e7e9      	b.n	36a42 <z_pend_curr+0x32>
	z_spin_lock_set_owner(l);
   36a6e:	4620      	mov	r0, r4
   36a70:	f7fe fc0a 	bl	35288 <z_spin_lock_set_owner>
	pend_locked(_current, wait_q, timeout);
   36a74:	f8da 0008 	ldr.w	r0, [sl, #8]
   36a78:	4642      	mov	r2, r8
   36a7a:	464b      	mov	r3, r9
   36a7c:	4639      	mov	r1, r7
   36a7e:	f7ff ffaf 	bl	369e0 <pend_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   36a82:	4628      	mov	r0, r5
   36a84:	f7fe fbf0 	bl	35268 <z_spin_unlock_valid>
   36a88:	b930      	cbnz	r0, 36a98 <z_pend_curr+0x88>
   36a8a:	490d      	ldr	r1, [pc, #52]	; (36ac0 <z_pend_curr+0xb0>)
   36a8c:	480b      	ldr	r0, [pc, #44]	; (36abc <z_pend_curr+0xac>)
   36a8e:	22e1      	movs	r2, #225	; 0xe1
   36a90:	f002 f83f 	bl	38b12 <assert_print>
   36a94:	21e1      	movs	r1, #225	; 0xe1
   36a96:	e7e8      	b.n	36a6a <z_pend_curr+0x5a>
   36a98:	4620      	mov	r0, r4
   36a9a:	f7fe fbe5 	bl	35268 <z_spin_unlock_valid>
   36a9e:	2800      	cmp	r0, #0
   36aa0:	d0f3      	beq.n	36a8a <z_pend_curr+0x7a>
   36aa2:	4630      	mov	r0, r6
}
   36aa4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   36aa8:	f7f0 ba7a 	b.w	26fa0 <arch_swap>
   36aac:	20003384 	.word	0x20003384
   36ab0:	200033cc 	.word	0x200033cc
   36ab4:	200033c0 	.word	0x200033c0
   36ab8:	0003fd7c 	.word	0x0003fd7c
   36abc:	0003d1d7 	.word	0x0003d1d7
   36ac0:	0003d39d 	.word	0x0003d39d

00036ac4 <z_set_prio>:
{
   36ac4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   36ac8:	4604      	mov	r4, r0
   36aca:	460e      	mov	r6, r1
   36acc:	f04f 0340 	mov.w	r3, #64	; 0x40
   36ad0:	f3ef 8911 	mrs	r9, BASEPRI
   36ad4:	f383 8812 	msr	BASEPRI_MAX, r3
   36ad8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   36adc:	4831      	ldr	r0, [pc, #196]	; (36ba4 <z_set_prio+0xe0>)
   36ade:	f7fe fbb5 	bl	3524c <z_spin_lock_valid>
   36ae2:	4607      	mov	r7, r0
   36ae4:	b938      	cbnz	r0, 36af6 <z_set_prio+0x32>
   36ae6:	4930      	ldr	r1, [pc, #192]	; (36ba8 <z_set_prio+0xe4>)
   36ae8:	4830      	ldr	r0, [pc, #192]	; (36bac <z_set_prio+0xe8>)
   36aea:	2294      	movs	r2, #148	; 0x94
   36aec:	f002 f811 	bl	38b12 <assert_print>
   36af0:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   36af2:	482d      	ldr	r0, [pc, #180]	; (36ba8 <z_set_prio+0xe4>)
   36af4:	e020      	b.n	36b38 <z_set_prio+0x74>
	z_spin_lock_set_owner(l);
   36af6:	482b      	ldr	r0, [pc, #172]	; (36ba4 <z_set_prio+0xe0>)
   36af8:	f7fe fbc6 	bl	35288 <z_spin_lock_set_owner>
	uint8_t state = thread->base.thread_state;
   36afc:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   36afe:	06da      	lsls	r2, r3, #27
				thread->base.prio = prio;
   36b00:	b276      	sxtb	r6, r6
   36b02:	d11b      	bne.n	36b3c <z_set_prio+0x78>
	return node->next != NULL;
   36b04:	69a5      	ldr	r5, [r4, #24]
   36b06:	b9cd      	cbnz	r5, 36b3c <z_set_prio+0x78>
	_priq_run_remove(thread_runq(thread), thread);
   36b08:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 36bb0 <z_set_prio+0xec>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   36b0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   36b10:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   36b12:	4621      	mov	r1, r4
   36b14:	4640      	mov	r0, r8
   36b16:	f7ff fe3b 	bl	36790 <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   36b1a:	7b63      	ldrb	r3, [r4, #13]
				thread->base.prio = prio;
   36b1c:	73a6      	strb	r6, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   36b1e:	f063 037f 	orn	r3, r3, #127	; 0x7f
   36b22:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   36b24:	4b23      	ldr	r3, [pc, #140]	; (36bb4 <z_set_prio+0xf0>)
   36b26:	429c      	cmp	r4, r3
   36b28:	d115      	bne.n	36b56 <z_set_prio+0x92>
   36b2a:	4923      	ldr	r1, [pc, #140]	; (36bb8 <z_set_prio+0xf4>)
   36b2c:	481f      	ldr	r0, [pc, #124]	; (36bac <z_set_prio+0xe8>)
   36b2e:	22ba      	movs	r2, #186	; 0xba
   36b30:	f001 ffef 	bl	38b12 <assert_print>
   36b34:	4820      	ldr	r0, [pc, #128]	; (36bb8 <z_set_prio+0xf4>)
   36b36:	21ba      	movs	r1, #186	; 0xba
   36b38:	f001 ffe4 	bl	38b04 <assert_post_action>
			thread->base.prio = prio;
   36b3c:	73a6      	strb	r6, [r4, #14]
   36b3e:	2700      	movs	r7, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   36b40:	4818      	ldr	r0, [pc, #96]	; (36ba4 <z_set_prio+0xe0>)
   36b42:	f7fe fb91 	bl	35268 <z_spin_unlock_valid>
   36b46:	bb30      	cbnz	r0, 36b96 <z_set_prio+0xd2>
   36b48:	4917      	ldr	r1, [pc, #92]	; (36ba8 <z_set_prio+0xe4>)
   36b4a:	4818      	ldr	r0, [pc, #96]	; (36bac <z_set_prio+0xe8>)
   36b4c:	22c2      	movs	r2, #194	; 0xc2
   36b4e:	f001 ffe0 	bl	38b12 <assert_print>
   36b52:	21c2      	movs	r1, #194	; 0xc2
   36b54:	e7cd      	b.n	36af2 <z_set_prio+0x2e>
	return list->head == list;
   36b56:	4643      	mov	r3, r8
   36b58:	f853 2920 	ldr.w	r2, [r3], #-32
	return sys_dlist_is_empty(list) ? NULL : list->head;
   36b5c:	4542      	cmp	r2, r8
   36b5e:	bf18      	it	ne
   36b60:	4615      	movne	r5, r2
	return (node == list->tail) ? NULL : node->next;
   36b62:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   36b64:	b925      	cbnz	r5, 36b70 <z_set_prio+0xac>
	node->prev = tail;
   36b66:	e9c4 8200 	strd	r8, r2, [r4]
	tail->next = node;
   36b6a:	6014      	str	r4, [r2, #0]
	list->tail = node;
   36b6c:	625c      	str	r4, [r3, #36]	; 0x24
}
   36b6e:	e00a      	b.n	36b86 <z_set_prio+0xc2>
	int32_t b2 = thread_2->base.prio;
   36b70:	f995 100e 	ldrsb.w	r1, [r5, #14]
	if (b1 != b2) {
   36b74:	428e      	cmp	r6, r1
   36b76:	d00a      	beq.n	36b8e <z_set_prio+0xca>
		if (z_sched_prio_cmp(thread, t) > 0) {
   36b78:	42b1      	cmp	r1, r6
   36b7a:	dd08      	ble.n	36b8e <z_set_prio+0xca>
	sys_dnode_t *const prev = successor->prev;
   36b7c:	686b      	ldr	r3, [r5, #4]
	node->next = successor;
   36b7e:	e9c4 5300 	strd	r5, r3, [r4]
	prev->next = node;
   36b82:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   36b84:	606c      	str	r4, [r5, #4]
			update_cache(1);
   36b86:	2001      	movs	r0, #1
   36b88:	f7ff fbc0 	bl	3630c <update_cache>
   36b8c:	e7d8      	b.n	36b40 <z_set_prio+0x7c>
	return (node == list->tail) ? NULL : node->next;
   36b8e:	42aa      	cmp	r2, r5
   36b90:	d0e9      	beq.n	36b66 <z_set_prio+0xa2>
   36b92:	682d      	ldr	r5, [r5, #0]
   36b94:	e7e6      	b.n	36b64 <z_set_prio+0xa0>
	__asm__ volatile(
   36b96:	f389 8811 	msr	BASEPRI, r9
   36b9a:	f3bf 8f6f 	isb	sy
}
   36b9e:	4638      	mov	r0, r7
   36ba0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   36ba4:	200033cc 	.word	0x200033cc
   36ba8:	0003d39d 	.word	0x0003d39d
   36bac:	0003d1d7 	.word	0x0003d1d7
   36bb0:	200033a4 	.word	0x200033a4
   36bb4:	20002bd0 	.word	0x20002bd0
   36bb8:	0003fd7c 	.word	0x0003fd7c

00036bbc <z_impl_k_thread_suspend>:
{
   36bbc:	b570      	push	{r4, r5, r6, lr}
   36bbe:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   36bc0:	3018      	adds	r0, #24
   36bc2:	f000 fcb5 	bl	37530 <z_abort_timeout>
	__asm__ volatile(
   36bc6:	f04f 0340 	mov.w	r3, #64	; 0x40
   36bca:	f3ef 8611 	mrs	r6, BASEPRI
   36bce:	f383 8812 	msr	BASEPRI_MAX, r3
   36bd2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   36bd6:	481f      	ldr	r0, [pc, #124]	; (36c54 <z_impl_k_thread_suspend+0x98>)
   36bd8:	f7fe fb38 	bl	3524c <z_spin_lock_valid>
   36bdc:	b940      	cbnz	r0, 36bf0 <z_impl_k_thread_suspend+0x34>
   36bde:	491e      	ldr	r1, [pc, #120]	; (36c58 <z_impl_k_thread_suspend+0x9c>)
   36be0:	481e      	ldr	r0, [pc, #120]	; (36c5c <z_impl_k_thread_suspend+0xa0>)
   36be2:	2294      	movs	r2, #148	; 0x94
   36be4:	f001 ff95 	bl	38b12 <assert_print>
   36be8:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   36bea:	481b      	ldr	r0, [pc, #108]	; (36c58 <z_impl_k_thread_suspend+0x9c>)
   36bec:	f001 ff8a 	bl	38b04 <assert_post_action>
	z_spin_lock_set_owner(l);
   36bf0:	4818      	ldr	r0, [pc, #96]	; (36c54 <z_impl_k_thread_suspend+0x98>)
   36bf2:	f7fe fb49 	bl	35288 <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
   36bf6:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
   36bfa:	7b63      	ldrb	r3, [r4, #13]
   36bfc:	2a00      	cmp	r2, #0
   36bfe:	da06      	bge.n	36c0e <z_impl_k_thread_suspend+0x52>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   36c00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	_priq_run_remove(thread_runq(thread), thread);
   36c04:	4816      	ldr	r0, [pc, #88]	; (36c60 <z_impl_k_thread_suspend+0xa4>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
   36c06:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   36c08:	4621      	mov	r1, r4
   36c0a:	f7ff fdc1 	bl	36790 <z_priq_dumb_remove>
		update_cache(thread == _current);
   36c0e:	4d15      	ldr	r5, [pc, #84]	; (36c64 <z_impl_k_thread_suspend+0xa8>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   36c10:	7b63      	ldrb	r3, [r4, #13]
   36c12:	68a8      	ldr	r0, [r5, #8]
   36c14:	f043 0310 	orr.w	r3, r3, #16
   36c18:	7363      	strb	r3, [r4, #13]
   36c1a:	1b03      	subs	r3, r0, r4
   36c1c:	4258      	negs	r0, r3
   36c1e:	4158      	adcs	r0, r3
   36c20:	f7ff fb74 	bl	3630c <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   36c24:	480b      	ldr	r0, [pc, #44]	; (36c54 <z_impl_k_thread_suspend+0x98>)
   36c26:	f7fe fb1f 	bl	35268 <z_spin_unlock_valid>
   36c2a:	b930      	cbnz	r0, 36c3a <z_impl_k_thread_suspend+0x7e>
   36c2c:	490a      	ldr	r1, [pc, #40]	; (36c58 <z_impl_k_thread_suspend+0x9c>)
   36c2e:	480b      	ldr	r0, [pc, #44]	; (36c5c <z_impl_k_thread_suspend+0xa0>)
   36c30:	22c2      	movs	r2, #194	; 0xc2
   36c32:	f001 ff6e 	bl	38b12 <assert_print>
   36c36:	21c2      	movs	r1, #194	; 0xc2
   36c38:	e7d7      	b.n	36bea <z_impl_k_thread_suspend+0x2e>
	__asm__ volatile(
   36c3a:	f386 8811 	msr	BASEPRI, r6
   36c3e:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   36c42:	68ab      	ldr	r3, [r5, #8]
   36c44:	42a3      	cmp	r3, r4
   36c46:	d103      	bne.n	36c50 <z_impl_k_thread_suspend+0x94>
}
   36c48:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   36c4c:	f005 b8a8 	b.w	3bda0 <z_reschedule_unlocked>
}
   36c50:	bd70      	pop	{r4, r5, r6, pc}
   36c52:	bf00      	nop
   36c54:	200033cc 	.word	0x200033cc
   36c58:	0003d39d 	.word	0x0003d39d
   36c5c:	0003d1d7 	.word	0x0003d1d7
   36c60:	200033a4 	.word	0x200033a4
   36c64:	20003384 	.word	0x20003384

00036c68 <unpend_thread_no_timeout>:
{
   36c68:	b510      	push	{r4, lr}
   36c6a:	4604      	mov	r4, r0
   36c6c:	6880      	ldr	r0, [r0, #8]
	__ASSERT_NO_MSG(thread->base.pended_on);
   36c6e:	b950      	cbnz	r0, 36c86 <unpend_thread_no_timeout+0x1e>
   36c70:	490a      	ldr	r1, [pc, #40]	; (36c9c <unpend_thread_no_timeout+0x34>)
   36c72:	480b      	ldr	r0, [pc, #44]	; (36ca0 <unpend_thread_no_timeout+0x38>)
   36c74:	f240 22d6 	movw	r2, #726	; 0x2d6
   36c78:	f001 ff4b 	bl	38b12 <assert_print>
   36c7c:	4807      	ldr	r0, [pc, #28]	; (36c9c <unpend_thread_no_timeout+0x34>)
   36c7e:	f240 21d6 	movw	r1, #726	; 0x2d6
   36c82:	f001 ff3f 	bl	38b04 <assert_post_action>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   36c86:	4621      	mov	r1, r4
   36c88:	f7ff fd82 	bl	36790 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   36c8c:	7b63      	ldrb	r3, [r4, #13]
   36c8e:	f023 0302 	bic.w	r3, r3, #2
   36c92:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   36c94:	2300      	movs	r3, #0
   36c96:	60a3      	str	r3, [r4, #8]
}
   36c98:	bd10      	pop	{r4, pc}
   36c9a:	bf00      	nop
   36c9c:	0003fd7c 	.word	0x0003fd7c
   36ca0:	0003d1d7 	.word	0x0003d1d7

00036ca4 <z_unpend_thread>:
{
   36ca4:	b538      	push	{r3, r4, r5, lr}
   36ca6:	4604      	mov	r4, r0
	__asm__ volatile(
   36ca8:	f04f 0340 	mov.w	r3, #64	; 0x40
   36cac:	f3ef 8511 	mrs	r5, BASEPRI
   36cb0:	f383 8812 	msr	BASEPRI_MAX, r3
   36cb4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   36cb8:	4813      	ldr	r0, [pc, #76]	; (36d08 <z_unpend_thread+0x64>)
   36cba:	f7fe fac7 	bl	3524c <z_spin_lock_valid>
   36cbe:	b940      	cbnz	r0, 36cd2 <z_unpend_thread+0x2e>
   36cc0:	4912      	ldr	r1, [pc, #72]	; (36d0c <z_unpend_thread+0x68>)
   36cc2:	4813      	ldr	r0, [pc, #76]	; (36d10 <z_unpend_thread+0x6c>)
   36cc4:	2294      	movs	r2, #148	; 0x94
   36cc6:	f001 ff24 	bl	38b12 <assert_print>
   36cca:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   36ccc:	480f      	ldr	r0, [pc, #60]	; (36d0c <z_unpend_thread+0x68>)
   36cce:	f001 ff19 	bl	38b04 <assert_post_action>
	z_spin_lock_set_owner(l);
   36cd2:	480d      	ldr	r0, [pc, #52]	; (36d08 <z_unpend_thread+0x64>)
   36cd4:	f7fe fad8 	bl	35288 <z_spin_lock_set_owner>
		unpend_thread_no_timeout(thread);
   36cd8:	4620      	mov	r0, r4
   36cda:	f7ff ffc5 	bl	36c68 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   36cde:	480a      	ldr	r0, [pc, #40]	; (36d08 <z_unpend_thread+0x64>)
   36ce0:	f7fe fac2 	bl	35268 <z_spin_unlock_valid>
   36ce4:	b930      	cbnz	r0, 36cf4 <z_unpend_thread+0x50>
   36ce6:	4909      	ldr	r1, [pc, #36]	; (36d0c <z_unpend_thread+0x68>)
   36ce8:	4809      	ldr	r0, [pc, #36]	; (36d10 <z_unpend_thread+0x6c>)
   36cea:	22c2      	movs	r2, #194	; 0xc2
   36cec:	f001 ff11 	bl	38b12 <assert_print>
   36cf0:	21c2      	movs	r1, #194	; 0xc2
   36cf2:	e7eb      	b.n	36ccc <z_unpend_thread+0x28>
	__asm__ volatile(
   36cf4:	f385 8811 	msr	BASEPRI, r5
   36cf8:	f3bf 8f6f 	isb	sy
   36cfc:	f104 0018 	add.w	r0, r4, #24
}
   36d00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   36d04:	f000 bc14 	b.w	37530 <z_abort_timeout>
   36d08:	200033cc 	.word	0x200033cc
   36d0c:	0003d39d 	.word	0x0003d39d
   36d10:	0003d1d7 	.word	0x0003d1d7

00036d14 <z_thread_timeout>:
{
   36d14:	b570      	push	{r4, r5, r6, lr}
   36d16:	4604      	mov	r4, r0
	__asm__ volatile(
   36d18:	f04f 0340 	mov.w	r3, #64	; 0x40
   36d1c:	f3ef 8611 	mrs	r6, BASEPRI
   36d20:	f383 8812 	msr	BASEPRI_MAX, r3
   36d24:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   36d28:	481a      	ldr	r0, [pc, #104]	; (36d94 <z_thread_timeout+0x80>)
   36d2a:	f7fe fa8f 	bl	3524c <z_spin_lock_valid>
   36d2e:	b940      	cbnz	r0, 36d42 <z_thread_timeout+0x2e>
   36d30:	4919      	ldr	r1, [pc, #100]	; (36d98 <z_thread_timeout+0x84>)
   36d32:	481a      	ldr	r0, [pc, #104]	; (36d9c <z_thread_timeout+0x88>)
   36d34:	2294      	movs	r2, #148	; 0x94
   36d36:	f001 feec 	bl	38b12 <assert_print>
   36d3a:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   36d3c:	4816      	ldr	r0, [pc, #88]	; (36d98 <z_thread_timeout+0x84>)
   36d3e:	f001 fee1 	bl	38b04 <assert_post_action>
	z_spin_lock_set_owner(l);
   36d42:	4814      	ldr	r0, [pc, #80]	; (36d94 <z_thread_timeout+0x80>)
   36d44:	f7fe faa0 	bl	35288 <z_spin_lock_set_owner>
		if (!killed) {
   36d48:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   36d4c:	f013 0f28 	tst.w	r3, #40	; 0x28
   36d50:	d110      	bne.n	36d74 <z_thread_timeout+0x60>
			if (thread->base.pended_on != NULL) {
   36d52:	f854 3c10 	ldr.w	r3, [r4, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
   36d56:	f1a4 0518 	sub.w	r5, r4, #24
			if (thread->base.pended_on != NULL) {
   36d5a:	b113      	cbz	r3, 36d62 <z_thread_timeout+0x4e>
				unpend_thread_no_timeout(thread);
   36d5c:	4628      	mov	r0, r5
   36d5e:	f7ff ff83 	bl	36c68 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   36d62:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   36d66:	f023 0314 	bic.w	r3, r3, #20
   36d6a:	f804 3c0b 	strb.w	r3, [r4, #-11]
			ready_thread(thread);
   36d6e:	4628      	mov	r0, r5
   36d70:	f7ff faf8 	bl	36364 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   36d74:	4807      	ldr	r0, [pc, #28]	; (36d94 <z_thread_timeout+0x80>)
   36d76:	f7fe fa77 	bl	35268 <z_spin_unlock_valid>
   36d7a:	b930      	cbnz	r0, 36d8a <z_thread_timeout+0x76>
   36d7c:	4906      	ldr	r1, [pc, #24]	; (36d98 <z_thread_timeout+0x84>)
   36d7e:	4807      	ldr	r0, [pc, #28]	; (36d9c <z_thread_timeout+0x88>)
   36d80:	22c2      	movs	r2, #194	; 0xc2
   36d82:	f001 fec6 	bl	38b12 <assert_print>
   36d86:	21c2      	movs	r1, #194	; 0xc2
   36d88:	e7d8      	b.n	36d3c <z_thread_timeout+0x28>
	__asm__ volatile(
   36d8a:	f386 8811 	msr	BASEPRI, r6
   36d8e:	f3bf 8f6f 	isb	sy
}
   36d92:	bd70      	pop	{r4, r5, r6, pc}
   36d94:	200033cc 	.word	0x200033cc
   36d98:	0003d39d 	.word	0x0003d39d
   36d9c:	0003d1d7 	.word	0x0003d1d7

00036da0 <z_unpend1_no_timeout>:
{
   36da0:	b570      	push	{r4, r5, r6, lr}
   36da2:	4605      	mov	r5, r0
	__asm__ volatile(
   36da4:	f04f 0340 	mov.w	r3, #64	; 0x40
   36da8:	f3ef 8611 	mrs	r6, BASEPRI
   36dac:	f383 8812 	msr	BASEPRI_MAX, r3
   36db0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   36db4:	4814      	ldr	r0, [pc, #80]	; (36e08 <z_unpend1_no_timeout+0x68>)
   36db6:	f7fe fa49 	bl	3524c <z_spin_lock_valid>
   36dba:	b940      	cbnz	r0, 36dce <z_unpend1_no_timeout+0x2e>
   36dbc:	4913      	ldr	r1, [pc, #76]	; (36e0c <z_unpend1_no_timeout+0x6c>)
   36dbe:	4814      	ldr	r0, [pc, #80]	; (36e10 <z_unpend1_no_timeout+0x70>)
   36dc0:	2294      	movs	r2, #148	; 0x94
   36dc2:	f001 fea6 	bl	38b12 <assert_print>
   36dc6:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   36dc8:	4810      	ldr	r0, [pc, #64]	; (36e0c <z_unpend1_no_timeout+0x6c>)
   36dca:	f001 fe9b 	bl	38b04 <assert_post_action>
	z_spin_lock_set_owner(l);
   36dce:	480e      	ldr	r0, [pc, #56]	; (36e08 <z_unpend1_no_timeout+0x68>)
   36dd0:	f7fe fa5a 	bl	35288 <z_spin_lock_set_owner>
	return list->head == list;
   36dd4:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   36dd6:	42a5      	cmp	r5, r4
   36dd8:	d00e      	beq.n	36df8 <z_unpend1_no_timeout+0x58>
		if (thread != NULL) {
   36dda:	b114      	cbz	r4, 36de2 <z_unpend1_no_timeout+0x42>
			unpend_thread_no_timeout(thread);
   36ddc:	4620      	mov	r0, r4
   36dde:	f7ff ff43 	bl	36c68 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   36de2:	4809      	ldr	r0, [pc, #36]	; (36e08 <z_unpend1_no_timeout+0x68>)
   36de4:	f7fe fa40 	bl	35268 <z_spin_unlock_valid>
   36de8:	b940      	cbnz	r0, 36dfc <z_unpend1_no_timeout+0x5c>
   36dea:	4908      	ldr	r1, [pc, #32]	; (36e0c <z_unpend1_no_timeout+0x6c>)
   36dec:	4808      	ldr	r0, [pc, #32]	; (36e10 <z_unpend1_no_timeout+0x70>)
   36dee:	22c2      	movs	r2, #194	; 0xc2
   36df0:	f001 fe8f 	bl	38b12 <assert_print>
   36df4:	21c2      	movs	r1, #194	; 0xc2
   36df6:	e7e7      	b.n	36dc8 <z_unpend1_no_timeout+0x28>
   36df8:	2400      	movs	r4, #0
   36dfa:	e7f2      	b.n	36de2 <z_unpend1_no_timeout+0x42>
	__asm__ volatile(
   36dfc:	f386 8811 	msr	BASEPRI, r6
   36e00:	f3bf 8f6f 	isb	sy
}
   36e04:	4620      	mov	r0, r4
   36e06:	bd70      	pop	{r4, r5, r6, pc}
   36e08:	200033cc 	.word	0x200033cc
   36e0c:	0003d39d 	.word	0x0003d39d
   36e10:	0003d1d7 	.word	0x0003d1d7

00036e14 <z_unpend_first_thread>:
{
   36e14:	b570      	push	{r4, r5, r6, lr}
   36e16:	4605      	mov	r5, r0
	__asm__ volatile(
   36e18:	f04f 0340 	mov.w	r3, #64	; 0x40
   36e1c:	f3ef 8611 	mrs	r6, BASEPRI
   36e20:	f383 8812 	msr	BASEPRI_MAX, r3
   36e24:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   36e28:	4816      	ldr	r0, [pc, #88]	; (36e84 <z_unpend_first_thread+0x70>)
   36e2a:	f7fe fa0f 	bl	3524c <z_spin_lock_valid>
   36e2e:	b940      	cbnz	r0, 36e42 <z_unpend_first_thread+0x2e>
   36e30:	4915      	ldr	r1, [pc, #84]	; (36e88 <z_unpend_first_thread+0x74>)
   36e32:	4816      	ldr	r0, [pc, #88]	; (36e8c <z_unpend_first_thread+0x78>)
   36e34:	2294      	movs	r2, #148	; 0x94
   36e36:	f001 fe6c 	bl	38b12 <assert_print>
   36e3a:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   36e3c:	4812      	ldr	r0, [pc, #72]	; (36e88 <z_unpend_first_thread+0x74>)
   36e3e:	f001 fe61 	bl	38b04 <assert_post_action>
	z_spin_lock_set_owner(l);
   36e42:	4810      	ldr	r0, [pc, #64]	; (36e84 <z_unpend_first_thread+0x70>)
   36e44:	f7fe fa20 	bl	35288 <z_spin_lock_set_owner>
	return list->head == list;
   36e48:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   36e4a:	42a5      	cmp	r5, r4
   36e4c:	d012      	beq.n	36e74 <z_unpend_first_thread+0x60>
		if (thread != NULL) {
   36e4e:	b134      	cbz	r4, 36e5e <z_unpend_first_thread+0x4a>
			unpend_thread_no_timeout(thread);
   36e50:	4620      	mov	r0, r4
   36e52:	f7ff ff09 	bl	36c68 <unpend_thread_no_timeout>
   36e56:	f104 0018 	add.w	r0, r4, #24
   36e5a:	f000 fb69 	bl	37530 <z_abort_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   36e5e:	4809      	ldr	r0, [pc, #36]	; (36e84 <z_unpend_first_thread+0x70>)
   36e60:	f7fe fa02 	bl	35268 <z_spin_unlock_valid>
   36e64:	b940      	cbnz	r0, 36e78 <z_unpend_first_thread+0x64>
   36e66:	4908      	ldr	r1, [pc, #32]	; (36e88 <z_unpend_first_thread+0x74>)
   36e68:	4808      	ldr	r0, [pc, #32]	; (36e8c <z_unpend_first_thread+0x78>)
   36e6a:	22c2      	movs	r2, #194	; 0xc2
   36e6c:	f001 fe51 	bl	38b12 <assert_print>
   36e70:	21c2      	movs	r1, #194	; 0xc2
   36e72:	e7e3      	b.n	36e3c <z_unpend_first_thread+0x28>
   36e74:	2400      	movs	r4, #0
   36e76:	e7f2      	b.n	36e5e <z_unpend_first_thread+0x4a>
	__asm__ volatile(
   36e78:	f386 8811 	msr	BASEPRI, r6
   36e7c:	f3bf 8f6f 	isb	sy
}
   36e80:	4620      	mov	r0, r4
   36e82:	bd70      	pop	{r4, r5, r6, pc}
   36e84:	200033cc 	.word	0x200033cc
   36e88:	0003d39d 	.word	0x0003d39d
   36e8c:	0003d1d7 	.word	0x0003d1d7

00036e90 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
   36e90:	4b04      	ldr	r3, [pc, #16]	; (36ea4 <z_sched_init+0x14>)
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   36e92:	2100      	movs	r1, #0
   36e94:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
   36e98:	e9c3 2208 	strd	r2, r2, [r3, #32]
   36e9c:	4608      	mov	r0, r1
   36e9e:	f7ff baa9 	b.w	363f4 <k_sched_time_slice_set>
   36ea2:	bf00      	nop
   36ea4:	20003384 	.word	0x20003384

00036ea8 <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
   36ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   36eaa:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   36eae:	b14b      	cbz	r3, 36ec4 <z_impl_k_yield+0x1c>
   36eb0:	4935      	ldr	r1, [pc, #212]	; (36f88 <z_impl_k_yield+0xe0>)
   36eb2:	4836      	ldr	r0, [pc, #216]	; (36f8c <z_impl_k_yield+0xe4>)
   36eb4:	f44f 62ae 	mov.w	r2, #1392	; 0x570
   36eb8:	f001 fe2b 	bl	38b12 <assert_print>
   36ebc:	f44f 61ae 	mov.w	r1, #1392	; 0x570
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   36ec0:	4831      	ldr	r0, [pc, #196]	; (36f88 <z_impl_k_yield+0xe0>)
   36ec2:	e012      	b.n	36eea <z_impl_k_yield+0x42>
	__asm__ volatile(
   36ec4:	f04f 0340 	mov.w	r3, #64	; 0x40
   36ec8:	f3ef 8611 	mrs	r6, BASEPRI
   36ecc:	f383 8812 	msr	BASEPRI_MAX, r3
   36ed0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   36ed4:	482e      	ldr	r0, [pc, #184]	; (36f90 <z_impl_k_yield+0xe8>)
   36ed6:	f7fe f9b9 	bl	3524c <z_spin_lock_valid>
   36eda:	b940      	cbnz	r0, 36eee <z_impl_k_yield+0x46>
   36edc:	492d      	ldr	r1, [pc, #180]	; (36f94 <z_impl_k_yield+0xec>)
   36ede:	482b      	ldr	r0, [pc, #172]	; (36f8c <z_impl_k_yield+0xe4>)
   36ee0:	2294      	movs	r2, #148	; 0x94
   36ee2:	f001 fe16 	bl	38b12 <assert_print>
   36ee6:	2194      	movs	r1, #148	; 0x94
   36ee8:	482a      	ldr	r0, [pc, #168]	; (36f94 <z_impl_k_yield+0xec>)
   36eea:	f001 fe0b 	bl	38b04 <assert_post_action>

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
   36eee:	4c2a      	ldr	r4, [pc, #168]	; (36f98 <z_impl_k_yield+0xf0>)
	z_spin_lock_set_owner(l);
   36ef0:	4827      	ldr	r0, [pc, #156]	; (36f90 <z_impl_k_yield+0xe8>)
   36ef2:	f7fe f9c9 	bl	35288 <z_spin_lock_set_owner>
   36ef6:	68a1      	ldr	r1, [r4, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   36ef8:	7b4b      	ldrb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
   36efa:	f104 0520 	add.w	r5, r4, #32
	thread->base.thread_state &= ~_THREAD_QUEUED;
   36efe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   36f02:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
   36f04:	4628      	mov	r0, r5
   36f06:	f7ff fc43 	bl	36790 <z_priq_dumb_remove>
	}
	queue_thread(_current);
   36f0a:	68a3      	ldr	r3, [r4, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   36f0c:	7b5a      	ldrb	r2, [r3, #13]
   36f0e:	f062 027f 	orn	r2, r2, #127	; 0x7f
   36f12:	735a      	strb	r2, [r3, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   36f14:	4a21      	ldr	r2, [pc, #132]	; (36f9c <z_impl_k_yield+0xf4>)
   36f16:	4293      	cmp	r3, r2
   36f18:	d106      	bne.n	36f28 <z_impl_k_yield+0x80>
   36f1a:	491b      	ldr	r1, [pc, #108]	; (36f88 <z_impl_k_yield+0xe0>)
   36f1c:	481b      	ldr	r0, [pc, #108]	; (36f8c <z_impl_k_yield+0xe4>)
   36f1e:	22ba      	movs	r2, #186	; 0xba
   36f20:	f001 fdf7 	bl	38b12 <assert_print>
   36f24:	21ba      	movs	r1, #186	; 0xba
   36f26:	e7cb      	b.n	36ec0 <z_impl_k_yield+0x18>
	return list->head == list;
   36f28:	6a22      	ldr	r2, [r4, #32]
	return (node == list->tail) ? NULL : node->next;
   36f2a:	6a61      	ldr	r1, [r4, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
   36f2c:	42aa      	cmp	r2, r5
   36f2e:	bf08      	it	eq
   36f30:	2200      	moveq	r2, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   36f32:	b922      	cbnz	r2, 36f3e <z_impl_k_yield+0x96>
	node->prev = tail;
   36f34:	e9c3 5100 	strd	r5, r1, [r3]
	tail->next = node;
   36f38:	600b      	str	r3, [r1, #0]
	list->tail = node;
   36f3a:	6263      	str	r3, [r4, #36]	; 0x24
}
   36f3c:	e00c      	b.n	36f58 <z_impl_k_yield+0xb0>
	int32_t b1 = thread_1->base.prio;
   36f3e:	f993 000e 	ldrsb.w	r0, [r3, #14]
	int32_t b2 = thread_2->base.prio;
   36f42:	f992 700e 	ldrsb.w	r7, [r2, #14]
	if (b1 != b2) {
   36f46:	42b8      	cmp	r0, r7
   36f48:	d014      	beq.n	36f74 <z_impl_k_yield+0xcc>
		if (z_sched_prio_cmp(thread, t) > 0) {
   36f4a:	4287      	cmp	r7, r0
   36f4c:	dd12      	ble.n	36f74 <z_impl_k_yield+0xcc>
	sys_dnode_t *const prev = successor->prev;
   36f4e:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   36f50:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
   36f54:	600b      	str	r3, [r1, #0]
	successor->prev = node;
   36f56:	6053      	str	r3, [r2, #4]
	update_cache(1);
   36f58:	2001      	movs	r0, #1
   36f5a:	f7ff f9d7 	bl	3630c <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   36f5e:	480c      	ldr	r0, [pc, #48]	; (36f90 <z_impl_k_yield+0xe8>)
   36f60:	f7fe f982 	bl	35268 <z_spin_unlock_valid>
   36f64:	b950      	cbnz	r0, 36f7c <z_impl_k_yield+0xd4>
   36f66:	490b      	ldr	r1, [pc, #44]	; (36f94 <z_impl_k_yield+0xec>)
   36f68:	4808      	ldr	r0, [pc, #32]	; (36f8c <z_impl_k_yield+0xe4>)
   36f6a:	22e1      	movs	r2, #225	; 0xe1
   36f6c:	f001 fdd1 	bl	38b12 <assert_print>
   36f70:	21e1      	movs	r1, #225	; 0xe1
   36f72:	e7b9      	b.n	36ee8 <z_impl_k_yield+0x40>
	return (node == list->tail) ? NULL : node->next;
   36f74:	428a      	cmp	r2, r1
   36f76:	d0dd      	beq.n	36f34 <z_impl_k_yield+0x8c>
   36f78:	6812      	ldr	r2, [r2, #0]
   36f7a:	e7da      	b.n	36f32 <z_impl_k_yield+0x8a>
   36f7c:	4630      	mov	r0, r6
	z_swap(&sched_spinlock, key);
}
   36f7e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   36f82:	f7f0 b80d 	b.w	26fa0 <arch_swap>
   36f86:	bf00      	nop
   36f88:	0003fd7c 	.word	0x0003fd7c
   36f8c:	0003d1d7 	.word	0x0003d1d7
   36f90:	200033cc 	.word	0x200033cc
   36f94:	0003d39d 	.word	0x0003d39d
   36f98:	20003384 	.word	0x20003384
   36f9c:	20002bd0 	.word	0x20002bd0

00036fa0 <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
{
   36fa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   36fa4:	4605      	mov	r5, r0
   36fa6:	460e      	mov	r6, r1
   36fa8:	f3ef 8305 	mrs	r3, IPSR
#ifdef CONFIG_MULTITHREADING
	uint32_t expected_wakeup_ticks;

	__ASSERT(!arch_is_in_isr(), "");
   36fac:	b14b      	cbz	r3, 36fc2 <z_tick_sleep+0x22>
   36fae:	4936      	ldr	r1, [pc, #216]	; (37088 <z_tick_sleep+0xe8>)
   36fb0:	4836      	ldr	r0, [pc, #216]	; (3708c <z_tick_sleep+0xec>)
   36fb2:	f240 528c 	movw	r2, #1420	; 0x58c
   36fb6:	f001 fdac 	bl	38b12 <assert_print>
   36fba:	f240 518c 	movw	r1, #1420	; 0x58c
	z_add_thread_timeout(_current, timeout);
	z_mark_thread_as_suspended(_current);

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
   36fbe:	4832      	ldr	r0, [pc, #200]	; (37088 <z_tick_sleep+0xe8>)
   36fc0:	e020      	b.n	37004 <z_tick_sleep+0x64>
	if (ticks == 0) {
   36fc2:	ea50 0301 	orrs.w	r3, r0, r1
   36fc6:	d103      	bne.n	36fd0 <z_tick_sleep+0x30>
	z_impl_k_yield();
   36fc8:	f7ff ff6e 	bl	36ea8 <z_impl_k_yield>
		return 0;
   36fcc:	2000      	movs	r0, #0
   36fce:	e058      	b.n	37082 <z_tick_sleep+0xe2>
	if (Z_TICK_ABS(ticks) <= 0) {
   36fd0:	1c82      	adds	r2, r0, #2
   36fd2:	f171 33ff 	sbcs.w	r3, r1, #4294967295	; 0xffffffff
   36fd6:	db17      	blt.n	37008 <z_tick_sleep+0x68>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   36fd8:	f004 fefc 	bl	3bdd4 <sys_clock_tick_get_32>
   36fdc:	1944      	adds	r4, r0, r5
   36fde:	f04f 0340 	mov.w	r3, #64	; 0x40
   36fe2:	f3ef 8811 	mrs	r8, BASEPRI
   36fe6:	f383 8812 	msr	BASEPRI_MAX, r3
   36fea:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   36fee:	4828      	ldr	r0, [pc, #160]	; (37090 <z_tick_sleep+0xf0>)
   36ff0:	f7fe f92c 	bl	3524c <z_spin_lock_valid>
   36ff4:	b960      	cbnz	r0, 37010 <z_tick_sleep+0x70>
   36ff6:	4927      	ldr	r1, [pc, #156]	; (37094 <z_tick_sleep+0xf4>)
   36ff8:	4824      	ldr	r0, [pc, #144]	; (3708c <z_tick_sleep+0xec>)
   36ffa:	2294      	movs	r2, #148	; 0x94
   36ffc:	f001 fd89 	bl	38b12 <assert_print>
   37000:	2194      	movs	r1, #148	; 0x94
   37002:	4824      	ldr	r0, [pc, #144]	; (37094 <z_tick_sleep+0xf4>)
   37004:	f001 fd7e 	bl	38b04 <assert_post_action>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
   37008:	f06f 0401 	mvn.w	r4, #1
   3700c:	1a24      	subs	r4, r4, r0
   3700e:	e7e6      	b.n	36fde <z_tick_sleep+0x3e>
	pending_current = _current;
   37010:	4f21      	ldr	r7, [pc, #132]	; (37098 <z_tick_sleep+0xf8>)
	z_spin_lock_set_owner(l);
   37012:	481f      	ldr	r0, [pc, #124]	; (37090 <z_tick_sleep+0xf0>)
   37014:	f7fe f938 	bl	35288 <z_spin_lock_set_owner>
   37018:	4b20      	ldr	r3, [pc, #128]	; (3709c <z_tick_sleep+0xfc>)
   3701a:	68b8      	ldr	r0, [r7, #8]
   3701c:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   3701e:	f7ff fc89 	bl	36934 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   37022:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   37024:	491e      	ldr	r1, [pc, #120]	; (370a0 <z_tick_sleep+0x100>)
   37026:	462a      	mov	r2, r5
   37028:	4633      	mov	r3, r6
   3702a:	3018      	adds	r0, #24
   3702c:	f000 f9d4 	bl	373d8 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   37030:	68ba      	ldr	r2, [r7, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   37032:	4817      	ldr	r0, [pc, #92]	; (37090 <z_tick_sleep+0xf0>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   37034:	7b53      	ldrb	r3, [r2, #13]
   37036:	f043 0310 	orr.w	r3, r3, #16
   3703a:	7353      	strb	r3, [r2, #13]
   3703c:	f7fe f914 	bl	35268 <z_spin_unlock_valid>
   37040:	b930      	cbnz	r0, 37050 <z_tick_sleep+0xb0>
   37042:	4914      	ldr	r1, [pc, #80]	; (37094 <z_tick_sleep+0xf4>)
   37044:	4811      	ldr	r0, [pc, #68]	; (3708c <z_tick_sleep+0xec>)
   37046:	22e1      	movs	r2, #225	; 0xe1
   37048:	f001 fd63 	bl	38b12 <assert_print>
   3704c:	21e1      	movs	r1, #225	; 0xe1
   3704e:	e7d8      	b.n	37002 <z_tick_sleep+0x62>
   37050:	4640      	mov	r0, r8
   37052:	f7ef ffa5 	bl	26fa0 <arch_swap>
	return (thread->base.thread_state & state) != 0U;
   37056:	68bb      	ldr	r3, [r7, #8]
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
   37058:	7b5b      	ldrb	r3, [r3, #13]
   3705a:	06db      	lsls	r3, r3, #27
   3705c:	d508      	bpl.n	37070 <z_tick_sleep+0xd0>
   3705e:	490a      	ldr	r1, [pc, #40]	; (37088 <z_tick_sleep+0xe8>)
   37060:	480a      	ldr	r0, [pc, #40]	; (3708c <z_tick_sleep+0xec>)
   37062:	f240 52ad 	movw	r2, #1453	; 0x5ad
   37066:	f001 fd54 	bl	38b12 <assert_print>
   3706a:	f240 51ad 	movw	r1, #1453	; 0x5ad
   3706e:	e7a6      	b.n	36fbe <z_tick_sleep+0x1e>

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   37070:	f004 feb0 	bl	3bdd4 <sys_clock_tick_get_32>
   37074:	1a20      	subs	r0, r4, r0
   37076:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
   3707a:	2801      	cmp	r0, #1
   3707c:	f173 0300 	sbcs.w	r3, r3, #0
   37080:	dba4      	blt.n	36fcc <z_tick_sleep+0x2c>
		return ticks;
	}
#endif

	return 0;
}
   37082:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   37086:	bf00      	nop
   37088:	0003fd7c 	.word	0x0003fd7c
   3708c:	0003d1d7 	.word	0x0003d1d7
   37090:	200033cc 	.word	0x200033cc
   37094:	0003d39d 	.word	0x0003d39d
   37098:	20003384 	.word	0x20003384
   3709c:	200033c0 	.word	0x200033c0
   370a0:	00036d15 	.word	0x00036d15

000370a4 <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
   370a4:	b508      	push	{r3, lr}
   370a6:	f3ef 8305 	mrs	r3, IPSR
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
   370aa:	b153      	cbz	r3, 370c2 <z_impl_k_sleep+0x1e>
   370ac:	4910      	ldr	r1, [pc, #64]	; (370f0 <z_impl_k_sleep+0x4c>)
   370ae:	4811      	ldr	r0, [pc, #68]	; (370f4 <z_impl_k_sleep+0x50>)
   370b0:	f240 52bc 	movw	r2, #1468	; 0x5bc
   370b4:	f001 fd2d 	bl	38b12 <assert_print>
   370b8:	480d      	ldr	r0, [pc, #52]	; (370f0 <z_impl_k_sleep+0x4c>)
   370ba:	f240 51bc 	movw	r1, #1468	; 0x5bc
   370be:	f001 fd21 	bl	38b04 <assert_post_action>

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   370c2:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   370c6:	bf08      	it	eq
   370c8:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
   370cc:	d106      	bne.n	370dc <z_impl_k_sleep+0x38>
		k_thread_suspend(_current);
   370ce:	4b0a      	ldr	r3, [pc, #40]	; (370f8 <z_impl_k_sleep+0x54>)
   370d0:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   370d2:	f7ff fd73 	bl	36bbc <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
   370d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
   370da:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
   370dc:	f7ff ff60 	bl	36fa0 <z_tick_sleep>
			return ((t * to_hz + off) / from_hz);
   370e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   370e4:	fb80 0303 	smull	r0, r3, r0, r3
   370e8:	0bc0      	lsrs	r0, r0, #15
   370ea:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
   370ee:	e7f4      	b.n	370da <z_impl_k_sleep+0x36>
   370f0:	0003fd7c 	.word	0x0003fd7c
   370f4:	0003d1d7 	.word	0x0003d1d7
   370f8:	20003384 	.word	0x20003384

000370fc <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   370fc:	4b01      	ldr	r3, [pc, #4]	; (37104 <z_impl_z_current_get+0x8>)
   370fe:	6898      	ldr	r0, [r3, #8]
   37100:	4770      	bx	lr
   37102:	bf00      	nop
   37104:	20003384 	.word	0x20003384

00037108 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
   37108:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3710c:	4604      	mov	r4, r0
   3710e:	f04f 0340 	mov.w	r3, #64	; 0x40
   37112:	f3ef 8611 	mrs	r6, BASEPRI
   37116:	f383 8812 	msr	BASEPRI_MAX, r3
   3711a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3711e:	4845      	ldr	r0, [pc, #276]	; (37234 <z_thread_abort+0x12c>)
   37120:	f7fe f894 	bl	3524c <z_spin_lock_valid>
   37124:	b940      	cbnz	r0, 37138 <z_thread_abort+0x30>
   37126:	4944      	ldr	r1, [pc, #272]	; (37238 <z_thread_abort+0x130>)
   37128:	4844      	ldr	r0, [pc, #272]	; (3723c <z_thread_abort+0x134>)
   3712a:	2294      	movs	r2, #148	; 0x94
   3712c:	f001 fcf1 	bl	38b12 <assert_print>
   37130:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   37132:	4841      	ldr	r0, [pc, #260]	; (37238 <z_thread_abort+0x130>)
   37134:	f001 fce6 	bl	38b04 <assert_post_action>
	z_spin_lock_set_owner(l);
   37138:	483e      	ldr	r0, [pc, #248]	; (37234 <z_thread_abort+0x12c>)
   3713a:	f7fe f8a5 	bl	35288 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
   3713e:	7b23      	ldrb	r3, [r4, #12]
   37140:	07d9      	lsls	r1, r3, #31
   37142:	d518      	bpl.n	37176 <z_thread_abort+0x6e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   37144:	483b      	ldr	r0, [pc, #236]	; (37234 <z_thread_abort+0x12c>)
   37146:	f7fe f88f 	bl	35268 <z_spin_unlock_valid>
   3714a:	b930      	cbnz	r0, 3715a <z_thread_abort+0x52>
   3714c:	493a      	ldr	r1, [pc, #232]	; (37238 <z_thread_abort+0x130>)
   3714e:	483b      	ldr	r0, [pc, #236]	; (3723c <z_thread_abort+0x134>)
   37150:	22c2      	movs	r2, #194	; 0xc2
   37152:	f001 fcde 	bl	38b12 <assert_print>
   37156:	21c2      	movs	r1, #194	; 0xc2
   37158:	e7eb      	b.n	37132 <z_thread_abort+0x2a>
	__asm__ volatile(
   3715a:	f386 8811 	msr	BASEPRI, r6
   3715e:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
   37162:	4937      	ldr	r1, [pc, #220]	; (37240 <z_thread_abort+0x138>)
   37164:	4835      	ldr	r0, [pc, #212]	; (3723c <z_thread_abort+0x134>)
   37166:	f44f 62d9 	mov.w	r2, #1736	; 0x6c8
   3716a:	f001 fcd2 	bl	38b12 <assert_print>
   3716e:	f44f 61d9 	mov.w	r1, #1736	; 0x6c8
	}
#endif
	end_thread(thread);
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
   37172:	4833      	ldr	r0, [pc, #204]	; (37240 <z_thread_abort+0x138>)
   37174:	e7de      	b.n	37134 <z_thread_abort+0x2c>
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   37176:	7b63      	ldrb	r3, [r4, #13]
   37178:	071a      	lsls	r2, r3, #28
   3717a:	d50a      	bpl.n	37192 <z_thread_abort+0x8a>
   3717c:	482d      	ldr	r0, [pc, #180]	; (37234 <z_thread_abort+0x12c>)
   3717e:	f7fe f873 	bl	35268 <z_spin_unlock_valid>
   37182:	2800      	cmp	r0, #0
   37184:	d0e2      	beq.n	3714c <z_thread_abort+0x44>
   37186:	f386 8811 	msr	BASEPRI, r6
   3718a:	f3bf 8f6f 	isb	sy
	}
	k_spin_unlock(&sched_spinlock, key);
}
   3718e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
   37192:	f023 0220 	bic.w	r2, r3, #32
   37196:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
   3719a:	09d2      	lsrs	r2, r2, #7
   3719c:	d127      	bne.n	371ee <z_thread_abort+0xe6>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   3719e:	7361      	strb	r1, [r4, #13]
		if (thread->base.pended_on != NULL) {
   371a0:	68a3      	ldr	r3, [r4, #8]
   371a2:	b113      	cbz	r3, 371aa <z_thread_abort+0xa2>
			unpend_thread_no_timeout(thread);
   371a4:	4620      	mov	r0, r4
   371a6:	f7ff fd5f 	bl	36c68 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   371aa:	f104 0018 	add.w	r0, r4, #24
   371ae:	f000 f9bf 	bl	37530 <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   371b2:	f104 0758 	add.w	r7, r4, #88	; 0x58
   371b6:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
   371ba:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
   371bc:	42bd      	cmp	r5, r7
   371be:	d000      	beq.n	371c2 <z_thread_abort+0xba>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   371c0:	b9fd      	cbnz	r5, 37202 <z_thread_abort+0xfa>
		update_cache(1);
   371c2:	2001      	movs	r0, #1
   371c4:	f7ff f8a2 	bl	3630c <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
   371c8:	4b1e      	ldr	r3, [pc, #120]	; (37244 <z_thread_abort+0x13c>)
   371ca:	689b      	ldr	r3, [r3, #8]
   371cc:	42a3      	cmp	r3, r4
   371ce:	d1d5      	bne.n	3717c <z_thread_abort+0x74>
   371d0:	f3ef 8305 	mrs	r3, IPSR
   371d4:	2b00      	cmp	r3, #0
   371d6:	d1d1      	bne.n	3717c <z_thread_abort+0x74>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   371d8:	4816      	ldr	r0, [pc, #88]	; (37234 <z_thread_abort+0x12c>)
   371da:	f7fe f845 	bl	35268 <z_spin_unlock_valid>
   371de:	b9e8      	cbnz	r0, 3721c <z_thread_abort+0x114>
   371e0:	4915      	ldr	r1, [pc, #84]	; (37238 <z_thread_abort+0x130>)
   371e2:	4816      	ldr	r0, [pc, #88]	; (3723c <z_thread_abort+0x134>)
   371e4:	22e1      	movs	r2, #225	; 0xe1
   371e6:	f001 fc94 	bl	38b12 <assert_print>
   371ea:	21e1      	movs	r1, #225	; 0xe1
   371ec:	e7a1      	b.n	37132 <z_thread_abort+0x2a>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   371ee:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   371f2:	f043 0308 	orr.w	r3, r3, #8
	_priq_run_remove(thread_runq(thread), thread);
   371f6:	4814      	ldr	r0, [pc, #80]	; (37248 <z_thread_abort+0x140>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
   371f8:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   371fa:	4621      	mov	r1, r4
   371fc:	f7ff fac8 	bl	36790 <z_priq_dumb_remove>
}
   37200:	e7ce      	b.n	371a0 <z_thread_abort+0x98>
		unpend_thread_no_timeout(thread);
   37202:	4628      	mov	r0, r5
   37204:	f7ff fd30 	bl	36c68 <unpend_thread_no_timeout>
   37208:	f105 0018 	add.w	r0, r5, #24
   3720c:	f000 f990 	bl	37530 <z_abort_timeout>
   37210:	f8c5 807c 	str.w	r8, [r5, #124]	; 0x7c
		ready_thread(thread);
   37214:	4628      	mov	r0, r5
   37216:	f7ff f8a5 	bl	36364 <ready_thread>
   3721a:	e7ce      	b.n	371ba <z_thread_abort+0xb2>
   3721c:	4630      	mov	r0, r6
   3721e:	f7ef febf 	bl	26fa0 <arch_swap>
		__ASSERT(false, "aborted _current back from dead");
   37222:	4907      	ldr	r1, [pc, #28]	; (37240 <z_thread_abort+0x138>)
   37224:	4805      	ldr	r0, [pc, #20]	; (3723c <z_thread_abort+0x134>)
   37226:	f240 62f7 	movw	r2, #1783	; 0x6f7
   3722a:	f001 fc72 	bl	38b12 <assert_print>
   3722e:	f240 61f7 	movw	r1, #1783	; 0x6f7
   37232:	e79e      	b.n	37172 <z_thread_abort+0x6a>
   37234:	200033cc 	.word	0x200033cc
   37238:	0003d39d 	.word	0x0003d39d
   3723c:	0003d1d7 	.word	0x0003d1d7
   37240:	0003fd7c 	.word	0x0003fd7c
   37244:	20003384 	.word	0x20003384
   37248:	200033a4 	.word	0x200033a4

0003724c <z_sched_wake>:

/*
 * future scheduler.h API implementations
 */
bool z_sched_wake(_wait_q_t *wait_q, int swap_retval, void *swap_data)
{
   3724c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   37250:	4606      	mov	r6, r0
   37252:	4688      	mov	r8, r1
   37254:	4617      	mov	r7, r2
	__asm__ volatile(
   37256:	f04f 0340 	mov.w	r3, #64	; 0x40
   3725a:	f3ef 8911 	mrs	r9, BASEPRI
   3725e:	f383 8812 	msr	BASEPRI_MAX, r3
   37262:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   37266:	481c      	ldr	r0, [pc, #112]	; (372d8 <z_sched_wake+0x8c>)
   37268:	f7fd fff0 	bl	3524c <z_spin_lock_valid>
   3726c:	4605      	mov	r5, r0
   3726e:	b940      	cbnz	r0, 37282 <z_sched_wake+0x36>
   37270:	491a      	ldr	r1, [pc, #104]	; (372dc <z_sched_wake+0x90>)
   37272:	481b      	ldr	r0, [pc, #108]	; (372e0 <z_sched_wake+0x94>)
   37274:	2294      	movs	r2, #148	; 0x94
   37276:	f001 fc4c 	bl	38b12 <assert_print>
   3727a:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3727c:	4817      	ldr	r0, [pc, #92]	; (372dc <z_sched_wake+0x90>)
   3727e:	f001 fc41 	bl	38b04 <assert_post_action>
	z_spin_lock_set_owner(l);
   37282:	4815      	ldr	r0, [pc, #84]	; (372d8 <z_sched_wake+0x8c>)
   37284:	f7fe f800 	bl	35288 <z_spin_lock_set_owner>
	return list->head == list;
   37288:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   3728a:	42a6      	cmp	r6, r4
   3728c:	d018      	beq.n	372c0 <z_sched_wake+0x74>
	bool ret = false;

	LOCKED(&sched_spinlock) {
		thread = _priq_wait_best(&wait_q->waitq);

		if (thread != NULL) {
   3728e:	b1cc      	cbz	r4, 372c4 <z_sched_wake+0x78>
			z_thread_return_value_set_with_data(thread,
							    swap_retval,
							    swap_data);
			unpend_thread_no_timeout(thread);
   37290:	4620      	mov	r0, r4
   37292:	f8c4 807c 	str.w	r8, [r4, #124]	; 0x7c
   37296:	6167      	str	r7, [r4, #20]
   37298:	f7ff fce6 	bl	36c68 <unpend_thread_no_timeout>
   3729c:	f104 0018 	add.w	r0, r4, #24
   372a0:	f000 f946 	bl	37530 <z_abort_timeout>
			(void)z_abort_thread_timeout(thread);
			ready_thread(thread);
   372a4:	4620      	mov	r0, r4
   372a6:	f7ff f85d 	bl	36364 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   372aa:	480b      	ldr	r0, [pc, #44]	; (372d8 <z_sched_wake+0x8c>)
   372ac:	f7fd ffdc 	bl	35268 <z_spin_unlock_valid>
   372b0:	b950      	cbnz	r0, 372c8 <z_sched_wake+0x7c>
   372b2:	490a      	ldr	r1, [pc, #40]	; (372dc <z_sched_wake+0x90>)
   372b4:	480a      	ldr	r0, [pc, #40]	; (372e0 <z_sched_wake+0x94>)
   372b6:	22c2      	movs	r2, #194	; 0xc2
   372b8:	f001 fc2b 	bl	38b12 <assert_print>
   372bc:	21c2      	movs	r1, #194	; 0xc2
   372be:	e7dd      	b.n	3727c <z_sched_wake+0x30>
	bool ret = false;
   372c0:	2500      	movs	r5, #0
   372c2:	e7f2      	b.n	372aa <z_sched_wake+0x5e>
   372c4:	4625      	mov	r5, r4
   372c6:	e7f0      	b.n	372aa <z_sched_wake+0x5e>
	__asm__ volatile(
   372c8:	f389 8811 	msr	BASEPRI, r9
   372cc:	f3bf 8f6f 	isb	sy
			ret = true;
		}
	}

	return ret;
}
   372d0:	4628      	mov	r0, r5
   372d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   372d6:	bf00      	nop
   372d8:	200033cc 	.word	0x200033cc
   372dc:	0003d39d 	.word	0x0003d39d
   372e0:	0003d1d7 	.word	0x0003d1d7

000372e4 <z_sched_wait>:

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   372e4:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   372e6:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
   372ea:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   372ec:	e9cd 6700 	strd	r6, r7, [sp]
   372f0:	f7ff fb8e 	bl	36a10 <z_pend_curr>

	if (data != NULL) {
   372f4:	b11c      	cbz	r4, 372fe <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
   372f6:	4b03      	ldr	r3, [pc, #12]	; (37304 <z_sched_wait+0x20>)
   372f8:	689b      	ldr	r3, [r3, #8]
   372fa:	695b      	ldr	r3, [r3, #20]
   372fc:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   372fe:	b002      	add	sp, #8
   37300:	bdd0      	pop	{r4, r6, r7, pc}
   37302:	bf00      	nop
   37304:	20003384 	.word	0x20003384

00037308 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
   37308:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
   3730a:	4806      	ldr	r0, [pc, #24]	; (37324 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
   3730c:	4a06      	ldr	r2, [pc, #24]	; (37328 <z_data_copy+0x20>)
   3730e:	4907      	ldr	r1, [pc, #28]	; (3732c <z_data_copy+0x24>)
   37310:	1a12      	subs	r2, r2, r0
   37312:	f004 fc50 	bl	3bbb6 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   37316:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
   3731a:	4a05      	ldr	r2, [pc, #20]	; (37330 <z_data_copy+0x28>)
   3731c:	4905      	ldr	r1, [pc, #20]	; (37334 <z_data_copy+0x2c>)
   3731e:	4806      	ldr	r0, [pc, #24]	; (37338 <z_data_copy+0x30>)
   37320:	f004 bc49 	b.w	3bbb6 <z_early_memcpy>
   37324:	20000000 	.word	0x20000000
   37328:	20000d58 	.word	0x20000d58
   3732c:	0003fe60 	.word	0x0003fe60
   37330:	00000000 	.word	0x00000000
   37334:	0003fe60 	.word	0x0003fe60
   37338:	20000000 	.word	0x20000000

0003733c <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   3733c:	4b03      	ldr	r3, [pc, #12]	; (3734c <elapsed+0x10>)
   3733e:	681b      	ldr	r3, [r3, #0]
   37340:	b90b      	cbnz	r3, 37346 <elapsed+0xa>
   37342:	f7fa bcc7 	b.w	31cd4 <sys_clock_elapsed>
}
   37346:	2000      	movs	r0, #0
   37348:	4770      	bx	lr
   3734a:	bf00      	nop
   3734c:	200033d0 	.word	0x200033d0

00037350 <next_timeout>:

static int32_t next_timeout(void)
{
   37350:	b510      	push	{r4, lr}
	return list->head == list;
   37352:	4b11      	ldr	r3, [pc, #68]	; (37398 <next_timeout+0x48>)
   37354:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   37356:	429c      	cmp	r4, r3
   37358:	d10a      	bne.n	37370 <next_timeout+0x20>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   3735a:	f7ff ffef 	bl	3733c <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
   3735e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   37362:	4b0e      	ldr	r3, [pc, #56]	; (3739c <next_timeout+0x4c>)
   37364:	691b      	ldr	r3, [r3, #16]
   37366:	b113      	cbz	r3, 3736e <next_timeout+0x1e>
   37368:	4298      	cmp	r0, r3
   3736a:	bfa8      	it	ge
   3736c:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   3736e:	bd10      	pop	{r4, pc}
	int32_t ticks_elapsed = elapsed();
   37370:	f7ff ffe4 	bl	3733c <elapsed>
	if ((to == NULL) ||
   37374:	2c00      	cmp	r4, #0
   37376:	d0f2      	beq.n	3735e <next_timeout+0xe>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
   37378:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
   3737c:	1a1b      	subs	r3, r3, r0
   3737e:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
   37382:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   37386:	f172 0100 	sbcs.w	r1, r2, #0
   3738a:	dae8      	bge.n	3735e <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
   3738c:	2a00      	cmp	r2, #0
   3738e:	bfac      	ite	ge
   37390:	4618      	movge	r0, r3
   37392:	2000      	movlt	r0, #0
   37394:	e7e5      	b.n	37362 <next_timeout+0x12>
   37396:	bf00      	nop
   37398:	200008f4 	.word	0x200008f4
   3739c:	20003384 	.word	0x20003384

000373a0 <remove_timeout>:
{
   373a0:	b530      	push	{r4, r5, lr}
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   373a2:	b170      	cbz	r0, 373c2 <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
   373a4:	4b0b      	ldr	r3, [pc, #44]	; (373d4 <remove_timeout+0x34>)
   373a6:	685b      	ldr	r3, [r3, #4]
   373a8:	4298      	cmp	r0, r3
   373aa:	d00a      	beq.n	373c2 <remove_timeout+0x22>
   373ac:	6803      	ldr	r3, [r0, #0]
	if (next(t) != NULL) {
   373ae:	b143      	cbz	r3, 373c2 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   373b0:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   373b4:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   373b8:	1912      	adds	r2, r2, r4
   373ba:	eb41 0105 	adc.w	r1, r1, r5
   373be:	e9c3 2104 	strd	r2, r1, [r3, #16]
	sys_dnode_t *const next = node->next;
   373c2:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   373c6:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   373c8:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   373ca:	2300      	movs	r3, #0
	node->prev = NULL;
   373cc:	e9c0 3300 	strd	r3, r3, [r0]
}
   373d0:	bd30      	pop	{r4, r5, pc}
   373d2:	bf00      	nop
   373d4:	200008f4 	.word	0x200008f4

000373d8 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   373d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   373dc:	bf08      	it	eq
   373de:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
   373e2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   373e6:	4604      	mov	r4, r0
   373e8:	4692      	mov	sl, r2
   373ea:	461d      	mov	r5, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   373ec:	f000 8090 	beq.w	37510 <z_add_timeout+0x138>
	return node->next != NULL;
   373f0:	6806      	ldr	r6, [r0, #0]

#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
   373f2:	b146      	cbz	r6, 37406 <z_add_timeout+0x2e>
   373f4:	4947      	ldr	r1, [pc, #284]	; (37514 <z_add_timeout+0x13c>)
   373f6:	4848      	ldr	r0, [pc, #288]	; (37518 <z_add_timeout+0x140>)
   373f8:	2263      	movs	r2, #99	; 0x63
   373fa:	f001 fb8a 	bl	38b12 <assert_print>
   373fe:	4845      	ldr	r0, [pc, #276]	; (37514 <z_add_timeout+0x13c>)
   37400:	2163      	movs	r1, #99	; 0x63
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   37402:	f001 fb7f 	bl	38b04 <assert_post_action>
	to->fn = fn;
   37406:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
   37408:	f04f 0340 	mov.w	r3, #64	; 0x40
   3740c:	f3ef 8711 	mrs	r7, BASEPRI
   37410:	f383 8812 	msr	BASEPRI_MAX, r3
   37414:	f3bf 8f6f 	isb	sy
   37418:	4840      	ldr	r0, [pc, #256]	; (3751c <z_add_timeout+0x144>)
   3741a:	f7fd ff17 	bl	3524c <z_spin_lock_valid>
   3741e:	b938      	cbnz	r0, 37430 <z_add_timeout+0x58>
   37420:	493f      	ldr	r1, [pc, #252]	; (37520 <z_add_timeout+0x148>)
   37422:	483d      	ldr	r0, [pc, #244]	; (37518 <z_add_timeout+0x140>)
   37424:	2294      	movs	r2, #148	; 0x94
   37426:	f001 fb74 	bl	38b12 <assert_print>
   3742a:	2194      	movs	r1, #148	; 0x94
   3742c:	483c      	ldr	r0, [pc, #240]	; (37520 <z_add_timeout+0x148>)
   3742e:	e7e8      	b.n	37402 <z_add_timeout+0x2a>
	z_spin_lock_set_owner(l);
   37430:	483a      	ldr	r0, [pc, #232]	; (3751c <z_add_timeout+0x144>)
   37432:	f7fd ff29 	bl	35288 <z_spin_lock_set_owner>

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   37436:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
   3743a:	f175 33ff 	sbcs.w	r3, r5, #4294967295	; 0xffffffff
   3743e:	da23      	bge.n	37488 <z_add_timeout+0xb0>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   37440:	4938      	ldr	r1, [pc, #224]	; (37524 <z_add_timeout+0x14c>)
   37442:	e9d1 2000 	ldrd	r2, r0, [r1]
   37446:	f06f 0301 	mvn.w	r3, #1
   3744a:	1a9b      	subs	r3, r3, r2
   3744c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   37450:	eb62 0000 	sbc.w	r0, r2, r0
   37454:	ebb3 030a 	subs.w	r3, r3, sl
   37458:	eb60 0005 	sbc.w	r0, r0, r5

			to->dticks = MAX(1, ticks);
   3745c:	2b01      	cmp	r3, #1
   3745e:	f170 0200 	sbcs.w	r2, r0, #0
   37462:	da01      	bge.n	37468 <z_add_timeout+0x90>
   37464:	2301      	movs	r3, #1
   37466:	4630      	mov	r0, r6
   37468:	e9c4 3004 	strd	r3, r0, [r4, #16]
	return list->head == list;
   3746c:	4b2e      	ldr	r3, [pc, #184]	; (37528 <z_add_timeout+0x150>)
   3746e:	681a      	ldr	r2, [r3, #0]
	return (node == list->tail) ? NULL : node->next;
   37470:	f8d3 c004 	ldr.w	ip, [r3, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   37474:	429a      	cmp	r2, r3
   37476:	bf18      	it	ne
   37478:	4616      	movne	r6, r2
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
		}

		for (t = first(); t != NULL; t = next(t)) {
   3747a:	b986      	cbnz	r6, 3749e <z_add_timeout+0xc6>
	node->prev = tail;
   3747c:	e9c4 3c00 	strd	r3, ip, [r4]
	tail->next = node;
   37480:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
   37484:	605c      	str	r4, [r3, #4]
}
   37486:	e01c      	b.n	374c2 <z_add_timeout+0xea>
			to->dticks = timeout.ticks + 1 + elapsed();
   37488:	f7ff ff58 	bl	3733c <elapsed>
   3748c:	f11a 0801 	adds.w	r8, sl, #1
   37490:	f145 0500 	adc.w	r5, r5, #0
   37494:	eb18 0300 	adds.w	r3, r8, r0
   37498:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
   3749c:	e7e4      	b.n	37468 <z_add_timeout+0x90>
			if (t->dticks > to->dticks) {
   3749e:	e9d6 1504 	ldrd	r1, r5, [r6, #16]
   374a2:	e9d4 2004 	ldrd	r2, r0, [r4, #16]
   374a6:	428a      	cmp	r2, r1
   374a8:	eb70 0e05 	sbcs.w	lr, r0, r5
   374ac:	da23      	bge.n	374f6 <z_add_timeout+0x11e>
				t->dticks -= to->dticks;
   374ae:	1a89      	subs	r1, r1, r2
	sys_dnode_t *const prev = successor->prev;
   374b0:	6872      	ldr	r2, [r6, #4]
   374b2:	eb65 0500 	sbc.w	r5, r5, r0
   374b6:	e9c6 1504 	strd	r1, r5, [r6, #16]
	node->next = successor;
   374ba:	e9c4 6200 	strd	r6, r2, [r4]
	prev->next = node;
   374be:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   374c0:	6074      	str	r4, [r6, #4]
	return list->head == list;
   374c2:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   374c4:	429a      	cmp	r2, r3
   374c6:	d00b      	beq.n	374e0 <z_add_timeout+0x108>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   374c8:	4294      	cmp	r4, r2
   374ca:	d109      	bne.n	374e0 <z_add_timeout+0x108>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   374cc:	f7ff ff40 	bl	37350 <next_timeout>

			if (next_time == 0 ||
   374d0:	b118      	cbz	r0, 374da <z_add_timeout+0x102>
			    _current_cpu->slice_ticks != next_time) {
   374d2:	4b16      	ldr	r3, [pc, #88]	; (3752c <z_add_timeout+0x154>)
			if (next_time == 0 ||
   374d4:	691b      	ldr	r3, [r3, #16]
   374d6:	4283      	cmp	r3, r0
   374d8:	d002      	beq.n	374e0 <z_add_timeout+0x108>
				sys_clock_set_timeout(next_time, false);
   374da:	2100      	movs	r1, #0
   374dc:	f7fa fbd0 	bl	31c80 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   374e0:	480e      	ldr	r0, [pc, #56]	; (3751c <z_add_timeout+0x144>)
   374e2:	f7fd fec1 	bl	35268 <z_spin_unlock_valid>
   374e6:	b978      	cbnz	r0, 37508 <z_add_timeout+0x130>
   374e8:	490d      	ldr	r1, [pc, #52]	; (37520 <z_add_timeout+0x148>)
   374ea:	480b      	ldr	r0, [pc, #44]	; (37518 <z_add_timeout+0x140>)
   374ec:	22c2      	movs	r2, #194	; 0xc2
   374ee:	f001 fb10 	bl	38b12 <assert_print>
   374f2:	21c2      	movs	r1, #194	; 0xc2
   374f4:	e79a      	b.n	3742c <z_add_timeout+0x54>
			to->dticks -= t->dticks;
   374f6:	1a52      	subs	r2, r2, r1
   374f8:	eb60 0005 	sbc.w	r0, r0, r5
	return (node == list->tail) ? NULL : node->next;
   374fc:	4566      	cmp	r6, ip
   374fe:	e9c4 2004 	strd	r2, r0, [r4, #16]
   37502:	d0bb      	beq.n	3747c <z_add_timeout+0xa4>
   37504:	6836      	ldr	r6, [r6, #0]
   37506:	e7b8      	b.n	3747a <z_add_timeout+0xa2>
	__asm__ volatile(
   37508:	f387 8811 	msr	BASEPRI, r7
   3750c:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   37510:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   37514:	0003fdc9 	.word	0x0003fdc9
   37518:	0003d1d7 	.word	0x0003d1d7
   3751c:	200033d4 	.word	0x200033d4
   37520:	0003d39d 	.word	0x0003d39d
   37524:	20002d70 	.word	0x20002d70
   37528:	200008f4 	.word	0x200008f4
   3752c:	20003384 	.word	0x20003384

00037530 <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
   37530:	b538      	push	{r3, r4, r5, lr}
   37532:	4604      	mov	r4, r0
	__asm__ volatile(
   37534:	f04f 0340 	mov.w	r3, #64	; 0x40
   37538:	f3ef 8511 	mrs	r5, BASEPRI
   3753c:	f383 8812 	msr	BASEPRI_MAX, r3
   37540:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   37544:	4814      	ldr	r0, [pc, #80]	; (37598 <z_abort_timeout+0x68>)
   37546:	f7fd fe81 	bl	3524c <z_spin_lock_valid>
   3754a:	b940      	cbnz	r0, 3755e <z_abort_timeout+0x2e>
   3754c:	4913      	ldr	r1, [pc, #76]	; (3759c <z_abort_timeout+0x6c>)
   3754e:	4814      	ldr	r0, [pc, #80]	; (375a0 <z_abort_timeout+0x70>)
   37550:	2294      	movs	r2, #148	; 0x94
   37552:	f001 fade 	bl	38b12 <assert_print>
   37556:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   37558:	4810      	ldr	r0, [pc, #64]	; (3759c <z_abort_timeout+0x6c>)
   3755a:	f001 fad3 	bl	38b04 <assert_post_action>
	z_spin_lock_set_owner(l);
   3755e:	480e      	ldr	r0, [pc, #56]	; (37598 <z_abort_timeout+0x68>)
   37560:	f7fd fe92 	bl	35288 <z_spin_lock_set_owner>
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
		if (sys_dnode_is_linked(&to->node)) {
   37564:	6823      	ldr	r3, [r4, #0]
   37566:	b173      	cbz	r3, 37586 <z_abort_timeout+0x56>
			remove_timeout(to);
   37568:	4620      	mov	r0, r4
   3756a:	f7ff ff19 	bl	373a0 <remove_timeout>
			ret = 0;
   3756e:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   37570:	4809      	ldr	r0, [pc, #36]	; (37598 <z_abort_timeout+0x68>)
   37572:	f7fd fe79 	bl	35268 <z_spin_unlock_valid>
   37576:	b948      	cbnz	r0, 3758c <z_abort_timeout+0x5c>
   37578:	4908      	ldr	r1, [pc, #32]	; (3759c <z_abort_timeout+0x6c>)
   3757a:	4809      	ldr	r0, [pc, #36]	; (375a0 <z_abort_timeout+0x70>)
   3757c:	22c2      	movs	r2, #194	; 0xc2
   3757e:	f001 fac8 	bl	38b12 <assert_print>
   37582:	21c2      	movs	r1, #194	; 0xc2
   37584:	e7e8      	b.n	37558 <z_abort_timeout+0x28>
	int ret = -EINVAL;
   37586:	f06f 0415 	mvn.w	r4, #21
   3758a:	e7f1      	b.n	37570 <z_abort_timeout+0x40>
	__asm__ volatile(
   3758c:	f385 8811 	msr	BASEPRI, r5
   37590:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
   37594:	4620      	mov	r0, r4
   37596:	bd38      	pop	{r3, r4, r5, pc}
   37598:	200033d4 	.word	0x200033d4
   3759c:	0003d39d 	.word	0x0003d39d
   375a0:	0003d1d7 	.word	0x0003d1d7

000375a4 <z_get_next_timeout_expiry>:

	return ticks;
}

int32_t z_get_next_timeout_expiry(void)
{
   375a4:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   375a6:	f04f 0340 	mov.w	r3, #64	; 0x40
   375aa:	f3ef 8511 	mrs	r5, BASEPRI
   375ae:	f383 8812 	msr	BASEPRI_MAX, r3
   375b2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   375b6:	4812      	ldr	r0, [pc, #72]	; (37600 <z_get_next_timeout_expiry+0x5c>)
   375b8:	f7fd fe48 	bl	3524c <z_spin_lock_valid>
   375bc:	b940      	cbnz	r0, 375d0 <z_get_next_timeout_expiry+0x2c>
   375be:	4911      	ldr	r1, [pc, #68]	; (37604 <z_get_next_timeout_expiry+0x60>)
   375c0:	4811      	ldr	r0, [pc, #68]	; (37608 <z_get_next_timeout_expiry+0x64>)
   375c2:	2294      	movs	r2, #148	; 0x94
   375c4:	f001 faa5 	bl	38b12 <assert_print>
   375c8:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   375ca:	480e      	ldr	r0, [pc, #56]	; (37604 <z_get_next_timeout_expiry+0x60>)
   375cc:	f001 fa9a 	bl	38b04 <assert_post_action>
	z_spin_lock_set_owner(l);
   375d0:	480b      	ldr	r0, [pc, #44]	; (37600 <z_get_next_timeout_expiry+0x5c>)
   375d2:	f7fd fe59 	bl	35288 <z_spin_lock_set_owner>
	int32_t ret = (int32_t) K_TICKS_FOREVER;

	LOCKED(&timeout_lock) {
		ret = next_timeout();
   375d6:	f7ff febb 	bl	37350 <next_timeout>
   375da:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   375dc:	4808      	ldr	r0, [pc, #32]	; (37600 <z_get_next_timeout_expiry+0x5c>)
   375de:	f7fd fe43 	bl	35268 <z_spin_unlock_valid>
   375e2:	b930      	cbnz	r0, 375f2 <z_get_next_timeout_expiry+0x4e>
   375e4:	4907      	ldr	r1, [pc, #28]	; (37604 <z_get_next_timeout_expiry+0x60>)
   375e6:	4808      	ldr	r0, [pc, #32]	; (37608 <z_get_next_timeout_expiry+0x64>)
   375e8:	22c2      	movs	r2, #194	; 0xc2
   375ea:	f001 fa92 	bl	38b12 <assert_print>
   375ee:	21c2      	movs	r1, #194	; 0xc2
   375f0:	e7eb      	b.n	375ca <z_get_next_timeout_expiry+0x26>
	__asm__ volatile(
   375f2:	f385 8811 	msr	BASEPRI, r5
   375f6:	f3bf 8f6f 	isb	sy
	}
	return ret;
}
   375fa:	4620      	mov	r0, r4
   375fc:	bd38      	pop	{r3, r4, r5, pc}
   375fe:	bf00      	nop
   37600:	200033d4 	.word	0x200033d4
   37604:	0003d39d 	.word	0x0003d39d
   37608:	0003d1d7 	.word	0x0003d1d7

0003760c <z_set_timeout_expiry>:

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
   3760c:	b570      	push	{r4, r5, r6, lr}
   3760e:	4604      	mov	r4, r0
   37610:	460d      	mov	r5, r1
	__asm__ volatile(
   37612:	f04f 0340 	mov.w	r3, #64	; 0x40
   37616:	f3ef 8611 	mrs	r6, BASEPRI
   3761a:	f383 8812 	msr	BASEPRI_MAX, r3
   3761e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   37622:	4816      	ldr	r0, [pc, #88]	; (3767c <z_set_timeout_expiry+0x70>)
   37624:	f7fd fe12 	bl	3524c <z_spin_lock_valid>
   37628:	b940      	cbnz	r0, 3763c <z_set_timeout_expiry+0x30>
   3762a:	4915      	ldr	r1, [pc, #84]	; (37680 <z_set_timeout_expiry+0x74>)
   3762c:	4815      	ldr	r0, [pc, #84]	; (37684 <z_set_timeout_expiry+0x78>)
   3762e:	2294      	movs	r2, #148	; 0x94
   37630:	f001 fa6f 	bl	38b12 <assert_print>
   37634:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   37636:	4812      	ldr	r0, [pc, #72]	; (37680 <z_set_timeout_expiry+0x74>)
   37638:	f001 fa64 	bl	38b04 <assert_post_action>
	z_spin_lock_set_owner(l);
   3763c:	480f      	ldr	r0, [pc, #60]	; (3767c <z_set_timeout_expiry+0x70>)
   3763e:	f7fd fe23 	bl	35288 <z_spin_lock_set_owner>
	LOCKED(&timeout_lock) {
		int next_to = next_timeout();
   37642:	f7ff fe85 	bl	37350 <next_timeout>
		bool sooner = (next_to == K_TICKS_FOREVER)
			      || (ticks <= next_to);
   37646:	2801      	cmp	r0, #1
   37648:	dd07      	ble.n	3765a <z_set_timeout_expiry+0x4e>
   3764a:	42a0      	cmp	r0, r4
   3764c:	db05      	blt.n	3765a <z_set_timeout_expiry+0x4e>
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   3764e:	42a0      	cmp	r0, r4
   37650:	4629      	mov	r1, r5
   37652:	bfa8      	it	ge
   37654:	4620      	movge	r0, r4
   37656:	f7fa fb13 	bl	31c80 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3765a:	4808      	ldr	r0, [pc, #32]	; (3767c <z_set_timeout_expiry+0x70>)
   3765c:	f7fd fe04 	bl	35268 <z_spin_unlock_valid>
   37660:	b930      	cbnz	r0, 37670 <z_set_timeout_expiry+0x64>
   37662:	4907      	ldr	r1, [pc, #28]	; (37680 <z_set_timeout_expiry+0x74>)
   37664:	4807      	ldr	r0, [pc, #28]	; (37684 <z_set_timeout_expiry+0x78>)
   37666:	22c2      	movs	r2, #194	; 0xc2
   37668:	f001 fa53 	bl	38b12 <assert_print>
   3766c:	21c2      	movs	r1, #194	; 0xc2
   3766e:	e7e2      	b.n	37636 <z_set_timeout_expiry+0x2a>
	__asm__ volatile(
   37670:	f386 8811 	msr	BASEPRI, r6
   37674:	f3bf 8f6f 	isb	sy
		}
	}
}
   37678:	bd70      	pop	{r4, r5, r6, pc}
   3767a:	bf00      	nop
   3767c:	200033d4 	.word	0x200033d4
   37680:	0003d39d 	.word	0x0003d39d
   37684:	0003d1d7 	.word	0x0003d1d7

00037688 <sys_clock_announce>:

void sys_clock_announce(int32_t ticks)
{
   37688:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   3768c:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   3768e:	f7ff f8ed 	bl	3686c <z_time_slice>
	__asm__ volatile(
   37692:	f04f 0340 	mov.w	r3, #64	; 0x40
   37696:	f3ef 8711 	mrs	r7, BASEPRI
   3769a:	f383 8812 	msr	BASEPRI_MAX, r3
   3769e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   376a2:	483a      	ldr	r0, [pc, #232]	; (3778c <sys_clock_announce+0x104>)
   376a4:	f7fd fdd2 	bl	3524c <z_spin_lock_valid>
   376a8:	b940      	cbnz	r0, 376bc <sys_clock_announce+0x34>
   376aa:	4939      	ldr	r1, [pc, #228]	; (37790 <sys_clock_announce+0x108>)
   376ac:	4839      	ldr	r0, [pc, #228]	; (37794 <sys_clock_announce+0x10c>)
   376ae:	2294      	movs	r2, #148	; 0x94
   376b0:	f001 fa2f 	bl	38b12 <assert_print>
   376b4:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   376b6:	4836      	ldr	r0, [pc, #216]	; (37790 <sys_clock_announce+0x108>)
   376b8:	f001 fa24 	bl	38b04 <assert_post_action>
	z_spin_lock_set_owner(l);
   376bc:	4833      	ldr	r0, [pc, #204]	; (3778c <sys_clock_announce+0x104>)
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
   376be:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 37798 <sys_clock_announce+0x110>
	return list->head == list;
   376c2:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 3779c <sys_clock_announce+0x114>
   376c6:	f7fd fddf 	bl	35288 <z_spin_lock_set_owner>
   376ca:	f8d9 5000 	ldr.w	r5, [r9]

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
   376ce:	4a34      	ldr	r2, [pc, #208]	; (377a0 <sys_clock_announce+0x118>)
	announce_remaining = ticks;
   376d0:	f8c8 4000 	str.w	r4, [r8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   376d4:	454d      	cmp	r5, r9
		curr_tick += dt;
   376d6:	e9d2 3c00 	ldrd	r3, ip, [r2]
   376da:	ea4f 71e4 	mov.w	r1, r4, asr #31
   376de:	d00b      	beq.n	376f8 <sys_clock_announce+0x70>
	while (first() != NULL && first()->dticks <= announce_remaining) {
   376e0:	b155      	cbz	r5, 376f8 <sys_clock_announce+0x70>
   376e2:	e9d5 6004 	ldrd	r6, r0, [r5, #16]
   376e6:	42b4      	cmp	r4, r6
   376e8:	eb71 0e00 	sbcs.w	lr, r1, r0
   376ec:	da1b      	bge.n	37726 <sys_clock_announce+0x9e>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   376ee:	1b36      	subs	r6, r6, r4
   376f0:	eb60 0001 	sbc.w	r0, r0, r1
   376f4:	e9c5 6004 	strd	r6, r0, [r5, #16]
	}

	curr_tick += announce_remaining;
   376f8:	18e3      	adds	r3, r4, r3
   376fa:	eb4c 0101 	adc.w	r1, ip, r1
	announce_remaining = 0;
   376fe:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
   37700:	e9c2 3100 	strd	r3, r1, [r2]
	announce_remaining = 0;
   37704:	f8c8 4000 	str.w	r4, [r8]

	sys_clock_set_timeout(next_timeout(), false);
   37708:	f7ff fe22 	bl	37350 <next_timeout>
   3770c:	4621      	mov	r1, r4
   3770e:	f7fa fab7 	bl	31c80 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   37712:	481e      	ldr	r0, [pc, #120]	; (3778c <sys_clock_announce+0x104>)
   37714:	f7fd fda8 	bl	35268 <z_spin_unlock_valid>
   37718:	b1a8      	cbz	r0, 37746 <sys_clock_announce+0xbe>
	__asm__ volatile(
   3771a:	f387 8811 	msr	BASEPRI, r7
   3771e:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   37722:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
   37726:	18f3      	adds	r3, r6, r3
   37728:	eb4c 71e6 	adc.w	r1, ip, r6, asr #31
   3772c:	e9c2 3100 	strd	r3, r1, [r2]
		t->dticks = 0;
   37730:	2200      	movs	r2, #0
   37732:	2300      	movs	r3, #0
		remove_timeout(t);
   37734:	4628      	mov	r0, r5
		t->dticks = 0;
   37736:	e9c5 2304 	strd	r2, r3, [r5, #16]
		remove_timeout(t);
   3773a:	f7ff fe31 	bl	373a0 <remove_timeout>
   3773e:	4813      	ldr	r0, [pc, #76]	; (3778c <sys_clock_announce+0x104>)
   37740:	f7fd fd92 	bl	35268 <z_spin_unlock_valid>
   37744:	b930      	cbnz	r0, 37754 <sys_clock_announce+0xcc>
   37746:	4912      	ldr	r1, [pc, #72]	; (37790 <sys_clock_announce+0x108>)
   37748:	4812      	ldr	r0, [pc, #72]	; (37794 <sys_clock_announce+0x10c>)
   3774a:	22c2      	movs	r2, #194	; 0xc2
   3774c:	f001 f9e1 	bl	38b12 <assert_print>
   37750:	21c2      	movs	r1, #194	; 0xc2
   37752:	e7b0      	b.n	376b6 <sys_clock_announce+0x2e>
   37754:	f387 8811 	msr	BASEPRI, r7
   37758:	f3bf 8f6f 	isb	sy
		t->fn(t);
   3775c:	68ab      	ldr	r3, [r5, #8]
   3775e:	4628      	mov	r0, r5
   37760:	4798      	blx	r3
	__asm__ volatile(
   37762:	f04f 0340 	mov.w	r3, #64	; 0x40
   37766:	f3ef 8711 	mrs	r7, BASEPRI
   3776a:	f383 8812 	msr	BASEPRI_MAX, r3
   3776e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   37772:	4806      	ldr	r0, [pc, #24]	; (3778c <sys_clock_announce+0x104>)
   37774:	f7fd fd6a 	bl	3524c <z_spin_lock_valid>
   37778:	2800      	cmp	r0, #0
   3777a:	d096      	beq.n	376aa <sys_clock_announce+0x22>
	z_spin_lock_set_owner(l);
   3777c:	4803      	ldr	r0, [pc, #12]	; (3778c <sys_clock_announce+0x104>)
   3777e:	f7fd fd83 	bl	35288 <z_spin_lock_set_owner>
		announce_remaining -= dt;
   37782:	f8d8 4000 	ldr.w	r4, [r8]
   37786:	1ba4      	subs	r4, r4, r6
   37788:	e79f      	b.n	376ca <sys_clock_announce+0x42>
   3778a:	bf00      	nop
   3778c:	200033d4 	.word	0x200033d4
   37790:	0003d39d 	.word	0x0003d39d
   37794:	0003d1d7 	.word	0x0003d1d7
   37798:	200033d0 	.word	0x200033d0
   3779c:	200008f4 	.word	0x200008f4
   377a0:	20002d70 	.word	0x20002d70

000377a4 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   377a4:	b570      	push	{r4, r5, r6, lr}
   377a6:	f04f 0340 	mov.w	r3, #64	; 0x40
   377aa:	f3ef 8611 	mrs	r6, BASEPRI
   377ae:	f383 8812 	msr	BASEPRI_MAX, r3
   377b2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   377b6:	4815      	ldr	r0, [pc, #84]	; (3780c <sys_clock_tick_get+0x68>)
   377b8:	f7fd fd48 	bl	3524c <z_spin_lock_valid>
   377bc:	b940      	cbnz	r0, 377d0 <sys_clock_tick_get+0x2c>
   377be:	4914      	ldr	r1, [pc, #80]	; (37810 <sys_clock_tick_get+0x6c>)
   377c0:	4814      	ldr	r0, [pc, #80]	; (37814 <sys_clock_tick_get+0x70>)
   377c2:	2294      	movs	r2, #148	; 0x94
   377c4:	f001 f9a5 	bl	38b12 <assert_print>
   377c8:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   377ca:	4811      	ldr	r0, [pc, #68]	; (37810 <sys_clock_tick_get+0x6c>)
   377cc:	f001 f99a 	bl	38b04 <assert_post_action>
	z_spin_lock_set_owner(l);
   377d0:	480e      	ldr	r0, [pc, #56]	; (3780c <sys_clock_tick_get+0x68>)
   377d2:	f7fd fd59 	bl	35288 <z_spin_lock_set_owner>
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + elapsed();
   377d6:	f7ff fdb1 	bl	3733c <elapsed>
   377da:	4a0f      	ldr	r2, [pc, #60]	; (37818 <sys_clock_tick_get+0x74>)
   377dc:	e9d2 4500 	ldrd	r4, r5, [r2]
   377e0:	1904      	adds	r4, r0, r4
   377e2:	eb45 75e0 	adc.w	r5, r5, r0, asr #31
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   377e6:	4809      	ldr	r0, [pc, #36]	; (3780c <sys_clock_tick_get+0x68>)
   377e8:	f7fd fd3e 	bl	35268 <z_spin_unlock_valid>
   377ec:	b930      	cbnz	r0, 377fc <sys_clock_tick_get+0x58>
   377ee:	4908      	ldr	r1, [pc, #32]	; (37810 <sys_clock_tick_get+0x6c>)
   377f0:	4808      	ldr	r0, [pc, #32]	; (37814 <sys_clock_tick_get+0x70>)
   377f2:	22c2      	movs	r2, #194	; 0xc2
   377f4:	f001 f98d 	bl	38b12 <assert_print>
   377f8:	21c2      	movs	r1, #194	; 0xc2
   377fa:	e7e6      	b.n	377ca <sys_clock_tick_get+0x26>
	__asm__ volatile(
   377fc:	f386 8811 	msr	BASEPRI, r6
   37800:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   37804:	4620      	mov	r0, r4
   37806:	4629      	mov	r1, r5
   37808:	bd70      	pop	{r4, r5, r6, pc}
   3780a:	bf00      	nop
   3780c:	200033d4 	.word	0x200033d4
   37810:	0003d39d 	.word	0x0003d39d
   37814:	0003d1d7 	.word	0x0003d1d7
   37818:	20002d70 	.word	0x20002d70

0003781c <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   3781c:	b570      	push	{r4, r5, r6, lr}
   3781e:	4604      	mov	r4, r0
	__asm__ volatile(
   37820:	f04f 0340 	mov.w	r3, #64	; 0x40
   37824:	f3ef 8511 	mrs	r5, BASEPRI
   37828:	f383 8812 	msr	BASEPRI_MAX, r3
   3782c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   37830:	4844      	ldr	r0, [pc, #272]	; (37944 <z_timer_expiration_handler+0x128>)
   37832:	f7fd fd0b 	bl	3524c <z_spin_lock_valid>
   37836:	b940      	cbnz	r0, 3784a <z_timer_expiration_handler+0x2e>
   37838:	4943      	ldr	r1, [pc, #268]	; (37948 <z_timer_expiration_handler+0x12c>)
   3783a:	4844      	ldr	r0, [pc, #272]	; (3794c <z_timer_expiration_handler+0x130>)
   3783c:	2294      	movs	r2, #148	; 0x94
   3783e:	f001 f968 	bl	38b12 <assert_print>
   37842:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   37844:	4840      	ldr	r0, [pc, #256]	; (37948 <z_timer_expiration_handler+0x12c>)
   37846:	f001 f95d 	bl	38b04 <assert_post_action>
	z_spin_lock_set_owner(l);
   3784a:	483e      	ldr	r0, [pc, #248]	; (37944 <z_timer_expiration_handler+0x128>)
   3784c:	f7fd fd1c 	bl	35288 <z_spin_lock_set_owner>

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   37850:	e9d4 320a 	ldrd	r3, r2, [r4, #40]	; 0x28
   37854:	3301      	adds	r3, #1
   37856:	f142 0200 	adc.w	r2, r2, #0
   3785a:	2b02      	cmp	r3, #2
   3785c:	f172 0200 	sbcs.w	r2, r2, #0
   37860:	d322      	bcc.n	378a8 <z_timer_expiration_handler+0x8c>
	return z_impl_k_uptime_ticks();
   37862:	f004 fabb 	bl	3bddc <z_impl_k_uptime_ticks>
		 * we "should" have run.  Requires absolute timeouts.
		 * (Note offset by one: we're nominally at the
		 * beginning of a tick, so need to defeat the "round
		 * down" behavior on timeout addition).
		 */
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1
   37866:	e9d4 320a 	ldrd	r3, r2, [r4, #40]	; 0x28
   3786a:	3001      	adds	r0, #1
   3786c:	f141 0100 	adc.w	r1, r1, #0
   37870:	18c0      	adds	r0, r0, r3
   37872:	eb41 0102 	adc.w	r1, r1, r2
   37876:	2801      	cmp	r0, #1
   37878:	f171 0100 	sbcs.w	r1, r1, #0
   3787c:	db24      	blt.n	378c8 <z_timer_expiration_handler+0xac>
   3787e:	f004 faad 	bl	3bddc <z_impl_k_uptime_ticks>
   37882:	3001      	adds	r0, #1
   37884:	f141 0300 	adc.w	r3, r1, #0
   37888:	e9d4 210a 	ldrd	r2, r1, [r4, #40]	; 0x28
   3788c:	1880      	adds	r0, r0, r2
   3788e:	f06f 0201 	mvn.w	r2, #1
   37892:	eb43 0301 	adc.w	r3, r3, r1
   37896:	1a12      	subs	r2, r2, r0
   37898:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   3789c:	eb61 0303 	sbc.w	r3, r1, r3
					   + timer->period.ticks);
#endif
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   378a0:	492b      	ldr	r1, [pc, #172]	; (37950 <z_timer_expiration_handler+0x134>)
   378a2:	4620      	mov	r0, r4
   378a4:	f7ff fd98 	bl	373d8 <z_add_timeout>
			      next);
	}

	/* update timer's status */
	timer->status += 1U;
   378a8:	6b23      	ldr	r3, [r4, #48]	; 0x30
   378aa:	3301      	adds	r3, #1
   378ac:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   378ae:	6a23      	ldr	r3, [r4, #32]
   378b0:	b333      	cbz	r3, 37900 <z_timer_expiration_handler+0xe4>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   378b2:	4824      	ldr	r0, [pc, #144]	; (37944 <z_timer_expiration_handler+0x128>)
   378b4:	f7fd fcd8 	bl	35268 <z_spin_unlock_valid>
   378b8:	b958      	cbnz	r0, 378d2 <z_timer_expiration_handler+0xb6>
   378ba:	4923      	ldr	r1, [pc, #140]	; (37948 <z_timer_expiration_handler+0x12c>)
   378bc:	4823      	ldr	r0, [pc, #140]	; (3794c <z_timer_expiration_handler+0x130>)
   378be:	22c2      	movs	r2, #194	; 0xc2
   378c0:	f001 f927 	bl	38b12 <assert_print>
   378c4:	21c2      	movs	r1, #194	; 0xc2
   378c6:	e7bd      	b.n	37844 <z_timer_expiration_handler+0x28>
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1
   378c8:	f06f 0201 	mvn.w	r2, #1
   378cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   378d0:	e7e6      	b.n	378a0 <z_timer_expiration_handler+0x84>
	__asm__ volatile(
   378d2:	f385 8811 	msr	BASEPRI, r5
   378d6:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
   378da:	6a23      	ldr	r3, [r4, #32]
   378dc:	4620      	mov	r0, r4
   378de:	4798      	blx	r3
	__asm__ volatile(
   378e0:	f04f 0340 	mov.w	r3, #64	; 0x40
   378e4:	f3ef 8511 	mrs	r5, BASEPRI
   378e8:	f383 8812 	msr	BASEPRI_MAX, r3
   378ec:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   378f0:	4814      	ldr	r0, [pc, #80]	; (37944 <z_timer_expiration_handler+0x128>)
   378f2:	f7fd fcab 	bl	3524c <z_spin_lock_valid>
   378f6:	2800      	cmp	r0, #0
   378f8:	d09e      	beq.n	37838 <z_timer_expiration_handler+0x1c>
	z_spin_lock_set_owner(l);
   378fa:	4812      	ldr	r0, [pc, #72]	; (37944 <z_timer_expiration_handler+0x128>)
   378fc:	f7fd fcc4 	bl	35288 <z_spin_lock_set_owner>
	return list->head == list;
   37900:	f854 6f18 	ldr.w	r6, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   37904:	42a6      	cmp	r6, r4
   37906:	d000      	beq.n	3790a <z_timer_expiration_handler+0xee>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   37908:	b94e      	cbnz	r6, 3791e <z_timer_expiration_handler+0x102>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3790a:	480e      	ldr	r0, [pc, #56]	; (37944 <z_timer_expiration_handler+0x128>)
   3790c:	f7fd fcac 	bl	35268 <z_spin_unlock_valid>
   37910:	2800      	cmp	r0, #0
   37912:	d0d2      	beq.n	378ba <z_timer_expiration_handler+0x9e>
	__asm__ volatile(
   37914:	f385 8811 	msr	BASEPRI, r5
   37918:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
   3791c:	bd70      	pop	{r4, r5, r6, pc}
	z_unpend_thread_no_timeout(thread);
   3791e:	4630      	mov	r0, r6
   37920:	f7fe fdee 	bl	36500 <z_unpend_thread_no_timeout>
   37924:	2300      	movs	r3, #0
   37926:	4807      	ldr	r0, [pc, #28]	; (37944 <z_timer_expiration_handler+0x128>)
   37928:	67f3      	str	r3, [r6, #124]	; 0x7c
   3792a:	f7fd fc9d 	bl	35268 <z_spin_unlock_valid>
   3792e:	2800      	cmp	r0, #0
   37930:	d0c3      	beq.n	378ba <z_timer_expiration_handler+0x9e>
   37932:	f385 8811 	msr	BASEPRI, r5
   37936:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
   3793a:	4630      	mov	r0, r6
}
   3793c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_ready_thread(thread);
   37940:	f7fe bdaa 	b.w	36498 <z_ready_thread>
   37944:	200033d8 	.word	0x200033d8
   37948:	0003d39d 	.word	0x0003d39d
   3794c:	0003d1d7 	.word	0x0003d1d7
   37950:	0003781d 	.word	0x0003781d

00037954 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
   37954:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer, duration, period);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   37958:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   3795c:	bf08      	it	eq
   3795e:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
   37962:	4605      	mov	r5, r0
   37964:	4614      	mov	r4, r2
   37966:	e9dd 6008 	ldrd	r6, r0, [sp, #32]
   3796a:	4619      	mov	r1, r3
   3796c:	4691      	mov	r9, r2
   3796e:	4698      	mov	r8, r3
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   37970:	d037      	beq.n	379e2 <z_impl_k_timer_start+0x8e>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   37972:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   37976:	bf08      	it	eq
   37978:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
   3797c:	4637      	mov	r7, r6
   3797e:	4682      	mov	sl, r0
   37980:	d011      	beq.n	379a6 <z_impl_k_timer_start+0x52>
   37982:	ea50 0306 	orrs.w	r3, r0, r6
   37986:	d00e      	beq.n	379a6 <z_impl_k_timer_start+0x52>
   37988:	1c72      	adds	r2, r6, #1
   3798a:	f170 33ff 	sbcs.w	r3, r0, #4294967295	; 0xffffffff
   3798e:	db0a      	blt.n	379a6 <z_impl_k_timer_start+0x52>
	    Z_TICK_ABS(period.ticks) < 0) {
		period.ticks = MAX(period.ticks - 1, 1);
   37990:	2e02      	cmp	r6, #2
   37992:	4684      	mov	ip, r0
   37994:	f170 0000 	sbcs.w	r0, r0, #0
   37998:	bfbc      	itt	lt
   3799a:	2702      	movlt	r7, #2
   3799c:	f04f 0c00 	movlt.w	ip, #0
   379a0:	3f01      	subs	r7, #1
   379a2:	f14c 3aff 	adc.w	sl, ip, #4294967295	; 0xffffffff
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
   379a6:	1c63      	adds	r3, r4, #1
   379a8:	f171 33ff 	sbcs.w	r3, r1, #4294967295	; 0xffffffff
   379ac:	db0a      	blt.n	379c4 <z_impl_k_timer_start+0x70>
		duration.ticks = MAX(duration.ticks - 1, 0);
   379ae:	2c01      	cmp	r4, #1
   379b0:	f171 0300 	sbcs.w	r3, r1, #0
   379b4:	4622      	mov	r2, r4
   379b6:	bfbc      	itt	lt
   379b8:	2201      	movlt	r2, #1
   379ba:	2100      	movlt	r1, #0
   379bc:	f112 39ff 	adds.w	r9, r2, #4294967295	; 0xffffffff
   379c0:	f141 38ff 	adc.w	r8, r1, #4294967295	; 0xffffffff
	}

	(void)z_abort_timeout(&timer->timeout);
   379c4:	4628      	mov	r0, r5
   379c6:	f7ff fdb3 	bl	37530 <z_abort_timeout>
	timer->period = period;
   379ca:	e9c5 7a0a 	strd	r7, sl, [r5, #40]	; 0x28
	timer->status = 0U;
   379ce:	2300      	movs	r3, #0
   379d0:	632b      	str	r3, [r5, #48]	; 0x30

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   379d2:	464a      	mov	r2, r9
   379d4:	4643      	mov	r3, r8
   379d6:	4628      	mov	r0, r5
   379d8:	4903      	ldr	r1, [pc, #12]	; (379e8 <z_impl_k_timer_start+0x94>)
		     duration);
}
   379da:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   379de:	f7ff bcfb 	b.w	373d8 <z_add_timeout>
}
   379e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   379e6:	bf00      	nop
   379e8:	0003781d 	.word	0x0003781d

000379ec <register_events>:

static inline int register_events(struct k_poll_event *events,
				  int num_events,
				  struct z_poller *poller,
				  bool just_check)
{
   379ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int events_registered = 0;

	for (int ii = 0; ii < num_events; ii++) {
   379f0:	2500      	movs	r5, #0
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   379f2:	f8df 9194 	ldr.w	r9, [pc, #404]	; 37b88 <register_events+0x19c>
{
   379f6:	9301      	str	r3, [sp, #4]
   379f8:	460f      	mov	r7, r1
   379fa:	4614      	mov	r4, r2
	for (int ii = 0; ii < num_events; ii++) {
   379fc:	4680      	mov	r8, r0
	int events_registered = 0;
   379fe:	462e      	mov	r6, r5
	event->poller = NULL;
   37a00:	46aa      	mov	sl, r5
	for (int ii = 0; ii < num_events; ii++) {
   37a02:	42bd      	cmp	r5, r7
   37a04:	db03      	blt.n	37a0e <register_events+0x22>
		}
		k_spin_unlock(&lock, key);
	}

	return events_registered;
}
   37a06:	4630      	mov	r0, r6
   37a08:	b003      	add	sp, #12
   37a0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	__asm__ volatile(
   37a0e:	f04f 0340 	mov.w	r3, #64	; 0x40
   37a12:	f3ef 8b11 	mrs	fp, BASEPRI
   37a16:	f383 8812 	msr	BASEPRI_MAX, r3
   37a1a:	f3bf 8f6f 	isb	sy
   37a1e:	4648      	mov	r0, r9
   37a20:	f7fd fc14 	bl	3524c <z_spin_lock_valid>
   37a24:	b938      	cbnz	r0, 37a36 <register_events+0x4a>
   37a26:	4959      	ldr	r1, [pc, #356]	; (37b8c <register_events+0x1a0>)
   37a28:	4859      	ldr	r0, [pc, #356]	; (37b90 <register_events+0x1a4>)
   37a2a:	2294      	movs	r2, #148	; 0x94
   37a2c:	f001 f871 	bl	38b12 <assert_print>
   37a30:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   37a32:	4856      	ldr	r0, [pc, #344]	; (37b8c <register_events+0x1a0>)
   37a34:	e05b      	b.n	37aee <register_events+0x102>
	z_spin_lock_set_owner(l);
   37a36:	4648      	mov	r0, r9
   37a38:	f7fd fc26 	bl	35288 <z_spin_lock_set_owner>
	switch (event->type) {
   37a3c:	f898 300d 	ldrb.w	r3, [r8, #13]
   37a40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   37a44:	2b08      	cmp	r3, #8
   37a46:	d84b      	bhi.n	37ae0 <register_events+0xf4>
   37a48:	e8df f003 	tbb	[pc, r3]
   37a4c:	4a053c29 	.word	0x4a053c29
   37a50:	4a4a4a25 	.word	0x4a4a4a25
   37a54:	43          	.byte	0x43
   37a55:	00          	.byte	0x00
		if (k_sem_count_get(event->sem) > 0U) {
   37a56:	f8d8 3010 	ldr.w	r3, [r8, #16]
   37a5a:	689b      	ldr	r3, [r3, #8]
   37a5c:	b1fb      	cbz	r3, 37a9e <register_events+0xb2>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   37a5e:	2302      	movs	r3, #2
	event->state |= state;
   37a60:	f8d8 200c 	ldr.w	r2, [r8, #12]
	event->poller = NULL;
   37a64:	f8c8 a008 	str.w	sl, [r8, #8]
	event->state |= state;
   37a68:	f3c2 3086 	ubfx	r0, r2, #14, #7
   37a6c:	4303      	orrs	r3, r0
   37a6e:	f363 3294 	bfi	r2, r3, #14, #7
   37a72:	f8c8 200c 	str.w	r2, [r8, #12]
			poller->is_polling = false;
   37a76:	f884 a000 	strb.w	sl, [r4]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   37a7a:	4648      	mov	r0, r9
   37a7c:	f7fd fbf4 	bl	35268 <z_spin_unlock_valid>
   37a80:	f108 0814 	add.w	r8, r8, #20
   37a84:	2800      	cmp	r0, #0
   37a86:	d179      	bne.n	37b7c <register_events+0x190>
   37a88:	4940      	ldr	r1, [pc, #256]	; (37b8c <register_events+0x1a0>)
   37a8a:	4841      	ldr	r0, [pc, #260]	; (37b90 <register_events+0x1a4>)
   37a8c:	22c2      	movs	r2, #194	; 0xc2
   37a8e:	f001 f840 	bl	38b12 <assert_print>
   37a92:	21c2      	movs	r1, #194	; 0xc2
   37a94:	e7cd      	b.n	37a32 <register_events+0x46>
		if (!k_queue_is_empty(event->queue)) {
   37a96:	f8d8 3010 	ldr.w	r3, [r8, #16]
   37a9a:	681b      	ldr	r3, [r3, #0]
   37a9c:	bb4b      	cbnz	r3, 37af2 <register_events+0x106>
		} else if (!just_check && poller->is_polling) {
   37a9e:	9b01      	ldr	r3, [sp, #4]
   37aa0:	2b00      	cmp	r3, #0
   37aa2:	d1ea      	bne.n	37a7a <register_events+0x8e>
   37aa4:	7823      	ldrb	r3, [r4, #0]
   37aa6:	2b00      	cmp	r3, #0
   37aa8:	d0e7      	beq.n	37a7a <register_events+0x8e>
	switch (event->type) {
   37aaa:	f898 300d 	ldrb.w	r3, [r8, #13]
   37aae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   37ab2:	2b08      	cmp	r3, #8
   37ab4:	d85b      	bhi.n	37b6e <register_events+0x182>
   37ab6:	e8df f003 	tbb	[pc, r3]
   37aba:	3f2d      	.short	0x3f2d
   37abc:	5a315a1e 	.word	0x5a315a1e
   37ac0:	5a5a      	.short	0x5a5a
   37ac2:	4c          	.byte	0x4c
   37ac3:	00          	.byte	0x00
		if (event->signal->signaled != 0U) {
   37ac4:	f8d8 3010 	ldr.w	r3, [r8, #16]
   37ac8:	689b      	ldr	r3, [r3, #8]
   37aca:	2b00      	cmp	r3, #0
   37acc:	d0e7      	beq.n	37a9e <register_events+0xb2>
			*state = K_POLL_STATE_SIGNALED;
   37ace:	2301      	movs	r3, #1
   37ad0:	e7c6      	b.n	37a60 <register_events+0x74>
		if (event->msgq->used_msgs > 0) {
   37ad2:	f8d8 3010 	ldr.w	r3, [r8, #16]
   37ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   37ad8:	2b00      	cmp	r3, #0
   37ada:	d0e0      	beq.n	37a9e <register_events+0xb2>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
   37adc:	2310      	movs	r3, #16
   37ade:	e7bf      	b.n	37a60 <register_events+0x74>
		__ASSERT(false, "invalid event type (0x%x)\n", event->type);
   37ae0:	492c      	ldr	r1, [pc, #176]	; (37b94 <register_events+0x1a8>)
   37ae2:	482b      	ldr	r0, [pc, #172]	; (37b90 <register_events+0x1a4>)
   37ae4:	2263      	movs	r2, #99	; 0x63
   37ae6:	f001 f814 	bl	38b12 <assert_print>
   37aea:	2163      	movs	r1, #99	; 0x63
   37aec:	4829      	ldr	r0, [pc, #164]	; (37b94 <register_events+0x1a8>)
   37aee:	f001 f809 	bl	38b04 <assert_post_action>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   37af2:	2304      	movs	r3, #4
   37af4:	e7b4      	b.n	37a60 <register_events+0x74>
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   37af6:	f8d8 0010 	ldr.w	r0, [r8, #16]
   37afa:	b930      	cbnz	r0, 37b0a <register_events+0x11e>
   37afc:	4925      	ldr	r1, [pc, #148]	; (37b94 <register_events+0x1a8>)
   37afe:	4824      	ldr	r0, [pc, #144]	; (37b90 <register_events+0x1a4>)
   37b00:	228d      	movs	r2, #141	; 0x8d
   37b02:	f001 f806 	bl	38b12 <assert_print>
   37b06:	218d      	movs	r1, #141	; 0x8d
   37b08:	e7f0      	b.n	37aec <register_events+0x100>
		add_event(&event->sem->poll_events, event, poller);
   37b0a:	4622      	mov	r2, r4
   37b0c:	4641      	mov	r1, r8
   37b0e:	3010      	adds	r0, #16
		add_event(&event->msgq->poll_events, event, poller);
   37b10:	f004 f9b5 	bl	3be7e <add_event>
	event->poller = poller;
   37b14:	f8c8 4008 	str.w	r4, [r8, #8]
			events_registered += 1;
   37b18:	3601      	adds	r6, #1
   37b1a:	e7ae      	b.n	37a7a <register_events+0x8e>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   37b1c:	f8d8 0010 	ldr.w	r0, [r8, #16]
   37b20:	b930      	cbnz	r0, 37b30 <register_events+0x144>
   37b22:	491c      	ldr	r1, [pc, #112]	; (37b94 <register_events+0x1a8>)
   37b24:	481a      	ldr	r0, [pc, #104]	; (37b90 <register_events+0x1a4>)
   37b26:	2291      	movs	r2, #145	; 0x91
   37b28:	f000 fff3 	bl	38b12 <assert_print>
   37b2c:	2191      	movs	r1, #145	; 0x91
   37b2e:	e7dd      	b.n	37aec <register_events+0x100>
		add_event(&event->queue->poll_events, event, poller);
   37b30:	4622      	mov	r2, r4
   37b32:	4641      	mov	r1, r8
   37b34:	3014      	adds	r0, #20
   37b36:	e7eb      	b.n	37b10 <register_events+0x124>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   37b38:	f8d8 0010 	ldr.w	r0, [r8, #16]
   37b3c:	b930      	cbnz	r0, 37b4c <register_events+0x160>
   37b3e:	4915      	ldr	r1, [pc, #84]	; (37b94 <register_events+0x1a8>)
   37b40:	4813      	ldr	r0, [pc, #76]	; (37b90 <register_events+0x1a4>)
   37b42:	2295      	movs	r2, #149	; 0x95
   37b44:	f000 ffe5 	bl	38b12 <assert_print>
   37b48:	2195      	movs	r1, #149	; 0x95
   37b4a:	e7cf      	b.n	37aec <register_events+0x100>
		add_event(&event->signal->poll_events, event, poller);
   37b4c:	4622      	mov	r2, r4
   37b4e:	4641      	mov	r1, r8
   37b50:	e7de      	b.n	37b10 <register_events+0x124>
		__ASSERT(event->msgq != NULL, "invalid message queue\n");
   37b52:	f8d8 0010 	ldr.w	r0, [r8, #16]
   37b56:	b930      	cbnz	r0, 37b66 <register_events+0x17a>
   37b58:	490e      	ldr	r1, [pc, #56]	; (37b94 <register_events+0x1a8>)
   37b5a:	480d      	ldr	r0, [pc, #52]	; (37b90 <register_events+0x1a4>)
   37b5c:	2299      	movs	r2, #153	; 0x99
   37b5e:	f000 ffd8 	bl	38b12 <assert_print>
   37b62:	2199      	movs	r1, #153	; 0x99
   37b64:	e7c2      	b.n	37aec <register_events+0x100>
		add_event(&event->msgq->poll_events, event, poller);
   37b66:	4622      	mov	r2, r4
   37b68:	4641      	mov	r1, r8
   37b6a:	3028      	adds	r0, #40	; 0x28
   37b6c:	e7d0      	b.n	37b10 <register_events+0x124>
		__ASSERT(false, "invalid event type\n");
   37b6e:	4909      	ldr	r1, [pc, #36]	; (37b94 <register_events+0x1a8>)
   37b70:	4807      	ldr	r0, [pc, #28]	; (37b90 <register_events+0x1a4>)
   37b72:	22a6      	movs	r2, #166	; 0xa6
   37b74:	f000 ffcd 	bl	38b12 <assert_print>
   37b78:	21a6      	movs	r1, #166	; 0xa6
   37b7a:	e7b7      	b.n	37aec <register_events+0x100>
	__asm__ volatile(
   37b7c:	f38b 8811 	msr	BASEPRI, fp
   37b80:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   37b84:	3501      	adds	r5, #1
   37b86:	e73c      	b.n	37a02 <register_events+0x16>
   37b88:	200033dc 	.word	0x200033dc
   37b8c:	0003d39d 	.word	0x0003d39d
   37b90:	0003d1d7 	.word	0x0003d1d7
   37b94:	0003fded 	.word	0x0003fded

00037b98 <clear_event_registrations>:
{
   37b98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   37b9c:	2314      	movs	r3, #20
   37b9e:	4f3e      	ldr	r7, [pc, #248]	; (37c98 <clear_event_registrations+0x100>)
   37ba0:	4615      	mov	r5, r2
	while (num_events--) {
   37ba2:	460c      	mov	r4, r1
   37ba4:	fb03 0001 	mla	r0, r3, r1, r0
	event->poller = NULL;
   37ba8:	2600      	movs	r6, #0
	while (num_events--) {
   37baa:	b90c      	cbnz	r4, 37bb0 <clear_event_registrations+0x18>
}
   37bac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (event->type) {
   37bb0:	f810 3c07 	ldrb.w	r3, [r0, #-7]
	event->poller = NULL;
   37bb4:	f840 6c0c 	str.w	r6, [r0, #-12]
	switch (event->type) {
   37bb8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   37bbc:	f1a0 0814 	sub.w	r8, r0, #20
   37bc0:	2b08      	cmp	r3, #8
   37bc2:	d830      	bhi.n	37c26 <clear_event_registrations+0x8e>
   37bc4:	e8df f003 	tbb	[pc, r3]
   37bc8:	2f051b3f 	.word	0x2f051b3f
   37bcc:	2f2f2f11 	.word	0x2f2f2f11
   37bd0:	25          	.byte	0x25
   37bd1:	00          	.byte	0x00
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   37bd2:	f850 3c04 	ldr.w	r3, [r0, #-4]
   37bd6:	bb6b      	cbnz	r3, 37c34 <clear_event_registrations+0x9c>
   37bd8:	4930      	ldr	r1, [pc, #192]	; (37c9c <clear_event_registrations+0x104>)
   37bda:	4831      	ldr	r0, [pc, #196]	; (37ca0 <clear_event_registrations+0x108>)
   37bdc:	22b6      	movs	r2, #182	; 0xb6
   37bde:	f000 ff98 	bl	38b12 <assert_print>
   37be2:	21b6      	movs	r1, #182	; 0xb6
		__ASSERT(event->queue != NULL, "invalid queue\n");
   37be4:	482d      	ldr	r0, [pc, #180]	; (37c9c <clear_event_registrations+0x104>)
   37be6:	f000 ff8d 	bl	38b04 <assert_post_action>
   37bea:	f850 3c04 	ldr.w	r3, [r0, #-4]
   37bee:	bb0b      	cbnz	r3, 37c34 <clear_event_registrations+0x9c>
   37bf0:	492a      	ldr	r1, [pc, #168]	; (37c9c <clear_event_registrations+0x104>)
   37bf2:	482b      	ldr	r0, [pc, #172]	; (37ca0 <clear_event_registrations+0x108>)
   37bf4:	22ba      	movs	r2, #186	; 0xba
   37bf6:	f000 ff8c 	bl	38b12 <assert_print>
   37bfa:	21ba      	movs	r1, #186	; 0xba
   37bfc:	e7f2      	b.n	37be4 <clear_event_registrations+0x4c>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   37bfe:	f850 3c04 	ldr.w	r3, [r0, #-4]
   37c02:	b9bb      	cbnz	r3, 37c34 <clear_event_registrations+0x9c>
   37c04:	4925      	ldr	r1, [pc, #148]	; (37c9c <clear_event_registrations+0x104>)
   37c06:	4826      	ldr	r0, [pc, #152]	; (37ca0 <clear_event_registrations+0x108>)
   37c08:	22be      	movs	r2, #190	; 0xbe
   37c0a:	f000 ff82 	bl	38b12 <assert_print>
   37c0e:	21be      	movs	r1, #190	; 0xbe
   37c10:	e7e8      	b.n	37be4 <clear_event_registrations+0x4c>
		__ASSERT(event->msgq != NULL, "invalid message queue\n");
   37c12:	f850 3c04 	ldr.w	r3, [r0, #-4]
   37c16:	b96b      	cbnz	r3, 37c34 <clear_event_registrations+0x9c>
   37c18:	4920      	ldr	r1, [pc, #128]	; (37c9c <clear_event_registrations+0x104>)
   37c1a:	4821      	ldr	r0, [pc, #132]	; (37ca0 <clear_event_registrations+0x108>)
   37c1c:	22c2      	movs	r2, #194	; 0xc2
   37c1e:	f000 ff78 	bl	38b12 <assert_print>
   37c22:	21c2      	movs	r1, #194	; 0xc2
   37c24:	e7de      	b.n	37be4 <clear_event_registrations+0x4c>
		__ASSERT(false, "invalid event type\n");
   37c26:	491d      	ldr	r1, [pc, #116]	; (37c9c <clear_event_registrations+0x104>)
   37c28:	481d      	ldr	r0, [pc, #116]	; (37ca0 <clear_event_registrations+0x108>)
   37c2a:	22cf      	movs	r2, #207	; 0xcf
   37c2c:	f000 ff71 	bl	38b12 <assert_print>
   37c30:	21cf      	movs	r1, #207	; 0xcf
   37c32:	e7d7      	b.n	37be4 <clear_event_registrations+0x4c>
	return node->next != NULL;
   37c34:	f850 3c14 	ldr.w	r3, [r0, #-20]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   37c38:	b12b      	cbz	r3, 37c46 <clear_event_registrations+0xae>
	sys_dnode_t *const prev = node->prev;
   37c3a:	f850 2c10 	ldr.w	r2, [r0, #-16]
	prev->next = next;
   37c3e:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   37c40:	605a      	str	r2, [r3, #4]
	node->prev = NULL;
   37c42:	e940 6605 	strd	r6, r6, [r0, #-20]
   37c46:	4638      	mov	r0, r7
   37c48:	f7fd fb0e 	bl	35268 <z_spin_unlock_valid>
   37c4c:	b938      	cbnz	r0, 37c5e <clear_event_registrations+0xc6>
   37c4e:	4915      	ldr	r1, [pc, #84]	; (37ca4 <clear_event_registrations+0x10c>)
   37c50:	4813      	ldr	r0, [pc, #76]	; (37ca0 <clear_event_registrations+0x108>)
   37c52:	22c2      	movs	r2, #194	; 0xc2
   37c54:	f000 ff5d 	bl	38b12 <assert_print>
   37c58:	21c2      	movs	r1, #194	; 0xc2
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   37c5a:	4812      	ldr	r0, [pc, #72]	; (37ca4 <clear_event_registrations+0x10c>)
   37c5c:	e7c3      	b.n	37be6 <clear_event_registrations+0x4e>
   37c5e:	f385 8811 	msr	BASEPRI, r5
   37c62:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   37c66:	f04f 0340 	mov.w	r3, #64	; 0x40
   37c6a:	f3ef 8511 	mrs	r5, BASEPRI
   37c6e:	f383 8812 	msr	BASEPRI_MAX, r3
   37c72:	f3bf 8f6f 	isb	sy
   37c76:	4638      	mov	r0, r7
   37c78:	f7fd fae8 	bl	3524c <z_spin_lock_valid>
   37c7c:	3c01      	subs	r4, #1
   37c7e:	b930      	cbnz	r0, 37c8e <clear_event_registrations+0xf6>
   37c80:	4908      	ldr	r1, [pc, #32]	; (37ca4 <clear_event_registrations+0x10c>)
   37c82:	4807      	ldr	r0, [pc, #28]	; (37ca0 <clear_event_registrations+0x108>)
   37c84:	2294      	movs	r2, #148	; 0x94
   37c86:	f000 ff44 	bl	38b12 <assert_print>
   37c8a:	2194      	movs	r1, #148	; 0x94
   37c8c:	e7e5      	b.n	37c5a <clear_event_registrations+0xc2>
	z_spin_lock_set_owner(l);
   37c8e:	4638      	mov	r0, r7
   37c90:	f7fd fafa 	bl	35288 <z_spin_lock_set_owner>
	return k;
   37c94:	4640      	mov	r0, r8
   37c96:	e788      	b.n	37baa <clear_event_registrations+0x12>
   37c98:	200033dc 	.word	0x200033dc
   37c9c:	0003fded 	.word	0x0003fded
   37ca0:	0003d1d7 	.word	0x0003d1d7
   37ca4:	0003d39d 	.word	0x0003d39d

00037ca8 <k_poll_event_init>:
{
   37ca8:	b508      	push	{r3, lr}
	__ASSERT(mode == K_POLL_MODE_NOTIFY_ONLY,
   37caa:	b142      	cbz	r2, 37cbe <k_poll_event_init+0x16>
   37cac:	4911      	ldr	r1, [pc, #68]	; (37cf4 <k_poll_event_init+0x4c>)
   37cae:	4812      	ldr	r0, [pc, #72]	; (37cf8 <k_poll_event_init+0x50>)
   37cb0:	222d      	movs	r2, #45	; 0x2d
   37cb2:	f000 ff2e 	bl	38b12 <assert_print>
   37cb6:	212d      	movs	r1, #45	; 0x2d
	__ASSERT(type < (BIT(_POLL_NUM_TYPES)), "invalid type\n");
   37cb8:	480e      	ldr	r0, [pc, #56]	; (37cf4 <k_poll_event_init+0x4c>)
   37cba:	f000 ff23 	bl	38b04 <assert_post_action>
   37cbe:	293f      	cmp	r1, #63	; 0x3f
   37cc0:	d906      	bls.n	37cd0 <k_poll_event_init+0x28>
   37cc2:	490c      	ldr	r1, [pc, #48]	; (37cf4 <k_poll_event_init+0x4c>)
   37cc4:	480c      	ldr	r0, [pc, #48]	; (37cf8 <k_poll_event_init+0x50>)
   37cc6:	222f      	movs	r2, #47	; 0x2f
   37cc8:	f000 ff23 	bl	38b12 <assert_print>
   37ccc:	212f      	movs	r1, #47	; 0x2f
   37cce:	e7f3      	b.n	37cb8 <k_poll_event_init+0x10>
	__ASSERT(obj != NULL, "must provide an object\n");
   37cd0:	b933      	cbnz	r3, 37ce0 <k_poll_event_init+0x38>
   37cd2:	4908      	ldr	r1, [pc, #32]	; (37cf4 <k_poll_event_init+0x4c>)
   37cd4:	4808      	ldr	r0, [pc, #32]	; (37cf8 <k_poll_event_init+0x50>)
   37cd6:	2230      	movs	r2, #48	; 0x30
   37cd8:	f000 ff1b 	bl	38b12 <assert_print>
   37cdc:	2130      	movs	r1, #48	; 0x30
   37cde:	e7eb      	b.n	37cb8 <k_poll_event_init+0x10>
	event->poller = NULL;
   37ce0:	6082      	str	r2, [r0, #8]
	event->type = type;
   37ce2:	0209      	lsls	r1, r1, #8
   37ce4:	7b02      	ldrb	r2, [r0, #12]
   37ce6:	f401 517c 	and.w	r1, r1, #16128	; 0x3f00
   37cea:	4311      	orrs	r1, r2
	event->obj = obj;
   37cec:	e9c0 1303 	strd	r1, r3, [r0, #12]
}
   37cf0:	bd08      	pop	{r3, pc}
   37cf2:	bf00      	nop
   37cf4:	0003fded 	.word	0x0003fded
   37cf8:	0003d1d7 	.word	0x0003d1d7

00037cfc <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   37cfc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   37d00:	461e      	mov	r6, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   37d02:	4b51      	ldr	r3, [pc, #324]	; (37e48 <z_impl_k_poll+0x14c>)
   37d04:	f8d3 8008 	ldr.w	r8, [r3, #8]

	poller->is_polling = true;
   37d08:	2301      	movs	r3, #1
{
   37d0a:	4617      	mov	r7, r2
   37d0c:	4605      	mov	r5, r0
	struct z_poller *poller = &_current->poller;
   37d0e:	f108 0260 	add.w	r2, r8, #96	; 0x60
	poller->is_polling = true;
   37d12:	f888 3060 	strb.w	r3, [r8, #96]	; 0x60
	poller->mode = MODE_POLL;
   37d16:	f888 3061 	strb.w	r3, [r8, #97]	; 0x61
   37d1a:	f3ef 8b05 	mrs	fp, IPSR

	__ASSERT(!arch_is_in_isr(), "");
   37d1e:	f1bb 0f00 	cmp.w	fp, #0
   37d22:	d00a      	beq.n	37d3a <z_impl_k_poll+0x3e>
   37d24:	4949      	ldr	r1, [pc, #292]	; (37e4c <z_impl_k_poll+0x150>)
   37d26:	484a      	ldr	r0, [pc, #296]	; (37e50 <z_impl_k_poll+0x154>)
   37d28:	f240 122d 	movw	r2, #301	; 0x12d
   37d2c:	f000 fef1 	bl	38b12 <assert_print>
   37d30:	f240 112d 	movw	r1, #301	; 0x12d
	__ASSERT(events != NULL, "NULL events\n");
   37d34:	4845      	ldr	r0, [pc, #276]	; (37e4c <z_impl_k_poll+0x150>)
   37d36:	f000 fee5 	bl	38b04 <assert_post_action>
   37d3a:	b940      	cbnz	r0, 37d4e <z_impl_k_poll+0x52>
   37d3c:	4943      	ldr	r1, [pc, #268]	; (37e4c <z_impl_k_poll+0x150>)
   37d3e:	4844      	ldr	r0, [pc, #272]	; (37e50 <z_impl_k_poll+0x154>)
   37d40:	f44f 7297 	mov.w	r2, #302	; 0x12e
   37d44:	f000 fee5 	bl	38b12 <assert_print>
   37d48:	f44f 7197 	mov.w	r1, #302	; 0x12e
   37d4c:	e7f2      	b.n	37d34 <z_impl_k_poll+0x38>
	__ASSERT(num_events >= 0, "<0 events\n");
   37d4e:	2900      	cmp	r1, #0
   37d50:	da08      	bge.n	37d64 <z_impl_k_poll+0x68>
   37d52:	493e      	ldr	r1, [pc, #248]	; (37e4c <z_impl_k_poll+0x150>)
   37d54:	483e      	ldr	r0, [pc, #248]	; (37e50 <z_impl_k_poll+0x154>)
   37d56:	f240 122f 	movw	r2, #303	; 0x12f
   37d5a:	f000 feda 	bl	38b12 <assert_print>
   37d5e:	f240 112f 	movw	r1, #303	; 0x12f
   37d62:	e7e7      	b.n	37d34 <z_impl_k_poll+0x38>

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
   37d64:	ea57 0306 	orrs.w	r3, r7, r6
   37d68:	bf0c      	ite	eq
   37d6a:	2301      	moveq	r3, #1
   37d6c:	2300      	movne	r3, #0
   37d6e:	f7ff fe3d 	bl	379ec <register_events>
   37d72:	4681      	mov	r9, r0
   37d74:	f04f 0340 	mov.w	r3, #64	; 0x40
   37d78:	f3ef 8a11 	mrs	sl, BASEPRI
   37d7c:	f383 8812 	msr	BASEPRI_MAX, r3
   37d80:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   37d84:	4833      	ldr	r0, [pc, #204]	; (37e54 <z_impl_k_poll+0x158>)
   37d86:	f7fd fa61 	bl	3524c <z_spin_lock_valid>
   37d8a:	b938      	cbnz	r0, 37d9c <z_impl_k_poll+0xa0>
   37d8c:	4932      	ldr	r1, [pc, #200]	; (37e58 <z_impl_k_poll+0x15c>)
   37d8e:	4830      	ldr	r0, [pc, #192]	; (37e50 <z_impl_k_poll+0x154>)
   37d90:	2294      	movs	r2, #148	; 0x94
   37d92:	f000 febe 	bl	38b12 <assert_print>
   37d96:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   37d98:	482f      	ldr	r0, [pc, #188]	; (37e58 <z_impl_k_poll+0x15c>)
   37d9a:	e7cc      	b.n	37d36 <z_impl_k_poll+0x3a>
	z_spin_lock_set_owner(l);
   37d9c:	482d      	ldr	r0, [pc, #180]	; (37e54 <z_impl_k_poll+0x158>)
   37d9e:	f7fd fa73 	bl	35288 <z_spin_lock_set_owner>
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   37da2:	f898 4060 	ldrb.w	r4, [r8, #96]	; 0x60
   37da6:	b9bc      	cbnz	r4, 37dd8 <z_impl_k_poll+0xdc>
		clear_event_registrations(events, events_registered, key);
   37da8:	4628      	mov	r0, r5
   37daa:	4652      	mov	r2, sl
   37dac:	4649      	mov	r1, r9
   37dae:	f7ff fef3 	bl	37b98 <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   37db2:	4828      	ldr	r0, [pc, #160]	; (37e54 <z_impl_k_poll+0x158>)
   37db4:	f7fd fa58 	bl	35268 <z_spin_unlock_valid>
   37db8:	b930      	cbnz	r0, 37dc8 <z_impl_k_poll+0xcc>
   37dba:	4927      	ldr	r1, [pc, #156]	; (37e58 <z_impl_k_poll+0x15c>)
   37dbc:	4824      	ldr	r0, [pc, #144]	; (37e50 <z_impl_k_poll+0x154>)
   37dbe:	22c2      	movs	r2, #194	; 0xc2
   37dc0:	f000 fea7 	bl	38b12 <assert_print>
   37dc4:	21c2      	movs	r1, #194	; 0xc2
   37dc6:	e7e7      	b.n	37d98 <z_impl_k_poll+0x9c>
	__asm__ volatile(
   37dc8:	f38a 8811 	msr	BASEPRI, sl
   37dcc:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
   37dd0:	4620      	mov	r0, r4
   37dd2:	b003      	add	sp, #12
   37dd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   37dd8:	ea57 0306 	orrs.w	r3, r7, r6
	poller->is_polling = false;
   37ddc:	f888 b060 	strb.w	fp, [r8, #96]	; 0x60
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   37de0:	d10b      	bne.n	37dfa <z_impl_k_poll+0xfe>
   37de2:	481c      	ldr	r0, [pc, #112]	; (37e54 <z_impl_k_poll+0x158>)
   37de4:	f7fd fa40 	bl	35268 <z_spin_unlock_valid>
   37de8:	2800      	cmp	r0, #0
   37dea:	d0e6      	beq.n	37dba <z_impl_k_poll+0xbe>
   37dec:	f38a 8811 	msr	BASEPRI, sl
   37df0:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   37df4:	f06f 040a 	mvn.w	r4, #10
   37df8:	e7ea      	b.n	37dd0 <z_impl_k_poll+0xd4>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   37dfa:	e9cd 7600 	strd	r7, r6, [sp]
   37dfe:	4a17      	ldr	r2, [pc, #92]	; (37e5c <z_impl_k_poll+0x160>)
   37e00:	4814      	ldr	r0, [pc, #80]	; (37e54 <z_impl_k_poll+0x158>)
   37e02:	4651      	mov	r1, sl
   37e04:	f7fe fe04 	bl	36a10 <z_pend_curr>
   37e08:	4604      	mov	r4, r0
	__asm__ volatile(
   37e0a:	f04f 0340 	mov.w	r3, #64	; 0x40
   37e0e:	f3ef 8611 	mrs	r6, BASEPRI
   37e12:	f383 8812 	msr	BASEPRI_MAX, r3
   37e16:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   37e1a:	480e      	ldr	r0, [pc, #56]	; (37e54 <z_impl_k_poll+0x158>)
   37e1c:	f7fd fa16 	bl	3524c <z_spin_lock_valid>
   37e20:	2800      	cmp	r0, #0
   37e22:	d0b3      	beq.n	37d8c <z_impl_k_poll+0x90>
	z_spin_lock_set_owner(l);
   37e24:	480b      	ldr	r0, [pc, #44]	; (37e54 <z_impl_k_poll+0x158>)
   37e26:	f7fd fa2f 	bl	35288 <z_spin_lock_set_owner>
	clear_event_registrations(events, events_registered, key);
   37e2a:	4628      	mov	r0, r5
   37e2c:	4632      	mov	r2, r6
   37e2e:	4649      	mov	r1, r9
   37e30:	f7ff feb2 	bl	37b98 <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   37e34:	4807      	ldr	r0, [pc, #28]	; (37e54 <z_impl_k_poll+0x158>)
   37e36:	f7fd fa17 	bl	35268 <z_spin_unlock_valid>
   37e3a:	2800      	cmp	r0, #0
   37e3c:	d0bd      	beq.n	37dba <z_impl_k_poll+0xbe>
	__asm__ volatile(
   37e3e:	f386 8811 	msr	BASEPRI, r6
   37e42:	f3bf 8f6f 	isb	sy
	return swap_rc;
   37e46:	e7c3      	b.n	37dd0 <z_impl_k_poll+0xd4>
   37e48:	20003384 	.word	0x20003384
   37e4c:	0003fded 	.word	0x0003fded
   37e50:	0003d1d7 	.word	0x0003d1d7
   37e54:	200033dc 	.word	0x200033dc
   37e58:	0003d39d 	.word	0x0003d39d
   37e5c:	200008fc 	.word	0x200008fc

00037e60 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
   37e60:	b570      	push	{r4, r5, r6, lr}
   37e62:	4604      	mov	r4, r0
   37e64:	460d      	mov	r5, r1
	__asm__ volatile(
   37e66:	f04f 0340 	mov.w	r3, #64	; 0x40
   37e6a:	f3ef 8611 	mrs	r6, BASEPRI
   37e6e:	f383 8812 	msr	BASEPRI_MAX, r3
   37e72:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   37e76:	481b      	ldr	r0, [pc, #108]	; (37ee4 <z_impl_k_poll_signal_raise+0x84>)
   37e78:	f7fd f9e8 	bl	3524c <z_spin_lock_valid>
   37e7c:	b940      	cbnz	r0, 37e90 <z_impl_k_poll_signal_raise+0x30>
   37e7e:	491a      	ldr	r1, [pc, #104]	; (37ee8 <z_impl_k_poll_signal_raise+0x88>)
   37e80:	481a      	ldr	r0, [pc, #104]	; (37eec <z_impl_k_poll_signal_raise+0x8c>)
   37e82:	2294      	movs	r2, #148	; 0x94
   37e84:	f000 fe45 	bl	38b12 <assert_print>
   37e88:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   37e8a:	4817      	ldr	r0, [pc, #92]	; (37ee8 <z_impl_k_poll_signal_raise+0x88>)
   37e8c:	f000 fe3a 	bl	38b04 <assert_post_action>
	z_spin_lock_set_owner(l);
   37e90:	4814      	ldr	r0, [pc, #80]	; (37ee4 <z_impl_k_poll_signal_raise+0x84>)
   37e92:	f7fd f9f9 	bl	35288 <z_spin_lock_set_owner>
	return list->head == list;
   37e96:	6820      	ldr	r0, [r4, #0]
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
   37e98:	60e5      	str	r5, [r4, #12]
	sig->signaled = 1U;
   37e9a:	2101      	movs	r1, #1

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   37e9c:	4284      	cmp	r4, r0
   37e9e:	60a1      	str	r1, [r4, #8]
   37ea0:	d10a      	bne.n	37eb8 <z_impl_k_poll_signal_raise+0x58>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   37ea2:	4810      	ldr	r0, [pc, #64]	; (37ee4 <z_impl_k_poll_signal_raise+0x84>)
   37ea4:	f7fd f9e0 	bl	35268 <z_spin_unlock_valid>
   37ea8:	b9b0      	cbnz	r0, 37ed8 <z_impl_k_poll_signal_raise+0x78>
   37eaa:	490f      	ldr	r1, [pc, #60]	; (37ee8 <z_impl_k_poll_signal_raise+0x88>)
   37eac:	480f      	ldr	r0, [pc, #60]	; (37eec <z_impl_k_poll_signal_raise+0x8c>)
   37eae:	22c2      	movs	r2, #194	; 0xc2
   37eb0:	f000 fe2f 	bl	38b12 <assert_print>
   37eb4:	21c2      	movs	r1, #194	; 0xc2
   37eb6:	e7e8      	b.n	37e8a <z_impl_k_poll_signal_raise+0x2a>
	sys_dnode_t *const next = node->next;
   37eb8:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   37ebc:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   37ebe:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   37ec0:	2300      	movs	r3, #0
	node->prev = NULL;
   37ec2:	e9c0 3300 	strd	r3, r3, [r0]
		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
	}

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   37ec6:	f004 f80b 	bl	3bee0 <signal_poll_event>

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
   37eca:	4631      	mov	r1, r6
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   37ecc:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   37ece:	4805      	ldr	r0, [pc, #20]	; (37ee4 <z_impl_k_poll_signal_raise+0x84>)
   37ed0:	f7fe fb4a 	bl	36568 <z_reschedule>
	return rc;
}
   37ed4:	4620      	mov	r0, r4
   37ed6:	bd70      	pop	{r4, r5, r6, pc}
	__asm__ volatile(
   37ed8:	f386 8811 	msr	BASEPRI, r6
   37edc:	f3bf 8f6f 	isb	sy
		return 0;
   37ee0:	2400      	movs	r4, #0
   37ee2:	e7f7      	b.n	37ed4 <z_impl_k_poll_signal_raise+0x74>
   37ee4:	200033dc 	.word	0x200033dc
   37ee8:	0003d39d 	.word	0x0003d39d
   37eec:	0003d1d7 	.word	0x0003d1d7

00037ef0 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   37ef0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   37ef2:	4605      	mov	r5, r0
   37ef4:	460e      	mov	r6, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   37ef6:	f003 fe7e 	bl	3bbf6 <k_is_in_isr>
   37efa:	b9f0      	cbnz	r0, 37f3a <z_thread_aligned_alloc+0x4a>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   37efc:	4b11      	ldr	r3, [pc, #68]	; (37f44 <z_thread_aligned_alloc+0x54>)
   37efe:	689b      	ldr	r3, [r3, #8]
   37f00:	6f5c      	ldr	r4, [r3, #116]	; 0x74
	}

	if (heap != NULL) {
   37f02:	b1dc      	cbz	r4, 37f3c <z_thread_aligned_alloc+0x4c>
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   37f04:	1d32      	adds	r2, r6, #4
   37f06:	d218      	bcs.n	37f3a <z_thread_aligned_alloc+0x4a>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   37f08:	2000      	movs	r0, #0
   37f0a:	2100      	movs	r1, #0
   37f0c:	e9cd 0100 	strd	r0, r1, [sp]
   37f10:	f045 0104 	orr.w	r1, r5, #4
   37f14:	4620      	mov	r0, r4
   37f16:	f7fc ff09 	bl	34d2c <k_heap_aligned_alloc>
	if (mem == NULL) {
   37f1a:	b170      	cbz	r0, 37f3a <z_thread_aligned_alloc+0x4a>
	*heap_ref = heap;
   37f1c:	6004      	str	r4, [r0, #0]
	mem = ++heap_ref;
   37f1e:	1d04      	adds	r4, r0, #4
	__ASSERT(align == 0 || ((uintptr_t)mem & (align - 1)) == 0,
   37f20:	b165      	cbz	r5, 37f3c <z_thread_aligned_alloc+0x4c>
   37f22:	3d01      	subs	r5, #1
   37f24:	422c      	tst	r4, r5
   37f26:	d009      	beq.n	37f3c <z_thread_aligned_alloc+0x4c>
   37f28:	4907      	ldr	r1, [pc, #28]	; (37f48 <z_thread_aligned_alloc+0x58>)
   37f2a:	4808      	ldr	r0, [pc, #32]	; (37f4c <z_thread_aligned_alloc+0x5c>)
   37f2c:	2225      	movs	r2, #37	; 0x25
   37f2e:	f000 fdf0 	bl	38b12 <assert_print>
   37f32:	4805      	ldr	r0, [pc, #20]	; (37f48 <z_thread_aligned_alloc+0x58>)
   37f34:	2125      	movs	r1, #37	; 0x25
   37f36:	f000 fde5 	bl	38b04 <assert_post_action>
		ret = z_heap_aligned_alloc(heap, align, size);
	} else {
		ret = NULL;
   37f3a:	2400      	movs	r4, #0
	}

	return ret;
}
   37f3c:	4620      	mov	r0, r4
   37f3e:	b002      	add	sp, #8
   37f40:	bd70      	pop	{r4, r5, r6, pc}
   37f42:	bf00      	nop
   37f44:	20003384 	.word	0x20003384
   37f48:	0003fe0e 	.word	0x0003fe0e
   37f4c:	0003d1d7 	.word	0x0003d1d7

00037f50 <boot_banner>:
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
   37f50:	4801      	ldr	r0, [pc, #4]	; (37f58 <boot_banner+0x8>)
   37f52:	f000 bbd6 	b.w	38702 <printk>
   37f56:	bf00      	nop
   37f58:	0003fe32 	.word	0x0003fe32

00037f5c <ocrypto_ecdh_p256_public_key>:
   37f5c:	b530      	push	{r4, r5, lr}
   37f5e:	b099      	sub	sp, #100	; 0x64
   37f60:	4605      	mov	r5, r0
   37f62:	4668      	mov	r0, sp
   37f64:	f000 f828 	bl	37fb8 <ocrypto_sc_p256_from32bytes>
   37f68:	4669      	mov	r1, sp
   37f6a:	4604      	mov	r4, r0
   37f6c:	a808      	add	r0, sp, #32
   37f6e:	f000 fa53 	bl	38418 <ocrypto_curve_p256_scalarmult_base>
   37f72:	a908      	add	r1, sp, #32
   37f74:	4304      	orrs	r4, r0
   37f76:	4628      	mov	r0, r5
   37f78:	f000 f98a 	bl	38290 <ocrypto_curve_p256_to64bytes>
   37f7c:	4620      	mov	r0, r4
   37f7e:	b019      	add	sp, #100	; 0x64
   37f80:	bd30      	pop	{r4, r5, pc}
   37f82:	bf00      	nop

00037f84 <ocrypto_ecdh_p256_common_secret>:
   37f84:	b570      	push	{r4, r5, r6, lr}
   37f86:	b098      	sub	sp, #96	; 0x60
   37f88:	4605      	mov	r5, r0
   37f8a:	4668      	mov	r0, sp
   37f8c:	4616      	mov	r6, r2
   37f8e:	f000 f813 	bl	37fb8 <ocrypto_sc_p256_from32bytes>
   37f92:	4631      	mov	r1, r6
   37f94:	4604      	mov	r4, r0
   37f96:	a808      	add	r0, sp, #32
   37f98:	f000 f946 	bl	38228 <ocrypto_curve_p256_from64bytes>
   37f9c:	a908      	add	r1, sp, #32
   37f9e:	466a      	mov	r2, sp
   37fa0:	4304      	orrs	r4, r0
   37fa2:	4608      	mov	r0, r1
   37fa4:	f000 f982 	bl	382ac <ocrypto_curve_p256_scalarmult>
   37fa8:	a908      	add	r1, sp, #32
   37faa:	4304      	orrs	r4, r0
   37fac:	4628      	mov	r0, r5
   37fae:	f000 f96d 	bl	3828c <ocrypto_curve_p256_to32bytes>
   37fb2:	4620      	mov	r0, r4
   37fb4:	b018      	add	sp, #96	; 0x60
   37fb6:	bd70      	pop	{r4, r5, r6, pc}

00037fb8 <ocrypto_sc_p256_from32bytes>:
   37fb8:	b570      	push	{r4, r5, r6, lr}
   37fba:	680b      	ldr	r3, [r1, #0]
   37fbc:	4e12      	ldr	r6, [pc, #72]	; (38008 <ocrypto_sc_p256_from32bytes+0x50>)
   37fbe:	ba1b      	rev	r3, r3
   37fc0:	61c3      	str	r3, [r0, #28]
   37fc2:	684b      	ldr	r3, [r1, #4]
   37fc4:	ba1b      	rev	r3, r3
   37fc6:	6183      	str	r3, [r0, #24]
   37fc8:	688b      	ldr	r3, [r1, #8]
   37fca:	ba1b      	rev	r3, r3
   37fcc:	6143      	str	r3, [r0, #20]
   37fce:	68cb      	ldr	r3, [r1, #12]
   37fd0:	ba1b      	rev	r3, r3
   37fd2:	6103      	str	r3, [r0, #16]
   37fd4:	690b      	ldr	r3, [r1, #16]
   37fd6:	ba1b      	rev	r3, r3
   37fd8:	60c3      	str	r3, [r0, #12]
   37fda:	694b      	ldr	r3, [r1, #20]
   37fdc:	ba1b      	rev	r3, r3
   37fde:	6083      	str	r3, [r0, #8]
   37fe0:	698b      	ldr	r3, [r1, #24]
   37fe2:	ba1b      	rev	r3, r3
   37fe4:	6043      	str	r3, [r0, #4]
   37fe6:	69cb      	ldr	r3, [r1, #28]
   37fe8:	ba1b      	rev	r3, r3
   37fea:	4632      	mov	r2, r6
   37fec:	6003      	str	r3, [r0, #0]
   37fee:	4601      	mov	r1, r0
   37ff0:	4604      	mov	r4, r0
   37ff2:	f7d5 f937 	bl	d264 <ocrypto_bigint_sub256>
   37ff6:	4631      	mov	r1, r6
   37ff8:	4605      	mov	r5, r0
   37ffa:	4602      	mov	r2, r0
   37ffc:	4620      	mov	r0, r4
   37ffe:	f7d5 f951 	bl	d2a4 <ocrypto_bigint_cadd256>
   38002:	1e68      	subs	r0, r5, #1
   38004:	bd70      	pop	{r4, r5, r6, pc}
   38006:	bf00      	nop
   38008:	0003ce58 	.word	0x0003ce58

0003800c <p256_zdblu>:
   3800c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   38010:	b088      	sub	sp, #32
   38012:	460c      	mov	r4, r1
   38014:	4606      	mov	r6, r0
   38016:	f102 0120 	add.w	r1, r2, #32
   3801a:	4668      	mov	r0, sp
   3801c:	f106 0720 	add.w	r7, r6, #32
   38020:	4690      	mov	r8, r2
   38022:	f7d5 fc29 	bl	d878 <ocrypto_mod_p256_sqr>
   38026:	466a      	mov	r2, sp
   38028:	4669      	mov	r1, sp
   3802a:	4668      	mov	r0, sp
   3802c:	f7d5 fb36 	bl	d69c <ocrypto_mod_p256_add>
   38030:	4669      	mov	r1, sp
   38032:	4638      	mov	r0, r7
   38034:	f7d5 fc20 	bl	d878 <ocrypto_mod_p256_sqr>
   38038:	463a      	mov	r2, r7
   3803a:	4639      	mov	r1, r7
   3803c:	4638      	mov	r0, r7
   3803e:	f104 0520 	add.w	r5, r4, #32
   38042:	f7d5 fb2b 	bl	d69c <ocrypto_mod_p256_add>
   38046:	466a      	mov	r2, sp
   38048:	4669      	mov	r1, sp
   3804a:	4668      	mov	r0, sp
   3804c:	f7d5 fb26 	bl	d69c <ocrypto_mod_p256_add>
   38050:	4641      	mov	r1, r8
   38052:	4628      	mov	r0, r5
   38054:	f7d5 fc10 	bl	d878 <ocrypto_mod_p256_sqr>
   38058:	466a      	mov	r2, sp
   3805a:	4641      	mov	r1, r8
   3805c:	4630      	mov	r0, r6
   3805e:	f7d5 fbf3 	bl	d848 <ocrypto_mod_p256_mul>
   38062:	462a      	mov	r2, r5
   38064:	4629      	mov	r1, r5
   38066:	4668      	mov	r0, sp
   38068:	f7d5 fb18 	bl	d69c <ocrypto_mod_p256_add>
   3806c:	462a      	mov	r2, r5
   3806e:	4669      	mov	r1, sp
   38070:	4668      	mov	r0, sp
   38072:	f7d5 fb13 	bl	d69c <ocrypto_mod_p256_add>
   38076:	4a12      	ldr	r2, [pc, #72]	; (380c0 <p256_zdblu+0xb4>)
   38078:	4669      	mov	r1, sp
   3807a:	4668      	mov	r0, sp
   3807c:	f7d5 fb0e 	bl	d69c <ocrypto_mod_p256_add>
   38080:	4669      	mov	r1, sp
   38082:	4620      	mov	r0, r4
   38084:	f7d5 fbf8 	bl	d878 <ocrypto_mod_p256_sqr>
   38088:	4632      	mov	r2, r6
   3808a:	4621      	mov	r1, r4
   3808c:	4620      	mov	r0, r4
   3808e:	f7d5 fb43 	bl	d718 <ocrypto_mod_p256_sub>
   38092:	4632      	mov	r2, r6
   38094:	4621      	mov	r1, r4
   38096:	4620      	mov	r0, r4
   38098:	f7d5 fb3e 	bl	d718 <ocrypto_mod_p256_sub>
   3809c:	4622      	mov	r2, r4
   3809e:	4631      	mov	r1, r6
   380a0:	4628      	mov	r0, r5
   380a2:	f7d5 fb39 	bl	d718 <ocrypto_mod_p256_sub>
   380a6:	466a      	mov	r2, sp
   380a8:	4629      	mov	r1, r5
   380aa:	4628      	mov	r0, r5
   380ac:	f7d5 fbcc 	bl	d848 <ocrypto_mod_p256_mul>
   380b0:	463a      	mov	r2, r7
   380b2:	4629      	mov	r1, r5
   380b4:	4628      	mov	r0, r5
   380b6:	f7d5 fb2f 	bl	d718 <ocrypto_mod_p256_sub>
   380ba:	b008      	add	sp, #32
   380bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   380c0:	0003cef8 	.word	0x0003cef8

000380c4 <p256_zaddc>:
   380c4:	b5f0      	push	{r4, r5, r6, r7, lr}
   380c6:	b099      	sub	sp, #100	; 0x64
   380c8:	4604      	mov	r4, r0
   380ca:	460d      	mov	r5, r1
   380cc:	460a      	mov	r2, r1
   380ce:	4601      	mov	r1, r0
   380d0:	4668      	mov	r0, sp
   380d2:	f7d5 fb21 	bl	d718 <ocrypto_mod_p256_sub>
   380d6:	4669      	mov	r1, sp
   380d8:	4668      	mov	r0, sp
   380da:	f7d5 fbcd 	bl	d878 <ocrypto_mod_p256_sqr>
   380de:	466a      	mov	r2, sp
   380e0:	4621      	mov	r1, r4
   380e2:	a808      	add	r0, sp, #32
   380e4:	f105 0620 	add.w	r6, r5, #32
   380e8:	f104 0720 	add.w	r7, r4, #32
   380ec:	f7d5 fbac 	bl	d848 <ocrypto_mod_p256_mul>
   380f0:	466a      	mov	r2, sp
   380f2:	4629      	mov	r1, r5
   380f4:	4668      	mov	r0, sp
   380f6:	f7d5 fba7 	bl	d848 <ocrypto_mod_p256_mul>
   380fa:	4632      	mov	r2, r6
   380fc:	4639      	mov	r1, r7
   380fe:	a810      	add	r0, sp, #64	; 0x40
   38100:	f7d5 facc 	bl	d69c <ocrypto_mod_p256_add>
   38104:	4632      	mov	r2, r6
   38106:	4639      	mov	r1, r7
   38108:	4630      	mov	r0, r6
   3810a:	f7d5 fb05 	bl	d718 <ocrypto_mod_p256_sub>
   3810e:	4631      	mov	r1, r6
   38110:	4628      	mov	r0, r5
   38112:	f7d5 fbb1 	bl	d878 <ocrypto_mod_p256_sqr>
   38116:	466a      	mov	r2, sp
   38118:	a908      	add	r1, sp, #32
   3811a:	4620      	mov	r0, r4
   3811c:	f7d5 fabe 	bl	d69c <ocrypto_mod_p256_add>
   38120:	4622      	mov	r2, r4
   38122:	4629      	mov	r1, r5
   38124:	4628      	mov	r0, r5
   38126:	f7d5 faf7 	bl	d718 <ocrypto_mod_p256_sub>
   3812a:	466a      	mov	r2, sp
   3812c:	a908      	add	r1, sp, #32
   3812e:	4668      	mov	r0, sp
   38130:	f7d5 faf2 	bl	d718 <ocrypto_mod_p256_sub>
   38134:	466a      	mov	r2, sp
   38136:	4639      	mov	r1, r7
   38138:	4638      	mov	r0, r7
   3813a:	f7d5 fb85 	bl	d848 <ocrypto_mod_p256_mul>
   3813e:	462a      	mov	r2, r5
   38140:	a908      	add	r1, sp, #32
   38142:	4668      	mov	r0, sp
   38144:	f7d5 fae8 	bl	d718 <ocrypto_mod_p256_sub>
   38148:	466a      	mov	r2, sp
   3814a:	4631      	mov	r1, r6
   3814c:	4630      	mov	r0, r6
   3814e:	f7d5 fb7b 	bl	d848 <ocrypto_mod_p256_mul>
   38152:	463a      	mov	r2, r7
   38154:	4631      	mov	r1, r6
   38156:	4630      	mov	r0, r6
   38158:	f7d5 fade 	bl	d718 <ocrypto_mod_p256_sub>
   3815c:	a910      	add	r1, sp, #64	; 0x40
   3815e:	4668      	mov	r0, sp
   38160:	f7d5 fb8a 	bl	d878 <ocrypto_mod_p256_sqr>
   38164:	4622      	mov	r2, r4
   38166:	4669      	mov	r1, sp
   38168:	4620      	mov	r0, r4
   3816a:	f7d5 fad5 	bl	d718 <ocrypto_mod_p256_sub>
   3816e:	a908      	add	r1, sp, #32
   38170:	4622      	mov	r2, r4
   38172:	4608      	mov	r0, r1
   38174:	f7d5 fad0 	bl	d718 <ocrypto_mod_p256_sub>
   38178:	a910      	add	r1, sp, #64	; 0x40
   3817a:	aa08      	add	r2, sp, #32
   3817c:	4608      	mov	r0, r1
   3817e:	f7d5 fb63 	bl	d848 <ocrypto_mod_p256_mul>
   38182:	463a      	mov	r2, r7
   38184:	a910      	add	r1, sp, #64	; 0x40
   38186:	4638      	mov	r0, r7
   38188:	f7d5 fac6 	bl	d718 <ocrypto_mod_p256_sub>
   3818c:	b019      	add	sp, #100	; 0x64
   3818e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00038190 <p256_zaddu>:
   38190:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   38194:	b088      	sub	sp, #32
   38196:	460c      	mov	r4, r1
   38198:	4605      	mov	r5, r0
   3819a:	4690      	mov	r8, r2
   3819c:	460a      	mov	r2, r1
   3819e:	4601      	mov	r1, r0
   381a0:	4668      	mov	r0, sp
   381a2:	f7d5 fab9 	bl	d718 <ocrypto_mod_p256_sub>
   381a6:	4669      	mov	r1, sp
   381a8:	4668      	mov	r0, sp
   381aa:	f7d5 fb65 	bl	d878 <ocrypto_mod_p256_sqr>
   381ae:	466a      	mov	r2, sp
   381b0:	4629      	mov	r1, r5
   381b2:	4628      	mov	r0, r5
   381b4:	f104 0620 	add.w	r6, r4, #32
   381b8:	f7d5 fb46 	bl	d848 <ocrypto_mod_p256_mul>
   381bc:	f105 0720 	add.w	r7, r5, #32
   381c0:	466a      	mov	r2, sp
   381c2:	4621      	mov	r1, r4
   381c4:	4668      	mov	r0, sp
   381c6:	f7d5 fb3f 	bl	d848 <ocrypto_mod_p256_mul>
   381ca:	4632      	mov	r2, r6
   381cc:	4639      	mov	r1, r7
   381ce:	4630      	mov	r0, r6
   381d0:	f7d5 faa2 	bl	d718 <ocrypto_mod_p256_sub>
   381d4:	4631      	mov	r1, r6
   381d6:	4620      	mov	r0, r4
   381d8:	f7d5 fb4e 	bl	d878 <ocrypto_mod_p256_sqr>
   381dc:	462a      	mov	r2, r5
   381de:	4621      	mov	r1, r4
   381e0:	4620      	mov	r0, r4
   381e2:	f7d5 fa99 	bl	d718 <ocrypto_mod_p256_sub>
   381e6:	466a      	mov	r2, sp
   381e8:	4621      	mov	r1, r4
   381ea:	4620      	mov	r0, r4
   381ec:	f7d5 fa94 	bl	d718 <ocrypto_mod_p256_sub>
   381f0:	466a      	mov	r2, sp
   381f2:	4629      	mov	r1, r5
   381f4:	4640      	mov	r0, r8
   381f6:	f7d5 fa8f 	bl	d718 <ocrypto_mod_p256_sub>
   381fa:	4642      	mov	r2, r8
   381fc:	4639      	mov	r1, r7
   381fe:	4638      	mov	r0, r7
   38200:	f7d5 fb22 	bl	d848 <ocrypto_mod_p256_mul>
   38204:	4622      	mov	r2, r4
   38206:	4629      	mov	r1, r5
   38208:	4668      	mov	r0, sp
   3820a:	f7d5 fa85 	bl	d718 <ocrypto_mod_p256_sub>
   3820e:	466a      	mov	r2, sp
   38210:	4631      	mov	r1, r6
   38212:	4630      	mov	r0, r6
   38214:	f7d5 fb18 	bl	d848 <ocrypto_mod_p256_mul>
   38218:	463a      	mov	r2, r7
   3821a:	4631      	mov	r1, r6
   3821c:	4630      	mov	r0, r6
   3821e:	f7d5 fa7b 	bl	d718 <ocrypto_mod_p256_sub>
   38222:	b008      	add	sp, #32
   38224:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00038228 <ocrypto_curve_p256_from64bytes>:
   38228:	b570      	push	{r4, r5, r6, lr}
   3822a:	f100 0620 	add.w	r6, r0, #32
   3822e:	b090      	sub	sp, #64	; 0x40
   38230:	460d      	mov	r5, r1
   38232:	4604      	mov	r4, r0
   38234:	f000 f914 	bl	38460 <ocrypto_mod_p256_from_bytes>
   38238:	f105 0120 	add.w	r1, r5, #32
   3823c:	4630      	mov	r0, r6
   3823e:	f000 f90f 	bl	38460 <ocrypto_mod_p256_from_bytes>
   38242:	4621      	mov	r1, r4
   38244:	a808      	add	r0, sp, #32
   38246:	f7d5 fb17 	bl	d878 <ocrypto_mod_p256_sqr>
   3824a:	a908      	add	r1, sp, #32
   3824c:	4608      	mov	r0, r1
   3824e:	4a0d      	ldr	r2, [pc, #52]	; (38284 <ocrypto_curve_p256_from64bytes+0x5c>)
   38250:	f7d5 fa24 	bl	d69c <ocrypto_mod_p256_add>
   38254:	a908      	add	r1, sp, #32
   38256:	4622      	mov	r2, r4
   38258:	4608      	mov	r0, r1
   3825a:	f7d5 faf5 	bl	d848 <ocrypto_mod_p256_mul>
   3825e:	a908      	add	r1, sp, #32
   38260:	4a09      	ldr	r2, [pc, #36]	; (38288 <ocrypto_curve_p256_from64bytes+0x60>)
   38262:	4608      	mov	r0, r1
   38264:	f7d5 fa1a 	bl	d69c <ocrypto_mod_p256_add>
   38268:	4631      	mov	r1, r6
   3826a:	4668      	mov	r0, sp
   3826c:	f7d5 fb04 	bl	d878 <ocrypto_mod_p256_sqr>
   38270:	2220      	movs	r2, #32
   38272:	4669      	mov	r1, sp
   38274:	eb0d 0002 	add.w	r0, sp, r2
   38278:	f7d5 f9e2 	bl	d640 <ocrypto_constant_time_equal>
   3827c:	3801      	subs	r0, #1
   3827e:	b010      	add	sp, #64	; 0x40
   38280:	bd70      	pop	{r4, r5, r6, pc}
   38282:	bf00      	nop
   38284:	0003cef8 	.word	0x0003cef8
   38288:	0003cf18 	.word	0x0003cf18

0003828c <ocrypto_curve_p256_to32bytes>:
   3828c:	f000 b902 	b.w	38494 <ocrypto_mod_p256_to_bytes>

00038290 <ocrypto_curve_p256_to64bytes>:
   38290:	b538      	push	{r3, r4, r5, lr}
   38292:	4604      	mov	r4, r0
   38294:	460d      	mov	r5, r1
   38296:	f000 f8fd 	bl	38494 <ocrypto_mod_p256_to_bytes>
   3829a:	f105 0120 	add.w	r1, r5, #32
   3829e:	f104 0020 	add.w	r0, r4, #32
   382a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   382a6:	f000 b8f5 	b.w	38494 <ocrypto_mod_p256_to_bytes>
   382aa:	bf00      	nop

000382ac <ocrypto_curve_p256_scalarmult>:
   382ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   382b0:	4613      	mov	r3, r2
   382b2:	b0b8      	sub	sp, #224	; 0xe0
   382b4:	4a54      	ldr	r2, [pc, #336]	; (38408 <ocrypto_curve_p256_scalarmult+0x15c>)
   382b6:	4689      	mov	r9, r1
   382b8:	4680      	mov	r8, r0
   382ba:	4619      	mov	r1, r3
   382bc:	a810      	add	r0, sp, #64	; 0x40
   382be:	f7d4 ffd1 	bl	d264 <ocrypto_bigint_sub256>
   382c2:	4952      	ldr	r1, [pc, #328]	; (3840c <ocrypto_curve_p256_scalarmult+0x160>)
   382c4:	4602      	mov	r2, r0
   382c6:	a810      	add	r0, sp, #64	; 0x40
   382c8:	f7d4 ffec 	bl	d2a4 <ocrypto_bigint_cadd256>
   382cc:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   382ce:	494e      	ldr	r1, [pc, #312]	; (38408 <ocrypto_curve_p256_scalarmult+0x15c>)
   382d0:	ea00 76d6 	and.w	r6, r0, r6, lsr #31
   382d4:	4607      	mov	r7, r0
   382d6:	f1c6 0201 	rsb	r2, r6, #1
   382da:	a810      	add	r0, sp, #64	; 0x40
   382dc:	f7d4 ffe2 	bl	d2a4 <ocrypto_bigint_cadd256>
   382e0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   382e2:	464a      	mov	r2, r9
   382e4:	ea6f 0a03 	mvn.w	sl, r3
   382e8:	a928      	add	r1, sp, #160	; 0xa0
   382ea:	a818      	add	r0, sp, #96	; 0x60
   382ec:	f7ff fe8e 	bl	3800c <p256_zdblu>
   382f0:	ea4f 7ada 	mov.w	sl, sl, lsr #31
   382f4:	a920      	add	r1, sp, #128	; 0x80
   382f6:	f1ca 0201 	rsb	r2, sl, #1
   382fa:	4608      	mov	r0, r1
   382fc:	f000 f892 	bl	38424 <ocrypto_mod_p256_cneg>
   38300:	f1c7 0701 	rsb	r7, r7, #1
   38304:	24fe      	movs	r4, #254	; 0xfe
   38306:	466a      	mov	r2, sp
   38308:	a918      	add	r1, sp, #96	; 0x60
   3830a:	a828      	add	r0, sp, #160	; 0xa0
   3830c:	f7ff ff40 	bl	38190 <p256_zaddu>
   38310:	1162      	asrs	r2, r4, #5
   38312:	ab38      	add	r3, sp, #224	; 0xe0
   38314:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   38318:	f004 011f 	and.w	r1, r4, #31
   3831c:	f852 3ca0 	ldr.w	r3, [r2, #-160]
   38320:	40cb      	lsrs	r3, r1
   38322:	4655      	mov	r5, sl
   38324:	f003 0a01 	and.w	sl, r3, #1
   38328:	ea8a 0505 	eor.w	r5, sl, r5
   3832c:	462a      	mov	r2, r5
   3832e:	a928      	add	r1, sp, #160	; 0xa0
   38330:	a818      	add	r0, sp, #96	; 0x60
   38332:	f7d5 f813 	bl	d35c <ocrypto_bigint_cswap256>
   38336:	462a      	mov	r2, r5
   38338:	a930      	add	r1, sp, #192	; 0xc0
   3833a:	a820      	add	r0, sp, #128	; 0x80
   3833c:	f7d5 f80e 	bl	d35c <ocrypto_bigint_cswap256>
   38340:	3c01      	subs	r4, #1
   38342:	a928      	add	r1, sp, #160	; 0xa0
   38344:	a818      	add	r0, sp, #96	; 0x60
   38346:	f7ff febd 	bl	380c4 <p256_zaddc>
   3834a:	1c63      	adds	r3, r4, #1
   3834c:	d1db      	bne.n	38306 <ocrypto_curve_p256_scalarmult+0x5a>
   3834e:	f1ca 0201 	rsb	r2, sl, #1
   38352:	a920      	add	r1, sp, #128	; 0x80
   38354:	a808      	add	r0, sp, #32
   38356:	f000 f865 	bl	38424 <ocrypto_mod_p256_cneg>
   3835a:	ea86 060a 	eor.w	r6, r6, sl
   3835e:	466a      	mov	r2, sp
   38360:	a918      	add	r1, sp, #96	; 0x60
   38362:	a828      	add	r0, sp, #160	; 0xa0
   38364:	f7ff ff14 	bl	38190 <p256_zaddu>
   38368:	a928      	add	r1, sp, #160	; 0xa0
   3836a:	4632      	mov	r2, r6
   3836c:	a818      	add	r0, sp, #96	; 0x60
   3836e:	f7d4 fff5 	bl	d35c <ocrypto_bigint_cswap256>
   38372:	4632      	mov	r2, r6
   38374:	a930      	add	r1, sp, #192	; 0xc0
   38376:	a820      	add	r0, sp, #128	; 0x80
   38378:	f7d4 fff0 	bl	d35c <ocrypto_bigint_cswap256>
   3837c:	a908      	add	r1, sp, #32
   3837e:	466a      	mov	r2, sp
   38380:	4608      	mov	r0, r1
   38382:	f7d5 fa61 	bl	d848 <ocrypto_mod_p256_mul>
   38386:	a908      	add	r1, sp, #32
   38388:	4608      	mov	r0, r1
   3838a:	f000 f89d 	bl	384c8 <ocrypto_mod_p256_inv>
   3838e:	a908      	add	r1, sp, #32
   38390:	f108 0420 	add.w	r4, r8, #32
   38394:	f109 0220 	add.w	r2, r9, #32
   38398:	4608      	mov	r0, r1
   3839a:	f7d5 fa55 	bl	d848 <ocrypto_mod_p256_mul>
   3839e:	a920      	add	r1, sp, #128	; 0x80
   383a0:	aa08      	add	r2, sp, #32
   383a2:	4620      	mov	r0, r4
   383a4:	f7d5 fa50 	bl	d848 <ocrypto_mod_p256_mul>
   383a8:	aa08      	add	r2, sp, #32
   383aa:	a918      	add	r1, sp, #96	; 0x60
   383ac:	4668      	mov	r0, sp
   383ae:	f7d5 fa4b 	bl	d848 <ocrypto_mod_p256_mul>
   383b2:	4669      	mov	r1, sp
   383b4:	4668      	mov	r0, sp
   383b6:	f7d5 fa5f 	bl	d878 <ocrypto_mod_p256_sqr>
   383ba:	aa18      	add	r2, sp, #96	; 0x60
   383bc:	4669      	mov	r1, sp
   383be:	a808      	add	r0, sp, #32
   383c0:	f7d5 fa42 	bl	d848 <ocrypto_mod_p256_mul>
   383c4:	4621      	mov	r1, r4
   383c6:	4668      	mov	r0, sp
   383c8:	f7d5 fa56 	bl	d878 <ocrypto_mod_p256_sqr>
   383cc:	aa08      	add	r2, sp, #32
   383ce:	4669      	mov	r1, sp
   383d0:	4610      	mov	r0, r2
   383d2:	f7d5 f9a1 	bl	d718 <ocrypto_mod_p256_sub>
   383d6:	4a0e      	ldr	r2, [pc, #56]	; (38410 <ocrypto_curve_p256_scalarmult+0x164>)
   383d8:	a908      	add	r1, sp, #32
   383da:	4668      	mov	r0, sp
   383dc:	f7d5 f99c 	bl	d718 <ocrypto_mod_p256_sub>
   383e0:	4620      	mov	r0, r4
   383e2:	2120      	movs	r1, #32
   383e4:	f7d5 f940 	bl	d668 <ocrypto_constant_time_is_zero>
   383e8:	a908      	add	r1, sp, #32
   383ea:	4243      	negs	r3, r0
   383ec:	4602      	mov	r2, r0
   383ee:	4668      	mov	r0, sp
   383f0:	431f      	orrs	r7, r3
   383f2:	f7d4 ffb3 	bl	d35c <ocrypto_bigint_cswap256>
   383f6:	4640      	mov	r0, r8
   383f8:	4a06      	ldr	r2, [pc, #24]	; (38414 <ocrypto_curve_p256_scalarmult+0x168>)
   383fa:	4669      	mov	r1, sp
   383fc:	f7d5 fa24 	bl	d848 <ocrypto_mod_p256_mul>
   38400:	4638      	mov	r0, r7
   38402:	b038      	add	sp, #224	; 0xe0
   38404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   38408:	0003cf38 	.word	0x0003cf38
   3840c:	0003ceb8 	.word	0x0003ceb8
   38410:	0003cf18 	.word	0x0003cf18
   38414:	0003ced8 	.word	0x0003ced8

00038418 <ocrypto_curve_p256_scalarmult_base>:
   38418:	460a      	mov	r2, r1
   3841a:	4901      	ldr	r1, [pc, #4]	; (38420 <ocrypto_curve_p256_scalarmult_base+0x8>)
   3841c:	f7ff bf46 	b.w	382ac <ocrypto_curve_p256_scalarmult>
   38420:	0003ce78 	.word	0x0003ce78

00038424 <ocrypto_mod_p256_cneg>:
   38424:	b570      	push	{r4, r5, r6, lr}
   38426:	b088      	sub	sp, #32
   38428:	4604      	mov	r4, r0
   3842a:	460d      	mov	r5, r1
   3842c:	4616      	mov	r6, r2
   3842e:	2100      	movs	r1, #0
   38430:	2220      	movs	r2, #32
   38432:	4668      	mov	r0, sp
   38434:	f000 ffc7 	bl	393c6 <memset>
   38438:	2300      	movs	r3, #0
   3843a:	4629      	mov	r1, r5
   3843c:	2220      	movs	r2, #32
   3843e:	4620      	mov	r0, r4
   38440:	9300      	str	r3, [sp, #0]
   38442:	f000 ffb5 	bl	393b0 <memcpy>
   38446:	462a      	mov	r2, r5
   38448:	4669      	mov	r1, sp
   3844a:	4668      	mov	r0, sp
   3844c:	f7d5 f964 	bl	d718 <ocrypto_mod_p256_sub>
   38450:	4632      	mov	r2, r6
   38452:	4669      	mov	r1, sp
   38454:	4620      	mov	r0, r4
   38456:	f7d4 ff81 	bl	d35c <ocrypto_bigint_cswap256>
   3845a:	b008      	add	sp, #32
   3845c:	bd70      	pop	{r4, r5, r6, pc}
   3845e:	bf00      	nop

00038460 <ocrypto_mod_p256_from_bytes>:
   38460:	680b      	ldr	r3, [r1, #0]
   38462:	ba1b      	rev	r3, r3
   38464:	61c3      	str	r3, [r0, #28]
   38466:	684b      	ldr	r3, [r1, #4]
   38468:	ba1b      	rev	r3, r3
   3846a:	6183      	str	r3, [r0, #24]
   3846c:	688b      	ldr	r3, [r1, #8]
   3846e:	ba1b      	rev	r3, r3
   38470:	6143      	str	r3, [r0, #20]
   38472:	68cb      	ldr	r3, [r1, #12]
   38474:	ba1b      	rev	r3, r3
   38476:	6103      	str	r3, [r0, #16]
   38478:	690b      	ldr	r3, [r1, #16]
   3847a:	ba1b      	rev	r3, r3
   3847c:	60c3      	str	r3, [r0, #12]
   3847e:	694b      	ldr	r3, [r1, #20]
   38480:	ba1b      	rev	r3, r3
   38482:	6083      	str	r3, [r0, #8]
   38484:	698b      	ldr	r3, [r1, #24]
   38486:	ba1b      	rev	r3, r3
   38488:	6043      	str	r3, [r0, #4]
   3848a:	69cb      	ldr	r3, [r1, #28]
   3848c:	ba1b      	rev	r3, r3
   3848e:	6003      	str	r3, [r0, #0]
   38490:	4770      	bx	lr
   38492:	bf00      	nop

00038494 <ocrypto_mod_p256_to_bytes>:
   38494:	69cb      	ldr	r3, [r1, #28]
   38496:	ba1b      	rev	r3, r3
   38498:	6003      	str	r3, [r0, #0]
   3849a:	698b      	ldr	r3, [r1, #24]
   3849c:	ba1b      	rev	r3, r3
   3849e:	6043      	str	r3, [r0, #4]
   384a0:	694b      	ldr	r3, [r1, #20]
   384a2:	ba1b      	rev	r3, r3
   384a4:	6083      	str	r3, [r0, #8]
   384a6:	690b      	ldr	r3, [r1, #16]
   384a8:	ba1b      	rev	r3, r3
   384aa:	60c3      	str	r3, [r0, #12]
   384ac:	68cb      	ldr	r3, [r1, #12]
   384ae:	ba1b      	rev	r3, r3
   384b0:	6103      	str	r3, [r0, #16]
   384b2:	688b      	ldr	r3, [r1, #8]
   384b4:	ba1b      	rev	r3, r3
   384b6:	6143      	str	r3, [r0, #20]
   384b8:	684b      	ldr	r3, [r1, #4]
   384ba:	ba1b      	rev	r3, r3
   384bc:	6183      	str	r3, [r0, #24]
   384be:	680b      	ldr	r3, [r1, #0]
   384c0:	ba1b      	rev	r3, r3
   384c2:	61c3      	str	r3, [r0, #28]
   384c4:	4770      	bx	lr
   384c6:	bf00      	nop

000384c8 <ocrypto_mod_p256_inv>:
   384c8:	b570      	push	{r4, r5, r6, lr}
   384ca:	b098      	sub	sp, #96	; 0x60
   384cc:	460d      	mov	r5, r1
   384ce:	4606      	mov	r6, r0
   384d0:	a810      	add	r0, sp, #64	; 0x40
   384d2:	f7d5 f9d1 	bl	d878 <ocrypto_mod_p256_sqr>
   384d6:	462a      	mov	r2, r5
   384d8:	a910      	add	r1, sp, #64	; 0x40
   384da:	4668      	mov	r0, sp
   384dc:	f7d5 f9b4 	bl	d848 <ocrypto_mod_p256_mul>
   384e0:	4669      	mov	r1, sp
   384e2:	a810      	add	r0, sp, #64	; 0x40
   384e4:	f7d5 f9c8 	bl	d878 <ocrypto_mod_p256_sqr>
   384e8:	a910      	add	r1, sp, #64	; 0x40
   384ea:	4608      	mov	r0, r1
   384ec:	f7d5 f9c4 	bl	d878 <ocrypto_mod_p256_sqr>
   384f0:	466a      	mov	r2, sp
   384f2:	a910      	add	r1, sp, #64	; 0x40
   384f4:	a808      	add	r0, sp, #32
   384f6:	f7d5 f9a7 	bl	d848 <ocrypto_mod_p256_mul>
   384fa:	a908      	add	r1, sp, #32
   384fc:	a810      	add	r0, sp, #64	; 0x40
   384fe:	f7d5 f9bb 	bl	d878 <ocrypto_mod_p256_sqr>
   38502:	a910      	add	r1, sp, #64	; 0x40
   38504:	4608      	mov	r0, r1
   38506:	f7d5 f9b7 	bl	d878 <ocrypto_mod_p256_sqr>
   3850a:	a910      	add	r1, sp, #64	; 0x40
   3850c:	4608      	mov	r0, r1
   3850e:	f7d5 f9b3 	bl	d878 <ocrypto_mod_p256_sqr>
   38512:	a910      	add	r1, sp, #64	; 0x40
   38514:	4608      	mov	r0, r1
   38516:	f7d5 f9af 	bl	d878 <ocrypto_mod_p256_sqr>
   3851a:	a910      	add	r1, sp, #64	; 0x40
   3851c:	aa08      	add	r2, sp, #32
   3851e:	4608      	mov	r0, r1
   38520:	f7d5 f992 	bl	d848 <ocrypto_mod_p256_mul>
   38524:	a910      	add	r1, sp, #64	; 0x40
   38526:	4608      	mov	r0, r1
   38528:	f7d5 f9a6 	bl	d878 <ocrypto_mod_p256_sqr>
   3852c:	a910      	add	r1, sp, #64	; 0x40
   3852e:	4608      	mov	r0, r1
   38530:	f7d5 f9a2 	bl	d878 <ocrypto_mod_p256_sqr>
   38534:	a910      	add	r1, sp, #64	; 0x40
   38536:	466a      	mov	r2, sp
   38538:	a808      	add	r0, sp, #32
   3853a:	f7d5 f985 	bl	d848 <ocrypto_mod_p256_mul>
   3853e:	2405      	movs	r4, #5
   38540:	a908      	add	r1, sp, #32
   38542:	a810      	add	r0, sp, #64	; 0x40
   38544:	f7d5 f998 	bl	d878 <ocrypto_mod_p256_sqr>
   38548:	a910      	add	r1, sp, #64	; 0x40
   3854a:	4608      	mov	r0, r1
   3854c:	f7d5 f994 	bl	d878 <ocrypto_mod_p256_sqr>
   38550:	3c01      	subs	r4, #1
   38552:	a910      	add	r1, sp, #64	; 0x40
   38554:	d1f5      	bne.n	38542 <ocrypto_mod_p256_inv+0x7a>
   38556:	aa08      	add	r2, sp, #32
   38558:	4608      	mov	r0, r1
   3855a:	f7d5 f975 	bl	d848 <ocrypto_mod_p256_mul>
   3855e:	2405      	movs	r4, #5
   38560:	a910      	add	r1, sp, #64	; 0x40
   38562:	4608      	mov	r0, r1
   38564:	f7d5 f988 	bl	d878 <ocrypto_mod_p256_sqr>
   38568:	a910      	add	r1, sp, #64	; 0x40
   3856a:	4608      	mov	r0, r1
   3856c:	f7d5 f984 	bl	d878 <ocrypto_mod_p256_sqr>
   38570:	3c01      	subs	r4, #1
   38572:	d1f5      	bne.n	38560 <ocrypto_mod_p256_inv+0x98>
   38574:	a910      	add	r1, sp, #64	; 0x40
   38576:	aa08      	add	r2, sp, #32
   38578:	4608      	mov	r0, r1
   3857a:	f7d5 f965 	bl	d848 <ocrypto_mod_p256_mul>
   3857e:	a910      	add	r1, sp, #64	; 0x40
   38580:	a808      	add	r0, sp, #32
   38582:	f7d5 f979 	bl	d878 <ocrypto_mod_p256_sqr>
   38586:	a908      	add	r1, sp, #32
   38588:	4608      	mov	r0, r1
   3858a:	f7d5 f975 	bl	d878 <ocrypto_mod_p256_sqr>
   3858e:	a908      	add	r1, sp, #32
   38590:	466a      	mov	r2, sp
   38592:	4668      	mov	r0, sp
   38594:	f7d5 f958 	bl	d848 <ocrypto_mod_p256_mul>
   38598:	2410      	movs	r4, #16
   3859a:	4669      	mov	r1, sp
   3859c:	a810      	add	r0, sp, #64	; 0x40
   3859e:	f7d5 f96b 	bl	d878 <ocrypto_mod_p256_sqr>
   385a2:	a910      	add	r1, sp, #64	; 0x40
   385a4:	4608      	mov	r0, r1
   385a6:	f7d5 f967 	bl	d878 <ocrypto_mod_p256_sqr>
   385aa:	3c01      	subs	r4, #1
   385ac:	a910      	add	r1, sp, #64	; 0x40
   385ae:	d1f5      	bne.n	3859c <ocrypto_mod_p256_inv+0xd4>
   385b0:	462a      	mov	r2, r5
   385b2:	4608      	mov	r0, r1
   385b4:	f7d5 f948 	bl	d848 <ocrypto_mod_p256_mul>
   385b8:	2440      	movs	r4, #64	; 0x40
   385ba:	a910      	add	r1, sp, #64	; 0x40
   385bc:	4608      	mov	r0, r1
   385be:	f7d5 f95b 	bl	d878 <ocrypto_mod_p256_sqr>
   385c2:	a910      	add	r1, sp, #64	; 0x40
   385c4:	4608      	mov	r0, r1
   385c6:	f7d5 f957 	bl	d878 <ocrypto_mod_p256_sqr>
   385ca:	3c01      	subs	r4, #1
   385cc:	d1f5      	bne.n	385ba <ocrypto_mod_p256_inv+0xf2>
   385ce:	a910      	add	r1, sp, #64	; 0x40
   385d0:	466a      	mov	r2, sp
   385d2:	4608      	mov	r0, r1
   385d4:	f7d5 f938 	bl	d848 <ocrypto_mod_p256_mul>
   385d8:	2410      	movs	r4, #16
   385da:	a910      	add	r1, sp, #64	; 0x40
   385dc:	4608      	mov	r0, r1
   385de:	f7d5 f94b 	bl	d878 <ocrypto_mod_p256_sqr>
   385e2:	a910      	add	r1, sp, #64	; 0x40
   385e4:	4608      	mov	r0, r1
   385e6:	f7d5 f947 	bl	d878 <ocrypto_mod_p256_sqr>
   385ea:	3c01      	subs	r4, #1
   385ec:	d1f5      	bne.n	385da <ocrypto_mod_p256_inv+0x112>
   385ee:	a910      	add	r1, sp, #64	; 0x40
   385f0:	466a      	mov	r2, sp
   385f2:	4608      	mov	r0, r1
   385f4:	f7d5 f928 	bl	d848 <ocrypto_mod_p256_mul>
   385f8:	2410      	movs	r4, #16
   385fa:	a910      	add	r1, sp, #64	; 0x40
   385fc:	4608      	mov	r0, r1
   385fe:	f7d5 f93b 	bl	d878 <ocrypto_mod_p256_sqr>
   38602:	a910      	add	r1, sp, #64	; 0x40
   38604:	4608      	mov	r0, r1
   38606:	f7d5 f937 	bl	d878 <ocrypto_mod_p256_sqr>
   3860a:	3c01      	subs	r4, #1
   3860c:	d1f5      	bne.n	385fa <ocrypto_mod_p256_inv+0x132>
   3860e:	a910      	add	r1, sp, #64	; 0x40
   38610:	aa08      	add	r2, sp, #32
   38612:	4608      	mov	r0, r1
   38614:	f7d5 f918 	bl	d848 <ocrypto_mod_p256_mul>
   38618:	462a      	mov	r2, r5
   3861a:	a910      	add	r1, sp, #64	; 0x40
   3861c:	4630      	mov	r0, r6
   3861e:	f7d5 f913 	bl	d848 <ocrypto_mod_p256_mul>
   38622:	b018      	add	sp, #96	; 0x60
   38624:	bd70      	pop	{r4, r5, r6, pc}
   38626:	bf00      	nop

00038628 <cbpprintf_external>:
{
   38628:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   3862c:	4606      	mov	r6, r0
   3862e:	460d      	mov	r5, r1
   38630:	4617      	mov	r7, r2
	if (buf == NULL) {
   38632:	4698      	mov	r8, r3
   38634:	b32b      	cbz	r3, 38682 <cbpprintf_external+0x5a>
	args_size = hdr->hdr.desc.len * sizeof(int);
   38636:	f898 4000 	ldrb.w	r4, [r8]
	s_nbr     = hdr->hdr.desc.str_cnt;
   3863a:	f893 9001 	ldrb.w	r9, [r3, #1]
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
   3863e:	78db      	ldrb	r3, [r3, #3]
	args_size = hdr->hdr.desc.len * sizeof(int);
   38640:	00a4      	lsls	r4, r4, #2
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
   38642:	eb04 0443 	add.w	r4, r4, r3, lsl #1
	ros_nbr   = hdr->hdr.desc.ro_str_cnt;
   38646:	f898 3002 	ldrb.w	r3, [r8, #2]
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
   3864a:	441c      	add	r4, r3
   3864c:	4444      	add	r4, r8
	for (i = 0; i < s_nbr; i++) {
   3864e:	f04f 0a00 	mov.w	sl, #0
   38652:	45ca      	cmp	sl, r9
   38654:	d309      	bcc.n	3866a <cbpprintf_external+0x42>
	return formatter(out, ctx, fmt, u.ap);
   38656:	f8d8 2004 	ldr.w	r2, [r8, #4]
   3865a:	f108 0308 	add.w	r3, r8, #8
   3865e:	4639      	mov	r1, r7
   38660:	4630      	mov	r0, r6
   38662:	46ac      	mov	ip, r5
}
   38664:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return formatter(out, ctx, fmt, u.ap);
   38668:	4760      	bx	ip
		ps = (char **)(buf + s_idx * sizeof(int));
   3866a:	f814 3b01 	ldrb.w	r3, [r4], #1
		*ps = s;
   3866e:	f848 4023 	str.w	r4, [r8, r3, lsl #2]
		s += strlen(s) + 1;
   38672:	4620      	mov	r0, r4
   38674:	f000 fe59 	bl	3932a <strlen>
   38678:	3001      	adds	r0, #1
   3867a:	4404      	add	r4, r0
	for (i = 0; i < s_nbr; i++) {
   3867c:	f10a 0a01 	add.w	sl, sl, #1
   38680:	e7e7      	b.n	38652 <cbpprintf_external+0x2a>
}
   38682:	f06f 0015 	mvn.w	r0, #21
   38686:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0003868a <is_ptr>:
{
   3868a:	b570      	push	{r4, r5, r6, lr}
	int cnt = 0;
   3868c:	2500      	movs	r5, #0
{
   3868e:	4602      	mov	r2, r0
	bool mod = false;
   38690:	4628      	mov	r0, r5
	while ((c = *fmt++) != '\0') {
   38692:	4614      	mov	r4, r2
   38694:	f814 3b01 	ldrb.w	r3, [r4], #1
   38698:	b90b      	cbnz	r3, 3869e <is_ptr+0x14>
					return false;
   3869a:	4618      	mov	r0, r3
   3869c:	e009      	b.n	386b2 <is_ptr+0x28>
		if (mod) {
   3869e:	b198      	cbz	r0, 386c8 <is_ptr+0x3e>
			if (cnt == n) {
   386a0:	428d      	cmp	r5, r1
   386a2:	d107      	bne.n	386b4 <is_ptr+0x2a>
				if (c == 'p') {
   386a4:	2b70      	cmp	r3, #112	; 0x70
   386a6:	d004      	beq.n	386b2 <is_ptr+0x28>
				} else if (is_fmt_spec(c)) {
   386a8:	f1a3 0240 	sub.w	r2, r3, #64	; 0x40
   386ac:	2a3a      	cmp	r2, #58	; 0x3a
   386ae:	d80b      	bhi.n	386c8 <is_ptr+0x3e>
					return false;
   386b0:	2000      	movs	r0, #0
}
   386b2:	bd70      	pop	{r4, r5, r6, pc}
			} else if (is_fmt_spec(c)) {
   386b4:	f1a3 0640 	sub.w	r6, r3, #64	; 0x40
   386b8:	2e3a      	cmp	r6, #58	; 0x3a
   386ba:	d805      	bhi.n	386c8 <is_ptr+0x3e>
	while ((c = *fmt++) != '\0') {
   386bc:	7853      	ldrb	r3, [r2, #1]
				cnt++;
   386be:	3501      	adds	r5, #1
	while ((c = *fmt++) != '\0') {
   386c0:	1c94      	adds	r4, r2, #2
   386c2:	2b00      	cmp	r3, #0
   386c4:	d0e9      	beq.n	3869a <is_ptr+0x10>
   386c6:	2000      	movs	r0, #0
		if (c == '%') {
   386c8:	2b25      	cmp	r3, #37	; 0x25
			mod = !mod;
   386ca:	bf08      	it	eq
   386cc:	f080 0001 	eoreq.w	r0, r0, #1
	while ((c = *fmt++) != '\0') {
   386d0:	4622      	mov	r2, r4
   386d2:	e7de      	b.n	38692 <is_ptr+0x8>

000386d4 <arch_printk_char_out>:
}
   386d4:	2000      	movs	r0, #0
   386d6:	4770      	bx	lr

000386d8 <str_out>:
{
   386d8:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   386da:	688a      	ldr	r2, [r1, #8]
   386dc:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
   386de:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   386e0:	b114      	cbz	r4, 386e8 <str_out+0x10>
   386e2:	684b      	ldr	r3, [r1, #4]
   386e4:	4293      	cmp	r3, r2
   386e6:	dc01      	bgt.n	386ec <str_out+0x14>
		ctx->count++;
   386e8:	608d      	str	r5, [r1, #8]
}
   386ea:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   386ec:	3b01      	subs	r3, #1
   386ee:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   386f0:	bf08      	it	eq
   386f2:	2200      	moveq	r2, #0
   386f4:	608d      	str	r5, [r1, #8]
   386f6:	bf0c      	ite	eq
   386f8:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   386fa:	54a0      	strbne	r0, [r4, r2]
   386fc:	e7f5      	b.n	386ea <str_out+0x12>

000386fe <vprintk>:
		z_log_vprintk(fmt, ap);
   386fe:	f000 baef 	b.w	38ce0 <z_log_vprintk>

00038702 <printk>:
{
   38702:	b40f      	push	{r0, r1, r2, r3}
   38704:	b507      	push	{r0, r1, r2, lr}
   38706:	a904      	add	r1, sp, #16
   38708:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   3870c:	9101      	str	r1, [sp, #4]
		z_log_vprintk(fmt, ap);
   3870e:	f000 fae7 	bl	38ce0 <z_log_vprintk>
}
   38712:	b003      	add	sp, #12
   38714:	f85d eb04 	ldr.w	lr, [sp], #4
   38718:	b004      	add	sp, #16
   3871a:	4770      	bx	lr

0003871c <snprintk>:
{
   3871c:	b40c      	push	{r2, r3}
   3871e:	b507      	push	{r0, r1, r2, lr}
   38720:	ab04      	add	r3, sp, #16
   38722:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   38726:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   38728:	f7eb ff0e 	bl	24548 <vsnprintk>
}
   3872c:	b003      	add	sp, #12
   3872e:	f85d eb04 	ldr.w	lr, [sp], #4
   38732:	b002      	add	sp, #8
   38734:	4770      	bx	lr

00038736 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   38736:	4604      	mov	r4, r0
   38738:	b508      	push	{r3, lr}
   3873a:	4608      	mov	r0, r1
   3873c:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   3873e:	461a      	mov	r2, r3
   38740:	47a0      	blx	r4
	return z_impl_z_current_get();
   38742:	f7fe fcdb 	bl	370fc <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   38746:	f7ef f8f5 	bl	27934 <z_impl_k_thread_abort>

0003874a <chunk_size>:
		return ((uint16_t *)cmem)[f];
   3874a:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   3874e:	8840      	ldrh	r0, [r0, #2]
}
   38750:	0840      	lsrs	r0, r0, #1
   38752:	4770      	bx	lr

00038754 <free_list_add>:
{
   38754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   38756:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
   38758:	f7ff fff7 	bl	3874a <chunk_size>
	return 31 - __builtin_clz(usable_sz);
   3875c:	fab0 f080 	clz	r0, r0
   38760:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
   38764:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
	void *cmem = &buf[c];
   38768:	00ca      	lsls	r2, r1, #3
   3876a:	f8dc 6010 	ldr.w	r6, [ip, #16]
		((uint16_t *)cmem)[f] = val;
   3876e:	1d17      	adds	r7, r2, #4
{
   38770:	460c      	mov	r4, r1
   38772:	3206      	adds	r2, #6
   38774:	b28d      	uxth	r5, r1
	if (b->next == 0U) {
   38776:	b956      	cbnz	r6, 3878e <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
   38778:	2101      	movs	r1, #1
   3877a:	fa01 f000 	lsl.w	r0, r1, r0
   3877e:	68d9      	ldr	r1, [r3, #12]
   38780:	4301      	orrs	r1, r0
   38782:	60d9      	str	r1, [r3, #12]
		b->next = c;
   38784:	f8cc 4010 	str.w	r4, [ip, #16]
   38788:	53dd      	strh	r5, [r3, r7]
   3878a:	529d      	strh	r5, [r3, r2]
}
   3878c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
   3878e:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
   38790:	3104      	adds	r1, #4
   38792:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
   38794:	53d8      	strh	r0, [r3, r7]
   38796:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   3879a:	529e      	strh	r6, [r3, r2]
   3879c:	80c5      	strh	r5, [r0, #6]
   3879e:	525d      	strh	r5, [r3, r1]
   387a0:	e7f4      	b.n	3878c <free_list_add+0x38>

000387a2 <free_list_remove_bidx>:
{
   387a2:	b510      	push	{r4, lr}
		return ((uint16_t *)cmem)[f];
   387a4:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
   387a8:	88e3      	ldrh	r3, [r4, #6]
	if (next_free_chunk(h, c) == c) {
   387aa:	4299      	cmp	r1, r3
   387ac:	f102 0104 	add.w	r1, r2, #4
   387b0:	d10a      	bne.n	387c8 <free_list_remove_bidx+0x26>
		h->avail_buckets &= ~BIT(bidx);
   387b2:	2301      	movs	r3, #1
   387b4:	fa03 f202 	lsl.w	r2, r3, r2
   387b8:	68c3      	ldr	r3, [r0, #12]
   387ba:	ea23 0302 	bic.w	r3, r3, r2
   387be:	60c3      	str	r3, [r0, #12]
		b->next = 0;
   387c0:	2300      	movs	r3, #0
   387c2:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
   387c6:	bd10      	pop	{r4, pc}
   387c8:	88a2      	ldrh	r2, [r4, #4]
		b->next = second;
   387ca:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		((uint16_t *)cmem)[f] = val;
   387ce:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
   387d2:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   387d6:	80cb      	strh	r3, [r1, #6]
   387d8:	8082      	strh	r2, [r0, #4]
}
   387da:	e7f4      	b.n	387c6 <free_list_remove_bidx+0x24>

000387dc <free_list_remove>:
{
   387dc:	b508      	push	{r3, lr}
   387de:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
   387e0:	f7ff ffb3 	bl	3874a <chunk_size>
	return 31 - __builtin_clz(usable_sz);
   387e4:	fab0 f280 	clz	r2, r0
		free_list_remove_bidx(h, c, bidx);
   387e8:	f1c2 021f 	rsb	r2, r2, #31
   387ec:	4618      	mov	r0, r3
}
   387ee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		free_list_remove_bidx(h, c, bidx);
   387f2:	f7ff bfd6 	b.w	387a2 <free_list_remove_bidx>

000387f6 <alloc_chunk>:
{
   387f6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   387fa:	fab1 f581 	clz	r5, r1
   387fe:	f1c5 091f 	rsb	r9, r5, #31
	if (b->next) {
   38802:	eb00 0889 	add.w	r8, r0, r9, lsl #2
{
   38806:	4603      	mov	r3, r0
	if (b->next) {
   38808:	f8d8 2010 	ldr.w	r2, [r8, #16]
{
   3880c:	460e      	mov	r6, r1
	if (b->next) {
   3880e:	b1c2      	cbz	r2, 38842 <alloc_chunk+0x4c>
   38810:	2703      	movs	r7, #3
			chunkid_t c = b->next;
   38812:	f8d8 4010 	ldr.w	r4, [r8, #16]
			if (chunk_size(h, c) >= sz) {
   38816:	4618      	mov	r0, r3
   38818:	4621      	mov	r1, r4
   3881a:	f7ff ff96 	bl	3874a <chunk_size>
   3881e:	42b0      	cmp	r0, r6
   38820:	d306      	bcc.n	38830 <alloc_chunk+0x3a>
				free_list_remove_bidx(h, c, bi);
   38822:	464a      	mov	r2, r9
		free_list_remove_bidx(h, c, minbucket);
   38824:	4618      	mov	r0, r3
   38826:	f7ff ffbc 	bl	387a2 <free_list_remove_bidx>
}
   3882a:	4620      	mov	r0, r4
   3882c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ((uint16_t *)cmem)[f];
   38830:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
		} while (--i && b->next != first);
   38834:	3f01      	subs	r7, #1
   38836:	88e0      	ldrh	r0, [r4, #6]
			b->next = next_free_chunk(h, c);
   38838:	f8c8 0010 	str.w	r0, [r8, #16]
		} while (--i && b->next != first);
   3883c:	d001      	beq.n	38842 <alloc_chunk+0x4c>
   3883e:	4282      	cmp	r2, r0
   38840:	d1e7      	bne.n	38812 <alloc_chunk+0x1c>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
   38842:	f1c5 0220 	rsb	r2, r5, #32
   38846:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   3884a:	4094      	lsls	r4, r2
   3884c:	68da      	ldr	r2, [r3, #12]
	if (bmask != 0U) {
   3884e:	4014      	ands	r4, r2
   38850:	d0eb      	beq.n	3882a <alloc_chunk+0x34>
		int minbucket = __builtin_ctz(bmask);
   38852:	fa94 f2a4 	rbit	r2, r4
   38856:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   3885a:	1d11      	adds	r1, r2, #4
   3885c:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
   38860:	4621      	mov	r1, r4
   38862:	e7df      	b.n	38824 <alloc_chunk+0x2e>

00038864 <merge_chunks>:
{
   38864:	b538      	push	{r3, r4, r5, lr}
   38866:	4603      	mov	r3, r0
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   38868:	f7ff ff6f 	bl	3874a <chunk_size>
{
   3886c:	460d      	mov	r5, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   3886e:	4604      	mov	r4, r0
   38870:	4611      	mov	r1, r2
   38872:	4618      	mov	r0, r3
   38874:	f7ff ff69 	bl	3874a <chunk_size>
		((uint16_t *)cmem)[f] = val;
   38878:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
   3887c:	4404      	add	r4, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   3887e:	0060      	lsls	r0, r4, #1
		((uint16_t *)cmem)[f] = val;
   38880:	8068      	strh	r0, [r5, #2]
	return c + chunk_size(h, c);
   38882:	4618      	mov	r0, r3
   38884:	f7ff ff61 	bl	3874a <chunk_size>
	void *cmem = &buf[c];
   38888:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   3888a:	f823 4031 	strh.w	r4, [r3, r1, lsl #3]
}
   3888e:	bd38      	pop	{r3, r4, r5, pc}

00038890 <split_chunks>:
{
   38890:	b538      	push	{r3, r4, r5, lr}
   38892:	4603      	mov	r3, r0
	chunksz_t sz0 = chunk_size(h, lc);
   38894:	f7ff ff59 	bl	3874a <chunk_size>
{
   38898:	460c      	mov	r4, r1
	chunksz_t rsz = sz0 - lsz;
   3889a:	1aa5      	subs	r5, r4, r2
	chunksz_t lsz = rc - lc;
   3889c:	1a51      	subs	r1, r2, r1
   3889e:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
	chunksz_t rsz = sz0 - lsz;
   388a2:	4405      	add	r5, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   388a4:	0048      	lsls	r0, r1, #1
		((uint16_t *)cmem)[f] = val;
   388a6:	8060      	strh	r0, [r4, #2]
   388a8:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   388ac:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
   388ae:	8044      	strh	r4, [r0, #2]
   388b0:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
	return c + chunk_size(h, c);
   388b4:	4618      	mov	r0, r3
   388b6:	4611      	mov	r1, r2
   388b8:	f7ff ff47 	bl	3874a <chunk_size>
	void *cmem = &buf[c];
   388bc:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   388be:	f823 5031 	strh.w	r5, [r3, r1, lsl #3]
}
   388c2:	bd38      	pop	{r3, r4, r5, pc}

000388c4 <free_chunk>:
{
   388c4:	b538      	push	{r3, r4, r5, lr}
   388c6:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
   388c8:	f7ff ff3f 	bl	3874a <chunk_size>
   388cc:	460c      	mov	r4, r1
   388ce:	4401      	add	r1, r0
		return ((uint16_t *)cmem)[f];
   388d0:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   388d4:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
   388d6:	07da      	lsls	r2, r3, #31
   388d8:	d40a      	bmi.n	388f0 <free_chunk+0x2c>
		free_list_remove(h, right_chunk(h, c));
   388da:	4628      	mov	r0, r5
   388dc:	f7ff ff7e 	bl	387dc <free_list_remove>
	return c + chunk_size(h, c);
   388e0:	4621      	mov	r1, r4
   388e2:	4628      	mov	r0, r5
   388e4:	f7ff ff31 	bl	3874a <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   388e8:	1822      	adds	r2, r4, r0
   388ea:	4628      	mov	r0, r5
   388ec:	f7ff ffba 	bl	38864 <merge_chunks>
		return ((uint16_t *)cmem)[f];
   388f0:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   388f4:	1a61      	subs	r1, r4, r1
		return ((uint16_t *)cmem)[f];
   388f6:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   388fa:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
   388fc:	07db      	lsls	r3, r3, #31
   388fe:	d40c      	bmi.n	3891a <free_chunk+0x56>
		free_list_remove(h, left_chunk(h, c));
   38900:	4628      	mov	r0, r5
   38902:	f7ff ff6b 	bl	387dc <free_list_remove>
		return ((uint16_t *)cmem)[f];
   38906:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
		merge_chunks(h, left_chunk(h, c), c);
   3890a:	4622      	mov	r2, r4
   3890c:	1a61      	subs	r1, r4, r1
   3890e:	4628      	mov	r0, r5
   38910:	f7ff ffa8 	bl	38864 <merge_chunks>
   38914:	f835 3034 	ldrh.w	r3, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   38918:	1ae4      	subs	r4, r4, r3
	free_list_add(h, c);
   3891a:	4621      	mov	r1, r4
   3891c:	4628      	mov	r0, r5
}
   3891e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	free_list_add(h, c);
   38922:	f7ff bf17 	b.w	38754 <free_list_add>

00038926 <sys_heap_alloc>:
{
   38926:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   38928:	6805      	ldr	r5, [r0, #0]
	if (bytes == 0U || size_too_big(h, bytes)) {
   3892a:	b909      	cbnz	r1, 38930 <sys_heap_alloc+0xa>
		return NULL;
   3892c:	2000      	movs	r0, #0
}
   3892e:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
   38930:	68ab      	ldr	r3, [r5, #8]
   38932:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   38936:	d9f9      	bls.n	3892c <sys_heap_alloc+0x6>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   38938:	310b      	adds	r1, #11
   3893a:	08cc      	lsrs	r4, r1, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   3893c:	4621      	mov	r1, r4
   3893e:	4628      	mov	r0, r5
   38940:	f7ff ff59 	bl	387f6 <alloc_chunk>
	if (c == 0U) {
   38944:	4606      	mov	r6, r0
   38946:	2800      	cmp	r0, #0
   38948:	d0f0      	beq.n	3892c <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   3894a:	4601      	mov	r1, r0
   3894c:	4628      	mov	r0, r5
   3894e:	f7ff fefc 	bl	3874a <chunk_size>
   38952:	42a0      	cmp	r0, r4
   38954:	d907      	bls.n	38966 <sys_heap_alloc+0x40>
		split_chunks(h, c, c + chunk_sz);
   38956:	1932      	adds	r2, r6, r4
   38958:	4628      	mov	r0, r5
   3895a:	f7ff ff99 	bl	38890 <split_chunks>
		free_list_add(h, c + chunk_sz);
   3895e:	4611      	mov	r1, r2
   38960:	4628      	mov	r0, r5
   38962:	f7ff fef7 	bl	38754 <free_list_add>
	void *cmem = &buf[c];
   38966:	eb05 02c6 	add.w	r2, r5, r6, lsl #3
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   3896a:	4610      	mov	r0, r2
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   3896c:	8853      	ldrh	r3, [r2, #2]
   3896e:	f043 0301 	orr.w	r3, r3, #1
   38972:	8053      	strh	r3, [r2, #2]
   38974:	3004      	adds	r0, #4
	return mem;
   38976:	e7da      	b.n	3892e <sys_heap_alloc+0x8>

00038978 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   38978:	8b83      	ldrh	r3, [r0, #28]
	if ((state == ONOFF_STATE_OFF)
   3897a:	f013 0307 	ands.w	r3, r3, #7
   3897e:	d105      	bne.n	3898c <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   38980:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
   38982:	2b00      	cmp	r3, #0
   38984:	bf0c      	ite	eq
   38986:	2000      	moveq	r0, #0
   38988:	2003      	movne	r0, #3
   3898a:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   3898c:	2b02      	cmp	r3, #2
   3898e:	d105      	bne.n	3899c <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   38990:	8bc0      	ldrh	r0, [r0, #30]
   38992:	fab0 f080 	clz	r0, r0
   38996:	0940      	lsrs	r0, r0, #5
   38998:	0080      	lsls	r0, r0, #2
   3899a:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   3899c:	2b01      	cmp	r3, #1
   3899e:	d105      	bne.n	389ac <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   389a0:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
   389a2:	2b00      	cmp	r3, #0
   389a4:	bf0c      	ite	eq
   389a6:	2000      	moveq	r0, #0
   389a8:	2005      	movne	r0, #5
   389aa:	4770      	bx	lr
	int evt = EVT_NOP;
   389ac:	2000      	movs	r0, #0
}
   389ae:	4770      	bx	lr

000389b0 <validate_args>:
{
   389b0:	b510      	push	{r4, lr}
   389b2:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   389b4:	b100      	cbz	r0, 389b8 <validate_args+0x8>
   389b6:	b911      	cbnz	r1, 389be <validate_args+0xe>
		return -EINVAL;
   389b8:	f06f 0015 	mvn.w	r0, #21
}
   389bc:	bd10      	pop	{r4, pc}
	int rv = sys_notify_validate(&cli->notify);
   389be:	1d08      	adds	r0, r1, #4
   389c0:	f000 f82f 	bl	38a22 <sys_notify_validate>
	if ((rv == 0)
   389c4:	2800      	cmp	r0, #0
   389c6:	d1f9      	bne.n	389bc <validate_args+0xc>
	    && ((cli->notify.flags
   389c8:	68a3      	ldr	r3, [r4, #8]
   389ca:	2b03      	cmp	r3, #3
   389cc:	d9f6      	bls.n	389bc <validate_args+0xc>
   389ce:	e7f3      	b.n	389b8 <validate_args+0x8>

000389d0 <notify_one>:
{
   389d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   389d4:	460d      	mov	r5, r1
   389d6:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   389d8:	4619      	mov	r1, r3
   389da:	1d28      	adds	r0, r5, #4
{
   389dc:	4690      	mov	r8, r2
   389de:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   389e0:	f7ec f9ea 	bl	24db8 <sys_notify_finalize>
	if (cb) {
   389e4:	4604      	mov	r4, r0
   389e6:	b138      	cbz	r0, 389f8 <notify_one+0x28>
		cb(mgr, cli, state, res);
   389e8:	4633      	mov	r3, r6
   389ea:	4642      	mov	r2, r8
   389ec:	4629      	mov	r1, r5
   389ee:	4638      	mov	r0, r7
   389f0:	46a4      	mov	ip, r4
}
   389f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   389f6:	4760      	bx	ip
}
   389f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000389fc <onoff_manager_init>:
{
   389fc:	b538      	push	{r3, r4, r5, lr}
   389fe:	460c      	mov	r4, r1
	if ((mgr == NULL)
   38a00:	4605      	mov	r5, r0
   38a02:	b158      	cbz	r0, 38a1c <onoff_manager_init+0x20>
	    || (transitions == NULL)
   38a04:	b151      	cbz	r1, 38a1c <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   38a06:	680b      	ldr	r3, [r1, #0]
   38a08:	b143      	cbz	r3, 38a1c <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   38a0a:	684b      	ldr	r3, [r1, #4]
   38a0c:	b133      	cbz	r3, 38a1c <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   38a0e:	2220      	movs	r2, #32
   38a10:	2100      	movs	r1, #0
   38a12:	f000 fcd8 	bl	393c6 <memset>
   38a16:	612c      	str	r4, [r5, #16]
	return 0;
   38a18:	2000      	movs	r0, #0
}
   38a1a:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   38a1c:	f06f 0015 	mvn.w	r0, #21
   38a20:	e7fb      	b.n	38a1a <onoff_manager_init+0x1e>

00038a22 <sys_notify_validate>:
	if (notify == NULL) {
   38a22:	4603      	mov	r3, r0
   38a24:	b140      	cbz	r0, 38a38 <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   38a26:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   38a28:	f002 0203 	and.w	r2, r2, #3
	switch (sys_notify_get_method(notify)) {
   38a2c:	2a02      	cmp	r2, #2
   38a2e:	d006      	beq.n	38a3e <sys_notify_validate+0x1c>
   38a30:	2a03      	cmp	r2, #3
   38a32:	d004      	beq.n	38a3e <sys_notify_validate+0x1c>
   38a34:	2a01      	cmp	r2, #1
   38a36:	d005      	beq.n	38a44 <sys_notify_validate+0x22>
   38a38:	f06f 0015 	mvn.w	r0, #21
}
   38a3c:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   38a3e:	681a      	ldr	r2, [r3, #0]
   38a40:	2a00      	cmp	r2, #0
   38a42:	d0f9      	beq.n	38a38 <sys_notify_validate+0x16>
		notify->result = 0;
   38a44:	2000      	movs	r0, #0
   38a46:	6098      	str	r0, [r3, #8]
   38a48:	4770      	bx	lr

00038a4a <encode_uint>:
{
   38a4a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   38a4e:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
   38a50:	78d3      	ldrb	r3, [r2, #3]
	switch (specifier) {
   38a52:	2b6f      	cmp	r3, #111	; 0x6f
{
   38a54:	4680      	mov	r8, r0
   38a56:	460f      	mov	r7, r1
   38a58:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   38a5a:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
   38a5e:	d029      	beq.n	38ab4 <encode_uint+0x6a>
   38a60:	d824      	bhi.n	38aac <encode_uint+0x62>
		return 10;
   38a62:	2b58      	cmp	r3, #88	; 0x58
   38a64:	bf0c      	ite	eq
   38a66:	2610      	moveq	r6, #16
   38a68:	260a      	movne	r6, #10
	char *bp = bps + (bpe - bps);
   38a6a:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
   38a6e:	4632      	mov	r2, r6
   38a70:	2300      	movs	r3, #0
   38a72:	4640      	mov	r0, r8
   38a74:	4639      	mov	r1, r7
   38a76:	f7d4 fbbb 	bl	d1f0 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   38a7a:	2a09      	cmp	r2, #9
   38a7c:	b2d4      	uxtb	r4, r2
   38a7e:	d81e      	bhi.n	38abe <encode_uint+0x74>
   38a80:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
   38a82:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
   38a84:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
   38a86:	f177 0700 	sbcs.w	r7, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
   38a8a:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
   38a8e:	d301      	bcc.n	38a94 <encode_uint+0x4a>
   38a90:	45d1      	cmp	r9, sl
   38a92:	d811      	bhi.n	38ab8 <encode_uint+0x6e>
	if (conv->flag_hash) {
   38a94:	782b      	ldrb	r3, [r5, #0]
   38a96:	069b      	lsls	r3, r3, #26
   38a98:	d505      	bpl.n	38aa6 <encode_uint+0x5c>
		if (radix == 8) {
   38a9a:	2e08      	cmp	r6, #8
   38a9c:	d115      	bne.n	38aca <encode_uint+0x80>
			conv->altform_0 = true;
   38a9e:	78ab      	ldrb	r3, [r5, #2]
   38aa0:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
   38aa4:	70ab      	strb	r3, [r5, #2]
}
   38aa6:	4648      	mov	r0, r9
   38aa8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
   38aac:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 10;
   38ab0:	2b70      	cmp	r3, #112	; 0x70
   38ab2:	e7d7      	b.n	38a64 <encode_uint+0x1a>
	switch (specifier) {
   38ab4:	2608      	movs	r6, #8
   38ab6:	e7d8      	b.n	38a6a <encode_uint+0x20>
		value /= radix;
   38ab8:	4680      	mov	r8, r0
   38aba:	460f      	mov	r7, r1
   38abc:	e7d7      	b.n	38a6e <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   38abe:	f1bb 0f19 	cmp.w	fp, #25
   38ac2:	bf94      	ite	ls
   38ac4:	3437      	addls	r4, #55	; 0x37
   38ac6:	3457      	addhi	r4, #87	; 0x57
   38ac8:	e7db      	b.n	38a82 <encode_uint+0x38>
		} else if (radix == 16) {
   38aca:	2e10      	cmp	r6, #16
   38acc:	d1eb      	bne.n	38aa6 <encode_uint+0x5c>
			conv->altform_0c = true;
   38ace:	78ab      	ldrb	r3, [r5, #2]
   38ad0:	f043 0310 	orr.w	r3, r3, #16
   38ad4:	e7e6      	b.n	38aa4 <encode_uint+0x5a>

00038ad6 <outs>:
{
   38ad6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   38ada:	4607      	mov	r7, r0
   38adc:	4688      	mov	r8, r1
   38ade:	4615      	mov	r5, r2
   38ae0:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   38ae2:	4614      	mov	r4, r2
   38ae4:	42b4      	cmp	r4, r6
   38ae6:	d305      	bcc.n	38af4 <outs+0x1e>
   38ae8:	b10e      	cbz	r6, 38aee <outs+0x18>
	return (int)count;
   38aea:	1b60      	subs	r0, r4, r5
   38aec:	e008      	b.n	38b00 <outs+0x2a>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   38aee:	7823      	ldrb	r3, [r4, #0]
   38af0:	2b00      	cmp	r3, #0
   38af2:	d0fa      	beq.n	38aea <outs+0x14>
		int rc = out((int)*sp++, ctx);
   38af4:	f814 0b01 	ldrb.w	r0, [r4], #1
   38af8:	4641      	mov	r1, r8
   38afa:	47b8      	blx	r7
		if (rc < 0) {
   38afc:	2800      	cmp	r0, #0
   38afe:	daf1      	bge.n	38ae4 <outs+0xe>
}
   38b00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00038b04 <assert_post_action>:
	if (k_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
   38b04:	4040      	eors	r0, r0
   38b06:	f380 8811 	msr	BASEPRI, r0
   38b0a:	f04f 0004 	mov.w	r0, #4
   38b0e:	df02      	svc	2
}
   38b10:	4770      	bx	lr

00038b12 <assert_print>:

void assert_print(const char *fmt, ...)
{
   38b12:	b40f      	push	{r0, r1, r2, r3}
   38b14:	b507      	push	{r0, r1, r2, lr}
   38b16:	a904      	add	r1, sp, #16
   38b18:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
   38b1c:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
   38b1e:	f7ff fdee 	bl	386fe <vprintk>

	va_end(ap);
}
   38b22:	b003      	add	sp, #12
   38b24:	f85d eb04 	ldr.w	lr, [sp], #4
   38b28:	b004      	add	sp, #16
   38b2a:	4770      	bx	lr

00038b2c <free_space>:
	if (buffer->rd_idx > buffer->tmp_wr_idx) {
   38b2c:	68c3      	ldr	r3, [r0, #12]
   38b2e:	6802      	ldr	r2, [r0, #0]
   38b30:	4293      	cmp	r3, r2
   38b32:	d904      	bls.n	38b3e <free_space+0x12>
		*res =  buffer->rd_idx - buffer->tmp_wr_idx - 1;
   38b34:	3b01      	subs	r3, #1
   38b36:	1a9a      	subs	r2, r3, r2
		return false;
   38b38:	2000      	movs	r0, #0
		*res = buffer->size - buffer->tmp_wr_idx - 1;
   38b3a:	600a      	str	r2, [r1, #0]
}
   38b3c:	4770      	bx	lr
		*res = buffer->size - buffer->tmp_wr_idx - 1;
   38b3e:	6a40      	ldr	r0, [r0, #36]	; 0x24
	} else if (!buffer->rd_idx) {
   38b40:	b913      	cbnz	r3, 38b48 <free_space+0x1c>
		*res = buffer->size - buffer->tmp_wr_idx - 1;
   38b42:	3801      	subs	r0, #1
   38b44:	1a82      	subs	r2, r0, r2
		return false;
   38b46:	e7f7      	b.n	38b38 <free_space+0xc>
	*res = buffer->size - buffer->tmp_wr_idx;
   38b48:	1a82      	subs	r2, r0, r2
	return true;
   38b4a:	2001      	movs	r0, #1
   38b4c:	e7f5      	b.n	38b3a <free_space+0xe>

00038b4e <get_usage>:
{
   38b4e:	b513      	push	{r0, r1, r4, lr}
	if (free_space(buffer, &f)) {
   38b50:	a901      	add	r1, sp, #4
{
   38b52:	4604      	mov	r4, r0
	if (free_space(buffer, &f)) {
   38b54:	f7ff ffea 	bl	38b2c <free_space>
   38b58:	b120      	cbz	r0, 38b64 <get_usage+0x16>
		f += (buffer->rd_idx - 1);
   38b5a:	9b01      	ldr	r3, [sp, #4]
   38b5c:	68e2      	ldr	r2, [r4, #12]
   38b5e:	3b01      	subs	r3, #1
   38b60:	4413      	add	r3, r2
   38b62:	9301      	str	r3, [sp, #4]
	return buffer->size - 1 - f;
   38b64:	6a60      	ldr	r0, [r4, #36]	; 0x24
   38b66:	9b01      	ldr	r3, [sp, #4]
   38b68:	1ac0      	subs	r0, r0, r3
}
   38b6a:	3801      	subs	r0, #1
   38b6c:	b002      	add	sp, #8
   38b6e:	bd10      	pop	{r4, pc}

00038b70 <idx_inc>:
{
   38b70:	b510      	push	{r4, lr}
   38b72:	4604      	mov	r4, r0
	uint32_t i = idx + val;
   38b74:	1888      	adds	r0, r1, r2
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   38b76:	6922      	ldr	r2, [r4, #16]
		return i & (buffer->size - 1);
   38b78:	6a63      	ldr	r3, [r4, #36]	; 0x24
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   38b7a:	07d2      	lsls	r2, r2, #31
   38b7c:	d502      	bpl.n	38b84 <idx_inc+0x14>
		return i & (buffer->size - 1);
   38b7e:	3b01      	subs	r3, #1
   38b80:	4018      	ands	r0, r3
}
   38b82:	bd10      	pop	{r4, pc}
	return (i >= buffer->size) ? i - buffer->size : i;
   38b84:	4298      	cmp	r0, r3
   38b86:	bf28      	it	cs
   38b88:	1ac0      	subcs	r0, r0, r3
   38b8a:	e7fa      	b.n	38b82 <idx_inc+0x12>

00038b8c <add_skip_item>:
{
   38b8c:	b538      	push	{r3, r4, r5, lr}
   38b8e:	460d      	mov	r5, r1
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
   38b90:	6a02      	ldr	r2, [r0, #32]
	union mpsc_pbuf_generic skip = {
   38b92:	008b      	lsls	r3, r1, #2
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
   38b94:	6801      	ldr	r1, [r0, #0]
	union mpsc_pbuf_generic skip = {
   38b96:	f043 0302 	orr.w	r3, r3, #2
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
   38b9a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   38b9e:	462a      	mov	r2, r5
   38ba0:	6801      	ldr	r1, [r0, #0]
{
   38ba2:	4604      	mov	r4, r0
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   38ba4:	f7ff ffe4 	bl	38b70 <idx_inc>
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   38ba8:	6861      	ldr	r1, [r4, #4]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   38baa:	6020      	str	r0, [r4, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   38bac:	462a      	mov	r2, r5
   38bae:	4620      	mov	r0, r4
   38bb0:	f7ff ffde 	bl	38b70 <idx_inc>
   38bb4:	6060      	str	r0, [r4, #4]
}
   38bb6:	bd38      	pop	{r3, r4, r5, pc}

00038bb8 <max_utilization_update>:
{
   38bb8:	b538      	push	{r3, r4, r5, lr}
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
   38bba:	6903      	ldr	r3, [r0, #16]
   38bbc:	075b      	lsls	r3, r3, #29
{
   38bbe:	4604      	mov	r4, r0
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
   38bc0:	d506      	bpl.n	38bd0 <max_utilization_update+0x18>
	buffer->max_usage = MAX(buffer->max_usage, get_usage(buffer));
   38bc2:	6a85      	ldr	r5, [r0, #40]	; 0x28
   38bc4:	f7ff ffc3 	bl	38b4e <get_usage>
   38bc8:	4285      	cmp	r5, r0
   38bca:	bf2c      	ite	cs
   38bcc:	62a5      	strcs	r5, [r4, #40]	; 0x28
   38bce:	62a0      	strcc	r0, [r4, #40]	; 0x28
}
   38bd0:	bd38      	pop	{r3, r4, r5, pc}

00038bd2 <drop_item_locked>:
{
   38bd2:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   38bd6:	461f      	mov	r7, r3
	*user_packet = false;
   38bd8:	2300      	movs	r3, #0
   38bda:	703b      	strb	r3, [r7, #0]
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
   38bdc:	f8d0 a00c 	ldr.w	sl, [r0, #12]
   38be0:	f8d0 9020 	ldr.w	r9, [r0, #32]
	if (item->hdr.busy && !item->hdr.valid) {
   38be4:	f819 302a 	ldrb.w	r3, [r9, sl, lsl #2]
   38be8:	f003 0303 	and.w	r3, r3, #3
   38bec:	2b02      	cmp	r3, #2
{
   38bee:	4604      	mov	r4, r0
   38bf0:	468b      	mov	fp, r1
   38bf2:	4690      	mov	r8, r2
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
   38bf4:	eb09 068a 	add.w	r6, r9, sl, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
   38bf8:	d103      	bne.n	38c02 <drop_item_locked+0x30>
		return item->skip.len;
   38bfa:	f859 502a 	ldr.w	r5, [r9, sl, lsl #2]
	rd_wlen = skip_wlen ? skip_wlen : buffer->get_wlen(item);
   38bfe:	08ad      	lsrs	r5, r5, #2
   38c00:	d12e      	bne.n	38c60 <drop_item_locked+0x8e>
   38c02:	69e3      	ldr	r3, [r4, #28]
   38c04:	4630      	mov	r0, r6
   38c06:	4798      	blx	r3
   38c08:	4605      	mov	r5, r0
	} else if (allow_drop) {
   38c0a:	f1b8 0f00 	cmp.w	r8, #0
   38c0e:	d038      	beq.n	38c82 <drop_item_locked+0xb0>
		if (item->hdr.busy) {
   38c10:	f819 302a 	ldrb.w	r3, [r9, sl, lsl #2]
   38c14:	079b      	lsls	r3, r3, #30
   38c16:	d531      	bpl.n	38c7c <drop_item_locked+0xaa>
			add_skip_item(buffer, free_wlen + 1);
   38c18:	f10b 0101 	add.w	r1, fp, #1
   38c1c:	4620      	mov	r0, r4
   38c1e:	f7ff ffb5 	bl	38b8c <add_skip_item>
			buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
   38c22:	6861      	ldr	r1, [r4, #4]
   38c24:	462a      	mov	r2, r5
   38c26:	4620      	mov	r0, r4
   38c28:	f7ff ffa2 	bl	38b70 <idx_inc>
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
   38c2c:	6821      	ldr	r1, [r4, #0]
			buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
   38c2e:	6060      	str	r0, [r4, #4]
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
   38c30:	462a      	mov	r2, r5
   38c32:	4620      	mov	r0, r4
   38c34:	f7ff ff9c 	bl	38b70 <idx_inc>
			uint32_t next_rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
   38c38:	462a      	mov	r2, r5
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
   38c3a:	6020      	str	r0, [r4, #0]
			uint32_t next_rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
   38c3c:	68e1      	ldr	r1, [r4, #12]
   38c3e:	4620      	mov	r0, r4
   38c40:	f7ff ff96 	bl	38b70 <idx_inc>
			item = (union mpsc_pbuf_generic *)&buffer->buf[next_rd_idx];
   38c44:	6a23      	ldr	r3, [r4, #32]
	if (item->hdr.busy && !item->hdr.valid) {
   38c46:	f813 2020 	ldrb.w	r2, [r3, r0, lsl #2]
   38c4a:	f002 0203 	and.w	r2, r2, #3
   38c4e:	2a02      	cmp	r2, #2
			item = (union mpsc_pbuf_generic *)&buffer->buf[next_rd_idx];
   38c50:	eb03 0680 	add.w	r6, r3, r0, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
   38c54:	d10e      	bne.n	38c74 <drop_item_locked+0xa2>
		return item->skip.len;
   38c56:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
			if (skip_wlen) {
   38c5a:	089b      	lsrs	r3, r3, #2
   38c5c:	d00a      	beq.n	38c74 <drop_item_locked+0xa2>
				rd_wlen += skip_wlen;
   38c5e:	441d      	add	r5, r3
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
   38c60:	68e1      	ldr	r1, [r4, #12]
   38c62:	462a      	mov	r2, r5
   38c64:	4620      	mov	r0, r4
   38c66:	f7ff ff83 	bl	38b70 <idx_inc>
		buffer->tmp_rd_idx = buffer->rd_idx;
   38c6a:	e9c4 0002 	strd	r0, r0, [r4, #8]
}
   38c6e:	4630      	mov	r0, r6
   38c70:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				rd_wlen += buffer->get_wlen(item);
   38c74:	69e3      	ldr	r3, [r4, #28]
   38c76:	4630      	mov	r0, r6
   38c78:	4798      	blx	r3
   38c7a:	4405      	add	r5, r0
			*user_packet = true;
   38c7c:	2301      	movs	r3, #1
   38c7e:	703b      	strb	r3, [r7, #0]
	if (allow_drop) {
   38c80:	e7ee      	b.n	38c60 <drop_item_locked+0x8e>
		item = NULL;
   38c82:	4646      	mov	r6, r8
	return item;
   38c84:	e7f3      	b.n	38c6e <drop_item_locked+0x9c>

00038c86 <mpsc_pbuf_is_pending>:
	if (buffer->tmp_rd_idx <= buffer->wr_idx) {
   38c86:	e9d0 2301 	ldrd	r2, r3, [r0, #4]
   38c8a:	4293      	cmp	r3, r2
	*res = buffer->size - buffer->tmp_rd_idx;
   38c8c:	bf88      	it	hi
   38c8e:	6a42      	ldrhi	r2, [r0, #36]	; 0x24
   38c90:	1ad3      	subs	r3, r2, r3
	uint32_t a;

	(void)available(buffer, &a);

	return a ? true : false;
}
   38c92:	1e18      	subs	r0, r3, #0
   38c94:	bf18      	it	ne
   38c96:	2001      	movne	r0, #1
   38c98:	4770      	bx	lr

00038c9a <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_EXPERIMENTAL, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_MCUBOOT_SIGNATURE_KEY_FILE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   38c9a:	4770      	bx	lr

00038c9c <log_msg_generic_get_wlen>:
	return msg->generic.type == Z_LOG_MSG2_LOG;
   38c9c:	7803      	ldrb	r3, [r0, #0]
	if (z_log_item_is_msg(generic_msg)) {
   38c9e:	075b      	lsls	r3, r3, #29
   38ca0:	d40b      	bmi.n	38cba <log_msg_generic_get_wlen+0x1e>
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
   38ca2:	6803      	ldr	r3, [r0, #0]
   38ca4:	8842      	ldrh	r2, [r0, #2]
   38ca6:	f3c3 2349 	ubfx	r3, r3, #9, #10
   38caa:	f3c2 02cb 	ubfx	r2, r2, #3, #12
   38cae:	1898      	adds	r0, r3, r2
   38cb0:	3017      	adds	r0, #23
   38cb2:	f020 0007 	bic.w	r0, r0, #7
   38cb6:	0880      	lsrs	r0, r0, #2
		return log_msg_get_total_wlen(msg->hdr.desc);
   38cb8:	4770      	bx	lr
	return 0;
   38cba:	2000      	movs	r0, #0
}
   38cbc:	4770      	bx	lr

00038cbe <dummy_timestamp>:
}
   38cbe:	2000      	movs	r0, #0
   38cc0:	4770      	bx	lr

00038cc2 <default_get_timestamp>:
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
   38cc2:	f002 bc9e 	b.w	3b602 <sys_clock_cycle_get_32>

00038cc6 <atomic_inc>:
{
   38cc6:	4603      	mov	r3, r0
}
   38cc8:	f3bf 8f5b 	dmb	ish
   38ccc:	e853 0f00 	ldrex	r0, [r3]
   38cd0:	1c42      	adds	r2, r0, #1
   38cd2:	e843 2100 	strex	r1, r2, [r3]
   38cd6:	2900      	cmp	r1, #0
   38cd8:	d1f8      	bne.n	38ccc <atomic_inc+0x6>
   38cda:	f3bf 8f5b 	dmb	ish
   38cde:	4770      	bx	lr

00038ce0 <z_log_vprintk>:
{
   38ce0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		va_end(parm7.val);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_runtime_vcreate(domain_id, source, level, data, dlen, package_flags, fmt, ap);
   38ce2:	2300      	movs	r3, #0
   38ce4:	e9cd 0102 	strd	r0, r1, [sp, #8]
   38ce8:	e9cd 3300 	strd	r3, r3, [sp]
   38cec:	461a      	mov	r2, r3
   38cee:	4619      	mov	r1, r3
   38cf0:	4618      	mov	r0, r3
   38cf2:	f7ed fabd 	bl	26270 <z_impl_z_log_msg_runtime_vcreate>
}
   38cf6:	b005      	add	sp, #20
   38cf8:	f85d fb04 	ldr.w	pc, [sp], #4

00038cfc <z_log_notify_drop>:
				     const union mpsc_pbuf_generic *item)
{
	ARG_UNUSED(buffer);
	ARG_UNUSED(item);

	z_log_dropped(true);
   38cfc:	2001      	movs	r0, #1
   38cfe:	f7ec bf11 	b.w	25b24 <z_log_dropped>

00038d02 <z_log_get_tag>:
}
   38d02:	2000      	movs	r0, #0
   38d04:	4770      	bx	lr

00038d06 <z_cbprintf_cpy>:
{
   38d06:	b570      	push	{r4, r5, r6, lr}
	if ((desc->size - desc->off) < len) {
   38d08:	e9d2 3601 	ldrd	r3, r6, [r2, #4]
   38d0c:	1b9b      	subs	r3, r3, r6
   38d0e:	428b      	cmp	r3, r1
{
   38d10:	460c      	mov	r4, r1
   38d12:	4615      	mov	r5, r2
	if ((desc->size - desc->off) < len) {
   38d14:	d30a      	bcc.n	38d2c <z_cbprintf_cpy+0x26>
	memcpy(&((uint8_t *)desc->buf)[desc->off], buf, len);
   38d16:	6813      	ldr	r3, [r2, #0]
   38d18:	460a      	mov	r2, r1
   38d1a:	4601      	mov	r1, r0
   38d1c:	1998      	adds	r0, r3, r6
   38d1e:	f000 fb47 	bl	393b0 <memcpy>
	desc->off += len;
   38d22:	68ab      	ldr	r3, [r5, #8]
   38d24:	4423      	add	r3, r4
   38d26:	60ab      	str	r3, [r5, #8]
	return len;
   38d28:	4620      	mov	r0, r4
}
   38d2a:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOSPC;
   38d2c:	f06f 001b 	mvn.w	r0, #27
   38d30:	e7fb      	b.n	38d2a <z_cbprintf_cpy+0x24>

00038d32 <z_log_msg_finalize>:
{
   38d32:	b570      	push	{r4, r5, r6, lr}
   38d34:	460e      	mov	r6, r1
   38d36:	4615      	mov	r5, r2
   38d38:	4619      	mov	r1, r3
	if (!msg) {
   38d3a:	4604      	mov	r4, r0
   38d3c:	b918      	cbnz	r0, 38d46 <z_log_msg_finalize+0x14>
}
   38d3e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_log_dropped(false);
   38d42:	f7ec beef 	b.w	25b24 <z_log_dropped>
	if (data) {
   38d46:	b13b      	cbz	r3, 38d58 <z_log_msg_finalize+0x26>
		uint8_t *d = msg->data + desc.package_len;
   38d48:	f3c2 2349 	ubfx	r3, r2, #9, #10
   38d4c:	3010      	adds	r0, #16
		memcpy(d, data, desc.data_len);
   38d4e:	f3c2 42cb 	ubfx	r2, r2, #19, #12
   38d52:	4418      	add	r0, r3
   38d54:	f000 fb2c 	bl	393b0 <memcpy>
	msg->hdr.source = source;
   38d58:	e9c4 5600 	strd	r5, r6, [r4]
	z_log_msg_commit(msg);
   38d5c:	4620      	mov	r0, r4
}
   38d5e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_log_msg_commit(msg);
   38d62:	f7ed b8f9 	b.w	25f58 <z_log_msg_commit>

00038d66 <buffer_write>:
{
   38d66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   38d68:	4606      	mov	r6, r0
   38d6a:	460d      	mov	r5, r1
   38d6c:	4614      	mov	r4, r2
   38d6e:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
   38d70:	4621      	mov	r1, r4
   38d72:	4628      	mov	r0, r5
   38d74:	463a      	mov	r2, r7
   38d76:	47b0      	blx	r6
	} while (len != 0);
   38d78:	1a24      	subs	r4, r4, r0
		buf += processed;
   38d7a:	4405      	add	r5, r0
	} while (len != 0);
   38d7c:	d1f8      	bne.n	38d70 <buffer_write+0xa>
}
   38d7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00038d80 <cbvprintf>:
{
   38d80:	b513      	push	{r0, r1, r4, lr}
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
   38d82:	2400      	movs	r4, #0
   38d84:	9400      	str	r4, [sp, #0]
   38d86:	f7ec f841 	bl	24e0c <z_cbvprintf_impl>
}
   38d8a:	b002      	add	sp, #8
   38d8c:	bd10      	pop	{r4, pc}

00038d8e <log_output_flush>:
{
   38d8e:	b510      	push	{r4, lr}
		     output->control_block->offset,
   38d90:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
   38d92:	6881      	ldr	r1, [r0, #8]
{
   38d94:	4604      	mov	r4, r0
	buffer_write(output->func, output->buf,
   38d96:	e9d2 2300 	ldrd	r2, r3, [r2]
   38d9a:	6800      	ldr	r0, [r0, #0]
   38d9c:	f7ff ffe3 	bl	38d66 <buffer_write>
	output->control_block->offset = 0;
   38da0:	6863      	ldr	r3, [r4, #4]
   38da2:	2200      	movs	r2, #0
   38da4:	601a      	str	r2, [r3, #0]
}
   38da6:	bd10      	pop	{r4, pc}

00038da8 <cr_out_func>:
	if (c == '\n') {
   38da8:	280a      	cmp	r0, #10
{
   38daa:	b538      	push	{r3, r4, r5, lr}
   38dac:	4604      	mov	r4, r0
   38dae:	460d      	mov	r5, r1
	if (c == '\n') {
   38db0:	d102      	bne.n	38db8 <cr_out_func+0x10>
		out_func((int)'\r', ctx);
   38db2:	200d      	movs	r0, #13
   38db4:	f7ed fadc 	bl	26370 <out_func>
	out_func(c, ctx);
   38db8:	4629      	mov	r1, r5
   38dba:	4620      	mov	r0, r4
   38dbc:	f7ed fad8 	bl	26370 <out_func>
}
   38dc0:	2000      	movs	r0, #0
   38dc2:	bd38      	pop	{r3, r4, r5, pc}

00038dc4 <hts221_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_read_reg(stmdev_ctx_t *ctx, uint8_t reg, uint8_t *data,
                        uint16_t len)
{
   38dc4:	b410      	push	{r4}
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
   38dc6:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
   38dca:	46a4      	mov	ip, r4

  return ret;
}
   38dcc:	bc10      	pop	{r4}
  ret = ctx->read_reg(ctx->handle, reg, data, len);
   38dce:	4760      	bx	ip

00038dd0 <hts221_write_reg>:
  *
  */
int32_t hts221_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
   38dd0:	b410      	push	{r4}
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
   38dd2:	6804      	ldr	r4, [r0, #0]
   38dd4:	6880      	ldr	r0, [r0, #8]
   38dd6:	46a4      	mov	ip, r4

  return ret;
}
   38dd8:	bc10      	pop	{r4}
  ret = ctx->write_reg(ctx->handle, reg, data, len);
   38dda:	4760      	bx	ip

00038ddc <hts221_data_rate_set>:
  * @param  val     change the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_set(stmdev_ctx_t *ctx, hts221_odr_t val)
{
   38ddc:	b537      	push	{r0, r1, r2, r4, r5, lr}
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
   38dde:	2301      	movs	r3, #1
{
   38de0:	460d      	mov	r5, r1
  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
   38de2:	aa01      	add	r2, sp, #4
   38de4:	2120      	movs	r1, #32
{
   38de6:	4604      	mov	r4, r0
  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
   38de8:	f7ff ffec 	bl	38dc4 <hts221_read_reg>

  if (ret == 0)
   38dec:	b958      	cbnz	r0, 38e06 <hts221_data_rate_set+0x2a>
  {
    reg.odr = (uint8_t)val;
   38dee:	f89d 3004 	ldrb.w	r3, [sp, #4]
   38df2:	f365 0301 	bfi	r3, r5, #0, #2
   38df6:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
   38dfa:	aa01      	add	r2, sp, #4
   38dfc:	2301      	movs	r3, #1
   38dfe:	2120      	movs	r1, #32
   38e00:	4620      	mov	r0, r4
   38e02:	f7ff ffe5 	bl	38dd0 <hts221_write_reg>
  }

  return ret;
}
   38e06:	b003      	add	sp, #12
   38e08:	bd30      	pop	{r4, r5, pc}

00038e0a <hts221_block_data_update_set>:
  * @param  val     change the values of bdu in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
   38e0a:	b537      	push	{r0, r1, r2, r4, r5, lr}
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
   38e0c:	2301      	movs	r3, #1
{
   38e0e:	460d      	mov	r5, r1
  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
   38e10:	aa01      	add	r2, sp, #4
   38e12:	2120      	movs	r1, #32
{
   38e14:	4604      	mov	r4, r0
  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
   38e16:	f7ff ffd5 	bl	38dc4 <hts221_read_reg>

  if (ret == 0)
   38e1a:	b958      	cbnz	r0, 38e34 <hts221_block_data_update_set+0x2a>
  {
    reg.bdu = val;
   38e1c:	f89d 3004 	ldrb.w	r3, [sp, #4]
   38e20:	f365 0382 	bfi	r3, r5, #2, #1
   38e24:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
   38e28:	aa01      	add	r2, sp, #4
   38e2a:	2301      	movs	r3, #1
   38e2c:	2120      	movs	r1, #32
   38e2e:	4620      	mov	r0, r4
   38e30:	f7ff ffce 	bl	38dd0 <hts221_write_reg>
  }

  return ret;
}
   38e34:	b003      	add	sp, #12
   38e36:	bd30      	pop	{r4, r5, pc}

00038e38 <hts221_device_id_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
   38e38:	460a      	mov	r2, r1
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_WHO_AM_I, buff, 1);
   38e3a:	2301      	movs	r3, #1
   38e3c:	210f      	movs	r1, #15
   38e3e:	f7ff bfc1 	b.w	38dc4 <hts221_read_reg>

00038e42 <hts221_power_on_set>:
  * @param  val     change the values of pd in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_power_on_set(stmdev_ctx_t *ctx, uint8_t val)
{
   38e42:	b537      	push	{r0, r1, r2, r4, r5, lr}
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
   38e44:	2301      	movs	r3, #1
{
   38e46:	460d      	mov	r5, r1
  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
   38e48:	aa01      	add	r2, sp, #4
   38e4a:	2120      	movs	r1, #32
{
   38e4c:	4604      	mov	r4, r0
  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
   38e4e:	f7ff ffb9 	bl	38dc4 <hts221_read_reg>

  if (ret == 0)
   38e52:	b958      	cbnz	r0, 38e6c <hts221_power_on_set+0x2a>
  {
    reg.pd = val;
   38e54:	f89d 3004 	ldrb.w	r3, [sp, #4]
   38e58:	f365 13c7 	bfi	r3, r5, #7, #1
   38e5c:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
   38e60:	aa01      	add	r2, sp, #4
   38e62:	2301      	movs	r3, #1
   38e64:	2120      	movs	r1, #32
   38e66:	4620      	mov	r0, r4
   38e68:	f7ff ffb2 	bl	38dd0 <hts221_write_reg>
  }

  return ret;
}
   38e6c:	b003      	add	sp, #12
   38e6e:	bd30      	pop	{r4, r5, pc}

00038e70 <hts221_drdy_on_int_set>:
  * @param  val     change the values of drdy in reg CTRL_REG3
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_drdy_on_int_set(stmdev_ctx_t *ctx, uint8_t val)
{
   38e70:	b537      	push	{r0, r1, r2, r4, r5, lr}
  hts221_ctrl_reg3_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG3, (uint8_t *) &reg, 1);
   38e72:	2301      	movs	r3, #1
{
   38e74:	460d      	mov	r5, r1
  ret = hts221_read_reg(ctx, HTS221_CTRL_REG3, (uint8_t *) &reg, 1);
   38e76:	aa01      	add	r2, sp, #4
   38e78:	2122      	movs	r1, #34	; 0x22
{
   38e7a:	4604      	mov	r4, r0
  ret = hts221_read_reg(ctx, HTS221_CTRL_REG3, (uint8_t *) &reg, 1);
   38e7c:	f7ff ffa2 	bl	38dc4 <hts221_read_reg>

  if (ret == 0)
   38e80:	b958      	cbnz	r0, 38e9a <hts221_drdy_on_int_set+0x2a>
  {
    reg.drdy = val;
   38e82:	f89d 3004 	ldrb.w	r3, [sp, #4]
   38e86:	f365 0382 	bfi	r3, r5, #2, #1
   38e8a:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG3, (uint8_t *) &reg, 1);
   38e8e:	aa01      	add	r2, sp, #4
   38e90:	2301      	movs	r3, #1
   38e92:	2122      	movs	r1, #34	; 0x22
   38e94:	4620      	mov	r0, r4
   38e96:	f7ff ff9b 	bl	38dd0 <hts221_write_reg>
  }

  return ret;
}
   38e9a:	b003      	add	sp, #12
   38e9c:	bd30      	pop	{r4, r5, pc}

00038e9e <_copy>:

#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
   38e9e:	b538      	push	{r3, r4, r5, lr}
   38ea0:	460d      	mov	r5, r1
	if (from_len <= to_len) {
   38ea2:	42ab      	cmp	r3, r5
{
   38ea4:	4611      	mov	r1, r2
   38ea6:	461c      	mov	r4, r3
	if (from_len <= to_len) {
   38ea8:	d804      	bhi.n	38eb4 <_copy+0x16>
		(void)memcpy(to, from, from_len);
   38eaa:	461a      	mov	r2, r3
   38eac:	f000 fa80 	bl	393b0 <memcpy>
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   38eb0:	4620      	mov	r0, r4
   38eb2:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   38eb4:	2400      	movs	r4, #0
   38eb6:	e7fb      	b.n	38eb0 <_copy+0x12>

00038eb8 <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
	(void)memset(to, val, len);
   38eb8:	f000 ba85 	b.w	393c6 <memset>

00038ebc <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   38ebc:	09c3      	lsrs	r3, r0, #7
   38ebe:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   38ec2:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   38ec6:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   38eca:	b2c0      	uxtb	r0, r0
   38ecc:	4770      	bx	lr

00038ece <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   38ece:	78cb      	ldrb	r3, [r1, #3]
   38ed0:	7802      	ldrb	r2, [r0, #0]
   38ed2:	4053      	eors	r3, r2
   38ed4:	7003      	strb	r3, [r0, #0]
   38ed6:	884b      	ldrh	r3, [r1, #2]
   38ed8:	7842      	ldrb	r2, [r0, #1]
   38eda:	4053      	eors	r3, r2
   38edc:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   38ede:	680a      	ldr	r2, [r1, #0]
   38ee0:	7883      	ldrb	r3, [r0, #2]
   38ee2:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   38ee6:	7083      	strb	r3, [r0, #2]
   38ee8:	680a      	ldr	r2, [r1, #0]
   38eea:	78c3      	ldrb	r3, [r0, #3]
   38eec:	4053      	eors	r3, r2
   38eee:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   38ef0:	79cb      	ldrb	r3, [r1, #7]
   38ef2:	7902      	ldrb	r2, [r0, #4]
   38ef4:	4053      	eors	r3, r2
   38ef6:	7103      	strb	r3, [r0, #4]
   38ef8:	88cb      	ldrh	r3, [r1, #6]
   38efa:	7942      	ldrb	r2, [r0, #5]
   38efc:	4053      	eors	r3, r2
   38efe:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   38f00:	684a      	ldr	r2, [r1, #4]
   38f02:	7983      	ldrb	r3, [r0, #6]
   38f04:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   38f08:	7183      	strb	r3, [r0, #6]
   38f0a:	684a      	ldr	r2, [r1, #4]
   38f0c:	79c3      	ldrb	r3, [r0, #7]
   38f0e:	4053      	eors	r3, r2
   38f10:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   38f12:	7acb      	ldrb	r3, [r1, #11]
   38f14:	7a02      	ldrb	r2, [r0, #8]
   38f16:	4053      	eors	r3, r2
   38f18:	7203      	strb	r3, [r0, #8]
   38f1a:	7a42      	ldrb	r2, [r0, #9]
   38f1c:	894b      	ldrh	r3, [r1, #10]
   38f1e:	4053      	eors	r3, r2
   38f20:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   38f22:	688a      	ldr	r2, [r1, #8]
   38f24:	7a83      	ldrb	r3, [r0, #10]
   38f26:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   38f2a:	7283      	strb	r3, [r0, #10]
   38f2c:	688a      	ldr	r2, [r1, #8]
   38f2e:	7ac3      	ldrb	r3, [r0, #11]
   38f30:	4053      	eors	r3, r2
   38f32:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   38f34:	7bcb      	ldrb	r3, [r1, #15]
   38f36:	7b02      	ldrb	r2, [r0, #12]
   38f38:	4053      	eors	r3, r2
   38f3a:	7303      	strb	r3, [r0, #12]
   38f3c:	89cb      	ldrh	r3, [r1, #14]
   38f3e:	7b42      	ldrb	r2, [r0, #13]
   38f40:	4053      	eors	r3, r2
   38f42:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   38f44:	68ca      	ldr	r2, [r1, #12]
   38f46:	7b83      	ldrb	r3, [r0, #14]
   38f48:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   38f4c:	7383      	strb	r3, [r0, #14]
   38f4e:	68ca      	ldr	r2, [r1, #12]
   38f50:	7bc3      	ldrb	r3, [r0, #15]
   38f52:	4053      	eors	r3, r2
   38f54:	73c3      	strb	r3, [r0, #15]
}
   38f56:	4770      	bx	lr

00038f58 <shift_rows>:
/*
 * This shift_rows also implements the matrix flip required for mix_columns, but
 * performs it here to reduce the number of memory operations.
 */
static inline void shift_rows(uint8_t *s)
{
   38f58:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t t[Nb * Nk];

	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   38f5a:	7802      	ldrb	r2, [r0, #0]
   38f5c:	f88d 2000 	strb.w	r2, [sp]
   38f60:	7942      	ldrb	r2, [r0, #5]
   38f62:	f88d 2001 	strb.w	r2, [sp, #1]
   38f66:	7a82      	ldrb	r2, [r0, #10]
   38f68:	f88d 2002 	strb.w	r2, [sp, #2]
   38f6c:	7bc2      	ldrb	r2, [r0, #15]
   38f6e:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   38f72:	7902      	ldrb	r2, [r0, #4]
   38f74:	f88d 2004 	strb.w	r2, [sp, #4]
   38f78:	7a42      	ldrb	r2, [r0, #9]
   38f7a:	f88d 2005 	strb.w	r2, [sp, #5]
   38f7e:	7b82      	ldrb	r2, [r0, #14]
   38f80:	f88d 2006 	strb.w	r2, [sp, #6]
   38f84:	78c2      	ldrb	r2, [r0, #3]
   38f86:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   38f8a:	7a02      	ldrb	r2, [r0, #8]
   38f8c:	f88d 2008 	strb.w	r2, [sp, #8]
   38f90:	7b42      	ldrb	r2, [r0, #13]
   38f92:	f88d 2009 	strb.w	r2, [sp, #9]
   38f96:	7882      	ldrb	r2, [r0, #2]
   38f98:	f88d 200a 	strb.w	r2, [sp, #10]
   38f9c:	79c2      	ldrb	r2, [r0, #7]
   38f9e:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   38fa2:	7b02      	ldrb	r2, [r0, #12]
   38fa4:	f88d 200c 	strb.w	r2, [sp, #12]
   38fa8:	7842      	ldrb	r2, [r0, #1]
   38faa:	7ac3      	ldrb	r3, [r0, #11]
   38fac:	f88d 200d 	strb.w	r2, [sp, #13]
   38fb0:	7982      	ldrb	r2, [r0, #6]
   38fb2:	f88d 200e 	strb.w	r2, [sp, #14]
   38fb6:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   38fba:	2310      	movs	r3, #16
   38fbc:	466a      	mov	r2, sp
   38fbe:	4619      	mov	r1, r3
   38fc0:	f7ff ff6d 	bl	38e9e <_copy>
}
   38fc4:	b005      	add	sp, #20
   38fc6:	f85d fb04 	ldr.w	pc, [sp], #4

00038fca <mult_row_column>:
{
   38fca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   38fcc:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   38fce:	7808      	ldrb	r0, [r1, #0]
{
   38fd0:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   38fd2:	f7ff ff73 	bl	38ebc <_double_byte>
   38fd6:	4605      	mov	r5, r0
   38fd8:	7860      	ldrb	r0, [r4, #1]
   38fda:	f7ff ff6f 	bl	38ebc <_double_byte>
   38fde:	78a2      	ldrb	r2, [r4, #2]
   38fe0:	7863      	ldrb	r3, [r4, #1]
   38fe2:	4053      	eors	r3, r2
   38fe4:	78e2      	ldrb	r2, [r4, #3]
   38fe6:	4053      	eors	r3, r2
   38fe8:	405d      	eors	r5, r3
   38fea:	4068      	eors	r0, r5
   38fec:	7030      	strb	r0, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   38fee:	7860      	ldrb	r0, [r4, #1]
   38ff0:	7827      	ldrb	r7, [r4, #0]
   38ff2:	f7ff ff63 	bl	38ebc <_double_byte>
   38ff6:	4605      	mov	r5, r0
   38ff8:	78a0      	ldrb	r0, [r4, #2]
   38ffa:	f7ff ff5f 	bl	38ebc <_double_byte>
   38ffe:	78a3      	ldrb	r3, [r4, #2]
   39000:	405f      	eors	r7, r3
   39002:	78e3      	ldrb	r3, [r4, #3]
   39004:	405f      	eors	r7, r3
   39006:	407d      	eors	r5, r7
   39008:	4068      	eors	r0, r5
   3900a:	7070      	strb	r0, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   3900c:	7863      	ldrb	r3, [r4, #1]
   3900e:	7827      	ldrb	r7, [r4, #0]
   39010:	78a0      	ldrb	r0, [r4, #2]
   39012:	405f      	eors	r7, r3
   39014:	f7ff ff52 	bl	38ebc <_double_byte>
   39018:	4605      	mov	r5, r0
   3901a:	78e0      	ldrb	r0, [r4, #3]
   3901c:	f7ff ff4e 	bl	38ebc <_double_byte>
   39020:	78e3      	ldrb	r3, [r4, #3]
   39022:	405f      	eors	r7, r3
   39024:	407d      	eors	r5, r7
   39026:	4068      	eors	r0, r5
   39028:	70b0      	strb	r0, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   3902a:	7820      	ldrb	r0, [r4, #0]
   3902c:	f7ff ff46 	bl	38ebc <_double_byte>
   39030:	7862      	ldrb	r2, [r4, #1]
   39032:	7823      	ldrb	r3, [r4, #0]
   39034:	4053      	eors	r3, r2
   39036:	78a2      	ldrb	r2, [r4, #2]
   39038:	4053      	eors	r3, r2
   3903a:	ea80 0503 	eor.w	r5, r0, r3
   3903e:	78e0      	ldrb	r0, [r4, #3]
   39040:	f7ff ff3c 	bl	38ebc <_double_byte>
   39044:	b2ed      	uxtb	r5, r5
   39046:	4045      	eors	r5, r0
   39048:	70f5      	strb	r5, [r6, #3]
}
   3904a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0003904c <tc_aes_encrypt>:

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
   3904c:	b570      	push	{r4, r5, r6, lr}
   3904e:	4614      	mov	r4, r2
   39050:	b088      	sub	sp, #32
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
   39052:	4605      	mov	r5, r0
   39054:	2800      	cmp	r0, #0
   39056:	d049      	beq.n	390ec <tc_aes_encrypt+0xa0>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
   39058:	2900      	cmp	r1, #0
   3905a:	d049      	beq.n	390f0 <tc_aes_encrypt+0xa4>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
   3905c:	2a00      	cmp	r2, #0
   3905e:	d049      	beq.n	390f4 <tc_aes_encrypt+0xa8>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
   39060:	2310      	movs	r3, #16
   39062:	460a      	mov	r2, r1
   39064:	4668      	mov	r0, sp
   39066:	4619      	mov	r1, r3
   39068:	f7ff ff19 	bl	38e9e <_copy>
	add_round_key(state, s->words);
   3906c:	4621      	mov	r1, r4
   3906e:	4668      	mov	r0, sp
   39070:	f7ff ff2d 	bl	38ece <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
   39074:	3410      	adds	r4, #16
   39076:	f101 06a0 	add.w	r6, r1, #160	; 0xa0
		sub_bytes(state);
   3907a:	4668      	mov	r0, sp
   3907c:	f7ed fe16 	bl	26cac <sub_bytes>
		shift_rows(state);
   39080:	4668      	mov	r0, sp
   39082:	f7ff ff69 	bl	38f58 <shift_rows>
	mult_row_column(t, s);
   39086:	4669      	mov	r1, sp
   39088:	a804      	add	r0, sp, #16
   3908a:	f7ff ff9e 	bl	38fca <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
   3908e:	a901      	add	r1, sp, #4
   39090:	a805      	add	r0, sp, #20
   39092:	f7ff ff9a 	bl	38fca <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
   39096:	a902      	add	r1, sp, #8
   39098:	a806      	add	r0, sp, #24
   3909a:	f7ff ff96 	bl	38fca <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
   3909e:	a903      	add	r1, sp, #12
   390a0:	a807      	add	r0, sp, #28
   390a2:	f7ff ff92 	bl	38fca <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
   390a6:	2310      	movs	r3, #16
   390a8:	4619      	mov	r1, r3
   390aa:	eb0d 0203 	add.w	r2, sp, r3
   390ae:	4668      	mov	r0, sp
   390b0:	f7ff fef5 	bl	38e9e <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
   390b4:	4621      	mov	r1, r4
   390b6:	4668      	mov	r0, sp
	for (i = 0; i < (Nr - 1); ++i) {
   390b8:	3410      	adds	r4, #16
		add_round_key(state, s->words + Nb*(i+1));
   390ba:	f7ff ff08 	bl	38ece <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
   390be:	42b4      	cmp	r4, r6
   390c0:	d1db      	bne.n	3907a <tc_aes_encrypt+0x2e>
	}

	sub_bytes(state);
   390c2:	f7ed fdf3 	bl	26cac <sub_bytes>
	shift_rows(state);
   390c6:	4668      	mov	r0, sp
   390c8:	f7ff ff46 	bl	38f58 <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
   390cc:	4621      	mov	r1, r4
   390ce:	4668      	mov	r0, sp
   390d0:	f7ff fefd 	bl	38ece <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
   390d4:	2310      	movs	r3, #16
   390d6:	4619      	mov	r1, r3
   390d8:	466a      	mov	r2, sp
   390da:	4628      	mov	r0, r5
   390dc:	f7ff fedf 	bl	38e9e <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
   390e0:	4668      	mov	r0, sp
   390e2:	2210      	movs	r2, #16
   390e4:	2100      	movs	r1, #0
   390e6:	f7ff fee7 	bl	38eb8 <_set>

	return TC_CRYPTO_SUCCESS;
   390ea:	2001      	movs	r0, #1
}
   390ec:	b008      	add	sp, #32
   390ee:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   390f0:	4608      	mov	r0, r1
   390f2:	e7fb      	b.n	390ec <tc_aes_encrypt+0xa0>
   390f4:	4610      	mov	r0, r2
   390f6:	e7f9      	b.n	390ec <tc_aes_encrypt+0xa0>

000390f8 <gf_double>:
 *           the in and out buffers do not overlap.
 *  effects: doubles the GF(2^n) value pointed to by "in" and places
 *           the result in the GF(2^n) value pointed to by "out."
 */
void gf_double(uint8_t *out, uint8_t *in)
{
   390f8:	b510      	push	{r4, lr}

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   390fa:	460a      	mov	r2, r1

	out += (TC_AES_BLOCK_SIZE - 1);
   390fc:	300f      	adds	r0, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   390fe:	f912 3b10 	ldrsb.w	r3, [r2], #16
   39102:	2b00      	cmp	r3, #0
   39104:	bfac      	ite	ge
   39106:	2300      	movge	r3, #0
   39108:	2387      	movlt	r3, #135	; 0x87
	for (;;) {
		*out-- = (*x << 1) ^ carry;
   3910a:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   3910e:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
		if (x == in) {
   39112:	428a      	cmp	r2, r1
		*out-- = (*x << 1) ^ carry;
   39114:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
   39118:	d002      	beq.n	39120 <gf_double+0x28>
			break;
		}
		carry = *x-- >> 7;
   3911a:	7813      	ldrb	r3, [r2, #0]
   3911c:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
   3911e:	e7f4      	b.n	3910a <gf_double+0x12>
	}
}
   39120:	bd10      	pop	{r4, pc}

00039122 <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
   39122:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
   39124:	b120      	cbz	r0, 39130 <tc_cmac_erase+0xe>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   39126:	2258      	movs	r2, #88	; 0x58
   39128:	2100      	movs	r1, #0
   3912a:	f7ff fec5 	bl	38eb8 <_set>
   3912e:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   39130:	bd08      	pop	{r3, pc}

00039132 <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
   39132:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   39134:	4604      	mov	r4, r0
   39136:	b188      	cbz	r0, 3915c <tc_cmac_init+0x2a>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   39138:	2210      	movs	r2, #16
   3913a:	2100      	movs	r1, #0
   3913c:	f7ff febc 	bl	38eb8 <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   39140:	2210      	movs	r2, #16
   39142:	f104 0030 	add.w	r0, r4, #48	; 0x30
   39146:	2100      	movs	r1, #0
   39148:	f7ff feb6 	bl	38eb8 <_set>
	s->leftover_offset = 0;
   3914c:	2300      	movs	r3, #0
   3914e:	6463      	str	r3, [r4, #68]	; 0x44

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   39150:	2200      	movs	r2, #0
   39152:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   39156:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
   3915a:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   3915c:	bd10      	pop	{r4, pc}

0003915e <tc_cmac_setup>:
{
   3915e:	b570      	push	{r4, r5, r6, lr}
   39160:	4604      	mov	r4, r0
   39162:	460d      	mov	r5, r1
   39164:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
   39166:	b310      	cbz	r0, 391ae <tc_cmac_setup+0x50>
   39168:	b311      	cbz	r1, 391b0 <tc_cmac_setup+0x52>
	_set(s, 0, sizeof(*s));
   3916a:	2258      	movs	r2, #88	; 0x58
   3916c:	2100      	movs	r1, #0
   3916e:	f7ff fea3 	bl	38eb8 <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
   39172:	4629      	mov	r1, r5
	s->sched = sched;
   39174:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   39176:	4630      	mov	r0, r6
   39178:	f7ed fda4 	bl	26cc4 <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   3917c:	2210      	movs	r2, #16
   3917e:	2100      	movs	r1, #0
   39180:	4620      	mov	r0, r4
   39182:	f7ff fe99 	bl	38eb8 <_set>
	gf_double (s->K1, s->iv);
   39186:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   3918a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   3918c:	4621      	mov	r1, r4
   3918e:	4620      	mov	r0, r4
   39190:	f7ff ff5c 	bl	3904c <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   39194:	4621      	mov	r1, r4
   39196:	4628      	mov	r0, r5
   39198:	f7ff ffae 	bl	390f8 <gf_double>
	gf_double (s->K2, s->K1);
   3919c:	4629      	mov	r1, r5
   3919e:	f104 0020 	add.w	r0, r4, #32
   391a2:	f7ff ffa9 	bl	390f8 <gf_double>
	tc_cmac_init(s);
   391a6:	4620      	mov	r0, r4
   391a8:	f7ff ffc3 	bl	39132 <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   391ac:	2001      	movs	r0, #1
}
   391ae:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   391b0:	4608      	mov	r0, r1
   391b2:	e7fc      	b.n	391ae <tc_cmac_setup+0x50>

000391b4 <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
   391b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   391b8:	460e      	mov	r6, r1
   391ba:	4615      	mov	r5, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   391bc:	4604      	mov	r4, r0
   391be:	2800      	cmp	r0, #0
   391c0:	d060      	beq.n	39284 <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   391c2:	b1fa      	cbz	r2, 39204 <tc_cmac_update+0x50>
		return  TC_CRYPTO_SUCCESS;
	}
	if (data == (const uint8_t *) 0) {
   391c4:	2900      	cmp	r1, #0
   391c6:	d05d      	beq.n	39284 <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}

	if (s->countdown == 0) {
   391c8:	e9d0 3214 	ldrd	r3, r2, [r0, #80]	; 0x50
   391cc:	ea53 0102 	orrs.w	r1, r3, r2
   391d0:	d058      	beq.n	39284 <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}

	s->countdown--;
   391d2:	3b01      	subs	r3, #1

	if (s->leftover_offset > 0) {
   391d4:	f8d0 8044 	ldr.w	r8, [r0, #68]	; 0x44
	s->countdown--;
   391d8:	f142 32ff 	adc.w	r2, r2, #4294967295	; 0xffffffff
   391dc:	e9c0 3214 	strd	r3, r2, [r0, #80]	; 0x50
	if (s->leftover_offset > 0) {
   391e0:	f1b8 0f00 	cmp.w	r8, #0
   391e4:	d02c      	beq.n	39240 <tc_cmac_update+0x8c>
		/* last data added to s didn't end on a TC_AES_BLOCK_SIZE byte boundary */
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   391e6:	f1c8 0710 	rsb	r7, r8, #16

		if (data_length < remaining_space) {
			/* still not enough data to encrypt this time either */
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   391ea:	f108 0030 	add.w	r0, r8, #48	; 0x30
		if (data_length < remaining_space) {
   391ee:	42bd      	cmp	r5, r7
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   391f0:	4420      	add	r0, r4
		if (data_length < remaining_space) {
   391f2:	d20a      	bcs.n	3920a <tc_cmac_update+0x56>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   391f4:	462b      	mov	r3, r5
   391f6:	4632      	mov	r2, r6
   391f8:	4629      	mov	r1, r5
   391fa:	f7ff fe50 	bl	38e9e <_copy>
			s->leftover_offset += data_length;
   391fe:	6c63      	ldr	r3, [r4, #68]	; 0x44
   39200:	442b      	add	r3, r5
   39202:	6463      	str	r3, [r4, #68]	; 0x44
		return  TC_CRYPTO_SUCCESS;
   39204:	2001      	movs	r0, #1
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
}
   39206:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		_copy(&s->leftover[s->leftover_offset],
   3920a:	463b      	mov	r3, r7
   3920c:	4632      	mov	r2, r6
   3920e:	4639      	mov	r1, r7
   39210:	f7ff fe45 	bl	38e9e <_copy>
		data_length -= remaining_space;
   39214:	3d10      	subs	r5, #16
		s->leftover_offset = 0;
   39216:	2300      	movs	r3, #0
   39218:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
   3921a:	4445      	add	r5, r8
		data += remaining_space;
   3921c:	443e      	add	r6, r7
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   3921e:	1e63      	subs	r3, r4, #1
   39220:	f104 010f 	add.w	r1, r4, #15
			s->iv[i] ^= s->leftover[i];
   39224:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   39228:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   3922c:	428b      	cmp	r3, r1
			s->iv[i] ^= s->leftover[i];
   3922e:	ea82 0200 	eor.w	r2, r2, r0
   39232:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   39234:	d1f6      	bne.n	39224 <tc_cmac_update+0x70>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   39236:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   39238:	4621      	mov	r1, r4
   3923a:	4620      	mov	r0, r4
   3923c:	f7ff ff06 	bl	3904c <tc_aes_encrypt>
   39240:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
   39244:	2d10      	cmp	r5, #16
   39246:	d80a      	bhi.n	3925e <tc_cmac_update+0xaa>
	if (data_length > 0) {
   39248:	2d00      	cmp	r5, #0
   3924a:	d0db      	beq.n	39204 <tc_cmac_update+0x50>
		_copy(s->leftover, data_length, data, data_length);
   3924c:	462b      	mov	r3, r5
   3924e:	4632      	mov	r2, r6
   39250:	4629      	mov	r1, r5
   39252:	f104 0030 	add.w	r0, r4, #48	; 0x30
   39256:	f7ff fe22 	bl	38e9e <_copy>
		s->leftover_offset = data_length;
   3925a:	6465      	str	r5, [r4, #68]	; 0x44
   3925c:	e7d2      	b.n	39204 <tc_cmac_update+0x50>
   3925e:	1e63      	subs	r3, r4, #1
   39260:	1e71      	subs	r1, r6, #1
			s->iv[i] ^= data[i];
   39262:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   39266:	f811 0f01 	ldrb.w	r0, [r1, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   3926a:	42bb      	cmp	r3, r7
			s->iv[i] ^= data[i];
   3926c:	ea82 0200 	eor.w	r2, r2, r0
   39270:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   39272:	d1f6      	bne.n	39262 <tc_cmac_update+0xae>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   39274:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   39276:	4621      	mov	r1, r4
   39278:	4620      	mov	r0, r4
   3927a:	f7ff fee7 	bl	3904c <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   3927e:	3610      	adds	r6, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   39280:	3d10      	subs	r5, #16
   39282:	e7df      	b.n	39244 <tc_cmac_update+0x90>
		return TC_CRYPTO_FAIL;
   39284:	2000      	movs	r0, #0
   39286:	e7be      	b.n	39206 <tc_cmac_update+0x52>

00039288 <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
   39288:	b570      	push	{r4, r5, r6, lr}
   3928a:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   3928c:	4605      	mov	r5, r0
   3928e:	b1e8      	cbz	r0, 392cc <tc_cmac_final+0x44>
   39290:	b369      	cbz	r1, 392ee <tc_cmac_final+0x66>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   39292:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   39294:	2a10      	cmp	r2, #16
   39296:	d11a      	bne.n	392ce <tc_cmac_final+0x46>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   39298:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   3929a:	1e63      	subs	r3, r4, #1
   3929c:	3901      	subs	r1, #1
   3929e:	f104 000f 	add.w	r0, r4, #15
		s->iv[i] ^= s->leftover[i] ^ k[i];
   392a2:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   392a6:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
   392aa:	4072      	eors	r2, r6
   392ac:	f811 6f01 	ldrb.w	r6, [r1, #1]!
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   392b0:	4298      	cmp	r0, r3
		s->iv[i] ^= s->leftover[i] ^ k[i];
   392b2:	ea82 0206 	eor.w	r2, r2, r6
   392b6:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   392b8:	d1f3      	bne.n	392a2 <tc_cmac_final+0x1a>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   392ba:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   392bc:	4621      	mov	r1, r4
   392be:	4628      	mov	r0, r5
   392c0:	f7ff fec4 	bl	3904c <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   392c4:	4620      	mov	r0, r4
   392c6:	f7ff ff2c 	bl	39122 <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   392ca:	2001      	movs	r0, #1
}
   392cc:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   392ce:	f102 0030 	add.w	r0, r2, #48	; 0x30
   392d2:	2100      	movs	r1, #0
   392d4:	f1c2 0210 	rsb	r2, r2, #16
   392d8:	4420      	add	r0, r4
   392da:	f7ff fded 	bl	38eb8 <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   392de:	6c63      	ldr	r3, [r4, #68]	; 0x44
   392e0:	4423      	add	r3, r4
   392e2:	2280      	movs	r2, #128	; 0x80
   392e4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   392e8:	f104 0120 	add.w	r1, r4, #32
   392ec:	e7d5      	b.n	3929a <tc_cmac_final+0x12>
		return TC_CRYPTO_FAIL;
   392ee:	4608      	mov	r0, r1
   392f0:	e7ec      	b.n	392cc <tc_cmac_final+0x44>

000392f2 <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
   392f2:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   392f4:	6800      	ldr	r0, [r0, #0]
   392f6:	f7ed bd55 	b.w	26da4 <z_arm_fatal_error>

000392fa <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   392fa:	2100      	movs	r1, #0
   392fc:	2001      	movs	r0, #1
   392fe:	f7ed bd51 	b.w	26da4 <z_arm_fatal_error>

00039302 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
   39302:	b508      	push	{r3, lr}
	handler();
   39304:	f7ed fe2c 	bl	26f60 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   39308:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   3930c:	f7ed bf04 	b.w	27118 <z_arm_exc_exit>

00039310 <z_log_msg_static_create.constprop.0>:
	z_impl_z_log_msg_static_create(source, desc, package, data);
   39310:	2300      	movs	r3, #0
   39312:	f7ec bf4b 	b.w	261ac <z_impl_z_log_msg_static_create>

00039316 <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
   39316:	3901      	subs	r1, #1
   39318:	4603      	mov	r3, r0
   3931a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   3931e:	b90a      	cbnz	r2, 39324 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
   39320:	701a      	strb	r2, [r3, #0]

	return dest;
}
   39322:	4770      	bx	lr
		*d = *s;
   39324:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
   39328:	e7f7      	b.n	3931a <strcpy+0x4>

0003932a <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   3932a:	4603      	mov	r3, r0
	size_t n = 0;
   3932c:	2000      	movs	r0, #0

	while (*s != '\0') {
   3932e:	5c1a      	ldrb	r2, [r3, r0]
   39330:	b902      	cbnz	r2, 39334 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
   39332:	4770      	bx	lr
		n++;
   39334:	3001      	adds	r0, #1
   39336:	e7fa      	b.n	3932e <strlen+0x4>

00039338 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
   39338:	4603      	mov	r3, r0
	size_t n = 0;
   3933a:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
   3933c:	5c1a      	ldrb	r2, [r3, r0]
   3933e:	b10a      	cbz	r2, 39344 <strnlen+0xc>
   39340:	4288      	cmp	r0, r1
   39342:	d100      	bne.n	39346 <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
   39344:	4770      	bx	lr
		n++;
   39346:	3001      	adds	r0, #1
   39348:	e7f8      	b.n	3933c <strnlen+0x4>

0003934a <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   3934a:	1e43      	subs	r3, r0, #1
   3934c:	3901      	subs	r1, #1
   3934e:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   39352:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   39356:	4282      	cmp	r2, r0
   39358:	d101      	bne.n	3935e <strcmp+0x14>
   3935a:	2a00      	cmp	r2, #0
   3935c:	d1f7      	bne.n	3934e <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
   3935e:	1a10      	subs	r0, r2, r0
   39360:	4770      	bx	lr

00039362 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
   39362:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   39364:	b15a      	cbz	r2, 3937e <memcmp+0x1c>
   39366:	3901      	subs	r1, #1
   39368:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   3936a:	f810 2b01 	ldrb.w	r2, [r0], #1
   3936e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   39372:	42a0      	cmp	r0, r4
   39374:	d001      	beq.n	3937a <memcmp+0x18>
   39376:	429a      	cmp	r2, r3
   39378:	d0f7      	beq.n	3936a <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
   3937a:	1ad0      	subs	r0, r2, r3
}
   3937c:	bd10      	pop	{r4, pc}
		return 0;
   3937e:	4610      	mov	r0, r2
   39380:	e7fc      	b.n	3937c <memcmp+0x1a>

00039382 <memmove>:
void *memmove(void *d, const void *s, size_t n)
{
	char *dest = d;
	const char *src  = s;

	if ((size_t) (dest - src) < n) {
   39382:	1a43      	subs	r3, r0, r1
   39384:	4293      	cmp	r3, r2
{
   39386:	b510      	push	{r4, lr}
   39388:	eb00 0302 	add.w	r3, r0, r2
	if ((size_t) (dest - src) < n) {
   3938c:	d308      	bcc.n	393a0 <memmove+0x1e>
   3938e:	3901      	subs	r1, #1
	char *dest = d;
   39390:	4602      	mov	r2, r0
			n--;
			dest[n] = src[n];
		}
	} else {
		/* It is safe to perform a forward-copy */
		while (n > 0) {
   39392:	429a      	cmp	r2, r3
   39394:	d00b      	beq.n	393ae <memmove+0x2c>
			*dest = *src;
   39396:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   3939a:	f802 4b01 	strb.w	r4, [r2], #1
			dest++;
			src++;
			n--;
   3939e:	e7f8      	b.n	39392 <memmove+0x10>
   393a0:	440a      	add	r2, r1
			dest[n] = src[n];
   393a2:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   393a6:	f803 4d01 	strb.w	r4, [r3, #-1]!
		while (n > 0) {
   393aa:	428a      	cmp	r2, r1
   393ac:	d1f9      	bne.n	393a2 <memmove+0x20>
		}
	}

	return d;
}
   393ae:	bd10      	pop	{r4, pc}

000393b0 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
   393b0:	b510      	push	{r4, lr}
   393b2:	1e43      	subs	r3, r0, #1
   393b4:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
   393b6:	4291      	cmp	r1, r2
   393b8:	d100      	bne.n	393bc <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   393ba:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
   393bc:	f811 4b01 	ldrb.w	r4, [r1], #1
   393c0:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   393c4:	e7f7      	b.n	393b6 <memcpy+0x6>

000393c6 <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
   393c6:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
   393c8:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
   393ca:	4603      	mov	r3, r0
	while (n > 0) {
   393cc:	4293      	cmp	r3, r2
   393ce:	d100      	bne.n	393d2 <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   393d0:	4770      	bx	lr
		*(d_byte++) = c_byte;
   393d2:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   393d6:	e7f9      	b.n	393cc <memset+0x6>

000393d8 <_stdout_hook_default>:
}
   393d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   393dc:	4770      	bx	lr

000393de <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
   393de:	2806      	cmp	r0, #6
   393e0:	d108      	bne.n	393f4 <pm_state_set+0x16>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
   393e2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   393e6:	2201      	movs	r2, #1
   393e8:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   393ec:	f3bf 8f4f 	dsb	sy
        __WFE();
   393f0:	bf20      	wfe
    while (true)
   393f2:	e7fd      	b.n	393f0 <pm_state_set+0x12>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
   393f4:	4770      	bx	lr

000393f6 <pm_state_exit_post_ops>:
   393f6:	2300      	movs	r3, #0
   393f8:	f383 8811 	msr	BASEPRI, r3
   393fc:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   39400:	4770      	bx	lr

00039402 <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   39402:	b510      	push	{r4, lr}
   39404:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
   39406:	7801      	ldrb	r1, [r0, #0]
   39408:	7822      	ldrb	r2, [r4, #0]
   3940a:	428a      	cmp	r2, r1
{
   3940c:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type) {
   3940e:	d00f      	beq.n	39430 <bt_uuid_cmp+0x2e>
	uuid_to_uuid128(u1, &uuid1);
   39410:	4669      	mov	r1, sp
   39412:	f7ee fcc3 	bl	27d9c <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   39416:	a905      	add	r1, sp, #20
   39418:	4620      	mov	r0, r4
   3941a:	f7ee fcbf 	bl	27d9c <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
   3941e:	2210      	movs	r2, #16
   39420:	f10d 0115 	add.w	r1, sp, #21
   39424:	f10d 0001 	add.w	r0, sp, #1
   39428:	f7ff ff9b 	bl	39362 <memcmp>
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
	}

	return -EINVAL;
}
   3942c:	b00a      	add	sp, #40	; 0x28
   3942e:	bd10      	pop	{r4, pc}
	switch (u1->type) {
   39430:	2a01      	cmp	r2, #1
   39432:	d006      	beq.n	39442 <bt_uuid_cmp+0x40>
   39434:	2a02      	cmp	r2, #2
   39436:	d007      	beq.n	39448 <bt_uuid_cmp+0x46>
   39438:	b972      	cbnz	r2, 39458 <bt_uuid_cmp+0x56>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   3943a:	8840      	ldrh	r0, [r0, #2]
   3943c:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   3943e:	1ac0      	subs	r0, r0, r3
   39440:	e7f4      	b.n	3942c <bt_uuid_cmp+0x2a>
   39442:	6840      	ldr	r0, [r0, #4]
   39444:	6863      	ldr	r3, [r4, #4]
   39446:	e7fa      	b.n	3943e <bt_uuid_cmp+0x3c>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   39448:	2210      	movs	r2, #16
   3944a:	1c61      	adds	r1, r4, #1
   3944c:	3001      	adds	r0, #1
}
   3944e:	b00a      	add	sp, #40	; 0x28
   39450:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   39454:	f7ff bf85 	b.w	39362 <memcmp>
	switch (u1->type) {
   39458:	f06f 0015 	mvn.w	r0, #21
   3945c:	e7e6      	b.n	3942c <bt_uuid_cmp+0x2a>

0003945e <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const uint8_t *data, uint8_t data_len)
{
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
   3945e:	2a04      	cmp	r2, #4
{
   39460:	b510      	push	{r4, lr}
	switch (data_len) {
   39462:	d00a      	beq.n	3947a <bt_uuid_create+0x1c>
   39464:	2a10      	cmp	r2, #16
   39466:	d00d      	beq.n	39484 <bt_uuid_create+0x26>
   39468:	2a02      	cmp	r2, #2
   3946a:	f04f 0300 	mov.w	r3, #0
   3946e:	d10f      	bne.n	39490 <bt_uuid_create+0x32>
	case BT_UUID_SIZE_16:
		uuid->type = BT_UUID_TYPE_16;
   39470:	7003      	strb	r3, [r0, #0]
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   39472:	880b      	ldrh	r3, [r1, #0]
   39474:	8043      	strh	r3, [r0, #2]
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
		break;
	default:
		return false;
	}
	return true;
   39476:	2001      	movs	r0, #1
}
   39478:	bd10      	pop	{r4, pc}
		uuid->type = BT_UUID_TYPE_32;
   3947a:	2301      	movs	r3, #1
   3947c:	7003      	strb	r3, [r0, #0]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   3947e:	680b      	ldr	r3, [r1, #0]
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   39480:	6043      	str	r3, [r0, #4]
		break;
   39482:	e7f8      	b.n	39476 <bt_uuid_create+0x18>
		uuid->type = BT_UUID_TYPE_128;
   39484:	2302      	movs	r3, #2
   39486:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
   3948a:	f7ff ff91 	bl	393b0 <memcpy>
		break;
   3948e:	e7f2      	b.n	39476 <bt_uuid_create+0x18>
	switch (data_len) {
   39490:	4618      	mov	r0, r3
   39492:	e7f1      	b.n	39478 <bt_uuid_create+0x1a>

00039494 <bt_addr_le_create_static>:
#include <zephyr/bluetooth/addr.h>
#include <zephyr/bluetooth/crypto.h>

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
   39494:	2301      	movs	r3, #1

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   39496:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   39498:	2106      	movs	r1, #6
{
   3949a:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   3949c:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   394a0:	f7f9 fba4 	bl	32bec <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   394a4:	b918      	cbnz	r0, 394ae <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   394a6:	79a3      	ldrb	r3, [r4, #6]
   394a8:	f063 033f 	orn	r3, r3, #63	; 0x3f
   394ac:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   394ae:	bd10      	pop	{r4, pc}

000394b0 <bt_hci_evt_get_flags>:
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   394b0:	280f      	cmp	r0, #15
   394b2:	d807      	bhi.n	394c4 <bt_hci_evt_get_flags+0x14>
   394b4:	280d      	cmp	r0, #13
   394b6:	d80b      	bhi.n	394d0 <bt_hci_evt_get_flags+0x20>
#endif /* CONFIG_BT_CONN ||  CONFIG_BT_ISO */
	case BT_HCI_EVT_CMD_COMPLETE:
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
   394b8:	2805      	cmp	r0, #5
   394ba:	bf08      	it	eq
   394bc:	2003      	moveq	r0, #3
   394be:	bf18      	it	ne
   394c0:	2002      	movne	r0, #2
   394c2:	4770      	bx	lr
	switch (evt) {
   394c4:	2813      	cmp	r0, #19
   394c6:	d003      	beq.n	394d0 <bt_hci_evt_get_flags+0x20>
		return BT_HCI_EVT_FLAG_RECV;
   394c8:	281a      	cmp	r0, #26
   394ca:	bf08      	it	eq
   394cc:	2001      	moveq	r0, #1
   394ce:	e7f6      	b.n	394be <bt_hci_evt_get_flags+0xe>
	switch (evt) {
   394d0:	2001      	movs	r0, #1
	}
}
   394d2:	4770      	bx	lr

000394d4 <hci_vendor_event>:
}
   394d4:	4770      	bx	lr

000394d6 <atomic_or>:
{
   394d6:	b510      	push	{r4, lr}
   394d8:	4603      	mov	r3, r0
}
   394da:	f3bf 8f5b 	dmb	ish
   394de:	e853 0f00 	ldrex	r0, [r3]
   394e2:	ea40 0201 	orr.w	r2, r0, r1
   394e6:	e843 2400 	strex	r4, r2, [r3]
   394ea:	2c00      	cmp	r4, #0
   394ec:	d1f7      	bne.n	394de <atomic_or+0x8>
   394ee:	f3bf 8f5b 	dmb	ish
   394f2:	bd10      	pop	{r4, pc}

000394f4 <z_log_msg_static_create.constprop.0>:
   394f4:	2300      	movs	r3, #0
   394f6:	f7ec be59 	b.w	261ac <z_impl_z_log_msg_static_create>

000394fa <bt_hci_disconnect>:
{
   394fa:	b570      	push	{r4, r5, r6, lr}
   394fc:	4606      	mov	r6, r0
   394fe:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   39500:	f240 4006 	movw	r0, #1030	; 0x406
   39504:	2103      	movs	r1, #3
   39506:	f7ef f941 	bl	2878c <bt_hci_cmd_create>
	if (!buf) {
   3950a:	4604      	mov	r4, r0
   3950c:	b168      	cbz	r0, 3952a <bt_hci_disconnect+0x30>
   3950e:	2103      	movs	r1, #3
   39510:	3008      	adds	r0, #8
   39512:	f7f5 fabb 	bl	2ea8c <net_buf_simple_add>
	disconn->handle = sys_cpu_to_le16(handle);
   39516:	8006      	strh	r6, [r0, #0]
	disconn->reason = reason;
   39518:	7085      	strb	r5, [r0, #2]
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   3951a:	4621      	mov	r1, r4
   3951c:	2200      	movs	r2, #0
}
   3951e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   39522:	f240 4006 	movw	r0, #1030	; 0x406
   39526:	f7ef b97b 	b.w	28820 <bt_hci_cmd_send_sync>
}
   3952a:	f06f 0068 	mvn.w	r0, #104	; 0x68
   3952e:	bd70      	pop	{r4, r5, r6, pc}

00039530 <bt_le_set_data_len>:
{
   39530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   39532:	4607      	mov	r7, r0
   39534:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   39536:	f242 0022 	movw	r0, #8226	; 0x2022
   3953a:	2106      	movs	r1, #6
{
   3953c:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   3953e:	f7ef f925 	bl	2878c <bt_hci_cmd_create>
	if (!buf) {
   39542:	4604      	mov	r4, r0
   39544:	b178      	cbz	r0, 39566 <bt_le_set_data_len+0x36>
   39546:	2106      	movs	r1, #6
   39548:	3008      	adds	r0, #8
   3954a:	f7f5 fa9f 	bl	2ea8c <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   3954e:	883b      	ldrh	r3, [r7, #0]
   39550:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
   39552:	8046      	strh	r6, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
   39554:	8085      	strh	r5, [r0, #4]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_DATA_LEN, buf, NULL);
   39556:	4621      	mov	r1, r4
   39558:	2200      	movs	r2, #0
}
   3955a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_DATA_LEN, buf, NULL);
   3955e:	f242 0022 	movw	r0, #8226	; 0x2022
   39562:	f7ef b95d 	b.w	28820 <bt_hci_cmd_send_sync>
}
   39566:	f06f 0068 	mvn.w	r0, #104	; 0x68
   3956a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0003956c <bt_le_set_phy>:
{
   3956c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   39570:	4681      	mov	r9, r0
   39572:	4688      	mov	r8, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   39574:	f242 0032 	movw	r0, #8242	; 0x2032
   39578:	2107      	movs	r1, #7
{
   3957a:	f89d a020 	ldrb.w	sl, [sp, #32]
   3957e:	4617      	mov	r7, r2
   39580:	461e      	mov	r6, r3
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   39582:	f7ef f903 	bl	2878c <bt_hci_cmd_create>
	if (!buf) {
   39586:	4605      	mov	r5, r0
   39588:	b1a0      	cbz	r0, 395b4 <bt_le_set_phy+0x48>
   3958a:	2107      	movs	r1, #7
   3958c:	3008      	adds	r0, #8
   3958e:	f7f5 fa7d 	bl	2ea8c <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   39592:	f8b9 3000 	ldrh.w	r3, [r9]
   39596:	8003      	strh	r3, [r0, #0]
	cp->all_phys = all_phys;
   39598:	f880 8002 	strb.w	r8, [r0, #2]
	cp->tx_phys = pref_tx_phy;
   3959c:	70c7      	strb	r7, [r0, #3]
	cp->rx_phys = pref_rx_phy;
   3959e:	7106      	strb	r6, [r0, #4]
	cp->phy_opts = phy_opts;
   395a0:	f8a0 a005 	strh.w	sl, [r0, #5]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PHY, buf, NULL);
   395a4:	4629      	mov	r1, r5
   395a6:	2200      	movs	r2, #0
}
   395a8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PHY, buf, NULL);
   395ac:	f242 0032 	movw	r0, #8242	; 0x2032
   395b0:	f7ef b936 	b.w	28820 <bt_hci_cmd_send_sync>
}
   395b4:	f06f 0068 	mvn.w	r0, #104	; 0x68
   395b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000395bc <le_enh_conn_complete>:
	enh_conn_complete((void *)buf->data);
   395bc:	6880      	ldr	r0, [r0, #8]
   395be:	f7ef bb67 	b.w	28c90 <enh_conn_complete>

000395c2 <bt_le_conn_params_valid>:
{
   395c2:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
   395c4:	8803      	ldrh	r3, [r0, #0]
   395c6:	8842      	ldrh	r2, [r0, #2]
   395c8:	4293      	cmp	r3, r2
   395ca:	d819      	bhi.n	39600 <bt_le_conn_params_valid+0x3e>
   395cc:	2b05      	cmp	r3, #5
   395ce:	d917      	bls.n	39600 <bt_le_conn_params_valid+0x3e>
	    param->interval_min < 6 || param->interval_max > 3200) {
   395d0:	f5b2 6f48 	cmp.w	r2, #3200	; 0xc80
   395d4:	d814      	bhi.n	39600 <bt_le_conn_params_valid+0x3e>
	if (param->latency > 499) {
   395d6:	8883      	ldrh	r3, [r0, #4]
   395d8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   395dc:	d210      	bcs.n	39600 <bt_le_conn_params_valid+0x3e>
	if (param->timeout < 10 || param->timeout > 3200 ||
   395de:	88c0      	ldrh	r0, [r0, #6]
   395e0:	f1a0 010a 	sub.w	r1, r0, #10
   395e4:	b289      	uxth	r1, r1
   395e6:	f640 4476 	movw	r4, #3190	; 0xc76
   395ea:	42a1      	cmp	r1, r4
   395ec:	d808      	bhi.n	39600 <bt_le_conn_params_valid+0x3e>
	     ((1U + param->latency) * param->interval_max))) {
   395ee:	3301      	adds	r3, #1
   395f0:	b29b      	uxth	r3, r3
   395f2:	4353      	muls	r3, r2
	if (param->timeout < 10 || param->timeout > 3200 ||
   395f4:	ebb3 0f80 	cmp.w	r3, r0, lsl #2
   395f8:	bf34      	ite	cc
   395fa:	2001      	movcc	r0, #1
   395fc:	2000      	movcs	r0, #0
}
   395fe:	bd10      	pop	{r4, pc}
		return false;
   39600:	2000      	movs	r0, #0
   39602:	e7fc      	b.n	395fe <bt_le_conn_params_valid+0x3c>

00039604 <le_conn_param_neg_reply>:
{
   39604:	b570      	push	{r4, r5, r6, lr}
   39606:	4606      	mov	r6, r0
   39608:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
   3960a:	f242 0021 	movw	r0, #8225	; 0x2021
   3960e:	2103      	movs	r1, #3
   39610:	f7ef f8bc 	bl	2878c <bt_hci_cmd_create>
	if (!buf) {
   39614:	4604      	mov	r4, r0
   39616:	b918      	cbnz	r0, 39620 <le_conn_param_neg_reply+0x1c>
}
   39618:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   3961c:	f7ee bc9a 	b.w	27f54 <le_conn_param_neg_reply.part.0>
   39620:	2103      	movs	r1, #3
   39622:	3008      	adds	r0, #8
   39624:	f7f5 fa32 	bl	2ea8c <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(handle);
   39628:	8006      	strh	r6, [r0, #0]
	cp->reason = sys_cpu_to_le16(reason);
   3962a:	7085      	strb	r5, [r0, #2]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   3962c:	4621      	mov	r1, r4
   3962e:	f242 0021 	movw	r0, #8225	; 0x2021
}
   39632:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   39636:	f7ef bb95 	b.w	28d64 <bt_hci_cmd_send>

0003963a <bt_get_appearance>:
#if defined(CONFIG_BT_DEVICE_APPEARANCE_DYNAMIC)
	return bt_dev.appearance;
#else
	return CONFIG_BT_DEVICE_APPEARANCE;
#endif
}
   3963a:	2000      	movs	r0, #0
   3963c:	4770      	bx	lr

0003963e <bt_addr_le_is_bonded>:
		/* if there are any keys stored then device is bonded */
		return keys && keys->keys;
	} else {
		return false;
	}
}
   3963e:	2000      	movs	r0, #0
   39640:	4770      	bx	lr

00039642 <bt_addr_le_eq>:
{
   39642:	b508      	push	{r3, lr}
	return memcmp(a, b, sizeof(*a));
   39644:	2207      	movs	r2, #7
   39646:	f7ff fe8c 	bl	39362 <memcmp>
}
   3964a:	fab0 f080 	clz	r0, r0
   3964e:	0940      	lsrs	r0, r0, #5
   39650:	bd08      	pop	{r3, pc}

00039652 <z_log_msg_static_create.constprop.0>:
   39652:	2300      	movs	r3, #0
   39654:	f7ec bdaa 	b.w	261ac <z_impl_z_log_msg_static_create>

00039658 <bt_lookup_id_addr>:
	return addr;
   39658:	2800      	cmp	r0, #0
}
   3965a:	bf0c      	ite	eq
   3965c:	4608      	moveq	r0, r1
   3965e:	2000      	movne	r0, #0
   39660:	4770      	bx	lr

00039662 <bt_id_set_adv_random_addr>:
{
   39662:	b570      	push	{r4, r5, r6, lr}
   39664:	460d      	mov	r5, r1
	CHECKIF(adv == NULL || addr == NULL) {
   39666:	4604      	mov	r4, r0
   39668:	2800      	cmp	r0, #0
   3966a:	d042      	beq.n	396f2 <bt_id_set_adv_random_addr+0x90>
   3966c:	2900      	cmp	r1, #0
   3966e:	d040      	beq.n	396f2 <bt_id_set_adv_random_addr+0x90>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   39670:	f3bf 8f5b 	dmb	ish
   39674:	6903      	ldr	r3, [r0, #16]
   39676:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(adv->flags, BT_ADV_PARAMS_SET)) {
   3967a:	079b      	lsls	r3, r3, #30
   3967c:	f100 0610 	add.w	r6, r0, #16
   39680:	d413      	bmi.n	396aa <bt_id_set_adv_random_addr+0x48>
	memcpy(dst, src, sizeof(*dst));
   39682:	2206      	movs	r2, #6
   39684:	3003      	adds	r0, #3
   39686:	f7ff fe93 	bl	393b0 <memcpy>
		adv->random_addr.type = BT_ADDR_LE_RANDOM;
   3968a:	2301      	movs	r3, #1
   3968c:	70a3      	strb	r3, [r4, #2]
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   3968e:	f3bf 8f5b 	dmb	ish
   39692:	e856 3f00 	ldrex	r3, [r6]
   39696:	f043 0308 	orr.w	r3, r3, #8
   3969a:	e846 3200 	strex	r2, r3, [r6]
   3969e:	2a00      	cmp	r2, #0
   396a0:	d1f7      	bne.n	39692 <bt_id_set_adv_random_addr+0x30>
   396a2:	f3bf 8f5b 	dmb	ish
	return 0;
   396a6:	2000      	movs	r0, #0
}
   396a8:	bd70      	pop	{r4, r5, r6, pc}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_SET_RANDOM_ADDR,
   396aa:	2107      	movs	r1, #7
   396ac:	f242 0035 	movw	r0, #8245	; 0x2035
   396b0:	f7ef f86c 	bl	2878c <bt_hci_cmd_create>
	if (!buf) {
   396b4:	4606      	mov	r6, r0
   396b6:	b1f8      	cbz	r0, 396f8 <bt_id_set_adv_random_addr+0x96>
   396b8:	2107      	movs	r1, #7
   396ba:	3008      	adds	r0, #8
   396bc:	f7f5 f9e6 	bl	2ea8c <net_buf_simple_add>
	cp->handle = adv->handle;
   396c0:	7863      	ldrb	r3, [r4, #1]
   396c2:	f800 3b01 	strb.w	r3, [r0], #1
   396c6:	2206      	movs	r2, #6
   396c8:	4629      	mov	r1, r5
   396ca:	f7ff fe71 	bl	393b0 <memcpy>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_SET_RANDOM_ADDR, buf,
   396ce:	2200      	movs	r2, #0
   396d0:	4631      	mov	r1, r6
   396d2:	f242 0035 	movw	r0, #8245	; 0x2035
   396d6:	f7ef f8a3 	bl	28820 <bt_hci_cmd_send_sync>
	if (err) {
   396da:	2800      	cmp	r0, #0
   396dc:	d1e4      	bne.n	396a8 <bt_id_set_adv_random_addr+0x46>
	if (&adv->random_addr.a != addr) {
   396de:	1ce0      	adds	r0, r4, #3
   396e0:	4285      	cmp	r5, r0
   396e2:	d003      	beq.n	396ec <bt_id_set_adv_random_addr+0x8a>
   396e4:	2206      	movs	r2, #6
   396e6:	4629      	mov	r1, r5
   396e8:	f7ff fe62 	bl	393b0 <memcpy>
	adv->random_addr.type = BT_ADDR_LE_RANDOM;
   396ec:	2301      	movs	r3, #1
   396ee:	70a3      	strb	r3, [r4, #2]
	return 0;
   396f0:	e7d9      	b.n	396a6 <bt_id_set_adv_random_addr+0x44>
		return -EINVAL;
   396f2:	f06f 0015 	mvn.w	r0, #21
   396f6:	e7d7      	b.n	396a8 <bt_id_set_adv_random_addr+0x46>
		return -ENOBUFS;
   396f8:	f06f 0068 	mvn.w	r0, #104	; 0x68
   396fc:	e7d4      	b.n	396a8 <bt_id_set_adv_random_addr+0x46>

000396fe <bt_id_set_adv_private_addr>:
{
   396fe:	b513      	push	{r0, r1, r4, lr}
	CHECKIF(adv == NULL) {
   39700:	4604      	mov	r4, r0
   39702:	b180      	cbz	r0, 39726 <bt_id_set_adv_private_addr+0x28>
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   39704:	2106      	movs	r1, #6
   39706:	4668      	mov	r0, sp
   39708:	f7f9 fa70 	bl	32bec <bt_rand>
	if (err) {
   3970c:	b948      	cbnz	r0, 39722 <bt_id_set_adv_private_addr+0x24>
	BT_ADDR_SET_NRPA(&nrpa);
   3970e:	f89d 3005 	ldrb.w	r3, [sp, #5]
	err = bt_id_set_adv_random_addr(adv, &nrpa);
   39712:	4669      	mov	r1, sp
	BT_ADDR_SET_NRPA(&nrpa);
   39714:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	err = bt_id_set_adv_random_addr(adv, &nrpa);
   39718:	4620      	mov	r0, r4
	BT_ADDR_SET_NRPA(&nrpa);
   3971a:	f88d 3005 	strb.w	r3, [sp, #5]
	err = bt_id_set_adv_random_addr(adv, &nrpa);
   3971e:	f7ff ffa0 	bl	39662 <bt_id_set_adv_random_addr>
}
   39722:	b002      	add	sp, #8
   39724:	bd10      	pop	{r4, pc}
		return -EINVAL;
   39726:	f06f 0015 	mvn.w	r0, #21
   3972a:	e7fa      	b.n	39722 <bt_id_set_adv_private_addr+0x24>

0003972c <bt_id_adv_limited_stopped>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   3972c:	3010      	adds	r0, #16
   3972e:	f3bf 8f5b 	dmb	ish
   39732:	e850 3f00 	ldrex	r3, [r0]
   39736:	f023 0310 	bic.w	r3, r3, #16
   3973a:	e840 3200 	strex	r2, r3, [r0]
   3973e:	2a00      	cmp	r2, #0
   39740:	d1f7      	bne.n	39732 <bt_id_adv_limited_stopped+0x6>
   39742:	f3bf 8f5b 	dmb	ish
}
   39746:	4770      	bx	lr

00039748 <get_adv_channel_map>:
{
   39748:	4603      	mov	r3, r0
		channel_map &= ~0x01;
   3974a:	f410 4f00 	tst.w	r0, #32768	; 0x8000
   3974e:	bf0c      	ite	eq
   39750:	2007      	moveq	r0, #7
   39752:	2006      	movne	r0, #6
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_38) {
   39754:	03da      	lsls	r2, r3, #15
		channel_map &= ~0x02;
   39756:	bf48      	it	mi
   39758:	f000 0005 	andmi.w	r0, r0, #5
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_39) {
   3975c:	039b      	lsls	r3, r3, #14
		channel_map &= ~0x04;
   3975e:	bf48      	it	mi
   39760:	f000 00fb 	andmi.w	r0, r0, #251	; 0xfb
}
   39764:	4770      	bx	lr

00039766 <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   39766:	f3bf 8f5b 	dmb	ish
   3976a:	6800      	ldr	r0, [r0, #0]
   3976c:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   39770:	4108      	asrs	r0, r1
}
   39772:	f000 0001 	and.w	r0, r0, #1
   39776:	4770      	bx	lr

00039778 <atomic_and>:
{
   39778:	b510      	push	{r4, lr}
   3977a:	4603      	mov	r3, r0
}
   3977c:	f3bf 8f5b 	dmb	ish
   39780:	e853 0f00 	ldrex	r0, [r3]
   39784:	ea00 0201 	and.w	r2, r0, r1
   39788:	e843 2400 	strex	r4, r2, [r3]
   3978c:	2c00      	cmp	r4, #0
   3978e:	d1f7      	bne.n	39780 <atomic_and+0x8>
   39790:	f3bf 8f5b 	dmb	ish
   39794:	bd10      	pop	{r4, pc}

00039796 <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   39796:	2207      	movs	r2, #7
   39798:	f7ff be0a 	b.w	393b0 <memcpy>

0003979c <atomic_set_bit_to>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   3979c:	2301      	movs	r3, #1
{
   3979e:	b410      	push	{r4}
	atomic_val_t mask = ATOMIC_MASK(bit);
   397a0:	fa03 f101 	lsl.w	r1, r3, r1
{
   397a4:	4604      	mov	r4, r0
	if (val) {
   397a6:	b162      	cbz	r2, 397c2 <atomic_set_bit_to+0x26>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   397a8:	f3bf 8f5b 	dmb	ish
   397ac:	e854 3f00 	ldrex	r3, [r4]
   397b0:	430b      	orrs	r3, r1
   397b2:	e844 3200 	strex	r2, r3, [r4]
   397b6:	2a00      	cmp	r2, #0
   397b8:	d1f8      	bne.n	397ac <atomic_set_bit_to+0x10>
   397ba:	f3bf 8f5b 	dmb	ish
	}
}
   397be:	bc10      	pop	{r4}
   397c0:	4770      	bx	lr
   397c2:	bc10      	pop	{r4}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   397c4:	43c9      	mvns	r1, r1
   397c6:	f7ff bfd7 	b.w	39778 <atomic_and>

000397ca <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   397ca:	2301      	movs	r3, #1
   397cc:	408b      	lsls	r3, r1
   397ce:	f3bf 8f5b 	dmb	ish
   397d2:	e850 2f00 	ldrex	r2, [r0]
   397d6:	431a      	orrs	r2, r3
   397d8:	e840 2100 	strex	r1, r2, [r0]
   397dc:	2900      	cmp	r1, #0
   397de:	d1f8      	bne.n	397d2 <atomic_set_bit+0x8>
   397e0:	f3bf 8f5b 	dmb	ish
}
   397e4:	4770      	bx	lr

000397e6 <le_adv_update>:
{
   397e6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   397ea:	b087      	sub	sp, #28
   397ec:	4607      	mov	r7, r0
   397ee:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
   397f2:	f89d b044 	ldrb.w	fp, [sp, #68]	; 0x44
   397f6:	f89d 8048 	ldrb.w	r8, [sp, #72]	; 0x48
   397fa:	460e      	mov	r6, r1
   397fc:	4692      	mov	sl, r2
	struct bt_ad d[2] = {};
   397fe:	2100      	movs	r1, #0
   39800:	2210      	movs	r2, #16
   39802:	a802      	add	r0, sp, #8
{
   39804:	461d      	mov	r5, r3
	struct bt_ad d[2] = {};
   39806:	f7ff fdde 	bl	393c6 <memset>
	if (name_type != ADV_NAME_TYPE_NONE) {
   3980a:	bb44      	cbnz	r4, 3985e <le_adv_update+0x78>
	if (!(ext_adv && scannable)) {
   3980c:	f1bb 0f00 	cmp.w	fp, #0
   39810:	d002      	beq.n	39818 <le_adv_update+0x32>
   39812:	f1b8 0f00 	cmp.w	r8, #0
   39816:	d115      	bne.n	39844 <le_adv_update+0x5e>
		d[0].len = ad_len;
   39818:	e9cd 6a02 	strd	r6, sl, [sp, #8]
		d_len = 1;
   3981c:	2301      	movs	r3, #1
		return hci_set_ad_ext(adv, BT_HCI_OP_LE_SET_EXT_ADV_DATA,
   3981e:	aa02      	add	r2, sp, #8
   39820:	f242 0137 	movw	r1, #8247	; 0x2037
   39824:	4638      	mov	r0, r7
   39826:	f7f0 fa9d 	bl	29d64 <hci_set_ad_ext>
		if (err) {
   3982a:	b940      	cbnz	r0, 3983e <le_adv_update+0x58>
	if (scannable) {
   3982c:	f1b8 0f00 	cmp.w	r8, #0
   39830:	d12a      	bne.n	39888 <le_adv_update+0xa2>
	atomic_set_bit(adv->flags, BT_ADV_DATA_SET);
   39832:	f107 0010 	add.w	r0, r7, #16
   39836:	2102      	movs	r1, #2
   39838:	f7ff ffc7 	bl	397ca <atomic_set_bit>
	return 0;
   3983c:	2000      	movs	r0, #0
}
   3983e:	b007      	add	sp, #28
   39840:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		d[0].len = sd_len;
   39844:	9b10      	ldr	r3, [sp, #64]	; 0x40
		d[0].data = sd;
   39846:	9502      	str	r5, [sp, #8]
		d[0].len = sd_len;
   39848:	9303      	str	r3, [sp, #12]
		d_len = 1;
   3984a:	2301      	movs	r3, #1
		return hci_set_ad_ext(adv, BT_HCI_OP_LE_SET_EXT_SCAN_RSP_DATA,
   3984c:	aa02      	add	r2, sp, #8
   3984e:	f242 0138 	movw	r1, #8248	; 0x2038
   39852:	4638      	mov	r0, r7
   39854:	f7f0 fa86 	bl	29d64 <hci_set_ad_ext>
		if (err) {
   39858:	2800      	cmp	r0, #0
   3985a:	d0ea      	beq.n	39832 <le_adv_update+0x4c>
   3985c:	e7ef      	b.n	3983e <le_adv_update+0x58>
		const char *name = bt_get_name();
   3985e:	f7ef ff69 	bl	29734 <bt_get_name>
   39862:	4681      	mov	r9, r0
		if ((ad && ad_has_name(ad, ad_len)) ||
   39864:	bb26      	cbnz	r6, 398b0 <le_adv_update+0xca>
   39866:	bb7d      	cbnz	r5, 398c8 <le_adv_update+0xe2>
		data = (struct bt_data)BT_DATA(
   39868:	4648      	mov	r0, r9
   3986a:	f7ff fd5e 	bl	3932a <strlen>
   3986e:	2209      	movs	r2, #9
   39870:	f88d 2000 	strb.w	r2, [sp]
   39874:	f88d 0001 	strb.w	r0, [sp, #1]
   39878:	f8cd 9004 	str.w	r9, [sp, #4]
	if (!(ext_adv && scannable)) {
   3987c:	f1bb 0f00 	cmp.w	fp, #0
   39880:	d024      	beq.n	398cc <le_adv_update+0xe6>
   39882:	f1b8 0f00 	cmp.w	r8, #0
   39886:	d021      	beq.n	398cc <le_adv_update+0xe6>
		d[0].len = sd_len;
   39888:	9b10      	ldr	r3, [sp, #64]	; 0x40
		d[0].data = sd;
   3988a:	9502      	str	r5, [sp, #8]
		if (name_type == ADV_NAME_TYPE_SD) {
   3988c:	2c02      	cmp	r4, #2
		d[0].len = sd_len;
   3988e:	9303      	str	r3, [sp, #12]
		if (name_type == ADV_NAME_TYPE_SD) {
   39890:	d1db      	bne.n	3984a <le_adv_update+0x64>
			d[1].len = 1;
   39892:	2301      	movs	r3, #1
   39894:	9305      	str	r3, [sp, #20]
			d[1].data = &data;
   39896:	f8cd d010 	str.w	sp, [sp, #16]
			d_len = 2;
   3989a:	4623      	mov	r3, r4
   3989c:	e7d6      	b.n	3984c <le_adv_update+0x66>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   3989e:	f816 1032 	ldrb.w	r1, [r6, r2, lsl #3]
   398a2:	3908      	subs	r1, #8
   398a4:	2901      	cmp	r1, #1
   398a6:	d91a      	bls.n	398de <le_adv_update+0xf8>
	for (i = 0; i < ad_len; i++) {
   398a8:	3201      	adds	r2, #1
   398aa:	4592      	cmp	sl, r2
   398ac:	d1f7      	bne.n	3989e <le_adv_update+0xb8>
   398ae:	e7da      	b.n	39866 <le_adv_update+0x80>
   398b0:	2200      	movs	r2, #0
   398b2:	e7fa      	b.n	398aa <le_adv_update+0xc4>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   398b4:	f815 1032 	ldrb.w	r1, [r5, r2, lsl #3]
   398b8:	3908      	subs	r1, #8
   398ba:	2901      	cmp	r1, #1
   398bc:	d90f      	bls.n	398de <le_adv_update+0xf8>
	for (i = 0; i < ad_len; i++) {
   398be:	3201      	adds	r2, #1
   398c0:	9b10      	ldr	r3, [sp, #64]	; 0x40
   398c2:	4293      	cmp	r3, r2
   398c4:	d1f6      	bne.n	398b4 <le_adv_update+0xce>
   398c6:	e7cf      	b.n	39868 <le_adv_update+0x82>
   398c8:	2200      	movs	r2, #0
   398ca:	e7f9      	b.n	398c0 <le_adv_update+0xda>
		if (name_type == ADV_NAME_TYPE_AD) {
   398cc:	2c01      	cmp	r4, #1
		d[0].len = ad_len;
   398ce:	e9cd 6a02 	strd	r6, sl, [sp, #8]
		if (name_type == ADV_NAME_TYPE_AD) {
   398d2:	d1a3      	bne.n	3981c <le_adv_update+0x36>
			d[1].data = &data;
   398d4:	f8cd d010 	str.w	sp, [sp, #16]
			d[1].len = 1;
   398d8:	9405      	str	r4, [sp, #20]
			d_len = 2;
   398da:	2302      	movs	r3, #2
   398dc:	e79f      	b.n	3981e <le_adv_update+0x38>
			return -EINVAL;
   398de:	f06f 0015 	mvn.w	r0, #21
   398e2:	e7ac      	b.n	3983e <le_adv_update+0x58>

000398e4 <get_adv_name_type>:
{
   398e4:	b508      	push	{r3, lr}
	if (atomic_test_bit(adv->flags, BT_ADV_INCLUDE_NAME_SD)) {
   398e6:	f100 0310 	add.w	r3, r0, #16
   398ea:	2109      	movs	r1, #9
   398ec:	4618      	mov	r0, r3
   398ee:	f7ff ff3a 	bl	39766 <atomic_test_bit>
   398f2:	b928      	cbnz	r0, 39900 <get_adv_name_type+0x1c>
	if (atomic_test_bit(adv->flags, BT_ADV_INCLUDE_NAME_AD)) {
   398f4:	4618      	mov	r0, r3
   398f6:	2108      	movs	r1, #8
}
   398f8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	if (atomic_test_bit(adv->flags, BT_ADV_INCLUDE_NAME_AD)) {
   398fc:	f7ff bf33 	b.w	39766 <atomic_test_bit>
}
   39900:	2002      	movs	r0, #2
   39902:	bd08      	pop	{r3, pc}

00039904 <get_adv_name_type_param>:
	if (param->options & BT_LE_ADV_OPT_USE_NAME) {
   39904:	6843      	ldr	r3, [r0, #4]
   39906:	f013 0008 	ands.w	r0, r3, #8
   3990a:	d00a      	beq.n	39922 <get_adv_name_type_param+0x1e>
		if (param->options & BT_LE_ADV_OPT_FORCE_NAME_IN_AD) {
   3990c:	035a      	lsls	r2, r3, #13
   3990e:	d407      	bmi.n	39920 <get_adv_name_type_param+0x1c>
		if ((param->options & BT_LE_ADV_OPT_EXT_ADV) &&
   39910:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
			return ADV_NAME_TYPE_AD;
   39914:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   39918:	bf14      	ite	ne
   3991a:	2002      	movne	r0, #2
   3991c:	2001      	moveq	r0, #1
   3991e:	4770      	bx	lr
   39920:	2001      	movs	r0, #1
}
   39922:	4770      	bx	lr

00039924 <bt_le_adv_set_enable_ext>:
{
   39924:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   39928:	4680      	mov	r8, r0
   3992a:	b086      	sub	sp, #24
   3992c:	460f      	mov	r7, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EXT_ADV_ENABLE, 6);
   3992e:	f242 0039 	movw	r0, #8249	; 0x2039
   39932:	2106      	movs	r1, #6
{
   39934:	4614      	mov	r4, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EXT_ADV_ENABLE, 6);
   39936:	f7ee ff29 	bl	2878c <bt_hci_cmd_create>
	if (!buf) {
   3993a:	4606      	mov	r6, r0
   3993c:	b388      	cbz	r0, 399a2 <bt_le_adv_set_enable_ext+0x7e>
	return net_buf_simple_add_u8(&buf->b, val);
   3993e:	f100 0508 	add.w	r5, r0, #8
	if (enable) {
   39942:	b337      	cbz	r7, 39992 <bt_le_adv_set_enable_ext+0x6e>
   39944:	2101      	movs	r1, #1
   39946:	4628      	mov	r0, r5
   39948:	f001 f8f2 	bl	3ab30 <net_buf_simple_add_u8>
   3994c:	2101      	movs	r1, #1
   3994e:	4628      	mov	r0, r5
   39950:	f001 f8ee 	bl	3ab30 <net_buf_simple_add_u8>
   39954:	f898 1001 	ldrb.w	r1, [r8, #1]
   39958:	4628      	mov	r0, r5
   3995a:	f001 f8e9 	bl	3ab30 <net_buf_simple_add_u8>
	net_buf_add_le16(buf, param ? param->timeout : 0);
   3995e:	b1d4      	cbz	r4, 39996 <bt_le_adv_set_enable_ext+0x72>
	net_buf_simple_add_le16(&buf->b, val);
   39960:	8821      	ldrh	r1, [r4, #0]
   39962:	4628      	mov	r0, r5
   39964:	f001 f8eb 	bl	3ab3e <net_buf_simple_add_le16>
	net_buf_add_u8(buf, param ? param->num_events : 0);
   39968:	78a1      	ldrb	r1, [r4, #2]
	return net_buf_simple_add_u8(&buf->b, val);
   3996a:	4628      	mov	r0, r5
   3996c:	f001 f8e0 	bl	3ab30 <net_buf_simple_add_u8>
	bt_hci_cmd_state_set_init(buf, &state, adv->flags, BT_ADV_ENABLED, enable);
   39970:	f108 0210 	add.w	r2, r8, #16
   39974:	a903      	add	r1, sp, #12
   39976:	4630      	mov	r0, r6
   39978:	9700      	str	r7, [sp, #0]
   3997a:	2307      	movs	r3, #7
   3997c:	f7ee fef4 	bl	28768 <bt_hci_cmd_state_set_init>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EXT_ADV_ENABLE, buf, NULL);
   39980:	2200      	movs	r2, #0
   39982:	4631      	mov	r1, r6
   39984:	f242 0039 	movw	r0, #8249	; 0x2039
   39988:	f7ee ff4a 	bl	28820 <bt_hci_cmd_send_sync>
}
   3998c:	b006      	add	sp, #24
   3998e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   39992:	4639      	mov	r1, r7
   39994:	e7d7      	b.n	39946 <bt_le_adv_set_enable_ext+0x22>
	net_buf_simple_add_le16(&buf->b, val);
   39996:	4621      	mov	r1, r4
   39998:	4628      	mov	r0, r5
   3999a:	f001 f8d0 	bl	3ab3e <net_buf_simple_add_le16>
	net_buf_add_u8(buf, param ? param->num_events : 0);
   3999e:	4621      	mov	r1, r4
   399a0:	e7e3      	b.n	3996a <bt_le_adv_set_enable_ext+0x46>
		return -ENOBUFS;
   399a2:	f06f 0068 	mvn.w	r0, #104	; 0x68
   399a6:	e7f1      	b.n	3998c <bt_le_adv_set_enable_ext+0x68>

000399a8 <bt_le_adv_set_enable>:
		return bt_le_adv_set_enable_ext(adv, enable, NULL);
   399a8:	2200      	movs	r2, #0
   399aa:	f7ff bfbb 	b.w	39924 <bt_le_adv_set_enable_ext>

000399ae <bt_le_lim_adv_cancel_timeout>:
	return k_work_cancel_delayable(&adv->lim_adv_timeout_work);
   399ae:	3020      	adds	r0, #32
   399b0:	f7fc bbde 	b.w	36170 <k_work_cancel_delayable>

000399b4 <bt_le_ext_adv_set_data>:
{
   399b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   399b8:	4698      	mov	r8, r3
   399ba:	b085      	sub	sp, #20
	ext_adv = atomic_test_bit(adv->flags, BT_ADV_EXT_ADV);
   399bc:	f100 0310 	add.w	r3, r0, #16
{
   399c0:	4604      	mov	r4, r0
   399c2:	460f      	mov	r7, r1
	ext_adv = atomic_test_bit(adv->flags, BT_ADV_EXT_ADV);
   399c4:	4618      	mov	r0, r3
   399c6:	210c      	movs	r1, #12
{
   399c8:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
	ext_adv = atomic_test_bit(adv->flags, BT_ADV_EXT_ADV);
   399cc:	f7ff fecb 	bl	39766 <atomic_test_bit>
	scannable = atomic_test_bit(adv->flags, BT_ADV_SCANNABLE);
   399d0:	210b      	movs	r1, #11
	ext_adv = atomic_test_bit(adv->flags, BT_ADV_EXT_ADV);
   399d2:	4605      	mov	r5, r0
	scannable = atomic_test_bit(adv->flags, BT_ADV_SCANNABLE);
   399d4:	4618      	mov	r0, r3
   399d6:	f7ff fec6 	bl	39766 <atomic_test_bit>
   399da:	4606      	mov	r6, r0
	if (ext_adv) {
   399dc:	b145      	cbz	r5, 399f0 <bt_le_ext_adv_set_data+0x3c>
		if ((scannable && ad_len) ||
   399de:	b928      	cbnz	r0, 399ec <bt_le_ext_adv_set_data+0x38>
		    (!scannable && sd_len)) {
   399e0:	f1b9 0f00 	cmp.w	r9, #0
   399e4:	d004      	beq.n	399f0 <bt_le_ext_adv_set_data+0x3c>
			return -ENOTSUP;
   399e6:	f06f 0085 	mvn.w	r0, #133	; 0x85
   399ea:	e00d      	b.n	39a08 <bt_le_ext_adv_set_data+0x54>
		if ((scannable && ad_len) ||
   399ec:	2a00      	cmp	r2, #0
   399ee:	d1fa      	bne.n	399e6 <bt_le_ext_adv_set_data+0x32>
	return le_adv_update(adv, ad, ad_len, sd, sd_len, ext_adv, scannable,
   399f0:	4620      	mov	r0, r4
   399f2:	f7ff ff77 	bl	398e4 <get_adv_name_type>
   399f6:	e9cd 9500 	strd	r9, r5, [sp]
   399fa:	e9cd 6002 	strd	r6, r0, [sp, #8]
   399fe:	4643      	mov	r3, r8
   39a00:	4639      	mov	r1, r7
   39a02:	4620      	mov	r0, r4
   39a04:	f7ff feef 	bl	397e6 <le_adv_update>
}
   39a08:	b005      	add	sp, #20
   39a0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00039a0e <z_log_msg_static_create.constprop.0>:
   39a0e:	2300      	movs	r3, #0
   39a10:	f7ec bbcc 	b.w	261ac <z_impl_z_log_msg_static_create>

00039a14 <tx_complete_work>:
	tx_notify(conn);
   39a14:	3828      	subs	r0, #40	; 0x28
   39a16:	f7f0 be5d 	b.w	2a6d4 <tx_notify>

00039a1a <bt_conn_reset_rx_state>:
{
   39a1a:	b510      	push	{r4, lr}
   39a1c:	4604      	mov	r4, r0
	if (!conn->rx) {
   39a1e:	6900      	ldr	r0, [r0, #16]
   39a20:	b118      	cbz	r0, 39a2a <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
   39a22:	f7f4 ff2d 	bl	2e880 <net_buf_unref>
	conn->rx = NULL;
   39a26:	2300      	movs	r3, #0
   39a28:	6123      	str	r3, [r4, #16]
}
   39a2a:	bd10      	pop	{r4, pc}

00039a2c <conn_lookup_handle>:
{
   39a2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   39a30:	4607      	mov	r7, r0
   39a32:	460e      	mov	r6, r1
   39a34:	4690      	mov	r8, r2
	for (i = 0; i < size; i++) {
   39a36:	2400      	movs	r4, #0
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   39a38:	f04f 09c8 	mov.w	r9, #200	; 0xc8
	for (i = 0; i < size; i++) {
   39a3c:	42b4      	cmp	r4, r6
   39a3e:	d103      	bne.n	39a48 <conn_lookup_handle+0x1c>
	return NULL;
   39a40:	2300      	movs	r3, #0
}
   39a42:	4618      	mov	r0, r3
   39a44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   39a48:	fb09 7004 	mla	r0, r9, r4, r7
   39a4c:	f7f1 f932 	bl	2acb4 <bt_conn_ref>
   39a50:	4603      	mov	r3, r0
		if (!conn) {
   39a52:	b158      	cbz	r0, 39a6c <conn_lookup_handle+0x40>
		if (!bt_conn_is_handle_valid(conn)) {
   39a54:	7a85      	ldrb	r5, [r0, #10]
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
   39a56:	2d01      	cmp	r5, #1
   39a58:	d002      	beq.n	39a60 <conn_lookup_handle+0x34>
   39a5a:	3d07      	subs	r5, #7
   39a5c:	2d01      	cmp	r5, #1
   39a5e:	d803      	bhi.n	39a68 <conn_lookup_handle+0x3c>
		if (conn->handle != handle) {
   39a60:	881a      	ldrh	r2, [r3, #0]
   39a62:	4542      	cmp	r2, r8
   39a64:	d0ed      	beq.n	39a42 <conn_lookup_handle+0x16>
			bt_conn_unref(conn);
   39a66:	4618      	mov	r0, r3
   39a68:	f7f1 f950 	bl	2ad0c <bt_conn_unref>
	for (i = 0; i < size; i++) {
   39a6c:	3401      	adds	r4, #1
   39a6e:	e7e5      	b.n	39a3c <conn_lookup_handle+0x10>

00039a70 <bt_conn_connected>:
{
   39a70:	b510      	push	{r4, lr}
   39a72:	4604      	mov	r4, r0
	bt_l2cap_connected(conn);
   39a74:	f7f1 fe2e 	bl	2b6d4 <bt_l2cap_connected>
	notify_connected(conn);
   39a78:	4620      	mov	r0, r4
}
   39a7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	notify_connected(conn);
   39a7e:	f7f0 bdfb 	b.w	2a678 <notify_connected>

00039a82 <bt_conn_get_security>:
}
   39a82:	2001      	movs	r0, #1
   39a84:	4770      	bx	lr

00039a86 <bt_conn_is_peer_addr_le>:
{
   39a86:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   39a88:	7a03      	ldrb	r3, [r0, #8]
   39a8a:	428b      	cmp	r3, r1
{
   39a8c:	4604      	mov	r4, r0
   39a8e:	4615      	mov	r5, r2
	if (id != conn->id) {
   39a90:	d115      	bne.n	39abe <bt_conn_is_peer_addr_le+0x38>
	return memcmp(a, b, sizeof(*a));
   39a92:	f100 0190 	add.w	r1, r0, #144	; 0x90
   39a96:	2207      	movs	r2, #7
   39a98:	4628      	mov	r0, r5
   39a9a:	f7ff fc62 	bl	39362 <memcmp>
	if (bt_addr_le_eq(peer, &conn->le.dst)) {
   39a9e:	b180      	cbz	r0, 39ac2 <bt_conn_is_peer_addr_le+0x3c>
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   39aa0:	78e3      	ldrb	r3, [r4, #3]
   39aa2:	2207      	movs	r2, #7
   39aa4:	b943      	cbnz	r3, 39ab8 <bt_conn_is_peer_addr_le+0x32>
   39aa6:	f104 019e 	add.w	r1, r4, #158	; 0x9e
   39aaa:	4628      	mov	r0, r5
   39aac:	f7ff fc59 	bl	39362 <memcmp>
	return bt_addr_le_cmp(a, b) == 0;
   39ab0:	fab0 f080 	clz	r0, r0
   39ab4:	0940      	lsrs	r0, r0, #5
}
   39ab6:	bd38      	pop	{r3, r4, r5, pc}
	return memcmp(a, b, sizeof(*a));
   39ab8:	f104 0197 	add.w	r1, r4, #151	; 0x97
   39abc:	e7f5      	b.n	39aaa <bt_conn_is_peer_addr_le+0x24>
		return false;
   39abe:	2000      	movs	r0, #0
   39ac0:	e7f9      	b.n	39ab6 <bt_conn_is_peer_addr_le+0x30>
		return true;
   39ac2:	2001      	movs	r0, #1
   39ac4:	e7f7      	b.n	39ab6 <bt_conn_is_peer_addr_le+0x30>

00039ac6 <bt_conn_le_conn_update>:
{
   39ac6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   39ac8:	4607      	mov	r7, r0
   39aca:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   39acc:	f242 0013 	movw	r0, #8211	; 0x2013
   39ad0:	210e      	movs	r1, #14
   39ad2:	f7ee fe5b 	bl	2878c <bt_hci_cmd_create>
	if (!buf) {
   39ad6:	4606      	mov	r6, r0
   39ad8:	b1d0      	cbz	r0, 39b10 <bt_conn_le_conn_update+0x4a>
	return net_buf_simple_add(&buf->b, len);
   39ada:	210e      	movs	r1, #14
   39adc:	3008      	adds	r0, #8
   39ade:	f7f4 ffd5 	bl	2ea8c <net_buf_simple_add>
	(void)memset(conn_update, 0, sizeof(*conn_update));
   39ae2:	220e      	movs	r2, #14
   39ae4:	4604      	mov	r4, r0
   39ae6:	2100      	movs	r1, #0
   39ae8:	f7ff fc6d 	bl	393c6 <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   39aec:	883b      	ldrh	r3, [r7, #0]
   39aee:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   39af0:	882b      	ldrh	r3, [r5, #0]
   39af2:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   39af4:	886b      	ldrh	r3, [r5, #2]
   39af6:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   39af8:	88ab      	ldrh	r3, [r5, #4]
   39afa:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   39afc:	88eb      	ldrh	r3, [r5, #6]
   39afe:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   39b00:	4631      	mov	r1, r6
   39b02:	2200      	movs	r2, #0
}
   39b04:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   39b08:	f242 0013 	movw	r0, #8211	; 0x2013
   39b0c:	f7ee be88 	b.w	28820 <bt_hci_cmd_send_sync>
}
   39b10:	f06f 0068 	mvn.w	r0, #104	; 0x68
   39b14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00039b16 <l2cap_connected>:
}
   39b16:	4770      	bx	lr

00039b18 <z_log_msg_static_create.constprop.0>:
   39b18:	2300      	movs	r3, #0
   39b1a:	f7ec bb47 	b.w	261ac <z_impl_z_log_msg_static_create>

00039b1e <l2cap_create_le_sig_pdu.constprop.0>:
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   39b1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   39b20:	4605      	mov	r5, r0
   39b22:	460f      	mov	r7, r1
   39b24:	4616      	mov	r6, r2
	return bt_conn_create_pdu_timeout(pool,
   39b26:	2300      	movs	r3, #0
   39b28:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   39b2c:	2104      	movs	r1, #4
   39b2e:	2000      	movs	r0, #0
   39b30:	f7f1 fa44 	bl	2afbc <bt_conn_create_pdu_timeout>
	if (!buf) {
   39b34:	4604      	mov	r4, r0
   39b36:	b920      	cbnz	r0, 39b42 <l2cap_create_le_sig_pdu.constprop.0+0x24>
   39b38:	4628      	mov	r0, r5
}
   39b3a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   39b3e:	f7f1 bd81 	b.w	2b644 <l2cap_create_le_sig_pdu.part.0>
   39b42:	2104      	movs	r1, #4
   39b44:	3008      	adds	r0, #8
   39b46:	f7f4 ffa1 	bl	2ea8c <net_buf_simple_add>
	hdr->code = code;
   39b4a:	7005      	strb	r5, [r0, #0]
	hdr->ident = ident;
   39b4c:	7047      	strb	r7, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
   39b4e:	8046      	strh	r6, [r0, #2]
}
   39b50:	4620      	mov	r0, r4
   39b52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00039b54 <l2cap_disconnected>:
static void l2cap_disconnected(struct bt_l2cap_chan *chan)
   39b54:	4770      	bx	lr

00039b56 <bt_l2cap_chan_del>:
{
   39b56:	b570      	push	{r4, r5, r6, lr}
	if (!chan->conn) {
   39b58:	e9d0 3500 	ldrd	r3, r5, [r0]
{
   39b5c:	4604      	mov	r4, r0
	if (!chan->conn) {
   39b5e:	b123      	cbz	r3, 39b6a <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   39b60:	686b      	ldr	r3, [r5, #4]
   39b62:	b103      	cbz	r3, 39b66 <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   39b64:	4798      	blx	r3
	chan->conn = NULL;
   39b66:	2300      	movs	r3, #0
   39b68:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   39b6a:	68e3      	ldr	r3, [r4, #12]
   39b6c:	b10b      	cbz	r3, 39b72 <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   39b6e:	4620      	mov	r0, r4
   39b70:	4798      	blx	r3
	if (ops->released) {
   39b72:	6a2b      	ldr	r3, [r5, #32]
   39b74:	b11b      	cbz	r3, 39b7e <bt_l2cap_chan_del+0x28>
		ops->released(chan);
   39b76:	4620      	mov	r0, r4
}
   39b78:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ops->released(chan);
   39b7c:	4718      	bx	r3
}
   39b7e:	bd70      	pop	{r4, r5, r6, pc}

00039b80 <bt_l2cap_disconnected>:
{
   39b80:	b538      	push	{r3, r4, r5, lr}
	return list->head;
   39b82:	6d40      	ldr	r0, [r0, #84]	; 0x54
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   39b84:	b130      	cbz	r0, 39b94 <bt_l2cap_disconnected+0x14>
	return node->next;
   39b86:	f850 4908 	ldr.w	r4, [r0], #-8
   39b8a:	b104      	cbz	r4, 39b8e <bt_l2cap_disconnected+0xe>
   39b8c:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
   39b8e:	f7ff ffe2 	bl	39b56 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   39b92:	b904      	cbnz	r4, 39b96 <bt_l2cap_disconnected+0x16>
}
   39b94:	bd38      	pop	{r3, r4, r5, pc}
   39b96:	68a5      	ldr	r5, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   39b98:	b12d      	cbz	r5, 39ba6 <bt_l2cap_disconnected+0x26>
		bt_l2cap_chan_del(chan);
   39b9a:	4620      	mov	r0, r4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   39b9c:	3d08      	subs	r5, #8
		bt_l2cap_chan_del(chan);
   39b9e:	f7ff ffda 	bl	39b56 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   39ba2:	462c      	mov	r4, r5
   39ba4:	e7f7      	b.n	39b96 <bt_l2cap_disconnected+0x16>
		bt_l2cap_chan_del(chan);
   39ba6:	4620      	mov	r0, r4
}
   39ba8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		bt_l2cap_chan_del(chan);
   39bac:	f7ff bfd3 	b.w	39b56 <bt_l2cap_chan_del>

00039bb0 <bt_l2cap_create_pdu_timeout>:
	return bt_conn_create_pdu_timeout(pool,
   39bb0:	3104      	adds	r1, #4
   39bb2:	f7f1 ba03 	b.w	2afbc <bt_conn_create_pdu_timeout>

00039bb6 <bt_l2cap_send_cb>:
{
   39bb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   39bba:	4614      	mov	r4, r2
   39bbc:	4605      	mov	r5, r0
   39bbe:	460f      	mov	r7, r1
	return net_buf_simple_push(&buf->b, len);
   39bc0:	f102 0008 	add.w	r0, r2, #8
   39bc4:	2104      	movs	r1, #4
   39bc6:	461e      	mov	r6, r3
   39bc8:	f8dd 8018 	ldr.w	r8, [sp, #24]
   39bcc:	f7f4 ff0e 	bl	2e9ec <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   39bd0:	89a2      	ldrh	r2, [r4, #12]
	hdr->cid = sys_cpu_to_le16(cid);
   39bd2:	8047      	strh	r7, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   39bd4:	3a04      	subs	r2, #4
   39bd6:	8002      	strh	r2, [r0, #0]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   39bd8:	4643      	mov	r3, r8
   39bda:	4632      	mov	r2, r6
   39bdc:	4621      	mov	r1, r4
   39bde:	4628      	mov	r0, r5
}
   39be0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_conn_send_cb(conn, buf, cb, user_data);
   39be4:	f7f0 bfb0 	b.w	2ab48 <bt_conn_send_cb>

00039be8 <bt_l2cap_le_lookup_rx_cid>:
	return list->head;
   39be8:	6d40      	ldr	r0, [r0, #84]	; 0x54
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   39bea:	b130      	cbz	r0, 39bfa <bt_l2cap_le_lookup_rx_cid+0x12>
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   39bec:	8983      	ldrh	r3, [r0, #12]
   39bee:	428b      	cmp	r3, r1
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   39bf0:	f1a0 0008 	sub.w	r0, r0, #8
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   39bf4:	d001      	beq.n	39bfa <bt_l2cap_le_lookup_rx_cid+0x12>
	return node->next;
   39bf6:	6880      	ldr	r0, [r0, #8]
   39bf8:	e7f7      	b.n	39bea <bt_l2cap_le_lookup_rx_cid+0x2>
}
   39bfa:	4770      	bx	lr

00039bfc <bt_l2cap_init>:
		(void)memset(&l2cap_tx_meta_data_storage[i], 0,
					sizeof(l2cap_tx_meta_data_storage[i]));
		k_fifo_put(&free_l2cap_tx_meta_data, &l2cap_tx_meta_data_storage[i]);
	}
#endif /* CONFIG_BT_L2CAP_DYNAMIC_CHANNEL */
}
   39bfc:	4770      	bx	lr

00039bfe <sys_slist_get>:
Z_GENLIST_GET(slist, snode)
   39bfe:	4603      	mov	r3, r0
	return list->head;
   39c00:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   39c02:	b128      	cbz	r0, 39c10 <sys_slist_get+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   39c04:	6859      	ldr	r1, [r3, #4]
	return node->next;
   39c06:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   39c08:	601a      	str	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   39c0a:	4288      	cmp	r0, r1
	list->tail = node;
   39c0c:	bf08      	it	eq
   39c0e:	605a      	streq	r2, [r3, #4]
Z_GENLIST_GET(slist, snode)
   39c10:	4770      	bx	lr

00039c12 <net_buf_frags_len>:
 * @param buf Buffer to start off with.
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
   39c12:	4603      	mov	r3, r0
	size_t bytes = 0;
   39c14:	2000      	movs	r0, #0

	while (buf) {
   39c16:	b903      	cbnz	r3, 39c1a <net_buf_frags_len+0x8>
		bytes += buf->len;
		buf = buf->frags;
	}

	return bytes;
}
   39c18:	4770      	bx	lr
		bytes += buf->len;
   39c1a:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
   39c1c:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
   39c1e:	4410      	add	r0, r2
		buf = buf->frags;
   39c20:	e7f9      	b.n	39c16 <net_buf_frags_len+0x4>

00039c22 <attr_read_type_cb>:
{
   39c22:	b510      	push	{r4, lr}
	if (!data->rsp->len) {
   39c24:	68d4      	ldr	r4, [r2, #12]
   39c26:	7823      	ldrb	r3, [r4, #0]
   39c28:	3102      	adds	r1, #2
   39c2a:	b913      	cbnz	r3, 39c32 <attr_read_type_cb+0x10>
		data->rsp->len = read + sizeof(*data->item);
   39c2c:	7021      	strb	r1, [r4, #0]
	return true;
   39c2e:	2001      	movs	r0, #1
}
   39c30:	bd10      	pop	{r4, pc}
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   39c32:	428b      	cmp	r3, r1
   39c34:	d0fb      	beq.n	39c2e <attr_read_type_cb+0xc>
		frag->len -= sizeof(*data->item);
   39c36:	8983      	ldrh	r3, [r0, #12]
   39c38:	3b02      	subs	r3, #2
   39c3a:	8183      	strh	r3, [r0, #12]
		data->item = NULL;
   39c3c:	2000      	movs	r0, #0
   39c3e:	6110      	str	r0, [r2, #16]
		return false;
   39c40:	e7f6      	b.n	39c30 <attr_read_type_cb+0xe>

00039c42 <att_prepare_write_req>:
}
   39c42:	2006      	movs	r0, #6
   39c44:	4770      	bx	lr

00039c46 <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   39c46:	f3bf 8f5b 	dmb	ish
   39c4a:	6800      	ldr	r0, [r0, #0]
   39c4c:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   39c50:	4108      	asrs	r0, r1
}
   39c52:	f000 0001 	and.w	r0, r0, #1
   39c56:	4770      	bx	lr

00039c58 <write_cb>:
{
   39c58:	b573      	push	{r0, r1, r4, r5, r6, lr}
   39c5a:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   39c5c:	4601      	mov	r1, r0
{
   39c5e:	4605      	mov	r5, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
   39c60:	f44f 7295 	mov.w	r2, #298	; 0x12a
   39c64:	6820      	ldr	r0, [r4, #0]
   39c66:	f000 fe25 	bl	3a8b4 <bt_gatt_check_perm>
   39c6a:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   39c6c:	bb00      	cbnz	r0, 39cb0 <write_cb+0x58>
	if (!data->req) {
   39c6e:	7a23      	ldrb	r3, [r4, #8]
   39c70:	b1b3      	cbz	r3, 39ca0 <write_cb+0x48>
	} else if (data->req == BT_ATT_OP_EXEC_WRITE_REQ) {
   39c72:	f1a3 0218 	sub.w	r2, r3, #24
   39c76:	4253      	negs	r3, r2
   39c78:	4153      	adcs	r3, r2
   39c7a:	009b      	lsls	r3, r3, #2
	write = attr->write(data->conn, attr, data->value, data->len,
   39c7c:	9301      	str	r3, [sp, #4]
   39c7e:	8a63      	ldrh	r3, [r4, #18]
   39c80:	9300      	str	r3, [sp, #0]
   39c82:	68ae      	ldr	r6, [r5, #8]
   39c84:	8a23      	ldrh	r3, [r4, #16]
   39c86:	68e2      	ldr	r2, [r4, #12]
   39c88:	6820      	ldr	r0, [r4, #0]
   39c8a:	4629      	mov	r1, r5
   39c8c:	47b0      	blx	r6
	if (write < 0 || write != data->len) {
   39c8e:	2800      	cmp	r0, #0
   39c90:	db08      	blt.n	39ca4 <write_cb+0x4c>
   39c92:	8a23      	ldrh	r3, [r4, #16]
   39c94:	4298      	cmp	r0, r3
   39c96:	d10e      	bne.n	39cb6 <write_cb+0x5e>
	data->err = 0U;
   39c98:	2300      	movs	r3, #0
   39c9a:	7523      	strb	r3, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   39c9c:	2001      	movs	r0, #1
   39c9e:	e008      	b.n	39cb2 <write_cb+0x5a>
		flags |= BT_GATT_WRITE_FLAG_CMD;
   39ca0:	2302      	movs	r3, #2
   39ca2:	e7eb      	b.n	39c7c <write_cb+0x24>
	if (err < 0 && err >= -0xff) {
   39ca4:	f110 0fff 	cmn.w	r0, #255	; 0xff
   39ca8:	d305      	bcc.n	39cb6 <write_cb+0x5e>
		return -err;
   39caa:	4240      	negs	r0, r0
   39cac:	b2c0      	uxtb	r0, r0
		data->err = err_to_att(write);
   39cae:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   39cb0:	2000      	movs	r0, #0
}
   39cb2:	b002      	add	sp, #8
   39cb4:	bd70      	pop	{r4, r5, r6, pc}
	return BT_ATT_ERR_UNLIKELY;
   39cb6:	200e      	movs	r0, #14
   39cb8:	e7f9      	b.n	39cae <write_cb+0x56>

00039cba <bt_gatt_foreach_attr>:
 *  @param user_data Data to pass to the callback.
 */
static inline void bt_gatt_foreach_attr(uint16_t start_handle, uint16_t end_handle,
					bt_gatt_attr_func_t func,
					void *user_data)
{
   39cba:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   39cbc:	e9cd 2301 	strd	r2, r3, [sp, #4]
   39cc0:	2300      	movs	r3, #0
   39cc2:	9300      	str	r3, [sp, #0]
   39cc4:	461a      	mov	r2, r3
   39cc6:	f7f3 fa67 	bl	2d198 <bt_gatt_foreach_attr_type>
				  user_data);
}
   39cca:	b005      	add	sp, #20
   39ccc:	f85d fb04 	ldr.w	pc, [sp], #4

00039cd0 <find_info_cb>:
{
   39cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!data->rsp) {
   39cd2:	6893      	ldr	r3, [r2, #8]
	struct bt_att_chan *chan = data->chan;
   39cd4:	6817      	ldr	r7, [r2, #0]
{
   39cd6:	4605      	mov	r5, r0
   39cd8:	460e      	mov	r6, r1
   39cda:	4614      	mov	r4, r2
	if (!data->rsp) {
   39cdc:	b963      	cbnz	r3, 39cf8 <find_info_cb+0x28>
	return net_buf_simple_add(&buf->b, len);
   39cde:	6850      	ldr	r0, [r2, #4]
   39ce0:	2101      	movs	r1, #1
   39ce2:	3008      	adds	r0, #8
   39ce4:	f7f4 fed2 	bl	2ea8c <net_buf_simple_add>
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   39ce8:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   39cea:	682b      	ldr	r3, [r5, #0]
   39cec:	781b      	ldrb	r3, [r3, #0]
   39cee:	2b00      	cmp	r3, #0
   39cf0:	bf14      	ite	ne
   39cf2:	2302      	movne	r3, #2
   39cf4:	2301      	moveq	r3, #1
   39cf6:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
   39cf8:	68a3      	ldr	r3, [r4, #8]
   39cfa:	781b      	ldrb	r3, [r3, #0]
   39cfc:	2b01      	cmp	r3, #1
   39cfe:	d003      	beq.n	39d08 <find_info_cb+0x38>
   39d00:	2b02      	cmp	r3, #2
   39d02:	d019      	beq.n	39d38 <find_info_cb+0x68>
   39d04:	2000      	movs	r0, #0
   39d06:	e016      	b.n	39d36 <find_info_cb+0x66>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   39d08:	682b      	ldr	r3, [r5, #0]
   39d0a:	781b      	ldrb	r3, [r3, #0]
   39d0c:	2b00      	cmp	r3, #0
   39d0e:	d1f9      	bne.n	39d04 <find_info_cb+0x34>
   39d10:	6860      	ldr	r0, [r4, #4]
   39d12:	2104      	movs	r1, #4
   39d14:	3008      	adds	r0, #8
   39d16:	f7f4 feb9 	bl	2ea8c <net_buf_simple_add>
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   39d1a:	60e0      	str	r0, [r4, #12]
		data->info16->handle = sys_cpu_to_le16(handle);
   39d1c:	8006      	strh	r6, [r0, #0]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   39d1e:	682a      	ldr	r2, [r5, #0]
   39d20:	68e3      	ldr	r3, [r4, #12]
   39d22:	8852      	ldrh	r2, [r2, #2]
   39d24:	805a      	strh	r2, [r3, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   39d26:	6863      	ldr	r3, [r4, #4]
   39d28:	8d78      	ldrh	r0, [r7, #42]	; 0x2a
   39d2a:	899b      	ldrh	r3, [r3, #12]
   39d2c:	1ac0      	subs	r0, r0, r3
   39d2e:	2804      	cmp	r0, #4
		if (chan->chan.tx.mtu - data->buf->len >
   39d30:	bf94      	ite	ls
   39d32:	2000      	movls	r0, #0
   39d34:	2001      	movhi	r0, #1
}
   39d36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   39d38:	682b      	ldr	r3, [r5, #0]
   39d3a:	781b      	ldrb	r3, [r3, #0]
   39d3c:	2b02      	cmp	r3, #2
   39d3e:	d1e1      	bne.n	39d04 <find_info_cb+0x34>
   39d40:	6860      	ldr	r0, [r4, #4]
   39d42:	2112      	movs	r1, #18
   39d44:	3008      	adds	r0, #8
   39d46:	f7f4 fea1 	bl	2ea8c <net_buf_simple_add>
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   39d4a:	60e0      	str	r0, [r4, #12]
		data->info128->handle = sys_cpu_to_le16(handle);
   39d4c:	8006      	strh	r6, [r0, #0]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   39d4e:	6829      	ldr	r1, [r5, #0]
   39d50:	68e0      	ldr	r0, [r4, #12]
   39d52:	2210      	movs	r2, #16
   39d54:	3101      	adds	r1, #1
   39d56:	3002      	adds	r0, #2
   39d58:	f7ff fb2a 	bl	393b0 <memcpy>
		if (chan->chan.tx.mtu - data->buf->len >
   39d5c:	6863      	ldr	r3, [r4, #4]
   39d5e:	8d78      	ldrh	r0, [r7, #42]	; 0x2a
   39d60:	899b      	ldrh	r3, [r3, #12]
   39d62:	1ac0      	subs	r0, r0, r3
   39d64:	2812      	cmp	r0, #18
   39d66:	e7e3      	b.n	39d30 <find_info_cb+0x60>

00039d68 <att_chan_mtu_updated>:
{
   39d68:	b470      	push	{r4, r5, r6}
	struct bt_att *att = updated_chan->att;
   39d6a:	6805      	ldr	r5, [r0, #0]
	return list->head;
   39d6c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   39d6e:	b352      	cbz	r2, 39dc6 <att_chan_mtu_updated+0x5e>
	return node->next;
   39d70:	6813      	ldr	r3, [r2, #0]
   39d72:	b103      	cbz	r3, 39d76 <att_chan_mtu_updated+0xe>
   39d74:	3bf0      	subs	r3, #240	; 0xf0
   39d76:	f1a2 04f0 	sub.w	r4, r2, #240	; 0xf0
   39d7a:	2200      	movs	r2, #0
   39d7c:	4611      	mov	r1, r2
   39d7e:	e000      	b.n	39d82 <att_chan_mtu_updated+0x1a>
   39d80:	3bf0      	subs	r3, #240	; 0xf0
		if (chan == updated_chan) {
   39d82:	4284      	cmp	r4, r0
   39d84:	d007      	beq.n	39d96 <att_chan_mtu_updated+0x2e>
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   39d86:	8d66      	ldrh	r6, [r4, #42]	; 0x2a
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   39d88:	8b64      	ldrh	r4, [r4, #26]
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   39d8a:	42b1      	cmp	r1, r6
   39d8c:	bf38      	it	cc
   39d8e:	4631      	movcc	r1, r6
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   39d90:	42a2      	cmp	r2, r4
   39d92:	bf38      	it	cc
   39d94:	4622      	movcc	r2, r4
   39d96:	461c      	mov	r4, r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   39d98:	b12b      	cbz	r3, 39da6 <att_chan_mtu_updated+0x3e>
   39d9a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   39d9e:	2b00      	cmp	r3, #0
   39da0:	d1ee      	bne.n	39d80 <att_chan_mtu_updated+0x18>
		if (chan == updated_chan) {
   39da2:	4284      	cmp	r4, r0
   39da4:	d1ef      	bne.n	39d86 <att_chan_mtu_updated+0x1e>
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   39da6:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
	    (updated_chan->chan.rx.mtu > max_rx)) {
   39da8:	8b40      	ldrh	r0, [r0, #26]
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   39daa:	428b      	cmp	r3, r1
   39dac:	d801      	bhi.n	39db2 <att_chan_mtu_updated+0x4a>
   39dae:	4290      	cmp	r0, r2
   39db0:	d90b      	bls.n	39dca <att_chan_mtu_updated+0x62>
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   39db2:	4282      	cmp	r2, r0
   39db4:	bf38      	it	cc
   39db6:	4602      	movcc	r2, r0
   39db8:	4299      	cmp	r1, r3
   39dba:	6828      	ldr	r0, [r5, #0]
   39dbc:	bf38      	it	cc
   39dbe:	4619      	movcc	r1, r3
}
   39dc0:	bc70      	pop	{r4, r5, r6}
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   39dc2:	f7f3 bf4d 	b.w	2dc60 <bt_gatt_att_max_mtu_changed>
   39dc6:	4611      	mov	r1, r2
   39dc8:	e7ed      	b.n	39da6 <att_chan_mtu_updated+0x3e>
}
   39dca:	bc70      	pop	{r4, r5, r6}
   39dcc:	4770      	bx	lr

00039dce <attr_read_group_cb>:
	if (!data->rsp->len) {
   39dce:	68d0      	ldr	r0, [r2, #12]
   39dd0:	7803      	ldrb	r3, [r0, #0]
   39dd2:	3104      	adds	r1, #4
   39dd4:	b913      	cbnz	r3, 39ddc <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   39dd6:	7001      	strb	r1, [r0, #0]
	return true;
   39dd8:	2001      	movs	r0, #1
   39dda:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   39ddc:	428b      	cmp	r3, r1
   39dde:	d0fb      	beq.n	39dd8 <attr_read_group_cb+0xa>
		data->buf->len -= sizeof(*data->group);
   39de0:	6891      	ldr	r1, [r2, #8]
   39de2:	898b      	ldrh	r3, [r1, #12]
		data->group = NULL;
   39de4:	2000      	movs	r0, #0
		data->buf->len -= sizeof(*data->group);
   39de6:	3b04      	subs	r3, #4
   39de8:	818b      	strh	r3, [r1, #12]
		data->group = NULL;
   39dea:	6110      	str	r0, [r2, #16]
}
   39dec:	4770      	bx	lr

00039dee <z_log_msg_static_create.constprop.0>:
   39dee:	2300      	movs	r3, #0
   39df0:	f7ec b9dc 	b.w	261ac <z_impl_z_log_msg_static_create>

00039df4 <chan_req_send>:
{
   39df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   39df6:	4605      	mov	r5, r0
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   39df8:	6888      	ldr	r0, [r1, #8]
   39dfa:	f7ff ff0a 	bl	39c12 <net_buf_frags_len>
   39dfe:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
   39e00:	4283      	cmp	r3, r0
{
   39e02:	460c      	mov	r4, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   39e04:	d30d      	bcc.n	39e22 <chan_req_send+0x2e>
	chan->req = req;
   39e06:	f8c5 109c 	str.w	r1, [r5, #156]	; 0x9c
	buf = req->buf;
   39e0a:	688f      	ldr	r7, [r1, #8]
	req->buf = NULL;
   39e0c:	2600      	movs	r6, #0
   39e0e:	608e      	str	r6, [r1, #8]
	return chan_send(chan, buf);
   39e10:	4628      	mov	r0, r5
   39e12:	4639      	mov	r1, r7
   39e14:	f7f1 fee6 	bl	2bbe4 <chan_send>
	if (err) {
   39e18:	b110      	cbz	r0, 39e20 <chan_req_send+0x2c>
		req->buf = buf;
   39e1a:	60a7      	str	r7, [r4, #8]
		chan->req = NULL;
   39e1c:	f8c5 609c 	str.w	r6, [r5, #156]	; 0x9c
}
   39e20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EMSGSIZE;
   39e22:	f06f 0079 	mvn.w	r0, #121	; 0x79
   39e26:	e7fb      	b.n	39e20 <chan_req_send+0x2c>

00039e28 <process_queue>:
{
   39e28:	b570      	push	{r4, r5, r6, lr}
		return net_buf_get(fifo, K_NO_WAIT);
   39e2a:	2200      	movs	r2, #0
{
   39e2c:	4604      	mov	r4, r0
		return net_buf_get(fifo, K_NO_WAIT);
   39e2e:	2300      	movs	r3, #0
   39e30:	4608      	mov	r0, r1
{
   39e32:	460e      	mov	r6, r1
		return net_buf_get(fifo, K_NO_WAIT);
   39e34:	f7f4 fbf2 	bl	2e61c <net_buf_get>
	if (buf) {
   39e38:	4605      	mov	r5, r0
   39e3a:	b158      	cbz	r0, 39e54 <process_queue+0x2c>
	return chan_send(chan, buf);
   39e3c:	4601      	mov	r1, r0
   39e3e:	4620      	mov	r0, r4
   39e40:	f7f1 fed0 	bl	2bbe4 <chan_send>
		if (err) {
   39e44:	4604      	mov	r4, r0
   39e46:	b118      	cbz	r0, 39e50 <process_queue+0x28>
			k_queue_prepend(&queue->_queue, buf);
   39e48:	4629      	mov	r1, r5
   39e4a:	4630      	mov	r0, r6
   39e4c:	f001 ff13 	bl	3bc76 <k_queue_prepend>
}
   39e50:	4620      	mov	r0, r4
   39e52:	bd70      	pop	{r4, r5, r6, pc}
	return -ENOENT;
   39e54:	f06f 0401 	mvn.w	r4, #1
   39e58:	e7fa      	b.n	39e50 <process_queue+0x28>

00039e5a <bt_att_chan_send_rsp>:
{
   39e5a:	b538      	push	{r3, r4, r5, lr}
   39e5c:	4604      	mov	r4, r0
   39e5e:	460d      	mov	r5, r1
	err = chan_send(chan, buf);
   39e60:	f7f1 fec0 	bl	2bbe4 <chan_send>
	if (err) {
   39e64:	b130      	cbz	r0, 39e74 <bt_att_chan_send_rsp+0x1a>
		net_buf_put(&chan->tx_queue, buf);
   39e66:	4629      	mov	r1, r5
   39e68:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
}
   39e6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_put(&chan->tx_queue, buf);
   39e70:	f7f4 bcdc 	b.w	2e82c <net_buf_put>
}
   39e74:	bd38      	pop	{r3, r4, r5, pc}

00039e76 <att_chan_read>:
{
   39e76:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   39e7a:	4680      	mov	r8, r0
   39e7c:	b085      	sub	sp, #20
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   39e7e:	4610      	mov	r0, r2
{
   39e80:	4699      	mov	r9, r3
   39e82:	4616      	mov	r6, r2
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   39e84:	f7ff fec5 	bl	39c12 <net_buf_frags_len>
   39e88:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
   39e8c:	4283      	cmp	r3, r0
{
   39e8e:	468b      	mov	fp, r1
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   39e90:	d97a      	bls.n	39f88 <att_chan_read+0x112>
	struct bt_conn *conn = chan->chan.chan.conn;
   39e92:	f8d8 3004 	ldr.w	r3, [r8, #4]
   39e96:	9303      	str	r3, [sp, #12]
	frag = net_buf_frag_last(buf);
   39e98:	4630      	mov	r0, r6
   39e9a:	f7f4 fd49 	bl	2e930 <net_buf_frag_last>
	size_t len, total = 0;
   39e9e:	f04f 0a00 	mov.w	sl, #0
	frag = net_buf_frag_last(buf);
   39ea2:	4605      	mov	r5, r0
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   39ea4:	4630      	mov	r0, r6
   39ea6:	f7ff feb4 	bl	39c12 <net_buf_frags_len>
   39eaa:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
	return net_buf_simple_tailroom(&buf->b);
   39eae:	f105 0708 	add.w	r7, r5, #8
   39eb2:	1a24      	subs	r4, r4, r0
   39eb4:	4638      	mov	r0, r7
   39eb6:	f000 fe27 	bl	3ab08 <net_buf_simple_tailroom>
   39eba:	4284      	cmp	r4, r0
   39ebc:	d211      	bcs.n	39ee2 <att_chan_read+0x6c>
   39ebe:	4630      	mov	r0, r6
   39ec0:	f7ff fea7 	bl	39c12 <net_buf_frags_len>
   39ec4:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   39ec8:	1a24      	subs	r4, r4, r0
		if (!len) {
   39eca:	bb34      	cbnz	r4, 39f1a <att_chan_read+0xa4>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   39ecc:	79b0      	ldrb	r0, [r6, #6]
   39ece:	f7f4 fa7d 	bl	2e3cc <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   39ed2:	2200      	movs	r2, #0
   39ed4:	2300      	movs	r3, #0
   39ed6:	f000 fe06 	bl	3aae6 <net_buf_alloc_fixed>
			if (!frag) {
   39eda:	4605      	mov	r5, r0
   39edc:	b930      	cbnz	r0, 39eec <att_chan_read+0x76>
	return total;
   39ede:	4657      	mov	r7, sl
   39ee0:	e02c      	b.n	39f3c <att_chan_read+0xc6>
	return net_buf_simple_tailroom(&buf->b);
   39ee2:	4638      	mov	r0, r7
   39ee4:	f000 fe10 	bl	3ab08 <net_buf_simple_tailroom>
   39ee8:	4604      	mov	r4, r0
   39eea:	e7ee      	b.n	39eca <att_chan_read+0x54>
			net_buf_frag_add(buf, frag);
   39eec:	4601      	mov	r1, r0
   39eee:	4630      	mov	r0, r6
   39ef0:	f7f4 fd5c 	bl	2e9ac <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   39ef4:	4630      	mov	r0, r6
   39ef6:	f7ff fe8c 	bl	39c12 <net_buf_frags_len>
   39efa:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   39efe:	f105 0708 	add.w	r7, r5, #8
   39f02:	1a24      	subs	r4, r4, r0
   39f04:	4638      	mov	r0, r7
   39f06:	f000 fdff 	bl	3ab08 <net_buf_simple_tailroom>
   39f0a:	4284      	cmp	r4, r0
   39f0c:	d21a      	bcs.n	39f44 <att_chan_read+0xce>
   39f0e:	4630      	mov	r0, r6
   39f10:	f7ff fe7f 	bl	39c12 <net_buf_frags_len>
   39f14:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   39f18:	1a24      	subs	r4, r4, r0
		read = attr->read(conn, attr, frag->data + frag->len, len,
   39f1a:	68a9      	ldr	r1, [r5, #8]
   39f1c:	89aa      	ldrh	r2, [r5, #12]
   39f1e:	f8cd 9000 	str.w	r9, [sp]
   39f22:	f8db 7004 	ldr.w	r7, [fp, #4]
   39f26:	9803      	ldr	r0, [sp, #12]
   39f28:	440a      	add	r2, r1
   39f2a:	b2a3      	uxth	r3, r4
   39f2c:	4659      	mov	r1, fp
   39f2e:	47b8      	blx	r7
		if (read < 0) {
   39f30:	1e07      	subs	r7, r0, #0
   39f32:	da0c      	bge.n	39f4e <att_chan_read+0xd8>
				return total;
   39f34:	f1ba 0f00 	cmp.w	sl, #0
   39f38:	bf18      	it	ne
   39f3a:	4657      	movne	r7, sl
}
   39f3c:	4638      	mov	r0, r7
   39f3e:	b005      	add	sp, #20
   39f40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   39f44:	4638      	mov	r0, r7
   39f46:	f000 fddf 	bl	3ab08 <net_buf_simple_tailroom>
   39f4a:	4604      	mov	r4, r0
   39f4c:	e7e5      	b.n	39f1a <att_chan_read+0xa4>
		if (cb && !cb(frag, read, user_data)) {
   39f4e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   39f50:	b993      	cbnz	r3, 39f78 <att_chan_read+0x102>
	return net_buf_simple_add(&buf->b, len);
   39f52:	4639      	mov	r1, r7
   39f54:	f105 0008 	add.w	r0, r5, #8
   39f58:	f7f4 fd98 	bl	2ea8c <net_buf_simple_add>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   39f5c:	4630      	mov	r0, r6
   39f5e:	f7ff fe58 	bl	39c12 <net_buf_frags_len>
   39f62:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
		offset += read;
   39f66:	44b9      	add	r9, r7
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   39f68:	4283      	cmp	r3, r0
		total += read;
   39f6a:	44ba      	add	sl, r7
		offset += read;
   39f6c:	fa1f f989 	uxth.w	r9, r9
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   39f70:	d9b5      	bls.n	39ede <att_chan_read+0x68>
   39f72:	42a7      	cmp	r7, r4
   39f74:	d096      	beq.n	39ea4 <att_chan_read+0x2e>
   39f76:	e7b2      	b.n	39ede <att_chan_read+0x68>
		if (cb && !cb(frag, read, user_data)) {
   39f78:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   39f7a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   39f7c:	4639      	mov	r1, r7
   39f7e:	4628      	mov	r0, r5
   39f80:	4798      	blx	r3
   39f82:	2800      	cmp	r0, #0
   39f84:	d1e5      	bne.n	39f52 <att_chan_read+0xdc>
   39f86:	e7aa      	b.n	39ede <att_chan_read+0x68>
		return 0;
   39f88:	2700      	movs	r7, #0
   39f8a:	e7d7      	b.n	39f3c <att_chan_read+0xc6>

00039f8c <sys_slist_find_and_remove.isra.0>:
	return list->head;
   39f8c:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   39f8e:	2200      	movs	r2, #0
   39f90:	b903      	cbnz	r3, 39f94 <sys_slist_find_and_remove.isra.0+0x8>
   39f92:	4770      	bx	lr
   39f94:	428b      	cmp	r3, r1
   39f96:	d10f      	bne.n	39fb8 <sys_slist_find_and_remove.isra.0+0x2c>
	return node->next;
   39f98:	680b      	ldr	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   39f9a:	b93a      	cbnz	r2, 39fac <sys_slist_find_and_remove.isra.0+0x20>
   39f9c:	6842      	ldr	r2, [r0, #4]
	list->head = node;
   39f9e:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   39fa0:	4291      	cmp	r1, r2
   39fa2:	d100      	bne.n	39fa6 <sys_slist_find_and_remove.isra.0+0x1a>
	list->tail = node;
   39fa4:	6043      	str	r3, [r0, #4]
	parent->next = child;
   39fa6:	2300      	movs	r3, #0
   39fa8:	600b      	str	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   39faa:	4770      	bx	lr
	parent->next = child;
   39fac:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   39fae:	6843      	ldr	r3, [r0, #4]
   39fb0:	4299      	cmp	r1, r3
	list->tail = node;
   39fb2:	bf08      	it	eq
   39fb4:	6042      	streq	r2, [r0, #4]
}
   39fb6:	e7f6      	b.n	39fa6 <sys_slist_find_and_remove.isra.0+0x1a>
	return node->next;
   39fb8:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   39fba:	681b      	ldr	r3, [r3, #0]
   39fbc:	e7e8      	b.n	39f90 <sys_slist_find_and_remove.isra.0+0x4>

00039fbe <att_exec_write_req>:
static uint8_t att_exec_write_req(struct bt_att_chan *chan, struct net_buf *buf)
   39fbe:	2006      	movs	r0, #6
   39fc0:	4770      	bx	lr

00039fc2 <atomic_test_and_set_bit>:
{
   39fc2:	b510      	push	{r4, lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   39fc4:	2301      	movs	r3, #1
   39fc6:	fa03 f101 	lsl.w	r1, r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   39fca:	f3bf 8f5b 	dmb	ish
   39fce:	e850 3f00 	ldrex	r3, [r0]
   39fd2:	ea43 0201 	orr.w	r2, r3, r1
   39fd6:	e840 2400 	strex	r4, r2, [r0]
   39fda:	2c00      	cmp	r4, #0
   39fdc:	d1f7      	bne.n	39fce <atomic_test_and_set_bit+0xc>
   39fde:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
   39fe2:	4219      	tst	r1, r3
}
   39fe4:	bf14      	ite	ne
   39fe6:	2001      	movne	r0, #1
   39fe8:	2000      	moveq	r0, #0
   39fea:	bd10      	pop	{r4, pc}

00039fec <read_cb>:
{
   39fec:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct bt_att_chan *chan = data->chan;
   39fee:	6816      	ldr	r6, [r2, #0]
{
   39ff0:	4605      	mov	r5, r0
	data->err = 0x00;
   39ff2:	2300      	movs	r3, #0
	struct bt_conn *conn = chan->chan.chan.conn;
   39ff4:	6870      	ldr	r0, [r6, #4]
	data->err = 0x00;
   39ff6:	7313      	strb	r3, [r2, #12]
{
   39ff8:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   39ffa:	4629      	mov	r1, r5
   39ffc:	2295      	movs	r2, #149	; 0x95
   39ffe:	f000 fc59 	bl	3a8b4 <bt_gatt_check_perm>
   3a002:	7320      	strb	r0, [r4, #12]
	if (data->err) {
   3a004:	b980      	cbnz	r0, 3a028 <read_cb+0x3c>
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   3a006:	e9cd 0000 	strd	r0, r0, [sp]
   3a00a:	4629      	mov	r1, r5
   3a00c:	88a3      	ldrh	r3, [r4, #4]
   3a00e:	68a2      	ldr	r2, [r4, #8]
   3a010:	4630      	mov	r0, r6
   3a012:	f7ff ff30 	bl	39e76 <att_chan_read>
	if (ret < 0) {
   3a016:	2800      	cmp	r0, #0
   3a018:	da09      	bge.n	3a02e <read_cb+0x42>
	if (err < 0 && err >= -0xff) {
   3a01a:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
   3a01e:	bf26      	itte	cs
   3a020:	4240      	negcs	r0, r0
   3a022:	b2c0      	uxtbcs	r0, r0
	return BT_ATT_ERR_UNLIKELY;
   3a024:	200e      	movcc	r0, #14
		data->err = err_to_att(ret);
   3a026:	7320      	strb	r0, [r4, #12]
		return BT_GATT_ITER_STOP;
   3a028:	2000      	movs	r0, #0
}
   3a02a:	b002      	add	sp, #8
   3a02c:	bd70      	pop	{r4, r5, r6, pc}
	return BT_GATT_ITER_CONTINUE;
   3a02e:	2001      	movs	r0, #1
   3a030:	e7fb      	b.n	3a02a <read_cb+0x3e>

0003a032 <read_vl_cb>:
{
   3a032:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_att_chan *chan = data->chan;
   3a036:	f8d2 8000 	ldr.w	r8, [r2]
{
   3a03a:	4606      	mov	r6, r0
	data->err = 0x00;
   3a03c:	2300      	movs	r3, #0
	struct bt_conn *conn = chan->chan.chan.conn;
   3a03e:	f8d8 0004 	ldr.w	r0, [r8, #4]
	data->err = 0x00;
   3a042:	7313      	strb	r3, [r2, #12]
{
   3a044:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   3a046:	4631      	mov	r1, r6
   3a048:	2295      	movs	r2, #149	; 0x95
   3a04a:	f000 fc33 	bl	3a8b4 <bt_gatt_check_perm>
   3a04e:	4605      	mov	r5, r0
   3a050:	7320      	strb	r0, [r4, #12]
	if (data->err) {
   3a052:	b9e0      	cbnz	r0, 3a08e <read_vl_cb+0x5c>
	if (chan->chan.tx.mtu - data->buf->len < 2) {
   3a054:	68a0      	ldr	r0, [r4, #8]
   3a056:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
   3a05a:	8982      	ldrh	r2, [r0, #12]
   3a05c:	1a9b      	subs	r3, r3, r2
   3a05e:	2b01      	cmp	r3, #1
   3a060:	dd15      	ble.n	3a08e <read_vl_cb+0x5c>
   3a062:	2102      	movs	r1, #2
   3a064:	3008      	adds	r0, #8
   3a066:	f7f4 fd11 	bl	2ea8c <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   3a06a:	e9cd 5500 	strd	r5, r5, [sp]
   3a06e:	4607      	mov	r7, r0
   3a070:	88a3      	ldrh	r3, [r4, #4]
   3a072:	68a2      	ldr	r2, [r4, #8]
   3a074:	4631      	mov	r1, r6
   3a076:	4640      	mov	r0, r8
   3a078:	f7ff fefd 	bl	39e76 <att_chan_read>
	if (read < 0) {
   3a07c:	1e03      	subs	r3, r0, #0
   3a07e:	da0a      	bge.n	3a096 <read_vl_cb+0x64>
	if (err < 0 && err >= -0xff) {
   3a080:	f113 0fff 	cmn.w	r3, #255	; 0xff
		return -err;
   3a084:	bf26      	itte	cs
   3a086:	425b      	negcs	r3, r3
   3a088:	b2db      	uxtbcs	r3, r3
	return BT_ATT_ERR_UNLIKELY;
   3a08a:	230e      	movcc	r3, #14
		data->err = err_to_att(read);
   3a08c:	7323      	strb	r3, [r4, #12]
		return BT_GATT_ITER_STOP;
   3a08e:	2000      	movs	r0, #0
}
   3a090:	b002      	add	sp, #8
   3a092:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	rsp->len = read;
   3a096:	803b      	strh	r3, [r7, #0]
	return BT_GATT_ITER_CONTINUE;
   3a098:	2001      	movs	r0, #1
   3a09a:	e7f9      	b.n	3a090 <read_vl_cb+0x5e>

0003a09c <bt_att_sent>:
{
   3a09c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3a09e:	4605      	mov	r5, r0
	struct bt_att_chan *chan = ATT_CHAN(ch);
   3a0a0:	1f07      	subs	r7, r0, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   3a0a2:	f100 0394 	add.w	r3, r0, #148	; 0x94
	struct bt_att *att = chan->att;
   3a0a6:	f850 4c04 	ldr.w	r4, [r0, #-4]
   3a0aa:	f3bf 8f5b 	dmb	ish
   3a0ae:	e853 1f00 	ldrex	r1, [r3]
   3a0b2:	f021 0110 	bic.w	r1, r1, #16
   3a0b6:	e843 1200 	strex	r2, r1, [r3]
   3a0ba:	2a00      	cmp	r2, #0
   3a0bc:	d1f7      	bne.n	3a0ae <bt_att_sent+0x12>
   3a0be:	f3bf 8f5b 	dmb	ish
	if (!att) {
   3a0c2:	b30c      	cbz	r4, 3a108 <bt_att_sent+0x6c>
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   3a0c4:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
   3a0c8:	b98b      	cbnz	r3, 3a0ee <bt_att_sent+0x52>
   3a0ca:	6863      	ldr	r3, [r4, #4]
   3a0cc:	b17b      	cbz	r3, 3a0ee <bt_att_sent+0x52>
		sys_snode_t *node = sys_slist_get(&att->reqs);
   3a0ce:	1d20      	adds	r0, r4, #4
   3a0d0:	f7ff fd95 	bl	39bfe <sys_slist_get>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   3a0d4:	4601      	mov	r1, r0
		sys_snode_t *node = sys_slist_get(&att->reqs);
   3a0d6:	4606      	mov	r6, r0
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   3a0d8:	4638      	mov	r0, r7
   3a0da:	f7ff fe8b 	bl	39df4 <chan_req_send>
   3a0de:	2800      	cmp	r0, #0
   3a0e0:	da12      	bge.n	3a108 <bt_att_sent+0x6c>
	return list->head;
   3a0e2:	6863      	ldr	r3, [r4, #4]
	parent->next = child;
   3a0e4:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   3a0e6:	68a3      	ldr	r3, [r4, #8]
	list->head = node;
   3a0e8:	6066      	str	r6, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
   3a0ea:	b903      	cbnz	r3, 3a0ee <bt_att_sent+0x52>
	list->tail = node;
   3a0ec:	60a6      	str	r6, [r4, #8]
	err = process_queue(chan, &chan->tx_queue);
   3a0ee:	f105 019c 	add.w	r1, r5, #156	; 0x9c
   3a0f2:	4638      	mov	r0, r7
   3a0f4:	f7ff fe98 	bl	39e28 <process_queue>
	if (!err) {
   3a0f8:	b130      	cbz	r0, 3a108 <bt_att_sent+0x6c>
	(void)process_queue(chan, &att->tx_queue);
   3a0fa:	f104 010c 	add.w	r1, r4, #12
   3a0fe:	4638      	mov	r0, r7
}
   3a100:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	(void)process_queue(chan, &att->tx_queue);
   3a104:	f7ff be90 	b.w	39e28 <process_queue>
}
   3a108:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0003a10a <att_req_send_process>:
{
   3a10a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return list->head;
   3a10e:	6a84      	ldr	r4, [r0, #40]	; 0x28
   3a110:	4680      	mov	r8, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   3a112:	2c00      	cmp	r4, #0
   3a114:	d03b      	beq.n	3a18e <att_req_send_process+0x84>
	return node->next;
   3a116:	f854 69f0 	ldr.w	r6, [r4], #-240
   3a11a:	b106      	cbz	r6, 3a11e <att_req_send_process+0x14>
   3a11c:	3ef0      	subs	r6, #240	; 0xf0
{
   3a11e:	2300      	movs	r3, #0
   3a120:	461d      	mov	r5, r3
		req = get_first_req_matching_chan(&att->reqs, chan);
   3a122:	f108 0704 	add.w	r7, r8, #4
   3a126:	e013      	b.n	3a150 <att_req_send_process+0x46>
		if (!req && prev &&
   3a128:	b1c3      	cbz	r3, 3a15c <att_req_send_process+0x52>
		    (atomic_test_bit(chan->flags, ATT_ENHANCED) ==
   3a12a:	2103      	movs	r1, #3
   3a12c:	f104 0098 	add.w	r0, r4, #152	; 0x98
   3a130:	f7ff fd89 	bl	39c46 <atomic_test_bit>
   3a134:	4602      	mov	r2, r0
		     atomic_test_bit(prev->flags, ATT_ENHANCED))) {
   3a136:	f103 0098 	add.w	r0, r3, #152	; 0x98
   3a13a:	f7ff fd84 	bl	39c46 <atomic_test_bit>
		if (!req && prev &&
   3a13e:	4282      	cmp	r2, r0
   3a140:	d10c      	bne.n	3a15c <att_req_send_process+0x52>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   3a142:	b326      	cbz	r6, 3a18e <att_req_send_process+0x84>
   3a144:	f8d6 20f0 	ldr.w	r2, [r6, #240]	; 0xf0
   3a148:	b102      	cbz	r2, 3a14c <att_req_send_process+0x42>
   3a14a:	3af0      	subs	r2, #240	; 0xf0
{
   3a14c:	4634      	mov	r4, r6
   3a14e:	4616      	mov	r6, r2
		if (chan->req) {
   3a150:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
   3a154:	2a00      	cmp	r2, #0
   3a156:	d1f4      	bne.n	3a142 <att_req_send_process+0x38>
		if (!req && prev &&
   3a158:	2d00      	cmp	r5, #0
   3a15a:	d0e5      	beq.n	3a128 <att_req_send_process+0x1e>
	sys_snode_t *node = sys_slist_get(reqs);
   3a15c:	4638      	mov	r0, r7
   3a15e:	f7ff fd4e 	bl	39bfe <sys_slist_get>
	if (node) {
   3a162:	4605      	mov	r5, r0
   3a164:	b908      	cbnz	r0, 3a16a <att_req_send_process+0x60>
   3a166:	4623      	mov	r3, r4
   3a168:	e7eb      	b.n	3a142 <att_req_send_process+0x38>
		if (bt_att_chan_req_send(chan, req) >= 0) {
   3a16a:	4601      	mov	r1, r0
   3a16c:	4620      	mov	r0, r4
   3a16e:	f7f1 fda5 	bl	2bcbc <bt_att_chan_req_send>
   3a172:	2800      	cmp	r0, #0
   3a174:	da0b      	bge.n	3a18e <att_req_send_process+0x84>
	return list->head;
   3a176:	f8d8 3004 	ldr.w	r3, [r8, #4]
	parent->next = child;
   3a17a:	602b      	str	r3, [r5, #0]
Z_GENLIST_PREPEND(slist, snode)
   3a17c:	f8d8 3008 	ldr.w	r3, [r8, #8]
	list->head = node;
   3a180:	f8c8 5004 	str.w	r5, [r8, #4]
Z_GENLIST_PREPEND(slist, snode)
   3a184:	2b00      	cmp	r3, #0
   3a186:	d1ee      	bne.n	3a166 <att_req_send_process+0x5c>
	list->tail = node;
   3a188:	f8c8 5008 	str.w	r5, [r8, #8]
}
   3a18c:	e7eb      	b.n	3a166 <att_req_send_process+0x5c>
}
   3a18e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0003a192 <bt_att_status>:
{
   3a192:	b538      	push	{r3, r4, r5, lr}
   3a194:	4605      	mov	r5, r0
   3a196:	4608      	mov	r0, r1
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   3a198:	2100      	movs	r1, #0
   3a19a:	f7ff fd54 	bl	39c46 <atomic_test_bit>
   3a19e:	b1c0      	cbz	r0, 3a1d2 <bt_att_status+0x40>
	if (!chan->att) {
   3a1a0:	f855 0c04 	ldr.w	r0, [r5, #-4]
   3a1a4:	b1a8      	cbz	r0, 3a1d2 <bt_att_status+0x40>
	if (chan->req) {
   3a1a6:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
   3a1aa:	b993      	cbnz	r3, 3a1d2 <bt_att_status+0x40>
	node = sys_slist_get(&chan->att->reqs);
   3a1ac:	3004      	adds	r0, #4
   3a1ae:	f7ff fd26 	bl	39bfe <sys_slist_get>
	if (!node) {
   3a1b2:	4604      	mov	r4, r0
   3a1b4:	b168      	cbz	r0, 3a1d2 <bt_att_status+0x40>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   3a1b6:	4601      	mov	r1, r0
   3a1b8:	1f28      	subs	r0, r5, #4
   3a1ba:	f7f1 fd7f 	bl	2bcbc <bt_att_chan_req_send>
   3a1be:	2800      	cmp	r0, #0
   3a1c0:	da07      	bge.n	3a1d2 <bt_att_status+0x40>
	sys_slist_prepend(&chan->att->reqs, node);
   3a1c2:	f855 3c04 	ldr.w	r3, [r5, #-4]
	return list->head;
   3a1c6:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   3a1c8:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   3a1ca:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   3a1cc:	605c      	str	r4, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   3a1ce:	b902      	cbnz	r2, 3a1d2 <bt_att_status+0x40>
	list->tail = node;
   3a1d0:	609c      	str	r4, [r3, #8]
}
   3a1d2:	bd38      	pop	{r3, r4, r5, pc}

0003a1d4 <att_sent>:
	struct bt_att_chan *att_chan = data->att_chan;
   3a1d4:	6808      	ldr	r0, [r1, #0]
	if (chan->ops->sent) {
   3a1d6:	6883      	ldr	r3, [r0, #8]
   3a1d8:	699b      	ldr	r3, [r3, #24]
   3a1da:	b10b      	cbz	r3, 3a1e0 <att_sent+0xc>
		chan->ops->sent(chan);
   3a1dc:	3004      	adds	r0, #4
   3a1de:	4718      	bx	r3
}
   3a1e0:	4770      	bx	lr

0003a1e2 <att_tx_complete>:
{
   3a1e2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   3a1e6:	4606      	mov	r6, r0
   3a1e8:	460d      	mov	r5, r1
	if (!err) {
   3a1ea:	4614      	mov	r4, r2
   3a1ec:	b122      	cbz	r2, 3a1f8 <att_tx_complete+0x16>
}
   3a1ee:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	tx_meta_data_free(data);
   3a1f2:	4608      	mov	r0, r1
   3a1f4:	f7f1 bc12 	b.w	2ba1c <tx_meta_data_free>
		att_sent(conn, user_data);
   3a1f8:	f7ff ffec 	bl	3a1d4 <att_sent>
	bt_gatt_complete_func_t func = data->func;
   3a1fc:	68af      	ldr	r7, [r5, #8]
	uint16_t attr_count = data->attr_count;
   3a1fe:	f8b5 8004 	ldrh.w	r8, [r5, #4]
	void *ud = data->user_data;
   3a202:	f8d5 900c 	ldr.w	r9, [r5, #12]
	tx_meta_data_free(data);
   3a206:	4628      	mov	r0, r5
   3a208:	f7f1 fc08 	bl	2ba1c <tx_meta_data_free>
	if (!err && func) {
   3a20c:	b92f      	cbnz	r7, 3a21a <att_tx_complete+0x38>
}
   3a20e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			func(conn, ud);
   3a212:	4649      	mov	r1, r9
   3a214:	4630      	mov	r0, r6
   3a216:	47b8      	blx	r7
		for (uint16_t i = 0; i < attr_count; i++) {
   3a218:	3401      	adds	r4, #1
   3a21a:	b2a3      	uxth	r3, r4
   3a21c:	4543      	cmp	r3, r8
   3a21e:	d3f8      	bcc.n	3a212 <att_tx_complete+0x30>
   3a220:	e7f5      	b.n	3a20e <att_tx_complete+0x2c>

0003a222 <att_req_sent>:
{
   3a222:	b510      	push	{r4, lr}
   3a224:	460c      	mov	r4, r1
	if (!err) {
   3a226:	b90a      	cbnz	r2, 3a22c <att_req_sent+0xa>
		att_sent(conn, user_data);
   3a228:	f7ff ffd4 	bl	3a1d4 <att_sent>
	struct bt_att_chan *chan = data->att_chan;
   3a22c:	6820      	ldr	r0, [r4, #0]
	if (chan->req) {
   3a22e:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
   3a232:	b12b      	cbz	r3, 3a240 <att_req_sent+0x1e>
		k_work_reschedule(&chan->timeout_work, BT_ATT_TIMEOUT);
   3a234:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   3a238:	2300      	movs	r3, #0
   3a23a:	30c0      	adds	r0, #192	; 0xc0
   3a23c:	f7fb ff92 	bl	36164 <k_work_reschedule>
	tx_meta_data_free(user_data);
   3a240:	4620      	mov	r0, r4
}
   3a242:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(user_data);
   3a246:	f7f1 bbe9 	b.w	2ba1c <tx_meta_data_free>

0003a24a <att_cfm_sent>:
{
   3a24a:	b510      	push	{r4, lr}
   3a24c:	460c      	mov	r4, r1
	if (!err) {
   3a24e:	b90a      	cbnz	r2, 3a254 <att_cfm_sent+0xa>
		att_sent(conn, user_data);
   3a250:	f7ff ffc0 	bl	3a1d4 <att_sent>
   3a254:	6823      	ldr	r3, [r4, #0]
   3a256:	f3bf 8f5b 	dmb	ish
   3a25a:	3398      	adds	r3, #152	; 0x98
   3a25c:	e853 1f00 	ldrex	r1, [r3]
   3a260:	f021 0102 	bic.w	r1, r1, #2
   3a264:	e843 1200 	strex	r2, r1, [r3]
   3a268:	2a00      	cmp	r2, #0
   3a26a:	d1f7      	bne.n	3a25c <att_cfm_sent+0x12>
   3a26c:	f3bf 8f5b 	dmb	ish
	tx_meta_data_free(data);
   3a270:	4620      	mov	r0, r4
}
   3a272:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(data);
   3a276:	f7f1 bbd1 	b.w	2ba1c <tx_meta_data_free>

0003a27a <att_rsp_sent>:
{
   3a27a:	b510      	push	{r4, lr}
   3a27c:	460c      	mov	r4, r1
	if (!err) {
   3a27e:	b90a      	cbnz	r2, 3a284 <att_rsp_sent+0xa>
		att_sent(conn, user_data);
   3a280:	f7ff ffa8 	bl	3a1d4 <att_sent>
   3a284:	6823      	ldr	r3, [r4, #0]
   3a286:	f3bf 8f5b 	dmb	ish
   3a28a:	3398      	adds	r3, #152	; 0x98
   3a28c:	e853 1f00 	ldrex	r1, [r3]
   3a290:	f021 0101 	bic.w	r1, r1, #1
   3a294:	e843 1200 	strex	r2, r1, [r3]
   3a298:	2a00      	cmp	r2, #0
   3a29a:	d1f7      	bne.n	3a28c <att_rsp_sent+0x12>
   3a29c:	f3bf 8f5b 	dmb	ish
	tx_meta_data_free(data);
   3a2a0:	4620      	mov	r0, r4
}
   3a2a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(data);
   3a2a6:	f7f1 bbb9 	b.w	2ba1c <tx_meta_data_free>

0003a2aa <send_err_rsp.part.0>:
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   3a2aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3a2ae:	4688      	mov	r8, r1
   3a2b0:	4617      	mov	r7, r2
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   3a2b2:	2101      	movs	r1, #1
   3a2b4:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   3a2b6:	4605      	mov	r5, r0
   3a2b8:	461e      	mov	r6, r3
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   3a2ba:	f7f1 fed5 	bl	2c068 <bt_att_chan_create_pdu>
	if (!buf) {
   3a2be:	4604      	mov	r4, r0
   3a2c0:	b170      	cbz	r0, 3a2e0 <send_err_rsp.part.0+0x36>
   3a2c2:	2104      	movs	r1, #4
   3a2c4:	3008      	adds	r0, #8
   3a2c6:	f7f4 fbe1 	bl	2ea8c <net_buf_simple_add>
	rsp->request = req;
   3a2ca:	f880 8000 	strb.w	r8, [r0]
	rsp->handle = sys_cpu_to_le16(handle);
   3a2ce:	f8a0 7001 	strh.w	r7, [r0, #1]
	rsp->error = err;
   3a2d2:	70c6      	strb	r6, [r0, #3]
	bt_att_chan_send_rsp(chan, buf);
   3a2d4:	4621      	mov	r1, r4
   3a2d6:	4628      	mov	r0, r5
}
   3a2d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_att_chan_send_rsp(chan, buf);
   3a2dc:	f7ff bdbd 	b.w	39e5a <bt_att_chan_send_rsp>
}
   3a2e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0003a2e4 <att_write_req>:
{
   3a2e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   3a2e6:	460c      	mov	r4, r1
   3a2e8:	4605      	mov	r5, r0
	return net_buf_simple_pull_le16(&buf->b);
   3a2ea:	f101 0008 	add.w	r0, r1, #8
   3a2ee:	f000 fbff 	bl	3aaf0 <net_buf_simple_pull_le16>
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   3a2f2:	89a2      	ldrh	r2, [r4, #12]
   3a2f4:	9201      	str	r2, [sp, #4]
   3a2f6:	68a2      	ldr	r2, [r4, #8]
   3a2f8:	9200      	str	r2, [sp, #0]
   3a2fa:	4603      	mov	r3, r0
   3a2fc:	2213      	movs	r2, #19
   3a2fe:	2112      	movs	r1, #18
   3a300:	4628      	mov	r0, r5
   3a302:	f7f1 ffeb 	bl	2c2dc <att_write_rsp.constprop.0>
}
   3a306:	b003      	add	sp, #12
   3a308:	bd30      	pop	{r4, r5, pc}

0003a30a <att_write_cmd>:
{
   3a30a:	b537      	push	{r0, r1, r2, r4, r5, lr}
   3a30c:	460c      	mov	r4, r1
   3a30e:	4605      	mov	r5, r0
   3a310:	f101 0008 	add.w	r0, r1, #8
   3a314:	f000 fbec 	bl	3aaf0 <net_buf_simple_pull_le16>
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   3a318:	89a2      	ldrh	r2, [r4, #12]
   3a31a:	9201      	str	r2, [sp, #4]
   3a31c:	68a2      	ldr	r2, [r4, #8]
   3a31e:	9200      	str	r2, [sp, #0]
   3a320:	2200      	movs	r2, #0
   3a322:	4603      	mov	r3, r0
   3a324:	4611      	mov	r1, r2
   3a326:	4628      	mov	r0, r5
   3a328:	f7f1 ffd8 	bl	2c2dc <att_write_rsp.constprop.0>
}
   3a32c:	b003      	add	sp, #12
   3a32e:	bd30      	pop	{r4, r5, pc}

0003a330 <att_read_blob_req>:
{
   3a330:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
   3a332:	688a      	ldr	r2, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   3a334:	8813      	ldrh	r3, [r2, #0]
   3a336:	8852      	ldrh	r2, [r2, #2]
   3a338:	9200      	str	r2, [sp, #0]
   3a33a:	210c      	movs	r1, #12
   3a33c:	220d      	movs	r2, #13
   3a33e:	f7f2 f995 	bl	2c66c <att_read_rsp>
}
   3a342:	b003      	add	sp, #12
   3a344:	f85d fb04 	ldr.w	pc, [sp], #4

0003a348 <att_read_req>:
{
   3a348:	b507      	push	{r0, r1, r2, lr}
	handle = sys_le16_to_cpu(req->handle);
   3a34a:	688b      	ldr	r3, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   3a34c:	2200      	movs	r2, #0
   3a34e:	881b      	ldrh	r3, [r3, #0]
   3a350:	9200      	str	r2, [sp, #0]
   3a352:	210a      	movs	r1, #10
   3a354:	220b      	movs	r2, #11
   3a356:	f7f2 f989 	bl	2c66c <att_read_rsp>
}
   3a35a:	b003      	add	sp, #12
   3a35c:	f85d fb04 	ldr.w	pc, [sp], #4

0003a360 <att_mtu_req>:
{
   3a360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3a362:	4605      	mov	r5, r0
	struct bt_conn *conn = chan->att->conn;
   3a364:	f850 2b98 	ldr.w	r2, [r0], #152
{
   3a368:	460b      	mov	r3, r1
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   3a36a:	2103      	movs	r1, #3
	struct bt_conn *conn = chan->att->conn;
   3a36c:	6817      	ldr	r7, [r2, #0]
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   3a36e:	f7ff fc6a 	bl	39c46 <atomic_test_bit>
   3a372:	4604      	mov	r4, r0
   3a374:	b9f8      	cbnz	r0, 3a3b6 <att_mtu_req+0x56>
	mtu_client = sys_le16_to_cpu(req->mtu);
   3a376:	689b      	ldr	r3, [r3, #8]
   3a378:	881e      	ldrh	r6, [r3, #0]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
   3a37a:	2e16      	cmp	r6, #22
   3a37c:	d91d      	bls.n	3a3ba <att_mtu_req+0x5a>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
   3a37e:	4638      	mov	r0, r7
   3a380:	2202      	movs	r2, #2
   3a382:	f7f2 f80f 	bl	2c3a4 <bt_att_create_pdu>
	if (!pdu) {
   3a386:	4607      	mov	r7, r0
   3a388:	b1c8      	cbz	r0, 3a3be <att_mtu_req+0x5e>
	return net_buf_simple_add(&buf->b, len);
   3a38a:	2102      	movs	r1, #2
   3a38c:	3008      	adds	r0, #8
   3a38e:	f7f4 fb7d 	bl	2ea8c <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   3a392:	f06f 0303 	mvn.w	r3, #3
   3a396:	7003      	strb	r3, [r0, #0]
   3a398:	7044      	strb	r4, [r0, #1]
	bt_att_chan_send_rsp(chan, pdu);
   3a39a:	4639      	mov	r1, r7
   3a39c:	4628      	mov	r0, r5
   3a39e:	f7ff fd5c 	bl	39e5a <bt_att_chan_send_rsp>
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   3a3a2:	2efc      	cmp	r6, #252	; 0xfc
   3a3a4:	bf28      	it	cs
   3a3a6:	26fc      	movcs	r6, #252	; 0xfc
	att_chan_mtu_updated(chan);
   3a3a8:	4628      	mov	r0, r5
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   3a3aa:	836e      	strh	r6, [r5, #26]
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   3a3ac:	856e      	strh	r6, [r5, #42]	; 0x2a
	att_chan_mtu_updated(chan);
   3a3ae:	f7ff fcdb 	bl	39d68 <att_chan_mtu_updated>
	return 0;
   3a3b2:	4620      	mov	r0, r4
}
   3a3b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
   3a3b6:	2006      	movs	r0, #6
   3a3b8:	e7fc      	b.n	3a3b4 <att_mtu_req+0x54>
		return BT_ATT_ERR_INVALID_PDU;
   3a3ba:	2004      	movs	r0, #4
   3a3bc:	e7fa      	b.n	3a3b4 <att_mtu_req+0x54>
		return BT_ATT_ERR_UNLIKELY;
   3a3be:	200e      	movs	r0, #14
   3a3c0:	e7f8      	b.n	3a3b4 <att_mtu_req+0x54>

0003a3c2 <bt_att_get_mtu>:
{
   3a3c2:	b508      	push	{r3, lr}
	att = att_get(conn);
   3a3c4:	f7f1 fcb0 	bl	2bd28 <att_get>
	if (!att) {
   3a3c8:	b138      	cbz	r0, 3a3da <bt_att_get_mtu+0x18>
	return list->head;
   3a3ca:	6a80      	ldr	r0, [r0, #40]	; 0x28
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   3a3cc:	b128      	cbz	r0, 3a3da <bt_att_get_mtu+0x18>
	return node->next;
   3a3ce:	6803      	ldr	r3, [r0, #0]
   3a3d0:	b103      	cbz	r3, 3a3d4 <bt_att_get_mtu+0x12>
   3a3d2:	3bf0      	subs	r3, #240	; 0xf0
		if (chan->chan.tx.mtu > mtu) {
   3a3d4:	f830 0cc6 	ldrh.w	r0, [r0, #-198]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   3a3d8:	b903      	cbnz	r3, 3a3dc <bt_att_get_mtu+0x1a>
}
   3a3da:	bd08      	pop	{r3, pc}
   3a3dc:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
   3a3e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
   3a3e2:	4298      	cmp	r0, r3
   3a3e4:	bf38      	it	cc
   3a3e6:	4618      	movcc	r0, r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   3a3e8:	2a00      	cmp	r2, #0
   3a3ea:	d0f6      	beq.n	3a3da <bt_att_get_mtu+0x18>
   3a3ec:	f1a2 03f0 	sub.w	r3, r2, #240	; 0xf0
   3a3f0:	e7f4      	b.n	3a3dc <bt_att_get_mtu+0x1a>

0003a3f2 <att_confirm>:
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   3a3f2:	898a      	ldrh	r2, [r1, #12]
   3a3f4:	6889      	ldr	r1, [r1, #8]
   3a3f6:	2300      	movs	r3, #0
   3a3f8:	f7f2 bae4 	b.w	2c9c4 <att_handle_rsp>

0003a3fc <bt_att_fixed_chan_only>:
#if defined(CONFIG_BT_EATT)
	return bt_eatt_count(conn) == 0;
#else
	return true;
#endif /* CONFIG_BT_EATT */
}
   3a3fc:	2001      	movs	r0, #1
   3a3fe:	4770      	bx	lr

0003a400 <bt_att_clear_out_of_sync_sent>:

void bt_att_clear_out_of_sync_sent(struct bt_conn *conn)
{
   3a400:	b508      	push	{r3, lr}
	struct bt_att *att = att_get(conn);
   3a402:	f7f1 fc91 	bl	2bd28 <att_get>
	struct bt_att_chan *chan;

	if (!att) {
   3a406:	b198      	cbz	r0, 3a430 <bt_att_clear_out_of_sync_sent+0x30>
	return list->head;
   3a408:	6a83      	ldr	r3, [r0, #40]	; 0x28
		return;
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   3a40a:	b18b      	cbz	r3, 3a430 <bt_att_clear_out_of_sync_sent+0x30>
   3a40c:	f3bf 8f5b 	dmb	ish
   3a410:	3bf0      	subs	r3, #240	; 0xf0
   3a412:	f103 0298 	add.w	r2, r3, #152	; 0x98
   3a416:	e852 0f00 	ldrex	r0, [r2]
   3a41a:	f020 0020 	bic.w	r0, r0, #32
   3a41e:	e842 0100 	strex	r1, r0, [r2]
   3a422:	2900      	cmp	r1, #0
   3a424:	d1f7      	bne.n	3a416 <bt_att_clear_out_of_sync_sent+0x16>
   3a426:	f3bf 8f5b 	dmb	ish
	return node->next;
   3a42a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   3a42e:	e7ec      	b.n	3a40a <bt_att_clear_out_of_sync_sent+0xa>
		atomic_clear_bit(chan->flags, ATT_OUT_OF_SYNC_SENT);
	}
}
   3a430:	bd08      	pop	{r3, pc}

0003a432 <bt_att_out_of_sync_sent_on_fixed>:

bool bt_att_out_of_sync_sent_on_fixed(struct bt_conn *conn)
{
   3a432:	b508      	push	{r3, lr}
	struct bt_l2cap_chan *l2cap_chan;
	struct bt_att_chan *att_chan;

	l2cap_chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   3a434:	2104      	movs	r1, #4
   3a436:	f7ff fbd7 	bl	39be8 <bt_l2cap_le_lookup_rx_cid>
	if (!l2cap_chan) {
   3a43a:	b128      	cbz	r0, 3a448 <bt_att_out_of_sync_sent_on_fixed+0x16>
		return false;
	}

	att_chan = ATT_CHAN(l2cap_chan);
	return atomic_test_bit(att_chan->flags, ATT_OUT_OF_SYNC_SENT);
}
   3a43c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return atomic_test_bit(att_chan->flags, ATT_OUT_OF_SYNC_SENT);
   3a440:	2105      	movs	r1, #5
   3a442:	3094      	adds	r0, #148	; 0x94
   3a444:	f7ff bbff 	b.w	39c46 <atomic_test_bit>
}
   3a448:	bd08      	pop	{r3, pc}

0003a44a <bt_att_set_tx_meta_data>:

void bt_att_set_tx_meta_data(struct net_buf *buf, bt_gatt_complete_func_t func, void *user_data,
			     enum bt_att_chan_opt chan_opt)
{
	struct bt_att_tx_meta_data *data = bt_att_tx_meta_data(buf);
   3a44a:	6940      	ldr	r0, [r0, #20]

	data->func = func;
	data->user_data = user_data;
   3a44c:	e9c0 1202 	strd	r1, r2, [r0, #8]
	data->attr_count = 1;
   3a450:	2201      	movs	r2, #1
   3a452:	8082      	strh	r2, [r0, #4]
	data->chan_opt = chan_opt;
   3a454:	7403      	strb	r3, [r0, #16]
}
   3a456:	4770      	bx	lr

0003a458 <gatt_ccc_changed>:
{
   3a458:	460b      	mov	r3, r1
		if (ccc->cfg[i].value > value) {
   3a45a:	8909      	ldrh	r1, [r1, #8]
	if (value != ccc->value) {
   3a45c:	895a      	ldrh	r2, [r3, #10]
   3a45e:	428a      	cmp	r2, r1
   3a460:	d003      	beq.n	3a46a <gatt_ccc_changed+0x12>
		ccc->value = value;
   3a462:	8159      	strh	r1, [r3, #10]
		if (ccc->cfg_changed) {
   3a464:	68db      	ldr	r3, [r3, #12]
   3a466:	b103      	cbz	r3, 3a46a <gatt_ccc_changed+0x12>
			ccc->cfg_changed(attr, value);
   3a468:	4718      	bx	r3
}
   3a46a:	4770      	bx	lr

0003a46c <gatt_indicate_rsp>:
{
   3a46c:	b510      	push	{r4, lr}
   3a46e:	9c02      	ldr	r4, [sp, #8]
	if (params->func) {
   3a470:	68a3      	ldr	r3, [r4, #8]
{
   3a472:	460a      	mov	r2, r1
	if (params->func) {
   3a474:	b10b      	cbz	r3, 3a47a <gatt_indicate_rsp+0xe>
		params->func(conn, params, err);
   3a476:	4621      	mov	r1, r4
   3a478:	4798      	blx	r3
	params->_ref--;
   3a47a:	7da3      	ldrb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   3a47c:	68e2      	ldr	r2, [r4, #12]
	params->_ref--;
   3a47e:	3b01      	subs	r3, #1
   3a480:	b2db      	uxtb	r3, r3
   3a482:	75a3      	strb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   3a484:	b122      	cbz	r2, 3a490 <gatt_indicate_rsp+0x24>
   3a486:	b91b      	cbnz	r3, 3a490 <gatt_indicate_rsp+0x24>
		params->destroy(params);
   3a488:	4620      	mov	r0, r4
}
   3a48a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		params->destroy(params);
   3a48e:	4710      	bx	r2
}
   3a490:	bd10      	pop	{r4, pc}

0003a492 <match_uuid>:
	data->attr = attr;
   3a492:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   3a494:	8091      	strh	r1, [r2, #4]
}
   3a496:	2000      	movs	r0, #0
   3a498:	4770      	bx	lr

0003a49a <gen_hash_m>:
{
   3a49a:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->uuid->type != BT_UUID_TYPE_16)
   3a49c:	6807      	ldr	r7, [r0, #0]
   3a49e:	783d      	ldrb	r5, [r7, #0]
{
   3a4a0:	b089      	sub	sp, #36	; 0x24
   3a4a2:	4606      	mov	r6, r0
   3a4a4:	4614      	mov	r4, r2
	if (attr->uuid->type != BT_UUID_TYPE_16)
   3a4a6:	b9dd      	cbnz	r5, 3a4e0 <gen_hash_m+0x46>
	switch (u16->val) {
   3a4a8:	887b      	ldrh	r3, [r7, #2]
   3a4aa:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   3a4ae:	d004      	beq.n	3a4ba <gen_hash_m+0x20>
   3a4b0:	d810      	bhi.n	3a4d4 <gen_hash_m+0x3a>
   3a4b2:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   3a4b6:	2b03      	cmp	r3, #3
   3a4b8:	d812      	bhi.n	3a4e0 <gen_hash_m+0x46>
		value = sys_cpu_to_le16(handle);
   3a4ba:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   3a4be:	2202      	movs	r2, #2
   3a4c0:	f10d 010a 	add.w	r1, sp, #10
   3a4c4:	4620      	mov	r0, r4
   3a4c6:	f7fe fe75 	bl	391b4 <tc_cmac_update>
   3a4ca:	b968      	cbnz	r0, 3a4e8 <gen_hash_m+0x4e>
			return BT_GATT_ITER_STOP;
   3a4cc:	f06f 0215 	mvn.w	r2, #21
			state->err = -EINVAL;
   3a4d0:	65a2      	str	r2, [r4, #88]	; 0x58
   3a4d2:	e006      	b.n	3a4e2 <gen_hash_m+0x48>
	switch (u16->val) {
   3a4d4:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   3a4d8:	33ff      	adds	r3, #255	; 0xff
   3a4da:	b29b      	uxth	r3, r3
   3a4dc:	2b04      	cmp	r3, #4
   3a4de:	d91e      	bls.n	3a51e <gen_hash_m+0x84>
			return BT_GATT_ITER_STOP;
   3a4e0:	2501      	movs	r5, #1
}
   3a4e2:	4628      	mov	r0, r5
   3a4e4:	b009      	add	sp, #36	; 0x24
   3a4e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		value = sys_cpu_to_le16(u16->val);
   3a4e8:	887b      	ldrh	r3, [r7, #2]
   3a4ea:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   3a4ee:	2202      	movs	r2, #2
   3a4f0:	f10d 010a 	add.w	r1, sp, #10
   3a4f4:	4620      	mov	r0, r4
   3a4f6:	f7fe fe5d 	bl	391b4 <tc_cmac_update>
   3a4fa:	2800      	cmp	r0, #0
   3a4fc:	d0e6      	beq.n	3a4cc <gen_hash_m+0x32>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   3a4fe:	2000      	movs	r0, #0
   3a500:	9000      	str	r0, [sp, #0]
   3a502:	aa03      	add	r2, sp, #12
   3a504:	6877      	ldr	r7, [r6, #4]
   3a506:	2313      	movs	r3, #19
   3a508:	4631      	mov	r1, r6
   3a50a:	47b8      	blx	r7
		if (len < 0) {
   3a50c:	1e02      	subs	r2, r0, #0
   3a50e:	dbdf      	blt.n	3a4d0 <gen_hash_m+0x36>
		if (tc_cmac_update(&state->state, data, len) ==
   3a510:	a903      	add	r1, sp, #12
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   3a512:	4620      	mov	r0, r4
   3a514:	f7fe fe4e 	bl	391b4 <tc_cmac_update>
   3a518:	2800      	cmp	r0, #0
   3a51a:	d1e1      	bne.n	3a4e0 <gen_hash_m+0x46>
   3a51c:	e7d6      	b.n	3a4cc <gen_hash_m+0x32>
		value = sys_cpu_to_le16(handle);
   3a51e:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   3a522:	2202      	movs	r2, #2
   3a524:	f10d 010a 	add.w	r1, sp, #10
   3a528:	4620      	mov	r0, r4
   3a52a:	f7fe fe43 	bl	391b4 <tc_cmac_update>
   3a52e:	2800      	cmp	r0, #0
   3a530:	d0cc      	beq.n	3a4cc <gen_hash_m+0x32>
		value = sys_cpu_to_le16(u16->val);
   3a532:	887b      	ldrh	r3, [r7, #2]
   3a534:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   3a538:	2202      	movs	r2, #2
   3a53a:	f10d 010a 	add.w	r1, sp, #10
   3a53e:	e7e8      	b.n	3a512 <gen_hash_m+0x78>

0003a540 <bt_addr_le_eq>:
{
   3a540:	b508      	push	{r3, lr}
	return memcmp(a, b, sizeof(*a));
   3a542:	2207      	movs	r2, #7
   3a544:	f7fe ff0d 	bl	39362 <memcmp>
}
   3a548:	fab0 f080 	clz	r0, r0
   3a54c:	0940      	lsrs	r0, r0, #5
   3a54e:	bd08      	pop	{r3, pc}

0003a550 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   3a550:	f3bf 8f5b 	dmb	ish
   3a554:	6800      	ldr	r0, [r0, #0]
   3a556:	f3bf 8f5b 	dmb	ish
}
   3a55a:	4770      	bx	lr

0003a55c <atomic_or>:
{
   3a55c:	b510      	push	{r4, lr}
   3a55e:	4603      	mov	r3, r0
}
   3a560:	f3bf 8f5b 	dmb	ish
   3a564:	e853 0f00 	ldrex	r0, [r3]
   3a568:	ea40 0201 	orr.w	r2, r0, r1
   3a56c:	e843 2400 	strex	r4, r2, [r3]
   3a570:	2c00      	cmp	r4, #0
   3a572:	d1f7      	bne.n	3a564 <atomic_or+0x8>
   3a574:	f3bf 8f5b 	dmb	ish
   3a578:	bd10      	pop	{r4, pc}

0003a57a <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   3a57a:	2207      	movs	r2, #7
   3a57c:	f7fe bf18 	b.w	393b0 <memcpy>

0003a580 <atomic_and>:
{
   3a580:	b510      	push	{r4, lr}
   3a582:	4603      	mov	r3, r0
}
   3a584:	f3bf 8f5b 	dmb	ish
   3a588:	e853 0f00 	ldrex	r0, [r3]
   3a58c:	ea00 0201 	and.w	r2, r0, r1
   3a590:	e843 2400 	strex	r4, r2, [r3]
   3a594:	2c00      	cmp	r4, #0
   3a596:	d1f7      	bne.n	3a588 <atomic_and+0x8>
   3a598:	f3bf 8f5b 	dmb	ish
   3a59c:	bd10      	pop	{r4, pc}

0003a59e <gatt_foreach_iter>:
{
   3a59e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (handle > end_handle) {
   3a5a0:	4299      	cmp	r1, r3
{
   3a5a2:	4604      	mov	r4, r0
   3a5a4:	9e08      	ldr	r6, [sp, #32]
   3a5a6:	e9dd 0706 	ldrd	r0, r7, [sp, #24]
   3a5aa:	460d      	mov	r5, r1
	if (handle > end_handle) {
   3a5ac:	d901      	bls.n	3a5b2 <gatt_foreach_iter+0x14>
		return BT_GATT_ITER_STOP;
   3a5ae:	2000      	movs	r0, #0
}
   3a5b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (handle < start_handle) {
   3a5b2:	4291      	cmp	r1, r2
   3a5b4:	d201      	bcs.n	3a5ba <gatt_foreach_iter+0x1c>
		return BT_GATT_ITER_CONTINUE;
   3a5b6:	2001      	movs	r0, #1
   3a5b8:	e7fa      	b.n	3a5b0 <gatt_foreach_iter+0x12>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   3a5ba:	b960      	cbnz	r0, 3a5d6 <gatt_foreach_iter+0x38>
	if (attr_data && attr_data != attr->user_data) {
   3a5bc:	b98f      	cbnz	r7, 3a5e2 <gatt_foreach_iter+0x44>
	*num_matches -= 1;
   3a5be:	8833      	ldrh	r3, [r6, #0]
	result = func(attr, handle, user_data);
   3a5c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
	*num_matches -= 1;
   3a5c2:	3b01      	subs	r3, #1
   3a5c4:	8033      	strh	r3, [r6, #0]
	result = func(attr, handle, user_data);
   3a5c6:	4629      	mov	r1, r5
   3a5c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   3a5ca:	4620      	mov	r0, r4
   3a5cc:	4798      	blx	r3
	if (!*num_matches) {
   3a5ce:	8833      	ldrh	r3, [r6, #0]
   3a5d0:	2b00      	cmp	r3, #0
   3a5d2:	d1ed      	bne.n	3a5b0 <gatt_foreach_iter+0x12>
   3a5d4:	e7eb      	b.n	3a5ae <gatt_foreach_iter+0x10>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   3a5d6:	6821      	ldr	r1, [r4, #0]
   3a5d8:	f7fe ff13 	bl	39402 <bt_uuid_cmp>
   3a5dc:	2800      	cmp	r0, #0
   3a5de:	d0ed      	beq.n	3a5bc <gatt_foreach_iter+0x1e>
   3a5e0:	e7e9      	b.n	3a5b6 <gatt_foreach_iter+0x18>
	if (attr_data && attr_data != attr->user_data) {
   3a5e2:	68e3      	ldr	r3, [r4, #12]
   3a5e4:	42bb      	cmp	r3, r7
   3a5e6:	d1e6      	bne.n	3a5b6 <gatt_foreach_iter+0x18>
   3a5e8:	e7e9      	b.n	3a5be <gatt_foreach_iter+0x20>

0003a5ea <z_log_msg_static_create.constprop.0>:
   3a5ea:	2300      	movs	r3, #0
   3a5ec:	f7eb bdde 	b.w	261ac <z_impl_z_log_msg_static_create>

0003a5f0 <find_next>:
static uint8_t find_next(const struct bt_gatt_attr *attr, uint16_t handle,
   3a5f0:	6010      	str	r0, [r2, #0]
   3a5f2:	2000      	movs	r0, #0
   3a5f4:	4770      	bx	lr

0003a5f6 <sc_clear>:
{
   3a5f6:	b570      	push	{r4, r5, r6, lr}
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   3a5f8:	f100 0690 	add.w	r6, r0, #144	; 0x90
{
   3a5fc:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   3a5fe:	4631      	mov	r1, r6
   3a600:	7a00      	ldrb	r0, [r0, #8]
   3a602:	f7ff f81c 	bl	3963e <bt_addr_le_is_bonded>
   3a606:	7a20      	ldrb	r0, [r4, #8]
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
   3a608:	4631      	mov	r1, r6
   3a60a:	f7f2 fb47 	bl	2cc9c <find_sc_cfg>
	if (!cfg) {
   3a60e:	b128      	cbz	r0, 3a61c <sc_clear+0x26>
}
   3a610:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	memset(cfg, 0, sizeof(*cfg));
   3a614:	220c      	movs	r2, #12
   3a616:	2100      	movs	r1, #0
   3a618:	f7fe bed5 	b.w	393c6 <memset>
}
   3a61c:	bd70      	pop	{r4, r5, r6, pc}

0003a61e <sc_ccc_cfg_write>:
	if (value == BT_GATT_CCC_INDICATE) {
   3a61e:	2a02      	cmp	r2, #2
{
   3a620:	b510      	push	{r4, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   3a622:	d108      	bne.n	3a636 <sc_ccc_cfg_write+0x18>
		sc_save(conn->id, &conn->le.dst, 0, 0);
   3a624:	2300      	movs	r3, #0
   3a626:	f100 0190 	add.w	r1, r0, #144	; 0x90
   3a62a:	461a      	mov	r2, r3
   3a62c:	7a00      	ldrb	r0, [r0, #8]
   3a62e:	f7f2 fb93 	bl	2cd58 <sc_save>
}
   3a632:	2002      	movs	r0, #2
   3a634:	bd10      	pop	{r4, pc}
		sc_clear(conn);
   3a636:	f7ff ffde 	bl	3a5f6 <sc_clear>
   3a63a:	e7fa      	b.n	3a632 <sc_ccc_cfg_write+0x14>

0003a63c <read_appearance>:
{
   3a63c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   3a63e:	4615      	mov	r5, r2
   3a640:	f8bd 6020 	ldrh.w	r6, [sp, #32]
   3a644:	461f      	mov	r7, r3
	uint16_t appearance = sys_cpu_to_le16(bt_get_appearance());
   3a646:	f7fe fff8 	bl	3963a <bt_get_appearance>
	if (offset > value_len) {
   3a64a:	2e02      	cmp	r6, #2
	uint16_t appearance = sys_cpu_to_le16(bt_get_appearance());
   3a64c:	f8ad 0006 	strh.w	r0, [sp, #6]
	if (offset > value_len) {
   3a650:	d80e      	bhi.n	3a670 <read_appearance+0x34>
	len = MIN(buf_len, value_len - offset);
   3a652:	f1c6 0402 	rsb	r4, r6, #2
   3a656:	42bc      	cmp	r4, r7
   3a658:	bfa8      	it	ge
   3a65a:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   3a65c:	f10d 0306 	add.w	r3, sp, #6
   3a660:	4622      	mov	r2, r4
   3a662:	1999      	adds	r1, r3, r6
   3a664:	4628      	mov	r0, r5
   3a666:	f7fe fea3 	bl	393b0 <memcpy>
}
   3a66a:	4620      	mov	r0, r4
   3a66c:	b003      	add	sp, #12
   3a66e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   3a670:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   3a674:	e7f9      	b.n	3a66a <read_appearance+0x2e>

0003a676 <read_name>:
{
   3a676:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3a67a:	4698      	mov	r8, r3
   3a67c:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   3a680:	4615      	mov	r5, r2
	const char *name = bt_get_name();
   3a682:	f7ef f857 	bl	29734 <bt_get_name>
   3a686:	4607      	mov	r7, r0
				 strlen(name));
   3a688:	f7fe fe4f 	bl	3932a <strlen>
	if (offset > value_len) {
   3a68c:	b283      	uxth	r3, r0
   3a68e:	42b3      	cmp	r3, r6
   3a690:	d30c      	bcc.n	3a6ac <read_name+0x36>
	len = MIN(buf_len, value_len - offset);
   3a692:	1b9c      	subs	r4, r3, r6
   3a694:	4544      	cmp	r4, r8
   3a696:	bfa8      	it	ge
   3a698:	4644      	movge	r4, r8
   3a69a:	b2a4      	uxth	r4, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   3a69c:	4622      	mov	r2, r4
   3a69e:	19b9      	adds	r1, r7, r6
   3a6a0:	4628      	mov	r0, r5
   3a6a2:	f7fe fe85 	bl	393b0 <memcpy>
}
   3a6a6:	4620      	mov	r0, r4
   3a6a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   3a6ac:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   3a6b0:	e7f9      	b.n	3a6a6 <read_name+0x30>

0003a6b2 <cf_read>:
{
   3a6b2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   3a6b4:	461f      	mov	r7, r3
	uint8_t data[1] = {};
   3a6b6:	2300      	movs	r3, #0
{
   3a6b8:	f8bd 6020 	ldrh.w	r6, [sp, #32]
	uint8_t data[1] = {};
   3a6bc:	f88d 3004 	strb.w	r3, [sp, #4]
{
   3a6c0:	4615      	mov	r5, r2
	cfg = find_cf_cfg(conn);
   3a6c2:	f7f2 fad3 	bl	2cc6c <find_cf_cfg>
	if (cfg) {
   3a6c6:	b128      	cbz	r0, 3a6d4 <cf_read+0x22>
		memcpy(data, cfg->data, sizeof(data));
   3a6c8:	f100 0108 	add.w	r1, r0, #8
   3a6cc:	2201      	movs	r2, #1
   3a6ce:	a801      	add	r0, sp, #4
   3a6d0:	f7fe fe6e 	bl	393b0 <memcpy>
	if (offset > value_len) {
   3a6d4:	2e01      	cmp	r6, #1
   3a6d6:	d80d      	bhi.n	3a6f4 <cf_read+0x42>
	len = MIN(buf_len, value_len - offset);
   3a6d8:	f1c6 0401 	rsb	r4, r6, #1
   3a6dc:	42bc      	cmp	r4, r7
   3a6de:	bfa8      	it	ge
   3a6e0:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   3a6e2:	ab01      	add	r3, sp, #4
   3a6e4:	4622      	mov	r2, r4
   3a6e6:	1999      	adds	r1, r3, r6
   3a6e8:	4628      	mov	r0, r5
   3a6ea:	f7fe fe61 	bl	393b0 <memcpy>
}
   3a6ee:	4620      	mov	r0, r4
   3a6f0:	b003      	add	sp, #12
   3a6f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   3a6f4:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   3a6f8:	e7f9      	b.n	3a6ee <cf_read+0x3c>

0003a6fa <bt_gatt_attr_read_service>:
{
   3a6fa:	b513      	push	{r0, r1, r4, lr}
	struct bt_uuid *uuid = attr->user_data;
   3a6fc:	68c9      	ldr	r1, [r1, #12]
{
   3a6fe:	4610      	mov	r0, r2
	if (uuid->type == BT_UUID_TYPE_16) {
   3a700:	780a      	ldrb	r2, [r1, #0]
{
   3a702:	461c      	mov	r4, r3
   3a704:	f8bd 3010 	ldrh.w	r3, [sp, #16]
	if (uuid->type == BT_UUID_TYPE_16) {
   3a708:	b992      	cbnz	r2, 3a730 <bt_gatt_attr_read_service+0x36>
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   3a70a:	884a      	ldrh	r2, [r1, #2]
   3a70c:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
   3a710:	2b02      	cmp	r3, #2
   3a712:	d818      	bhi.n	3a746 <bt_gatt_attr_read_service+0x4c>
	len = MIN(buf_len, value_len - offset);
   3a714:	f1c3 0202 	rsb	r2, r3, #2
   3a718:	4294      	cmp	r4, r2
   3a71a:	bfa8      	it	ge
   3a71c:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   3a71e:	4622      	mov	r2, r4
   3a720:	f10d 0106 	add.w	r1, sp, #6
   3a724:	4419      	add	r1, r3
   3a726:	f7fe fe43 	bl	393b0 <memcpy>
}
   3a72a:	4620      	mov	r0, r4
   3a72c:	b002      	add	sp, #8
   3a72e:	bd10      	pop	{r4, pc}
	if (offset > value_len) {
   3a730:	2b10      	cmp	r3, #16
				 BT_UUID_128(uuid)->val, 16);
   3a732:	f101 0101 	add.w	r1, r1, #1
	if (offset > value_len) {
   3a736:	d806      	bhi.n	3a746 <bt_gatt_attr_read_service+0x4c>
	len = MIN(buf_len, value_len - offset);
   3a738:	f1c3 0210 	rsb	r2, r3, #16
   3a73c:	4294      	cmp	r4, r2
   3a73e:	bfa8      	it	ge
   3a740:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   3a742:	4622      	mov	r2, r4
   3a744:	e7ee      	b.n	3a724 <bt_gatt_attr_read_service+0x2a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   3a746:	f06f 0406 	mvn.w	r4, #6
   3a74a:	e7ee      	b.n	3a72a <bt_gatt_attr_read_service+0x30>

0003a74c <bt_gatt_attr_read_ccc>:
{
   3a74c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	cfg = find_ccc_cfg(conn, ccc);
   3a74e:	68c9      	ldr	r1, [r1, #12]
{
   3a750:	f8bd 6020 	ldrh.w	r6, [sp, #32]
   3a754:	4615      	mov	r5, r2
   3a756:	461f      	mov	r7, r3
	cfg = find_ccc_cfg(conn, ccc);
   3a758:	f7f2 fab0 	bl	2ccbc <find_ccc_cfg>
	if (cfg) {
   3a75c:	b100      	cbz	r0, 3a760 <bt_gatt_attr_read_ccc+0x14>
		value = sys_cpu_to_le16(cfg->value);
   3a75e:	8900      	ldrh	r0, [r0, #8]
   3a760:	f8ad 0006 	strh.w	r0, [sp, #6]
	if (offset > value_len) {
   3a764:	2e02      	cmp	r6, #2
   3a766:	d80e      	bhi.n	3a786 <bt_gatt_attr_read_ccc+0x3a>
	len = MIN(buf_len, value_len - offset);
   3a768:	f1c6 0402 	rsb	r4, r6, #2
   3a76c:	42bc      	cmp	r4, r7
   3a76e:	bfa8      	it	ge
   3a770:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   3a772:	f10d 0306 	add.w	r3, sp, #6
   3a776:	4622      	mov	r2, r4
   3a778:	1999      	adds	r1, r3, r6
   3a77a:	4628      	mov	r0, r5
   3a77c:	f7fe fe18 	bl	393b0 <memcpy>
}
   3a780:	4620      	mov	r0, r4
   3a782:	b003      	add	sp, #12
   3a784:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   3a786:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   3a78a:	e7f9      	b.n	3a780 <bt_gatt_attr_read_ccc+0x34>

0003a78c <sc_restore_rsp>:
{
   3a78c:	b538      	push	{r3, r4, r5, lr}
   3a78e:	4604      	mov	r4, r0
   3a790:	4615      	mov	r5, r2
	if (bt_att_fixed_chan_only(conn)) {
   3a792:	f7ff fe33 	bl	3a3fc <bt_att_fixed_chan_only>
   3a796:	b150      	cbz	r0, 3a7ae <sc_restore_rsp+0x22>
		cfg = find_cf_cfg(conn);
   3a798:	4620      	mov	r0, r4
   3a79a:	f7f2 fa67 	bl	2cc6c <find_cf_cfg>
		if (cfg && CF_ROBUST_CACHING(cfg)) {
   3a79e:	b130      	cbz	r0, 3a7ae <sc_restore_rsp+0x22>
   3a7a0:	7a03      	ldrb	r3, [r0, #8]
   3a7a2:	07db      	lsls	r3, r3, #31
   3a7a4:	d503      	bpl.n	3a7ae <sc_restore_rsp+0x22>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   3a7a6:	2101      	movs	r1, #1
   3a7a8:	300c      	adds	r0, #12
   3a7aa:	f7ff fed7 	bl	3a55c <atomic_or>
	if (!err && IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED)) {
   3a7ae:	b965      	cbnz	r5, 3a7ca <sc_restore_rsp+0x3e>
		struct gatt_sc_cfg *sc_cfg = find_sc_cfg(conn->id, &conn->le.dst);
   3a7b0:	7a20      	ldrb	r0, [r4, #8]
   3a7b2:	f104 0190 	add.w	r1, r4, #144	; 0x90
   3a7b6:	f7f2 fa71 	bl	2cc9c <find_sc_cfg>
		if (sc_cfg) {
   3a7ba:	b130      	cbz	r0, 3a7ca <sc_restore_rsp+0x3e>
	memset(&cfg->data, 0, sizeof(cfg->data));
   3a7bc:	4629      	mov	r1, r5
   3a7be:	2204      	movs	r2, #4
}
   3a7c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	memset(&cfg->data, 0, sizeof(cfg->data));
   3a7c4:	3008      	adds	r0, #8
   3a7c6:	f7fe bdfe 	b.w	393c6 <memset>
}
   3a7ca:	bd38      	pop	{r3, r4, r5, pc}

0003a7cc <bt_gatt_attr_read>:
{
   3a7cc:	b510      	push	{r4, lr}
   3a7ce:	f8bd 1008 	ldrh.w	r1, [sp, #8]
   3a7d2:	f8bd 4010 	ldrh.w	r4, [sp, #16]
	if (offset > value_len) {
   3a7d6:	42a1      	cmp	r1, r4
{
   3a7d8:	4610      	mov	r0, r2
	if (offset > value_len) {
   3a7da:	d80b      	bhi.n	3a7f4 <bt_gatt_attr_read+0x28>
	len = MIN(buf_len, value_len - offset);
   3a7dc:	1a64      	subs	r4, r4, r1
   3a7de:	429c      	cmp	r4, r3
   3a7e0:	bfa8      	it	ge
   3a7e2:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   3a7e4:	9b03      	ldr	r3, [sp, #12]
   3a7e6:	b2a4      	uxth	r4, r4
   3a7e8:	4622      	mov	r2, r4
   3a7ea:	4419      	add	r1, r3
   3a7ec:	f7fe fde0 	bl	393b0 <memcpy>
}
   3a7f0:	4620      	mov	r0, r4
   3a7f2:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   3a7f4:	f06f 0406 	mvn.w	r4, #6
   3a7f8:	e7fa      	b.n	3a7f0 <bt_gatt_attr_read+0x24>

0003a7fa <bt_gatt_attr_value_handle>:
{
   3a7fa:	b513      	push	{r0, r1, r4, lr}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   3a7fc:	4604      	mov	r4, r0
   3a7fe:	b910      	cbnz	r0, 3a806 <bt_gatt_attr_value_handle+0xc>
	uint16_t handle = 0;
   3a800:	2000      	movs	r0, #0
}
   3a802:	b002      	add	sp, #8
   3a804:	bd10      	pop	{r4, pc}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   3a806:	2300      	movs	r3, #0
   3a808:	f88d 3004 	strb.w	r3, [sp, #4]
   3a80c:	6800      	ldr	r0, [r0, #0]
   3a80e:	f642 0303 	movw	r3, #10243	; 0x2803
   3a812:	a901      	add	r1, sp, #4
   3a814:	f8ad 3006 	strh.w	r3, [sp, #6]
   3a818:	f7fe fdf3 	bl	39402 <bt_uuid_cmp>
   3a81c:	2800      	cmp	r0, #0
   3a81e:	d1ef      	bne.n	3a800 <bt_gatt_attr_value_handle+0x6>
		handle = chrc->value_handle;
   3a820:	68e3      	ldr	r3, [r4, #12]
   3a822:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
   3a824:	2800      	cmp	r0, #0
   3a826:	d1ec      	bne.n	3a802 <bt_gatt_attr_value_handle+0x8>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
   3a828:	4620      	mov	r0, r4
   3a82a:	f7f2 fc75 	bl	2d118 <bt_gatt_attr_get_handle>
   3a82e:	3001      	adds	r0, #1
   3a830:	b280      	uxth	r0, r0
	return handle;
   3a832:	e7e6      	b.n	3a802 <bt_gatt_attr_value_handle+0x8>

0003a834 <bt_gatt_attr_read_chrc>:
{
   3a834:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
   3a836:	68cc      	ldr	r4, [r1, #12]
{
   3a838:	b087      	sub	sp, #28
   3a83a:	4608      	mov	r0, r1
   3a83c:	461f      	mov	r7, r3
	pdu.properties = chrc->properties;
   3a83e:	79a3      	ldrb	r3, [r4, #6]
   3a840:	f88d 3004 	strb.w	r3, [sp, #4]
{
   3a844:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
   3a848:	4615      	mov	r5, r2
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   3a84a:	f7ff ffd6 	bl	3a7fa <bt_gatt_attr_value_handle>
   3a84e:	f8ad 0005 	strh.w	r0, [sp, #5]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   3a852:	6821      	ldr	r1, [r4, #0]
   3a854:	780b      	ldrb	r3, [r1, #0]
   3a856:	b99b      	cbnz	r3, 3a880 <bt_gatt_attr_read_chrc+0x4c>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   3a858:	884b      	ldrh	r3, [r1, #2]
   3a85a:	f8ad 3007 	strh.w	r3, [sp, #7]
		value_len += 2U;
   3a85e:	2405      	movs	r4, #5
	if (offset > value_len) {
   3a860:	42b4      	cmp	r4, r6
   3a862:	d315      	bcc.n	3a890 <bt_gatt_attr_read_chrc+0x5c>
	len = MIN(buf_len, value_len - offset);
   3a864:	1ba4      	subs	r4, r4, r6
   3a866:	42bc      	cmp	r4, r7
   3a868:	bfa8      	it	ge
   3a86a:	463c      	movge	r4, r7
   3a86c:	b2a4      	uxth	r4, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   3a86e:	ab01      	add	r3, sp, #4
   3a870:	4622      	mov	r2, r4
   3a872:	1999      	adds	r1, r3, r6
   3a874:	4628      	mov	r0, r5
   3a876:	f7fe fd9b 	bl	393b0 <memcpy>
}
   3a87a:	4620      	mov	r0, r4
   3a87c:	b007      	add	sp, #28
   3a87e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   3a880:	2210      	movs	r2, #16
   3a882:	3101      	adds	r1, #1
   3a884:	f10d 0007 	add.w	r0, sp, #7
   3a888:	f7fe fd92 	bl	393b0 <memcpy>
		value_len += 16U;
   3a88c:	2413      	movs	r4, #19
   3a88e:	e7e7      	b.n	3a860 <bt_gatt_attr_read_chrc+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   3a890:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   3a894:	e7f1      	b.n	3a87a <bt_gatt_attr_read_chrc+0x46>

0003a896 <bt_gatt_foreach_attr>:
{
   3a896:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   3a898:	e9cd 2301 	strd	r2, r3, [sp, #4]
   3a89c:	2300      	movs	r3, #0
   3a89e:	9300      	str	r3, [sp, #0]
   3a8a0:	461a      	mov	r2, r3
   3a8a2:	f7f2 fc79 	bl	2d198 <bt_gatt_foreach_attr_type>
}
   3a8a6:	b005      	add	sp, #20
   3a8a8:	f85d fb04 	ldr.w	pc, [sp], #4

0003a8ac <db_hash_process>:
	db_hash_gen(true);
   3a8ac:	f7f2 bcfe 	b.w	2d2ac <db_hash_gen.constprop.0>

0003a8b0 <bt_gatt_get_mtu>:
	return bt_att_get_mtu(conn);
   3a8b0:	f7ff bd87 	b.w	3a3c2 <bt_att_get_mtu>

0003a8b4 <bt_gatt_check_perm>:
{
   3a8b4:	b510      	push	{r4, lr}
	if ((mask & BT_GATT_PERM_READ) &&
   3a8b6:	07d4      	lsls	r4, r2, #31
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   3a8b8:	8a4b      	ldrh	r3, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
   3a8ba:	d504      	bpl.n	3a8c6 <bt_gatt_check_perm+0x12>
   3a8bc:	f013 0f95 	tst.w	r3, #149	; 0x95
   3a8c0:	d01d      	beq.n	3a8fe <bt_gatt_check_perm+0x4a>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   3a8c2:	684c      	ldr	r4, [r1, #4]
   3a8c4:	b1dc      	cbz	r4, 3a8fe <bt_gatt_check_perm+0x4a>
	if ((mask & BT_GATT_PERM_WRITE) &&
   3a8c6:	0794      	lsls	r4, r2, #30
   3a8c8:	d504      	bpl.n	3a8d4 <bt_gatt_check_perm+0x20>
   3a8ca:	f413 7f95 	tst.w	r3, #298	; 0x12a
   3a8ce:	d018      	beq.n	3a902 <bt_gatt_check_perm+0x4e>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   3a8d0:	6889      	ldr	r1, [r1, #8]
   3a8d2:	b1b1      	cbz	r1, 3a902 <bt_gatt_check_perm+0x4e>
	mask &= attr->perm;
   3a8d4:	ea02 0403 	and.w	r4, r2, r3
	if (mask & BT_GATT_PERM_LESC_MASK) {
   3a8d8:	f414 7fc0 	tst.w	r4, #384	; 0x180
   3a8dc:	d001      	beq.n	3a8e2 <bt_gatt_check_perm+0x2e>
			return BT_ATT_ERR_AUTHENTICATION;
   3a8de:	2005      	movs	r0, #5
}
   3a8e0:	bd10      	pop	{r4, pc}
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   3a8e2:	f014 0f30 	tst.w	r4, #48	; 0x30
   3a8e6:	d105      	bne.n	3a8f4 <bt_gatt_check_perm+0x40>
	return 0;
   3a8e8:	f014 0f0c 	tst.w	r4, #12
   3a8ec:	bf14      	ite	ne
   3a8ee:	200f      	movne	r0, #15
   3a8f0:	2000      	moveq	r0, #0
   3a8f2:	e7f5      	b.n	3a8e0 <bt_gatt_check_perm+0x2c>
		if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   3a8f4:	f7ff f8c5 	bl	39a82 <bt_conn_get_security>
   3a8f8:	2802      	cmp	r0, #2
   3a8fa:	d8f5      	bhi.n	3a8e8 <bt_gatt_check_perm+0x34>
   3a8fc:	e7ef      	b.n	3a8de <bt_gatt_check_perm+0x2a>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   3a8fe:	2002      	movs	r0, #2
   3a900:	e7ee      	b.n	3a8e0 <bt_gatt_check_perm+0x2c>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   3a902:	2003      	movs	r0, #3
   3a904:	e7ec      	b.n	3a8e0 <bt_gatt_check_perm+0x2c>

0003a906 <bt_gatt_change_aware>:
{
   3a906:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3a908:	4605      	mov	r5, r0
   3a90a:	460f      	mov	r7, r1
	cfg = find_cf_cfg(conn);
   3a90c:	f7f2 f9ae 	bl	2cc6c <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   3a910:	b1d0      	cbz	r0, 3a948 <bt_gatt_change_aware+0x42>
   3a912:	7a03      	ldrb	r3, [r0, #8]
   3a914:	07db      	lsls	r3, r3, #31
   3a916:	d517      	bpl.n	3a948 <bt_gatt_change_aware+0x42>
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   3a918:	f100 040c 	add.w	r4, r0, #12
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   3a91c:	4620      	mov	r0, r4
   3a91e:	f7ff fe17 	bl	3a550 <atomic_get>
   3a922:	f010 0601 	ands.w	r6, r0, #1
   3a926:	d10f      	bne.n	3a948 <bt_gatt_change_aware+0x42>
	if (!req) {
   3a928:	b17f      	cbz	r7, 3a94a <bt_gatt_change_aware+0x44>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   3a92a:	f06f 0102 	mvn.w	r1, #2
   3a92e:	4620      	mov	r0, r4
   3a930:	f7ff fe26 	bl	3a580 <atomic_and>
	if (atomic_test_and_clear_bit(cfg->flags, CF_DB_HASH_READ)) {
   3a934:	f010 0f02 	tst.w	r0, #2
		bt_att_clear_out_of_sync_sent(conn);
   3a938:	4628      	mov	r0, r5
	if (atomic_test_and_clear_bit(cfg->flags, CF_DB_HASH_READ)) {
   3a93a:	d008      	beq.n	3a94e <bt_gatt_change_aware+0x48>
		bt_att_clear_out_of_sync_sent(conn);
   3a93c:	f7ff fd60 	bl	3a400 <bt_att_clear_out_of_sync_sent>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   3a940:	2101      	movs	r1, #1
   3a942:	4620      	mov	r0, r4
   3a944:	f7ff fe0a 	bl	3a55c <atomic_or>
		return true;
   3a948:	2601      	movs	r6, #1
}
   3a94a:	4630      	mov	r0, r6
   3a94c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (bt_att_fixed_chan_only(conn) && bt_att_out_of_sync_sent_on_fixed(conn)) {
   3a94e:	f7ff fd55 	bl	3a3fc <bt_att_fixed_chan_only>
   3a952:	2800      	cmp	r0, #0
   3a954:	d0f9      	beq.n	3a94a <bt_gatt_change_aware+0x44>
   3a956:	4628      	mov	r0, r5
   3a958:	f7ff fd6b 	bl	3a432 <bt_att_out_of_sync_sent_on_fixed>
   3a95c:	2800      	cmp	r0, #0
   3a95e:	d0f4      	beq.n	3a94a <bt_gatt_change_aware+0x44>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   3a960:	f06f 0102 	mvn.w	r1, #2
   3a964:	4620      	mov	r0, r4
   3a966:	f7ff fe0b 	bl	3a580 <atomic_and>
		bt_att_clear_out_of_sync_sent(conn);
   3a96a:	4628      	mov	r0, r5
   3a96c:	e7e6      	b.n	3a93c <bt_gatt_change_aware+0x36>

0003a96e <bt_smp_recv>:
{
   3a96e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	buf = bt_l2cap_create_pdu(NULL, 0);
   3a970:	2100      	movs	r1, #0
   3a972:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   3a976:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	struct bt_conn *conn = chan->conn;
   3a97a:	6807      	ldr	r7, [r0, #0]
	buf = bt_l2cap_create_pdu(NULL, 0);
   3a97c:	4608      	mov	r0, r1
   3a97e:	f7ff f917 	bl	39bb0 <bt_l2cap_create_pdu_timeout>
   3a982:	f100 0608 	add.w	r6, r0, #8
   3a986:	4604      	mov	r4, r0
   3a988:	2101      	movs	r1, #1
   3a98a:	4630      	mov	r0, r6
   3a98c:	f7f4 f87e 	bl	2ea8c <net_buf_simple_add>
	hdr->code = BT_SMP_CMD_PAIRING_FAIL;
   3a990:	2505      	movs	r5, #5
   3a992:	7005      	strb	r5, [r0, #0]
   3a994:	2101      	movs	r1, #1
   3a996:	4630      	mov	r0, r6
   3a998:	f7f4 f878 	bl	2ea8c <net_buf_simple_add>
   3a99c:	2300      	movs	r3, #0
	rsp->reason = BT_SMP_ERR_PAIRING_NOTSUPP;
   3a99e:	7005      	strb	r5, [r0, #0]
   3a9a0:	4622      	mov	r2, r4
   3a9a2:	9300      	str	r3, [sp, #0]
   3a9a4:	2106      	movs	r1, #6
   3a9a6:	4638      	mov	r0, r7
   3a9a8:	f7ff f905 	bl	39bb6 <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, BT_L2CAP_CID_SMP, buf)) {
   3a9ac:	b110      	cbz	r0, 3a9b4 <bt_smp_recv+0x46>
		net_buf_unref(buf);
   3a9ae:	4620      	mov	r0, r4
   3a9b0:	f7f3 ff66 	bl	2e880 <net_buf_unref>
}
   3a9b4:	2000      	movs	r0, #0
   3a9b6:	b003      	add	sp, #12
   3a9b8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0003a9ba <bt_smp_sign>:
int bt_smp_sign(struct bt_conn *conn, struct net_buf *buf)
   3a9ba:	f06f 0085 	mvn.w	r0, #133	; 0x85
   3a9be:	4770      	bx	lr

0003a9c0 <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_fixed_chan, BT_L2CAP_CID_SMP, bt_smp_accept, NULL);

int bt_smp_init(void)
{
	return 0;
}
   3a9c0:	2000      	movs	r0, #0
   3a9c2:	4770      	bx	lr

0003a9c4 <smp_handle_reqs>:
{
   3a9c4:	b570      	push	{r4, r5, r6, lr}
   3a9c6:	b0aa      	sub	sp, #168	; 0xa8
   3a9c8:	4604      	mov	r4, r0
	while ((nb = net_buf_get(&smpt->fifo, K_NO_WAIT)) != NULL) {
   3a9ca:	f100 0510 	add.w	r5, r0, #16
	streamer = (struct smp_streamer) {
   3a9ce:	ae11      	add	r6, sp, #68	; 0x44
	while ((nb = net_buf_get(&smpt->fifo, K_NO_WAIT)) != NULL) {
   3a9d0:	2200      	movs	r2, #0
   3a9d2:	2300      	movs	r3, #0
   3a9d4:	4628      	mov	r0, r5
   3a9d6:	f7f3 fe21 	bl	2e61c <net_buf_get>
   3a9da:	4601      	mov	r1, r0
   3a9dc:	b908      	cbnz	r0, 3a9e2 <smp_handle_reqs+0x1e>
}
   3a9de:	b02a      	add	sp, #168	; 0xa8
   3a9e0:	bd70      	pop	{r4, r5, r6, pc}
	streamer = (struct smp_streamer) {
   3a9e2:	ab04      	add	r3, sp, #16
	rc = smp_process_request_packet(&streamer, nb);
   3a9e4:	a801      	add	r0, sp, #4
	streamer = (struct smp_streamer) {
   3a9e6:	e9cd 4601 	strd	r4, r6, [sp, #4]
   3a9ea:	9303      	str	r3, [sp, #12]
	rc = smp_process_request_packet(&streamer, nb);
   3a9ec:	f7f3 fbb8 	bl	2e160 <smp_process_request_packet>
	return rc;
   3a9f0:	e7ee      	b.n	3a9d0 <smp_handle_reqs+0xc>

0003a9f2 <smp_packet_free>:
	net_buf_unref(nb);
   3a9f2:	f7f3 bf45 	b.w	2e880 <net_buf_unref>

0003a9f6 <smp_alloc_rsp>:
{
   3a9f6:	b570      	push	{r4, r5, r6, lr}
   3a9f8:	4605      	mov	r5, r0
   3a9fa:	460e      	mov	r6, r1
	rsp_nb = smp_packet_alloc();
   3a9fc:	f7f3 f9ac 	bl	2dd58 <smp_packet_alloc>
   3aa00:	4604      	mov	r4, r0
	if (rsp_nb == NULL) {
   3aa02:	b118      	cbz	r0, 3aa0c <smp_alloc_rsp+0x16>
	if (smpt->ud_copy) {
   3aa04:	6b73      	ldr	r3, [r6, #52]	; 0x34
   3aa06:	b11b      	cbz	r3, 3aa10 <smp_alloc_rsp+0x1a>
		smpt->ud_copy(rsp_nb, req_nb);
   3aa08:	4629      	mov	r1, r5
   3aa0a:	4798      	blx	r3
}
   3aa0c:	4620      	mov	r0, r4
   3aa0e:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(net_buf_user_data(rsp_nb),
   3aa10:	79ea      	ldrb	r2, [r5, #7]
   3aa12:	f105 0114 	add.w	r1, r5, #20
   3aa16:	3014      	adds	r0, #20
   3aa18:	f7fe fcca 	bl	393b0 <memcpy>
   3aa1c:	e7f6      	b.n	3aa0c <smp_alloc_rsp+0x16>

0003aa1e <smp_free_buf>:
{
   3aa1e:	b510      	push	{r4, lr}
	if (!buf) {
   3aa20:	4604      	mov	r4, r0
   3aa22:	b140      	cbz	r0, 3aa36 <smp_free_buf+0x18>
	if (smpt->ud_free) {
   3aa24:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   3aa26:	b10b      	cbz	r3, 3aa2c <smp_free_buf+0xe>
		smpt->ud_free(net_buf_user_data((struct net_buf *)buf));
   3aa28:	3014      	adds	r0, #20
   3aa2a:	4798      	blx	r3
	net_buf_unref(nb);
   3aa2c:	4620      	mov	r0, r4
}
   3aa2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	net_buf_unref(nb);
   3aa32:	f7f3 bf25 	b.w	2e880 <net_buf_unref>
}
   3aa36:	bd10      	pop	{r4, pc}

0003aa38 <smp_bt_ccc_changed>:
}
   3aa38:	4770      	bx	lr

0003aa3a <smp_bt_ud_free>:
	if (user_data->conn) {
   3aa3a:	6803      	ldr	r3, [r0, #0]
   3aa3c:	b113      	cbz	r3, 3aa44 <smp_bt_ud_free+0xa>
		user_data->conn = NULL;
   3aa3e:	2300      	movs	r3, #0
   3aa40:	6003      	str	r3, [r0, #0]
		user_data->id = 0;
   3aa42:	7103      	strb	r3, [r0, #4]
}
   3aa44:	4770      	bx	lr

0003aa46 <smp_bt_ud_copy>:
	if (src_ud->conn) {
   3aa46:	694b      	ldr	r3, [r1, #20]
   3aa48:	b113      	cbz	r3, 3aa50 <smp_bt_ud_copy+0xa>
		dst_ud->conn = src_ud->conn;
   3aa4a:	6143      	str	r3, [r0, #20]
		dst_ud->id = src_ud->id;
   3aa4c:	7e0b      	ldrb	r3, [r1, #24]
   3aa4e:	7603      	strb	r3, [r0, #24]
}
   3aa50:	2000      	movs	r0, #0
   3aa52:	4770      	bx	lr

0003aa54 <smp_bt_query_valid_check>:
{
   3aa54:	b510      	push	{r4, lr}
   3aa56:	4604      	mov	r4, r0
		return false;
   3aa58:	4608      	mov	r0, r1
	if (conn == NULL || ud == NULL) {
   3aa5a:	b159      	cbz	r1, 3aa74 <smp_bt_query_valid_check+0x20>
	cpd = conn_param_data_get(conn);
   3aa5c:	f7f3 f9ee 	bl	2de3c <conn_param_data_get>
	if (cpd == NULL || (ud->conn == conn && cpd->id != ud->id)) {
   3aa60:	b140      	cbz	r0, 3aa74 <smp_bt_query_valid_check+0x20>
   3aa62:	6963      	ldr	r3, [r4, #20]
   3aa64:	428b      	cmp	r3, r1
   3aa66:	d106      	bne.n	3aa76 <smp_bt_query_valid_check+0x22>
   3aa68:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
   3aa6c:	7e22      	ldrb	r2, [r4, #24]
   3aa6e:	1a9b      	subs	r3, r3, r2
   3aa70:	4258      	negs	r0, r3
   3aa72:	4158      	adcs	r0, r3
}
   3aa74:	bd10      	pop	{r4, pc}
	return true;
   3aa76:	2001      	movs	r0, #1
   3aa78:	e7fc      	b.n	3aa74 <smp_bt_query_valid_check+0x20>

0003aa7a <smp_bt_get_mtu>:
{
   3aa7a:	b508      	push	{r3, lr}
	if (!ud->conn) {
   3aa7c:	6940      	ldr	r0, [r0, #20]
	if (conn == NULL) {
   3aa7e:	b118      	cbz	r0, 3aa88 <smp_bt_get_mtu+0xe>
	mtu = bt_gatt_get_mtu(conn);
   3aa80:	f7ff ff16 	bl	3a8b0 <bt_gatt_get_mtu>
	return mtu - 3;
   3aa84:	3803      	subs	r0, #3
   3aa86:	b280      	uxth	r0, r0
}
   3aa88:	bd08      	pop	{r3, pc}

0003aa8a <smp_notify_finished>:
{
   3aa8a:	b508      	push	{r3, lr}
	struct conn_param_data *cpd = conn_param_data_get(conn);
   3aa8c:	f7f3 f9d6 	bl	2de3c <conn_param_data_get>
	if (cpd != NULL) {
   3aa90:	b120      	cbz	r0, 3aa9c <smp_notify_finished+0x12>
}
   3aa92:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_impl_k_sem_give(sem);
   3aa96:	306c      	adds	r0, #108	; 0x6c
   3aa98:	f7fa be86 	b.w	357a8 <z_impl_k_sem_give>
   3aa9c:	bd08      	pop	{r3, pc}

0003aa9e <mgmt_ntoh_hdr>:
	hdr->nh_len = sys_be16_to_cpu(hdr->nh_len);
   3aa9e:	8843      	ldrh	r3, [r0, #2]
   3aaa0:	ba5b      	rev16	r3, r3
   3aaa2:	8043      	strh	r3, [r0, #2]
	hdr->nh_group = sys_be16_to_cpu(hdr->nh_group);
   3aaa4:	8883      	ldrh	r3, [r0, #4]
   3aaa6:	ba5b      	rev16	r3, r3
   3aaa8:	8083      	strh	r3, [r0, #4]
}
   3aaaa:	4770      	bx	lr

0003aaac <mgmt_hton_hdr>:
mgmt_hton_hdr(struct mgmt_hdr *hdr)
   3aaac:	f7ff bff7 	b.w	3aa9e <mgmt_ntoh_hdr>

0003aab0 <cbor_nb_writer_init>:
{
   3aab0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   3aab2:	4605      	mov	r5, r0
   3aab4:	460c      	mov	r4, r1
	net_buf_reset(nb);
   3aab6:	4608      	mov	r0, r1
   3aab8:	f7f3 fcba 	bl	2e430 <net_buf_reset>
	cnw->nb = nb;
   3aabc:	f845 4b04 	str.w	r4, [r5], #4
	cnw->nb->len = sizeof(struct mgmt_hdr);
   3aac0:	2308      	movs	r3, #8
	zcbor_new_encode_state(cnw->zs, 2, nb->data + sizeof(struct mgmt_hdr),
   3aac2:	4620      	mov	r0, r4
	cnw->nb->len = sizeof(struct mgmt_hdr);
   3aac4:	81a3      	strh	r3, [r4, #12]
	zcbor_new_encode_state(cnw->zs, 2, nb->data + sizeof(struct mgmt_hdr),
   3aac6:	f850 4f08 	ldr.w	r4, [r0, #8]!
   3aaca:	441c      	add	r4, r3
	return net_buf_simple_tailroom(&buf->b);
   3aacc:	f000 f81c 	bl	3ab08 <net_buf_simple_tailroom>
   3aad0:	2200      	movs	r2, #0
   3aad2:	4603      	mov	r3, r0
   3aad4:	9200      	str	r2, [sp, #0]
   3aad6:	2102      	movs	r1, #2
   3aad8:	4622      	mov	r2, r4
   3aada:	4628      	mov	r0, r5
   3aadc:	f001 f85b 	bl	3bb96 <zcbor_new_encode_state>
}
   3aae0:	b003      	add	sp, #12
   3aae2:	bd30      	pop	{r4, r5, pc}

0003aae4 <fixed_data_unref>:
}
   3aae4:	4770      	bx	lr

0003aae6 <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   3aae6:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   3aae8:	6849      	ldr	r1, [r1, #4]
   3aaea:	6809      	ldr	r1, [r1, #0]
   3aaec:	f7f3 bcbe 	b.w	2e46c <net_buf_alloc_len>

0003aaf0 <net_buf_simple_pull_le16>:
{
   3aaf0:	b510      	push	{r4, lr}
	val = UNALIGNED_GET((uint16_t *)buf->data);
   3aaf2:	6803      	ldr	r3, [r0, #0]
   3aaf4:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   3aaf6:	2102      	movs	r1, #2
   3aaf8:	f7f3 ff94 	bl	2ea24 <net_buf_simple_pull>
}
   3aafc:	4620      	mov	r0, r4
   3aafe:	bd10      	pop	{r4, pc}

0003ab00 <net_buf_simple_headroom>:
	return buf->data - buf->__buf;
   3ab00:	6802      	ldr	r2, [r0, #0]
   3ab02:	6880      	ldr	r0, [r0, #8]
}
   3ab04:	1a10      	subs	r0, r2, r0
   3ab06:	4770      	bx	lr

0003ab08 <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   3ab08:	8883      	ldrh	r3, [r0, #4]
   3ab0a:	88c2      	ldrh	r2, [r0, #6]
	return buf->data - buf->__buf;
   3ab0c:	6881      	ldr	r1, [r0, #8]
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   3ab0e:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
   3ab10:	6803      	ldr	r3, [r0, #0]
   3ab12:	1a5b      	subs	r3, r3, r1
}
   3ab14:	1ad0      	subs	r0, r2, r3
   3ab16:	4770      	bx	lr

0003ab18 <net_buf_simple_add_mem>:
{
   3ab18:	b538      	push	{r3, r4, r5, lr}
   3ab1a:	460d      	mov	r5, r1
   3ab1c:	4614      	mov	r4, r2
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   3ab1e:	4611      	mov	r1, r2
   3ab20:	f7f3 ffb4 	bl	2ea8c <net_buf_simple_add>
   3ab24:	4622      	mov	r2, r4
   3ab26:	4629      	mov	r1, r5
}
   3ab28:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   3ab2c:	f7fe bc40 	b.w	393b0 <memcpy>

0003ab30 <net_buf_simple_add_u8>:
{
   3ab30:	b510      	push	{r4, lr}
   3ab32:	460c      	mov	r4, r1
	u8 = net_buf_simple_add(buf, 1);
   3ab34:	2101      	movs	r1, #1
   3ab36:	f7f3 ffa9 	bl	2ea8c <net_buf_simple_add>
	*u8 = val;
   3ab3a:	7004      	strb	r4, [r0, #0]
}
   3ab3c:	bd10      	pop	{r4, pc}

0003ab3e <net_buf_simple_add_le16>:
{
   3ab3e:	b510      	push	{r4, lr}
   3ab40:	460c      	mov	r4, r1
	sys_put_le16(val, net_buf_simple_add(buf, sizeof(val)));
   3ab42:	2102      	movs	r1, #2
   3ab44:	f7f3 ffa2 	bl	2ea8c <net_buf_simple_add>
	dst[0] = val;
   3ab48:	7004      	strb	r4, [r0, #0]
	dst[1] = val >> 8;
   3ab4a:	0a24      	lsrs	r4, r4, #8
   3ab4c:	7044      	strb	r4, [r0, #1]
}
   3ab4e:	bd10      	pop	{r4, pc}

0003ab50 <adc_context_on_timer_expired>:
{
   3ab50:	b410      	push	{r4}
   3ab52:	4603      	mov	r3, r0
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   3ab54:	3808      	subs	r0, #8
   3ab56:	f3bf 8f5b 	dmb	ish
   3ab5a:	e850 2f00 	ldrex	r2, [r0]
   3ab5e:	1c51      	adds	r1, r2, #1
   3ab60:	e840 1400 	strex	r4, r1, [r0]
   3ab64:	2c00      	cmp	r4, #0
   3ab66:	d1f8      	bne.n	3ab5a <adc_context_on_timer_expired+0xa>
   3ab68:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&ctx->sampling_requested) == 0) {
   3ab6c:	b912      	cbnz	r2, 3ab74 <adc_context_on_timer_expired+0x24>
}
   3ab6e:	bc10      	pop	{r4}
		adc_context_start_sampling(ctx);
   3ab70:	f7f3 bfcc 	b.w	2eb0c <adc_context_start_sampling>
		ctx->status = -EBUSY;
   3ab74:	f06f 020f 	mvn.w	r2, #15
}
   3ab78:	bc10      	pop	{r4}
		ctx->status = -EBUSY;
   3ab7a:	669a      	str	r2, [r3, #104]	; 0x68
}
   3ab7c:	4770      	bx	lr

0003ab7e <set_on_state>:
	__asm__ volatile(
   3ab7e:	f04f 0340 	mov.w	r3, #64	; 0x40
   3ab82:	f3ef 8211 	mrs	r2, BASEPRI
   3ab86:	f383 8812 	msr	BASEPRI_MAX, r3
   3ab8a:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   3ab8e:	6803      	ldr	r3, [r0, #0]
   3ab90:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   3ab94:	f043 0302 	orr.w	r3, r3, #2
   3ab98:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   3ab9a:	f382 8811 	msr	BASEPRI, r2
   3ab9e:	f3bf 8f6f 	isb	sy
}
   3aba2:	4770      	bx	lr

0003aba4 <async_start>:
{
   3aba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3aba6:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
   3aba8:	6904      	ldr	r4, [r0, #16]
	return &data->subsys[type];
   3abaa:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   3abac:	f04f 0540 	mov.w	r5, #64	; 0x40
   3abb0:	f3ef 8611 	mrs	r6, BASEPRI
   3abb4:	f385 8812 	msr	BASEPRI_MAX, r5
   3abb8:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   3abbc:	250c      	movs	r5, #12
   3abbe:	4369      	muls	r1, r5
   3abc0:	440c      	add	r4, r1
   3abc2:	6ca5      	ldr	r5, [r4, #72]	; 0x48
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   3abc4:	f005 0c07 	and.w	ip, r5, #7
   3abc8:	f1bc 0f01 	cmp.w	ip, #1
   3abcc:	d10b      	bne.n	3abe6 <async_start+0x42>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   3abce:	64a7      	str	r7, [r4, #72]	; 0x48
	__asm__ volatile(
   3abd0:	f386 8811 	msr	BASEPRI, r6
   3abd4:	f3bf 8f6f 	isb	sy
	subdata->user_data = user_data;
   3abd8:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
	 get_sub_config(dev, type)->start();
   3abdc:	6843      	ldr	r3, [r0, #4]
   3abde:	585b      	ldr	r3, [r3, r1]
   3abe0:	4798      	blx	r3
	return 0;
   3abe2:	2000      	movs	r0, #0
}
   3abe4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   3abe6:	f005 05c0 	and.w	r5, r5, #192	; 0xc0
	} else if (current_ctx != ctx) {
   3abea:	42af      	cmp	r7, r5
   3abec:	f386 8811 	msr	BASEPRI, r6
   3abf0:	f3bf 8f6f 	isb	sy
		err = -EALREADY;
   3abf4:	bf0c      	ite	eq
   3abf6:	f06f 0077 	mvneq.w	r0, #119	; 0x77
		err = -EPERM;
   3abfa:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   3abfe:	e7f1      	b.n	3abe4 <async_start+0x40>

0003ac00 <api_start>:
{
   3ac00:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
   3ac02:	2480      	movs	r4, #128	; 0x80
   3ac04:	9400      	str	r4, [sp, #0]
   3ac06:	f7ff ffcd 	bl	3aba4 <async_start>
}
   3ac0a:	b002      	add	sp, #8
   3ac0c:	bd10      	pop	{r4, pc}

0003ac0e <onoff_started_callback>:
	return &data->mgr[type];
   3ac0e:	6900      	ldr	r0, [r0, #16]
   3ac10:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   3ac12:	eb00 1043 	add.w	r0, r0, r3, lsl #5
   3ac16:	2100      	movs	r1, #0
   3ac18:	4710      	bx	r2

0003ac1a <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   3ac1a:	2000      	movs	r0, #0
   3ac1c:	f7f8 ba86 	b.w	3312c <nrfx_clock_stop>

0003ac20 <blocking_start_callback>:
{
   3ac20:	4610      	mov	r0, r2
   3ac22:	f7fa bdc1 	b.w	357a8 <z_impl_k_sem_give>

0003ac26 <api_stop>:
	return stop(dev, subsys, CTX_API);
   3ac26:	2280      	movs	r2, #128	; 0x80
   3ac28:	f7f4 b9fe 	b.w	2f028 <stop>

0003ac2c <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   3ac2c:	6843      	ldr	r3, [r0, #4]
   3ac2e:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   3ac30:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   3ac34:	600b      	str	r3, [r1, #0]
}
   3ac36:	2000      	movs	r0, #0
   3ac38:	4770      	bx	lr

0003ac3a <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   3ac3a:	6843      	ldr	r3, [r0, #4]
   3ac3c:	685b      	ldr	r3, [r3, #4]
	const uint32_t set_mask = value & mask;
   3ac3e:	ea02 0001 	and.w	r0, r2, r1
	const uint32_t clear_mask = (~set_mask) & mask;
   3ac42:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
   3ac46:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
   3ac4a:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
   3ac4e:	2000      	movs	r0, #0
   3ac50:	4770      	bx	lr

0003ac52 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   3ac52:	6843      	ldr	r3, [r0, #4]
   3ac54:	685b      	ldr	r3, [r3, #4]
}
   3ac56:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
   3ac58:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   3ac5c:	4770      	bx	lr

0003ac5e <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   3ac5e:	6843      	ldr	r3, [r0, #4]
   3ac60:	685b      	ldr	r3, [r3, #4]
}
   3ac62:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   3ac64:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
   3ac68:	4770      	bx	lr

0003ac6a <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   3ac6a:	6843      	ldr	r3, [r0, #4]
   3ac6c:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   3ac6e:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	const uint32_t set_mask = value & mask;
   3ac72:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
   3ac76:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
   3ac78:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
   3ac7c:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
}
   3ac80:	2000      	movs	r0, #0
   3ac82:	4770      	bx	lr

0003ac84 <pin_interrupt_configure>:
	return rc;
   3ac84:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
}
   3ac88:	bf14      	ite	ne
   3ac8a:	f06f 0085 	mvnne.w	r0, #133	; 0x85
   3ac8e:	2000      	moveq	r0, #0
   3ac90:	4770      	bx	lr

0003ac92 <k_sem_take.constprop.0.isra.0>:
	return z_impl_k_sem_take(sem, timeout);
   3ac92:	f7fa bdc3 	b.w	3581c <z_impl_k_sem_take>

0003ac96 <port_get>:
{
   3ac96:	b5f0      	push	{r4, r5, r6, r7, lr}
   3ac98:	b089      	sub	sp, #36	; 0x24
	const struct sx1509b_config *cfg = dev->config;
   3ac9a:	6847      	ldr	r7, [r0, #4]
	struct sx1509b_drv_data *drv_data = dev->data;
   3ac9c:	6905      	ldr	r5, [r0, #16]
{
   3ac9e:	460e      	mov	r6, r1
	if (k_is_in_isr()) {
   3aca0:	f000 ffa9 	bl	3bbf6 <k_is_in_isr>
   3aca4:	4604      	mov	r4, r0
   3aca6:	bb60      	cbnz	r0, 3ad02 <port_get+0x6c>
	k_sem_take(&drv_data->lock, K_FOREVER);
   3aca8:	351c      	adds	r5, #28
   3acaa:	4628      	mov	r0, r5
   3acac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   3acb0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   3acb4:	f7ff ffed 	bl	3ac92 <k_sem_take.constprop.0.isra.0>
	msg[0].buf = (uint8_t *)write_buf;
   3acb8:	f10d 0205 	add.w	r2, sp, #5
   3acbc:	9202      	str	r2, [sp, #8]
	msg[0].len = num_write;
   3acbe:	2201      	movs	r2, #1
	return i2c_write_read(spec->bus, spec->addr,
   3acc0:	6878      	ldr	r0, [r7, #4]
	msg[0].len = num_write;
   3acc2:	9203      	str	r2, [sp, #12]
	uint8_t cmd = SX1509B_REG_DATA;
   3acc4:	2310      	movs	r3, #16
	msg[1].buf = (uint8_t *)read_buf;
   3acc6:	f10d 0206 	add.w	r2, sp, #6
   3acca:	f88d 3005 	strb.w	r3, [sp, #5]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   3acce:	2107      	movs	r1, #7
	return i2c_write_read(spec->bus, spec->addr,
   3acd0:	893b      	ldrh	r3, [r7, #8]
	msg[1].buf = (uint8_t *)read_buf;
   3acd2:	9205      	str	r2, [sp, #20]
	msg[1].len = num_read;
   3acd4:	2202      	movs	r2, #2
	msg[0].flags = I2C_MSG_WRITE;
   3acd6:	f88d 4010 	strb.w	r4, [sp, #16]
	msg[1].len = num_read;
   3acda:	9206      	str	r2, [sp, #24]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   3acdc:	f88d 101c 	strb.w	r1, [sp, #28]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
   3ace0:	6881      	ldr	r1, [r0, #8]
   3ace2:	688c      	ldr	r4, [r1, #8]
   3ace4:	a902      	add	r1, sp, #8
   3ace6:	47a0      	blx	r4
	if (rc != 0) {
   3ace8:	4604      	mov	r4, r0
   3acea:	b920      	cbnz	r0, 3acf6 <port_get+0x60>
	*value = sys_be16_to_cpu(pin_data);
   3acec:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   3acf0:	ba5b      	rev16	r3, r3
   3acf2:	b29b      	uxth	r3, r3
   3acf4:	6033      	str	r3, [r6, #0]
	z_impl_k_sem_give(sem);
   3acf6:	4628      	mov	r0, r5
   3acf8:	f7fa fd56 	bl	357a8 <z_impl_k_sem_give>
}
   3acfc:	4620      	mov	r0, r4
   3acfe:	b009      	add	sp, #36	; 0x24
   3ad00:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -EWOULDBLOCK;
   3ad02:	f06f 040a 	mvn.w	r4, #10
   3ad06:	e7f9      	b.n	3acfc <port_get+0x66>

0003ad08 <i2c_write>:
{
   3ad08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	msg.len = num_bytes;
   3ad0a:	e9cd 1201 	strd	r1, r2, [sp, #4]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
   3ad0e:	2202      	movs	r2, #2
   3ad10:	f88d 200c 	strb.w	r2, [sp, #12]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
   3ad14:	6882      	ldr	r2, [r0, #8]
   3ad16:	a901      	add	r1, sp, #4
   3ad18:	6894      	ldr	r4, [r2, #8]
   3ad1a:	2201      	movs	r2, #1
   3ad1c:	47a0      	blx	r4
}
   3ad1e:	b004      	add	sp, #16
   3ad20:	bd10      	pop	{r4, pc}

0003ad22 <i2c_write_dt>:
	return i2c_write(spec->bus, buf, num_bytes, spec->addr);
   3ad22:	8883      	ldrh	r3, [r0, #4]
   3ad24:	6800      	ldr	r0, [r0, #0]
   3ad26:	f7ff bfef 	b.w	3ad08 <i2c_write>

0003ad2a <i2c_reg_write_word_be>:
{
   3ad2a:	b507      	push	{r0, r1, r2, lr}
	uint8_t tx_buf[3] = { reg_addr, value >> 8, value & 0xff };
   3ad2c:	0a13      	lsrs	r3, r2, #8
   3ad2e:	f88d 1004 	strb.w	r1, [sp, #4]
   3ad32:	f88d 2006 	strb.w	r2, [sp, #6]
	return i2c_write_dt(bus, tx_buf, 3);
   3ad36:	a901      	add	r1, sp, #4
   3ad38:	2203      	movs	r2, #3
	uint8_t tx_buf[3] = { reg_addr, value >> 8, value & 0xff };
   3ad3a:	f88d 3005 	strb.w	r3, [sp, #5]
	return i2c_write_dt(bus, tx_buf, 3);
   3ad3e:	f7ff fff0 	bl	3ad22 <i2c_write_dt>
}
   3ad42:	b003      	add	sp, #12
   3ad44:	f85d fb04 	ldr.w	pc, [sp], #4

0003ad48 <write_pin_state.constprop.0>:
static int write_pin_state(const struct sx1509b_config *cfg,
   3ad48:	b510      	push	{r4, lr}
   3ad4a:	b086      	sub	sp, #24
	pin_buf.reg = SX1509B_REG_INPUT_DISABLE;
   3ad4c:	2300      	movs	r3, #0
   3ad4e:	f88d 3004 	strb.w	r3, [sp, #4]
	pin_buf.pins.input_disable = sys_cpu_to_be16(pins->input_disable);
   3ad52:	880b      	ldrh	r3, [r1, #0]
   3ad54:	ba5b      	rev16	r3, r3
   3ad56:	f8ad 3005 	strh.w	r3, [sp, #5]
	pin_buf.pins.long_slew = sys_cpu_to_be16(pins->long_slew);
   3ad5a:	884b      	ldrh	r3, [r1, #2]
   3ad5c:	ba5b      	rev16	r3, r3
   3ad5e:	f8ad 3007 	strh.w	r3, [sp, #7]
	pin_buf.pins.low_drive = sys_cpu_to_be16(pins->low_drive);
   3ad62:	888b      	ldrh	r3, [r1, #4]
   3ad64:	ba5b      	rev16	r3, r3
   3ad66:	f8ad 3009 	strh.w	r3, [sp, #9]
	pin_buf.pins.pull_up = sys_cpu_to_be16(pins->pull_up);
   3ad6a:	88cb      	ldrh	r3, [r1, #6]
   3ad6c:	ba5b      	rev16	r3, r3
   3ad6e:	f8ad 300b 	strh.w	r3, [sp, #11]
	pin_buf.pins.pull_down = sys_cpu_to_be16(pins->pull_down);
   3ad72:	890b      	ldrh	r3, [r1, #8]
   3ad74:	ba5b      	rev16	r3, r3
   3ad76:	f8ad 300d 	strh.w	r3, [sp, #13]
	pin_buf.pins.open_drain = sys_cpu_to_be16(pins->open_drain);
   3ad7a:	894b      	ldrh	r3, [r1, #10]
   3ad7c:	ba5b      	rev16	r3, r3
   3ad7e:	f8ad 300f 	strh.w	r3, [sp, #15]
	pin_buf.pins.polarity = sys_cpu_to_be16(pins->polarity);
   3ad82:	898b      	ldrh	r3, [r1, #12]
   3ad84:	ba5b      	rev16	r3, r3
   3ad86:	f8ad 3011 	strh.w	r3, [sp, #17]
	pin_buf.pins.dir = sys_cpu_to_be16(pins->dir);
   3ad8a:	89cb      	ldrh	r3, [r1, #14]
   3ad8c:	ba5b      	rev16	r3, r3
   3ad8e:	f8ad 3013 	strh.w	r3, [sp, #19]
	pin_buf.pins.data = sys_cpu_to_be16(pins->data);
   3ad92:	8a0b      	ldrh	r3, [r1, #16]
   3ad94:	ba59      	rev16	r1, r3
   3ad96:	f8ad 1015 	strh.w	r1, [sp, #21]
		rc = i2c_reg_write_word_be(&cfg->bus, SX1509B_REG_DATA,
   3ad9a:	1d04      	adds	r4, r0, #4
	if (data_first) {
   3ad9c:	b162      	cbz	r2, 3adb8 <write_pin_state.constprop.0+0x70>
		rc = i2c_reg_write_word_be(&cfg->bus, SX1509B_REG_DATA,
   3ad9e:	461a      	mov	r2, r3
   3ada0:	2110      	movs	r1, #16
   3ada2:	4620      	mov	r0, r4
   3ada4:	f7ff ffc1 	bl	3ad2a <i2c_reg_write_word_be>
		if (rc == 0) {
   3ada8:	b920      	cbnz	r0, 3adb4 <write_pin_state.constprop.0+0x6c>
			rc = i2c_write_dt(&cfg->bus, &pin_buf.reg,
   3adaa:	2211      	movs	r2, #17
		rc = i2c_write_dt(&cfg->bus, &pin_buf.reg, sizeof(pin_buf));
   3adac:	a901      	add	r1, sp, #4
   3adae:	4620      	mov	r0, r4
   3adb0:	f7ff ffb7 	bl	3ad22 <i2c_write_dt>
}
   3adb4:	b006      	add	sp, #24
   3adb6:	bd10      	pop	{r4, pc}
		rc = i2c_write_dt(&cfg->bus, &pin_buf.reg, sizeof(pin_buf));
   3adb8:	2213      	movs	r2, #19
   3adba:	e7f7      	b.n	3adac <write_pin_state.constprop.0+0x64>

0003adbc <port_toggle_bits>:
	return port_write(dev, 0, 0, pins);
   3adbc:	2200      	movs	r2, #0
{
   3adbe:	460b      	mov	r3, r1
	return port_write(dev, 0, 0, pins);
   3adc0:	4611      	mov	r1, r2
   3adc2:	f7f4 bdb5 	b.w	2f930 <port_write>

0003adc6 <port_clear_bits>:
	return port_write(dev, pins, 0, 0);
   3adc6:	2300      	movs	r3, #0
   3adc8:	461a      	mov	r2, r3
   3adca:	f7f4 bdb1 	b.w	2f930 <port_write>

0003adce <port_set_bits>:
{
   3adce:	460a      	mov	r2, r1
	return port_write(dev, pins, pins, 0);
   3add0:	2300      	movs	r3, #0
   3add2:	f7f4 bdad 	b.w	2f930 <port_write>

0003add6 <port_set_masked>:
	return port_write(dev, mask, value, 0);
   3add6:	2300      	movs	r3, #0
   3add8:	f7f4 bdaa 	b.w	2f930 <port_write>

0003addc <sx1509b_config>:
{
   3addc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3ade0:	460d      	mov	r5, r1
	const struct sx1509b_config *cfg = dev->config;
   3ade2:	f8d0 9004 	ldr.w	r9, [r0, #4]
	struct sx1509b_drv_data *drv_data = dev->data;
   3ade6:	6904      	ldr	r4, [r0, #16]
{
   3ade8:	4617      	mov	r7, r2
	if (k_is_in_isr()) {
   3adea:	f000 ff04 	bl	3bbf6 <k_is_in_isr>
   3adee:	4682      	mov	sl, r0
   3adf0:	2800      	cmp	r0, #0
   3adf2:	f040 8084 	bne.w	3aefe <sx1509b_config+0x122>
	k_sem_take(&drv_data->lock, K_FOREVER);
   3adf6:	f104 081c 	add.w	r8, r4, #28
   3adfa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   3adfe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   3ae02:	4640      	mov	r0, r8
   3ae04:	f7ff ff45 	bl	3ac92 <k_sem_take.constprop.0.isra.0>
		drv_data->led_drv_enable &= ~BIT(pin);
   3ae08:	2601      	movs	r6, #1
	if (drv_data->led_drv_enable & BIT(pin)) {
   3ae0a:	8ae2      	ldrh	r2, [r4, #22]
		drv_data->led_drv_enable &= ~BIT(pin);
   3ae0c:	40ae      	lsls	r6, r5
   3ae0e:	b2b6      	uxth	r6, r6
	if (drv_data->led_drv_enable & BIT(pin)) {
   3ae10:	fa22 f505 	lsr.w	r5, r2, r5
		drv_data->led_drv_enable &= ~BIT(pin);
   3ae14:	ea6f 0b06 	mvn.w	fp, r6
	if (drv_data->led_drv_enable & BIT(pin)) {
   3ae18:	07e9      	lsls	r1, r5, #31
		drv_data->led_drv_enable &= ~BIT(pin);
   3ae1a:	fa1f fb8b 	uxth.w	fp, fp
	if (drv_data->led_drv_enable & BIT(pin)) {
   3ae1e:	d44c      	bmi.n	3aeba <sx1509b_config+0xde>
	pins->open_drain &= ~BIT(pin);
   3ae20:	89e3      	ldrh	r3, [r4, #14]
   3ae22:	ea03 020b 	and.w	r2, r3, fp
   3ae26:	81e2      	strh	r2, [r4, #14]
	if ((flags & GPIO_SINGLE_ENDED) != 0) {
   3ae28:	07ba      	lsls	r2, r7, #30
   3ae2a:	d458      	bmi.n	3aede <sx1509b_config+0x102>
		pins->pull_up |= BIT(pin);
   3ae2c:	8963      	ldrh	r3, [r4, #10]
	if ((flags & GPIO_PULL_UP) != 0) {
   3ae2e:	06f8      	lsls	r0, r7, #27
		pins->pull_up |= BIT(pin);
   3ae30:	bf4c      	ite	mi
   3ae32:	4333      	orrmi	r3, r6
		pins->pull_up &= ~BIT(pin);
   3ae34:	ea0b 0303 	andpl.w	r3, fp, r3
   3ae38:	8163      	strh	r3, [r4, #10]
		pins->pull_down |= BIT(pin);
   3ae3a:	89a3      	ldrh	r3, [r4, #12]
	if ((flags & GPIO_PULL_DOWN) != 0) {
   3ae3c:	06b9      	lsls	r1, r7, #26
		pins->pull_down |= BIT(pin);
   3ae3e:	bf4c      	ite	mi
   3ae40:	4333      	orrmi	r3, r6
		pins->pull_down &= ~BIT(pin);
   3ae42:	ea0b 0303 	andpl.w	r3, fp, r3
   3ae46:	81a3      	strh	r3, [r4, #12]
		pins->input_disable &= ~BIT(pin);
   3ae48:	88a3      	ldrh	r3, [r4, #4]
	if ((flags & GPIO_INPUT) != 0) {
   3ae4a:	03fa      	lsls	r2, r7, #15
		pins->input_disable &= ~BIT(pin);
   3ae4c:	bf4c      	ite	mi
   3ae4e:	ea0b 0303 	andmi.w	r3, fp, r3
		pins->input_disable |= BIT(pin);
   3ae52:	4333      	orrpl	r3, r6
	if ((flags & GPIO_OUTPUT) != 0) {
   3ae54:	03bd      	lsls	r5, r7, #14
   3ae56:	80a3      	strh	r3, [r4, #4]
		pins->dir &= ~BIT(pin);
   3ae58:	8a63      	ldrh	r3, [r4, #18]
	if ((flags & GPIO_OUTPUT) != 0) {
   3ae5a:	d54a      	bpl.n	3aef2 <sx1509b_config+0x116>
		pins->dir &= ~BIT(pin);
   3ae5c:	ea0b 0303 	and.w	r3, fp, r3
		if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
   3ae60:	0378      	lsls	r0, r7, #13
		pins->dir &= ~BIT(pin);
   3ae62:	8263      	strh	r3, [r4, #18]
		if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
   3ae64:	d540      	bpl.n	3aee8 <sx1509b_config+0x10c>
			pins->data &= ~BIT(pin);
   3ae66:	8aa3      	ldrh	r3, [r4, #20]
   3ae68:	ea0b 0303 	and.w	r3, fp, r3
			pins->data |= BIT(pin);
   3ae6c:	82a3      	strh	r3, [r4, #20]
			data_first = true;
   3ae6e:	f04f 0a01 	mov.w	sl, #1
		debounce->debounce_enable |= BIT(pin);
   3ae72:	f8b4 3019 	ldrh.w	r3, [r4, #25]
	if ((flags & SX1509B_GPIO_DEBOUNCE) != 0) {
   3ae76:	05fa      	lsls	r2, r7, #23
		debounce->debounce_enable |= BIT(pin);
   3ae78:	bf4c      	ite	mi
   3ae7a:	4333      	orrmi	r3, r6
		debounce->debounce_enable &= ~BIT(pin);
   3ae7c:	ea0b 0303 	andpl.w	r3, fp, r3
   3ae80:	f8a4 3019 	strh.w	r3, [r4, #25]
	rc = write_pin_state(cfg, drv_data, pins, data_first);
   3ae84:	4652      	mov	r2, sl
   3ae86:	1d21      	adds	r1, r4, #4
   3ae88:	4648      	mov	r0, r9
   3ae8a:	f7ff ff5d 	bl	3ad48 <write_pin_state.constprop.0>
	if (rc == 0) {
   3ae8e:	4605      	mov	r5, r0
   3ae90:	b9f0      	cbnz	r0, 3aed0 <sx1509b_config+0xf4>
		debounce_buf.reg = SX1509B_REG_DEBOUNCE_CONFIG;
   3ae92:	2322      	movs	r3, #34	; 0x22
   3ae94:	f88d 3004 	strb.w	r3, [sp, #4]
			= debounce->debounce_config;
   3ae98:	7e23      	ldrb	r3, [r4, #24]
   3ae9a:	f88d 3005 	strb.w	r3, [sp, #5]
			= sys_cpu_to_be16(debounce->debounce_enable);
   3ae9e:	f8b4 3019 	ldrh.w	r3, [r4, #25]
		rc = i2c_write_dt(&cfg->bus, &debounce_buf.reg,
   3aea2:	2204      	movs	r2, #4
			= sys_cpu_to_be16(debounce->debounce_enable);
   3aea4:	ba5b      	rev16	r3, r3
		rc = i2c_write_dt(&cfg->bus, &debounce_buf.reg,
   3aea6:	eb0d 0102 	add.w	r1, sp, r2
   3aeaa:	eb09 0002 	add.w	r0, r9, r2
			= sys_cpu_to_be16(debounce->debounce_enable);
   3aeae:	f8ad 3006 	strh.w	r3, [sp, #6]
		rc = i2c_write_dt(&cfg->bus, &debounce_buf.reg,
   3aeb2:	f7ff ff36 	bl	3ad22 <i2c_write_dt>
   3aeb6:	4605      	mov	r5, r0
   3aeb8:	e00a      	b.n	3aed0 <sx1509b_config+0xf4>
		drv_data->led_drv_enable &= ~BIT(pin);
   3aeba:	ea02 020b 	and.w	r2, r2, fp
   3aebe:	82e2      	strh	r2, [r4, #22]
		rc = i2c_reg_write_word_be(&cfg->bus,
   3aec0:	2120      	movs	r1, #32
   3aec2:	f109 0004 	add.w	r0, r9, #4
   3aec6:	f7ff ff30 	bl	3ad2a <i2c_reg_write_word_be>
		if (rc) {
   3aeca:	4605      	mov	r5, r0
   3aecc:	2800      	cmp	r0, #0
   3aece:	d0a7      	beq.n	3ae20 <sx1509b_config+0x44>
   3aed0:	4640      	mov	r0, r8
   3aed2:	f7fa fc69 	bl	357a8 <z_impl_k_sem_give>
}
   3aed6:	4628      	mov	r0, r5
   3aed8:	b003      	add	sp, #12
   3aeda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((flags & GPIO_LINE_OPEN_DRAIN) != 0) {
   3aede:	077d      	lsls	r5, r7, #29
   3aee0:	d50a      	bpl.n	3aef8 <sx1509b_config+0x11c>
			pins->open_drain |= BIT(pin);
   3aee2:	4333      	orrs	r3, r6
   3aee4:	81e3      	strh	r3, [r4, #14]
   3aee6:	e7a1      	b.n	3ae2c <sx1509b_config+0x50>
		} else if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   3aee8:	0339      	lsls	r1, r7, #12
   3aeea:	d5c2      	bpl.n	3ae72 <sx1509b_config+0x96>
			pins->data |= BIT(pin);
   3aeec:	8aa3      	ldrh	r3, [r4, #20]
   3aeee:	4333      	orrs	r3, r6
			data_first = true;
   3aef0:	e7bc      	b.n	3ae6c <sx1509b_config+0x90>
		pins->dir |= BIT(pin);
   3aef2:	4333      	orrs	r3, r6
   3aef4:	8263      	strh	r3, [r4, #18]
   3aef6:	e7bc      	b.n	3ae72 <sx1509b_config+0x96>
			rc = -ENOTSUP;
   3aef8:	f06f 0585 	mvn.w	r5, #133	; 0x85
   3aefc:	e7e8      	b.n	3aed0 <sx1509b_config+0xf4>
		return -EWOULDBLOCK;
   3aefe:	f06f 050a 	mvn.w	r5, #10
   3af02:	e7e8      	b.n	3aed6 <sx1509b_config+0xfa>

0003af04 <irq_connect0>:
		      POST_KERNEL,					       \
		      CONFIG_I2C_INIT_PRIORITY,				       \
		      &i2c_nrfx_twim_driver_api)

#ifdef CONFIG_I2C_0_NRF_TWIM
I2C_NRFX_TWIM_DEVICE(0);
   3af04:	2200      	movs	r2, #0
   3af06:	2101      	movs	r1, #1
   3af08:	2003      	movs	r0, #3
   3af0a:	f7eb bff1 	b.w	26ef0 <z_arm_irq_priority_set>

0003af0e <irq_connect1>:
#endif

#ifdef CONFIG_I2C_1_NRF_TWIM
I2C_NRFX_TWIM_DEVICE(1);
   3af0e:	2200      	movs	r2, #0
   3af10:	2101      	movs	r1, #1
   3af12:	2004      	movs	r0, #4
   3af14:	f7eb bfec 	b.w	26ef0 <z_arm_irq_priority_set>

0003af18 <pinctrl_apply_state.constprop.0>:
static inline int pinctrl_apply_state(const struct pinctrl_dev_config *config,
   3af18:	b513      	push	{r0, r1, r4, lr}
	ret = pinctrl_lookup_state(config, id, &state);
   3af1a:	2100      	movs	r1, #0
   3af1c:	aa01      	add	r2, sp, #4
static inline int pinctrl_apply_state(const struct pinctrl_dev_config *config,
   3af1e:	4604      	mov	r4, r0
	ret = pinctrl_lookup_state(config, id, &state);
   3af20:	f000 fb73 	bl	3b60a <pinctrl_lookup_state>
	if (ret < 0) {
   3af24:	2800      	cmp	r0, #0
   3af26:	db05      	blt.n	3af34 <pinctrl_apply_state.constprop.0+0x1c>
	return pinctrl_apply_state_direct(config, state);
   3af28:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   3af2a:	6822      	ldr	r2, [r4, #0]
   3af2c:	7919      	ldrb	r1, [r3, #4]
   3af2e:	6818      	ldr	r0, [r3, #0]
   3af30:	f000 fb81 	bl	3b636 <pinctrl_configure_pins>
}
   3af34:	b002      	add	sp, #8
   3af36:	bd10      	pop	{r4, pc}

0003af38 <z_log_msg_static_create.constprop.0>:
   3af38:	2300      	movs	r3, #0
   3af3a:	f7eb b937 	b.w	261ac <z_impl_z_log_msg_static_create>

0003af3e <i2c_write_read_dt.constprop.0>:
static inline int i2c_write_read_dt(const struct i2c_dt_spec *spec,
   3af3e:	b530      	push	{r4, r5, lr}
   3af40:	b087      	sub	sp, #28
   3af42:	4604      	mov	r4, r0
   3af44:	461d      	mov	r5, r3
	msg[0].buf = (uint8_t *)write_buf;
   3af46:	9100      	str	r1, [sp, #0]
	msg[0].len = num_write;
   3af48:	2101      	movs	r1, #1
	msg[1].len = num_read;
   3af4a:	e9cd 2503 	strd	r2, r5, [sp, #12]
	msg[0].len = num_write;
   3af4e:	9101      	str	r1, [sp, #4]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   3af50:	2207      	movs	r2, #7
	msg[0].flags = I2C_MSG_WRITE;
   3af52:	2100      	movs	r1, #0
	return i2c_write_read(spec->bus, spec->addr,
   3af54:	6800      	ldr	r0, [r0, #0]
   3af56:	88a3      	ldrh	r3, [r4, #4]
	msg[0].flags = I2C_MSG_WRITE;
   3af58:	f88d 1008 	strb.w	r1, [sp, #8]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   3af5c:	f88d 2014 	strb.w	r2, [sp, #20]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
   3af60:	6882      	ldr	r2, [r0, #8]
   3af62:	4669      	mov	r1, sp
   3af64:	6894      	ldr	r4, [r2, #8]
   3af66:	2202      	movs	r2, #2
   3af68:	47a0      	blx	r4
}
   3af6a:	b007      	add	sp, #28
   3af6c:	bd30      	pop	{r4, r5, pc}

0003af6e <k_msleep.isra.0>:
static inline int32_t k_msleep(int32_t ms)
   3af6e:	4601      	mov	r1, r0
   3af70:	f240 30e7 	movw	r0, #999	; 0x3e7
   3af74:	b508      	push	{r3, lr}
   3af76:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   3af7a:	2300      	movs	r3, #0
   3af7c:	eb00 30c1 	add.w	r0, r0, r1, lsl #15
   3af80:	1449      	asrs	r1, r1, #17
   3af82:	f7d2 f935 	bl	d1f0 <__aeabi_uldivmod>
}
   3af86:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return z_impl_k_sleep(timeout);
   3af8a:	f7fc b88b 	b.w	370a4 <z_impl_k_sleep>

0003af8e <i2c_reg_read_byte_dt>:
{
   3af8e:	b510      	push	{r4, lr}
   3af90:	b088      	sub	sp, #32
   3af92:	4603      	mov	r3, r0
	return i2c_reg_read_byte(spec->bus, spec->addr, reg_addr, value);
   3af94:	f88d 1007 	strb.w	r1, [sp, #7]
	msg[0].buf = (uint8_t *)write_buf;
   3af98:	f10d 0107 	add.w	r1, sp, #7
   3af9c:	9102      	str	r1, [sp, #8]
	msg[0].len = num_write;
   3af9e:	2101      	movs	r1, #1
	msg[1].len = num_read;
   3afa0:	e9cd 2105 	strd	r2, r1, [sp, #20]
	msg[0].flags = I2C_MSG_WRITE;
   3afa4:	2400      	movs	r4, #0
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   3afa6:	2207      	movs	r2, #7
	return i2c_reg_read_byte(spec->bus, spec->addr, reg_addr, value);
   3afa8:	6800      	ldr	r0, [r0, #0]
   3afaa:	889b      	ldrh	r3, [r3, #4]
	msg[0].len = num_write;
   3afac:	9103      	str	r1, [sp, #12]
	msg[0].flags = I2C_MSG_WRITE;
   3afae:	f88d 4010 	strb.w	r4, [sp, #16]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   3afb2:	f88d 201c 	strb.w	r2, [sp, #28]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
   3afb6:	6882      	ldr	r2, [r0, #8]
   3afb8:	a902      	add	r1, sp, #8
   3afba:	6894      	ldr	r4, [r2, #8]
   3afbc:	2202      	movs	r2, #2
   3afbe:	47a0      	blx	r4
}
   3afc0:	b008      	add	sp, #32
   3afc2:	bd10      	pop	{r4, pc}

0003afc4 <i2c_write>:
{
   3afc4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	msg.len = num_bytes;
   3afc6:	e9cd 1201 	strd	r1, r2, [sp, #4]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
   3afca:	2202      	movs	r2, #2
   3afcc:	f88d 200c 	strb.w	r2, [sp, #12]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
   3afd0:	6882      	ldr	r2, [r0, #8]
   3afd2:	a901      	add	r1, sp, #4
   3afd4:	6894      	ldr	r4, [r2, #8]
   3afd6:	2201      	movs	r2, #1
   3afd8:	47a0      	blx	r4
}
   3afda:	b004      	add	sp, #16
   3afdc:	bd10      	pop	{r4, pc}

0003afde <set_wake.isra.0>:
static void set_wake(const struct device *dev, bool enable)
   3afde:	b510      	push	{r4, lr}
	gpio_pin_set_dt(&config->wake_gpio, enable);
   3afe0:	3018      	adds	r0, #24
static void set_wake(const struct device *dev, bool enable)
   3afe2:	460c      	mov	r4, r1
	gpio_pin_set_dt(&config->wake_gpio, enable);
   3afe4:	f7f4 feec 	bl	2fdc0 <gpio_pin_set_dt.isra.0>
	if (enable) {
   3afe8:	b124      	cbz	r4, 3aff4 <set_wake.isra.0+0x16>
	z_impl_k_busy_wait(usec_to_wait);
   3afea:	2032      	movs	r0, #50	; 0x32
}
   3afec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   3aff0:	f000 bef6 	b.w	3bde0 <z_impl_k_busy_wait>
   3aff4:	2014      	movs	r0, #20
   3aff6:	e7f9      	b.n	3afec <set_wake.isra.0+0xe>

0003aff8 <ccs811_sample_fetch>:
{
   3aff8:	b5f0      	push	{r4, r5, r6, r7, lr}
	const struct ccs811_config *config = dev->config;
   3affa:	6846      	ldr	r6, [r0, #4]
	struct ccs811_data *drv_data = dev->data;
   3affc:	6904      	ldr	r4, [r0, #16]
{
   3affe:	b085      	sub	sp, #20
	const uint8_t cmd = CCS811_REG_ALG_RESULT_DATA;
   3b000:	2302      	movs	r3, #2
	uint16_t buf[4] = { 0 };
   3b002:	2700      	movs	r7, #0
{
   3b004:	4605      	mov	r5, r0
	set_wake(dev, true);
   3b006:	2101      	movs	r1, #1
   3b008:	4630      	mov	r0, r6
	const uint8_t cmd = CCS811_REG_ALG_RESULT_DATA;
   3b00a:	f88d 3007 	strb.w	r3, [sp, #7]
	uint16_t buf[4] = { 0 };
   3b00e:	e9cd 7702 	strd	r7, r7, [sp, #8]
	set_wake(dev, true);
   3b012:	f7ff ffe4 	bl	3afde <set_wake.isra.0>
	rc = i2c_write_read_dt(&config->i2c, &cmd, sizeof(cmd), (uint8_t *)buf, sizeof(buf));
   3b016:	2308      	movs	r3, #8
   3b018:	eb0d 0203 	add.w	r2, sp, r3
   3b01c:	f10d 0107 	add.w	r1, sp, #7
   3b020:	4630      	mov	r0, r6
   3b022:	f7ff ff8c 	bl	3af3e <i2c_write_read_dt.constprop.0>
	set_wake(dev, false);
   3b026:	4639      	mov	r1, r7
	rc = i2c_write_read_dt(&config->i2c, &cmd, sizeof(cmd), (uint8_t *)buf, sizeof(buf));
   3b028:	4606      	mov	r6, r0
	set_wake(dev, false);
   3b02a:	6868      	ldr	r0, [r5, #4]
   3b02c:	f7ff ffd7 	bl	3afde <set_wake.isra.0>
	if (rc < 0) {
   3b030:	42be      	cmp	r6, r7
   3b032:	db1c      	blt.n	3b06e <ccs811_sample_fetch+0x76>
	rp->co2 = sys_be16_to_cpu(buf[0]);
   3b034:	f8bd 1008 	ldrh.w	r1, [sp, #8]
   3b038:	ba4b      	rev16	r3, r1
   3b03a:	8023      	strh	r3, [r4, #0]
	rp->voc = sys_be16_to_cpu(buf[1]);
   3b03c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   3b040:	ba5b      	rev16	r3, r3
   3b042:	8063      	strh	r3, [r4, #2]
	status = sys_le16_to_cpu(buf[2]); /* sic */
   3b044:	f8bd 300c 	ldrh.w	r3, [sp, #12]
	rp->status = status;
   3b048:	80e3      	strh	r3, [r4, #6]
	rp->raw = sys_be16_to_cpu(buf[3]);
   3b04a:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   3b04e:	ba52      	rev16	r2, r2
   3b050:	80a2      	strh	r2, [r4, #4]
	if ((drv_data->app_fw_ver <= 0x11)
   3b052:	7a62      	ldrb	r2, [r4, #9]
   3b054:	2a11      	cmp	r2, #17
   3b056:	d802      	bhi.n	3b05e <ccs811_sample_fetch+0x66>
	    && (rp->co2 != 0)) {
   3b058:	b109      	cbz	r1, 3b05e <ccs811_sample_fetch+0x66>
		status |= CCS811_STATUS_DATA_READY;
   3b05a:	f043 0308 	orr.w	r3, r3, #8
	return (status & CCS811_STATUS_DATA_READY) ? 0 : -EAGAIN;
   3b05e:	f013 0f08 	tst.w	r3, #8
   3b062:	bf0c      	ite	eq
   3b064:	f06f 000a 	mvneq.w	r0, #10
   3b068:	2000      	movne	r0, #0
}
   3b06a:	b005      	add	sp, #20
   3b06c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -EIO;
   3b06e:	f06f 0004 	mvn.w	r0, #4
   3b072:	e7fa      	b.n	3b06a <ccs811_sample_fetch+0x72>

0003b074 <z_log_msg_static_create.constprop.0>:
   3b074:	2300      	movs	r3, #0
   3b076:	f7eb b899 	b.w	261ac <z_impl_z_log_msg_static_create>

0003b07a <hts221_drdy_callback>:
{
   3b07a:	b510      	push	{r4, lr}
	handle_drdy(data->dev);
   3b07c:	f851 3c04 	ldr.w	r3, [r1, #-4]
	struct hts221_data *data = dev->data;
   3b080:	691c      	ldr	r4, [r3, #16]
	setup_drdy(dev, false);
   3b082:	6858      	ldr	r0, [r3, #4]
   3b084:	2100      	movs	r1, #0
   3b086:	f7f5 fa2d 	bl	304e4 <setup_drdy.isra.0>
	k_work_submit(&data->work);
   3b08a:	f104 002c 	add.w	r0, r4, #44	; 0x2c
}
   3b08e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_work_submit(&data->work);
   3b092:	f7fa beb3 	b.w	35dfc <k_work_submit>

0003b096 <hts221_work_cb>:
{
   3b096:	b538      	push	{r3, r4, r5, lr}
	process_drdy(data->dev);
   3b098:	f850 4c18 	ldr.w	r4, [r0, #-24]
	struct hts221_data *data = dev->data;
   3b09c:	6925      	ldr	r5, [r4, #16]
	if (data->data_ready_handler != NULL) {
   3b09e:	6aab      	ldr	r3, [r5, #40]	; 0x28
   3b0a0:	b15b      	cbz	r3, 3b0ba <hts221_work_cb+0x24>
		data->data_ready_handler(dev, &data->data_ready_trigger);
   3b0a2:	f105 0124 	add.w	r1, r5, #36	; 0x24
   3b0a6:	4620      	mov	r0, r4
   3b0a8:	4798      	blx	r3
	if (data->data_ready_handler != NULL) {
   3b0aa:	6aab      	ldr	r3, [r5, #40]	; 0x28
   3b0ac:	b12b      	cbz	r3, 3b0ba <hts221_work_cb+0x24>
		setup_drdy(dev, true);
   3b0ae:	6860      	ldr	r0, [r4, #4]
   3b0b0:	2101      	movs	r1, #1
}
   3b0b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		setup_drdy(dev, true);
   3b0b6:	f7f5 ba15 	b.w	304e4 <setup_drdy.isra.0>
}
   3b0ba:	bd38      	pop	{r3, r4, r5, pc}

0003b0bc <i2c_transfer>:
{
   3b0bc:	b410      	push	{r4}
	int res =  api->transfer(dev, msgs, num_msgs, addr);
   3b0be:	6884      	ldr	r4, [r0, #8]
   3b0c0:	68a4      	ldr	r4, [r4, #8]
   3b0c2:	46a4      	mov	ip, r4
}
   3b0c4:	bc10      	pop	{r4}
   3b0c6:	4760      	bx	ip

0003b0c8 <lis2dh_i2c_write_data>:
{
   3b0c8:	b530      	push	{r4, r5, lr}
   3b0ca:	b089      	sub	sp, #36	; 0x24
	return i2c_burst_write_dt(&cfg->bus_cfg.i2c, reg_addr | LIS2DH_AUTOINCREMENT_ADDR, value,
   3b0cc:	f061 017f 	orn	r1, r1, #127	; 0x7f
	const struct lis2dh_config *cfg = dev->config;
   3b0d0:	6844      	ldr	r4, [r0, #4]
	return i2c_burst_write_dt(&cfg->bus_cfg.i2c, reg_addr | LIS2DH_AUTOINCREMENT_ADDR, value,
   3b0d2:	f88d 1007 	strb.w	r1, [sp, #7]
	msg[0].buf = &start_addr;
   3b0d6:	f10d 0107 	add.w	r1, sp, #7
   3b0da:	9102      	str	r1, [sp, #8]
	msg[0].len = 1U;
   3b0dc:	2101      	movs	r1, #1
	return i2c_burst_write(spec->bus, spec->addr,
   3b0de:	6860      	ldr	r0, [r4, #4]
	msg[0].len = 1U;
   3b0e0:	9103      	str	r1, [sp, #12]
{
   3b0e2:	461d      	mov	r5, r3
	msg[0].flags = I2C_MSG_WRITE;
   3b0e4:	2100      	movs	r1, #0
	return i2c_burst_write(spec->bus, spec->addr,
   3b0e6:	8923      	ldrh	r3, [r4, #8]
	msg[0].flags = I2C_MSG_WRITE;
   3b0e8:	f88d 1010 	strb.w	r1, [sp, #16]
	return i2c_burst_write_dt(&cfg->bus_cfg.i2c, reg_addr | LIS2DH_AUTOINCREMENT_ADDR, value,
   3b0ec:	e9cd 2505 	strd	r2, r5, [sp, #20]
	return i2c_transfer(dev, msg, 2, dev_addr);
   3b0f0:	a902      	add	r1, sp, #8
	msg[1].flags = I2C_MSG_WRITE | I2C_MSG_STOP;
   3b0f2:	2202      	movs	r2, #2
   3b0f4:	f88d 201c 	strb.w	r2, [sp, #28]
	return i2c_transfer(dev, msg, 2, dev_addr);
   3b0f8:	f7ff ffe0 	bl	3b0bc <i2c_transfer>
}
   3b0fc:	b009      	add	sp, #36	; 0x24
   3b0fe:	bd30      	pop	{r4, r5, pc}

0003b100 <lis2dh_i2c_read_data>:
{
   3b100:	b530      	push	{r4, r5, lr}
   3b102:	b089      	sub	sp, #36	; 0x24
	return i2c_burst_read_dt(&cfg->bus_cfg.i2c, reg_addr | LIS2DH_AUTOINCREMENT_ADDR, value,
   3b104:	f061 017f 	orn	r1, r1, #127	; 0x7f
	const struct lis2dh_config *cfg = dev->config;
   3b108:	6844      	ldr	r4, [r0, #4]
	return i2c_burst_read_dt(&cfg->bus_cfg.i2c, reg_addr | LIS2DH_AUTOINCREMENT_ADDR, value,
   3b10a:	f88d 1007 	strb.w	r1, [sp, #7]
	msg[0].buf = (uint8_t *)write_buf;
   3b10e:	f10d 0107 	add.w	r1, sp, #7
{
   3b112:	461d      	mov	r5, r3
   3b114:	9102      	str	r1, [sp, #8]
	msg[0].len = num_write;
   3b116:	2101      	movs	r1, #1
	return i2c_burst_read(spec->bus, spec->addr,
   3b118:	6860      	ldr	r0, [r4, #4]
   3b11a:	8923      	ldrh	r3, [r4, #8]
	msg[0].len = num_write;
   3b11c:	9103      	str	r1, [sp, #12]
	return i2c_burst_read_dt(&cfg->bus_cfg.i2c, reg_addr | LIS2DH_AUTOINCREMENT_ADDR, value,
   3b11e:	e9cd 2505 	strd	r2, r5, [sp, #20]
	msg[0].flags = I2C_MSG_WRITE;
   3b122:	2100      	movs	r1, #0
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   3b124:	2207      	movs	r2, #7
	msg[0].flags = I2C_MSG_WRITE;
   3b126:	f88d 1010 	strb.w	r1, [sp, #16]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   3b12a:	f88d 201c 	strb.w	r2, [sp, #28]
	return i2c_transfer(dev, msg, 2, addr);
   3b12e:	a902      	add	r1, sp, #8
   3b130:	2202      	movs	r2, #2
   3b132:	f7ff ffc3 	bl	3b0bc <i2c_transfer>
}
   3b136:	b009      	add	sp, #36	; 0x24
   3b138:	bd30      	pop	{r4, r5, pc}

0003b13a <lis2dh_i2c_write_reg>:
{
   3b13a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	const struct lis2dh_config *cfg = dev->config;
   3b13c:	6843      	ldr	r3, [r0, #4]
	uint8_t tx_buf[2] = {reg_addr, value};
   3b13e:	f88d 2001 	strb.w	r2, [sp, #1]
	msg.len = num_bytes;
   3b142:	2202      	movs	r2, #2
	return i2c_reg_write_byte(spec->bus, spec->addr, reg_addr, value);
   3b144:	6858      	ldr	r0, [r3, #4]
	uint8_t tx_buf[2] = {reg_addr, value};
   3b146:	f88d 1000 	strb.w	r1, [sp]
	return i2c_reg_write_byte(spec->bus, spec->addr, reg_addr, value);
   3b14a:	891b      	ldrh	r3, [r3, #8]
	msg.len = num_bytes;
   3b14c:	9202      	str	r2, [sp, #8]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
   3b14e:	f88d 200c 	strb.w	r2, [sp, #12]
	return i2c_transfer(dev, &msg, 1, addr);
   3b152:	a901      	add	r1, sp, #4
   3b154:	2201      	movs	r2, #1
	msg.buf = (uint8_t *)buf;
   3b156:	f8cd d004 	str.w	sp, [sp, #4]
	return i2c_transfer(dev, &msg, 1, addr);
   3b15a:	f7ff ffaf 	bl	3b0bc <i2c_transfer>
}
   3b15e:	b005      	add	sp, #20
   3b160:	f85d fb04 	ldr.w	pc, [sp], #4

0003b164 <lis2dh_i2c_read_reg>:
{
   3b164:	b510      	push	{r4, lr}
   3b166:	b088      	sub	sp, #32
	const struct lis2dh_config *cfg = dev->config;
   3b168:	6843      	ldr	r3, [r0, #4]
	return i2c_reg_read_byte(spec->bus, spec->addr, reg_addr, value);
   3b16a:	f88d 1007 	strb.w	r1, [sp, #7]
	msg[0].buf = (uint8_t *)write_buf;
   3b16e:	f10d 0107 	add.w	r1, sp, #7
   3b172:	9102      	str	r1, [sp, #8]
	msg[0].len = num_write;
   3b174:	2101      	movs	r1, #1
	return i2c_reg_read_byte(spec->bus, spec->addr, reg_addr, value);
   3b176:	6858      	ldr	r0, [r3, #4]
   3b178:	891b      	ldrh	r3, [r3, #8]
	msg[0].len = num_write;
   3b17a:	9103      	str	r1, [sp, #12]
	msg[1].len = num_read;
   3b17c:	e9cd 2105 	strd	r2, r1, [sp, #20]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   3b180:	2207      	movs	r2, #7
   3b182:	f88d 201c 	strb.w	r2, [sp, #28]
	msg[0].flags = I2C_MSG_WRITE;
   3b186:	2400      	movs	r4, #0
	return i2c_transfer(dev, msg, 2, addr);
   3b188:	2202      	movs	r2, #2
   3b18a:	a902      	add	r1, sp, #8
	msg[0].flags = I2C_MSG_WRITE;
   3b18c:	f88d 4010 	strb.w	r4, [sp, #16]
	return i2c_transfer(dev, msg, 2, addr);
   3b190:	f7ff ff94 	bl	3b0bc <i2c_transfer>
}
   3b194:	b008      	add	sp, #32
   3b196:	bd10      	pop	{r4, pc}

0003b198 <lis2dh_i2c_update_reg>:
{
   3b198:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   3b19c:	4698      	mov	r8, r3
	const struct lis2dh_config *cfg = dev->config;
   3b19e:	6843      	ldr	r3, [r0, #4]
{
   3b1a0:	b088      	sub	sp, #32
 */
static inline int i2c_reg_update_byte_dt(const struct i2c_dt_spec *spec,
					 uint8_t reg_addr, uint8_t mask,
					 uint8_t value)
{
	return i2c_reg_update_byte(spec->bus, spec->addr,
   3b1a2:	f8d3 9004 	ldr.w	r9, [r3, #4]
   3b1a6:	f893 a008 	ldrb.w	sl, [r3, #8]
   3b1aa:	f88d 1004 	strb.w	r1, [sp, #4]
	msg[0].flags = I2C_MSG_WRITE;
   3b1ae:	2300      	movs	r3, #0
	msg[0].len = num_write;
   3b1b0:	2701      	movs	r7, #1
	msg[0].flags = I2C_MSG_WRITE;
   3b1b2:	f88d 3010 	strb.w	r3, [sp, #16]
	msg[1].buf = (uint8_t *)read_buf;
   3b1b6:	f10d 0303 	add.w	r3, sp, #3
	msg[1].len = num_read;
   3b1ba:	e9cd 3705 	strd	r3, r7, [sp, #20]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   3b1be:	2307      	movs	r3, #7
   3b1c0:	460e      	mov	r6, r1
   3b1c2:	4614      	mov	r4, r2
	msg[0].buf = (uint8_t *)write_buf;
   3b1c4:	ad01      	add	r5, sp, #4
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   3b1c6:	f88d 301c 	strb.w	r3, [sp, #28]
	return i2c_transfer(dev, msg, 2, addr);
   3b1ca:	2202      	movs	r2, #2
   3b1cc:	4653      	mov	r3, sl
   3b1ce:	a902      	add	r1, sp, #8
   3b1d0:	4648      	mov	r0, r9
	msg[0].buf = (uint8_t *)write_buf;
   3b1d2:	9502      	str	r5, [sp, #8]
	msg[0].len = num_write;
   3b1d4:	9703      	str	r7, [sp, #12]
	return i2c_transfer(dev, msg, 2, addr);
   3b1d6:	f7ff ff71 	bl	3b0bc <i2c_transfer>
	if (rc != 0) {
   3b1da:	b9b8      	cbnz	r0, 3b20c <lis2dh_i2c_update_reg+0x74>
	new_value = (old_value & ~mask) | (value & mask);
   3b1dc:	f89d 2003 	ldrb.w	r2, [sp, #3]
   3b1e0:	ea22 0304 	bic.w	r3, r2, r4
   3b1e4:	ea04 0408 	and.w	r4, r4, r8
   3b1e8:	431c      	orrs	r4, r3
	if (new_value == old_value) {
   3b1ea:	42a2      	cmp	r2, r4
   3b1ec:	d00e      	beq.n	3b20c <lis2dh_i2c_update_reg+0x74>
	msg.len = num_bytes;
   3b1ee:	2302      	movs	r3, #2
   3b1f0:	9303      	str	r3, [sp, #12]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
   3b1f2:	f88d 3010 	strb.w	r3, [sp, #16]
	return i2c_transfer(dev, &msg, 1, addr);
   3b1f6:	463a      	mov	r2, r7
   3b1f8:	4653      	mov	r3, sl
   3b1fa:	a902      	add	r1, sp, #8
   3b1fc:	4648      	mov	r0, r9
	uint8_t tx_buf[2] = {reg_addr, value};
   3b1fe:	f88d 6004 	strb.w	r6, [sp, #4]
   3b202:	f88d 4005 	strb.w	r4, [sp, #5]
	msg.buf = (uint8_t *)buf;
   3b206:	9502      	str	r5, [sp, #8]
	return i2c_transfer(dev, &msg, 1, addr);
   3b208:	f7ff ff58 	bl	3b0bc <i2c_transfer>
}
   3b20c:	b008      	add	sp, #32
   3b20e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0003b212 <z_impl_i2c_transfer>:
{
   3b212:	b410      	push	{r4}
	int res =  api->transfer(dev, msgs, num_msgs, addr);
   3b214:	6884      	ldr	r4, [r0, #8]
   3b216:	68a4      	ldr	r4, [r4, #8]
   3b218:	46a4      	mov	ip, r4
}
   3b21a:	bc10      	pop	{r4}
	int res =  api->transfer(dev, msgs, num_msgs, addr);
   3b21c:	4760      	bx	ip

0003b21e <i2c_reg_update_byte.constprop.0>:
static inline int i2c_reg_update_byte(const struct device *dev,
   3b21e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   3b222:	b088      	sub	sp, #32
   3b224:	4699      	mov	r9, r3
	msg[0].flags = I2C_MSG_WRITE;
   3b226:	2300      	movs	r3, #0
	msg[0].len = num_write;
   3b228:	f04f 0801 	mov.w	r8, #1
	msg[0].flags = I2C_MSG_WRITE;
   3b22c:	f88d 3010 	strb.w	r3, [sp, #16]
	msg[1].buf = (uint8_t *)read_buf;
   3b230:	f10d 0303 	add.w	r3, sp, #3
	msg[1].len = num_read;
   3b234:	e9cd 3805 	strd	r3, r8, [sp, #20]
   3b238:	f04f 0a10 	mov.w	sl, #16
	msg[0].buf = (uint8_t *)write_buf;
   3b23c:	ae01      	add	r6, sp, #4
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   3b23e:	2307      	movs	r3, #7
static inline int i2c_reg_update_byte(const struct device *dev,
   3b240:	4607      	mov	r7, r0
   3b242:	460d      	mov	r5, r1
   3b244:	4614      	mov	r4, r2
   3b246:	f88d a004 	strb.w	sl, [sp, #4]
	msg[0].buf = (uint8_t *)write_buf;
   3b24a:	9602      	str	r6, [sp, #8]
	msg[0].len = num_write;
   3b24c:	f8cd 800c 	str.w	r8, [sp, #12]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   3b250:	f88d 301c 	strb.w	r3, [sp, #28]
	return z_impl_i2c_transfer(dev, msgs, num_msgs, addr);
   3b254:	2202      	movs	r2, #2
   3b256:	460b      	mov	r3, r1
   3b258:	a902      	add	r1, sp, #8
   3b25a:	f7ff ffda 	bl	3b212 <z_impl_i2c_transfer>
	if (rc != 0) {
   3b25e:	b9b8      	cbnz	r0, 3b290 <i2c_reg_update_byte.constprop.0+0x72>
	new_value = (old_value & ~mask) | (value & mask);
   3b260:	f89d 2003 	ldrb.w	r2, [sp, #3]
   3b264:	ea22 0304 	bic.w	r3, r2, r4
   3b268:	ea04 0409 	and.w	r4, r4, r9
   3b26c:	431c      	orrs	r4, r3
	if (new_value == old_value) {
   3b26e:	42a2      	cmp	r2, r4
   3b270:	d00e      	beq.n	3b290 <i2c_reg_update_byte.constprop.0+0x72>
	msg.len = num_bytes;
   3b272:	2302      	movs	r3, #2
	uint8_t tx_buf[2] = {reg_addr, value};
   3b274:	f88d a004 	strb.w	sl, [sp, #4]
   3b278:	f88d 4005 	strb.w	r4, [sp, #5]
	msg.buf = (uint8_t *)buf;
   3b27c:	9602      	str	r6, [sp, #8]
	msg.len = num_bytes;
   3b27e:	9303      	str	r3, [sp, #12]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
   3b280:	f88d 3010 	strb.w	r3, [sp, #16]
   3b284:	462b      	mov	r3, r5
   3b286:	4642      	mov	r2, r8
   3b288:	a902      	add	r1, sp, #8
   3b28a:	4638      	mov	r0, r7
   3b28c:	f7ff ffc1 	bl	3b212 <z_impl_i2c_transfer>
}
   3b290:	b008      	add	sp, #32
   3b292:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0003b296 <lps22hb_init>:
{
   3b296:	b570      	push	{r4, r5, r6, lr}
	if (!device_is_ready(config->i2c.bus)) {
   3b298:	6843      	ldr	r3, [r0, #4]
{
   3b29a:	b088      	sub	sp, #32
   3b29c:	4605      	mov	r5, r0
	if (!device_is_ready(config->i2c.bus)) {
   3b29e:	6818      	ldr	r0, [r3, #0]
   3b2a0:	f000 fc7c 	bl	3bb9c <z_device_is_ready>
   3b2a4:	b920      	cbnz	r0, 3b2b0 <lps22hb_init+0x1a>
}
   3b2a6:	b008      	add	sp, #32
   3b2a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   3b2ac:	f7f5 bc94 	b.w	30bd8 <lps22hb_init.part.0>
	const struct lps22hb_config *config = dev->config;
   3b2b0:	686e      	ldr	r6, [r5, #4]
	return i2c_reg_read_byte(spec->bus, spec->addr, reg_addr, value);
   3b2b2:	220f      	movs	r2, #15
   3b2b4:	f88d 2007 	strb.w	r2, [sp, #7]
	msg[0].buf = (uint8_t *)write_buf;
   3b2b8:	f10d 0207 	add.w	r2, sp, #7
	return i2c_reg_read_byte(spec->bus, spec->addr, reg_addr, value);
   3b2bc:	6830      	ldr	r0, [r6, #0]
	msg[0].buf = (uint8_t *)write_buf;
   3b2be:	9202      	str	r2, [sp, #8]
	msg[1].buf = (uint8_t *)read_buf;
   3b2c0:	f10d 0106 	add.w	r1, sp, #6
	msg[0].len = num_write;
   3b2c4:	2201      	movs	r2, #1
	return i2c_reg_read_byte(spec->bus, spec->addr, reg_addr, value);
   3b2c6:	88b3      	ldrh	r3, [r6, #4]
	msg[0].len = num_write;
   3b2c8:	9203      	str	r2, [sp, #12]
	msg[1].len = num_read;
   3b2ca:	e9cd 1205 	strd	r1, r2, [sp, #20]
	msg[0].flags = I2C_MSG_WRITE;
   3b2ce:	2400      	movs	r4, #0
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   3b2d0:	2207      	movs	r2, #7
	msg[0].flags = I2C_MSG_WRITE;
   3b2d2:	f88d 4010 	strb.w	r4, [sp, #16]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   3b2d6:	f88d 201c 	strb.w	r2, [sp, #28]
   3b2da:	2202      	movs	r2, #2
   3b2dc:	a902      	add	r1, sp, #8
   3b2de:	f7ff ff98 	bl	3b212 <z_impl_i2c_transfer>
	if (i2c_reg_read_byte_dt(&config->i2c, LPS22HB_REG_WHO_AM_I,
   3b2e2:	42a0      	cmp	r0, r4
   3b2e4:	db03      	blt.n	3b2ee <lps22hb_init+0x58>
	if (chip_id != LPS22HB_VAL_WHO_AM_I) {
   3b2e6:	f89d 3006 	ldrb.w	r3, [sp, #6]
   3b2ea:	2bb1      	cmp	r3, #177	; 0xb1
   3b2ec:	d003      	beq.n	3b2f6 <lps22hb_init+0x60>
		return -EIO;
   3b2ee:	f06f 0004 	mvn.w	r0, #4
}
   3b2f2:	b008      	add	sp, #32
   3b2f4:	bd70      	pop	{r4, r5, r6, pc}
	if (lps22hb_set_odr_raw(dev, LPS22HB_DEFAULT_SAMPLING_RATE) < 0) {
   3b2f6:	6868      	ldr	r0, [r5, #4]
	return i2c_reg_update_byte(spec->bus, spec->addr,
   3b2f8:	2330      	movs	r3, #48	; 0x30
   3b2fa:	7901      	ldrb	r1, [r0, #4]
   3b2fc:	6800      	ldr	r0, [r0, #0]
   3b2fe:	2270      	movs	r2, #112	; 0x70
   3b300:	f7ff ff8d 	bl	3b21e <i2c_reg_update_byte.constprop.0>
   3b304:	2800      	cmp	r0, #0
   3b306:	dbf2      	blt.n	3b2ee <lps22hb_init+0x58>
   3b308:	2302      	movs	r3, #2
   3b30a:	7931      	ldrb	r1, [r6, #4]
   3b30c:	6830      	ldr	r0, [r6, #0]
   3b30e:	461a      	mov	r2, r3
   3b310:	f7ff ff85 	bl	3b21e <i2c_reg_update_byte.constprop.0>
	if (i2c_reg_update_byte_dt(&config->i2c, LPS22HB_REG_CTRL_REG1,
   3b314:	2800      	cmp	r0, #0
   3b316:	dbea      	blt.n	3b2ee <lps22hb_init+0x58>
	return 0;
   3b318:	4620      	mov	r0, r4
   3b31a:	e7ea      	b.n	3b2f2 <lps22hb_init+0x5c>

0003b31c <stmemsc_i2c_read>:

#include "stmemsc.h"

int stmemsc_i2c_read(const struct i2c_dt_spec *stmemsc,
			     uint8_t reg_addr, uint8_t *value, uint8_t len)
{
   3b31c:	b530      	push	{r4, r5, lr}
   3b31e:	b089      	sub	sp, #36	; 0x24
   3b320:	4604      	mov	r4, r0
	return i2c_burst_read_dt(stmemsc, reg_addr, value, len);
   3b322:	f88d 1007 	strb.w	r1, [sp, #7]
	msg[0].buf = (uint8_t *)write_buf;
   3b326:	f10d 0107 	add.w	r1, sp, #7
{
   3b32a:	461d      	mov	r5, r3
   3b32c:	9102      	str	r1, [sp, #8]
	msg[0].len = num_write;
   3b32e:	2101      	movs	r1, #1
	return i2c_burst_read_dt(stmemsc, reg_addr, value, len);
   3b330:	e9cd 2505 	strd	r2, r5, [sp, #20]
   3b334:	9103      	str	r1, [sp, #12]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   3b336:	2207      	movs	r2, #7
	msg[0].flags = I2C_MSG_WRITE;
   3b338:	2100      	movs	r1, #0
	return i2c_burst_read(spec->bus, spec->addr,
   3b33a:	6800      	ldr	r0, [r0, #0]
   3b33c:	88a3      	ldrh	r3, [r4, #4]
	msg[0].flags = I2C_MSG_WRITE;
   3b33e:	f88d 1010 	strb.w	r1, [sp, #16]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   3b342:	f88d 201c 	strb.w	r2, [sp, #28]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
   3b346:	6882      	ldr	r2, [r0, #8]
   3b348:	a902      	add	r1, sp, #8
   3b34a:	6894      	ldr	r4, [r2, #8]
   3b34c:	2202      	movs	r2, #2
   3b34e:	47a0      	blx	r4
}
   3b350:	b009      	add	sp, #36	; 0x24
   3b352:	bd30      	pop	{r4, r5, pc}

0003b354 <stmemsc_i2c_write>:

int stmemsc_i2c_write(const struct i2c_dt_spec *stmemsc,
			      uint8_t reg_addr, uint8_t *value, uint8_t len)
{
   3b354:	b530      	push	{r4, r5, lr}
   3b356:	b089      	sub	sp, #36	; 0x24
   3b358:	4604      	mov	r4, r0
	return i2c_burst_write_dt(stmemsc, reg_addr, value, len);
   3b35a:	f88d 1007 	strb.w	r1, [sp, #7]
	msg[0].buf = &start_addr;
   3b35e:	f10d 0107 	add.w	r1, sp, #7
{
   3b362:	461d      	mov	r5, r3
   3b364:	9102      	str	r1, [sp, #8]
	msg[0].len = 1U;
   3b366:	2101      	movs	r1, #1
	return i2c_burst_write_dt(stmemsc, reg_addr, value, len);
   3b368:	e9cd 2505 	strd	r2, r5, [sp, #20]
   3b36c:	9103      	str	r1, [sp, #12]
	msg[1].flags = I2C_MSG_WRITE | I2C_MSG_STOP;
   3b36e:	2202      	movs	r2, #2
	msg[0].flags = I2C_MSG_WRITE;
   3b370:	2100      	movs	r1, #0
	return i2c_burst_write(spec->bus, spec->addr,
   3b372:	6800      	ldr	r0, [r0, #0]
   3b374:	88a3      	ldrh	r3, [r4, #4]
	msg[0].flags = I2C_MSG_WRITE;
   3b376:	f88d 1010 	strb.w	r1, [sp, #16]
	msg[1].flags = I2C_MSG_WRITE | I2C_MSG_STOP;
   3b37a:	f88d 201c 	strb.w	r2, [sp, #28]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
   3b37e:	6881      	ldr	r1, [r0, #8]
   3b380:	688c      	ldr	r4, [r1, #8]
   3b382:	a902      	add	r1, sp, #8
   3b384:	47a0      	blx	r4
}
   3b386:	b009      	add	sp, #36	; 0x24
   3b388:	bd30      	pop	{r4, r5, pc}

0003b38a <disable_onoff>:
	return onoff_release(&data->mgr);
   3b38a:	6900      	ldr	r0, [r0, #16]
   3b38c:	3004      	adds	r0, #4
   3b38e:	f7e9 bc53 	b.w	24c38 <onoff_release>

0003b392 <enable_onoff>:
	return onoff_request(&data->mgr, cli);
   3b392:	6900      	ldr	r0, [r0, #16]
   3b394:	3004      	adds	r0, #4
   3b396:	f7e9 bbcd 	b.w	24b34 <onoff_request>

0003b39a <disable_sync>:
{
   3b39a:	b530      	push	{r4, r5, lr}
	int rc = onoff_sync_lock(&data->srv, &key);
   3b39c:	6904      	ldr	r4, [r0, #16]
	const struct driver_config *cfg = dev->config;
   3b39e:	6845      	ldr	r5, [r0, #4]
{
   3b3a0:	b085      	sub	sp, #20
	int rc = onoff_sync_lock(&data->srv, &key);
   3b3a2:	a903      	add	r1, sp, #12
   3b3a4:	4620      	mov	r0, r4
   3b3a6:	f7e9 fc9d 	bl	24ce4 <onoff_sync_lock>
	if  ((cfg->options & OPTION_ALWAYS_ON) != 0) {
   3b3aa:	7d29      	ldrb	r1, [r5, #20]
   3b3ac:	f011 0101 	ands.w	r1, r1, #1
	int rc = onoff_sync_lock(&data->srv, &key);
   3b3b0:	4603      	mov	r3, r0
	if  ((cfg->options & OPTION_ALWAYS_ON) != 0) {
   3b3b2:	d114      	bne.n	3b3de <disable_sync+0x44>
	} else if (rc == 1) {
   3b3b4:	2801      	cmp	r0, #1
   3b3b6:	d10c      	bne.n	3b3d2 <disable_sync+0x38>
		rc = gpio_pin_set_dt(&cfg->enable, false);
   3b3b8:	f105 000c 	add.w	r0, r5, #12
   3b3bc:	f7f5 fc24 	bl	30c08 <gpio_pin_set_dt>
   3b3c0:	4603      	mov	r3, r0
	return onoff_sync_finalize(&data->srv, key, NULL, rc, false);
   3b3c2:	2200      	movs	r2, #0
   3b3c4:	9903      	ldr	r1, [sp, #12]
   3b3c6:	9200      	str	r2, [sp, #0]
   3b3c8:	4620      	mov	r0, r4
   3b3ca:	f7e9 fcad 	bl	24d28 <onoff_sync_finalize>
}
   3b3ce:	b005      	add	sp, #20
   3b3d0:	bd30      	pop	{r4, r5, pc}
		rc = -EINVAL;
   3b3d2:	2800      	cmp	r0, #0
   3b3d4:	bf14      	ite	ne
   3b3d6:	4603      	movne	r3, r0
   3b3d8:	f06f 0315 	mvneq.w	r3, #21
   3b3dc:	e7f1      	b.n	3b3c2 <disable_sync+0x28>
		rc = 0;
   3b3de:	2300      	movs	r3, #0
   3b3e0:	e7ef      	b.n	3b3c2 <disable_sync+0x28>

0003b3e2 <enable_sync>:
{
   3b3e2:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	int rc = onoff_sync_lock(&data->srv, &key);
   3b3e4:	6905      	ldr	r5, [r0, #16]
	const struct driver_config *cfg = dev->config;
   3b3e6:	6846      	ldr	r6, [r0, #4]
{
   3b3e8:	460c      	mov	r4, r1
	int rc = onoff_sync_lock(&data->srv, &key);
   3b3ea:	4628      	mov	r0, r5
   3b3ec:	a903      	add	r1, sp, #12
   3b3ee:	f7e9 fc79 	bl	24ce4 <onoff_sync_lock>
	if ((rc == 0)
   3b3f2:	4603      	mov	r3, r0
   3b3f4:	b940      	cbnz	r0, 3b408 <enable_sync+0x26>
	    && ((cfg->options & OPTION_ALWAYS_ON) == 0)) {
   3b3f6:	7d32      	ldrb	r2, [r6, #20]
   3b3f8:	07d2      	lsls	r2, r2, #31
   3b3fa:	d405      	bmi.n	3b408 <enable_sync+0x26>
		rc = gpio_pin_set_dt(&cfg->enable, true);
   3b3fc:	2101      	movs	r1, #1
   3b3fe:	f106 000c 	add.w	r0, r6, #12
   3b402:	f7f5 fc01 	bl	30c08 <gpio_pin_set_dt>
   3b406:	4603      	mov	r3, r0
	return onoff_sync_finalize(&data->srv, key, cli, rc, true);
   3b408:	2201      	movs	r2, #1
   3b40a:	9200      	str	r2, [sp, #0]
   3b40c:	9903      	ldr	r1, [sp, #12]
   3b40e:	4622      	mov	r2, r4
   3b410:	4628      	mov	r0, r5
   3b412:	f7e9 fc89 	bl	24d28 <onoff_sync_finalize>
}
   3b416:	b004      	add	sp, #16
   3b418:	bd70      	pop	{r4, r5, r6, pc}

0003b41a <onoff_worker>:
{
   3b41a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (data->task == WORK_TASK_ENABLE) {
   3b41e:	f890 1034 	ldrb.w	r1, [r0, #52]	; 0x34
	const struct driver_config *cfg = data->dev->config;
   3b422:	f850 3c28 	ldr.w	r3, [r0, #-40]
	onoff_notify_fn notify = data->notify;
   3b426:	6b07      	ldr	r7, [r0, #48]	; 0x30
	const struct driver_config *cfg = data->dev->config;
   3b428:	685d      	ldr	r5, [r3, #4]
	if (data->task == WORK_TASK_ENABLE) {
   3b42a:	2901      	cmp	r1, #1
{
   3b42c:	4604      	mov	r4, r0
	struct driver_data_onoff *data
   3b42e:	f1a0 0628 	sub.w	r6, r0, #40	; 0x28
	if (data->task == WORK_TASK_ENABLE) {
   3b432:	d10f      	bne.n	3b454 <onoff_worker+0x3a>
		rc = gpio_pin_set_dt(&cfg->enable, true);
   3b434:	f105 000c 	add.w	r0, r5, #12
   3b438:	f7f5 fbe6 	bl	30c08 <gpio_pin_set_dt>
		delay_us = cfg->startup_delay_us;
   3b43c:	686a      	ldr	r2, [r5, #4]
		rc = gpio_pin_set_dt(&cfg->enable, true);
   3b43e:	4603      	mov	r3, r0
	data->notify = NULL;
   3b440:	2100      	movs	r1, #0
   3b442:	6321      	str	r1, [r4, #48]	; 0x30
	data->task = WORK_TASK_UNDEFINED;
   3b444:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
	finalize_transition(data, notify, delay_us, rc);
   3b448:	4630      	mov	r0, r6
   3b44a:	4639      	mov	r1, r7
}
   3b44c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	finalize_transition(data, notify, delay_us, rc);
   3b450:	f7f5 bc04 	b.w	30c5c <finalize_transition>
	} else if (data->task == WORK_TASK_DISABLE) {
   3b454:	2902      	cmp	r1, #2
   3b456:	d107      	bne.n	3b468 <onoff_worker+0x4e>
		rc = gpio_pin_set_dt(&cfg->enable, false);
   3b458:	2100      	movs	r1, #0
   3b45a:	f105 000c 	add.w	r0, r5, #12
   3b45e:	f7f5 fbd3 	bl	30c08 <gpio_pin_set_dt>
		delay_us = cfg->off_on_delay_us;
   3b462:	68aa      	ldr	r2, [r5, #8]
		rc = gpio_pin_set_dt(&cfg->enable, false);
   3b464:	4603      	mov	r3, r0
		delay_us = cfg->off_on_delay_us;
   3b466:	e7eb      	b.n	3b440 <onoff_worker+0x26>
	int rc = 0;
   3b468:	2300      	movs	r3, #0
	uint32_t delay_us = 0;
   3b46a:	461a      	mov	r2, r3
   3b46c:	e7e8      	b.n	3b440 <onoff_worker+0x26>

0003b46e <erase_op>:
{
   3b46e:	b570      	push	{r4, r5, r6, lr}
   3b470:	4604      	mov	r4, r0
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   3b472:	f000 fa85 	bl	3b980 <nrfx_nvmc_flash_page_size_get>
	if (e_ctx->enable_time_limit) {
   3b476:	7b23      	ldrb	r3, [r4, #12]
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   3b478:	4605      	mov	r5, r0
	if (e_ctx->enable_time_limit) {
   3b47a:	b10b      	cbz	r3, 3b480 <erase_op+0x12>
		nrf_flash_sync_get_timestamp_begin();
   3b47c:	f000 f9d1 	bl	3b822 <nrf_flash_sync_get_timestamp_begin>
{
   3b480:	2600      	movs	r6, #0
		(void)nrfx_nvmc_page_erase(e_ctx->flash_addr);
   3b482:	6860      	ldr	r0, [r4, #4]
   3b484:	f7f8 fd3c 	bl	33f00 <nrfx_nvmc_page_erase>
		e_ctx->len -= pg_size;
   3b488:	68a3      	ldr	r3, [r4, #8]
   3b48a:	1b5b      	subs	r3, r3, r5
   3b48c:	60a3      	str	r3, [r4, #8]
		e_ctx->flash_addr += pg_size;
   3b48e:	6863      	ldr	r3, [r4, #4]
   3b490:	442b      	add	r3, r5
   3b492:	6063      	str	r3, [r4, #4]
		if (e_ctx->enable_time_limit) {
   3b494:	7b23      	ldrb	r3, [r4, #12]
		i++;
   3b496:	3601      	adds	r6, #1
		if (e_ctx->enable_time_limit) {
   3b498:	b93b      	cbnz	r3, 3b4aa <erase_op+0x3c>
	} while (e_ctx->len > 0);
   3b49a:	68a3      	ldr	r3, [r4, #8]
   3b49c:	2b00      	cmp	r3, #0
   3b49e:	d1f0      	bne.n	3b482 <erase_op+0x14>
	return (e_ctx->len > 0) ? FLASH_OP_ONGOING : FLASH_OP_DONE;
   3b4a0:	68a0      	ldr	r0, [r4, #8]
}
   3b4a2:	3800      	subs	r0, #0
   3b4a4:	bf18      	it	ne
   3b4a6:	2001      	movne	r0, #1
   3b4a8:	bd70      	pop	{r4, r5, r6, pc}
			if (nrf_flash_sync_check_time_limit(i)) {
   3b4aa:	4630      	mov	r0, r6
   3b4ac:	f7f7 ff94 	bl	333d8 <nrf_flash_sync_check_time_limit>
   3b4b0:	2800      	cmp	r0, #0
   3b4b2:	d0f2      	beq.n	3b49a <erase_op+0x2c>
   3b4b4:	e7f4      	b.n	3b4a0 <erase_op+0x32>

0003b4b6 <is_regular_addr_valid>:
{
   3b4b6:	b538      	push	{r3, r4, r5, lr}
   3b4b8:	4605      	mov	r5, r0
   3b4ba:	460c      	mov	r4, r1
	return is_within_bounds(addr, len, 0, nrfx_nvmc_flash_size_get());
   3b4bc:	f000 fa5a 	bl	3b974 <nrfx_nvmc_flash_size_get>
			(addr < (boundary_start + boundary_size)) &&
   3b4c0:	2d00      	cmp	r5, #0
   3b4c2:	db07      	blt.n	3b4d4 <is_regular_addr_valid+0x1e>
	return (addr >= boundary_start &&
   3b4c4:	42a8      	cmp	r0, r5
   3b4c6:	d905      	bls.n	3b4d4 <is_regular_addr_valid+0x1e>
			(len <= (boundary_start + boundary_size - addr)));
   3b4c8:	1b40      	subs	r0, r0, r5
			(addr < (boundary_start + boundary_size)) &&
   3b4ca:	4284      	cmp	r4, r0
   3b4cc:	bf8c      	ite	hi
   3b4ce:	2000      	movhi	r0, #0
   3b4d0:	2001      	movls	r0, #1
}
   3b4d2:	bd38      	pop	{r3, r4, r5, pc}
			(addr < (boundary_start + boundary_size)) &&
   3b4d4:	2000      	movs	r0, #0
   3b4d6:	e7fc      	b.n	3b4d2 <is_regular_addr_valid+0x1c>

0003b4d8 <flash_nrf_read>:
{
   3b4d8:	b570      	push	{r4, r5, r6, lr}
   3b4da:	460d      	mov	r5, r1
	if (is_regular_addr_valid(addr, len)) {
   3b4dc:	4628      	mov	r0, r5
   3b4de:	4619      	mov	r1, r3
{
   3b4e0:	4616      	mov	r6, r2
   3b4e2:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
   3b4e4:	f7ff ffe7 	bl	3b4b6 <is_regular_addr_valid>
   3b4e8:	b928      	cbnz	r0, 3b4f6 <flash_nrf_read+0x1e>
   3b4ea:	4621      	mov	r1, r4
   3b4ec:	4628      	mov	r0, r5
}
   3b4ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   3b4f2:	f7f5 bd93 	b.w	3101c <flash_nrf_read.part.0>
	if (!len) {
   3b4f6:	b124      	cbz	r4, 3b502 <flash_nrf_read+0x2a>
	memcpy(data, (void *)addr, len);
   3b4f8:	4622      	mov	r2, r4
   3b4fa:	4629      	mov	r1, r5
   3b4fc:	4630      	mov	r0, r6
   3b4fe:	f7fd ff57 	bl	393b0 <memcpy>
}
   3b502:	2000      	movs	r0, #0
   3b504:	bd70      	pop	{r4, r5, r6, pc}

0003b506 <uarte_nrfx_config_get>:
	struct uarte_nrfx_data *data = dev->data;
   3b506:	6902      	ldr	r2, [r0, #16]
{
   3b508:	460b      	mov	r3, r1
	*cfg = data->uart_config;
   3b50a:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   3b50e:	e883 0003 	stmia.w	r3, {r0, r1}
}
   3b512:	2000      	movs	r0, #0
   3b514:	4770      	bx	lr

0003b516 <uarte_nrfx_err_check>:
	return config->uarte_regs;
   3b516:	6843      	ldr	r3, [r0, #4]
   3b518:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   3b51a:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   3b51e:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   3b522:	4770      	bx	lr

0003b524 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
   3b524:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = dev->data;
   3b526:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
   3b528:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3b52a:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   3b52e:	b150      	cbz	r0, 3b546 <uarte_nrfx_poll_in+0x22>
	*c = *data->rx_data;
   3b530:	6952      	ldr	r2, [r2, #20]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3b532:	2000      	movs	r0, #0
   3b534:	7812      	ldrb	r2, [r2, #0]
   3b536:	700a      	strb	r2, [r1, #0]
   3b538:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   3b53c:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3b540:	2201      	movs	r2, #1
   3b542:	601a      	str	r2, [r3, #0]
	return 0;
   3b544:	4770      	bx	lr
		return -1;
   3b546:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   3b54a:	4770      	bx	lr

0003b54c <is_tx_ready.isra.0>:
	return config->uarte_regs;
   3b54c:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
   3b54e:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3b550:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   3b554:	b940      	cbnz	r0, 3b568 <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   3b556:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   3b558:	079b      	lsls	r3, r3, #30
   3b55a:	d406      	bmi.n	3b56a <is_tx_ready.isra.0+0x1e>
   3b55c:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
   3b560:	3800      	subs	r0, #0
   3b562:	bf18      	it	ne
   3b564:	2001      	movne	r0, #1
   3b566:	4770      	bx	lr
   3b568:	2001      	movs	r0, #1
}
   3b56a:	4770      	bx	lr

0003b56c <uarte_nrfx_isr_int>:
	const struct uarte_nrfx_config *config = dev->config;
   3b56c:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
   3b56e:	6813      	ldr	r3, [r2, #0]
    return p_reg->INTENSET & mask;
   3b570:	f8d3 1304 	ldr.w	r1, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   3b574:	05c9      	lsls	r1, r1, #23
   3b576:	d518      	bpl.n	3b5aa <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3b578:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   3b57c:	b1a9      	cbz	r1, 3b5aa <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
   3b57e:	f04f 0040 	mov.w	r0, #64	; 0x40
   3b582:	f3ef 8111 	mrs	r1, BASEPRI
   3b586:	f380 8812 	msr	BASEPRI_MAX, r0
   3b58a:	f3bf 8f6f 	isb	sy
   3b58e:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   3b592:	b130      	cbz	r0, 3b5a2 <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3b594:	2000      	movs	r0, #0
   3b596:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
   3b59a:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3b59e:	2001      	movs	r0, #1
   3b5a0:	60d8      	str	r0, [r3, #12]
	__asm__ volatile(
   3b5a2:	f381 8811 	msr	BASEPRI, r1
   3b5a6:	f3bf 8f6f 	isb	sy
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   3b5aa:	6852      	ldr	r2, [r2, #4]
   3b5ac:	06d2      	lsls	r2, r2, #27
   3b5ae:	d515      	bpl.n	3b5dc <uarte_nrfx_isr_int+0x70>
	__asm__ volatile(
   3b5b0:	f04f 0140 	mov.w	r1, #64	; 0x40
   3b5b4:	f3ef 8211 	mrs	r2, BASEPRI
   3b5b8:	f381 8812 	msr	BASEPRI_MAX, r1
   3b5bc:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3b5c0:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   3b5c4:	b111      	cbz	r1, 3b5cc <uarte_nrfx_isr_int+0x60>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   3b5c6:	2100      	movs	r1, #0
   3b5c8:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_reg->INTENCLR = mask;
   3b5cc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   3b5d0:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
	__asm__ volatile(
   3b5d4:	f382 8811 	msr	BASEPRI, r2
   3b5d8:	f3bf 8f6f 	isb	sy
}
   3b5dc:	4770      	bx	lr

0003b5de <entropy_bt_init>:

static int entropy_bt_init(const struct device *dev)
{
	/* Nothing to do */
	return 0;
}
   3b5de:	2000      	movs	r0, #0
   3b5e0:	4770      	bx	lr

0003b5e2 <entropy_bt_get_entropy>:

static int entropy_bt_get_entropy(const struct device *dev,
				  uint8_t *buffer, uint16_t length)
{
   3b5e2:	b538      	push	{r3, r4, r5, lr}
   3b5e4:	460c      	mov	r4, r1
   3b5e6:	4615      	mov	r5, r2
	if (!bt_is_ready()) {
   3b5e8:	f7ee f898 	bl	2971c <bt_is_ready>
   3b5ec:	b128      	cbz	r0, 3b5fa <entropy_bt_get_entropy+0x18>
		return -EAGAIN;
	}

	return bt_hci_le_rand(buffer, length);
   3b5ee:	4629      	mov	r1, r5
   3b5f0:	4620      	mov	r0, r4
}
   3b5f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_hci_le_rand(buffer, length);
   3b5f6:	f7ed b9b3 	b.w	28960 <bt_hci_le_rand>
}
   3b5fa:	f06f 000a 	mvn.w	r0, #10
   3b5fe:	bd38      	pop	{r3, r4, r5, pc}

0003b600 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   3b600:	4770      	bx	lr

0003b602 <sys_clock_cycle_get_32>:
{
   3b602:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
   3b604:	f7f6 f9c8 	bl	31998 <z_nrf_rtc_timer_read>
}
   3b608:	bd08      	pop	{r3, pc}

0003b60a <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
   3b60a:	b570      	push	{r4, r5, r6, lr}
	*state = &config->states[0];
   3b60c:	6843      	ldr	r3, [r0, #4]
	while (*state <= &config->states[config->state_cnt - 1U]) {
   3b60e:	f06f 4660 	mvn.w	r6, #3758096384	; 0xe0000000
	*state = &config->states[0];
   3b612:	6013      	str	r3, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
   3b614:	7a05      	ldrb	r5, [r0, #8]
   3b616:	6844      	ldr	r4, [r0, #4]
   3b618:	4435      	add	r5, r6
   3b61a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   3b61e:	42a3      	cmp	r3, r4
   3b620:	d902      	bls.n	3b628 <pinctrl_lookup_state+0x1e>
		}

		(*state)++;
	}

	return -ENOENT;
   3b622:	f06f 0001 	mvn.w	r0, #1
}
   3b626:	bd70      	pop	{r4, r5, r6, pc}
		if (id == (*state)->id) {
   3b628:	795c      	ldrb	r4, [r3, #5]
   3b62a:	428c      	cmp	r4, r1
   3b62c:	d001      	beq.n	3b632 <pinctrl_lookup_state+0x28>
		(*state)++;
   3b62e:	3308      	adds	r3, #8
   3b630:	e7ef      	b.n	3b612 <pinctrl_lookup_state+0x8>
			return 0;
   3b632:	2000      	movs	r0, #0
   3b634:	e7f7      	b.n	3b626 <pinctrl_lookup_state+0x1c>

0003b636 <pinctrl_configure_pins>:
#define NRF_PSEL_QSPI(reg, line) ((NRF_QSPI_Type *)reg)->PSEL.line
#endif

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
   3b636:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3b63a:	4690      	mov	r8, r2
   3b63c:	b085      	sub	sp, #20
   3b63e:	4681      	mov	r9, r0
   3b640:	eb00 0681 	add.w	r6, r0, r1, lsl #2
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   3b644:	2701      	movs	r7, #1
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   3b646:	454e      	cmp	r6, r9
   3b648:	d103      	bne.n	3b652 <pinctrl_configure_pins+0x1c>
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
				     drive, NRF_GPIO_PIN_NOSENSE);
		}
	}

	return 0;
   3b64a:	2000      	movs	r0, #0
}
   3b64c:	b005      	add	sp, #20
   3b64e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
   3b652:	f8d9 3000 	ldr.w	r3, [r9]
		uint32_t pin = NRF_GET_PIN(pins[i]);
   3b656:	f003 047f 	and.w	r4, r3, #127	; 0x7f
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
   3b65a:	f3c3 2543 	ubfx	r5, r3, #9, #4
			pin = 0xFFFFFFFFU;
   3b65e:	2c7f      	cmp	r4, #127	; 0x7f
		switch (NRF_GET_FUN(pins[i])) {
   3b660:	ea4f 4313 	mov.w	r3, r3, lsr #16
			pin = 0xFFFFFFFFU;
   3b664:	bf08      	it	eq
   3b666:	f04f 34ff 	moveq.w	r4, #4294967295	; 0xffffffff
		switch (NRF_GET_FUN(pins[i])) {
   3b66a:	2b0c      	cmp	r3, #12
   3b66c:	d849      	bhi.n	3b702 <pinctrl_configure_pins+0xcc>
   3b66e:	e8df f003 	tbb	[pc, r3]
   3b672:	1407      	.short	0x1407
   3b674:	48481c19 	.word	0x48481c19
   3b678:	48484848 	.word	0x48484848
   3b67c:	1f48      	.short	0x1f48
   3b67e:	45          	.byte	0x45
   3b67f:	00          	.byte	0x00
			NRF_PSEL_UART(reg, TXD) = pin;
   3b680:	f8c8 450c 	str.w	r4, [r8, #1292]	; 0x50c
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   3b684:	a803      	add	r0, sp, #12
   3b686:	9403      	str	r4, [sp, #12]
   3b688:	f7f6 fb2e 	bl	31ce8 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   3b68c:	fa07 f304 	lsl.w	r3, r7, r4
    p_reg->OUTSET = set_mask;
   3b690:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
        nrf_gpio_pin_set(pin_number);
   3b694:	f04f 0a01 	mov.w	sl, #1
   3b698:	e011      	b.n	3b6be <pinctrl_configure_pins+0x88>
			NRF_PSEL_UART(reg, RXD) = pin;
   3b69a:	f8c8 4514 	str.w	r4, [r8, #1300]	; 0x514
			dir = NRF_GPIO_PIN_DIR_INPUT;
   3b69e:	f04f 0a00 	mov.w	sl, #0
   3b6a2:	e00c      	b.n	3b6be <pinctrl_configure_pins+0x88>
			NRF_PSEL_UART(reg, RTS) = pin;
   3b6a4:	f8c8 4508 	str.w	r4, [r8, #1288]	; 0x508
			if (write != NO_WRITE) {
   3b6a8:	e7ec      	b.n	3b684 <pinctrl_configure_pins+0x4e>
			NRF_PSEL_UART(reg, CTS) = pin;
   3b6aa:	f8c8 4510 	str.w	r4, [r8, #1296]	; 0x510
			if (write != NO_WRITE) {
   3b6ae:	e7f6      	b.n	3b69e <pinctrl_configure_pins+0x68>
			NRF_PSEL_TWIM(reg, SCL) = pin;
   3b6b0:	f8c8 4508 	str.w	r4, [r8, #1288]	; 0x508
			if (drive == NRF_DRIVE_S0S1) {
   3b6b4:	2d00      	cmp	r5, #0
   3b6b6:	d1f2      	bne.n	3b69e <pinctrl_configure_pins+0x68>
			dir = NRF_GPIO_PIN_DIR_INPUT;
   3b6b8:	f04f 0a00 	mov.w	sl, #0
				drive = NRF_DRIVE_S0D1;
   3b6bc:	2506      	movs	r5, #6
			if (NRF_GET_LP(pins[i]) == NRF_LP_ENABLE) {
   3b6be:	f859 3b04 	ldr.w	r3, [r9], #4
   3b6c2:	9301      	str	r3, [sp, #4]
   3b6c4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
				input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   3b6c8:	2a00      	cmp	r2, #0
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   3b6ca:	a803      	add	r0, sp, #12
   3b6cc:	bf0e      	itee	eq
   3b6ce:	46d3      	moveq	fp, sl
   3b6d0:	f04f 0b01 	movne.w	fp, #1
   3b6d4:	f04f 0a00 	movne.w	sl, #0
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
   3b6d8:	9403      	str	r4, [sp, #12]
   3b6da:	f7f6 fb05 	bl	31ce8 <nrf_gpio_pin_port_decode>
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   3b6de:	9b01      	ldr	r3, [sp, #4]
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
   3b6e0:	022d      	lsls	r5, r5, #8
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   3b6e2:	f3c3 13c1 	ubfx	r3, r3, #7, #2
   3b6e6:	ea45 0583 	orr.w	r5, r5, r3, lsl #2
   3b6ea:	ea45 050a 	orr.w	r5, r5, sl
    reg->PIN_CNF[pin_number] = cnf;
   3b6ee:	f504 74e0 	add.w	r4, r4, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   3b6f2:	ea45 054b 	orr.w	r5, r5, fp, lsl #1
    reg->PIN_CNF[pin_number] = cnf;
   3b6f6:	f840 5024 	str.w	r5, [r0, r4, lsl #2]
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   3b6fa:	e7a4      	b.n	3b646 <pinctrl_configure_pins+0x10>
			NRF_PSEL_TWIM(reg, SDA) = pin;
   3b6fc:	f8c8 450c 	str.w	r4, [r8, #1292]	; 0x50c
			if (drive == NRF_DRIVE_S0S1) {
   3b700:	e7d8      	b.n	3b6b4 <pinctrl_configure_pins+0x7e>
		switch (NRF_GET_FUN(pins[i])) {
   3b702:	f06f 0085 	mvn.w	r0, #133	; 0x85
   3b706:	e7a1      	b.n	3b64c <pinctrl_configure_pins+0x16>

0003b708 <z_log_msg_static_create.constprop.0>:
   3b708:	2300      	movs	r3, #0
   3b70a:	f7ea bd4f 	b.w	261ac <z_impl_z_log_msg_static_create>

0003b70e <hci_driver_close>:
{
   3b70e:	b510      	push	{r4, lr}
		hci_ecdh_uninit();
   3b710:	f7f7 fbf4 	bl	32efc <hci_ecdh_uninit>
	err = MULTITHREADING_LOCK_ACQUIRE();
   3b714:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3b718:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   3b71c:	f7f6 fb60 	bl	31de0 <multithreading_lock_acquire>
	if (err) {
   3b720:	4604      	mov	r4, r0
   3b722:	b920      	cbnz	r0, 3b72e <hci_driver_close+0x20>
	err = sdc_disable();
   3b724:	f7d6 f8ac 	bl	11880 <sdc_disable>
	if (err) {
   3b728:	4604      	mov	r4, r0
	MULTITHREADING_LOCK_RELEASE();
   3b72a:	f7f6 fb61 	bl	31df0 <multithreading_lock_release>
}
   3b72e:	4620      	mov	r0, r4
   3b730:	bd10      	pop	{r4, pc}

0003b732 <hci_driver_send>:
{
   3b732:	b538      	push	{r3, r4, r5, lr}
	if (!buf->len) {
   3b734:	8983      	ldrh	r3, [r0, #12]
{
   3b736:	4605      	mov	r5, r0
	if (!buf->len) {
   3b738:	b373      	cbz	r3, 3b798 <hci_driver_send+0x66>
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   3b73a:	7d03      	ldrb	r3, [r0, #20]
	switch (type) {
   3b73c:	b1a3      	cbz	r3, 3b768 <hci_driver_send+0x36>
   3b73e:	2b02      	cmp	r3, #2
   3b740:	d12a      	bne.n	3b798 <hci_driver_send+0x66>
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   3b742:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3b746:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   3b74a:	f7f6 fb49 	bl	31de0 <multithreading_lock_acquire>
	if (!errcode) {
   3b74e:	4604      	mov	r4, r0
   3b750:	b940      	cbnz	r0, 3b764 <hci_driver_send+0x32>
		errcode = sdc_hci_data_put(acl->data);
   3b752:	68a8      	ldr	r0, [r5, #8]
   3b754:	f7e3 fdec 	bl	1f330 <sdc_hci_data_put>
   3b758:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   3b75a:	f7f6 fb49 	bl	31df0 <multithreading_lock_release>
		if (errcode) {
   3b75e:	b1b4      	cbz	r4, 3b78e <hci_driver_send+0x5c>
			receive_signal_raise();
   3b760:	f7f6 fc88 	bl	32074 <receive_signal_raise>
}
   3b764:	4620      	mov	r0, r4
   3b766:	bd38      	pop	{r3, r4, r5, pc}
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   3b768:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3b76c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   3b770:	f7f6 fb36 	bl	31de0 <multithreading_lock_acquire>
	if (!errcode) {
   3b774:	4604      	mov	r4, r0
   3b776:	2800      	cmp	r0, #0
   3b778:	d1f4      	bne.n	3b764 <hci_driver_send+0x32>
		errcode = hci_internal_cmd_put(cmd->data);
   3b77a:	68a8      	ldr	r0, [r5, #8]
   3b77c:	f7f6 fe42 	bl	32404 <hci_internal_cmd_put>
   3b780:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   3b782:	f7f6 fb35 	bl	31df0 <multithreading_lock_release>
	if (errcode) {
   3b786:	2c00      	cmp	r4, #0
   3b788:	d1ec      	bne.n	3b764 <hci_driver_send+0x32>
	receive_signal_raise();
   3b78a:	f7f6 fc73 	bl	32074 <receive_signal_raise>
		net_buf_unref(buf);
   3b78e:	4628      	mov	r0, r5
   3b790:	f7f3 f876 	bl	2e880 <net_buf_unref>
   3b794:	2400      	movs	r4, #0
   3b796:	e7e5      	b.n	3b764 <hci_driver_send+0x32>
	switch (type) {
   3b798:	f06f 0415 	mvn.w	r4, #21
   3b79c:	e7e2      	b.n	3b764 <hci_driver_send+0x32>

0003b79e <receive_work_handler>:
	hci_driver_receive_process();
   3b79e:	f7f6 bda3 	b.w	322e8 <hci_driver_receive_process>

0003b7a2 <hci_cmd_le_generate_dhkey>:

uint8_t hci_cmd_le_generate_dhkey(struct bt_hci_cp_le_generate_dhkey *p_params)
{
	return cmd_le_generate_dhkey(p_params->key,
   3b7a2:	2100      	movs	r1, #0
   3b7a4:	f7f7 bbcc 	b.w	32f40 <cmd_le_generate_dhkey>

0003b7a8 <hci_cmd_le_generate_dhkey_v2>:
				     BT_HCI_LE_KEY_TYPE_GENERATED);
}

uint8_t hci_cmd_le_generate_dhkey_v2(struct bt_hci_cp_le_generate_dhkey_v2 *p_params)
{
	if (p_params->key_type > BT_HCI_LE_KEY_TYPE_DEBUG) {
   3b7a8:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
   3b7ac:	2901      	cmp	r1, #1
   3b7ae:	d801      	bhi.n	3b7b4 <hci_cmd_le_generate_dhkey_v2+0xc>
		return BT_HCI_ERR_INVALID_PARAM;
	}

	return cmd_le_generate_dhkey(p_params->key, p_params->key_type);
   3b7b0:	f7f7 bbc6 	b.w	32f40 <cmd_le_generate_dhkey>
}
   3b7b4:	2012      	movs	r0, #18
   3b7b6:	4770      	bx	lr

0003b7b8 <mpsl_timer0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   3b7b8:	4668      	mov	r0, sp
   3b7ba:	f020 0107 	bic.w	r1, r0, #7
   3b7be:	468d      	mov	sp, r1
   3b7c0:	b501      	push	{r0, lr}
	MPSL_IRQ_TIMER0_Handler();
   3b7c2:	f7d4 fcbb 	bl	1013c <MPSL_IRQ_TIMER0_Handler>
	ISR_DIRECT_PM();
   3b7c6:	f7eb fbbd 	bl	26f44 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING_ISR
	sys_trace_isr_exit();
#endif
	if (maybe_swap != 0) {
		z_arm_int_exit();
   3b7ca:	f7eb fca5 	bl	27118 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   3b7ce:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   3b7d2:	4685      	mov	sp, r0
   3b7d4:	4770      	bx	lr

0003b7d6 <mpsl_rtc0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   3b7d6:	4668      	mov	r0, sp
   3b7d8:	f020 0107 	bic.w	r1, r0, #7
   3b7dc:	468d      	mov	sp, r1
   3b7de:	b501      	push	{r0, lr}
	MPSL_IRQ_RTC0_Handler();
   3b7e0:	f7d4 fc22 	bl	10028 <MPSL_IRQ_RTC0_Handler>
	ISR_DIRECT_PM();
   3b7e4:	f7eb fbae 	bl	26f44 <_arch_isr_direct_pm>
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   3b7e8:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   3b7ec:	4685      	mov	sp, r0
   3b7ee:	4770      	bx	lr

0003b7f0 <mpsl_radio_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   3b7f0:	4668      	mov	r0, sp
   3b7f2:	f020 0107 	bic.w	r1, r0, #7
   3b7f6:	468d      	mov	sp, r1
   3b7f8:	b501      	push	{r0, lr}
	MPSL_IRQ_RADIO_Handler();
   3b7fa:	f7d2 f963 	bl	dac4 <MPSL_IRQ_RADIO_Handler>
	ISR_DIRECT_PM();
   3b7fe:	f7eb fba1 	bl	26f44 <_arch_isr_direct_pm>
   3b802:	f7eb fc89 	bl	27118 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   3b806:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   3b80a:	4685      	mov	sp, r0
   3b80c:	4770      	bx	lr

0003b80e <mpsl_fem_api_init>:

#include <mpsl_fem_init.h>
#include <zephyr/device.h>

static int mpsl_fem_api_init(const struct device *dev)
{
   3b80e:	b508      	push	{r3, lr}
	ARG_UNUSED(dev);

	mpsl_fem_init();
   3b810:	f7e3 f93a 	bl	1ea88 <mpsl_fem_init>

	return 0;
}
   3b814:	2000      	movs	r0, #0
   3b816:	bd08      	pop	{r3, pc}

0003b818 <nrfx_clock_enable>:
}
   3b818:	4770      	bx	lr

0003b81a <nrfx_power_clock_irq_handler>:


void nrfx_clock_irq_handler(void)
{
	MPSL_IRQ_CLOCK_Handler();
   3b81a:	f7d5 b919 	b.w	10a50 <MPSL_IRQ_CLOCK_Handler>

0003b81e <nrf_flash_sync_is_required>:
	return mpsl_is_initialized();
   3b81e:	f7d5 bcd3 	b.w	111c8 <mpsl_is_initialized>

0003b822 <nrf_flash_sync_get_timestamp_begin>:
}
   3b822:	4770      	bx	lr

0003b824 <temp_nrf5_mpsl_init>:
	(void)dev;

	LOG_DBG("");

	return 0;
}
   3b824:	2000      	movs	r0, #0
   3b826:	4770      	bx	lr

0003b828 <temp_nrf5_mpsl_sample_fetch>:
{
   3b828:	b510      	push	{r4, lr}
	if (chan != SENSOR_CHAN_ALL && chan != SENSOR_CHAN_DIE_TEMP) {
   3b82a:	2939      	cmp	r1, #57	; 0x39
	struct temp_nrf5_mpsl_data *data = dev->data;
   3b82c:	6904      	ldr	r4, [r0, #16]
	if (chan != SENSOR_CHAN_ALL && chan != SENSOR_CHAN_DIE_TEMP) {
   3b82e:	d001      	beq.n	3b834 <temp_nrf5_mpsl_sample_fetch+0xc>
   3b830:	290c      	cmp	r1, #12
   3b832:	d104      	bne.n	3b83e <temp_nrf5_mpsl_sample_fetch+0x16>
	data->sample = mpsl_temperature_get();
   3b834:	f7d5 fce0 	bl	111f8 <mpsl_temperature_get>
   3b838:	6020      	str	r0, [r4, #0]
	return 0;
   3b83a:	2000      	movs	r0, #0
}
   3b83c:	bd10      	pop	{r4, pc}
		return -ENOTSUP;
   3b83e:	f06f 0085 	mvn.w	r0, #133	; 0x85
   3b842:	e7fb      	b.n	3b83c <temp_nrf5_mpsl_sample_fetch+0x14>

0003b844 <nrf52_errata_108>:
            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
   3b844:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   3b848:	f8d3 0130 	ldr.w	r0, [r3, #304]	; 0x130
   3b84c:	1c42      	adds	r2, r0, #1
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   3b84e:	bf04      	itt	eq
   3b850:	f04f 4370 	moveq.w	r3, #4026531840	; 0xf0000000
   3b854:	f893 0fe0 	ldrbeq.w	r0, [r3, #4064]	; 0xfe0
}
   3b858:	1f83      	subs	r3, r0, #6
   3b85a:	4258      	negs	r0, r3
   3b85c:	4158      	adcs	r0, r3
   3b85e:	4770      	bx	lr

0003b860 <nrfx_isr>:
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   3b860:	4700      	bx	r0

0003b862 <nrfx_busy_wait>:
   3b862:	f000 babd 	b.w	3bde0 <z_impl_k_busy_wait>

0003b866 <nrf_gpio_pin_present_check>:
    switch (port)
   3b866:	0943      	lsrs	r3, r0, #5
   3b868:	bf0c      	ite	eq
   3b86a:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
   3b86e:	2300      	movne	r3, #0
    pin_number &= 0x1F;
   3b870:	f000 001f 	and.w	r0, r0, #31
    return (mask & (1UL << pin_number)) ? true : false;
   3b874:	fa23 f000 	lsr.w	r0, r3, r0
}
   3b878:	f000 0001 	and.w	r0, r0, #1
   3b87c:	4770      	bx	lr

0003b87e <pin_is_task_output>:
{
   3b87e:	b508      	push	{r3, lr}
   3b880:	4602      	mov	r2, r0
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   3b882:	f7f7 ff8f 	bl	337a4 <pin_is_output>
   3b886:	b110      	cbz	r0, 3b88e <pin_is_task_output+0x10>
   3b888:	4610      	mov	r0, r2
   3b88a:	f7f7 ff75 	bl	33778 <pin_in_use_by_te>
}
   3b88e:	f000 0001 	and.w	r0, r0, #1
   3b892:	bd08      	pop	{r3, pc}

0003b894 <nrf_gpio_reconfigure>:
{
   3b894:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   3b898:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   3b89a:	a801      	add	r0, sp, #4
{
   3b89c:	e9dd 5808 	ldrd	r5, r8, [sp, #32]
   3b8a0:	460c      	mov	r4, r1
   3b8a2:	4617      	mov	r7, r2
   3b8a4:	461e      	mov	r6, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   3b8a6:	f7f7 fffd 	bl	338a4 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
   3b8aa:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   3b8ac:	1e39      	subs	r1, r7, #0
   3b8ae:	bf18      	it	ne
   3b8b0:	2101      	movne	r1, #1
   3b8b2:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   3b8b6:	1e23      	subs	r3, r4, #0
   3b8b8:	bf18      	it	ne
   3b8ba:	2301      	movne	r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   3b8bc:	2e00      	cmp	r6, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   3b8be:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   3b8c2:	bf14      	ite	ne
   3b8c4:	210c      	movne	r1, #12
   3b8c6:	2100      	moveq	r1, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   3b8c8:	2d00      	cmp	r5, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   3b8ca:	ea43 0301 	orr.w	r3, r3, r1
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   3b8ce:	bf14      	ite	ne
   3b8d0:	f44f 61e0 	movne.w	r1, #1792	; 0x700
   3b8d4:	2100      	moveq	r1, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   3b8d6:	f1b8 0f00 	cmp.w	r8, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   3b8da:	ea43 0301 	orr.w	r3, r3, r1
    uint32_t cnf = reg->PIN_CNF[pin_number];
   3b8de:	f8d0 2700 	ldr.w	r2, [r0, #1792]	; 0x700
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   3b8e2:	bf14      	ite	ne
   3b8e4:	f44f 3140 	movne.w	r1, #196608	; 0x30000
   3b8e8:	2100      	moveq	r1, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   3b8ea:	430b      	orrs	r3, r1
    cnf &= ~to_update;
   3b8ec:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   3b8f0:	b104      	cbz	r4, 3b8f4 <nrf_gpio_reconfigure+0x60>
   3b8f2:	7824      	ldrb	r4, [r4, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   3b8f4:	b10f      	cbz	r7, 3b8fa <nrf_gpio_reconfigure+0x66>
   3b8f6:	783f      	ldrb	r7, [r7, #0]
   3b8f8:	007f      	lsls	r7, r7, #1
   3b8fa:	431c      	orrs	r4, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   3b8fc:	b10e      	cbz	r6, 3b902 <nrf_gpio_reconfigure+0x6e>
   3b8fe:	7836      	ldrb	r6, [r6, #0]
   3b900:	00b6      	lsls	r6, r6, #2
   3b902:	433c      	orrs	r4, r7
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   3b904:	b18d      	cbz	r5, 3b92a <nrf_gpio_reconfigure+0x96>
   3b906:	7829      	ldrb	r1, [r5, #0]
   3b908:	0209      	lsls	r1, r1, #8
   3b90a:	4334      	orrs	r4, r6
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
   3b90c:	f1b8 0f00 	cmp.w	r8, #0
   3b910:	d003      	beq.n	3b91a <nrf_gpio_reconfigure+0x86>
   3b912:	f898 8000 	ldrb.w	r8, [r8]
   3b916:	ea4f 4808 	mov.w	r8, r8, lsl #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   3b91a:	4321      	orrs	r1, r4
   3b91c:	ea41 0108 	orr.w	r1, r1, r8
    reg->PIN_CNF[pin_number] = cnf;
   3b920:	f8c0 1700 	str.w	r1, [r0, #1792]	; 0x700
}
   3b924:	b002      	add	sp, #8
   3b926:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   3b92a:	4629      	mov	r1, r5
   3b92c:	e7ed      	b.n	3b90a <nrf_gpio_reconfigure+0x76>

0003b92e <nrf_gpio_cfg_sense_set>:
{
   3b92e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   3b930:	f10d 030f 	add.w	r3, sp, #15
   3b934:	9301      	str	r3, [sp, #4]
   3b936:	2300      	movs	r3, #0
{
   3b938:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   3b93c:	9300      	str	r3, [sp, #0]
   3b93e:	461a      	mov	r2, r3
   3b940:	4619      	mov	r1, r3
   3b942:	f7ff ffa7 	bl	3b894 <nrf_gpio_reconfigure>
}
   3b946:	b005      	add	sp, #20
   3b948:	f85d fb04 	ldr.w	pc, [sp], #4

0003b94c <is_valid_address>:
{
   3b94c:	4603      	mov	r3, r0
   3b94e:	4608      	mov	r0, r1
   3b950:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   3b954:	690a      	ldr	r2, [r1, #16]
    return p_reg->CODESIZE;
   3b956:	6949      	ldr	r1, [r1, #20]
    return flash_page_size_get() * flash_page_count_get();
   3b958:	434a      	muls	r2, r1
    if ((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get())
   3b95a:	4293      	cmp	r3, r2
   3b95c:	d308      	bcc.n	3b970 <is_valid_address+0x24>
    if (uicr_allowed &&
   3b95e:	b140      	cbz	r0, 3b972 <is_valid_address+0x26>
        (addr - (uint32_t)NRF_UICR) < sizeof(NRF_UICR_Type))
   3b960:	f1a3 2310 	sub.w	r3, r3, #268439552	; 0x10001000
    if (uicr_allowed &&
   3b964:	f5b3 7f04 	cmp.w	r3, #528	; 0x210
   3b968:	bf2c      	ite	cs
   3b96a:	2000      	movcs	r0, #0
   3b96c:	2001      	movcc	r0, #1
   3b96e:	4770      	bx	lr
        return true;
   3b970:	2001      	movs	r0, #1
}
   3b972:	4770      	bx	lr

0003b974 <nrfx_nvmc_flash_size_get>:
    return p_reg->CODEPAGESIZE;
   3b974:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   3b978:	691a      	ldr	r2, [r3, #16]
    return p_reg->CODESIZE;
   3b97a:	6958      	ldr	r0, [r3, #20]
}

uint32_t nrfx_nvmc_flash_size_get(void)
{
    return flash_total_size_get();
}
   3b97c:	4350      	muls	r0, r2
   3b97e:	4770      	bx	lr

0003b980 <nrfx_nvmc_flash_page_size_get>:
    return p_reg->CODEPAGESIZE;
   3b980:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   3b984:	6918      	ldr	r0, [r3, #16]

uint32_t nrfx_nvmc_flash_page_size_get(void)
{
    return flash_page_size_get();
}
   3b986:	4770      	bx	lr

0003b988 <nrfx_nvmc_flash_page_count_get>:
    return p_reg->CODESIZE;
   3b988:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   3b98c:	6958      	ldr	r0, [r3, #20]

uint32_t nrfx_nvmc_flash_page_count_get(void)
{
    return flash_page_count_get();
}
   3b98e:	4770      	bx	lr

0003b990 <xfer_completeness_check>:
    switch (p_cb->xfer_desc.type)
   3b990:	7b0a      	ldrb	r2, [r1, #12]
{
   3b992:	4603      	mov	r3, r0
    switch (p_cb->xfer_desc.type)
   3b994:	2a03      	cmp	r2, #3
   3b996:	d829      	bhi.n	3b9ec <xfer_completeness_check+0x5c>
   3b998:	e8df f002 	tbb	[pc, r2]
   3b99c:	02192521 	.word	0x02192521
            if (((p_cb->int_mask & NRF_TWIM_INT_SUSPENDED_MASK) &&
   3b9a0:	688a      	ldr	r2, [r1, #8]
   3b9a2:	0350      	lsls	r0, r2, #13
   3b9a4:	d504      	bpl.n	3b9b0 <xfer_completeness_check+0x20>
    return p_reg->TXD.AMOUNT;
   3b9a6:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
   3b9aa:	6908      	ldr	r0, [r1, #16]
   3b9ac:	4290      	cmp	r0, r2
   3b9ae:	d107      	bne.n	3b9c0 <xfer_completeness_check+0x30>
                (!(p_cb->int_mask & NRF_TWIM_INT_SUSPENDED_MASK) &&
   3b9b0:	688a      	ldr	r2, [r1, #8]
                 (nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)) ||
   3b9b2:	0352      	lsls	r2, r2, #13
   3b9b4:	d41a      	bmi.n	3b9ec <xfer_completeness_check+0x5c>
   3b9b6:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
            if ((nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length) ||
   3b9ba:	6949      	ldr	r1, [r1, #20]
            if (nrf_twim_rxd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)
   3b9bc:	4291      	cmp	r1, r2
   3b9be:	d015      	beq.n	3b9ec <xfer_completeness_check+0x5c>
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
   3b9c0:	2000      	movs	r0, #0
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
   3b9c2:	2206      	movs	r2, #6
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
   3b9c4:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
   3b9c8:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
   3b9cc:	4770      	bx	lr
    return p_reg->TXD.AMOUNT;
   3b9ce:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
            if ((nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length) ||
   3b9d2:	6908      	ldr	r0, [r1, #16]
   3b9d4:	4290      	cmp	r0, r2
   3b9d6:	d1f3      	bne.n	3b9c0 <xfer_completeness_check+0x30>
    return p_reg->RXD.AMOUNT;
   3b9d8:	f8d3 253c 	ldr.w	r2, [r3, #1340]	; 0x53c
   3b9dc:	e7ed      	b.n	3b9ba <xfer_completeness_check+0x2a>
    return p_reg->TXD.AMOUNT;
   3b9de:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
            if (nrf_twim_rxd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)
   3b9e2:	6909      	ldr	r1, [r1, #16]
   3b9e4:	e7ea      	b.n	3b9bc <xfer_completeness_check+0x2c>
    return p_reg->RXD.AMOUNT;
   3b9e6:	f8d3 253c 	ldr.w	r2, [r3, #1340]	; 0x53c
   3b9ea:	e7fa      	b.n	3b9e2 <xfer_completeness_check+0x52>
    bool transfer_complete = true;
   3b9ec:	2001      	movs	r0, #1
}
   3b9ee:	4770      	bx	lr

0003b9f0 <nrf_gpio_pin_set>:
{
   3b9f0:	b507      	push	{r0, r1, r2, lr}
   3b9f2:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   3b9f4:	a801      	add	r0, sp, #4
   3b9f6:	f7f8 fe8b 	bl	34710 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   3b9fa:	9a01      	ldr	r2, [sp, #4]
   3b9fc:	2301      	movs	r3, #1
   3b9fe:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   3ba00:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
}
   3ba04:	b003      	add	sp, #12
   3ba06:	f85d fb04 	ldr.w	pc, [sp], #4

0003ba0a <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
   3ba0a:	f7f8 befb 	b.w	34804 <_DoInit>

0003ba0e <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
   3ba0e:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
   3ba10:	f7ff fffb 	bl	3ba0a <SEGGER_RTT_Init>

	return 0;
}
   3ba14:	2000      	movs	r0, #0
   3ba16:	bd08      	pop	{r3, pc}

0003ba18 <zcbor_new_state>:
	return true;
}

void zcbor_new_state(zcbor_state_t *state_array, uint_fast32_t n_states,
		const uint8_t *payload, size_t payload_len, uint_fast32_t elem_count)
{
   3ba18:	b510      	push	{r4, lr}
	state_array[0].payload = payload;
   3ba1a:	6002      	str	r2, [r0, #0]
	state_array[0].payload_end = payload + payload_len;
   3ba1c:	441a      	add	r2, r3
   3ba1e:	60c2      	str	r2, [r0, #12]
	state_array[0].elem_count = elem_count;
   3ba20:	9b02      	ldr	r3, [sp, #8]
   3ba22:	6083      	str	r3, [r0, #8]
	state_array[0].indefinite_length_array = false;
   3ba24:	2200      	movs	r2, #0
	state_array[0].payload_moved = false;
	state_array[0].constant_state = NULL;

	if(n_states < 2) {
   3ba26:	2901      	cmp	r1, #1
	state_array[0].indefinite_length_array = false;
   3ba28:	8202      	strh	r2, [r0, #16]
	if(n_states < 2) {
   3ba2a:	d801      	bhi.n	3ba30 <zcbor_new_state+0x18>
	state_array[0].constant_state = NULL;
   3ba2c:	6142      	str	r2, [r0, #20]
	state_array[0].constant_state->stop_on_error = false;
#endif
	if (n_states > 2) {
		state_array[0].constant_state->backup_list = &state_array[1];
	}
}
   3ba2e:	bd10      	pop	{r4, pc}
	state_array[0].constant_state = (struct zcbor_state_constant *)&state_array[n_states - 1];
   3ba30:	2318      	movs	r3, #24
   3ba32:	434b      	muls	r3, r1
   3ba34:	3b18      	subs	r3, #24
   3ba36:	18c4      	adds	r4, r0, r3
   3ba38:	6144      	str	r4, [r0, #20]
	state_array[0].constant_state->backup_list = NULL;
   3ba3a:	50c2      	str	r2, [r0, r3]
	state_array[0].constant_state->num_backups = n_states - 2;
   3ba3c:	6943      	ldr	r3, [r0, #20]
   3ba3e:	1e8c      	subs	r4, r1, #2
   3ba40:	609c      	str	r4, [r3, #8]
	state_array[0].constant_state->current_backup = 0;
   3ba42:	6943      	ldr	r3, [r0, #20]
   3ba44:	605a      	str	r2, [r3, #4]
	state_array[0].constant_state->error = ZCBOR_SUCCESS;
   3ba46:	6943      	ldr	r3, [r0, #20]
	if (n_states > 2) {
   3ba48:	2902      	cmp	r1, #2
	state_array[0].constant_state->error = ZCBOR_SUCCESS;
   3ba4a:	60da      	str	r2, [r3, #12]
		state_array[0].constant_state->backup_list = &state_array[1];
   3ba4c:	bf1e      	ittt	ne
   3ba4e:	6943      	ldrne	r3, [r0, #20]
   3ba50:	3018      	addne	r0, #24
   3ba52:	6018      	strne	r0, [r3, #0]
   3ba54:	e7eb      	b.n	3ba2e <zcbor_new_state+0x16>

0003ba56 <zcbor_new_decode_state>:


void zcbor_new_decode_state(zcbor_state_t *state_array, uint_fast32_t n_states,
		const uint8_t *payload, size_t payload_len, uint_fast32_t elem_count)
{
	zcbor_new_state(state_array, n_states, payload, payload_len, elem_count);
   3ba56:	f7ff bfdf 	b.w	3ba18 <zcbor_new_state>

0003ba5a <zcbor_error.isra.0>:
{
#ifdef ZCBOR_STOP_ON_ERROR
	if (zcbor_check_error(state))
#endif
	{
		if (state->constant_state) {
   3ba5a:	b100      	cbz	r0, 3ba5e <zcbor_error.isra.0+0x4>
			state->constant_state->error = err;
   3ba5c:	60c1      	str	r1, [r0, #12]
		}
	}
}
   3ba5e:	4770      	bx	lr

0003ba60 <encode_header_byte>:
{
   3ba60:	b510      	push	{r4, lr}
	ZCBOR_CHECK_PAYLOAD();
   3ba62:	6803      	ldr	r3, [r0, #0]
   3ba64:	68c4      	ldr	r4, [r0, #12]
   3ba66:	42a3      	cmp	r3, r4
   3ba68:	d305      	bcc.n	3ba76 <encode_header_byte+0x16>
   3ba6a:	2108      	movs	r1, #8
	zcbor_assert_state(additional < 32, NULL);
   3ba6c:	6940      	ldr	r0, [r0, #20]
   3ba6e:	f7ff fff4 	bl	3ba5a <zcbor_error.isra.0>
	ZCBOR_CHECK_PAYLOAD();
   3ba72:	2000      	movs	r0, #0
}
   3ba74:	bd10      	pop	{r4, pc}
	zcbor_assert_state(additional < 32, NULL);
   3ba76:	2a1f      	cmp	r2, #31
   3ba78:	d901      	bls.n	3ba7e <encode_header_byte+0x1e>
   3ba7a:	210e      	movs	r1, #14
   3ba7c:	e7f6      	b.n	3ba6c <encode_header_byte+0xc>
	*(state->payload_mut++) = (uint8_t)((major_type << 5) | (additional & 0x1F));
   3ba7e:	1c5c      	adds	r4, r3, #1
   3ba80:	ea42 1241 	orr.w	r2, r2, r1, lsl #5
   3ba84:	6004      	str	r4, [r0, #0]
   3ba86:	701a      	strb	r2, [r3, #0]
	return true;
   3ba88:	2001      	movs	r0, #1
   3ba8a:	e7f3      	b.n	3ba74 <encode_header_byte+0x14>

0003ba8c <value_encode.part.0>:
	}
	return result_len;
}


static bool value_encode(zcbor_state_t *state, zcbor_major_type_t major_type,
   3ba8c:	b570      	push	{r4, r5, r6, lr}
   3ba8e:	4605      	mov	r5, r0
   3ba90:	460e      	mov	r6, r1
		const void *const input, uint_fast32_t max_result_len)
{
	zcbor_assert_state(max_result_len != 0, "0-length result not supported.\r\n");

	uint_fast32_t result_len = get_result_len(input, max_result_len);
   3ba92:	4610      	mov	r0, r2
   3ba94:	4619      	mov	r1, r3
static bool value_encode(zcbor_state_t *state, zcbor_major_type_t major_type,
   3ba96:	4614      	mov	r4, r2
	uint_fast32_t result_len = get_result_len(input, max_result_len);
   3ba98:	f7f8 ff46 	bl	34928 <get_result_len>
	const void *const result = get_result(input, max_result_len, result_len);

	return value_encode_len(state, major_type, result, result_len);
   3ba9c:	4622      	mov	r2, r4
	uint_fast32_t result_len = get_result_len(input, max_result_len);
   3ba9e:	4603      	mov	r3, r0
	return value_encode_len(state, major_type, result, result_len);
   3baa0:	4631      	mov	r1, r6
   3baa2:	4628      	mov	r0, r5
}
   3baa4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return value_encode_len(state, major_type, result, result_len);
   3baa8:	f7f8 bf54 	b.w	34954 <value_encode_len>

0003baac <str_encode>:
}


static bool str_encode(zcbor_state_t *state,
		const struct zcbor_string *input, zcbor_major_type_t major_type)
{
   3baac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (input->len > (state->payload_end - state->payload)) {
   3bab0:	f8d0 900c 	ldr.w	r9, [r0, #12]
   3bab4:	6805      	ldr	r5, [r0, #0]
   3bab6:	f8d1 a004 	ldr.w	sl, [r1, #4]
   3baba:	eba9 0305 	sub.w	r3, r9, r5
   3babe:	459a      	cmp	sl, r3
{
   3bac0:	4604      	mov	r4, r0
   3bac2:	460e      	mov	r6, r1
   3bac4:	4690      	mov	r8, r2
	if (input->len > (state->payload_end - state->payload)) {
   3bac6:	d907      	bls.n	3bad8 <str_encode+0x2c>
		ZCBOR_ERR(ZCBOR_ERR_NO_PAYLOAD);
   3bac8:	6960      	ldr	r0, [r4, #20]
   3baca:	2108      	movs	r1, #8
   3bacc:	f7ff ffc5 	bl	3ba5a <zcbor_error.isra.0>
   3bad0:	2500      	movs	r5, #0
		 * because of bstrx_cbor_start_encode/bstrx_cbor_end_encode. */
		memmove(state->payload_mut, input->value, input->len);
	}
	state->payload += input->len;
	return true;
}
   3bad2:	4628      	mov	r0, r5
   3bad4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (input->value && ((get_result_len(&input->len, sizeof(input->len))
   3bad8:	460f      	mov	r7, r1
   3bada:	f857 3b04 	ldr.w	r3, [r7], #4
   3bade:	b143      	cbz	r3, 3baf2 <str_encode+0x46>
   3bae0:	2104      	movs	r1, #4
   3bae2:	4638      	mov	r0, r7
   3bae4:	f7f8 ff20 	bl	34928 <get_result_len>
			+ 1 + input->len + (size_t)state->payload)
   3bae8:	4455      	add	r5, sl
   3baea:	3501      	adds	r5, #1
   3baec:	4405      	add	r5, r0
	if (input->value && ((get_result_len(&input->len, sizeof(input->len))
   3baee:	45a9      	cmp	r9, r5
   3baf0:	d3ea      	bcc.n	3bac8 <str_encode+0x1c>
	zcbor_assert_state(max_result_len != 0, "0-length result not supported.\r\n");
   3baf2:	2304      	movs	r3, #4
   3baf4:	463a      	mov	r2, r7
   3baf6:	4641      	mov	r1, r8
   3baf8:	4620      	mov	r0, r4
   3bafa:	f7ff ffc7 	bl	3ba8c <value_encode.part.0>
	if (!value_encode(state, major_type, &input->len, sizeof(input->len))) {
   3bafe:	4605      	mov	r5, r0
   3bb00:	2800      	cmp	r0, #0
   3bb02:	d0e5      	beq.n	3bad0 <str_encode+0x24>
	if (state->payload_mut != input->value) {
   3bb04:	6820      	ldr	r0, [r4, #0]
   3bb06:	6831      	ldr	r1, [r6, #0]
   3bb08:	4288      	cmp	r0, r1
   3bb0a:	d002      	beq.n	3bb12 <str_encode+0x66>
		memmove(state->payload_mut, input->value, input->len);
   3bb0c:	6872      	ldr	r2, [r6, #4]
   3bb0e:	f7fd fc38 	bl	39382 <memmove>
	state->payload += input->len;
   3bb12:	6823      	ldr	r3, [r4, #0]
   3bb14:	6872      	ldr	r2, [r6, #4]
   3bb16:	4413      	add	r3, r2
   3bb18:	6023      	str	r3, [r4, #0]
	return true;
   3bb1a:	e7da      	b.n	3bad2 <str_encode+0x26>

0003bb1c <zcbor_int_encode>:
	if (int_size > sizeof(int64_t)) {
   3bb1c:	2a08      	cmp	r2, #8
{
   3bb1e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   3bb20:	4613      	mov	r3, r2
   3bb22:	460c      	mov	r4, r1
	if (int_size > sizeof(int64_t)) {
   3bb24:	d906      	bls.n	3bb34 <zcbor_int_encode+0x18>
		ZCBOR_ERR(ZCBOR_ERR_INT_SIZE);
   3bb26:	2105      	movs	r1, #5
	zcbor_assert_state(max_result_len != 0, "0-length result not supported.\r\n");
   3bb28:	6940      	ldr	r0, [r0, #20]
   3bb2a:	f7ff ff96 	bl	3ba5a <zcbor_error.isra.0>
		ZCBOR_ERR(ZCBOR_ERR_INT_SIZE);
   3bb2e:	2000      	movs	r0, #0
}
   3bb30:	b002      	add	sp, #8
   3bb32:	bd70      	pop	{r4, r5, r6, pc}
	if (input_int8[int_size - 1] < 0) {
   3bb34:	188e      	adds	r6, r1, r2
   3bb36:	f916 2c01 	ldrsb.w	r2, [r6, #-1]
   3bb3a:	2a00      	cmp	r2, #0
   3bb3c:	da0e      	bge.n	3bb5c <zcbor_int_encode+0x40>
   3bb3e:	460a      	mov	r2, r1
   3bb40:	4669      	mov	r1, sp
   3bb42:	460c      	mov	r4, r1
		for (int i = 0; i < int_size; i++) {
   3bb44:	42b2      	cmp	r2, r6
   3bb46:	d103      	bne.n	3bb50 <zcbor_int_encode+0x34>
		major_type = ZCBOR_MAJOR_TYPE_NINT;
   3bb48:	2101      	movs	r1, #1
	zcbor_assert_state(max_result_len != 0, "0-length result not supported.\r\n");
   3bb4a:	b94b      	cbnz	r3, 3bb60 <zcbor_int_encode+0x44>
   3bb4c:	210e      	movs	r1, #14
   3bb4e:	e7eb      	b.n	3bb28 <zcbor_int_encode+0xc>
			input_buf[i] = (uint8_t)~input_uint8[i];
   3bb50:	f812 5b01 	ldrb.w	r5, [r2], #1
   3bb54:	43ed      	mvns	r5, r5
   3bb56:	f801 5b01 	strb.w	r5, [r1], #1
		for (int i = 0; i < int_size; i++) {
   3bb5a:	e7f3      	b.n	3bb44 <zcbor_int_encode+0x28>
		major_type = ZCBOR_MAJOR_TYPE_PINT;
   3bb5c:	2100      	movs	r1, #0
   3bb5e:	e7f4      	b.n	3bb4a <zcbor_int_encode+0x2e>
   3bb60:	4622      	mov	r2, r4
   3bb62:	f7ff ff93 	bl	3ba8c <value_encode.part.0>
   3bb66:	e7e3      	b.n	3bb30 <zcbor_int_encode+0x14>

0003bb68 <zcbor_int32_put>:
{
   3bb68:	b507      	push	{r0, r1, r2, lr}
	return zcbor_int_encode(state, &input, sizeof(input));
   3bb6a:	2204      	movs	r2, #4
{
   3bb6c:	9101      	str	r1, [sp, #4]
	return zcbor_int_encode(state, &input, sizeof(input));
   3bb6e:	eb0d 0102 	add.w	r1, sp, r2
   3bb72:	f7ff ffd3 	bl	3bb1c <zcbor_int_encode>
}
   3bb76:	b003      	add	sp, #12
   3bb78:	f85d fb04 	ldr.w	pc, [sp], #4

0003bb7c <zcbor_tstr_encode>:
}


bool zcbor_tstr_encode(zcbor_state_t *state, const struct zcbor_string *input)
{
	return str_encode(state, input, ZCBOR_MAJOR_TYPE_TSTR);
   3bb7c:	2203      	movs	r2, #3
   3bb7e:	f7ff bf95 	b.w	3baac <str_encode>

0003bb82 <zcbor_map_start_encode>:
	if (!value_encode(state, major_type, &max_num, sizeof(max_num))) {
		ZCBOR_FAIL();
	}
	state->elem_count--; /* Because of dummy header. */
#else
	if (!encode_header_byte(state, major_type, ZCBOR_VALUE_IS_INDEFINITE_LENGTH)) {
   3bb82:	221f      	movs	r2, #31
   3bb84:	2105      	movs	r1, #5
   3bb86:	f7ff bf6b 	b.w	3ba60 <encode_header_byte>

0003bb8a <zcbor_list_end_encode>:
	} else {
		/* Reset payload pointer to end of list */
		state->payload = payload;
	}
#else
	if (!encode_header_byte(state, ZCBOR_MAJOR_TYPE_PRIM, ZCBOR_VALUE_IS_INDEFINITE_LENGTH)) {
   3bb8a:	221f      	movs	r2, #31
   3bb8c:	2107      	movs	r1, #7
   3bb8e:	f7ff bf67 	b.w	3ba60 <encode_header_byte>

0003bb92 <zcbor_map_end_encode>:
{
	return list_map_end_encode(state, max_num, ZCBOR_MAJOR_TYPE_LIST);
}


bool zcbor_map_end_encode(zcbor_state_t *state, uint_fast32_t max_num)
   3bb92:	f7ff bffa 	b.w	3bb8a <zcbor_list_end_encode>

0003bb96 <zcbor_new_encode_state>:


void zcbor_new_encode_state(zcbor_state_t *state_array, uint_fast32_t n_states,
		uint8_t *payload, size_t payload_len, uint_fast32_t elem_count)
{
	zcbor_new_state(state_array, n_states, payload, payload_len, elem_count);
   3bb96:	f7ff bf3f 	b.w	3ba18 <zcbor_new_state>

0003bb9a <z_device_state_init>:

	while (dev < __device_end) {
		z_object_init(dev);
		++dev;
	}
}
   3bb9a:	4770      	bx	lr

0003bb9c <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   3bb9c:	b140      	cbz	r0, 3bbb0 <z_device_is_ready+0x14>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   3bb9e:	68c3      	ldr	r3, [r0, #12]
   3bba0:	7858      	ldrb	r0, [r3, #1]
   3bba2:	f010 0001 	ands.w	r0, r0, #1
   3bba6:	bf1e      	ittt	ne
   3bba8:	7818      	ldrbne	r0, [r3, #0]
   3bbaa:	fab0 f080 	clzne	r0, r0
   3bbae:	0940      	lsrne	r0, r0, #5
}
   3bbb0:	4770      	bx	lr

0003bbb2 <z_early_memset>:
	(void) memset(dst, c, n);
   3bbb2:	f7fd bc08 	b.w	393c6 <memset>

0003bbb6 <z_early_memcpy>:
	(void) memcpy(dst, src, n);
   3bbb6:	f7fd bbfb 	b.w	393b0 <memcpy>

0003bbba <k_heap_init>:
{
   3bbba:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
   3bbbc:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   3bbc0:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   3bbc4:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   3bbc6:	f7e8 bd81 	b.w	246cc <sys_heap_init>

0003bbca <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   3bbca:	e9d0 3204 	ldrd	r3, r2, [r0, #16]
   3bbce:	4313      	orrs	r3, r2
   3bbd0:	f013 0303 	ands.w	r3, r3, #3
   3bbd4:	d10c      	bne.n	3bbf0 <create_free_list+0x26>
	slab->free_list = NULL;
   3bbd6:	6183      	str	r3, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
   3bbd8:	68c1      	ldr	r1, [r0, #12]
   3bbda:	4299      	cmp	r1, r3
   3bbdc:	d801      	bhi.n	3bbe2 <create_free_list+0x18>
	return 0;
   3bbde:	2000      	movs	r0, #0
   3bbe0:	4770      	bx	lr
		*(char **)p = slab->free_list;
   3bbe2:	6981      	ldr	r1, [r0, #24]
   3bbe4:	6011      	str	r1, [r2, #0]
		p += slab->block_size;
   3bbe6:	6901      	ldr	r1, [r0, #16]
		slab->free_list = p;
   3bbe8:	6182      	str	r2, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
   3bbea:	3301      	adds	r3, #1
		p += slab->block_size;
   3bbec:	440a      	add	r2, r1
	for (j = 0U; j < slab->num_blocks; j++) {
   3bbee:	e7f3      	b.n	3bbd8 <create_free_list+0xe>
		return -EINVAL;
   3bbf0:	f06f 0015 	mvn.w	r0, #21
}
   3bbf4:	4770      	bx	lr

0003bbf6 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   3bbf6:	f3ef 8005 	mrs	r0, IPSR
}
   3bbfa:	3800      	subs	r0, #0
   3bbfc:	bf18      	it	ne
   3bbfe:	2001      	movne	r0, #1
   3bc00:	4770      	bx	lr

0003bc02 <z_impl_k_thread_name_set>:
}
   3bc02:	f06f 0057 	mvn.w	r0, #87	; 0x57
   3bc06:	4770      	bx	lr

0003bc08 <k_thread_name_get>:
}
   3bc08:	2000      	movs	r0, #0
   3bc0a:	4770      	bx	lr

0003bc0c <z_impl_k_thread_start>:
	z_sched_start(thread);
   3bc0c:	f7fa bce0 	b.w	365d0 <z_sched_start>

0003bc10 <z_pm_save_idle_exit>:
{
   3bc10:	b508      	push	{r3, lr}
	pm_system_resume();
   3bc12:	f7ea fed9 	bl	269c8 <pm_system_resume>
}
   3bc16:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   3bc1a:	f7ff bcf1 	b.w	3b600 <sys_clock_idle_exit>

0003bc1e <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
   3bc1e:	f990 300e 	ldrsb.w	r3, [r0, #14]
   3bc22:	428b      	cmp	r3, r1
   3bc24:	d001      	beq.n	3bc2a <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
   3bc26:	f7fa bf4d 	b.w	36ac4 <z_set_prio>
}
   3bc2a:	2000      	movs	r0, #0
   3bc2c:	4770      	bx	lr

0003bc2e <z_queue_node_peek>:
{
   3bc2e:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   3bc30:	4604      	mov	r4, r0
   3bc32:	b130      	cbz	r0, 3bc42 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   3bc34:	6802      	ldr	r2, [r0, #0]
   3bc36:	0793      	lsls	r3, r2, #30
   3bc38:	d003      	beq.n	3bc42 <z_queue_node_peek+0x14>
		ret = anode->data;
   3bc3a:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   3bc3c:	b109      	cbz	r1, 3bc42 <z_queue_node_peek+0x14>
			k_free(anode);
   3bc3e:	f000 f9bf 	bl	3bfc0 <k_free>
}
   3bc42:	4620      	mov	r0, r4
   3bc44:	bd10      	pop	{r4, pc}

0003bc46 <z_impl_k_queue_init>:
	list->head = NULL;
   3bc46:	2300      	movs	r3, #0
	list->tail = NULL;
   3bc48:	e9c0 3300 	strd	r3, r3, [r0]
	queue->lock = (struct k_spinlock) {};
   3bc4c:	6083      	str	r3, [r0, #8]
   3bc4e:	f100 030c 	add.w	r3, r0, #12
   3bc52:	e9c0 3303 	strd	r3, r3, [r0, #12]
	sys_dlist_init(&queue->poll_events);
   3bc56:	f100 0314 	add.w	r3, r0, #20
   3bc5a:	e9c0 3305 	strd	r3, r3, [r0, #20]
}
   3bc5e:	4770      	bx	lr

0003bc60 <k_queue_append>:
{
   3bc60:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   3bc62:	2301      	movs	r3, #1
   3bc64:	9300      	str	r3, [sp, #0]
   3bc66:	2300      	movs	r3, #0
{
   3bc68:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   3bc6a:	4619      	mov	r1, r3
   3bc6c:	f7f9 fc68 	bl	35540 <queue_insert>
}
   3bc70:	b003      	add	sp, #12
   3bc72:	f85d fb04 	ldr.w	pc, [sp], #4

0003bc76 <k_queue_prepend>:
{
   3bc76:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, false);
   3bc78:	2300      	movs	r3, #0
{
   3bc7a:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   3bc7c:	9300      	str	r3, [sp, #0]
   3bc7e:	4619      	mov	r1, r3
   3bc80:	f7f9 fc5e 	bl	35540 <queue_insert>
}
   3bc84:	b003      	add	sp, #12
   3bc86:	f85d fb04 	ldr.w	pc, [sp], #4

0003bc8a <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   3bc8a:	b15a      	cbz	r2, 3bca4 <z_impl_k_sem_init+0x1a>
   3bc8c:	428a      	cmp	r2, r1
   3bc8e:	d309      	bcc.n	3bca4 <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   3bc90:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   3bc94:	e9c0 1202 	strd	r1, r2, [r0, #8]
   3bc98:	e9c0 0000 	strd	r0, r0, [r0]
   3bc9c:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   3bca0:	2000      	movs	r0, #0
   3bca2:	4770      	bx	lr
		return -EINVAL;
   3bca4:	f06f 0015 	mvn.w	r0, #21
}
   3bca8:	4770      	bx	lr

0003bcaa <flag_test_and_clear>:
	return (*flagp & BIT(bit)) != 0U;
   3bcaa:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
   3bcac:	2301      	movs	r3, #1
   3bcae:	408b      	lsls	r3, r1
   3bcb0:	ea22 0303 	bic.w	r3, r2, r3
   3bcb4:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
   3bcb6:	fa22 f001 	lsr.w	r0, r2, r1
}
   3bcba:	f000 0001 	and.w	r0, r0, #1
   3bcbe:	4770      	bx	lr

0003bcc0 <unschedule_locked>:
{
   3bcc0:	b538      	push	{r3, r4, r5, lr}
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   3bcc2:	2103      	movs	r1, #3
{
   3bcc4:	4605      	mov	r5, r0
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   3bcc6:	300c      	adds	r0, #12
   3bcc8:	f7ff ffef 	bl	3bcaa <flag_test_and_clear>
   3bccc:	4604      	mov	r4, r0
   3bcce:	b118      	cbz	r0, 3bcd8 <unschedule_locked+0x18>
		z_abort_timeout(&dwork->timeout);
   3bcd0:	f105 0010 	add.w	r0, r5, #16
   3bcd4:	f7fb fc2c 	bl	37530 <z_abort_timeout>
}
   3bcd8:	4620      	mov	r0, r4
   3bcda:	bd38      	pop	{r3, r4, r5, pc}

0003bcdc <notify_queue_locked.isra.0>:
	if (queue != NULL) {
   3bcdc:	b120      	cbz	r0, 3bce8 <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   3bcde:	2200      	movs	r2, #0
   3bce0:	4611      	mov	r1, r2
   3bce2:	3088      	adds	r0, #136	; 0x88
   3bce4:	f7fb bab2 	b.w	3724c <z_sched_wake>
}
   3bce8:	4770      	bx	lr

0003bcea <cancel_async_locked>:
{
   3bcea:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   3bcec:	68c3      	ldr	r3, [r0, #12]
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   3bcee:	f3c3 0640 	ubfx	r6, r3, #1, #1
   3bcf2:	079b      	lsls	r3, r3, #30
{
   3bcf4:	4604      	mov	r4, r0
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   3bcf6:	d416      	bmi.n	3bd26 <cancel_async_locked+0x3c>
		queue_remove_locked(work->queue, work);
   3bcf8:	6885      	ldr	r5, [r0, #8]
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   3bcfa:	2102      	movs	r1, #2
   3bcfc:	300c      	adds	r0, #12
   3bcfe:	f7ff ffd4 	bl	3bcaa <flag_test_and_clear>
   3bd02:	b180      	cbz	r0, 3bd26 <cancel_async_locked+0x3c>
	return list->head;
   3bd04:	f8d5 2080 	ldr.w	r2, [r5, #128]	; 0x80
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   3bd08:	b16a      	cbz	r2, 3bd26 <cancel_async_locked+0x3c>
   3bd0a:	4294      	cmp	r4, r2
   3bd0c:	d11d      	bne.n	3bd4a <cancel_async_locked+0x60>
	return node->next;
   3bd0e:	6822      	ldr	r2, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   3bd10:	b99e      	cbnz	r6, 3bd3a <cancel_async_locked+0x50>
   3bd12:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
	list->head = node;
   3bd16:	f8c5 2080 	str.w	r2, [r5, #128]	; 0x80
Z_GENLIST_REMOVE(slist, snode)
   3bd1a:	429c      	cmp	r4, r3
   3bd1c:	d101      	bne.n	3bd22 <cancel_async_locked+0x38>
	list->tail = node;
   3bd1e:	f8c5 2084 	str.w	r2, [r5, #132]	; 0x84
	parent->next = child;
   3bd22:	2300      	movs	r3, #0
   3bd24:	6023      	str	r3, [r4, #0]
	return *flagp;
   3bd26:	68e3      	ldr	r3, [r4, #12]
	if (ret != 0) {
   3bd28:	f013 000f 	ands.w	r0, r3, #15
	*flagp |= BIT(bit);
   3bd2c:	bf1e      	ittt	ne
   3bd2e:	f043 0302 	orrne.w	r3, r3, #2
   3bd32:	60e3      	strne	r3, [r4, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
   3bd34:	f040 0002 	orrne.w	r0, r0, #2
}
   3bd38:	bd70      	pop	{r4, r5, r6, pc}
   3bd3a:	6032      	str	r2, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
   3bd3c:	f8d5 2084 	ldr.w	r2, [r5, #132]	; 0x84
   3bd40:	4294      	cmp	r4, r2
	list->tail = node;
   3bd42:	bf08      	it	eq
   3bd44:	f8c5 6084 	streq.w	r6, [r5, #132]	; 0x84
}
   3bd48:	e7eb      	b.n	3bd22 <cancel_async_locked+0x38>
	return node->next;
   3bd4a:	4616      	mov	r6, r2
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   3bd4c:	6812      	ldr	r2, [r2, #0]
   3bd4e:	e7db      	b.n	3bd08 <cancel_async_locked+0x1e>

0003bd50 <k_work_submit_to_queue>:
{
   3bd50:	b510      	push	{r4, lr}
	int ret = z_work_submit_to_queue(queue, work);
   3bd52:	f7fa f80d 	bl	35d70 <z_work_submit_to_queue>
	if (ret > 0) {
   3bd56:	1e04      	subs	r4, r0, #0
   3bd58:	dd09      	ble.n	3bd6e <k_work_submit_to_queue+0x1e>
	__asm__ volatile(
   3bd5a:	f04f 0340 	mov.w	r3, #64	; 0x40
   3bd5e:	f3ef 8011 	mrs	r0, BASEPRI
   3bd62:	f383 8812 	msr	BASEPRI_MAX, r3
   3bd66:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   3bd6a:	f000 f80d 	bl	3bd88 <z_reschedule_irqlock>
}
   3bd6e:	4620      	mov	r0, r4
   3bd70:	bd10      	pop	{r4, pc}

0003bd72 <k_work_delayable_busy_get>:
int k_work_delayable_busy_get(const struct k_work_delayable *dwork)
   3bd72:	f7f9 bfc9 	b.w	35d08 <k_work_busy_get>

0003bd76 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   3bd76:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   3bd7a:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   3bd7e:	4283      	cmp	r3, r0
		return b2 - b1;
   3bd80:	bf14      	ite	ne
   3bd82:	1ac0      	subne	r0, r0, r3
	return 0;
   3bd84:	2000      	moveq	r0, #0
}
   3bd86:	4770      	bx	lr

0003bd88 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   3bd88:	4603      	mov	r3, r0
   3bd8a:	b920      	cbnz	r0, 3bd96 <z_reschedule_irqlock+0xe>
   3bd8c:	f3ef 8205 	mrs	r2, IPSR
   3bd90:	b90a      	cbnz	r2, 3bd96 <z_reschedule_irqlock+0xe>
   3bd92:	f7eb b905 	b.w	26fa0 <arch_swap>
	__asm__ volatile(
   3bd96:	f383 8811 	msr	BASEPRI, r3
   3bd9a:	f3bf 8f6f 	isb	sy
}
   3bd9e:	4770      	bx	lr

0003bda0 <z_reschedule_unlocked>:
	__asm__ volatile(
   3bda0:	f04f 0340 	mov.w	r3, #64	; 0x40
   3bda4:	f3ef 8011 	mrs	r0, BASEPRI
   3bda8:	f383 8812 	msr	BASEPRI_MAX, r3
   3bdac:	f3bf 8f6f 	isb	sy
   3bdb0:	f7ff bfea 	b.w	3bd88 <z_reschedule_irqlock>

0003bdb4 <z_unpend_all>:
{
   3bdb4:	b538      	push	{r3, r4, r5, lr}
   3bdb6:	4605      	mov	r5, r0
	int need_sched = 0;
   3bdb8:	2000      	movs	r0, #0
	return list->head == list;
   3bdba:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   3bdbc:	42a5      	cmp	r5, r4
   3bdbe:	d000      	beq.n	3bdc2 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   3bdc0:	b904      	cbnz	r4, 3bdc4 <z_unpend_all+0x10>
}
   3bdc2:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   3bdc4:	4620      	mov	r0, r4
   3bdc6:	f7fa ff6d 	bl	36ca4 <z_unpend_thread>
		z_ready_thread(thread);
   3bdca:	4620      	mov	r0, r4
   3bdcc:	f7fa fb64 	bl	36498 <z_ready_thread>
		need_sched = 1;
   3bdd0:	2001      	movs	r0, #1
   3bdd2:	e7f2      	b.n	3bdba <z_unpend_all+0x6>

0003bdd4 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   3bdd4:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   3bdd6:	f7fb fce5 	bl	377a4 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   3bdda:	bd08      	pop	{r3, pc}

0003bddc <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
   3bddc:	f7fb bce2 	b.w	377a4 <sys_clock_tick_get>

0003bde0 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   3bde0:	b108      	cbz	r0, 3bde6 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   3bde2:	f7eb bf1d 	b.w	27c20 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   3bde6:	4770      	bx	lr

0003bde8 <sys_clock_timeout_end_calc>:
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   3bde8:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   3bdec:	bf08      	it	eq
   3bdee:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
   3bdf2:	b538      	push	{r3, r4, r5, lr}
   3bdf4:	460c      	mov	r4, r1
   3bdf6:	4605      	mov	r5, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   3bdf8:	d014      	beq.n	3be24 <sys_clock_timeout_end_calc+0x3c>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   3bdfa:	4308      	orrs	r0, r1
   3bdfc:	d103      	bne.n	3be06 <sys_clock_timeout_end_calc+0x1e>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   3bdfe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
   3be02:	f7fb bccf 	b.w	377a4 <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   3be06:	f06f 0001 	mvn.w	r0, #1
   3be0a:	1b40      	subs	r0, r0, r5
   3be0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   3be10:	eb63 0101 	sbc.w	r1, r3, r1
   3be14:	2900      	cmp	r1, #0
   3be16:	da04      	bge.n	3be22 <sys_clock_timeout_end_calc+0x3a>
		return sys_clock_tick_get() + MAX(1, dt);
   3be18:	f7fb fcc4 	bl	377a4 <sys_clock_tick_get>
   3be1c:	1940      	adds	r0, r0, r5
   3be1e:	eb41 0104 	adc.w	r1, r1, r4
}
   3be22:	bd38      	pop	{r3, r4, r5, pc}
		return UINT64_MAX;
   3be24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3be28:	4601      	mov	r1, r0
   3be2a:	e7fa      	b.n	3be22 <sys_clock_timeout_end_calc+0x3a>

0003be2c <k_timer_init>:
	timer->status = 0U;
   3be2c:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
   3be2e:	e9c0 1208 	strd	r1, r2, [r0, #32]
   3be32:	f100 0218 	add.w	r2, r0, #24
	list->tail = (sys_dnode_t *)list;
   3be36:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
   3be3a:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
   3be3e:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
   3be40:	6343      	str	r3, [r0, #52]	; 0x34
}
   3be42:	4770      	bx	lr

0003be44 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   3be44:	b510      	push	{r4, lr}
   3be46:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	bool inactive = (z_abort_timeout(&timer->timeout) != 0);
   3be48:	f7fb fb72 	bl	37530 <z_abort_timeout>

	if (inactive) {
   3be4c:	b9b0      	cbnz	r0, 3be7c <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
   3be4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   3be50:	b10b      	cbz	r3, 3be56 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   3be52:	4620      	mov	r0, r4
   3be54:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
   3be56:	f104 0018 	add.w	r0, r4, #24
   3be5a:	f7fa ffa1 	bl	36da0 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
   3be5e:	b168      	cbz	r0, 3be7c <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
   3be60:	f7fa fb1a 	bl	36498 <z_ready_thread>
   3be64:	f04f 0340 	mov.w	r3, #64	; 0x40
   3be68:	f3ef 8011 	mrs	r0, BASEPRI
   3be6c:	f383 8812 	msr	BASEPRI_MAX, r3
   3be70:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
   3be74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   3be78:	f7ff bf86 	b.w	3bd88 <z_reschedule_irqlock>
   3be7c:	bd10      	pop	{r4, pc}

0003be7e <add_event>:
{
   3be7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3be80:	460d      	mov	r5, r1
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   3be82:	e9d0 1300 	ldrd	r1, r3, [r0]
   3be86:	4288      	cmp	r0, r1
   3be88:	4604      	mov	r4, r0
   3be8a:	d105      	bne.n	3be98 <add_event+0x1a>
	sys_dnode_t *const tail = list->tail;
   3be8c:	6863      	ldr	r3, [r4, #4]
	node->prev = tail;
   3be8e:	e9c5 4300 	strd	r4, r3, [r5]
	tail->next = node;
   3be92:	601d      	str	r5, [r3, #0]
	list->tail = node;
   3be94:	6065      	str	r5, [r4, #4]
   3be96:	e01d      	b.n	3bed4 <add_event+0x56>
	if ((pending == NULL) ||
   3be98:	2b00      	cmp	r3, #0
   3be9a:	d0f7      	beq.n	3be8c <add_event+0xe>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   3be9c:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   3be9e:	b100      	cbz	r0, 3bea2 <add_event+0x24>
   3bea0:	3860      	subs	r0, #96	; 0x60
   3bea2:	f1a2 0760 	sub.w	r7, r2, #96	; 0x60
		(z_sched_prio_cmp(poller_thread(pending->poller),
   3bea6:	4639      	mov	r1, r7
   3bea8:	f7ff ff65 	bl	3bd76 <z_sched_prio_cmp>
	if ((pending == NULL) ||
   3beac:	2800      	cmp	r0, #0
   3beae:	dced      	bgt.n	3be8c <add_event+0xe>
	return list->head == list;
   3beb0:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   3beb2:	42b4      	cmp	r4, r6
   3beb4:	d0ea      	beq.n	3be8c <add_event+0xe>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   3beb6:	2e00      	cmp	r6, #0
   3beb8:	d0e8      	beq.n	3be8c <add_event+0xe>
		if (z_sched_prio_cmp(poller_thread(poller),
   3beba:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   3bebc:	b101      	cbz	r1, 3bec0 <add_event+0x42>
   3bebe:	3960      	subs	r1, #96	; 0x60
		if (z_sched_prio_cmp(poller_thread(poller),
   3bec0:	4638      	mov	r0, r7
   3bec2:	f7ff ff58 	bl	3bd76 <z_sched_prio_cmp>
   3bec6:	2800      	cmp	r0, #0
   3bec8:	dd05      	ble.n	3bed6 <add_event+0x58>
	sys_dnode_t *const prev = successor->prev;
   3beca:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   3becc:	e9c5 6300 	strd	r6, r3, [r5]
	prev->next = node;
   3bed0:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   3bed2:	6075      	str	r5, [r6, #4]
}
   3bed4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   3bed6:	6863      	ldr	r3, [r4, #4]
   3bed8:	429e      	cmp	r6, r3
   3beda:	d0d7      	beq.n	3be8c <add_event+0xe>
   3bedc:	6836      	ldr	r6, [r6, #0]
   3bede:	e7ea      	b.n	3beb6 <add_event+0x38>

0003bee0 <signal_poll_event>:
{
   3bee0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   3bee4:	6884      	ldr	r4, [r0, #8]
{
   3bee6:	4605      	mov	r5, r0
   3bee8:	460e      	mov	r6, r1
	if (poller != NULL) {
   3beea:	b144      	cbz	r4, 3befe <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
   3beec:	7863      	ldrb	r3, [r4, #1]
   3beee:	2b01      	cmp	r3, #1
   3bef0:	d12e      	bne.n	3bf50 <signal_poll_event+0x70>
	if (!z_is_thread_pending(thread)) {
   3bef2:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   3bef6:	f013 0302 	ands.w	r3, r3, #2
   3befa:	d10a      	bne.n	3bf12 <signal_poll_event+0x32>
		poller->is_polling = false;
   3befc:	7023      	strb	r3, [r4, #0]
	event->state |= state;
   3befe:	68eb      	ldr	r3, [r5, #12]
   3bf00:	f3c3 3286 	ubfx	r2, r3, #14, #7
   3bf04:	4316      	orrs	r6, r2
	event->poller = NULL;
   3bf06:	2000      	movs	r0, #0
	event->state |= state;
   3bf08:	f366 3394 	bfi	r3, r6, #14, #7
	event->poller = NULL;
   3bf0c:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   3bf0e:	60eb      	str	r3, [r5, #12]
	return retcode;
   3bf10:	e03e      	b.n	3bf90 <signal_poll_event+0xb0>
	if (z_is_thread_timeout_expired(thread)) {
   3bf12:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
   3bf16:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   3bf1a:	bf08      	it	eq
   3bf1c:	f112 0f02 	cmneq.w	r2, #2
   3bf20:	d032      	beq.n	3bf88 <signal_poll_event+0xa8>
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   3bf22:	f1a4 0860 	sub.w	r8, r4, #96	; 0x60
	z_unpend_thread(thread);
   3bf26:	4640      	mov	r0, r8
   3bf28:	f7fa febc 	bl	36ca4 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   3bf2c:	2e08      	cmp	r6, #8
   3bf2e:	bf0c      	ite	eq
   3bf30:	f06f 0303 	mvneq.w	r3, #3
   3bf34:	2300      	movne	r3, #0
   3bf36:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   3bf38:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   3bf3c:	06db      	lsls	r3, r3, #27
   3bf3e:	d109      	bne.n	3bf54 <signal_poll_event+0x74>
   3bf40:	f854 7c48 	ldr.w	r7, [r4, #-72]
   3bf44:	b937      	cbnz	r7, 3bf54 <signal_poll_event+0x74>
	z_ready_thread(thread);
   3bf46:	4640      	mov	r0, r8
   3bf48:	f7fa faa6 	bl	36498 <z_ready_thread>
		poller->is_polling = false;
   3bf4c:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   3bf4e:	e7d6      	b.n	3befe <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
   3bf50:	2b02      	cmp	r3, #2
   3bf52:	d001      	beq.n	3bf58 <signal_poll_event+0x78>
		poller->is_polling = false;
   3bf54:	2300      	movs	r3, #0
   3bf56:	e7d1      	b.n	3befc <signal_poll_event+0x1c>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   3bf58:	7823      	ldrb	r3, [r4, #0]
   3bf5a:	2b00      	cmp	r3, #0
   3bf5c:	d0cf      	beq.n	3befe <signal_poll_event+0x1e>
   3bf5e:	f854 7c04 	ldr.w	r7, [r4, #-4]
   3bf62:	2f00      	cmp	r7, #0
   3bf64:	d0f2      	beq.n	3bf4c <signal_poll_event+0x6c>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   3bf66:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   3bf6a:	f1a4 0914 	sub.w	r9, r4, #20
   3bf6e:	f104 0014 	add.w	r0, r4, #20
   3bf72:	f7fb fadd 	bl	37530 <z_abort_timeout>
		twork->poll_result = 0;
   3bf76:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		z_work_submit_to_queue(work_q, &twork->work);
   3bf7a:	4649      	mov	r1, r9
   3bf7c:	4638      	mov	r0, r7
   3bf7e:	f7f9 fef7 	bl	35d70 <z_work_submit_to_queue>
		poller->is_polling = false;
   3bf82:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   3bf86:	e7ba      	b.n	3befe <signal_poll_event+0x1e>
		poller->is_polling = false;
   3bf88:	2300      	movs	r3, #0
   3bf8a:	7023      	strb	r3, [r4, #0]
		return -EAGAIN;
   3bf8c:	f06f 000a 	mvn.w	r0, #10
}
   3bf90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0003bf94 <z_handle_obj_poll_events>:
{
   3bf94:	4603      	mov	r3, r0
	return list->head == list;
   3bf96:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   3bf98:	4283      	cmp	r3, r0
   3bf9a:	d008      	beq.n	3bfae <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
   3bf9c:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   3bfa0:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   3bfa2:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   3bfa4:	2300      	movs	r3, #0
	node->prev = NULL;
   3bfa6:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   3bfaa:	f7ff bf99 	b.w	3bee0 <signal_poll_event>
}
   3bfae:	4770      	bx	lr

0003bfb0 <z_impl_k_poll_signal_init>:
	sig->signaled = 0U;
   3bfb0:	2300      	movs	r3, #0
	list->tail = (sys_dnode_t *)list;
   3bfb2:	e9c0 0000 	strd	r0, r0, [r0]
   3bfb6:	6083      	str	r3, [r0, #8]
}
   3bfb8:	4770      	bx	lr

0003bfba <z_impl_k_poll_signal_reset>:
	sig->signaled = 0U;
   3bfba:	2300      	movs	r3, #0
   3bfbc:	6083      	str	r3, [r0, #8]
}
   3bfbe:	4770      	bx	lr

0003bfc0 <k_free>:
	if (ptr != NULL) {
   3bfc0:	b120      	cbz	r0, 3bfcc <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
   3bfc2:	1f01      	subs	r1, r0, #4
   3bfc4:	f850 0c04 	ldr.w	r0, [r0, #-4]
   3bfc8:	f7f8 bf36 	b.w	34e38 <k_heap_free>
}
   3bfcc:	4770      	bx	lr

0003bfce <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   3bfce:	4770      	bx	lr
