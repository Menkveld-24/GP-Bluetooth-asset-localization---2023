
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
	return cb(str, strl, ctx);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
   0:	00 61 00 20 71 21 00 00 1d 6d 00 00 45 21 00 00     .a. q!...m..E!..
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
	/* Get number of first read only strings present in the string.
	 * There is always at least 1 (fmt) but flags can indicate more, e.g
	 * fixed prefix appended to all strings.
	 */
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
  10:	45 21 00 00 45 21 00 00 45 21 00 00 00 00 00 00     E!..E!..E!......
	...

	/*
	 * Otherwise we must ensure we can store at least
	 * the pointer to the format string itself.
	 */
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
  2c:	5d 1c 00 00 45 21 00 00 00 00 00 00 09 1c 00 00     ]...E!..........
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
  3c:	45 21 00 00                                         E!..

00000040 <_irq_vector_table>:
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
  40:	0d 1d 00 00 0d 1d 00 00 0d 1d 00 00 0d 1d 00 00     ................
	int arg_idx	      = -1; /* Argument index. Preincremented thus starting from -1.*/
  50:	0d 1d 00 00 0d 1d 00 00 0d 1d 00 00 0d 1d 00 00     ................

		/* copy va_list data over to our buffer */
		if (is_str_arg) {
			s = va_arg(ap, char *);
process_string:
			if (buf0 != NULL) {
  60:	0d 1d 00 00 0d 1d 00 00 0d 1d 00 00 0d 1d 00 00     ................
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
  70:	0d 1d 00 00 0d 1d 00 00 0d 1d 00 00 0d 1d 00 00     ................
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);

			if (is_ro && !do_ro) {
				/* nothing to do */
			} else {
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
  80:	0d 1d 00 00 0d 1d 00 00 0d 1d 00 00 0d 1d 00 00     ................
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
					__ASSERT(false, "String with too many arguments");
					return -EINVAL;
				}

				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
  90:	0d 1d 00 00 0d 1d 00 00 0d 1d 00 00 0d 1d 00 00     ................
				if (buf0 != NULL) {
					/*
					 * Remember string pointer location.
					 * We will append non-ro strings later.
					 */
					str_ptr_pos[s_idx] = s_ptr_idx;
  a0:	0d 1d 00 00 0d 1d 00 00 0d 1d 00 00 0d 1d 00 00     ................
					if (is_ro) {
						/* flag read-only string. */
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
						s_ro_cnt++;
					} else {
						s_rw_cnt++;
  b0:	0d 1d 00 00 0d 1d 00 00 0d 1d 00 00 0d 1d 00 00     ................
			switch (*fmt) {
  c0:	0d 1d 00 00 0d 1d 00 00 0d 1d 00 00 0d 1d 00 00     ................
  d0:	0d 1d 00 00 0d 1d 00 00 0d 1d 00 00                 ............

Disassembly of section text:

000000dc <__aeabi_uldivmod>:
      dc:	b953      	cbnz	r3, f4 <__aeabi_uldivmod+0x18>
      de:	b94a      	cbnz	r2, f4 <__aeabi_uldivmod+0x18>
      e0:	2900      	cmp	r1, #0
      e2:	bf08      	it	eq
      e4:	2800      	cmpeq	r0, #0
      e6:	bf1c      	itt	ne
      e8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
      ec:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
      f0:	f000 b80c 	b.w	10c <__aeabi_idiv0>
      f4:	f1ad 0c08 	sub.w	ip, sp, #8
      f8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
      fc:	f000 f808 	bl	110 <__udivmoddi4>
     100:	f8dd e004 	ldr.w	lr, [sp, #4]
     104:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     108:	b004      	add	sp, #16
     10a:	4770      	bx	lr

0000010c <__aeabi_idiv0>:
     10c:	4770      	bx	lr
     10e:	bf00      	nop

00000110 <__udivmoddi4>:
     110:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     114:	4686      	mov	lr, r0
     116:	468c      	mov	ip, r1
     118:	4608      	mov	r0, r1
     11a:	9e08      	ldr	r6, [sp, #32]
     11c:	4615      	mov	r5, r2
				align = VA_STACK_ALIGN(void *);
     11e:	4674      	mov	r4, lr
     120:	4619      	mov	r1, r3
     122:	2b00      	cmp	r3, #0
			switch (*fmt) {
     124:	f040 80c2 	bne.w	2ac <CONFIG_FLASH_SIZE+0xac>
     128:	4285      	cmp	r5, r0
     12a:	fab2 f282 	clz	r2, r2
     12e:	d945      	bls.n	1bc <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x4f>
     130:	b14a      	cbz	r2, 146 <CONFIG_IDLE_STACK_SIZE+0x6>
     132:	f1c2 0320 	rsb	r3, r2, #32
     136:	fa00 fc02 	lsl.w	ip, r0, r2
     13a:	fa2e f303 	lsr.w	r3, lr, r3
     13e:	4095      	lsls	r5, r2
     140:	ea43 0c0c 	orr.w	ip, r3, ip
		buf = (void *) ROUND_UP(buf, align);
     144:	4094      	lsls	r4, r2
     146:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     14a:	b2a8      	uxth	r0, r5
     14c:	fbbc f8fe 	udiv	r8, ip, lr
		if (buf0 != NULL && BUF_OFFSET + size > len) {
     150:	0c23      	lsrs	r3, r4, #16
     152:	fb0e cc18 	mls	ip, lr, r8, ip
     156:	fb08 f900 	mul.w	r9, r8, r0
     15a:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
     15e:	4599      	cmp	r9, r3
		if (is_str_arg) {
     160:	d928      	bls.n	1b4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x47>
     162:	18eb      	adds	r3, r5, r3
				s_idx++;
			}
			buf += sizeof(char *);

			is_str_arg = false;
		} else if (size == sizeof(int)) {
     164:	f108 37ff 	add.w	r7, r8, #4294967295	; 0xffffffff
			int v = va_arg(ap, int);
     168:	d204      	bcs.n	174 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x7>
     16a:	4599      	cmp	r9, r3

			if (buf0 != NULL) {
				*(int *)buf = v;
     16c:	d902      	bls.n	174 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x7>
			}
			buf += sizeof(int);
     16e:	f1a8 0702 	sub.w	r7, r8, #2
     172:	442b      	add	r3, r5
				arg_idx--;
     174:	eba3 0309 	sub.w	r3, r3, r9
     178:	b2a4      	uxth	r4, r4
				parsing = false;
     17a:	fbb3 fcfe 	udiv	ip, r3, lr
				continue;
     17e:	fb0e 331c 	mls	r3, lr, ip, r3
				if (fmt[-1] == 'l') {
     182:	fb0c f000 	mul.w	r0, ip, r0
     186:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
					if (fmt[-2] == 'l') {
     18a:	42a0      	cmp	r0, r4
     18c:	d914      	bls.n	1b8 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x4b>
     18e:	192c      	adds	r4, r5, r4
				parsing = false;
     190:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
						align = VA_STACK_ALIGN(long long);
     194:	d204      	bcs.n	1a0 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x33>
     196:	42a0      	cmp	r0, r4
				size = sizeof(void *);
     198:	d902      	bls.n	1a0 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x33>
     19a:	f1ac 0302 	sub.w	r3, ip, #2
					v.ld = va_arg(ap, long double);
     19e:	442c      	add	r4, r5
     1a0:	1a24      	subs	r4, r4, r0
     1a2:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
     1a6:	b11e      	cbz	r6, 1b0 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x43>
     1a8:	40d4      	lsrs	r4, r2
				buf = (void *) ROUND_UP(buf, align);
     1aa:	2300      	movs	r3, #0
     1ac:	6034      	str	r4, [r6, #0]
				if (buf0 != NULL) {
     1ae:	6073      	str	r3, [r6, #4]
					if (BUF_OFFSET + size > len) {
     1b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     1b4:	4647      	mov	r7, r8
     1b6:	e7dd      	b.n	174 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x7>
     1b8:	4663      	mov	r3, ip
						*(long double *)buf = v.ld;
     1ba:	e7f1      	b.n	1a0 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x33>
     1bc:	bb92      	cbnz	r2, 224 <CONFIG_FLASH_SIZE+0x24>
				buf += size;
     1be:	1b43      	subs	r3, r0, r5
				parsing = false;
     1c0:	2101      	movs	r1, #1
     1c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
			switch (*fmt) {
     1c6:	b2af      	uxth	r7, r5
     1c8:	fbb3 fcfe 	udiv	ip, r3, lr
			if (*++fmt == '\0') {
     1cc:	0c20      	lsrs	r0, r4, #16
     1ce:	fb0e 331c 	mls	r3, lr, ip, r3
			if (!parsing) {
     1d2:	fb0c f807 	mul.w	r8, ip, r7
     1d6:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
				if (*fmt == '%') {
     1da:	4598      	cmp	r8, r3
     1dc:	d962      	bls.n	2a4 <CONFIG_FLASH_SIZE+0xa4>
					arg_idx++;
     1de:	18eb      	adds	r3, r5, r3
     1e0:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
					parsing = true;
     1e4:	d204      	bcs.n	1f0 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x83>
     1e6:	4598      	cmp	r8, r3
				align = VA_STACK_ALIGN(size_t);
     1e8:	d902      	bls.n	1f0 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x83>
     1ea:	f1ac 0002 	sub.w	r0, ip, #2
			switch (*fmt) {
     1ee:	442b      	add	r3, r5
     1f0:	eba3 0308 	sub.w	r3, r3, r8
				parsing = false;
     1f4:	b2a4      	uxth	r4, r4
     1f6:	fbb3 fcfe 	udiv	ip, r3, lr

			if (buf0 != NULL) {
				*(long *)buf = v;
			}
			buf += sizeof(long);
		} else if (size == sizeof(long long)) {
     1fa:	fb0e 331c 	mls	r3, lr, ip, r3
					return -EINVAL;
     1fe:	fb0c f707 	mul.w	r7, ip, r7
			long long v = va_arg(ap, long long);
     202:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     206:	42a7      	cmp	r7, r4
     208:	d94e      	bls.n	2a8 <CONFIG_FLASH_SIZE+0xa8>
     20a:	192c      	adds	r4, r5, r4
     20c:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff

			if (buf0 != NULL) {
				if (Z_CBPRINTF_VA_STACK_LL_DBL_MEMCPY) {
					memcpy(buf, &v, sizeof(long long));
				} else {
					*(long long *)buf = v;
     210:	d204      	bcs.n	21c <CONFIG_FLASH_SIZE+0x1c>
				}
			}
			buf += sizeof(long long);
     212:	42a7      	cmp	r7, r4
     214:	d902      	bls.n	21c <CONFIG_FLASH_SIZE+0x1c>
     216:	f1ac 0302 	sub.w	r3, ip, #2
		} else if (size == sizeof(int)) {
     21a:	442c      	add	r4, r5
     21c:	1be4      	subs	r4, r4, r7
			int v = va_arg(ap, int);
     21e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
			if (buf0 != NULL) {
     222:	e7c0      	b.n	1a6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x39>
		} else if (size == sizeof(long long)) {
     224:	f1c2 0320 	rsb	r3, r2, #32
			long long v = va_arg(ap, long long);
     228:	fa20 f103 	lsr.w	r1, r0, r3
     22c:	4095      	lsls	r5, r2
     22e:	4090      	lsls	r0, r2
     230:	fa2e f303 	lsr.w	r3, lr, r3
			if (buf0 != NULL) {
     234:	4303      	orrs	r3, r0
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     236:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     23a:	b2af      	uxth	r7, r5
			s = va_arg(ap, char *);
     23c:	fbb1 fcfe 	udiv	ip, r1, lr
     240:	fb0e 101c 	mls	r0, lr, ip, r1
			if (is_ro && !do_ro) {
     244:	0c19      	lsrs	r1, r3, #16
     246:	fb0c f807 	mul.w	r8, ip, r7
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
     24a:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
     24e:	4588      	cmp	r8, r1
     250:	fa04 f402 	lsl.w	r4, r4, r2
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     254:	d922      	bls.n	29c <CONFIG_FLASH_SIZE+0x9c>
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
     256:	1869      	adds	r1, r5, r1
     258:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
     25c:	d204      	bcs.n	268 <CONFIG_FLASH_SIZE+0x68>
     25e:	4588      	cmp	r8, r1
				if (buf0 != NULL) {
     260:	d902      	bls.n	268 <CONFIG_FLASH_SIZE+0x68>
					str_ptr_pos[s_idx] = s_ptr_idx;
     262:	f1ac 0002 	sub.w	r0, ip, #2
     266:	4429      	add	r1, r5
     268:	eba1 0108 	sub.w	r1, r1, r8
					str_ptr_arg[s_idx] = arg_idx;
     26c:	b29b      	uxth	r3, r3
					str_ptr_pos[s_idx] = s_ptr_idx;
     26e:	fbb1 fcfe 	udiv	ip, r1, lr
					str_ptr_arg[s_idx] = arg_idx;
     272:	fb0e 111c 	mls	r1, lr, ip, r1
					if (is_ro) {
     276:	fb0c f707 	mul.w	r7, ip, r7
     27a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
     27e:	429f      	cmp	r7, r3
     280:	d90e      	bls.n	2a0 <CONFIG_FLASH_SIZE+0xa0>
     282:	18eb      	adds	r3, r5, r3
     284:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
						s_ro_cnt++;
     288:	d204      	bcs.n	294 <CONFIG_FLASH_SIZE+0x94>
				s_idx++;
     28a:	429f      	cmp	r7, r3
					if (BUF_OFFSET + size > len) {
     28c:	d902      	bls.n	294 <CONFIG_FLASH_SIZE+0x94>
     28e:	f1ac 0102 	sub.w	r1, ip, #2
     292:	442b      	add	r3, r5
			switch (*fmt) {
     294:	1bdb      	subs	r3, r3, r7
     296:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     29a:	e792      	b.n	1c2 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x55>
     29c:	4660      	mov	r0, ip
     29e:	e7e3      	b.n	268 <CONFIG_FLASH_SIZE+0x68>
				} else if (is_ro) {
     2a0:	4661      	mov	r1, ip
     2a2:	e7f7      	b.n	294 <CONFIG_FLASH_SIZE+0x94>
     2a4:	4660      	mov	r0, ip
					len += 1;
     2a6:	e7a3      	b.n	1f0 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x83>
     2a8:	4663      	mov	r3, ip
				} else if (rws_pos_en) {
     2aa:	e7b7      	b.n	21c <CONFIG_FLASH_SIZE+0x1c>
					len += 2;
     2ac:	4283      	cmp	r3, r0
				} else if (rws_pos_en) {
     2ae:	d906      	bls.n	2be <CONFIG_FLASH_SIZE+0xbe>
     2b0:	b916      	cbnz	r6, 2b8 <CONFIG_FLASH_SIZE+0xb8>
					len += strlen(s) + 1 + 1;
     2b2:	2100      	movs	r1, #0
     2b4:	4608      	mov	r0, r1
     2b6:	e77b      	b.n	1b0 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x43>
     2b8:	e9c6 e000 	strd	lr, r0, [r6]
     2bc:	e7f9      	b.n	2b2 <CONFIG_FLASH_SIZE+0xb2>
     2be:	fab3 f783 	clz	r7, r3
     2c2:	b98f      	cbnz	r7, 2e8 <CONFIG_FLASH_SIZE+0xe8>
	 * We remember the size of the argument list as a multiple of
	 * sizeof(int) and limit it to a 8-bit field. That means 1020 bytes
	 * worth of va_list, or about 127 arguments on a 64-bit system
	 * (twice that on 32-bit systems). That ought to be good enough.
	 */
	if (BUF_OFFSET / sizeof(int) > 255) {
     2c4:	4283      	cmp	r3, r0
     2c6:	d301      	bcc.n	2cc <CONFIG_FLASH_SIZE+0xcc>
     2c8:	4572      	cmp	r2, lr
     2ca:	d808      	bhi.n	2de <CONFIG_FLASH_SIZE+0xde>

	/*
	 * If all we wanted was to count required buffer size
	 * then we have it now.
	 */
	if (buf0 == NULL) {
     2cc:	ebbe 0402 	subs.w	r4, lr, r2
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
     2d0:	eb60 0303 	sbc.w	r3, r0, r3
     2d4:	2001      	movs	r0, #1
     2d6:	469c      	mov	ip, r3
     2d8:	b91e      	cbnz	r6, 2e2 <CONFIG_FLASH_SIZE+0xe2>
     2da:	2100      	movs	r1, #0
     2dc:	e768      	b.n	1b0 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x43>
     2de:	4638      	mov	r0, r7
	*(char **)buf0 = NULL;

	/* Record end of argument list. */
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);

	if (rws_pos_en) {
     2e0:	e7fa      	b.n	2d8 <CONFIG_FLASH_SIZE+0xd8>
	*(char **)buf0 = NULL;
     2e2:	e9c6 4c00 	strd	r4, ip, [r6]
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);
     2e6:	e7f8      	b.n	2da <CONFIG_FLASH_SIZE+0xda>
		/* Strings are appended, update location counter. */
		pkg_hdr->desc.str_cnt = 0;
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
     2e8:	f1c7 0c20 	rsb	ip, r7, #32
	if (rws_pos_en) {
     2ec:	40bb      	lsls	r3, r7
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
     2ee:	fa22 f40c 	lsr.w	r4, r2, ip
		/* Strings are appended, update append counter. */
		pkg_hdr->desc.str_cnt = s_rw_cnt;
		pkg_hdr->desc.rw_str_cnt = 0;
	}

	pkg_hdr->desc.ro_str_cnt = s_ro_cnt;
     2f2:	431c      	orrs	r4, r3
#ifdef CONFIG_CBPRINTF_PACKAGE_HEADER_STORE_CREATION_FLAGS
	pkg_hdr->desc.pkg_flags = flags;
#endif

	/* Store strings pointer locations of read only strings. */
	if (s_ro_cnt) {
     2f4:	fa2e f10c 	lsr.w	r1, lr, ip
     2f8:	fa20 f30c 	lsr.w	r3, r0, ip
		for (i = 0; i < s_idx; i++) {
     2fc:	40b8      	lsls	r0, r7
			}

			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;

			/* make sure it fits */
			if (BUF_OFFSET + 1 > len) {
     2fe:	4301      	orrs	r1, r0
     300:	ea4f 4914 	mov.w	r9, r4, lsr #16
		for (i = 0; i < s_idx; i++) {
     304:	fa0e f507 	lsl.w	r5, lr, r7
			/* find the string length including terminating '\0' */
			size = strlen(s) + 1;
		}

		/* make sure it fits */
		if (BUF_OFFSET + 1 + size > len) {
     308:	fbb3 f8f9 	udiv	r8, r3, r9
     30c:	fa1f fe84 	uxth.w	lr, r4
			*buf++ = str_ptr_arg[i];
     310:	fb09 3018 	mls	r0, r9, r8, r3
     314:	0c0b      	lsrs	r3, r1, #16
     316:	fb08 fa0e 	mul.w	sl, r8, lr
	for (i = 0; i < s_idx; i++) {
     31a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
	/*
	 * TODO: remove pointers for appended strings since they're useless.
	 * TODO: explore leveraging same mechanism to remove alignment padding
	 */

	return BUF_OFFSET;
     31e:	459a      	cmp	sl, r3
		pkg_hdr->desc.str_cnt = s_rw_cnt;
     320:	fa02 f207 	lsl.w	r2, r2, r7
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
     324:	d940      	bls.n	3a8 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0xa8>
     326:	18e3      	adds	r3, r4, r3
     328:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
			if (BUF_OFFSET + 1 > len) {
     32c:	d204      	bcs.n	338 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x38>
     32e:	459a      	cmp	sl, r3
     330:	d902      	bls.n	338 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x38>
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
     332:	f1a8 0002 	sub.w	r0, r8, #2
			if (BUF_OFFSET + 1 > len) {
     336:	4423      	add	r3, r4
     338:	eba3 030a 	sub.w	r3, r3, sl
			*buf++ = pos;
     33c:	b289      	uxth	r1, r1
		for (i = 0; i < s_idx; i++) {
     33e:	fbb3 f8f9 	udiv	r8, r3, r9
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
     342:	fb09 3318 	mls	r3, r9, r8, r3
     346:	fb08 fe0e 	mul.w	lr, r8, lr
     34a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
     34e:	458e      	cmp	lr, r1
		if (rws_pos_en) {
     350:	d92c      	bls.n	3ac <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0xac>
     352:	1861      	adds	r1, r4, r1
			*buf++ = str_ptr_arg[i];
     354:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
     358:	d204      	bcs.n	364 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x64>
     35a:	458e      	cmp	lr, r1
			size = 0;
     35c:	d902      	bls.n	364 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x64>
		if (BUF_OFFSET + 1 + size > len) {
     35e:	f1a8 0302 	sub.w	r3, r8, #2
     362:	4421      	add	r1, r4
     364:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     368:	fba0 9802 	umull	r9, r8, r0, r2
		*buf++ = str_ptr_pos[i];
     36c:	eba1 010e 	sub.w	r1, r1, lr
     370:	4541      	cmp	r1, r8
		memcpy(buf, s, size);
     372:	46ce      	mov	lr, r9
     374:	4643      	mov	r3, r8
     376:	d302      	bcc.n	37e <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x7e>
     378:	d106      	bne.n	388 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x88>
     37a:	454d      	cmp	r5, r9
		buf += size;
     37c:	d204      	bcs.n	388 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x88>
     37e:	ebb9 0e02 	subs.w	lr, r9, r2
	for (i = 0; i < s_idx; i++) {
     382:	eb68 0304 	sbc.w	r3, r8, r4
     386:	3801      	subs	r0, #1
     388:	2e00      	cmp	r6, #0
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
     38a:	d0a6      	beq.n	2da <CONFIG_FLASH_SIZE+0xda>
     38c:	ebb5 020e 	subs.w	r2, r5, lr
     390:	eb61 0103 	sbc.w	r1, r1, r3
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
     394:	fa01 fc0c 	lsl.w	ip, r1, ip
     398:	fa22 f307 	lsr.w	r3, r2, r7
			size = strlen(s) + 1;
     39c:	ea4c 0303 	orr.w	r3, ip, r3
     3a0:	40f9      	lsrs	r1, r7
     3a2:	e9c6 3100 	strd	r3, r1, [r6]
		return -EFAULT;
     3a6:	e798      	b.n	2da <CONFIG_FLASH_SIZE+0xda>
     3a8:	4640      	mov	r0, r8
     3aa:	e7c5      	b.n	338 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x38>
     3ac:	4643      	mov	r3, r8
     3ae:	e7d9      	b.n	364 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x64>

000003b0 <main>:
    return (bool)pin_active;
}
#endif

void main(void)
{
     3b0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
}

NRF_STATIC_INLINE void nrf_wdt_reload_request_set(NRF_WDT_Type *        p_reg,
                                                  nrf_wdt_rr_register_t rr_register)
{
    p_reg->RR[rr_register] = NRF_WDT_RR_VALUE;
     3b2:	4b2b      	ldr	r3, [pc, #172]	; (460 <CONFIG_MPSL_WORK_STACK_SIZE+0x60>)
     3b4:	4a2b      	ldr	r2, [pc, #172]	; (464 <CONFIG_MPSL_WORK_STACK_SIZE+0x64>)
     3b6:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
    fih_int fih_rc = FIH_FAILURE;

    MCUBOOT_WATCHDOG_FEED();

#if !defined(MCUBOOT_DIRECT_XIP)
    BOOT_LOG_INF("Starting bootloader");
     3ba:	482b      	ldr	r0, [pc, #172]	; (468 <CONFIG_MPSL_WORK_STACK_SIZE+0x68>)
     3bc:	f8c3 2604 	str.w	r2, [r3, #1540]	; 0x604
     3c0:	2149      	movs	r1, #73	; 0x49
     3c2:	f8c3 2608 	str.w	r2, [r3, #1544]	; 0x608
     3c6:	f8c3 260c 	str.w	r2, [r3, #1548]	; 0x60c
     3ca:	f8c3 2610 	str.w	r2, [r3, #1552]	; 0x610
     3ce:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
     3d2:	f8c3 2618 	str.w	r2, [r3, #1560]	; 0x618
     3d6:	f8c3 261c 	str.w	r2, [r3, #1564]	; 0x61c
     3da:	f006 fc1b 	bl	6c14 <z_log_minimal_printk>
#ifdef CONFIG_MCUBOOT_INDICATION_LED
    /* LED init */
    led_init();
#endif

    os_heap_init();
     3de:	f000 f871 	bl	4c4 <os_heap_init>

000003e2 <FIH_LABEL_FIH_CALL_START_212>:
    rc = boot_console_init();
    int timeout_in_ms = CONFIG_BOOT_SERIAL_WAIT_FOR_DFU_TIMEOUT;
    uint32_t start = k_uptime_get_32();
#endif

    FIH_CALL(boot_go, fih_rc, &rsp);
     3e2:	a801      	add	r0, sp, #4
     3e4:	f000 fcd2 	bl	d8c <boot_go>

000003e8 <FIH_LABEL_FIH_CALL_END_224>:
        timeout_in_ms = 1;
    }
    boot_serial_check_start(&boot_funcs,timeout_in_ms);
#endif

    if (fih_not_eq(fih_rc, FIH_SUCCESS)) {
     3e8:	4b20      	ldr	r3, [pc, #128]	; (46c <CONFIG_MPSL_WORK_STACK_SIZE+0x6c>)
     3ea:	681b      	ldr	r3, [r3, #0]
     3ec:	4283      	cmp	r3, r0
     3ee:	d004      	beq.n	3fa <FIH_LABEL_FIH_CALL_END_224+0x12>
        BOOT_LOG_ERR("Unable to find bootable image");
     3f0:	481f      	ldr	r0, [pc, #124]	; (470 <CONFIG_MPSL_WORK_STACK_SIZE+0x70>)
     3f2:	2145      	movs	r1, #69	; 0x45
     3f4:	f006 fc0e 	bl	6c14 <z_log_minimal_printk>

        mcuboot_status_change(MCUBOOT_STATUS_NO_BOOTABLE_IMAGE_FOUND);

        FIH_PANIC;
     3f8:	e7fe      	b.n	3f8 <FIH_LABEL_FIH_CALL_END_224+0x10>
    }

    BOOT_LOG_INF("Bootloader chainload address offset: 0x%x",
     3fa:	9a03      	ldr	r2, [sp, #12]
     3fc:	481d      	ldr	r0, [pc, #116]	; (474 <CONFIG_MPSL_WORK_STACK_SIZE+0x74>)
     3fe:	2149      	movs	r1, #73	; 0x49
     400:	f006 fc08 	bl	6c14 <z_log_minimal_printk>
                 rsp.br_image_off);

#if defined(MCUBOOT_DIRECT_XIP)
    BOOT_LOG_INF("Jumping to the image slot");
#else
    BOOT_LOG_INF("Jumping to the first image slot");
     404:	481c      	ldr	r0, [pc, #112]	; (478 <CONFIG_MPSL_WORK_STACK_SIZE+0x78>)
     406:	2149      	movs	r1, #73	; 0x49
     408:	f006 fc04 	bl	6c14 <z_log_minimal_printk>
/* There is only one instance of MCUBoot */
#define PROTECT_SIZE (PM_MCUBOOT_PRIMARY_ADDRESS - PM_MCUBOOT_ADDRESS)
#define PROTECT_ADDR PM_MCUBOOT_ADDRESS
#endif

    rc = fprotect_area(PROTECT_ADDR, PROTECT_SIZE);
     40c:	f44f 4140 	mov.w	r1, #49152	; 0xc000
     410:	2000      	movs	r0, #0
     412:	f007 f952 	bl	76ba <fprotect_area>

    if (rc != 0) {
     416:	b120      	cbz	r0, 422 <CONFIG_MPSL_WORK_STACK_SIZE+0x22>
        BOOT_LOG_ERR("Protect mcuboot flash failed, cancel startup.");
     418:	4818      	ldr	r0, [pc, #96]	; (47c <CONFIG_MPSL_WORK_STACK_SIZE+0x7c>)
     41a:	2145      	movs	r1, #69	; 0x45
     41c:	f006 fbfa 	bl	6c14 <z_log_minimal_printk>
        while (1)
     420:	e7fe      	b.n	420 <CONFIG_MPSL_WORK_STACK_SIZE+0x20>
    rc = flash_device_base(rsp->br_flash_dev_id, &flash_base);
     422:	4669      	mov	r1, sp
     424:	f89d 0008 	ldrb.w	r0, [sp, #8]
     428:	f000 f82c 	bl	484 <flash_device_base>
    vt = (struct arm_vector_table *)(flash_base +
     42c:	9b00      	ldr	r3, [sp, #0]
     42e:	9c03      	ldr	r4, [sp, #12]
     430:	441c      	add	r4, r3
                                     rsp->br_hdr->ih_hdr_size);
     432:	9b01      	ldr	r3, [sp, #4]
     434:	891d      	ldrh	r5, [r3, #8]
    nrf_cleanup_peripheral();
     436:	f000 ff5d 	bl	12f4 <nrf_cleanup_peripheral>
                                     rsp->br_image_off +
     43a:	1966      	adds	r6, r4, r5
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
     43c:	f04f 0220 	mov.w	r2, #32
     440:	f3ef 8311 	mrs	r3, BASEPRI
     444:	f382 8812 	msr	BASEPRI_MAX, r2
     448:	f3bf 8f6f 	isb	sy
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
     44c:	5963      	ldr	r3, [r4, r5]
     44e:	f383 8808 	msr	MSP, r3
    ((void (*)(void))vt->reset)();
     452:	6873      	ldr	r3, [r6, #4]
     454:	4798      	blx	r3

    do_boot(&rsp);

    mcuboot_status_change(MCUBOOT_STATUS_BOOT_FAILED);

    BOOT_LOG_ERR("Never should get here");
     456:	480a      	ldr	r0, [pc, #40]	; (480 <CONFIG_MPSL_WORK_STACK_SIZE+0x80>)
     458:	2145      	movs	r1, #69	; 0x45
     45a:	f006 fbdb 	bl	6c14 <z_log_minimal_printk>
    while (1)
     45e:	e7fe      	b.n	45e <CONFIG_MPSL_WORK_STACK_SIZE+0x5e>
     460:	40010000 	.word	0x40010000
     464:	6e524635 	.word	0x6e524635
     468:	00009aec 	.word	0x00009aec
     46c:	20000360 	.word	0x20000360
     470:	00009b05 	.word	0x00009b05
     474:	00009b28 	.word	0x00009b28
     478:	00009b57 	.word	0x00009b57
     47c:	00009b7c 	.word	0x00009b7c
     480:	00009baf 	.word	0x00009baf

00000484 <flash_device_base>:
#endif

static const struct device *flash_dev = DEVICE_DT_GET(FLASH_DEVICE_NODE);

int flash_device_base(uint8_t fd_id, uintptr_t *ret)
{
     484:	b508      	push	{r3, lr}
    if (fd_id != FLASH_DEVICE_ID) {
     486:	4602      	mov	r2, r0
     488:	b138      	cbz	r0, 49a <flash_device_base+0x16>
        BOOT_LOG_ERR("invalid flash ID %d; expected %d",
     48a:	4805      	ldr	r0, [pc, #20]	; (4a0 <flash_device_base+0x1c>)
     48c:	2300      	movs	r3, #0
     48e:	2145      	movs	r1, #69	; 0x45
     490:	f006 fbc0 	bl	6c14 <z_log_minimal_printk>
                     fd_id, FLASH_DEVICE_ID);
        return -EINVAL;
     494:	f06f 0015 	mvn.w	r0, #21
    }
    *ret = FLASH_DEVICE_BASE;
    return 0;
}
     498:	bd08      	pop	{r3, pc}
    *ret = FLASH_DEVICE_BASE;
     49a:	6008      	str	r0, [r1, #0]
    return 0;
     49c:	e7fc      	b.n	498 <flash_device_base+0x14>
     49e:	bf00      	nop
     4a0:	00009bd2 	.word	0x00009bd2

000004a4 <flash_area_sector_from_off>:
    return -EINVAL;
}
#endif

int flash_area_sector_from_off(off_t off, struct flash_sector *sector)
{
     4a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
     4a6:	460c      	mov	r4, r1
		union { uintptr_t x; struct flash_pages_info * val; } parm2 = { .val = info };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_FLASH_GET_PAGE_INFO_BY_OFFS);
	}
#endif
	compiler_barrier();
	return z_impl_flash_get_page_info_by_offs(dev, offset, info);
     4a8:	4601      	mov	r1, r0
     4aa:	aa01      	add	r2, sp, #4
     4ac:	4804      	ldr	r0, [pc, #16]	; (4c0 <flash_area_sector_from_off+0x1c>)
     4ae:	f006 fff6 	bl	749e <z_impl_flash_get_page_info_by_offs>
    int rc;
    struct flash_pages_info page;

    rc = flash_get_page_info_by_offs(flash_dev, off, &page);
    if (rc) {
     4b2:	b918      	cbnz	r0, 4bc <flash_area_sector_from_off+0x18>
        return rc;
    }

    sector->fs_off = page.start_offset;
     4b4:	9b01      	ldr	r3, [sp, #4]
     4b6:	6023      	str	r3, [r4, #0]
    sector->fs_size = page.size;
     4b8:	9b02      	ldr	r3, [sp, #8]
     4ba:	6063      	str	r3, [r4, #4]

    return rc;
}
     4bc:	b004      	add	sp, #16
     4be:	bd10      	pop	{r4, pc}
     4c0:	000094fc 	.word	0x000094fc

000004c4 <os_heap_init>:
/*
 * Initialize mbedtls to be able to use the local heap.
 */
void os_heap_init(void)
{
    mbedtls_memory_buffer_alloc_init(mempool, sizeof(mempool));
     4c4:	4802      	ldr	r0, [pc, #8]	; (4d0 <os_heap_init+0xc>)
     4c6:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
     4ca:	f003 bc43 	b.w	3d54 <mbedtls_memory_buffer_alloc_init>
     4ce:	bf00      	nop
     4d0:	200011d8 	.word	0x200011d8

000004d4 <bootutil_img_validate>:
fih_int
bootutil_img_validate(struct enc_key_data *enc_state, int image_index,
                      struct image_header *hdr, const struct flash_area *fap,
                      uint8_t *tmp_buf, uint32_t tmp_buf_sz, uint8_t *seed,
                      int seed_len, uint8_t *out_hash)
{
     4d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     4d8:	b0f9      	sub	sp, #484	; 0x1e4
     4da:	e9dd 4884 	ldrd	r4, r8, [sp, #528]	; 0x210
    uint32_t off;
    uint16_t len;
    uint16_t type;
    int sha256_valid = 0;
#ifdef EXPECTED_SIG_TLV
    fih_int valid_signature = FIH_FAILURE;
     4de:	f8df a1e0 	ldr.w	sl, [pc, #480]	; 6c0 <FIH_LABEL_FIH_CALL_END_815+0x20>
#if defined(MCUBOOT_USE_MBED_TLS)
typedef mbedtls_sha256_context bootutil_sha256_context;

static inline void bootutil_sha256_init(bootutil_sha256_context *ctx)
{
    mbedtls_sha256_init(ctx);
     4e2:	a838      	add	r0, sp, #224	; 0xe0
     4e4:	f8da 6000 	ldr.w	r6, [sl]
{
     4e8:	4617      	mov	r7, r2
     4ea:	461d      	mov	r5, r3
     4ec:	f008 fcd1 	bl	8e92 <mbedtls_sha256_init>
    (void)mbedtls_sha256_starts_ret(ctx, 0);
     4f0:	2100      	movs	r1, #0
     4f2:	a838      	add	r0, sp, #224	; 0xe0
     4f4:	f003 fd4c 	bl	3f90 <mbedtls_sha256_starts>
    if (seed && (seed_len > 0)) {
     4f8:	b13c      	cbz	r4, 50a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x22>
     4fa:	f1b8 0f00 	cmp.w	r8, #0
     4fe:	dd04      	ble.n	50a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x22>

static inline int bootutil_sha256_update(bootutil_sha256_context *ctx,
                                         const void *data,
                                         uint32_t data_len)
{
    return mbedtls_sha256_update_ret(ctx, data, data_len);
     500:	4642      	mov	r2, r8
     502:	4621      	mov	r1, r4
     504:	a838      	add	r0, sp, #224	; 0xe0
     506:	f008 fcc8 	bl	8e9a <mbedtls_sha256_update>
    size += hdr->ih_protect_tlv_size;
     50a:	897b      	ldrh	r3, [r7, #10]
    size = hdr_size = hdr->ih_hdr_size;
     50c:	f8b7 8008 	ldrh.w	r8, [r7, #8]
     510:	4498      	add	r8, r3
    size += hdr->ih_protect_tlv_size;
     512:	68fb      	ldr	r3, [r7, #12]
    for (off = 0; off < size; off += blk_sz) {
     514:	f04f 0900 	mov.w	r9, #0
    size += hdr->ih_protect_tlv_size;
     518:	4498      	add	r8, r3
    for (off = 0; off < size; off += blk_sz) {
     51a:	45c8      	cmp	r8, r9
     51c:	d821      	bhi.n	562 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x7a>
}

static inline int bootutil_sha256_finish(bootutil_sha256_context *ctx,
                                          uint8_t *output)
{
    return mbedtls_sha256_finish_ret(ctx, output);
     51e:	a90d      	add	r1, sp, #52	; 0x34
     520:	a838      	add	r0, sp, #224	; 0xe0
     522:	f008 fcf3 	bl	8f0c <mbedtls_sha256_finish>
            tmp_buf_sz, hash, seed, seed_len);
    if (rc) {
        goto out;
    }

    if (out_hash) {
     526:	9b86      	ldr	r3, [sp, #536]	; 0x218
     528:	b123      	cbz	r3, 534 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x4c>
        memcpy(out_hash, hash, 32);
     52a:	2220      	movs	r2, #32
     52c:	a90d      	add	r1, sp, #52	; 0x34
     52e:	4618      	mov	r0, r3
     530:	f006 fc1c 	bl	6d6c <memcpy>
    }

    rc = bootutil_tlv_iter_begin(&it, hdr, fap, IMAGE_TLV_ANY, false);
     534:	2300      	movs	r3, #0
     536:	9300      	str	r3, [sp, #0]
     538:	462a      	mov	r2, r5
     53a:	f64f 73ff 	movw	r3, #65535	; 0xffff
     53e:	4639      	mov	r1, r7
     540:	a807      	add	r0, sp, #28
     542:	f005 ffbe 	bl	64c2 <bootutil_tlv_iter_begin>
    if (rc) {
     546:	4604      	mov	r4, r0
     548:	b938      	cbnz	r0, 55a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x72>
        goto out;
    }

    if (it.tlv_end > bootutil_max_image_size(fap)) {
     54a:	4628      	mov	r0, r5
     54c:	9f0c      	ldr	r7, [sp, #48]	; 0x30
     54e:	f000 f9dd 	bl	90c <bootutil_max_image_size>
     552:	4287      	cmp	r7, r0
     554:	d91b      	bls.n	58e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xa6>
        rc = -1;
     556:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    if (rc) {
        fih_rc = fih_int_encode(rc);
    }

    FIH_RET(fih_rc);
}
     55a:	4620      	mov	r0, r4
     55c:	b079      	add	sp, #484	; 0x1e4
     55e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (blk_sz > tmp_buf_sz) {
     562:	9b83      	ldr	r3, [sp, #524]	; 0x20c
        rc = flash_area_read(fap, off, tmp_buf, blk_sz);
     564:	9a82      	ldr	r2, [sp, #520]	; 0x208
        blk_sz = size - off;
     566:	eba8 0b09 	sub.w	fp, r8, r9
     56a:	459b      	cmp	fp, r3
     56c:	bf28      	it	cs
     56e:	469b      	movcs	fp, r3
        rc = flash_area_read(fap, off, tmp_buf, blk_sz);
     570:	465b      	mov	r3, fp
     572:	4649      	mov	r1, r9
     574:	4628      	mov	r0, r5
     576:	f006 fb5b 	bl	6c30 <flash_area_read>
        if (rc) {
     57a:	4604      	mov	r4, r0
     57c:	2800      	cmp	r0, #0
     57e:	d1ec      	bne.n	55a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x72>
    return mbedtls_sha256_update_ret(ctx, data, data_len);
     580:	9982      	ldr	r1, [sp, #520]	; 0x208
     582:	465a      	mov	r2, fp
     584:	a838      	add	r0, sp, #224	; 0xe0
     586:	f008 fc88 	bl	8e9a <mbedtls_sha256_update>
    for (off = 0; off < size; off += blk_sz) {
     58a:	44d9      	add	r9, fp
     58c:	e7c5      	b.n	51a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x32>
            if (key_id < 0 || key_id >= bootutil_key_cnt) {
     58e:	f8df 9134 	ldr.w	r9, [pc, #308]	; 6c4 <FIH_LABEL_FIH_CALL_END_815+0x24>
    int key_id = -1;
     592:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
        rc = bootutil_tlv_iter_next(&it, &off, &len, &type);
     596:	f10d 0316 	add.w	r3, sp, #22
     59a:	aa05      	add	r2, sp, #20
     59c:	a906      	add	r1, sp, #24
     59e:	a807      	add	r0, sp, #28
     5a0:	f005 ffdd 	bl	655e <bootutil_tlv_iter_next>
        if (rc < 0) {
     5a4:	f1b0 0800 	subs.w	r8, r0, #0
     5a8:	f2c0 8088 	blt.w	6bc <FIH_LABEL_FIH_CALL_END_815+0x1c>
        } else if (rc > 0) {
     5ac:	d17b      	bne.n	6a6 <FIH_LABEL_FIH_CALL_END_815+0x6>
        if (type == IMAGE_TLV_SHA256) {
     5ae:	f8bd b016 	ldrh.w	fp, [sp, #22]
     5b2:	f1bb 0f10 	cmp.w	fp, #16
     5b6:	d118      	bne.n	5ea <FIH_LABEL_FIH_CALL_END_576+0xc>
            if (len != sizeof(hash)) {
     5b8:	f8bd 4014 	ldrh.w	r4, [sp, #20]
     5bc:	2c20      	cmp	r4, #32
     5be:	d1ca      	bne.n	556 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x6e>
            rc = LOAD_IMAGE_DATA(hdr, fap, off, buf, sizeof(hash));
     5c0:	9906      	ldr	r1, [sp, #24]
     5c2:	4623      	mov	r3, r4
     5c4:	aa38      	add	r2, sp, #224	; 0xe0
     5c6:	4628      	mov	r0, r5
     5c8:	f006 fb32 	bl	6c30 <flash_area_read>
            if (rc) {
     5cc:	4680      	mov	r8, r0
     5ce:	2800      	cmp	r0, #0
     5d0:	d174      	bne.n	6bc <FIH_LABEL_FIH_CALL_END_815+0x1c>

000005d2 <FIH_LABEL_FIH_CALL_START_559>:
            FIH_CALL(boot_fih_memequal, fih_rc, hash, buf, sizeof(hash));
     5d2:	4622      	mov	r2, r4
     5d4:	a938      	add	r1, sp, #224	; 0xe0
     5d6:	a80d      	add	r0, sp, #52	; 0x34
     5d8:	f006 f80d 	bl	65f6 <boot_fih_memequal>
     5dc:	4604      	mov	r4, r0

000005de <FIH_LABEL_FIH_CALL_END_576>:
            if (fih_not_eq(fih_rc, FIH_SUCCESS)) {
     5de:	4b3a      	ldr	r3, [pc, #232]	; (6c8 <FIH_LABEL_FIH_CALL_END_815+0x28>)
     5e0:	681b      	ldr	r3, [r3, #0]
     5e2:	4283      	cmp	r3, r0
     5e4:	d1b9      	bne.n	55a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x72>
            sha256_valid = 1;
     5e6:	2401      	movs	r4, #1
     5e8:	e7d5      	b.n	596 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xae>
        } else if (type == IMAGE_TLV_KEYHASH) {
     5ea:	f1bb 0f01 	cmp.w	fp, #1
     5ee:	d137      	bne.n	660 <FIH_LABEL_FIH_CALL_END_576+0x82>
            if (len > 32) {
     5f0:	f8bd 3014 	ldrh.w	r3, [sp, #20]
     5f4:	2b20      	cmp	r3, #32
     5f6:	d8ae      	bhi.n	556 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x6e>
            rc = LOAD_IMAGE_DATA(hdr, fap, off, buf, len);
     5f8:	9906      	ldr	r1, [sp, #24]
     5fa:	aa38      	add	r2, sp, #224	; 0xe0
     5fc:	4628      	mov	r0, r5
     5fe:	f006 fb17 	bl	6c30 <flash_area_read>
            if (rc) {
     602:	4680      	mov	r8, r0
     604:	2800      	cmp	r0, #0
     606:	d159      	bne.n	6bc <FIH_LABEL_FIH_CALL_END_815+0x1c>
            key_id = bootutil_find_key(buf, len);
     608:	f89d b014 	ldrb.w	fp, [sp, #20]
    if (keyhash_len > 32) {
     60c:	f1bb 0f20 	cmp.w	fp, #32
     610:	d903      	bls.n	61a <FIH_LABEL_FIH_CALL_END_576+0x3c>
        return -1;
     612:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
            key_id = bootutil_find_key(buf, len);
     616:	4647      	mov	r7, r8
     618:	e7bd      	b.n	596 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xae>
    for (i = 0; i < bootutil_key_cnt; i++) {
     61a:	f8d9 3000 	ldr.w	r3, [r9]
     61e:	4f2b      	ldr	r7, [pc, #172]	; (6cc <FIH_LABEL_FIH_CALL_END_815+0x2c>)
     620:	9303      	str	r3, [sp, #12]
     622:	9b03      	ldr	r3, [sp, #12]
     624:	4598      	cmp	r8, r3
     626:	daf4      	bge.n	612 <FIH_LABEL_FIH_CALL_END_576+0x34>
    mbedtls_sha256_init(ctx);
     628:	a81d      	add	r0, sp, #116	; 0x74
     62a:	f008 fc32 	bl	8e92 <mbedtls_sha256_init>
    (void)mbedtls_sha256_starts_ret(ctx, 0);
     62e:	2100      	movs	r1, #0
     630:	a81d      	add	r0, sp, #116	; 0x74
     632:	f003 fcad 	bl	3f90 <mbedtls_sha256_starts>
        bootutil_sha256_update(&sha256_ctx, key->key, *key->len);
     636:	687a      	ldr	r2, [r7, #4]
    return mbedtls_sha256_update_ret(ctx, data, data_len);
     638:	f857 1b08 	ldr.w	r1, [r7], #8
     63c:	6812      	ldr	r2, [r2, #0]
     63e:	a81d      	add	r0, sp, #116	; 0x74
     640:	f008 fc2b 	bl	8e9a <mbedtls_sha256_update>
    return mbedtls_sha256_finish_ret(ctx, output);
     644:	a915      	add	r1, sp, #84	; 0x54
     646:	a81d      	add	r0, sp, #116	; 0x74
     648:	f008 fc60 	bl	8f0c <mbedtls_sha256_finish>
        if (!memcmp(hash, keyhash, keyhash_len)) {
     64c:	465a      	mov	r2, fp
     64e:	a938      	add	r1, sp, #224	; 0xe0
     650:	a815      	add	r0, sp, #84	; 0x54
     652:	f006 fb7b 	bl	6d4c <memcmp>
     656:	2800      	cmp	r0, #0
     658:	d0dd      	beq.n	616 <FIH_LABEL_FIH_CALL_END_576+0x38>
    for (i = 0; i < bootutil_key_cnt; i++) {
     65a:	f108 0801 	add.w	r8, r8, #1
     65e:	e7e0      	b.n	622 <FIH_LABEL_FIH_CALL_END_576+0x44>
        } else if (type == EXPECTED_SIG_TLV) {
     660:	f1bb 0f20 	cmp.w	fp, #32
     664:	d197      	bne.n	596 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xae>
            if (key_id < 0 || key_id >= bootutil_key_cnt) {
     666:	1c7b      	adds	r3, r7, #1
     668:	d095      	beq.n	596 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xae>
     66a:	f8d9 3000 	ldr.w	r3, [r9]
     66e:	42bb      	cmp	r3, r7
     670:	dd16      	ble.n	6a0 <FIH_LABEL_FIH_CALL_END_815>
            if (!EXPECTED_SIG_LEN(len) || len > sizeof(buf)) {
     672:	f8bd 3014 	ldrh.w	r3, [sp, #20]
     676:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
     67a:	f47f af6c 	bne.w	556 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x6e>
            rc = LOAD_IMAGE_DATA(hdr, fap, off, buf, len);
     67e:	9906      	ldr	r1, [sp, #24]
     680:	aa38      	add	r2, sp, #224	; 0xe0
     682:	4628      	mov	r0, r5
     684:	f006 fad4 	bl	6c30 <flash_area_read>
            if (rc) {
     688:	4680      	mov	r8, r0
     68a:	b9b8      	cbnz	r0, 6bc <FIH_LABEL_FIH_CALL_END_815+0x1c>

0000068c <FIH_LABEL_FIH_CALL_START_794>:
            FIH_CALL(bootutil_verify_sig, valid_signature, hash, sizeof(hash),
     68c:	b2ff      	uxtb	r7, r7
     68e:	f8bd 3014 	ldrh.w	r3, [sp, #20]
     692:	9700      	str	r7, [sp, #0]
     694:	aa38      	add	r2, sp, #224	; 0xe0
     696:	4659      	mov	r1, fp
     698:	a80d      	add	r0, sp, #52	; 0x34
     69a:	f000 f819 	bl	6d0 <bootutil_verify_sig>
     69e:	4606      	mov	r6, r0

000006a0 <FIH_LABEL_FIH_CALL_END_815>:
            key_id = -1;
     6a0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
     6a4:	e777      	b.n	596 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xae>
    if (rc) {
     6a6:	b13c      	cbz	r4, 6b8 <FIH_LABEL_FIH_CALL_END_815+0x18>
    fih_rc = fih_int_encode_zero_equality(fih_not_eq(valid_signature,
     6a8:	4b07      	ldr	r3, [pc, #28]	; (6c8 <FIH_LABEL_FIH_CALL_END_815+0x28>)
 * value that is not FIH_SUCCESS
 */
__attribute__((always_inline)) inline
fih_int fih_int_encode_zero_equality(int x)
{
    if (x) {
     6aa:	681b      	ldr	r3, [r3, #0]
     6ac:	42b3      	cmp	r3, r6
        return FIH_FAILURE;
     6ae:	bf18      	it	ne
     6b0:	f8da 6000 	ldrne.w	r6, [sl]
        return -1;
     6b4:	4634      	mov	r4, r6
     6b6:	e750      	b.n	55a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x72>
    rc = !sha256_valid;
     6b8:	f04f 0801 	mov.w	r8, #1
        return -1;
     6bc:	4644      	mov	r4, r8
     6be:	e74c      	b.n	55a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x72>
     6c0:	20000000 	.word	0x20000000
     6c4:	00009728 	.word	0x00009728
     6c8:	20000360 	.word	0x20000360
     6cc:	0000972c 	.word	0x0000972c

000006d0 <bootutil_verify_sig>:
}

fih_int
bootutil_verify_sig(uint8_t *hash, uint32_t hlen, uint8_t *sig, size_t slen,
  uint8_t key_id)
{
     6d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     6d4:	461f      	mov	r7, r3
     6d6:	f5ad 7d4b 	sub.w	sp, sp, #812	; 0x32c
    mbedtls_rsa_context ctx;
    int rc;
    fih_int fih_rc = FIH_FAILURE;
     6da:	4b6a      	ldr	r3, [pc, #424]	; (884 <FIH_LABEL_FIH_CALL_END_647+0x2>)
{
     6dc:	f89d 6350 	ldrb.w	r6, [sp, #848]	; 0x350
    fih_int fih_rc = FIH_FAILURE;
     6e0:	681d      	ldr	r5, [r3, #0]
{
     6e2:	4680      	mov	r8, r0
    uint8_t *cp;
    uint8_t *end;

#if MBEDTLS_VERSION_NUMBER >= 0x03000000
    mbedtls_rsa_init(&ctx);
     6e4:	a827      	add	r0, sp, #156	; 0x9c
{
     6e6:	468a      	mov	sl, r1
     6e8:	4691      	mov	r9, r2
    mbedtls_rsa_init(&ctx);
     6ea:	f008 fb8f 	bl	8e0c <mbedtls_rsa_init>
#else
    mbedtls_rsa_init(&ctx, 0, 0);
#endif

    cp = (uint8_t *)bootutil_keys[key_id].key;
     6ee:	4b66      	ldr	r3, [pc, #408]	; (888 <FIH_LABEL_FIH_CALL_END_647+0x6>)
     6f0:	f853 4036 	ldr.w	r4, [r3, r6, lsl #3]
     6f4:	9402      	str	r4, [sp, #8]
    end = cp + *bootutil_keys[key_id].len;
     6f6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
    if ((rc = mbedtls_asn1_get_tag(p, end, &len,
     6fa:	aa8a      	add	r2, sp, #552	; 0x228
    end = cp + *bootutil_keys[key_id].len;
     6fc:	685b      	ldr	r3, [r3, #4]
     6fe:	681b      	ldr	r3, [r3, #0]
     700:	441c      	add	r4, r3
    if ((rc = mbedtls_asn1_get_tag(p, end, &len,
     702:	4621      	mov	r1, r4
     704:	2330      	movs	r3, #48	; 0x30
     706:	a802      	add	r0, sp, #8
     708:	f007 f913 	bl	7932 <mbedtls_asn1_get_tag>
     70c:	bb68      	cbnz	r0, 76a <bootutil_verify_sig+0x9a>
    if (*p + len != end) {
     70e:	9b02      	ldr	r3, [sp, #8]
     710:	9a8a      	ldr	r2, [sp, #552]	; 0x228
     712:	4413      	add	r3, r2
     714:	429c      	cmp	r4, r3
     716:	d128      	bne.n	76a <bootutil_verify_sig+0x9a>
    if ((rc = mbedtls_asn1_get_mpi(p, end, &ctx->MBEDTLS_CONTEXT_MEMBER(N))) != 0 ||
     718:	aa29      	add	r2, sp, #164	; 0xa4
     71a:	4621      	mov	r1, r4
     71c:	a802      	add	r0, sp, #8
     71e:	f007 f91c 	bl	795a <mbedtls_asn1_get_mpi>
     722:	bb10      	cbnz	r0, 76a <bootutil_verify_sig+0x9a>
        (rc = mbedtls_asn1_get_mpi(p, end, &ctx->MBEDTLS_CONTEXT_MEMBER(E))) != 0) {
     724:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
     728:	465a      	mov	r2, fp
     72a:	4621      	mov	r1, r4
     72c:	a802      	add	r0, sp, #8
     72e:	f007 f914 	bl	795a <mbedtls_asn1_get_mpi>
    if ((rc = mbedtls_asn1_get_mpi(p, end, &ctx->MBEDTLS_CONTEXT_MEMBER(N))) != 0 ||
     732:	4606      	mov	r6, r0
     734:	b9c8      	cbnz	r0, 76a <bootutil_verify_sig+0x9a>
    ctx->MBEDTLS_CONTEXT_MEMBER(len) = mbedtls_mpi_size(&ctx->MBEDTLS_CONTEXT_MEMBER(N));
     736:	a829      	add	r0, sp, #164	; 0xa4
     738:	f007 fc30 	bl	7f9c <mbedtls_mpi_size>
    if (*p != end) {
     73c:	9b02      	ldr	r3, [sp, #8]
    ctx->MBEDTLS_CONTEXT_MEMBER(len) = mbedtls_mpi_size(&ctx->MBEDTLS_CONTEXT_MEMBER(N));
     73e:	9028      	str	r0, [sp, #160]	; 0xa0
    if (*p != end) {
     740:	429c      	cmp	r4, r3
     742:	d112      	bne.n	76a <bootutil_verify_sig+0x9a>
    rc = mbedtls_rsa_import(ctx, &ctx->MBEDTLS_CONTEXT_MEMBER(N), NULL,
     744:	e9cd 6b00 	strd	r6, fp, [sp]
     748:	4633      	mov	r3, r6
     74a:	4632      	mov	r2, r6
     74c:	a929      	add	r1, sp, #164	; 0xa4
     74e:	a827      	add	r0, sp, #156	; 0x9c
     750:	f008 fb19 	bl	8d86 <mbedtls_rsa_import>
    if (rc != 0) {
     754:	b948      	cbnz	r0, 76a <bootutil_verify_sig+0x9a>
    rc = mbedtls_rsa_check_pubkey(ctx);
     756:	a827      	add	r0, sp, #156	; 0x9c
     758:	f003 fbac 	bl	3eb4 <mbedtls_rsa_check_pubkey>
    if (rc != 0) {
     75c:	b928      	cbnz	r0, 76a <bootutil_verify_sig+0x9a>
    ctx->MBEDTLS_CONTEXT_MEMBER(len) = mbedtls_mpi_size(&ctx->MBEDTLS_CONTEXT_MEMBER(N));
     75e:	a829      	add	r0, sp, #164	; 0xa4
     760:	f007 fc1c 	bl	7f9c <mbedtls_mpi_size>

    rc = bootutil_parse_rsakey(&ctx, &cp, end);
    if (rc || slen != ctx.MBEDTLS_CONTEXT_MEMBER(len)) {
     764:	4287      	cmp	r7, r0
    ctx->MBEDTLS_CONTEXT_MEMBER(len) = mbedtls_mpi_size(&ctx->MBEDTLS_CONTEXT_MEMBER(N));
     766:	9028      	str	r0, [sp, #160]	; 0xa0
    if (rc || slen != ctx.MBEDTLS_CONTEXT_MEMBER(len)) {
     768:	d00a      	beq.n	780 <FIH_LABEL_FIH_CALL_START_226>
        mbedtls_rsa_free(&ctx);
     76a:	a827      	add	r0, sp, #156	; 0x9c
     76c:	f008 fb58 	bl	8e20 <mbedtls_rsa_free>
        goto out;
    }
    FIH_CALL(bootutil_cmp_rsasig, fih_rc, &ctx, hash, hlen, sig);

out:
    mbedtls_rsa_free(&ctx);
     770:	a827      	add	r0, sp, #156	; 0x9c
     772:	f008 fb55 	bl	8e20 <mbedtls_rsa_free>

    FIH_RET(fih_rc);
}
     776:	4628      	mov	r0, r5
     778:	f50d 7d4b 	add.w	sp, sp, #812	; 0x32c
     77c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00000780 <FIH_LABEL_FIH_CALL_START_226>:
    if (ctx->MBEDTLS_CONTEXT_MEMBER(len) != PSS_EMLEN ||
     780:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
     784:	d002      	beq.n	78c <FIH_LABEL_FIH_CALL_END_282+0x2>
    for (i = 0; i < PSS_MASK_LEN; i++) {
     786:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff

0000078a <FIH_LABEL_FIH_CALL_END_282>:
    FIH_CALL(bootutil_cmp_rsasig, fih_rc, &ctx, hash, hlen, sig);
     78a:	e7f1      	b.n	770 <bootutil_verify_sig+0xa0>
    if (hlen != PSS_HLEN) {
     78c:	f1ba 0f20 	cmp.w	sl, #32
     790:	d1f9      	bne.n	786 <FIH_LABEL_FIH_CALL_START_226+0x6>
    if (mbedtls_rsa_public(ctx, sig, em)) {
     792:	aa8a      	add	r2, sp, #552	; 0x228
     794:	4649      	mov	r1, r9
     796:	a827      	add	r0, sp, #156	; 0x9c
     798:	f003 fbb2 	bl	3f00 <mbedtls_rsa_public>
     79c:	4604      	mov	r4, r0
     79e:	2800      	cmp	r0, #0
     7a0:	d1f1      	bne.n	786 <FIH_LABEL_FIH_CALL_START_226+0x6>
    if (em[PSS_EMLEN - 1] != 0xbc) {
     7a2:	f89d 3327 	ldrb.w	r3, [sp, #807]	; 0x327
     7a6:	2bbc      	cmp	r3, #188	; 0xbc
     7a8:	d1ed      	bne.n	786 <FIH_LABEL_FIH_CALL_START_226+0x6>
    uint8_t counter[4] = { 0, 0, 0, 0 };
     7aa:	af52      	add	r7, sp, #328	; 0x148
     7ac:	9003      	str	r0, [sp, #12]
    int count = PSS_MASK_LEN;
     7ae:	26df      	movs	r6, #223	; 0xdf
     7b0:	463d      	mov	r5, r7
    mbedtls_sha256_init(ctx);
     7b2:	a80c      	add	r0, sp, #48	; 0x30
     7b4:	f008 fb6d 	bl	8e92 <mbedtls_sha256_init>
    (void)mbedtls_sha256_starts_ret(ctx, 0);
     7b8:	2100      	movs	r1, #0
     7ba:	a80c      	add	r0, sp, #48	; 0x30
     7bc:	f003 fbe8 	bl	3f90 <mbedtls_sha256_starts>
    return mbedtls_sha256_update_ret(ctx, data, data_len);
     7c0:	2220      	movs	r2, #32
     7c2:	f20d 3107 	addw	r1, sp, #775	; 0x307
     7c6:	a80c      	add	r0, sp, #48	; 0x30
     7c8:	f008 fb67 	bl	8e9a <mbedtls_sha256_update>
     7cc:	2204      	movs	r2, #4
     7ce:	a903      	add	r1, sp, #12
     7d0:	a80c      	add	r0, sp, #48	; 0x30
     7d2:	f008 fb62 	bl	8e9a <mbedtls_sha256_update>
    return mbedtls_sha256_finish_ret(ctx, output);
     7d6:	a904      	add	r1, sp, #16
     7d8:	a80c      	add	r0, sp, #48	; 0x30
     7da:	f008 fb97 	bl	8f0c <mbedtls_sha256_finish>
        if (bytes > count)
     7de:	2e20      	cmp	r6, #32
        counter[3]++;
     7e0:	f89d 300f 	ldrb.w	r3, [sp, #15]
        if (bytes > count)
     7e4:	46b1      	mov	r9, r6
     7e6:	bfa8      	it	ge
     7e8:	f04f 0920 	movge.w	r9, #32
        counter[3]++;
     7ec:	3301      	adds	r3, #1
        memcpy(mask, htmp, bytes);
     7ee:	4638      	mov	r0, r7
     7f0:	464a      	mov	r2, r9
     7f2:	a904      	add	r1, sp, #16
        count -= bytes;
     7f4:	eba6 0609 	sub.w	r6, r6, r9
        counter[3]++;
     7f8:	f88d 300f 	strb.w	r3, [sp, #15]
        memcpy(mask, htmp, bytes);
     7fc:	f006 fab6 	bl	6d6c <memcpy>
    while (count > 0) {
     800:	2e00      	cmp	r6, #0
        mask += bytes;
     802:	444f      	add	r7, r9
    while (count > 0) {
     804:	dcd5      	bgt.n	7b2 <FIH_LABEL_FIH_CALL_END_282+0x28>
    for (i = 0; i < PSS_MASK_LEN; i++) {
     806:	462f      	mov	r7, r5
     808:	ab8a      	add	r3, sp, #552	; 0x228
     80a:	4629      	mov	r1, r5
     80c:	2200      	movs	r2, #0
        db_mask[i] ^= em[i];
     80e:	7808      	ldrb	r0, [r1, #0]
     810:	f813 6b01 	ldrb.w	r6, [r3], #1
    for (i = 0; i < PSS_MASK_LEN; i++) {
     814:	3201      	adds	r2, #1
        db_mask[i] ^= em[i];
     816:	4070      	eors	r0, r6
    for (i = 0; i < PSS_MASK_LEN; i++) {
     818:	2adf      	cmp	r2, #223	; 0xdf
        db_mask[i] ^= em[i];
     81a:	f801 0b01 	strb.w	r0, [r1], #1
    for (i = 0; i < PSS_MASK_LEN; i++) {
     81e:	d1f6      	bne.n	80e <CONFIG_BOOT_SIGNATURE_TYPE_RSA_LEN+0xe>
    db_mask[0] &= 0x7F;
     820:	782b      	ldrb	r3, [r5, #0]
     822:	f003 037f 	and.w	r3, r3, #127	; 0x7f
     826:	702b      	strb	r3, [r5, #0]
        if (db_mask[i] != 0) {
     828:	f817 6b01 	ldrb.w	r6, [r7], #1
     82c:	2e00      	cmp	r6, #0
     82e:	d1aa      	bne.n	786 <FIH_LABEL_FIH_CALL_START_226+0x6>
    for (i = 0; i < PSS_MASK_ZERO_COUNT; i++) {
     830:	3401      	adds	r4, #1
     832:	2cbe      	cmp	r4, #190	; 0xbe
     834:	d1f8      	bne.n	828 <CONFIG_BOOT_SIGNATURE_TYPE_RSA_LEN+0x28>
    if (db_mask[PSS_MASK_ONE_POS] != 1) {
     836:	f895 30be 	ldrb.w	r3, [r5, #190]	; 0xbe
     83a:	2b01      	cmp	r3, #1
     83c:	d1a3      	bne.n	786 <FIH_LABEL_FIH_CALL_START_226+0x6>
    mbedtls_sha256_init(ctx);
     83e:	a80c      	add	r0, sp, #48	; 0x30
     840:	f008 fb27 	bl	8e92 <mbedtls_sha256_init>
    (void)mbedtls_sha256_starts_ret(ctx, 0);
     844:	4631      	mov	r1, r6
     846:	a80c      	add	r0, sp, #48	; 0x30
     848:	f003 fba2 	bl	3f90 <mbedtls_sha256_starts>
    return mbedtls_sha256_update_ret(ctx, data, data_len);
     84c:	490f      	ldr	r1, [pc, #60]	; (88c <FIH_LABEL_FIH_CALL_END_647+0xa>)
     84e:	2208      	movs	r2, #8
     850:	a80c      	add	r0, sp, #48	; 0x30
     852:	f008 fb22 	bl	8e9a <mbedtls_sha256_update>
     856:	4641      	mov	r1, r8
     858:	2220      	movs	r2, #32
     85a:	a80c      	add	r0, sp, #48	; 0x30
     85c:	f008 fb1d 	bl	8e9a <mbedtls_sha256_update>
     860:	2220      	movs	r2, #32
     862:	f20d 2107 	addw	r1, sp, #519	; 0x207
     866:	a80c      	add	r0, sp, #48	; 0x30
     868:	f008 fb17 	bl	8e9a <mbedtls_sha256_update>
    return mbedtls_sha256_finish_ret(ctx, output);
     86c:	a904      	add	r1, sp, #16
     86e:	a80c      	add	r0, sp, #48	; 0x30
     870:	f008 fb4c 	bl	8f0c <mbedtls_sha256_finish>

00000874 <FIH_LABEL_FIH_CALL_START_631>:
    FIH_CALL(boot_fih_memequal, fih_rc, h2, &em[PSS_HASH_OFFSET], PSS_HLEN);
     874:	2220      	movs	r2, #32
     876:	f20d 3107 	addw	r1, sp, #775	; 0x307
     87a:	a804      	add	r0, sp, #16
     87c:	f005 febb 	bl	65f6 <boot_fih_memequal>
     880:	4605      	mov	r5, r0

00000882 <FIH_LABEL_FIH_CALL_END_647>:
    if (rc) {
     882:	e782      	b.n	78a <FIH_LABEL_FIH_CALL_END_282>
     884:	20000000 	.word	0x20000000
     888:	0000972c 	.word	0x0000972c
     88c:	00009bf8 	.word	0x00009bf8

00000890 <boot_read_swap_size>:
    return -1;
}

int
boot_read_swap_size(int image_index, uint32_t *swap_size)
{
     890:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     894:	b086      	sub	sp, #24
    uint8_t areas[2] = {
     896:	2302      	movs	r3, #2
    if (memcmp(magic, BOOT_IMG_MAGIC, BOOT_MAGIC_SZ) == 0) {
     898:	f8df 806c 	ldr.w	r8, [pc, #108]	; 908 <boot_read_swap_size+0x78>
    uint8_t areas[2] = {
     89c:	f8ad 3000 	strh.w	r3, [sp]
{
     8a0:	460d      	mov	r5, r1
     8a2:	466f      	mov	r7, sp
    for (i = 0; i < sizeof(areas) / sizeof(areas[0]); i++) {
     8a4:	2600      	movs	r6, #0
        rc = flash_area_open(areas[i], fap);
     8a6:	f817 0b01 	ldrb.w	r0, [r7], #1
     8aa:	a901      	add	r1, sp, #4
     8ac:	f001 f89a 	bl	19e4 <flash_area_open>
        if (rc != 0) {
     8b0:	4604      	mov	r4, r0
     8b2:	b9a0      	cbnz	r0, 8de <boot_read_swap_size+0x4e>
        off = boot_magic_off(*fap);
     8b4:	9801      	ldr	r0, [sp, #4]
    return flash_area_get_size(fap) - BOOT_MAGIC_SZ;
     8b6:	6881      	ldr	r1, [r0, #8]
        rc = flash_area_read(*fap, off, magic, BOOT_MAGIC_SZ);
     8b8:	2310      	movs	r3, #16
     8ba:	aa02      	add	r2, sp, #8
     8bc:	3910      	subs	r1, #16
     8be:	f006 f9b7 	bl	6c30 <flash_area_read>
     8c2:	4604      	mov	r4, r0
        flash_area_close(*fap);
     8c4:	9801      	ldr	r0, [sp, #4]
     8c6:	f006 f9b2 	bl	6c2e <flash_area_close>
        if (rc != 0) {
     8ca:	b944      	cbnz	r4, 8de <boot_read_swap_size+0x4e>
    if (memcmp(magic, BOOT_IMG_MAGIC, BOOT_MAGIC_SZ) == 0) {
     8cc:	2210      	movs	r2, #16
     8ce:	4641      	mov	r1, r8
     8d0:	a802      	add	r0, sp, #8
     8d2:	f006 fa3b 	bl	6d4c <memcmp>
     8d6:	b140      	cbz	r0, 8ea <boot_read_swap_size+0x5a>
    for (i = 0; i < sizeof(areas) / sizeof(areas[0]); i++) {
     8d8:	b12e      	cbz	r6, 8e6 <boot_read_swap_size+0x56>
    return -1;
     8da:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
        rc = flash_area_read(fap, off, swap_size, sizeof *swap_size);
        flash_area_close(fap);
    }

    return rc;
}
     8de:	4620      	mov	r0, r4
     8e0:	b006      	add	sp, #24
     8e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    for (i = 0; i < sizeof(areas) / sizeof(areas[0]); i++) {
     8e6:	2601      	movs	r6, #1
     8e8:	e7dd      	b.n	8a6 <boot_read_swap_size+0x16>
    return boot_swap_info_off(fap) - BOOT_MAX_ALIGN;
     8ea:	9801      	ldr	r0, [sp, #4]
     8ec:	f006 ff28 	bl	7740 <boot_swap_info_off>
        rc = flash_area_read(fap, off, swap_size, sizeof *swap_size);
     8f0:	2304      	movs	r3, #4
     8f2:	f1a0 0108 	sub.w	r1, r0, #8
     8f6:	462a      	mov	r2, r5
     8f8:	9801      	ldr	r0, [sp, #4]
     8fa:	f006 f999 	bl	6c30 <flash_area_read>
     8fe:	4604      	mov	r4, r0
        flash_area_close(fap);
     900:	9801      	ldr	r0, [sp, #4]
     902:	f006 f994 	bl	6c2e <flash_area_close>
     906:	e7ea      	b.n	8de <boot_read_swap_size+0x4e>
     908:	00009adc 	.word	0x00009adc

0000090c <bootutil_max_image_size>:
    return 0;
}
#endif

uint32_t bootutil_max_image_size(const struct flash_area *fap)
{
     90c:	b507      	push	{r0, r1, r2, lr}
#if defined(MCUBOOT_SWAP_USING_SCRATCH)
    return boot_status_off(fap);
#elif defined(MCUBOOT_SWAP_USING_MOVE)
    struct flash_sector sector;
    /* get the last sector offset */
    int rc = flash_area_sector_from_off(boot_status_off(fap), &sector);
     90e:	f005 fe86 	bl	661e <boot_status_off>
     912:	4669      	mov	r1, sp
     914:	f7ff fdc6 	bl	4a4 <flash_area_sector_from_off>
    if (rc) {
     918:	b138      	cbz	r0, 92a <bootutil_max_image_size+0x1e>
        BOOT_LOG_ERR("Unable to determine flash sector of the image trailer");
     91a:	4805      	ldr	r0, [pc, #20]	; (930 <bootutil_max_image_size+0x24>)
     91c:	2145      	movs	r1, #69	; 0x45
     91e:	f006 f979 	bl	6c14 <z_log_minimal_printk>
        return 0; /* Returning of zero here should cause any check which uses
     922:	2000      	movs	r0, #0
#elif defined(MCUBOOT_DIRECT_XIP)
    return boot_swap_info_off(fap);
#elif defined(MCUBOOT_RAM_LOAD)
    return boot_swap_info_off(fap);
#endif
}
     924:	b003      	add	sp, #12
     926:	f85d fb04 	ldr.w	pc, [sp], #4
 */
uint8_t flash_area_erased_val(const struct flash_area *fap);

static inline uint32_t flash_sector_get_off(const struct flash_sector *fs)
{
	return fs->fs_off;
     92a:	9800      	ldr	r0, [sp, #0]
    return flash_sector_get_off(&sector);
     92c:	e7fa      	b.n	924 <bootutil_max_image_size+0x18>
     92e:	bf00      	nop
     930:	00009c00 	.word	0x00009c00

00000934 <boot_validate_slot.isra.0>:
 *         FIH_SUCCESS                      if image was successfully validated
 *         1 (or its fih_int encoded form)  if no bootloable image was found
 *         FIH_FAILURE                      on any errors
 */
static fih_int
boot_validate_slot(struct boot_loader_state *state, int slot,
     934:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
                   struct boot_status *bs)
{
    const struct flash_area *fap;
    struct image_header *hdr;
    int area_id;
    fih_int fih_rc = FIH_FAILURE;
     938:	4b35      	ldr	r3, [pc, #212]	; (a10 <FIH_LABEL_FIH_CALL_END_437+0x76>)
boot_validate_slot(struct boot_loader_state *state, int slot,
     93a:	b088      	sub	sp, #32
     93c:	4606      	mov	r6, r0
    int rc;

    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
     93e:	2000      	movs	r0, #0
boot_validate_slot(struct boot_loader_state *state, int slot,
     940:	460c      	mov	r4, r1
    fih_int fih_rc = FIH_FAILURE;
     942:	681d      	ldr	r5, [r3, #0]
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
     944:	f005 fdb2 	bl	64ac <flash_area_id_from_multi_image_slot>
    rc = flash_area_open(area_id, &fap);
     948:	a906      	add	r1, sp, #24
     94a:	b2c0      	uxtb	r0, r0
     94c:	f001 f84a 	bl	19e4 <flash_area_open>
    if (rc != 0) {
     950:	2800      	cmp	r0, #0
     952:	d157      	bne.n	a04 <FIH_LABEL_FIH_CALL_END_437+0x6a>
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
     954:	4621      	mov	r1, r4
     956:	f005 fda9 	bl	64ac <flash_area_id_from_multi_image_slot>
     ((swap_type) == BOOT_SWAP_TYPE_PERM))

static inline struct image_header*
boot_img_hdr(struct boot_loader_state *state, size_t slot)
{
    return &BOOT_IMG(state, slot).hdr;
     95a:	252c      	movs	r5, #44	; 0x2c
    rc = flash_area_open(area_id, &fap);
     95c:	a907      	add	r1, sp, #28
     95e:	b2c0      	uxtb	r0, r0
     960:	fb05 6504 	mla	r5, r5, r4, r6
     964:	f001 f83e 	bl	19e4 <flash_area_open>
    if (rc != 0) {
     968:	2800      	cmp	r0, #0
     96a:	d033      	beq.n	9d4 <FIH_LABEL_FIH_CALL_END_437+0x3a>
        FIH_RET(fih_rc);
    }

    hdr = boot_img_hdr(state, slot);
    if (boot_check_header_erased(state, slot) == 0 ||
        (hdr->ih_flags & IMAGE_F_NON_BOOTABLE)) {
     96c:	272c      	movs	r7, #44	; 0x2c
     96e:	4367      	muls	r7, r4
     970:	eb06 0807 	add.w	r8, r6, r7
#endif
    BOOT_HOOK_CALL_FIH(boot_image_check_hook, fih_int_encode(BOOT_HOOK_REGULAR),
                       fih_rc, BOOT_CURR_IMG(state), slot);
    if (fih_eq(fih_rc, fih_int_encode(BOOT_HOOK_REGULAR)))
    {
        FIH_CALL(boot_image_check, fih_rc, state, hdr, fap, bs);
     974:	9b06      	ldr	r3, [sp, #24]
        (hdr->ih_flags & IMAGE_F_NON_BOOTABLE)) {
     976:	f8d8 1010 	ldr.w	r1, [r8, #16]
    if (boot_check_header_erased(state, slot) == 0 ||
     97a:	f011 0110 	ands.w	r1, r1, #16
     97e:	d138      	bne.n	9f2 <FIH_LABEL_FIH_CALL_END_437+0x58>

00000980 <FIH_LABEL_FIH_CALL_START_388>:
    FIH_CALL(bootutil_img_validate, fih_rc, BOOT_CURR_ENC(state), image_index,
     980:	f44f 7280 	mov.w	r2, #256	; 0x100
     984:	9201      	str	r2, [sp, #4]
     986:	4a23      	ldr	r2, [pc, #140]	; (a14 <FIH_LABEL_FIH_CALL_END_437+0x7a>)
     988:	9200      	str	r2, [sp, #0]
     98a:	e9cd 1103 	strd	r1, r1, [sp, #12]
     98e:	462a      	mov	r2, r5
     990:	9102      	str	r1, [sp, #8]
     992:	4608      	mov	r0, r1
     994:	f7ff fd9e 	bl	4d4 <bootutil_img_validate>
     998:	4605      	mov	r5, r0

0000099a <FIH_LABEL_FIH_CALL_END_437>:
    if (hdr->ih_magic != IMAGE_MAGIC) {
     99a:	4b1f      	ldr	r3, [pc, #124]	; (a18 <FIH_LABEL_FIH_CALL_END_437+0x7e>)
     99c:	59f2      	ldr	r2, [r6, r7]
    }
    if (!boot_is_header_valid(hdr, fap) || fih_not_eq(fih_rc, FIH_SUCCESS)) {
     99e:	9806      	ldr	r0, [sp, #24]
    if (hdr->ih_magic != IMAGE_MAGIC) {
     9a0:	429a      	cmp	r2, r3
     9a2:	d10c      	bne.n	9be <FIH_LABEL_FIH_CALL_END_437+0x24>
    if (!boot_u32_safe_add(&size, hdr->ih_img_size, hdr->ih_hdr_size)) {
     9a4:	f8d8 200c 	ldr.w	r2, [r8, #12]
     9a8:	f8b8 3008 	ldrh.w	r3, [r8, #8]
    if (a > UINT32_MAX - b) {
     9ac:	189b      	adds	r3, r3, r2
     9ae:	d206      	bcs.n	9be <FIH_LABEL_FIH_CALL_END_437+0x24>
    if (size >= flash_area_get_size(fap)) {
     9b0:	6882      	ldr	r2, [r0, #8]
     9b2:	4293      	cmp	r3, r2
     9b4:	d203      	bcs.n	9be <FIH_LABEL_FIH_CALL_END_437+0x24>
    if (!boot_is_header_valid(hdr, fap) || fih_not_eq(fih_rc, FIH_SUCCESS)) {
     9b6:	4b19      	ldr	r3, [pc, #100]	; (a1c <FIH_LABEL_FIH_CALL_END_437+0x82>)
     9b8:	681b      	ldr	r3, [r3, #0]
     9ba:	42ab      	cmp	r3, r5
     9bc:	d01f      	beq.n	9fe <FIH_LABEL_FIH_CALL_END_437+0x64>
        if ((slot != BOOT_PRIMARY_SLOT) || ARE_SLOTS_EQUIVALENT()) {
     9be:	b32c      	cbz	r4, a0c <FIH_LABEL_FIH_CALL_END_437+0x72>
            flash_area_erase(fap, 0, flash_area_get_size(fap));
     9c0:	6882      	ldr	r2, [r0, #8]
     9c2:	2100      	movs	r1, #0
     9c4:	f006 f95e 	bl	6c84 <flash_area_erase>
            /* Image is invalid, erase it to prevent further unnecessary
             * attempts to validate and boot it.
             */
        }
#if !defined(__BOOTSIM__)
        BOOT_LOG_ERR("Image in the %s slot is not valid!",
     9c8:	4a15      	ldr	r2, [pc, #84]	; (a20 <FIH_LABEL_FIH_CALL_END_437+0x86>)
     9ca:	4816      	ldr	r0, [pc, #88]	; (a24 <FIH_LABEL_FIH_CALL_END_437+0x8a>)
     9cc:	2145      	movs	r1, #69	; 0x45
     9ce:	f006 f921 	bl	6c14 <z_log_minimal_printk>
                     (slot == BOOT_PRIMARY_SLOT) ? "primary" : "secondary");
#endif
        fih_rc = fih_int_encode(1);
        goto out;
     9d2:	e013      	b.n	9fc <FIH_LABEL_FIH_CALL_END_437+0x62>
    erased_val = flash_area_erased_val(fap);
     9d4:	9807      	ldr	r0, [sp, #28]
     9d6:	f006 f970 	bl	6cba <flash_area_erased_val>
     9da:	4607      	mov	r7, r0
    flash_area_close(fap);
     9dc:	9807      	ldr	r0, [sp, #28]
     9de:	f006 f926 	bl	6c2e <flash_area_close>
    for (i = 0; i < len; i++) {
     9e2:	1e6b      	subs	r3, r5, #1
     9e4:	1cea      	adds	r2, r5, #3
        if (val != p[i]) {
     9e6:	f813 1f01 	ldrb.w	r1, [r3, #1]!
     9ea:	42b9      	cmp	r1, r7
     9ec:	d1be      	bne.n	96c <boot_validate_slot.isra.0+0x38>
    for (i = 0; i < len; i++) {
     9ee:	4293      	cmp	r3, r2
     9f0:	d1f9      	bne.n	9e6 <FIH_LABEL_FIH_CALL_END_437+0x4c>
        if (slot != BOOT_PRIMARY_SLOT) {
     9f2:	b11c      	cbz	r4, 9fc <FIH_LABEL_FIH_CALL_END_437+0x62>
            swap_erase_trailer_sectors(state, fap);
     9f4:	9906      	ldr	r1, [sp, #24]
     9f6:	4630      	mov	r0, r6
     9f8:	f005 fef5 	bl	67e6 <swap_erase_trailer_sectors>
        fih_rc = fih_int_encode(1);
     9fc:	2501      	movs	r5, #1
        }
    }
#endif

out:
    flash_area_close(fap);
     9fe:	9806      	ldr	r0, [sp, #24]
     a00:	f006 f915 	bl	6c2e <flash_area_close>

    FIH_RET(fih_rc);
}
     a04:	4628      	mov	r0, r5
     a06:	b008      	add	sp, #32
     a08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        BOOT_LOG_ERR("Image in the %s slot is not valid!",
     a0c:	4a06      	ldr	r2, [pc, #24]	; (a28 <FIH_LABEL_FIH_CALL_END_437+0x8e>)
     a0e:	e7dc      	b.n	9ca <FIH_LABEL_FIH_CALL_END_437+0x30>
     a10:	20000000 	.word	0x20000000
     a14:	200029d8 	.word	0x200029d8
     a18:	96f3b83d 	.word	0x96f3b83d
     a1c:	20000360 	.word	0x20000360
     a20:	00009c43 	.word	0x00009c43
     a24:	00009c4d 	.word	0x00009c4d
     a28:	00009c3b 	.word	0x00009c3b

00000a2c <boot_swap_image>:
 *
 * @return                      0 on success; nonzero on failure.
 */
static int
boot_swap_image(struct boot_loader_state *state, struct boot_status *bs)
{
     a2c:	b573      	push	{r0, r1, r4, r5, r6, lr}
     a2e:	460d      	mov	r5, r1
     a30:	4604      	mov	r4, r0
    uint8_t image_index;
    int rc;

    /* FIXME: just do this if asked by user? */

    size = copy_size = 0;
     a32:	2100      	movs	r1, #0
    image_index = BOOT_CURR_IMG(state);

    if (boot_status_is_reset(bs)) {
     a34:	4628      	mov	r0, r5
    size = copy_size = 0;
     a36:	e9cd 1100 	strd	r1, r1, [sp]
    if (boot_status_is_reset(bs)) {
     a3a:	f005 fe93 	bl	6764 <boot_status_is_reset>
     a3e:	b330      	cbz	r0, a8e <boot_swap_image+0x62>
        /*
         * No swap ever happened, so need to find the largest image which
         * will be used to determine the amount of sectors to swap.
         */
        hdr = boot_img_hdr(state, BOOT_PRIMARY_SLOT);
        if (hdr->ih_magic == IMAGE_MAGIC) {
     a40:	4e16      	ldr	r6, [pc, #88]	; (a9c <boot_swap_image+0x70>)
     a42:	6823      	ldr	r3, [r4, #0]
     a44:	42b3      	cmp	r3, r6
     a46:	d103      	bne.n	a50 <boot_swap_image+0x24>
            rc = boot_read_image_size(state, BOOT_PRIMARY_SLOT, &copy_size);
     a48:	aa01      	add	r2, sp, #4
     a4a:	4620      	mov	r0, r4
     a4c:	f005 fe1f 	bl	668e <boot_read_image_size.constprop.0.isra.0>
            memset(bs->enckey[0], 0xff, BOOT_ENC_KEY_ALIGN_SIZE);
        }
#endif

        hdr = boot_img_hdr(state, BOOT_SECONDARY_SLOT);
        if (hdr->ih_magic == IMAGE_MAGIC) {
     a50:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
     a52:	42b3      	cmp	r3, r6
     a54:	d104      	bne.n	a60 <boot_swap_image+0x34>
            rc = boot_read_image_size(state, BOOT_SECONDARY_SLOT, &size);
     a56:	466a      	mov	r2, sp
     a58:	2101      	movs	r1, #1
     a5a:	4620      	mov	r0, r4
     a5c:	f005 fe17 	bl	668e <boot_read_image_size.constprop.0.isra.0>
        } else {
            memset(bs->enckey[1], 0xff, BOOT_ENC_KEY_ALIGN_SIZE);
        }
#endif

        if (size > copy_size) {
     a60:	e9dd 3200 	ldrd	r3, r2, [sp]
     a64:	4293      	cmp	r3, r2
            copy_size = size;
     a66:	bf88      	it	hi
     a68:	9301      	strhi	r3, [sp, #4]
        }

        bs->swap_size = copy_size;
     a6a:	9b01      	ldr	r3, [sp, #4]
     a6c:	60ab      	str	r3, [r5, #8]
            }
        }
#endif
    }

    swap_run(state, bs, copy_size);
     a6e:	9a01      	ldr	r2, [sp, #4]
     a70:	4629      	mov	r1, r5
     a72:	4620      	mov	r0, r4
     a74:	f000 fb34 	bl	10e0 <swap_run>

#ifdef MCUBOOT_VALIDATE_PRIMARY_SLOT
    extern int boot_status_fails;
    if (boot_status_fails > 0) {
     a78:	4b09      	ldr	r3, [pc, #36]	; (aa0 <boot_swap_image+0x74>)
     a7a:	681a      	ldr	r2, [r3, #0]
     a7c:	2a00      	cmp	r2, #0
     a7e:	dd03      	ble.n	a88 <boot_swap_image+0x5c>
        BOOT_LOG_WRN("%d status write fails performing the swap",
     a80:	4808      	ldr	r0, [pc, #32]	; (aa4 <boot_swap_image+0x78>)
     a82:	2157      	movs	r1, #87	; 0x57
     a84:	f006 f8c6 	bl	6c14 <z_log_minimal_printk>
#endif
    rc = BOOT_HOOK_CALL(boot_copy_region_post_hook, 0, BOOT_CURR_IMG(state),
                        BOOT_IMG_AREA(state, BOOT_PRIMARY_SLOT), size);

    return 0;
}
     a88:	2000      	movs	r0, #0
     a8a:	b002      	add	sp, #8
     a8c:	bd70      	pop	{r4, r5, r6, pc}
        rc = boot_read_swap_size(image_index, &bs->swap_size);
     a8e:	f105 0108 	add.w	r1, r5, #8
     a92:	f7ff fefd 	bl	890 <boot_read_swap_size>
        copy_size = bs->swap_size;
     a96:	68ab      	ldr	r3, [r5, #8]
     a98:	9301      	str	r3, [sp, #4]
     a9a:	e7e8      	b.n	a6e <boot_swap_image+0x42>
     a9c:	96f3b83d 	.word	0x96f3b83d
     aa0:	20000fc4 	.word	0x20000fc4
     aa4:	00009c75 	.word	0x00009c75

00000aa8 <boot_copy_region>:
{
     aa8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        rc = flash_area_read(fap_src, off_src + bytes_copied, buf, chunk_sz);
     aac:	f8df b070 	ldr.w	fp, [pc, #112]	; b20 <boot_copy_region+0x78>
     ab0:	4c1c      	ldr	r4, [pc, #112]	; (b24 <boot_copy_region+0x7c>)
     ab2:	4d1d      	ldr	r5, [pc, #116]	; (b28 <boot_copy_region+0x80>)
{
     ab4:	4688      	mov	r8, r1
     ab6:	4691      	mov	r9, r2
     ab8:	469a      	mov	sl, r3
    bytes_copied = 0;
     aba:	2600      	movs	r6, #0
    while (bytes_copied < sz) {
     abc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
     abe:	429e      	cmp	r6, r3
     ac0:	d301      	bcc.n	ac6 <boot_copy_region+0x1e>
    return 0;
     ac2:	2000      	movs	r0, #0
     ac4:	e00f      	b.n	ae6 <boot_copy_region+0x3e>
        if (sz - bytes_copied > sizeof buf) {
     ac6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
        rc = flash_area_read(fap_src, off_src + bytes_copied, buf, chunk_sz);
     ac8:	4a15      	ldr	r2, [pc, #84]	; (b20 <boot_copy_region+0x78>)
        if (sz - bytes_copied > sizeof buf) {
     aca:	1b9f      	subs	r7, r3, r6
     acc:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
     ad0:	bf28      	it	cs
     ad2:	f44f 6780 	movcs.w	r7, #1024	; 0x400
        rc = flash_area_read(fap_src, off_src + bytes_copied, buf, chunk_sz);
     ad6:	463b      	mov	r3, r7
     ad8:	eb06 010a 	add.w	r1, r6, sl
     adc:	4640      	mov	r0, r8
     ade:	f006 f8a7 	bl	6c30 <flash_area_read>
        if (rc != 0) {
     ae2:	b110      	cbz	r0, aea <boot_copy_region+0x42>
            return BOOT_EFLASH;
     ae4:	2001      	movs	r0, #1
}
     ae6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        rc = flash_area_write(fap_dst, off_dst + bytes_copied, buf, chunk_sz);
     aea:	990a      	ldr	r1, [sp, #40]	; 0x28
     aec:	463b      	mov	r3, r7
     aee:	465a      	mov	r2, fp
     af0:	1871      	adds	r1, r6, r1
     af2:	4648      	mov	r0, r9
     af4:	f006 f8b1 	bl	6c5a <flash_area_write>
        if (rc != 0) {
     af8:	2800      	cmp	r0, #0
     afa:	d1f3      	bne.n	ae4 <boot_copy_region+0x3c>
     afc:	f8c4 5600 	str.w	r5, [r4, #1536]	; 0x600
        bytes_copied += chunk_sz;
     b00:	443e      	add	r6, r7
     b02:	f8c4 5604 	str.w	r5, [r4, #1540]	; 0x604
     b06:	f8c4 5608 	str.w	r5, [r4, #1544]	; 0x608
     b0a:	f8c4 560c 	str.w	r5, [r4, #1548]	; 0x60c
     b0e:	f8c4 5610 	str.w	r5, [r4, #1552]	; 0x610
     b12:	f8c4 5614 	str.w	r5, [r4, #1556]	; 0x614
     b16:	f8c4 5618 	str.w	r5, [r4, #1560]	; 0x618
     b1a:	f8c4 561c 	str.w	r5, [r4, #1564]	; 0x61c
        MCUBOOT_WATCHDOG_FEED();
     b1e:	e7cd      	b.n	abc <boot_copy_region+0x14>
     b20:	20000b64 	.word	0x20000b64
     b24:	40010000 	.word	0x40010000
     b28:	6e524635 	.word	0x6e524635

00000b2c <context_boot_go>:
#endif
}

fih_int
context_boot_go(struct boot_loader_state *state, struct boot_rsp *rsp)
{
     b2c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
        boot_enc_zeroize(BOOT_CURR_ENC(state));
#endif

        image_index = BOOT_CURR_IMG(state);

        BOOT_IMG(state, BOOT_PRIMARY_SLOT).sectors =
     b30:	4b8f      	ldr	r3, [pc, #572]	; (d70 <FIH_LABEL_FIH_CALL_END_2278+0x42>)
     b32:	6243      	str	r3, [r0, #36]	; 0x24
{
     b34:	460e      	mov	r6, r1
            primary_slot_sectors[image_index];
        BOOT_IMG(state, BOOT_SECONDARY_SLOT).sectors =
     b36:	4b8f      	ldr	r3, [pc, #572]	; (d74 <FIH_LABEL_FIH_CALL_END_2278+0x46>)
     b38:	6503      	str	r3, [r0, #80]	; 0x50

        /* Open primary and secondary image areas for the duration
         * of this call.
         */
        for (slot = 0; slot < BOOT_NUM_SLOTS; slot++) {
            fa_id = flash_area_id_from_multi_image_slot(image_index, slot);
     b3a:	2100      	movs	r1, #0
{
     b3c:	4604      	mov	r4, r0
            fa_id = flash_area_id_from_multi_image_slot(image_index, slot);
     b3e:	4608      	mov	r0, r1
     b40:	f005 fcb4 	bl	64ac <flash_area_id_from_multi_image_slot>
            rc = flash_area_open(fa_id, &BOOT_IMG_AREA(state, slot));
     b44:	f104 0120 	add.w	r1, r4, #32
     b48:	b2c0      	uxtb	r0, r0
     b4a:	f000 ff4b 	bl	19e4 <flash_area_open>
            fa_id = flash_area_id_from_multi_image_slot(image_index, slot);
     b4e:	2101      	movs	r1, #1
     b50:	2000      	movs	r0, #0
     b52:	f005 fcab 	bl	64ac <flash_area_id_from_multi_image_slot>
            rc = flash_area_open(fa_id, &BOOT_IMG_AREA(state, slot));
     b56:	f104 014c 	add.w	r1, r4, #76	; 0x4c
     b5a:	b2c0      	uxtb	r0, r0
     b5c:	f000 ff42 	bl	19e4 <flash_area_open>
     b60:	4605      	mov	r5, r0
    rc = boot_read_sectors(state);
     b62:	4620      	mov	r0, r4
     b64:	f005 fdd4 	bl	6710 <boot_read_sectors>
    if (rc != 0) {
     b68:	4607      	mov	r7, r0
     b6a:	b968      	cbnz	r0, b88 <context_boot_go+0x5c>
    rc = boot_read_image_headers(state, false, NULL);
     b6c:	2200      	movs	r2, #0
     b6e:	4611      	mov	r1, r2
     b70:	4620      	mov	r0, r4
     b72:	f005 fd76 	bl	6662 <boot_read_image_headers>
    if (rc != 0) {
     b76:	4607      	mov	r7, r0
     b78:	b300      	cbz	r0, bbc <context_boot_go+0x90>
        BOOT_LOG_WRN("Failed reading image headers; Image=%u",
     b7a:	487f      	ldr	r0, [pc, #508]	; (d78 <FIH_LABEL_FIH_CALL_END_2278+0x4a>)
     b7c:	2200      	movs	r2, #0
     b7e:	2157      	movs	r1, #87	; 0x57
            BOOT_LOG_WRN("Failed reading boot status; Image=%u",
     b80:	f006 f848 	bl	6c14 <z_log_minimal_printk>
        BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
     b84:	2301      	movs	r3, #1
     b86:	e08f      	b.n	ca8 <FIH_LABEL_FIH_CALL_END_2027+0xe>
        BOOT_LOG_WRN("Failed reading sectors; BOOT_MAX_IMG_SECTORS=%d"
     b88:	487c      	ldr	r0, [pc, #496]	; (d7c <FIH_LABEL_FIH_CALL_END_2278+0x4e>)
     b8a:	2280      	movs	r2, #128	; 0x80
     b8c:	2157      	movs	r1, #87	; 0x57
     b8e:	f006 f841 	bl	6c14 <z_log_minimal_printk>
        BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
     b92:	2301      	movs	r3, #1
        if (rc == BOOT_EFLASH)
     b94:	429f      	cmp	r7, r3
        BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
     b96:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
        if (rc == BOOT_EFLASH)
     b9a:	d1e7      	bne.n	b6c <context_boot_go+0x40>
#endif

        /* Determine swap type and complete swap if it has been aborted. */
        boot_prepare_image_for_update(state, &bs);

        if (BOOT_IS_UPGRADE(BOOT_SWAP_TYPE(state))) {
     b9c:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
        /* Indicate that swap is not aborted */
        boot_status_reset(&bs);
#endif /* (BOOT_IMAGE_NUMBER > 1) */

        /* Set the previously determined swap type */
        bs.swap_type = BOOT_SWAP_TYPE(state);
     ba0:	f88d 3007 	strb.w	r3, [sp, #7]

        switch (BOOT_SWAP_TYPE(state)) {
     ba4:	2b04      	cmp	r3, #4
     ba6:	f200 8082 	bhi.w	cae <FIH_LABEL_FIH_CALL_END_2027+0x14>
     baa:	2b01      	cmp	r3, #1
     bac:	f200 8085 	bhi.w	cba <FIH_LABEL_FIH_CALL_END_2027+0x20>
     bb0:	f000 809c 	beq.w	cec <FIH_LABEL_FIH_CALL_END_2027+0x52>
            }
#endif /* !MCUBOOT_OVERWRITE_ONLY */
            break;

        default:
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
     bb4:	23ff      	movs	r3, #255	; 0xff
     bb6:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
     bba:	e097      	b.n	cec <FIH_LABEL_FIH_CALL_END_2027+0x52>
    if (boot_slots_compatible(state)) {
     bbc:	4620      	mov	r0, r4
     bbe:	f000 f9a7 	bl	f10 <boot_slots_compatible>
     bc2:	2800      	cmp	r0, #0
     bc4:	d0de      	beq.n	b84 <context_boot_go+0x58>
        boot_status_reset(bs);
     bc6:	4668      	mov	r0, sp
     bc8:	f005 fdc3 	bl	6752 <boot_status_reset>
        rc = swap_read_status(state, bs);
     bcc:	4669      	mov	r1, sp
     bce:	4620      	mov	r0, r4
     bd0:	f005 fe5e 	bl	6890 <swap_read_status>
        if (rc != 0) {
     bd4:	b118      	cbz	r0, bde <context_boot_go+0xb2>
            BOOT_LOG_WRN("Failed reading boot status; Image=%u",
     bd6:	486a      	ldr	r0, [pc, #424]	; (d80 <FIH_LABEL_FIH_CALL_END_2278+0x52>)
     bd8:	463a      	mov	r2, r7
     bda:	2157      	movs	r1, #87	; 0x57
     bdc:	e7d0      	b.n	b80 <context_boot_go+0x54>
        rc = boot_read_image_headers(state, !boot_status_is_reset(bs), bs);
     bde:	4668      	mov	r0, sp
     be0:	f005 fdc0 	bl	6764 <boot_status_is_reset>
     be4:	f080 0101 	eor.w	r1, r0, #1
     be8:	466a      	mov	r2, sp
     bea:	b2c9      	uxtb	r1, r1
     bec:	4620      	mov	r0, r4
     bee:	f005 fd38 	bl	6662 <boot_read_image_headers>
        if (rc != 0) {
     bf2:	4602      	mov	r2, r0
     bf4:	2800      	cmp	r0, #0
     bf6:	d1c0      	bne.n	b7a <context_boot_go+0x4e>
        if (!boot_status_is_reset(bs)) {
     bf8:	4668      	mov	r0, sp
     bfa:	f005 fdb3 	bl	6764 <boot_status_is_reset>
     bfe:	4607      	mov	r7, r0
     c00:	bb60      	cbnz	r0, c5c <context_boot_go+0x130>
    rc = boot_swap_image(state, bs);
     c02:	4669      	mov	r1, sp
     c04:	4620      	mov	r0, r4
     c06:	f7ff ff11 	bl	a2c <boot_swap_image>
    BOOT_SWAP_TYPE(state) = bs->swap_type;
     c0a:	f89d 3007 	ldrb.w	r3, [sp, #7]
     c0e:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    if (bs->swap_type == BOOT_SWAP_TYPE_REVERT ||
     c12:	3b03      	subs	r3, #3
     c14:	2b01      	cmp	r3, #1
     c16:	d806      	bhi.n	c26 <context_boot_go+0xfa>
        rc = swap_set_image_ok(BOOT_CURR_IMG(state));
     c18:	4638      	mov	r0, r7
     c1a:	f005 fe87 	bl	692c <swap_set_image_ok>
        if (rc != 0) {
     c1e:	b110      	cbz	r0, c26 <context_boot_go+0xfa>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
     c20:	23ff      	movs	r3, #255	; 0xff
     c22:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    if (BOOT_IS_UPGRADE(bs->swap_type)) {
     c26:	f89d 3007 	ldrb.w	r3, [sp, #7]
     c2a:	3b02      	subs	r3, #2
     c2c:	2b02      	cmp	r3, #2
     c2e:	d80b      	bhi.n	c48 <context_boot_go+0x11c>
        rc = swap_set_copy_done(BOOT_CURR_IMG(state));
     c30:	2000      	movs	r0, #0
     c32:	f005 fe69 	bl	6908 <swap_set_copy_done>
        if (rc != 0) {
     c36:	b138      	cbz	r0, c48 <context_boot_go+0x11c>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
     c38:	23ff      	movs	r3, #255	; 0xff
     c3a:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
        BOOT_LOG_ERR("panic!");
     c3e:	4851      	ldr	r0, [pc, #324]	; (d84 <FIH_LABEL_FIH_CALL_END_2278+0x56>)
     c40:	2145      	movs	r1, #69	; 0x45
     c42:	f005 ffe7 	bl	6c14 <z_log_minimal_printk>
        while (1) {}
     c46:	e7fe      	b.n	c46 <context_boot_go+0x11a>
    if (BOOT_SWAP_TYPE(state) == BOOT_SWAP_TYPE_PANIC) {
     c48:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
     c4c:	2bff      	cmp	r3, #255	; 0xff
     c4e:	d0f6      	beq.n	c3e <context_boot_go+0x112>
            rc = boot_read_image_headers(state, false, bs);
     c50:	466a      	mov	r2, sp
     c52:	2100      	movs	r1, #0
     c54:	4620      	mov	r0, r4
     c56:	f005 fd04 	bl	6662 <boot_read_image_headers>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
     c5a:	e793      	b.n	b84 <context_boot_go+0x58>
            if (bs->swap_type == BOOT_SWAP_TYPE_NONE) {
     c5c:	f89d 8007 	ldrb.w	r8, [sp, #7]
     c60:	f1b8 0f01 	cmp.w	r8, #1
     c64:	d115      	bne.n	c92 <FIH_LABEL_FIH_CALL_START_2012>
    swap_type = boot_swap_type_multi(BOOT_CURR_IMG(state));
     c66:	4610      	mov	r0, r2
     c68:	f002 fea4 	bl	39b4 <boot_swap_type_multi>
    if (BOOT_IS_UPGRADE(swap_type)) {
     c6c:	1e83      	subs	r3, r0, #2
     c6e:	2b02      	cmp	r3, #2
    swap_type = boot_swap_type_multi(BOOT_CURR_IMG(state));
     c70:	4607      	mov	r7, r0
    if (BOOT_IS_UPGRADE(swap_type)) {
     c72:	d80b      	bhi.n	c8c <FIH_LABEL_FIH_CALL_END_1976+0x10>

00000c74 <FIH_LABEL_FIH_CALL_START_1961>:
        FIH_CALL(boot_validate_slot, fih_rc, state, BOOT_SECONDARY_SLOT, bs);
     c74:	4641      	mov	r1, r8
     c76:	4620      	mov	r0, r4
     c78:	f7ff fe5c 	bl	934 <boot_validate_slot.isra.0>

00000c7c <FIH_LABEL_FIH_CALL_END_1976>:
        if (fih_not_eq(fih_rc, FIH_SUCCESS)) {
     c7c:	4b42      	ldr	r3, [pc, #264]	; (d88 <FIH_LABEL_FIH_CALL_END_2278+0x5a>)
     c7e:	681b      	ldr	r3, [r3, #0]
     c80:	4298      	cmp	r0, r3
     c82:	d003      	beq.n	c8c <FIH_LABEL_FIH_CALL_END_1976+0x10>
                swap_type = BOOT_SWAP_TYPE_NONE;
     c84:	2801      	cmp	r0, #1
     c86:	bf14      	ite	ne
     c88:	2705      	movne	r7, #5
     c8a:	2701      	moveq	r7, #1
                BOOT_SWAP_TYPE(state) = boot_validated_swap_type(state, bs);
     c8c:	f884 7058 	strb.w	r7, [r4, #88]	; 0x58
     c90:	e784      	b.n	b9c <context_boot_go+0x70>

00000c92 <FIH_LABEL_FIH_CALL_START_2012>:
                FIH_CALL(boot_validate_slot, fih_rc,
     c92:	2101      	movs	r1, #1
     c94:	4620      	mov	r0, r4
     c96:	f7ff fe4d 	bl	934 <boot_validate_slot.isra.0>

00000c9a <FIH_LABEL_FIH_CALL_END_2027>:
                if (fih_not_eq(fih_rc, FIH_SUCCESS)) {
     c9a:	4b3b      	ldr	r3, [pc, #236]	; (d88 <FIH_LABEL_FIH_CALL_END_2278+0x5a>)
     c9c:	681b      	ldr	r3, [r3, #0]
     c9e:	4298      	cmp	r0, r3
                    BOOT_SWAP_TYPE(state) = bs->swap_type;
     ca0:	bf0c      	ite	eq
     ca2:	f89d 3007 	ldrbeq.w	r3, [sp, #7]
                    BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_FAIL;
     ca6:	2305      	movne	r3, #5
        BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
     ca8:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
     cac:	e776      	b.n	b9c <context_boot_go+0x70>
        switch (BOOT_SWAP_TYPE(state)) {
     cae:	2b05      	cmp	r3, #5
     cb0:	d180      	bne.n	bb4 <context_boot_go+0x88>
            rc = swap_set_image_ok(BOOT_CURR_IMG(state));
     cb2:	2000      	movs	r0, #0
     cb4:	f005 fe3a 	bl	692c <swap_set_image_ok>
     cb8:	e013      	b.n	ce2 <FIH_LABEL_FIH_CALL_END_2027+0x48>
        rc = boot_swap_image(state, bs);
     cba:	4669      	mov	r1, sp
     cbc:	4620      	mov	r0, r4
     cbe:	f7ff feb5 	bl	a2c <boot_swap_image>
    swap_type = BOOT_SWAP_TYPE(state);
     cc2:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
    if (swap_type == BOOT_SWAP_TYPE_REVERT ||
     cc6:	1eda      	subs	r2, r3, #3
     cc8:	2a01      	cmp	r2, #1
        rc = boot_swap_image(state, bs);
     cca:	4605      	mov	r5, r0
    if (swap_type == BOOT_SWAP_TYPE_REVERT ||
     ccc:	d80c      	bhi.n	ce8 <FIH_LABEL_FIH_CALL_END_2027+0x4e>
        rc = swap_set_image_ok(BOOT_CURR_IMG(state));
     cce:	2000      	movs	r0, #0
     cd0:	f005 fe2c 	bl	692c <swap_set_image_ok>
        if (rc != 0) {
     cd4:	4605      	mov	r5, r0
     cd6:	2800      	cmp	r0, #0
     cd8:	f47f af6c 	bne.w	bb4 <context_boot_go+0x88>
        rc = swap_set_copy_done(BOOT_CURR_IMG(state));
     cdc:	2000      	movs	r0, #0
     cde:	f005 fe13 	bl	6908 <swap_set_copy_done>
            if (rc != 0) {
     ce2:	4605      	mov	r5, r0
     ce4:	b110      	cbz	r0, cec <FIH_LABEL_FIH_CALL_END_2027+0x52>
     ce6:	e765      	b.n	bb4 <context_boot_go+0x88>
    if (BOOT_IS_UPGRADE(swap_type)) {
     ce8:	2b02      	cmp	r3, #2
     cea:	d0f7      	beq.n	cdc <FIH_LABEL_FIH_CALL_END_2027+0x42>
        }

        if (BOOT_SWAP_TYPE(state) == BOOT_SWAP_TYPE_PANIC) {
     cec:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
     cf0:	2bff      	cmp	r3, #255	; 0xff
     cf2:	d104      	bne.n	cfe <FIH_LABEL_FIH_CALL_END_2027+0x64>
            BOOT_LOG_ERR("panic!");
     cf4:	4823      	ldr	r0, [pc, #140]	; (d84 <FIH_LABEL_FIH_CALL_END_2278+0x56>)
     cf6:	2145      	movs	r1, #69	; 0x45
     cf8:	f005 ff8c 	bl	6c14 <z_log_minimal_printk>
            assert(0);

            /* Loop forever... */
            FIH_PANIC;
     cfc:	e7fe      	b.n	cfc <FIH_LABEL_FIH_CALL_END_2027+0x62>
#if BOOT_IMAGE_NUMBER > 1
        if (state->img_mask[BOOT_CURR_IMG(state)]) {
            continue;
        }
#endif
        if (BOOT_SWAP_TYPE(state) != BOOT_SWAP_TYPE_NONE) {
     cfe:	2b01      	cmp	r3, #1
     d00:	d010      	beq.n	d24 <FIH_LABEL_FIH_CALL_START_2263>
            /* Attempt to read an image header from each slot. Ensure that image
             * headers in slots are aligned with headers in boot_data.
             */
            rc = boot_read_image_headers(state, false, &bs);
     d02:	466a      	mov	r2, sp
     d04:	2100      	movs	r1, #0
     d06:	4620      	mov	r0, r4
     d08:	f005 fcab 	bl	6662 <boot_read_image_headers>
            if (rc != 0) {
     d0c:	4605      	mov	r5, r0
     d0e:	b148      	cbz	r0, d24 <FIH_LABEL_FIH_CALL_START_2263>
            flash_area_close(BOOT_IMG_AREA(state, BOOT_NUM_SLOTS - 1 - slot));
     d10:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
     d12:	f005 ff8c 	bl	6c2e <flash_area_close>
     d16:	6a20      	ldr	r0, [r4, #32]
     d18:	f005 ff89 	bl	6c2e <flash_area_close>
    if (rc) {
        fih_rc = fih_int_encode(rc);
    }

    FIH_RET(fih_rc);
}
     d1c:	4628      	mov	r0, r5
     d1e:	b004      	add	sp, #16
     d20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00000d24 <FIH_LABEL_FIH_CALL_START_2263>:
            FIH_CALL(boot_validate_slot, fih_rc, state, BOOT_PRIMARY_SLOT, NULL);
     d24:	2100      	movs	r1, #0
     d26:	4620      	mov	r0, r4
     d28:	f7ff fe04 	bl	934 <boot_validate_slot.isra.0>
     d2c:	4607      	mov	r7, r0

00000d2e <FIH_LABEL_FIH_CALL_END_2278>:
            if (fih_not_eq(fih_rc, FIH_SUCCESS)) {
     d2e:	f8df 8058 	ldr.w	r8, [pc, #88]	; d88 <FIH_LABEL_FIH_CALL_END_2278+0x5a>
     d32:	f8d8 3000 	ldr.w	r3, [r8]
     d36:	4298      	cmp	r0, r3
     d38:	d10f      	bne.n	d5a <FIH_LABEL_FIH_CALL_END_2278+0x2c>
    memset(&bs, 0, sizeof(struct boot_status));
     d3a:	2210      	movs	r2, #16
     d3c:	2100      	movs	r1, #0
     d3e:	4668      	mov	r0, sp
     d40:	f006 f81f 	bl	6d82 <memset>
    rsp->br_flash_dev_id = flash_area_get_device_id(BOOT_IMG_AREA(state, active_slot));
     d44:	6a20      	ldr	r0, [r4, #32]
     d46:	f005 fbba 	bl	64be <flash_area_get_device_id>
     d4a:	7130      	strb	r0, [r6, #4]
	return (uint32_t)fa->fa_off;
     d4c:	6a23      	ldr	r3, [r4, #32]
    rsp->br_image_off = boot_img_slot_off(state, active_slot);
     d4e:	685b      	ldr	r3, [r3, #4]
    rsp->br_hdr = boot_img_hdr(state, active_slot);
     d50:	6034      	str	r4, [r6, #0]
    fih_rc = FIH_SUCCESS;
     d52:	f8d8 5000 	ldr.w	r5, [r8]
    rsp->br_image_off = boot_img_slot_off(state, active_slot);
     d56:	60b3      	str	r3, [r6, #8]
    fih_rc = FIH_SUCCESS;
     d58:	e7da      	b.n	d10 <FIH_LABEL_FIH_CALL_END_2027+0x76>
            flash_area_close(BOOT_IMG_AREA(state, BOOT_NUM_SLOTS - 1 - slot));
     d5a:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
     d5c:	f005 ff67 	bl	6c2e <flash_area_close>
     d60:	6a20      	ldr	r0, [r4, #32]
     d62:	f005 ff64 	bl	6c2e <flash_area_close>
    if (rc) {
     d66:	2d00      	cmp	r5, #0
     d68:	bf08      	it	eq
     d6a:	463d      	moveq	r5, r7
     d6c:	e7d6      	b.n	d1c <FIH_LABEL_FIH_CALL_END_2027+0x82>
     d6e:	bf00      	nop
     d70:	20000764 	.word	0x20000764
     d74:	20000364 	.word	0x20000364
     d78:	00009ce6 	.word	0x00009ce6
     d7c:	00009ca4 	.word	0x00009ca4
     d80:	00009d12 	.word	0x00009d12
     d84:	00009d3c 	.word	0x00009d3c
     d88:	20000360 	.word	0x20000360

00000d8c <boot_go>:
 *
 * @return                      FIH_SUCCESS on success; nonzero on failure.
 */
fih_int
boot_go(struct boot_rsp *rsp)
{
     d8c:	b538      	push	{r3, r4, r5, lr}
void boot_state_clear(struct boot_loader_state *state)
{
    if (state != NULL) {
        memset(state, 0, sizeof(struct boot_loader_state));
    } else {
        memset(&boot_data, 0, sizeof(struct boot_loader_state));
     d8e:	4d06      	ldr	r5, [pc, #24]	; (da8 <FIH_LABEL_FIH_CALL_END_2901+0x4>)
{
     d90:	4604      	mov	r4, r0
        memset(&boot_data, 0, sizeof(struct boot_loader_state));
     d92:	2260      	movs	r2, #96	; 0x60
     d94:	2100      	movs	r1, #0
     d96:	4628      	mov	r0, r5
     d98:	f005 fff3 	bl	6d82 <memset>

00000d9c <FIH_LABEL_FIH_CALL_START_2887>:
    FIH_CALL(context_boot_go, fih_rc, &boot_data, rsp);
     d9c:	4621      	mov	r1, r4
     d9e:	4628      	mov	r0, r5
     da0:	f7ff fec4 	bl	b2c <context_boot_go>

00000da4 <FIH_LABEL_FIH_CALL_END_2901>:
}
     da4:	bd38      	pop	{r3, r4, r5, pc}
     da6:	bf00      	nop
     da8:	20000f64 	.word	0x20000f64

00000dac <boot_read_image_header>:
static uint32_t g_last_idx = UINT32_MAX;

int
boot_read_image_header(struct boot_loader_state *state, int slot,
                       struct image_header *out_hdr, struct boot_status *bs)
{
     dac:	b573      	push	{r0, r1, r4, r5, r6, lr}
     dae:	4616      	mov	r6, r2
#if (BOOT_IMAGE_NUMBER == 1)
    (void)state;
#endif

    off = 0;
    if (bs) {
     db0:	461d      	mov	r5, r3
     db2:	b143      	cbz	r3, dc6 <boot_read_image_header+0x1a>
        sz = boot_img_sector_size(state, BOOT_PRIMARY_SLOT, 0);
        if (bs->op == BOOT_STATUS_OP_MOVE) {
     db4:	795b      	ldrb	r3, [r3, #5]
     db6:	2b01      	cmp	r3, #1
     db8:	d107      	bne.n	dca <boot_read_image_header+0x1e>
            if (slot == 0 && bs->idx > g_last_idx) {
     dba:	b921      	cbnz	r1, dc6 <boot_read_image_header+0x1a>
     dbc:	4b20      	ldr	r3, [pc, #128]	; (e40 <boot_read_image_header+0x94>)
     dbe:	682a      	ldr	r2, [r5, #0]
     dc0:	681b      	ldr	r3, [r3, #0]
     dc2:	429a      	cmp	r2, r3
     dc4:	d817      	bhi.n	df6 <boot_read_image_header+0x4a>
    off = 0;
     dc6:	2400      	movs	r4, #0
     dc8:	e018      	b.n	dfc <boot_read_image_header+0x50>
                /* second sector */
                off = sz;
            }
        } else if (bs->op == BOOT_STATUS_OP_SWAP) {
     dca:	2b02      	cmp	r3, #2
     dcc:	d1fb      	bne.n	dc6 <boot_read_image_header+0x1a>
            if (bs->idx > 1 && bs->idx <= g_last_idx) {
     dce:	682b      	ldr	r3, [r5, #0]
     dd0:	2b01      	cmp	r3, #1
     dd2:	d907      	bls.n	de4 <boot_read_image_header+0x38>
     dd4:	4a1a      	ldr	r2, [pc, #104]	; (e40 <boot_read_image_header+0x94>)
     dd6:	6812      	ldr	r2, [r2, #0]
     dd8:	4293      	cmp	r3, r2
     dda:	d8f4      	bhi.n	dc6 <boot_read_image_header+0x1a>
                if (slot == 0) {
     ddc:	fab1 f181 	clz	r1, r1
     de0:	0949      	lsrs	r1, r1, #5
     de2:	e7f0      	b.n	dc6 <boot_read_image_header+0x1a>
                    slot = 1;
                } else {
                    slot = 0;
                }
            } else if (bs->idx == 1) {
     de4:	d1ef      	bne.n	dc6 <boot_read_image_header+0x1a>
                if (slot == 0) {
     de6:	b131      	cbz	r1, df6 <boot_read_image_header+0x4a>
                    off = sz;
                }
                if (slot == 1 && bs->state == 2) {
     de8:	2901      	cmp	r1, #1
     dea:	d1ec      	bne.n	dc6 <boot_read_image_header+0x1a>
     dec:	7929      	ldrb	r1, [r5, #4]
     dee:	3902      	subs	r1, #2
     df0:	bf18      	it	ne
     df2:	2101      	movne	r1, #1
     df4:	e7e7      	b.n	dc6 <boot_read_image_header+0x1a>
}

static inline uint32_t flash_sector_get_size(const struct flash_sector *fs)
{
	return fs->fs_size;
     df6:	6a43      	ldr	r3, [r0, #36]	; 0x24
     df8:	685c      	ldr	r4, [r3, #4]
     dfa:	2100      	movs	r1, #0
                }
            }
        }
    }

    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
     dfc:	2000      	movs	r0, #0
     dfe:	f005 fb55 	bl	64ac <flash_area_id_from_multi_image_slot>
    rc = flash_area_open(area_id, &fap);
     e02:	a901      	add	r1, sp, #4
     e04:	b2c0      	uxtb	r0, r0
     e06:	f000 fded 	bl	19e4 <flash_area_open>
    if (rc != 0) {
     e0a:	b130      	cbz	r0, e1a <boot_read_image_header+0x6e>
        rc = BOOT_EFLASH;
     e0c:	2401      	movs	r4, #1
    }

    rc = 0;

done:
    flash_area_close(fap);
     e0e:	9801      	ldr	r0, [sp, #4]
     e10:	f005 ff0d 	bl	6c2e <flash_area_close>
    return rc;
}
     e14:	4620      	mov	r0, r4
     e16:	b002      	add	sp, #8
     e18:	bd70      	pop	{r4, r5, r6, pc}
    rc = flash_area_read(fap, off, out_hdr, sizeof *out_hdr);
     e1a:	4621      	mov	r1, r4
     e1c:	9801      	ldr	r0, [sp, #4]
     e1e:	2320      	movs	r3, #32
     e20:	4632      	mov	r2, r6
     e22:	f005 ff05 	bl	6c30 <flash_area_read>
    if (rc != 0) {
     e26:	4604      	mov	r4, r0
     e28:	2800      	cmp	r0, #0
     e2a:	d1ef      	bne.n	e0c <boot_read_image_header+0x60>
    if (bs != NULL && out_hdr->ih_magic != IMAGE_MAGIC) {
     e2c:	2d00      	cmp	r5, #0
     e2e:	d0ee      	beq.n	e0e <boot_read_image_header+0x62>
     e30:	6834      	ldr	r4, [r6, #0]
     e32:	4b04      	ldr	r3, [pc, #16]	; (e44 <boot_read_image_header+0x98>)
     e34:	1ae4      	subs	r4, r4, r3
     e36:	bf18      	it	ne
     e38:	f04f 34ff 	movne.w	r4, #4294967295	; 0xffffffff
     e3c:	e7e7      	b.n	e0e <boot_read_image_header+0x62>
     e3e:	bf00      	nop
     e40:	20000004 	.word	0x20000004
     e44:	96f3b83d 	.word	0x96f3b83d

00000e48 <swap_read_status_bytes>:

int
swap_read_status_bytes(const struct flash_area *fap,
        struct boot_loader_state *state, struct boot_status *bs)
{
     e48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     e4c:	4607      	mov	r7, r0
     e4e:	b085      	sub	sp, #20
     e50:	460c      	mov	r4, r1
    int rc;
    int last_rc;
    int erased_sections;
    int i;

    max_entries = boot_status_entries(BOOT_CURR_IMG(state), fap);
     e52:	4601      	mov	r1, r0
     e54:	2000      	movs	r0, #0
{
     e56:	4616      	mov	r6, r2
    max_entries = boot_status_entries(BOOT_CURR_IMG(state), fap);
     e58:	f005 fbd4 	bl	6604 <boot_status_entries>
    if (max_entries < 0) {
     e5c:	1e05      	subs	r5, r0, #0
     e5e:	db50      	blt.n	f02 <swap_read_status_bytes+0xba>
    erased_sections = 0;
    found_idx = -1;
    /* skip erased sectors at the end */
    last_rc = 1;
    write_sz = BOOT_WRITE_SZ(state);
    off = boot_status_off(fap);
     e60:	4638      	mov	r0, r7
    write_sz = BOOT_WRITE_SZ(state);
     e62:	6de4      	ldr	r4, [r4, #92]	; 0x5c
    off = boot_status_off(fap);
     e64:	f005 fbdb 	bl	661e <boot_status_off>
    for (i = max_entries; i > 0; i--) {
     e68:	fa5f f984 	uxtb.w	r9, r4
     e6c:	1e6b      	subs	r3, r5, #1
     e6e:	fb09 0803 	mla	r8, r9, r3, r0
    erased_sections = 0;
     e72:	f04f 0a00 	mov.w	sl, #0
    last_rc = 1;
     e76:	f04f 0b01 	mov.w	fp, #1
    found_idx = -1;
     e7a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    for (i = max_entries; i > 0; i--) {
     e7e:	b99d      	cbnz	r5, ea8 <swap_read_status_bytes+0x60>
            }
        }
        last_rc = rc;
    }

    if (erased_sections > 1) {
     e80:	f1ba 0f01 	cmp.w	sl, #1
     e84:	dd03      	ble.n	e8e <swap_read_status_bytes+0x46>
        /* This means there was an error writing status on the last
         * swap. Tell user and move on to validation!
         */
#if !defined(__BOOTSIM__)
        BOOT_LOG_ERR("Detected inconsistent status!");
     e86:	4821      	ldr	r0, [pc, #132]	; (f0c <swap_read_status_bytes+0xc4>)
     e88:	2145      	movs	r1, #69	; 0x45
     e8a:	f005 fec3 	bl	6c14 <z_log_minimal_printk>
        assert(0);
#endif
    }

    move_entries = BOOT_MAX_IMG_SECTORS * BOOT_STATUS_MOVE_STATE_COUNT;
    if (found_idx == -1) {
     e8e:	1c63      	adds	r3, r4, #1
     e90:	d006      	beq.n	ea0 <swap_read_status_bytes+0x58>
        /* no swap status found; nothing to do */
    } else if (found_idx < move_entries) {
     e92:	2c7f      	cmp	r4, #127	; 0x7f
     e94:	dc2a      	bgt.n	eec <swap_read_status_bytes+0xa4>
        bs->op = BOOT_STATUS_OP_MOVE;
        bs->idx = (found_idx  / BOOT_STATUS_MOVE_STATE_COUNT) + BOOT_STATUS_IDX_0;
     e96:	3401      	adds	r4, #1
        bs->state = (found_idx % BOOT_STATUS_MOVE_STATE_COUNT) + BOOT_STATUS_STATE_0;;
     e98:	f240 1301 	movw	r3, #257	; 0x101
        bs->idx = (found_idx  / BOOT_STATUS_MOVE_STATE_COUNT) + BOOT_STATUS_IDX_0;
     e9c:	6034      	str	r4, [r6, #0]
        bs->state = (found_idx % BOOT_STATUS_MOVE_STATE_COUNT) + BOOT_STATUS_STATE_0;;
     e9e:	80b3      	strh	r3, [r6, #4]
        bs->idx = ((found_idx - move_entries) / BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_IDX_0;
        bs->state = ((found_idx - move_entries) % BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_STATE_0;
    }

    return 0;
}
     ea0:	4628      	mov	r0, r5
     ea2:	b005      	add	sp, #20
     ea4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        rc = flash_area_read(fap, off + (i - 1) * write_sz, &status, 1);
     ea8:	1e6b      	subs	r3, r5, #1
     eaa:	9300      	str	r3, [sp, #0]
     eac:	f10d 020f 	add.w	r2, sp, #15
     eb0:	2301      	movs	r3, #1
     eb2:	4641      	mov	r1, r8
     eb4:	4638      	mov	r0, r7
     eb6:	f005 febb 	bl	6c30 <flash_area_read>
        if (rc < 0) {
     eba:	1e03      	subs	r3, r0, #0
     ebc:	9301      	str	r3, [sp, #4]
     ebe:	db22      	blt.n	f06 <swap_read_status_bytes+0xbe>
        if (bootutil_buffer_is_erased(fap, &status, 1)) {
     ec0:	2201      	movs	r2, #1
     ec2:	f10d 010f 	add.w	r1, sp, #15
     ec6:	4638      	mov	r0, r7
     ec8:	f006 fc4e 	bl	7768 <bootutil_buffer_is_erased>
     ecc:	9b01      	ldr	r3, [sp, #4]
     ece:	b140      	cbz	r0, ee2 <swap_read_status_bytes+0x9a>
            if (rc != last_rc) {
     ed0:	455b      	cmp	r3, fp
     ed2:	d001      	beq.n	ed8 <swap_read_status_bytes+0x90>
                erased_sections++;
     ed4:	f10a 0a01 	add.w	sl, sl, #1
            if (found_idx == -1) {
     ed8:	9d00      	ldr	r5, [sp, #0]
     eda:	eba8 0809 	sub.w	r8, r8, r9
     ede:	469b      	mov	fp, r3
     ee0:	e7cd      	b.n	e7e <swap_read_status_bytes+0x36>
     ee2:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
     ee6:	bf08      	it	eq
     ee8:	462c      	moveq	r4, r5
     eea:	e7f5      	b.n	ed8 <swap_read_status_bytes+0x90>
        bs->op = BOOT_STATUS_OP_SWAP;
     eec:	2302      	movs	r3, #2
        bs->idx = ((found_idx - move_entries) / BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_IDX_0;
     eee:	3c80      	subs	r4, #128	; 0x80
        bs->op = BOOT_STATUS_OP_SWAP;
     ef0:	7173      	strb	r3, [r6, #5]
        bs->idx = ((found_idx - move_entries) / BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_IDX_0;
     ef2:	1063      	asrs	r3, r4, #1
        bs->state = ((found_idx - move_entries) % BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_STATE_0;
     ef4:	f004 0401 	and.w	r4, r4, #1
        bs->idx = ((found_idx - move_entries) / BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_IDX_0;
     ef8:	3301      	adds	r3, #1
        bs->state = ((found_idx - move_entries) % BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_STATE_0;
     efa:	3401      	adds	r4, #1
        bs->idx = ((found_idx - move_entries) / BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_IDX_0;
     efc:	6033      	str	r3, [r6, #0]
        bs->state = ((found_idx - move_entries) % BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_STATE_0;
     efe:	7134      	strb	r4, [r6, #4]
     f00:	e7ce      	b.n	ea0 <swap_read_status_bytes+0x58>
        return BOOT_EBADARGS;
     f02:	2507      	movs	r5, #7
     f04:	e7cc      	b.n	ea0 <swap_read_status_bytes+0x58>
            return BOOT_EFLASH;
     f06:	2501      	movs	r5, #1
     f08:	e7ca      	b.n	ea0 <swap_read_status_bytes+0x58>
     f0a:	bf00      	nop
     f0c:	00009d48 	.word	0x00009d48

00000f10 <boot_slots_compatible>:
    return off;
}

int
boot_slots_compatible(struct boot_loader_state *state)
{
     f10:	b538      	push	{r3, r4, r5, lr}
}

static inline size_t
boot_img_num_sectors(const struct boot_loader_state *state, size_t slot)
{
    return BOOT_IMG(state, slot).num_sectors;
     f12:	6a81      	ldr	r1, [r0, #40]	; 0x28
     f14:	6d42      	ldr	r2, [r0, #84]	; 0x54
    size_t sector_sz_sec = 0;
    size_t i;

    num_sectors_pri = boot_img_num_sectors(state, BOOT_PRIMARY_SLOT);
    num_sectors_sec = boot_img_num_sectors(state, BOOT_SECONDARY_SLOT);
    if ((num_sectors_pri != num_sectors_sec) &&
     f16:	4291      	cmp	r1, r2
     f18:	d008      	beq.n	f2c <boot_slots_compatible+0x1c>
            (num_sectors_pri != (num_sectors_sec + 1))) {
     f1a:	1c53      	adds	r3, r2, #1
    if ((num_sectors_pri != num_sectors_sec) &&
     f1c:	428b      	cmp	r3, r1
     f1e:	d005      	beq.n	f2c <boot_slots_compatible+0x1c>
        BOOT_LOG_WRN("Cannot upgrade: not a compatible amount of sectors");
     f20:	4813      	ldr	r0, [pc, #76]	; (f70 <boot_slots_compatible+0x60>)
     f22:	2157      	movs	r1, #87	; 0x57
        return 0;
    }

    if (num_sectors_pri > BOOT_MAX_IMG_SECTORS) {
        BOOT_LOG_WRN("Cannot upgrade: more sectors than allowed");
     f24:	f005 fe76 	bl	6c14 <z_log_minimal_printk>
        return 0;
     f28:	2000      	movs	r0, #0
        }
    }

    return 1;
#endif /* PM_S1_ADDRESS */
}
     f2a:	bd38      	pop	{r3, r4, r5, pc}
    if (num_sectors_pri > BOOT_MAX_IMG_SECTORS) {
     f2c:	2980      	cmp	r1, #128	; 0x80
     f2e:	d91c      	bls.n	f6a <boot_slots_compatible+0x5a>
        BOOT_LOG_WRN("Cannot upgrade: more sectors than allowed");
     f30:	4810      	ldr	r0, [pc, #64]	; (f74 <boot_slots_compatible+0x64>)
     f32:	2157      	movs	r1, #87	; 0x57
     f34:	e7f6      	b.n	f24 <boot_slots_compatible+0x14>
     f36:	6a44      	ldr	r4, [r0, #36]	; 0x24
     f38:	6d05      	ldr	r5, [r0, #80]	; 0x50
     f3a:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
     f3e:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
     f42:	6864      	ldr	r4, [r4, #4]
        if (sector_sz_pri != sector_sz_sec) {
     f44:	686d      	ldr	r5, [r5, #4]
     f46:	42ac      	cmp	r4, r5
     f48:	d002      	beq.n	f50 <boot_slots_compatible+0x40>
            BOOT_LOG_WRN("Cannot upgrade: not same sector layout");
     f4a:	480b      	ldr	r0, [pc, #44]	; (f78 <boot_slots_compatible+0x68>)
     f4c:	2157      	movs	r1, #87	; 0x57
     f4e:	e7e9      	b.n	f24 <boot_slots_compatible+0x14>
    for (i = 0; i < num_sectors_sec; i++) {
     f50:	3301      	adds	r3, #1
     f52:	429a      	cmp	r2, r3
     f54:	d1ef      	bne.n	f36 <boot_slots_compatible+0x26>
    if (num_sectors_pri > num_sectors_sec) {
     f56:	4291      	cmp	r1, r2
     f58:	d905      	bls.n	f66 <boot_slots_compatible+0x56>
     f5a:	6a43      	ldr	r3, [r0, #36]	; 0x24
     f5c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
        if (sector_sz_pri != boot_img_sector_size(state, BOOT_PRIMARY_SLOT, i)) {
     f60:	685b      	ldr	r3, [r3, #4]
     f62:	42a3      	cmp	r3, r4
     f64:	d1f1      	bne.n	f4a <boot_slots_compatible+0x3a>
    return 1;
     f66:	2001      	movs	r0, #1
     f68:	e7df      	b.n	f2a <boot_slots_compatible+0x1a>
    for (i = 0; i < num_sectors_sec; i++) {
     f6a:	2300      	movs	r3, #0
    size_t sector_sz_pri = 0;
     f6c:	461c      	mov	r4, r3
     f6e:	e7f0      	b.n	f52 <boot_slots_compatible+0x42>
     f70:	00009d6b 	.word	0x00009d6b
     f74:	00009da3 	.word	0x00009da3
     f78:	00009dd2 	.word	0x00009dd2

00000f7c <swap_status_source>:
                 (state)->copy_done,                                \
                 (state)->image_ok)

int
swap_status_source(struct boot_loader_state *state)
{
     f7c:	b500      	push	{lr}
     f7e:	b089      	sub	sp, #36	; 0x24
    (void)state;
#endif

    image_index = BOOT_CURR_IMG(state);

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_PRIMARY(image_index),
     f80:	a904      	add	r1, sp, #16
     f82:	2002      	movs	r0, #2
     f84:	f006 fc62 	bl	784c <boot_read_swap_state_by_id>
            &state_primary_slot);
    assert(rc == 0);

    BOOT_LOG_SWAP_STATE("Primary image", &state_primary_slot);
     f88:	f89d 2010 	ldrb.w	r2, [sp, #16]
     f8c:	2a01      	cmp	r2, #1
     f8e:	d041      	beq.n	1014 <CONFIG_FPROTECT_BLOCK_SIZE+0x14>
     f90:	4b25      	ldr	r3, [pc, #148]	; (1028 <CONFIG_FPROTECT_BLOCK_SIZE+0x28>)
     f92:	4926      	ldr	r1, [pc, #152]	; (102c <CONFIG_FPROTECT_BLOCK_SIZE+0x2c>)
     f94:	2a03      	cmp	r2, #3
     f96:	bf08      	it	eq
     f98:	460b      	moveq	r3, r1
     f9a:	f89d 2013 	ldrb.w	r2, [sp, #19]
     f9e:	9202      	str	r2, [sp, #8]
     fa0:	f89d 2012 	ldrb.w	r2, [sp, #18]
     fa4:	9201      	str	r2, [sp, #4]
     fa6:	f89d 2011 	ldrb.w	r2, [sp, #17]
     faa:	4821      	ldr	r0, [pc, #132]	; (1030 <CONFIG_FPROTECT_BLOCK_SIZE+0x30>)
     fac:	9200      	str	r2, [sp, #0]
     fae:	2149      	movs	r1, #73	; 0x49
     fb0:	4a20      	ldr	r2, [pc, #128]	; (1034 <CONFIG_FPROTECT_BLOCK_SIZE+0x34>)
     fb2:	f005 fe2f 	bl	6c14 <z_log_minimal_printk>

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SECONDARY(image_index),
     fb6:	a906      	add	r1, sp, #24
     fb8:	2005      	movs	r0, #5
     fba:	f006 fc47 	bl	784c <boot_read_swap_state_by_id>
            &state_secondary_slot);
    assert(rc == 0);

    BOOT_LOG_SWAP_STATE("Secondary image", &state_secondary_slot);
     fbe:	f89d 2018 	ldrb.w	r2, [sp, #24]
     fc2:	2a01      	cmp	r2, #1
     fc4:	d028      	beq.n	1018 <CONFIG_FPROTECT_BLOCK_SIZE+0x18>
     fc6:	4b18      	ldr	r3, [pc, #96]	; (1028 <CONFIG_FPROTECT_BLOCK_SIZE+0x28>)
     fc8:	4918      	ldr	r1, [pc, #96]	; (102c <CONFIG_FPROTECT_BLOCK_SIZE+0x2c>)
     fca:	2a03      	cmp	r2, #3
     fcc:	bf08      	it	eq
     fce:	460b      	moveq	r3, r1
     fd0:	f89d 201b 	ldrb.w	r2, [sp, #27]
     fd4:	9202      	str	r2, [sp, #8]
     fd6:	f89d 201a 	ldrb.w	r2, [sp, #26]
     fda:	9201      	str	r2, [sp, #4]
     fdc:	f89d 2019 	ldrb.w	r2, [sp, #25]
     fe0:	9200      	str	r2, [sp, #0]
     fe2:	4813      	ldr	r0, [pc, #76]	; (1030 <CONFIG_FPROTECT_BLOCK_SIZE+0x30>)
     fe4:	4a14      	ldr	r2, [pc, #80]	; (1038 <CONFIG_FPROTECT_BLOCK_SIZE+0x38>)
     fe6:	2149      	movs	r1, #73	; 0x49
     fe8:	f005 fe14 	bl	6c14 <z_log_minimal_printk>

    if (state_primary_slot.magic == BOOT_MAGIC_GOOD &&
     fec:	f89d 3010 	ldrb.w	r3, [sp, #16]
     ff0:	2b01      	cmp	r3, #1
     ff2:	d113      	bne.n	101c <CONFIG_FPROTECT_BLOCK_SIZE+0x1c>
     ff4:	f89d 3012 	ldrb.w	r3, [sp, #18]
     ff8:	2b03      	cmp	r3, #3
     ffa:	d10f      	bne.n	101c <CONFIG_FPROTECT_BLOCK_SIZE+0x1c>
            state_primary_slot.copy_done == BOOT_FLAG_UNSET &&
     ffc:	f89d 3018 	ldrb.w	r3, [sp, #24]
    1000:	2b01      	cmp	r3, #1
    1002:	d00b      	beq.n	101c <CONFIG_FPROTECT_BLOCK_SIZE+0x1c>
            state_secondary_slot.magic != BOOT_MAGIC_GOOD) {

        source = BOOT_STATUS_SOURCE_PRIMARY_SLOT;

        BOOT_LOG_INF("Boot source: primary slot");
    1004:	480d      	ldr	r0, [pc, #52]	; (103c <CONFIG_FPROTECT_BLOCK_SIZE+0x3c>)
    1006:	2149      	movs	r1, #73	; 0x49
    1008:	f005 fe04 	bl	6c14 <z_log_minimal_printk>
        return source;
    100c:	2002      	movs	r0, #2
    }

    BOOT_LOG_INF("Boot source: none");
    return BOOT_STATUS_SOURCE_NONE;
}
    100e:	b009      	add	sp, #36	; 0x24
    1010:	f85d fb04 	ldr.w	pc, [sp], #4
    BOOT_LOG_SWAP_STATE("Primary image", &state_primary_slot);
    1014:	4b0a      	ldr	r3, [pc, #40]	; (1040 <CONFIG_FPROTECT_BLOCK_SIZE+0x40>)
    1016:	e7c0      	b.n	f9a <swap_status_source+0x1e>
    BOOT_LOG_SWAP_STATE("Secondary image", &state_secondary_slot);
    1018:	4b09      	ldr	r3, [pc, #36]	; (1040 <CONFIG_FPROTECT_BLOCK_SIZE+0x40>)
    101a:	e7d9      	b.n	fd0 <swap_status_source+0x54>
    BOOT_LOG_INF("Boot source: none");
    101c:	4809      	ldr	r0, [pc, #36]	; (1044 <CONFIG_FPROTECT_BLOCK_SIZE+0x44>)
    101e:	2149      	movs	r1, #73	; 0x49
    1020:	f005 fdf8 	bl	6c14 <z_log_minimal_printk>
    return BOOT_STATUS_SOURCE_NONE;
    1024:	2000      	movs	r0, #0
    1026:	e7f2      	b.n	100e <CONFIG_FPROTECT_BLOCK_SIZE+0xe>
    1028:	00009dfe 	.word	0x00009dfe
    102c:	00009e07 	.word	0x00009e07
    1030:	00009e1b 	.word	0x00009e1b
    1034:	00009e0d 	.word	0x00009e0d
    1038:	00009e5c 	.word	0x00009e5c
    103c:	00009e6c 	.word	0x00009e6c
    1040:	00009e02 	.word	0x00009e02
    1044:	00009e8b 	.word	0x00009e8b

00001048 <fixup_revert>:
 * upgrade (by initializing the secondary slot).
 */
void
fixup_revert(const struct boot_loader_state *state, struct boot_status *bs,
        const struct flash_area *fap_sec)
{
    1048:	b570      	push	{r4, r5, r6, lr}
#if (BOOT_IMAGE_NUMBER == 1)
    (void)state;
#endif

    /* No fixup required */
    if (bs->swap_type != BOOT_SWAP_TYPE_REVERT ||
    104a:	684b      	ldr	r3, [r1, #4]
{
    104c:	4614      	mov	r4, r2
    if (bs->swap_type != BOOT_SWAP_TYPE_REVERT ||
    104e:	4a1e      	ldr	r2, [pc, #120]	; (10c8 <fixup_revert+0x80>)
    1050:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
    1054:	4293      	cmp	r3, r2
{
    1056:	b086      	sub	sp, #24
    1058:	4606      	mov	r6, r0
    105a:	460d      	mov	r5, r1
    if (bs->swap_type != BOOT_SWAP_TYPE_REVERT ||
    105c:	d12f      	bne.n	10be <fixup_revert+0x76>
        bs->op != BOOT_STATUS_OP_MOVE ||
    105e:	680b      	ldr	r3, [r1, #0]
    1060:	2b01      	cmp	r3, #1
    1062:	d12c      	bne.n	10be <fixup_revert+0x76>
        bs->idx != BOOT_STATUS_IDX_0) {
        return;
    }

    rc = boot_read_swap_state(fap_sec, &swap_state);
    1064:	a904      	add	r1, sp, #16
    1066:	4620      	mov	r0, r4
    1068:	f002 fc4e 	bl	3908 <boot_read_swap_state>
    assert(rc == 0);

    BOOT_LOG_SWAP_STATE("Secondary image", &swap_state);
    106c:	f89d 2010 	ldrb.w	r2, [sp, #16]
    1070:	2a01      	cmp	r2, #1
    1072:	d026      	beq.n	10c2 <fixup_revert+0x7a>
    1074:	4b15      	ldr	r3, [pc, #84]	; (10cc <fixup_revert+0x84>)
    1076:	4916      	ldr	r1, [pc, #88]	; (10d0 <fixup_revert+0x88>)
    1078:	2a03      	cmp	r2, #3
    107a:	bf08      	it	eq
    107c:	460b      	moveq	r3, r1
    107e:	f89d 2013 	ldrb.w	r2, [sp, #19]
    1082:	9202      	str	r2, [sp, #8]
    1084:	f89d 2012 	ldrb.w	r2, [sp, #18]
    1088:	9201      	str	r2, [sp, #4]
    108a:	f89d 2011 	ldrb.w	r2, [sp, #17]
    108e:	9200      	str	r2, [sp, #0]
    1090:	4810      	ldr	r0, [pc, #64]	; (10d4 <fixup_revert+0x8c>)
    1092:	4a11      	ldr	r2, [pc, #68]	; (10d8 <fixup_revert+0x90>)
    1094:	2149      	movs	r1, #73	; 0x49
    1096:	f005 fdbd 	bl	6c14 <z_log_minimal_printk>

    if (swap_state.magic == BOOT_MAGIC_UNSET) {
    109a:	f89d 3010 	ldrb.w	r3, [sp, #16]
    109e:	2b03      	cmp	r3, #3
    10a0:	d10d      	bne.n	10be <fixup_revert+0x76>
        rc = swap_erase_trailer_sectors(state, fap_sec);
    10a2:	4621      	mov	r1, r4
    10a4:	4630      	mov	r0, r6
    10a6:	f005 fb9e 	bl	67e6 <swap_erase_trailer_sectors>
        assert(rc == 0);

        rc = boot_write_image_ok(fap_sec);
    10aa:	4620      	mov	r0, r4
    10ac:	f006 fbc1 	bl	7832 <boot_write_image_ok>
        assert(rc == 0);

        rc = boot_write_swap_size(fap_sec, bs->swap_size);
    10b0:	68a9      	ldr	r1, [r5, #8]
    10b2:	4620      	mov	r0, r4
    10b4:	f005 fac6 	bl	6644 <boot_write_swap_size>
        assert(rc == 0);

        rc = boot_write_magic(fap_sec);
    10b8:	4620      	mov	r0, r4
    10ba:	f002 fc05 	bl	38c8 <boot_write_magic>
        assert(rc == 0);
    }
}
    10be:	b006      	add	sp, #24
    10c0:	bd70      	pop	{r4, r5, r6, pc}
    BOOT_LOG_SWAP_STATE("Secondary image", &swap_state);
    10c2:	4b06      	ldr	r3, [pc, #24]	; (10dc <fixup_revert+0x94>)
    10c4:	e7db      	b.n	107e <fixup_revert+0x36>
    10c6:	bf00      	nop
    10c8:	04000100 	.word	0x04000100
    10cc:	00009dfe 	.word	0x00009dfe
    10d0:	00009e07 	.word	0x00009e07
    10d4:	00009e1b 	.word	0x00009e1b
    10d8:	00009e5c 	.word	0x00009e5c
    10dc:	00009e02 	.word	0x00009e02

000010e0 <swap_run>:

void
swap_run(struct boot_loader_state *state, struct boot_status *bs,
         uint32_t copy_size)
{
    10e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    10e4:	4605      	mov	r5, r0
    10e6:	b089      	sub	sp, #36	; 0x24
    uint8_t image_index;
    const struct flash_area *fap_pri;
    const struct flash_area *fap_sec;
    int rc;

    BOOT_LOG_INF("Starting swap using move algorithm.");
    10e8:	487d      	ldr	r0, [pc, #500]	; (12e0 <swap_run+0x200>)
{
    10ea:	460c      	mov	r4, r1
    BOOT_LOG_INF("Starting swap using move algorithm.");
    10ec:	2149      	movs	r1, #73	; 0x49
{
    10ee:	4617      	mov	r7, r2
    BOOT_LOG_INF("Starting swap using move algorithm.");
    10f0:	f005 fd90 	bl	6c14 <z_log_minimal_printk>
    10f4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    10f6:	2201      	movs	r2, #1
    10f8:	685e      	ldr	r6, [r3, #4]

    sz = 0;
    10fa:	2300      	movs	r3, #0
    g_last_idx = 0;

    sector_sz = boot_img_sector_size(state, BOOT_PRIMARY_SLOT, 0);
    while (1) {
        sz += sector_sz;
    10fc:	4433      	add	r3, r6
        /* Skip to next sector because all sectors will be moved up. */
        g_last_idx++;
        if (sz >= copy_size) {
    10fe:	42bb      	cmp	r3, r7
    1100:	4611      	mov	r1, r2
    1102:	f102 0201 	add.w	r2, r2, #1
    1106:	d3f9      	bcc.n	10fc <swap_run+0x1c>
    1108:	4f76      	ldr	r7, [pc, #472]	; (12e4 <swap_run+0x204>)
    }

    /*
     * When starting a new swap upgrade, check that there is enough space.
     */
    if (boot_status_is_reset(bs)) {
    110a:	4620      	mov	r0, r4
    110c:	6039      	str	r1, [r7, #0]
    110e:	f005 fb29 	bl	6764 <boot_status_is_reset>
    1112:	b308      	cbz	r0, 1158 <swap_run+0x78>
        sz = 0;
        trailer_sz = boot_trailer_sz(BOOT_WRITE_SZ(state));
    1114:	6de8      	ldr	r0, [r5, #92]	; 0x5c
    1116:	f005 fa70 	bl	65fa <boot_trailer_sz>
        first_trailer_idx = boot_img_num_sectors(state, BOOT_PRIMARY_SLOT) - 1;
    111a:	6aab      	ldr	r3, [r5, #40]	; 0x28
    111c:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
        sz = 0;
    1120:	2300      	movs	r3, #0

        while (1) {
            sz += sector_sz;
    1122:	4433      	add	r3, r6
            if  (sz >= trailer_sz) {
    1124:	4283      	cmp	r3, r0
    1126:	d202      	bcs.n	112e <swap_run+0x4e>
                break;
            }
            first_trailer_idx--;
    1128:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
            sz += sector_sz;
    112c:	e7f9      	b.n	1122 <swap_run+0x42>
        }

        if (g_last_idx >= first_trailer_idx) {
    112e:	683b      	ldr	r3, [r7, #0]
    1130:	4543      	cmp	r3, r8
    1132:	d311      	bcc.n	1158 <swap_run+0x78>
            BOOT_LOG_WRN("Not enough free space to run swap upgrade");
    1134:	486c      	ldr	r0, [pc, #432]	; (12e8 <swap_run+0x208>)
    1136:	2157      	movs	r1, #87	; 0x57
    1138:	f005 fd6c 	bl	6c14 <z_log_minimal_printk>
            BOOT_LOG_WRN("required %d bytes but only %d are available",
    113c:	683a      	ldr	r2, [r7, #0]
    113e:	486b      	ldr	r0, [pc, #428]	; (12ec <swap_run+0x20c>)
    1140:	fb08 f306 	mul.w	r3, r8, r6
    1144:	fb02 6206 	mla	r2, r2, r6, r6
    1148:	2157      	movs	r1, #87	; 0x57
    114a:	f005 fd63 	bl	6c14 <z_log_minimal_printk>
                         (g_last_idx + 1) * sector_sz ,
                         first_trailer_idx * sector_sz);
            bs->swap_type = BOOT_SWAP_TYPE_NONE;
    114e:	2301      	movs	r3, #1
    1150:	71e3      	strb	r3, [r4, #7]
        idx++;
    }

    flash_area_close(fap_pri);
    flash_area_close(fap_sec);
}
    1152:	b009      	add	sp, #36	; 0x24
    1154:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY(image_index), &fap_pri);
    1158:	a906      	add	r1, sp, #24
    115a:	2002      	movs	r0, #2
    115c:	f000 fc42 	bl	19e4 <flash_area_open>
    rc = flash_area_open(FLASH_AREA_IMAGE_SECONDARY(image_index), &fap_sec);
    1160:	a907      	add	r1, sp, #28
    1162:	2005      	movs	r0, #5
    1164:	f000 fc3e 	bl	19e4 <flash_area_open>
    fixup_revert(state, bs, fap_sec);
    1168:	9a07      	ldr	r2, [sp, #28]
    116a:	4621      	mov	r1, r4
    116c:	4628      	mov	r0, r5
    116e:	f7ff ff6b 	bl	1048 <fixup_revert>
    if (bs->op == BOOT_STATUS_OP_MOVE) {
    1172:	7963      	ldrb	r3, [r4, #5]
    1174:	2b01      	cmp	r3, #1
    1176:	d10b      	bne.n	1190 <swap_run+0xb0>
        idx = g_last_idx;
    1178:	f8d7 8000 	ldr.w	r8, [r7]
    BOOT_STATUS_ASSERT(rc == 0);
    117c:	f8df b170 	ldr.w	fp, [pc, #368]	; 12f0 <swap_run+0x210>
            if (idx <= (g_last_idx - bs->idx + 1)) {
    1180:	683b      	ldr	r3, [r7, #0]
                boot_move_sector_up(idx, sector_sz, state, bs, fap_pri, fap_sec);
    1182:	f8dd 9018 	ldr.w	r9, [sp, #24]
        while (idx > 0) {
    1186:	f1b8 0f00 	cmp.w	r8, #0
    118a:	d111      	bne.n	11b0 <swap_run+0xd0>
        bs->idx = BOOT_STATUS_IDX_0;
    118c:	2301      	movs	r3, #1
    118e:	6023      	str	r3, [r4, #0]
    bs->op = BOOT_STATUS_OP_SWAP;
    1190:	2302      	movs	r3, #2
    1192:	7163      	strb	r3, [r4, #5]
    idx = 1;
    1194:	f04f 0801 	mov.w	r8, #1
    while (idx <= g_last_idx) {
    1198:	683b      	ldr	r3, [r7, #0]
            boot_swap_sectors(idx, sector_sz, state, bs, fap_pri, fap_sec);
    119a:	f8dd a018 	ldr.w	sl, [sp, #24]
    while (idx <= g_last_idx) {
    119e:	4598      	cmp	r8, r3
    11a0:	d949      	bls.n	1236 <swap_run+0x156>
    flash_area_close(fap_pri);
    11a2:	4650      	mov	r0, sl
    11a4:	f005 fd43 	bl	6c2e <flash_area_close>
    flash_area_close(fap_sec);
    11a8:	9807      	ldr	r0, [sp, #28]
    11aa:	f005 fd40 	bl	6c2e <flash_area_close>
    11ae:	e7d0      	b.n	1152 <swap_run+0x72>
            if (idx <= (g_last_idx - bs->idx + 1)) {
    11b0:	6822      	ldr	r2, [r4, #0]
    11b2:	3301      	adds	r3, #1
    11b4:	1a9b      	subs	r3, r3, r2
    11b6:	4598      	cmp	r8, r3
    11b8:	d83a      	bhi.n	1230 <swap_run+0x150>

static inline uint32_t
boot_img_sector_off(const struct boot_loader_state *state, size_t slot,
                    size_t sector)
{
    return flash_sector_get_off(&BOOT_IMG(state, slot).sectors[sector]) -
    11ba:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	return fs->fs_off;
    11bc:	6819      	ldr	r1, [r3, #0]
    11be:	f853 0038 	ldr.w	r0, [r3, r8, lsl #3]
    11c2:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
    if (bs->idx == BOOT_STATUS_IDX_0) {
    11c6:	2a01      	cmp	r2, #1
    11c8:	f853 3c08 	ldr.w	r3, [r3, #-8]
    11cc:	eba3 0301 	sub.w	r3, r3, r1
    11d0:	eba0 0a01 	sub.w	sl, r0, r1
    11d4:	9304      	str	r3, [sp, #16]
    11d6:	d111      	bne.n	11fc <swap_run+0x11c>
                boot_move_sector_up(idx, sector_sz, state, bs, fap_pri, fap_sec);
    11d8:	9b07      	ldr	r3, [sp, #28]
    11da:	9303      	str	r3, [sp, #12]
        if (bs->source != BOOT_STATUS_SOURCE_PRIMARY_SLOT) {
    11dc:	68e3      	ldr	r3, [r4, #12]
    11de:	2b02      	cmp	r3, #2
    11e0:	d008      	beq.n	11f4 <swap_run+0x114>
            rc = swap_erase_trailer_sectors(state, fap_pri);
    11e2:	4649      	mov	r1, r9
    11e4:	4628      	mov	r0, r5
    11e6:	f005 fafe 	bl	67e6 <swap_erase_trailer_sectors>
            rc = swap_status_init(state, fap_pri, bs);
    11ea:	4622      	mov	r2, r4
    11ec:	4649      	mov	r1, r9
    11ee:	4628      	mov	r0, r5
    11f0:	f005 fb2f 	bl	6852 <swap_status_init>
        rc = swap_erase_trailer_sectors(state, fap_sec);
    11f4:	9903      	ldr	r1, [sp, #12]
    11f6:	4628      	mov	r0, r5
    11f8:	f005 faf5 	bl	67e6 <swap_erase_trailer_sectors>
    rc = boot_erase_region(fap_pri, new_off, sz);
    11fc:	4632      	mov	r2, r6
    11fe:	4651      	mov	r1, sl
    1200:	4648      	mov	r0, r9
    1202:	f005 faee 	bl	67e2 <boot_erase_region>
    rc = boot_copy_region(state, fap_pri, fap_pri, old_off, new_off, sz);
    1206:	9b04      	ldr	r3, [sp, #16]
    1208:	464a      	mov	r2, r9
    120a:	4649      	mov	r1, r9
    120c:	e9cd a600 	strd	sl, r6, [sp]
    1210:	4628      	mov	r0, r5
    1212:	f7ff fc49 	bl	aa8 <boot_copy_region>
    rc = boot_write_status(state, bs);
    1216:	4621      	mov	r1, r4
    1218:	4628      	mov	r0, r5
    121a:	f005 fab0 	bl	677e <boot_write_status>
    bs->idx++;
    121e:	6823      	ldr	r3, [r4, #0]
    1220:	3301      	adds	r3, #1
    1222:	6023      	str	r3, [r4, #0]
    BOOT_STATUS_ASSERT(rc == 0);
    1224:	b120      	cbz	r0, 1230 <swap_run+0x150>
    1226:	f8db 3000 	ldr.w	r3, [fp]
    122a:	3301      	adds	r3, #1
    122c:	f8cb 3000 	str.w	r3, [fp]
            idx--;
    1230:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    1234:	e7a4      	b.n	1180 <swap_run+0xa0>
        if (idx >= bs->idx) {
    1236:	6823      	ldr	r3, [r4, #0]
    1238:	4598      	cmp	r8, r3
    123a:	d34e      	bcc.n	12da <swap_run+0x1fa>
    123c:	6a6a      	ldr	r2, [r5, #36]	; 0x24
            boot_swap_sectors(idx, sector_sz, state, bs, fap_pri, fap_sec);
    123e:	f8dd b01c 	ldr.w	fp, [sp, #28]
    1242:	f852 1038 	ldr.w	r1, [r2, r8, lsl #3]
    1246:	9104      	str	r1, [sp, #16]
    1248:	ea4f 03c8 	mov.w	r3, r8, lsl #3
    124c:	3b08      	subs	r3, #8
    124e:	6811      	ldr	r1, [r2, #0]
    1250:	9103      	str	r1, [sp, #12]
    1252:	58d1      	ldr	r1, [r2, r3]
    1254:	6d2a      	ldr	r2, [r5, #80]	; 0x50
    1256:	58d0      	ldr	r0, [r2, r3]
    1258:	6813      	ldr	r3, [r2, #0]
    125a:	eba0 0903 	sub.w	r9, r0, r3
    if (bs->state == BOOT_STATUS_STATE_0) {
    125e:	7923      	ldrb	r3, [r4, #4]
    1260:	2b01      	cmp	r3, #1
    1262:	d138      	bne.n	12d6 <swap_run+0x1f6>
    1264:	9b03      	ldr	r3, [sp, #12]
        rc = boot_erase_region(fap_pri, pri_off, sz);
    1266:	4632      	mov	r2, r6
    1268:	1ac9      	subs	r1, r1, r3
    126a:	4650      	mov	r0, sl
    126c:	9105      	str	r1, [sp, #20]
    126e:	f005 fab8 	bl	67e2 <boot_erase_region>
        rc = boot_copy_region(state, fap_sec, fap_pri, sec_off, pri_off, sz);
    1272:	9905      	ldr	r1, [sp, #20]
    1274:	9100      	str	r1, [sp, #0]
    1276:	464b      	mov	r3, r9
    1278:	4652      	mov	r2, sl
    127a:	4659      	mov	r1, fp
    127c:	9601      	str	r6, [sp, #4]
    127e:	4628      	mov	r0, r5
    1280:	f7ff fc12 	bl	aa8 <boot_copy_region>
        rc = boot_write_status(state, bs);
    1284:	4621      	mov	r1, r4
    1286:	4628      	mov	r0, r5
    1288:	f005 fa79 	bl	677e <boot_write_status>
        bs->state = BOOT_STATUS_STATE_1;
    128c:	2302      	movs	r3, #2
    128e:	7123      	strb	r3, [r4, #4]
        BOOT_STATUS_ASSERT(rc == 0);
    1290:	b118      	cbz	r0, 129a <swap_run+0x1ba>
    1292:	4a17      	ldr	r2, [pc, #92]	; (12f0 <swap_run+0x210>)
    1294:	6813      	ldr	r3, [r2, #0]
    1296:	3301      	adds	r3, #1
    1298:	6013      	str	r3, [r2, #0]
        rc = boot_erase_region(fap_sec, sec_off, sz);
    129a:	4632      	mov	r2, r6
    129c:	4649      	mov	r1, r9
    129e:	4658      	mov	r0, fp
    12a0:	f005 fa9f 	bl	67e2 <boot_erase_region>
        rc = boot_copy_region(state, fap_pri, fap_sec, pri_up_off, sec_off, sz);
    12a4:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
    12a8:	4651      	mov	r1, sl
    12aa:	1a9b      	subs	r3, r3, r2
    12ac:	e9cd 9600 	strd	r9, r6, [sp]
    12b0:	465a      	mov	r2, fp
    12b2:	4628      	mov	r0, r5
    12b4:	f7ff fbf8 	bl	aa8 <boot_copy_region>
        rc = boot_write_status(state, bs);
    12b8:	4621      	mov	r1, r4
    12ba:	4628      	mov	r0, r5
    12bc:	f005 fa5f 	bl	677e <boot_write_status>
        bs->idx++;
    12c0:	6823      	ldr	r3, [r4, #0]
    12c2:	3301      	adds	r3, #1
    12c4:	6023      	str	r3, [r4, #0]
        bs->state = BOOT_STATUS_STATE_0;
    12c6:	2301      	movs	r3, #1
    12c8:	7123      	strb	r3, [r4, #4]
        BOOT_STATUS_ASSERT(rc == 0);
    12ca:	b130      	cbz	r0, 12da <swap_run+0x1fa>
    12cc:	4a08      	ldr	r2, [pc, #32]	; (12f0 <swap_run+0x210>)
    12ce:	6813      	ldr	r3, [r2, #0]
    12d0:	3301      	adds	r3, #1
    12d2:	6013      	str	r3, [r2, #0]
    12d4:	e001      	b.n	12da <swap_run+0x1fa>
    if (bs->state == BOOT_STATUS_STATE_1) {
    12d6:	2b02      	cmp	r3, #2
    12d8:	d0df      	beq.n	129a <swap_run+0x1ba>
        idx++;
    12da:	f108 0801 	add.w	r8, r8, #1
    12de:	e75b      	b.n	1198 <swap_run+0xb8>
    12e0:	00009ea2 	.word	0x00009ea2
    12e4:	20000004 	.word	0x20000004
    12e8:	00009ecb 	.word	0x00009ecb
    12ec:	00009efa 	.word	0x00009efa
    12f0:	20000fc4 	.word	0x20000fc4

000012f4 <nrf_cleanup_peripheral>:
    return (uint32_t)p_reg + task;
}

NRF_STATIC_INLINE void nrf_rtc_task_trigger(NRF_RTC_Type * p_reg, nrf_rtc_task_t task)
{
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    12f4:	4a13      	ldr	r2, [pc, #76]	; (1344 <nrf_cleanup_peripheral+0x50>)
    p_reg->EVTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    12f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    12fa:	2101      	movs	r1, #1
    12fc:	6051      	str	r1, [r2, #4]
    p_reg->EVTENCLR = mask;
    12fe:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
    p_reg->INTENCLR = mask;
    1302:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    1306:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    130a:	6051      	str	r1, [r2, #4]
    p_reg->EVTENCLR = mask;
    130c:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
    p_reg->INTENCLR = mask;
    1310:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    1314:	f502 3298 	add.w	r2, r2, #77824	; 0x13000
    1318:	6051      	str	r1, [r2, #4]
    p_reg->EVTENCLR = mask;
    131a:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
    p_reg->INTENCLR = mask;
    131e:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
}

NRF_STATIC_INLINE void nrf_uarte_disable(NRF_UARTE_Type * p_reg)
{
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    1322:	f5a2 3208 	sub.w	r2, r2, #139264	; 0x22000
    1326:	2100      	movs	r1, #0
    1328:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    p_reg->INTENCLR = mask;
    132c:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    }
}

NRF_STATIC_INLINE void nrf_ppi_channels_disable_all(NRF_PPI_Type * p_reg)
{
    p_reg->CHENCLR = ((uint32_t)0xFFFFFFFFuL);
    1330:	f502 32e8 	add.w	r2, r2, #118784	; 0x1d000
    1334:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_clock_int_disable(NRF_CLOCK_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
    1338:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    133c:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
#endif
#if defined(NRF_DPPIC)
    nrf_dppi_channels_disable_all(NRF_DPPIC);
#endif
    nrf_cleanup_clock();
}
    1340:	4770      	bx	lr
    1342:	bf00      	nop
    1344:	4000b000 	.word	0x4000b000

00001348 <char_out>:
}

static int char_out(int c, void *ctx_p)
{
	(void) ctx_p;
	return _char_out(c);
    1348:	4b01      	ldr	r3, [pc, #4]	; (1350 <char_out+0x8>)
    134a:	681b      	ldr	r3, [r3, #0]
    134c:	4718      	bx	r3
    134e:	bf00      	nop
    1350:	20000008 	.word	0x20000008

00001354 <__printk_hook_install>:
	_char_out = fn;
    1354:	4b01      	ldr	r3, [pc, #4]	; (135c <__printk_hook_install+0x8>)
    1356:	6018      	str	r0, [r3, #0]
}
    1358:	4770      	bx	lr
    135a:	bf00      	nop
    135c:	20000008 	.word	0x20000008

00001360 <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
    1360:	b507      	push	{r0, r1, r2, lr}
    1362:	460b      	mov	r3, r1
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
    1364:	2100      	movs	r1, #0
    1366:	4602      	mov	r2, r0
    1368:	9100      	str	r1, [sp, #0]
    136a:	4803      	ldr	r0, [pc, #12]	; (1378 <vprintk+0x18>)
    136c:	f000 f914 	bl	1598 <z_cbvprintf_impl>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
    1370:	b003      	add	sp, #12
    1372:	f85d fb04 	ldr.w	pc, [sp], #4
    1376:	bf00      	nop
    1378:	00001349 	.word	0x00001349

0000137c <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    137c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    1380:	8b05      	ldrh	r5, [r0, #24]
{
    1382:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    1384:	0728      	lsls	r0, r5, #28
{
    1386:	4690      	mov	r8, r2
	if (processing) {
    1388:	d411      	bmi.n	13ae <process_event+0x32>

	sys_slist_init(&clients);
	do {
		onoff_transition_fn transit = NULL;

		if (evt == EVT_RECHECK) {
    138a:	2902      	cmp	r1, #2
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    138c:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
    1390:	f040 80cd 	bne.w	152e <process_event+0x1b2>
			evt = process_recheck(mgr);
    1394:	4620      	mov	r0, r4
    1396:	f005 fb13 	bl	69c0 <process_recheck>
		}

		if (evt == EVT_NOP) {
    139a:	b178      	cbz	r0, 13bc <process_event+0x40>
			break;
		}

		res = 0;
		if (evt == EVT_COMPLETE) {
    139c:	3801      	subs	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    139e:	8b21      	ldrh	r1, [r4, #24]
    13a0:	2804      	cmp	r0, #4
    13a2:	d811      	bhi.n	13c8 <process_event+0x4c>
    13a4:	e8df f000 	tbb	[pc, r0]
    13a8:	856d10c3 	.word	0x856d10c3
    13ac:	95          	.byte	0x95
    13ad:	00          	.byte	0x00
		if (evt == EVT_COMPLETE) {
    13ae:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    13b0:	bf0c      	ite	eq
    13b2:	f045 0510 	orreq.w	r5, r5, #16
			mgr->flags |= ONOFF_FLAG_RECHECK;
    13b6:	f045 0520 	orrne.w	r5, r5, #32
    13ba:	8325      	strh	r5, [r4, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    13bc:	f388 8811 	msr	BASEPRI, r8
    13c0:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    13c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    13c8:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    13cc:	45aa      	cmp	sl, r5
    13ce:	f000 80a6 	beq.w	151e <process_event+0x1a2>
	 * a memory barrier when used like this, and we don't have a
	 * Zephyr framework for that.
	 */
	atomic_clear(&l->locked);
#endif
	arch_irq_unlock(key.key);
    13d2:	2700      	movs	r7, #0
    13d4:	46b9      	mov	r9, r7
    13d6:	463e      	mov	r6, r7
    13d8:	68a3      	ldr	r3, [r4, #8]
    13da:	2b00      	cmp	r3, #0
    13dc:	f000 80bd 	beq.w	155a <process_event+0x1de>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    13e0:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    13e4:	8321      	strh	r1, [r4, #24]
    13e6:	f388 8811 	msr	BASEPRI, r8
    13ea:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    13ee:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    13f0:	2900      	cmp	r1, #0
    13f2:	f000 80bb 	beq.w	156c <process_event+0x1f0>
	return node->next;
    13f6:	680d      	ldr	r5, [r1, #0]
    13f8:	2900      	cmp	r1, #0
    13fa:	f000 80b7 	beq.w	156c <process_event+0x1f0>
		mon->callback(mgr, mon, state, res);
    13fe:	f8d1 8004 	ldr.w	r8, [r1, #4]
    1402:	4633      	mov	r3, r6
    1404:	4652      	mov	r2, sl
    1406:	4620      	mov	r0, r4
    1408:	47c0      	blx	r8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    140a:	2d00      	cmp	r5, #0
    140c:	d076      	beq.n	14fc <process_event+0x180>
    140e:	682b      	ldr	r3, [r5, #0]
    1410:	4629      	mov	r1, r5
    1412:	461d      	mov	r5, r3
    1414:	e7f0      	b.n	13f8 <process_event+0x7c>
    1416:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    141a:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    141c:	2a01      	cmp	r2, #1
    141e:	d81b      	bhi.n	1458 <process_event+0xdc>
	list->head = NULL;
    1420:	2200      	movs	r2, #0
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1422:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
    1426:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
    1428:	6827      	ldr	r7, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    142a:	b289      	uxth	r1, r1
	list->tail = NULL;
    142c:	e9c4 2200 	strd	r2, r2, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    1430:	d109      	bne.n	1446 <process_event+0xca>
    1432:	463b      	mov	r3, r7
    1434:	e003      	b.n	143e <process_event+0xc2>
				mgr->refs += 1U;
    1436:	8b62      	ldrh	r2, [r4, #26]
    1438:	3201      	adds	r2, #1
    143a:	8362      	strh	r2, [r4, #26]
	return node->next;
    143c:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    143e:	2b00      	cmp	r3, #0
    1440:	d1f9      	bne.n	1436 <process_event+0xba>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1442:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
    1446:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    1448:	4620      	mov	r0, r4
    144a:	f005 fab9 	bl	69c0 <process_recheck>
    144e:	2800      	cmp	r0, #0
    1450:	d07b      	beq.n	154a <process_event+0x1ce>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    1452:	f041 0120 	orr.w	r1, r1, #32
    1456:	e077      	b.n	1548 <process_event+0x1cc>
	} else if (state == ONOFF_STATE_TO_OFF) {
    1458:	2b04      	cmp	r3, #4
    145a:	d10a      	bne.n	1472 <process_event+0xf6>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    145c:	f021 0107 	bic.w	r1, r1, #7
    1460:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
    1462:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    1464:	4620      	mov	r0, r4
    1466:	f005 faab 	bl	69c0 <process_recheck>
    146a:	b110      	cbz	r0, 1472 <process_event+0xf6>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    146c:	f041 0120 	orr.w	r1, r1, #32
    1470:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    1472:	8b21      	ldrh	r1, [r4, #24]
    1474:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    1478:	45aa      	cmp	sl, r5
    147a:	d050      	beq.n	151e <process_event+0x1a2>
    147c:	2700      	movs	r7, #0
		onoff_transition_fn transit = NULL;
    147e:	46b9      	mov	r9, r7
    1480:	e7aa      	b.n	13d8 <process_event+0x5c>
			transit = mgr->transitions->start;
    1482:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1484:	f021 0107 	bic.w	r1, r1, #7
    1488:	f041 0106 	orr.w	r1, r1, #6
				   && !sys_slist_is_empty(&mgr->monitors);
    148c:	2d06      	cmp	r5, #6
			transit = mgr->transitions->start;
    148e:	f8d3 9000 	ldr.w	r9, [r3]
	mgr->flags = (state & ONOFF_STATE_MASK)
    1492:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
    1494:	d12d      	bne.n	14f2 <process_event+0x176>
		    || (transit != NULL)) {
    1496:	f1b9 0f00 	cmp.w	r9, #0
    149a:	d040      	beq.n	151e <process_event+0x1a2>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    149c:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    14a0:	8321      	strh	r1, [r4, #24]
    14a2:	f388 8811 	msr	BASEPRI, r8
    14a6:	f3bf 8f6f 	isb	sy
				transit(mgr, transition_complete);
    14aa:	493a      	ldr	r1, [pc, #232]	; (1594 <process_event+0x218>)
    14ac:	4620      	mov	r0, r4
    14ae:	47c8      	blx	r9
    14b0:	e029      	b.n	1506 <process_event+0x18a>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    14b2:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->stop;
    14b6:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    14b8:	f041 0104 	orr.w	r1, r1, #4
    14bc:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
    14be:	2d04      	cmp	r5, #4
			transit = mgr->transitions->stop;
    14c0:	f8d3 9004 	ldr.w	r9, [r3, #4]
	mgr->flags = (state & ONOFF_STATE_MASK)
    14c4:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
    14c6:	d0e6      	beq.n	1496 <process_event+0x11a>
    14c8:	2700      	movs	r7, #0
		res = 0;
    14ca:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    14cc:	f04f 0a04 	mov.w	sl, #4
    14d0:	e782      	b.n	13d8 <process_event+0x5c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    14d2:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->reset;
    14d6:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    14d8:	f041 0105 	orr.w	r1, r1, #5
    14dc:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
    14de:	2d05      	cmp	r5, #5
			transit = mgr->transitions->reset;
    14e0:	f8d3 9008 	ldr.w	r9, [r3, #8]
	mgr->flags = (state & ONOFF_STATE_MASK)
    14e4:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
    14e6:	d0d6      	beq.n	1496 <process_event+0x11a>
    14e8:	2700      	movs	r7, #0
		res = 0;
    14ea:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    14ec:	f04f 0a05 	mov.w	sl, #5
    14f0:	e772      	b.n	13d8 <process_event+0x5c>
				   && !sys_slist_is_empty(&mgr->monitors);
    14f2:	2700      	movs	r7, #0
		res = 0;
    14f4:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    14f6:	f04f 0a06 	mov.w	sl, #6
    14fa:	e76d      	b.n	13d8 <process_event+0x5c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    14fc:	462b      	mov	r3, r5
    14fe:	e787      	b.n	1410 <process_event+0x94>
			if (transit != NULL) {
    1500:	f1b9 0f00 	cmp.w	r9, #0
    1504:	d1d1      	bne.n	14aa <process_event+0x12e>
	__asm__ volatile(
    1506:	f04f 0320 	mov.w	r3, #32
    150a:	f3ef 8811 	mrs	r8, BASEPRI
    150e:	f383 8812 	msr	BASEPRI_MAX, r3
    1512:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    1516:	8b23      	ldrh	r3, [r4, #24]
    1518:	f023 0308 	bic.w	r3, r3, #8
    151c:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    151e:	8b25      	ldrh	r5, [r4, #24]
    1520:	06ea      	lsls	r2, r5, #27
    1522:	d52e      	bpl.n	1582 <process_event+0x206>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    1524:	f025 0310 	bic.w	r3, r5, #16
    1528:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
    152a:	f005 0507 	and.w	r5, r5, #7
			res = mgr->last_res;
    152e:	6966      	ldr	r6, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    1530:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
    1532:	2e00      	cmp	r6, #0
    1534:	f6bf af6f 	bge.w	1416 <process_event+0x9a>
	list->head = NULL;
    1538:	2300      	movs	r3, #0
		*clients = mgr->clients;
    153a:	6827      	ldr	r7, [r4, #0]
	list->tail = NULL;
    153c:	e9c4 3300 	strd	r3, r3, [r4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1540:	f021 0107 	bic.w	r1, r1, #7
    1544:	f041 0101 	orr.w	r1, r1, #1
			mgr->flags |= ONOFF_FLAG_RECHECK;
    1548:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    154a:	8b21      	ldrh	r1, [r4, #24]
    154c:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    1550:	45aa      	cmp	sl, r5
    1552:	f04f 0900 	mov.w	r9, #0
    1556:	f47f af3f 	bne.w	13d8 <process_event+0x5c>
		    || !sys_slist_is_empty(&clients)
    155a:	2f00      	cmp	r7, #0
    155c:	d09b      	beq.n	1496 <process_event+0x11a>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    155e:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    1562:	8321      	strh	r1, [r4, #24]
	__asm__ volatile(
    1564:	f388 8811 	msr	BASEPRI, r8
    1568:	f3bf 8f6f 	isb	sy
			if (!sys_slist_is_empty(&clients)) {
    156c:	2f00      	cmp	r7, #0
    156e:	d0c7      	beq.n	1500 <process_event+0x184>
	return node->next;
    1570:	683d      	ldr	r5, [r7, #0]
		notify_one(mgr, cli, state, res);
    1572:	4639      	mov	r1, r7
    1574:	4633      	mov	r3, r6
    1576:	4652      	mov	r2, sl
    1578:	4620      	mov	r0, r4
    157a:	f005 fa4d 	bl	6a18 <notify_one>
	list->head = node;
    157e:	462f      	mov	r7, r5
	while (!sys_slist_is_empty(list)) {
    1580:	e7f4      	b.n	156c <process_event+0x1f0>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    1582:	06ab      	lsls	r3, r5, #26
    1584:	f57f af1a 	bpl.w	13bc <process_event+0x40>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    1588:	f025 0320 	bic.w	r3, r5, #32
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    158c:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
    158e:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
    1592:	e6ff      	b.n	1394 <process_event+0x18>
    1594:	00006a45 	.word	0x00006a45

00001598 <z_cbvprintf_impl>:
 *
 * @return printed byte count if CONFIG_CBPRINTF_LIBC_SUBSTS is set
 */
int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fmt,
		     va_list ap, uint32_t flags)
{
    1598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    159c:	b08d      	sub	sp, #52	; 0x34
    159e:	461d      	mov	r5, r3

	const bool tagged_ap = (flags & Z_CBVPRINTF_PROCESS_FLAG_TAGGED_ARGS)
			       == Z_CBVPRINTF_PROCESS_FLAG_TAGGED_ARGS;

	/* we pre-increment in the loop  afterwards */
	fmt--;
    15a0:	1e53      	subs	r3, r2, #1
{
    15a2:	4682      	mov	sl, r0
    15a4:	9101      	str	r1, [sp, #4]
	fmt--;
    15a6:	9303      	str	r3, [sp, #12]
	size_t count = 0;
    15a8:	f04f 0900 	mov.w	r9, #0

start:
	while (*++fmt != '%') {
    15ac:	9b03      	ldr	r3, [sp, #12]
    15ae:	7858      	ldrb	r0, [r3, #1]
    15b0:	2825      	cmp	r0, #37	; 0x25
    15b2:	f103 0401 	add.w	r4, r3, #1
    15b6:	d119      	bne.n	15ec <z_cbvprintf_impl+0x54>
	prefix = "";
	padding_mode = 0;
	length_mod = 0;
	special = 0;

	for (fmt++ ; ; fmt++) {
    15b8:	461e      	mov	r6, r3
	special = 0;
    15ba:	2000      	movs	r0, #0
	precision = -1;
    15bc:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
	for (fmt++ ; ; fmt++) {
    15c0:	3602      	adds	r6, #2
	length_mod = 0;
    15c2:	4603      	mov	r3, r0
	padding_mode = 0;
    15c4:	9002      	str	r0, [sp, #8]
	min_width = -1;
    15c6:	4644      	mov	r4, r8
		switch (*fmt) {
    15c8:	7831      	ldrb	r1, [r6, #0]
    15ca:	9603      	str	r6, [sp, #12]
    15cc:	2939      	cmp	r1, #57	; 0x39
    15ce:	d854      	bhi.n	167a <z_cbvprintf_impl+0xe2>
    15d0:	291f      	cmp	r1, #31
    15d2:	d814      	bhi.n	15fe <z_cbvprintf_impl+0x66>
    15d4:	2900      	cmp	r1, #0
    15d6:	f000 81f0 	beq.w	19ba <z_cbvprintf_impl+0x422>
			precision = 0;
			break;
		}

		default:
			OUTC('%');
    15da:	9901      	ldr	r1, [sp, #4]
    15dc:	2025      	movs	r0, #37	; 0x25
    15de:	47d0      	blx	sl
			OUTC(*fmt);
    15e0:	9901      	ldr	r1, [sp, #4]
    15e2:	7830      	ldrb	r0, [r6, #0]
    15e4:	47d0      	blx	sl
    15e6:	f109 0902 	add.w	r9, r9, #2
			goto start;
    15ea:	e7df      	b.n	15ac <z_cbvprintf_impl+0x14>
		if (*fmt == '\0') {
    15ec:	2800      	cmp	r0, #0
    15ee:	f000 81e4 	beq.w	19ba <z_cbvprintf_impl+0x422>
		OUTC(*fmt);
    15f2:	9901      	ldr	r1, [sp, #4]
    15f4:	47d0      	blx	sl
    15f6:	f109 0901 	add.w	r9, r9, #1
	while (*++fmt != '%') {
    15fa:	9403      	str	r4, [sp, #12]
    15fc:	e7d6      	b.n	15ac <z_cbvprintf_impl+0x14>
		switch (*fmt) {
    15fe:	f1a1 0220 	sub.w	r2, r1, #32
    1602:	2a19      	cmp	r2, #25
    1604:	d8e9      	bhi.n	15da <z_cbvprintf_impl+0x42>
    1606:	a701      	add	r7, pc, #4	; (adr r7, 160c <z_cbvprintf_impl+0x74>)
    1608:	f857 f022 	ldr.w	pc, [r7, r2, lsl #2]
    160c:	00001675 	.word	0x00001675
    1610:	000015db 	.word	0x000015db
    1614:	000015db 	.word	0x000015db
    1618:	00001675 	.word	0x00001675
    161c:	000015db 	.word	0x000015db
    1620:	000016f5 	.word	0x000016f5
    1624:	000015db 	.word	0x000015db
    1628:	000015db 	.word	0x000015db
    162c:	000015db 	.word	0x000015db
    1630:	000015db 	.word	0x000015db
    1634:	00001741 	.word	0x00001741
    1638:	00001675 	.word	0x00001675
    163c:	000015db 	.word	0x000015db
    1640:	00001755 	.word	0x00001755
    1644:	00001701 	.word	0x00001701
    1648:	000015db 	.word	0x000015db
    164c:	0000170f 	.word	0x0000170f
    1650:	0000172f 	.word	0x0000172f
    1654:	0000172f 	.word	0x0000172f
    1658:	0000172f 	.word	0x0000172f
    165c:	0000172f 	.word	0x0000172f
    1660:	0000172f 	.word	0x0000172f
    1664:	0000172f 	.word	0x0000172f
    1668:	0000172f 	.word	0x0000172f
    166c:	0000172f 	.word	0x0000172f
    1670:	0000172f 	.word	0x0000172f
    1674:	4608      	mov	r0, r1
    1676:	3601      	adds	r6, #1
    1678:	e7a6      	b.n	15c8 <z_cbvprintf_impl+0x30>
    167a:	2958      	cmp	r1, #88	; 0x58
    167c:	f000 80ee 	beq.w	185c <z_cbvprintf_impl+0x2c4>
    1680:	f1a1 0263 	sub.w	r2, r1, #99	; 0x63
    1684:	b2d7      	uxtb	r7, r2
    1686:	2f17      	cmp	r7, #23
    1688:	d8a7      	bhi.n	15da <z_cbvprintf_impl+0x42>
    168a:	2a17      	cmp	r2, #23
    168c:	d8a5      	bhi.n	15da <z_cbvprintf_impl+0x42>
    168e:	a701      	add	r7, pc, #4	; (adr r7, 1694 <z_cbvprintf_impl+0xfc>)
    1690:	f857 f022 	ldr.w	pc, [r7, r2, lsl #2]
    1694:	00001903 	.word	0x00001903
    1698:	0000177b 	.word	0x0000177b
    169c:	000015db 	.word	0x000015db
    16a0:	000015db 	.word	0x000015db
    16a4:	000015db 	.word	0x000015db
    16a8:	0000175b 	.word	0x0000175b
    16ac:	0000177b 	.word	0x0000177b
    16b0:	000015db 	.word	0x000015db
    16b4:	000015db 	.word	0x000015db
    16b8:	0000175b 	.word	0x0000175b
    16bc:	000015db 	.word	0x000015db
    16c0:	000015db 	.word	0x000015db
    16c4:	000015db 	.word	0x000015db
    16c8:	00001837 	.word	0x00001837
    16cc:	000015db 	.word	0x000015db
    16d0:	000015db 	.word	0x000015db
    16d4:	000018d7 	.word	0x000018d7
    16d8:	000015db 	.word	0x000015db
    16dc:	0000177b 	.word	0x0000177b
    16e0:	000015db 	.word	0x000015db
    16e4:	000015db 	.word	0x000015db
    16e8:	00001837 	.word	0x00001837
    16ec:	000015db 	.word	0x000015db
    16f0:	0000175b 	.word	0x0000175b
			OUTC('%');
    16f4:	9901      	ldr	r1, [sp, #4]
    16f6:	2025      	movs	r0, #37	; 0x25
    16f8:	47d0      	blx	sl
    16fa:	f109 0901 	add.w	r9, r9, #1
			goto start;
    16fe:	e755      	b.n	15ac <z_cbvprintf_impl+0x14>
			padding_mode &= (char)~PAD_ZERO;
    1700:	9a02      	ldr	r2, [sp, #8]
    1702:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    1706:	9202      	str	r2, [sp, #8]
			precision = 0;
    1708:	f04f 0800 	mov.w	r8, #0
			continue;
    170c:	e7b3      	b.n	1676 <z_cbvprintf_impl+0xde>
			if (min_width < 0 && precision < 0 && !padding_mode) {
    170e:	2c00      	cmp	r4, #0
    1710:	da0d      	bge.n	172e <z_cbvprintf_impl+0x196>
    1712:	f1b8 0f00 	cmp.w	r8, #0
    1716:	da0d      	bge.n	1734 <z_cbvprintf_impl+0x19c>
    1718:	9a02      	ldr	r2, [sp, #8]
    171a:	2a00      	cmp	r2, #0
    171c:	f000 8145 	beq.w	19aa <z_cbvprintf_impl+0x412>
				if (min_width < 0) {
    1720:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
				min_width = 10 * min_width + *fmt - '0';
    1724:	220a      	movs	r2, #10
    1726:	fb02 1404 	mla	r4, r2, r4, r1
    172a:	3c30      	subs	r4, #48	; 0x30
    172c:	e7a3      	b.n	1676 <z_cbvprintf_impl+0xde>
			if (precision >= 0) {
    172e:	f1b8 0f00 	cmp.w	r8, #0
    1732:	dbf5      	blt.n	1720 <z_cbvprintf_impl+0x188>
				precision = 10 * precision + *fmt - '0';
    1734:	220a      	movs	r2, #10
    1736:	fb02 1208 	mla	r2, r2, r8, r1
    173a:	f1a2 0830 	sub.w	r8, r2, #48	; 0x30
    173e:	e79a      	b.n	1676 <z_cbvprintf_impl+0xde>
			if (precision >= 0) {
    1740:	f1b8 0f00 	cmp.w	r8, #0
				precision = va_arg(ap, int);
    1744:	f855 2b04 	ldr.w	r2, [r5], #4
			if (precision >= 0) {
    1748:	f280 8131 	bge.w	19ae <z_cbvprintf_impl+0x416>
				if (min_width < 0) {
    174c:	2a00      	cmp	r2, #0
    174e:	f280 8130 	bge.w	19b2 <z_cbvprintf_impl+0x41a>
					min_width = -min_width;
    1752:	4254      	negs	r4, r2
		switch (*fmt) {
    1754:	2202      	movs	r2, #2
				padding_mode = PAD_ZERO;
    1756:	9202      	str	r2, [sp, #8]
    1758:	e78d      	b.n	1676 <z_cbvprintf_impl+0xde>
			if (*fmt == 'h' && length_mod == 'h') {
    175a:	2968      	cmp	r1, #104	; 0x68
    175c:	d103      	bne.n	1766 <z_cbvprintf_impl+0x1ce>
    175e:	2b68      	cmp	r3, #104	; 0x68
    1760:	d106      	bne.n	1770 <z_cbvprintf_impl+0x1d8>
				length_mod = 'H';
    1762:	2348      	movs	r3, #72	; 0x48
    1764:	e787      	b.n	1676 <z_cbvprintf_impl+0xde>
			} else if (*fmt == 'l' && length_mod == 'l') {
    1766:	296c      	cmp	r1, #108	; 0x6c
    1768:	d102      	bne.n	1770 <z_cbvprintf_impl+0x1d8>
    176a:	2b6c      	cmp	r3, #108	; 0x6c
    176c:	f000 8123 	beq.w	19b6 <z_cbvprintf_impl+0x41e>
			} else if (length_mod == '\0') {
    1770:	2b00      	cmp	r3, #0
    1772:	f47f af32 	bne.w	15da <z_cbvprintf_impl+0x42>
		switch (*fmt) {
    1776:	460b      	mov	r3, r1
    1778:	e77d      	b.n	1676 <z_cbvprintf_impl+0xde>
			if (length_mod == 'z') {
    177a:	2b7a      	cmp	r3, #122	; 0x7a
    177c:	d106      	bne.n	178c <z_cbvprintf_impl+0x1f4>
			} else if (*fmt == 'u') {
    177e:	2975      	cmp	r1, #117	; 0x75
				precision = va_arg(ap, int);
    1780:	f855 6b04 	ldr.w	r6, [r5], #4
			} else if (*fmt == 'u') {
    1784:	d114      	bne.n	17b0 <z_cbvprintf_impl+0x218>
				d = va_arg(ap, unsigned int);
    1786:	f04f 0b00 	mov.w	fp, #0
			if (*fmt != 'u' && (int_value_type)d < 0) {
    178a:	e00c      	b.n	17a6 <z_cbvprintf_impl+0x20e>
			} else if (length_mod == 'l') {
    178c:	2b6c      	cmp	r3, #108	; 0x6c
    178e:	d0f6      	beq.n	177e <z_cbvprintf_impl+0x1e6>
			} else if (length_mod == 'L') {
    1790:	2b4c      	cmp	r3, #76	; 0x4c
    1792:	d1f4      	bne.n	177e <z_cbvprintf_impl+0x1e6>
					unsigned long long llu =
    1794:	3507      	adds	r5, #7
    1796:	f025 0307 	bic.w	r3, r5, #7
				if (*fmt == 'u') {
    179a:	2975      	cmp	r1, #117	; 0x75
					unsigned long long llu =
    179c:	e9d3 6b00 	ldrd	r6, fp, [r3]
    17a0:	f103 0508 	add.w	r5, r3, #8
				if (*fmt == 'u') {
    17a4:	d106      	bne.n	17b4 <z_cbvprintf_impl+0x21c>
			} else if (special == ' ') {
    17a6:	2820      	cmp	r0, #32
    17a8:	d13e      	bne.n	1828 <z_cbvprintf_impl+0x290>
				prefix = " ";
    17aa:	4f86      	ldr	r7, [pc, #536]	; (19c4 <z_cbvprintf_impl+0x42c>)
				min_width--;
    17ac:	3c01      	subs	r4, #1
    17ae:	e009      	b.n	17c4 <z_cbvprintf_impl+0x22c>
				d = va_arg(ap, int);
    17b0:	ea4f 7be6 	mov.w	fp, r6, asr #31
			if (*fmt != 'u' && (int_value_type)d < 0) {
    17b4:	f1bb 0f00 	cmp.w	fp, #0
    17b8:	daf5      	bge.n	17a6 <z_cbvprintf_impl+0x20e>
				d = -d;
    17ba:	4276      	negs	r6, r6
				prefix = "-";
    17bc:	4f82      	ldr	r7, [pc, #520]	; (19c8 <z_cbvprintf_impl+0x430>)
				d = -d;
    17be:	eb6b 0b4b 	sbc.w	fp, fp, fp, lsl #1
				min_width--;
    17c2:	3c01      	subs	r4, #1
	int i = 0;
    17c4:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
    17c8:	9305      	str	r3, [sp, #20]
    17ca:	2300      	movs	r3, #0
    17cc:	9304      	str	r3, [sp, #16]
		unsigned int c = num % base;
    17ce:	4630      	mov	r0, r6
    17d0:	4659      	mov	r1, fp
    17d2:	220a      	movs	r2, #10
    17d4:	2300      	movs	r3, #0
    17d6:	f7fe fc81 	bl	dc <__aeabi_uldivmod>
		buftop[--i] = c + '0';
    17da:	9b04      	ldr	r3, [sp, #16]
    17dc:	f103 3cff 	add.w	ip, r3, #4294967295	; 0xffffffff
    17e0:	f8cd c010 	str.w	ip, [sp, #16]
    17e4:	f8dd c014 	ldr.w	ip, [sp, #20]
    17e8:	3230      	adds	r2, #48	; 0x30
    17ea:	f80c 2d01 	strb.w	r2, [ip, #-1]!
    17ee:	f8cd c014 	str.w	ip, [sp, #20]
		num /= base;
    17f2:	46b4      	mov	ip, r6
    17f4:	465a      	mov	r2, fp
	} while (num);
    17f6:	f1bc 0f0a 	cmp.w	ip, #10
    17fa:	f172 0200 	sbcs.w	r2, r2, #0
		num /= base;
    17fe:	4606      	mov	r6, r0
    1800:	468b      	mov	fp, r1
	} while (num);
    1802:	d2e4      	bcs.n	17ce <z_cbvprintf_impl+0x236>
	return -i;
    1804:	f1c3 0b01 	rsb	fp, r3, #1
			data = buf + sizeof(buf) - data_len;
    1808:	3330      	adds	r3, #48	; 0x30
			data = buf + sizeof(buf) - data_len;
    180a:	eb0d 0603 	add.w	r6, sp, r3
		}

		if (precision < 0 && (padding_mode & PAD_ZERO)) {
    180e:	f1b8 0f00 	cmp.w	r8, #0
			data = buf + sizeof(buf) - data_len;
    1812:	f1a6 0604 	sub.w	r6, r6, #4
		if (precision < 0 && (padding_mode & PAD_ZERO)) {
    1816:	da6d      	bge.n	18f4 <z_cbvprintf_impl+0x35c>
    1818:	9b02      	ldr	r3, [sp, #8]
    181a:	07d9      	lsls	r1, r3, #31
    181c:	d47c      	bmi.n	1918 <z_cbvprintf_impl+0x380>
			precision = min_width;
		}
		min_width -= data_len;
		precision -= data_len;
    181e:	eba8 030b 	sub.w	r3, r8, fp
		min_width -= data_len;
    1822:	eba4 040b 	sub.w	r4, r4, fp
    1826:	e013      	b.n	1850 <z_cbvprintf_impl+0x2b8>
			} else if (special == '+') {
    1828:	282b      	cmp	r0, #43	; 0x2b
				prefix = "+";
    182a:	bf0a      	itet	eq
    182c:	4f67      	ldreq	r7, [pc, #412]	; (19cc <z_cbvprintf_impl+0x434>)
	prefix = "";
    182e:	4f68      	ldrne	r7, [pc, #416]	; (19d0 <z_cbvprintf_impl+0x438>)
				min_width--;
    1830:	f104 34ff 	addeq.w	r4, r4, #4294967295	; 0xffffffff
    1834:	e7c6      	b.n	17c4 <z_cbvprintf_impl+0x22c>
			if (*fmt == 'p') {
    1836:	2970      	cmp	r1, #112	; 0x70
    1838:	d10f      	bne.n	185a <z_cbvprintf_impl+0x2c2>
				x = (uintptr_t)va_arg(ap, void *);
    183a:	f855 2b04 	ldr.w	r2, [r5], #4
    183e:	2300      	movs	r3, #0
				if (x == (uint_value_type)0) {
    1840:	b9fa      	cbnz	r2, 1882 <z_cbvprintf_impl+0x2ea>
					data = "(nil)";
    1842:	4e64      	ldr	r6, [pc, #400]	; (19d4 <z_cbvprintf_impl+0x43c>)
		min_width -= data_len;
    1844:	3c05      	subs	r4, #5
		precision -= data_len;
    1846:	f06f 0304 	mvn.w	r3, #4
					data_len = 5;
    184a:	f04f 0b05 	mov.w	fp, #5
	prefix = "";
    184e:	4f60      	ldr	r7, [pc, #384]	; (19d0 <z_cbvprintf_impl+0x438>)
		if (precision > 0) {
			min_width -= precision;
		}

		if (!(padding_mode & PAD_TAIL)) {
    1850:	9a02      	ldr	r2, [sp, #8]
    1852:	0792      	lsls	r2, r2, #30
    1854:	d46f      	bmi.n	1936 <z_cbvprintf_impl+0x39e>
    1856:	46a0      	mov	r8, r4
    1858:	e065      	b.n	1926 <z_cbvprintf_impl+0x38e>
		switch (*fmt) {
    185a:	2178      	movs	r1, #120	; 0x78
			} else if (length_mod == 'l') {
    185c:	2b6c      	cmp	r3, #108	; 0x6c
    185e:	d103      	bne.n	1868 <z_cbvprintf_impl+0x2d0>
				x = va_arg(ap, unsigned int);
    1860:	f855 2b04 	ldr.w	r2, [r5], #4
    1864:	2300      	movs	r3, #0
    1866:	e008      	b.n	187a <z_cbvprintf_impl+0x2e2>
			} else if (length_mod == 'L') {
    1868:	2b4c      	cmp	r3, #76	; 0x4c
    186a:	d1f9      	bne.n	1860 <z_cbvprintf_impl+0x2c8>
				unsigned long long llx =
    186c:	3507      	adds	r5, #7
    186e:	f025 0307 	bic.w	r3, r5, #7
    1872:	461d      	mov	r5, r3
    1874:	685b      	ldr	r3, [r3, #4]
    1876:	f855 2b08 	ldr.w	r2, [r5], #8
			if (special == '#') {
    187a:	2823      	cmp	r0, #35	; 0x23
    187c:	d125      	bne.n	18ca <z_cbvprintf_impl+0x332>
				prefix = (*fmt & 0x20) ? "0x" : "0X";
    187e:	0688      	lsls	r0, r1, #26
    1880:	d521      	bpl.n	18c6 <z_cbvprintf_impl+0x32e>
    1882:	4f55      	ldr	r7, [pc, #340]	; (19d8 <z_cbvprintf_impl+0x440>)
				min_width -= 2;
    1884:	3c02      	subs	r4, #2
			data_len = convert_value(x, 16, ALPHA(*fmt),
    1886:	f001 0160 	and.w	r1, r1, #96	; 0x60
    188a:	f1a1 0b39 	sub.w	fp, r1, #57	; 0x39
	int i = 0;
    188e:	f10d 0e2d 	add.w	lr, sp, #45	; 0x2d
    1892:	2600      	movs	r6, #0
		unsigned int c = num % base;
    1894:	f002 010f 	and.w	r1, r2, #15
		if (c >= 10) {
    1898:	2909      	cmp	r1, #9
			c += alpha;
    189a:	bf88      	it	hi
    189c:	4459      	addhi	r1, fp
		buftop[--i] = c + '0';
    189e:	3130      	adds	r1, #48	; 0x30
    18a0:	f80e 1d01 	strb.w	r1, [lr, #-1]!
	} while (num);
    18a4:	2a10      	cmp	r2, #16
		num /= base;
    18a6:	ea4f 1112 	mov.w	r1, r2, lsr #4
    18aa:	ea41 7103 	orr.w	r1, r1, r3, lsl #28
    18ae:	ea4f 1013 	mov.w	r0, r3, lsr #4
	} while (num);
    18b2:	f173 0300 	sbcs.w	r3, r3, #0
		buftop[--i] = c + '0';
    18b6:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
	} while (num);
    18ba:	d208      	bcs.n	18ce <z_cbvprintf_impl+0x336>
	return -i;
    18bc:	f1c6 0b01 	rsb	fp, r6, #1
			data = buf + sizeof(buf) - data_len;
    18c0:	f106 0330 	add.w	r3, r6, #48	; 0x30
    18c4:	e7a1      	b.n	180a <z_cbvprintf_impl+0x272>
				prefix = (*fmt & 0x20) ? "0x" : "0X";
    18c6:	4f45      	ldr	r7, [pc, #276]	; (19dc <z_cbvprintf_impl+0x444>)
    18c8:	e7dc      	b.n	1884 <z_cbvprintf_impl+0x2ec>
	prefix = "";
    18ca:	4f41      	ldr	r7, [pc, #260]	; (19d0 <z_cbvprintf_impl+0x438>)
    18cc:	e7db      	b.n	1886 <z_cbvprintf_impl+0x2ee>
		buftop[--i] = c + '0';
    18ce:	4666      	mov	r6, ip
		num /= base;
    18d0:	460a      	mov	r2, r1
    18d2:	4603      	mov	r3, r0
    18d4:	e7de      	b.n	1894 <z_cbvprintf_impl+0x2fc>
			data = va_arg(ap, char *);
    18d6:	f855 6b04 	ldr.w	r6, [r5], #4
			data_len = strlen(data);
    18da:	4630      	mov	r0, r6
    18dc:	f005 fa2f 	bl	6d3e <strlen>
			if (precision >= 0 && data_len > precision) {
    18e0:	f1b8 0f00 	cmp.w	r8, #0
			data_len = strlen(data);
    18e4:	4683      	mov	fp, r0
			if (precision >= 0 && data_len > precision) {
    18e6:	db02      	blt.n	18ee <z_cbvprintf_impl+0x356>
    18e8:	4540      	cmp	r0, r8
    18ea:	bfa8      	it	ge
    18ec:	46c3      	movge	fp, r8
	prefix = "";
    18ee:	4f38      	ldr	r7, [pc, #224]	; (19d0 <z_cbvprintf_impl+0x438>)
			precision = 0;
    18f0:	f04f 0800 	mov.w	r8, #0
		precision -= data_len;
    18f4:	eba8 030b 	sub.w	r3, r8, fp
		if (precision > 0) {
    18f8:	2b00      	cmp	r3, #0
    18fa:	dd92      	ble.n	1822 <z_cbvprintf_impl+0x28a>
			min_width -= precision;
    18fc:	eba4 0408 	sub.w	r4, r4, r8
    1900:	e7a6      	b.n	1850 <z_cbvprintf_impl+0x2b8>
			buf[0] = c;
    1902:	f855 3b04 	ldr.w	r3, [r5], #4
    1906:	f88d 3018 	strb.w	r3, [sp, #24]
		min_width -= data_len;
    190a:	3c01      	subs	r4, #1
		precision -= data_len;
    190c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
			data_len = 1;
    1910:	f04f 0b01 	mov.w	fp, #1
			data = buf;
    1914:	ae06      	add	r6, sp, #24
    1916:	e79a      	b.n	184e <z_cbvprintf_impl+0x2b6>
    1918:	46a0      	mov	r8, r4
    191a:	e7eb      	b.n	18f4 <z_cbvprintf_impl+0x35c>
    191c:	9302      	str	r3, [sp, #8]
			while (--min_width >= 0) {
				OUTC(' ');
    191e:	9901      	ldr	r1, [sp, #4]
    1920:	2020      	movs	r0, #32
    1922:	47d0      	blx	sl
    1924:	9b02      	ldr	r3, [sp, #8]
			while (--min_width >= 0) {
    1926:	f1b8 0801 	subs.w	r8, r8, #1
    192a:	d5f7      	bpl.n	191c <z_cbvprintf_impl+0x384>
    192c:	ea24 72e4 	bic.w	r2, r4, r4, asr #31
    1930:	3c01      	subs	r4, #1
    1932:	4491      	add	r9, r2
    1934:	1aa4      	subs	r4, r4, r2
    1936:	46b8      	mov	r8, r7
    1938:	e006      	b.n	1948 <z_cbvprintf_impl+0x3b0>
    193a:	9304      	str	r3, [sp, #16]
    193c:	9202      	str	r2, [sp, #8]
			}
		}
		while (*prefix) {
			OUTC(*prefix++);
    193e:	9901      	ldr	r1, [sp, #4]
    1940:	47d0      	blx	sl
    1942:	9a02      	ldr	r2, [sp, #8]
    1944:	9b04      	ldr	r3, [sp, #16]
    1946:	4690      	mov	r8, r2
		while (*prefix) {
    1948:	4642      	mov	r2, r8
    194a:	f812 0b01 	ldrb.w	r0, [r2], #1
    194e:	2800      	cmp	r0, #0
    1950:	d1f3      	bne.n	193a <z_cbvprintf_impl+0x3a2>
    1952:	461a      	mov	r2, r3
		}
		while (--precision >= 0) {
    1954:	3a01      	subs	r2, #1
    1956:	d515      	bpl.n	1984 <z_cbvprintf_impl+0x3ec>
    1958:	2b00      	cmp	r3, #0
    195a:	bfac      	ite	ge
    195c:	ebc7 0703 	rsbge	r7, r7, r3
    1960:	427f      	neglt	r7, r7
    1962:	465b      	mov	r3, fp
			OUTC('0');
		}
		while (--data_len >= 0) {
    1964:	3b01      	subs	r3, #1
    1966:	d515      	bpl.n	1994 <z_cbvprintf_impl+0x3fc>
    1968:	f1bb 0f00 	cmp.w	fp, #0
    196c:	bfa8      	it	ge
    196e:	445f      	addge	r7, fp
    1970:	444f      	add	r7, r9
    1972:	4626      	mov	r6, r4
			OUTC(*data++);
		}
		while (--min_width >= 0) {
    1974:	3e01      	subs	r6, #1
    1976:	d514      	bpl.n	19a2 <z_cbvprintf_impl+0x40a>
    1978:	2c00      	cmp	r4, #0
    197a:	bfa8      	it	ge
    197c:	193f      	addge	r7, r7, r4
    197e:	eb07 0908 	add.w	r9, r7, r8
    1982:	e613      	b.n	15ac <z_cbvprintf_impl+0x14>
    1984:	9304      	str	r3, [sp, #16]
    1986:	9202      	str	r2, [sp, #8]
			OUTC('0');
    1988:	9901      	ldr	r1, [sp, #4]
    198a:	2030      	movs	r0, #48	; 0x30
    198c:	47d0      	blx	sl
    198e:	9b04      	ldr	r3, [sp, #16]
    1990:	9a02      	ldr	r2, [sp, #8]
    1992:	e7df      	b.n	1954 <z_cbvprintf_impl+0x3bc>
    1994:	9302      	str	r3, [sp, #8]
			OUTC(*data++);
    1996:	9901      	ldr	r1, [sp, #4]
    1998:	f816 0b01 	ldrb.w	r0, [r6], #1
    199c:	47d0      	blx	sl
    199e:	9b02      	ldr	r3, [sp, #8]
    19a0:	e7e0      	b.n	1964 <z_cbvprintf_impl+0x3cc>
			OUTC(' ');
    19a2:	9901      	ldr	r1, [sp, #4]
    19a4:	2020      	movs	r0, #32
    19a6:	47d0      	blx	sl
    19a8:	e7e4      	b.n	1974 <z_cbvprintf_impl+0x3dc>
				padding_mode = PAD_ZERO;
    19aa:	2201      	movs	r2, #1
    19ac:	e6d3      	b.n	1756 <z_cbvprintf_impl+0x1be>
				precision = va_arg(ap, int);
    19ae:	4690      	mov	r8, r2
    19b0:	e661      	b.n	1676 <z_cbvprintf_impl+0xde>
    19b2:	4614      	mov	r4, r2
    19b4:	e65f      	b.n	1676 <z_cbvprintf_impl+0xde>
				length_mod = 'L';
    19b6:	234c      	movs	r3, #76	; 0x4c
    19b8:	e65d      	b.n	1676 <z_cbvprintf_impl+0xde>
		}

		goto start;
	}
}
    19ba:	4648      	mov	r0, r9
    19bc:	b00d      	add	sp, #52	; 0x34
    19be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    19c2:	bf00      	nop
    19c4:	0000a3c6 	.word	0x0000a3c6
    19c8:	0000a04a 	.word	0x0000a04a
    19cc:	0000a04c 	.word	0x0000a04c
    19d0:	0000a5a8 	.word	0x0000a5a8
    19d4:	0000a054 	.word	0x0000a054
    19d8:	0000a04e 	.word	0x0000a04e
    19dc:	0000a051 	.word	0x0000a051

000019e0 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    19e0:	f002 bbf8 	b.w	41d4 <SystemInit>

000019e4 <flash_area_open>:
		user_cb(&flash_map[i], user_data);
	}
}

int flash_area_open(uint8_t id, const struct flash_area **fap)
{
    19e4:	b570      	push	{r4, r5, r6, lr}
	const struct flash_area *area;

	if (flash_map == NULL) {
    19e6:	4b11      	ldr	r3, [pc, #68]	; (1a2c <flash_area_open+0x48>)
    19e8:	681c      	ldr	r4, [r3, #0]
{
    19ea:	460d      	mov	r5, r1
	if (flash_map == NULL) {
    19ec:	b1dc      	cbz	r4, 1a26 <flash_area_open+0x42>
extern const struct flash_area *flash_map;
extern const int flash_map_entries;

static inline struct flash_area const *get_flash_area_from_id(int idx)
{
	for (int i = 0; i < flash_map_entries; i++) {
    19ee:	4b10      	ldr	r3, [pc, #64]	; (1a30 <flash_area_open+0x4c>)
    19f0:	6819      	ldr	r1, [r3, #0]
    19f2:	2300      	movs	r3, #0
    19f4:	428b      	cmp	r3, r1
    19f6:	db02      	blt.n	19fe <flash_area_open+0x1a>
		return -EACCES;
	}

	area = get_flash_area_from_id(id);
	if (area == NULL) {
		return -ENOENT;
    19f8:	f06f 0001 	mvn.w	r0, #1
	}

	*fap = area;

	return 0;
}
    19fc:	bd70      	pop	{r4, r5, r6, pc}
		if (flash_map[i].fa_id == idx) {
    19fe:	4622      	mov	r2, r4
    1a00:	f812 6b10 	ldrb.w	r6, [r2], #16
    1a04:	4286      	cmp	r6, r0
    1a06:	d002      	beq.n	1a0e <flash_area_open+0x2a>
	for (int i = 0; i < flash_map_entries; i++) {
    1a08:	3301      	adds	r3, #1
    1a0a:	4614      	mov	r4, r2
    1a0c:	e7f2      	b.n	19f4 <flash_area_open+0x10>
	if (!area->fa_dev || !device_is_ready(area->fa_dev)) {
    1a0e:	68e0      	ldr	r0, [r4, #12]
    1a10:	b910      	cbnz	r0, 1a18 <flash_area_open+0x34>
		return -ENODEV;
    1a12:	f06f 0012 	mvn.w	r0, #18
    1a16:	e7f1      	b.n	19fc <flash_area_open+0x18>
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
    1a18:	f007 fb6e 	bl	90f8 <z_device_is_ready>
	if (!area->fa_dev || !device_is_ready(area->fa_dev)) {
    1a1c:	2800      	cmp	r0, #0
    1a1e:	d0f8      	beq.n	1a12 <flash_area_open+0x2e>
	*fap = area;
    1a20:	602c      	str	r4, [r5, #0]
	return 0;
    1a22:	2000      	movs	r0, #0
    1a24:	e7ea      	b.n	19fc <flash_area_open+0x18>
		return -EACCES;
    1a26:	f06f 000c 	mvn.w	r0, #12
    1a2a:	e7e7      	b.n	19fc <flash_area_open+0x18>
    1a2c:	2000000c 	.word	0x2000000c
    1a30:	00009738 	.word	0x00009738

00001a34 <flash_area_get_sectors>:

	return true;
}

int flash_area_get_sectors(int idx, uint32_t *cnt, struct flash_sector *ret)
{
    1a34:	b570      	push	{r4, r5, r6, lr}
    1a36:	b088      	sub	sp, #32
    1a38:	4605      	mov	r5, r0
    1a3a:	460c      	mov	r4, r1
	int rc = flash_area_open(idx, &fa);
    1a3c:	b2c0      	uxtb	r0, r0
    1a3e:	4669      	mov	r1, sp
{
    1a40:	4616      	mov	r6, r2
	int rc = flash_area_open(idx, &fa);
    1a42:	f7ff ffcf 	bl	19e4 <flash_area_open>
	if (rc < 0 || fa == NULL) {
    1a46:	2800      	cmp	r0, #0
    1a48:	db1b      	blt.n	1a82 <flash_area_get_sectors+0x4e>
    1a4a:	9800      	ldr	r0, [sp, #0]
    1a4c:	b1c8      	cbz	r0, 1a82 <flash_area_get_sectors+0x4e>
	cb_data->area_off = fa->fa_off;
    1a4e:	6843      	ldr	r3, [r0, #4]
    1a50:	9302      	str	r3, [sp, #8]
	cb_data->area_len = fa->fa_size;
    1a52:	6883      	ldr	r3, [r0, #8]
	cb_data->ret_len = *cnt;
    1a54:	6822      	ldr	r2, [r4, #0]
	cb_data->area_idx = idx;
    1a56:	9501      	str	r5, [sp, #4]
	cb_data->ret = ret;
    1a58:	e9cd 3603 	strd	r3, r6, [sp, #12]
	cb_data->ret_idx = 0U;
    1a5c:	2300      	movs	r3, #0
	cb_data->status = 0;
    1a5e:	e9cd 2306 	strd	r2, r3, [sp, #24]
	cb_data->ret_idx = 0U;
    1a62:	9305      	str	r3, [sp, #20]
	flash_dev = fa->fa_dev;
    1a64:	68c5      	ldr	r5, [r0, #12]
	flash_area_close(fa);
    1a66:	f005 f8e2 	bl	6c2e <flash_area_close>
	if (flash_dev == NULL) {
    1a6a:	b16d      	cbz	r5, 1a88 <flash_area_get_sectors+0x54>
	flash_page_foreach(flash_dev, cb, cb_data);
    1a6c:	4628      	mov	r0, r5
    1a6e:	4908      	ldr	r1, [pc, #32]	; (1a90 <flash_area_get_sectors+0x5c>)
    1a70:	aa01      	add	r2, sp, #4
    1a72:	f005 fd18 	bl	74a6 <flash_page_foreach>
	if (cb_data->status == 0) {
    1a76:	9807      	ldr	r0, [sp, #28]
    1a78:	b908      	cbnz	r0, 1a7e <flash_area_get_sectors+0x4a>
		*cnt = cb_data->ret_idx;
    1a7a:	9b05      	ldr	r3, [sp, #20]
    1a7c:	6023      	str	r3, [r4, #0]
	struct layout_data data;

	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
}
    1a7e:	b008      	add	sp, #32
    1a80:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
    1a82:	f06f 0015 	mvn.w	r0, #21
    1a86:	e7fa      	b.n	1a7e <flash_area_get_sectors+0x4a>
		return -ENODEV;
    1a88:	f06f 0012 	mvn.w	r0, #18
	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
    1a8c:	e7f7      	b.n	1a7e <flash_area_get_sectors+0x4a>
    1a8e:	bf00      	nop
    1a90:	00006cc9 	.word	0x00006cc9

00001a94 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    1a94:	4901      	ldr	r1, [pc, #4]	; (1a9c <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    1a96:	2210      	movs	r2, #16
	str	r2, [r1]
    1a98:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    1a9a:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    1a9c:	e000ed10 	.word	0xe000ed10

00001aa0 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    1aa0:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    1aa2:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    1aa4:	f380 8811 	msr	BASEPRI, r0
	isb
    1aa8:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    1aac:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    1ab0:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    1ab2:	b662      	cpsie	i
	isb
    1ab4:	f3bf 8f6f 	isb	sy

	bx	lr
    1ab8:	4770      	bx	lr
    1aba:	bf00      	nop

00001abc <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    1abc:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    1abe:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    1ac0:	f381 8811 	msr	BASEPRI, r1

	wfe
    1ac4:	bf20      	wfe

	msr	BASEPRI, r0
    1ac6:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    1aca:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    1acc:	4770      	bx	lr
    1ace:	bf00      	nop

00001ad0 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    1ad0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    1ad2:	4605      	mov	r5, r0

	if (esf != NULL) {
    1ad4:	460c      	mov	r4, r1
    1ad6:	b1c9      	cbz	r1, 1b0c <z_arm_fatal_error+0x3c>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    1ad8:	688b      	ldr	r3, [r1, #8]
    1ada:	9300      	str	r3, [sp, #0]
    1adc:	e9d1 2300 	ldrd	r2, r3, [r1]
    1ae0:	480e      	ldr	r0, [pc, #56]	; (1b1c <z_arm_fatal_error+0x4c>)
    1ae2:	2145      	movs	r1, #69	; 0x45
    1ae4:	f005 f896 	bl	6c14 <z_log_minimal_printk>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    1ae8:	6963      	ldr	r3, [r4, #20]
    1aea:	9300      	str	r3, [sp, #0]
    1aec:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
    1af0:	480b      	ldr	r0, [pc, #44]	; (1b20 <z_arm_fatal_error+0x50>)
    1af2:	2145      	movs	r1, #69	; 0x45
    1af4:	f005 f88e 	bl	6c14 <z_log_minimal_printk>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    1af8:	69e2      	ldr	r2, [r4, #28]
    1afa:	480a      	ldr	r0, [pc, #40]	; (1b24 <z_arm_fatal_error+0x54>)
    1afc:	2145      	movs	r1, #69	; 0x45
    1afe:	f005 f889 	bl	6c14 <z_log_minimal_printk>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    1b02:	69a2      	ldr	r2, [r4, #24]
    1b04:	4808      	ldr	r0, [pc, #32]	; (1b28 <z_arm_fatal_error+0x58>)
    1b06:	2145      	movs	r1, #69	; 0x45
    1b08:	f005 f884 	bl	6c14 <z_log_minimal_printk>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    1b0c:	4621      	mov	r1, r4
    1b0e:	4628      	mov	r0, r5
}
    1b10:	b003      	add	sp, #12
    1b12:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	z_fatal_error(reason, esf);
    1b16:	f003 bca1 	b.w	545c <z_fatal_error>
    1b1a:	bf00      	nop
    1b1c:	0000a05a 	.word	0x0000a05a
    1b20:	0000a08e 	.word	0x0000a08e
    1b24:	0000a0c2 	.word	0x0000a0c2
    1b28:	0000a0d6 	.word	0x0000a0d6

00001b2c <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    1b2c:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    1b2e:	2800      	cmp	r0, #0
    1b30:	db07      	blt.n	1b42 <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1b32:	4a04      	ldr	r2, [pc, #16]	; (1b44 <arch_irq_enable+0x18>)
    1b34:	0941      	lsrs	r1, r0, #5
    1b36:	2301      	movs	r3, #1
    1b38:	f000 001f 	and.w	r0, r0, #31
    1b3c:	4083      	lsls	r3, r0
    1b3e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
    1b42:	4770      	bx	lr
    1b44:	e000e100 	.word	0xe000e100

00001b48 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    1b48:	4b05      	ldr	r3, [pc, #20]	; (1b60 <arch_irq_is_enabled+0x18>)
    1b4a:	0942      	lsrs	r2, r0, #5
    1b4c:	f000 001f 	and.w	r0, r0, #31
    1b50:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    1b54:	2301      	movs	r3, #1
    1b56:	fa03 f000 	lsl.w	r0, r3, r0
}
    1b5a:	4010      	ands	r0, r2
    1b5c:	4770      	bx	lr
    1b5e:	bf00      	nop
    1b60:	e000e100 	.word	0xe000e100

00001b64 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    1b64:	b240      	sxtb	r0, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    1b66:	2800      	cmp	r0, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1b68:	bfa8      	it	ge
    1b6a:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
		prio += _IRQ_PRIO_OFFSET;
    1b6e:	f101 0101 	add.w	r1, r1, #1
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1b72:	bfb8      	it	lt
    1b74:	4b06      	ldrlt	r3, [pc, #24]	; (1b90 <z_arm_irq_priority_set+0x2c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1b76:	ea4f 1141 	mov.w	r1, r1, lsl #5
    1b7a:	bfac      	ite	ge
    1b7c:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1b80:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1b84:	b2c9      	uxtb	r1, r1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1b86:	bfb4      	ite	lt
    1b88:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1b8a:	f880 1300 	strbge.w	r1, [r0, #768]	; 0x300
}
    1b8e:	4770      	bx	lr
    1b90:	e000ed14 	.word	0xe000ed14

00001b94 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    1b94:	bf30      	wfi
    b z_SysNmiOnReset
    1b96:	f7ff bffd 	b.w	1b94 <z_SysNmiOnReset>
    1b9a:	bf00      	nop

00001b9c <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    1b9c:	4a0b      	ldr	r2, [pc, #44]	; (1bcc <z_arm_prep_c+0x30>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    1b9e:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    1ba0:	4b0b      	ldr	r3, [pc, #44]	; (1bd0 <z_arm_prep_c+0x34>)
    1ba2:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    1ba6:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    1ba8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1bac:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    1bb0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    1bb4:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    1bb8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    1bbc:	f003 fcd6 	bl	556c <z_bss_zero>
	z_data_copy();
    1bc0:	f004 fafa 	bl	61b8 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    1bc4:	f000 fac8 	bl	2158 <z_arm_interrupt_init>
	z_cstart();
    1bc8:	f003 fd14 	bl	55f4 <z_cstart>
    1bcc:	00000000 	.word	0x00000000
    1bd0:	e000ed00 	.word	0xe000ed00

00001bd4 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    1bd4:	4a09      	ldr	r2, [pc, #36]	; (1bfc <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    1bd6:	490a      	ldr	r1, [pc, #40]	; (1c00 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    1bd8:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    1bda:	6809      	ldr	r1, [r1, #0]
    1bdc:	6799      	str	r1, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1bde:	4909      	ldr	r1, [pc, #36]	; (1c04 <arch_swap+0x30>)
	_current->arch.basepri = key;
    1be0:	6758      	str	r0, [r3, #116]	; 0x74
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1be2:	684b      	ldr	r3, [r1, #4]
    1be4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    1be8:	604b      	str	r3, [r1, #4]
    1bea:	2300      	movs	r3, #0
    1bec:	f383 8811 	msr	BASEPRI, r3
    1bf0:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    1bf4:	6893      	ldr	r3, [r2, #8]
}
    1bf6:	6f98      	ldr	r0, [r3, #120]	; 0x78
    1bf8:	4770      	bx	lr
    1bfa:	bf00      	nop
    1bfc:	2000119c 	.word	0x2000119c
    1c00:	00009aac 	.word	0x00009aac
    1c04:	e000ed00 	.word	0xe000ed00

00001c08 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    1c08:	4912      	ldr	r1, [pc, #72]	; (1c54 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    1c0a:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    1c0c:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    1c10:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    1c12:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    1c16:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    1c1a:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    1c1c:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    1c20:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    1c24:	4f0c      	ldr	r7, [pc, #48]	; (1c58 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    1c26:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    1c2a:	698a      	ldr	r2, [r1, #24]

    str r2, [r1, #_kernel_offset_to_current]
    1c2c:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    1c2e:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    1c30:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
    1c32:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    1c34:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    1c36:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    1c3a:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    1c3c:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    1c3e:	f000 fb27 	bl	2290 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    1c42:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    1c46:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    1c4a:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    1c4e:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    1c52:	4770      	bx	lr
    ldr r1, =_kernel
    1c54:	2000119c 	.word	0x2000119c
    ldr v4, =_SCS_ICSR
    1c58:	e000ed04 	.word	0xe000ed04

00001c5c <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    1c5c:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    1c60:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    1c62:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    1c66:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    1c6a:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    1c6c:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    1c70:	2902      	cmp	r1, #2
    beq _oops
    1c72:	d0ff      	beq.n	1c74 <_oops>

00001c74 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    1c74:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
    1c76:	f005 f849 	bl	6d0c <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
    1c7a:	bd01      	pop	{r0, pc}

00001c7c <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    1c7c:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    1c80:	9b00      	ldr	r3, [sp, #0]
    1c82:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
    1c86:	490a      	ldr	r1, [pc, #40]	; (1cb0 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
    1c88:	9b01      	ldr	r3, [sp, #4]
    1c8a:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    1c8e:	9b02      	ldr	r3, [sp, #8]
    1c90:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
    1c94:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    1c98:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    1c9c:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
    1ca0:	f842 1c08 	str.w	r1, [r2, #-8]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    1ca4:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    1ca6:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    1ca8:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    1caa:	6743      	str	r3, [r0, #116]	; 0x74
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    1cac:	4770      	bx	lr
    1cae:	bf00      	nop
    1cb0:	000069ad 	.word	0x000069ad

00001cb4 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    1cb4:	4a09      	ldr	r2, [pc, #36]	; (1cdc <z_check_thread_stack_fail+0x28>)
{
    1cb6:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
    1cb8:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
    1cba:	b170      	cbz	r0, 1cda <z_check_thread_stack_fail+0x26>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    1cbc:	f113 0f16 	cmn.w	r3, #22
    1cc0:	6e40      	ldr	r0, [r0, #100]	; 0x64
    1cc2:	d005      	beq.n	1cd0 <z_check_thread_stack_fail+0x1c>
    1cc4:	f1a0 0240 	sub.w	r2, r0, #64	; 0x40
    1cc8:	429a      	cmp	r2, r3
    1cca:	d805      	bhi.n	1cd8 <z_check_thread_stack_fail+0x24>
    1ccc:	4283      	cmp	r3, r0
    1cce:	d203      	bcs.n	1cd8 <z_check_thread_stack_fail+0x24>
		return 0;
    1cd0:	4281      	cmp	r1, r0
    1cd2:	bf28      	it	cs
    1cd4:	2000      	movcs	r0, #0
    1cd6:	4770      	bx	lr
    1cd8:	2000      	movs	r0, #0
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
}
    1cda:	4770      	bx	lr
    1cdc:	2000119c 	.word	0x2000119c

00001ce0 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    1ce0:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    1ce2:	4b09      	ldr	r3, [pc, #36]	; (1d08 <arch_switch_to_main_thread+0x28>)
    1ce4:	6098      	str	r0, [r3, #8]
{
    1ce6:	460d      	mov	r5, r1
    1ce8:	4614      	mov	r4, r2
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    1cea:	f000 fad1 	bl	2290 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    1cee:	4620      	mov	r0, r4
    1cf0:	f385 8809 	msr	PSP, r5
    1cf4:	2100      	movs	r1, #0
    1cf6:	b663      	cpsie	if
    1cf8:	f381 8811 	msr	BASEPRI, r1
    1cfc:	f3bf 8f6f 	isb	sy
    1d00:	2200      	movs	r2, #0
    1d02:	2300      	movs	r3, #0
    1d04:	f004 fe52 	bl	69ac <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    1d08:	2000119c 	.word	0x2000119c

00001d0c <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    1d0c:	b501      	push	{r0, lr}
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    1d0e:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    1d12:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    1d16:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    1d1a:	4904      	ldr	r1, [pc, #16]	; (1d2c <_isr_wrapper+0x20>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    1d1c:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    1d1e:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    1d20:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    1d22:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    1d26:	4902      	ldr	r1, [pc, #8]	; (1d30 <_isr_wrapper+0x24>)
	bx r1
    1d28:	4708      	bx	r1
    1d2a:	0000      	.short	0x0000
	ldr r1, =_sw_isr_table
    1d2c:	0000952c 	.word	0x0000952c
	ldr r1, =z_arm_int_exit
    1d30:	00001d35 	.word	0x00001d35

00001d34 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    1d34:	4b04      	ldr	r3, [pc, #16]	; (1d48 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    1d36:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    1d38:	6998      	ldr	r0, [r3, #24]
	cmp r0, r1
    1d3a:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    1d3c:	d003      	beq.n	1d46 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    1d3e:	4903      	ldr	r1, [pc, #12]	; (1d4c <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    1d40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    1d44:	600a      	str	r2, [r1, #0]

00001d46 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    1d46:	4770      	bx	lr
	ldr r3, =_kernel
    1d48:	2000119c 	.word	0x2000119c
	ldr r1, =_SCS_ICSR
    1d4c:	e000ed04 	.word	0xe000ed04

00001d50 <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
    1d50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    1d54:	4c32      	ldr	r4, [pc, #200]	; (1e20 <mem_manage_fault+0xd0>)
{
    1d56:	4607      	mov	r7, r0
    1d58:	4688      	mov	r8, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
    1d5a:	4832      	ldr	r0, [pc, #200]	; (1e24 <mem_manage_fault+0xd4>)
    1d5c:	2145      	movs	r1, #69	; 0x45
{
    1d5e:	4615      	mov	r5, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
    1d60:	f004 ff58 	bl	6c14 <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    1d64:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1d66:	06de      	lsls	r6, r3, #27
    1d68:	d503      	bpl.n	1d72 <mem_manage_fault+0x22>
		PR_FAULT_INFO("  Stacking error (context area might be"
    1d6a:	482f      	ldr	r0, [pc, #188]	; (1e28 <mem_manage_fault+0xd8>)
    1d6c:	2145      	movs	r1, #69	; 0x45
    1d6e:	f004 ff51 	bl	6c14 <z_log_minimal_printk>
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    1d72:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1d74:	0718      	lsls	r0, r3, #28
    1d76:	d503      	bpl.n	1d80 <mem_manage_fault+0x30>
		PR_FAULT_INFO("  Unstacking error");
    1d78:	482c      	ldr	r0, [pc, #176]	; (1e2c <mem_manage_fault+0xdc>)
    1d7a:	2145      	movs	r1, #69	; 0x45
    1d7c:	f004 ff4a 	bl	6c14 <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    1d80:	4c27      	ldr	r4, [pc, #156]	; (1e20 <mem_manage_fault+0xd0>)
    1d82:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1d84:	0799      	lsls	r1, r3, #30
    1d86:	d428      	bmi.n	1dda <mem_manage_fault+0x8a>
	uint32_t mmfar = -EINVAL;
    1d88:	f06f 0615 	mvn.w	r6, #21
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    1d8c:	4c24      	ldr	r4, [pc, #144]	; (1e20 <mem_manage_fault+0xd0>)
    1d8e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1d90:	07db      	lsls	r3, r3, #31
    1d92:	d503      	bpl.n	1d9c <mem_manage_fault+0x4c>
		PR_FAULT_INFO("  Instruction Access Violation");
    1d94:	4826      	ldr	r0, [pc, #152]	; (1e30 <mem_manage_fault+0xe0>)
    1d96:	2145      	movs	r1, #69	; 0x45
    1d98:	f004 ff3c 	bl	6c14 <z_log_minimal_printk>
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    1d9c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1d9e:	069c      	lsls	r4, r3, #26
    1da0:	d503      	bpl.n	1daa <mem_manage_fault+0x5a>
		PR_FAULT_INFO(
    1da2:	4824      	ldr	r0, [pc, #144]	; (1e34 <mem_manage_fault+0xe4>)
    1da4:	2145      	movs	r1, #69	; 0x45
    1da6:	f004 ff35 	bl	6c14 <z_log_minimal_printk>
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    1daa:	4c1d      	ldr	r4, [pc, #116]	; (1e20 <mem_manage_fault+0xd0>)
    1dac:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1dae:	06d8      	lsls	r0, r3, #27
    1db0:	d428      	bmi.n	1e04 <mem_manage_fault+0xb4>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    1db2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    1db4:	0799      	lsls	r1, r3, #30
    1db6:	d425      	bmi.n	1e04 <mem_manage_fault+0xb4>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    1db8:	2000      	movs	r0, #0
	 * lazy stacking Memory Manage fault. At the time of writing, this
	 * can happen when printing.  If that's true, we should clear the
	 * pending flag in addition to the clearing the reason for the fault
	 */
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    1dba:	6aa3      	ldr	r3, [r4, #40]	; 0x28
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
	}
#endif /* CONFIG_ARMV7_M_ARMV8_M_FP */

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    1dbc:	4a18      	ldr	r2, [pc, #96]	; (1e20 <mem_manage_fault+0xd0>)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    1dbe:	069b      	lsls	r3, r3, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
    1dc0:	bf42      	ittt	mi
    1dc2:	6a63      	ldrmi	r3, [r4, #36]	; 0x24
    1dc4:	f423 5300 	bicmi.w	r3, r3, #8192	; 0x2000
    1dc8:	6263      	strmi	r3, [r4, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    1dca:	6a93      	ldr	r3, [r2, #40]	; 0x28
    1dcc:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    1dd0:	6293      	str	r3, [r2, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
    1dd2:	2300      	movs	r3, #0
    1dd4:	702b      	strb	r3, [r5, #0]

	return reason;
}
    1dd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		PR_FAULT_INFO("  Data Access Violation");
    1dda:	4817      	ldr	r0, [pc, #92]	; (1e38 <mem_manage_fault+0xe8>)
    1ddc:	2145      	movs	r1, #69	; 0x45
    1dde:	f004 ff19 	bl	6c14 <z_log_minimal_printk>
		uint32_t temp = SCB->MMFAR;
    1de2:	6b66      	ldr	r6, [r4, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    1de4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1de6:	061a      	lsls	r2, r3, #24
    1de8:	d5ce      	bpl.n	1d88 <mem_manage_fault+0x38>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    1dea:	4814      	ldr	r0, [pc, #80]	; (1e3c <mem_manage_fault+0xec>)
    1dec:	4632      	mov	r2, r6
    1dee:	2145      	movs	r1, #69	; 0x45
    1df0:	f004 ff10 	bl	6c14 <z_log_minimal_printk>
			if (from_hard_fault != 0) {
    1df4:	f1b8 0f00 	cmp.w	r8, #0
    1df8:	d0c8      	beq.n	1d8c <mem_manage_fault+0x3c>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    1dfa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1dfc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    1e00:	62a3      	str	r3, [r4, #40]	; 0x28
    1e02:	e7c3      	b.n	1d8c <mem_manage_fault+0x3c>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    1e04:	6863      	ldr	r3, [r4, #4]
    1e06:	051a      	lsls	r2, r3, #20
    1e08:	d5d6      	bpl.n	1db8 <mem_manage_fault+0x68>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    1e0a:	4639      	mov	r1, r7
    1e0c:	4630      	mov	r0, r6
    1e0e:	f7ff ff51 	bl	1cb4 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    1e12:	2800      	cmp	r0, #0
    1e14:	d0d0      	beq.n	1db8 <mem_manage_fault+0x68>
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    1e16:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    1e1a:	2002      	movs	r0, #2
    1e1c:	e7cd      	b.n	1dba <mem_manage_fault+0x6a>
    1e1e:	bf00      	nop
    1e20:	e000ed00 	.word	0xe000ed00
    1e24:	0000a109 	.word	0x0000a109
    1e28:	0000a124 	.word	0x0000a124
    1e2c:	0000a15c 	.word	0x0000a15c
    1e30:	0000a1ac 	.word	0x0000a1ac
    1e34:	0000a1d0 	.word	0x0000a1d0
    1e38:	0000a174 	.word	0x0000a174
    1e3c:	0000a191 	.word	0x0000a191

00001e40 <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
    1e40:	b510      	push	{r4, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    1e42:	4c1d      	ldr	r4, [pc, #116]	; (1eb8 <usage_fault.constprop.0+0x78>)
	PR_FAULT_INFO("***** USAGE FAULT *****");
    1e44:	481d      	ldr	r0, [pc, #116]	; (1ebc <usage_fault.constprop.0+0x7c>)
    1e46:	2145      	movs	r1, #69	; 0x45
    1e48:	f004 fee4 	bl	6c14 <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    1e4c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1e4e:	019b      	lsls	r3, r3, #6
    1e50:	d503      	bpl.n	1e5a <usage_fault.constprop.0+0x1a>
		PR_FAULT_INFO("  Division by zero");
    1e52:	481b      	ldr	r0, [pc, #108]	; (1ec0 <usage_fault.constprop.0+0x80>)
    1e54:	2145      	movs	r1, #69	; 0x45
    1e56:	f004 fedd 	bl	6c14 <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    1e5a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1e5c:	01dc      	lsls	r4, r3, #7
    1e5e:	d503      	bpl.n	1e68 <usage_fault.constprop.0+0x28>
		PR_FAULT_INFO("  Unaligned memory access");
    1e60:	4818      	ldr	r0, [pc, #96]	; (1ec4 <usage_fault.constprop.0+0x84>)
    1e62:	2145      	movs	r1, #69	; 0x45
    1e64:	f004 fed6 	bl	6c14 <z_log_minimal_printk>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    1e68:	4c13      	ldr	r4, [pc, #76]	; (1eb8 <usage_fault.constprop.0+0x78>)
    1e6a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1e6c:	0318      	lsls	r0, r3, #12
    1e6e:	d503      	bpl.n	1e78 <usage_fault.constprop.0+0x38>
		PR_FAULT_INFO("  No coprocessor instructions");
    1e70:	4815      	ldr	r0, [pc, #84]	; (1ec8 <usage_fault.constprop.0+0x88>)
    1e72:	2145      	movs	r1, #69	; 0x45
    1e74:	f004 fece 	bl	6c14 <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    1e78:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1e7a:	0359      	lsls	r1, r3, #13
    1e7c:	d503      	bpl.n	1e86 <usage_fault.constprop.0+0x46>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    1e7e:	4813      	ldr	r0, [pc, #76]	; (1ecc <usage_fault.constprop.0+0x8c>)
    1e80:	2145      	movs	r1, #69	; 0x45
    1e82:	f004 fec7 	bl	6c14 <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    1e86:	4c0c      	ldr	r4, [pc, #48]	; (1eb8 <usage_fault.constprop.0+0x78>)
    1e88:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1e8a:	039a      	lsls	r2, r3, #14
    1e8c:	d503      	bpl.n	1e96 <usage_fault.constprop.0+0x56>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    1e8e:	4810      	ldr	r0, [pc, #64]	; (1ed0 <usage_fault.constprop.0+0x90>)
    1e90:	2145      	movs	r1, #69	; 0x45
    1e92:	f004 febf 	bl	6c14 <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    1e96:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1e98:	03db      	lsls	r3, r3, #15
    1e9a:	d503      	bpl.n	1ea4 <usage_fault.constprop.0+0x64>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    1e9c:	480d      	ldr	r0, [pc, #52]	; (1ed4 <usage_fault.constprop.0+0x94>)
    1e9e:	2145      	movs	r1, #69	; 0x45
    1ea0:	f004 feb8 	bl	6c14 <z_log_minimal_printk>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    1ea4:	4a04      	ldr	r2, [pc, #16]	; (1eb8 <usage_fault.constprop.0+0x78>)
    1ea6:	6a93      	ldr	r3, [r2, #40]	; 0x28
    1ea8:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    1eac:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    1eb0:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
    1eb2:	2000      	movs	r0, #0
    1eb4:	bd10      	pop	{r4, pc}
    1eb6:	bf00      	nop
    1eb8:	e000ed00 	.word	0xe000ed00
    1ebc:	0000a204 	.word	0x0000a204
    1ec0:	0000a221 	.word	0x0000a221
    1ec4:	0000a239 	.word	0x0000a239
    1ec8:	0000a258 	.word	0x0000a258
    1ecc:	0000a27b 	.word	0x0000a27b
    1ed0:	0000a2a5 	.word	0x0000a2a5
    1ed4:	0000a2c4 	.word	0x0000a2c4

00001ed8 <bus_fault.constprop.0>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    1ed8:	b570      	push	{r4, r5, r6, lr}
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    1eda:	4c23      	ldr	r4, [pc, #140]	; (1f68 <bus_fault.constprop.0+0x90>)
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    1edc:	4606      	mov	r6, r0
    1ede:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
    1ee0:	4822      	ldr	r0, [pc, #136]	; (1f6c <bus_fault.constprop.0+0x94>)
    1ee2:	2145      	movs	r1, #69	; 0x45
    1ee4:	f004 fe96 	bl	6c14 <z_log_minimal_printk>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    1ee8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1eea:	04d9      	lsls	r1, r3, #19
    1eec:	d503      	bpl.n	1ef6 <bus_fault.constprop.0+0x1e>
		PR_FAULT_INFO("  Stacking error");
    1eee:	4820      	ldr	r0, [pc, #128]	; (1f70 <bus_fault.constprop.0+0x98>)
    1ef0:	2145      	movs	r1, #69	; 0x45
    1ef2:	f004 fe8f 	bl	6c14 <z_log_minimal_printk>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    1ef6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1ef8:	051a      	lsls	r2, r3, #20
    1efa:	d503      	bpl.n	1f04 <bus_fault.constprop.0+0x2c>
		PR_FAULT_INFO("  Unstacking error");
    1efc:	481d      	ldr	r0, [pc, #116]	; (1f74 <bus_fault.constprop.0+0x9c>)
    1efe:	2145      	movs	r1, #69	; 0x45
    1f00:	f004 fe88 	bl	6c14 <z_log_minimal_printk>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    1f04:	4c18      	ldr	r4, [pc, #96]	; (1f68 <bus_fault.constprop.0+0x90>)
    1f06:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1f08:	059b      	lsls	r3, r3, #22
    1f0a:	d510      	bpl.n	1f2e <bus_fault.constprop.0+0x56>
		PR_FAULT_INFO("  Precise data bus error");
    1f0c:	481a      	ldr	r0, [pc, #104]	; (1f78 <bus_fault.constprop.0+0xa0>)
    1f0e:	2145      	movs	r1, #69	; 0x45
    1f10:	f004 fe80 	bl	6c14 <z_log_minimal_printk>
		STORE_xFAR(bfar, SCB->BFAR);
    1f14:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    1f16:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1f18:	0418      	lsls	r0, r3, #16
    1f1a:	d508      	bpl.n	1f2e <bus_fault.constprop.0+0x56>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    1f1c:	4817      	ldr	r0, [pc, #92]	; (1f7c <bus_fault.constprop.0+0xa4>)
    1f1e:	2145      	movs	r1, #69	; 0x45
    1f20:	f004 fe78 	bl	6c14 <z_log_minimal_printk>
			if (from_hard_fault != 0) {
    1f24:	b11e      	cbz	r6, 1f2e <bus_fault.constprop.0+0x56>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    1f26:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1f28:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    1f2c:	62a3      	str	r3, [r4, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    1f2e:	4c0e      	ldr	r4, [pc, #56]	; (1f68 <bus_fault.constprop.0+0x90>)
    1f30:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1f32:	0559      	lsls	r1, r3, #21
    1f34:	d503      	bpl.n	1f3e <bus_fault.constprop.0+0x66>
		PR_FAULT_INFO("  Imprecise data bus error");
    1f36:	4812      	ldr	r0, [pc, #72]	; (1f80 <bus_fault.constprop.0+0xa8>)
    1f38:	2145      	movs	r1, #69	; 0x45
    1f3a:	f004 fe6b 	bl	6c14 <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    1f3e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1f40:	05da      	lsls	r2, r3, #23
    1f42:	d50b      	bpl.n	1f5c <bus_fault.constprop.0+0x84>
		PR_FAULT_INFO("  Instruction bus error");
    1f44:	480f      	ldr	r0, [pc, #60]	; (1f84 <bus_fault.constprop.0+0xac>)
    1f46:	2145      	movs	r1, #69	; 0x45
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    1f48:	f004 fe64 	bl	6c14 <z_log_minimal_printk>
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    1f4c:	4a06      	ldr	r2, [pc, #24]	; (1f68 <bus_fault.constprop.0+0x90>)
    1f4e:	6a93      	ldr	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    1f50:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    1f52:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    1f56:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    1f58:	7028      	strb	r0, [r5, #0]
}
    1f5a:	bd70      	pop	{r4, r5, r6, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    1f5c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1f5e:	049b      	lsls	r3, r3, #18
    1f60:	d5f4      	bpl.n	1f4c <bus_fault.constprop.0+0x74>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    1f62:	4809      	ldr	r0, [pc, #36]	; (1f88 <bus_fault.constprop.0+0xb0>)
    1f64:	2145      	movs	r1, #69	; 0x45
    1f66:	e7ef      	b.n	1f48 <bus_fault.constprop.0+0x70>
    1f68:	e000ed00 	.word	0xe000ed00
    1f6c:	0000a2f4 	.word	0x0000a2f4
    1f70:	0000a30f 	.word	0x0000a30f
    1f74:	0000a15c 	.word	0x0000a15c
    1f78:	0000a325 	.word	0x0000a325
    1f7c:	0000a343 	.word	0x0000a343
    1f80:	0000a35d 	.word	0x0000a35d
    1f84:	0000a37d 	.word	0x0000a37d
    1f88:	0000a1d0 	.word	0x0000a1d0

00001f8c <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    1f8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    1f90:	4b5d      	ldr	r3, [pc, #372]	; (2108 <z_arm_fault+0x17c>)
    1f92:	685f      	ldr	r7, [r3, #4]
{
    1f94:	b08a      	sub	sp, #40	; 0x28
    1f96:	4605      	mov	r5, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    1f98:	f3c7 0408 	ubfx	r4, r7, #0, #9
    1f9c:	2600      	movs	r6, #0
    1f9e:	f386 8811 	msr	BASEPRI, r6
    1fa2:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    1fa6:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    1faa:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    1fae:	d107      	bne.n	1fc0 <z_arm_fault+0x34>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    1fb0:	f002 030c 	and.w	r3, r2, #12
    1fb4:	2b08      	cmp	r3, #8
    1fb6:	d114      	bne.n	1fe2 <z_arm_fault+0x56>
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    1fb8:	4854      	ldr	r0, [pc, #336]	; (210c <z_arm_fault+0x180>)
    1fba:	2145      	movs	r1, #69	; 0x45
    1fbc:	f004 fe2a 	bl	6c14 <z_log_minimal_printk>
	*nested_exc = false;
    1fc0:	2600      	movs	r6, #0
		return NULL;
    1fc2:	4635      	mov	r5, r6
	*recoverable = false;
    1fc4:	f04f 0800 	mov.w	r8, #0
	switch (fault) {
    1fc8:	1ee3      	subs	r3, r4, #3
	*recoverable = false;
    1fca:	f88d 8007 	strb.w	r8, [sp, #7]
	switch (fault) {
    1fce:	2b09      	cmp	r3, #9
    1fd0:	f200 8087 	bhi.w	20e2 <z_arm_fault+0x156>
    1fd4:	e8df f003 	tbb	[pc, r3]
    1fd8:	767e7a0a 	.word	0x767e7a0a
    1fdc:	85858585 	.word	0x85858585
    1fe0:	8285      	.short	0x8285
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    1fe2:	0710      	lsls	r0, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
    1fe4:	bf4c      	ite	mi
    1fe6:	460d      	movmi	r5, r1
			*nested_exc = true;
    1fe8:	2601      	movpl	r6, #1
    1fea:	e7eb      	b.n	1fc4 <z_arm_fault+0x38>
	PR_FAULT_INFO("***** HARD FAULT *****");
    1fec:	4848      	ldr	r0, [pc, #288]	; (2110 <z_arm_fault+0x184>)
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    1fee:	4c46      	ldr	r4, [pc, #280]	; (2108 <z_arm_fault+0x17c>)
	PR_FAULT_INFO("***** HARD FAULT *****");
    1ff0:	2145      	movs	r1, #69	; 0x45
    1ff2:	f004 fe0f 	bl	6c14 <z_log_minimal_printk>
	*recoverable = false;
    1ff6:	f88d 8007 	strb.w	r8, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    1ffa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    1ffc:	079a      	lsls	r2, r3, #30
    1ffe:	d505      	bpl.n	200c <z_arm_fault+0x80>
		PR_EXC("  Bus fault on vector table read");
    2000:	4844      	ldr	r0, [pc, #272]	; (2114 <z_arm_fault+0x188>)
    2002:	2145      	movs	r1, #69	; 0x45
	PR_FAULT_INFO(
    2004:	f004 fe06 	bl	6c14 <z_log_minimal_printk>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    2008:	2400      	movs	r4, #0
    200a:	e033      	b.n	2074 <z_arm_fault+0xe8>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    200c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    200e:	2b00      	cmp	r3, #0
    2010:	da02      	bge.n	2018 <z_arm_fault+0x8c>
		PR_EXC("  Debug event");
    2012:	4841      	ldr	r0, [pc, #260]	; (2118 <z_arm_fault+0x18c>)
    2014:	2145      	movs	r1, #69	; 0x45
    2016:	e7f5      	b.n	2004 <z_arm_fault+0x78>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    2018:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    201a:	005b      	lsls	r3, r3, #1
    201c:	d5f4      	bpl.n	2008 <z_arm_fault+0x7c>
		PR_EXC("  Fault escalation (see below)");
    201e:	483f      	ldr	r0, [pc, #252]	; (211c <z_arm_fault+0x190>)
    2020:	2145      	movs	r1, #69	; 0x45
    2022:	f004 fdf7 	bl	6c14 <z_log_minimal_printk>
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    2026:	6963      	ldr	r3, [r4, #20]
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
    2028:	69aa      	ldr	r2, [r5, #24]
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    202a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    202e:	6163      	str	r3, [r4, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    2030:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2034:	f3bf 8f6f 	isb	sy
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    2038:	6963      	ldr	r3, [r4, #20]
	uint16_t fault_insn = *(ret_addr - 1);
    203a:	f832 2c02 	ldrh.w	r2, [r2, #-2]
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    203e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    2042:	6163      	str	r3, [r4, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    2044:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2048:	f3bf 8f6f 	isb	sy
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    204c:	f64d 7302 	movw	r3, #57090	; 0xdf02
    2050:	429a      	cmp	r2, r3
    2052:	d009      	beq.n	2068 <z_arm_fault+0xdc>
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
    2054:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2056:	b2db      	uxtb	r3, r3
    2058:	b333      	cbz	r3, 20a8 <z_arm_fault+0x11c>
			reason = mem_manage_fault(esf, 1, recoverable);
    205a:	f10d 0207 	add.w	r2, sp, #7
    205e:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    2060:	4628      	mov	r0, r5
    2062:	f7ff fe75 	bl	1d50 <mem_manage_fault>
    2066:	e02f      	b.n	20c8 <z_arm_fault+0x13c>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
    2068:	682a      	ldr	r2, [r5, #0]
    206a:	482d      	ldr	r0, [pc, #180]	; (2120 <z_arm_fault+0x194>)
    206c:	2145      	movs	r1, #69	; 0x45
    206e:	f004 fdd1 	bl	6c14 <z_log_minimal_printk>
			reason = esf->basic.r0;
    2072:	682c      	ldr	r4, [r5, #0]
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    2074:	f89d 3007 	ldrb.w	r3, [sp, #7]
    2078:	b99b      	cbnz	r3, 20a2 <z_arm_fault+0x116>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    207a:	2220      	movs	r2, #32
    207c:	4629      	mov	r1, r5
    207e:	a802      	add	r0, sp, #8
    2080:	f004 fe74 	bl	6d6c <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    2084:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2086:	2e00      	cmp	r6, #0
    2088:	d038      	beq.n	20fc <z_arm_fault+0x170>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    208a:	f3c3 0208 	ubfx	r2, r3, #0, #9
    208e:	b922      	cbnz	r2, 209a <z_arm_fault+0x10e>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    2090:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    2094:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    2098:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    209a:	a902      	add	r1, sp, #8
    209c:	4620      	mov	r0, r4
    209e:	f7ff fd17 	bl	1ad0 <z_arm_fatal_error>
}
    20a2:	b00a      	add	sp, #40	; 0x28
    20a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
    20a8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    20aa:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
    20ae:	d005      	beq.n	20bc <z_arm_fault+0x130>
			reason = bus_fault(esf, 1, recoverable);
    20b0:	f10d 0107 	add.w	r1, sp, #7
    20b4:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    20b6:	f7ff ff0f 	bl	1ed8 <bus_fault.constprop.0>
    20ba:	e005      	b.n	20c8 <z_arm_fault+0x13c>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
    20bc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    20be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    20c2:	d3a1      	bcc.n	2008 <z_arm_fault+0x7c>
			reason = usage_fault(esf);
    20c4:	f7ff febc 	bl	1e40 <usage_fault.constprop.0>
    20c8:	4604      	mov	r4, r0
    20ca:	e7d3      	b.n	2074 <z_arm_fault+0xe8>
		reason = mem_manage_fault(esf, 0, recoverable);
    20cc:	f10d 0207 	add.w	r2, sp, #7
    20d0:	2100      	movs	r1, #0
    20d2:	e7c5      	b.n	2060 <z_arm_fault+0xd4>
		reason = bus_fault(esf, 0, recoverable);
    20d4:	f10d 0107 	add.w	r1, sp, #7
    20d8:	2000      	movs	r0, #0
    20da:	e7ec      	b.n	20b6 <z_arm_fault+0x12a>
	PR_FAULT_INFO(
    20dc:	4811      	ldr	r0, [pc, #68]	; (2124 <z_arm_fault+0x198>)
    20de:	2145      	movs	r1, #69	; 0x45
    20e0:	e790      	b.n	2004 <z_arm_fault+0x78>
	PR_FAULT_INFO("***** %s %d) *****",
    20e2:	4911      	ldr	r1, [pc, #68]	; (2128 <z_arm_fault+0x19c>)
    20e4:	4a11      	ldr	r2, [pc, #68]	; (212c <z_arm_fault+0x1a0>)
    20e6:	4812      	ldr	r0, [pc, #72]	; (2130 <z_arm_fault+0x1a4>)
    20e8:	f417 7ff8 	tst.w	r7, #496	; 0x1f0
    20ec:	bf08      	it	eq
    20ee:	460a      	moveq	r2, r1
    20f0:	f1a4 0310 	sub.w	r3, r4, #16
    20f4:	2145      	movs	r1, #69	; 0x45
    20f6:	f004 fd8d 	bl	6c14 <z_log_minimal_printk>
}
    20fa:	e785      	b.n	2008 <z_arm_fault+0x7c>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    20fc:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    2100:	f023 0301 	bic.w	r3, r3, #1
    2104:	e7c8      	b.n	2098 <z_arm_fault+0x10c>
    2106:	bf00      	nop
    2108:	e000ed00 	.word	0xe000ed00
    210c:	0000a3c8 	.word	0x0000a3c8
    2110:	0000a3f8 	.word	0x0000a3f8
    2114:	0000a414 	.word	0x0000a414
    2118:	0000a43a 	.word	0x0000a43a
    211c:	0000a44d 	.word	0x0000a44d
    2120:	0000a471 	.word	0x0000a471
    2124:	0000a492 	.word	0x0000a492
    2128:	0000a39a 	.word	0x0000a39a
    212c:	0000a3af 	.word	0x0000a3af
    2130:	0000a4bb 	.word	0x0000a4bb

00002134 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    2134:	4a02      	ldr	r2, [pc, #8]	; (2140 <z_arm_fault_init+0xc>)
    2136:	6953      	ldr	r3, [r2, #20]
    2138:	f043 0310 	orr.w	r3, r3, #16
    213c:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    213e:	4770      	bx	lr
    2140:	e000ed00 	.word	0xe000ed00

00002144 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    2144:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    2148:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    214c:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    214e:	4672      	mov	r2, lr
	bl z_arm_fault
    2150:	f7ff ff1c 	bl	1f8c <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    2154:	bd01      	pop	{r0, pc}
    2156:	bf00      	nop

00002158 <z_arm_interrupt_init>:
    2158:	4804      	ldr	r0, [pc, #16]	; (216c <z_arm_interrupt_init+0x14>)
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    215a:	2300      	movs	r3, #0
    215c:	2120      	movs	r1, #32
    215e:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    2160:	3301      	adds	r3, #1
    2162:	2b27      	cmp	r3, #39	; 0x27
    2164:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    2168:	d1f9      	bne.n	215e <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    216a:	4770      	bx	lr
    216c:	e000e100 	.word	0xe000e100

00002170 <__start>:
    strb r0, [r1]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    2170:	2000      	movs	r0, #0
    msr CONTROL, r0
    2172:	f380 8814 	msr	CONTROL, r0
    isb
    2176:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    217a:	f7ff fc31 	bl	19e0 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    217e:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    2180:	490d      	ldr	r1, [pc, #52]	; (21b8 <__start+0x48>)
    str r0, [r1]
    2182:	6008      	str	r0, [r1, #0]
    dsb
    2184:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    2188:	480c      	ldr	r0, [pc, #48]	; (21bc <__start+0x4c>)
    msr msp, r0
    218a:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    218e:	f000 f82b 	bl	21e8 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    2192:	2020      	movs	r0, #32
    msr BASEPRI, r0
    2194:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    2198:	4809      	ldr	r0, [pc, #36]	; (21c0 <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    219a:	f44f 6104 	mov.w	r1, #2112	; 0x840
    adds r0, r0, r1
    219e:	1840      	adds	r0, r0, r1
    msr PSP, r0
    21a0:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    21a4:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    21a8:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    21aa:	4308      	orrs	r0, r1
    msr CONTROL, r0
    21ac:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    21b0:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    21b4:	f7ff fcf2 	bl	1b9c <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
    21b8:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    21bc:	20006100 	.word	0x20006100
    ldr r0, =z_interrupt_stacks
    21c0:	20002f40 	.word	0x20002f40

000021c4 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    21c4:	4907      	ldr	r1, [pc, #28]	; (21e4 <z_arm_clear_arm_mpu_config+0x20>)
    21c6:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90

	for (i = 0; i < num_regions; i++) {
    21ca:	2300      	movs	r3, #0
	int num_regions =
    21cc:	f3c2 2207 	ubfx	r2, r2, #8, #8
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
  MPU->RASR = 0U;
    21d0:	4618      	mov	r0, r3
	for (i = 0; i < num_regions; i++) {
    21d2:	4293      	cmp	r3, r2
    21d4:	db00      	blt.n	21d8 <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
    21d6:	4770      	bx	lr
  MPU->RNR = rnr;
    21d8:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  MPU->RASR = 0U;
    21dc:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
    21e0:	3301      	adds	r3, #1
    21e2:	e7f6      	b.n	21d2 <z_arm_clear_arm_mpu_config+0xe>
    21e4:	e000ed00 	.word	0xe000ed00

000021e8 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
    21e8:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    21ea:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    21ec:	2300      	movs	r3, #0
    21ee:	f383 8813 	msr	FAULTMASK, r3

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    21f2:	f7ff ffe7 	bl	21c4 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    21f6:	4b14      	ldr	r3, [pc, #80]	; (2248 <z_arm_init_arch_hw_at_boot+0x60>)
    21f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    21fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    2200:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    2204:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    2208:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    220c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    2210:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    2214:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    2218:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    221c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    2220:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    2224:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    2228:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    222c:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    2230:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    2234:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
    2238:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
  __ASM volatile ("cpsie i" : : : "memory");
    223c:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    223e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2242:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    2246:	bd08      	pop	{r3, pc}
    2248:	e000e100 	.word	0xe000e100

0000224c <z_impl_k_thread_abort>:
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    224c:	4b08      	ldr	r3, [pc, #32]	; (2270 <z_impl_k_thread_abort+0x24>)
    224e:	689b      	ldr	r3, [r3, #8]
    2250:	4283      	cmp	r3, r0
    2252:	d10b      	bne.n	226c <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    2254:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    2258:	b143      	cbz	r3, 226c <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    225a:	4b06      	ldr	r3, [pc, #24]	; (2274 <z_impl_k_thread_abort+0x28>)
    225c:	685a      	ldr	r2, [r3, #4]
    225e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    2262:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
    2264:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    2266:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    226a:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
    226c:	f003 bf32 	b.w	60d4 <z_thread_abort>
    2270:	2000119c 	.word	0x2000119c
    2274:	e000ed00 	.word	0xe000ed00

00002278 <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    2278:	4b02      	ldr	r3, [pc, #8]	; (2284 <z_arm_configure_static_mpu_regions+0xc>)
    227a:	4a03      	ldr	r2, [pc, #12]	; (2288 <z_arm_configure_static_mpu_regions+0x10>)
    227c:	4803      	ldr	r0, [pc, #12]	; (228c <z_arm_configure_static_mpu_regions+0x14>)
    227e:	2101      	movs	r1, #1
    2280:	f000 b87c 	b.w	237c <arm_core_mpu_configure_static_mpu_regions>
    2284:	20010000 	.word	0x20010000
    2288:	20000000 	.word	0x20000000
    228c:	0000979c 	.word	0x0000979c

00002290 <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    2290:	6e42      	ldr	r2, [r0, #100]	; 0x64
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    2292:	4b05      	ldr	r3, [pc, #20]	; (22a8 <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
    2294:	3a40      	subs	r2, #64	; 0x40
	dynamic_regions[region_num].start = guard_start;
    2296:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    2298:	4a04      	ldr	r2, [pc, #16]	; (22ac <z_arm_configure_dynamic_mpu_regions+0x1c>)
    229a:	2140      	movs	r1, #64	; 0x40
    229c:	e9c3 1201 	strd	r1, r2, [r3, #4]

	/* Configure the dynamic MPU regions */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    22a0:	4618      	mov	r0, r3
    22a2:	2101      	movs	r1, #1
    22a4:	f000 b874 	b.w	2390 <arm_core_mpu_configure_dynamic_mpu_regions>
    22a8:	20000fc8 	.word	0x20000fc8
    22ac:	150b0000 	.word	0x150b0000

000022b0 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    22b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    22b2:	4e24      	ldr	r6, [pc, #144]	; (2344 <mpu_configure_regions+0x94>)
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    22b4:	2500      	movs	r5, #0
    22b6:	428d      	cmp	r5, r1
    22b8:	da0f      	bge.n	22da <mpu_configure_regions+0x2a>
		if (regions[i].size == 0U) {
    22ba:	6844      	ldr	r4, [r0, #4]
    22bc:	2c00      	cmp	r4, #0
    22be:	d03e      	beq.n	233e <mpu_configure_regions+0x8e>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
    22c0:	b19b      	cbz	r3, 22ea <mpu_configure_regions+0x3a>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
    22c2:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    22c6:	ea14 0f0c 	tst.w	r4, ip
    22ca:	d008      	beq.n	22de <mpu_configure_regions+0x2e>
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
    22cc:	481e      	ldr	r0, [pc, #120]	; (2348 <mpu_configure_regions+0x98>)
    22ce:	462a      	mov	r2, r5
    22d0:	2145      	movs	r1, #69	; 0x45
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    22d2:	f004 fc9f 	bl	6c14 <z_log_minimal_printk>
			return -EINVAL;
    22d6:	f06f 0215 	mvn.w	r2, #21
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    22da:	4610      	mov	r0, r2
    22dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		&&
    22de:	2c1f      	cmp	r4, #31
    22e0:	d9f4      	bls.n	22cc <mpu_configure_regions+0x1c>
		((part->start & (part->size - 1U)) == 0U);
    22e2:	6807      	ldr	r7, [r0, #0]
		&&
    22e4:	ea1c 0f07 	tst.w	ip, r7
    22e8:	d1f0      	bne.n	22cc <mpu_configure_regions+0x1c>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    22ea:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
    22ec:	6807      	ldr	r7, [r0, #0]
#if defined(CONFIG_CPU_AARCH32_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    22ee:	f8d0 c008 	ldr.w	ip, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
    22f2:	fa5f fe82 	uxtb.w	lr, r2
	if (size <= 32U) {
    22f6:	d910      	bls.n	231a <mpu_configure_regions+0x6a>
	if (size > (1UL << 31)) {
    22f8:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    22fc:	d80f      	bhi.n	231e <mpu_configure_regions+0x6e>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    22fe:	3c01      	subs	r4, #1
    2300:	fab4 f484 	clz	r4, r4
    2304:	f1c4 041f 	rsb	r4, r4, #31
    2308:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
    230a:	f1be 0f07 	cmp.w	lr, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    230e:	ea4c 0c04 	orr.w	ip, ip, r4
    2312:	d906      	bls.n	2322 <mpu_configure_regions+0x72>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    2314:	480d      	ldr	r0, [pc, #52]	; (234c <mpu_configure_regions+0x9c>)
    2316:	2145      	movs	r1, #69	; 0x45
    2318:	e7db      	b.n	22d2 <mpu_configure_regions+0x22>
		return REGION_32B;
    231a:	2408      	movs	r4, #8
    231c:	e7f5      	b.n	230a <mpu_configure_regions+0x5a>
		return REGION_4G;
    231e:	243e      	movs	r4, #62	; 0x3e
    2320:	e7f3      	b.n	230a <mpu_configure_regions+0x5a>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    2322:	f027 041f 	bic.w	r4, r7, #31
				| MPU_RBAR_VALID_Msk | index;
    2326:	4314      	orrs	r4, r2
    2328:	f044 0410 	orr.w	r4, r4, #16
    232c:	f8c6 2098 	str.w	r2, [r6, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    2330:	f8c6 409c 	str.w	r4, [r6, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    2334:	f04c 0401 	orr.w	r4, ip, #1
    2338:	f8c6 40a0 	str.w	r4, [r6, #160]	; 0xa0
		reg_index++;
    233c:	3201      	adds	r2, #1
	for (i = 0; i < regions_num; i++) {
    233e:	3501      	adds	r5, #1
    2340:	300c      	adds	r0, #12
    2342:	e7b8      	b.n	22b6 <mpu_configure_regions+0x6>
    2344:	e000ed00 	.word	0xe000ed00
    2348:	0000a4d7 	.word	0x0000a4d7
    234c:	0000a4ff 	.word	0x0000a4ff

00002350 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    2350:	4b04      	ldr	r3, [pc, #16]	; (2364 <arm_core_mpu_enable+0x14>)
    2352:	2205      	movs	r2, #5
    2354:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    2358:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    235c:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    2360:	4770      	bx	lr
    2362:	bf00      	nop
    2364:	e000ed00 	.word	0xe000ed00

00002368 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    2368:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    236c:	4b02      	ldr	r3, [pc, #8]	; (2378 <arm_core_mpu_disable+0x10>)
    236e:	2200      	movs	r2, #0
    2370:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    2374:	4770      	bx	lr
    2376:	bf00      	nop
    2378:	e000ed00 	.word	0xe000ed00

0000237c <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	*static_regions, const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    237c:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    237e:	4c03      	ldr	r4, [pc, #12]	; (238c <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    2380:	2301      	movs	r3, #1
    2382:	7822      	ldrb	r2, [r4, #0]
    2384:	f7ff ff94 	bl	22b0 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    2388:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
    238a:	bd10      	pop	{r4, pc}
    238c:	20002ad8 	.word	0x20002ad8

00002390 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	*dynamic_regions, uint8_t regions_num)
{
    2390:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    2392:	4a09      	ldr	r2, [pc, #36]	; (23b8 <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
    2394:	2300      	movs	r3, #0
    2396:	7812      	ldrb	r2, [r2, #0]
    2398:	f7ff ff8a 	bl	22b0 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    239c:	f110 0f16 	cmn.w	r0, #22
    23a0:	d003      	beq.n	23aa <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
  MPU->RNR = rnr;
    23a2:	4b06      	ldr	r3, [pc, #24]	; (23bc <arm_core_mpu_configure_dynamic_mpu_regions+0x2c>)
  MPU->RASR = 0U;
    23a4:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    23a6:	2807      	cmp	r0, #7
    23a8:	dd00      	ble.n	23ac <arm_core_mpu_configure_dynamic_mpu_regions+0x1c>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
    23aa:	bd08      	pop	{r3, pc}
  MPU->RNR = rnr;
    23ac:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
  MPU->RASR = 0U;
    23b0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    23b4:	3001      	adds	r0, #1
    23b6:	e7f6      	b.n	23a6 <arm_core_mpu_configure_dynamic_mpu_regions+0x16>
    23b8:	20002ad8 	.word	0x20002ad8
    23bc:	e000ed00 	.word	0xe000ed00

000023c0 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    23c0:	4914      	ldr	r1, [pc, #80]	; (2414 <z_arm_mpu_init+0x54>)
    23c2:	6808      	ldr	r0, [r1, #0]
    23c4:	2808      	cmp	r0, #8
{
    23c6:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    23c8:	d821      	bhi.n	240e <z_arm_mpu_init+0x4e>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    23ca:	f7ff ffcd 	bl	2368 <arm_core_mpu_disable>
    23ce:	4c12      	ldr	r4, [pc, #72]	; (2418 <z_arm_mpu_init+0x58>)
    23d0:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    23d2:	2200      	movs	r2, #0
    23d4:	4290      	cmp	r0, r2
    23d6:	f101 010c 	add.w	r1, r1, #12
    23da:	d105      	bne.n	23e8 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    23dc:	4b0f      	ldr	r3, [pc, #60]	; (241c <z_arm_mpu_init+0x5c>)
    23de:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
    23e0:	f7ff ffb6 	bl	2350 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    23e4:	2000      	movs	r0, #0
}
    23e6:	bd10      	pop	{r4, pc}
    23e8:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    23ec:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    23f0:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    23f4:	4313      	orrs	r3, r2
    23f6:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    23fa:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    23fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
    2402:	f043 0301 	orr.w	r3, r3, #1
    2406:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    240a:	3201      	adds	r2, #1
    240c:	e7e2      	b.n	23d4 <z_arm_mpu_init+0x14>
		return -1;
    240e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    2412:	e7e8      	b.n	23e6 <z_arm_mpu_init+0x26>
    2414:	000097a8 	.word	0x000097a8
    2418:	e000ed00 	.word	0xe000ed00
    241c:	20002ad8 	.word	0x20002ad8

00002420 <__stdout_hook_install>:

static int (*_stdout_hook)(int c) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int c))
{
	_stdout_hook = hook;
    2420:	4b01      	ldr	r3, [pc, #4]	; (2428 <__stdout_hook_install+0x8>)
    2422:	6018      	str	r0, [r3, #0]
}
    2424:	4770      	bx	lr
    2426:	bf00      	nop
    2428:	20000010 	.word	0x20000010

0000242c <nordicsemi_nrf52_init>:
	__asm__ volatile(
    242c:	f04f 0220 	mov.w	r2, #32
    2430:	f3ef 8311 	mrs	r3, BASEPRI
    2434:	f382 8812 	msr	BASEPRI_MAX, r2
    2438:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    243c:	4a04      	ldr	r2, [pc, #16]	; (2450 <nordicsemi_nrf52_init+0x24>)
    243e:	2101      	movs	r1, #1
    2440:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
    2444:	f383 8811 	msr	BASEPRI, r3
    2448:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    244c:	2000      	movs	r0, #0
    244e:	4770      	bx	lr
    2450:	4001e000 	.word	0x4001e000

00002454 <sys_arch_reboot>:
    }
    else
    {
        p_gpregret = &((volatile uint32_t *)&p_reg->GPREGRET)[0];
    }
    *p_gpregret = val;
    2454:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2458:	b2c0      	uxtb	r0, r0
    245a:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
    245e:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    2462:	4905      	ldr	r1, [pc, #20]	; (2478 <sys_arch_reboot+0x24>)
    2464:	4b05      	ldr	r3, [pc, #20]	; (247c <sys_arch_reboot+0x28>)
    2466:	68ca      	ldr	r2, [r1, #12]
    2468:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    246c:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    246e:	60cb      	str	r3, [r1, #12]
    2470:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    2474:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    2476:	e7fd      	b.n	2474 <sys_arch_reboot+0x20>
    2478:	e000ed00 	.word	0xe000ed00
    247c:	05fa0004 	.word	0x05fa0004

00002480 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    2480:	b120      	cbz	r0, 248c <arch_busy_wait+0xc>
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    2482:	4b03      	ldr	r3, [pc, #12]	; (2490 <arch_busy_wait+0x10>)
    2484:	0180      	lsls	r0, r0, #6
    2486:	f043 0301 	orr.w	r3, r3, #1
    248a:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    248c:	4770      	bx	lr
    248e:	bf00      	nop
    2490:	00009720 	.word	0x00009720

00002494 <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    2494:	4b08      	ldr	r3, [pc, #32]	; (24b8 <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    2496:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    2498:	1ac3      	subs	r3, r0, r3
{
    249a:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    249c:	4907      	ldr	r1, [pc, #28]	; (24bc <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
    249e:	109b      	asrs	r3, r3, #2
{
    24a0:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    24a2:	4359      	muls	r1, r3
    24a4:	4806      	ldr	r0, [pc, #24]	; (24c0 <onoff_stop+0x2c>)
    24a6:	2240      	movs	r2, #64	; 0x40
    24a8:	f004 fc93 	bl	6dd2 <stop>
	notify(mgr, res);
    24ac:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    24ae:	4601      	mov	r1, r0
	notify(mgr, res);
    24b0:	4620      	mov	r0, r4
}
    24b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    24b6:	4718      	bx	r3
    24b8:	20000fe8 	.word	0x20000fe8
    24bc:	b6db6db7 	.word	0xb6db6db7
    24c0:	00009454 	.word	0x00009454

000024c4 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    24c4:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    24c6:	4c0c      	ldr	r4, [pc, #48]	; (24f8 <onoff_start+0x34>)
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    24c8:	4a0c      	ldr	r2, [pc, #48]	; (24fc <onoff_start+0x38>)
    24ca:	2340      	movs	r3, #64	; 0x40
	size_t offset = (size_t)(mgr - data->mgr);
    24cc:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    24ce:	9300      	str	r3, [sp, #0]
{
    24d0:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    24d2:	460b      	mov	r3, r1
    24d4:	490a      	ldr	r1, [pc, #40]	; (2500 <onoff_start+0x3c>)
	size_t offset = (size_t)(mgr - data->mgr);
    24d6:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    24d8:	4361      	muls	r1, r4
{
    24da:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    24dc:	4809      	ldr	r0, [pc, #36]	; (2504 <onoff_start+0x40>)
    24de:	f004 fca4 	bl	6e2a <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    24e2:	1e01      	subs	r1, r0, #0
    24e4:	da05      	bge.n	24f2 <onoff_start+0x2e>
		notify(mgr, err);
    24e6:	4630      	mov	r0, r6
    24e8:	462b      	mov	r3, r5
	}
}
    24ea:	b002      	add	sp, #8
    24ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
    24f0:	4718      	bx	r3
}
    24f2:	b002      	add	sp, #8
    24f4:	bd70      	pop	{r4, r5, r6, pc}
    24f6:	bf00      	nop
    24f8:	20000fe8 	.word	0x20000fe8
    24fc:	00006e95 	.word	0x00006e95
    2500:	b6db6db7 	.word	0xb6db6db7
    2504:	00009454 	.word	0x00009454

00002508 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    2508:	2200      	movs	r2, #0
{
    250a:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    250c:	2101      	movs	r1, #1
{
    250e:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    2510:	4610      	mov	r0, r2
    2512:	f7ff fb27 	bl	1b64 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
    2516:	480f      	ldr	r0, [pc, #60]	; (2554 <clk_init+0x4c>)
    2518:	f002 f844 	bl	45a4 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    251c:	4b0e      	ldr	r3, [pc, #56]	; (2558 <clk_init+0x50>)
    251e:	4298      	cmp	r0, r3
    2520:	d115      	bne.n	254e <clk_init+0x46>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    2522:	f006 fd86 	bl	9032 <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
    2526:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
    2528:	490c      	ldr	r1, [pc, #48]	; (255c <clk_init+0x54>)
    252a:	4630      	mov	r0, r6
    252c:	f004 fa98 	bl	6a60 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    2530:	2800      	cmp	r0, #0
    2532:	db0b      	blt.n	254c <clk_init+0x44>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    2534:	2501      	movs	r5, #1
    2536:	6435      	str	r5, [r6, #64]	; 0x40
	struct nrf_clock_control_data *data = dev->data;
    2538:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    253a:	4908      	ldr	r1, [pc, #32]	; (255c <clk_init+0x54>)
    253c:	f104 001c 	add.w	r0, r4, #28
    2540:	f004 fa8e 	bl	6a60 <onoff_manager_init>
		if (err < 0) {
    2544:	2800      	cmp	r0, #0
    2546:	db01      	blt.n	254c <clk_init+0x44>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    2548:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
    254a:	2000      	movs	r0, #0
}
    254c:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    254e:	f06f 0004 	mvn.w	r0, #4
    2552:	e7fb      	b.n	254c <clk_init+0x44>
    2554:	00002595 	.word	0x00002595
    2558:	0bad0000 	.word	0x0bad0000
    255c:	000097c8 	.word	0x000097c8

00002560 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    2560:	b570      	push	{r4, r5, r6, lr}
    2562:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    2564:	230c      	movs	r3, #12
    2566:	4809      	ldr	r0, [pc, #36]	; (258c <clkstarted_handle.constprop.0+0x2c>)
    2568:	434b      	muls	r3, r1
    256a:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
    256c:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	sub_data->cb = NULL;
    2570:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
    2572:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
    2574:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    2576:	4418      	add	r0, r3
    2578:	f004 fc18 	bl	6dac <set_on_state>
	if (callback) {
    257c:	b12d      	cbz	r5, 258a <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    257e:	4632      	mov	r2, r6
    2580:	462b      	mov	r3, r5
    2582:	4803      	ldr	r0, [pc, #12]	; (2590 <clkstarted_handle.constprop.0+0x30>)
}
    2584:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    2588:	4718      	bx	r3
}
    258a:	bd70      	pop	{r4, r5, r6, pc}
    258c:	20000fe8 	.word	0x20000fe8
    2590:	00009454 	.word	0x00009454

00002594 <clock_event_handler>:
	switch (event) {
    2594:	b110      	cbz	r0, 259c <clock_event_handler+0x8>
    2596:	2801      	cmp	r0, #1
    2598:	d004      	beq.n	25a4 <clock_event_handler+0x10>
    259a:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    259c:	4b03      	ldr	r3, [pc, #12]	; (25ac <clock_event_handler+0x18>)
    259e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    25a0:	075b      	lsls	r3, r3, #29
    25a2:	d101      	bne.n	25a8 <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    25a4:	f7ff bfdc 	b.w	2560 <clkstarted_handle.constprop.0>
}
    25a8:	4770      	bx	lr
    25aa:	bf00      	nop
    25ac:	20000fe8 	.word	0x20000fe8

000025b0 <generic_hfclk_start>:
{
    25b0:	b508      	push	{r3, lr}
	__asm__ volatile(
    25b2:	f04f 0320 	mov.w	r3, #32
    25b6:	f3ef 8111 	mrs	r1, BASEPRI
    25ba:	f383 8812 	msr	BASEPRI_MAX, r3
    25be:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    25c2:	4a12      	ldr	r2, [pc, #72]	; (260c <generic_hfclk_start+0x5c>)
    25c4:	6813      	ldr	r3, [r2, #0]
    25c6:	f043 0002 	orr.w	r0, r3, #2
    25ca:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    25cc:	07da      	lsls	r2, r3, #31
    25ce:	d408      	bmi.n	25e2 <generic_hfclk_start+0x32>
	__asm__ volatile(
    25d0:	f381 8811 	msr	BASEPRI, r1
    25d4:	f3bf 8f6f 	isb	sy
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    25d8:	2001      	movs	r0, #1
}
    25da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    25de:	f001 bff1 	b.w	45c4 <nrfx_clock_start>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    25e2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    25e6:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    25ea:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    25ee:	07d3      	lsls	r3, r2, #31
    25f0:	d5ee      	bpl.n	25d0 <generic_hfclk_start+0x20>
			set_on_state(get_hf_flags());
    25f2:	4807      	ldr	r0, [pc, #28]	; (2610 <generic_hfclk_start+0x60>)
    25f4:	f004 fbda 	bl	6dac <set_on_state>
    25f8:	f381 8811 	msr	BASEPRI, r1
    25fc:	f3bf 8f6f 	isb	sy
		clkstarted_handle(CLOCK_DEVICE,
    2600:	2000      	movs	r0, #0
}
    2602:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    2606:	f7ff bfab 	b.w	2560 <clkstarted_handle.constprop.0>
    260a:	bf00      	nop
    260c:	20001038 	.word	0x20001038
    2610:	20001028 	.word	0x20001028

00002614 <api_blocking_start>:
{
    2614:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    2616:	2200      	movs	r2, #0
    2618:	2301      	movs	r3, #1
    261a:	e9cd 2302 	strd	r2, r3, [sp, #8]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    261e:	4a09      	ldr	r2, [pc, #36]	; (2644 <api_blocking_start+0x30>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    2620:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    2624:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    2626:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    262a:	f004 fc2c 	bl	6e86 <api_start>
	if (err < 0) {
    262e:	2800      	cmp	r0, #0
    2630:	db05      	blt.n	263e <api_blocking_start+0x2a>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
    2632:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    2636:	2300      	movs	r3, #0
    2638:	4668      	mov	r0, sp
    263a:	f003 f923 	bl	5884 <z_impl_k_sem_take>
}
    263e:	b005      	add	sp, #20
    2640:	f85d fb04 	ldr.w	pc, [sp], #4
    2644:	00006ead 	.word	0x00006ead

00002648 <lfclk_start>:
{
    2648:	b510      	push	{r4, lr}
	if (!once) {
    264a:	4c07      	ldr	r4, [pc, #28]	; (2668 <lfclk_start+0x20>)
    264c:	7823      	ldrb	r3, [r4, #0]
    264e:	b92b      	cbnz	r3, 265c <lfclk_start+0x14>
	z_impl_k_busy_wait(usec_to_wait);
    2650:	f44f 70a5 	mov.w	r0, #330	; 0x14a
    2654:	f006 feb8 	bl	93c8 <z_impl_k_busy_wait>
		once = true;
    2658:	2301      	movs	r3, #1
    265a:	7023      	strb	r3, [r4, #0]
}
    265c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    2660:	2000      	movs	r0, #0
    2662:	f001 bfaf 	b.w	45c4 <nrfx_clock_start>
    2666:	bf00      	nop
    2668:	20002ad9 	.word	0x20002ad9

0000266c <generic_hfclk_stop>:
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    266c:	4b09      	ldr	r3, [pc, #36]	; (2694 <generic_hfclk_stop+0x28>)
    266e:	f3bf 8f5b 	dmb	ish
    2672:	e853 2f00 	ldrex	r2, [r3]
    2676:	f022 0102 	bic.w	r1, r2, #2
    267a:	e843 1000 	strex	r0, r1, [r3]
    267e:	2800      	cmp	r0, #0
    2680:	d1f7      	bne.n	2672 <generic_hfclk_stop+0x6>
    2682:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    2686:	07d3      	lsls	r3, r2, #31
    2688:	d402      	bmi.n	2690 <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    268a:	2001      	movs	r0, #1
    268c:	f006 bcde 	b.w	904c <nrfx_clock_stop>
}
    2690:	4770      	bx	lr
    2692:	bf00      	nop
    2694:	20001038 	.word	0x20001038

00002698 <z_nrf_clock_control_lf_on>:
{
    2698:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    269c:	4938      	ldr	r1, [pc, #224]	; (2780 <z_nrf_clock_control_lf_on+0xe8>)
    269e:	f3bf 8f5b 	dmb	ish
    26a2:	4607      	mov	r7, r0
    26a4:	2201      	movs	r2, #1
    26a6:	e851 3f00 	ldrex	r3, [r1]
    26aa:	e841 2000 	strex	r0, r2, [r1]
    26ae:	2800      	cmp	r0, #0
    26b0:	d1f9      	bne.n	26a6 <z_nrf_clock_control_lf_on+0xe>
    26b2:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    26b6:	b933      	cbnz	r3, 26c6 <z_nrf_clock_control_lf_on+0x2e>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    26b8:	4932      	ldr	r1, [pc, #200]	; (2784 <z_nrf_clock_control_lf_on+0xec>)
		err = onoff_request(mgr, &cli);
    26ba:	4833      	ldr	r0, [pc, #204]	; (2788 <z_nrf_clock_control_lf_on+0xf0>)
    26bc:	604b      	str	r3, [r1, #4]
    26be:	60cb      	str	r3, [r1, #12]
    26c0:	608a      	str	r2, [r1, #8]
    26c2:	f004 f9e0 	bl	6a86 <onoff_request>
	switch (start_mode) {
    26c6:	1e7b      	subs	r3, r7, #1
    26c8:	2b01      	cmp	r3, #1
    26ca:	d82b      	bhi.n	2724 <z_nrf_clock_control_lf_on+0x8c>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    26cc:	2f01      	cmp	r7, #1
    26ce:	d107      	bne.n	26e0 <z_nrf_clock_control_lf_on+0x48>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    26d0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    26d4:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    26d8:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    26dc:	2b01      	cmp	r3, #1
    26de:	d021      	beq.n	2724 <z_nrf_clock_control_lf_on+0x8c>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    26e0:	f006 fd19 	bl	9116 <k_is_in_isr>
    26e4:	4605      	mov	r5, r0
    26e6:	b9f8      	cbnz	r0, 2728 <z_nrf_clock_control_lf_on+0x90>
 */
static inline bool k_is_pre_kernel(void)
{
	extern bool z_sys_post_kernel; /* in init.c */

	return !z_sys_post_kernel;
    26e8:	4b28      	ldr	r3, [pc, #160]	; (278c <z_nrf_clock_control_lf_on+0xf4>)
    26ea:	781b      	ldrb	r3, [r3, #0]
    26ec:	b1e3      	cbz	r3, 2728 <z_nrf_clock_control_lf_on+0x90>
    p_reg->INTENCLR = mask;
    26ee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    26f2:	2202      	movs	r2, #2
    26f4:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
    26f8:	4606      	mov	r6, r0
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    26fa:	f8df 8094 	ldr.w	r8, [pc, #148]	; 2790 <z_nrf_clock_control_lf_on+0xf8>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    26fe:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    2702:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    2706:	f8d4 2418 	ldr.w	r2, [r4, #1048]	; 0x418
    270a:	03d2      	lsls	r2, r2, #15
    270c:	d516      	bpl.n	273c <z_nrf_clock_control_lf_on+0xa4>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    270e:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
    2712:	2b01      	cmp	r3, #1
    2714:	d001      	beq.n	271a <z_nrf_clock_control_lf_on+0x82>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    2716:	2f01      	cmp	r7, #1
    2718:	d110      	bne.n	273c <z_nrf_clock_control_lf_on+0xa4>
	if (isr_mode) {
    271a:	b35d      	cbz	r5, 2774 <z_nrf_clock_control_lf_on+0xdc>
    271c:	f386 8811 	msr	BASEPRI, r6
    2720:	f3bf 8f6f 	isb	sy
}
    2724:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
    2728:	f04f 0320 	mov.w	r3, #32
    272c:	f3ef 8611 	mrs	r6, BASEPRI
    2730:	f383 8812 	msr	BASEPRI_MAX, r3
    2734:	f3bf 8f6f 	isb	sy
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    2738:	2501      	movs	r5, #1
    273a:	e7de      	b.n	26fa <z_nrf_clock_control_lf_on+0x62>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    273c:	b1ad      	cbz	r5, 276a <z_nrf_clock_control_lf_on+0xd2>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    273e:	4630      	mov	r0, r6
    2740:	f7ff f9bc 	bl	1abc <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    2744:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    2748:	2b00      	cmp	r3, #0
    274a:	d1da      	bne.n	2702 <z_nrf_clock_control_lf_on+0x6a>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    274c:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
    2750:	2a00      	cmp	r2, #0
    2752:	d0d6      	beq.n	2702 <z_nrf_clock_control_lf_on+0x6a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2754:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    2758:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
    275c:	2301      	movs	r3, #1
    275e:	f8c4 3518 	str.w	r3, [r4, #1304]	; 0x518
    2762:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2766:	60a3      	str	r3, [r4, #8]
}
    2768:	e7cb      	b.n	2702 <z_nrf_clock_control_lf_on+0x6a>
	return z_impl_k_sleep(timeout);
    276a:	2100      	movs	r1, #0
    276c:	2021      	movs	r0, #33	; 0x21
    276e:	f003 fc91 	bl	6094 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    2772:	e7e7      	b.n	2744 <z_nrf_clock_control_lf_on+0xac>
    p_reg->INTENSET = mask;
    2774:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2778:	2202      	movs	r2, #2
    277a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    277e:	e7d1      	b.n	2724 <z_nrf_clock_control_lf_on+0x8c>
    2780:	20000fe4 	.word	0x20000fe4
    2784:	20000fd4 	.word	0x20000fd4
    2788:	20001004 	.word	0x20001004
    278c:	20002f0c 	.word	0x20002f0c
    2790:	e000e100 	.word	0xe000e100

00002794 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    2794:	b508      	push	{r3, lr}
    2796:	4807      	ldr	r0, [pc, #28]	; (27b4 <uart_console_init+0x20>)
    2798:	f006 fcae 	bl	90f8 <z_device_is_ready>

	ARG_UNUSED(arg);

	if (!device_is_ready(uart_console_dev)) {
    279c:	b138      	cbz	r0, 27ae <uart_console_init+0x1a>
	__stdout_hook_install(console_out);
    279e:	4806      	ldr	r0, [pc, #24]	; (27b8 <uart_console_init+0x24>)
    27a0:	f7ff fe3e 	bl	2420 <__stdout_hook_install>
	__printk_hook_install(console_out);
    27a4:	4804      	ldr	r0, [pc, #16]	; (27b8 <uart_console_init+0x24>)
    27a6:	f7fe fdd5 	bl	1354 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
    27aa:	2000      	movs	r0, #0
}
    27ac:	bd08      	pop	{r3, pc}
		return -ENODEV;
    27ae:	f06f 0012 	mvn.w	r0, #18
    27b2:	e7fb      	b.n	27ac <uart_console_init+0x18>
    27b4:	00009484 	.word	0x00009484
    27b8:	000027bd 	.word	0x000027bd

000027bc <console_out>:
	if ('\n' == c) {
    27bc:	280a      	cmp	r0, #10
{
    27be:	b538      	push	{r3, r4, r5, lr}
    27c0:	4d07      	ldr	r5, [pc, #28]	; (27e0 <console_out+0x24>)
    27c2:	4604      	mov	r4, r0
	if ('\n' == c) {
    27c4:	d104      	bne.n	27d0 <console_out+0x14>
					unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    27c6:	68ab      	ldr	r3, [r5, #8]
    27c8:	210d      	movs	r1, #13
    27ca:	685b      	ldr	r3, [r3, #4]
    27cc:	4628      	mov	r0, r5
    27ce:	4798      	blx	r3
    27d0:	68ab      	ldr	r3, [r5, #8]
    27d2:	4803      	ldr	r0, [pc, #12]	; (27e0 <console_out+0x24>)
    27d4:	685b      	ldr	r3, [r3, #4]
    27d6:	b2e1      	uxtb	r1, r4
    27d8:	4798      	blx	r3
}
    27da:	4620      	mov	r0, r4
    27dc:	bd38      	pop	{r3, r4, r5, pc}
    27de:	bf00      	nop
    27e0:	00009484 	.word	0x00009484

000027e4 <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
    27e4:	b530      	push	{r4, r5, lr}
	return port->config;
    27e6:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    27e8:	7b05      	ldrb	r5, [r0, #12]
    27ea:	f001 041f 	and.w	r4, r1, #31
	nrfx_err_t err;
	uint8_t ch;

	if (mode == GPIO_INT_MODE_DISABLED) {
    27ee:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
{
    27f2:	b085      	sub	sp, #20
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    27f4:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
    27f8:	d105      	bne.n	2806 <CONFIG_MAIN_STACK_SIZE+0x6>
		nrfx_gpiote_trigger_disable(abs_pin);
    27fa:	4620      	mov	r0, r4
    27fc:	f002 f9a6 	bl	4b4c <nrfx_gpiote_trigger_disable>

		return 0;
    2800:	2000      	movs	r0, #0
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);

	return 0;
}
    2802:	b005      	add	sp, #20
    2804:	bd30      	pop	{r4, r5, pc}
	nrfx_gpiote_trigger_config_t trigger_config = {
    2806:	2500      	movs	r5, #0
	if (mode == GPIO_INT_MODE_LEVEL) {
    2808:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
    280c:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
    2810:	d114      	bne.n	283c <CONFIG_MAIN_STACK_SIZE+0x3c>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    2812:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
	nrfx_gpiote_trigger_config_t trigger_config = {
    2816:	bf0c      	ite	eq
    2818:	2304      	moveq	r3, #4
    281a:	2305      	movne	r3, #5
    281c:	f88d 3008 	strb.w	r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    2820:	2300      	movs	r3, #0
    2822:	4619      	mov	r1, r3
    2824:	aa02      	add	r2, sp, #8
    2826:	4620      	mov	r0, r4
    2828:	f001 ffc6 	bl	47b8 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    282c:	4b1d      	ldr	r3, [pc, #116]	; (28a4 <CONFIG_MAIN_STACK_SIZE+0xa4>)
    282e:	4298      	cmp	r0, r3
    2830:	d135      	bne.n	289e <CONFIG_MAIN_STACK_SIZE+0x9e>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    2832:	2101      	movs	r1, #1
    2834:	4620      	mov	r0, r4
    2836:	f002 f945 	bl	4ac4 <nrfx_gpiote_trigger_enable>
	return 0;
    283a:	e7e1      	b.n	2800 <CONFIG_MAIN_STACK_SIZE>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    283c:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
    2840:	d022      	beq.n	2888 <CONFIG_MAIN_STACK_SIZE+0x88>
    2842:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
    2846:	bf14      	ite	ne
    2848:	2301      	movne	r3, #1
    284a:	2302      	moveq	r3, #2
	nrfx_gpiote_trigger_config_t trigger_config = {
    284c:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    2850:	6883      	ldr	r3, [r0, #8]
    2852:	40cb      	lsrs	r3, r1
    2854:	07d9      	lsls	r1, r3, #31
    2856:	d4e3      	bmi.n	2820 <CONFIG_MAIN_STACK_SIZE+0x20>
    2858:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
    285c:	d1e0      	bne.n	2820 <CONFIG_MAIN_STACK_SIZE+0x20>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
    285e:	f004 031f 	and.w	r3, r4, #31
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    2862:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    2866:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    286a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    286e:	07db      	lsls	r3, r3, #31
    2870:	d4d6      	bmi.n	2820 <CONFIG_MAIN_STACK_SIZE+0x20>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    2872:	f10d 0507 	add.w	r5, sp, #7
    2876:	4629      	mov	r1, r5
    2878:	4620      	mov	r0, r4
    287a:	f002 f8cf 	bl	4a1c <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    287e:	4b0a      	ldr	r3, [pc, #40]	; (28a8 <CONFIG_MAIN_STACK_SIZE+0xa8>)
    2880:	4298      	cmp	r0, r3
    2882:	d003      	beq.n	288c <CONFIG_MAIN_STACK_SIZE+0x8c>
		trigger_config.p_in_channel = &ch;
    2884:	9503      	str	r5, [sp, #12]
    2886:	e7cb      	b.n	2820 <CONFIG_MAIN_STACK_SIZE+0x20>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    2888:	2303      	movs	r3, #3
    288a:	e7df      	b.n	284c <CONFIG_MAIN_STACK_SIZE+0x4c>
			err = nrfx_gpiote_channel_alloc(&ch);
    288c:	4628      	mov	r0, r5
    288e:	f002 f913 	bl	4ab8 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    2892:	4b04      	ldr	r3, [pc, #16]	; (28a4 <CONFIG_MAIN_STACK_SIZE+0xa4>)
    2894:	4298      	cmp	r0, r3
    2896:	d0f5      	beq.n	2884 <CONFIG_MAIN_STACK_SIZE+0x84>
				return -ENOMEM;
    2898:	f06f 000b 	mvn.w	r0, #11
    289c:	e7b1      	b.n	2802 <CONFIG_MAIN_STACK_SIZE+0x2>
		return -EINVAL;
    289e:	f06f 0015 	mvn.w	r0, #21
    28a2:	e7ae      	b.n	2802 <CONFIG_MAIN_STACK_SIZE+0x2>
    28a4:	0bad0000 	.word	0x0bad0000
    28a8:	0bad0004 	.word	0x0bad0004

000028ac <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    28ac:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    28ae:	f002 f8f3 	bl	4a98 <nrfx_gpiote_is_init>
    28b2:	4604      	mov	r4, r0
    28b4:	b968      	cbnz	r0, 28d2 <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
    28b6:	f002 f8c7 	bl	4a48 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    28ba:	4b08      	ldr	r3, [pc, #32]	; (28dc <gpio_nrfx_init+0x30>)
    28bc:	4298      	cmp	r0, r3
    28be:	d10a      	bne.n	28d6 <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    28c0:	4807      	ldr	r0, [pc, #28]	; (28e0 <gpio_nrfx_init+0x34>)
    28c2:	4621      	mov	r1, r4
    28c4:	f002 f8a4 	bl	4a10 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    28c8:	4622      	mov	r2, r4
    28ca:	2105      	movs	r1, #5
    28cc:	2006      	movs	r0, #6
    28ce:	f7ff f949 	bl	1b64 <z_arm_irq_priority_set>
		return 0;
    28d2:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    28d4:	bd10      	pop	{r4, pc}
		return -EIO;
    28d6:	f06f 0004 	mvn.w	r0, #4
    28da:	e7fb      	b.n	28d4 <gpio_nrfx_init+0x28>
    28dc:	0bad0000 	.word	0x0bad0000
    28e0:	000028e5 	.word	0x000028e5

000028e4 <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    28e4:	0943      	lsrs	r3, r0, #5
{
    28e6:	b570      	push	{r4, r5, r6, lr}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    28e8:	d107      	bne.n	28fa <nrfx_gpio_handler+0x16>
	return list->head;
    28ea:	4b0b      	ldr	r3, [pc, #44]	; (2918 <nrfx_gpio_handler+0x34>)
    28ec:	6859      	ldr	r1, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    28ee:	b121      	cbz	r1, 28fa <nrfx_gpio_handler+0x16>
	gpio_fire_callbacks(list, port, BIT(pin));
    28f0:	2501      	movs	r5, #1
	return node->next;
    28f2:	680c      	ldr	r4, [r1, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    28f4:	4e09      	ldr	r6, [pc, #36]	; (291c <nrfx_gpio_handler+0x38>)
    28f6:	4085      	lsls	r5, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    28f8:	b901      	cbnz	r1, 28fc <nrfx_gpio_handler+0x18>
}
    28fa:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->pin_mask & pins) {
    28fc:	688a      	ldr	r2, [r1, #8]
    28fe:	402a      	ands	r2, r5
    2900:	d002      	beq.n	2908 <nrfx_gpio_handler+0x24>
			cb->handler(port, cb, cb->pin_mask & pins);
    2902:	684b      	ldr	r3, [r1, #4]
    2904:	4630      	mov	r0, r6
    2906:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    2908:	b11c      	cbz	r4, 2912 <nrfx_gpio_handler+0x2e>
    290a:	6823      	ldr	r3, [r4, #0]
    290c:	4621      	mov	r1, r4
    290e:	461c      	mov	r4, r3
    2910:	e7f2      	b.n	28f8 <nrfx_gpio_handler+0x14>
    2912:	4623      	mov	r3, r4
    2914:	e7fa      	b.n	290c <nrfx_gpio_handler+0x28>
    2916:	bf00      	nop
    2918:	2000103c 	.word	0x2000103c
    291c:	0000946c 	.word	0x0000946c

00002920 <gpio_nrfx_pin_configure>:
{
    2920:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return port->config;
    2924:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    2926:	7b3b      	ldrb	r3, [r7, #12]
    2928:	f001 051f 	and.w	r5, r1, #31
    292c:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
{
    2930:	460e      	mov	r6, r1
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    2932:	4628      	mov	r0, r5
    2934:	f10d 0103 	add.w	r1, sp, #3
{
    2938:	4614      	mov	r4, r2
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    293a:	f002 f86f 	bl	4a1c <nrfx_gpiote_channel_get>
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
    293e:	f414 3f40 	tst.w	r4, #196608	; 0x30000
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    2942:	4680      	mov	r8, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
    2944:	d10b      	bne.n	295e <gpio_nrfx_pin_configure+0x3e>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
    2946:	4628      	mov	r0, r5
    2948:	f002 f928 	bl	4b9c <nrfx_gpiote_pin_uninit>
		if (free_ch) {
    294c:	4b3d      	ldr	r3, [pc, #244]	; (2a44 <gpio_nrfx_pin_configure+0x124>)
    294e:	4598      	cmp	r8, r3
    2950:	d103      	bne.n	295a <gpio_nrfx_pin_configure+0x3a>
			err = nrfx_gpiote_channel_free(ch);
    2952:	f89d 0003 	ldrb.w	r0, [sp, #3]
    2956:	f002 f8a9 	bl	4aac <nrfx_gpiote_channel_free>
		return 0;
    295a:	2000      	movs	r0, #0
    295c:	e00c      	b.n	2978 <gpio_nrfx_pin_configure+0x58>
	nrfx_gpiote_trigger_config_t trigger_config = {
    295e:	2300      	movs	r3, #0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    2960:	4619      	mov	r1, r3
    2962:	aa02      	add	r2, sp, #8
    2964:	4628      	mov	r0, r5
	nrfx_gpiote_trigger_config_t trigger_config = {
    2966:	e9cd 3302 	strd	r3, r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    296a:	f001 ff25 	bl	47b8 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    296e:	4b35      	ldr	r3, [pc, #212]	; (2a44 <gpio_nrfx_pin_configure+0x124>)
    2970:	4298      	cmp	r0, r3
    2972:	d004      	beq.n	297e <gpio_nrfx_pin_configure+0x5e>
		return NRF_GPIO_PIN_PULLUP;
    2974:	f06f 0015 	mvn.w	r0, #21
}
    2978:	b004      	add	sp, #16
    297a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (free_ch) {
    297e:	4580      	cmp	r8, r0
    2980:	d103      	bne.n	298a <gpio_nrfx_pin_configure+0x6a>
		err = nrfx_gpiote_channel_free(ch);
    2982:	f89d 0003 	ldrb.w	r0, [sp, #3]
    2986:	f002 f891 	bl	4aac <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
    298a:	03a3      	lsls	r3, r4, #14
    298c:	d54b      	bpl.n	2a26 <gpio_nrfx_pin_configure+0x106>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    298e:	f240 3306 	movw	r3, #774	; 0x306
    2992:	4023      	ands	r3, r4
    2994:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
    2998:	d019      	beq.n	29ce <gpio_nrfx_pin_configure+0xae>
    299a:	d80c      	bhi.n	29b6 <gpio_nrfx_pin_configure+0x96>
    299c:	2b06      	cmp	r3, #6
    299e:	d017      	beq.n	29d0 <gpio_nrfx_pin_configure+0xb0>
    29a0:	d804      	bhi.n	29ac <gpio_nrfx_pin_configure+0x8c>
    29a2:	b1ab      	cbz	r3, 29d0 <gpio_nrfx_pin_configure+0xb0>
    29a4:	2b02      	cmp	r3, #2
    29a6:	d1e5      	bne.n	2974 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0S1;
    29a8:	2304      	movs	r3, #4
    29aa:	e011      	b.n	29d0 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    29ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    29b0:	d1e0      	bne.n	2974 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_H0S1;
    29b2:	2301      	movs	r3, #1
    29b4:	e00c      	b.n	29d0 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    29b6:	f240 2202 	movw	r2, #514	; 0x202
    29ba:	4293      	cmp	r3, r2
    29bc:	d027      	beq.n	2a0e <gpio_nrfx_pin_configure+0xee>
    29be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
    29c2:	d026      	beq.n	2a12 <gpio_nrfx_pin_configure+0xf2>
    29c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    29c8:	d1d4      	bne.n	2974 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_S0H1;
    29ca:	2302      	movs	r3, #2
    29cc:	e000      	b.n	29d0 <gpio_nrfx_pin_configure+0xb0>
		*drive = NRF_GPIO_PIN_H0D1;
    29ce:	2307      	movs	r3, #7
		nrfx_gpiote_output_config_t output_config = {
    29d0:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    29d4:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
    29d8:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
    29dc:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
    29de:	f88d 3005 	strb.w	r3, [sp, #5]
	} else if (flags & GPIO_PULL_DOWN) {
    29e2:	bf54      	ite	pl
    29e4:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
    29e8:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    29ea:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
    29ec:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    29f0:	d511      	bpl.n	2a16 <gpio_nrfx_pin_configure+0xf6>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    29f2:	687a      	ldr	r2, [r7, #4]
    29f4:	2301      	movs	r3, #1
    29f6:	40b3      	lsls	r3, r6
    p_reg->OUTSET = set_mask;
    29f8:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    29fc:	2200      	movs	r2, #0
    29fe:	a901      	add	r1, sp, #4
    2a00:	4628      	mov	r0, r5
    2a02:	f001 ff87 	bl	4914 <nrfx_gpiote_output_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    2a06:	4b0f      	ldr	r3, [pc, #60]	; (2a44 <gpio_nrfx_pin_configure+0x124>)
    2a08:	4298      	cmp	r0, r3
    2a0a:	d0a6      	beq.n	295a <gpio_nrfx_pin_configure+0x3a>
    2a0c:	e7b2      	b.n	2974 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0H1;
    2a0e:	2305      	movs	r3, #5
    2a10:	e7de      	b.n	29d0 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    2a12:	2303      	movs	r3, #3
    2a14:	e7dc      	b.n	29d0 <gpio_nrfx_pin_configure+0xb0>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    2a16:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    2a18:	bf41      	itttt	mi
    2a1a:	2301      	movmi	r3, #1
    2a1c:	687a      	ldrmi	r2, [r7, #4]
    2a1e:	40b3      	lslmi	r3, r6
    p_reg->OUTCLR = clr_mask;
    2a20:	f8c2 350c 	strmi.w	r3, [r2, #1292]	; 0x50c
}
    2a24:	e7ea      	b.n	29fc <gpio_nrfx_pin_configure+0xdc>
	if (flags & GPIO_PULL_UP) {
    2a26:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    2a28:	f04f 0300 	mov.w	r3, #0
	} else if (flags & GPIO_PULL_DOWN) {
    2a2c:	bf54      	ite	pl
    2a2e:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
    2a32:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    2a34:	461a      	mov	r2, r3
    2a36:	a901      	add	r1, sp, #4
    2a38:	4628      	mov	r0, r5
	nrfx_gpiote_input_config_t input_config = {
    2a3a:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    2a3e:	f001 febb 	bl	47b8 <nrfx_gpiote_input_configure>
    2a42:	e7e0      	b.n	2a06 <gpio_nrfx_pin_configure+0xe6>
    2a44:	0bad0000 	.word	0x0bad0000

00002a48 <sx1509b_init>:
 *
 * @param dev Device struct
 * @return 0 if successful, failed otherwise.
 */
static int sx1509b_init(const struct device *dev)
{
    2a48:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	const struct sx1509b_config *cfg = dev->config;
    2a4c:	6847      	ldr	r7, [r0, #4]
	struct sx1509b_drv_data *drv_data = dev->data;
    2a4e:	6905      	ldr	r5, [r0, #16]
{
    2a50:	4606      	mov	r6, r0
	int rc;

	if (!device_is_ready(cfg->bus.bus)) {
    2a52:	6878      	ldr	r0, [r7, #4]
    2a54:	f006 fb50 	bl	90f8 <z_device_is_ready>
    2a58:	b998      	cbnz	r0, 2a82 <sx1509b_init+0x3a>
		LOG_ERR("I2C bus not ready");
    2a5a:	483a      	ldr	r0, [pc, #232]	; (2b44 <sx1509b_init+0xfc>)
    2a5c:	2145      	movs	r1, #69	; 0x45
    2a5e:	f004 f8d9 	bl	6c14 <z_log_minimal_printk>
		rc = -ENODEV;
    2a62:	f06f 0412 	mvn.w	r4, #18
					   SX1509B_REG_MISC_FREQ);
	}

out:
	if (rc != 0) {
		LOG_ERR("%s init failed: %d", dev->name, rc);
    2a66:	6832      	ldr	r2, [r6, #0]
    2a68:	4837      	ldr	r0, [pc, #220]	; (2b48 <sx1509b_init+0x100>)
    2a6a:	4623      	mov	r3, r4
    2a6c:	2145      	movs	r1, #69	; 0x45
    2a6e:	f004 f8d1 	bl	6c14 <z_log_minimal_printk>
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    2a72:	f105 001c 	add.w	r0, r5, #28
    2a76:	f002 fee5 	bl	5844 <z_impl_k_sem_give>
	} else {
		LOG_INF("%s init ok", dev->name);
	}
	k_sem_give(&drv_data->lock);
	return rc;
}
    2a7a:	4620      	mov	r0, r4
    2a7c:	b002      	add	sp, #8
    2a7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 */
static inline int i2c_reg_write_byte(const struct device *dev,
				     uint16_t dev_addr,
				     uint8_t reg_addr, uint8_t value)
{
	uint8_t tx_buf[2] = {reg_addr, value};
    2a82:	f241 227d 	movw	r2, #4733	; 0x127d
 * @return a value from i2c_reg_write_byte()
 */
static inline int i2c_reg_write_byte_dt(const struct i2c_dt_spec *spec,
					uint8_t reg_addr, uint8_t value)
{
	return i2c_reg_write_byte(spec->bus, spec->addr, reg_addr, value);
    2a86:	6878      	ldr	r0, [r7, #4]
    2a88:	893b      	ldrh	r3, [r7, #8]
	uint8_t tx_buf[2] = {reg_addr, value};
    2a8a:	f8ad 2004 	strh.w	r2, [sp, #4]
	return i2c_write(dev, tx_buf, 2, dev_addr);
    2a8e:	a901      	add	r1, sp, #4
    2a90:	2202      	movs	r2, #2
    2a92:	f004 fa6c 	bl	6f6e <i2c_write>
	if (rc != 0) {
    2a96:	4604      	mov	r4, r0
    2a98:	b130      	cbz	r0, 2aa8 <sx1509b_init+0x60>
		LOG_ERR("%s: reset m0 failed: %d\n", dev->name, rc);
    2a9a:	4603      	mov	r3, r0
    2a9c:	6832      	ldr	r2, [r6, #0]
    2a9e:	482b      	ldr	r0, [pc, #172]	; (2b4c <sx1509b_init+0x104>)
    2aa0:	2145      	movs	r1, #69	; 0x45
    2aa2:	f004 f8b7 	bl	6c14 <z_log_minimal_printk>
	if (rc != 0) {
    2aa6:	e7de      	b.n	2a66 <sx1509b_init+0x1e>
	uint8_t tx_buf[2] = {reg_addr, value};
    2aa8:	f243 427d 	movw	r2, #13437	; 0x347d
	return i2c_reg_write_byte(spec->bus, spec->addr, reg_addr, value);
    2aac:	6878      	ldr	r0, [r7, #4]
    2aae:	893b      	ldrh	r3, [r7, #8]
	uint8_t tx_buf[2] = {reg_addr, value};
    2ab0:	f8ad 2004 	strh.w	r2, [sp, #4]
	return i2c_write(dev, tx_buf, 2, dev_addr);
    2ab4:	a901      	add	r1, sp, #4
    2ab6:	2202      	movs	r2, #2
    2ab8:	f004 fa59 	bl	6f6e <i2c_write>
	if (rc != 0) {
    2abc:	4604      	mov	r4, r0
    2abe:	2800      	cmp	r0, #0
    2ac0:	d1d1      	bne.n	2a66 <sx1509b_init+0x1e>
	return z_impl_k_sleep(timeout);
    2ac2:	2100      	movs	r1, #0
    2ac4:	2063      	movs	r0, #99	; 0x63
    2ac6:	f003 fae5 	bl	6094 <z_impl_k_sleep>
	drv_data->pin_state = (struct sx1509b_pin_state) {
    2aca:	4621      	mov	r1, r4
    2acc:	2212      	movs	r2, #18
    2ace:	1d28      	adds	r0, r5, #4
    2ad0:	f004 f957 	bl	6d82 <memset>
    2ad4:	f24e 03e0 	movw	r3, #57568	; 0xe0e0
	drv_data->debounce_state = (struct sx1509b_debounce_state) {
    2ad8:	832c      	strh	r4, [r5, #24]
    2ada:	76ac      	strb	r4, [r5, #26]
	drv_data->pin_state = (struct sx1509b_pin_state) {
    2adc:	82ab      	strh	r3, [r5, #20]
	uint8_t tx_buf[2] = {reg_addr, value};
    2ade:	f244 021e 	movw	r2, #16414	; 0x401e
	return i2c_reg_write_byte(spec->bus, spec->addr, reg_addr, value);
    2ae2:	6878      	ldr	r0, [r7, #4]
    2ae4:	893b      	ldrh	r3, [r7, #8]
	uint8_t tx_buf[2] = {reg_addr, value};
    2ae6:	f8ad 2004 	strh.w	r2, [sp, #4]
	return i2c_write(dev, tx_buf, 2, dev_addr);
    2aea:	a901      	add	r1, sp, #4
    2aec:	2202      	movs	r2, #2
    2aee:	f004 fa3e 	bl	6f6e <i2c_write>
	drv_data->debounce_state = (struct sx1509b_debounce_state) {
    2af2:	46a0      	mov	r8, r4
	if (rc == 0) {
    2af4:	4604      	mov	r4, r0
    2af6:	2800      	cmp	r0, #0
    2af8:	d1b5      	bne.n	2a66 <sx1509b_init+0x1e>
	rc = i2c_reg_write_byte_dt(&cfg->bus, SX1509B_REG_RESET,
    2afa:	3704      	adds	r7, #4
		rc = i2c_reg_write_word_be(&cfg->bus, SX1509B_REG_DATA,
    2afc:	8aaa      	ldrh	r2, [r5, #20]
    2afe:	2110      	movs	r1, #16
    2b00:	4638      	mov	r0, r7
    2b02:	f004 fa45 	bl	6f90 <i2c_reg_write_word_be>
	if (rc == 0) {
    2b06:	4604      	mov	r4, r0
    2b08:	2800      	cmp	r0, #0
    2b0a:	d1ac      	bne.n	2a66 <sx1509b_init+0x1e>
		rc = i2c_reg_write_word_be(&cfg->bus, SX1509B_REG_DIR,
    2b0c:	8a6a      	ldrh	r2, [r5, #18]
    2b0e:	210e      	movs	r1, #14
    2b10:	4638      	mov	r0, r7
    2b12:	f004 fa3d 	bl	6f90 <i2c_reg_write_word_be>
	if (rc == 0) {
    2b16:	4604      	mov	r4, r0
    2b18:	2800      	cmp	r0, #0
    2b1a:	d1a4      	bne.n	2a66 <sx1509b_init+0x1e>
	uint8_t tx_buf[3] = { reg_addr, value };
    2b1c:	f649 031f 	movw	r3, #38943	; 0x981f
	return i2c_write_dt(bus, tx_buf, 2);
    2b20:	2202      	movs	r2, #2
    2b22:	a901      	add	r1, sp, #4
    2b24:	4638      	mov	r0, r7
	uint8_t tx_buf[3] = { reg_addr, value };
    2b26:	f8ad 3004 	strh.w	r3, [sp, #4]
    2b2a:	f88d 8006 	strb.w	r8, [sp, #6]
	return i2c_write_dt(bus, tx_buf, 2);
    2b2e:	f004 fa2b 	bl	6f88 <i2c_write_dt>
	if (rc != 0) {
    2b32:	4604      	mov	r4, r0
    2b34:	2800      	cmp	r0, #0
    2b36:	d196      	bne.n	2a66 <sx1509b_init+0x1e>
		LOG_INF("%s init ok", dev->name);
    2b38:	6832      	ldr	r2, [r6, #0]
    2b3a:	4805      	ldr	r0, [pc, #20]	; (2b50 <sx1509b_init+0x108>)
    2b3c:	2149      	movs	r1, #73	; 0x49
    2b3e:	f004 f869 	bl	6c14 <z_log_minimal_printk>
    2b42:	e796      	b.n	2a72 <sx1509b_init+0x2a>
    2b44:	0000a574 	.word	0x0000a574
    2b48:	0000a5a9 	.word	0x0000a5a9
    2b4c:	0000a58b 	.word	0x0000a58b
    2b50:	0000a5c1 	.word	0x0000a5c1

00002b54 <i2c_nrfx_twim_configure>:
	k_sem_give(&dev_data->completion_sync);
}

static int i2c_nrfx_twim_configure(const struct device *dev,
				   uint32_t i2c_config)
{
    2b54:	b508      	push	{r3, lr}
	const struct i2c_nrfx_twim_config *dev_config = dev->config;

	if (I2C_ADDR_10_BITS & i2c_config) {
    2b56:	07ca      	lsls	r2, r1, #31
	const struct i2c_nrfx_twim_config *dev_config = dev->config;
    2b58:	6843      	ldr	r3, [r0, #4]
	if (I2C_ADDR_10_BITS & i2c_config) {
    2b5a:	d409      	bmi.n	2b70 <i2c_nrfx_twim_configure+0x1c>
		return -EINVAL;
	}

	switch (I2C_SPEED_GET(i2c_config)) {
    2b5c:	f3c1 0142 	ubfx	r1, r1, #1, #3
    2b60:	2901      	cmp	r1, #1
    2b62:	d008      	beq.n	2b76 <i2c_nrfx_twim_configure+0x22>
    2b64:	2902      	cmp	r1, #2
    2b66:	d00d      	beq.n	2b84 <i2c_nrfx_twim_configure+0x30>
		nrf_twim_frequency_set(dev_config->twim.p_twim,
				       NRF_TWIM_FREQ_1000K);
		break;
#endif
	default:
		LOG_ERR("unsupported speed");
    2b68:	4808      	ldr	r0, [pc, #32]	; (2b8c <i2c_nrfx_twim_configure+0x38>)
    2b6a:	2145      	movs	r1, #69	; 0x45
    2b6c:	f004 f852 	bl	6c14 <z_log_minimal_printk>
		return -EINVAL;
    2b70:	f06f 0015 	mvn.w	r0, #21
    2b74:	e005      	b.n	2b82 <i2c_nrfx_twim_configure+0x2e>
		nrf_twim_frequency_set(dev_config->twim.p_twim,
    2b76:	681b      	ldr	r3, [r3, #0]
}

NRF_STATIC_INLINE void nrf_twim_frequency_set(NRF_TWIM_Type * p_reg,
                                              nrf_twim_frequency_t frequency)
{
    p_reg->FREQUENCY = frequency;
    2b78:	f04f 72cc 	mov.w	r2, #26738688	; 0x1980000
    2b7c:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
		return -EINVAL;
	}

	return 0;
    2b80:	2000      	movs	r0, #0
}
    2b82:	bd08      	pop	{r3, pc}
		nrf_twim_frequency_set(dev_config->twim.p_twim,
    2b84:	681b      	ldr	r3, [r3, #0]
    2b86:	f04f 62c8 	mov.w	r2, #104857600	; 0x6400000
    2b8a:	e7f7      	b.n	2b7c <i2c_nrfx_twim_configure+0x28>
    2b8c:	0000a5e8 	.word	0x0000a5e8

00002b90 <i2c_nrfx_twim_init>:
	return ret;
}
#endif /* CONFIG_PM_DEVICE */

static int i2c_nrfx_twim_init(const struct device *dev)
{
    2b90:	b570      	push	{r4, r5, r6, lr}
	const struct i2c_nrfx_twim_config *dev_config = dev->config;
    2b92:	6844      	ldr	r4, [r0, #4]
	struct i2c_nrfx_twim_data *dev_data = dev->data;
    2b94:	6906      	ldr	r6, [r0, #16]

	dev_config->irq_connect();
    2b96:	69e3      	ldr	r3, [r4, #28]
{
    2b98:	4605      	mov	r5, r0
	dev_config->irq_connect();
    2b9a:	4798      	blx	r3

#ifdef CONFIG_PINCTRL
	int err = pinctrl_apply_state(dev_config->pcfg,
    2b9c:	6a20      	ldr	r0, [r4, #32]
    2b9e:	f004 fb54 	bl	724a <pinctrl_apply_state.constprop.0>
				      COND_CODE_1(CONFIG_PM_DEVICE_RUNTIME,
						  (PINCTRL_STATE_SLEEP),
						  (PINCTRL_STATE_DEFAULT)));
	if (err < 0) {
    2ba2:	2800      	cmp	r0, #0
    2ba4:	db10      	blt.n	2bc8 <i2c_nrfx_twim_init+0x38>
		return err;
	}
#endif

	if (nrfx_twim_init(&dev_config->twim, &dev_config->twim_config,
    2ba6:	4633      	mov	r3, r6
    2ba8:	4a0a      	ldr	r2, [pc, #40]	; (2bd4 <i2c_nrfx_twim_init+0x44>)
    2baa:	f104 0108 	add.w	r1, r4, #8
    2bae:	4620      	mov	r0, r4
    2bb0:	f002 f9ba 	bl	4f28 <nrfx_twim_init>
    2bb4:	4b08      	ldr	r3, [pc, #32]	; (2bd8 <i2c_nrfx_twim_init+0x48>)
    2bb6:	4298      	cmp	r0, r3
    2bb8:	d007      	beq.n	2bca <i2c_nrfx_twim_init+0x3a>
			   event_handler, dev_data) != NRFX_SUCCESS) {
		LOG_ERR("Failed to initialize device: %s", dev->name);
    2bba:	4808      	ldr	r0, [pc, #32]	; (2bdc <i2c_nrfx_twim_init+0x4c>)
    2bbc:	682a      	ldr	r2, [r5, #0]
    2bbe:	2145      	movs	r1, #69	; 0x45
    2bc0:	f004 f828 	bl	6c14 <z_log_minimal_printk>
		return -EIO;
    2bc4:	f06f 0004 	mvn.w	r0, #4
#else
	nrfx_twim_enable(&dev_config->twim);
#endif

	return 0;
}
    2bc8:	bd70      	pop	{r4, r5, r6, pc}
	nrfx_twim_enable(&dev_config->twim);
    2bca:	4620      	mov	r0, r4
    2bcc:	f002 f9fe 	bl	4fcc <nrfx_twim_enable>
	return 0;
    2bd0:	2000      	movs	r0, #0
    2bd2:	e7f9      	b.n	2bc8 <i2c_nrfx_twim_init+0x38>
    2bd4:	00002c1d 	.word	0x00002c1d
    2bd8:	0bad0000 	.word	0x0bad0000
    2bdc:	0000a5ff 	.word	0x0000a5ff

00002be0 <i2c_nrfx_twim_recover_bus>:
{
    2be0:	b570      	push	{r4, r5, r6, lr}
	const struct i2c_nrfx_twim_config *dev_config = dev->config;
    2be2:	6844      	ldr	r4, [r0, #4]
	scl_pin = nrf_twim_scl_pin_get(dev_config->twim.p_twim);
    2be4:	6823      	ldr	r3, [r4, #0]
    return p_reg->PSEL.SCL;
    2be6:	f8d3 5508 	ldr.w	r5, [r3, #1288]	; 0x508
    return p_reg->PSEL.SDA;
    2bea:	f8d3 650c 	ldr.w	r6, [r3, #1292]	; 0x50c
		nrfx_twim_disable(&dev_config->twim);
    2bee:	4620      	mov	r0, r4
    2bf0:	f002 f9fc 	bl	4fec <nrfx_twim_disable>
NRFX_STATIC_INLINE nrfx_err_t nrfx_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin);

#ifndef NRFX_DECLARE_ONLY
NRFX_STATIC_INLINE nrfx_err_t nrfx_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin)
{
    return nrfx_twi_twim_bus_recover(scl_pin, sda_pin);
    2bf4:	4631      	mov	r1, r6
    2bf6:	4628      	mov	r0, r5
    2bf8:	f002 fbb2 	bl	5360 <nrfx_twi_twim_bus_recover>
    2bfc:	4605      	mov	r5, r0
		(void)pinctrl_apply_state(dev_config->pcfg,
    2bfe:	6a20      	ldr	r0, [r4, #32]
    2c00:	f004 fb23 	bl	724a <pinctrl_apply_state.constprop.0>
		nrfx_twim_enable(&dev_config->twim);
    2c04:	4620      	mov	r0, r4
    2c06:	f002 f9e1 	bl	4fcc <nrfx_twim_enable>
	return (err == NRFX_SUCCESS ? 0 : -EBUSY);
    2c0a:	4b03      	ldr	r3, [pc, #12]	; (2c18 <i2c_nrfx_twim_recover_bus+0x38>)
    2c0c:	429d      	cmp	r5, r3
}
    2c0e:	bf14      	ite	ne
    2c10:	f06f 000f 	mvnne.w	r0, #15
    2c14:	2000      	moveq	r0, #0
    2c16:	bd70      	pop	{r4, r5, r6, pc}
    2c18:	0bad0000 	.word	0x0bad0000

00002c1c <event_handler>:
	switch (p_event->type) {
    2c1c:	7803      	ldrb	r3, [r0, #0]
    2c1e:	2b01      	cmp	r3, #1
    2c20:	d008      	beq.n	2c34 <event_handler+0x18>
    2c22:	2b02      	cmp	r3, #2
    2c24:	d008      	beq.n	2c38 <event_handler+0x1c>
    2c26:	b94b      	cbnz	r3, 2c3c <event_handler+0x20>
		dev_data->res = NRFX_SUCCESS;
    2c28:	4b05      	ldr	r3, [pc, #20]	; (2c40 <event_handler+0x24>)
		dev_data->res = NRFX_ERROR_INTERNAL;
    2c2a:	620b      	str	r3, [r1, #32]
	z_impl_k_sem_give(sem);
    2c2c:	f101 0010 	add.w	r0, r1, #16
    2c30:	f002 be08 	b.w	5844 <z_impl_k_sem_give>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_ANACK;
    2c34:	4b03      	ldr	r3, [pc, #12]	; (2c44 <event_handler+0x28>)
    2c36:	e7f8      	b.n	2c2a <event_handler+0xe>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_DNACK;
    2c38:	4b03      	ldr	r3, [pc, #12]	; (2c48 <event_handler+0x2c>)
    2c3a:	e7f6      	b.n	2c2a <event_handler+0xe>
		dev_data->res = NRFX_ERROR_INTERNAL;
    2c3c:	4b03      	ldr	r3, [pc, #12]	; (2c4c <event_handler+0x30>)
    2c3e:	e7f4      	b.n	2c2a <event_handler+0xe>
    2c40:	0bad0000 	.word	0x0bad0000
    2c44:	0bae0001 	.word	0x0bae0001
    2c48:	0bae0002 	.word	0x0bae0002
    2c4c:	0bad0001 	.word	0x0bad0001

00002c50 <i2c_nrfx_twim_transfer>:
{
    2c50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2c54:	b08d      	sub	sp, #52	; 0x34
	const struct i2c_nrfx_twim_config *dev_config = dev->config;
    2c56:	f8d0 a004 	ldr.w	sl, [r0, #4]
	struct i2c_nrfx_twim_data *dev_data = dev->data;
    2c5a:	f8d0 8010 	ldr.w	r8, [r0, #16]
{
    2c5e:	9203      	str	r2, [sp, #12]
    2c60:	461d      	mov	r5, r3
    2c62:	4606      	mov	r6, r0
	uint16_t concat_buf_size = dev_config->concat_buf_size;
    2c64:	f8ba 3018 	ldrh.w	r3, [sl, #24]
	uint8_t *msg_buf = dev_data->msg_buf;
    2c68:	f8d8 9024 	ldr.w	r9, [r8, #36]	; 0x24
	uint16_t concat_buf_size = dev_config->concat_buf_size;
    2c6c:	9302      	str	r3, [sp, #8]
{
    2c6e:	460c      	mov	r4, r1
	nrfx_twim_xfer_desc_t cur_xfer = {
    2c70:	2214      	movs	r2, #20
    2c72:	2100      	movs	r1, #0
    2c74:	a807      	add	r0, sp, #28
    2c76:	f004 f884 	bl	6d82 <memset>
    2c7a:	f88d 501d 	strb.w	r5, [sp, #29]
	return z_impl_k_sem_take(sem, timeout);
    2c7e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2c82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2c86:	4640      	mov	r0, r8
    2c88:	f002 fdfc 	bl	5884 <z_impl_k_sem_take>
	k_sem_take(&dev_data->completion_sync, K_NO_WAIT);
    2c8c:	f108 0310 	add.w	r3, r8, #16
    2c90:	9304      	str	r3, [sp, #16]
    2c92:	2200      	movs	r2, #0
    2c94:	2300      	movs	r3, #0
    2c96:	f108 0010 	add.w	r0, r8, #16
    2c9a:	f002 fdf3 	bl	5884 <z_impl_k_sem_take>
	for (size_t i = 0; i < num_msgs; i++) {
    2c9e:	2700      	movs	r7, #0
	uint16_t msg_buf_used = 0;
    2ca0:	463d      	mov	r5, r7
	for (size_t i = 0; i < num_msgs; i++) {
    2ca2:	9b03      	ldr	r3, [sp, #12]
    2ca4:	429f      	cmp	r7, r3
    2ca6:	d301      	bcc.n	2cac <i2c_nrfx_twim_transfer+0x5c>
    2ca8:	2400      	movs	r4, #0
    2caa:	e027      	b.n	2cfc <i2c_nrfx_twim_transfer+0xac>
		if (I2C_MSG_ADDR_10_BITS & msgs[i].flags) {
    2cac:	7a20      	ldrb	r0, [r4, #8]
    2cae:	0702      	lsls	r2, r0, #28
    2cb0:	f100 80ac 	bmi.w	2e0c <i2c_nrfx_twim_transfer+0x1bc>
				&& ((msgs[i].flags & I2C_MSG_READ)
    2cb4:	9b03      	ldr	r3, [sp, #12]
		bool concat_next = ((i + 1) < num_msgs)
    2cb6:	f107 0b01 	add.w	fp, r7, #1
				&& ((msgs[i].flags & I2C_MSG_READ)
    2cba:	459b      	cmp	fp, r3
    2cbc:	d20a      	bcs.n	2cd4 <i2c_nrfx_twim_transfer+0x84>
				&& !(msgs[i].flags & I2C_MSG_STOP)
    2cbe:	0783      	lsls	r3, r0, #30
    2cc0:	d408      	bmi.n	2cd4 <i2c_nrfx_twim_transfer+0x84>
				&& !(msgs[i + 1].flags & I2C_MSG_RESTART)
    2cc2:	7d23      	ldrb	r3, [r4, #20]
				    == (msgs[i + 1].flags & I2C_MSG_READ));
    2cc4:	ea80 0203 	eor.w	r2, r0, r3
				&& ((msgs[i].flags & I2C_MSG_READ)
    2cc8:	f002 0201 	and.w	r2, r2, #1
    2ccc:	f003 0304 	and.w	r3, r3, #4
    2cd0:	431a      	orrs	r2, r3
    2cd2:	d01a      	beq.n	2d0a <i2c_nrfx_twim_transfer+0xba>
		if (concat_next || (msg_buf_used != 0)) {
    2cd4:	b375      	cbz	r5, 2d34 <i2c_nrfx_twim_transfer+0xe4>
		bool concat_next = ((i + 1) < num_msgs)
    2cd6:	2300      	movs	r3, #0
			if ((msg_buf_used + msgs[i].len) > concat_buf_size) {
    2cd8:	6862      	ldr	r2, [r4, #4]
    2cda:	f8dd c008 	ldr.w	ip, [sp, #8]
    2cde:	18a9      	adds	r1, r5, r2
    2ce0:	4561      	cmp	r1, ip
    2ce2:	d914      	bls.n	2d0e <i2c_nrfx_twim_transfer+0xbe>
				LOG_ERR("Need to use concatenation buffer and "
    2ce4:	6833      	ldr	r3, [r6, #0]
    2ce6:	9301      	str	r3, [sp, #4]
    2ce8:	484a      	ldr	r0, [pc, #296]	; (2e14 <i2c_nrfx_twim_transfer+0x1c4>)
    2cea:	f8cd c000 	str.w	ip, [sp]
    2cee:	4613      	mov	r3, r2
    2cf0:	2145      	movs	r1, #69	; 0x45
    2cf2:	462a      	mov	r2, r5
    2cf4:	f003 ff8e 	bl	6c14 <z_log_minimal_printk>
				ret = -ENOSPC;
    2cf8:	f06f 041b 	mvn.w	r4, #27
	z_impl_k_sem_give(sem);
    2cfc:	4640      	mov	r0, r8
    2cfe:	f002 fda1 	bl	5844 <z_impl_k_sem_give>
}
    2d02:	4620      	mov	r0, r4
    2d04:	b00d      	add	sp, #52	; 0x34
    2d06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		bool concat_next = ((i + 1) < num_msgs)
    2d0a:	2301      	movs	r3, #1
    2d0c:	e7e4      	b.n	2cd8 <i2c_nrfx_twim_transfer+0x88>
			if (!(msgs[i].flags & I2C_MSG_READ)) {
    2d0e:	07c1      	lsls	r1, r0, #31
    2d10:	d406      	bmi.n	2d20 <i2c_nrfx_twim_transfer+0xd0>
				memcpy(msg_buf + msg_buf_used,
    2d12:	6821      	ldr	r1, [r4, #0]
    2d14:	9305      	str	r3, [sp, #20]
    2d16:	eb09 0005 	add.w	r0, r9, r5
    2d1a:	f004 f827 	bl	6d6c <memcpy>
    2d1e:	9b05      	ldr	r3, [sp, #20]
			msg_buf_used += msgs[i].len;
    2d20:	6862      	ldr	r2, [r4, #4]
    2d22:	442a      	add	r2, r5
    2d24:	b295      	uxth	r5, r2
		if (concat_next) {
    2d26:	2b00      	cmp	r3, #0
    2d28:	d15b      	bne.n	2de2 <i2c_nrfx_twim_transfer+0x192>
		if (msg_buf_used == 0) {
    2d2a:	b13d      	cbz	r5, 2d3c <i2c_nrfx_twim_transfer+0xec>
			cur_xfer.p_primary_buf = msg_buf;
    2d2c:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
			cur_xfer.primary_length = msg_buf_used;
    2d30:	462b      	mov	r3, r5
    2d32:	e007      	b.n	2d44 <i2c_nrfx_twim_transfer+0xf4>
		} else if (!(msgs[i].flags & I2C_MSG_READ) &&
    2d34:	07c0      	lsls	r0, r0, #31
			   !nrfx_is_in_ram(msgs[i].buf)) {
    2d36:	e9d4 1200 	ldrd	r1, r2, [r4]
		} else if (!(msgs[i].flags & I2C_MSG_READ) &&
    2d3a:	d51b      	bpl.n	2d74 <i2c_nrfx_twim_transfer+0x124>
			cur_xfer.p_primary_buf = msgs[i].buf;
    2d3c:	6823      	ldr	r3, [r4, #0]
    2d3e:	930a      	str	r3, [sp, #40]	; 0x28
			cur_xfer.primary_length = msgs[i].len;
    2d40:	6863      	ldr	r3, [r4, #4]
    2d42:	2500      	movs	r5, #0
		cur_xfer.type = (msgs[i].flags & I2C_MSG_READ) ?
    2d44:	7a22      	ldrb	r2, [r4, #8]
			cur_xfer.primary_length = msgs[i].len;
    2d46:	9308      	str	r3, [sp, #32]
			NRFX_TWIM_XFER_RX : NRFX_TWIM_XFER_TX;
    2d48:	f002 0301 	and.w	r3, r2, #1
		nrfx_err_t res = nrfx_twim_xfer(&dev_config->twim,
    2d4c:	f082 0202 	eor.w	r2, r2, #2
    2d50:	f3c2 0240 	ubfx	r2, r2, #1, #1
    2d54:	0152      	lsls	r2, r2, #5
    2d56:	a907      	add	r1, sp, #28
    2d58:	4650      	mov	r0, sl
		cur_xfer.type = (msgs[i].flags & I2C_MSG_READ) ?
    2d5a:	f88d 301c 	strb.w	r3, [sp, #28]
		nrfx_err_t res = nrfx_twim_xfer(&dev_config->twim,
    2d5e:	f002 f963 	bl	5028 <nrfx_twim_xfer>
		if (res != NRFX_SUCCESS) {
    2d62:	4b2d      	ldr	r3, [pc, #180]	; (2e18 <i2c_nrfx_twim_transfer+0x1c8>)
    2d64:	4298      	cmp	r0, r3
    2d66:	d01b      	beq.n	2da0 <i2c_nrfx_twim_transfer+0x150>
			if (res == NRFX_ERROR_BUSY) {
    2d68:	330b      	adds	r3, #11
    2d6a:	4298      	cmp	r0, r3
    2d6c:	d127      	bne.n	2dbe <i2c_nrfx_twim_transfer+0x16e>
				ret = -EBUSY;
    2d6e:	f06f 040f 	mvn.w	r4, #15
    2d72:	e7c3      	b.n	2cfc <i2c_nrfx_twim_transfer+0xac>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
    2d74:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
		} else if (!(msgs[i].flags & I2C_MSG_READ) &&
    2d78:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    2d7c:	d0de      	beq.n	2d3c <i2c_nrfx_twim_transfer+0xec>
			if (msgs[i].len > dev_config->flash_buf_max_size) {
    2d7e:	f8ba 301a 	ldrh.w	r3, [sl, #26]
    2d82:	4293      	cmp	r3, r2
    2d84:	d207      	bcs.n	2d96 <i2c_nrfx_twim_transfer+0x146>
				LOG_ERR("Cannot copy flash buffer of size: %u. "
    2d86:	6833      	ldr	r3, [r6, #0]
    2d88:	4824      	ldr	r0, [pc, #144]	; (2e1c <i2c_nrfx_twim_transfer+0x1cc>)
    2d8a:	2145      	movs	r1, #69	; 0x45
    2d8c:	f003 ff42 	bl	6c14 <z_log_minimal_printk>
				ret = -EINVAL;
    2d90:	f06f 0415 	mvn.w	r4, #21
				break;
    2d94:	e7b2      	b.n	2cfc <i2c_nrfx_twim_transfer+0xac>
			memcpy(msg_buf, msgs[i].buf, msgs[i].len);
    2d96:	4648      	mov	r0, r9
    2d98:	f003 ffe8 	bl	6d6c <memcpy>
			msg_buf_used = msgs[i].len;
    2d9c:	88a5      	ldrh	r5, [r4, #4]
		if (concat_next) {
    2d9e:	e7c4      	b.n	2d2a <i2c_nrfx_twim_transfer+0xda>
	return z_impl_k_sem_take(sem, timeout);
    2da0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    2da4:	9804      	ldr	r0, [sp, #16]
    2da6:	2300      	movs	r3, #0
    2da8:	f002 fd6c 	bl	5884 <z_impl_k_sem_take>
		if (ret != 0) {
    2dac:	b150      	cbz	r0, 2dc4 <i2c_nrfx_twim_transfer+0x174>
			LOG_ERR("Error on I2C line occurred for message %d", i);
    2dae:	481c      	ldr	r0, [pc, #112]	; (2e20 <i2c_nrfx_twim_transfer+0x1d0>)
    2db0:	463a      	mov	r2, r7
    2db2:	2145      	movs	r1, #69	; 0x45
    2db4:	f003 ff2e 	bl	6c14 <z_log_minimal_printk>
			(void)i2c_nrfx_twim_recover_bus(dev);
    2db8:	4630      	mov	r0, r6
    2dba:	f7ff ff11 	bl	2be0 <i2c_nrfx_twim_recover_bus>
				ret = -EIO;
    2dbe:	f06f 0404 	mvn.w	r4, #4
    2dc2:	e79b      	b.n	2cfc <i2c_nrfx_twim_transfer+0xac>
		res = dev_data->res;
    2dc4:	f8d8 2020 	ldr.w	r2, [r8, #32]
		if (res != NRFX_SUCCESS) {
    2dc8:	4b13      	ldr	r3, [pc, #76]	; (2e18 <i2c_nrfx_twim_transfer+0x1c8>)
    2dca:	429a      	cmp	r2, r3
    2dcc:	d005      	beq.n	2dda <i2c_nrfx_twim_transfer+0x18a>
			LOG_ERR("Error 0x%08X occurred for message %d", res, i);
    2dce:	4815      	ldr	r0, [pc, #84]	; (2e24 <i2c_nrfx_twim_transfer+0x1d4>)
    2dd0:	463b      	mov	r3, r7
    2dd2:	2145      	movs	r1, #69	; 0x45
    2dd4:	f003 ff1e 	bl	6c14 <z_log_minimal_printk>
			break;
    2dd8:	e7f1      	b.n	2dbe <i2c_nrfx_twim_transfer+0x16e>
		if ((msgs[i].flags & I2C_MSG_READ)
    2dda:	7a23      	ldrb	r3, [r4, #8]
    2ddc:	07db      	lsls	r3, r3, #31
    2dde:	d403      	bmi.n	2de8 <i2c_nrfx_twim_transfer+0x198>
		msg_buf_used = 0;
    2de0:	2500      	movs	r5, #0
    2de2:	340c      	adds	r4, #12
    2de4:	465f      	mov	r7, fp
    2de6:	e75c      	b.n	2ca2 <i2c_nrfx_twim_transfer+0x52>
		    && cur_xfer.p_primary_buf == msg_buf) {
    2de8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    2dea:	4599      	cmp	r9, r3
    2dec:	d1f8      	bne.n	2de0 <i2c_nrfx_twim_transfer+0x190>
    2dee:	4627      	mov	r7, r4
    2df0:	e006      	b.n	2e00 <i2c_nrfx_twim_transfer+0x1b0>
				msg_buf_used -= msgs[j].len;
    2df2:	1aa9      	subs	r1, r5, r2
    2df4:	b28d      	uxth	r5, r1
				memcpy(msgs[j].buf,
    2df6:	68f8      	ldr	r0, [r7, #12]
    2df8:	fa19 f181 	uxtah	r1, r9, r1
    2dfc:	f003 ffb6 	bl	6d6c <memcpy>
			while (msg_buf_used >= msgs[j].len) {
    2e00:	687a      	ldr	r2, [r7, #4]
    2e02:	4295      	cmp	r5, r2
    2e04:	f1a7 070c 	sub.w	r7, r7, #12
    2e08:	d2f3      	bcs.n	2df2 <i2c_nrfx_twim_transfer+0x1a2>
    2e0a:	e7e9      	b.n	2de0 <i2c_nrfx_twim_transfer+0x190>
			ret = -ENOTSUP;
    2e0c:	f06f 0485 	mvn.w	r4, #133	; 0x85
    2e10:	e774      	b.n	2cfc <i2c_nrfx_twim_transfer+0xac>
    2e12:	bf00      	nop
    2e14:	0000a624 	.word	0x0000a624
    2e18:	0bad0000 	.word	0x0bad0000
    2e1c:	0000a6b9 	.word	0x0000a6b9
    2e20:	0000a724 	.word	0x0000a724
    2e24:	0000a753 	.word	0x0000a753

00002e28 <common_init.isra.0>:
 *
 * @param gpiop where to store the GPIO device pointer
 *
 * @return negative on error, otherwise zero.
 */
static int common_init(const struct device *dev)
    2e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2e2a:	4604      	mov	r4, r0
{
	const struct driver_config *cfg = dev->config;
	gpio_flags_t flags;

	if (!device_is_ready(cfg->enable.port)) {
    2e2c:	68c0      	ldr	r0, [r0, #12]
    2e2e:	f006 f963 	bl	90f8 <z_device_is_ready>
    2e32:	b948      	cbnz	r0, 2e48 <common_init.isra.0+0x20>
		LOG_ERR("GPIO port: %s not ready", cfg->enable.port->name);
    2e34:	68e3      	ldr	r3, [r4, #12]
    2e36:	4819      	ldr	r0, [pc, #100]	; (2e9c <common_init.isra.0+0x74>)
    2e38:	681a      	ldr	r2, [r3, #0]
    2e3a:	2145      	movs	r1, #69	; 0x45
    2e3c:	f003 feea 	bl	6c14 <z_log_minimal_printk>
		return -ENODEV;
    2e40:	f06f 0412 	mvn.w	r4, #18
		 */
		k_busy_wait(delay_us);
	}

	return rc;
}
    2e44:	4620      	mov	r0, r4
    2e46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (on) {
    2e48:	7d25      	ldrb	r5, [r4, #20]
static inline int gpio_pin_configure_dt(const struct gpio_dt_spec *spec,
					gpio_flags_t extra_flags)
{
	return gpio_pin_configure(spec->port,
				  spec->pin,
				  spec->dt_flags | extra_flags);
    2e4a:	8a63      	ldrh	r3, [r4, #18]
	return gpio_pin_configure(spec->port,
    2e4c:	68e0      	ldr	r0, [r4, #12]
				  spec->pin,
    2e4e:	7c21      	ldrb	r1, [r4, #16]
    2e50:	f015 0503 	ands.w	r5, r5, #3
		flags = GPIO_OUTPUT_ACTIVE;
    2e54:	bf16      	itet	ne
    2e56:	f44f 12d0 	movne.w	r2, #1703936	; 0x1a0000
		flags = GPIO_OUTPUT_INACTIVE;
    2e5a:	f44f 12b0 	moveq.w	r2, #1441792	; 0x160000
		delay_us = cfg->startup_delay_us;
    2e5e:	6865      	ldrne	r5, [r4, #4]
	return gpio_pin_configure(spec->port,
    2e60:	4313      	orrs	r3, r2
	struct gpio_driver_data *data =
    2e62:	6907      	ldr	r7, [r0, #16]
	const struct gpio_driver_api *api =
    2e64:	f8d0 c008 	ldr.w	ip, [r0, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
    2e68:	683c      	ldr	r4, [r7, #0]
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
    2e6a:	07da      	lsls	r2, r3, #31
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
    2e6c:	bf48      	it	mi
    2e6e:	f483 2340 	eormi.w	r3, r3, #786432	; 0xc0000
		data->invert |= (gpio_port_pins_t)BIT(pin);
    2e72:	2601      	movs	r6, #1
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
    2e74:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
		data->invert |= (gpio_port_pins_t)BIT(pin);
    2e78:	408e      	lsls	r6, r1
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
    2e7a:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
    2e7c:	bf4c      	ite	mi
    2e7e:	4334      	orrmi	r4, r6
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    2e80:	43b4      	bicpl	r4, r6
    2e82:	603c      	str	r4, [r7, #0]
	return api->pin_configure(port, pin, flags);
    2e84:	f8dc 3000 	ldr.w	r3, [ip]
    2e88:	4798      	blx	r3
	if ((rc == 0) && (delay_us > 0)) {
    2e8a:	4604      	mov	r4, r0
    2e8c:	2800      	cmp	r0, #0
    2e8e:	d1d9      	bne.n	2e44 <common_init.isra.0+0x1c>
    2e90:	2d00      	cmp	r5, #0
    2e92:	d0d7      	beq.n	2e44 <common_init.isra.0+0x1c>
	z_impl_k_busy_wait(usec_to_wait);
    2e94:	4628      	mov	r0, r5
    2e96:	f006 fa97 	bl	93c8 <z_impl_k_busy_wait>
}
    2e9a:	e7d3      	b.n	2e44 <common_init.isra.0+0x1c>
    2e9c:	0000a7a5 	.word	0x0000a7a5

00002ea0 <regulator_fixed_init_sync>:
	.enable = enable_sync,
	.disable = disable_sync,
};

static int regulator_fixed_init_sync(const struct device *dev)
{
    2ea0:	b538      	push	{r3, r4, r5, lr}
    2ea2:	4605      	mov	r5, r0
	const struct driver_config *cfg = dev->config;
	int rc = common_init(dev);
    2ea4:	6840      	ldr	r0, [r0, #4]
    2ea6:	f7ff ffbf 	bl	2e28 <common_init.isra.0>
	__ASSERT(cfg->startup_delay_us == 0,
		 "sync not valid with startup delay");
	__ASSERT(cfg->off_on_delay_us == 0,
		 "sync not valid with shutdown delay");

	LOG_INF("%s sync: %d", dev->name, rc);
    2eaa:	682a      	ldr	r2, [r5, #0]
	int rc = common_init(dev);
    2eac:	4604      	mov	r4, r0
	LOG_INF("%s sync: %d", dev->name, rc);
    2eae:	4603      	mov	r3, r0
    2eb0:	2149      	movs	r1, #73	; 0x49
    2eb2:	4802      	ldr	r0, [pc, #8]	; (2ebc <regulator_fixed_init_sync+0x1c>)
    2eb4:	f003 feae 	bl	6c14 <z_log_minimal_printk>

	return rc;
}
    2eb8:	4620      	mov	r0, r4
    2eba:	bd38      	pop	{r3, r4, r5, pc}
    2ebc:	0000a7c2 	.word	0x0000a7c2

00002ec0 <regulator_fixed_init_onoff>:
{
    2ec0:	b538      	push	{r3, r4, r5, lr}
	struct driver_data_onoff *data = dev->data;
    2ec2:	6905      	ldr	r5, [r0, #16]
	rc = onoff_manager_init(&data->mgr, &transitions);
    2ec4:	490c      	ldr	r1, [pc, #48]	; (2ef8 <regulator_fixed_init_onoff+0x38>)
{
    2ec6:	4604      	mov	r4, r0
	data->dev = dev;
    2ec8:	4628      	mov	r0, r5
    2eca:	f840 4b04 	str.w	r4, [r0], #4
	rc = onoff_manager_init(&data->mgr, &transitions);
    2ece:	f003 fdc7 	bl	6a60 <onoff_manager_init>
	k_work_init_delayable(&data->dwork, onoff_worker);
    2ed2:	490a      	ldr	r1, [pc, #40]	; (2efc <regulator_fixed_init_onoff+0x3c>)
    2ed4:	f105 0020 	add.w	r0, r5, #32
    2ed8:	f006 f973 	bl	91c2 <k_work_init_delayable>
	rc = common_init(dev);
    2edc:	6860      	ldr	r0, [r4, #4]
    2ede:	f7ff ffa3 	bl	2e28 <common_init.isra.0>
	if (rc >= 0) {
    2ee2:	ea00 75e0 	and.w	r5, r0, r0, asr #31
	LOG_INF("%s onoff: %d", dev->name, rc);
    2ee6:	6822      	ldr	r2, [r4, #0]
    2ee8:	4805      	ldr	r0, [pc, #20]	; (2f00 <regulator_fixed_init_onoff+0x40>)
    2eea:	462b      	mov	r3, r5
    2eec:	2149      	movs	r1, #73	; 0x49
    2eee:	f003 fe91 	bl	6c14 <z_log_minimal_printk>
}
    2ef2:	4628      	mov	r0, r5
    2ef4:	bd38      	pop	{r3, r4, r5, pc}
    2ef6:	bf00      	nop
    2ef8:	00009944 	.word	0x00009944
    2efc:	00007323 	.word	0x00007323
    2f00:	0000a7d3 	.word	0x0000a7d3

00002f04 <finalize_transition>:
{
    2f04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if ((rc >= 0) && (delay_us > 0)) {
    2f08:	1e1c      	subs	r4, r3, #0
{
    2f0a:	4605      	mov	r5, r0
    2f0c:	460f      	mov	r7, r1
    2f0e:	4690      	mov	r8, r2
	if ((rc >= 0) && (delay_us > 0)) {
    2f10:	db10      	blt.n	2f34 <finalize_transition+0x30>
    2f12:	b17a      	cbz	r2, 2f34 <finalize_transition+0x30>
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    2f14:	ea4f 4952 	mov.w	r9, r2, lsr #17
    2f18:	03d6      	lsls	r6, r2, #15
    2f1a:	2300      	movs	r3, #0
    2f1c:	4a14      	ldr	r2, [pc, #80]	; (2f70 <finalize_transition+0x6c>)
    2f1e:	4630      	mov	r0, r6
    2f20:	4649      	mov	r1, r9
    2f22:	f7fd f8db 	bl	dc <__aeabi_uldivmod>
		    || k_is_pre_kernel()
    2f26:	b110      	cbz	r0, 2f2e <finalize_transition+0x2a>
	return !z_sys_post_kernel;
    2f28:	4b12      	ldr	r3, [pc, #72]	; (2f74 <finalize_transition+0x70>)
    2f2a:	781b      	ldrb	r3, [r3, #0]
    2f2c:	b943      	cbnz	r3, 2f40 <finalize_transition+0x3c>
	z_impl_k_busy_wait(usec_to_wait);
    2f2e:	4640      	mov	r0, r8
    2f30:	f006 fa4a 	bl	93c8 <z_impl_k_busy_wait>
	notify(&data->mgr, rc);
    2f34:	4621      	mov	r1, r4
    2f36:	1d28      	adds	r0, r5, #4
    2f38:	463b      	mov	r3, r7
}
    2f3a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	notify(&data->mgr, rc);
    2f3e:	4718      	bx	r3
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    2f40:	480d      	ldr	r0, [pc, #52]	; (2f78 <finalize_transition+0x74>)
    2f42:	4a0b      	ldr	r2, [pc, #44]	; (2f70 <finalize_transition+0x6c>)
			data->notify = notify;
    2f44:	652f      	str	r7, [r5, #80]	; 0x50
    2f46:	1830      	adds	r0, r6, r0
			data->task = WORK_TASK_DELAY;
    2f48:	f04f 0303 	mov.w	r3, #3
    2f4c:	f149 0100 	adc.w	r1, r9, #0
    2f50:	f885 3054 	strb.w	r3, [r5, #84]	; 0x54
    2f54:	2300      	movs	r3, #0
    2f56:	f7fd f8c1 	bl	dc <__aeabi_uldivmod>
    2f5a:	4602      	mov	r2, r0
    2f5c:	460b      	mov	r3, r1
			rc = k_work_schedule(&data->dwork, K_USEC(delay_us));
    2f5e:	f105 0020 	add.w	r0, r5, #32
    2f62:	f002 fe0f 	bl	5b84 <k_work_schedule>
			if (rc >= 0) {
    2f66:	1e04      	subs	r4, r0, #0
    2f68:	dbe4      	blt.n	2f34 <finalize_transition+0x30>
}
    2f6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2f6e:	bf00      	nop
    2f70:	000f4240 	.word	0x000f4240
    2f74:	20002f0c 	.word	0x20002f0c
    2f78:	000f423f 	.word	0x000f423f

00002f7c <flash_nrf_pages_layout>:

static void flash_nrf_pages_layout(const struct device *dev,
				     const struct flash_pages_layout **layout,
				     size_t *layout_size)
{
	*layout = &dev_layout;
    2f7c:	4b02      	ldr	r3, [pc, #8]	; (2f88 <flash_nrf_pages_layout+0xc>)
    2f7e:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
    2f80:	2301      	movs	r3, #1
    2f82:	6013      	str	r3, [r2, #0]
}
    2f84:	4770      	bx	lr
    2f86:	bf00      	nop
    2f88:	2000104c 	.word	0x2000104c

00002f8c <flash_nrf_get_parameters>:
flash_nrf_get_parameters(const struct device *dev)
{
	ARG_UNUSED(dev);

	return &flash_nrf_parameters;
}
    2f8c:	4800      	ldr	r0, [pc, #0]	; (2f90 <flash_nrf_get_parameters+0x4>)
    2f8e:	4770      	bx	lr
    2f90:	00009964 	.word	0x00009964

00002f94 <flash_nrf_read>:
{
    2f94:	b570      	push	{r4, r5, r6, lr}
    2f96:	460d      	mov	r5, r1
	if (is_regular_addr_valid(addr, len)) {
    2f98:	4628      	mov	r0, r5
    2f9a:	4619      	mov	r1, r3
{
    2f9c:	4616      	mov	r6, r2
    2f9e:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
    2fa0:	f004 fa3b 	bl	741a <is_regular_addr_valid>
    2fa4:	b940      	cbnz	r0, 2fb8 <flash_nrf_read+0x24>
		LOG_ERR("invalid address: 0x%08lx:%zu",
    2fa6:	4808      	ldr	r0, [pc, #32]	; (2fc8 <flash_nrf_read+0x34>)
    2fa8:	4623      	mov	r3, r4
    2faa:	462a      	mov	r2, r5
    2fac:	2145      	movs	r1, #69	; 0x45
    2fae:	f003 fe31 	bl	6c14 <z_log_minimal_printk>
    2fb2:	f06f 0015 	mvn.w	r0, #21
}
    2fb6:	bd70      	pop	{r4, r5, r6, pc}
	if (!len) {
    2fb8:	b124      	cbz	r4, 2fc4 <flash_nrf_read+0x30>
	memcpy(data, (void *)addr, len);
    2fba:	4622      	mov	r2, r4
    2fbc:	4629      	mov	r1, r5
    2fbe:	4630      	mov	r0, r6
    2fc0:	f003 fed4 	bl	6d6c <memcpy>
		return 0;
    2fc4:	2000      	movs	r0, #0
    2fc6:	e7f6      	b.n	2fb6 <flash_nrf_read+0x22>
    2fc8:	0000a80f 	.word	0x0000a80f

00002fcc <nrf_flash_init>:
	.page_layout = flash_nrf_pages_layout,
#endif
};

static int nrf_flash_init(const struct device *dev)
{
    2fcc:	b510      	push	{r4, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
    2fce:	2201      	movs	r2, #1
    2fd0:	4611      	mov	r1, r2
    2fd2:	4806      	ldr	r0, [pc, #24]	; (2fec <nrf_flash_init+0x20>)
#ifndef CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE
	nrf_flash_sync_init();
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

#if defined(CONFIG_FLASH_PAGE_LAYOUT)
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
    2fd4:	4c06      	ldr	r4, [pc, #24]	; (2ff0 <nrf_flash_init+0x24>)
    2fd6:	f006 f8b7 	bl	9148 <z_impl_k_sem_init>
    2fda:	f006 f851 	bl	9080 <nrfx_nvmc_flash_page_count_get>
    2fde:	6020      	str	r0, [r4, #0]
	dev_layout.pages_size = nrfx_nvmc_flash_page_size_get();
    2fe0:	f006 f84a 	bl	9078 <nrfx_nvmc_flash_page_size_get>
    2fe4:	6060      	str	r0, [r4, #4]
#endif

	return 0;
}
    2fe6:	2000      	movs	r0, #0
    2fe8:	bd10      	pop	{r4, pc}
    2fea:	bf00      	nop
    2fec:	20001054 	.word	0x20001054
    2ff0:	2000104c 	.word	0x2000104c

00002ff4 <flash_nrf_erase>:
{
    2ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2ff6:	460e      	mov	r6, r1
    2ff8:	4614      	mov	r4, r2
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
    2ffa:	f006 f83d 	bl	9078 <nrfx_nvmc_flash_page_size_get>
	if (is_regular_addr_valid(addr, size)) {
    2ffe:	4621      	mov	r1, r4
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
    3000:	4605      	mov	r5, r0
	if (is_regular_addr_valid(addr, size)) {
    3002:	4630      	mov	r0, r6
    3004:	f004 fa09 	bl	741a <is_regular_addr_valid>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
    3008:	4637      	mov	r7, r6
	if (is_regular_addr_valid(addr, size)) {
    300a:	b350      	cbz	r0, 3062 <flash_nrf_erase+0x6e>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
    300c:	fbb6 f3f5 	udiv	r3, r6, r5
    3010:	fb05 6313 	mls	r3, r5, r3, r6
    3014:	b923      	cbnz	r3, 3020 <flash_nrf_erase+0x2c>
    3016:	fbb4 f3f5 	udiv	r3, r4, r5
    301a:	fb05 4313 	mls	r3, r5, r3, r4
    301e:	b143      	cbz	r3, 3032 <flash_nrf_erase+0x3e>
			LOG_ERR("unaligned address: 0x%08lx:%zu",
    3020:	4812      	ldr	r0, [pc, #72]	; (306c <flash_nrf_erase+0x78>)
    3022:	4623      	mov	r3, r4
    3024:	4632      	mov	r2, r6
    3026:	2145      	movs	r1, #69	; 0x45
		LOG_ERR("invalid address: 0x%08lx:%zu",
    3028:	f003 fdf4 	bl	6c14 <z_log_minimal_printk>
			return -EINVAL;
    302c:	f06f 0015 	mvn.w	r0, #21
    3030:	e002      	b.n	3038 <flash_nrf_erase+0x44>
		if (!n_pages) {
    3032:	42a5      	cmp	r5, r4
    3034:	d901      	bls.n	303a <flash_nrf_erase+0x46>
			return 0;
    3036:	2000      	movs	r0, #0
}
    3038:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return z_impl_k_sem_take(sem, timeout);
    303a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    303e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    3042:	480b      	ldr	r0, [pc, #44]	; (3070 <flash_nrf_erase+0x7c>)
    3044:	f002 fc1e 	bl	5884 <z_impl_k_sem_take>

#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

static int erase_op(void *context)
{
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
    3048:	f006 f816 	bl	9078 <nrfx_nvmc_flash_page_size_get>
    304c:	4605      	mov	r5, r0
		if (nrfx_nvmc_page_partial_erase_continue()) {
			e_ctx->len -= pg_size;
			e_ctx->flash_addr += pg_size;
		}
#else
		(void)nrfx_nvmc_page_erase(e_ctx->flash_addr);
    304e:	4638      	mov	r0, r7
    3050:	f001 fe7c 	bl	4d4c <nrfx_nvmc_page_erase>
			}

		}
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

	} while (e_ctx->len > 0);
    3054:	1b64      	subs	r4, r4, r5
    3056:	442f      	add	r7, r5
    3058:	d1f9      	bne.n	304e <flash_nrf_erase+0x5a>
	z_impl_k_sem_give(sem);
    305a:	4805      	ldr	r0, [pc, #20]	; (3070 <flash_nrf_erase+0x7c>)
    305c:	f002 fbf2 	bl	5844 <z_impl_k_sem_give>
}
    3060:	e7e9      	b.n	3036 <flash_nrf_erase+0x42>
		LOG_ERR("invalid address: 0x%08lx:%zu",
    3062:	4804      	ldr	r0, [pc, #16]	; (3074 <flash_nrf_erase+0x80>)
    3064:	4623      	mov	r3, r4
    3066:	4632      	mov	r2, r6
    3068:	2145      	movs	r1, #69	; 0x45
    306a:	e7dd      	b.n	3028 <flash_nrf_erase+0x34>
    306c:	0000a831 	.word	0x0000a831
    3070:	20001054 	.word	0x20001054
    3074:	0000a80f 	.word	0x0000a80f

00003078 <flash_nrf_write>:
{
    3078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    307a:	460e      	mov	r6, r1
	if (is_regular_addr_valid(addr, len)) {
    307c:	4630      	mov	r0, r6
    307e:	4619      	mov	r1, r3
{
    3080:	4617      	mov	r7, r2
    3082:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
    3084:	f004 f9c9 	bl	741a <is_regular_addr_valid>
    3088:	b940      	cbnz	r0, 309c <flash_nrf_write+0x24>
		LOG_ERR("invalid address: 0x%08lx:%zu",
    308a:	4818      	ldr	r0, [pc, #96]	; (30ec <flash_nrf_write+0x74>)
    308c:	4623      	mov	r3, r4
    308e:	4632      	mov	r2, r6
    3090:	2145      	movs	r1, #69	; 0x45
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
    3092:	f003 fdbf 	bl	6c14 <z_log_minimal_printk>
		return -EINVAL;
    3096:	f06f 0015 	mvn.w	r0, #21
}
    309a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!is_aligned_32(addr) || (len % sizeof(uint32_t))) {
    309c:	ea46 0504 	orr.w	r5, r6, r4
    30a0:	f015 0503 	ands.w	r5, r5, #3
    30a4:	d004      	beq.n	30b0 <flash_nrf_write+0x38>
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
    30a6:	4812      	ldr	r0, [pc, #72]	; (30f0 <flash_nrf_write+0x78>)
    30a8:	4623      	mov	r3, r4
    30aa:	4632      	mov	r2, r6
    30ac:	2145      	movs	r1, #69	; 0x45
    30ae:	e7f0      	b.n	3092 <flash_nrf_write+0x1a>
	if (!len) {
    30b0:	b1a4      	cbz	r4, 30dc <flash_nrf_write+0x64>
	return z_impl_k_sem_take(sem, timeout);
    30b2:	4810      	ldr	r0, [pc, #64]	; (30f4 <flash_nrf_write+0x7c>)
    30b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    30b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    30bc:	f002 fbe2 	bl	5884 <z_impl_k_sem_take>
	w_ctx->flash_addr += shift;
	w_ctx->data_addr += shift;
	w_ctx->len -= shift;
}

static int write_op(void *context)
    30c0:	f024 0403 	bic.w	r4, r4, #3
		}
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */
	}
#endif /* CONFIG_SOC_FLASH_NRF_EMULATE_ONE_BYTE_WRITE_ACCESS */
	/* Write all the 4-byte aligned data */
	while (w_ctx->len >= sizeof(uint32_t)) {
    30c4:	42ac      	cmp	r4, r5
    30c6:	eb06 0005 	add.w	r0, r6, r5
    30ca:	d109      	bne.n	30e0 <flash_nrf_write+0x68>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrf_nvmc_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
    30cc:	4a0a      	ldr	r2, [pc, #40]	; (30f8 <flash_nrf_write+0x80>)
    30ce:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
    30d2:	07db      	lsls	r3, r3, #31
    30d4:	d5fb      	bpl.n	30ce <flash_nrf_write+0x56>
	z_impl_k_sem_give(sem);
    30d6:	4807      	ldr	r0, [pc, #28]	; (30f4 <flash_nrf_write+0x7c>)
    30d8:	f002 fbb4 	bl	5844 <z_impl_k_sem_give>
	return ret;
    30dc:	2000      	movs	r0, #0
    30de:	e7dc      	b.n	309a <flash_nrf_write+0x22>
		if (SUSPEND_POFWARN()) {
			return -ECANCELED;
		}

		nrfx_nvmc_word_write(w_ctx->flash_addr,
    30e0:	5979      	ldr	r1, [r7, r5]
    30e2:	f001 fe53 	bl	4d8c <nrfx_nvmc_word_write>
	w_ctx->len -= shift;
    30e6:	3504      	adds	r5, #4
}
    30e8:	e7ec      	b.n	30c4 <flash_nrf_write+0x4c>
    30ea:	bf00      	nop
    30ec:	0000a80f 	.word	0x0000a80f
    30f0:	0000a855 	.word	0x0000a855
    30f4:	20001054 	.word	0x20001054
    30f8:	4001e000 	.word	0x4001e000

000030fc <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
    30fc:	b570      	push	{r4, r5, r6, lr}
		break;
	default:
		return -ENOTSUP;
	}
#else
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
    30fe:	794b      	ldrb	r3, [r1, #5]
    3100:	2b01      	cmp	r3, #1
    3102:	d120      	bne.n	3146 <uarte_nrfx_configure+0x4a>
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    3104:	798b      	ldrb	r3, [r1, #6]
    3106:	2b03      	cmp	r3, #3
    3108:	d11d      	bne.n	3146 <uarte_nrfx_configure+0x4a>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    310a:	79cd      	ldrb	r5, [r1, #7]
    310c:	b10d      	cbz	r5, 3112 <uarte_nrfx_configure+0x16>
    310e:	2d01      	cmp	r5, #1
    3110:	d119      	bne.n	3146 <uarte_nrfx_configure+0x4a>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    3112:	790a      	ldrb	r2, [r1, #4]
    3114:	b112      	cbz	r2, 311c <uarte_nrfx_configure+0x20>
    3116:	2a02      	cmp	r2, #2
    3118:	d115      	bne.n	3146 <uarte_nrfx_configure+0x4a>
    311a:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    311c:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    311e:	6844      	ldr	r4, [r0, #4]
	switch (baudrate) {
    3120:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
    3124:	6826      	ldr	r6, [r4, #0]
	switch (baudrate) {
    3126:	d064      	beq.n	31f2 <uarte_nrfx_configure+0xf6>
    3128:	d82b      	bhi.n	3182 <uarte_nrfx_configure+0x86>
    312a:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    312e:	d063      	beq.n	31f8 <uarte_nrfx_configure+0xfc>
    3130:	d814      	bhi.n	315c <uarte_nrfx_configure+0x60>
    3132:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    3136:	d061      	beq.n	31fc <uarte_nrfx_configure+0x100>
    3138:	d808      	bhi.n	314c <uarte_nrfx_configure+0x50>
    313a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    313e:	d060      	beq.n	3202 <uarte_nrfx_configure+0x106>
    3140:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    3144:	d060      	beq.n	3208 <uarte_nrfx_configure+0x10c>
    3146:	f06f 0085 	mvn.w	r0, #133	; 0x85
    314a:	e051      	b.n	31f0 <uarte_nrfx_configure+0xf4>
    314c:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    3150:	d05d      	beq.n	320e <uarte_nrfx_configure+0x112>
    3152:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    3156:	d1f6      	bne.n	3146 <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    3158:	4b37      	ldr	r3, [pc, #220]	; (3238 <uarte_nrfx_configure+0x13c>)
    315a:	e03c      	b.n	31d6 <uarte_nrfx_configure+0xda>
	switch (baudrate) {
    315c:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    3160:	d058      	beq.n	3214 <uarte_nrfx_configure+0x118>
    3162:	d807      	bhi.n	3174 <uarte_nrfx_configure+0x78>
    3164:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    3168:	d056      	beq.n	3218 <uarte_nrfx_configure+0x11c>
    316a:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    316e:	d1ea      	bne.n	3146 <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    3170:	4b32      	ldr	r3, [pc, #200]	; (323c <uarte_nrfx_configure+0x140>)
    3172:	e030      	b.n	31d6 <uarte_nrfx_configure+0xda>
	switch (baudrate) {
    3174:	f647 2412 	movw	r4, #31250	; 0x7a12
    3178:	42a3      	cmp	r3, r4
    317a:	d1e4      	bne.n	3146 <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    317c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    3180:	e029      	b.n	31d6 <uarte_nrfx_configure+0xda>
	switch (baudrate) {
    3182:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    3186:	d049      	beq.n	321c <uarte_nrfx_configure+0x120>
    3188:	d813      	bhi.n	31b2 <uarte_nrfx_configure+0xb6>
    318a:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    318e:	d048      	beq.n	3222 <uarte_nrfx_configure+0x126>
    3190:	d809      	bhi.n	31a6 <uarte_nrfx_configure+0xaa>
    3192:	f64d 24c0 	movw	r4, #56000	; 0xdac0
    3196:	42a3      	cmp	r3, r4
    3198:	d045      	beq.n	3226 <uarte_nrfx_configure+0x12a>
    319a:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    319e:	d1d2      	bne.n	3146 <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    31a0:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    31a4:	e017      	b.n	31d6 <uarte_nrfx_configure+0xda>
	switch (baudrate) {
    31a6:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    31aa:	d1cc      	bne.n	3146 <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    31ac:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    31b0:	e011      	b.n	31d6 <uarte_nrfx_configure+0xda>
	switch (baudrate) {
    31b2:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    31b6:	d039      	beq.n	322c <uarte_nrfx_configure+0x130>
    31b8:	d808      	bhi.n	31cc <uarte_nrfx_configure+0xd0>
    31ba:	4c21      	ldr	r4, [pc, #132]	; (3240 <uarte_nrfx_configure+0x144>)
    31bc:	42a3      	cmp	r3, r4
    31be:	d038      	beq.n	3232 <uarte_nrfx_configure+0x136>
    31c0:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    31c4:	d1bf      	bne.n	3146 <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    31c6:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    31ca:	e004      	b.n	31d6 <uarte_nrfx_configure+0xda>
	switch (baudrate) {
    31cc:	4c1d      	ldr	r4, [pc, #116]	; (3244 <uarte_nrfx_configure+0x148>)
    31ce:	42a3      	cmp	r3, r4
    31d0:	d1b9      	bne.n	3146 <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    31d2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uarte_nrfx_data *data = dev->data;
    31d6:	6904      	ldr	r4, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    31d8:	f8c6 3524 	str.w	r3, [r6, #1316]	; 0x524
	return config->uarte_regs;
    31dc:	6843      	ldr	r3, [r0, #4]
    31de:	681b      	ldr	r3, [r3, #0]
                    | (uint32_t)p_cfg->hwfc;
    31e0:	432a      	orrs	r2, r5
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    31e2:	f8c3 256c 	str.w	r2, [r3, #1388]	; 0x56c
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	data->uart_config = *cfg;
    31e6:	c903      	ldmia	r1, {r0, r1}
    31e8:	1d23      	adds	r3, r4, #4
    31ea:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    31ee:	2000      	movs	r0, #0
}
    31f0:	bd70      	pop	{r4, r5, r6, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    31f2:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    31f6:	e7ee      	b.n	31d6 <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    31f8:	4b13      	ldr	r3, [pc, #76]	; (3248 <uarte_nrfx_configure+0x14c>)
    31fa:	e7ec      	b.n	31d6 <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    31fc:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    3200:	e7e9      	b.n	31d6 <uarte_nrfx_configure+0xda>
		nrf_baudrate = 0x00014000;
    3202:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    3206:	e7e6      	b.n	31d6 <uarte_nrfx_configure+0xda>
	switch (baudrate) {
    3208:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    320c:	e7e3      	b.n	31d6 <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    320e:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    3212:	e7e0      	b.n	31d6 <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    3214:	4b0d      	ldr	r3, [pc, #52]	; (324c <uarte_nrfx_configure+0x150>)
    3216:	e7de      	b.n	31d6 <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    3218:	4b0d      	ldr	r3, [pc, #52]	; (3250 <uarte_nrfx_configure+0x154>)
    321a:	e7dc      	b.n	31d6 <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    321c:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    3220:	e7d9      	b.n	31d6 <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    3222:	4b0c      	ldr	r3, [pc, #48]	; (3254 <uarte_nrfx_configure+0x158>)
    3224:	e7d7      	b.n	31d6 <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    3226:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    322a:	e7d4      	b.n	31d6 <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    322c:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    3230:	e7d1      	b.n	31d6 <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    3232:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    3236:	e7ce      	b.n	31d6 <uarte_nrfx_configure+0xda>
    3238:	0013b000 	.word	0x0013b000
    323c:	004ea000 	.word	0x004ea000
    3240:	0003d090 	.word	0x0003d090
    3244:	000f4240 	.word	0x000f4240
    3248:	00275000 	.word	0x00275000
    324c:	0075c000 	.word	0x0075c000
    3250:	003af000 	.word	0x003af000
    3254:	013a9000 	.word	0x013a9000

00003258 <uarte_0_init>:
		(__attribute__((__section__(LINKER_DT_NODE_REGION_NAME(	       \
			DT_PHANDLE(UARTE(idx), memory_regions)))))),	       \
		())

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
    3258:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    325c:	4680      	mov	r8, r0
    325e:	2200      	movs	r2, #0
    3260:	2101      	movs	r1, #1
    3262:	2002      	movs	r0, #2
    3264:	f7fe fc7e 	bl	1b64 <z_arm_irq_priority_set>
    3268:	2002      	movs	r0, #2
    326a:	f7fe fc5f 	bl	1b2c <arch_irq_enable>
	const struct uarte_nrfx_config *config = dev->config;
    326e:	f8d8 7004 	ldr.w	r7, [r8, #4]
	struct uarte_nrfx_data *data = dev->data;
    3272:	f8d8 6010 	ldr.w	r6, [r8, #16]
	return config->uarte_regs;
    3276:	683c      	ldr	r4, [r7, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    3278:	2100      	movs	r1, #0
    327a:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
	data->dev = dev;
    327e:	f8c6 8000 	str.w	r8, [r6]
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
    3282:	f8d7 900c 	ldr.w	r9, [r7, #12]
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
    3286:	aa01      	add	r2, sp, #4
    3288:	4648      	mov	r0, r9
    328a:	f004 f9a4 	bl	75d6 <pinctrl_lookup_state>
	if (ret < 0) {
    328e:	1e05      	subs	r5, r0, #0
    3290:	db1e      	blt.n	32d0 <uarte_0_init+0x78>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
    3292:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    3294:	f8d9 2000 	ldr.w	r2, [r9]
    3298:	7919      	ldrb	r1, [r3, #4]
    329a:	6818      	ldr	r0, [r3, #0]
    329c:	f004 f9b1 	bl	7602 <pinctrl_configure_pins>
	if (err < 0) {
    32a0:	1e05      	subs	r5, r0, #0
    32a2:	db15      	blt.n	32d0 <uarte_0_init+0x78>
	err = uarte_nrfx_configure(dev, &data->uart_config);
    32a4:	1d31      	adds	r1, r6, #4
    32a6:	4640      	mov	r0, r8
    32a8:	f7ff ff28 	bl	30fc <uarte_nrfx_configure>
	if (err) {
    32ac:	4605      	mov	r5, r0
    32ae:	b978      	cbnz	r0, 32d0 <uarte_0_init+0x78>
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    32b0:	687b      	ldr	r3, [r7, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    32b2:	0799      	lsls	r1, r3, #30
    32b4:	d524      	bpl.n	3300 <uarte_0_init+0xa8>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    32b6:	f106 0018 	add.w	r0, r6, #24
    32ba:	f001 fd75 	bl	4da8 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    32be:	4b24      	ldr	r3, [pc, #144]	; (3350 <uarte_0_init+0xf8>)
    32c0:	4298      	cmp	r0, r3
    32c2:	d009      	beq.n	32d8 <uarte_0_init+0x80>
		LOG_ERR("Failed to allocate PPI Channel");
    32c4:	4823      	ldr	r0, [pc, #140]	; (3354 <uarte_0_init+0xfc>)
    32c6:	2145      	movs	r1, #69	; 0x45
    32c8:	f003 fca4 	bl	6c14 <z_log_minimal_printk>
		return -EIO;
    32cc:	f06f 0504 	mvn.w	r5, #4
UART_NRF_UARTE_DEVICE(0);
    32d0:	4628      	mov	r0, r5
    32d2:	b003      	add	sp, #12
    32d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
    32d8:	7e33      	ldrb	r3, [r6, #24]
    32da:	00db      	lsls	r3, r3, #3
    32dc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    32e0:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    return (uint32_t)p_reg + (uint32_t)task;
    32e4:	f104 020c 	add.w	r2, r4, #12
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    32e8:	f504 7190 	add.w	r1, r4, #288	; 0x120
    32ec:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
    32f0:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    32f4:	7e32      	ldrb	r2, [r6, #24]
    32f6:	2301      	movs	r3, #1
    32f8:	4093      	lsls	r3, r2
    p_reg->CHENSET = mask;
    32fa:	4a17      	ldr	r2, [pc, #92]	; (3358 <uarte_0_init+0x100>)
    32fc:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    3300:	2308      	movs	r3, #8
    3302:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (!cfg->disable_rx) {
    3306:	7a3b      	ldrb	r3, [r7, #8]
    3308:	b953      	cbnz	r3, 3320 <uarte_0_init+0xc8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    330a:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    330e:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    3312:	6973      	ldr	r3, [r6, #20]
    3314:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    3318:	2301      	movs	r3, #1
    331a:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    331e:	6023      	str	r3, [r4, #0]
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    3320:	687b      	ldr	r3, [r7, #4]
    3322:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
    3324:	bf5c      	itt	pl
    3326:	f44f 7380 	movpl.w	r3, #256	; 0x100
    332a:	f8c4 3304 	strpl.w	r3, [r4, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    332e:	687b      	ldr	r3, [r7, #4]
    3330:	06db      	lsls	r3, r3, #27
    3332:	bf44      	itt	mi
    3334:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
    3338:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    333c:	6933      	ldr	r3, [r6, #16]
    333e:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    3342:	2300      	movs	r3, #0
    3344:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3348:	2301      	movs	r3, #1
    334a:	60a3      	str	r3, [r4, #8]
    334c:	60e3      	str	r3, [r4, #12]
UART_NRF_UARTE_DEVICE(0);
    334e:	e7bf      	b.n	32d0 <uarte_0_init+0x78>
    3350:	0bad0000 	.word	0x0bad0000
    3354:	0000a89c 	.word	0x0000a89c
    3358:	4001f000 	.word	0x4001f000

0000335c <uarte_nrfx_poll_out>:
{
    335c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    335e:	4604      	mov	r4, r0
	struct uarte_nrfx_data *data = dev->data;
    3360:	6907      	ldr	r7, [r0, #16]
{
    3362:	460d      	mov	r5, r1
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    3364:	f005 fed7 	bl	9116 <k_is_in_isr>
    3368:	b9b0      	cbnz	r0, 3398 <uarte_nrfx_poll_out+0x3c>
    336a:	4b2e      	ldr	r3, [pc, #184]	; (3424 <uarte_nrfx_poll_out+0xc8>)
    336c:	781b      	ldrb	r3, [r3, #0]
    336e:	b19b      	cbz	r3, 3398 <uarte_nrfx_poll_out+0x3c>
{
    3370:	2664      	movs	r6, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    3372:	6860      	ldr	r0, [r4, #4]
    3374:	f004 f8e6 	bl	7544 <is_tx_ready.isra.0>
    3378:	bb00      	cbnz	r0, 33bc <uarte_nrfx_poll_out+0x60>
    337a:	2001      	movs	r0, #1
    337c:	f005 fe57 	bl	902e <nrfx_busy_wait>
    3380:	3e01      	subs	r6, #1
    3382:	d1f6      	bne.n	3372 <uarte_nrfx_poll_out+0x16>
	return z_impl_k_sleep(timeout);
    3384:	2100      	movs	r1, #0
    3386:	2021      	movs	r0, #33	; 0x21
    3388:	f002 fe84 	bl	6094 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    338c:	e7f0      	b.n	3370 <uarte_nrfx_poll_out+0x14>
	__asm__ volatile(
    338e:	f386 8811 	msr	BASEPRI, r6
    3392:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    3396:	e7f5      	b.n	3384 <uarte_nrfx_poll_out+0x28>
	__asm__ volatile(
    3398:	f04f 0320 	mov.w	r3, #32
    339c:	f3ef 8611 	mrs	r6, BASEPRI
    33a0:	f383 8812 	msr	BASEPRI_MAX, r3
    33a4:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    33a8:	6860      	ldr	r0, [r4, #4]
    33aa:	4631      	mov	r1, r6
    33ac:	f004 f8ca 	bl	7544 <is_tx_ready.isra.0>
    33b0:	b990      	cbnz	r0, 33d8 <uarte_nrfx_poll_out+0x7c>
	__asm__ volatile(
    33b2:	f386 8811 	msr	BASEPRI, r6
    33b6:	f3bf 8f6f 	isb	sy
}
    33ba:	e7ed      	b.n	3398 <uarte_nrfx_poll_out+0x3c>
	__asm__ volatile(
    33bc:	f04f 0320 	mov.w	r3, #32
    33c0:	f3ef 8611 	mrs	r6, BASEPRI
    33c4:	f383 8812 	msr	BASEPRI_MAX, r3
    33c8:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    33cc:	6860      	ldr	r0, [r4, #4]
    33ce:	4631      	mov	r1, r6
    33d0:	f004 f8b8 	bl	7544 <is_tx_ready.isra.0>
    33d4:	2800      	cmp	r0, #0
    33d6:	d0da      	beq.n	338e <uarte_nrfx_poll_out+0x32>
	*data->char_out = c;
    33d8:	693b      	ldr	r3, [r7, #16]
    33da:	701d      	strb	r5, [r3, #0]
	const struct uarte_nrfx_config *config = dev->config;
    33dc:	6862      	ldr	r2, [r4, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    33de:	6938      	ldr	r0, [r7, #16]
	return config->uarte_regs;
    33e0:	6813      	ldr	r3, [r2, #0]
    33e2:	f8c3 0544 	str.w	r0, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    33e6:	2001      	movs	r0, #1
    33e8:	f8c3 0548 	str.w	r0, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    33ec:	2000      	movs	r0, #0
    33ee:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
    33f2:	f8d3 5120 	ldr.w	r5, [r3, #288]	; 0x120
    33f6:	f8c3 0158 	str.w	r0, [r3, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    33fa:	6852      	ldr	r2, [r2, #4]
    33fc:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
    3400:	06d2      	lsls	r2, r2, #27
    3402:	d508      	bpl.n	3416 <uarte_nrfx_poll_out+0xba>
	return config->uarte_regs;
    3404:	6862      	ldr	r2, [r4, #4]
    3406:	6812      	ldr	r2, [r2, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    3408:	2008      	movs	r0, #8
    340a:	f8c2 0500 	str.w	r0, [r2, #1280]	; 0x500
    p_reg->INTENSET = mask;
    340e:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    3412:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3416:	2201      	movs	r2, #1
    3418:	609a      	str	r2, [r3, #8]
	__asm__ volatile(
    341a:	f381 8811 	msr	BASEPRI, r1
    341e:	f3bf 8f6f 	isb	sy
}
    3422:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3424:	20002f0c 	.word	0x20002f0c

00003428 <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
    3428:	b570      	push	{r4, r5, r6, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    342a:	2301      	movs	r3, #1
    342c:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    342e:	4a0e      	ldr	r2, [pc, #56]	; (3468 <compare_int_lock+0x40>)
    3430:	f3bf 8f5b 	dmb	ish
    3434:	43dc      	mvns	r4, r3
    3436:	e852 1f00 	ldrex	r1, [r2]
    343a:	ea01 0504 	and.w	r5, r1, r4
    343e:	e842 5600 	strex	r6, r5, [r2]
    3442:	2e00      	cmp	r6, #0
    3444:	d1f7      	bne.n	3436 <compare_int_lock+0xe>
    3446:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    344a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    344e:	4082      	lsls	r2, r0
    3450:	4806      	ldr	r0, [pc, #24]	; (346c <compare_int_lock+0x44>)
    3452:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
    3456:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    345a:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
    345e:	420b      	tst	r3, r1
}
    3460:	bf14      	ite	ne
    3462:	2001      	movne	r0, #1
    3464:	2000      	moveq	r0, #0
    3466:	bd70      	pop	{r4, r5, r6, pc}
    3468:	20001068 	.word	0x20001068
    346c:	40011000 	.word	0x40011000

00003470 <sys_clock_timeout_handler>:
}

static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
    3470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    3472:	491b      	ldr	r1, [pc, #108]	; (34e0 <sys_clock_timeout_handler+0x70>)
{
    3474:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
    3476:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    347a:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
    347c:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    3480:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    3484:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
    3486:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    348a:	d30f      	bcc.n	34ac <sys_clock_timeout_handler+0x3c>
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    348c:	f002 ff7a 	bl	6384 <sys_clock_announce>
    return p_reg->CC[ch];
    3490:	00a3      	lsls	r3, r4, #2
    3492:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    3496:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    349a:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
    349e:	4295      	cmp	r5, r2
    34a0:	d11d      	bne.n	34de <sys_clock_timeout_handler+0x6e>
    p_reg->CC[ch] = cc_val;
    34a2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
    34a6:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
}
    34aa:	e012      	b.n	34d2 <sys_clock_timeout_handler+0x62>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    34ac:	4b0d      	ldr	r3, [pc, #52]	; (34e4 <sys_clock_timeout_handler+0x74>)
    34ae:	681b      	ldr	r3, [r3, #0]
    34b0:	0a1a      	lsrs	r2, r3, #8
    34b2:	061b      	lsls	r3, r3, #24
    34b4:	195e      	adds	r6, r3, r5
    34b6:	4b0c      	ldr	r3, [pc, #48]	; (34e8 <sys_clock_timeout_handler+0x78>)
    34b8:	f142 0700 	adc.w	r7, r2, #0
    34bc:	e9c3 6700 	strd	r6, r7, [r3]
	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    34c0:	f002 ff60 	bl	6384 <sys_clock_announce>
    return p_reg->CC[ch];
    34c4:	4a09      	ldr	r2, [pc, #36]	; (34ec <sys_clock_timeout_handler+0x7c>)
    34c6:	f504 73a8 	add.w	r3, r4, #336	; 0x150
    34ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	if (cc_value == get_comparator(chan)) {
    34ce:	429d      	cmp	r5, r3
    34d0:	d105      	bne.n	34de <sys_clock_timeout_handler+0x6e>
    p_reg->EVTENSET = mask;
    34d2:	4a06      	ldr	r2, [pc, #24]	; (34ec <sys_clock_timeout_handler+0x7c>)
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    34d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    34d8:	40a3      	lsls	r3, r4
    34da:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
		if (!anchor_updated) {
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
    34de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    34e0:	200001a8 	.word	0x200001a8
    34e4:	2000106c 	.word	0x2000106c
    34e8:	200001b0 	.word	0x200001b0
    34ec:	40011000 	.word	0x40011000

000034f0 <compare_int_unlock>:
	if (key) {
    34f0:	b311      	cbz	r1, 3538 <compare_int_unlock+0x48>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    34f2:	f3bf 8f5b 	dmb	ish
		atomic_or(&int_mask, BIT(chan));
    34f6:	2301      	movs	r3, #1
    34f8:	4a10      	ldr	r2, [pc, #64]	; (353c <compare_int_unlock+0x4c>)
    34fa:	4083      	lsls	r3, r0
    34fc:	e852 cf00 	ldrex	ip, [r2]
    3500:	ea4c 0c03 	orr.w	ip, ip, r3
    3504:	e842 c100 	strex	r1, ip, [r2]
    3508:	2900      	cmp	r1, #0
    350a:	d1f7      	bne.n	34fc <compare_int_unlock+0xc>
    350c:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
    3510:	4a0b      	ldr	r2, [pc, #44]	; (3540 <compare_int_unlock+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    3512:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    3516:	4083      	lsls	r3, r0
    3518:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    351c:	4b09      	ldr	r3, [pc, #36]	; (3544 <compare_int_unlock+0x54>)
    351e:	f3bf 8f5b 	dmb	ish
    3522:	681b      	ldr	r3, [r3, #0]
    3524:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    3528:	40c3      	lsrs	r3, r0
    352a:	07db      	lsls	r3, r3, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    352c:	bf42      	ittt	mi
    352e:	4b06      	ldrmi	r3, [pc, #24]	; (3548 <compare_int_unlock+0x58>)
    3530:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
    3534:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
    3538:	4770      	bx	lr
    353a:	bf00      	nop
    353c:	20001068 	.word	0x20001068
    3540:	40011000 	.word	0x40011000
    3544:	20001064 	.word	0x20001064
    3548:	e000e100 	.word	0xe000e100

0000354c <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    354c:	4b0d      	ldr	r3, [pc, #52]	; (3584 <z_nrf_rtc_timer_read+0x38>)
    354e:	6818      	ldr	r0, [r3, #0]
    3550:	0a01      	lsrs	r1, r0, #8
    3552:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
    3554:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
    3558:	4b0b      	ldr	r3, [pc, #44]	; (3588 <z_nrf_rtc_timer_read+0x3c>)
    355a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
    355e:	1818      	adds	r0, r3, r0
    3560:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    3564:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    3568:	d20a      	bcs.n	3580 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
    356a:	4b08      	ldr	r3, [pc, #32]	; (358c <z_nrf_rtc_timer_read+0x40>)
    356c:	e9d3 2300 	ldrd	r2, r3, [r3]
    3570:	4290      	cmp	r0, r2
    3572:	eb71 0303 	sbcs.w	r3, r1, r3
    3576:	d203      	bcs.n	3580 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
    3578:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    357c:	f141 0100 	adc.w	r1, r1, #0
}
    3580:	4770      	bx	lr
    3582:	bf00      	nop
    3584:	2000106c 	.word	0x2000106c
    3588:	40011000 	.word	0x40011000
    358c:	200001b0 	.word	0x200001b0

00003590 <compare_set>:
{
    3590:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3594:	4614      	mov	r4, r2
    3596:	461d      	mov	r5, r3
    3598:	4607      	mov	r7, r0
	key = compare_int_lock(chan);
    359a:	f7ff ff45 	bl	3428 <compare_int_lock>
    359e:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
    35a0:	f7ff ffd4 	bl	354c <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    35a4:	42a0      	cmp	r0, r4
    35a6:	eb71 0305 	sbcs.w	r3, r1, r5
    35aa:	d27a      	bcs.n	36a2 <compare_set+0x112>
		if (target_time - curr_time > COUNTER_SPAN) {
    35ac:	4b46      	ldr	r3, [pc, #280]	; (36c8 <compare_set+0x138>)
    35ae:	1a20      	subs	r0, r4, r0
    35b0:	eb65 0101 	sbc.w	r1, r5, r1
    35b4:	4298      	cmp	r0, r3
    35b6:	f171 0100 	sbcs.w	r1, r1, #0
    35ba:	f080 8081 	bcs.w	36c0 <compare_set+0x130>
		if (target_time != cc_data[chan].target_time) {
    35be:	4b43      	ldr	r3, [pc, #268]	; (36cc <compare_set+0x13c>)
    35c0:	eb03 1307 	add.w	r3, r3, r7, lsl #4
    35c4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    35c8:	429d      	cmp	r5, r3
    35ca:	bf08      	it	eq
    35cc:	4294      	cmpeq	r4, r2
    35ce:	d053      	beq.n	3678 <compare_set+0xe8>
    35d0:	ea4f 0a87 	mov.w	sl, r7, lsl #2
    35d4:	f10a 4a80 	add.w	sl, sl, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    35d8:	f107 0950 	add.w	r9, r7, #80	; 0x50
    35dc:	f50a 3a88 	add.w	sl, sl, #69632	; 0x11000
    35e0:	ea4f 0989 	mov.w	r9, r9, lsl #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    35e4:	fa1f f989 	uxth.w	r9, r9
	return absolute_time & COUNTER_MAX;
    35e8:	f024 487f 	bic.w	r8, r4, #4278190080	; 0xff000000
    35ec:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    35f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    return p_reg->CC[ch];
    35f4:	f8da 0540 	ldr.w	r0, [sl, #1344]	; 0x540
     return p_reg->COUNTER;
    35f8:	4a35      	ldr	r2, [pc, #212]	; (36d0 <compare_set+0x140>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    35fa:	f509 3988 	add.w	r9, r9, #69632	; 0x11000
    35fe:	40bb      	lsls	r3, r7
	uint32_t cc_val = abs_val & COUNTER_MAX;
    3600:	4646      	mov	r6, r8
     return p_reg->COUNTER;
    3602:	f8d2 b504 	ldr.w	fp, [r2, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    3606:	eba0 000b 	sub.w	r0, r0, fp
    360a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    360e:	f02b 417f 	bic.w	r1, fp, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
    3612:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
    3614:	f8ca 1540 	str.w	r1, [sl, #1344]	; 0x540
    3618:	d105      	bne.n	3626 <compare_set+0x96>
    361a:	9301      	str	r3, [sp, #4]
	z_impl_k_busy_wait(usec_to_wait);
    361c:	2013      	movs	r0, #19
    361e:	f005 fed3 	bl	93c8 <z_impl_k_busy_wait>
    3622:	4a2b      	ldr	r2, [pc, #172]	; (36d0 <compare_set+0x140>)
    3624:	9b01      	ldr	r3, [sp, #4]
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    3626:	f10b 0c02 	add.w	ip, fp, #2
	return (a - b) & COUNTER_MAX;
    362a:	eba6 000c 	sub.w	r0, r6, ip
    362e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			cc_val = now + 2;
    3632:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    3636:	bf88      	it	hi
    3638:	4666      	movhi	r6, ip
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    363a:	2000      	movs	r0, #0
    363c:	f8c9 0000 	str.w	r0, [r9]
    3640:	f8d9 0000 	ldr.w	r0, [r9]
    p_reg->EVTENSET = mask;
    3644:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    3648:	f026 407f 	bic.w	r0, r6, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    364c:	f8ca 0540 	str.w	r0, [sl, #1344]	; 0x540
     return p_reg->COUNTER;
    3650:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
	} while ((now2 != now) &&
    3654:	4583      	cmp	fp, r0
    3656:	d006      	beq.n	3666 <compare_set+0xd6>
	return (a - b) & COUNTER_MAX;
    3658:	1a30      	subs	r0, r6, r0
    365a:	3802      	subs	r0, #2
    365c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
    3660:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    3664:	d81b      	bhi.n	369e <compare_set+0x10e>
	return (a - b) & COUNTER_MAX;
    3666:	eba6 0608 	sub.w	r6, r6, r8
    366a:	f026 467f 	bic.w	r6, r6, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
    366e:	1936      	adds	r6, r6, r4
    3670:	f145 0300 	adc.w	r3, r5, #0
    3674:	4634      	mov	r4, r6
    3676:	461d      	mov	r5, r3
	cc_data[chan].target_time = target_time;
    3678:	4914      	ldr	r1, [pc, #80]	; (36cc <compare_set+0x13c>)
	cc_data[chan].callback = handler;
    367a:	980c      	ldr	r0, [sp, #48]	; 0x30
	cc_data[chan].target_time = target_time;
    367c:	013b      	lsls	r3, r7, #4
    367e:	eb01 1207 	add.w	r2, r1, r7, lsl #4
	cc_data[chan].callback = handler;
    3682:	50c8      	str	r0, [r1, r3]
	cc_data[chan].user_context = user_data;
    3684:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    3686:	6053      	str	r3, [r2, #4]
	cc_data[chan].target_time = target_time;
    3688:	e9c2 4502 	strd	r4, r5, [r2, #8]
	return ret;
    368c:	2400      	movs	r4, #0
	compare_int_unlock(chan, key);
    368e:	4638      	mov	r0, r7
    3690:	9900      	ldr	r1, [sp, #0]
    3692:	f7ff ff2d 	bl	34f0 <compare_int_unlock>
}
    3696:	4620      	mov	r0, r4
    3698:	b003      	add	sp, #12
    369a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    369e:	4630      	mov	r0, r6
    36a0:	e7af      	b.n	3602 <compare_set+0x72>
		atomic_or(&force_isr_mask, BIT(chan));
    36a2:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    36a4:	4a0b      	ldr	r2, [pc, #44]	; (36d4 <compare_set+0x144>)
    36a6:	f3bf 8f5b 	dmb	ish
    36aa:	40bb      	lsls	r3, r7
    36ac:	e852 0f00 	ldrex	r0, [r2]
    36b0:	4318      	orrs	r0, r3
    36b2:	e842 0100 	strex	r1, r0, [r2]
    36b6:	2900      	cmp	r1, #0
    36b8:	d1f8      	bne.n	36ac <compare_set+0x11c>
    36ba:	f3bf 8f5b 	dmb	ish
    36be:	e7db      	b.n	3678 <compare_set+0xe8>
			return -EINVAL;
    36c0:	f06f 0415 	mvn.w	r4, #21
    36c4:	e7e3      	b.n	368e <compare_set+0xfe>
    36c6:	bf00      	nop
    36c8:	01000001 	.word	0x01000001
    36cc:	20000198 	.word	0x20000198
    36d0:	40011000 	.word	0x40011000
    36d4:	20001064 	.word	0x20001064

000036d8 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
    36d8:	b573      	push	{r0, r1, r4, r5, r6, lr}
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    36da:	4b19      	ldr	r3, [pc, #100]	; (3740 <sys_clock_driver_init+0x68>)
    p_reg->PRESCALER = val;
    36dc:	4d19      	ldr	r5, [pc, #100]	; (3744 <sys_clock_driver_init+0x6c>)
    36de:	2400      	movs	r4, #0
    36e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    36e4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    36e8:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    36ec:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
    36f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    36f4:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    36f8:	4b13      	ldr	r3, [pc, #76]	; (3748 <sys_clock_driver_init+0x70>)
    36fa:	2602      	movs	r6, #2
    36fc:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    3700:	2101      	movs	r1, #1
    3702:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
    3706:	2011      	movs	r0, #17
    3708:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    370c:	4622      	mov	r2, r4
    370e:	f7fe fa29 	bl	1b64 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    3712:	2011      	movs	r0, #17
    3714:	f7fe fa0a 	bl	1b2c <arch_irq_enable>

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    3718:	4a0c      	ldr	r2, [pc, #48]	; (374c <sys_clock_driver_init+0x74>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    371a:	2301      	movs	r3, #1
    371c:	60ab      	str	r3, [r5, #8]
    371e:	602b      	str	r3, [r5, #0]
    3720:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    3722:	4b0b      	ldr	r3, [pc, #44]	; (3750 <sys_clock_driver_init+0x78>)
    3724:	4a0b      	ldr	r2, [pc, #44]	; (3754 <sys_clock_driver_init+0x7c>)
    3726:	9300      	str	r3, [sp, #0]
    3728:	9401      	str	r4, [sp, #4]
    372a:	2300      	movs	r3, #0
    372c:	4620      	mov	r0, r4
    372e:	f7ff ff2f 	bl	3590 <compare_set>

	z_nrf_clock_control_lf_on(mode);
    3732:	4630      	mov	r0, r6
    3734:	f7fe ffb0 	bl	2698 <z_nrf_clock_control_lf_on>

	return 0;
}
    3738:	4620      	mov	r0, r4
    373a:	b002      	add	sp, #8
    373c:	bd70      	pop	{r4, r5, r6, pc}
    373e:	bf00      	nop
    3740:	20000198 	.word	0x20000198
    3744:	40011000 	.word	0x40011000
    3748:	e000e100 	.word	0xe000e100
    374c:	20001068 	.word	0x20001068
    3750:	00003471 	.word	0x00003471
    3754:	007fffff 	.word	0x007fffff

00003758 <rtc_nrf_isr>:
{
    3758:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
    375c:	4c33      	ldr	r4, [pc, #204]	; (382c <rtc_nrf_isr+0xd4>)
    375e:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    3762:	079a      	lsls	r2, r3, #30
    3764:	d50b      	bpl.n	377e <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3766:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    376a:	b143      	cbz	r3, 377e <rtc_nrf_isr+0x26>
		overflow_cnt++;
    376c:	4a30      	ldr	r2, [pc, #192]	; (3830 <rtc_nrf_isr+0xd8>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    376e:	2300      	movs	r3, #0
    3770:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    3774:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    3778:	6813      	ldr	r3, [r2, #0]
    377a:	3301      	adds	r3, #1
    377c:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
    377e:	f04f 0320 	mov.w	r3, #32
    3782:	f3ef 8211 	mrs	r2, BASEPRI
    3786:	f383 8812 	msr	BASEPRI_MAX, r3
    378a:	f3bf 8f6f 	isb	sy
    return p_reg->INTENSET & mask;
    378e:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    3792:	03db      	lsls	r3, r3, #15
    3794:	d529      	bpl.n	37ea <rtc_nrf_isr+0x92>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    3796:	f3bf 8f5b 	dmb	ish
    379a:	4b26      	ldr	r3, [pc, #152]	; (3834 <rtc_nrf_isr+0xdc>)
    379c:	e853 1f00 	ldrex	r1, [r3]
    37a0:	f021 0001 	bic.w	r0, r1, #1
    37a4:	e843 0500 	strex	r5, r0, [r3]
    37a8:	2d00      	cmp	r5, #0
    37aa:	d1f7      	bne.n	379c <rtc_nrf_isr+0x44>
    37ac:	f3bf 8f5b 	dmb	ish
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    37b0:	b911      	cbnz	r1, 37b8 <rtc_nrf_isr+0x60>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    37b2:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    37b6:	b1c3      	cbz	r3, 37ea <rtc_nrf_isr+0x92>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    37b8:	2500      	movs	r5, #0
    37ba:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    37be:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
	__asm__ volatile(
    37c2:	f382 8811 	msr	BASEPRI, r2
    37c6:	f3bf 8f6f 	isb	sy
		curr_time = z_nrf_rtc_timer_read();
    37ca:	f7ff febf 	bl	354c <z_nrf_rtc_timer_read>
	__asm__ volatile(
    37ce:	f04f 0320 	mov.w	r3, #32
    37d2:	f3ef 8211 	mrs	r2, BASEPRI
    37d6:	f383 8812 	msr	BASEPRI_MAX, r3
    37da:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
    37de:	4b16      	ldr	r3, [pc, #88]	; (3838 <rtc_nrf_isr+0xe0>)
    37e0:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
    37e4:	42b0      	cmp	r0, r6
    37e6:	41b9      	sbcs	r1, r7
    37e8:	d206      	bcs.n	37f8 <rtc_nrf_isr+0xa0>
	__asm__ volatile(
    37ea:	f382 8811 	msr	BASEPRI, r2
    37ee:	f3bf 8f6f 	isb	sy
}
    37f2:	b003      	add	sp, #12
    37f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    37f8:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    37fc:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
			user_context = cc_data[chan].user_context;
    3800:	e9d3 1000 	ldrd	r1, r0, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    3804:	e9c3 8902 	strd	r8, r9, [r3, #8]
			cc_data[chan].callback = NULL;
    3808:	601d      	str	r5, [r3, #0]
    p_reg->EVTENCLR = mask;
    380a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    380e:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
    3812:	f382 8811 	msr	BASEPRI, r2
    3816:	f3bf 8f6f 	isb	sy
		if (handler) {
    381a:	2900      	cmp	r1, #0
    381c:	d0e9      	beq.n	37f2 <rtc_nrf_isr+0x9a>
			handler(chan, expire_time, user_context);
    381e:	9000      	str	r0, [sp, #0]
    3820:	4632      	mov	r2, r6
    3822:	463b      	mov	r3, r7
    3824:	4628      	mov	r0, r5
    3826:	4788      	blx	r1
}
    3828:	e7e3      	b.n	37f2 <rtc_nrf_isr+0x9a>
    382a:	bf00      	nop
    382c:	40011000 	.word	0x40011000
    3830:	2000106c 	.word	0x2000106c
    3834:	20001064 	.word	0x20001064
    3838:	20000198 	.word	0x20000198

0000383c <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    383c:	1c43      	adds	r3, r0, #1
{
    383e:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    3840:	d021      	beq.n	3886 <sys_clock_set_timeout+0x4a>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    3842:	2801      	cmp	r0, #1
    3844:	dd21      	ble.n	388a <sys_clock_set_timeout+0x4e>
    3846:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    384a:	da20      	bge.n	388e <sys_clock_set_timeout+0x52>
    384c:	1e44      	subs	r4, r0, #1
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    384e:	f7ff fe7d 	bl	354c <z_nrf_rtc_timer_read>
    3852:	4b10      	ldr	r3, [pc, #64]	; (3894 <sys_clock_set_timeout+0x58>)
    3854:	e9d3 1300 	ldrd	r1, r3, [r3]
    3858:	1a42      	subs	r2, r0, r1
		ticks = 0;
    385a:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
	if (cyc > MAX_CYCLES) {
    385e:	480e      	ldr	r0, [pc, #56]	; (3898 <sys_clock_set_timeout+0x5c>)
		ticks = 0;
    3860:	bf28      	it	cs
    3862:	2400      	movcs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    3864:	3201      	adds	r2, #1
    3866:	4422      	add	r2, r4
	if (cyc > MAX_CYCLES) {
    3868:	4282      	cmp	r2, r0
    386a:	bf28      	it	cs
    386c:	4602      	movcs	r2, r0
	uint64_t target_time = cyc + last_count;
    386e:	1852      	adds	r2, r2, r1
    3870:	f04f 0000 	mov.w	r0, #0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    3874:	4909      	ldr	r1, [pc, #36]	; (389c <sys_clock_set_timeout+0x60>)
    3876:	9001      	str	r0, [sp, #4]
    3878:	9100      	str	r1, [sp, #0]
    387a:	f143 0300 	adc.w	r3, r3, #0
    387e:	f7ff fe87 	bl	3590 <compare_set>
}
    3882:	b002      	add	sp, #8
    3884:	bd10      	pop	{r4, pc}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    3886:	4804      	ldr	r0, [pc, #16]	; (3898 <sys_clock_set_timeout+0x5c>)
    3888:	e7e0      	b.n	384c <sys_clock_set_timeout+0x10>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    388a:	2400      	movs	r4, #0
    388c:	e7df      	b.n	384e <sys_clock_set_timeout+0x12>
    388e:	4c02      	ldr	r4, [pc, #8]	; (3898 <sys_clock_set_timeout+0x5c>)
    3890:	e7dd      	b.n	384e <sys_clock_set_timeout+0x12>
    3892:	bf00      	nop
    3894:	200001a8 	.word	0x200001a8
    3898:	007fffff 	.word	0x007fffff
    389c:	00003471 	.word	0x00003471

000038a0 <sys_clock_elapsed>:
{
    38a0:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    38a2:	f7ff fe53 	bl	354c <z_nrf_rtc_timer_read>
    38a6:	4b02      	ldr	r3, [pc, #8]	; (38b0 <sys_clock_elapsed+0x10>)
    38a8:	681b      	ldr	r3, [r3, #0]
}
    38aa:	1ac0      	subs	r0, r0, r3
    38ac:	bd08      	pop	{r3, pc}
    38ae:	bf00      	nop
    38b0:	200001a8 	.word	0x200001a8

000038b4 <k_sys_fatal_error_handler>:
	defined(CONFIG_SPM_SERVICE_NS_HANDLER_FROM_SPM_FAULT)
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
    38b4:	4803      	ldr	r0, [pc, #12]	; (38c4 <k_sys_fatal_error_handler+0x10>)
{
    38b6:	b508      	push	{r3, lr}
		LOG_ERR("Resetting system");
    38b8:	2145      	movs	r1, #69	; 0x45
    38ba:	f003 f9ab 	bl	6c14 <z_log_minimal_printk>
		sys_arch_reboot(0);
    38be:	2000      	movs	r0, #0
    38c0:	f7fe fdc8 	bl	2454 <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
    38c4:	0000a8de 	.word	0x0000a8de

000038c8 <boot_write_magic>:
    return rc;
}

int
boot_write_magic(const struct flash_area *fap)
{
    38c8:	b530      	push	{r4, r5, lr}
    return flash_area_get_size(fap) - BOOT_MAGIC_SZ;
    38ca:	6881      	ldr	r1, [r0, #8]
{
    38cc:	b085      	sub	sp, #20
    return flash_area_get_size(fap) - BOOT_MAGIC_SZ;
    38ce:	3910      	subs	r1, #16
     * returned by boot_magic_off() is the start of magic which is not the
     * start of the flash write boundary and thus writes to the magic will fail.
     * To account for this change, write to magic is first padded with 0xFF
     * before writing to the trailer.
     */
    pad_off = ALIGN_DOWN(off, BOOT_MAX_ALIGN);
    38d0:	f021 0407 	bic.w	r4, r1, #7
{
    38d4:	4605      	mov	r5, r0

    erased_val = flash_area_erased_val(fap);
    38d6:	f003 f9f0 	bl	6cba <flash_area_erased_val>

    memset(&magic[0], erased_val, sizeof(magic));
    38da:	2210      	movs	r2, #16
    erased_val = flash_area_erased_val(fap);
    38dc:	4601      	mov	r1, r0
    memset(&magic[0], erased_val, sizeof(magic));
    38de:	4668      	mov	r0, sp
    38e0:	f003 fa4f 	bl	6d82 <memset>
    memcpy(&magic[BOOT_MAGIC_ALIGN_SIZE - BOOT_MAGIC_SZ], BOOT_IMG_MAGIC, BOOT_MAGIC_SZ);
    38e4:	4907      	ldr	r1, [pc, #28]	; (3904 <boot_write_magic+0x3c>)
    38e6:	2210      	movs	r2, #16
    38e8:	4668      	mov	r0, sp
    38ea:	f003 fa3f 	bl	6d6c <memcpy>

    BOOT_LOG_DBG("writing magic; fa_id=%d off=0x%lx (0x%lx)",
                 flash_area_get_id(fap), (unsigned long)off,
                 (unsigned long)(flash_area_get_off(fap) + off));
    rc = flash_area_write(fap, pad_off, &magic[0], BOOT_MAGIC_ALIGN_SIZE);
    38ee:	2310      	movs	r3, #16
    38f0:	466a      	mov	r2, sp
    38f2:	4621      	mov	r1, r4
    38f4:	4628      	mov	r0, r5
    38f6:	f003 f9b0 	bl	6c5a <flash_area_write>
    if (rc != 0) {
        return BOOT_EFLASH;
    }

    return 0;
}
    38fa:	3800      	subs	r0, #0
    38fc:	bf18      	it	ne
    38fe:	2001      	movne	r0, #1
    3900:	b005      	add	sp, #20
    3902:	bd30      	pop	{r4, r5, pc}
    3904:	00009adc 	.word	0x00009adc

00003908 <boot_read_swap_state>:
{
    3908:	b530      	push	{r4, r5, lr}
    390a:	460d      	mov	r5, r1
    return flash_area_get_size(fap) - BOOT_MAGIC_SZ;
    390c:	6881      	ldr	r1, [r0, #8]
{
    390e:	b087      	sub	sp, #28
    rc = flash_area_read(fap, off, magic, BOOT_MAGIC_SZ);
    3910:	2310      	movs	r3, #16
    3912:	aa02      	add	r2, sp, #8
    3914:	3910      	subs	r1, #16
{
    3916:	4604      	mov	r4, r0
    rc = flash_area_read(fap, off, magic, BOOT_MAGIC_SZ);
    3918:	f003 f98a 	bl	6c30 <flash_area_read>
    if (rc < 0) {
    391c:	2800      	cmp	r0, #0
    391e:	da02      	bge.n	3926 <boot_read_swap_state+0x1e>
        return BOOT_EFLASH;
    3920:	2001      	movs	r0, #1
}
    3922:	b007      	add	sp, #28
    3924:	bd30      	pop	{r4, r5, pc}
    if (bootutil_buffer_is_erased(fap, magic, BOOT_MAGIC_SZ)) {
    3926:	2210      	movs	r2, #16
    3928:	a902      	add	r1, sp, #8
    392a:	4620      	mov	r0, r4
    392c:	f003 ff1c 	bl	7768 <bootutil_buffer_is_erased>
    3930:	2800      	cmp	r0, #0
    3932:	d13a      	bne.n	39aa <boot_read_swap_state+0xa2>
    if (memcmp(magic, BOOT_IMG_MAGIC, BOOT_MAGIC_SZ) == 0) {
    3934:	491e      	ldr	r1, [pc, #120]	; (39b0 <boot_read_swap_state+0xa8>)
    3936:	2210      	movs	r2, #16
    3938:	a802      	add	r0, sp, #8
    393a:	f003 fa07 	bl	6d4c <memcmp>
    return BOOT_MAGIC_BAD;
    393e:	2800      	cmp	r0, #0
        state->magic = boot_magic_decode(magic);
    3940:	bf0c      	ite	eq
    3942:	2301      	moveq	r3, #1
    3944:	2302      	movne	r3, #2
        state->magic = BOOT_MAGIC_UNSET;
    3946:	702b      	strb	r3, [r5, #0]
    off = boot_swap_info_off(fap);
    3948:	4620      	mov	r0, r4
    394a:	f003 fef9 	bl	7740 <boot_swap_info_off>
    rc = flash_area_read(fap, off, &swap_info, sizeof swap_info);
    394e:	2301      	movs	r3, #1
    off = boot_swap_info_off(fap);
    3950:	4601      	mov	r1, r0
    rc = flash_area_read(fap, off, &swap_info, sizeof swap_info);
    3952:	f10d 0207 	add.w	r2, sp, #7
    3956:	4620      	mov	r0, r4
    3958:	f003 f96a 	bl	6c30 <flash_area_read>
    if (rc < 0) {
    395c:	2800      	cmp	r0, #0
    395e:	dbdf      	blt.n	3920 <boot_read_swap_state+0x18>
    state->swap_type = BOOT_GET_SWAP_TYPE(swap_info);
    3960:	f89d 3007 	ldrb.w	r3, [sp, #7]
    3964:	f003 020f 	and.w	r2, r3, #15
    state->image_num = BOOT_GET_IMAGE_NUM(swap_info);
    3968:	091b      	lsrs	r3, r3, #4
    state->swap_type = BOOT_GET_SWAP_TYPE(swap_info);
    396a:	706a      	strb	r2, [r5, #1]
    state->image_num = BOOT_GET_IMAGE_NUM(swap_info);
    396c:	712b      	strb	r3, [r5, #4]
    if (bootutil_buffer_is_erased(fap, &swap_info, sizeof swap_info) ||
    396e:	2201      	movs	r2, #1
    3970:	f10d 0107 	add.w	r1, sp, #7
    3974:	4620      	mov	r0, r4
    3976:	f003 fef7 	bl	7768 <bootutil_buffer_is_erased>
    397a:	b910      	cbnz	r0, 3982 <boot_read_swap_state+0x7a>
    397c:	786b      	ldrb	r3, [r5, #1]
    397e:	2b04      	cmp	r3, #4
    3980:	d903      	bls.n	398a <boot_read_swap_state+0x82>
        state->swap_type = BOOT_SWAP_TYPE_NONE;
    3982:	2301      	movs	r3, #1
    3984:	706b      	strb	r3, [r5, #1]
        state->image_num = 0;
    3986:	2300      	movs	r3, #0
    3988:	712b      	strb	r3, [r5, #4]
    return ALIGN_DOWN(boot_magic_off(fap) - BOOT_MAX_ALIGN, BOOT_MAX_ALIGN);
    398a:	68a2      	ldr	r2, [r4, #8]
    398c:	3a18      	subs	r2, #24
    398e:	f022 0207 	bic.w	r2, r2, #7
    return boot_read_flag(fap, copy_done, boot_copy_done_off(fap));
    3992:	3a08      	subs	r2, #8
    3994:	1ca9      	adds	r1, r5, #2
    3996:	4620      	mov	r0, r4
    3998:	f003 fef9 	bl	778e <boot_read_flag>
    if (rc) {
    399c:	2800      	cmp	r0, #0
    399e:	d1bf      	bne.n	3920 <boot_read_swap_state+0x18>
    return boot_read_image_ok(fap, &state->image_ok);
    39a0:	1ce9      	adds	r1, r5, #3
    39a2:	4620      	mov	r0, r4
    39a4:	f003 ff4c 	bl	7840 <boot_read_image_ok>
    39a8:	e7bb      	b.n	3922 <boot_read_swap_state+0x1a>
    39aa:	2303      	movs	r3, #3
    39ac:	e7cb      	b.n	3946 <boot_read_swap_state+0x3e>
    39ae:	bf00      	nop
    39b0:	00009adc 	.word	0x00009adc

000039b4 <boot_swap_type_multi>:
    return boot_write_trailer(fap, off, (const uint8_t *) &swap_info, 1);
}

int
boot_swap_type_multi(int image_index)
{
    39b4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    39b6:	4605      	mov	r5, r0

    rc = BOOT_HOOK_CALL(boot_read_swap_state_primary_slot_hook,
                        BOOT_HOOK_REGULAR, image_index, &primary_slot);
    if (rc == BOOT_HOOK_REGULAR)
    {
        rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_PRIMARY(image_index),
    39b8:	4669      	mov	r1, sp
    39ba:	2002      	movs	r0, #2
    39bc:	f003 ff46 	bl	784c <boot_read_swap_state_by_id>
                                        &primary_slot);
    }
    if (rc) {
    39c0:	4604      	mov	r4, r0
    39c2:	b110      	cbz	r0, 39ca <boot_swap_type_multi+0x16>
        return BOOT_SWAP_TYPE_PANIC;
    39c4:	20ff      	movs	r0, #255	; 0xff
        }
    }

    BOOT_LOG_INF("Swap type: none");
    return BOOT_SWAP_TYPE_NONE;
}
    39c6:	b004      	add	sp, #16
    39c8:	bd70      	pop	{r4, r5, r6, pc}
    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SECONDARY(image_index),
    39ca:	a902      	add	r1, sp, #8
    39cc:	2005      	movs	r0, #5
    39ce:	f003 ff3d 	bl	784c <boot_read_swap_state_by_id>
    if (rc == BOOT_EFLASH) {
    39d2:	2801      	cmp	r0, #1
    39d4:	d136      	bne.n	3a44 <boot_swap_type_multi+0x90>
        BOOT_LOG_INF("Secondary image of image pair (%d.) "
    39d6:	4829      	ldr	r0, [pc, #164]	; (3a7c <boot_swap_type_multi+0xc8>)
    39d8:	462a      	mov	r2, r5
    39da:	2149      	movs	r1, #73	; 0x49
    39dc:	f003 f91a 	bl	6c14 <z_log_minimal_printk>
        secondary_slot.magic = BOOT_MAGIC_UNSET;
    39e0:	4b27      	ldr	r3, [pc, #156]	; (3a80 <boot_swap_type_multi+0xcc>)
    39e2:	9302      	str	r3, [sp, #8]
        secondary_slot.image_num = 0;
    39e4:	f88d 400c 	strb.w	r4, [sp, #12]
        if (boot_magic_compatible_check(table->magic_primary_slot,
    39e8:	f89d 5000 	ldrb.w	r5, [sp]
            boot_magic_compatible_check(table->magic_secondary_slot,
    39ec:	f89d 6008 	ldrb.w	r6, [sp, #8]
    39f0:	4c24      	ldr	r4, [pc, #144]	; (3a84 <boot_swap_type_multi+0xd0>)
    39f2:	2200      	movs	r2, #0
        if (boot_magic_compatible_check(table->magic_primary_slot,
    39f4:	7820      	ldrb	r0, [r4, #0]
    39f6:	4629      	mov	r1, r5
    39f8:	f003 fea8 	bl	774c <boot_magic_compatible_check>
    39fc:	b348      	cbz	r0, 3a52 <boot_swap_type_multi+0x9e>
            boot_magic_compatible_check(table->magic_secondary_slot,
    39fe:	7860      	ldrb	r0, [r4, #1]
    3a00:	4631      	mov	r1, r6
    3a02:	f003 fea3 	bl	774c <boot_magic_compatible_check>
                                        primary_slot.magic) &&
    3a06:	b320      	cbz	r0, 3a52 <boot_swap_type_multi+0x9e>
            (table->image_ok_primary_slot == BOOT_FLAG_ANY   ||
    3a08:	78a3      	ldrb	r3, [r4, #2]
                                        secondary_slot.magic) &&
    3a0a:	2b04      	cmp	r3, #4
    3a0c:	d003      	beq.n	3a16 <boot_swap_type_multi+0x62>
            (table->image_ok_primary_slot == BOOT_FLAG_ANY   ||
    3a0e:	f89d 1003 	ldrb.w	r1, [sp, #3]
    3a12:	4299      	cmp	r1, r3
    3a14:	d11d      	bne.n	3a52 <boot_swap_type_multi+0x9e>
            (table->image_ok_secondary_slot == BOOT_FLAG_ANY ||
    3a16:	78e3      	ldrb	r3, [r4, #3]
                table->image_ok_primary_slot == primary_slot.image_ok) &&
    3a18:	2b04      	cmp	r3, #4
    3a1a:	d003      	beq.n	3a24 <boot_swap_type_multi+0x70>
            (table->image_ok_secondary_slot == BOOT_FLAG_ANY ||
    3a1c:	f89d 100b 	ldrb.w	r1, [sp, #11]
    3a20:	4299      	cmp	r1, r3
    3a22:	d116      	bne.n	3a52 <boot_swap_type_multi+0x9e>
            (table->copy_done_primary_slot == BOOT_FLAG_ANY  ||
    3a24:	7923      	ldrb	r3, [r4, #4]
                table->image_ok_secondary_slot == secondary_slot.image_ok) &&
    3a26:	2b04      	cmp	r3, #4
    3a28:	d10f      	bne.n	3a4a <boot_swap_type_multi+0x96>
            BOOT_LOG_INF("Swap type: %s",
    3a2a:	7963      	ldrb	r3, [r4, #5]
    3a2c:	2b02      	cmp	r3, #2
    3a2e:	d11b      	bne.n	3a68 <boot_swap_type_multi+0xb4>
    3a30:	4a15      	ldr	r2, [pc, #84]	; (3a88 <boot_swap_type_multi+0xd4>)
    3a32:	4816      	ldr	r0, [pc, #88]	; (3a8c <boot_swap_type_multi+0xd8>)
    3a34:	2149      	movs	r1, #73	; 0x49
    3a36:	f003 f8ed 	bl	6c14 <z_log_minimal_printk>
            if (table->swap_type != BOOT_SWAP_TYPE_TEST &&
    3a3a:	7960      	ldrb	r0, [r4, #5]
    3a3c:	1e83      	subs	r3, r0, #2
    3a3e:	2b02      	cmp	r3, #2
    3a40:	d9c1      	bls.n	39c6 <boot_swap_type_multi+0x12>
    3a42:	e7bf      	b.n	39c4 <boot_swap_type_multi+0x10>
    } else if (rc) {
    3a44:	2800      	cmp	r0, #0
    3a46:	d0cf      	beq.n	39e8 <boot_swap_type_multi+0x34>
    3a48:	e7bc      	b.n	39c4 <boot_swap_type_multi+0x10>
            (table->copy_done_primary_slot == BOOT_FLAG_ANY  ||
    3a4a:	f89d 1002 	ldrb.w	r1, [sp, #2]
    3a4e:	4299      	cmp	r1, r3
    3a50:	d0eb      	beq.n	3a2a <boot_swap_type_multi+0x76>
    for (i = 0; i < BOOT_SWAP_TABLES_COUNT; i++) {
    3a52:	3201      	adds	r2, #1
    3a54:	2a03      	cmp	r2, #3
    3a56:	f104 0406 	add.w	r4, r4, #6
    3a5a:	d1cb      	bne.n	39f4 <boot_swap_type_multi+0x40>
    BOOT_LOG_INF("Swap type: none");
    3a5c:	480c      	ldr	r0, [pc, #48]	; (3a90 <boot_swap_type_multi+0xdc>)
    3a5e:	2149      	movs	r1, #73	; 0x49
    3a60:	f003 f8d8 	bl	6c14 <z_log_minimal_printk>
    return BOOT_SWAP_TYPE_NONE;
    3a64:	2001      	movs	r0, #1
    3a66:	e7ae      	b.n	39c6 <boot_swap_type_multi+0x12>
            BOOT_LOG_INF("Swap type: %s",
    3a68:	2b03      	cmp	r3, #3
    3a6a:	d005      	beq.n	3a78 <boot_swap_type_multi+0xc4>
    3a6c:	4a09      	ldr	r2, [pc, #36]	; (3a94 <boot_swap_type_multi+0xe0>)
    3a6e:	490a      	ldr	r1, [pc, #40]	; (3a98 <boot_swap_type_multi+0xe4>)
    3a70:	2b04      	cmp	r3, #4
    3a72:	bf08      	it	eq
    3a74:	460a      	moveq	r2, r1
    3a76:	e7dc      	b.n	3a32 <boot_swap_type_multi+0x7e>
    3a78:	4a08      	ldr	r2, [pc, #32]	; (3a9c <boot_swap_type_multi+0xe8>)
    3a7a:	e7da      	b.n	3a32 <boot_swap_type_multi+0x7e>
    3a7c:	0000a923 	.word	0x0000a923
    3a80:	03030103 	.word	0x03030103
    3a84:	0000a996 	.word	0x0000a996
    3a88:	0000a905 	.word	0x0000a905
    3a8c:	0000a96e 	.word	0x0000a96e
    3a90:	0000a981 	.word	0x0000a981
    3a94:	0000a90a 	.word	0x0000a90a
    3a98:	0000a91c 	.word	0x0000a91c
    3a9c:	0000a900 	.word	0x0000a900

00003aa0 <verify_header>:
}
#endif /* MBEDTLS_MEMORY_DEBUG */

static int verify_header( memory_header *hdr )
{
    if( hdr->magic1 != MAGIC1 )
    3aa0:	6801      	ldr	r1, [r0, #0]
    3aa2:	4a0e      	ldr	r2, [pc, #56]	; (3adc <verify_header+0x3c>)
    3aa4:	4291      	cmp	r1, r2
{
    3aa6:	4603      	mov	r3, r0
    if( hdr->magic1 != MAGIC1 )
    3aa8:	d115      	bne.n	3ad6 <verify_header+0x36>
        mbedtls_fprintf( stderr, "FATAL: MAGIC1 mismatch\n" );
#endif
        return( 1 );
    }

    if( hdr->magic2 != MAGIC2 )
    3aaa:	69c1      	ldr	r1, [r0, #28]
    3aac:	f1a2 2210 	sub.w	r2, r2, #268439552	; 0x10001000
    3ab0:	f1a2 12ef 	sub.w	r2, r2, #15663343	; 0xef00ef
    3ab4:	4291      	cmp	r1, r2
    3ab6:	d10e      	bne.n	3ad6 <verify_header+0x36>
        mbedtls_fprintf( stderr, "FATAL: MAGIC2 mismatch\n" );
#endif
        return( 1 );
    }

    if( hdr->alloc > 1 )
    3ab8:	6882      	ldr	r2, [r0, #8]
    3aba:	2a01      	cmp	r2, #1
    3abc:	d80b      	bhi.n	3ad6 <verify_header+0x36>
        mbedtls_fprintf( stderr, "FATAL: alloc has illegal value\n" );
#endif
        return( 1 );
    }

    if( hdr->prev != NULL && hdr->prev == hdr->next )
    3abe:	68c2      	ldr	r2, [r0, #12]
    3ac0:	b112      	cbz	r2, 3ac8 <verify_header+0x28>
    3ac2:	6901      	ldr	r1, [r0, #16]
    3ac4:	428a      	cmp	r2, r1
    3ac6:	d006      	beq.n	3ad6 <verify_header+0x36>
        mbedtls_fprintf( stderr, "FATAL: prev == next\n" );
#endif
        return( 1 );
    }

    if( hdr->prev_free != NULL && hdr->prev_free == hdr->next_free )
    3ac8:	6958      	ldr	r0, [r3, #20]
    3aca:	b128      	cbz	r0, 3ad8 <verify_header+0x38>
    3acc:	699b      	ldr	r3, [r3, #24]
    3ace:	1a1b      	subs	r3, r3, r0
    3ad0:	4258      	negs	r0, r3
    3ad2:	4158      	adcs	r0, r3
    3ad4:	4770      	bx	lr
        return( 1 );
    3ad6:	2001      	movs	r0, #1
#endif
        return( 1 );
    }

    return( 0 );
}
    3ad8:	4770      	bx	lr
    3ada:	bf00      	nop
    3adc:	ff00aa55 	.word	0xff00aa55

00003ae0 <verify_chain>:

static int verify_chain( void )
{
    3ae0:	b570      	push	{r4, r5, r6, lr}
    memory_header *prv = heap.first, *cur;
    3ae2:	4b0d      	ldr	r3, [pc, #52]	; (3b18 <verify_chain+0x38>)
    3ae4:	689e      	ldr	r6, [r3, #8]

    if( prv == NULL || verify_header( prv ) != 0 )
    3ae6:	b1a6      	cbz	r6, 3b12 <verify_chain+0x32>
    3ae8:	4630      	mov	r0, r6
    3aea:	f7ff ffd9 	bl	3aa0 <verify_header>
    3aee:	4604      	mov	r4, r0
    3af0:	b978      	cbnz	r0, 3b12 <verify_chain+0x32>
                                  "failed\n" );
#endif
        return( 1 );
    }

    if( heap.first->prev != NULL )
    3af2:	68f3      	ldr	r3, [r6, #12]
    3af4:	b96b      	cbnz	r3, 3b12 <verify_chain+0x32>
                                  "first->prev != NULL\n" );
#endif
        return( 1 );
    }

    cur = heap.first->next;
    3af6:	6935      	ldr	r5, [r6, #16]

    while( cur != NULL )
    3af8:	b90d      	cbnz	r5, 3afe <verify_chain+0x1e>
        prv = cur;
        cur = cur->next;
    }

    return( 0 );
}
    3afa:	4620      	mov	r0, r4
    3afc:	bd70      	pop	{r4, r5, r6, pc}
        if( verify_header( cur ) != 0 )
    3afe:	4628      	mov	r0, r5
    3b00:	f7ff ffce 	bl	3aa0 <verify_header>
    3b04:	b928      	cbnz	r0, 3b12 <verify_chain+0x32>
        if( cur->prev != prv )
    3b06:	68eb      	ldr	r3, [r5, #12]
    3b08:	42b3      	cmp	r3, r6
    3b0a:	d102      	bne.n	3b12 <verify_chain+0x32>
        cur = cur->next;
    3b0c:	462e      	mov	r6, r5
    3b0e:	692d      	ldr	r5, [r5, #16]
    3b10:	e7f2      	b.n	3af8 <verify_chain+0x18>
        return( 1 );
    3b12:	2401      	movs	r4, #1
    3b14:	e7f1      	b.n	3afa <verify_chain+0x1a>
    3b16:	bf00      	nop
    3b18:	20001070 	.word	0x20001070

00003b1c <buffer_alloc_calloc>:

static void *buffer_alloc_calloc( size_t n, size_t size )
{
    3b1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
#if defined(MBEDTLS_MEMORY_BACKTRACE)
    void *trace_buffer[MAX_BT];
    size_t trace_cnt;
#endif

    if( heap.buf == NULL || heap.first == NULL )
    3b20:	4f3f      	ldr	r7, [pc, #252]	; (3c20 <buffer_alloc_calloc+0x104>)
    3b22:	683c      	ldr	r4, [r7, #0]
    3b24:	b1d4      	cbz	r4, 3b5c <buffer_alloc_calloc+0x40>
    3b26:	68bc      	ldr	r4, [r7, #8]
    3b28:	b1c4      	cbz	r4, 3b5c <buffer_alloc_calloc+0x40>
        return( NULL );

    original_len = len = n * size;

    if( n == 0 || size == 0 || len / n != size )
    3b2a:	2800      	cmp	r0, #0
    3b2c:	d04a      	beq.n	3bc4 <buffer_alloc_calloc+0xa8>
    3b2e:	2900      	cmp	r1, #0
    3b30:	d048      	beq.n	3bc4 <buffer_alloc_calloc+0xa8>
    original_len = len = n * size;
    3b32:	fb01 f500 	mul.w	r5, r1, r0
    if( n == 0 || size == 0 || len / n != size )
    3b36:	fbb5 f0f0 	udiv	r0, r5, r0
    3b3a:	4288      	cmp	r0, r1
    3b3c:	d142      	bne.n	3bc4 <buffer_alloc_calloc+0xa8>
        return( NULL );
    else if( len > (size_t)-MBEDTLS_MEMORY_ALIGN_MULTIPLE )
    3b3e:	1d28      	adds	r0, r5, #4
    3b40:	d840      	bhi.n	3bc4 <buffer_alloc_calloc+0xa8>
        return( NULL );

    if( len % MBEDTLS_MEMORY_ALIGN_MULTIPLE )
    3b42:	07a9      	lsls	r1, r5, #30
    3b44:	d00d      	beq.n	3b62 <buffer_alloc_calloc+0x46>
    {
        len -= len % MBEDTLS_MEMORY_ALIGN_MULTIPLE;
    3b46:	f025 0603 	bic.w	r6, r5, #3
        len += MBEDTLS_MEMORY_ALIGN_MULTIPLE;
    3b4a:	3604      	adds	r6, #4
    memory_header *new, *cur = heap.first_free;
    3b4c:	68fc      	ldr	r4, [r7, #12]
    3b4e:	e003      	b.n	3b58 <buffer_alloc_calloc+0x3c>

    // Find block that fits
    //
    while( cur != NULL )
    {
        if( cur->size >= len )
    3b50:	6863      	ldr	r3, [r4, #4]
    3b52:	42b3      	cmp	r3, r6
    3b54:	d238      	bcs.n	3bc8 <buffer_alloc_calloc+0xac>
            break;

        cur = cur->next_free;
    3b56:	69a4      	ldr	r4, [r4, #24]
    while( cur != NULL )
    3b58:	2c00      	cmp	r4, #0
    3b5a:	d1f9      	bne.n	3b50 <buffer_alloc_calloc+0x34>

    ret = (unsigned char *) cur + sizeof( memory_header );
    memset( ret, 0, original_len );

    return( ret );
}
    3b5c:	4620      	mov	r0, r4
    3b5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    3b62:	462e      	mov	r6, r5
    3b64:	e7f2      	b.n	3b4c <buffer_alloc_calloc+0x30>
            heap.first_free = cur->next_free;
    3b66:	60fb      	str	r3, [r7, #12]
    3b68:	e041      	b.n	3bee <buffer_alloc_calloc+0xd2>
    p = ( (unsigned char *) cur ) + sizeof(memory_header) + len;
    3b6a:	f106 0120 	add.w	r1, r6, #32
    3b6e:	1863      	adds	r3, r4, r1
    new->size = cur->size - len - sizeof(memory_header);
    3b70:	3a20      	subs	r2, #32
    3b72:	605a      	str	r2, [r3, #4]
    new->alloc = 0;
    3b74:	2200      	movs	r2, #0
    new->prev = cur;
    3b76:	e9c3 2402 	strd	r2, r4, [r3, #8]
    new->magic1 = MAGIC1;
    3b7a:	482a      	ldr	r0, [pc, #168]	; (3c24 <buffer_alloc_calloc+0x108>)
    new->next = cur->next;
    3b7c:	6922      	ldr	r2, [r4, #16]
    3b7e:	611a      	str	r2, [r3, #16]
    new->magic1 = MAGIC1;
    3b80:	5060      	str	r0, [r4, r1]
    new->magic2 = MAGIC2;
    3b82:	4929      	ldr	r1, [pc, #164]	; (3c28 <buffer_alloc_calloc+0x10c>)
    3b84:	61d9      	str	r1, [r3, #28]
    if( new->next != NULL )
    3b86:	b102      	cbz	r2, 3b8a <buffer_alloc_calloc+0x6e>
        new->next->prev = new;
    3b88:	60d3      	str	r3, [r2, #12]
    new->prev_free = cur->prev_free;
    3b8a:	6962      	ldr	r2, [r4, #20]
    3b8c:	615a      	str	r2, [r3, #20]
    new->next_free = cur->next_free;
    3b8e:	69a1      	ldr	r1, [r4, #24]
    3b90:	6199      	str	r1, [r3, #24]
    if( new->prev_free != NULL )
    3b92:	b1aa      	cbz	r2, 3bc0 <buffer_alloc_calloc+0xa4>
        new->prev_free->next_free = new;
    3b94:	6193      	str	r3, [r2, #24]
    if( new->next_free != NULL )
    3b96:	699a      	ldr	r2, [r3, #24]
    3b98:	b102      	cbz	r2, 3b9c <buffer_alloc_calloc+0x80>
        new->next_free->prev_free = new;
    3b9a:	6153      	str	r3, [r2, #20]
    cur->alloc = 1;
    3b9c:	f04f 0901 	mov.w	r9, #1
    cur->size = len;
    3ba0:	e9c4 6901 	strd	r6, r9, [r4, #4]
    cur->next = new;
    3ba4:	6123      	str	r3, [r4, #16]
    cur->prev_free = NULL;
    3ba6:	2300      	movs	r3, #0
    cur->next_free = NULL;
    3ba8:	e9c4 3305 	strd	r3, r3, [r4, #20]
    if( ( heap.verify & MBEDTLS_MEMORY_VERIFY_ALLOC ) && verify_chain() != 0 )
    3bac:	693b      	ldr	r3, [r7, #16]
    3bae:	07db      	lsls	r3, r3, #31
    3bb0:	d52e      	bpl.n	3c10 <buffer_alloc_calloc+0xf4>
    3bb2:	f7ff ff95 	bl	3ae0 <verify_chain>
    3bb6:	b358      	cbz	r0, 3c10 <buffer_alloc_calloc+0xf4>
        mbedtls_exit( 1 );
    3bb8:	4b1c      	ldr	r3, [pc, #112]	; (3c2c <buffer_alloc_calloc+0x110>)
    3bba:	4648      	mov	r0, r9
    3bbc:	681b      	ldr	r3, [r3, #0]
    3bbe:	e026      	b.n	3c0e <buffer_alloc_calloc+0xf2>
        heap.first_free = new;
    3bc0:	60fb      	str	r3, [r7, #12]
    3bc2:	e7e8      	b.n	3b96 <buffer_alloc_calloc+0x7a>
        return( NULL );
    3bc4:	2400      	movs	r4, #0
    3bc6:	e7c9      	b.n	3b5c <buffer_alloc_calloc+0x40>
    if( cur->alloc != 0 )
    3bc8:	68a3      	ldr	r3, [r4, #8]
    3bca:	b11b      	cbz	r3, 3bd4 <buffer_alloc_calloc+0xb8>
        mbedtls_exit( 1 );
    3bcc:	4b17      	ldr	r3, [pc, #92]	; (3c2c <buffer_alloc_calloc+0x110>)
    3bce:	2001      	movs	r0, #1
    3bd0:	681b      	ldr	r3, [r3, #0]
    3bd2:	4798      	blx	r3
    if( cur->size - len < sizeof(memory_header) +
    3bd4:	6862      	ldr	r2, [r4, #4]
    3bd6:	1b92      	subs	r2, r2, r6
    3bd8:	2a23      	cmp	r2, #35	; 0x23
    3bda:	f104 0820 	add.w	r8, r4, #32
    3bde:	d8c4      	bhi.n	3b6a <buffer_alloc_calloc+0x4e>
        cur->alloc = 1;
    3be0:	2301      	movs	r3, #1
    3be2:	60a3      	str	r3, [r4, #8]
            cur->prev_free->next_free = cur->next_free;
    3be4:	e9d4 2305 	ldrd	r2, r3, [r4, #20]
        if( cur->prev_free != NULL )
    3be8:	2a00      	cmp	r2, #0
    3bea:	d0bc      	beq.n	3b66 <buffer_alloc_calloc+0x4a>
            cur->prev_free->next_free = cur->next_free;
    3bec:	6193      	str	r3, [r2, #24]
        if( cur->next_free != NULL )
    3bee:	69a3      	ldr	r3, [r4, #24]
    3bf0:	b10b      	cbz	r3, 3bf6 <buffer_alloc_calloc+0xda>
            cur->next_free->prev_free = cur->prev_free;
    3bf2:	6962      	ldr	r2, [r4, #20]
    3bf4:	615a      	str	r2, [r3, #20]
        cur->prev_free = NULL;
    3bf6:	2300      	movs	r3, #0
        cur->next_free = NULL;
    3bf8:	e9c4 3305 	strd	r3, r3, [r4, #20]
        if( ( heap.verify & MBEDTLS_MEMORY_VERIFY_ALLOC ) && verify_chain() != 0 )
    3bfc:	693b      	ldr	r3, [r7, #16]
    3bfe:	07da      	lsls	r2, r3, #31
    3c00:	d506      	bpl.n	3c10 <buffer_alloc_calloc+0xf4>
    3c02:	f7ff ff6d 	bl	3ae0 <verify_chain>
    3c06:	b118      	cbz	r0, 3c10 <buffer_alloc_calloc+0xf4>
            mbedtls_exit( 1 );
    3c08:	4b08      	ldr	r3, [pc, #32]	; (3c2c <buffer_alloc_calloc+0x110>)
    3c0a:	681b      	ldr	r3, [r3, #0]
    3c0c:	2001      	movs	r0, #1
        mbedtls_exit( 1 );
    3c0e:	4798      	blx	r3
    memset( ret, 0, original_len );
    3c10:	462a      	mov	r2, r5
    3c12:	2100      	movs	r1, #0
    3c14:	4640      	mov	r0, r8
    ret = (unsigned char *) cur + sizeof( memory_header );
    3c16:	4644      	mov	r4, r8
    memset( ret, 0, original_len );
    3c18:	f003 f8b3 	bl	6d82 <memset>
    return( ret );
    3c1c:	e79e      	b.n	3b5c <buffer_alloc_calloc+0x40>
    3c1e:	bf00      	nop
    3c20:	20001070 	.word	0x20001070
    3c24:	ff00aa55 	.word	0xff00aa55
    3c28:	ee119966 	.word	0xee119966
    3c2c:	200000ac 	.word	0x200000ac

00003c30 <buffer_alloc_free>:

static void buffer_alloc_free( void *ptr )
{
    3c30:	b570      	push	{r4, r5, r6, lr}
    memory_header *hdr, *old = NULL;
    unsigned char *p = (unsigned char *) ptr;

    if( ptr == NULL || heap.buf == NULL || heap.first == NULL )
    3c32:	4605      	mov	r5, r0
    3c34:	2800      	cmp	r0, #0
    3c36:	f000 8088 	beq.w	3d4a <buffer_alloc_free+0x11a>
    3c3a:	4e44      	ldr	r6, [pc, #272]	; (3d4c <buffer_alloc_free+0x11c>)
    3c3c:	6833      	ldr	r3, [r6, #0]
    3c3e:	2b00      	cmp	r3, #0
    3c40:	f000 8083 	beq.w	3d4a <buffer_alloc_free+0x11a>
    3c44:	68b2      	ldr	r2, [r6, #8]
    3c46:	2a00      	cmp	r2, #0
    3c48:	d07f      	beq.n	3d4a <buffer_alloc_free+0x11a>
        return;

    if( p < heap.buf || p >= heap.buf + heap.len )
    3c4a:	4283      	cmp	r3, r0
    3c4c:	d803      	bhi.n	3c56 <buffer_alloc_free+0x26>
    3c4e:	6872      	ldr	r2, [r6, #4]
    3c50:	4413      	add	r3, r2
    3c52:	4298      	cmp	r0, r3
    3c54:	d303      	bcc.n	3c5e <buffer_alloc_free+0x2e>
    {
#if defined(MBEDTLS_MEMORY_DEBUG)
        mbedtls_fprintf( stderr, "FATAL: mbedtls_free() outside of managed "
                                  "space\n" );
#endif
        mbedtls_exit( 1 );
    3c56:	4b3e      	ldr	r3, [pc, #248]	; (3d50 <buffer_alloc_free+0x120>)
    3c58:	2001      	movs	r0, #1
    3c5a:	681b      	ldr	r3, [r3, #0]
    3c5c:	4798      	blx	r3
    }

    p -= sizeof(memory_header);
    3c5e:	f1a5 0420 	sub.w	r4, r5, #32
    hdr = (memory_header *) p;

    if( verify_header( hdr ) != 0 )
    3c62:	4620      	mov	r0, r4
    3c64:	f7ff ff1c 	bl	3aa0 <verify_header>
    3c68:	b118      	cbz	r0, 3c72 <buffer_alloc_free+0x42>
        mbedtls_exit( 1 );
    3c6a:	4b39      	ldr	r3, [pc, #228]	; (3d50 <buffer_alloc_free+0x120>)
    3c6c:	2001      	movs	r0, #1
    3c6e:	681b      	ldr	r3, [r3, #0]
    3c70:	4798      	blx	r3

    if( hdr->alloc != 1 )
    3c72:	f855 3c18 	ldr.w	r3, [r5, #-24]
    3c76:	2b01      	cmp	r3, #1
    3c78:	d003      	beq.n	3c82 <buffer_alloc_free+0x52>
    {
#if defined(MBEDTLS_MEMORY_DEBUG)
        mbedtls_fprintf( stderr, "FATAL: mbedtls_free() on unallocated "
                                  "data\n" );
#endif
        mbedtls_exit( 1 );
    3c7a:	4b35      	ldr	r3, [pc, #212]	; (3d50 <buffer_alloc_free+0x120>)
    3c7c:	2001      	movs	r0, #1
    3c7e:	681b      	ldr	r3, [r3, #0]
    3c80:	4798      	blx	r3
    }

    hdr->alloc = 0;
    3c82:	2300      	movs	r3, #0
    3c84:	f845 3c18 	str.w	r3, [r5, #-24]
    hdr->trace_count = 0;
#endif

    // Regroup with block before
    //
    if( hdr->prev != NULL && hdr->prev->alloc == 0 )
    3c88:	f855 3c14 	ldr.w	r3, [r5, #-20]
    3c8c:	b33b      	cbz	r3, 3cde <buffer_alloc_free+0xae>
    3c8e:	689a      	ldr	r2, [r3, #8]
    3c90:	bb2a      	cbnz	r2, 3cde <buffer_alloc_free+0xae>
    {
#if defined(MBEDTLS_MEMORY_DEBUG)
        heap.header_count--;
#endif
        hdr->prev->size += sizeof(memory_header) + hdr->size;
    3c92:	f855 2c1c 	ldr.w	r2, [r5, #-28]
    3c96:	f102 0120 	add.w	r1, r2, #32
    3c9a:	685a      	ldr	r2, [r3, #4]
    3c9c:	440a      	add	r2, r1
    3c9e:	605a      	str	r2, [r3, #4]
        hdr->prev->next = hdr->next;
    3ca0:	e955 3205 	ldrd	r3, r2, [r5, #-20]
    3ca4:	611a      	str	r2, [r3, #16]
        old = hdr;
        hdr = hdr->prev;
    3ca6:	f855 5c14 	ldr.w	r5, [r5, #-20]

        if( hdr->next != NULL )
    3caa:	692b      	ldr	r3, [r5, #16]
    3cac:	b103      	cbz	r3, 3cb0 <buffer_alloc_free+0x80>
            hdr->next->prev = hdr;
    3cae:	60dd      	str	r5, [r3, #12]

        memset( old, 0, sizeof(memory_header) );
    3cb0:	2220      	movs	r2, #32
    3cb2:	2100      	movs	r1, #0
    3cb4:	4620      	mov	r0, r4
    3cb6:	f003 f864 	bl	6d82 <memset>
    }

    // Regroup with block after
    //
    if( hdr->next != NULL && hdr->next->alloc == 0 )
    3cba:	6928      	ldr	r0, [r5, #16]
    3cbc:	b110      	cbz	r0, 3cc4 <buffer_alloc_free+0x94>
    3cbe:	6883      	ldr	r3, [r0, #8]
    3cc0:	2b00      	cmp	r3, #0
    3cc2:	d02e      	beq.n	3d22 <buffer_alloc_free+0xf2>
        if( heap.first_free != NULL )
            heap.first_free->prev_free = hdr;
        heap.first_free = hdr;
    }

    if( ( heap.verify & MBEDTLS_MEMORY_VERIFY_FREE ) && verify_chain() != 0 )
    3cc4:	6933      	ldr	r3, [r6, #16]
    3cc6:	079b      	lsls	r3, r3, #30
    3cc8:	d53f      	bpl.n	3d4a <buffer_alloc_free+0x11a>
    3cca:	f7ff ff09 	bl	3ae0 <verify_chain>
    3cce:	2800      	cmp	r0, #0
    3cd0:	d03b      	beq.n	3d4a <buffer_alloc_free+0x11a>
        mbedtls_exit( 1 );
    3cd2:	4b1f      	ldr	r3, [pc, #124]	; (3d50 <buffer_alloc_free+0x120>)
}
    3cd4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        mbedtls_exit( 1 );
    3cd8:	681b      	ldr	r3, [r3, #0]
    3cda:	2001      	movs	r0, #1
    3cdc:	4718      	bx	r3
    if( hdr->next != NULL && hdr->next->alloc == 0 )
    3cde:	f855 0c10 	ldr.w	r0, [r5, #-16]
    3ce2:	2800      	cmp	r0, #0
    3ce4:	d02a      	beq.n	3d3c <buffer_alloc_free+0x10c>
    3ce6:	6883      	ldr	r3, [r0, #8]
    3ce8:	bb43      	cbnz	r3, 3d3c <buffer_alloc_free+0x10c>
        hdr->size += sizeof(memory_header) + hdr->next->size;
    3cea:	6842      	ldr	r2, [r0, #4]
    3cec:	6863      	ldr	r3, [r4, #4]
    3cee:	4413      	add	r3, r2
    3cf0:	3320      	adds	r3, #32
    3cf2:	6063      	str	r3, [r4, #4]
        hdr->next = hdr->next->next;
    3cf4:	6903      	ldr	r3, [r0, #16]
    3cf6:	6123      	str	r3, [r4, #16]
        if( hdr->prev_free != NULL || hdr->next_free != NULL )
    3cf8:	e9d4 2305 	ldrd	r2, r3, [r4, #20]
    3cfc:	b99a      	cbnz	r2, 3d26 <buffer_alloc_free+0xf6>
    3cfe:	b9cb      	cbnz	r3, 3d34 <buffer_alloc_free+0x104>
        hdr->prev_free = old->prev_free;
    3d00:	6943      	ldr	r3, [r0, #20]
    3d02:	6163      	str	r3, [r4, #20]
        hdr->next_free = old->next_free;
    3d04:	6982      	ldr	r2, [r0, #24]
    3d06:	61a2      	str	r2, [r4, #24]
        if( hdr->prev_free != NULL )
    3d08:	b1b3      	cbz	r3, 3d38 <buffer_alloc_free+0x108>
            hdr->prev_free->next_free = hdr;
    3d0a:	619c      	str	r4, [r3, #24]
        if( hdr->next_free != NULL )
    3d0c:	69a3      	ldr	r3, [r4, #24]
    3d0e:	b103      	cbz	r3, 3d12 <buffer_alloc_free+0xe2>
            hdr->next_free->prev_free = hdr;
    3d10:	615c      	str	r4, [r3, #20]
        if( hdr->next != NULL )
    3d12:	6923      	ldr	r3, [r4, #16]
    3d14:	b103      	cbz	r3, 3d18 <buffer_alloc_free+0xe8>
            hdr->next->prev = hdr;
    3d16:	60dc      	str	r4, [r3, #12]
        memset( old, 0, sizeof(memory_header) );
    3d18:	2220      	movs	r2, #32
    3d1a:	2100      	movs	r1, #0
    3d1c:	f003 f831 	bl	6d82 <memset>
    if( old == NULL )
    3d20:	e7d0      	b.n	3cc4 <buffer_alloc_free+0x94>
    if( hdr->next != NULL && hdr->next->alloc == 0 )
    3d22:	462c      	mov	r4, r5
    3d24:	e7e1      	b.n	3cea <buffer_alloc_free+0xba>
                hdr->prev_free->next_free = hdr->next_free;
    3d26:	6193      	str	r3, [r2, #24]
            if( hdr->next_free != NULL )
    3d28:	69a3      	ldr	r3, [r4, #24]
    3d2a:	2b00      	cmp	r3, #0
    3d2c:	d0e8      	beq.n	3d00 <buffer_alloc_free+0xd0>
                hdr->next_free->prev_free = hdr->prev_free;
    3d2e:	6962      	ldr	r2, [r4, #20]
    3d30:	615a      	str	r2, [r3, #20]
    3d32:	e7e5      	b.n	3d00 <buffer_alloc_free+0xd0>
                heap.first_free = hdr->next_free;
    3d34:	60f3      	str	r3, [r6, #12]
    3d36:	e7f7      	b.n	3d28 <buffer_alloc_free+0xf8>
            heap.first_free = hdr;
    3d38:	60f4      	str	r4, [r6, #12]
    3d3a:	e7e7      	b.n	3d0c <buffer_alloc_free+0xdc>
        hdr->next_free = heap.first_free;
    3d3c:	68f3      	ldr	r3, [r6, #12]
    3d3e:	f845 3c08 	str.w	r3, [r5, #-8]
        if( heap.first_free != NULL )
    3d42:	b103      	cbz	r3, 3d46 <buffer_alloc_free+0x116>
            heap.first_free->prev_free = hdr;
    3d44:	615c      	str	r4, [r3, #20]
        heap.first_free = hdr;
    3d46:	60f4      	str	r4, [r6, #12]
    3d48:	e7bc      	b.n	3cc4 <buffer_alloc_free+0x94>
}
    3d4a:	bd70      	pop	{r4, r5, r6, pc}
    3d4c:	20001070 	.word	0x20001070
    3d50:	200000ac 	.word	0x200000ac

00003d54 <mbedtls_memory_buffer_alloc_init>:
    (void) mbedtls_mutex_unlock( &heap.mutex );
}
#endif /* MBEDTLS_THREADING_C */

void mbedtls_memory_buffer_alloc_init( unsigned char *buf, size_t len )
{
    3d54:	b538      	push	{r3, r4, r5, lr}
    memset( &heap, 0, sizeof( buffer_alloc_ctx ) );
    3d56:	2214      	movs	r2, #20
{
    3d58:	460c      	mov	r4, r1
    3d5a:	4605      	mov	r5, r0
    memset( &heap, 0, sizeof( buffer_alloc_ctx ) );
    3d5c:	2100      	movs	r1, #0
    3d5e:	4813      	ldr	r0, [pc, #76]	; (3dac <mbedtls_memory_buffer_alloc_init+0x58>)
    3d60:	f003 f80f 	bl	6d82 <memset>
#if defined(MBEDTLS_THREADING_C)
    mbedtls_mutex_init( &heap.mutex );
    mbedtls_platform_set_calloc_free( buffer_alloc_calloc_mutexed,
                              buffer_alloc_free_mutexed );
#else
    mbedtls_platform_set_calloc_free( buffer_alloc_calloc, buffer_alloc_free );
    3d64:	4912      	ldr	r1, [pc, #72]	; (3db0 <mbedtls_memory_buffer_alloc_init+0x5c>)
    3d66:	4813      	ldr	r0, [pc, #76]	; (3db4 <mbedtls_memory_buffer_alloc_init+0x60>)
    3d68:	f000 f834 	bl	3dd4 <mbedtls_platform_set_calloc_free>
#endif

    if( len < sizeof( memory_header ) + MBEDTLS_MEMORY_ALIGN_MULTIPLE )
    3d6c:	2c23      	cmp	r4, #35	; 0x23
    3d6e:	d91c      	bls.n	3daa <mbedtls_memory_buffer_alloc_init+0x56>
        return;
    else if( (size_t)buf % MBEDTLS_MEMORY_ALIGN_MULTIPLE )
    3d70:	f015 0303 	ands.w	r3, r5, #3
    {
        /* Adjust len first since buf is used in the computation */
        len -= MBEDTLS_MEMORY_ALIGN_MULTIPLE
    3d74:	bf1f      	itttt	ne
    3d76:	3c04      	subne	r4, #4
    3d78:	18e4      	addne	r4, r4, r3
             - (size_t)buf % MBEDTLS_MEMORY_ALIGN_MULTIPLE;
        buf += MBEDTLS_MEMORY_ALIGN_MULTIPLE
             - (size_t)buf % MBEDTLS_MEMORY_ALIGN_MULTIPLE;
    3d7a:	f1c3 0304 	rsbne	r3, r3, #4
        buf += MBEDTLS_MEMORY_ALIGN_MULTIPLE
    3d7e:	18ed      	addne	r5, r5, r3
    }

    memset( buf, 0, len );
    3d80:	4622      	mov	r2, r4
    3d82:	2100      	movs	r1, #0
    3d84:	4628      	mov	r0, r5
    3d86:	f002 fffc 	bl	6d82 <memset>

    heap.buf = buf;
    3d8a:	4b08      	ldr	r3, [pc, #32]	; (3dac <mbedtls_memory_buffer_alloc_init+0x58>)
    heap.len = len;

    heap.first = (memory_header *)buf;
    heap.first->size = len - sizeof( memory_header );
    heap.first->magic1 = MAGIC1;
    3d8c:	490a      	ldr	r1, [pc, #40]	; (3db8 <mbedtls_memory_buffer_alloc_init+0x64>)
    heap.first = (memory_header *)buf;
    3d8e:	609d      	str	r5, [r3, #8]
    heap.len = len;
    3d90:	e9c3 5400 	strd	r5, r4, [r3]
    heap.first->size = len - sizeof( memory_header );
    3d94:	3c20      	subs	r4, #32
    3d96:	606c      	str	r4, [r5, #4]
    heap.first->magic1 = MAGIC1;
    3d98:	689a      	ldr	r2, [r3, #8]
    3d9a:	6011      	str	r1, [r2, #0]
    heap.first->magic2 = MAGIC2;
    3d9c:	689a      	ldr	r2, [r3, #8]
    heap.first_free = heap.first;
    3d9e:	60da      	str	r2, [r3, #12]
    heap.first->magic2 = MAGIC2;
    3da0:	f1a1 2110 	sub.w	r1, r1, #268439552	; 0x10001000
    3da4:	f1a1 11ef 	sub.w	r1, r1, #15663343	; 0xef00ef
    3da8:	61d1      	str	r1, [r2, #28]
}
    3daa:	bd38      	pop	{r3, r4, r5, pc}
    3dac:	20001070 	.word	0x20001070
    3db0:	00003c31 	.word	0x00003c31
    3db4:	00003b1d 	.word	0x00003b1d
    3db8:	ff00aa55 	.word	0xff00aa55

00003dbc <mbedtls_calloc>:
void * (*mbedtls_calloc_func)( size_t, size_t ) = MBEDTLS_PLATFORM_STD_CALLOC;
void (*mbedtls_free_func)( void * ) = MBEDTLS_PLATFORM_STD_FREE;

void * mbedtls_calloc( size_t nmemb, size_t size )
{
    return (*mbedtls_calloc_func)( nmemb, size );
    3dbc:	4b01      	ldr	r3, [pc, #4]	; (3dc4 <mbedtls_calloc+0x8>)
    3dbe:	681b      	ldr	r3, [r3, #0]
    3dc0:	4718      	bx	r3
    3dc2:	bf00      	nop
    3dc4:	200000b4 	.word	0x200000b4

00003dc8 <mbedtls_free>:
}

void mbedtls_free( void * ptr )
{
    (*mbedtls_free_func)( ptr );
    3dc8:	4b01      	ldr	r3, [pc, #4]	; (3dd0 <mbedtls_free+0x8>)
    3dca:	681b      	ldr	r3, [r3, #0]
    3dcc:	4718      	bx	r3
    3dce:	bf00      	nop
    3dd0:	200000b0 	.word	0x200000b0

00003dd4 <mbedtls_platform_set_calloc_free>:
}

int mbedtls_platform_set_calloc_free( void * (*calloc_func)( size_t, size_t ),
                              void (*free_func)( void * ) )
{
    mbedtls_calloc_func = calloc_func;
    3dd4:	4b02      	ldr	r3, [pc, #8]	; (3de0 <mbedtls_platform_set_calloc_free+0xc>)
    3dd6:	6018      	str	r0, [r3, #0]
    mbedtls_free_func = free_func;
    3dd8:	4b02      	ldr	r3, [pc, #8]	; (3de4 <mbedtls_platform_set_calloc_free+0x10>)
    return( 0 );
}
    3dda:	2000      	movs	r0, #0
    mbedtls_free_func = free_func;
    3ddc:	6019      	str	r1, [r3, #0]
}
    3dde:	4770      	bx	lr
    3de0:	200000b4 	.word	0x200000b4
    3de4:	200000b0 	.word	0x200000b0

00003de8 <mbedtls_platform_zeroize>:

void mbedtls_platform_zeroize( void *buf, size_t len )
{
    MBEDTLS_INTERNAL_VALIDATE( len == 0 || buf != NULL );

    if( len > 0 )
    3de8:	460a      	mov	r2, r1
    3dea:	b119      	cbz	r1, 3df4 <mbedtls_platform_zeroize+0xc>
        memset_func( buf, 0, len );
    3dec:	4b02      	ldr	r3, [pc, #8]	; (3df8 <mbedtls_platform_zeroize+0x10>)
    3dee:	2100      	movs	r1, #0
    3df0:	681b      	ldr	r3, [r3, #0]
    3df2:	4718      	bx	r3
}
    3df4:	4770      	bx	lr
    3df6:	bf00      	nop
    3df8:	200000b8 	.word	0x200000b8

00003dfc <rsa_check_context.constprop.0>:
/*
 * Checks whether the context fields are set in such a way
 * that the RSA primitives will be able to execute without error.
 * It does *not* make guarantees for consistency of the parameters.
 */
static int rsa_check_context( mbedtls_rsa_context const *ctx, int is_priv,
    3dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    /* blinding_needed is only used for NO_CRT to decide whether
     * P,Q need to be present or not. */
    ((void) blinding_needed);
#endif

    if( ctx->len != mbedtls_mpi_size( &ctx->N ) ||
    3dfe:	f100 0608 	add.w	r6, r0, #8
    3e02:	6847      	ldr	r7, [r0, #4]
static int rsa_check_context( mbedtls_rsa_context const *ctx, int is_priv,
    3e04:	4604      	mov	r4, r0
    if( ctx->len != mbedtls_mpi_size( &ctx->N ) ||
    3e06:	4630      	mov	r0, r6
static int rsa_check_context( mbedtls_rsa_context const *ctx, int is_priv,
    3e08:	460d      	mov	r5, r1
    if( ctx->len != mbedtls_mpi_size( &ctx->N ) ||
    3e0a:	f004 f8c7 	bl	7f9c <mbedtls_mpi_size>
    3e0e:	4287      	cmp	r7, r0
    3e10:	d14b      	bne.n	3eaa <rsa_check_context.constprop.0+0xae>
    3e12:	6863      	ldr	r3, [r4, #4]
    3e14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    3e18:	d847      	bhi.n	3eaa <rsa_check_context.constprop.0+0xae>
     * 1. Modular exponentiation needs positive, odd moduli.
     */

    /* Modular exponentiation wrt. N is always used for
     * RSA public key operations. */
    if( mbedtls_mpi_cmp_int( &ctx->N, 0 ) <= 0 ||
    3e1a:	2100      	movs	r1, #0
    3e1c:	4630      	mov	r0, r6
    3e1e:	f004 fa28 	bl	8272 <mbedtls_mpi_cmp_int>
    3e22:	2800      	cmp	r0, #0
    3e24:	dd41      	ble.n	3eaa <rsa_check_context.constprop.0+0xae>
        mbedtls_mpi_get_bit( &ctx->N, 0 ) == 0  )
    3e26:	2100      	movs	r1, #0
    3e28:	4630      	mov	r0, r6
    3e2a:	f004 f888 	bl	7f3e <mbedtls_mpi_get_bit>
    if( mbedtls_mpi_cmp_int( &ctx->N, 0 ) <= 0 ||
    3e2e:	b3e0      	cbz	r0, 3eaa <rsa_check_context.constprop.0+0xae>

#if !defined(MBEDTLS_RSA_NO_CRT)
    /* Modular exponentiation for P and Q is only
     * used for private key operations and if CRT
     * is used. */
    if( is_priv &&
    3e30:	b945      	cbnz	r5, 3e44 <rsa_check_context.constprop.0+0x48>
    /*
     * 2. Exponents must be positive
     */

    /* Always need E for public key operations */
    if( mbedtls_mpi_cmp_int( &ctx->E, 0 ) <= 0 )
    3e32:	4629      	mov	r1, r5
    3e34:	f104 0014 	add.w	r0, r4, #20

    /* It wouldn't lead to an error if it wasn't satisfied,
     * but check for QP >= 1 nonetheless. */
#if !defined(MBEDTLS_RSA_NO_CRT)
    if( is_priv &&
        mbedtls_mpi_cmp_int( &ctx->QP, 0 ) <= 0 )
    3e38:	f004 fa1b 	bl	8272 <mbedtls_mpi_cmp_int>
    if( is_priv &&
    3e3c:	2800      	cmp	r0, #0
    3e3e:	dd34      	ble.n	3eaa <rsa_check_context.constprop.0+0xae>
    {
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    }
#endif

    return( 0 );
    3e40:	2000      	movs	r0, #0
}
    3e42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) <= 0 ||
    3e44:	f104 052c 	add.w	r5, r4, #44	; 0x2c
    3e48:	2100      	movs	r1, #0
    3e4a:	4628      	mov	r0, r5
    3e4c:	f004 fa11 	bl	8272 <mbedtls_mpi_cmp_int>
    if( is_priv &&
    3e50:	2800      	cmp	r0, #0
    3e52:	dd2a      	ble.n	3eaa <rsa_check_context.constprop.0+0xae>
          mbedtls_mpi_get_bit( &ctx->P, 0 ) == 0 ||
    3e54:	2100      	movs	r1, #0
    3e56:	4628      	mov	r0, r5
    3e58:	f004 f871 	bl	7f3e <mbedtls_mpi_get_bit>
        ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) <= 0 ||
    3e5c:	b328      	cbz	r0, 3eaa <rsa_check_context.constprop.0+0xae>
          mbedtls_mpi_cmp_int( &ctx->Q, 0 ) <= 0 ||
    3e5e:	f104 0538 	add.w	r5, r4, #56	; 0x38
    3e62:	2100      	movs	r1, #0
    3e64:	4628      	mov	r0, r5
    3e66:	f004 fa04 	bl	8272 <mbedtls_mpi_cmp_int>
          mbedtls_mpi_get_bit( &ctx->P, 0 ) == 0 ||
    3e6a:	2800      	cmp	r0, #0
    3e6c:	dd1d      	ble.n	3eaa <rsa_check_context.constprop.0+0xae>
          mbedtls_mpi_get_bit( &ctx->Q, 0 ) == 0  ) )
    3e6e:	2100      	movs	r1, #0
    3e70:	4628      	mov	r0, r5
    3e72:	f004 f864 	bl	7f3e <mbedtls_mpi_get_bit>
          mbedtls_mpi_cmp_int( &ctx->Q, 0 ) <= 0 ||
    3e76:	b1c0      	cbz	r0, 3eaa <rsa_check_context.constprop.0+0xae>
    if( mbedtls_mpi_cmp_int( &ctx->E, 0 ) <= 0 )
    3e78:	2100      	movs	r1, #0
    3e7a:	f104 0014 	add.w	r0, r4, #20
    3e7e:	f004 f9f8 	bl	8272 <mbedtls_mpi_cmp_int>
    3e82:	2800      	cmp	r0, #0
    3e84:	dd11      	ble.n	3eaa <rsa_check_context.constprop.0+0xae>
        ( mbedtls_mpi_cmp_int( &ctx->DP, 0 ) <= 0 ||
    3e86:	2100      	movs	r1, #0
    3e88:	f104 0044 	add.w	r0, r4, #68	; 0x44
    3e8c:	f004 f9f1 	bl	8272 <mbedtls_mpi_cmp_int>
    if( is_priv &&
    3e90:	2800      	cmp	r0, #0
    3e92:	dd0a      	ble.n	3eaa <rsa_check_context.constprop.0+0xae>
          mbedtls_mpi_cmp_int( &ctx->DQ, 0 ) <= 0  ) )
    3e94:	2100      	movs	r1, #0
    3e96:	f104 0050 	add.w	r0, r4, #80	; 0x50
    3e9a:	f004 f9ea 	bl	8272 <mbedtls_mpi_cmp_int>
        ( mbedtls_mpi_cmp_int( &ctx->DP, 0 ) <= 0 ||
    3e9e:	2800      	cmp	r0, #0
    3ea0:	dd03      	ble.n	3eaa <rsa_check_context.constprop.0+0xae>
        mbedtls_mpi_cmp_int( &ctx->QP, 0 ) <= 0 )
    3ea2:	2100      	movs	r1, #0
    3ea4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    3ea8:	e7c6      	b.n	3e38 <rsa_check_context.constprop.0+0x3c>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    3eaa:	4801      	ldr	r0, [pc, #4]	; (3eb0 <rsa_check_context.constprop.0+0xb4>)
    3eac:	e7c9      	b.n	3e42 <rsa_check_context.constprop.0+0x46>
    3eae:	bf00      	nop
    3eb0:	ffffbf80 	.word	0xffffbf80

00003eb4 <mbedtls_rsa_check_pubkey>:

/*
 * Check a public RSA key
 */
int mbedtls_rsa_check_pubkey( const mbedtls_rsa_context *ctx )
{
    3eb4:	b570      	push	{r4, r5, r6, lr}
    RSA_VALIDATE_RET( ctx != NULL );

    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) != 0 )
    3eb6:	2100      	movs	r1, #0
{
    3eb8:	4604      	mov	r4, r0
    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) != 0 )
    3eba:	f7ff ff9f 	bl	3dfc <rsa_check_context.constprop.0>
    3ebe:	4605      	mov	r5, r0
    3ec0:	b110      	cbz	r0, 3ec8 <mbedtls_rsa_check_pubkey+0x14>
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    3ec2:	4d0e      	ldr	r5, [pc, #56]	; (3efc <mbedtls_rsa_check_pubkey+0x48>)
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    }

    return( 0 );
}
    3ec4:	4628      	mov	r0, r5
    3ec6:	bd70      	pop	{r4, r5, r6, pc}
    if( mbedtls_mpi_bitlen( &ctx->N ) < 128 )
    3ec8:	f104 0608 	add.w	r6, r4, #8
    3ecc:	4630      	mov	r0, r6
    3ece:	f004 f846 	bl	7f5e <mbedtls_mpi_bitlen>
    3ed2:	287f      	cmp	r0, #127	; 0x7f
    3ed4:	d9f5      	bls.n	3ec2 <mbedtls_rsa_check_pubkey+0xe>
    if( mbedtls_mpi_get_bit( &ctx->E, 0 ) == 0 ||
    3ed6:	3414      	adds	r4, #20
    3ed8:	4629      	mov	r1, r5
    3eda:	4620      	mov	r0, r4
    3edc:	f004 f82f 	bl	7f3e <mbedtls_mpi_get_bit>
    3ee0:	2800      	cmp	r0, #0
    3ee2:	d0ee      	beq.n	3ec2 <mbedtls_rsa_check_pubkey+0xe>
        mbedtls_mpi_bitlen( &ctx->E )     < 2  ||
    3ee4:	4620      	mov	r0, r4
    3ee6:	f004 f83a 	bl	7f5e <mbedtls_mpi_bitlen>
    if( mbedtls_mpi_get_bit( &ctx->E, 0 ) == 0 ||
    3eea:	2801      	cmp	r0, #1
    3eec:	d9e9      	bls.n	3ec2 <mbedtls_rsa_check_pubkey+0xe>
        mbedtls_mpi_cmp_mpi( &ctx->E, &ctx->N ) >= 0 )
    3eee:	4631      	mov	r1, r6
    3ef0:	4620      	mov	r0, r4
    3ef2:	f004 f97d 	bl	81f0 <mbedtls_mpi_cmp_mpi>
        mbedtls_mpi_bitlen( &ctx->E )     < 2  ||
    3ef6:	2800      	cmp	r0, #0
    3ef8:	dbe4      	blt.n	3ec4 <mbedtls_rsa_check_pubkey+0x10>
    3efa:	e7e2      	b.n	3ec2 <mbedtls_rsa_check_pubkey+0xe>
    3efc:	ffffbe00 	.word	0xffffbe00

00003f00 <mbedtls_rsa_public>:
 * Do an RSA public key operation
 */
int mbedtls_rsa_public( mbedtls_rsa_context *ctx,
                const unsigned char *input,
                unsigned char *output )
{
    3f00:	b5f0      	push	{r4, r5, r6, r7, lr}
    3f02:	460c      	mov	r4, r1
    3f04:	b087      	sub	sp, #28
    mbedtls_mpi T;
    RSA_VALIDATE_RET( ctx != NULL );
    RSA_VALIDATE_RET( input != NULL );
    RSA_VALIDATE_RET( output != NULL );

    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) )
    3f06:	2100      	movs	r1, #0
{
    3f08:	4605      	mov	r5, r0
    3f0a:	4616      	mov	r6, r2
    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) )
    3f0c:	f7ff ff76 	bl	3dfc <rsa_check_context.constprop.0>
    3f10:	2800      	cmp	r0, #0
    3f12:	d139      	bne.n	3f88 <mbedtls_rsa_public+0x88>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    mbedtls_mpi_init( &T );
    3f14:	a803      	add	r0, sp, #12
    3f16:	f003 ff68 	bl	7dea <mbedtls_mpi_init>
#if defined(MBEDTLS_THREADING_C)
    if( ( ret = mbedtls_mutex_lock( &ctx->mutex ) ) != 0 )
        return( ret );
#endif

    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &T, input, ctx->len ) );
    3f1a:	4621      	mov	r1, r4
    3f1c:	686a      	ldr	r2, [r5, #4]
    3f1e:	a803      	add	r0, sp, #12
    3f20:	f004 f842 	bl	7fa8 <mbedtls_mpi_read_binary>
    3f24:	4604      	mov	r4, r0
    3f26:	b118      	cbz	r0, 3f30 <mbedtls_rsa_public+0x30>
#if defined(MBEDTLS_THREADING_C)
    if( mbedtls_mutex_unlock( &ctx->mutex ) != 0 )
        return( MBEDTLS_ERR_THREADING_MUTEX_ERROR );
#endif

    mbedtls_mpi_free( &T );
    3f28:	a803      	add	r0, sp, #12
    3f2a:	f003 ff64 	bl	7df6 <mbedtls_mpi_free>

    if( ret != 0 )
    3f2e:	e00c      	b.n	3f4a <mbedtls_rsa_public+0x4a>
    if( mbedtls_mpi_cmp_mpi( &T, &ctx->N ) >= 0 )
    3f30:	f105 0408 	add.w	r4, r5, #8
    3f34:	4621      	mov	r1, r4
    3f36:	a803      	add	r0, sp, #12
    3f38:	f004 f95a 	bl	81f0 <mbedtls_mpi_cmp_mpi>
    3f3c:	2800      	cmp	r0, #0
    3f3e:	db07      	blt.n	3f50 <mbedtls_rsa_public+0x50>
    mbedtls_mpi_free( &T );
    3f40:	a803      	add	r0, sp, #12
    3f42:	f003 ff58 	bl	7df6 <mbedtls_mpi_free>
        ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;
    3f46:	f06f 0403 	mvn.w	r4, #3
        ( *mbedtls_test_hook_error_add )( high, low, file, line );
#endif
    (void)file;
    (void)line;

    return( high + low );
    3f4a:	f5a4 4485 	sub.w	r4, r4, #17024	; 0x4280
        return( MBEDTLS_ERROR_ADD( MBEDTLS_ERR_RSA_PUBLIC_FAILED, ret ) );
    3f4e:	e018      	b.n	3f82 <mbedtls_rsa_public+0x82>
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &T, &T, &ctx->E, &ctx->N, &ctx->RN ) );
    3f50:	f105 0368 	add.w	r3, r5, #104	; 0x68
    3f54:	a903      	add	r1, sp, #12
    olen = ctx->len;
    3f56:	686f      	ldr	r7, [r5, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &T, &T, &ctx->E, &ctx->N, &ctx->RN ) );
    3f58:	9300      	str	r3, [sp, #0]
    3f5a:	f105 0214 	add.w	r2, r5, #20
    3f5e:	4623      	mov	r3, r4
    3f60:	4608      	mov	r0, r1
    3f62:	f004 fca0 	bl	88a6 <mbedtls_mpi_exp_mod>
    3f66:	4604      	mov	r4, r0
    3f68:	2800      	cmp	r0, #0
    3f6a:	d1dd      	bne.n	3f28 <mbedtls_rsa_public+0x28>
    MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &T, output, olen ) );
    3f6c:	463a      	mov	r2, r7
    3f6e:	4631      	mov	r1, r6
    3f70:	a803      	add	r0, sp, #12
    3f72:	f004 f83a 	bl	7fea <mbedtls_mpi_write_binary>
    3f76:	4604      	mov	r4, r0
    mbedtls_mpi_free( &T );
    3f78:	a803      	add	r0, sp, #12
    3f7a:	f003 ff3c 	bl	7df6 <mbedtls_mpi_free>
    if( ret != 0 )
    3f7e:	2c00      	cmp	r4, #0
    3f80:	d1e3      	bne.n	3f4a <mbedtls_rsa_public+0x4a>

    return( 0 );
}
    3f82:	4620      	mov	r0, r4
    3f84:	b007      	add	sp, #28
    3f86:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    3f88:	4c00      	ldr	r4, [pc, #0]	; (3f8c <mbedtls_rsa_public+0x8c>)
    3f8a:	e7fa      	b.n	3f82 <mbedtls_rsa_public+0x82>
    3f8c:	ffffbf80 	.word	0xffffbf80

00003f90 <mbedtls_sha256_starts>:
#endif

    ctx->total[0] = 0;
    ctx->total[1] = 0;

    if( is224 == 0 )
    3f90:	4a23      	ldr	r2, [pc, #140]	; (4020 <mbedtls_sha256_starts+0x90>)
{
    3f92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if( is224 == 0 )
    3f96:	f1b1 0800 	subs.w	r8, r1, #0
    3f9a:	bf18      	it	ne
    3f9c:	4696      	movne	lr, r2
    3f9e:	4a21      	ldr	r2, [pc, #132]	; (4024 <mbedtls_sha256_starts+0x94>)
    3fa0:	4921      	ldr	r1, [pc, #132]	; (4028 <mbedtls_sha256_starts+0x98>)
    3fa2:	4f22      	ldr	r7, [pc, #136]	; (402c <mbedtls_sha256_starts+0x9c>)
    3fa4:	4e22      	ldr	r6, [pc, #136]	; (4030 <mbedtls_sha256_starts+0xa0>)
    3fa6:	4d23      	ldr	r5, [pc, #140]	; (4034 <mbedtls_sha256_starts+0xa4>)
    3fa8:	4c23      	ldr	r4, [pc, #140]	; (4038 <mbedtls_sha256_starts+0xa8>)
    3faa:	bf18      	it	ne
    3fac:	4694      	movne	ip, r2
    3fae:	f102 4279 	add.w	r2, r2, #4177526784	; 0xf9000000
    3fb2:	bf08      	it	eq
    3fb4:	468e      	moveq	lr, r1
    3fb6:	f502 0274 	add.w	r2, r2, #15990784	; 0xf40000
    3fba:	4920      	ldr	r1, [pc, #128]	; (403c <mbedtls_sha256_starts+0xac>)
    3fbc:	f502 6201 	add.w	r2, r2, #2064	; 0x810
    3fc0:	bf08      	it	eq
    3fc2:	468c      	moveq	ip, r1
    3fc4:	491e      	ldr	r1, [pc, #120]	; (4040 <mbedtls_sha256_starts+0xb0>)
    3fc6:	bf18      	it	ne
    3fc8:	4611      	movne	r1, r2
    3fca:	4a1e      	ldr	r2, [pc, #120]	; (4044 <mbedtls_sha256_starts+0xb4>)
    3fcc:	bf18      	it	ne
    3fce:	4617      	movne	r7, r2
    3fd0:	4a1d      	ldr	r2, [pc, #116]	; (4048 <mbedtls_sha256_starts+0xb8>)
    3fd2:	bf18      	it	ne
    3fd4:	4616      	movne	r6, r2
    3fd6:	f102 42d1 	add.w	r2, r2, #1753219072	; 0x68800000
    3fda:	f502 12c0 	add.w	r2, r2, #1572864	; 0x180000
    3fde:	f502 621e 	add.w	r2, r2, #2528	; 0x9e0
    3fe2:	bf18      	it	ne
    3fe4:	4615      	movne	r5, r2
    3fe6:	4a19      	ldr	r2, [pc, #100]	; (404c <mbedtls_sha256_starts+0xbc>)
{
    3fe8:	4603      	mov	r3, r0
    if( is224 == 0 )
    3fea:	bf18      	it	ne
    3fec:	4614      	movne	r4, r2
    3fee:	4818      	ldr	r0, [pc, #96]	; (4050 <mbedtls_sha256_starts+0xc0>)
        ctx->state[6] = 0x64F98FA7;
        ctx->state[7] = 0xBEFA4FA4;
#endif
    }

    ctx->is224 = is224;
    3ff0:	f8c3 8068 	str.w	r8, [r3, #104]	; 0x68
    if( is224 == 0 )
    3ff4:	f1a2 6211 	sub.w	r2, r2, #152043520	; 0x9100000
    3ff8:	f5a2 220c 	sub.w	r2, r2, #573440	; 0x8c000
    3ffc:	f2a2 228e 	subw	r2, r2, #654	; 0x28e
    4000:	bf18      	it	ne
    4002:	4602      	movne	r2, r0
    ctx->total[0] = 0;
    4004:	2000      	movs	r0, #0
    ctx->total[1] = 0;
    4006:	e9c3 0000 	strd	r0, r0, [r3]
        ctx->state[1] = 0xBB67AE85;
    400a:	e9c3 ec02 	strd	lr, ip, [r3, #8]
        ctx->state[3] = 0xA54FF53A;
    400e:	e9c3 1704 	strd	r1, r7, [r3, #16]
        ctx->state[5] = 0x9B05688C;
    4012:	e9c3 6506 	strd	r6, r5, [r3, #24]
        ctx->state[7] = 0x5BE0CD19;
    4016:	e9c3 4208 	strd	r4, r2, [r3, #32]

    return( 0 );
}
    401a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    401e:	bf00      	nop
    4020:	c1059ed8 	.word	0xc1059ed8
    4024:	367cd507 	.word	0x367cd507
    4028:	6a09e667 	.word	0x6a09e667
    402c:	a54ff53a 	.word	0xa54ff53a
    4030:	510e527f 	.word	0x510e527f
    4034:	9b05688c 	.word	0x9b05688c
    4038:	1f83d9ab 	.word	0x1f83d9ab
    403c:	bb67ae85 	.word	0xbb67ae85
    4040:	3c6ef372 	.word	0x3c6ef372
    4044:	f70e5939 	.word	0xf70e5939
    4048:	ffc00b31 	.word	0xffc00b31
    404c:	64f98fa7 	.word	0x64f98fa7
    4050:	befa4fa4 	.word	0xbefa4fa4

00004054 <mbedtls_internal_sha256_process>:
        (d) += local.temp1; (h) = local.temp1 + local.temp2;        \
    } while( 0 )

int mbedtls_internal_sha256_process( mbedtls_sha256_context *ctx,
                                const unsigned char data[64] )
{
    4054:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4058:	b0d1      	sub	sp, #324	; 0x144
    405a:	1d03      	adds	r3, r0, #4
    405c:	9301      	str	r3, [sp, #4]
    405e:	f100 0324 	add.w	r3, r0, #36	; 0x24
    4062:	f50d 7b8e 	add.w	fp, sp, #284	; 0x11c
    4066:	9303      	str	r3, [sp, #12]
    4068:	9b01      	ldr	r3, [sp, #4]
    406a:	465a      	mov	r2, fp

    SHA256_VALIDATE_RET( ctx != NULL );
    SHA256_VALIDATE_RET( (const unsigned char *)data != NULL );

    for( i = 0; i < 8; i++ )
        local.A[i] = ctx->state[i];
    406c:	f853 0f04 	ldr.w	r0, [r3, #4]!
    4070:	f842 0f04 	str.w	r0, [r2, #4]!
    for( i = 0; i < 8; i++ )
    4074:	9803      	ldr	r0, [sp, #12]
    4076:	4298      	cmp	r0, r3
    4078:	d1f8      	bne.n	406c <mbedtls_internal_sha256_process+0x18>
    407a:	9b4f      	ldr	r3, [sp, #316]	; 0x13c
    407c:	9302      	str	r3, [sp, #8]
    407e:	ad4c      	add	r5, sp, #304	; 0x130
    4080:	e9dd e34a 	ldrd	lr, r3, [sp, #296]	; 0x128
    4084:	e895 1120 	ldmia.w	r5, {r5, r8, ip}
    4088:	e9dd 0748 	ldrd	r0, r7, [sp, #288]	; 0x120
    408c:	9304      	str	r3, [sp, #16]
    408e:	4b42      	ldr	r3, [pc, #264]	; (4198 <mbedtls_internal_sha256_process+0x144>)
    4090:	9305      	str	r3, [sp, #20]
    4092:	aa06      	add	r2, sp, #24

#if defined(MBEDTLS_SHA256_SMALLER)
    for( i = 0; i < 64; i++ )
    4094:	f04f 0900 	mov.w	r9, #0
    {
        if( i < 16 )
    4098:	f1b9 0f0f 	cmp.w	r9, #15
    409c:	d863      	bhi.n	4166 <mbedtls_internal_sha256_process+0x112>
            local.W[i] = MBEDTLS_GET_UINT32_BE( data, 4 * i );
    409e:	784c      	ldrb	r4, [r1, #1]
    40a0:	780b      	ldrb	r3, [r1, #0]
    40a2:	0424      	lsls	r4, r4, #16
    40a4:	ea44 6403 	orr.w	r4, r4, r3, lsl #24
    40a8:	78cb      	ldrb	r3, [r1, #3]
    40aa:	4323      	orrs	r3, r4
    40ac:	788c      	ldrb	r4, [r1, #2]
    40ae:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
        else
            R( i );

        P( local.A[0], local.A[1], local.A[2], local.A[3], local.A[4],
    40b2:	ea4f 2af5 	mov.w	sl, r5, ror #11
    40b6:	ea8c 0408 	eor.w	r4, ip, r8
    40ba:	9e05      	ldr	r6, [sp, #20]
    40bc:	6093      	str	r3, [r2, #8]
    40be:	ea8a 1ab5 	eor.w	sl, sl, r5, ror #6
    40c2:	402c      	ands	r4, r5
    40c4:	ea8a 6a75 	eor.w	sl, sl, r5, ror #25
    40c8:	ea84 040c 	eor.w	r4, r4, ip
    40cc:	4454      	add	r4, sl
    40ce:	f856 ab04 	ldr.w	sl, [r6], #4
    40d2:	9605      	str	r6, [sp, #20]
    40d4:	4454      	add	r4, sl
    40d6:	4423      	add	r3, r4
    40d8:	9c02      	ldr	r4, [sp, #8]
    40da:	f8cd c008 	str.w	ip, [sp, #8]
    40de:	4423      	add	r3, r4
    40e0:	ea4f 3a70 	mov.w	sl, r0, ror #13
    40e4:	ea40 0407 	orr.w	r4, r0, r7
    40e8:	ea8a 0ab0 	eor.w	sl, sl, r0, ror #2
    40ec:	ea04 040e 	and.w	r4, r4, lr
    40f0:	ea00 0607 	and.w	r6, r0, r7
    40f4:	ea8a 5ab0 	eor.w	sl, sl, r0, ror #22
    40f8:	4334      	orrs	r4, r6
    40fa:	4454      	add	r4, sl
    for( i = 0; i < 64; i++ )
    40fc:	f109 0901 	add.w	r9, r9, #1
        P( local.A[0], local.A[1], local.A[2], local.A[3], local.A[4],
    4100:	f8dd a010 	ldr.w	sl, [sp, #16]
    4104:	f8cd e010 	str.w	lr, [sp, #16]
    for( i = 0; i < 64; i++ )
    4108:	f1b9 0f40 	cmp.w	r9, #64	; 0x40
        P( local.A[0], local.A[1], local.A[2], local.A[3], local.A[4],
    410c:	449a      	add	sl, r3
    for( i = 0; i < 64; i++ )
    410e:	f102 0204 	add.w	r2, r2, #4
        P( local.A[0], local.A[1], local.A[2], local.A[3], local.A[4],
    4112:	4423      	add	r3, r4
    for( i = 0; i < 64; i++ )
    4114:	f101 0104 	add.w	r1, r1, #4
    4118:	d11e      	bne.n	4158 <mbedtls_internal_sha256_process+0x104>
    411a:	e9cd 3406 	strd	r3, r4, [sp, #24]
    411e:	e9cd 8c4e 	strd	r8, ip, [sp, #312]	; 0x138
    4122:	e9cd a54c 	strd	sl, r5, [sp, #304]	; 0x130
    4126:	e9cd 7e4a 	strd	r7, lr, [sp, #296]	; 0x128
    412a:	e9cd 3048 	strd	r3, r0, [sp, #288]	; 0x120
           local.A[6], local.A[7], local.A[0], R(i+7), K[i+7] );
    }
#endif /* MBEDTLS_SHA256_SMALLER */

    for( i = 0; i < 8; i++ )
        ctx->state[i] += local.A[i];
    412e:	9a01      	ldr	r2, [sp, #4]
    4130:	f852 3f04 	ldr.w	r3, [r2, #4]!
    4134:	9201      	str	r2, [sp, #4]
    4136:	f85b 2f04 	ldr.w	r2, [fp, #4]!
    413a:	4413      	add	r3, r2
    413c:	9a01      	ldr	r2, [sp, #4]
    413e:	6013      	str	r3, [r2, #0]
    for( i = 0; i < 8; i++ )
    4140:	9b03      	ldr	r3, [sp, #12]
    4142:	4293      	cmp	r3, r2
    4144:	d1f3      	bne.n	412e <mbedtls_internal_sha256_process+0xda>

    /* Zeroise buffers and variables to clear sensitive data from memory. */
    mbedtls_platform_zeroize( &local, sizeof( local ) );
    4146:	a806      	add	r0, sp, #24
    4148:	f44f 7194 	mov.w	r1, #296	; 0x128
    414c:	f7ff fe4c 	bl	3de8 <mbedtls_platform_zeroize>

    return( 0 );
}
    4150:	2000      	movs	r0, #0
    4152:	b051      	add	sp, #324	; 0x144
    4154:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4158:	46be      	mov	lr, r7
    415a:	46c4      	mov	ip, r8
    415c:	4607      	mov	r7, r0
    415e:	46a8      	mov	r8, r5
        P( local.A[0], local.A[1], local.A[2], local.A[3], local.A[4],
    4160:	4618      	mov	r0, r3
    4162:	4655      	mov	r5, sl
    4164:	e798      	b.n	4098 <mbedtls_internal_sha256_process+0x44>
            R( i );
    4166:	6813      	ldr	r3, [r2, #0]
    4168:	f852 4c38 	ldr.w	r4, [r2, #-56]
    416c:	f852 6c34 	ldr.w	r6, [r2, #-52]
    4170:	ea4f 4af3 	mov.w	sl, r3, ror #19
    4174:	ea8a 4a73 	eor.w	sl, sl, r3, ror #17
    4178:	ea8a 2a93 	eor.w	sl, sl, r3, lsr #10
    417c:	f852 3c14 	ldr.w	r3, [r2, #-20]
    4180:	4423      	add	r3, r4
    4182:	f852 4c34 	ldr.w	r4, [r2, #-52]
    4186:	ea4f 44b4 	mov.w	r4, r4, ror #18
    418a:	ea84 14f6 	eor.w	r4, r4, r6, ror #7
    418e:	4453      	add	r3, sl
    4190:	ea84 04d6 	eor.w	r4, r4, r6, lsr #3
    4194:	4423      	add	r3, r4
    4196:	e78c      	b.n	40b2 <mbedtls_internal_sha256_process+0x5e>
    4198:	000099ac 	.word	0x000099ac

0000419c <nrf52_errata_16>:
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    419c:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    41a0:	f893 2fe0 	ldrb.w	r2, [r3, #4064]	; 0xfe0
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    41a4:	2a06      	cmp	r2, #6
    41a6:	d109      	bne.n	41bc <nrf52_errata_16+0x20>
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
    41a8:	f8d3 3fe8 	ldr.w	r3, [r3, #4072]	; 0xfe8
    41ac:	f3c3 1303 	ubfx	r3, r3, #4, #4
    41b0:	3b03      	subs	r3, #3
    41b2:	2b04      	cmp	r3, #4
    41b4:	d802      	bhi.n	41bc <nrf52_errata_16+0x20>
    41b6:	4a02      	ldr	r2, [pc, #8]	; (41c0 <nrf52_errata_16+0x24>)
    41b8:	5cd0      	ldrb	r0, [r2, r3]
    41ba:	4770      	bx	lr
                switch(var2)
                {
                    case 0x03ul:
                        return true;
                    case 0x04ul:
                        return false;
    41bc:	2000      	movs	r0, #0
                }
            }
        #endif
        return false;
    #endif
}
    41be:	4770      	bx	lr
    41c0:	0000a9b7 	.word	0x0000a9b7

000041c4 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    41c4:	4a02      	ldr	r2, [pc, #8]	; (41d0 <nvmc_wait+0xc>)
    41c6:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    41ca:	2b00      	cmp	r3, #0
    41cc:	d0fb      	beq.n	41c6 <nvmc_wait+0x2>
}
    41ce:	4770      	bx	lr
    41d0:	4001e000 	.word	0x4001e000

000041d4 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
    41d4:	b510      	push	{r4, lr}
    #endif

    #if NRF52_ERRATA_12_ENABLE_WORKAROUND
        /* Workaround for Errata 12 "COMP: Reference ladder not correctly calibrated" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_12()){
    41d6:	f004 ff1b 	bl	9010 <nrf52_errata_108>
    41da:	b140      	cbz	r0, 41ee <SystemInit+0x1a>
            *(volatile uint32_t *)0x40013540 = (*(uint32_t *)0x10000324 & 0x00001F00) >> 8;
    41dc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    41e0:	4a90      	ldr	r2, [pc, #576]	; (4424 <SystemInit+0x250>)
    41e2:	f8d3 3324 	ldr.w	r3, [r3, #804]	; 0x324
    41e6:	f3c3 2304 	ubfx	r3, r3, #8, #5
    41ea:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
    #endif

    #if NRF52_ERRATA_16_ENABLE_WORKAROUND
        /* Workaround for Errata 16 "System: RAM may be corrupt on wakeup from CPU IDLE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_16()){
    41ee:	f7ff ffd5 	bl	419c <nrf52_errata_16>
    41f2:	b110      	cbz	r0, 41fa <SystemInit+0x26>
            *(volatile uint32_t *)0x4007C074 = 3131961357ul;
    41f4:	4b8c      	ldr	r3, [pc, #560]	; (4428 <SystemInit+0x254>)
    41f6:	4a8d      	ldr	r2, [pc, #564]	; (442c <SystemInit+0x258>)
    41f8:	675a      	str	r2, [r3, #116]	; 0x74
    #endif

    #if NRF52_ERRATA_31_ENABLE_WORKAROUND
        /* Workaround for Errata 31 "CLOCK: Calibration values are not correctly loaded from FICR at reset" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_31()){
    41fa:	f004 ff09 	bl	9010 <nrf52_errata_108>
    41fe:	b148      	cbz	r0, 4214 <SystemInit+0x40>
            *(volatile uint32_t *)0x4000053C = ((*(volatile uint32_t *)0x10000244) & 0x0000E000) >> 13;
    4200:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    4204:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    4208:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
    420c:	f3c3 3342 	ubfx	r3, r3, #13, #3
    4210:	f8c2 353c 	str.w	r3, [r2, #1340]	; 0x53c
    #endif

    #if NRF52_ERRATA_32_ENABLE_WORKAROUND
        /* Workaround for Errata 32 "DIF: Debug session automatically enables TracePort pins" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_32()){
    4214:	f7ff ffc2 	bl	419c <nrf52_errata_16>
    4218:	b130      	cbz	r0, 4228 <SystemInit+0x54>
            CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
    421a:	4a85      	ldr	r2, [pc, #532]	; (4430 <SystemInit+0x25c>)
    421c:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
    4220:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    4224:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
    4228:	f004 fef2 	bl	9010 <nrf52_errata_108>
    422c:	b140      	cbz	r0, 4240 <SystemInit+0x6c>
            NRF_CLOCK->EVENTS_DONE = 0;
    422e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4232:	2200      	movs	r2, #0
    4234:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    4238:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    423c:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_37_ENABLE_WORKAROUND
        /* Workaround for Errata 37 "RADIO: Encryption engine is slow by default" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_37()){
    4240:	f7ff ffac 	bl	419c <nrf52_errata_16>
    4244:	b120      	cbz	r0, 4250 <SystemInit+0x7c>
            *(volatile uint32_t *)0x400005A0 = 0x3;
    4246:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    424a:	2203      	movs	r2, #3
    424c:	f8c3 25a0 	str.w	r2, [r3, #1440]	; 0x5a0
    #endif

    #if NRF52_ERRATA_57_ENABLE_WORKAROUND
        /* Workaround for Errata 57 "NFCT: NFC Modulation amplitude" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_57()){
    4250:	f7ff ffa4 	bl	419c <nrf52_errata_16>
    4254:	b160      	cbz	r0, 4270 <SystemInit+0x9c>
            *(volatile uint32_t *)0x40005610 = 0x00000005;
    4256:	4b77      	ldr	r3, [pc, #476]	; (4434 <SystemInit+0x260>)
    4258:	2205      	movs	r2, #5
    425a:	f8c3 2610 	str.w	r2, [r3, #1552]	; 0x610
            *(volatile uint32_t *)0x40005688 = 0x00000001;
    425e:	2201      	movs	r2, #1
    4260:	f8c3 2688 	str.w	r2, [r3, #1672]	; 0x688
            *(volatile uint32_t *)0x40005618 = 0x00000000;
    4264:	2200      	movs	r2, #0
    4266:	f8c3 2618 	str.w	r2, [r3, #1560]	; 0x618
            *(volatile uint32_t *)0x40005614 = 0x0000003F;
    426a:	223f      	movs	r2, #63	; 0x3f
    426c:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
    4270:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    4274:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    4278:	1c51      	adds	r1, r2, #1
            {
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    427a:	bf09      	itett	eq
    427c:	f04f 4370 	moveq.w	r3, #4026531840	; 0xf0000000
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
            }
            else
            {
                var1 = *(uint32_t *)0x10000130ul;
                var2 = *(uint32_t *)0x10000134ul;
    4280:	f8d3 3134 	ldrne.w	r3, [r3, #308]	; 0x134
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    4284:	f893 2fe0 	ldrbeq.w	r2, [r3, #4064]	; 0xfe0
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
    4288:	f8d3 3fe8 	ldreq.w	r3, [r3, #4072]	; 0xfe8
    428c:	bf08      	it	eq
    428e:	f3c3 1303 	ubfxeq	r3, r3, #4, #4
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    4292:	2a06      	cmp	r2, #6
    4294:	d14d      	bne.n	4332 <SystemInit+0x15e>
            {
                switch(var2)
    4296:	3b03      	subs	r3, #3
    4298:	2b04      	cmp	r3, #4
    429a:	d803      	bhi.n	42a4 <SystemInit+0xd0>
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
    429c:	4a66      	ldr	r2, [pc, #408]	; (4438 <SystemInit+0x264>)
    429e:	5cd3      	ldrb	r3, [r2, r3]
    42a0:	2b00      	cmp	r3, #0
    42a2:	d046      	beq.n	4332 <SystemInit+0x15e>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    42a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    42a8:	4b64      	ldr	r3, [pc, #400]	; (443c <SystemInit+0x268>)
    42aa:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    42ae:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    42b2:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    42b6:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    42ba:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    42be:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    42c2:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    42c6:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    42ca:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    42ce:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    42d2:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    42d6:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    42da:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    42de:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    42e2:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    42e6:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    42ea:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    42ee:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    42f2:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    42f6:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    42fa:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    42fe:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    4302:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    4306:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    430a:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    430e:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    4312:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    4316:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    431a:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    431e:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    4322:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    4326:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    432a:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    432e:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_108_ENABLE_WORKAROUND
        /* Workaround for Errata 108 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_108()){
    4332:	f004 fe6d 	bl	9010 <nrf52_errata_108>
    4336:	b148      	cbz	r0, 434c <SystemInit+0x178>
            *(volatile uint32_t *)0x40000EE4ul = *(volatile uint32_t *)0x10000258ul & 0x0000004Ful;
    4338:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    433c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    4340:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
    4344:	f003 034f 	and.w	r3, r3, #79	; 0x4f
    4348:	f8c2 3ee4 	str.w	r3, [r2, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
    434c:	f004 fe60 	bl	9010 <nrf52_errata_108>
    4350:	b148      	cbz	r0, 4366 <SystemInit+0x192>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    4352:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4356:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    435a:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    435c:	bf44      	itt	mi
    435e:	f06f 0201 	mvnmi.w	r2, #1
    4362:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    4366:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    436a:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    436e:	2a06      	cmp	r2, #6
    4370:	d126      	bne.n	43c0 <SystemInit+0x1ec>
            {
                switch(var2)
    4372:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
    4376:	3b03      	subs	r3, #3
    4378:	2b04      	cmp	r3, #4
    437a:	d802      	bhi.n	4382 <SystemInit+0x1ae>
    #endif

    #if NRF52_ERRATA_182_ENABLE_WORKAROUND
        /* Workaround for Errata 182 "RADIO: Fixes for anomalies #102, #106, and #107 do not take effect" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_182()){
    437c:	4a30      	ldr	r2, [pc, #192]	; (4440 <SystemInit+0x26c>)
    437e:	5cd3      	ldrb	r3, [r2, r3]
    4380:	b163      	cbz	r3, 439c <SystemInit+0x1c8>
            *(volatile uint32_t *) 0x4000173C |= (0x1 << 10);
    4382:	4a30      	ldr	r2, [pc, #192]	; (4444 <SystemInit+0x270>)
    4384:	f8d2 373c 	ldr.w	r3, [r2, #1852]	; 0x73c
    4388:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    438c:	f8c2 373c 	str.w	r3, [r2, #1852]	; 0x73c
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    4390:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    4394:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
    4398:	2b06      	cmp	r3, #6
    439a:	d111      	bne.n	43c0 <SystemInit+0x1ec>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    439c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    43a0:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
    43a4:	3b03      	subs	r3, #3
    43a6:	2b04      	cmp	r3, #4
    43a8:	d802      	bhi.n	43b0 <SystemInit+0x1dc>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
    43aa:	4a27      	ldr	r2, [pc, #156]	; (4448 <SystemInit+0x274>)
    43ac:	5cd3      	ldrb	r3, [r2, r3]
    43ae:	b13b      	cbz	r3, 43c0 <SystemInit+0x1ec>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
    43b0:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    43b4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
    43b8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    43bc:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    43c0:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    43c4:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    43c8:	2a00      	cmp	r2, #0
    43ca:	db03      	blt.n	43d4 <SystemInit+0x200>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    43cc:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    43d0:	2b00      	cmp	r3, #0
    43d2:	da22      	bge.n	441a <SystemInit+0x246>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    43d4:	491d      	ldr	r1, [pc, #116]	; (444c <SystemInit+0x278>)
    43d6:	2301      	movs	r3, #1
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    43d8:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    43dc:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    43e0:	2415      	movs	r4, #21
    nvmc_wait();
    43e2:	f7ff feef 	bl	41c4 <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    43e6:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
    43ea:	f7ff feeb 	bl	41c4 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
    43ee:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
    43f2:	f7ff fee7 	bl	41c4 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    43f6:	2300      	movs	r3, #0
    43f8:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
    43fc:	f7ff fee2 	bl	41c4 <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
    4400:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    4404:	490a      	ldr	r1, [pc, #40]	; (4430 <SystemInit+0x25c>)
    4406:	4b12      	ldr	r3, [pc, #72]	; (4450 <SystemInit+0x27c>)
    4408:	68ca      	ldr	r2, [r1, #12]
    440a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    440e:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    4410:	60cb      	str	r3, [r1, #12]
    4412:	f3bf 8f4f 	dsb	sy
    __NOP();
    4416:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    4418:	e7fd      	b.n	4416 <SystemInit+0x242>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    441a:	4b0e      	ldr	r3, [pc, #56]	; (4454 <SystemInit+0x280>)
    441c:	4a0e      	ldr	r2, [pc, #56]	; (4458 <SystemInit+0x284>)
    441e:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
    4420:	bd10      	pop	{r4, pc}
    4422:	bf00      	nop
    4424:	40013000 	.word	0x40013000
    4428:	4007c000 	.word	0x4007c000
    442c:	baadf00d 	.word	0xbaadf00d
    4430:	e000ed00 	.word	0xe000ed00
    4434:	40005000 	.word	0x40005000
    4438:	0000a9b2 	.word	0x0000a9b2
    443c:	4000c000 	.word	0x4000c000
    4440:	0000a9ad 	.word	0x0000a9ad
    4444:	40001000 	.word	0x40001000
    4448:	0000a9a8 	.word	0x0000a9a8
    444c:	4001e000 	.word	0x4001e000
    4450:	05fa0004 	.word	0x05fa0004
    4454:	200000bc 	.word	0x200000bc
    4458:	03d09000 	.word	0x03d09000

0000445c <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    445c:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    445e:	2501      	movs	r5, #1
        prev_mask = *p_mask;
    4460:	6802      	ldr	r2, [r0, #0]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    4462:	f3bf 8f5b 	dmb	ish
        idx = 31 - NRF_CLZ(prev_mask);
    4466:	fab2 f382 	clz	r3, r2
    446a:	f1c3 031f 	rsb	r3, r3, #31
    446e:	b2db      	uxtb	r3, r3
        new_mask = prev_mask & ~NRFX_BIT(idx);
    4470:	fa05 f403 	lsl.w	r4, r5, r3
    4474:	ea22 0404 	bic.w	r4, r2, r4
    4478:	e850 6f00 	ldrex	r6, [r0]
    447c:	4296      	cmp	r6, r2
    447e:	d104      	bne.n	448a <nrfx_flag32_alloc+0x2e>
    4480:	e840 4c00 	strex	ip, r4, [r0]
    4484:	f1bc 0f00 	cmp.w	ip, #0
    4488:	d1f6      	bne.n	4478 <nrfx_flag32_alloc+0x1c>
    448a:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    448e:	d1e7      	bne.n	4460 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
}
    4490:	4801      	ldr	r0, [pc, #4]	; (4498 <nrfx_flag32_alloc+0x3c>)
    *p_flag = idx;
    4492:	700b      	strb	r3, [r1, #0]
}
    4494:	bd70      	pop	{r4, r5, r6, pc}
    4496:	bf00      	nop
    4498:	0bad0000 	.word	0x0bad0000

0000449c <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    449c:	b510      	push	{r4, lr}
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    449e:	6803      	ldr	r3, [r0, #0]
    44a0:	40cb      	lsrs	r3, r1
    44a2:	07db      	lsls	r3, r3, #31
    44a4:	d414      	bmi.n	44d0 <nrfx_flag32_free+0x34>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
    44a6:	2301      	movs	r3, #1
    44a8:	408b      	lsls	r3, r1
        prev_mask = *p_mask;
    44aa:	6802      	ldr	r2, [r0, #0]
    44ac:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
    44b0:	ea43 0102 	orr.w	r1, r3, r2
    44b4:	e850 4f00 	ldrex	r4, [r0]
    44b8:	4294      	cmp	r4, r2
    44ba:	d104      	bne.n	44c6 <nrfx_flag32_free+0x2a>
    44bc:	e840 1c00 	strex	ip, r1, [r0]
    44c0:	f1bc 0f00 	cmp.w	ip, #0
    44c4:	d1f6      	bne.n	44b4 <nrfx_flag32_free+0x18>
    44c6:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    44ca:	d1ee      	bne.n	44aa <nrfx_flag32_free+0xe>

    return NRFX_SUCCESS;
    44cc:	4801      	ldr	r0, [pc, #4]	; (44d4 <nrfx_flag32_free+0x38>)
}
    44ce:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    44d0:	4801      	ldr	r0, [pc, #4]	; (44d8 <nrfx_flag32_free+0x3c>)
    44d2:	e7fc      	b.n	44ce <nrfx_flag32_free+0x32>
    44d4:	0bad0000 	.word	0x0bad0000
    44d8:	0bad0004 	.word	0x0bad0004

000044dc <clock_stop>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

static void clock_stop(nrf_clock_domain_t domain)
{
    44dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    switch (domain)
    44de:	4604      	mov	r4, r0
    44e0:	b118      	cbz	r0, 44ea <clock_stop+0xe>
    44e2:	2801      	cmp	r0, #1
    44e4:	d022      	beq.n	452c <clock_stop+0x50>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    44e6:	b003      	add	sp, #12
    44e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    p_reg->INTENCLR = mask;
    44ea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    44ee:	2202      	movs	r2, #2
    44f0:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    44f4:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
    44f8:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    44fc:	2201      	movs	r2, #1
    44fe:	60da      	str	r2, [r3, #12]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    4500:	4607      	mov	r7, r0
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    4502:	2301      	movs	r3, #1
    4504:	f88d 3007 	strb.w	r3, [sp, #7]
    4508:	f242 7510 	movw	r5, #10000	; 0x2710
    450c:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
    switch (domain)
    4510:	b1cc      	cbz	r4, 4546 <clock_stop+0x6a>
    4512:	2c01      	cmp	r4, #1
    4514:	d1e7      	bne.n	44e6 <clock_stop+0xa>
            if (p_clk_src != NULL)
    4516:	b3c7      	cbz	r7, 458a <clock_stop+0xae>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    4518:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    451c:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    4520:	703b      	strb	r3, [r7, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    4522:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    4526:	03da      	lsls	r2, r3, #15
    4528:	d521      	bpl.n	456e <clock_stop+0x92>
    452a:	e016      	b.n	455a <clock_stop+0x7e>
    p_reg->INTENCLR = mask;
    452c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4530:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
    4532:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4536:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    453a:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    453e:	6058      	str	r0, [r3, #4]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    4540:	f10d 0707 	add.w	r7, sp, #7
    4544:	e7dd      	b.n	4502 <clock_stop+0x26>
            if (p_clk_src != NULL)
    4546:	b1b7      	cbz	r7, 4576 <clock_stop+0x9a>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    4548:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    454c:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    4550:	603b      	str	r3, [r7, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    4552:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
    4556:	03d8      	lsls	r0, r3, #15
    4558:	d5c5      	bpl.n	44e6 <clock_stop+0xa>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    455a:	f89d 0007 	ldrb.w	r0, [sp, #7]
    455e:	2801      	cmp	r0, #1
    4560:	d103      	bne.n	456a <clock_stop+0x8e>
    4562:	f004 fd64 	bl	902e <nrfx_busy_wait>
    4566:	3d01      	subs	r5, #1
    4568:	d1d2      	bne.n	4510 <clock_stop+0x34>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    456a:	2c01      	cmp	r4, #1
    456c:	d1bb      	bne.n	44e6 <clock_stop+0xa>
            m_clock_cb.hfclk_started = false;
    456e:	4b0c      	ldr	r3, [pc, #48]	; (45a0 <clock_stop+0xc4>)
    4570:	2200      	movs	r2, #0
    4572:	715a      	strb	r2, [r3, #5]
    4574:	e7b7      	b.n	44e6 <clock_stop+0xa>
    4576:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
    457a:	03d9      	lsls	r1, r3, #15
    457c:	d5b3      	bpl.n	44e6 <clock_stop+0xa>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    457e:	2001      	movs	r0, #1
    4580:	f004 fd55 	bl	902e <nrfx_busy_wait>
    4584:	3d01      	subs	r5, #1
    4586:	d1f6      	bne.n	4576 <clock_stop+0x9a>
    4588:	e7ad      	b.n	44e6 <clock_stop+0xa>
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    458a:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    458e:	03db      	lsls	r3, r3, #15
    4590:	d5ed      	bpl.n	456e <clock_stop+0x92>
    4592:	2001      	movs	r0, #1
    4594:	f004 fd4b 	bl	902e <nrfx_busy_wait>
    4598:	3d01      	subs	r5, #1
    459a:	d1f6      	bne.n	458a <clock_stop+0xae>
    459c:	e7e7      	b.n	456e <clock_stop+0x92>
    459e:	bf00      	nop
    45a0:	20001084 	.word	0x20001084

000045a4 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    45a4:	4b04      	ldr	r3, [pc, #16]	; (45b8 <nrfx_clock_init+0x14>)
    45a6:	791a      	ldrb	r2, [r3, #4]
    45a8:	b922      	cbnz	r2, 45b4 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    45aa:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
    45ac:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    45ae:	809a      	strh	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
    45b0:	4802      	ldr	r0, [pc, #8]	; (45bc <nrfx_clock_init+0x18>)
    45b2:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    45b4:	4802      	ldr	r0, [pc, #8]	; (45c0 <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    45b6:	4770      	bx	lr
    45b8:	20001084 	.word	0x20001084
    45bc:	0bad0000 	.word	0x0bad0000
    45c0:	0bad000c 	.word	0x0bad000c

000045c4 <nrfx_clock_start>:
    m_clock_cb.module_initialized = false;
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    45c4:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
    45c6:	b110      	cbz	r0, 45ce <nrfx_clock_start+0xa>
    45c8:	2801      	cmp	r0, #1
    45ca:	d043      	beq.n	4654 <nrfx_clock_start+0x90>
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
    45cc:	bd38      	pop	{r3, r4, r5, pc}
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    45ce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    45d2:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    45d6:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    45da:	03c8      	lsls	r0, r1, #15
    45dc:	d40b      	bmi.n	45f6 <nrfx_clock_start+0x32>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
    45de:	f8d2 3414 	ldr.w	r3, [r2, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
    45e2:	07d9      	lsls	r1, r3, #31
    45e4:	d50f      	bpl.n	4606 <nrfx_clock_start+0x42>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    45e6:	f8d2 341c 	ldr.w	r3, [r2, #1052]	; 0x41c
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    45ea:	079b      	lsls	r3, r3, #30
    45ec:	d408      	bmi.n	4600 <nrfx_clock_start+0x3c>
    p_reg->INTENSET = mask;
    45ee:	2302      	movs	r3, #2
    45f0:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
                        break;
    45f4:	e7ea      	b.n	45cc <nrfx_clock_start+0x8>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    45f6:	f003 0303 	and.w	r3, r3, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    45fa:	2b01      	cmp	r3, #1
    45fc:	d004      	beq.n	4608 <nrfx_clock_start+0x44>
    45fe:	b113      	cbz	r3, 4606 <nrfx_clock_start+0x42>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    4600:	2000      	movs	r0, #0
    4602:	f7ff ff6b 	bl	44dc <clock_stop>
        *p_lfclksrc = clock_initial_lfclksrc_get();
    4606:	2300      	movs	r3, #0
    p_reg->LFCLKSRC = (uint32_t)(source);
    4608:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    460c:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4610:	2300      	movs	r3, #0
    4612:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
    4616:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    p_reg->INTENSET = mask;
    461a:	2302      	movs	r3, #2
    461c:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    core_debug = CoreDebug->DEMCR;
    4620:	4a12      	ldr	r2, [pc, #72]	; (466c <nrfx_clock_start+0xa8>)
    4622:	f8d2 00fc 	ldr.w	r0, [r2, #252]	; 0xfc
    CoreDebug->DEMCR = core_debug | CoreDebug_DEMCR_TRCENA_Msk;
    4626:	f040 7380 	orr.w	r3, r0, #16777216	; 0x1000000
    462a:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
    dwt_ctrl = DWT->CTRL;
    462e:	4b10      	ldr	r3, [pc, #64]	; (4670 <nrfx_clock_start+0xac>)
    4630:	681c      	ldr	r4, [r3, #0]
    DWT->CTRL = dwt_ctrl | DWT_CTRL_CYCCNTENA_Msk;
    4632:	f044 0101 	orr.w	r1, r4, #1
    4636:	6019      	str	r1, [r3, #0]
    cyccnt_inital = DWT->CYCCNT;
    4638:	685d      	ldr	r5, [r3, #4]
    while ((DWT->CYCCNT - cyccnt_inital) < ANOMALY_132_DELAY_CYCLES)
    463a:	6859      	ldr	r1, [r3, #4]
    463c:	1b49      	subs	r1, r1, r5
    463e:	f5b1 5f0a 	cmp.w	r1, #8832	; 0x2280
    4642:	d3fa      	bcc.n	463a <nrfx_clock_start+0x76>
    DWT->CTRL = dwt_ctrl;
    4644:	601c      	str	r4, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4646:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    CoreDebug->DEMCR = core_debug;
    464a:	f8c2 00fc 	str.w	r0, [r2, #252]	; 0xfc
    464e:	2201      	movs	r2, #1
    4650:	609a      	str	r2, [r3, #8]
}
    4652:	e7bb      	b.n	45cc <nrfx_clock_start+0x8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4654:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4658:	2200      	movs	r2, #0
    465a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    465e:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
    4662:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4666:	6018      	str	r0, [r3, #0]
}
    4668:	e7b0      	b.n	45cc <nrfx_clock_start+0x8>
    466a:	bf00      	nop
    466c:	e000ed00 	.word	0xe000ed00
    4670:	e0001000 	.word	0xe0001000

00004674 <nrfx_power_clock_irq_handler>:
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    4674:	b510      	push	{r4, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    4676:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    467a:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    467e:	b16a      	cbz	r2, 469c <nrfx_power_clock_irq_handler+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4680:	2200      	movs	r2, #0
    4682:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    4686:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
    468a:	2201      	movs	r2, #1
    468c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
    4690:	4b11      	ldr	r3, [pc, #68]	; (46d8 <nrfx_power_clock_irq_handler+0x64>)
    4692:	7958      	ldrb	r0, [r3, #5]
    4694:	b910      	cbnz	r0, 469c <nrfx_power_clock_irq_handler+0x28>
        {
            m_clock_cb.hfclk_started = true;
    4696:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    4698:	681b      	ldr	r3, [r3, #0]
    469a:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    469c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    46a0:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    46a4:	b172      	cbz	r2, 46c4 <nrfx_power_clock_irq_handler+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    46a6:	2200      	movs	r2, #0
    46a8:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    46ac:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    46b0:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    46b4:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    46b8:	0792      	lsls	r2, r2, #30
    46ba:	d104      	bne.n	46c6 <nrfx_power_clock_irq_handler+0x52>
    p_reg->LFCLKSRC = (uint32_t)(source);
    46bc:	2201      	movs	r2, #1
    46be:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    46c2:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    46c4:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
    46c6:	2202      	movs	r2, #2
    46c8:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    46cc:	4b02      	ldr	r3, [pc, #8]	; (46d8 <nrfx_power_clock_irq_handler+0x64>)
}
    46ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    46d2:	681b      	ldr	r3, [r3, #0]
    46d4:	2001      	movs	r0, #1
    46d6:	4718      	bx	r3
    46d8:	20001084 	.word	0x20001084

000046dc <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    46dc:	4b03      	ldr	r3, [pc, #12]	; (46ec <pin_in_use_by_te+0x10>)
    46de:	3008      	adds	r0, #8
    46e0:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    46e4:	f3c0 1040 	ubfx	r0, r0, #5, #1
    46e8:	4770      	bx	lr
    46ea:	bf00      	nop
    46ec:	200000c0 	.word	0x200000c0

000046f0 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    46f0:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    46f2:	f100 0308 	add.w	r3, r0, #8
    46f6:	4c0c      	ldr	r4, [pc, #48]	; (4728 <call_handler+0x38>)
    46f8:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
    46fc:	05da      	lsls	r2, r3, #23
{
    46fe:	4605      	mov	r5, r0
    4700:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    4702:	d507      	bpl.n	4714 <call_handler+0x24>
    4704:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
    4708:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    470c:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
    4710:	6852      	ldr	r2, [r2, #4]
    4712:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
    4714:	68a3      	ldr	r3, [r4, #8]
    4716:	b12b      	cbz	r3, 4724 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    4718:	68e2      	ldr	r2, [r4, #12]
    471a:	4631      	mov	r1, r6
    471c:	4628      	mov	r0, r5
    }
}
    471e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    4722:	4718      	bx	r3
}
    4724:	bd70      	pop	{r4, r5, r6, pc}
    4726:	bf00      	nop
    4728:	200000c0 	.word	0x200000c0

0000472c <release_handler>:
{
    472c:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    472e:	4a12      	ldr	r2, [pc, #72]	; (4778 <release_handler+0x4c>)
    4730:	3008      	adds	r0, #8
    4732:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
    4736:	05d9      	lsls	r1, r3, #23
    4738:	d51b      	bpl.n	4772 <release_handler+0x46>
    473a:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    473e:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    4742:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    4746:	f102 040e 	add.w	r4, r2, #14
    474a:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    474c:	f834 3f02 	ldrh.w	r3, [r4, #2]!
    4750:	f413 7f80 	tst.w	r3, #256	; 0x100
    4754:	d003      	beq.n	475e <release_handler+0x32>
    4756:	f3c3 2343 	ubfx	r3, r3, #9, #4
    475a:	4299      	cmp	r1, r3
    475c:	d009      	beq.n	4772 <release_handler+0x46>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    475e:	3001      	adds	r0, #1
    4760:	2820      	cmp	r0, #32
    4762:	d1f3      	bne.n	474c <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
    4764:	2300      	movs	r3, #0
    4766:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    476a:	4804      	ldr	r0, [pc, #16]	; (477c <release_handler+0x50>)
}
    476c:	bc10      	pop	{r4}
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    476e:	f7ff be95 	b.w	449c <nrfx_flag32_free>
}
    4772:	bc10      	pop	{r4}
    4774:	4770      	bx	lr
    4776:	bf00      	nop
    4778:	200000c0 	.word	0x200000c0
    477c:	20000114 	.word	0x20000114

00004780 <pin_handler_trigger_uninit>:
{
    4780:	b538      	push	{r3, r4, r5, lr}
    4782:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    4784:	f7ff ffaa 	bl	46dc <pin_in_use_by_te>
    4788:	4c09      	ldr	r4, [pc, #36]	; (47b0 <pin_handler_trigger_uninit+0x30>)
    478a:	f102 0508 	add.w	r5, r2, #8
    478e:	b140      	cbz	r0, 47a2 <pin_handler_trigger_uninit+0x22>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    4790:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    4794:	4907      	ldr	r1, [pc, #28]	; (47b4 <pin_handler_trigger_uninit+0x34>)
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    4796:	0b5b      	lsrs	r3, r3, #13
    4798:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    479c:	2000      	movs	r0, #0
    479e:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    release_handler(pin);
    47a2:	4610      	mov	r0, r2
    47a4:	f7ff ffc2 	bl	472c <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    47a8:	2300      	movs	r3, #0
    47aa:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
    47ae:	bd38      	pop	{r3, r4, r5, pc}
    47b0:	200000c0 	.word	0x200000c0
    47b4:	40006000 	.word	0x40006000

000047b8 <nrfx_gpiote_input_configure>:
{
    47b8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    47bc:	4604      	mov	r4, r0
    47be:	461d      	mov	r5, r3
    if (p_input_config)
    47c0:	b309      	cbz	r1, 4806 <nrfx_gpiote_input_configure+0x4e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    47c2:	4f4f      	ldr	r7, [pc, #316]	; (4900 <nrfx_gpiote_input_configure+0x148>)
    47c4:	f100 0808 	add.w	r8, r0, #8
    47c8:	f837 6018 	ldrh.w	r6, [r7, r8, lsl #1]
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    47cc:	07b3      	lsls	r3, r6, #30
    47ce:	d506      	bpl.n	47de <nrfx_gpiote_input_configure+0x26>
    47d0:	f7ff ff84 	bl	46dc <pin_in_use_by_te>
    47d4:	b118      	cbz	r0, 47de <nrfx_gpiote_input_configure+0x26>
            return NRFX_ERROR_INVALID_PARAM;
    47d6:	484b      	ldr	r0, [pc, #300]	; (4904 <nrfx_gpiote_input_configure+0x14c>)
}
    47d8:	b002      	add	sp, #8
    47da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    *p_pin = pin_number & 0x1F;
    47de:	f004 031f 	and.w	r3, r4, #31
    47e2:	009b      	lsls	r3, r3, #2
    47e4:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    47e8:	7809      	ldrb	r1, [r1, #0]
    uint32_t cnf = reg->PIN_CNF[pin_number];
    47ea:	f8d3 0700 	ldr.w	r0, [r3, #1792]	; 0x700
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    47ee:	f026 0602 	bic.w	r6, r6, #2
    cnf &= ~to_update;
    47f2:	f020 000f 	bic.w	r0, r0, #15
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    47f6:	f046 0601 	orr.w	r6, r6, #1
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    47fa:	ea40 0181 	orr.w	r1, r0, r1, lsl #2
    47fe:	f827 6018 	strh.w	r6, [r7, r8, lsl #1]
    reg->PIN_CNF[pin_number] = cnf;
    4802:	f8c3 1700 	str.w	r1, [r3, #1792]	; 0x700
    if (p_trigger_config)
    4806:	b19a      	cbz	r2, 4830 <nrfx_gpiote_input_configure+0x78>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    4808:	4b3d      	ldr	r3, [pc, #244]	; (4900 <nrfx_gpiote_input_configure+0x148>)
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    480a:	7817      	ldrb	r7, [r2, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    480c:	6850      	ldr	r0, [r2, #4]
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    480e:	f104 0608 	add.w	r6, r4, #8
    4812:	f833 1016 	ldrh.w	r1, [r3, r6, lsl #1]
        if (pin_is_output(pin))
    4816:	f011 0f02 	tst.w	r1, #2
    481a:	d00d      	beq.n	4838 <nrfx_gpiote_input_configure+0x80>
            if (use_evt)
    481c:	2800      	cmp	r0, #0
    481e:	d1da      	bne.n	47d6 <nrfx_gpiote_input_configure+0x1e>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    4820:	f833 2016 	ldrh.w	r2, [r3, r6, lsl #1]
    4824:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    4828:	ea42 0287 	orr.w	r2, r2, r7, lsl #2
    482c:	f823 2016 	strh.w	r2, [r3, r6, lsl #1]
    if (p_handler_config)
    4830:	2d00      	cmp	r5, #0
    4832:	d13b      	bne.n	48ac <nrfx_gpiote_input_configure+0xf4>
        err = NRFX_SUCCESS;
    4834:	4834      	ldr	r0, [pc, #208]	; (4908 <nrfx_gpiote_input_configure+0x150>)
    4836:	e7cf      	b.n	47d8 <nrfx_gpiote_input_configure+0x20>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    4838:	f021 0120 	bic.w	r1, r1, #32
    483c:	04c9      	lsls	r1, r1, #19
    483e:	0cc9      	lsrs	r1, r1, #19
    4840:	f823 1016 	strh.w	r1, [r3, r6, lsl #1]
            if (use_evt)
    4844:	2800      	cmp	r0, #0
    4846:	d0eb      	beq.n	4820 <nrfx_gpiote_input_configure+0x68>
                if (!edge)
    4848:	2f03      	cmp	r7, #3
    484a:	d8c4      	bhi.n	47d6 <nrfx_gpiote_input_configure+0x1e>
                uint8_t ch = *p_trigger_config->p_in_channel;
    484c:	6852      	ldr	r2, [r2, #4]
    484e:	f892 c000 	ldrb.w	ip, [r2]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    4852:	b92f      	cbnz	r7, 4860 <nrfx_gpiote_input_configure+0xa8>
    4854:	4a2d      	ldr	r2, [pc, #180]	; (490c <nrfx_gpiote_input_configure+0x154>)
    4856:	f50c 7ca2 	add.w	ip, ip, #324	; 0x144
    485a:	f842 702c 	str.w	r7, [r2, ip, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
#endif
}
    485e:	e7df      	b.n	4820 <nrfx_gpiote_input_configure+0x68>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    4860:	ea4f 028c 	mov.w	r2, ip, lsl #2
    4864:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    4868:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    486c:	ea41 314c 	orr.w	r1, r1, ip, lsl #13
    4870:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    4874:	f020 0003 	bic.w	r0, r0, #3
    4878:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    487c:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    4880:	f420 3047 	bic.w	r0, r0, #203776	; 0x31c00
    4884:	f420 7040 	bic.w	r0, r0, #768	; 0x300
    4888:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    488c:	0220      	lsls	r0, r4, #8
    488e:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
    4892:	f400 50f8 	and.w	r0, r0, #7936	; 0x1f00
    4896:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
    489a:	ea40 000e 	orr.w	r0, r0, lr
    489e:	f041 0120 	orr.w	r1, r1, #32
    48a2:	f823 1016 	strh.w	r1, [r3, r6, lsl #1]
    48a6:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
    48aa:	e7b9      	b.n	4820 <nrfx_gpiote_input_configure+0x68>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    48ac:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
    48b0:	4620      	mov	r0, r4
    48b2:	f7ff ff3b 	bl	472c <release_handler>
    if (!handler)
    48b6:	2e00      	cmp	r6, #0
    48b8:	d0bc      	beq.n	4834 <nrfx_gpiote_input_configure+0x7c>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    48ba:	4d11      	ldr	r5, [pc, #68]	; (4900 <nrfx_gpiote_input_configure+0x148>)
    48bc:	e9d5 2300 	ldrd	r2, r3, [r5]
    48c0:	4296      	cmp	r6, r2
    48c2:	d101      	bne.n	48c8 <nrfx_gpiote_input_configure+0x110>
    48c4:	429f      	cmp	r7, r3
    48c6:	d019      	beq.n	48fc <nrfx_gpiote_input_configure+0x144>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    48c8:	4811      	ldr	r0, [pc, #68]	; (4910 <nrfx_gpiote_input_configure+0x158>)
    48ca:	f10d 0107 	add.w	r1, sp, #7
    48ce:	f7ff fdc5 	bl	445c <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    48d2:	4b0d      	ldr	r3, [pc, #52]	; (4908 <nrfx_gpiote_input_configure+0x150>)
    48d4:	4298      	cmp	r0, r3
    48d6:	f47f af7f 	bne.w	47d8 <nrfx_gpiote_input_configure+0x20>
        handler_id = (int32_t)id;
    48da:	f89d 2007 	ldrb.w	r2, [sp, #7]
    m_cb.handlers[handler_id].handler = handler;
    48de:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
    48e2:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    48e6:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
    48e8:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    48ea:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    48ee:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
    48f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    48f6:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    return NRFX_SUCCESS;
    48fa:	e79b      	b.n	4834 <nrfx_gpiote_input_configure+0x7c>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    48fc:	2200      	movs	r2, #0
    48fe:	e7ee      	b.n	48de <nrfx_gpiote_input_configure+0x126>
    4900:	200000c0 	.word	0x200000c0
    4904:	0bad0004 	.word	0x0bad0004
    4908:	0bad0000 	.word	0x0bad0000
    490c:	40006000 	.word	0x40006000
    4910:	20000114 	.word	0x20000114

00004914 <nrfx_gpiote_output_configure>:
{
    4914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4916:	4604      	mov	r4, r0
    if (p_config)
    4918:	b389      	cbz	r1, 497e <nrfx_gpiote_output_configure+0x6a>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    491a:	4e3a      	ldr	r6, [pc, #232]	; (4a04 <nrfx_gpiote_output_configure+0xf0>)
    491c:	f100 0708 	add.w	r7, r0, #8
    4920:	f836 5017 	ldrh.w	r5, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    4924:	07ab      	lsls	r3, r5, #30
    4926:	d404      	bmi.n	4932 <nrfx_gpiote_output_configure+0x1e>
    4928:	f7ff fed8 	bl	46dc <pin_in_use_by_te>
    492c:	b108      	cbz	r0, 4932 <nrfx_gpiote_output_configure+0x1e>
{
    492e:	4836      	ldr	r0, [pc, #216]	; (4a08 <nrfx_gpiote_output_configure+0xf4>)
}
    4930:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    4932:	f015 0f1c 	tst.w	r5, #28
    4936:	784b      	ldrb	r3, [r1, #1]
    4938:	d124      	bne.n	4984 <nrfx_gpiote_output_configure+0x70>
    *p_pin = pin_number & 0x1F;
    493a:	f004 001f 	and.w	r0, r4, #31
    uint32_t cnf = reg->PIN_CNF[pin_number];
    493e:	f500 7ee0 	add.w	lr, r0, #448	; 0x1c0
    4942:	f04f 4ca0 	mov.w	ip, #1342177280	; 0x50000000
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    4946:	005b      	lsls	r3, r3, #1
    uint32_t cnf = reg->PIN_CNF[pin_number];
    4948:	f85c c02e 	ldr.w	ip, [ip, lr, lsl #2]
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    494c:	f891 e002 	ldrb.w	lr, [r1, #2]
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    4950:	7809      	ldrb	r1, [r1, #0]
    cnf &= ~to_update;
    4952:	f42c 6ce1 	bic.w	ip, ip, #1800	; 0x708
    4956:	ea43 038e 	orr.w	r3, r3, lr, lsl #2
    495a:	f02c 0c07 	bic.w	ip, ip, #7
    495e:	ea43 030c 	orr.w	r3, r3, ip
    4962:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    reg->PIN_CNF[pin_number] = cnf;
    4966:	f500 70e0 	add.w	r0, r0, #448	; 0x1c0
    496a:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    496e:	f043 0301 	orr.w	r3, r3, #1
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    4972:	f045 0503 	orr.w	r5, r5, #3
    reg->PIN_CNF[pin_number] = cnf;
    4976:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
    497a:	f826 5017 	strh.w	r5, [r6, r7, lsl #1]
    if (p_task_config)
    497e:	b922      	cbnz	r2, 498a <nrfx_gpiote_output_configure+0x76>
    return NRFX_SUCCESS;
    4980:	4822      	ldr	r0, [pc, #136]	; (4a0c <nrfx_gpiote_output_configure+0xf8>)
    4982:	e7d5      	b.n	4930 <nrfx_gpiote_output_configure+0x1c>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    4984:	2b01      	cmp	r3, #1
    4986:	d1d8      	bne.n	493a <nrfx_gpiote_output_configure+0x26>
    4988:	e7d1      	b.n	492e <nrfx_gpiote_output_configure+0x1a>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    498a:	4e1e      	ldr	r6, [pc, #120]	; (4a04 <nrfx_gpiote_output_configure+0xf0>)
    498c:	f104 0708 	add.w	r7, r4, #8
    4990:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
    4994:	0783      	lsls	r3, r0, #30
    4996:	d5ca      	bpl.n	492e <nrfx_gpiote_output_configure+0x1a>
        uint32_t ch = p_task_config->task_ch;
    4998:	f892 c000 	ldrb.w	ip, [r2]
    p_reg->CONFIG[idx] = 0;
    499c:	4661      	mov	r1, ip
    499e:	0089      	lsls	r1, r1, #2
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    49a0:	f020 0020 	bic.w	r0, r0, #32
    49a4:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    49a8:	04c0      	lsls	r0, r0, #19
    49aa:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
    49ae:	0cc0      	lsrs	r0, r0, #19
    49b0:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    49b4:	2300      	movs	r3, #0
    49b6:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    49ba:	7855      	ldrb	r5, [r2, #1]
    49bc:	2d00      	cmp	r5, #0
    49be:	d0df      	beq.n	4980 <nrfx_gpiote_output_configure+0x6c>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    49c0:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
                                      p_task_config->init_val);
    49c4:	7892      	ldrb	r2, [r2, #2]
    49c6:	f423 1398 	bic.w	r3, r3, #1245184	; 0x130000
    49ca:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    49ce:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    49d2:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
    49d6:	0223      	lsls	r3, r4, #8
    49d8:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    49dc:	042d      	lsls	r5, r5, #16
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    49de:	ea43 030e 	orr.w	r3, r3, lr
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    49e2:	f405 3540 	and.w	r5, r5, #196608	; 0x30000
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    49e6:	0512      	lsls	r2, r2, #20
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    49e8:	432b      	orrs	r3, r5
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    49ea:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    49ee:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    49f2:	4313      	orrs	r3, r2
    49f4:	f040 0020 	orr.w	r0, r0, #32
    49f8:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    49fc:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    4a00:	e7be      	b.n	4980 <nrfx_gpiote_output_configure+0x6c>
    4a02:	bf00      	nop
    4a04:	200000c0 	.word	0x200000c0
    4a08:	0bad0004 	.word	0x0bad0004
    4a0c:	0bad0000 	.word	0x0bad0000

00004a10 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    4a10:	4b01      	ldr	r3, [pc, #4]	; (4a18 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
    4a12:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
    4a16:	4770      	bx	lr
    4a18:	200000c0 	.word	0x200000c0

00004a1c <nrfx_gpiote_channel_get>:
{
    4a1c:	b508      	push	{r3, lr}
    4a1e:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    4a20:	f7ff fe5c 	bl	46dc <pin_in_use_by_te>
    4a24:	b138      	cbz	r0, 4a36 <nrfx_gpiote_channel_get+0x1a>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    4a26:	4b05      	ldr	r3, [pc, #20]	; (4a3c <nrfx_gpiote_channel_get+0x20>)
        return NRFX_SUCCESS;
    4a28:	4805      	ldr	r0, [pc, #20]	; (4a40 <nrfx_gpiote_channel_get+0x24>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    4a2a:	3208      	adds	r2, #8
    4a2c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    4a30:	0b5b      	lsrs	r3, r3, #13
    4a32:	700b      	strb	r3, [r1, #0]
}
    4a34:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
    4a36:	4803      	ldr	r0, [pc, #12]	; (4a44 <nrfx_gpiote_channel_get+0x28>)
    4a38:	e7fc      	b.n	4a34 <nrfx_gpiote_channel_get+0x18>
    4a3a:	bf00      	nop
    4a3c:	200000c0 	.word	0x200000c0
    4a40:	0bad0000 	.word	0x0bad0000
    4a44:	0bad0004 	.word	0x0bad0004

00004a48 <nrfx_gpiote_init>:
{
    4a48:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    4a4a:	4c0f      	ldr	r4, [pc, #60]	; (4a88 <nrfx_gpiote_init+0x40>)
    4a4c:	f894 5058 	ldrb.w	r5, [r4, #88]	; 0x58
    4a50:	b9bd      	cbnz	r5, 4a82 <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    4a52:	2240      	movs	r2, #64	; 0x40
    4a54:	4629      	mov	r1, r5
    4a56:	f104 0010 	add.w	r0, r4, #16
    4a5a:	f002 f992 	bl	6d82 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    4a5e:	2006      	movs	r0, #6
    4a60:	f7fd f864 	bl	1b2c <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    4a64:	4b09      	ldr	r3, [pc, #36]	; (4a8c <nrfx_gpiote_init+0x44>)
    return err_code;
    4a66:	480a      	ldr	r0, [pc, #40]	; (4a90 <nrfx_gpiote_init+0x48>)
    4a68:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
    4a6c:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
    4a70:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    4a74:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    4a78:	2301      	movs	r3, #1
    4a7a:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    4a7e:	6563      	str	r3, [r4, #84]	; 0x54
}
    4a80:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
    4a82:	4804      	ldr	r0, [pc, #16]	; (4a94 <nrfx_gpiote_init+0x4c>)
    4a84:	e7fc      	b.n	4a80 <nrfx_gpiote_init+0x38>
    4a86:	bf00      	nop
    4a88:	200000c0 	.word	0x200000c0
    4a8c:	40006000 	.word	0x40006000
    4a90:	0bad0000 	.word	0x0bad0000
    4a94:	0bad0005 	.word	0x0bad0005

00004a98 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    4a98:	4b03      	ldr	r3, [pc, #12]	; (4aa8 <nrfx_gpiote_is_init+0x10>)
    4a9a:	f893 0058 	ldrb.w	r0, [r3, #88]	; 0x58
}
    4a9e:	3800      	subs	r0, #0
    4aa0:	bf18      	it	ne
    4aa2:	2001      	movne	r0, #1
    4aa4:	4770      	bx	lr
    4aa6:	bf00      	nop
    4aa8:	200000c0 	.word	0x200000c0

00004aac <nrfx_gpiote_channel_free>:
{
    4aac:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    4aae:	4801      	ldr	r0, [pc, #4]	; (4ab4 <nrfx_gpiote_channel_free+0x8>)
    4ab0:	f7ff bcf4 	b.w	449c <nrfx_flag32_free>
    4ab4:	20000110 	.word	0x20000110

00004ab8 <nrfx_gpiote_channel_alloc>:
{
    4ab8:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    4aba:	4801      	ldr	r0, [pc, #4]	; (4ac0 <nrfx_gpiote_channel_alloc+0x8>)
    4abc:	f7ff bcce 	b.w	445c <nrfx_flag32_alloc>
    4ac0:	20000110 	.word	0x20000110

00004ac4 <nrfx_gpiote_trigger_enable>:
{
    4ac4:	b510      	push	{r4, lr}
    4ac6:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    4ac8:	f7ff fe08 	bl	46dc <pin_in_use_by_te>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    4acc:	f102 0408 	add.w	r4, r2, #8
    4ad0:	4b1c      	ldr	r3, [pc, #112]	; (4b44 <nrfx_gpiote_trigger_enable+0x80>)
    4ad2:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    4ad6:	b1e0      	cbz	r0, 4b12 <nrfx_gpiote_trigger_enable+0x4e>
    4ad8:	f013 0402 	ands.w	r4, r3, #2
    4adc:	d119      	bne.n	4b12 <nrfx_gpiote_trigger_enable+0x4e>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    4ade:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    4ae0:	009a      	lsls	r2, r3, #2
    return ((uint32_t)p_reg + event);
    4ae2:	f102 4080 	add.w	r0, r2, #1073741824	; 0x40000000
    4ae6:	f500 40c2 	add.w	r0, r0, #24832	; 0x6100
    4aea:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    4aee:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    4af2:	6004      	str	r4, [r0, #0]
    4af4:	6800      	ldr	r0, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    4af6:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    4afa:	f040 0001 	orr.w	r0, r0, #1
    4afe:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
    4b02:	b129      	cbz	r1, 4b10 <nrfx_gpiote_trigger_enable+0x4c>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    4b04:	2201      	movs	r2, #1
    4b06:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
    4b0a:	4a0f      	ldr	r2, [pc, #60]	; (4b48 <nrfx_gpiote_trigger_enable+0x84>)
    4b0c:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    4b10:	bd10      	pop	{r4, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    4b12:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    4b16:	2b04      	cmp	r3, #4
    4b18:	d010      	beq.n	4b3c <nrfx_gpiote_trigger_enable+0x78>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    4b1a:	2b05      	cmp	r3, #5
    4b1c:	d010      	beq.n	4b40 <nrfx_gpiote_trigger_enable+0x7c>
    return p_reg->IN;
    4b1e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    4b22:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
    *p_pin = pin_number & 0x1F;
    4b26:	f002 031f 	and.w	r3, r2, #31
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    4b2a:	40d9      	lsrs	r1, r3
    4b2c:	f001 0101 	and.w	r1, r1, #1
    4b30:	3102      	adds	r1, #2
}
    4b32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    4b36:	4610      	mov	r0, r2
    4b38:	f004 ba8a 	b.w	9050 <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    4b3c:	2103      	movs	r1, #3
    4b3e:	e7f8      	b.n	4b32 <nrfx_gpiote_trigger_enable+0x6e>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    4b40:	2102      	movs	r1, #2
    4b42:	e7f6      	b.n	4b32 <nrfx_gpiote_trigger_enable+0x6e>
    4b44:	200000c0 	.word	0x200000c0
    4b48:	40006000 	.word	0x40006000

00004b4c <nrfx_gpiote_trigger_disable>:
{
    4b4c:	b508      	push	{r3, lr}
    4b4e:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    4b50:	f7ff fdc4 	bl	46dc <pin_in_use_by_te>
    4b54:	b1c0      	cbz	r0, 4b88 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    4b56:	f102 0108 	add.w	r1, r2, #8
    4b5a:	4b0e      	ldr	r3, [pc, #56]	; (4b94 <nrfx_gpiote_trigger_disable+0x48>)
    4b5c:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    4b60:	0799      	lsls	r1, r3, #30
    4b62:	d411      	bmi.n	4b88 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    4b64:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    4b66:	2201      	movs	r2, #1
    4b68:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
    4b6a:	009b      	lsls	r3, r3, #2
    4b6c:	490a      	ldr	r1, [pc, #40]	; (4b98 <nrfx_gpiote_trigger_disable+0x4c>)
    4b6e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    4b72:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    4b76:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    4b7a:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    4b7e:	f022 0203 	bic.w	r2, r2, #3
    4b82:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
    4b86:	bd08      	pop	{r3, pc}
    4b88:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    4b8c:	2100      	movs	r1, #0
    4b8e:	4610      	mov	r0, r2
    4b90:	f004 ba5e 	b.w	9050 <nrf_gpio_cfg_sense_set>
    4b94:	200000c0 	.word	0x200000c0
    4b98:	40006000 	.word	0x40006000

00004b9c <nrfx_gpiote_pin_uninit>:
{
    4b9c:	b510      	push	{r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    4b9e:	4b0d      	ldr	r3, [pc, #52]	; (4bd4 <nrfx_gpiote_pin_uninit+0x38>)
    4ba0:	f100 0208 	add.w	r2, r0, #8
{
    4ba4:	4604      	mov	r4, r0
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    4ba6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
    4baa:	07db      	lsls	r3, r3, #31
    4bac:	d50f      	bpl.n	4bce <nrfx_gpiote_pin_uninit+0x32>
    nrfx_gpiote_trigger_disable(pin);
    4bae:	f7ff ffcd 	bl	4b4c <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    4bb2:	4620      	mov	r0, r4
    *p_pin = pin_number & 0x1F;
    4bb4:	f004 041f 	and.w	r4, r4, #31
    4bb8:	f7ff fde2 	bl	4780 <pin_handler_trigger_uninit>
    reg->PIN_CNF[pin_number] = cnf;
    4bbc:	f504 74e0 	add.w	r4, r4, #448	; 0x1c0
    4bc0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    4bc4:	2202      	movs	r2, #2
    4bc6:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
    4bca:	4803      	ldr	r0, [pc, #12]	; (4bd8 <nrfx_gpiote_pin_uninit+0x3c>)
}
    4bcc:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    4bce:	4803      	ldr	r0, [pc, #12]	; (4bdc <nrfx_gpiote_pin_uninit+0x40>)
    4bd0:	e7fc      	b.n	4bcc <nrfx_gpiote_pin_uninit+0x30>
    4bd2:	bf00      	nop
    4bd4:	200000c0 	.word	0x200000c0
    4bd8:	0bad0000 	.word	0x0bad0000
    4bdc:	0bad0004 	.word	0x0bad0004

00004be0 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
    4be0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4be4:	4b4f      	ldr	r3, [pc, #316]	; (4d24 <nrfx_gpiote_irq_handler+0x144>)
    return p_reg->INTENSET & mask;
    4be6:	4850      	ldr	r0, [pc, #320]	; (4d28 <nrfx_gpiote_irq_handler+0x148>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    4be8:	4950      	ldr	r1, [pc, #320]	; (4d2c <nrfx_gpiote_irq_handler+0x14c>)
    uint32_t status = 0;
    4bea:	2500      	movs	r5, #0
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    4bec:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    4bee:	462c      	mov	r4, r5
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4bf0:	681e      	ldr	r6, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    4bf2:	b136      	cbz	r6, 4c02 <nrfx_gpiote_irq_handler+0x22>
    return p_reg->INTENSET & mask;
    4bf4:	f8d0 6304 	ldr.w	r6, [r0, #772]	; 0x304
    4bf8:	4216      	tst	r6, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    4bfa:	bf1e      	ittt	ne
    4bfc:	601c      	strne	r4, [r3, #0]
    4bfe:	681e      	ldrne	r6, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
    4c00:	4315      	orrne	r5, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    4c02:	3304      	adds	r3, #4
    4c04:	428b      	cmp	r3, r1
        }
        mask <<= 1;
    4c06:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    4c0a:	d1f1      	bne.n	4bf0 <nrfx_gpiote_irq_handler+0x10>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4c0c:	4b46      	ldr	r3, [pc, #280]	; (4d28 <nrfx_gpiote_irq_handler+0x148>)
    4c0e:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    4c12:	b1bb      	cbz	r3, 4c44 <nrfx_gpiote_irq_handler+0x64>
        *p_masks = gpio_regs[i]->LATCH;
    4c14:	f04f 46a0 	mov.w	r6, #1342177280	; 0x50000000
    4c18:	f8d6 3520 	ldr.w	r3, [r6, #1312]	; 0x520
    4c1c:	9301      	str	r3, [sp, #4]
        gpio_regs[i]->LATCH = *p_masks;
    4c1e:	f8c6 3520 	str.w	r3, [r6, #1312]	; 0x520
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
    4c22:	af01      	add	r7, sp, #4
    4c24:	f04f 0801 	mov.w	r8, #1
            while (latch[i])
    4c28:	9c01      	ldr	r4, [sp, #4]
    4c2a:	b98c      	cbnz	r4, 4c50 <nrfx_gpiote_irq_handler+0x70>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    4c2c:	4b3e      	ldr	r3, [pc, #248]	; (4d28 <nrfx_gpiote_irq_handler+0x148>)
    4c2e:	f8c3 417c 	str.w	r4, [r3, #380]	; 0x17c
    4c32:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
        *p_masks = gpio_regs[i]->LATCH;
    4c36:	f8d6 3520 	ldr.w	r3, [r6, #1312]	; 0x520
    4c3a:	9301      	str	r3, [sp, #4]
        gpio_regs[i]->LATCH = *p_masks;
    4c3c:	f8c6 3520 	str.w	r3, [r6, #1312]	; 0x520
        if (latch[port_idx])
    4c40:	2b00      	cmp	r3, #0
    4c42:	d1ee      	bne.n	4c22 <nrfx_gpiote_irq_handler+0x42>
        mask &= ~NRFX_BIT(ch);
    4c44:	2401      	movs	r4, #1
    while (mask)
    4c46:	2d00      	cmp	r5, #0
    4c48:	d153      	bne.n	4cf2 <nrfx_gpiote_irq_handler+0x112>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
    4c4a:	b003      	add	sp, #12
    4c4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                uint32_t pin = NRF_CTZ(latch[i]);
    4c50:	fa94 f4a4 	rbit	r4, r4
    4c54:	fab4 f484 	clz	r4, r4
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    4c58:	4a35      	ldr	r2, [pc, #212]	; (4d30 <nrfx_gpiote_irq_handler+0x150>)
    4c5a:	f104 0308 	add.w	r3, r4, #8
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    4c5e:	08e0      	lsrs	r0, r4, #3
    4c60:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
    p_mask8[byte_idx] &= ~(1 << bit);
    4c64:	5c3b      	ldrb	r3, [r7, r0]
    bit = BITMASK_RELBIT_GET(bit);
    4c66:	f004 0207 	and.w	r2, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    4c6a:	fa08 f202 	lsl.w	r2, r8, r2
    4c6e:	ea23 0302 	bic.w	r3, r3, r2
    4c72:	543b      	strb	r3, [r7, r0]
    4c74:	00a3      	lsls	r3, r4, #2
    4c76:	f103 49a0 	add.w	r9, r3, #1342177280	; 0x50000000
    4c7a:	f3c1 0a82 	ubfx	sl, r1, #2, #3
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    4c7e:	f8d9 2700 	ldr.w	r2, [r9, #1792]	; 0x700
    if (is_level(trigger))
    4c82:	06cb      	lsls	r3, r1, #27
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    4c84:	46d3      	mov	fp, sl
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
    4c86:	f3c2 4201 	ubfx	r2, r2, #16, #2
    if (is_level(trigger))
    4c8a:	d518      	bpl.n	4cbe <nrfx_gpiote_irq_handler+0xde>
        call_handler(pin, trigger);
    4c8c:	4659      	mov	r1, fp
    4c8e:	4620      	mov	r0, r4
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    4c90:	fa5f fa82 	uxtb.w	sl, r2
    4c94:	f7ff fd2c 	bl	46f0 <call_handler>
    4c98:	f8d9 3700 	ldr.w	r3, [r9, #1792]	; 0x700
        if (nrf_gpio_pin_sense_get(pin) == sense)
    4c9c:	f3c3 4301 	ubfx	r3, r3, #16, #2
    4ca0:	459a      	cmp	sl, r3
    4ca2:	d107      	bne.n	4cb4 <nrfx_gpiote_irq_handler+0xd4>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    4ca4:	2100      	movs	r1, #0
    4ca6:	4620      	mov	r0, r4
    4ca8:	f004 f9d2 	bl	9050 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
    4cac:	4651      	mov	r1, sl
    4cae:	4620      	mov	r0, r4
    4cb0:	f004 f9ce 	bl	9050 <nrf_gpio_cfg_sense_set>
    reg->LATCH = (1 << pin_number);
    4cb4:	fa08 f404 	lsl.w	r4, r8, r4
    4cb8:	f8c6 4520 	str.w	r4, [r6, #1312]	; 0x520
}
    4cbc:	e7b4      	b.n	4c28 <nrfx_gpiote_irq_handler+0x48>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    4cbe:	2a02      	cmp	r2, #2
    4cc0:	d10c      	bne.n	4cdc <nrfx_gpiote_irq_handler+0xfc>
        nrf_gpio_cfg_sense_set(pin, next_sense);
    4cc2:	2103      	movs	r1, #3
    4cc4:	4620      	mov	r0, r4
    4cc6:	f004 f9c3 	bl	9050 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    4cca:	f00a 0305 	and.w	r3, sl, #5
    4cce:	2b01      	cmp	r3, #1
    4cd0:	d1f0      	bne.n	4cb4 <nrfx_gpiote_irq_handler+0xd4>
            call_handler(pin, trigger);
    4cd2:	4659      	mov	r1, fp
    4cd4:	4620      	mov	r0, r4
    4cd6:	f7ff fd0b 	bl	46f0 <call_handler>
    4cda:	e7eb      	b.n	4cb4 <nrfx_gpiote_irq_handler+0xd4>
        nrf_gpio_cfg_sense_set(pin, next_sense);
    4cdc:	2102      	movs	r1, #2
    4cde:	4620      	mov	r0, r4
    4ce0:	f004 f9b6 	bl	9050 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    4ce4:	f1ba 0f03 	cmp.w	sl, #3
    4ce8:	d0f3      	beq.n	4cd2 <nrfx_gpiote_irq_handler+0xf2>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    4cea:	2a03      	cmp	r2, #3
    4cec:	d1e2      	bne.n	4cb4 <nrfx_gpiote_irq_handler+0xd4>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    4cee:	458a      	cmp	sl, r1
    4cf0:	e7ee      	b.n	4cd0 <nrfx_gpiote_irq_handler+0xf0>
        uint32_t ch = NRF_CTZ(mask);
    4cf2:	fa95 f3a5 	rbit	r3, r5
    4cf6:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    4cfa:	fa04 f203 	lsl.w	r2, r4, r3
    4cfe:	009b      	lsls	r3, r3, #2
    4d00:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    4d04:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    4d08:	ea25 0502 	bic.w	r5, r5, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    4d0c:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    4d10:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    4d14:	f3c0 2004 	ubfx	r0, r0, #8, #5
    4d18:	f3c1 4101 	ubfx	r1, r1, #16, #2
    4d1c:	f7ff fce8 	bl	46f0 <call_handler>
    4d20:	e791      	b.n	4c46 <nrfx_gpiote_irq_handler+0x66>
    4d22:	bf00      	nop
    4d24:	40006100 	.word	0x40006100
    4d28:	40006000 	.word	0x40006000
    4d2c:	40006120 	.word	0x40006120
    4d30:	200000c0 	.word	0x200000c0

00004d34 <nvmc_word_write>:
    4d34:	4a04      	ldr	r2, [pc, #16]	; (4d48 <nvmc_word_write+0x14>)
    4d36:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
{
#if defined(NRF9160_XXAA)
    while (!nrf_nvmc_write_ready_check(NRF_NVMC))
    {}
#else
    while (!nrf_nvmc_ready_check(NRF_NVMC))
    4d3a:	07db      	lsls	r3, r3, #31
    4d3c:	d5fb      	bpl.n	4d36 <nvmc_word_write+0x2>
    {}
#endif

    *(volatile uint32_t *)addr = value;
    4d3e:	6001      	str	r1, [r0, #0]
  __ASM volatile ("dmb 0xF":::"memory");
    4d40:	f3bf 8f5f 	dmb	sy
    __DMB();
}
    4d44:	4770      	bx	lr
    4d46:	bf00      	nop
    4d48:	4001e000 	.word	0x4001e000

00004d4c <nrfx_nvmc_page_erase>:
NRF_STATIC_INLINE uint32_t nrf_ficr_codepagesize_get(NRF_FICR_Type const * p_reg)
{
#if defined(FICR_INFO_CODEPAGESIZE_CODEPAGESIZE_Msk)
    return p_reg->INFO.CODEPAGESIZE;
#else
    return p_reg->CODEPAGESIZE;
    4d4c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    4d50:	691a      	ldr	r2, [r3, #16]
    return !(addr % flash_page_size_get());
    4d52:	fbb0 f3f2 	udiv	r3, r0, r2
    4d56:	fb02 0313 	mls	r3, r2, r3, r0

nrfx_err_t nrfx_nvmc_page_erase(uint32_t addr)
{
    NRFX_ASSERT(is_valid_address(addr, false));

    if (!is_page_aligned_check(addr))
    4d5a:	b973      	cbnz	r3, 4d7a <nrfx_nvmc_page_erase+0x2e>
#endif

NRF_STATIC_INLINE void nrf_nvmc_mode_set(NRF_NVMC_Type * p_reg,
                                         nrf_nvmc_mode_t mode)
{
    p_reg->CONFIG = (uint32_t)mode;
    4d5c:	4b08      	ldr	r3, [pc, #32]	; (4d80 <nrfx_nvmc_page_erase+0x34>)
    4d5e:	2202      	movs	r2, #2
    4d60:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    else
    {
        p_reg->ERASEPCR1 = page_addr;
    }
#elif defined(NRF52_SERIES)
    p_reg->ERASEPAGE = page_addr;
    4d64:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
    4d68:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        return NRFX_ERROR_INVALID_ADDR;
    }

    nvmc_erase_mode_set();
    nrf_nvmc_page_erase_start(NRF_NVMC, addr);
    while (!nrf_nvmc_ready_check(NRF_NVMC))
    4d6c:	07d2      	lsls	r2, r2, #31
    4d6e:	d5fb      	bpl.n	4d68 <nrfx_nvmc_page_erase+0x1c>
    p_reg->CONFIG = (uint32_t)mode;
    4d70:	2200      	movs	r2, #0
    {}
    nvmc_readonly_mode_set();

    return NRFX_SUCCESS;
    4d72:	4804      	ldr	r0, [pc, #16]	; (4d84 <nrfx_nvmc_page_erase+0x38>)
    4d74:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    4d78:	4770      	bx	lr
        return NRFX_ERROR_INVALID_ADDR;
    4d7a:	4803      	ldr	r0, [pc, #12]	; (4d88 <nrfx_nvmc_page_erase+0x3c>)
}
    4d7c:	4770      	bx	lr
    4d7e:	bf00      	nop
    4d80:	4001e000 	.word	0x4001e000
    4d84:	0bad0000 	.word	0x0bad0000
    4d88:	0bad000a 	.word	0x0bad000a

00004d8c <nrfx_nvmc_word_write>:

    nrfx_nvmc_word_write(aligned_addr, partial_word_create(addr, (const uint8_t *)&value, 2));
}

void nrfx_nvmc_word_write(uint32_t addr, uint32_t value)
{
    4d8c:	b510      	push	{r4, lr}
    4d8e:	4c05      	ldr	r4, [pc, #20]	; (4da4 <nrfx_nvmc_word_write+0x18>)
    4d90:	2301      	movs	r3, #1
    4d92:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
    NRFX_ASSERT(is_valid_address(addr, true));
    NRFX_ASSERT(nrfx_is_word_aligned((void const *)addr));

    nvmc_write_mode_set();

    nvmc_word_write(addr, value);
    4d96:	f7ff ffcd 	bl	4d34 <nvmc_word_write>
    4d9a:	2300      	movs	r3, #0
    4d9c:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504

    nvmc_readonly_mode_set();
}
    4da0:	bd10      	pop	{r4, pc}
    4da2:	bf00      	nop
    4da4:	4001e000 	.word	0x4001e000

00004da8 <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
    4da8:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
    4daa:	4801      	ldr	r0, [pc, #4]	; (4db0 <nrfx_ppi_channel_alloc+0x8>)
    4dac:	f7ff bb56 	b.w	445c <nrfx_flag32_alloc>
    4db0:	2000011c 	.word	0x2000011c

00004db4 <twim_irq_handler>:
{
    return nrf_twim_event_address_get(p_instance->p_twim, NRF_TWIM_EVENT_STOPPED);
}

static void twim_irq_handler(NRF_TWIM_Type * p_twim, twim_control_block_t * p_cb)
{
    4db4:	b5f0      	push	{r4, r5, r6, r7, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4db6:	f8d0 3124 	ldr.w	r3, [r0, #292]	; 0x124
    4dba:	b087      	sub	sp, #28
    4dbc:	4604      	mov	r4, r0
    4dbe:	460d      	mov	r5, r1
    }
#endif

    NRFX_ASSERT(p_cb->handler);

    if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_ERROR))
    4dc0:	b1f3      	cbz	r3, 4e00 <twim_irq_handler+0x4c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4dc2:	2300      	movs	r3, #0
    4dc4:	f8c0 3124 	str.w	r3, [r0, #292]	; 0x124
    4dc8:	f8d0 3124 	ldr.w	r3, [r0, #292]	; 0x124
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4dcc:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
    {
        nrf_twim_event_clear(p_twim, NRF_TWIM_EVENT_ERROR);
        NRFX_LOG_DEBUG("TWIM: Event: %s.", EVT_TO_STR_TWIM(NRF_TWIM_EVENT_ERROR));
        if (!nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
    4dd0:	b9b3      	cbnz	r3, 4e00 <twim_irq_handler+0x4c>
        {
            nrf_twim_int_disable(p_twim, p_cb->int_mask);
    4dd2:	688b      	ldr	r3, [r1, #8]
    p_reg->INTENCLR = mask;
    4dd4:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
    4dd8:	2302      	movs	r3, #2
    4dda:	608b      	str	r3, [r1, #8]
            nrf_twim_int_enable(p_twim, p_cb->int_mask);
    4ddc:	688b      	ldr	r3, [r1, #8]
    p_reg->INTENSET = mask;
    4dde:	f8c0 3304 	str.w	r3, [r0, #772]	; 0x304
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4de2:	f8d0 3160 	ldr.w	r3, [r0, #352]	; 0x160

            if (!(nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_LASTTX) &&
    4de6:	b11b      	cbz	r3, 4df0 <twim_irq_handler+0x3c>
    p_reg->SHORTS = mask;
}

NRF_STATIC_INLINE uint32_t nrf_twim_shorts_get(NRF_TWIM_Type const * p_reg)
{
    return p_reg->SHORTS;
    4de8:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
    4dec:	059f      	lsls	r7, r3, #22
    4dee:	d402      	bmi.n	4df6 <twim_irq_handler+0x42>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4df0:	2301      	movs	r3, #1
    4df2:	6223      	str	r3, [r4, #32]
    4df4:	6163      	str	r3, [r4, #20]
            {
                nrf_twim_task_trigger(p_twim, NRF_TWIM_TASK_RESUME);
                nrf_twim_task_trigger(p_twim, NRF_TWIM_TASK_STOP);
            }

            p_cb->error = true;
    4df6:	2301      	movs	r3, #1
    4df8:	f885 302e 	strb.w	r3, [r5, #46]	; 0x2e

    if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER) || p_cb->error)
    {
        p_cb->handler(&event, p_cb->p_context);
    }
}
    4dfc:	b007      	add	sp, #28
    4dfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4e00:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
    4e04:	2b00      	cmp	r3, #0
    4e06:	d041      	beq.n	4e8c <twim_irq_handler+0xd8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4e08:	2300      	movs	r3, #0
    4e0a:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    4e0e:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
        if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK) && !p_cb->error)
    4e12:	6a2b      	ldr	r3, [r5, #32]
    4e14:	065e      	lsls	r6, r3, #25
    4e16:	d40a      	bmi.n	4e2e <twim_irq_handler+0x7a>
    4e18:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
    4e1c:	b93b      	cbnz	r3, 4e2e <twim_irq_handler+0x7a>
            p_cb->error = !xfer_completeness_check(p_twim, p_cb);
    4e1e:	4629      	mov	r1, r5
    4e20:	4620      	mov	r0, r4
    4e22:	f004 f931 	bl	9088 <xfer_completeness_check>
    4e26:	f080 0001 	eor.w	r0, r0, #1
    4e2a:	f885 002e 	strb.w	r0, [r5, #46]	; 0x2e
        if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER))
    4e2e:	6a2b      	ldr	r3, [r5, #32]
    4e30:	f013 0c04 	ands.w	ip, r3, #4
    4e34:	d13b      	bne.n	4eae <twim_irq_handler+0xfa>
            event.xfer_desc = p_cb->xfer_desc;
    4e36:	f105 070c 	add.w	r7, r5, #12
    4e3a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    4e3c:	ae01      	add	r6, sp, #4
    4e3e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    4e40:	683b      	ldr	r3, [r7, #0]
    4e42:	f8c4 c160 	str.w	ip, [r4, #352]	; 0x160
    4e46:	6033      	str	r3, [r6, #0]
    4e48:	f8d4 3160 	ldr.w	r3, [r4, #352]	; 0x160
    4e4c:	f8c4 c15c 	str.w	ip, [r4, #348]	; 0x15c
    4e50:	f8d4 315c 	ldr.w	r3, [r4, #348]	; 0x15c
            if (!p_cb->repeated || p_cb->error)
    4e54:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
    4e58:	b113      	cbz	r3, 4e60 <twim_irq_handler+0xac>
    4e5a:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
    4e5e:	b333      	cbz	r3, 4eae <twim_irq_handler+0xfa>
    p_reg->SHORTS = mask;
    4e60:	2300      	movs	r3, #0
    4e62:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
                p_cb->int_mask = 0;
    4e66:	60ab      	str	r3, [r5, #8]
    p_reg->INTENCLR = mask;
    4e68:	4b2d      	ldr	r3, [pc, #180]	; (4f20 <twim_irq_handler+0x16c>)
    4e6a:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    return ((((uint32_t)p_object) & 0x3u) == 0u);
}

NRF_STATIC_INLINE IRQn_Type nrfx_get_irq_number(void const * p_reg)
{
    return (IRQn_Type)NRFX_IRQ_NUMBER_GET(p_reg);
    4e6e:	f344 3307 	sbfx	r3, r4, #12, #8
  if ((int32_t)(IRQn) >= 0)
    4e72:	2b00      	cmp	r3, #0
    4e74:	db1b      	blt.n	4eae <twim_irq_handler+0xfa>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4e76:	095a      	lsrs	r2, r3, #5
    4e78:	2101      	movs	r1, #1
    4e7a:	f003 031f 	and.w	r3, r3, #31
    4e7e:	4099      	lsls	r1, r3
    4e80:	f102 0360 	add.w	r3, r2, #96	; 0x60
    4e84:	4a27      	ldr	r2, [pc, #156]	; (4f24 <twim_irq_handler+0x170>)
    4e86:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
    4e8a:	e010      	b.n	4eae <twim_irq_handler+0xfa>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4e8c:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
    4e90:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
        if (p_cb->xfer_desc.type == NRFX_TWIM_XFER_TX)
    4e94:	7b2b      	ldrb	r3, [r5, #12]
    4e96:	bb5b      	cbnz	r3, 4ef0 <twim_irq_handler+0x13c>
            event.xfer_desc = p_cb->xfer_desc;
    4e98:	f105 070c 	add.w	r7, r5, #12
    4e9c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    4e9e:	ae01      	add	r6, sp, #4
    4ea0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    4ea2:	683b      	ldr	r3, [r7, #0]
    4ea4:	6033      	str	r3, [r6, #0]
            if (!p_cb->repeated)
    4ea6:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
    4eaa:	2b00      	cmp	r3, #0
    4eac:	d0d9      	beq.n	4e62 <twim_irq_handler+0xae>
    uint32_t error_source = p_reg->ERRORSRC;
    4eae:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
    4eb2:	f8c4 34c4 	str.w	r3, [r4, #1220]	; 0x4c4
    if (errorsrc & NRF_TWIM_ERROR_ADDRESS_NACK)
    4eb6:	0798      	lsls	r0, r3, #30
    4eb8:	d42c      	bmi.n	4f14 <twim_irq_handler+0x160>
    else if (errorsrc & NRF_TWIM_ERROR_DATA_NACK)
    4eba:	0759      	lsls	r1, r3, #29
    4ebc:	d42c      	bmi.n	4f18 <twim_irq_handler+0x164>
    else if (errorsrc & NRF_TWIM_ERROR_OVERRUN)
    4ebe:	07da      	lsls	r2, r3, #31
    4ec0:	d42c      	bmi.n	4f1c <twim_irq_handler+0x168>
    else if (p_cb->error)
    4ec2:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
    4ec6:	009b      	lsls	r3, r3, #2
    4ec8:	b2db      	uxtb	r3, r3
        event.type = NRFX_TWIM_EVT_ADDRESS_NACK;
    4eca:	f88d 3000 	strb.w	r3, [sp]
    if (!p_cb->repeated)
    4ece:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
    4ed2:	b90b      	cbnz	r3, 4ed8 <twim_irq_handler+0x124>
        p_cb->busy = false;
    4ed4:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f
    if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER) || p_cb->error)
    4ed8:	6a2b      	ldr	r3, [r5, #32]
    4eda:	075b      	lsls	r3, r3, #29
    4edc:	d503      	bpl.n	4ee6 <twim_irq_handler+0x132>
    4ede:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
    4ee2:	2b00      	cmp	r3, #0
    4ee4:	d08a      	beq.n	4dfc <twim_irq_handler+0x48>
        p_cb->handler(&event, p_cb->p_context);
    4ee6:	e9d5 3100 	ldrd	r3, r1, [r5]
    4eea:	4668      	mov	r0, sp
    4eec:	4798      	blx	r3
    4eee:	e785      	b.n	4dfc <twim_irq_handler+0x48>
    p_reg->SHORTS = mask;
    4ef0:	f44f 7300 	mov.w	r3, #512	; 0x200
    4ef4:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK | NRF_TWIM_INT_ERROR_MASK;
    4ef8:	f240 2302 	movw	r3, #514	; 0x202
    4efc:	60ab      	str	r3, [r5, #8]
    p_reg->INTENCLR = mask;
    4efe:	f103 73ce 	add.w	r3, r3, #27000832	; 0x19c0000
    4f02:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
            nrf_twim_int_enable(p_twim, p_cb->int_mask);
    4f06:	68ab      	ldr	r3, [r5, #8]
    p_reg->INTENSET = mask;
    4f08:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4f0c:	2301      	movs	r3, #1
    4f0e:	60a3      	str	r3, [r4, #8]
    4f10:	6223      	str	r3, [r4, #32]
            return;
    4f12:	e773      	b.n	4dfc <twim_irq_handler+0x48>
    4f14:	2301      	movs	r3, #1
    4f16:	e7d8      	b.n	4eca <twim_irq_handler+0x116>
    4f18:	2302      	movs	r3, #2
    4f1a:	e7d6      	b.n	4eca <twim_irq_handler+0x116>
    4f1c:	2303      	movs	r3, #3
    4f1e:	e7d4      	b.n	4eca <twim_irq_handler+0x116>
    4f20:	019c0202 	.word	0x019c0202
    4f24:	e000e100 	.word	0xe000e100

00004f28 <nrfx_twim_init>:
{
    4f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    twim_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    4f2a:	7906      	ldrb	r6, [r0, #4]
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    4f2c:	4d24      	ldr	r5, [pc, #144]	; (4fc0 <nrfx_twim_init+0x98>)
    4f2e:	f04f 0e34 	mov.w	lr, #52	; 0x34
    4f32:	fb0e fe06 	mul.w	lr, lr, r6
    4f36:	eb05 040e 	add.w	r4, r5, lr
    4f3a:	f894 702d 	ldrb.w	r7, [r4, #45]	; 0x2d
    4f3e:	2f00      	cmp	r7, #0
    4f40:	d13c      	bne.n	4fbc <nrfx_twim_init+0x94>
    NRF_TWIM_Type * p_twim = p_instance->p_twim;
    4f42:	f8d0 c000 	ldr.w	ip, [r0]
    p_cb->handler         = event_handler;
    4f46:	f845 200e 	str.w	r2, [r5, lr]
    p_cb->int_mask        = 0;
    4f4a:	60a7      	str	r7, [r4, #8]
    p_cb->p_context       = p_context;
    4f4c:	6063      	str	r3, [r4, #4]
    p_cb->repeated        = false;
    4f4e:	f884 7030 	strb.w	r7, [r4, #48]	; 0x30
    p_cb->busy            = false;
    4f52:	f884 702f 	strb.w	r7, [r4, #47]	; 0x2f
    p_cb->hold_bus_uninit = p_config->hold_bus_uninit;
    4f56:	7b4b      	ldrb	r3, [r1, #13]
    4f58:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
    p_cb->skip_gpio_cfg   = p_config->skip_gpio_cfg;
    4f5c:	7b8b      	ldrb	r3, [r1, #14]
    4f5e:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
    if (p_config->skip_gpio_cfg && p_config->skip_psel_cfg)
    4f62:	b1c3      	cbz	r3, 4f96 <nrfx_twim_init+0x6e>
    4f64:	7bcb      	ldrb	r3, [r1, #15]
    4f66:	b92b      	cbnz	r3, 4f74 <nrfx_twim_init+0x4c>
        nrf_twim_pins_set(p_twim, p_config->scl, p_config->sda);
    4f68:	e9d1 4300 	ldrd	r4, r3, [r1]
    p_reg->PSEL.SCL = scl_pin;
    4f6c:	f8cc 4508 	str.w	r4, [ip, #1288]	; 0x508
    p_reg->PSEL.SDA = sda_pin;
    4f70:	f8cc 350c 	str.w	r3, [ip, #1292]	; 0x50c
    nrf_twim_frequency_set(p_twim, (nrf_twim_frequency_t)p_config->frequency);
    4f74:	688b      	ldr	r3, [r1, #8]
    p_reg->FREQUENCY = frequency;
    4f76:	f8cc 3524 	str.w	r3, [ip, #1316]	; 0x524
    if (p_cb->handler)
    4f7a:	b122      	cbz	r2, 4f86 <nrfx_twim_init+0x5e>
    4f7c:	6800      	ldr	r0, [r0, #0]
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_twim));
    4f7e:	f340 3007 	sbfx	r0, r0, #12, #8
    4f82:	f7fc fdd3 	bl	1b2c <arch_irq_enable>
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    4f86:	2334      	movs	r3, #52	; 0x34
    4f88:	fb03 5506 	mla	r5, r3, r6, r5
    return err_code;
    4f8c:	480d      	ldr	r0, [pc, #52]	; (4fc4 <nrfx_twim_init+0x9c>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    4f8e:	2301      	movs	r3, #1
    4f90:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
}
    4f94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    *p_pin = pin_number & 0x1F;
    4f96:	680b      	ldr	r3, [r1, #0]
    4f98:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
    4f9c:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
    4fa0:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    4fa4:	f240 670c 	movw	r7, #1548	; 0x60c
    4fa8:	f844 7023 	str.w	r7, [r4, r3, lsl #2]
    *p_pin = pin_number & 0x1F;
    4fac:	684b      	ldr	r3, [r1, #4]
    4fae:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
    4fb2:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    4fb6:	f844 7023 	str.w	r7, [r4, r3, lsl #2]
    if (!p_config->skip_psel_cfg)
    4fba:	e7d3      	b.n	4f64 <nrfx_twim_init+0x3c>
        return err_code;
    4fbc:	4802      	ldr	r0, [pc, #8]	; (4fc8 <nrfx_twim_init+0xa0>)
    4fbe:	e7e9      	b.n	4f94 <nrfx_twim_init+0x6c>
    4fc0:	2000108c 	.word	0x2000108c
    4fc4:	0bad0000 	.word	0x0bad0000
    4fc8:	0bad0005 	.word	0x0bad0005

00004fcc <nrfx_twim_enable>:
    nrf_twim_enable(p_instance->p_twim);
    4fcc:	6803      	ldr	r3, [r0, #0]
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    4fce:	7902      	ldrb	r2, [r0, #4]
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
    4fd0:	2106      	movs	r1, #6
    4fd2:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
    4fd6:	4b04      	ldr	r3, [pc, #16]	; (4fe8 <nrfx_twim_enable+0x1c>)
    4fd8:	2134      	movs	r1, #52	; 0x34
    4fda:	fb01 3302 	mla	r3, r1, r2, r3
    4fde:	2202      	movs	r2, #2
    4fe0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
    4fe4:	4770      	bx	lr
    4fe6:	bf00      	nop
    4fe8:	2000108c 	.word	0x2000108c

00004fec <nrfx_twim_disable>:
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    4fec:	7901      	ldrb	r1, [r0, #4]
    p_cb->int_mask = 0;
    4fee:	4b0c      	ldr	r3, [pc, #48]	; (5020 <nrfx_twim_disable+0x34>)
    NRF_TWIM_Type * p_twim = p_instance->p_twim;
    4ff0:	6802      	ldr	r2, [r0, #0]
    p_cb->int_mask = 0;
    4ff2:	2034      	movs	r0, #52	; 0x34
    4ff4:	fb00 3301 	mla	r3, r0, r1, r3
    4ff8:	2100      	movs	r1, #0
    p_reg->INTENCLR = mask;
    4ffa:	480a      	ldr	r0, [pc, #40]	; (5024 <nrfx_twim_disable+0x38>)
    4ffc:	6099      	str	r1, [r3, #8]
    4ffe:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    p_reg->SHORTS &= ~(mask);
    5002:	f8d2 0200 	ldr.w	r0, [r2, #512]	; 0x200
    5006:	f420 50bc 	bic.w	r0, r0, #6016	; 0x1780
    500a:	f8c2 0200 	str.w	r0, [r2, #512]	; 0x200
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
    500e:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    5012:	2201      	movs	r2, #1
    5014:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    p_cb->busy = false;
    5018:	f883 102f 	strb.w	r1, [r3, #47]	; 0x2f
}
    501c:	4770      	bx	lr
    501e:	bf00      	nop
    5020:	2000108c 	.word	0x2000108c
    5024:	019c0202 	.word	0x019c0202

00005028 <nrfx_twim_xfer>:
{
    5028:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    p_cb->error = false;
    502c:	f8df c2ec 	ldr.w	ip, [pc, #748]	; 531c <nrfx_twim_xfer+0x2f4>
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    5030:	f890 e004 	ldrb.w	lr, [r0, #4]
    err_code = twim_xfer(p_cb, (NRF_TWIM_Type *)p_instance->p_twim, p_xfer_desc, flags);
    5034:	6804      	ldr	r4, [r0, #0]
    p_cb->error = false;
    5036:	2334      	movs	r3, #52	; 0x34
    5038:	fb03 c30e 	mla	r3, r3, lr, ip
{
    503c:	4617      	mov	r7, r2
    p_cb->error = false;
    503e:	2200      	movs	r2, #0
    5040:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
    if (p_xfer_desc->primary_length != 0 && !nrfx_is_in_ram(p_xfer_desc->p_primary_buf))
    5044:	684b      	ldr	r3, [r1, #4]
{
    5046:	460d      	mov	r5, r1
    if (p_xfer_desc->primary_length != 0 && !nrfx_is_in_ram(p_xfer_desc->p_primary_buf))
    5048:	b14b      	cbz	r3, 505e <nrfx_twim_xfer+0x36>
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
    504a:	68cb      	ldr	r3, [r1, #12]
    504c:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
    5050:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    5054:	d003      	beq.n	505e <nrfx_twim_xfer+0x36>
        return err_code;
    5056:	4eb2      	ldr	r6, [pc, #712]	; (5320 <nrfx_twim_xfer+0x2f8>)
}
    5058:	4630      	mov	r0, r6
    505a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (p_cb->busy)
    505e:	2634      	movs	r6, #52	; 0x34
    p_reg->INTENCLR = mask;
    5060:	4bb0      	ldr	r3, [pc, #704]	; (5324 <nrfx_twim_xfer+0x2fc>)
    5062:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    5066:	fb06 c60e 	mla	r6, r6, lr, ip
    506a:	f896 302f 	ldrb.w	r3, [r6, #47]	; 0x2f
    506e:	f003 0aff 	and.w	sl, r3, #255	; 0xff
    5072:	b123      	cbz	r3, 507e <nrfx_twim_xfer+0x56>
        nrf_twim_int_enable(p_twim, p_cb->int_mask);
    5074:	68b3      	ldr	r3, [r6, #8]
    p_reg->INTENSET = mask;
    5076:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
        return err_code;
    507a:	4eab      	ldr	r6, [pc, #684]	; (5328 <nrfx_twim_xfer+0x300>)
    507c:	e7ec      	b.n	5058 <nrfx_twim_xfer+0x30>
                      (NRFX_TWIM_FLAG_REPEATED_XFER & flags)) ? false: true;
    507e:	f017 0f14 	tst.w	r7, #20
    5082:	bf0c      	ite	eq
    5084:	2301      	moveq	r3, #1
    5086:	2300      	movne	r3, #0
        p_cb->busy = ((NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER & flags) ||
    5088:	f886 302f 	strb.w	r3, [r6, #47]	; 0x2f
    p_cb->xfer_desc = *p_xfer_desc;
    508c:	46a9      	mov	r9, r5
    508e:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
    5092:	f106 080c 	add.w	r8, r6, #12
    5096:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
    509a:	f8d9 3000 	ldr.w	r3, [r9]
    509e:	f8c8 3000 	str.w	r3, [r8]
    p_cb->repeated = (flags & NRFX_TWIM_FLAG_REPEATED_XFER) ? true : false;
    50a2:	f3c7 1300 	ubfx	r3, r7, #4, #1
    50a6:	f886 3030 	strb.w	r3, [r6, #48]	; 0x30
    p_cb->flags = flags;
    50aa:	6237      	str	r7, [r6, #32]
    p_reg->ADDRESS = address;
    50ac:	786b      	ldrb	r3, [r5, #1]
    50ae:	f8c4 3588 	str.w	r3, [r4, #1416]	; 0x588
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    50b2:	f8c4 a104 	str.w	sl, [r4, #260]	; 0x104
    50b6:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    50ba:	f8c4 a124 	str.w	sl, [r4, #292]	; 0x124
    50be:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    50c2:	f8c4 a160 	str.w	sl, [r4, #352]	; 0x160
    50c6:	f8d4 3160 	ldr.w	r3, [r4, #352]	; 0x160
    50ca:	f8c4 a148 	str.w	sl, [r4, #328]	; 0x148
    50ce:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    if (NRFX_TWIM_FLAG_TX_POSTINC & flags)
    50d2:	f017 0301 	ands.w	r3, r7, #1
    return p_reg->RXD.AMOUNT;
}

NRF_STATIC_INLINE void nrf_twim_tx_list_enable(NRF_TWIM_Type * p_reg)
{
    p_reg->TXD.LIST = TWIM_TXD_LIST_LIST_ArrayList << TWIM_TXD_LIST_LIST_Pos;
    50d6:	bf18      	it	ne
    50d8:	2301      	movne	r3, #1
}

NRF_STATIC_INLINE void nrf_twim_tx_list_disable(NRF_TWIM_Type * p_reg)
{
    p_reg->TXD.LIST = TWIM_TXD_LIST_LIST_Disabled << TWIM_TXD_LIST_LIST_Pos;
    50da:	f8c4 3550 	str.w	r3, [r4, #1360]	; 0x550
    if (NRFX_TWIM_FLAG_RX_POSTINC & flags)
    50de:	f017 0302 	ands.w	r3, r7, #2
}

NRF_STATIC_INLINE void nrf_twim_rx_list_enable(NRF_TWIM_Type * p_reg)
{
    p_reg->RXD.LIST = TWIM_RXD_LIST_LIST_ArrayList << TWIM_RXD_LIST_LIST_Pos;
    50e2:	bf18      	it	ne
    50e4:	2301      	movne	r3, #1
}

NRF_STATIC_INLINE void nrf_twim_rx_list_disable(NRF_TWIM_Type * p_reg)
{
    p_reg->RXD.LIST = TWIM_RXD_LIST_LIST_Disabled << TWIM_RXD_LIST_LIST_Pos;
    50e6:	f8c4 3540 	str.w	r3, [r4, #1344]	; 0x540
    switch (p_xfer_desc->type)
    50ea:	782b      	ldrb	r3, [r5, #0]
    50ec:	2b03      	cmp	r3, #3
    50ee:	f200 80b9 	bhi.w	5264 <nrfx_twim_xfer+0x23c>
    50f2:	e8df f003 	tbb	[pc, r3]
    50f6:	a48b      	.short	0xa48b
    50f8:	026d      	.short	0x026d
    50fa:	692b      	ldr	r3, [r5, #16]
    50fc:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
        if (!nrfx_is_in_ram(p_xfer_desc->p_secondary_buf))
    5100:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    5104:	d1a7      	bne.n	5056 <nrfx_twim_xfer+0x2e>
    p_reg->SHORTS = mask;
    5106:	f44f 7380 	mov.w	r3, #256	; 0x100
    510a:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
    510e:	686b      	ldr	r3, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    5110:	68ea      	ldr	r2, [r5, #12]
    5112:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    5116:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    511a:	2300      	movs	r3, #0
    511c:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150
    5120:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5124:	2201      	movs	r2, #1
    5126:	6222      	str	r2, [r4, #32]
    5128:	60a2      	str	r2, [r4, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    512a:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
        while (!nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_TXSTARTED))
    512e:	2a00      	cmp	r2, #0
    5130:	d0fb      	beq.n	512a <nrfx_twim_xfer+0x102>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5132:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150
    5136:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    513a:	692a      	ldr	r2, [r5, #16]
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_secondary_buf, p_xfer_desc->secondary_length);
    513c:	68ab      	ldr	r3, [r5, #8]
    513e:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    5142:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
        p_cb->int_mask = NRF_TWIM_INT_SUSPENDED_MASK;
    5146:	2334      	movs	r3, #52	; 0x34
    5148:	fb03 c30e 	mla	r3, r3, lr, ip
    514c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    5150:	609a      	str	r2, [r3, #8]
    nrf_twim_task_t  start_task = NRF_TWIM_TASK_STARTTX;
    5152:	2308      	movs	r3, #8
    nrfx_err_t err_code = NRFX_SUCCESS;
    5154:	4e75      	ldr	r6, [pc, #468]	; (532c <nrfx_twim_xfer+0x304>)
    if (!(flags & NRFX_TWIM_FLAG_HOLD_XFER) && (p_xfer_desc->type != NRFX_TWIM_XFER_TXTX))
    5156:	0738      	lsls	r0, r7, #28
    5158:	d407      	bmi.n	516a <nrfx_twim_xfer+0x142>
    515a:	782a      	ldrb	r2, [r5, #0]
    515c:	2a03      	cmp	r2, #3
    515e:	d004      	beq.n	516a <nrfx_twim_xfer+0x142>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5160:	2201      	movs	r2, #1
    5162:	50e2      	str	r2, [r4, r3]
        if (p_xfer_desc->primary_length == 0)
    5164:	686b      	ldr	r3, [r5, #4]
    5166:	b903      	cbnz	r3, 516a <nrfx_twim_xfer+0x142>
    5168:	6162      	str	r2, [r4, #20]
    if (p_cb->handler)
    516a:	2334      	movs	r3, #52	; 0x34
    516c:	fb03 f30e 	mul.w	r3, r3, lr
    5170:	eb0c 0203 	add.w	r2, ip, r3
    5174:	f85c 1003 	ldr.w	r1, [ip, r3]
    5178:	2900      	cmp	r1, #0
    517a:	d176      	bne.n	526a <nrfx_twim_xfer+0x242>
    517c:	2001      	movs	r0, #1
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    517e:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_SUSPENDED))
    5182:	2b00      	cmp	r3, #0
    5184:	f000 8089 	beq.w	529a <nrfx_twim_xfer+0x272>
    5188:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
    518c:	2b00      	cmp	r3, #0
    518e:	f040 8087 	bne.w	52a0 <nrfx_twim_xfer+0x278>
    5192:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_ERROR))
    5196:	2b00      	cmp	r3, #0
    5198:	f000 8095 	beq.w	52c6 <nrfx_twim_xfer+0x29e>
                transmission_finished = true;
    519c:	2301      	movs	r3, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    519e:	f8c4 1124 	str.w	r1, [r4, #292]	; 0x124
    51a2:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    51a6:	f8d4 5160 	ldr.w	r5, [r4, #352]	; 0x160
    return p_reg->SHORTS;
    51aa:	f8d4 2200 	ldr.w	r2, [r4, #512]	; 0x200
                if (!(lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_STOP_MASK)))
    51ae:	2d00      	cmp	r5, #0
    51b0:	f000 8081 	beq.w	52b6 <nrfx_twim_xfer+0x28e>
    51b4:	f412 7f00 	tst.w	r2, #512	; 0x200
    51b8:	f402 7280 	and.w	r2, r2, #256	; 0x100
    51bc:	d17e      	bne.n	52bc <nrfx_twim_xfer+0x294>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    51be:	6220      	str	r0, [r4, #32]
    51c0:	6160      	str	r0, [r4, #20]
                if (lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_SUSPEND_MASK))
    51c2:	2a00      	cmp	r2, #0
    51c4:	d0db      	beq.n	517e <nrfx_twim_xfer+0x156>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    51c6:	f8c4 1148 	str.w	r1, [r4, #328]	; 0x148
    51ca:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
                    transmission_finished = false;
    51ce:	e7d6      	b.n	517e <nrfx_twim_xfer+0x156>
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
    51d0:	686b      	ldr	r3, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    51d2:	68ea      	ldr	r2, [r5, #12]
    51d4:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    51d8:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    51dc:	692b      	ldr	r3, [r5, #16]
    51de:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
        if (!nrfx_is_in_ram(p_xfer_desc->p_secondary_buf))
    51e2:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
    51e6:	f47f af36 	bne.w	5056 <nrfx_twim_xfer+0x2e>
        nrf_twim_rx_buffer_set(p_twim, p_xfer_desc->p_secondary_buf, p_xfer_desc->secondary_length);
    51ea:	68aa      	ldr	r2, [r5, #8]
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    51ec:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->SHORTS = mask;
    51f0:	f44f 5384 	mov.w	r3, #4224	; 0x1080
    p_reg->RXD.MAXCNT = length;
    51f4:	f8c4 2538 	str.w	r2, [r4, #1336]	; 0x538
    p_reg->SHORTS = mask;
    51f8:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
    51fc:	2334      	movs	r3, #52	; 0x34
    51fe:	fb03 c30e 	mla	r3, r3, lr, ip
    5202:	2202      	movs	r2, #2
    5204:	609a      	str	r2, [r3, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5206:	2301      	movs	r3, #1
    5208:	6223      	str	r3, [r4, #32]
    520a:	e7a2      	b.n	5152 <nrfx_twim_xfer+0x12a>
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
    520c:	686b      	ldr	r3, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    520e:	68ea      	ldr	r2, [r5, #12]
    5210:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
        if (NRFX_TWIM_FLAG_TX_NO_STOP & flags)
    5214:	f017 0f20 	tst.w	r7, #32
    p_reg->TXD.MAXCNT = length;
    5218:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    521c:	f04f 0334 	mov.w	r3, #52	; 0x34
    5220:	d008      	beq.n	5234 <nrfx_twim_xfer+0x20c>
    p_reg->SHORTS = mask;
    5222:	f44f 7280 	mov.w	r2, #256	; 0x100
    5226:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200
            p_cb->int_mask = NRF_TWIM_INT_SUSPENDED_MASK;
    522a:	fb03 c30e 	mla	r3, r3, lr, ip
    522e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    5232:	e7e7      	b.n	5204 <nrfx_twim_xfer+0x1dc>
    5234:	f44f 7200 	mov.w	r2, #512	; 0x200
    5238:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
    523c:	e7df      	b.n	51fe <nrfx_twim_xfer+0x1d6>
        nrf_twim_rx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
    523e:	686b      	ldr	r3, [r5, #4]
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    5240:	68ea      	ldr	r2, [r5, #12]
    5242:	f8c4 2534 	str.w	r2, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    5246:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    p_reg->SHORTS = mask;
    524a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    524e:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
    5252:	2334      	movs	r3, #52	; 0x34
    5254:	fb03 c30e 	mla	r3, r3, lr, ip
    5258:	2202      	movs	r2, #2
    525a:	609a      	str	r2, [r3, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    525c:	2301      	movs	r3, #1
    525e:	6223      	str	r3, [r4, #32]
        start_task = NRF_TWIM_TASK_STARTRX;
    5260:	2300      	movs	r3, #0
    5262:	e777      	b.n	5154 <nrfx_twim_xfer+0x12c>
    switch (p_xfer_desc->type)
    5264:	4e32      	ldr	r6, [pc, #200]	; (5330 <nrfx_twim_xfer+0x308>)
    5266:	2308      	movs	r3, #8
    5268:	e775      	b.n	5156 <nrfx_twim_xfer+0x12e>
        if (flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER)
    526a:	0779      	lsls	r1, r7, #29
            p_cb->int_mask = 0;
    526c:	bf44      	itt	mi
    526e:	2300      	movmi	r3, #0
    5270:	6093      	strmi	r3, [r2, #8]
        if (!(flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK))
    5272:	067a      	lsls	r2, r7, #25
    5274:	d406      	bmi.n	5284 <nrfx_twim_xfer+0x25c>
            p_cb->int_mask |= NRF_TWIM_INT_STOPPED_MASK;
    5276:	2334      	movs	r3, #52	; 0x34
    5278:	fb03 c30e 	mla	r3, r3, lr, ip
    527c:	689a      	ldr	r2, [r3, #8]
    527e:	f042 0202 	orr.w	r2, r2, #2
    5282:	609a      	str	r2, [r3, #8]
        p_cb->int_mask |= NRF_TWIM_INT_ERROR_MASK;
    5284:	2334      	movs	r3, #52	; 0x34
    5286:	fb03 c30e 	mla	r3, r3, lr, ip
    528a:	689a      	ldr	r2, [r3, #8]
    528c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    5290:	609a      	str	r2, [r3, #8]
        nrf_twim_int_enable(p_twim, p_cb->int_mask);
    5292:	689b      	ldr	r3, [r3, #8]
    p_reg->INTENSET = mask;
    5294:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
}
    5298:	e6de      	b.n	5058 <nrfx_twim_xfer+0x30>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    529a:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
    529e:	b123      	cbz	r3, 52aa <nrfx_twim_xfer+0x282>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    52a0:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
    52a4:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    52a8:	e773      	b.n	5192 <nrfx_twim_xfer+0x16a>
    52aa:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_ERROR))
    52ae:	2a00      	cmp	r2, #0
    52b0:	f43f af65 	beq.w	517e <nrfx_twim_xfer+0x156>
    52b4:	e773      	b.n	519e <nrfx_twim_xfer+0x176>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    52b6:	6220      	str	r0, [r4, #32]
    52b8:	6160      	str	r0, [r4, #20]
                if (lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_SUSPEND_MASK))
    52ba:	e760      	b.n	517e <nrfx_twim_xfer+0x156>
    52bc:	2a00      	cmp	r2, #0
    52be:	d182      	bne.n	51c6 <nrfx_twim_xfer+0x19e>
        } while (!transmission_finished);
    52c0:	2b00      	cmp	r3, #0
    52c2:	f43f af5c 	beq.w	517e <nrfx_twim_xfer+0x156>
        p_cb->busy = false;
    52c6:	2134      	movs	r1, #52	; 0x34
    uint32_t error_source = p_reg->ERRORSRC;
    52c8:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
    52cc:	f8c4 34c4 	str.w	r3, [r4, #1220]	; 0x4c4
    52d0:	fb01 c20e 	mla	r2, r1, lr, ip
    52d4:	2000      	movs	r0, #0
    52d6:	f882 002f 	strb.w	r0, [r2, #47]	; 0x2f
        if (errorsrc)
    52da:	b18b      	cbz	r3, 5300 <nrfx_twim_xfer+0x2d8>
        ret = NRFX_ERROR_DRV_TWI_ERR_OVERRUN;
    52dc:	4a15      	ldr	r2, [pc, #84]	; (5334 <nrfx_twim_xfer+0x30c>)
    52de:	4e16      	ldr	r6, [pc, #88]	; (5338 <nrfx_twim_xfer+0x310>)
    52e0:	f013 0f01 	tst.w	r3, #1
    52e4:	bf18      	it	ne
    52e6:	4616      	movne	r6, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_ANACK;
    52e8:	f013 0f02 	tst.w	r3, #2
    52ec:	f102 0201 	add.w	r2, r2, #1
    52f0:	bf18      	it	ne
    52f2:	4616      	movne	r6, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_DNACK;
    52f4:	f013 0f04 	tst.w	r3, #4
    52f8:	4b10      	ldr	r3, [pc, #64]	; (533c <nrfx_twim_xfer+0x314>)
    52fa:	bf18      	it	ne
    52fc:	461e      	movne	r6, r3
    52fe:	e6ab      	b.n	5058 <nrfx_twim_xfer+0x30>
            if (!(flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK) &&
    5300:	067b      	lsls	r3, r7, #25
    5302:	f53f aea9 	bmi.w	5058 <nrfx_twim_xfer+0x30>
                !xfer_completeness_check(p_twim, p_cb))
    5306:	fb0e c101 	mla	r1, lr, r1, ip
    530a:	4620      	mov	r0, r4
    530c:	f003 febc 	bl	9088 <xfer_completeness_check>
                err_code = NRFX_ERROR_INTERNAL;
    5310:	4b09      	ldr	r3, [pc, #36]	; (5338 <nrfx_twim_xfer+0x310>)
    5312:	2800      	cmp	r0, #0
    5314:	bf08      	it	eq
    5316:	461e      	moveq	r6, r3
    5318:	e69e      	b.n	5058 <nrfx_twim_xfer+0x30>
    531a:	bf00      	nop
    531c:	2000108c 	.word	0x2000108c
    5320:	0bad000a 	.word	0x0bad000a
    5324:	019c0202 	.word	0x019c0202
    5328:	0bad000b 	.word	0x0bad000b
    532c:	0bad0000 	.word	0x0bad0000
    5330:	0bad0004 	.word	0x0bad0004
    5334:	0bae0000 	.word	0x0bae0000
    5338:	0bad0001 	.word	0x0bad0001
    533c:	0bae0002 	.word	0x0bae0002

00005340 <nrfx_twim_0_irq_handler>:

#if NRFX_CHECK(NRFX_TWIM0_ENABLED)
void nrfx_twim_0_irq_handler(void)
{
    twim_irq_handler(NRF_TWIM0, &m_cb[NRFX_TWIM0_INST_IDX]);
    5340:	4901      	ldr	r1, [pc, #4]	; (5348 <nrfx_twim_0_irq_handler+0x8>)
    5342:	4802      	ldr	r0, [pc, #8]	; (534c <nrfx_twim_0_irq_handler+0xc>)
    5344:	f7ff bd36 	b.w	4db4 <twim_irq_handler>
    5348:	2000108c 	.word	0x2000108c
    534c:	40003000 	.word	0x40003000

00005350 <nrfx_twim_1_irq_handler>:
#endif

#if NRFX_CHECK(NRFX_TWIM1_ENABLED)
void nrfx_twim_1_irq_handler(void)
{
    twim_irq_handler(NRF_TWIM1, &m_cb[NRFX_TWIM1_INST_IDX]);
    5350:	4902      	ldr	r1, [pc, #8]	; (535c <nrfx_twim_1_irq_handler+0xc>)
    5352:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
    5356:	f7ff bd2d 	b.w	4db4 <twim_irq_handler>
    535a:	bf00      	nop
    535c:	200010c0 	.word	0x200010c0

00005360 <nrfx_twi_twim_bus_recover>:
                                                  NRF_GPIO_PIN_PULLUP,        \
                                                  NRF_GPIO_PIN_S0D1,          \
                                                  NRF_GPIO_PIN_NOSENSE)

nrfx_err_t nrfx_twi_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin)
{
    5360:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    *p_pin = pin_number & 0x1F;
    5364:	f000 001f 	and.w	r0, r0, #31
    5368:	f001 061f 	and.w	r6, r1, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    536c:	2401      	movs	r4, #1
    p_reg->OUTSET = set_mask;
    536e:	f04f 45a0 	mov.w	r5, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    5372:	fa04 f800 	lsl.w	r8, r4, r0
    reg->PIN_CNF[pin_number] = cnf;
    5376:	f506 72e0 	add.w	r2, r6, #448	; 0x1c0
    537a:	f500 70e0 	add.w	r0, r0, #448	; 0x1c0
    537e:	f240 630d 	movw	r3, #1549	; 0x60d
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    5382:	40b4      	lsls	r4, r6
    p_reg->OUTSET = set_mask;
    5384:	f8c5 8508 	str.w	r8, [r5, #1288]	; 0x508
    5388:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = cnf;
    538c:	f845 3020 	str.w	r3, [r5, r0, lsl #2]
    5390:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
    nrf_gpio_pin_set(scl_pin);
    nrf_gpio_pin_set(sda_pin);

    TWI_TWIM_PIN_CONFIGURE(scl_pin);
    TWI_TWIM_PIN_CONFIGURE(sda_pin);
    NRFX_DELAY_US(4);
    5394:	2004      	movs	r0, #4
    5396:	f003 fe4a 	bl	902e <nrfx_busy_wait>
    539a:	2709      	movs	r7, #9
    return p_reg->IN;
    539c:	f8d5 3510 	ldr.w	r3, [r5, #1296]	; 0x510

    for (uint8_t i = 0; i < 9; i++)
    {
        if (nrf_gpio_pin_read(sda_pin))
    53a0:	421c      	tst	r4, r3
    53a2:	d10d      	bne.n	53c0 <nrfx_twi_twim_bus_recover+0x60>
        }
        else
        {
            // Pulse CLOCK signal
            nrf_gpio_pin_clear(scl_pin);
            NRFX_DELAY_US(4);
    53a4:	2004      	movs	r0, #4
    p_reg->OUTCLR = clr_mask;
    53a6:	f8c5 850c 	str.w	r8, [r5, #1292]	; 0x50c
    53aa:	f003 fe40 	bl	902e <nrfx_busy_wait>
    for (uint8_t i = 0; i < 9; i++)
    53ae:	3f01      	subs	r7, #1
    p_reg->OUTSET = set_mask;
    53b0:	f8c5 8508 	str.w	r8, [r5, #1288]	; 0x508
            nrf_gpio_pin_set(scl_pin);
            NRFX_DELAY_US(4);
    53b4:	2004      	movs	r0, #4
    53b6:	f003 fe3a 	bl	902e <nrfx_busy_wait>
    for (uint8_t i = 0; i < 9; i++)
    53ba:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
    53be:	d1ed      	bne.n	539c <nrfx_twi_twim_bus_recover+0x3c>
    p_reg->OUTCLR = clr_mask;
    53c0:	f04f 45a0 	mov.w	r5, #1342177280	; 0x50000000
        }
    }

    // Generate a STOP condition on the bus
    nrf_gpio_pin_clear(sda_pin);
    NRFX_DELAY_US(4);
    53c4:	2004      	movs	r0, #4
    53c6:	f8c5 450c 	str.w	r4, [r5, #1292]	; 0x50c
    53ca:	f003 fe30 	bl	902e <nrfx_busy_wait>
    p_reg->OUTSET = set_mask;
    53ce:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    nrf_gpio_pin_set(sda_pin);
    NRFX_DELAY_US(4);
    53d2:	2004      	movs	r0, #4
    53d4:	f003 fe2b 	bl	902e <nrfx_busy_wait>
    return p_reg->IN;
    53d8:	f8d5 3510 	ldr.w	r3, [r5, #1296]	; 0x510
    }
    else
    {
        return NRFX_ERROR_INTERNAL;
    }
}
    53dc:	4803      	ldr	r0, [pc, #12]	; (53ec <nrfx_twi_twim_bus_recover+0x8c>)
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    53de:	40f3      	lsrs	r3, r6
    53e0:	f003 0301 	and.w	r3, r3, #1
    53e4:	1ac0      	subs	r0, r0, r3
    53e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    53ea:	bf00      	nop
    53ec:	0bad0001 	.word	0x0bad0001

000053f0 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
    53f0:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    53f2:	4c14      	ldr	r4, [pc, #80]	; (5444 <_DoInit+0x54>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    53f4:	4a14      	ldr	r2, [pc, #80]	; (5448 <_DoInit+0x58>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
    53f6:	4915      	ldr	r1, [pc, #84]	; (544c <_DoInit+0x5c>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    53f8:	2303      	movs	r3, #3
    53fa:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    53fc:	6163      	str	r3, [r4, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
    53fe:	4b14      	ldr	r3, [pc, #80]	; (5450 <_DoInit+0x60>)
  p->aUp[0].sName         = "Terminal";
    5400:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
    5402:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
    5404:	f44f 6380 	mov.w	r3, #1024	; 0x400
    5408:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
    540a:	2300      	movs	r3, #0
    540c:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    540e:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    5410:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].sName         = "Terminal";
    5412:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
    5414:	4a0f      	ldr	r2, [pc, #60]	; (5454 <_DoInit+0x64>)
    5416:	6662      	str	r2, [r4, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
    5418:	2210      	movs	r2, #16
    541a:	66a2      	str	r2, [r4, #104]	; 0x68
  STRCPY((char*)&p->acID[7], "RTT");
    541c:	1de0      	adds	r0, r4, #7
  p->aDown[0].RdOff         = 0u;
    541e:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    5420:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    5422:	6763      	str	r3, [r4, #116]	; 0x74
  STRCPY((char*)&p->acID[7], "RTT");
    5424:	f001 fc81 	bl	6d2a <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    5428:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
    542c:	490a      	ldr	r1, [pc, #40]	; (5458 <_DoInit+0x68>)
    542e:	4620      	mov	r0, r4
    5430:	f001 fc7b 	bl	6d2a <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    5434:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
    5438:	2320      	movs	r3, #32
    543a:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    543c:	f3bf 8f5f 	dmb	sy
}
    5440:	bd10      	pop	{r4, pc}
    5442:	bf00      	nop
    5444:	200010f4 	.word	0x200010f4
    5448:	0000a9bc 	.word	0x0000a9bc
    544c:	0000a9c5 	.word	0x0000a9c5
    5450:	20002b0c 	.word	0x20002b0c
    5454:	20002afc 	.word	0x20002afc
    5458:	0000a9c9 	.word	0x0000a9c9

0000545c <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    545c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    545e:	4605      	mov	r5, r0
    5460:	460e      	mov	r6, r1
	__asm__ volatile(
    5462:	f04f 0320 	mov.w	r3, #32
    5466:	f3ef 8711 	mrs	r7, BASEPRI
    546a:	f383 8812 	msr	BASEPRI_MAX, r3
    546e:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    5472:	f000 fe29 	bl	60c8 <z_impl_z_current_get>
    5476:	2d04      	cmp	r5, #4
    5478:	bf96      	itet	ls
    547a:	4b18      	ldrls	r3, [pc, #96]	; (54dc <z_fatal_error+0x80>)
    547c:	4b18      	ldrhi	r3, [pc, #96]	; (54e0 <z_fatal_error+0x84>)
    547e:	f853 3025 	ldrls.w	r3, [r3, r5, lsl #2]
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    5482:	2200      	movs	r2, #0
    5484:	4604      	mov	r4, r0
    5486:	9200      	str	r2, [sp, #0]
    5488:	4816      	ldr	r0, [pc, #88]	; (54e4 <z_fatal_error+0x88>)
    548a:	462a      	mov	r2, r5
    548c:	2145      	movs	r1, #69	; 0x45
    548e:	f001 fbc1 	bl	6c14 <z_log_minimal_printk>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
    5492:	b13e      	cbz	r6, 54a4 <z_fatal_error+0x48>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
    5494:	69f3      	ldr	r3, [r6, #28]
    5496:	f3c3 0308 	ubfx	r3, r3, #0, #9
    549a:	b11b      	cbz	r3, 54a4 <z_fatal_error+0x48>
		LOG_ERR("Fault during interrupt handling\n");
    549c:	4812      	ldr	r0, [pc, #72]	; (54e8 <z_fatal_error+0x8c>)
    549e:	2145      	movs	r1, #69	; 0x45
    54a0:	f001 fbb8 	bl	6c14 <z_log_minimal_printk>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
    54a4:	b134      	cbz	r4, 54b4 <z_fatal_error+0x58>
    54a6:	4620      	mov	r0, r4
    54a8:	f003 fe3e 	bl	9128 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
    54ac:	4603      	mov	r3, r0
    54ae:	b108      	cbz	r0, 54b4 <z_fatal_error+0x58>
    54b0:	7802      	ldrb	r2, [r0, #0]
    54b2:	b902      	cbnz	r2, 54b6 <z_fatal_error+0x5a>
		thread_name = "unknown";
    54b4:	4b0d      	ldr	r3, [pc, #52]	; (54ec <z_fatal_error+0x90>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
    54b6:	480e      	ldr	r0, [pc, #56]	; (54f0 <z_fatal_error+0x94>)
    54b8:	4622      	mov	r2, r4
    54ba:	2145      	movs	r1, #69	; 0x45
    54bc:	f001 fbaa 	bl	6c14 <z_log_minimal_printk>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
    54c0:	4631      	mov	r1, r6
    54c2:	4628      	mov	r0, r5
    54c4:	f7fe f9f6 	bl	38b4 <k_sys_fatal_error_handler>
	__asm__ volatile(
    54c8:	f387 8811 	msr	BASEPRI, r7
    54cc:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    54d0:	4620      	mov	r0, r4
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    54d2:	b003      	add	sp, #12
    54d4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    54d8:	f7fc beb8 	b.w	224c <z_impl_k_thread_abort>
    54dc:	00009ab0 	.word	0x00009ab0
    54e0:	0000a9d0 	.word	0x0000a9d0
    54e4:	0000a9e6 	.word	0x0000a9e6
    54e8:	0000aa13 	.word	0x0000aa13
    54ec:	0000a9de 	.word	0x0000a9de
    54f0:	0000aa39 	.word	0x0000aa39

000054f4 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    54f4:	4b0f      	ldr	r3, [pc, #60]	; (5534 <z_sys_init_run_level+0x40>)
{
    54f6:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    54f8:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    54fc:	3001      	adds	r0, #1
    54fe:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    5502:	42a6      	cmp	r6, r4
    5504:	d800      	bhi.n	5508 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
    5506:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
    5508:	e9d4 3500 	ldrd	r3, r5, [r4]
    550c:	4628      	mov	r0, r5
    550e:	4798      	blx	r3
		if (dev != NULL) {
    5510:	b16d      	cbz	r5, 552e <z_sys_init_run_level+0x3a>
			if (rc != 0) {
    5512:	b138      	cbz	r0, 5524 <z_sys_init_run_level+0x30>
				if (rc < 0) {
    5514:	2800      	cmp	r0, #0
    5516:	bfb8      	it	lt
    5518:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
    551a:	68eb      	ldr	r3, [r5, #12]
				if (rc > UINT8_MAX) {
    551c:	28ff      	cmp	r0, #255	; 0xff
    551e:	bfa8      	it	ge
    5520:	20ff      	movge	r0, #255	; 0xff
				dev->state->init_res = rc;
    5522:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    5524:	68ea      	ldr	r2, [r5, #12]
    5526:	7853      	ldrb	r3, [r2, #1]
    5528:	f043 0301 	orr.w	r3, r3, #1
    552c:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    552e:	3408      	adds	r4, #8
    5530:	e7e7      	b.n	5502 <z_sys_init_run_level+0xe>
    5532:	bf00      	nop
    5534:	00009ac4 	.word	0x00009ac4

00005538 <bg_thread_main>:
 * This routine completes kernel initialization by invoking the remaining
 * init functions, then invokes application's main() routine.
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
    5538:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
    553a:	4b0a      	ldr	r3, [pc, #40]	; (5564 <bg_thread_main+0x2c>)
    553c:	2201      	movs	r2, #1

	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
    553e:	2003      	movs	r0, #3
	z_sys_post_kernel = true;
    5540:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
    5542:	f7ff ffd7 	bl	54f4 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
    5546:	f000 ff91 	bl	646c <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
    554a:	2004      	movs	r0, #4
    554c:	f7ff ffd2 	bl	54f4 <z_sys_init_run_level>

	z_init_static_threads();
    5550:	f000 f91c 	bl	578c <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern void main(void);

	main();
    5554:	f7fa ff2c 	bl	3b0 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    5558:	4a03      	ldr	r2, [pc, #12]	; (5568 <bg_thread_main+0x30>)
    555a:	7b13      	ldrb	r3, [r2, #12]
    555c:	f023 0301 	bic.w	r3, r3, #1
    5560:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    5562:	bd08      	pop	{r3, pc}
    5564:	20002f0c 	.word	0x20002f0c
    5568:	20000238 	.word	0x20000238

0000556c <z_bss_zero>:
{
    556c:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
    556e:	4803      	ldr	r0, [pc, #12]	; (557c <z_bss_zero+0x10>)
    5570:	4a03      	ldr	r2, [pc, #12]	; (5580 <z_bss_zero+0x14>)
    5572:	2100      	movs	r1, #0
    5574:	1a12      	subs	r2, r2, r0
    5576:	f003 fdca 	bl	910e <z_early_memset>
}
    557a:	bd08      	pop	{r3, pc}
    557c:	20000140 	.word	0x20000140
    5580:	20002f10 	.word	0x20002f10

00005584 <z_init_cpu>:
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
    5584:	b570      	push	{r4, r5, r6, lr}
	z_setup_new_thread(thread, stack,
    5586:	2300      	movs	r3, #0
{
    5588:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
    558a:	2201      	movs	r2, #1
    558c:	e9cd 2304 	strd	r2, r3, [sp, #16]
	struct k_thread *thread = &z_idle_threads[i];
    5590:	4e13      	ldr	r6, [pc, #76]	; (55e0 <z_init_cpu+0x5c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    5592:	4d14      	ldr	r5, [pc, #80]	; (55e4 <z_init_cpu+0x60>)
	z_setup_new_thread(thread, stack,
    5594:	9301      	str	r3, [sp, #4]
    5596:	220f      	movs	r2, #15
    5598:	e9cd 3202 	strd	r3, r2, [sp, #8]
    559c:	4912      	ldr	r1, [pc, #72]	; (55e8 <z_init_cpu+0x64>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    559e:	2318      	movs	r3, #24
    55a0:	fb03 5500 	mla	r5, r3, r0, r5
	struct k_thread *thread = &z_idle_threads[i];
    55a4:	eb06 16c0 	add.w	r6, r6, r0, lsl #7
{
    55a8:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
    55aa:	f44f 70c0 	mov.w	r0, #384	; 0x180
    55ae:	fb00 1104 	mla	r1, r0, r4, r1
    55b2:	4b0e      	ldr	r3, [pc, #56]	; (55ec <z_init_cpu+0x68>)
    55b4:	9500      	str	r5, [sp, #0]
    55b6:	f44f 72a0 	mov.w	r2, #320	; 0x140
    55ba:	4630      	mov	r0, r6
    55bc:	f000 f888 	bl	56d0 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    55c0:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    55c2:	4a0b      	ldr	r2, [pc, #44]	; (55f0 <z_init_cpu+0x6c>)
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
    55c4:	60ee      	str	r6, [r5, #12]
    55c6:	f023 0304 	bic.w	r3, r3, #4
    55ca:	7373      	strb	r3, [r6, #13]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    55cc:	f44f 6304 	mov.w	r3, #2112	; 0x840
    55d0:	fb04 3303 	mla	r3, r4, r3, r3
    55d4:	4413      	add	r3, r2
	_kernel.cpus[id].id = id;
    55d6:	752c      	strb	r4, [r5, #20]
	_kernel.cpus[id].irq_stack =
    55d8:	606b      	str	r3, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
    55da:	b006      	add	sp, #24
    55dc:	bd70      	pop	{r4, r5, r6, pc}
    55de:	bf00      	nop
    55e0:	200001b8 	.word	0x200001b8
    55e4:	2000119c 	.word	0x2000119c
    55e8:	20003780 	.word	0x20003780
    55ec:	00009131 	.word	0x00009131
    55f0:	20002f40 	.word	0x20002f40

000055f4 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    55f4:	b580      	push	{r7, lr}
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
    55f6:	2000      	movs	r0, #0
{
    55f8:	b0a6      	sub	sp, #152	; 0x98
	z_sys_init_run_level(INIT_LEVEL_EARLY);
    55fa:	f7ff ff7b 	bl	54f4 <z_sys_init_run_level>
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    55fe:	4b2d      	ldr	r3, [pc, #180]	; (56b4 <z_cstart+0xc0>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    5600:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    5604:	4d2c      	ldr	r5, [pc, #176]	; (56b8 <z_cstart+0xc4>)

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
    5606:	4e2d      	ldr	r6, [pc, #180]	; (56bc <z_cstart+0xc8>)
    5608:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    560a:	4f2d      	ldr	r7, [pc, #180]	; (56c0 <z_cstart+0xcc>)
    560c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    5610:	616b      	str	r3, [r5, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    5612:	2400      	movs	r4, #0
    5614:	23e0      	movs	r3, #224	; 0xe0
    5616:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    561a:	77ec      	strb	r4, [r5, #31]
    561c:	762c      	strb	r4, [r5, #24]
    561e:	766c      	strb	r4, [r5, #25]
    5620:	76ac      	strb	r4, [r5, #26]
    5622:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    5626:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    5628:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    562c:	626b      	str	r3, [r5, #36]	; 0x24
    562e:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    5632:	f7fc fd7f 	bl	2134 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    5636:	f7fc fa2d 	bl	1a94 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    563a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    563e:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    5640:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    5642:	f7fc febd 	bl	23c0 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    5646:	f7fc fe17 	bl	2278 <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
    564a:	f240 1301 	movw	r3, #257	; 0x101
    564e:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
    5652:	ab06      	add	r3, sp, #24
    5654:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
    5656:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
	dummy_thread->resource_pool = NULL;
    565a:	9422      	str	r4, [sp, #136]	; 0x88
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    565c:	f003 fd4b 	bl	90f6 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
    5660:	2001      	movs	r0, #1
    5662:	f7ff ff47 	bl	54f4 <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
    5666:	2002      	movs	r0, #2
	_kernel.ready_q.cache = &z_main_thread;
    5668:	4d16      	ldr	r5, [pc, #88]	; (56c4 <z_cstart+0xd0>)
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
    566a:	f7ff ff43 	bl	54f4 <z_sys_init_run_level>
	z_sched_init();
    566e:	f000 fc83 	bl	5f78 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    5672:	4b15      	ldr	r3, [pc, #84]	; (56c8 <z_cstart+0xd4>)
	_kernel.ready_q.cache = &z_main_thread;
    5674:	61b5      	str	r5, [r6, #24]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    5676:	9305      	str	r3, [sp, #20]
    5678:	2301      	movs	r3, #1
    567a:	4914      	ldr	r1, [pc, #80]	; (56cc <z_cstart+0xd8>)
    567c:	9400      	str	r4, [sp, #0]
    567e:	e9cd 4303 	strd	r4, r3, [sp, #12]
    5682:	f44f 5220 	mov.w	r2, #10240	; 0x2800
    5686:	463b      	mov	r3, r7
    5688:	e9cd 4401 	strd	r4, r4, [sp, #4]
    568c:	4628      	mov	r0, r5
    568e:	f000 f81f 	bl	56d0 <z_setup_new_thread>
    5692:	7b6a      	ldrb	r2, [r5, #13]
    5694:	4606      	mov	r6, r0
    5696:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
    569a:	4628      	mov	r0, r5
    569c:	736a      	strb	r2, [r5, #13]
    569e:	f003 fdf8 	bl	9292 <z_ready_thread>
	z_init_cpu(0);
    56a2:	4620      	mov	r0, r4
    56a4:	f7ff ff6e 	bl	5584 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    56a8:	463a      	mov	r2, r7
    56aa:	4631      	mov	r1, r6
    56ac:	4628      	mov	r0, r5
    56ae:	f7fc fb17 	bl	1ce0 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    56b2:	bf00      	nop
    56b4:	20003780 	.word	0x20003780
    56b8:	e000ed00 	.word	0xe000ed00
    56bc:	2000119c 	.word	0x2000119c
    56c0:	00005539 	.word	0x00005539
    56c4:	20000238 	.word	0x20000238
    56c8:	0000aaa0 	.word	0x0000aaa0
    56cc:	20003900 	.word	0x20003900

000056d0 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    56d0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
    56d4:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    56d6:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    56d8:	2604      	movs	r6, #4
    56da:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
    56dc:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    56de:	7386      	strb	r6, [r0, #14]
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    56e0:	f100 0558 	add.w	r5, r0, #88	; 0x58
{
    56e4:	460f      	mov	r7, r1
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    56e6:	1dd6      	adds	r6, r2, #7
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
    56e8:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    56ec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
    56ee:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    56f0:	f026 0607 	bic.w	r6, r6, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
    56f4:	3740      	adds	r7, #64	; 0x40
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
    56f6:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
    56fa:	e9c0 7619 	strd	r7, r6, [r0, #100]	; 0x64
	thread_base->pended_on = NULL;
    56fe:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
    5700:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
    5702:	66c5      	str	r5, [r0, #108]	; 0x6c
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    5704:	f106 0840 	add.w	r8, r6, #64	; 0x40
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    5708:	9202      	str	r2, [sp, #8]
    570a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    570c:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
    570e:	4488      	add	r8, r1
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    5710:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    5712:	9200      	str	r2, [sp, #0]
    5714:	4642      	mov	r2, r8
{
    5716:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    5718:	f7fc fab0 	bl	1c7c <arch_new_thread>
	if (!_current) {
    571c:	4b04      	ldr	r3, [pc, #16]	; (5730 <z_setup_new_thread+0x60>)
	new_thread->init_data = NULL;
    571e:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
    5720:	689b      	ldr	r3, [r3, #8]
    5722:	b103      	cbz	r3, 5726 <z_setup_new_thread+0x56>
	new_thread->resource_pool = _current->resource_pool;
    5724:	6f1b      	ldr	r3, [r3, #112]	; 0x70
	return stack_ptr;
    5726:	6723      	str	r3, [r4, #112]	; 0x70
}
    5728:	4640      	mov	r0, r8
    572a:	b004      	add	sp, #16
    572c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5730:	2000119c 	.word	0x2000119c

00005734 <z_impl_k_thread_create>:
{
    5734:	b5f0      	push	{r4, r5, r6, r7, lr}
    5736:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    5738:	2500      	movs	r5, #0
    573a:	9505      	str	r5, [sp, #20]
    573c:	9d10      	ldr	r5, [sp, #64]	; 0x40
    573e:	9504      	str	r5, [sp, #16]
    5740:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
    5742:	9503      	str	r5, [sp, #12]
    5744:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    5746:	9502      	str	r5, [sp, #8]
{
    5748:	e9dd 7612 	ldrd	r7, r6, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    574c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    574e:	9501      	str	r5, [sp, #4]
    5750:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    5752:	9500      	str	r5, [sp, #0]
{
    5754:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    5756:	f7ff ffbb 	bl	56d0 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
    575a:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
    575e:	bf08      	it	eq
    5760:	f1b7 3fff 	cmpeq.w	r7, #4294967295	; 0xffffffff
    5764:	d005      	beq.n	5772 <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    5766:	ea56 0307 	orrs.w	r3, r6, r7
    576a:	d105      	bne.n	5778 <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
    576c:	4620      	mov	r0, r4
    576e:	f000 fb83 	bl	5e78 <z_sched_start>
}
    5772:	4620      	mov	r0, r4
    5774:	b007      	add	sp, #28
    5776:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    5778:	4903      	ldr	r1, [pc, #12]	; (5788 <z_impl_k_thread_create+0x54>)
    577a:	463a      	mov	r2, r7
    577c:	4633      	mov	r3, r6
    577e:	f104 0018 	add.w	r0, r4, #24
    5782:	f000 fd81 	bl	6288 <z_add_timeout>
    5786:	e7f4      	b.n	5772 <z_impl_k_thread_create+0x3e>
    5788:	000091ff 	.word	0x000091ff

0000578c <z_init_static_threads>:
{
    578c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    5790:	4c29      	ldr	r4, [pc, #164]	; (5838 <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
    5792:	4d2a      	ldr	r5, [pc, #168]	; (583c <z_init_static_threads+0xb0>)
{
    5794:	b087      	sub	sp, #28
    5796:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
    5798:	42ae      	cmp	r6, r5
    579a:	f104 0430 	add.w	r4, r4, #48	; 0x30
    579e:	d30f      	bcc.n	57c0 <z_init_static_threads+0x34>
	k_sched_lock();
    57a0:	f000 fbba 	bl	5f18 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    57a4:	4c24      	ldr	r4, [pc, #144]	; (5838 <z_init_static_threads+0xac>)
    57a6:	f8df 9098 	ldr.w	r9, [pc, #152]	; 5840 <z_init_static_threads+0xb4>
    57aa:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    57ae:	f240 37e7 	movw	r7, #999	; 0x3e7
    57b2:	42ac      	cmp	r4, r5
    57b4:	d320      	bcc.n	57f8 <z_init_static_threads+0x6c>
}
    57b6:	b007      	add	sp, #28
    57b8:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
    57bc:	f000 bbc0 	b.w	5f40 <k_sched_unlock>
		z_setup_new_thread(
    57c0:	f854 3c04 	ldr.w	r3, [r4, #-4]
    57c4:	9305      	str	r3, [sp, #20]
    57c6:	f854 3c10 	ldr.w	r3, [r4, #-16]
    57ca:	9304      	str	r3, [sp, #16]
    57cc:	f854 3c14 	ldr.w	r3, [r4, #-20]
    57d0:	9303      	str	r3, [sp, #12]
    57d2:	f854 3c18 	ldr.w	r3, [r4, #-24]
    57d6:	9302      	str	r3, [sp, #8]
    57d8:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    57dc:	9301      	str	r3, [sp, #4]
    57de:	f854 3c20 	ldr.w	r3, [r4, #-32]
    57e2:	9300      	str	r3, [sp, #0]
    57e4:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    57e8:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    57ec:	f7ff ff70 	bl	56d0 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    57f0:	f854 3c30 	ldr.w	r3, [r4, #-48]
    57f4:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    57f6:	e7ce      	b.n	5796 <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    57f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
    57fa:	1c5a      	adds	r2, r3, #1
    57fc:	d00d      	beq.n	581a <z_init_static_threads+0x8e>
					    K_MSEC(thread_data->init_delay));
    57fe:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    5802:	2100      	movs	r1, #0
    5804:	4638      	mov	r0, r7
    5806:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    580a:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
    580e:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    5812:	d104      	bne.n	581e <z_init_static_threads+0x92>
	z_sched_start(thread);
    5814:	4640      	mov	r0, r8
    5816:	f000 fb2f 	bl	5e78 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    581a:	3430      	adds	r4, #48	; 0x30
    581c:	e7c9      	b.n	57b2 <z_init_static_threads+0x26>
    581e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    5822:	2300      	movs	r3, #0
    5824:	f7fa fc5a 	bl	dc <__aeabi_uldivmod>
    5828:	4602      	mov	r2, r0
    582a:	460b      	mov	r3, r1
    582c:	f108 0018 	add.w	r0, r8, #24
    5830:	4649      	mov	r1, r9
    5832:	f000 fd29 	bl	6288 <z_add_timeout>
    5836:	e7f0      	b.n	581a <z_init_static_threads+0x8e>
    5838:	00009664 	.word	0x00009664
    583c:	00009664 	.word	0x00009664
    5840:	000091ff 	.word	0x000091ff

00005844 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    5844:	b538      	push	{r3, r4, r5, lr}
    5846:	4604      	mov	r4, r0
	__asm__ volatile(
    5848:	f04f 0320 	mov.w	r3, #32
    584c:	f3ef 8511 	mrs	r5, BASEPRI
    5850:	f383 8812 	msr	BASEPRI_MAX, r3
    5854:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    5858:	f003 fd2b 	bl	92b2 <z_unpend_first_thread>

	if (thread != NULL) {
    585c:	b148      	cbz	r0, 5872 <z_impl_k_sem_give+0x2e>
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    585e:	2200      	movs	r2, #0
    5860:	6782      	str	r2, [r0, #120]	; 0x78
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    5862:	f003 fd16 	bl	9292 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    5866:	4629      	mov	r1, r5
    5868:	4805      	ldr	r0, [pc, #20]	; (5880 <z_impl_k_sem_give+0x3c>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    586a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    586e:	f000 baf1 	b.w	5e54 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    5872:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    5876:	429a      	cmp	r2, r3
    5878:	bf18      	it	ne
    587a:	3301      	addne	r3, #1
    587c:	60a3      	str	r3, [r4, #8]
}
    587e:	e7f2      	b.n	5866 <z_impl_k_sem_give+0x22>
    5880:	20002f0d 	.word	0x20002f0d

00005884 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    5884:	b513      	push	{r0, r1, r4, lr}
    5886:	f04f 0420 	mov.w	r4, #32
    588a:	f3ef 8111 	mrs	r1, BASEPRI
    588e:	f384 8812 	msr	BASEPRI_MAX, r4
    5892:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    5896:	6884      	ldr	r4, [r0, #8]
    5898:	b144      	cbz	r4, 58ac <z_impl_k_sem_take+0x28>
		sem->count--;
    589a:	3c01      	subs	r4, #1
    589c:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
    589e:	f381 8811 	msr	BASEPRI, r1
    58a2:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    58a6:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    58a8:	b002      	add	sp, #8
    58aa:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    58ac:	ea52 0403 	orrs.w	r4, r2, r3
    58b0:	d106      	bne.n	58c0 <z_impl_k_sem_take+0x3c>
    58b2:	f381 8811 	msr	BASEPRI, r1
    58b6:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    58ba:	f06f 000f 	mvn.w	r0, #15
    58be:	e7f3      	b.n	58a8 <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    58c0:	e9cd 2300 	strd	r2, r3, [sp]
    58c4:	4602      	mov	r2, r0
    58c6:	4802      	ldr	r0, [pc, #8]	; (58d0 <z_impl_k_sem_take+0x4c>)
    58c8:	f000 faa6 	bl	5e18 <z_pend_curr>
	return ret;
    58cc:	e7ec      	b.n	58a8 <z_impl_k_sem_take+0x24>
    58ce:	bf00      	nop
    58d0:	20002f0d 	.word	0x20002f0d

000058d4 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
    58d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return list->head;
    58d8:	4e4a      	ldr	r6, [pc, #296]	; (5a04 <work_queue_main+0x130>)
    58da:	b085      	sub	sp, #20
    58dc:	4604      	mov	r4, r0
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
					   K_FOREVER, NULL);
    58de:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    58e2:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
	__asm__ volatile(
    58e6:	f04f 0320 	mov.w	r3, #32
    58ea:	f3ef 8711 	mrs	r7, BASEPRI
    58ee:	f383 8812 	msr	BASEPRI_MAX, r3
    58f2:	f3bf 8f6f 	isb	sy
    58f6:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
    58fa:	b98d      	cbnz	r5, 5920 <work_queue_main+0x4c>
		} else if (flag_test_and_clear(&queue->flags,
    58fc:	2102      	movs	r1, #2
    58fe:	f104 0098 	add.w	r0, r4, #152	; 0x98
    5902:	f003 fc2d 	bl	9160 <flag_test_and_clear>
    5906:	2800      	cmp	r0, #0
    5908:	d143      	bne.n	5992 <work_queue_main+0xbe>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
    590a:	2300      	movs	r3, #0
    590c:	e9cd 8900 	strd	r8, r9, [sp]
    5910:	9302      	str	r3, [sp, #8]
    5912:	f104 0288 	add.w	r2, r4, #136	; 0x88
    5916:	4639      	mov	r1, r7
    5918:	483b      	ldr	r0, [pc, #236]	; (5a08 <work_queue_main+0x134>)
    591a:	f000 fc3b 	bl	6194 <z_sched_wait>
			continue;
    591e:	e7e2      	b.n	58e6 <work_queue_main+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    5920:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
	return node->next;
    5924:	682b      	ldr	r3, [r5, #0]
	list->head = node;
    5926:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    592a:	4295      	cmp	r5, r2
	list->tail = node;
    592c:	bf08      	it	eq
    592e:	f8c4 3084 	streq.w	r3, [r4, #132]	; 0x84
	*flagp |= BIT(bit);
    5932:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    5936:	f043 0302 	orr.w	r3, r3, #2
    593a:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	*flagp &= ~BIT(bit);
    593e:	68eb      	ldr	r3, [r5, #12]
    5940:	f023 0304 	bic.w	r3, r3, #4
    5944:	f043 0301 	orr.w	r3, r3, #1
    5948:	60eb      	str	r3, [r5, #12]
			handler = work->handler;
    594a:	686b      	ldr	r3, [r5, #4]
	__asm__ volatile(
    594c:	f387 8811 	msr	BASEPRI, r7
    5950:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
    5954:	4628      	mov	r0, r5
    5956:	4798      	blx	r3
	__asm__ volatile(
    5958:	f04f 0320 	mov.w	r3, #32
    595c:	f3ef 8b11 	mrs	fp, BASEPRI
    5960:	f383 8812 	msr	BASEPRI_MAX, r3
    5964:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
    5968:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    596a:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
    596c:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    5970:	d419      	bmi.n	59a6 <work_queue_main+0xd2>
	*flagp &= ~BIT(bit);
    5972:	60ea      	str	r2, [r5, #12]
    5974:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    5978:	f023 0302 	bic.w	r3, r3, #2
    597c:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	__asm__ volatile(
    5980:	f38b 8811 	msr	BASEPRI, fp
    5984:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
    5988:	05db      	lsls	r3, r3, #23
    598a:	d4ac      	bmi.n	58e6 <work_queue_main+0x12>
	z_impl_k_yield();
    598c:	f000 fb00 	bl	5f90 <z_impl_k_yield>
}
    5990:	e7a9      	b.n	58e6 <work_queue_main+0x12>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
    5992:	f104 0590 	add.w	r5, r4, #144	; 0x90
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
    5996:	2200      	movs	r2, #0
    5998:	2101      	movs	r1, #1
    599a:	4628      	mov	r0, r5
    599c:	f003 fcbb 	bl	9316 <z_sched_wake>
    59a0:	2800      	cmp	r0, #0
    59a2:	d1f8      	bne.n	5996 <work_queue_main+0xc2>
    59a4:	e7b1      	b.n	590a <work_queue_main+0x36>
	return list->head;
    59a6:	6830      	ldr	r0, [r6, #0]
	*flagp &= ~BIT(bit);
    59a8:	f023 0303 	bic.w	r3, r3, #3
    59ac:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    59ae:	2800      	cmp	r0, #0
    59b0:	d0e0      	beq.n	5974 <work_queue_main+0xa0>
	return node->next;
    59b2:	2700      	movs	r7, #0
    59b4:	f8d0 a000 	ldr.w	sl, [r0]
	parent->next = child;
    59b8:	463b      	mov	r3, r7
    59ba:	2800      	cmp	r0, #0
    59bc:	d0da      	beq.n	5974 <work_queue_main+0xa0>
		if (wc->work == work) {
    59be:	6842      	ldr	r2, [r0, #4]
    59c0:	4295      	cmp	r5, r2
			sys_slist_remove(&pending_cancels, prev, &wc->node);
    59c2:	4601      	mov	r1, r0
		if (wc->work == work) {
    59c4:	d10c      	bne.n	59e0 <work_queue_main+0x10c>
	return node->next;
    59c6:	6801      	ldr	r1, [r0, #0]
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
    59c8:	b99f      	cbnz	r7, 59f2 <work_queue_main+0x11e>
    59ca:	6872      	ldr	r2, [r6, #4]
	list->head = node;
    59cc:	6031      	str	r1, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
    59ce:	4282      	cmp	r2, r0
    59d0:	d100      	bne.n	59d4 <work_queue_main+0x100>
	list->tail = node;
    59d2:	6071      	str	r1, [r6, #4]
	parent->next = child;
    59d4:	f840 3b08 	str.w	r3, [r0], #8
	z_impl_k_sem_give(sem);
    59d8:	f7ff ff34 	bl	5844 <z_impl_k_sem_give>
}
    59dc:	4639      	mov	r1, r7
    59de:	2300      	movs	r3, #0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    59e0:	f1ba 0f00 	cmp.w	sl, #0
    59e4:	d00b      	beq.n	59fe <work_queue_main+0x12a>
	return node->next;
    59e6:	f8da 2000 	ldr.w	r2, [sl]
    59ea:	4650      	mov	r0, sl
    59ec:	460f      	mov	r7, r1
    59ee:	4692      	mov	sl, r2
    59f0:	e7e3      	b.n	59ba <work_queue_main+0xe6>
	parent->next = child;
    59f2:	6039      	str	r1, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
    59f4:	6872      	ldr	r2, [r6, #4]
    59f6:	4282      	cmp	r2, r0
	list->tail = node;
    59f8:	bf08      	it	eq
    59fa:	6077      	streq	r7, [r6, #4]
}
    59fc:	e7ea      	b.n	59d4 <work_queue_main+0x100>
    59fe:	4652      	mov	r2, sl
    5a00:	e7f3      	b.n	59ea <work_queue_main+0x116>
    5a02:	bf00      	nop
    5a04:	200011c0 	.word	0x200011c0
    5a08:	20002f0d 	.word	0x20002f0d

00005a0c <submit_to_queue_locked>:
{
    5a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
    5a0e:	68c3      	ldr	r3, [r0, #12]
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    5a10:	079a      	lsls	r2, r3, #30
{
    5a12:	4604      	mov	r4, r0
    5a14:	460f      	mov	r7, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    5a16:	f3c3 0640 	ubfx	r6, r3, #1, #1
    5a1a:	d42c      	bmi.n	5a76 <submit_to_queue_locked+0x6a>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
    5a1c:	075b      	lsls	r3, r3, #29
    5a1e:	d41a      	bmi.n	5a56 <submit_to_queue_locked+0x4a>
		if (*queuep == NULL) {
    5a20:	680b      	ldr	r3, [r1, #0]
    5a22:	b90b      	cbnz	r3, 5a28 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
    5a24:	6883      	ldr	r3, [r0, #8]
    5a26:	600b      	str	r3, [r1, #0]
	return (*flagp & BIT(bit)) != 0U;
    5a28:	68e3      	ldr	r3, [r4, #12]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
    5a2a:	07dd      	lsls	r5, r3, #31
			*queuep = work->queue;
    5a2c:	bf44      	itt	mi
    5a2e:	68a3      	ldrmi	r3, [r4, #8]
    5a30:	603b      	strmi	r3, [r7, #0]
		int rc = queue_submit_locked(*queuep, work);
    5a32:	683d      	ldr	r5, [r7, #0]
			ret = 2;
    5a34:	bf4c      	ite	mi
    5a36:	2602      	movmi	r6, #2
		ret = 1;
    5a38:	2601      	movpl	r6, #1
	if (queue == NULL) {
    5a3a:	2d00      	cmp	r5, #0
    5a3c:	d03a      	beq.n	5ab4 <submit_to_queue_locked+0xa8>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
    5a3e:	4b1f      	ldr	r3, [pc, #124]	; (5abc <submit_to_queue_locked+0xb0>)
    5a40:	689b      	ldr	r3, [r3, #8]
    5a42:	42ab      	cmp	r3, r5
    5a44:	d00a      	beq.n	5a5c <submit_to_queue_locked+0x50>
	return (*flagp & BIT(bit)) != 0U;
    5a46:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    5a4a:	07d8      	lsls	r0, r3, #31
	return (*flagp & BIT(bit)) != 0U;
    5a4c:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    5a50:	d414      	bmi.n	5a7c <submit_to_queue_locked+0x70>
		ret = -EBUSY;
    5a52:	f06f 0612 	mvn.w	r6, #18
		*queuep = NULL;
    5a56:	2300      	movs	r3, #0
    5a58:	603b      	str	r3, [r7, #0]
	return ret;
    5a5a:	e025      	b.n	5aa8 <submit_to_queue_locked+0x9c>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
    5a5c:	f003 fb5b 	bl	9116 <k_is_in_isr>
    5a60:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
    5a64:	2800      	cmp	r0, #0
    5a66:	d1f0      	bne.n	5a4a <submit_to_queue_locked+0x3e>
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    5a68:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
    5a6a:	f3c3 02c0 	ubfx	r2, r3, #3, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    5a6e:	d5f0      	bpl.n	5a52 <submit_to_queue_locked+0x46>
	} else if (plugged && !draining) {
    5a70:	b152      	cbz	r2, 5a88 <submit_to_queue_locked+0x7c>
    5a72:	075b      	lsls	r3, r3, #29
    5a74:	d408      	bmi.n	5a88 <submit_to_queue_locked+0x7c>
		ret = -EBUSY;
    5a76:	f06f 060f 	mvn.w	r6, #15
    5a7a:	e7ec      	b.n	5a56 <submit_to_queue_locked+0x4a>
	} else if (draining && !chained) {
    5a7c:	2a00      	cmp	r2, #0
    5a7e:	d1fa      	bne.n	5a76 <submit_to_queue_locked+0x6a>
	return (*flagp & BIT(bit)) != 0U;
    5a80:	f3c3 03c0 	ubfx	r3, r3, #3, #1
	} else if (plugged && !draining) {
    5a84:	2b00      	cmp	r3, #0
    5a86:	d1f6      	bne.n	5a76 <submit_to_queue_locked+0x6a>
	parent->next = child;
    5a88:	2300      	movs	r3, #0
    5a8a:	6023      	str	r3, [r4, #0]
	return list->tail;
    5a8c:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
Z_GENLIST_APPEND(slist, snode)
    5a90:	b963      	cbnz	r3, 5aac <submit_to_queue_locked+0xa0>
	list->head = node;
    5a92:	e9c5 4420 	strd	r4, r4, [r5, #128]	; 0x80
		(void)notify_queue_locked(queue);
    5a96:	4628      	mov	r0, r5
    5a98:	f003 fb6d 	bl	9176 <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
    5a9c:	68e3      	ldr	r3, [r4, #12]
    5a9e:	f043 0304 	orr.w	r3, r3, #4
    5aa2:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
    5aa4:	683b      	ldr	r3, [r7, #0]
    5aa6:	60a3      	str	r3, [r4, #8]
}
    5aa8:	4630      	mov	r0, r6
    5aaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
    5aac:	601c      	str	r4, [r3, #0]
	list->tail = node;
    5aae:	f8c5 4084 	str.w	r4, [r5, #132]	; 0x84
}
    5ab2:	e7f0      	b.n	5a96 <submit_to_queue_locked+0x8a>
		return -EINVAL;
    5ab4:	f06f 0615 	mvn.w	r6, #21
    5ab8:	e7cd      	b.n	5a56 <submit_to_queue_locked+0x4a>
    5aba:	bf00      	nop
    5abc:	2000119c 	.word	0x2000119c

00005ac0 <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
    5ac0:	b5f0      	push	{r4, r5, r6, r7, lr}
    5ac2:	b089      	sub	sp, #36	; 0x24
    5ac4:	4604      	mov	r4, r0
	list->head = NULL;
    5ac6:	2000      	movs	r0, #0
	list->tail = NULL;
    5ac8:	e9c4 0020 	strd	r0, r0, [r4, #128]	; 0x80
    5acc:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    5ace:	f104 0088 	add.w	r0, r4, #136	; 0x88
	list->tail = (sys_dnode_t *)list;
    5ad2:	e9c4 0022 	strd	r0, r0, [r4, #136]	; 0x88
    5ad6:	f104 0090 	add.w	r0, r4, #144	; 0x90
    5ada:	e9c4 0024 	strd	r0, r0, [r4, #144]	; 0x90

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
    5ade:	b31d      	cbz	r5, 5b28 <k_work_queue_start+0x68>
    5ae0:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
    5ae2:	2800      	cmp	r0, #0
    5ae4:	f240 1001 	movw	r0, #257	; 0x101
    5ae8:	bf08      	it	eq
    5aea:	2001      	moveq	r0, #1
	*flagp = flags;
    5aec:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    5af0:	2000      	movs	r0, #0
    5af2:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    5af6:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    5afa:	e9cd 3003 	strd	r3, r0, [sp, #12]
    5afe:	e9cd 0001 	strd	r0, r0, [sp, #4]
    5b02:	e9cd 6706 	strd	r6, r7, [sp, #24]
    5b06:	4b09      	ldr	r3, [pc, #36]	; (5b2c <k_work_queue_start+0x6c>)
    5b08:	9400      	str	r4, [sp, #0]
    5b0a:	4620      	mov	r0, r4
    5b0c:	f7ff fe12 	bl	5734 <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
    5b10:	b125      	cbz	r5, 5b1c <k_work_queue_start+0x5c>
    5b12:	6829      	ldr	r1, [r5, #0]
    5b14:	b111      	cbz	r1, 5b1c <k_work_queue_start+0x5c>
	return z_impl_k_thread_name_set(thread, str);
    5b16:	4620      	mov	r0, r4
    5b18:	f003 fb03 	bl	9122 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
    5b1c:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
    5b1e:	b009      	add	sp, #36	; 0x24
    5b20:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    5b24:	f003 bb02 	b.w	912c <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
    5b28:	2001      	movs	r0, #1
    5b2a:	e7df      	b.n	5aec <k_work_queue_start+0x2c>
    5b2c:	000058d5 	.word	0x000058d5

00005b30 <k_work_schedule_for_queue>:
}

int k_work_schedule_for_queue(struct k_work_q *queue,
			       struct k_work_delayable *dwork,
			       k_timeout_t delay)
{
    5b30:	b537      	push	{r0, r1, r2, r4, r5, lr}
    5b32:	9001      	str	r0, [sp, #4]
    5b34:	4608      	mov	r0, r1
	__asm__ volatile(
    5b36:	f04f 0120 	mov.w	r1, #32
    5b3a:	f3ef 8411 	mrs	r4, BASEPRI
    5b3e:	f381 8812 	msr	BASEPRI_MAX, r1
    5b42:	f3bf 8f6f 	isb	sy
	return *flagp;
    5b46:	68c1      	ldr	r1, [r0, #12]
	struct k_work *work = &dwork->work;
	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Schedule the work item if it's idle or running. */
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
    5b48:	f011 0f0e 	tst.w	r1, #14
    5b4c:	d116      	bne.n	5b7c <k_work_schedule_for_queue+0x4c>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    5b4e:	ea53 0502 	orrs.w	r5, r3, r2
    5b52:	d108      	bne.n	5b66 <k_work_schedule_for_queue+0x36>
		return submit_to_queue_locked(work, queuep);
    5b54:	a901      	add	r1, sp, #4
    5b56:	f7ff ff59 	bl	5a0c <submit_to_queue_locked>
	__asm__ volatile(
    5b5a:	f384 8811 	msr	BASEPRI, r4
    5b5e:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
    5b62:	b003      	add	sp, #12
    5b64:	bd30      	pop	{r4, r5, pc}
	*flagp |= BIT(bit);
    5b66:	f041 0108 	orr.w	r1, r1, #8
    5b6a:	60c1      	str	r1, [r0, #12]
	dwork->queue = *queuep;
    5b6c:	9901      	ldr	r1, [sp, #4]
    5b6e:	6281      	str	r1, [r0, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
    5b70:	3010      	adds	r0, #16
    5b72:	4903      	ldr	r1, [pc, #12]	; (5b80 <k_work_schedule_for_queue+0x50>)
    5b74:	f000 fb88 	bl	6288 <z_add_timeout>
	return ret;
    5b78:	2001      	movs	r0, #1
    5b7a:	e7ee      	b.n	5b5a <k_work_schedule_for_queue+0x2a>
	int ret = 0;
    5b7c:	2000      	movs	r0, #0
    5b7e:	e7ec      	b.n	5b5a <k_work_schedule_for_queue+0x2a>
    5b80:	00009185 	.word	0x00009185

00005b84 <k_work_schedule>:

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
    5b84:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
    5b86:	4801      	ldr	r0, [pc, #4]	; (5b8c <k_work_schedule+0x8>)
    5b88:	f7ff bfd2 	b.w	5b30 <k_work_schedule_for_queue>
    5b8c:	200002c0 	.word	0x200002c0

00005b90 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(struct k_thread *curr)
{
    5b90:	b538      	push	{r3, r4, r5, lr}
	int ret = slice_ticks;
    5b92:	4d07      	ldr	r5, [pc, #28]	; (5bb0 <z_reset_time_slice+0x20>)
    5b94:	682c      	ldr	r4, [r5, #0]
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time(curr) != 0) {
    5b96:	b154      	cbz	r4, 5bae <z_reset_time_slice+0x1e>
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
    5b98:	f7fd fe82 	bl	38a0 <sys_clock_elapsed>
    5b9c:	4b05      	ldr	r3, [pc, #20]	; (5bb4 <z_reset_time_slice+0x24>)
    5b9e:	4404      	add	r4, r0
    5ba0:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
    5ba2:	6828      	ldr	r0, [r5, #0]
    5ba4:	2100      	movs	r1, #0
	}
}
    5ba6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_set_timeout_expiry(slice_time(curr), false);
    5baa:	f003 bbed 	b.w	9388 <z_set_timeout_expiry>
}
    5bae:	bd38      	pop	{r3, r4, r5, pc}
    5bb0:	200011d0 	.word	0x200011d0
    5bb4:	2000119c 	.word	0x2000119c

00005bb8 <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
    5bb8:	b538      	push	{r3, r4, r5, lr}
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    5bba:	4d0d      	ldr	r5, [pc, #52]	; (5bf0 <update_cache+0x38>)
    5bbc:	462b      	mov	r3, r5
    5bbe:	f853 4f1c 	ldr.w	r4, [r3, #28]!
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5bc2:	429c      	cmp	r4, r3
    5bc4:	d000      	beq.n	5bc8 <update_cache+0x10>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    5bc6:	b904      	cbnz	r4, 5bca <update_cache+0x12>
    5bc8:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
    5bca:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
    5bcc:	b938      	cbnz	r0, 5bde <update_cache+0x26>
	if (z_is_thread_prevented_from_running(_current)) {
    5bce:	7b5a      	ldrb	r2, [r3, #13]
    5bd0:	06d2      	lsls	r2, r2, #27
    5bd2:	d104      	bne.n	5bde <update_cache+0x26>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    5bd4:	69a2      	ldr	r2, [r4, #24]
    5bd6:	b912      	cbnz	r2, 5bde <update_cache+0x26>
	if (is_preempt(_current) || is_metairq(thread)) {
    5bd8:	89da      	ldrh	r2, [r3, #14]
    5bda:	2a7f      	cmp	r2, #127	; 0x7f
    5bdc:	d805      	bhi.n	5bea <update_cache+0x32>
#ifndef CONFIG_SMP
	struct k_thread *thread = next_up();

	if (should_preempt(thread, preempt_ok)) {
#ifdef CONFIG_TIMESLICING
		if (thread != _current) {
    5bde:	429c      	cmp	r4, r3
    5be0:	d002      	beq.n	5be8 <update_cache+0x30>
			z_reset_time_slice(thread);
    5be2:	4620      	mov	r0, r4
    5be4:	f7ff ffd4 	bl	5b90 <z_reset_time_slice>
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
    5be8:	4623      	mov	r3, r4
    5bea:	61ab      	str	r3, [r5, #24]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
    5bec:	bd38      	pop	{r3, r4, r5, pc}
    5bee:	bf00      	nop
    5bf0:	2000119c 	.word	0x2000119c

00005bf4 <move_thread_to_end_of_prio_q>:
{
    5bf4:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
    5bf6:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    5bfa:	7b43      	ldrb	r3, [r0, #13]
    5bfc:	2a00      	cmp	r2, #0
{
    5bfe:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    5c00:	da04      	bge.n	5c0c <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    5c02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    5c06:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
    5c08:	f003 fae7 	bl	91da <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    5c0c:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
    5c0e:	4a15      	ldr	r2, [pc, #84]	; (5c64 <move_thread_to_end_of_prio_q+0x70>)
    5c10:	f063 037f 	orn	r3, r3, #127	; 0x7f
    5c14:	4610      	mov	r0, r2
    5c16:	734b      	strb	r3, [r1, #13]
    5c18:	f850 3f1c 	ldr.w	r3, [r0, #28]!
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
    5c1c:	6a14      	ldr	r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5c1e:	4283      	cmp	r3, r0
    5c20:	bf08      	it	eq
    5c22:	2300      	moveq	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    5c24:	b923      	cbnz	r3, 5c30 <move_thread_to_end_of_prio_q+0x3c>
static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
	node->prev = tail;
    5c26:	e9c1 0400 	strd	r0, r4, [r1]

	tail->next = node;
    5c2a:	6021      	str	r1, [r4, #0]
	list->tail = node;
    5c2c:	6211      	str	r1, [r2, #32]
}
    5c2e:	e00c      	b.n	5c4a <move_thread_to_end_of_prio_q+0x56>
	int32_t b1 = thread_1->base.prio;
    5c30:	f991 500e 	ldrsb.w	r5, [r1, #14]
	int32_t b2 = thread_2->base.prio;
    5c34:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
    5c38:	42b5      	cmp	r5, r6
    5c3a:	d00e      	beq.n	5c5a <move_thread_to_end_of_prio_q+0x66>
		if (z_sched_prio_cmp(thread, t) > 0) {
    5c3c:	42ae      	cmp	r6, r5
    5c3e:	dd0c      	ble.n	5c5a <move_thread_to_end_of_prio_q+0x66>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
    5c40:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
    5c42:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
    5c46:	6001      	str	r1, [r0, #0]
	successor->prev = node;
    5c48:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
    5c4a:	6890      	ldr	r0, [r2, #8]
    5c4c:	1a43      	subs	r3, r0, r1
    5c4e:	4258      	negs	r0, r3
}
    5c50:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
    5c54:	4158      	adcs	r0, r3
    5c56:	f7ff bfaf 	b.w	5bb8 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    5c5a:	429c      	cmp	r4, r3
    5c5c:	d0e3      	beq.n	5c26 <move_thread_to_end_of_prio_q+0x32>
    5c5e:	681b      	ldr	r3, [r3, #0]
    5c60:	e7e0      	b.n	5c24 <move_thread_to_end_of_prio_q+0x30>
    5c62:	bf00      	nop
    5c64:	2000119c 	.word	0x2000119c

00005c68 <ready_thread>:
{
    5c68:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    5c6a:	f990 300d 	ldrsb.w	r3, [r0, #13]
    5c6e:	7b42      	ldrb	r2, [r0, #13]
    5c70:	2b00      	cmp	r3, #0
    5c72:	db29      	blt.n	5cc8 <ready_thread+0x60>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    5c74:	06d3      	lsls	r3, r2, #27
    5c76:	d127      	bne.n	5cc8 <ready_thread+0x60>
	return node->next != NULL;
    5c78:	6983      	ldr	r3, [r0, #24]
    5c7a:	bb2b      	cbnz	r3, 5cc8 <ready_thread+0x60>
	return list->head == list;
    5c7c:	4913      	ldr	r1, [pc, #76]	; (5ccc <ready_thread+0x64>)
	thread->base.thread_state |= _THREAD_QUEUED;
    5c7e:	f062 027f 	orn	r2, r2, #127	; 0x7f
    5c82:	7342      	strb	r2, [r0, #13]
    5c84:	460a      	mov	r2, r1
    5c86:	f852 4f1c 	ldr.w	r4, [r2, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5c8a:	4294      	cmp	r4, r2
    5c8c:	bf18      	it	ne
    5c8e:	4623      	movne	r3, r4
	return (node == list->tail) ? NULL : node->next;
    5c90:	6a0c      	ldr	r4, [r1, #32]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    5c92:	b923      	cbnz	r3, 5c9e <ready_thread+0x36>
	node->prev = tail;
    5c94:	e9c0 2400 	strd	r2, r4, [r0]
	tail->next = node;
    5c98:	6020      	str	r0, [r4, #0]
	list->tail = node;
    5c9a:	6208      	str	r0, [r1, #32]
}
    5c9c:	e00c      	b.n	5cb8 <ready_thread+0x50>
	int32_t b1 = thread_1->base.prio;
    5c9e:	f990 500e 	ldrsb.w	r5, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    5ca2:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
    5ca6:	42b5      	cmp	r5, r6
    5ca8:	d00a      	beq.n	5cc0 <ready_thread+0x58>
		if (z_sched_prio_cmp(thread, t) > 0) {
    5caa:	42ae      	cmp	r6, r5
    5cac:	dd08      	ble.n	5cc0 <ready_thread+0x58>
	sys_dnode_t *const prev = successor->prev;
    5cae:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    5cb0:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
    5cb4:	6010      	str	r0, [r2, #0]
	successor->prev = node;
    5cb6:	6058      	str	r0, [r3, #4]
}
    5cb8:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
    5cba:	2000      	movs	r0, #0
    5cbc:	f7ff bf7c 	b.w	5bb8 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    5cc0:	42a3      	cmp	r3, r4
    5cc2:	d0e7      	beq.n	5c94 <ready_thread+0x2c>
    5cc4:	681b      	ldr	r3, [r3, #0]
    5cc6:	e7e4      	b.n	5c92 <ready_thread+0x2a>
}
    5cc8:	bc70      	pop	{r4, r5, r6}
    5cca:	4770      	bx	lr
    5ccc:	2000119c 	.word	0x2000119c

00005cd0 <unready_thread>:
{
    5cd0:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
    5cd2:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    5cd6:	7b43      	ldrb	r3, [r0, #13]
    5cd8:	2a00      	cmp	r2, #0
{
    5cda:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    5cdc:	da04      	bge.n	5ce8 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    5cde:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    5ce2:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    5ce4:	f003 fa79 	bl	91da <sys_dlist_remove>
	update_cache(thread == _current);
    5ce8:	4b04      	ldr	r3, [pc, #16]	; (5cfc <unready_thread+0x2c>)
    5cea:	6898      	ldr	r0, [r3, #8]
    5cec:	1a43      	subs	r3, r0, r1
    5cee:	4258      	negs	r0, r3
    5cf0:	4158      	adcs	r0, r3
}
    5cf2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
    5cf6:	f7ff bf5f 	b.w	5bb8 <update_cache>
    5cfa:	bf00      	nop
    5cfc:	2000119c 	.word	0x2000119c

00005d00 <pend_locked>:
{
    5d00:	b570      	push	{r4, r5, r6, lr}
    5d02:	4615      	mov	r5, r2
    5d04:	461c      	mov	r4, r3
    5d06:	4606      	mov	r6, r0
	add_to_waitq_locked(thread, wait_q);
    5d08:	f003 fa9b 	bl	9242 <add_to_waitq_locked>
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    5d0c:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
    5d10:	bf08      	it	eq
    5d12:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
    5d16:	d008      	beq.n	5d2a <pend_locked+0x2a>
    5d18:	462a      	mov	r2, r5
    5d1a:	4623      	mov	r3, r4
    5d1c:	f106 0018 	add.w	r0, r6, #24
    5d20:	4902      	ldr	r1, [pc, #8]	; (5d2c <pend_locked+0x2c>)
}
    5d22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5d26:	f000 baaf 	b.w	6288 <z_add_timeout>
    5d2a:	bd70      	pop	{r4, r5, r6, pc}
    5d2c:	000091ff 	.word	0x000091ff

00005d30 <k_sched_time_slice_set>:
{
    5d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5d32:	4604      	mov	r4, r0
    5d34:	460d      	mov	r5, r1
	__asm__ volatile(
    5d36:	f04f 0320 	mov.w	r3, #32
    5d3a:	f3ef 8711 	mrs	r7, BASEPRI
    5d3e:	f383 8812 	msr	BASEPRI_MAX, r3
    5d42:	f3bf 8f6f 	isb	sy
			return (uint32_t)((t * to_hz + off) / from_hz);
    5d46:	2600      	movs	r6, #0
    5d48:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
    5d4c:	f240 30e7 	movw	r0, #999	; 0x3e7
    5d50:	4631      	mov	r1, r6
    5d52:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    5d56:	2300      	movs	r3, #0
    5d58:	fbe4 010c 	umlal	r0, r1, r4, ip
    5d5c:	f7fa f9be 	bl	dc <__aeabi_uldivmod>
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    5d60:	42b4      	cmp	r4, r6
    5d62:	dd02      	ble.n	5d6a <k_sched_time_slice_set+0x3a>
			slice_ticks = MAX(2, slice_ticks);
    5d64:	2802      	cmp	r0, #2
    5d66:	bfb8      	it	lt
    5d68:	2002      	movlt	r0, #2
		slice_ticks = k_ms_to_ticks_ceil32(slice);
    5d6a:	4a07      	ldr	r2, [pc, #28]	; (5d88 <k_sched_time_slice_set+0x58>)
		_current_cpu->slice_ticks = 0;
    5d6c:	4b07      	ldr	r3, [pc, #28]	; (5d8c <k_sched_time_slice_set+0x5c>)
		slice_ticks = k_ms_to_ticks_ceil32(slice);
    5d6e:	6010      	str	r0, [r2, #0]
		slice_max_prio = prio;
    5d70:	4a07      	ldr	r2, [pc, #28]	; (5d90 <k_sched_time_slice_set+0x60>)
		z_reset_time_slice(_current);
    5d72:	6898      	ldr	r0, [r3, #8]
		_current_cpu->slice_ticks = 0;
    5d74:	611e      	str	r6, [r3, #16]
		slice_max_prio = prio;
    5d76:	6015      	str	r5, [r2, #0]
		z_reset_time_slice(_current);
    5d78:	f7ff ff0a 	bl	5b90 <z_reset_time_slice>
	__asm__ volatile(
    5d7c:	f387 8811 	msr	BASEPRI, r7
    5d80:	f3bf 8f6f 	isb	sy
}
    5d84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5d86:	bf00      	nop
    5d88:	200011d0 	.word	0x200011d0
    5d8c:	2000119c 	.word	0x2000119c
    5d90:	200011cc 	.word	0x200011cc

00005d94 <z_time_slice>:
{
    5d94:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    5d96:	f04f 0320 	mov.w	r3, #32
    5d9a:	f3ef 8511 	mrs	r5, BASEPRI
    5d9e:	f383 8812 	msr	BASEPRI_MAX, r3
    5da2:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
    5da6:	4b17      	ldr	r3, [pc, #92]	; (5e04 <z_time_slice+0x70>)
    5da8:	4a17      	ldr	r2, [pc, #92]	; (5e08 <z_time_slice+0x74>)
    5daa:	689c      	ldr	r4, [r3, #8]
    5dac:	6811      	ldr	r1, [r2, #0]
    5dae:	428c      	cmp	r4, r1
    5db0:	d107      	bne.n	5dc2 <z_time_slice+0x2e>
	z_reset_time_slice(curr);
    5db2:	4620      	mov	r0, r4
    5db4:	f7ff feec 	bl	5b90 <z_reset_time_slice>
	__asm__ volatile(
    5db8:	f385 8811 	msr	BASEPRI, r5
    5dbc:	f3bf 8f6f 	isb	sy
}
    5dc0:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
    5dc2:	2100      	movs	r1, #0
    5dc4:	6011      	str	r1, [r2, #0]
	int ret = slice_ticks;
    5dc6:	4a11      	ldr	r2, [pc, #68]	; (5e0c <z_time_slice+0x78>)
	if (slice_time(_current) && sliceable(_current)) {
    5dc8:	6812      	ldr	r2, [r2, #0]
    5dca:	b1c2      	cbz	r2, 5dfe <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
    5dcc:	89e2      	ldrh	r2, [r4, #14]
    5dce:	2a7f      	cmp	r2, #127	; 0x7f
    5dd0:	d815      	bhi.n	5dfe <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
    5dd2:	7b62      	ldrb	r2, [r4, #13]
    5dd4:	06d2      	lsls	r2, r2, #27
    5dd6:	d112      	bne.n	5dfe <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    5dd8:	4a0d      	ldr	r2, [pc, #52]	; (5e10 <z_time_slice+0x7c>)
    5dda:	f994 100e 	ldrsb.w	r1, [r4, #14]
    5dde:	6812      	ldr	r2, [r2, #0]
    5de0:	4291      	cmp	r1, r2
    5de2:	db0c      	blt.n	5dfe <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
    5de4:	4a0b      	ldr	r2, [pc, #44]	; (5e14 <z_time_slice+0x80>)
    5de6:	4294      	cmp	r4, r2
    5de8:	d009      	beq.n	5dfe <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
    5dea:	691a      	ldr	r2, [r3, #16]
    5dec:	4282      	cmp	r2, r0
    5dee:	dc03      	bgt.n	5df8 <z_time_slice+0x64>
		move_thread_to_end_of_prio_q(curr);
    5df0:	4620      	mov	r0, r4
    5df2:	f7ff feff 	bl	5bf4 <move_thread_to_end_of_prio_q>
    5df6:	e7dc      	b.n	5db2 <z_time_slice+0x1e>
			_current_cpu->slice_ticks -= ticks;
    5df8:	1a12      	subs	r2, r2, r0
		_current_cpu->slice_ticks = 0;
    5dfa:	611a      	str	r2, [r3, #16]
    5dfc:	e7dc      	b.n	5db8 <z_time_slice+0x24>
    5dfe:	2200      	movs	r2, #0
    5e00:	e7fb      	b.n	5dfa <z_time_slice+0x66>
    5e02:	bf00      	nop
    5e04:	2000119c 	.word	0x2000119c
    5e08:	200011c8 	.word	0x200011c8
    5e0c:	200011d0 	.word	0x200011d0
    5e10:	200011cc 	.word	0x200011cc
    5e14:	200001b8 	.word	0x200001b8

00005e18 <z_pend_curr>:
{
    5e18:	b570      	push	{r4, r5, r6, lr}
	pending_current = _current;
    5e1a:	480c      	ldr	r0, [pc, #48]	; (5e4c <z_pend_curr+0x34>)
    5e1c:	4d0c      	ldr	r5, [pc, #48]	; (5e50 <z_pend_curr+0x38>)
    5e1e:	6886      	ldr	r6, [r0, #8]
    5e20:	602e      	str	r6, [r5, #0]
{
    5e22:	460c      	mov	r4, r1
    5e24:	4611      	mov	r1, r2
    5e26:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
	__asm__ volatile(
    5e2a:	f04f 0620 	mov.w	r6, #32
    5e2e:	f3ef 8511 	mrs	r5, BASEPRI
    5e32:	f386 8812 	msr	BASEPRI_MAX, r6
    5e36:	f3bf 8f6f 	isb	sy
	pend_locked(_current, wait_q, timeout);
    5e3a:	6880      	ldr	r0, [r0, #8]
    5e3c:	f7ff ff60 	bl	5d00 <pend_locked>
	ret = arch_swap(key);
    5e40:	4620      	mov	r0, r4
}
    5e42:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5e46:	f7fb bec5 	b.w	1bd4 <arch_swap>
    5e4a:	bf00      	nop
    5e4c:	2000119c 	.word	0x2000119c
    5e50:	200011c8 	.word	0x200011c8

00005e54 <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    5e54:	b949      	cbnz	r1, 5e6a <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    5e56:	f3ef 8005 	mrs	r0, IPSR
    5e5a:	b930      	cbnz	r0, 5e6a <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
    5e5c:	4b05      	ldr	r3, [pc, #20]	; (5e74 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
    5e5e:	699a      	ldr	r2, [r3, #24]
    5e60:	689b      	ldr	r3, [r3, #8]
    5e62:	429a      	cmp	r2, r3
    5e64:	d001      	beq.n	5e6a <z_reschedule+0x16>
    5e66:	f7fb beb5 	b.w	1bd4 <arch_swap>
	__asm__ volatile(
    5e6a:	f381 8811 	msr	BASEPRI, r1
    5e6e:	f3bf 8f6f 	isb	sy
}
    5e72:	4770      	bx	lr
    5e74:	2000119c 	.word	0x2000119c

00005e78 <z_sched_start>:
{
    5e78:	b510      	push	{r4, lr}
	__asm__ volatile(
    5e7a:	f04f 0220 	mov.w	r2, #32
    5e7e:	f3ef 8411 	mrs	r4, BASEPRI
    5e82:	f382 8812 	msr	BASEPRI_MAX, r2
    5e86:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    5e8a:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
    5e8c:	0751      	lsls	r1, r2, #29
    5e8e:	d404      	bmi.n	5e9a <z_sched_start+0x22>
	__asm__ volatile(
    5e90:	f384 8811 	msr	BASEPRI, r4
    5e94:	f3bf 8f6f 	isb	sy
}
    5e98:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    5e9a:	f022 0204 	bic.w	r2, r2, #4
    5e9e:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
    5ea0:	f7ff fee2 	bl	5c68 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    5ea4:	4621      	mov	r1, r4
    5ea6:	4802      	ldr	r0, [pc, #8]	; (5eb0 <z_sched_start+0x38>)
}
    5ea8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
    5eac:	f7ff bfd2 	b.w	5e54 <z_reschedule>
    5eb0:	20002f0d 	.word	0x20002f0d

00005eb4 <z_impl_k_thread_suspend>:
{
    5eb4:	b570      	push	{r4, r5, r6, lr}
    5eb6:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    5eb8:	3018      	adds	r0, #24
    5eba:	f003 fa4f 	bl	935c <z_abort_timeout>
	__asm__ volatile(
    5ebe:	f04f 0320 	mov.w	r3, #32
    5ec2:	f3ef 8611 	mrs	r6, BASEPRI
    5ec6:	f383 8812 	msr	BASEPRI_MAX, r3
    5eca:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    5ece:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
    5ed2:	7b63      	ldrb	r3, [r4, #13]
    5ed4:	2a00      	cmp	r2, #0
    5ed6:	da05      	bge.n	5ee4 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    5ed8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    5edc:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    5ede:	4620      	mov	r0, r4
    5ee0:	f003 f97b 	bl	91da <sys_dlist_remove>
		update_cache(thread == _current);
    5ee4:	4d0b      	ldr	r5, [pc, #44]	; (5f14 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    5ee6:	7b63      	ldrb	r3, [r4, #13]
    5ee8:	68a8      	ldr	r0, [r5, #8]
    5eea:	f043 0310 	orr.w	r3, r3, #16
    5eee:	7363      	strb	r3, [r4, #13]
    5ef0:	1b03      	subs	r3, r0, r4
    5ef2:	4258      	negs	r0, r3
    5ef4:	4158      	adcs	r0, r3
    5ef6:	f7ff fe5f 	bl	5bb8 <update_cache>
	__asm__ volatile(
    5efa:	f386 8811 	msr	BASEPRI, r6
    5efe:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    5f02:	68ab      	ldr	r3, [r5, #8]
    5f04:	42a3      	cmp	r3, r4
    5f06:	d103      	bne.n	5f10 <z_impl_k_thread_suspend+0x5c>
}
    5f08:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    5f0c:	f003 b9f9 	b.w	9302 <z_reschedule_unlocked>
}
    5f10:	bd70      	pop	{r4, r5, r6, pc}
    5f12:	bf00      	nop
    5f14:	2000119c 	.word	0x2000119c

00005f18 <k_sched_lock>:
	__asm__ volatile(
    5f18:	f04f 0320 	mov.w	r3, #32
    5f1c:	f3ef 8111 	mrs	r1, BASEPRI
    5f20:	f383 8812 	msr	BASEPRI_MAX, r3
    5f24:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
    5f28:	4b04      	ldr	r3, [pc, #16]	; (5f3c <k_sched_lock+0x24>)
    5f2a:	689a      	ldr	r2, [r3, #8]
    5f2c:	7bd3      	ldrb	r3, [r2, #15]
    5f2e:	3b01      	subs	r3, #1
    5f30:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    5f32:	f381 8811 	msr	BASEPRI, r1
    5f36:	f3bf 8f6f 	isb	sy
}
    5f3a:	4770      	bx	lr
    5f3c:	2000119c 	.word	0x2000119c

00005f40 <k_sched_unlock>:
{
    5f40:	b510      	push	{r4, lr}
	__asm__ volatile(
    5f42:	f04f 0320 	mov.w	r3, #32
    5f46:	f3ef 8411 	mrs	r4, BASEPRI
    5f4a:	f383 8812 	msr	BASEPRI_MAX, r3
    5f4e:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
    5f52:	4b08      	ldr	r3, [pc, #32]	; (5f74 <k_sched_unlock+0x34>)
    5f54:	689a      	ldr	r2, [r3, #8]
    5f56:	7bd3      	ldrb	r3, [r2, #15]
    5f58:	3301      	adds	r3, #1
    5f5a:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    5f5c:	2000      	movs	r0, #0
    5f5e:	f7ff fe2b 	bl	5bb8 <update_cache>
	__asm__ volatile(
    5f62:	f384 8811 	msr	BASEPRI, r4
    5f66:	f3bf 8f6f 	isb	sy
}
    5f6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
    5f6e:	f003 b9c8 	b.w	9302 <z_reschedule_unlocked>
    5f72:	bf00      	nop
    5f74:	2000119c 	.word	0x2000119c

00005f78 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
    5f78:	4b04      	ldr	r3, [pc, #16]	; (5f8c <z_sched_init+0x14>)
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    5f7a:	2100      	movs	r1, #0
    5f7c:	f103 021c 	add.w	r2, r3, #28
	list->tail = (sys_dnode_t *)list;
    5f80:	e9c3 2207 	strd	r2, r2, [r3, #28]
    5f84:	4608      	mov	r0, r1
    5f86:	f7ff bed3 	b.w	5d30 <k_sched_time_slice_set>
    5f8a:	bf00      	nop
    5f8c:	2000119c 	.word	0x2000119c

00005f90 <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
    5f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    5f92:	f04f 0320 	mov.w	r3, #32
    5f96:	f3ef 8511 	mrs	r5, BASEPRI
    5f9a:	f383 8812 	msr	BASEPRI_MAX, r3
    5f9e:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
    5fa2:	4919      	ldr	r1, [pc, #100]	; (6008 <z_impl_k_yield+0x78>)
    5fa4:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    5fa6:	7b43      	ldrb	r3, [r0, #13]
    5fa8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    5fac:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    5fae:	f003 f914 	bl	91da <sys_dlist_remove>
	}
	queue_thread(_current);
    5fb2:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    5fb4:	7b5a      	ldrb	r2, [r3, #13]
	return list->head == list;
    5fb6:	4608      	mov	r0, r1
    5fb8:	f062 027f 	orn	r2, r2, #127	; 0x7f
    5fbc:	735a      	strb	r2, [r3, #13]
    5fbe:	f850 2f1c 	ldr.w	r2, [r0, #28]!
	return (node == list->tail) ? NULL : node->next;
    5fc2:	6a0c      	ldr	r4, [r1, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5fc4:	4282      	cmp	r2, r0
    5fc6:	bf08      	it	eq
    5fc8:	2200      	moveq	r2, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    5fca:	b922      	cbnz	r2, 5fd6 <z_impl_k_yield+0x46>
	node->prev = tail;
    5fcc:	e9c3 0400 	strd	r0, r4, [r3]
	tail->next = node;
    5fd0:	6023      	str	r3, [r4, #0]
	list->tail = node;
    5fd2:	620b      	str	r3, [r1, #32]
}
    5fd4:	e00c      	b.n	5ff0 <z_impl_k_yield+0x60>
	int32_t b1 = thread_1->base.prio;
    5fd6:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
    5fda:	f992 700e 	ldrsb.w	r7, [r2, #14]
	if (b1 != b2) {
    5fde:	42be      	cmp	r6, r7
    5fe0:	d00e      	beq.n	6000 <z_impl_k_yield+0x70>
		if (z_sched_prio_cmp(thread, t) > 0) {
    5fe2:	42b7      	cmp	r7, r6
    5fe4:	dd0c      	ble.n	6000 <z_impl_k_yield+0x70>
	sys_dnode_t *const prev = successor->prev;
    5fe6:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
    5fe8:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
    5fec:	600b      	str	r3, [r1, #0]
	successor->prev = node;
    5fee:	6053      	str	r3, [r2, #4]
	update_cache(1);
    5ff0:	2001      	movs	r0, #1
    5ff2:	f7ff fde1 	bl	5bb8 <update_cache>
    5ff6:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
    5ff8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    5ffc:	f7fb bdea 	b.w	1bd4 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
    6000:	42a2      	cmp	r2, r4
    6002:	d0e3      	beq.n	5fcc <z_impl_k_yield+0x3c>
    6004:	6812      	ldr	r2, [r2, #0]
    6006:	e7e0      	b.n	5fca <z_impl_k_yield+0x3a>
    6008:	2000119c 	.word	0x2000119c

0000600c <z_tick_sleep>:
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
    600c:	ea50 0301 	orrs.w	r3, r0, r1
{
    6010:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6014:	4605      	mov	r5, r0
    6016:	460e      	mov	r6, r1
	if (ticks == 0) {
    6018:	d103      	bne.n	6022 <z_tick_sleep+0x16>
	z_impl_k_yield();
    601a:	f7ff ffb9 	bl	5f90 <z_impl_k_yield>
		k_yield();
		return 0;
    601e:	2000      	movs	r0, #0
    6020:	e02c      	b.n	607c <z_tick_sleep+0x70>
	}

	k_timeout_t timeout = Z_TIMEOUT_TICKS(ticks);
	if (Z_TICK_ABS(ticks) <= 0) {
    6022:	1c83      	adds	r3, r0, #2
    6024:	f171 33ff 	sbcs.w	r3, r1, #4294967295	; 0xffffffff
    6028:	db2a      	blt.n	6080 <z_tick_sleep+0x74>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    602a:	f003 f9c9 	bl	93c0 <sys_clock_tick_get_32>
    602e:	1944      	adds	r4, r0, r5
    6030:	f04f 0320 	mov.w	r3, #32
    6034:	f3ef 8811 	mrs	r8, BASEPRI
    6038:	f383 8812 	msr	BASEPRI_MAX, r3
    603c:	f3bf 8f6f 	isb	sy
	}

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
    6040:	4f11      	ldr	r7, [pc, #68]	; (6088 <z_tick_sleep+0x7c>)
    6042:	4b12      	ldr	r3, [pc, #72]	; (608c <z_tick_sleep+0x80>)
    6044:	68b8      	ldr	r0, [r7, #8]
    6046:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
    6048:	f7ff fe42 	bl	5cd0 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    604c:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    604e:	4910      	ldr	r1, [pc, #64]	; (6090 <z_tick_sleep+0x84>)
    6050:	462a      	mov	r2, r5
    6052:	4633      	mov	r3, r6
    6054:	3018      	adds	r0, #24
    6056:	f000 f917 	bl	6288 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    605a:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
    605c:	7b53      	ldrb	r3, [r2, #13]
    605e:	f043 0310 	orr.w	r3, r3, #16
    6062:	7353      	strb	r3, [r2, #13]
    6064:	4640      	mov	r0, r8
    6066:	f7fb fdb5 	bl	1bd4 <arch_swap>

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    606a:	f003 f9a9 	bl	93c0 <sys_clock_tick_get_32>
    606e:	1a20      	subs	r0, r4, r0
    6070:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
    6074:	2801      	cmp	r0, #1
    6076:	f173 0300 	sbcs.w	r3, r3, #0
    607a:	dbd0      	blt.n	601e <z_tick_sleep+0x12>
		return ticks;
	}
#endif

	return 0;
}
    607c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
    6080:	f06f 0401 	mvn.w	r4, #1
    6084:	1a24      	subs	r4, r4, r0
    6086:	e7d3      	b.n	6030 <z_tick_sleep+0x24>
    6088:	2000119c 	.word	0x2000119c
    608c:	200011c8 	.word	0x200011c8
    6090:	000091ff 	.word	0x000091ff

00006094 <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    6094:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
    6098:	bf08      	it	eq
    609a:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
    609e:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    60a0:	d106      	bne.n	60b0 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
    60a2:	4b08      	ldr	r3, [pc, #32]	; (60c4 <z_impl_k_sleep+0x30>)
    60a4:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    60a6:	f7ff ff05 	bl	5eb4 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
    60aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
    60ae:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
    60b0:	f7ff ffac 	bl	600c <z_tick_sleep>
			return ((t * to_hz + off) / from_hz);
    60b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    60b8:	fb80 0303 	smull	r0, r3, r0, r3
    60bc:	0bc0      	lsrs	r0, r0, #15
    60be:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
    60c2:	e7f4      	b.n	60ae <z_impl_k_sleep+0x1a>
    60c4:	2000119c 	.word	0x2000119c

000060c8 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    60c8:	4b01      	ldr	r3, [pc, #4]	; (60d0 <z_impl_z_current_get+0x8>)
    60ca:	6898      	ldr	r0, [r3, #8]
    60cc:	4770      	bx	lr
    60ce:	bf00      	nop
    60d0:	2000119c 	.word	0x2000119c

000060d4 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
    60d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    60d8:	4604      	mov	r4, r0
    60da:	f04f 0320 	mov.w	r3, #32
    60de:	f3ef 8611 	mrs	r6, BASEPRI
    60e2:	f383 8812 	msr	BASEPRI_MAX, r3
    60e6:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
    60ea:	7b03      	ldrb	r3, [r0, #12]
    60ec:	07d9      	lsls	r1, r3, #31
    60ee:	d50b      	bpl.n	6108 <z_thread_abort+0x34>
	__asm__ volatile(
    60f0:	f386 8811 	msr	BASEPRI, r6
    60f4:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
    60f8:	4040      	eors	r0, r0
    60fa:	f380 8811 	msr	BASEPRI, r0
    60fe:	f04f 0004 	mov.w	r0, #4
    6102:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    6104:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    6108:	7b43      	ldrb	r3, [r0, #13]
    610a:	071a      	lsls	r2, r3, #28
    610c:	d504      	bpl.n	6118 <z_thread_abort+0x44>
    610e:	f386 8811 	msr	BASEPRI, r6
    6112:	f3bf 8f6f 	isb	sy
    6116:	e7f5      	b.n	6104 <z_thread_abort+0x30>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    6118:	f023 0220 	bic.w	r2, r3, #32
    611c:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
    6120:	09d2      	lsrs	r2, r2, #7
    6122:	d120      	bne.n	6166 <z_thread_abort+0x92>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    6124:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
    6126:	68a3      	ldr	r3, [r4, #8]
    6128:	b113      	cbz	r3, 6130 <z_thread_abort+0x5c>
			unpend_thread_no_timeout(thread);
    612a:	4620      	mov	r0, r4
    612c:	f003 f85d 	bl	91ea <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    6130:	f104 0018 	add.w	r0, r4, #24
    6134:	f003 f912 	bl	935c <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    6138:	f104 0758 	add.w	r7, r4, #88	; 0x58
    613c:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
    6140:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6142:	42bd      	cmp	r5, r7
    6144:	d000      	beq.n	6148 <z_thread_abort+0x74>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    6146:	b9b5      	cbnz	r5, 6176 <z_thread_abort+0xa2>
		update_cache(1);
    6148:	2001      	movs	r0, #1
    614a:	f7ff fd35 	bl	5bb8 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
    614e:	4b10      	ldr	r3, [pc, #64]	; (6190 <z_thread_abort+0xbc>)
    6150:	689b      	ldr	r3, [r3, #8]
    6152:	42a3      	cmp	r3, r4
    6154:	d1db      	bne.n	610e <z_thread_abort+0x3a>
    6156:	f3ef 8305 	mrs	r3, IPSR
    615a:	2b00      	cmp	r3, #0
    615c:	d1d7      	bne.n	610e <z_thread_abort+0x3a>
    615e:	4630      	mov	r0, r6
    6160:	f7fb fd38 	bl	1bd4 <arch_swap>
	return ret;
    6164:	e7d3      	b.n	610e <z_thread_abort+0x3a>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    6166:	f003 035f 	and.w	r3, r3, #95	; 0x5f
    616a:	f043 0308 	orr.w	r3, r3, #8
    616e:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    6170:	f003 f833 	bl	91da <sys_dlist_remove>
}
    6174:	e7d7      	b.n	6126 <z_thread_abort+0x52>
		unpend_thread_no_timeout(thread);
    6176:	4628      	mov	r0, r5
    6178:	f003 f837 	bl	91ea <unpend_thread_no_timeout>
    617c:	f105 0018 	add.w	r0, r5, #24
    6180:	f003 f8ec 	bl	935c <z_abort_timeout>
    6184:	f8c5 8078 	str.w	r8, [r5, #120]	; 0x78
		ready_thread(thread);
    6188:	4628      	mov	r0, r5
    618a:	f7ff fd6d 	bl	5c68 <ready_thread>
    618e:	e7d7      	b.n	6140 <z_thread_abort+0x6c>
    6190:	2000119c 	.word	0x2000119c

00006194 <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
    6194:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
    6196:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
    619a:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
    619c:	e9cd 6700 	strd	r6, r7, [sp]
    61a0:	f7ff fe3a 	bl	5e18 <z_pend_curr>

	if (data != NULL) {
    61a4:	b11c      	cbz	r4, 61ae <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
    61a6:	4b03      	ldr	r3, [pc, #12]	; (61b4 <z_sched_wait+0x20>)
    61a8:	689b      	ldr	r3, [r3, #8]
    61aa:	695b      	ldr	r3, [r3, #20]
    61ac:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
    61ae:	b002      	add	sp, #8
    61b0:	bdd0      	pop	{r4, r6, r7, pc}
    61b2:	bf00      	nop
    61b4:	2000119c 	.word	0x2000119c

000061b8 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
    61b8:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
    61ba:	4806      	ldr	r0, [pc, #24]	; (61d4 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
    61bc:	4a06      	ldr	r2, [pc, #24]	; (61d8 <z_data_copy+0x20>)
    61be:	4907      	ldr	r1, [pc, #28]	; (61dc <z_data_copy+0x24>)
    61c0:	1a12      	subs	r2, r2, r0
    61c2:	f002 ffa6 	bl	9112 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    61c6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
    61ca:	4a05      	ldr	r2, [pc, #20]	; (61e0 <z_data_copy+0x28>)
    61cc:	4905      	ldr	r1, [pc, #20]	; (61e4 <z_data_copy+0x2c>)
    61ce:	4806      	ldr	r0, [pc, #24]	; (61e8 <z_data_copy+0x30>)
    61d0:	f002 bf9f 	b.w	9112 <z_early_memcpy>
    61d4:	20000000 	.word	0x20000000
    61d8:	2000013a 	.word	0x2000013a
    61dc:	0000aae0 	.word	0x0000aae0
    61e0:	00000000 	.word	0x00000000
    61e4:	0000aae0 	.word	0x0000aae0
    61e8:	20000000 	.word	0x20000000

000061ec <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    61ec:	4b03      	ldr	r3, [pc, #12]	; (61fc <elapsed+0x10>)
    61ee:	681b      	ldr	r3, [r3, #0]
    61f0:	b90b      	cbnz	r3, 61f6 <elapsed+0xa>
    61f2:	f7fd bb55 	b.w	38a0 <sys_clock_elapsed>
}
    61f6:	2000      	movs	r0, #0
    61f8:	4770      	bx	lr
    61fa:	bf00      	nop
    61fc:	200011d4 	.word	0x200011d4

00006200 <next_timeout>:

static int32_t next_timeout(void)
{
    6200:	b510      	push	{r4, lr}
	return list->head == list;
    6202:	4b11      	ldr	r3, [pc, #68]	; (6248 <next_timeout+0x48>)
    6204:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6206:	429c      	cmp	r4, r3
    6208:	d10a      	bne.n	6220 <next_timeout+0x20>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    620a:	f7ff ffef 	bl	61ec <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
    620e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    6212:	4b0e      	ldr	r3, [pc, #56]	; (624c <next_timeout+0x4c>)
    6214:	691b      	ldr	r3, [r3, #16]
    6216:	b113      	cbz	r3, 621e <next_timeout+0x1e>
    6218:	4298      	cmp	r0, r3
    621a:	bfa8      	it	ge
    621c:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    621e:	bd10      	pop	{r4, pc}
	int32_t ticks_elapsed = elapsed();
    6220:	f7ff ffe4 	bl	61ec <elapsed>
	if ((to == NULL) ||
    6224:	2c00      	cmp	r4, #0
    6226:	d0f2      	beq.n	620e <next_timeout+0xe>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
    6228:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
    622c:	1a1b      	subs	r3, r3, r0
    622e:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
    6232:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    6236:	f172 0100 	sbcs.w	r1, r2, #0
    623a:	dae8      	bge.n	620e <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
    623c:	2a00      	cmp	r2, #0
    623e:	bfac      	ite	ge
    6240:	4618      	movge	r0, r3
    6242:	2000      	movlt	r0, #0
    6244:	e7e5      	b.n	6212 <next_timeout+0x12>
    6246:	bf00      	nop
    6248:	20000120 	.word	0x20000120
    624c:	2000119c 	.word	0x2000119c

00006250 <remove_timeout>:
{
    6250:	b530      	push	{r4, r5, lr}
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    6252:	b170      	cbz	r0, 6272 <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
    6254:	4b0b      	ldr	r3, [pc, #44]	; (6284 <remove_timeout+0x34>)
    6256:	685b      	ldr	r3, [r3, #4]
    6258:	4298      	cmp	r0, r3
    625a:	d00a      	beq.n	6272 <remove_timeout+0x22>
    625c:	6803      	ldr	r3, [r0, #0]
	if (next(t) != NULL) {
    625e:	b143      	cbz	r3, 6272 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
    6260:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    6264:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    6268:	1912      	adds	r2, r2, r4
    626a:	eb41 0105 	adc.w	r1, r1, r5
    626e:	e9c3 2104 	strd	r2, r1, [r3, #16]
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
    6272:	e9d0 3200 	ldrd	r3, r2, [r0]

	prev->next = next;
    6276:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    6278:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    627a:	2300      	movs	r3, #0
	node->prev = NULL;
    627c:	e9c0 3300 	strd	r3, r3, [r0]
}
    6280:	bd30      	pop	{r4, r5, pc}
    6282:	bf00      	nop
    6284:	20000120 	.word	0x20000120

00006288 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    6288:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    628c:	bf08      	it	eq
    628e:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
    6292:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6294:	4604      	mov	r4, r0
    6296:	461d      	mov	r5, r3
    6298:	4616      	mov	r6, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    629a:	d061      	beq.n	6360 <z_add_timeout+0xd8>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    629c:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
    629e:	f04f 0320 	mov.w	r3, #32
    62a2:	f3ef 8711 	mrs	r7, BASEPRI
    62a6:	f383 8812 	msr	BASEPRI_MAX, r3
    62aa:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    62ae:	3201      	adds	r2, #1
    62b0:	f175 33ff 	sbcs.w	r3, r5, #4294967295	; 0xffffffff
    62b4:	da24      	bge.n	6300 <z_add_timeout+0x78>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    62b6:	4930      	ldr	r1, [pc, #192]	; (6378 <z_add_timeout+0xf0>)
    62b8:	e9d1 2000 	ldrd	r2, r0, [r1]
    62bc:	f06f 0301 	mvn.w	r3, #1
    62c0:	1a9b      	subs	r3, r3, r2
    62c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    62c6:	eb62 0000 	sbc.w	r0, r2, r0
    62ca:	1b9e      	subs	r6, r3, r6
    62cc:	eb60 0005 	sbc.w	r0, r0, r5

			to->dticks = MAX(1, ticks);
    62d0:	2e01      	cmp	r6, #1
    62d2:	f170 0300 	sbcs.w	r3, r0, #0
    62d6:	da01      	bge.n	62dc <z_add_timeout+0x54>
    62d8:	2601      	movs	r6, #1
    62da:	2000      	movs	r0, #0
    62dc:	e9c4 6004 	strd	r6, r0, [r4, #16]
	return list->head == list;
    62e0:	4e26      	ldr	r6, [pc, #152]	; (637c <z_add_timeout+0xf4>)
    62e2:	f8d6 c000 	ldr.w	ip, [r6]
	return (node == list->tail) ? NULL : node->next;
    62e6:	6875      	ldr	r5, [r6, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    62e8:	45b4      	cmp	ip, r6
    62ea:	bf08      	it	eq
    62ec:	f04f 0c00 	moveq.w	ip, #0
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
		}

		for (t = first(); t != NULL; t = next(t)) {
    62f0:	f1bc 0f00 	cmp.w	ip, #0
    62f4:	d10d      	bne.n	6312 <z_add_timeout+0x8a>
	node->prev = tail;
    62f6:	e9c4 6500 	strd	r6, r5, [r4]
	tail->next = node;
    62fa:	602c      	str	r4, [r5, #0]
	list->tail = node;
    62fc:	6074      	str	r4, [r6, #4]
}
    62fe:	e01c      	b.n	633a <z_add_timeout+0xb2>
			to->dticks = timeout.ticks + 1 + elapsed();
    6300:	f7ff ff74 	bl	61ec <elapsed>
    6304:	3601      	adds	r6, #1
    6306:	f145 0500 	adc.w	r5, r5, #0
    630a:	1836      	adds	r6, r6, r0
    630c:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
    6310:	e7e4      	b.n	62dc <z_add_timeout+0x54>
			if (t->dticks > to->dticks) {
    6312:	e9dc 2004 	ldrd	r2, r0, [ip, #16]
    6316:	e9d4 3104 	ldrd	r3, r1, [r4, #16]
    631a:	4293      	cmp	r3, r2
    631c:	eb71 0e00 	sbcs.w	lr, r1, r0
    6320:	da1f      	bge.n	6362 <z_add_timeout+0xda>
				t->dticks -= to->dticks;
    6322:	1ad2      	subs	r2, r2, r3
	sys_dnode_t *const prev = successor->prev;
    6324:	f8dc 3004 	ldr.w	r3, [ip, #4]
    6328:	eb60 0001 	sbc.w	r0, r0, r1
    632c:	e9cc 2004 	strd	r2, r0, [ip, #16]
	node->next = successor;
    6330:	e9c4 c300 	strd	ip, r3, [r4]
	prev->next = node;
    6334:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    6336:	f8cc 4004 	str.w	r4, [ip, #4]
	return list->head == list;
    633a:	6833      	ldr	r3, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    633c:	42b3      	cmp	r3, r6
    633e:	d00b      	beq.n	6358 <z_add_timeout+0xd0>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    6340:	429c      	cmp	r4, r3
    6342:	d109      	bne.n	6358 <z_add_timeout+0xd0>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    6344:	f7ff ff5c 	bl	6200 <next_timeout>

			if (next_time == 0 ||
    6348:	b118      	cbz	r0, 6352 <z_add_timeout+0xca>
			    _current_cpu->slice_ticks != next_time) {
    634a:	4b0d      	ldr	r3, [pc, #52]	; (6380 <z_add_timeout+0xf8>)
			if (next_time == 0 ||
    634c:	691b      	ldr	r3, [r3, #16]
    634e:	4283      	cmp	r3, r0
    6350:	d002      	beq.n	6358 <z_add_timeout+0xd0>
				sys_clock_set_timeout(next_time, false);
    6352:	2100      	movs	r1, #0
    6354:	f7fd fa72 	bl	383c <sys_clock_set_timeout>
	__asm__ volatile(
    6358:	f387 8811 	msr	BASEPRI, r7
    635c:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    6360:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			to->dticks -= t->dticks;
    6362:	1a9b      	subs	r3, r3, r2
    6364:	eb61 0100 	sbc.w	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
    6368:	45ac      	cmp	ip, r5
    636a:	e9c4 3104 	strd	r3, r1, [r4, #16]
    636e:	d0c2      	beq.n	62f6 <z_add_timeout+0x6e>
    6370:	f8dc c000 	ldr.w	ip, [ip]
    6374:	e7bc      	b.n	62f0 <z_add_timeout+0x68>
    6376:	bf00      	nop
    6378:	200002b8 	.word	0x200002b8
    637c:	20000120 	.word	0x20000120
    6380:	2000119c 	.word	0x2000119c

00006384 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
    6384:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6388:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    638a:	f7ff fd03 	bl	5d94 <z_time_slice>
	__asm__ volatile(
    638e:	f04f 0320 	mov.w	r3, #32
    6392:	f3ef 8611 	mrs	r6, BASEPRI
    6396:	f383 8812 	msr	BASEPRI_MAX, r3
    639a:	f3bf 8f6f 	isb	sy
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
    639e:	4f23      	ldr	r7, [pc, #140]	; (642c <sys_clock_announce+0xa8>)
	return list->head == list;
    63a0:	f8df 808c 	ldr.w	r8, [pc, #140]	; 6430 <sys_clock_announce+0xac>
    63a4:	f8d8 0000 	ldr.w	r0, [r8]

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
    63a8:	4a22      	ldr	r2, [pc, #136]	; (6434 <sys_clock_announce+0xb0>)
	announce_remaining = ticks;
    63aa:	603c      	str	r4, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    63ac:	4540      	cmp	r0, r8
		curr_tick += dt;
    63ae:	e9d2 3e00 	ldrd	r3, lr, [r2]
    63b2:	ea4f 71e4 	mov.w	r1, r4, asr #31
    63b6:	d00b      	beq.n	63d0 <sys_clock_announce+0x4c>
	while (first() != NULL && first()->dticks <= announce_remaining) {
    63b8:	b150      	cbz	r0, 63d0 <sys_clock_announce+0x4c>
    63ba:	e9d0 5c04 	ldrd	r5, ip, [r0, #16]
    63be:	42ac      	cmp	r4, r5
    63c0:	eb71 090c 	sbcs.w	r9, r1, ip
    63c4:	da16      	bge.n	63f4 <sys_clock_announce+0x70>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    63c6:	1b2d      	subs	r5, r5, r4
    63c8:	eb6c 0c01 	sbc.w	ip, ip, r1
    63cc:	e9c0 5c04 	strd	r5, ip, [r0, #16]
	}

	curr_tick += announce_remaining;
    63d0:	18e3      	adds	r3, r4, r3
    63d2:	eb4e 0101 	adc.w	r1, lr, r1
	announce_remaining = 0;
    63d6:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
    63d8:	e9c2 3100 	strd	r3, r1, [r2]
	announce_remaining = 0;
    63dc:	603c      	str	r4, [r7, #0]

	sys_clock_set_timeout(next_timeout(), false);
    63de:	f7ff ff0f 	bl	6200 <next_timeout>
    63e2:	4621      	mov	r1, r4
    63e4:	f7fd fa2a 	bl	383c <sys_clock_set_timeout>
	__asm__ volatile(
    63e8:	f386 8811 	msr	BASEPRI, r6
    63ec:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    63f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
    63f4:	18eb      	adds	r3, r5, r3
    63f6:	eb4e 71e5 	adc.w	r1, lr, r5, asr #31
    63fa:	e9c2 3100 	strd	r3, r1, [r2]
		t->dticks = 0;
    63fe:	2200      	movs	r2, #0
    6400:	2300      	movs	r3, #0
    6402:	e9c0 2304 	strd	r2, r3, [r0, #16]
		remove_timeout(t);
    6406:	f7ff ff23 	bl	6250 <remove_timeout>
    640a:	f386 8811 	msr	BASEPRI, r6
    640e:	f3bf 8f6f 	isb	sy
		t->fn(t);
    6412:	6883      	ldr	r3, [r0, #8]
    6414:	4798      	blx	r3
	__asm__ volatile(
    6416:	f04f 0320 	mov.w	r3, #32
    641a:	f3ef 8611 	mrs	r6, BASEPRI
    641e:	f383 8812 	msr	BASEPRI_MAX, r3
    6422:	f3bf 8f6f 	isb	sy
		announce_remaining -= dt;
    6426:	683c      	ldr	r4, [r7, #0]
    6428:	1b64      	subs	r4, r4, r5
    642a:	e7bb      	b.n	63a4 <sys_clock_announce+0x20>
    642c:	200011d4 	.word	0x200011d4
    6430:	20000120 	.word	0x20000120
    6434:	200002b8 	.word	0x200002b8

00006438 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    6438:	b510      	push	{r4, lr}
    643a:	f04f 0320 	mov.w	r3, #32
    643e:	f3ef 8411 	mrs	r4, BASEPRI
    6442:	f383 8812 	msr	BASEPRI_MAX, r3
    6446:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + elapsed();
    644a:	f7ff fecf 	bl	61ec <elapsed>
    644e:	4a06      	ldr	r2, [pc, #24]	; (6468 <sys_clock_tick_get+0x30>)
    6450:	4603      	mov	r3, r0
    6452:	e9d2 0100 	ldrd	r0, r1, [r2]
    6456:	1818      	adds	r0, r3, r0
    6458:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
	__asm__ volatile(
    645c:	f384 8811 	msr	BASEPRI, r4
    6460:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    6464:	bd10      	pop	{r4, pc}
    6466:	bf00      	nop
    6468:	200002b8 	.word	0x200002b8

0000646c <boot_banner>:
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
    646c:	4801      	ldr	r0, [pc, #4]	; (6474 <boot_banner+0x8>)
    646e:	f000 ba90 	b.w	6992 <printk>
    6472:	bf00      	nop
    6474:	0000aaa8 	.word	0x0000aaa8

00006478 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
    6478:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
    647a:	4b09      	ldr	r3, [pc, #36]	; (64a0 <k_sys_work_q_init+0x28>)
    647c:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
    647e:	ab02      	add	r3, sp, #8
	struct k_work_queue_config cfg = {
    6480:	2400      	movs	r4, #0
	k_work_queue_start(&k_sys_work_q,
    6482:	9300      	str	r3, [sp, #0]
    6484:	4907      	ldr	r1, [pc, #28]	; (64a4 <k_sys_work_q_init+0x2c>)
    6486:	4808      	ldr	r0, [pc, #32]	; (64a8 <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
    6488:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
    648c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6490:	f44f 6280 	mov.w	r2, #1024	; 0x400
    6494:	f7ff fb14 	bl	5ac0 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
    6498:	4620      	mov	r0, r4
    649a:	b004      	add	sp, #16
    649c:	bd10      	pop	{r4, pc}
    649e:	bf00      	nop
    64a0:	0000aad6 	.word	0x0000aad6
    64a4:	20006140 	.word	0x20006140
    64a8:	200002c0 	.word	0x200002c0

000064ac <flash_area_id_from_multi_image_slot>:
    switch (slot) {
    64ac:	b129      	cbz	r1, 64ba <flash_area_id_from_multi_image_slot+0xe>
    return -EINVAL; /* flash_area_open will fail on that */
    64ae:	2901      	cmp	r1, #1
    64b0:	bf0c      	ite	eq
    64b2:	2005      	moveq	r0, #5
    64b4:	f06f 0015 	mvnne.w	r0, #21
    64b8:	4770      	bx	lr
    case 0: return FLASH_AREA_IMAGE_PRIMARY(image_index);
    64ba:	2002      	movs	r0, #2
}
    64bc:	4770      	bx	lr

000064be <flash_area_get_device_id>:

uint8_t flash_area_get_device_id(const struct flash_area *fa)
{
	(void)fa;
	return FLASH_DEVICE_ID;
}
    64be:	2000      	movs	r0, #0
    64c0:	4770      	bx	lr

000064c2 <bootutil_tlv_iter_begin>:
 *          -1 on errors
 */
int
bootutil_tlv_iter_begin(struct image_tlv_iter *it, const struct image_header *hdr,
                        const struct flash_area *fap, uint16_t type, bool prot)
{
    64c2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    64c6:	460e      	mov	r6, r1
    64c8:	4617      	mov	r7, r2
    64ca:	4699      	mov	r9, r3
    uint32_t off_;
    struct image_tlv_info info;

    if (it == NULL || hdr == NULL || fap == NULL) {
    64cc:	4604      	mov	r4, r0
    64ce:	b928      	cbnz	r0, 64dc <bootutil_tlv_iter_begin+0x1a>
        return -1;
    64d0:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    it->prot_end = off_ + it->hdr->ih_protect_tlv_size;
    it->tlv_end = off_ + it->hdr->ih_protect_tlv_size + info.it_tlv_tot;
    // position on first TLV
    it->tlv_off = off_ + sizeof(info);
    return 0;
}
    64d4:	4640      	mov	r0, r8
    64d6:	b003      	add	sp, #12
    64d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (it == NULL || hdr == NULL || fap == NULL) {
    64dc:	2900      	cmp	r1, #0
    64de:	d0f7      	beq.n	64d0 <bootutil_tlv_iter_begin+0xe>
    64e0:	2a00      	cmp	r2, #0
    64e2:	d0f5      	beq.n	64d0 <bootutil_tlv_iter_begin+0xe>
    off_ = BOOT_TLV_OFF(hdr);
    64e4:	68cb      	ldr	r3, [r1, #12]
    64e6:	890d      	ldrh	r5, [r1, #8]
    64e8:	441d      	add	r5, r3
    if (LOAD_IMAGE_DATA(hdr, fap, off_, &info, sizeof(info))) {
    64ea:	2304      	movs	r3, #4
    64ec:	eb0d 0203 	add.w	r2, sp, r3
    64f0:	4629      	mov	r1, r5
    64f2:	4638      	mov	r0, r7
    64f4:	f000 fb9c 	bl	6c30 <flash_area_read>
    64f8:	4680      	mov	r8, r0
    64fa:	2800      	cmp	r0, #0
    64fc:	d1e8      	bne.n	64d0 <bootutil_tlv_iter_begin+0xe>
    if (info.it_magic == IMAGE_TLV_PROT_INFO_MAGIC) {
    64fe:	f8bd 1004 	ldrh.w	r1, [sp, #4]
        if (hdr->ih_protect_tlv_size != info.it_tlv_tot) {
    6502:	8973      	ldrh	r3, [r6, #10]
    if (info.it_magic == IMAGE_TLV_PROT_INFO_MAGIC) {
    6504:	f646 1208 	movw	r2, #26888	; 0x6908
    6508:	4291      	cmp	r1, r2
    650a:	d125      	bne.n	6558 <bootutil_tlv_iter_begin+0x96>
        if (hdr->ih_protect_tlv_size != info.it_tlv_tot) {
    650c:	f8bd 1006 	ldrh.w	r1, [sp, #6]
    6510:	4299      	cmp	r1, r3
    6512:	d1dd      	bne.n	64d0 <bootutil_tlv_iter_begin+0xe>
        if (LOAD_IMAGE_DATA(hdr, fap, off_ + info.it_tlv_tot,
    6514:	2304      	movs	r3, #4
    6516:	eb0d 0203 	add.w	r2, sp, r3
    651a:	4429      	add	r1, r5
    651c:	4638      	mov	r0, r7
    651e:	f000 fb87 	bl	6c30 <flash_area_read>
    6522:	2800      	cmp	r0, #0
    6524:	d1d4      	bne.n	64d0 <bootutil_tlv_iter_begin+0xe>
    if (info.it_magic != IMAGE_TLV_INFO_MAGIC) {
    6526:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    652a:	f646 1307 	movw	r3, #26887	; 0x6907
    652e:	429a      	cmp	r2, r3
    6530:	d1ce      	bne.n	64d0 <bootutil_tlv_iter_begin+0xe>
    it->fap = fap;
    6532:	e9c4 6700 	strd	r6, r7, [r4]
    it->prot = prot;
    6536:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    it->type = type;
    653a:	f8a4 9008 	strh.w	r9, [r4, #8]
    it->prot = prot;
    653e:	72a3      	strb	r3, [r4, #10]
    it->prot_end = off_ + it->hdr->ih_protect_tlv_size;
    6540:	8973      	ldrh	r3, [r6, #10]
    it->tlv_end = off_ + it->hdr->ih_protect_tlv_size + info.it_tlv_tot;
    6542:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    it->prot_end = off_ + it->hdr->ih_protect_tlv_size;
    6546:	442b      	add	r3, r5
    6548:	60e3      	str	r3, [r4, #12]
    it->tlv_end = off_ + it->hdr->ih_protect_tlv_size + info.it_tlv_tot;
    654a:	8973      	ldrh	r3, [r6, #10]
    654c:	4413      	add	r3, r2
    654e:	442b      	add	r3, r5
    it->tlv_off = off_ + sizeof(info);
    6550:	3504      	adds	r5, #4
    it->tlv_end = off_ + it->hdr->ih_protect_tlv_size + info.it_tlv_tot;
    6552:	6163      	str	r3, [r4, #20]
    it->tlv_off = off_ + sizeof(info);
    6554:	6125      	str	r5, [r4, #16]
    return 0;
    6556:	e7bd      	b.n	64d4 <bootutil_tlv_iter_begin+0x12>
    } else if (hdr->ih_protect_tlv_size != 0) {
    6558:	2b00      	cmp	r3, #0
    655a:	d0e4      	beq.n	6526 <bootutil_tlv_iter_begin+0x64>
    655c:	e7b8      	b.n	64d0 <bootutil_tlv_iter_begin+0xe>

0000655e <bootutil_tlv_iter_next>:
 *          -1 on errors
 */
int
bootutil_tlv_iter_next(struct image_tlv_iter *it, uint32_t *off, uint16_t *len,
                       uint16_t *type)
{
    655e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    6562:	460e      	mov	r6, r1
    6564:	4617      	mov	r7, r2
    6566:	461d      	mov	r5, r3
    struct image_tlv tlv;
    int rc;

    if (it == NULL || it->hdr == NULL || it->fap == NULL) {
    6568:	4604      	mov	r4, r0
    656a:	b920      	cbnz	r0, 6576 <bootutil_tlv_iter_next+0x18>
        return -1;
    656c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff

        it->tlv_off += sizeof(tlv) + tlv.it_len;
    }

    return 1;
}
    6570:	b002      	add	sp, #8
    6572:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (it == NULL || it->hdr == NULL || it->fap == NULL) {
    6576:	6803      	ldr	r3, [r0, #0]
    6578:	2b00      	cmp	r3, #0
    657a:	d0f7      	beq.n	656c <bootutil_tlv_iter_next+0xe>
    657c:	6843      	ldr	r3, [r0, #4]
    657e:	2b00      	cmp	r3, #0
    6580:	d0f4      	beq.n	656c <bootutil_tlv_iter_next+0xe>
        if (it->type == IMAGE_TLV_ANY || tlv.it_type == it->type) {
    6582:	f64f 78ff 	movw	r8, #65535	; 0xffff
    while (it->tlv_off < it->tlv_end) {
    6586:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    658a:	429a      	cmp	r2, r3
    658c:	d216      	bcs.n	65bc <bootutil_tlv_iter_next+0x5e>
        if (it->hdr->ih_protect_tlv_size > 0 && it->tlv_off == it->prot_end) {
    658e:	6823      	ldr	r3, [r4, #0]
    6590:	895b      	ldrh	r3, [r3, #10]
    6592:	b123      	cbz	r3, 659e <bootutil_tlv_iter_next+0x40>
    6594:	68e3      	ldr	r3, [r4, #12]
    6596:	4293      	cmp	r3, r2
            it->tlv_off += sizeof(struct image_tlv_info);
    6598:	bf04      	itt	eq
    659a:	3304      	addeq	r3, #4
    659c:	6123      	streq	r3, [r4, #16]
        rc = LOAD_IMAGE_DATA(it->hdr, it->fap, it->tlv_off, &tlv, sizeof tlv);
    659e:	2304      	movs	r3, #4
    65a0:	6921      	ldr	r1, [r4, #16]
    65a2:	6860      	ldr	r0, [r4, #4]
    65a4:	eb0d 0203 	add.w	r2, sp, r3
    65a8:	f000 fb42 	bl	6c30 <flash_area_read>
        if (rc) {
    65ac:	2800      	cmp	r0, #0
    65ae:	d1dd      	bne.n	656c <bootutil_tlv_iter_next+0xe>
        if (it->prot && it->tlv_off >= it->prot_end) {
    65b0:	7aa3      	ldrb	r3, [r4, #10]
    65b2:	b12b      	cbz	r3, 65c0 <bootutil_tlv_iter_next+0x62>
    65b4:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
    65b8:	429a      	cmp	r2, r3
    65ba:	d301      	bcc.n	65c0 <bootutil_tlv_iter_next+0x62>
            return 1;
    65bc:	2001      	movs	r0, #1
    65be:	e7d7      	b.n	6570 <bootutil_tlv_iter_next+0x12>
        if (it->type == IMAGE_TLV_ANY || tlv.it_type == it->type) {
    65c0:	8923      	ldrh	r3, [r4, #8]
        it->tlv_off += sizeof(tlv) + tlv.it_len;
    65c2:	f8bd 1006 	ldrh.w	r1, [sp, #6]
        if (it->type == IMAGE_TLV_ANY || tlv.it_type == it->type) {
    65c6:	4543      	cmp	r3, r8
    65c8:	f101 0204 	add.w	r2, r1, #4
    65cc:	d003      	beq.n	65d6 <bootutil_tlv_iter_next+0x78>
    65ce:	f8bd c004 	ldrh.w	ip, [sp, #4]
    65d2:	459c      	cmp	ip, r3
    65d4:	d10b      	bne.n	65ee <bootutil_tlv_iter_next+0x90>
            if (type != NULL) {
    65d6:	b115      	cbz	r5, 65de <bootutil_tlv_iter_next+0x80>
                *type = tlv.it_type;
    65d8:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    65dc:	802b      	strh	r3, [r5, #0]
            *off = it->tlv_off + sizeof(tlv);
    65de:	6923      	ldr	r3, [r4, #16]
    65e0:	3304      	adds	r3, #4
    65e2:	6033      	str	r3, [r6, #0]
            *len = tlv.it_len;
    65e4:	8039      	strh	r1, [r7, #0]
            it->tlv_off += sizeof(tlv) + tlv.it_len;
    65e6:	6923      	ldr	r3, [r4, #16]
    65e8:	4413      	add	r3, r2
    65ea:	6123      	str	r3, [r4, #16]
            return 0;
    65ec:	e7c0      	b.n	6570 <bootutil_tlv_iter_next+0x12>
        it->tlv_off += sizeof(tlv) + tlv.it_len;
    65ee:	6923      	ldr	r3, [r4, #16]
    65f0:	4413      	add	r3, r2
    65f2:	6123      	str	r3, [r4, #16]
    65f4:	e7c7      	b.n	6586 <bootutil_tlv_iter_next+0x28>

000065f6 <boot_fih_memequal>:
    return memcmp(s1, s2, n);
    65f6:	f000 bba9 	b.w	6d4c <memcmp>

000065fa <boot_trailer_sz>:
    return BOOT_STATUS_MAX_ENTRIES * boot_status_entry_sz(min_write_sz);
    65fa:	f44f 73c0 	mov.w	r3, #384	; 0x180
    65fe:	4358      	muls	r0, r3
}
    6600:	3030      	adds	r0, #48	; 0x30
    6602:	4770      	bx	lr

00006604 <boot_status_entries>:
	return fa->fa_id;
    6604:	780b      	ldrb	r3, [r1, #0]
    if (flash_area_get_id(fap) == FLASH_AREA_IMAGE_PRIMARY(image_index) ||
    6606:	2b02      	cmp	r3, #2
    6608:	d006      	beq.n	6618 <boot_status_entries+0x14>
        return BOOT_STATUS_STATE_COUNT * BOOT_STATUS_MAX_ENTRIES;
    660a:	2b05      	cmp	r3, #5
    660c:	bf14      	ite	ne
    660e:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    6612:	f44f 70c0 	moveq.w	r0, #384	; 0x180
    6616:	4770      	bx	lr
    6618:	f44f 70c0 	mov.w	r0, #384	; 0x180
}
    661c:	4770      	bx	lr

0000661e <boot_status_off>:
{
    661e:	b510      	push	{r4, lr}
    6620:	4604      	mov	r4, r0
    elem_sz = flash_area_align(fap);
    6622:	f000 fb43 	bl	6cac <flash_area_align>
    return flash_area_get_size(fap) - off_from_end;
    6626:	68a3      	ldr	r3, [r4, #8]
}
    6628:	f44f 72c0 	mov.w	r2, #384	; 0x180
    return flash_area_get_size(fap) - off_from_end;
    662c:	3b30      	subs	r3, #48	; 0x30
}
    662e:	fb02 3010 	mls	r0, r2, r0, r3
    6632:	bd10      	pop	{r4, pc}

00006634 <boot_write_copy_done>:
    return ALIGN_DOWN(boot_magic_off(fap) - BOOT_MAX_ALIGN, BOOT_MAX_ALIGN);
    6634:	6881      	ldr	r1, [r0, #8]
    6636:	3918      	subs	r1, #24
    6638:	f021 0107 	bic.w	r1, r1, #7
    return boot_write_trailer_flag(fap, off, BOOT_FLAG_SET);
    663c:	2201      	movs	r2, #1
    663e:	3908      	subs	r1, #8
    6640:	f001 b8ed 	b.w	781e <boot_write_trailer_flag>

00006644 <boot_write_swap_size>:
{
    6644:	b513      	push	{r0, r1, r4, lr}
    6646:	4604      	mov	r4, r0
    6648:	9101      	str	r1, [sp, #4]
    return boot_swap_info_off(fap) - BOOT_MAX_ALIGN;
    664a:	f001 f879 	bl	7740 <boot_swap_info_off>
    return boot_write_trailer(fap, off, (const uint8_t *) &swap_size, 4);
    664e:	2304      	movs	r3, #4
    6650:	f1a0 0108 	sub.w	r1, r0, #8
    6654:	eb0d 0203 	add.w	r2, sp, r3
    6658:	4620      	mov	r0, r4
    665a:	f001 f8b4 	bl	77c6 <boot_write_trailer>
}
    665e:	b002      	add	sp, #8
    6660:	bd10      	pop	{r4, pc}

00006662 <boot_read_image_headers>:
{
    6662:	b570      	push	{r4, r5, r6, lr}
            rc = boot_read_image_header(state, i, boot_img_hdr(state, i), bs);
    6664:	4613      	mov	r3, r2
{
    6666:	460e      	mov	r6, r1
    6668:	4615      	mov	r5, r2
            rc = boot_read_image_header(state, i, boot_img_hdr(state, i), bs);
    666a:	2100      	movs	r1, #0
    666c:	4602      	mov	r2, r0
{
    666e:	4604      	mov	r4, r0
            rc = boot_read_image_header(state, i, boot_img_hdr(state, i), bs);
    6670:	f7fa fb9c 	bl	dac <boot_read_image_header>
        if (rc != 0) {
    6674:	b950      	cbnz	r0, 668c <boot_read_image_headers+0x2a>
            rc = boot_read_image_header(state, i, boot_img_hdr(state, i), bs);
    6676:	462b      	mov	r3, r5
    6678:	f104 022c 	add.w	r2, r4, #44	; 0x2c
    667c:	2101      	movs	r1, #1
    667e:	4620      	mov	r0, r4
    6680:	f7fa fb94 	bl	dac <boot_read_image_header>
        if (rc != 0) {
    6684:	b110      	cbz	r0, 668c <boot_read_image_headers+0x2a>
                return 0;
    6686:	2e00      	cmp	r6, #0
    6688:	bf08      	it	eq
    668a:	2000      	moveq	r0, #0
}
    668c:	bd70      	pop	{r4, r5, r6, pc}

0000668e <boot_read_image_size.constprop.0.isra.0>:
boot_read_image_size(struct boot_loader_state *state, int slot, uint32_t *size)
    668e:	b573      	push	{r0, r1, r4, r5, r6, lr}
    6690:	4604      	mov	r4, r0
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
    6692:	2000      	movs	r0, #0
boot_read_image_size(struct boot_loader_state *state, int slot, uint32_t *size)
    6694:	460d      	mov	r5, r1
    6696:	4616      	mov	r6, r2
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
    6698:	f7ff ff08 	bl	64ac <flash_area_id_from_multi_image_slot>
    rc = flash_area_open(area_id, &fap);
    669c:	4669      	mov	r1, sp
    669e:	b2c0      	uxtb	r0, r0
    66a0:	f7fb f9a0 	bl	19e4 <flash_area_open>
    if (rc != 0) {
    66a4:	bb30      	cbnz	r0, 66f4 <boot_read_image_size.constprop.0.isra.0+0x66>
    off = BOOT_TLV_OFF(boot_img_hdr(state, slot));
    66a6:	232c      	movs	r3, #44	; 0x2c
    66a8:	fb03 4405 	mla	r4, r3, r5, r4
    if (flash_area_read(fap, off, &info, sizeof(info))) {
    66ac:	9800      	ldr	r0, [sp, #0]
    off = BOOT_TLV_OFF(boot_img_hdr(state, slot));
    66ae:	68e3      	ldr	r3, [r4, #12]
    66b0:	8925      	ldrh	r5, [r4, #8]
    66b2:	441d      	add	r5, r3
    if (flash_area_read(fap, off, &info, sizeof(info))) {
    66b4:	2304      	movs	r3, #4
    66b6:	eb0d 0203 	add.w	r2, sp, r3
    66ba:	4629      	mov	r1, r5
    66bc:	f000 fab8 	bl	6c30 <flash_area_read>
    66c0:	b9c0      	cbnz	r0, 66f4 <boot_read_image_size.constprop.0.isra.0+0x66>
    if (info.it_magic == IMAGE_TLV_PROT_INFO_MAGIC) {
    66c2:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    protect_tlv_size = boot_img_hdr(state, slot)->ih_protect_tlv_size;
    66c6:	8964      	ldrh	r4, [r4, #10]
        if (flash_area_read(fap, off + info.it_tlv_tot, &info, sizeof(info))) {
    66c8:	9800      	ldr	r0, [sp, #0]
    if (info.it_magic == IMAGE_TLV_PROT_INFO_MAGIC) {
    66ca:	f646 1308 	movw	r3, #26888	; 0x6908
    66ce:	429a      	cmp	r2, r3
    66d0:	d115      	bne.n	66fe <boot_read_image_size.constprop.0.isra.0+0x70>
        if (protect_tlv_size != info.it_tlv_tot) {
    66d2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    66d6:	429c      	cmp	r4, r3
    66d8:	d10c      	bne.n	66f4 <boot_read_image_size.constprop.0.isra.0+0x66>
        if (flash_area_read(fap, off + info.it_tlv_tot, &info, sizeof(info))) {
    66da:	2304      	movs	r3, #4
    66dc:	eb0d 0203 	add.w	r2, sp, r3
    66e0:	1961      	adds	r1, r4, r5
    66e2:	f000 faa5 	bl	6c30 <flash_area_read>
    66e6:	b928      	cbnz	r0, 66f4 <boot_read_image_size.constprop.0.isra.0+0x66>
    if (info.it_magic != IMAGE_TLV_INFO_MAGIC) {
    66e8:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    66ec:	f646 1307 	movw	r3, #26887	; 0x6907
    66f0:	429a      	cmp	r2, r3
    66f2:	d007      	beq.n	6704 <boot_read_image_size.constprop.0.isra.0+0x76>
    flash_area_close(fap);
    66f4:	9800      	ldr	r0, [sp, #0]
    66f6:	f000 fa9a 	bl	6c2e <flash_area_close>
}
    66fa:	b002      	add	sp, #8
    66fc:	bd70      	pop	{r4, r5, r6, pc}
    } else if (protect_tlv_size != 0) {
    66fe:	2c00      	cmp	r4, #0
    6700:	d0f2      	beq.n	66e8 <boot_read_image_size.constprop.0.isra.0+0x5a>
    6702:	e7f7      	b.n	66f4 <boot_read_image_size.constprop.0.isra.0+0x66>
    *size = off + protect_tlv_size + info.it_tlv_tot;
    6704:	f8bd 1006 	ldrh.w	r1, [sp, #6]
    6708:	4421      	add	r1, r4
    670a:	4429      	add	r1, r5
    670c:	6031      	str	r1, [r6, #0]
    rc = 0;
    670e:	e7f1      	b.n	66f4 <boot_read_image_size.constprop.0.isra.0+0x66>

00006710 <boot_read_sectors>:
{
    6710:	b537      	push	{r0, r1, r2, r4, r5, lr}
    6712:	4604      	mov	r4, r0
    rc = flash_area_get_sectors(flash_area, &num_sectors, out_sectors);
    6714:	6a42      	ldr	r2, [r0, #36]	; 0x24
    uint32_t num_sectors = BOOT_MAX_IMG_SECTORS;
    6716:	2580      	movs	r5, #128	; 0x80
    rc = flash_area_get_sectors(flash_area, &num_sectors, out_sectors);
    6718:	a901      	add	r1, sp, #4
    671a:	2002      	movs	r0, #2
    uint32_t num_sectors = BOOT_MAX_IMG_SECTORS;
    671c:	9501      	str	r5, [sp, #4]
    rc = flash_area_get_sectors(flash_area, &num_sectors, out_sectors);
    671e:	f7fb f989 	bl	1a34 <flash_area_get_sectors>
    if (rc != 0) {
    6722:	b958      	cbnz	r0, 673c <boot_read_sectors+0x2c>
    *out_num_sectors = num_sectors;
    6724:	9b01      	ldr	r3, [sp, #4]
    rc = flash_area_get_sectors(flash_area, &num_sectors, out_sectors);
    6726:	6d22      	ldr	r2, [r4, #80]	; 0x50
    *out_num_sectors = num_sectors;
    6728:	62a3      	str	r3, [r4, #40]	; 0x28
    rc = flash_area_get_sectors(flash_area, &num_sectors, out_sectors);
    672a:	a901      	add	r1, sp, #4
    672c:	2005      	movs	r0, #5
    uint32_t num_sectors = BOOT_MAX_IMG_SECTORS;
    672e:	9501      	str	r5, [sp, #4]
    rc = flash_area_get_sectors(flash_area, &num_sectors, out_sectors);
    6730:	f7fb f980 	bl	1a34 <flash_area_get_sectors>
    if (rc != 0) {
    6734:	4605      	mov	r5, r0
    6736:	b128      	cbz	r0, 6744 <boot_read_sectors+0x34>
        return BOOT_EFLASH_SEC;
    6738:	2509      	movs	r5, #9
    673a:	e000      	b.n	673e <boot_read_sectors+0x2e>
        return BOOT_EFLASH;
    673c:	2501      	movs	r5, #1
}
    673e:	4628      	mov	r0, r5
    6740:	b003      	add	sp, #12
    6742:	bd30      	pop	{r4, r5, pc}
    *out_num_sectors = num_sectors;
    6744:	9b01      	ldr	r3, [sp, #4]
    elem_sz = flash_area_align(BOOT_IMG_AREA(state, BOOT_PRIMARY_SLOT));
    6746:	6a20      	ldr	r0, [r4, #32]
    *out_num_sectors = num_sectors;
    6748:	6563      	str	r3, [r4, #84]	; 0x54
    elem_sz = flash_area_align(BOOT_IMG_AREA(state, BOOT_PRIMARY_SLOT));
    674a:	f000 faaf 	bl	6cac <flash_area_align>
    BOOT_WRITE_SZ(state) = boot_write_sz(state);
    674e:	65e0      	str	r0, [r4, #92]	; 0x5c
    return 0;
    6750:	e7f5      	b.n	673e <boot_read_sectors+0x2e>

00006752 <boot_status_reset>:
    bs->idx = BOOT_STATUS_IDX_0;
    6752:	2301      	movs	r3, #1
    6754:	6003      	str	r3, [r0, #0]
    bs->state = BOOT_STATUS_STATE_0;
    6756:	f103 2301 	add.w	r3, r3, #16777472	; 0x1000100
    675a:	6043      	str	r3, [r0, #4]
    bs->swap_size = 0;
    675c:	2300      	movs	r3, #0
    bs->source = 0;
    675e:	e9c0 3302 	strd	r3, r3, [r0, #8]
}
    6762:	4770      	bx	lr

00006764 <boot_status_is_reset>:
            bs->idx == BOOT_STATUS_IDX_0 &&
    6764:	7943      	ldrb	r3, [r0, #5]
    6766:	2b01      	cmp	r3, #1
    6768:	d107      	bne.n	677a <boot_status_is_reset+0x16>
    return (bs->op == BOOT_STATUS_OP_MOVE &&
    676a:	6803      	ldr	r3, [r0, #0]
    676c:	2b01      	cmp	r3, #1
    676e:	d104      	bne.n	677a <boot_status_is_reset+0x16>
            bs->idx == BOOT_STATUS_IDX_0 &&
    6770:	7900      	ldrb	r0, [r0, #4]
    6772:	1e43      	subs	r3, r0, #1
    6774:	4258      	negs	r0, r3
    6776:	4158      	adcs	r0, r3
    6778:	4770      	bx	lr
    677a:	2000      	movs	r0, #0
}
    677c:	4770      	bx	lr

0000677e <boot_write_status>:
{
    677e:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    6780:	4606      	mov	r6, r0
    6782:	460d      	mov	r5, r1
    rc = flash_area_open(area_id, &fap);
    6784:	2002      	movs	r0, #2
    6786:	a901      	add	r1, sp, #4
    6788:	f7fb f92c 	bl	19e4 <flash_area_open>
    if (rc != 0) {
    678c:	bb38      	cbnz	r0, 67de <boot_write_status+0x60>
    off = boot_status_off(fap) +
    678e:	9801      	ldr	r0, [sp, #4]
    6790:	f7ff ff45 	bl	661e <boot_status_off>
          boot_status_internal_off(bs, BOOT_WRITE_SZ(state));
    6794:	6df1      	ldr	r1, [r6, #92]	; 0x5c
    off = boot_status_off(fap) +
    6796:	4604      	mov	r4, r0
          boot_status_internal_off(bs, BOOT_WRITE_SZ(state));
    6798:	4628      	mov	r0, r5
    679a:	f000 f8e5 	bl	6968 <boot_status_internal_off>
    off = boot_status_off(fap) +
    679e:	4404      	add	r4, r0
    align = flash_area_align(fap);
    67a0:	9801      	ldr	r0, [sp, #4]
    67a2:	f000 fa83 	bl	6cac <flash_area_align>
    67a6:	4606      	mov	r6, r0
    erased_val = flash_area_erased_val(fap);
    67a8:	9801      	ldr	r0, [sp, #4]
    67aa:	f000 fa86 	bl	6cba <flash_area_erased_val>
    memset(buf, erased_val, BOOT_MAX_ALIGN);
    67ae:	2208      	movs	r2, #8
    erased_val = flash_area_erased_val(fap);
    67b0:	4601      	mov	r1, r0
    memset(buf, erased_val, BOOT_MAX_ALIGN);
    67b2:	eb0d 0002 	add.w	r0, sp, r2
    67b6:	f000 fae4 	bl	6d82 <memset>
    buf[0] = bs->state;
    67ba:	792b      	ldrb	r3, [r5, #4]
    67bc:	f88d 3008 	strb.w	r3, [sp, #8]
    rc = flash_area_write(fap, off, buf, align);
    67c0:	4621      	mov	r1, r4
    67c2:	9801      	ldr	r0, [sp, #4]
    67c4:	4633      	mov	r3, r6
    67c6:	aa02      	add	r2, sp, #8
    67c8:	f000 fa47 	bl	6c5a <flash_area_write>
    if (rc != 0) {
    67cc:	1e04      	subs	r4, r0, #0
    flash_area_close(fap);
    67ce:	9801      	ldr	r0, [sp, #4]
    if (rc != 0) {
    67d0:	bf18      	it	ne
    67d2:	2401      	movne	r4, #1
    flash_area_close(fap);
    67d4:	f000 fa2b 	bl	6c2e <flash_area_close>
}
    67d8:	4620      	mov	r0, r4
    67da:	b004      	add	sp, #16
    67dc:	bd70      	pop	{r4, r5, r6, pc}
        return BOOT_EFLASH;
    67de:	2401      	movs	r4, #1
    67e0:	e7fa      	b.n	67d8 <boot_write_status+0x5a>

000067e2 <boot_erase_region>:
    return flash_area_erase(fap, off, sz);
    67e2:	f000 ba4f 	b.w	6c84 <flash_area_erase>

000067e6 <swap_erase_trailer_sectors>:

#if defined(MCUBOOT_SWAP_USING_SCRATCH) || defined(MCUBOOT_SWAP_USING_MOVE)
int
swap_erase_trailer_sectors(const struct boot_loader_state *state,
                           const struct flash_area *fap)
{
    67e6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    67ea:	460e      	mov	r6, r1
    int rc;

    BOOT_LOG_DBG("erasing trailer; fa_id=%d", flash_area_get_id(fap));

    image_index = BOOT_CURR_IMG(state);
    fa_id_primary = flash_area_id_from_multi_image_slot(image_index,
    67ec:	2100      	movs	r1, #0
{
    67ee:	4607      	mov	r7, r0
    fa_id_primary = flash_area_id_from_multi_image_slot(image_index,
    67f0:	4608      	mov	r0, r1
    67f2:	f7ff fe5b 	bl	64ac <flash_area_id_from_multi_image_slot>
            BOOT_PRIMARY_SLOT);
    fa_id_secondary = flash_area_id_from_multi_image_slot(image_index,
    67f6:	2101      	movs	r1, #1
    fa_id_primary = flash_area_id_from_multi_image_slot(image_index,
    67f8:	4604      	mov	r4, r0
    fa_id_secondary = flash_area_id_from_multi_image_slot(image_index,
    67fa:	2000      	movs	r0, #0
    67fc:	f7ff fe56 	bl	64ac <flash_area_id_from_multi_image_slot>
            BOOT_SECONDARY_SLOT);

    if (flash_area_get_id(fap) == fa_id_primary) {
    6800:	7833      	ldrb	r3, [r6, #0]
    6802:	429c      	cmp	r4, r3
    6804:	d021      	beq.n	684a <swap_erase_trailer_sectors+0x64>
        slot = BOOT_PRIMARY_SLOT;
    } else if (flash_area_get_id(fap) == fa_id_secondary) {
    6806:	4298      	cmp	r0, r3
    6808:	d121      	bne.n	684e <swap_erase_trailer_sectors+0x68>
        slot = BOOT_SECONDARY_SLOT;
    680a:	2501      	movs	r5, #1
    return BOOT_IMG(state, slot).num_sectors;
    680c:	232c      	movs	r3, #44	; 0x2c
    680e:	fb03 7505 	mla	r5, r3, r5, r7
        return BOOT_EFLASH;
    }

    /* delete starting from last sector and moving to beginning */
    sector = boot_img_num_sectors(state, slot) - 1;
    trailer_sz = boot_trailer_sz(BOOT_WRITE_SZ(state));
    6812:	6df8      	ldr	r0, [r7, #92]	; 0x5c
    sector = boot_img_num_sectors(state, slot) - 1;
    6814:	6aac      	ldr	r4, [r5, #40]	; 0x28
    trailer_sz = boot_trailer_sz(BOOT_WRITE_SZ(state));
    6816:	f7ff fef0 	bl	65fa <boot_trailer_sz>
    sector = boot_img_num_sectors(state, slot) - 1;
    681a:	3c01      	subs	r4, #1
    trailer_sz = boot_trailer_sz(BOOT_WRITE_SZ(state));
    681c:	4607      	mov	r7, r0
    total_sz = 0;
    681e:	f04f 0800 	mov.w	r8, #0
    return flash_sector_get_size(&BOOT_IMG(state, slot).sectors[sector]);
    6822:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    6824:	eb03 02c4 	add.w	r2, r3, r4, lsl #3
    return flash_sector_get_off(&BOOT_IMG(state, slot).sectors[sector]) -
    6828:	f853 1034 	ldr.w	r1, [r3, r4, lsl #3]
	return fs->fs_size;
    682c:	f8d2 9004 	ldr.w	r9, [r2, #4]
    6830:	681b      	ldr	r3, [r3, #0]
    do {
        sz = boot_img_sector_size(state, slot, sector);
        off = boot_img_sector_off(state, slot, sector);
        rc = boot_erase_region(fap, off, sz);
    6832:	464a      	mov	r2, r9
    6834:	1ac9      	subs	r1, r1, r3
    6836:	4630      	mov	r0, r6
        assert(rc == 0);

        sector--;
        total_sz += sz;
    6838:	44c8      	add	r8, r9
        rc = boot_erase_region(fap, off, sz);
    683a:	f7ff ffd2 	bl	67e2 <boot_erase_region>
    } while (total_sz < trailer_sz);
    683e:	45b8      	cmp	r8, r7
        sector--;
    6840:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
    } while (total_sz < trailer_sz);
    6844:	d3ed      	bcc.n	6822 <swap_erase_trailer_sectors+0x3c>

    return rc;
}
    6846:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        slot = BOOT_PRIMARY_SLOT;
    684a:	2500      	movs	r5, #0
    684c:	e7de      	b.n	680c <swap_erase_trailer_sectors+0x26>
        return BOOT_EFLASH;
    684e:	2001      	movs	r0, #1
    6850:	e7f9      	b.n	6846 <swap_erase_trailer_sectors+0x60>

00006852 <swap_status_init>:

int
swap_status_init(const struct boot_loader_state *state,
                 const struct flash_area *fap,
                 const struct boot_status *bs)
{
    6852:	b537      	push	{r0, r1, r2, r4, r5, lr}
    6854:	4615      	mov	r5, r2
    6856:	460c      	mov	r4, r1

    image_index = BOOT_CURR_IMG(state);

    BOOT_LOG_DBG("initializing status; fa_id=%d", flash_area_get_id(fap));

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SECONDARY(image_index),
    6858:	2005      	movs	r0, #5
    685a:	4669      	mov	r1, sp
    685c:	f000 fff6 	bl	784c <boot_read_swap_state_by_id>
            &swap_state);
    assert(rc == 0);

    if (bs->swap_type != BOOT_SWAP_TYPE_NONE) {
    6860:	79e9      	ldrb	r1, [r5, #7]
    6862:	2901      	cmp	r1, #1
    6864:	d003      	beq.n	686e <swap_status_init+0x1c>
        rc = boot_write_swap_info(fap, bs->swap_type, image_index);
    6866:	2200      	movs	r2, #0
    6868:	4620      	mov	r0, r4
    686a:	f001 f803 	bl	7874 <boot_write_swap_info>
        assert(rc == 0);
    }

    if (swap_state.image_ok == BOOT_FLAG_SET) {
    686e:	f89d 3003 	ldrb.w	r3, [sp, #3]
    6872:	2b01      	cmp	r3, #1
    6874:	d102      	bne.n	687c <swap_status_init+0x2a>
        rc = boot_write_image_ok(fap);
    6876:	4620      	mov	r0, r4
    6878:	f000 ffdb 	bl	7832 <boot_write_image_ok>
        assert(rc == 0);
    }

    rc = boot_write_swap_size(fap, bs->swap_size);
    687c:	68a9      	ldr	r1, [r5, #8]
    687e:	4620      	mov	r0, r4
    6880:	f7ff fee0 	bl	6644 <boot_write_swap_size>

    rc = boot_write_enc_key(fap, 1, bs);
    assert(rc == 0);
#endif

    rc = boot_write_magic(fap);
    6884:	4620      	mov	r0, r4
    6886:	f7fd f81f 	bl	38c8 <boot_write_magic>
    assert(rc == 0);

    return 0;
}
    688a:	2000      	movs	r0, #0
    688c:	b003      	add	sp, #12
    688e:	bd30      	pop	{r4, r5, pc}

00006890 <swap_read_status>:

int
swap_read_status(struct boot_loader_state *state, struct boot_status *bs)
{
    6890:	b573      	push	{r0, r1, r4, r5, r6, lr}
    6892:	460d      	mov	r5, r1
    6894:	4606      	mov	r6, r0
    uint32_t off;
    uint8_t swap_info;
    int area_id;
    int rc;

    bs->source = swap_status_source(state);
    6896:	f7fa fb71 	bl	f7c <swap_status_source>
    689a:	4604      	mov	r4, r0
    689c:	60e8      	str	r0, [r5, #12]
    switch (bs->source) {
    689e:	b350      	cbz	r0, 68f6 <swap_read_status+0x66>
    68a0:	2802      	cmp	r0, #2
    68a2:	d12d      	bne.n	6900 <swap_read_status+0x70>
    default:
        assert(0);
        return BOOT_EBADARGS;
    }

    rc = flash_area_open(area_id, &fap);
    68a4:	a901      	add	r1, sp, #4
    68a6:	f7fb f89d 	bl	19e4 <flash_area_open>
    if (rc != 0) {
    68aa:	bb58      	cbnz	r0, 6904 <swap_read_status+0x74>
        return BOOT_EFLASH;
    }

    rc = swap_read_status_bytes(fap, state, bs);
    68ac:	9801      	ldr	r0, [sp, #4]
    68ae:	462a      	mov	r2, r5
    68b0:	4631      	mov	r1, r6
    68b2:	f7fa fac9 	bl	e48 <swap_read_status_bytes>
    if (rc == 0) {
    68b6:	4604      	mov	r4, r0
    68b8:	b9d0      	cbnz	r0, 68f0 <swap_read_status+0x60>
        off = boot_swap_info_off(fap);
    68ba:	9801      	ldr	r0, [sp, #4]
    68bc:	f000 ff40 	bl	7740 <boot_swap_info_off>
        rc = flash_area_read(fap, off, &swap_info, sizeof swap_info);
    68c0:	2301      	movs	r3, #1
        off = boot_swap_info_off(fap);
    68c2:	4601      	mov	r1, r0
        rc = flash_area_read(fap, off, &swap_info, sizeof swap_info);
    68c4:	f10d 0203 	add.w	r2, sp, #3
    68c8:	9801      	ldr	r0, [sp, #4]
    68ca:	f000 f9b1 	bl	6c30 <flash_area_read>
        if (rc != 0) {
    68ce:	4604      	mov	r4, r0
    68d0:	b9a0      	cbnz	r0, 68fc <swap_read_status+0x6c>
            rc = BOOT_EFLASH;
            goto done;
        }

        if (bootutil_buffer_is_erased(fap, &swap_info, sizeof swap_info)) {
    68d2:	9801      	ldr	r0, [sp, #4]
    68d4:	2201      	movs	r2, #1
    68d6:	f10d 0103 	add.w	r1, sp, #3
    68da:	f000 ff45 	bl	7768 <bootutil_buffer_is_erased>
    68de:	b110      	cbz	r0, 68e6 <swap_read_status+0x56>
            BOOT_SET_SWAP_INFO(swap_info, 0, BOOT_SWAP_TYPE_NONE);
    68e0:	2301      	movs	r3, #1
    68e2:	f88d 3003 	strb.w	r3, [sp, #3]
            rc = 0;
        }

        /* Extract the swap type info */
        bs->swap_type = BOOT_GET_SWAP_TYPE(swap_info);
    68e6:	f89d 3003 	ldrb.w	r3, [sp, #3]
    68ea:	f003 030f 	and.w	r3, r3, #15
    68ee:	71eb      	strb	r3, [r5, #7]
    }

done:
    flash_area_close(fap);
    68f0:	9801      	ldr	r0, [sp, #4]
    68f2:	f000 f99c 	bl	6c2e <flash_area_close>

    return rc;
}
    68f6:	4620      	mov	r0, r4
    68f8:	b002      	add	sp, #8
    68fa:	bd70      	pop	{r4, r5, r6, pc}
            rc = BOOT_EFLASH;
    68fc:	2401      	movs	r4, #1
    68fe:	e7f7      	b.n	68f0 <swap_read_status+0x60>
    switch (bs->source) {
    6900:	2407      	movs	r4, #7
    6902:	e7f8      	b.n	68f6 <swap_read_status+0x66>
        return BOOT_EFLASH;
    6904:	2401      	movs	r4, #1
    6906:	e7f6      	b.n	68f6 <swap_read_status+0x66>

00006908 <swap_set_copy_done>:

int
swap_set_copy_done(uint8_t image_index)
{
    6908:	b513      	push	{r0, r1, r4, lr}
    const struct flash_area *fap;
    int rc;

    rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY(image_index),
    690a:	2002      	movs	r0, #2
    690c:	a901      	add	r1, sp, #4
    690e:	f7fb f869 	bl	19e4 <flash_area_open>
            &fap);
    if (rc != 0) {
    6912:	b948      	cbnz	r0, 6928 <swap_set_copy_done+0x20>
        return BOOT_EFLASH;
    }

    rc = boot_write_copy_done(fap);
    6914:	9801      	ldr	r0, [sp, #4]
    6916:	f7ff fe8d 	bl	6634 <boot_write_copy_done>
    691a:	4604      	mov	r4, r0
    flash_area_close(fap);
    691c:	9801      	ldr	r0, [sp, #4]
    691e:	f000 f986 	bl	6c2e <flash_area_close>
    return rc;
}
    6922:	4620      	mov	r0, r4
    6924:	b002      	add	sp, #8
    6926:	bd10      	pop	{r4, pc}
        return BOOT_EFLASH;
    6928:	2401      	movs	r4, #1
    692a:	e7fa      	b.n	6922 <swap_set_copy_done+0x1a>

0000692c <swap_set_image_ok>:

int
swap_set_image_ok(uint8_t image_index)
{
    692c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const struct flash_area *fap;
    struct boot_swap_state state;
    int rc;

    rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY(image_index),
    692e:	2002      	movs	r0, #2
    6930:	a901      	add	r1, sp, #4
    6932:	f7fb f857 	bl	19e4 <flash_area_open>
            &fap);
    if (rc != 0) {
    6936:	b9a8      	cbnz	r0, 6964 <swap_set_image_ok+0x38>
        return BOOT_EFLASH;
    }

    rc = boot_read_swap_state(fap, &state);
    6938:	9801      	ldr	r0, [sp, #4]
    693a:	a902      	add	r1, sp, #8
    693c:	f7fc ffe4 	bl	3908 <boot_read_swap_state>
    if (rc != 0) {
    6940:	4604      	mov	r4, r0
    6942:	b968      	cbnz	r0, 6960 <swap_set_image_ok+0x34>
        rc = BOOT_EFLASH;
        goto out;
    }

    if (state.image_ok == BOOT_FLAG_UNSET) {
    6944:	f89d 300b 	ldrb.w	r3, [sp, #11]
    6948:	2b03      	cmp	r3, #3
    694a:	d103      	bne.n	6954 <swap_set_image_ok+0x28>
        rc = boot_write_image_ok(fap);
    694c:	9801      	ldr	r0, [sp, #4]
    694e:	f000 ff70 	bl	7832 <boot_write_image_ok>
    6952:	4604      	mov	r4, r0
    }

out:
    flash_area_close(fap);
    6954:	9801      	ldr	r0, [sp, #4]
    6956:	f000 f96a 	bl	6c2e <flash_area_close>
    return rc;
}
    695a:	4620      	mov	r0, r4
    695c:	b004      	add	sp, #16
    695e:	bd10      	pop	{r4, pc}
        rc = BOOT_EFLASH;
    6960:	2401      	movs	r4, #1
    6962:	e7f7      	b.n	6954 <swap_set_image_ok+0x28>
        return BOOT_EFLASH;
    6964:	2401      	movs	r4, #1
    6966:	e7f8      	b.n	695a <swap_set_image_ok+0x2e>

00006968 <boot_status_internal_off>:
{
    6968:	b510      	push	{r4, lr}
            BOOT_STATUS_MOVE_STATE_COUNT : BOOT_STATUS_SWAP_STATE_COUNT);
    696a:	7943      	ldrb	r3, [r0, #5]
           (bs->state - BOOT_STATUS_STATE_0) * elem_sz;
    696c:	7902      	ldrb	r2, [r0, #4]
            BOOT_STATUS_MOVE_STATE_COUNT : BOOT_STATUS_SWAP_STATE_COUNT);
    696e:	2b01      	cmp	r3, #1
               0 : (BOOT_MAX_IMG_SECTORS * BOOT_STATUS_MOVE_STATE_COUNT * elem_sz)) +
    6970:	bf14      	ite	ne
    6972:	01cb      	lslne	r3, r1, #7
    6974:	2300      	moveq	r3, #0
           (bs->state - BOOT_STATUS_STATE_0) * elem_sz;
    6976:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
    off = ((bs->op == BOOT_STATUS_OP_MOVE) ?
    697a:	fb01 3302 	mla	r3, r1, r2, r3
           (bs->idx - BOOT_STATUS_IDX_0) * idx_sz +
    697e:	6802      	ldr	r2, [r0, #0]
    idx_sz = elem_sz * ((bs->op == BOOT_STATUS_OP_MOVE) ?
    6980:	bf14      	ite	ne
    6982:	004c      	lslne	r4, r1, #1
    6984:	460c      	moveq	r4, r1
           (bs->idx - BOOT_STATUS_IDX_0) * idx_sz +
    6986:	3a01      	subs	r2, #1
}
    6988:	fb04 3002 	mla	r0, r4, r2, r3
    698c:	bd10      	pop	{r4, pc}

0000698e <arch_printk_char_out>:
}
    698e:	2000      	movs	r0, #0
    6990:	4770      	bx	lr

00006992 <printk>:
 *
 * @param fmt formatted string to output
 */

void printk(const char *fmt, ...)
{
    6992:	b40f      	push	{r0, r1, r2, r3}
    6994:	b507      	push	{r0, r1, r2, lr}
    6996:	a904      	add	r1, sp, #16
    6998:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    699c:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
    699e:	f7fa fcdf 	bl	1360 <vprintk>

	va_end(ap);
}
    69a2:	b003      	add	sp, #12
    69a4:	f85d eb04 	ldr.w	lr, [sp], #4
    69a8:	b004      	add	sp, #16
    69aa:	4770      	bx	lr

000069ac <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    69ac:	4604      	mov	r4, r0
    69ae:	b508      	push	{r3, lr}
    69b0:	4608      	mov	r0, r1
    69b2:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    69b4:	461a      	mov	r2, r3
    69b6:	47a0      	blx	r4
	return z_impl_z_current_get();
    69b8:	f7ff fb86 	bl	60c8 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    69bc:	f7fb fc46 	bl	224c <z_impl_k_thread_abort>

000069c0 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    69c0:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
    69c2:	f013 0307 	ands.w	r3, r3, #7
    69c6:	d105      	bne.n	69d4 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
    69c8:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
    69ca:	2b00      	cmp	r3, #0
    69cc:	bf0c      	ite	eq
    69ce:	2000      	moveq	r0, #0
    69d0:	2003      	movne	r0, #3
    69d2:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    69d4:	2b02      	cmp	r3, #2
    69d6:	d105      	bne.n	69e4 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
    69d8:	8b40      	ldrh	r0, [r0, #26]
    69da:	fab0 f080 	clz	r0, r0
    69de:	0940      	lsrs	r0, r0, #5
    69e0:	0080      	lsls	r0, r0, #2
    69e2:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
    69e4:	2b01      	cmp	r3, #1
    69e6:	d105      	bne.n	69f4 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
    69e8:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
    69ea:	2b00      	cmp	r3, #0
    69ec:	bf0c      	ite	eq
    69ee:	2000      	moveq	r0, #0
    69f0:	2005      	movne	r0, #5
    69f2:	4770      	bx	lr
	int evt = EVT_NOP;
    69f4:	2000      	movs	r0, #0
}
    69f6:	4770      	bx	lr

000069f8 <validate_args>:
{
    69f8:	b510      	push	{r4, lr}
    69fa:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    69fc:	b100      	cbz	r0, 6a00 <validate_args+0x8>
    69fe:	b911      	cbnz	r1, 6a06 <validate_args+0xe>
		return -EINVAL;
    6a00:	f06f 0015 	mvn.w	r0, #21
}
    6a04:	bd10      	pop	{r4, pc}
	int rv = sys_notify_validate(&cli->notify);
    6a06:	1d08      	adds	r0, r1, #4
    6a08:	f000 f8e5 	bl	6bd6 <sys_notify_validate>
	if ((rv == 0)
    6a0c:	2800      	cmp	r0, #0
    6a0e:	d1f9      	bne.n	6a04 <validate_args+0xc>
	    && ((cli->notify.flags
    6a10:	68a3      	ldr	r3, [r4, #8]
    6a12:	2b03      	cmp	r3, #3
    6a14:	d9f6      	bls.n	6a04 <validate_args+0xc>
    6a16:	e7f3      	b.n	6a00 <validate_args+0x8>

00006a18 <notify_one>:
{
    6a18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6a1c:	460d      	mov	r5, r1
    6a1e:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    6a20:	4619      	mov	r1, r3
    6a22:	1d28      	adds	r0, r5, #4
{
    6a24:	4690      	mov	r8, r2
    6a26:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    6a28:	f000 f8e6 	bl	6bf8 <sys_notify_finalize>
	if (cb) {
    6a2c:	4604      	mov	r4, r0
    6a2e:	b138      	cbz	r0, 6a40 <notify_one+0x28>
		cb(mgr, cli, state, res);
    6a30:	4633      	mov	r3, r6
    6a32:	4642      	mov	r2, r8
    6a34:	4629      	mov	r1, r5
    6a36:	4638      	mov	r0, r7
    6a38:	46a4      	mov	ip, r4
}
    6a3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
    6a3e:	4760      	bx	ip
}
    6a40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00006a44 <transition_complete>:
{
    6a44:	b410      	push	{r4}
	__asm__ volatile(
    6a46:	f04f 0420 	mov.w	r4, #32
    6a4a:	f3ef 8211 	mrs	r2, BASEPRI
    6a4e:	f384 8812 	msr	BASEPRI_MAX, r4
    6a52:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
    6a56:	6141      	str	r1, [r0, #20]
}
    6a58:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
    6a5a:	2101      	movs	r1, #1
    6a5c:	f7fa bc8e 	b.w	137c <process_event>

00006a60 <onoff_manager_init>:
{
    6a60:	b538      	push	{r3, r4, r5, lr}
    6a62:	460c      	mov	r4, r1
	if ((mgr == NULL)
    6a64:	4605      	mov	r5, r0
    6a66:	b158      	cbz	r0, 6a80 <onoff_manager_init+0x20>
	    || (transitions == NULL)
    6a68:	b151      	cbz	r1, 6a80 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
    6a6a:	680b      	ldr	r3, [r1, #0]
    6a6c:	b143      	cbz	r3, 6a80 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
    6a6e:	684b      	ldr	r3, [r1, #4]
    6a70:	b133      	cbz	r3, 6a80 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    6a72:	221c      	movs	r2, #28
    6a74:	2100      	movs	r1, #0
    6a76:	f000 f984 	bl	6d82 <memset>
    6a7a:	612c      	str	r4, [r5, #16]
	return 0;
    6a7c:	2000      	movs	r0, #0
}
    6a7e:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    6a80:	f06f 0015 	mvn.w	r0, #21
    6a84:	e7fb      	b.n	6a7e <onoff_manager_init+0x1e>

00006a86 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    6a86:	b570      	push	{r4, r5, r6, lr}
    6a88:	4605      	mov	r5, r0
    6a8a:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    6a8c:	f7ff ffb4 	bl	69f8 <validate_args>

	if (rv < 0) {
    6a90:	1e04      	subs	r4, r0, #0
    6a92:	db15      	blt.n	6ac0 <onoff_request+0x3a>
    6a94:	f04f 0320 	mov.w	r3, #32
    6a98:	f3ef 8211 	mrs	r2, BASEPRI
    6a9c:	f383 8812 	msr	BASEPRI_MAX, r3
    6aa0:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    6aa4:	8b6b      	ldrh	r3, [r5, #26]
    6aa6:	8b2c      	ldrh	r4, [r5, #24]
    6aa8:	f64f 71ff 	movw	r1, #65535	; 0xffff
    6aac:	428b      	cmp	r3, r1
    6aae:	f004 0407 	and.w	r4, r4, #7
    6ab2:	d107      	bne.n	6ac4 <onoff_request+0x3e>
	__asm__ volatile(
    6ab4:	f382 8811 	msr	BASEPRI, r2
    6ab8:	f3bf 8f6f 	isb	sy
		rv = -EAGAIN;
    6abc:	f06f 040a 	mvn.w	r4, #10
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
    6ac0:	4620      	mov	r0, r4
    6ac2:	bd70      	pop	{r4, r5, r6, pc}
	if (state == ONOFF_STATE_ON) {
    6ac4:	2c02      	cmp	r4, #2
    6ac6:	d10c      	bne.n	6ae2 <onoff_request+0x5c>
		mgr->refs += 1U;
    6ac8:	3301      	adds	r3, #1
    6aca:	836b      	strh	r3, [r5, #26]
    6acc:	f382 8811 	msr	BASEPRI, r2
    6ad0:	f3bf 8f6f 	isb	sy
			notify_one(mgr, cli, state, 0);
    6ad4:	2300      	movs	r3, #0
    6ad6:	4622      	mov	r2, r4
    6ad8:	4631      	mov	r1, r6
    6ada:	4628      	mov	r0, r5
    6adc:	f7ff ff9c 	bl	6a18 <notify_one>
    6ae0:	e7ee      	b.n	6ac0 <onoff_request+0x3a>
	} else if ((state == ONOFF_STATE_OFF)
    6ae2:	2c06      	cmp	r4, #6
    6ae4:	d814      	bhi.n	6b10 <onoff_request+0x8a>
    6ae6:	e8df f004 	tbb	[pc, r4]
    6aea:	1304      	.short	0x1304
    6aec:	1a041313 	.word	0x1a041313
    6af0:	04          	.byte	0x04
    6af1:	00          	.byte	0x00
	parent->next = child;
    6af2:	2300      	movs	r3, #0
    6af4:	6033      	str	r3, [r6, #0]
	return list->tail;
    6af6:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_APPEND(slist, snode)
    6af8:	b93b      	cbnz	r3, 6b0a <onoff_request+0x84>
	list->head = node;
    6afa:	e9c5 6600 	strd	r6, r6, [r5]
	if (start) {
    6afe:	b9ac      	cbnz	r4, 6b2c <onoff_request+0xa6>
		process_event(mgr, EVT_RECHECK, key);
    6b00:	2102      	movs	r1, #2
    6b02:	4628      	mov	r0, r5
    6b04:	f7fa fc3a 	bl	137c <process_event>
    6b08:	e7da      	b.n	6ac0 <onoff_request+0x3a>
	parent->next = child;
    6b0a:	601e      	str	r6, [r3, #0]
	list->tail = node;
    6b0c:	606e      	str	r6, [r5, #4]
}
    6b0e:	e7f6      	b.n	6afe <onoff_request+0x78>
    6b10:	f382 8811 	msr	BASEPRI, r2
    6b14:	f3bf 8f6f 	isb	sy
		rv = -EIO;
    6b18:	f06f 0404 	mvn.w	r4, #4
    6b1c:	e7d0      	b.n	6ac0 <onoff_request+0x3a>
    6b1e:	f382 8811 	msr	BASEPRI, r2
    6b22:	f3bf 8f6f 	isb	sy
    6b26:	f06f 0485 	mvn.w	r4, #133	; 0x85
    6b2a:	e7c9      	b.n	6ac0 <onoff_request+0x3a>
    6b2c:	f382 8811 	msr	BASEPRI, r2
    6b30:	f3bf 8f6f 	isb	sy
		if (notify) {
    6b34:	e7c4      	b.n	6ac0 <onoff_request+0x3a>

00006b36 <onoff_release>:

int onoff_release(struct onoff_manager *mgr)
{
    6b36:	b510      	push	{r4, lr}
	__asm__ volatile(
    6b38:	f04f 0320 	mov.w	r3, #32
    6b3c:	f3ef 8211 	mrs	r2, BASEPRI
    6b40:	f383 8812 	msr	BASEPRI_MAX, r3
    6b44:	f3bf 8f6f 	isb	sy
	bool stop = false;      /* trigger a stop transition */

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    6b48:	8b04      	ldrh	r4, [r0, #24]
    6b4a:	f004 0407 	and.w	r4, r4, #7
	int rv = state;

	if (state != ONOFF_STATE_ON) {
    6b4e:	2c02      	cmp	r4, #2
    6b50:	d00a      	beq.n	6b68 <onoff_release+0x32>
		if (state == ONOFF_STATE_ERROR) {
			rv = -EIO;
		} else {
			rv = -ENOTSUP;
    6b52:	2c01      	cmp	r4, #1
    6b54:	bf0c      	ite	eq
    6b56:	f06f 0004 	mvneq.w	r0, #4
    6b5a:	f06f 0085 	mvnne.w	r0, #133	; 0x85
	__asm__ volatile(
    6b5e:	f382 8811 	msr	BASEPRI, r2
    6b62:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);
	}

	return rv;
    6b66:	e008      	b.n	6b7a <onoff_release+0x44>
	mgr->refs -= 1U;
    6b68:	8b43      	ldrh	r3, [r0, #26]
    6b6a:	3b01      	subs	r3, #1
    6b6c:	b29b      	uxth	r3, r3
    6b6e:	8343      	strh	r3, [r0, #26]
	if (stop) {
    6b70:	b923      	cbnz	r3, 6b7c <onoff_release+0x46>
		process_event(mgr, EVT_RECHECK, key);
    6b72:	4621      	mov	r1, r4
    6b74:	f7fa fc02 	bl	137c <process_event>
	int rv = state;
    6b78:	4620      	mov	r0, r4
}
    6b7a:	bd10      	pop	{r4, pc}
	int rv = state;
    6b7c:	4620      	mov	r0, r4
    6b7e:	e7ee      	b.n	6b5e <onoff_release+0x28>

00006b80 <onoff_sync_lock>:
	__asm__ volatile(
    6b80:	f04f 0220 	mov.w	r2, #32
    6b84:	f3ef 8311 	mrs	r3, BASEPRI
    6b88:	f382 8812 	msr	BASEPRI_MAX, r2
    6b8c:	f3bf 8f6f 	isb	sy
}

int onoff_sync_lock(struct onoff_sync_service *srv,
		    k_spinlock_key_t *keyp)
{
	*keyp = k_spin_lock(&srv->lock);
    6b90:	600b      	str	r3, [r1, #0]
	return srv->count;
}
    6b92:	6800      	ldr	r0, [r0, #0]
    6b94:	4770      	bx	lr

00006b96 <onoff_sync_finalize>:
int onoff_sync_finalize(struct onoff_sync_service *srv,
			k_spinlock_key_t key,
			struct onoff_client *cli,
			int res,
			bool on)
{
    6b96:	b538      	push	{r3, r4, r5, lr}

	/* Clear errors visible when locked.  If they are to be
	 * preserved the caller must finalize with the previous
	 * error code.
	 */
	if (srv->count < 0) {
    6b98:	6804      	ldr	r4, [r0, #0]
    6b9a:	2c00      	cmp	r4, #0
		srv->count = 0;
    6b9c:	bfbc      	itt	lt
    6b9e:	2400      	movlt	r4, #0
    6ba0:	6004      	strlt	r4, [r0, #0]
	}
	if (res < 0) {
    6ba2:	2b00      	cmp	r3, #0
{
    6ba4:	460d      	mov	r5, r1
    6ba6:	4611      	mov	r1, r2
    6ba8:	f89d 2010 	ldrb.w	r2, [sp, #16]
	if (res < 0) {
    6bac:	db10      	blt.n	6bd0 <onoff_sync_finalize+0x3a>
		srv->count = res;
		state = ONOFF_STATE_ERROR;
	} else if (on) {
		srv->count += 1;
    6bae:	6804      	ldr	r4, [r0, #0]
	} else if (on) {
    6bb0:	b162      	cbz	r2, 6bcc <onoff_sync_finalize+0x36>
		srv->count += 1;
    6bb2:	3401      	adds	r4, #1
	uint32_t state = ONOFF_STATE_ON;
    6bb4:	2202      	movs	r2, #2
		srv->count = res;
    6bb6:	6004      	str	r4, [r0, #0]
	__asm__ volatile(
    6bb8:	f385 8811 	msr	BASEPRI, r5
    6bbc:	f3bf 8f6f 	isb	sy

	int rv = srv->count;

	k_spin_unlock(&srv->lock, key);

	if (cli) {
    6bc0:	b111      	cbz	r1, 6bc8 <onoff_sync_finalize+0x32>
		/* Detect service mis-use: onoff does not callback on transition
		 * to off, so no client should have been passed.
		 */
		__ASSERT_NO_MSG(on);
		notify_one(NULL, cli, state, res);
    6bc2:	2000      	movs	r0, #0
    6bc4:	f7ff ff28 	bl	6a18 <notify_one>
	}

	return rv;
}
    6bc8:	4620      	mov	r0, r4
    6bca:	bd38      	pop	{r3, r4, r5, pc}
		srv->count -= 1;
    6bcc:	3c01      	subs	r4, #1
    6bce:	e7f1      	b.n	6bb4 <onoff_sync_finalize+0x1e>
    6bd0:	461c      	mov	r4, r3
		state = ONOFF_STATE_ERROR;
    6bd2:	2201      	movs	r2, #1
    6bd4:	e7ef      	b.n	6bb6 <onoff_sync_finalize+0x20>

00006bd6 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
    6bd6:	4603      	mov	r3, r0
    6bd8:	b158      	cbz	r0, 6bf2 <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    6bda:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    6bdc:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
    6be0:	2a01      	cmp	r2, #1
    6be2:	d003      	beq.n	6bec <sys_notify_validate+0x16>
    6be4:	2a03      	cmp	r2, #3
    6be6:	d104      	bne.n	6bf2 <sys_notify_validate+0x1c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
    6be8:	6802      	ldr	r2, [r0, #0]
    6bea:	b112      	cbz	r2, 6bf2 <sys_notify_validate+0x1c>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
    6bec:	2000      	movs	r0, #0
    6bee:	6098      	str	r0, [r3, #8]
    6bf0:	4770      	bx	lr
    6bf2:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
    6bf6:	4770      	bx	lr

00006bf8 <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    6bf8:	6842      	ldr	r2, [r0, #4]
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
    6bfa:	6081      	str	r1, [r0, #8]
	return method & SYS_NOTIFY_METHOD_MASK;
    6bfc:	f002 0203 	and.w	r2, r2, #3
	switch (method) {
    6c00:	2a03      	cmp	r2, #3
    6c02:	f04f 0200 	mov.w	r2, #0
{
    6c06:	4603      	mov	r3, r0
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    6c08:	bf0c      	ite	eq
    6c0a:	6800      	ldreq	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
    6c0c:	4610      	movne	r0, r2
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    6c0e:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    6c10:	4770      	bx	lr

00006c12 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_META, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    6c12:	4770      	bx	lr

00006c14 <z_log_minimal_printk>:
#include <zephyr/sys/printk.h>

#define HEXDUMP_BYTES_IN_LINE 8U

void z_log_minimal_printk(const char *fmt, ...)
{
    6c14:	b40f      	push	{r0, r1, r2, r3}
    6c16:	b507      	push	{r0, r1, r2, lr}
    6c18:	a904      	add	r1, sp, #16
    6c1a:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    6c1e:	9101      	str	r1, [sp, #4]
	vprintk(fmt, ap);
    6c20:	f7fa fb9e 	bl	1360 <vprintk>
	va_end(ap);
}
    6c24:	b003      	add	sp, #12
    6c26:	f85d eb04 	ldr.w	lr, [sp], #4
    6c2a:	b004      	add	sp, #16
    6c2c:	4770      	bx	lr

00006c2e <flash_area_close>:

void flash_area_close(const struct flash_area *fa)
{
	/* nothing to do for now */
}
    6c2e:	4770      	bx	lr

00006c30 <flash_area_read>:


static inline bool is_in_flash_area_bounds(const struct flash_area *fa,
					   off_t off, size_t len)
{
	return (off >= 0) && ((off + len) <= fa->fa_size);
    6c30:	2900      	cmp	r1, #0

int flash_area_read(const struct flash_area *fa, off_t off, void *dst,
		    size_t len)
{
    6c32:	b430      	push	{r4, r5}
    6c34:	4604      	mov	r4, r0
    6c36:	4618      	mov	r0, r3
    6c38:	db0b      	blt.n	6c52 <flash_area_read+0x22>
    6c3a:	68a5      	ldr	r5, [r4, #8]
    6c3c:	4408      	add	r0, r1
    6c3e:	42a8      	cmp	r0, r5
    6c40:	d807      	bhi.n	6c52 <flash_area_read+0x22>
	if (!is_in_flash_area_bounds(fa, off, len)) {
		return -EINVAL;
	}

	return flash_read(fa->fa_dev, fa->fa_off + off, dst, len);
    6c42:	68e0      	ldr	r0, [r4, #12]
    6c44:	6864      	ldr	r4, [r4, #4]
    6c46:	4421      	add	r1, r4
				    size_t len)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->read(dev, offset, data, len);
    6c48:	6884      	ldr	r4, [r0, #8]
    6c4a:	6824      	ldr	r4, [r4, #0]
    6c4c:	46a4      	mov	ip, r4
}
    6c4e:	bc30      	pop	{r4, r5}
    6c50:	4760      	bx	ip
    6c52:	f06f 0015 	mvn.w	r0, #21
    6c56:	bc30      	pop	{r4, r5}
    6c58:	4770      	bx	lr

00006c5a <flash_area_write>:
    6c5a:	2900      	cmp	r1, #0

int flash_area_write(const struct flash_area *fa, off_t off, const void *src,
		     size_t len)
{
    6c5c:	b430      	push	{r4, r5}
    6c5e:	4604      	mov	r4, r0
    6c60:	4618      	mov	r0, r3
    6c62:	db0b      	blt.n	6c7c <flash_area_write+0x22>
    6c64:	68a5      	ldr	r5, [r4, #8]
    6c66:	4408      	add	r0, r1
    6c68:	42a8      	cmp	r0, r5
    6c6a:	d807      	bhi.n	6c7c <flash_area_write+0x22>
	if (!is_in_flash_area_bounds(fa, off, len)) {
		return -EINVAL;
	}

	return flash_write(fa->fa_dev, fa->fa_off + off, (void *)src, len);
    6c6c:	68e0      	ldr	r0, [r4, #12]
    6c6e:	6864      	ldr	r4, [r4, #4]
    6c70:	4421      	add	r1, r4
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;
	int rc;

	rc = api->write(dev, offset, data, len);
    6c72:	6884      	ldr	r4, [r0, #8]
    6c74:	6864      	ldr	r4, [r4, #4]
    6c76:	46a4      	mov	ip, r4
}
    6c78:	bc30      	pop	{r4, r5}
    6c7a:	4760      	bx	ip
    6c7c:	f06f 0015 	mvn.w	r0, #21
    6c80:	bc30      	pop	{r4, r5}
    6c82:	4770      	bx	lr

00006c84 <flash_area_erase>:
    6c84:	2900      	cmp	r1, #0

int flash_area_erase(const struct flash_area *fa, off_t off, size_t len)
{
    6c86:	4603      	mov	r3, r0
    6c88:	b410      	push	{r4}
    6c8a:	4610      	mov	r0, r2
    6c8c:	db0a      	blt.n	6ca4 <flash_area_erase+0x20>
    6c8e:	689c      	ldr	r4, [r3, #8]
    6c90:	4408      	add	r0, r1
    6c92:	42a0      	cmp	r0, r4
    6c94:	d806      	bhi.n	6ca4 <flash_area_erase+0x20>
	if (!is_in_flash_area_bounds(fa, off, len)) {
		return -EINVAL;
	}

	return flash_erase(fa->fa_dev, fa->fa_off + off, len);
    6c96:	68d8      	ldr	r0, [r3, #12]
    6c98:	685b      	ldr	r3, [r3, #4]
    6c9a:	4419      	add	r1, r3
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;
	int rc;

	rc = api->erase(dev, offset, size);
    6c9c:	6883      	ldr	r3, [r0, #8]
}
    6c9e:	bc10      	pop	{r4}
    6ca0:	689b      	ldr	r3, [r3, #8]
    6ca2:	4718      	bx	r3
    6ca4:	f06f 0015 	mvn.w	r0, #21
    6ca8:	bc10      	pop	{r4}
    6caa:	4770      	bx	lr

00006cac <flash_area_align>:

uint32_t flash_area_align(const struct flash_area *fa)
{
    6cac:	b508      	push	{r3, lr}
	return flash_get_write_block_size(fa->fa_dev);
    6cae:	68c0      	ldr	r0, [r0, #12]
static inline size_t z_impl_flash_get_write_block_size(const struct device *dev)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->get_parameters(dev)->write_block_size;
    6cb0:	6883      	ldr	r3, [r0, #8]
    6cb2:	68db      	ldr	r3, [r3, #12]
    6cb4:	4798      	blx	r3
}
    6cb6:	6800      	ldr	r0, [r0, #0]
    6cb8:	bd08      	pop	{r3, pc}

00006cba <flash_area_erased_val>:
{
	return fa->fa_dev;
}

uint8_t flash_area_erased_val(const struct flash_area *fa)
{
    6cba:	b508      	push	{r3, lr}
	const struct flash_parameters *param;

	param = flash_get_parameters(fa->fa_dev);
    6cbc:	68c0      	ldr	r0, [r0, #12]
static inline const struct flash_parameters *z_impl_flash_get_parameters(const struct device *dev)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->get_parameters(dev);
    6cbe:	6883      	ldr	r3, [r0, #8]
    6cc0:	68db      	ldr	r3, [r3, #12]
    6cc2:	4798      	blx	r3

	return param->erase_value;
}
    6cc4:	7900      	ldrb	r0, [r0, #4]
    6cc6:	bd08      	pop	{r3, pc}

00006cc8 <get_sectors_cb>:
{
    6cc8:	b570      	push	{r4, r5, r6, lr}
	if (info->start_offset < data->area_off) {
    6cca:	684c      	ldr	r4, [r1, #4]
    6ccc:	6803      	ldr	r3, [r0, #0]
    6cce:	42a3      	cmp	r3, r4
    6cd0:	d201      	bcs.n	6cd6 <get_sectors_cb+0xe>
		*bail_value = true;
    6cd2:	2001      	movs	r0, #1
}
    6cd4:	bd70      	pop	{r4, r5, r6, pc}
	} else if (info->start_offset >= data->area_off + data->area_len) {
    6cd6:	688a      	ldr	r2, [r1, #8]
    6cd8:	4422      	add	r2, r4
    6cda:	4293      	cmp	r3, r2
    6cdc:	d301      	bcc.n	6ce2 <get_sectors_cb+0x1a>
		*bail_value = false;
    6cde:	2000      	movs	r0, #0
    6ce0:	e7f8      	b.n	6cd4 <get_sectors_cb+0xc>
	} else if (data->ret_idx >= data->ret_len) {
    6ce2:	e9d1 2503 	ldrd	r2, r5, [r1, #12]
    6ce6:	694e      	ldr	r6, [r1, #20]
    6ce8:	42b5      	cmp	r5, r6
    6cea:	d303      	bcc.n	6cf4 <get_sectors_cb+0x2c>
		data->status = -ENOMEM;
    6cec:	f06f 030b 	mvn.w	r3, #11
    6cf0:	618b      	str	r3, [r1, #24]
		return true;
    6cf2:	e7f4      	b.n	6cde <get_sectors_cb+0x16>
	ret[data->ret_idx].fs_off = info->start_offset - data->area_off;
    6cf4:	1b1b      	subs	r3, r3, r4
    6cf6:	f842 3035 	str.w	r3, [r2, r5, lsl #3]
	ret[data->ret_idx].fs_size = info->size;
    6cfa:	6843      	ldr	r3, [r0, #4]
    6cfc:	6908      	ldr	r0, [r1, #16]
    6cfe:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
    6d02:	6053      	str	r3, [r2, #4]
	data->ret_idx++;
    6d04:	690b      	ldr	r3, [r1, #16]
    6d06:	3301      	adds	r3, #1
    6d08:	610b      	str	r3, [r1, #16]
	return true;
    6d0a:	e7e2      	b.n	6cd2 <get_sectors_cb+0xa>

00006d0c <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
    6d0c:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
    6d0e:	6800      	ldr	r0, [r0, #0]
    6d10:	f7fa bede 	b.w	1ad0 <z_arm_fatal_error>

00006d14 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    6d14:	2100      	movs	r1, #0
    6d16:	2001      	movs	r0, #1
    6d18:	f7fa beda 	b.w	1ad0 <z_arm_fatal_error>

00006d1c <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
    6d1c:	b508      	push	{r3, lr}
	handler();
    6d1e:	f7fa ff39 	bl	1b94 <z_SysNmiOnReset>
	z_arm_int_exit();
}
    6d22:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    6d26:	f7fb b805 	b.w	1d34 <z_arm_exc_exit>

00006d2a <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
    6d2a:	3901      	subs	r1, #1
    6d2c:	4603      	mov	r3, r0
    6d2e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    6d32:	b90a      	cbnz	r2, 6d38 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
    6d34:	701a      	strb	r2, [r3, #0]

	return dest;
}
    6d36:	4770      	bx	lr
		*d = *s;
    6d38:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
    6d3c:	e7f7      	b.n	6d2e <strcpy+0x4>

00006d3e <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    6d3e:	4603      	mov	r3, r0
	size_t n = 0;
    6d40:	2000      	movs	r0, #0

	while (*s != '\0') {
    6d42:	5c1a      	ldrb	r2, [r3, r0]
    6d44:	b902      	cbnz	r2, 6d48 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
    6d46:	4770      	bx	lr
		n++;
    6d48:	3001      	adds	r0, #1
    6d4a:	e7fa      	b.n	6d42 <strlen+0x4>

00006d4c <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
    6d4c:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
    6d4e:	b15a      	cbz	r2, 6d68 <memcmp+0x1c>
    6d50:	3901      	subs	r1, #1
    6d52:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
    6d54:	f810 2b01 	ldrb.w	r2, [r0], #1
    6d58:	f811 3f01 	ldrb.w	r3, [r1, #1]!
    6d5c:	42a0      	cmp	r0, r4
    6d5e:	d001      	beq.n	6d64 <memcmp+0x18>
    6d60:	429a      	cmp	r2, r3
    6d62:	d0f7      	beq.n	6d54 <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
    6d64:	1ad0      	subs	r0, r2, r3
}
    6d66:	bd10      	pop	{r4, pc}
		return 0;
    6d68:	4610      	mov	r0, r2
    6d6a:	e7fc      	b.n	6d66 <memcmp+0x1a>

00006d6c <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
    6d6c:	b510      	push	{r4, lr}
    6d6e:	1e43      	subs	r3, r0, #1
    6d70:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
    6d72:	4291      	cmp	r1, r2
    6d74:	d100      	bne.n	6d78 <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    6d76:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
    6d78:	f811 4b01 	ldrb.w	r4, [r1], #1
    6d7c:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    6d80:	e7f7      	b.n	6d72 <memcpy+0x6>

00006d82 <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    6d82:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
    6d84:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
    6d86:	4603      	mov	r3, r0
	while (n > 0) {
    6d88:	4293      	cmp	r3, r2
    6d8a:	d100      	bne.n	6d8e <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    6d8c:	4770      	bx	lr
		*(d_byte++) = c_byte;
    6d8e:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    6d92:	e7f9      	b.n	6d88 <memset+0x6>

00006d94 <_stdout_hook_default>:
}
    6d94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    6d98:	4770      	bx	lr

00006d9a <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
    6d9a:	6903      	ldr	r3, [r0, #16]
    6d9c:	b2c9      	uxtb	r1, r1
    6d9e:	220c      	movs	r2, #12
    6da0:	fb01 3302 	mla	r3, r1, r2, r3
    6da4:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
    6da6:	f000 0007 	and.w	r0, r0, #7
    6daa:	4770      	bx	lr

00006dac <set_on_state>:
	__asm__ volatile(
    6dac:	f04f 0320 	mov.w	r3, #32
    6db0:	f3ef 8211 	mrs	r2, BASEPRI
    6db4:	f383 8812 	msr	BASEPRI_MAX, r3
    6db8:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    6dbc:	6803      	ldr	r3, [r0, #0]
    6dbe:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    6dc2:	f043 0302 	orr.w	r3, r3, #2
    6dc6:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    6dc8:	f382 8811 	msr	BASEPRI, r2
    6dcc:	f3bf 8f6f 	isb	sy
}
    6dd0:	4770      	bx	lr

00006dd2 <stop>:
{
    6dd2:	b570      	push	{r4, r5, r6, lr}
    6dd4:	b2c9      	uxtb	r1, r1
	struct nrf_clock_control_data *data = dev->data;
    6dd6:	6903      	ldr	r3, [r0, #16]
	__asm__ volatile(
    6dd8:	f04f 0420 	mov.w	r4, #32
    6ddc:	f3ef 8511 	mrs	r5, BASEPRI
    6de0:	f384 8812 	msr	BASEPRI_MAX, r4
    6de4:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    6de8:	260c      	movs	r6, #12
    6dea:	fb06 3401 	mla	r4, r6, r1, r3
    6dee:	6c24      	ldr	r4, [r4, #64]	; 0x40
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    6df0:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
    6df4:	d008      	beq.n	6e08 <stop+0x36>
    6df6:	42a2      	cmp	r2, r4
    6df8:	d006      	beq.n	6e08 <stop+0x36>
	__asm__ volatile(
    6dfa:	f385 8811 	msr	BASEPRI, r5
    6dfe:	f3bf 8f6f 	isb	sy
		err = -EPERM;
    6e02:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    6e06:	bd70      	pop	{r4, r5, r6, pc}
		*flags = CLOCK_CONTROL_STATUS_OFF;
    6e08:	4371      	muls	r1, r6
    6e0a:	440b      	add	r3, r1
    6e0c:	2201      	movs	r2, #1
    6e0e:	641a      	str	r2, [r3, #64]	; 0x40
    6e10:	f385 8811 	msr	BASEPRI, r5
    6e14:	f3bf 8f6f 	isb	sy
	get_sub_config(dev, type)->stop();
    6e18:	6843      	ldr	r3, [r0, #4]
    6e1a:	440b      	add	r3, r1
    6e1c:	685b      	ldr	r3, [r3, #4]
    6e1e:	4798      	blx	r3
	return 0;
    6e20:	2000      	movs	r0, #0
    6e22:	e7f0      	b.n	6e06 <stop+0x34>

00006e24 <api_stop>:
	return stop(dev, subsys, CTX_API);
    6e24:	2280      	movs	r2, #128	; 0x80
    6e26:	f7ff bfd4 	b.w	6dd2 <stop>

00006e2a <async_start>:
{
    6e2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6e2c:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
    6e2e:	6904      	ldr	r4, [r0, #16]
	return &data->subsys[type];
    6e30:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
    6e32:	f04f 0520 	mov.w	r5, #32
    6e36:	f3ef 8611 	mrs	r6, BASEPRI
    6e3a:	f385 8812 	msr	BASEPRI_MAX, r5
    6e3e:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    6e42:	250c      	movs	r5, #12
    6e44:	4369      	muls	r1, r5
    6e46:	440c      	add	r4, r1
    6e48:	6c25      	ldr	r5, [r4, #64]	; 0x40
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    6e4a:	f005 0c07 	and.w	ip, r5, #7
    6e4e:	f1bc 0f01 	cmp.w	ip, #1
    6e52:	d10b      	bne.n	6e6c <async_start+0x42>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    6e54:	6427      	str	r7, [r4, #64]	; 0x40
	__asm__ volatile(
    6e56:	f386 8811 	msr	BASEPRI, r6
    6e5a:	f3bf 8f6f 	isb	sy
	subdata->user_data = user_data;
    6e5e:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
    6e62:	6843      	ldr	r3, [r0, #4]
    6e64:	585b      	ldr	r3, [r3, r1]
    6e66:	4798      	blx	r3
	return 0;
    6e68:	2000      	movs	r0, #0
}
    6e6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
    6e6c:	f005 05c0 	and.w	r5, r5, #192	; 0xc0
	} else if (current_ctx != ctx) {
    6e70:	42af      	cmp	r7, r5
    6e72:	f386 8811 	msr	BASEPRI, r6
    6e76:	f3bf 8f6f 	isb	sy
		err = -EALREADY;
    6e7a:	bf0c      	ite	eq
    6e7c:	f06f 0077 	mvneq.w	r0, #119	; 0x77
		err = -EPERM;
    6e80:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    6e84:	e7f1      	b.n	6e6a <async_start+0x40>

00006e86 <api_start>:
{
    6e86:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
    6e88:	2480      	movs	r4, #128	; 0x80
    6e8a:	9400      	str	r4, [sp, #0]
    6e8c:	f7ff ffcd 	bl	6e2a <async_start>
}
    6e90:	b002      	add	sp, #8
    6e92:	bd10      	pop	{r4, pc}

00006e94 <onoff_started_callback>:
{
    6e94:	b410      	push	{r4}
	return &data->mgr[type];
    6e96:	6900      	ldr	r0, [r0, #16]
    6e98:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
    6e9a:	241c      	movs	r4, #28
    6e9c:	fb03 0004 	mla	r0, r3, r4, r0
    6ea0:	2100      	movs	r1, #0
}
    6ea2:	bc10      	pop	{r4}
	notify(mgr, 0);
    6ea4:	4710      	bx	r2

00006ea6 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    6ea6:	2000      	movs	r0, #0
    6ea8:	f002 b8d0 	b.w	904c <nrfx_clock_stop>

00006eac <blocking_start_callback>:
{
    6eac:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
    6eae:	f7fe bcc9 	b.w	5844 <z_impl_k_sem_give>

00006eb2 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    6eb2:	6843      	ldr	r3, [r0, #4]
    6eb4:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    6eb6:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
    6eba:	600b      	str	r3, [r1, #0]
}
    6ebc:	2000      	movs	r0, #0
    6ebe:	4770      	bx	lr

00006ec0 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    6ec0:	6843      	ldr	r3, [r0, #4]
    6ec2:	685b      	ldr	r3, [r3, #4]
	const uint32_t set_mask = value & mask;
    6ec4:	ea02 0001 	and.w	r0, r2, r1
	const uint32_t clear_mask = (~set_mask) & mask;
    6ec8:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
    6ecc:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
    6ed0:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
    6ed4:	2000      	movs	r0, #0
    6ed6:	4770      	bx	lr

00006ed8 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    6ed8:	6843      	ldr	r3, [r0, #4]
    6eda:	685b      	ldr	r3, [r3, #4]
}
    6edc:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
    6ede:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    6ee2:	4770      	bx	lr

00006ee4 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    6ee4:	6843      	ldr	r3, [r0, #4]
    6ee6:	685b      	ldr	r3, [r3, #4]
}
    6ee8:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
    6eea:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    6eee:	4770      	bx	lr

00006ef0 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    6ef0:	6843      	ldr	r3, [r0, #4]
    6ef2:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    6ef4:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	const uint32_t set_mask = value & mask;
    6ef8:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
    6efc:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
    6efe:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
    6f02:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
}
    6f06:	2000      	movs	r0, #0
    6f08:	4770      	bx	lr

00006f0a <gpio_nrfx_manage_callback>:
{
    6f0a:	b510      	push	{r4, lr}
	return port->data;
    6f0c:	6903      	ldr	r3, [r0, #16]
	return list->head;
    6f0e:	6858      	ldr	r0, [r3, #4]
	if (!sys_slist_is_empty(callbacks)) {
    6f10:	b1f8      	cbz	r0, 6f52 <gpio_nrfx_manage_callback+0x48>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    6f12:	4288      	cmp	r0, r1
    6f14:	d119      	bne.n	6f4a <gpio_nrfx_manage_callback+0x40>
Z_GENLIST_REMOVE(slist, snode)
    6f16:	689c      	ldr	r4, [r3, #8]
	return node->next;
    6f18:	6808      	ldr	r0, [r1, #0]
	list->head = node;
    6f1a:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
    6f1c:	42a1      	cmp	r1, r4
    6f1e:	d100      	bne.n	6f22 <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
    6f20:	6098      	str	r0, [r3, #8]
	parent->next = child;
    6f22:	2000      	movs	r0, #0
    6f24:	6008      	str	r0, [r1, #0]
	if (set) {
    6f26:	b12a      	cbz	r2, 6f34 <gpio_nrfx_manage_callback+0x2a>
	return list->head;
    6f28:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
    6f2a:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
    6f2c:	689a      	ldr	r2, [r3, #8]
	list->head = node;
    6f2e:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
    6f30:	b902      	cbnz	r2, 6f34 <gpio_nrfx_manage_callback+0x2a>
	list->tail = node;
    6f32:	6099      	str	r1, [r3, #8]
	return 0;
    6f34:	2000      	movs	r0, #0
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    6f36:	e010      	b.n	6f5a <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    6f38:	4281      	cmp	r1, r0
    6f3a:	d106      	bne.n	6f4a <gpio_nrfx_manage_callback+0x40>
	return node->next;
    6f3c:	6808      	ldr	r0, [r1, #0]
	parent->next = child;
    6f3e:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
    6f40:	6898      	ldr	r0, [r3, #8]
    6f42:	4281      	cmp	r1, r0
    6f44:	d1ed      	bne.n	6f22 <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
    6f46:	609c      	str	r4, [r3, #8]
}
    6f48:	e7eb      	b.n	6f22 <gpio_nrfx_manage_callback+0x18>
	return node->next;
    6f4a:	4604      	mov	r4, r0
    6f4c:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    6f4e:	2800      	cmp	r0, #0
    6f50:	d1f2      	bne.n	6f38 <gpio_nrfx_manage_callback+0x2e>
			if (!set) {
    6f52:	2a00      	cmp	r2, #0
    6f54:	d1e8      	bne.n	6f28 <gpio_nrfx_manage_callback+0x1e>
				return -EINVAL;
    6f56:	f06f 0015 	mvn.w	r0, #21
}
    6f5a:	bd10      	pop	{r4, pc}

00006f5c <pin_interrupt_configure>:
	return rc;
    6f5c:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
}
    6f60:	bf14      	ite	ne
    6f62:	f06f 0085 	mvnne.w	r0, #133	; 0x85
    6f66:	2000      	moveq	r0, #0
    6f68:	4770      	bx	lr

00006f6a <k_sem_take.constprop.0.isra.0>:
	return z_impl_k_sem_take(sem, timeout);
    6f6a:	f7fe bc8b 	b.w	5884 <z_impl_k_sem_take>

00006f6e <i2c_write>:
{
    6f6e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	msg.len = num_bytes;
    6f70:	e9cd 1201 	strd	r1, r2, [sp, #4]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
    6f74:	2202      	movs	r2, #2
    6f76:	f88d 200c 	strb.w	r2, [sp, #12]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
    6f7a:	6882      	ldr	r2, [r0, #8]
    6f7c:	a901      	add	r1, sp, #4
    6f7e:	6894      	ldr	r4, [r2, #8]
    6f80:	2201      	movs	r2, #1
    6f82:	47a0      	blx	r4
}
    6f84:	b004      	add	sp, #16
    6f86:	bd10      	pop	{r4, pc}

00006f88 <i2c_write_dt>:
	return i2c_write(spec->bus, buf, num_bytes, spec->addr);
    6f88:	8883      	ldrh	r3, [r0, #4]
    6f8a:	6800      	ldr	r0, [r0, #0]
    6f8c:	f7ff bfef 	b.w	6f6e <i2c_write>

00006f90 <i2c_reg_write_word_be>:
{
    6f90:	b507      	push	{r0, r1, r2, lr}
	uint8_t tx_buf[3] = { reg_addr, value >> 8, value & 0xff };
    6f92:	0a13      	lsrs	r3, r2, #8
    6f94:	f88d 1004 	strb.w	r1, [sp, #4]
    6f98:	f88d 2006 	strb.w	r2, [sp, #6]
	return i2c_write_dt(bus, tx_buf, 3);
    6f9c:	a901      	add	r1, sp, #4
    6f9e:	2203      	movs	r2, #3
	uint8_t tx_buf[3] = { reg_addr, value >> 8, value & 0xff };
    6fa0:	f88d 3005 	strb.w	r3, [sp, #5]
	return i2c_write_dt(bus, tx_buf, 3);
    6fa4:	f7ff fff0 	bl	6f88 <i2c_write_dt>
}
    6fa8:	b003      	add	sp, #12
    6faa:	f85d fb04 	ldr.w	pc, [sp], #4

00006fae <port_write>:
{
    6fae:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6fb2:	4606      	mov	r6, r0
    6fb4:	4689      	mov	r9, r1
    6fb6:	4614      	mov	r4, r2
    6fb8:	4698      	mov	r8, r3
	if (k_is_in_isr()) {
    6fba:	f002 f8ac 	bl	9116 <k_is_in_isr>
    6fbe:	bb00      	cbnz	r0, 7002 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2>
	const struct sx1509b_config *cfg = dev->config;
    6fc0:	6875      	ldr	r5, [r6, #4]
	struct sx1509b_drv_data *drv_data = dev->data;
    6fc2:	6936      	ldr	r6, [r6, #16]
	k_sem_take(&drv_data->lock, K_FOREVER);
    6fc4:	f106 071c 	add.w	r7, r6, #28
    6fc8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    6fcc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6fd0:	4638      	mov	r0, r7
    6fd2:	f7ff ffca 	bl	6f6a <k_sem_take.constprop.0.isra.0>
	uint16_t orig_out = *outp;
    6fd6:	8ab2      	ldrh	r2, [r6, #20]
	uint16_t out = ((orig_out & ~mask) | (value & mask)) ^ toggle;
    6fd8:	4054      	eors	r4, r2
    6fda:	ea04 0409 	and.w	r4, r4, r9
    6fde:	ea82 0208 	eor.w	r2, r2, r8
    6fe2:	4054      	eors	r4, r2
    6fe4:	b2a4      	uxth	r4, r4
	int rc = i2c_reg_write_word_be(&cfg->bus, SX1509B_REG_DATA, out);
    6fe6:	1d28      	adds	r0, r5, #4
    6fe8:	4622      	mov	r2, r4
    6fea:	2110      	movs	r1, #16
    6fec:	f7ff ffd0 	bl	6f90 <i2c_reg_write_word_be>
	if (rc == 0) {
    6ff0:	4605      	mov	r5, r0
    6ff2:	b900      	cbnz	r0, 6ff6 <port_write+0x48>
		*outp = out;
    6ff4:	82b4      	strh	r4, [r6, #20]
	z_impl_k_sem_give(sem);
    6ff6:	4638      	mov	r0, r7
    6ff8:	f7fe fc24 	bl	5844 <z_impl_k_sem_give>
}
    6ffc:	4628      	mov	r0, r5
    6ffe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -EWOULDBLOCK;
    7002:	f06f 050a 	mvn.w	r5, #10
    7006:	e7f9      	b.n	6ffc <port_write+0x4e>

00007008 <port_toggle_bits>:
	return port_write(dev, 0, 0, pins);
    7008:	2200      	movs	r2, #0
{
    700a:	460b      	mov	r3, r1
	return port_write(dev, 0, 0, pins);
    700c:	4611      	mov	r1, r2
    700e:	f7ff bfce 	b.w	6fae <port_write>

00007012 <port_clear_bits>:
	return port_write(dev, pins, 0, 0);
    7012:	2300      	movs	r3, #0
    7014:	461a      	mov	r2, r3
    7016:	f7ff bfca 	b.w	6fae <port_write>

0000701a <port_set_bits>:
{
    701a:	460a      	mov	r2, r1
	return port_write(dev, pins, pins, 0);
    701c:	2300      	movs	r3, #0
    701e:	f7ff bfc6 	b.w	6fae <port_write>

00007022 <port_set_masked>:
	return port_write(dev, mask, value, 0);
    7022:	2300      	movs	r3, #0
    7024:	f7ff bfc3 	b.w	6fae <port_write>

00007028 <write_pin_state.constprop.0>:
static int write_pin_state(const struct sx1509b_config *cfg,
    7028:	b510      	push	{r4, lr}
    702a:	b086      	sub	sp, #24
	pin_buf.reg = SX1509B_REG_INPUT_DISABLE;
    702c:	2300      	movs	r3, #0
    702e:	f88d 3004 	strb.w	r3, [sp, #4]
	pin_buf.pins.input_disable = sys_cpu_to_be16(pins->input_disable);
    7032:	880b      	ldrh	r3, [r1, #0]
    7034:	ba5b      	rev16	r3, r3
    7036:	f8ad 3005 	strh.w	r3, [sp, #5]
	pin_buf.pins.long_slew = sys_cpu_to_be16(pins->long_slew);
    703a:	884b      	ldrh	r3, [r1, #2]
    703c:	ba5b      	rev16	r3, r3
    703e:	f8ad 3007 	strh.w	r3, [sp, #7]
	pin_buf.pins.low_drive = sys_cpu_to_be16(pins->low_drive);
    7042:	888b      	ldrh	r3, [r1, #4]
    7044:	ba5b      	rev16	r3, r3
    7046:	f8ad 3009 	strh.w	r3, [sp, #9]
	pin_buf.pins.pull_up = sys_cpu_to_be16(pins->pull_up);
    704a:	88cb      	ldrh	r3, [r1, #6]
    704c:	ba5b      	rev16	r3, r3
    704e:	f8ad 300b 	strh.w	r3, [sp, #11]
	pin_buf.pins.pull_down = sys_cpu_to_be16(pins->pull_down);
    7052:	890b      	ldrh	r3, [r1, #8]
    7054:	ba5b      	rev16	r3, r3
    7056:	f8ad 300d 	strh.w	r3, [sp, #13]
	pin_buf.pins.open_drain = sys_cpu_to_be16(pins->open_drain);
    705a:	894b      	ldrh	r3, [r1, #10]
    705c:	ba5b      	rev16	r3, r3
    705e:	f8ad 300f 	strh.w	r3, [sp, #15]
	pin_buf.pins.polarity = sys_cpu_to_be16(pins->polarity);
    7062:	898b      	ldrh	r3, [r1, #12]
    7064:	ba5b      	rev16	r3, r3
    7066:	f8ad 3011 	strh.w	r3, [sp, #17]
	pin_buf.pins.dir = sys_cpu_to_be16(pins->dir);
    706a:	89cb      	ldrh	r3, [r1, #14]
    706c:	ba5b      	rev16	r3, r3
    706e:	f8ad 3013 	strh.w	r3, [sp, #19]
	pin_buf.pins.data = sys_cpu_to_be16(pins->data);
    7072:	8a0b      	ldrh	r3, [r1, #16]
    7074:	ba59      	rev16	r1, r3
    7076:	f8ad 1015 	strh.w	r1, [sp, #21]
		rc = i2c_reg_write_word_be(&cfg->bus, SX1509B_REG_DATA,
    707a:	1d04      	adds	r4, r0, #4
	if (data_first) {
    707c:	b162      	cbz	r2, 7098 <write_pin_state.constprop.0+0x70>
		rc = i2c_reg_write_word_be(&cfg->bus, SX1509B_REG_DATA,
    707e:	461a      	mov	r2, r3
    7080:	2110      	movs	r1, #16
    7082:	4620      	mov	r0, r4
    7084:	f7ff ff84 	bl	6f90 <i2c_reg_write_word_be>
		if (rc == 0) {
    7088:	b920      	cbnz	r0, 7094 <write_pin_state.constprop.0+0x6c>
			rc = i2c_write_dt(&cfg->bus, &pin_buf.reg,
    708a:	2211      	movs	r2, #17
		rc = i2c_write_dt(&cfg->bus, &pin_buf.reg, sizeof(pin_buf));
    708c:	a901      	add	r1, sp, #4
    708e:	4620      	mov	r0, r4
    7090:	f7ff ff7a 	bl	6f88 <i2c_write_dt>
}
    7094:	b006      	add	sp, #24
    7096:	bd10      	pop	{r4, pc}
		rc = i2c_write_dt(&cfg->bus, &pin_buf.reg, sizeof(pin_buf));
    7098:	2213      	movs	r2, #19
    709a:	e7f7      	b.n	708c <write_pin_state.constprop.0+0x64>

0000709c <sx1509b_config>:
{
    709c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    70a0:	460d      	mov	r5, r1
	const struct sx1509b_config *cfg = dev->config;
    70a2:	f8d0 9004 	ldr.w	r9, [r0, #4]
	struct sx1509b_drv_data *drv_data = dev->data;
    70a6:	6904      	ldr	r4, [r0, #16]
{
    70a8:	4617      	mov	r7, r2
	if (k_is_in_isr()) {
    70aa:	f002 f834 	bl	9116 <k_is_in_isr>
    70ae:	4682      	mov	sl, r0
    70b0:	2800      	cmp	r0, #0
    70b2:	f040 8084 	bne.w	71be <sx1509b_config+0x122>
	k_sem_take(&drv_data->lock, K_FOREVER);
    70b6:	f104 081c 	add.w	r8, r4, #28
    70ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    70be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    70c2:	4640      	mov	r0, r8
    70c4:	f7ff ff51 	bl	6f6a <k_sem_take.constprop.0.isra.0>
		drv_data->led_drv_enable &= ~BIT(pin);
    70c8:	2601      	movs	r6, #1
	if (drv_data->led_drv_enable & BIT(pin)) {
    70ca:	8ae2      	ldrh	r2, [r4, #22]
		drv_data->led_drv_enable &= ~BIT(pin);
    70cc:	40ae      	lsls	r6, r5
    70ce:	b2b6      	uxth	r6, r6
	if (drv_data->led_drv_enable & BIT(pin)) {
    70d0:	fa22 f505 	lsr.w	r5, r2, r5
		drv_data->led_drv_enable &= ~BIT(pin);
    70d4:	ea6f 0b06 	mvn.w	fp, r6
	if (drv_data->led_drv_enable & BIT(pin)) {
    70d8:	07e9      	lsls	r1, r5, #31
		drv_data->led_drv_enable &= ~BIT(pin);
    70da:	fa1f fb8b 	uxth.w	fp, fp
	if (drv_data->led_drv_enable & BIT(pin)) {
    70de:	d44c      	bmi.n	717a <sx1509b_config+0xde>
	pins->open_drain &= ~BIT(pin);
    70e0:	89e3      	ldrh	r3, [r4, #14]
    70e2:	ea03 020b 	and.w	r2, r3, fp
    70e6:	81e2      	strh	r2, [r4, #14]
	if ((flags & GPIO_SINGLE_ENDED) != 0) {
    70e8:	07ba      	lsls	r2, r7, #30
    70ea:	d458      	bmi.n	719e <sx1509b_config+0x102>
		pins->pull_up |= BIT(pin);
    70ec:	8963      	ldrh	r3, [r4, #10]
	if ((flags & GPIO_PULL_UP) != 0) {
    70ee:	06f8      	lsls	r0, r7, #27
		pins->pull_up |= BIT(pin);
    70f0:	bf4c      	ite	mi
    70f2:	4333      	orrmi	r3, r6
		pins->pull_up &= ~BIT(pin);
    70f4:	ea0b 0303 	andpl.w	r3, fp, r3
    70f8:	8163      	strh	r3, [r4, #10]
		pins->pull_down |= BIT(pin);
    70fa:	89a3      	ldrh	r3, [r4, #12]
	if ((flags & GPIO_PULL_DOWN) != 0) {
    70fc:	06b9      	lsls	r1, r7, #26
		pins->pull_down |= BIT(pin);
    70fe:	bf4c      	ite	mi
    7100:	4333      	orrmi	r3, r6
		pins->pull_down &= ~BIT(pin);
    7102:	ea0b 0303 	andpl.w	r3, fp, r3
    7106:	81a3      	strh	r3, [r4, #12]
		pins->input_disable &= ~BIT(pin);
    7108:	88a3      	ldrh	r3, [r4, #4]
	if ((flags & GPIO_INPUT) != 0) {
    710a:	03fa      	lsls	r2, r7, #15
		pins->input_disable &= ~BIT(pin);
    710c:	bf4c      	ite	mi
    710e:	ea0b 0303 	andmi.w	r3, fp, r3
		pins->input_disable |= BIT(pin);
    7112:	4333      	orrpl	r3, r6
	if ((flags & GPIO_OUTPUT) != 0) {
    7114:	03bd      	lsls	r5, r7, #14
    7116:	80a3      	strh	r3, [r4, #4]
		pins->dir &= ~BIT(pin);
    7118:	8a63      	ldrh	r3, [r4, #18]
	if ((flags & GPIO_OUTPUT) != 0) {
    711a:	d54a      	bpl.n	71b2 <sx1509b_config+0x116>
		pins->dir &= ~BIT(pin);
    711c:	ea0b 0303 	and.w	r3, fp, r3
		if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
    7120:	0378      	lsls	r0, r7, #13
		pins->dir &= ~BIT(pin);
    7122:	8263      	strh	r3, [r4, #18]
		if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
    7124:	d540      	bpl.n	71a8 <sx1509b_config+0x10c>
			pins->data &= ~BIT(pin);
    7126:	8aa3      	ldrh	r3, [r4, #20]
    7128:	ea0b 0303 	and.w	r3, fp, r3
			pins->data |= BIT(pin);
    712c:	82a3      	strh	r3, [r4, #20]
			data_first = true;
    712e:	f04f 0a01 	mov.w	sl, #1
		debounce->debounce_enable |= BIT(pin);
    7132:	f8b4 3019 	ldrh.w	r3, [r4, #25]
	if ((flags & SX1509B_GPIO_DEBOUNCE) != 0) {
    7136:	05fa      	lsls	r2, r7, #23
		debounce->debounce_enable |= BIT(pin);
    7138:	bf4c      	ite	mi
    713a:	4333      	orrmi	r3, r6
		debounce->debounce_enable &= ~BIT(pin);
    713c:	ea0b 0303 	andpl.w	r3, fp, r3
    7140:	f8a4 3019 	strh.w	r3, [r4, #25]
	rc = write_pin_state(cfg, drv_data, pins, data_first);
    7144:	4652      	mov	r2, sl
    7146:	1d21      	adds	r1, r4, #4
    7148:	4648      	mov	r0, r9
    714a:	f7ff ff6d 	bl	7028 <write_pin_state.constprop.0>
	if (rc == 0) {
    714e:	4605      	mov	r5, r0
    7150:	b9f0      	cbnz	r0, 7190 <sx1509b_config+0xf4>
		debounce_buf.reg = SX1509B_REG_DEBOUNCE_CONFIG;
    7152:	2322      	movs	r3, #34	; 0x22
    7154:	f88d 3004 	strb.w	r3, [sp, #4]
			= debounce->debounce_config;
    7158:	7e23      	ldrb	r3, [r4, #24]
    715a:	f88d 3005 	strb.w	r3, [sp, #5]
			= sys_cpu_to_be16(debounce->debounce_enable);
    715e:	f8b4 3019 	ldrh.w	r3, [r4, #25]
		rc = i2c_write_dt(&cfg->bus, &debounce_buf.reg,
    7162:	2204      	movs	r2, #4
			= sys_cpu_to_be16(debounce->debounce_enable);
    7164:	ba5b      	rev16	r3, r3
		rc = i2c_write_dt(&cfg->bus, &debounce_buf.reg,
    7166:	eb0d 0102 	add.w	r1, sp, r2
    716a:	eb09 0002 	add.w	r0, r9, r2
			= sys_cpu_to_be16(debounce->debounce_enable);
    716e:	f8ad 3006 	strh.w	r3, [sp, #6]
		rc = i2c_write_dt(&cfg->bus, &debounce_buf.reg,
    7172:	f7ff ff09 	bl	6f88 <i2c_write_dt>
    7176:	4605      	mov	r5, r0
    7178:	e00a      	b.n	7190 <sx1509b_config+0xf4>
		drv_data->led_drv_enable &= ~BIT(pin);
    717a:	ea02 020b 	and.w	r2, r2, fp
    717e:	82e2      	strh	r2, [r4, #22]
		rc = i2c_reg_write_word_be(&cfg->bus,
    7180:	2120      	movs	r1, #32
    7182:	f109 0004 	add.w	r0, r9, #4
    7186:	f7ff ff03 	bl	6f90 <i2c_reg_write_word_be>
		if (rc) {
    718a:	4605      	mov	r5, r0
    718c:	2800      	cmp	r0, #0
    718e:	d0a7      	beq.n	70e0 <sx1509b_config+0x44>
    7190:	4640      	mov	r0, r8
    7192:	f7fe fb57 	bl	5844 <z_impl_k_sem_give>
}
    7196:	4628      	mov	r0, r5
    7198:	b003      	add	sp, #12
    719a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((flags & GPIO_LINE_OPEN_DRAIN) != 0) {
    719e:	077d      	lsls	r5, r7, #29
    71a0:	d50a      	bpl.n	71b8 <sx1509b_config+0x11c>
			pins->open_drain |= BIT(pin);
    71a2:	4333      	orrs	r3, r6
    71a4:	81e3      	strh	r3, [r4, #14]
    71a6:	e7a1      	b.n	70ec <sx1509b_config+0x50>
		} else if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
    71a8:	0339      	lsls	r1, r7, #12
    71aa:	d5c2      	bpl.n	7132 <sx1509b_config+0x96>
			pins->data |= BIT(pin);
    71ac:	8aa3      	ldrh	r3, [r4, #20]
    71ae:	4333      	orrs	r3, r6
			data_first = true;
    71b0:	e7bc      	b.n	712c <sx1509b_config+0x90>
		pins->dir |= BIT(pin);
    71b2:	4333      	orrs	r3, r6
    71b4:	8263      	strh	r3, [r4, #18]
    71b6:	e7bc      	b.n	7132 <sx1509b_config+0x96>
			rc = -ENOTSUP;
    71b8:	f06f 0585 	mvn.w	r5, #133	; 0x85
    71bc:	e7e8      	b.n	7190 <sx1509b_config+0xf4>
		return -EWOULDBLOCK;
    71be:	f06f 050a 	mvn.w	r5, #10
    71c2:	e7e8      	b.n	7196 <sx1509b_config+0xfa>

000071c4 <port_get>:
{
    71c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    71c6:	b089      	sub	sp, #36	; 0x24
	const struct sx1509b_config *cfg = dev->config;
    71c8:	6847      	ldr	r7, [r0, #4]
	struct sx1509b_drv_data *drv_data = dev->data;
    71ca:	6905      	ldr	r5, [r0, #16]
{
    71cc:	460e      	mov	r6, r1
	if (k_is_in_isr()) {
    71ce:	f001 ffa2 	bl	9116 <k_is_in_isr>
    71d2:	4604      	mov	r4, r0
    71d4:	bb60      	cbnz	r0, 7230 <port_get+0x6c>
	k_sem_take(&drv_data->lock, K_FOREVER);
    71d6:	351c      	adds	r5, #28
    71d8:	4628      	mov	r0, r5
    71da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    71de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    71e2:	f7ff fec2 	bl	6f6a <k_sem_take.constprop.0.isra.0>
	msg[0].buf = (uint8_t *)write_buf;
    71e6:	f10d 0205 	add.w	r2, sp, #5
    71ea:	9202      	str	r2, [sp, #8]
	msg[0].len = num_write;
    71ec:	2201      	movs	r2, #1
	return i2c_write_read(spec->bus, spec->addr,
    71ee:	6878      	ldr	r0, [r7, #4]
	msg[0].len = num_write;
    71f0:	9203      	str	r2, [sp, #12]
	uint8_t cmd = SX1509B_REG_DATA;
    71f2:	2310      	movs	r3, #16
	msg[1].buf = (uint8_t *)read_buf;
    71f4:	f10d 0206 	add.w	r2, sp, #6
    71f8:	f88d 3005 	strb.w	r3, [sp, #5]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
    71fc:	2107      	movs	r1, #7
	return i2c_write_read(spec->bus, spec->addr,
    71fe:	893b      	ldrh	r3, [r7, #8]
	msg[1].buf = (uint8_t *)read_buf;
    7200:	9205      	str	r2, [sp, #20]
	msg[1].len = num_read;
    7202:	2202      	movs	r2, #2
	msg[0].flags = I2C_MSG_WRITE;
    7204:	f88d 4010 	strb.w	r4, [sp, #16]
	msg[1].len = num_read;
    7208:	9206      	str	r2, [sp, #24]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
    720a:	f88d 101c 	strb.w	r1, [sp, #28]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
    720e:	6881      	ldr	r1, [r0, #8]
    7210:	688c      	ldr	r4, [r1, #8]
    7212:	a902      	add	r1, sp, #8
    7214:	47a0      	blx	r4
	if (rc != 0) {
    7216:	4604      	mov	r4, r0
    7218:	b920      	cbnz	r0, 7224 <port_get+0x60>
	*value = sys_be16_to_cpu(pin_data);
    721a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    721e:	ba5b      	rev16	r3, r3
    7220:	b29b      	uxth	r3, r3
    7222:	6033      	str	r3, [r6, #0]
    7224:	4628      	mov	r0, r5
    7226:	f7fe fb0d 	bl	5844 <z_impl_k_sem_give>
}
    722a:	4620      	mov	r0, r4
    722c:	b009      	add	sp, #36	; 0x24
    722e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -EWOULDBLOCK;
    7230:	f06f 040a 	mvn.w	r4, #10
    7234:	e7f9      	b.n	722a <port_get+0x66>

00007236 <irq_connect0>:
		      POST_KERNEL,					       \
		      CONFIG_I2C_INIT_PRIORITY,				       \
		      &i2c_nrfx_twim_driver_api)

#ifdef CONFIG_I2C_0_NRF_TWIM
I2C_NRFX_TWIM_DEVICE(0);
    7236:	2200      	movs	r2, #0
    7238:	2101      	movs	r1, #1
    723a:	2003      	movs	r0, #3
    723c:	f7fa bc92 	b.w	1b64 <z_arm_irq_priority_set>

00007240 <irq_connect1>:
#endif

#ifdef CONFIG_I2C_1_NRF_TWIM
I2C_NRFX_TWIM_DEVICE(1);
    7240:	2200      	movs	r2, #0
    7242:	2101      	movs	r1, #1
    7244:	2004      	movs	r0, #4
    7246:	f7fa bc8d 	b.w	1b64 <z_arm_irq_priority_set>

0000724a <pinctrl_apply_state.constprop.0>:
static inline int pinctrl_apply_state(const struct pinctrl_dev_config *config,
    724a:	b513      	push	{r0, r1, r4, lr}
	ret = pinctrl_lookup_state(config, id, &state);
    724c:	2100      	movs	r1, #0
    724e:	aa01      	add	r2, sp, #4
static inline int pinctrl_apply_state(const struct pinctrl_dev_config *config,
    7250:	4604      	mov	r4, r0
	ret = pinctrl_lookup_state(config, id, &state);
    7252:	f000 f9c0 	bl	75d6 <pinctrl_lookup_state>
	if (ret < 0) {
    7256:	2800      	cmp	r0, #0
    7258:	db05      	blt.n	7266 <pinctrl_apply_state.constprop.0+0x1c>
	return pinctrl_apply_state_direct(config, state);
    725a:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    725c:	6822      	ldr	r2, [r4, #0]
    725e:	7919      	ldrb	r1, [r3, #4]
    7260:	6818      	ldr	r0, [r3, #0]
    7262:	f000 f9ce 	bl	7602 <pinctrl_configure_pins>
}
    7266:	b002      	add	sp, #8
    7268:	bd10      	pop	{r4, pc}

0000726a <gpio_pin_set_dt>:
 * @param spec GPIO specification from devicetree
 * @param value Value assigned to the pin.
 * @return a value from gpio_pin_set()
 */
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
{
    726a:	4603      	mov	r3, r0
    726c:	460a      	mov	r2, r1
	return gpio_pin_set(spec->port, spec->pin, value);
    726e:	6800      	ldr	r0, [r0, #0]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    7270:	7919      	ldrb	r1, [r3, #4]
    7272:	2301      	movs	r3, #1
    7274:	fa03 f101 	lsl.w	r1, r3, r1
    7278:	6903      	ldr	r3, [r0, #16]
    727a:	681b      	ldr	r3, [r3, #0]
    727c:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
    727e:	bf18      	it	ne
    7280:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
    7284:	b112      	cbz	r2, 728c <gpio_pin_set_dt+0x22>
	return api->port_set_bits_raw(port, pins);
    7286:	6883      	ldr	r3, [r0, #8]
    7288:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
    728a:	4718      	bx	r3
    728c:	6883      	ldr	r3, [r0, #8]
    728e:	691b      	ldr	r3, [r3, #16]
    7290:	e7fb      	b.n	728a <gpio_pin_set_dt+0x20>

00007292 <disable_onoff>:
	return onoff_release(&data->mgr);
    7292:	6900      	ldr	r0, [r0, #16]
    7294:	3004      	adds	r0, #4
    7296:	f7ff bc4e 	b.w	6b36 <onoff_release>

0000729a <enable_onoff>:
	return onoff_request(&data->mgr, cli);
    729a:	6900      	ldr	r0, [r0, #16]
    729c:	3004      	adds	r0, #4
    729e:	f7ff bbf2 	b.w	6a86 <onoff_request>

000072a2 <disable_sync>:
{
    72a2:	b530      	push	{r4, r5, lr}
	int rc = onoff_sync_lock(&data->srv, &key);
    72a4:	6904      	ldr	r4, [r0, #16]
	const struct driver_config *cfg = dev->config;
    72a6:	6845      	ldr	r5, [r0, #4]
{
    72a8:	b085      	sub	sp, #20
	int rc = onoff_sync_lock(&data->srv, &key);
    72aa:	a903      	add	r1, sp, #12
    72ac:	4620      	mov	r0, r4
    72ae:	f7ff fc67 	bl	6b80 <onoff_sync_lock>
	if  ((cfg->options & OPTION_ALWAYS_ON) != 0) {
    72b2:	7d29      	ldrb	r1, [r5, #20]
    72b4:	f011 0101 	ands.w	r1, r1, #1
	int rc = onoff_sync_lock(&data->srv, &key);
    72b8:	4603      	mov	r3, r0
	if  ((cfg->options & OPTION_ALWAYS_ON) != 0) {
    72ba:	d114      	bne.n	72e6 <disable_sync+0x44>
	} else if (rc == 1) {
    72bc:	2801      	cmp	r0, #1
    72be:	d10c      	bne.n	72da <disable_sync+0x38>
		rc = gpio_pin_set_dt(&cfg->enable, false);
    72c0:	f105 000c 	add.w	r0, r5, #12
    72c4:	f7ff ffd1 	bl	726a <gpio_pin_set_dt>
    72c8:	4603      	mov	r3, r0
	return onoff_sync_finalize(&data->srv, key, NULL, rc, false);
    72ca:	2200      	movs	r2, #0
    72cc:	9903      	ldr	r1, [sp, #12]
    72ce:	9200      	str	r2, [sp, #0]
    72d0:	4620      	mov	r0, r4
    72d2:	f7ff fc60 	bl	6b96 <onoff_sync_finalize>
}
    72d6:	b005      	add	sp, #20
    72d8:	bd30      	pop	{r4, r5, pc}
		rc = -EINVAL;
    72da:	2800      	cmp	r0, #0
    72dc:	bf14      	ite	ne
    72de:	4603      	movne	r3, r0
    72e0:	f06f 0315 	mvneq.w	r3, #21
    72e4:	e7f1      	b.n	72ca <disable_sync+0x28>
		rc = 0;
    72e6:	2300      	movs	r3, #0
    72e8:	e7ef      	b.n	72ca <disable_sync+0x28>

000072ea <enable_sync>:
{
    72ea:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	int rc = onoff_sync_lock(&data->srv, &key);
    72ec:	6905      	ldr	r5, [r0, #16]
	const struct driver_config *cfg = dev->config;
    72ee:	6846      	ldr	r6, [r0, #4]
{
    72f0:	460c      	mov	r4, r1
	int rc = onoff_sync_lock(&data->srv, &key);
    72f2:	4628      	mov	r0, r5
    72f4:	a903      	add	r1, sp, #12
    72f6:	f7ff fc43 	bl	6b80 <onoff_sync_lock>
	if ((rc == 0)
    72fa:	4603      	mov	r3, r0
    72fc:	b940      	cbnz	r0, 7310 <enable_sync+0x26>
	    && ((cfg->options & OPTION_ALWAYS_ON) == 0)) {
    72fe:	7d32      	ldrb	r2, [r6, #20]
    7300:	07d2      	lsls	r2, r2, #31
    7302:	d405      	bmi.n	7310 <enable_sync+0x26>
		rc = gpio_pin_set_dt(&cfg->enable, true);
    7304:	2101      	movs	r1, #1
    7306:	f106 000c 	add.w	r0, r6, #12
    730a:	f7ff ffae 	bl	726a <gpio_pin_set_dt>
    730e:	4603      	mov	r3, r0
	return onoff_sync_finalize(&data->srv, key, cli, rc, true);
    7310:	2201      	movs	r2, #1
    7312:	9200      	str	r2, [sp, #0]
    7314:	9903      	ldr	r1, [sp, #12]
    7316:	4622      	mov	r2, r4
    7318:	4628      	mov	r0, r5
    731a:	f7ff fc3c 	bl	6b96 <onoff_sync_finalize>
}
    731e:	b004      	add	sp, #16
    7320:	bd70      	pop	{r4, r5, r6, pc}

00007322 <onoff_worker>:
{
    7322:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (data->task == WORK_TASK_ENABLE) {
    7326:	f890 1034 	ldrb.w	r1, [r0, #52]	; 0x34
	const struct driver_config *cfg = data->dev->config;
    732a:	f850 3c20 	ldr.w	r3, [r0, #-32]
	onoff_notify_fn notify = data->notify;
    732e:	6b07      	ldr	r7, [r0, #48]	; 0x30
	const struct driver_config *cfg = data->dev->config;
    7330:	685d      	ldr	r5, [r3, #4]
	if (data->task == WORK_TASK_ENABLE) {
    7332:	2901      	cmp	r1, #1
{
    7334:	4604      	mov	r4, r0
	struct driver_data_onoff *data
    7336:	f1a0 0620 	sub.w	r6, r0, #32
	if (data->task == WORK_TASK_ENABLE) {
    733a:	d10f      	bne.n	735c <onoff_worker+0x3a>
		rc = gpio_pin_set_dt(&cfg->enable, true);
    733c:	f105 000c 	add.w	r0, r5, #12
    7340:	f7ff ff93 	bl	726a <gpio_pin_set_dt>
		delay_us = cfg->startup_delay_us;
    7344:	686a      	ldr	r2, [r5, #4]
		rc = gpio_pin_set_dt(&cfg->enable, true);
    7346:	4603      	mov	r3, r0
	data->notify = NULL;
    7348:	2100      	movs	r1, #0
    734a:	6321      	str	r1, [r4, #48]	; 0x30
	data->task = WORK_TASK_UNDEFINED;
    734c:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
	finalize_transition(data, notify, delay_us, rc);
    7350:	4630      	mov	r0, r6
    7352:	4639      	mov	r1, r7
}
    7354:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	finalize_transition(data, notify, delay_us, rc);
    7358:	f7fb bdd4 	b.w	2f04 <finalize_transition>
	} else if (data->task == WORK_TASK_DISABLE) {
    735c:	2902      	cmp	r1, #2
    735e:	d107      	bne.n	7370 <onoff_worker+0x4e>
		rc = gpio_pin_set_dt(&cfg->enable, false);
    7360:	2100      	movs	r1, #0
    7362:	f105 000c 	add.w	r0, r5, #12
    7366:	f7ff ff80 	bl	726a <gpio_pin_set_dt>
		delay_us = cfg->off_on_delay_us;
    736a:	68aa      	ldr	r2, [r5, #8]
		rc = gpio_pin_set_dt(&cfg->enable, false);
    736c:	4603      	mov	r3, r0
		delay_us = cfg->off_on_delay_us;
    736e:	e7eb      	b.n	7348 <onoff_worker+0x26>
	int rc = 0;
    7370:	2300      	movs	r3, #0
	uint32_t delay_us = 0;
    7372:	461a      	mov	r2, r3
    7374:	e7e8      	b.n	7348 <onoff_worker+0x26>

00007376 <stop>:
{
    7376:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct driver_config *cfg = data->dev->config;
    737a:	f850 3c04 	ldr.w	r3, [r0, #-4]
{
    737e:	4604      	mov	r4, r0
	struct driver_data_onoff *data =
    7380:	1f06      	subs	r6, r0, #4
	const struct driver_config *cfg = data->dev->config;
    7382:	6858      	ldr	r0, [r3, #4]
{
    7384:	460d      	mov	r5, r1
	if ((cfg->options & OPTION_ALWAYS_ON) != 0) {
    7386:	7d01      	ldrb	r1, [r0, #20]
    7388:	f011 0101 	ands.w	r1, r1, #1
    738c:	d113      	bne.n	73b6 <stop+0x40>
	uint32_t delay_us = cfg->off_on_delay_us;
    738e:	6887      	ldr	r7, [r0, #8]
	rc = gpio_pin_set_dt(&cfg->enable, false);
    7390:	300c      	adds	r0, #12
    7392:	f7ff ff6a 	bl	726a <gpio_pin_set_dt>
	if (rc == -EWOULDBLOCK) {
    7396:	f110 0f0b 	cmn.w	r0, #11
	rc = gpio_pin_set_dt(&cfg->enable, false);
    739a:	4603      	mov	r3, r0
	if (rc == -EWOULDBLOCK) {
    739c:	d10d      	bne.n	73ba <stop+0x44>
		data->task = WORK_TASK_DISABLE;
    739e:	2302      	movs	r3, #2
    73a0:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
		data->notify = notify;
    73a4:	64e5      	str	r5, [r4, #76]	; 0x4c
		k_work_schedule(&data->dwork, K_NO_WAIT);
    73a6:	f104 001c 	add.w	r0, r4, #28
    73aa:	2200      	movs	r2, #0
}
    73ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		k_work_schedule(&data->dwork, K_NO_WAIT);
    73b0:	2300      	movs	r3, #0
    73b2:	f7fe bbe7 	b.w	5b84 <k_work_schedule>
	int rc = 0;
    73b6:	2300      	movs	r3, #0
		delay_us = 0;
    73b8:	461f      	mov	r7, r3
	finalize_transition(data, notify, delay_us, rc);
    73ba:	463a      	mov	r2, r7
    73bc:	4629      	mov	r1, r5
    73be:	4630      	mov	r0, r6
}
    73c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	finalize_transition(data, notify, delay_us, rc);
    73c4:	f7fb bd9e 	b.w	2f04 <finalize_transition>

000073c8 <start>:
{
    73c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct driver_config *cfg = data->dev->config;
    73cc:	f850 3c04 	ldr.w	r3, [r0, #-4]
{
    73d0:	4604      	mov	r4, r0
	struct driver_data_onoff *data =
    73d2:	1f07      	subs	r7, r0, #4
	const struct driver_config *cfg = data->dev->config;
    73d4:	6858      	ldr	r0, [r3, #4]
	if ((cfg->options & OPTION_ALWAYS_ON) != 0) {
    73d6:	7d03      	ldrb	r3, [r0, #20]
    73d8:	07db      	lsls	r3, r3, #31
{
    73da:	460d      	mov	r5, r1
	if ((cfg->options & OPTION_ALWAYS_ON) != 0) {
    73dc:	d414      	bmi.n	7408 <start+0x40>
	uint32_t delay_us = cfg->startup_delay_us;
    73de:	6846      	ldr	r6, [r0, #4]
	rc = gpio_pin_set_dt(&cfg->enable, true);
    73e0:	2101      	movs	r1, #1
    73e2:	300c      	adds	r0, #12
    73e4:	f7ff ff41 	bl	726a <gpio_pin_set_dt>
	if (rc == -EWOULDBLOCK) {
    73e8:	f110 0f0b 	cmn.w	r0, #11
	rc = gpio_pin_set_dt(&cfg->enable, true);
    73ec:	4603      	mov	r3, r0
	if (rc == -EWOULDBLOCK) {
    73ee:	d10d      	bne.n	740c <start+0x44>
		data->task = WORK_TASK_ENABLE;
    73f0:	2301      	movs	r3, #1
    73f2:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
		data->notify = notify;
    73f6:	64e5      	str	r5, [r4, #76]	; 0x4c
		k_work_schedule(&data->dwork, K_NO_WAIT);
    73f8:	f104 001c 	add.w	r0, r4, #28
    73fc:	2200      	movs	r2, #0
}
    73fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		k_work_schedule(&data->dwork, K_NO_WAIT);
    7402:	2300      	movs	r3, #0
    7404:	f7fe bbbe 	b.w	5b84 <k_work_schedule>
	int rc = 0;
    7408:	2300      	movs	r3, #0
		delay_us = 0;
    740a:	461e      	mov	r6, r3
	finalize_transition(data, notify, delay_us, rc);
    740c:	4632      	mov	r2, r6
    740e:	4629      	mov	r1, r5
    7410:	4638      	mov	r0, r7
}
    7412:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	finalize_transition(data, notify, delay_us, rc);
    7416:	f7fb bd75 	b.w	2f04 <finalize_transition>

0000741a <is_regular_addr_valid>:
{
    741a:	b538      	push	{r3, r4, r5, lr}
    741c:	4605      	mov	r5, r0
    741e:	460c      	mov	r4, r1
	return is_within_bounds(addr, len, 0, nrfx_nvmc_flash_size_get());
    7420:	f001 fe24 	bl	906c <nrfx_nvmc_flash_size_get>
			(addr < (boundary_start + boundary_size)) &&
    7424:	2d00      	cmp	r5, #0
    7426:	db07      	blt.n	7438 <is_regular_addr_valid+0x1e>
	return (addr >= boundary_start &&
    7428:	42a8      	cmp	r0, r5
    742a:	d905      	bls.n	7438 <is_regular_addr_valid+0x1e>
			(len <= (boundary_start + boundary_size - addr)));
    742c:	1b40      	subs	r0, r0, r5
			(addr < (boundary_start + boundary_size)) &&
    742e:	4284      	cmp	r4, r0
    7430:	bf8c      	ite	hi
    7432:	2000      	movhi	r0, #0
    7434:	2001      	movls	r0, #1
}
    7436:	bd38      	pop	{r3, r4, r5, pc}
			(addr < (boundary_start + boundary_size)) &&
    7438:	2000      	movs	r0, #0
    743a:	e7fc      	b.n	7436 <is_regular_addr_valid+0x1c>

0000743c <flash_get_page_info>:

#include <zephyr/drivers/flash.h>

static int flash_get_page_info(const struct device *dev, off_t offs,
			       uint32_t index, struct flash_pages_info *info)
{
    743c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    743e:	461c      	mov	r4, r3
    7440:	4616      	mov	r6, r2
	const struct flash_driver_api *api = dev->api;
	const struct flash_pages_layout *layout;
	size_t layout_size;
	uint32_t index_jmp;

	info->start_offset = 0;
    7442:	2300      	movs	r3, #0
	const struct flash_driver_api *api = dev->api;
    7444:	6882      	ldr	r2, [r0, #8]
	info->start_offset = 0;
    7446:	6023      	str	r3, [r4, #0]
	info->index = 0U;
    7448:	60a3      	str	r3, [r4, #8]

	api->page_layout(dev, &layout, &layout_size);
    744a:	6913      	ldr	r3, [r2, #16]
{
    744c:	460d      	mov	r5, r1
	api->page_layout(dev, &layout, &layout_size);
    744e:	aa01      	add	r2, sp, #4
    7450:	4669      	mov	r1, sp
    7452:	4798      	blx	r3

	while (layout_size--) {
    7454:	9b01      	ldr	r3, [sp, #4]
    7456:	1e5a      	subs	r2, r3, #1
    7458:	9201      	str	r2, [sp, #4]
    745a:	b91b      	cbnz	r3, 7464 <flash_get_page_info+0x28>
		}

		layout++;
	}

	return -EINVAL; /* page at offs or idx doesn't exist */
    745c:	f06f 0015 	mvn.w	r0, #21
}
    7460:	b003      	add	sp, #12
    7462:	bdf0      	pop	{r4, r5, r6, r7, pc}
		info->size = layout->pages_size;
    7464:	9800      	ldr	r0, [sp, #0]
			index_jmp = index - info->index;
    7466:	68a2      	ldr	r2, [r4, #8]
		info->size = layout->pages_size;
    7468:	6847      	ldr	r7, [r0, #4]
			index_jmp = (offs - info->start_offset) / info->size;
    746a:	6821      	ldr	r1, [r4, #0]
		info->size = layout->pages_size;
    746c:	6067      	str	r7, [r4, #4]
		if (offs == 0) {
    746e:	b985      	cbnz	r5, 7492 <flash_get_page_info+0x56>
			index_jmp = index - info->index;
    7470:	1ab3      	subs	r3, r6, r2
		index_jmp = MIN(index_jmp, layout->pages_count);
    7472:	f8d0 c000 	ldr.w	ip, [r0]
    7476:	4563      	cmp	r3, ip
    7478:	bf28      	it	cs
    747a:	4663      	movcs	r3, ip
		info->index += index_jmp;
    747c:	441a      	add	r2, r3
		info->start_offset += (index_jmp * info->size);
    747e:	fb03 1107 	mla	r1, r3, r7, r1
    7482:	6021      	str	r1, [r4, #0]
		info->index += index_jmp;
    7484:	60a2      	str	r2, [r4, #8]
		if (index_jmp < layout->pages_count) {
    7486:	6802      	ldr	r2, [r0, #0]
    7488:	429a      	cmp	r2, r3
    748a:	d806      	bhi.n	749a <flash_get_page_info+0x5e>
		layout++;
    748c:	3008      	adds	r0, #8
    748e:	9000      	str	r0, [sp, #0]
    7490:	e7e0      	b.n	7454 <flash_get_page_info+0x18>
			index_jmp = (offs - info->start_offset) / info->size;
    7492:	1a6b      	subs	r3, r5, r1
    7494:	fbb3 f3f7 	udiv	r3, r3, r7
    7498:	e7eb      	b.n	7472 <flash_get_page_info+0x36>
			return 0;
    749a:	2000      	movs	r0, #0
    749c:	e7e0      	b.n	7460 <flash_get_page_info+0x24>

0000749e <z_impl_flash_get_page_info_by_offs>:

int z_impl_flash_get_page_info_by_offs(const struct device *dev, off_t offs,
				       struct flash_pages_info *info)
{
    749e:	4613      	mov	r3, r2
	return flash_get_page_info(dev, offs, 0U, info);
    74a0:	2200      	movs	r2, #0
    74a2:	f7ff bfcb 	b.w	743c <flash_get_page_info>

000074a6 <flash_page_foreach>:
	return count;
}

void flash_page_foreach(const struct device *dev, flash_page_cb cb,
			void *data)
{
    74a6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const struct flash_pages_layout *layout;
	struct flash_pages_info page_info;
	size_t block, num_blocks, page = 0, i;
	off_t off = 0;

	api->page_layout(dev, &layout, &num_blocks);
    74aa:	6883      	ldr	r3, [r0, #8]
{
    74ac:	b086      	sub	sp, #24
	api->page_layout(dev, &layout, &num_blocks);
    74ae:	691b      	ldr	r3, [r3, #16]
{
    74b0:	4688      	mov	r8, r1
    74b2:	4691      	mov	r9, r2
	api->page_layout(dev, &layout, &num_blocks);
    74b4:	a901      	add	r1, sp, #4
    74b6:	aa02      	add	r2, sp, #8
    74b8:	4798      	blx	r3
	off_t off = 0;
    74ba:	2400      	movs	r4, #0
	size_t block, num_blocks, page = 0, i;
    74bc:	46a2      	mov	sl, r4

	for (block = 0; block < num_blocks; block++) {
    74be:	4625      	mov	r5, r4
    74c0:	9b02      	ldr	r3, [sp, #8]
    74c2:	42ab      	cmp	r3, r5
    74c4:	d802      	bhi.n	74cc <flash_page_foreach+0x26>

			off += page_info.size;
			page++;
		}
	}
}
    74c6:	b006      	add	sp, #24
    74c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		const struct flash_pages_layout *l = &layout[block];
    74cc:	9f01      	ldr	r7, [sp, #4]
    74ce:	eb07 07c5 	add.w	r7, r7, r5, lsl #3
		for (i = 0; i < l->pages_count; i++) {
    74d2:	2600      	movs	r6, #0
		page_info.size = l->pages_size;
    74d4:	687b      	ldr	r3, [r7, #4]
    74d6:	9304      	str	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
    74d8:	683a      	ldr	r2, [r7, #0]
    74da:	42b2      	cmp	r2, r6
    74dc:	eb0a 0306 	add.w	r3, sl, r6
    74e0:	d802      	bhi.n	74e8 <flash_page_foreach+0x42>
	for (block = 0; block < num_blocks; block++) {
    74e2:	3501      	adds	r5, #1
    74e4:	469a      	mov	sl, r3
    74e6:	e7eb      	b.n	74c0 <flash_page_foreach+0x1a>
			page_info.start_offset = off;
    74e8:	9403      	str	r4, [sp, #12]
			page_info.index = page;
    74ea:	9305      	str	r3, [sp, #20]
			if (!cb(&page_info, data)) {
    74ec:	4649      	mov	r1, r9
    74ee:	a803      	add	r0, sp, #12
    74f0:	47c0      	blx	r8
    74f2:	2800      	cmp	r0, #0
    74f4:	d0e7      	beq.n	74c6 <flash_page_foreach+0x20>
			off += page_info.size;
    74f6:	9b04      	ldr	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
    74f8:	3601      	adds	r6, #1
			off += page_info.size;
    74fa:	441c      	add	r4, r3
		for (i = 0; i < l->pages_count; i++) {
    74fc:	e7ec      	b.n	74d8 <flash_page_foreach+0x32>

000074fe <uarte_nrfx_config_get>:
	struct uarte_nrfx_data *data = dev->data;
    74fe:	6902      	ldr	r2, [r0, #16]
{
    7500:	460b      	mov	r3, r1
	*cfg = data->uart_config;
    7502:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
    7506:	e883 0003 	stmia.w	r3, {r0, r1}
}
    750a:	2000      	movs	r0, #0
    750c:	4770      	bx	lr

0000750e <uarte_nrfx_err_check>:
	return config->uarte_regs;
    750e:	6843      	ldr	r3, [r0, #4]
    7510:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    7512:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    7516:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    751a:	4770      	bx	lr

0000751c <uarte_nrfx_poll_in>:
	return config->uarte_regs;
    751c:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = dev->data;
    751e:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
    7520:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    7522:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    7526:	b150      	cbz	r0, 753e <uarte_nrfx_poll_in+0x22>
	*c = *data->rx_data;
    7528:	6952      	ldr	r2, [r2, #20]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    752a:	2000      	movs	r0, #0
    752c:	7812      	ldrb	r2, [r2, #0]
    752e:	700a      	strb	r2, [r1, #0]
    7530:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    7534:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    7538:	2201      	movs	r2, #1
    753a:	601a      	str	r2, [r3, #0]
	return 0;
    753c:	4770      	bx	lr
		return -1;
    753e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    7542:	4770      	bx	lr

00007544 <is_tx_ready.isra.0>:
	return config->uarte_regs;
    7544:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
    7546:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    7548:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    754c:	b940      	cbnz	r0, 7560 <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
    754e:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    7550:	079b      	lsls	r3, r3, #30
    7552:	d406      	bmi.n	7562 <is_tx_ready.isra.0+0x1e>
    7554:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
    7558:	3800      	subs	r0, #0
    755a:	bf18      	it	ne
    755c:	2001      	movne	r0, #1
    755e:	4770      	bx	lr
    7560:	2001      	movs	r0, #1
}
    7562:	4770      	bx	lr

00007564 <uarte_nrfx_isr_int>:
	const struct uarte_nrfx_config *config = dev->config;
    7564:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
    7566:	6813      	ldr	r3, [r2, #0]
    return p_reg->INTENSET & mask;
    7568:	f8d3 1304 	ldr.w	r1, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    756c:	05c9      	lsls	r1, r1, #23
    756e:	d518      	bpl.n	75a2 <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    7570:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    7574:	b1a9      	cbz	r1, 75a2 <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
    7576:	f04f 0020 	mov.w	r0, #32
    757a:	f3ef 8111 	mrs	r1, BASEPRI
    757e:	f380 8812 	msr	BASEPRI_MAX, r0
    7582:	f3bf 8f6f 	isb	sy
    7586:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    758a:	b130      	cbz	r0, 759a <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    758c:	2000      	movs	r0, #0
    758e:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
    7592:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    7596:	2001      	movs	r0, #1
    7598:	60d8      	str	r0, [r3, #12]
	__asm__ volatile(
    759a:	f381 8811 	msr	BASEPRI, r1
    759e:	f3bf 8f6f 	isb	sy
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    75a2:	6852      	ldr	r2, [r2, #4]
    75a4:	06d2      	lsls	r2, r2, #27
    75a6:	d515      	bpl.n	75d4 <uarte_nrfx_isr_int+0x70>
	__asm__ volatile(
    75a8:	f04f 0120 	mov.w	r1, #32
    75ac:	f3ef 8211 	mrs	r2, BASEPRI
    75b0:	f381 8812 	msr	BASEPRI_MAX, r1
    75b4:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    75b8:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    75bc:	b111      	cbz	r1, 75c4 <uarte_nrfx_isr_int+0x60>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    75be:	2100      	movs	r1, #0
    75c0:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_reg->INTENCLR = mask;
    75c4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    75c8:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
	__asm__ volatile(
    75cc:	f382 8811 	msr	BASEPRI, r2
    75d0:	f3bf 8f6f 	isb	sy
}
    75d4:	4770      	bx	lr

000075d6 <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
    75d6:	b570      	push	{r4, r5, r6, lr}
	*state = &config->states[0];
    75d8:	6843      	ldr	r3, [r0, #4]
	while (*state <= &config->states[config->state_cnt - 1U]) {
    75da:	f06f 4660 	mvn.w	r6, #3758096384	; 0xe0000000
	*state = &config->states[0];
    75de:	6013      	str	r3, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
    75e0:	7a05      	ldrb	r5, [r0, #8]
    75e2:	6844      	ldr	r4, [r0, #4]
    75e4:	4435      	add	r5, r6
    75e6:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
    75ea:	42a3      	cmp	r3, r4
    75ec:	d902      	bls.n	75f4 <pinctrl_lookup_state+0x1e>
		}

		(*state)++;
	}

	return -ENOENT;
    75ee:	f06f 0001 	mvn.w	r0, #1
}
    75f2:	bd70      	pop	{r4, r5, r6, pc}
		if (id == (*state)->id) {
    75f4:	795c      	ldrb	r4, [r3, #5]
    75f6:	428c      	cmp	r4, r1
    75f8:	d001      	beq.n	75fe <pinctrl_lookup_state+0x28>
		(*state)++;
    75fa:	3308      	adds	r3, #8
    75fc:	e7ef      	b.n	75de <pinctrl_lookup_state+0x8>
			return 0;
    75fe:	2000      	movs	r0, #0
    7600:	e7f7      	b.n	75f2 <pinctrl_lookup_state+0x1c>

00007602 <pinctrl_configure_pins>:
#define NRF_PSEL_QSPI(reg, line) ((NRF_QSPI_Type *)reg)->PSEL.line
#endif

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
    7602:	b5f0      	push	{r4, r5, r6, r7, lr}
    7604:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    7608:	2701      	movs	r7, #1
    p_reg->OUTSET = set_mask;
    760a:	f04f 46a0 	mov.w	r6, #1342177280	; 0x50000000
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    760e:	4281      	cmp	r1, r0
    7610:	d101      	bne.n	7616 <pinctrl_configure_pins+0x14>
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
				     drive, NRF_GPIO_PIN_NOSENSE);
		}
	}

	return 0;
    7612:	2000      	movs	r0, #0
}
    7614:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
    7616:	6805      	ldr	r5, [r0, #0]
		uint32_t pin = NRF_GET_PIN(pins[i]);
    7618:	f005 047f 	and.w	r4, r5, #127	; 0x7f
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
    761c:	f3c5 2343 	ubfx	r3, r5, #9, #4
			pin = 0xFFFFFFFFU;
    7620:	2c7f      	cmp	r4, #127	; 0x7f
		switch (NRF_GET_FUN(pins[i])) {
    7622:	ea4f 4515 	mov.w	r5, r5, lsr #16
			pin = 0xFFFFFFFFU;
    7626:	bf08      	it	eq
    7628:	f04f 34ff 	moveq.w	r4, #4294967295	; 0xffffffff
		switch (NRF_GET_FUN(pins[i])) {
    762c:	2d0c      	cmp	r5, #12
    762e:	d841      	bhi.n	76b4 <pinctrl_configure_pins+0xb2>
    7630:	e8df f005 	tbb	[pc, r5]
    7634:	18151107 	.word	0x18151107
    7638:	40404040 	.word	0x40404040
    763c:	1b404040 	.word	0x1b404040
    7640:	3d          	.byte	0x3d
    7641:	00          	.byte	0x00
			NRF_PSEL_UART(reg, TXD) = pin;
    7642:	f8c2 450c 	str.w	r4, [r2, #1292]	; 0x50c
    *p_pin = pin_number & 0x1F;
    7646:	f004 051f 	and.w	r5, r4, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    764a:	fa07 f505 	lsl.w	r5, r7, r5
    p_reg->OUTSET = set_mask;
    764e:	f8c6 5508 	str.w	r5, [r6, #1288]	; 0x508
}
    7652:	2501      	movs	r5, #1
    7654:	e00f      	b.n	7676 <pinctrl_configure_pins+0x74>
			NRF_PSEL_UART(reg, RXD) = pin;
    7656:	f8c2 4514 	str.w	r4, [r2, #1300]	; 0x514
			dir = NRF_GPIO_PIN_DIR_INPUT;
    765a:	2500      	movs	r5, #0
    765c:	e00b      	b.n	7676 <pinctrl_configure_pins+0x74>
			NRF_PSEL_UART(reg, RTS) = pin;
    765e:	f8c2 4508 	str.w	r4, [r2, #1288]	; 0x508
			if (write != NO_WRITE) {
    7662:	e7f0      	b.n	7646 <pinctrl_configure_pins+0x44>
			NRF_PSEL_UART(reg, CTS) = pin;
    7664:	f8c2 4510 	str.w	r4, [r2, #1296]	; 0x510
			if (write != NO_WRITE) {
    7668:	e7f7      	b.n	765a <pinctrl_configure_pins+0x58>
			NRF_PSEL_TWIM(reg, SCL) = pin;
    766a:	f8c2 4508 	str.w	r4, [r2, #1288]	; 0x508
			if (drive == NRF_DRIVE_S0S1) {
    766e:	2b00      	cmp	r3, #0
    7670:	d1f3      	bne.n	765a <pinctrl_configure_pins+0x58>
			dir = NRF_GPIO_PIN_DIR_INPUT;
    7672:	2500      	movs	r5, #0
				drive = NRF_DRIVE_S0D1;
    7674:	2306      	movs	r3, #6
			if (NRF_GET_LP(pins[i]) == NRF_LP_ENABLE) {
    7676:	f850 cb04 	ldr.w	ip, [r0], #4
    767a:	f40c 5e00 	and.w	lr, ip, #8192	; 0x2000
				input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    767e:	f1be 0f00 	cmp.w	lr, #0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    7682:	f3cc 1cc1 	ubfx	ip, ip, #7, #2
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
    7686:	ea4f 2303 	mov.w	r3, r3, lsl #8
    768a:	bf18      	it	ne
    768c:	2500      	movne	r5, #0
    *p_pin = pin_number & 0x1F;
    768e:	f004 041f 	and.w	r4, r4, #31
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    7692:	ea43 038c 	orr.w	r3, r3, ip, lsl #2
    7696:	bf0c      	ite	eq
    7698:	46ae      	moveq	lr, r5
    769a:	f04f 0e01 	movne.w	lr, #1
    769e:	432b      	orrs	r3, r5
    reg->PIN_CNF[pin_number] = cnf;
    76a0:	f504 74e0 	add.w	r4, r4, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    76a4:	ea43 034e 	orr.w	r3, r3, lr, lsl #1
    reg->PIN_CNF[pin_number] = cnf;
    76a8:	f846 3024 	str.w	r3, [r6, r4, lsl #2]
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    76ac:	e7af      	b.n	760e <pinctrl_configure_pins+0xc>
			NRF_PSEL_TWIM(reg, SDA) = pin;
    76ae:	f8c2 450c 	str.w	r4, [r2, #1292]	; 0x50c
			if (drive == NRF_DRIVE_S0S1) {
    76b2:	e7dc      	b.n	766e <pinctrl_configure_pins+0x6c>
		switch (NRF_GET_FUN(pins[i])) {
    76b4:	f06f 0085 	mvn.w	r0, #133	; 0x85
    76b8:	e7ac      	b.n	7614 <pinctrl_configure_pins+0x12>

000076ba <fprotect_area>:
#define ENABLE_IN_DEBUG false
#endif


int fprotect_area(uint32_t start, size_t length)
{
    76ba:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
}

NRF_STATIC_INLINE void nrf_bprot_nvm_protection_in_debug_set(NRF_BPROT_Type * p_reg,
                                                             bool             enable)
{
    p_reg->DISABLEINDEBUG =
    76be:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    76c2:	4604      	mov	r4, r0
    76c4:	4688      	mov	r8, r1
    76c6:	b085      	sub	sp, #20
    76c8:	2701      	movs	r7, #1
	uint32_t block_end   = (start + length) / BPROT_REGIONS_SIZE;
	uint32_t block_mask[BPROT_CONFIGS_NUM] = {0};

	BUILD_ASSERT(BPROT_REGIONS_SIZE == CONFIG_FPROTECT_BLOCK_SIZE);

	if ((start % BPROT_REGIONS_SIZE) ||
    76ca:	ea44 0408 	orr.w	r4, r4, r8
	uint32_t block_end   = (start + length) / BPROT_REGIONS_SIZE;
    76ce:	eb00 0901 	add.w	r9, r0, r1
    76d2:	f8c3 7608 	str.w	r7, [r3, #1544]	; 0x608
	uint32_t block_start = start / BPROT_REGIONS_SIZE;
    76d6:	0b05      	lsrs	r5, r0, #12
	uint32_t block_mask[BPROT_CONFIGS_NUM] = {0};
    76d8:	2210      	movs	r2, #16
    76da:	2100      	movs	r1, #0
    76dc:	4668      	mov	r0, sp
	if ((start % BPROT_REGIONS_SIZE) ||
    76de:	f3c4 040b 	ubfx	r4, r4, #0, #12
	uint32_t block_mask[BPROT_CONFIGS_NUM] = {0};
    76e2:	f7ff fb4e 	bl	6d82 <memset>
	uint32_t block_end   = (start + length) / BPROT_REGIONS_SIZE;
    76e6:	ea4f 3619 	mov.w	r6, r9, lsr #12
	if ((start % BPROT_REGIONS_SIZE) ||
    76ea:	b924      	cbnz	r4, 76f6 <fprotect_area+0x3c>
	    (length % BPROT_REGIONS_SIZE) ||
    76ec:	f5b9 2f01 	cmp.w	r9, #528384	; 0x81000
    76f0:	d201      	bcs.n	76f6 <fprotect_area+0x3c>
	    (block_end > BPROT_REGIONS_NUM) ||
    76f2:	42b5      	cmp	r5, r6
    76f4:	d910      	bls.n	7718 <fprotect_area+0x5e>
		/*
		 * start or length isn't aligned with a BPROT region,
		 * or attempting to protect an area that is invalid or outside
		 * flash.
		 */
		return -EINVAL;
    76f6:	f06f 0015 	mvn.w	r0, #21
    76fa:	e01e      	b.n	773a <fprotect_area+0x80>
	}

	for (uint32_t i = block_start; i < block_end; i++) {
		block_mask[i / BITS_PER_LONG] |= BIT(i % BITS_PER_LONG);
    76fc:	096a      	lsrs	r2, r5, #5
    76fe:	ab04      	add	r3, sp, #16
    7700:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    7704:	f005 031f 	and.w	r3, r5, #31
    7708:	f852 1c10 	ldr.w	r1, [r2, #-16]
    770c:	fa07 f303 	lsl.w	r3, r7, r3
    7710:	430b      	orrs	r3, r1
    7712:	f842 3c10 	str.w	r3, [r2, #-16]
	for (uint32_t i = block_start; i < block_end; i++) {
    7716:	3501      	adds	r5, #1
    7718:	42b5      	cmp	r5, r6
    771a:	d1ef      	bne.n	76fc <fprotect_area+0x42>
            p_reg->CONFIG0 = block_mask;
    771c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    7720:	9a00      	ldr	r2, [sp, #0]
    7722:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
	}

	for (uint32_t i = 0; i < BPROT_CONFIGS_NUM; i++) {
		PROTECT(NRF_BPROT, i, block_mask[i]);
    7726:	9a01      	ldr	r2, [sp, #4]
            p_reg->CONFIG1 = block_mask;
    7728:	f8c3 2604 	str.w	r2, [r3, #1540]	; 0x604
    772c:	9a02      	ldr	r2, [sp, #8]
            p_reg->CONFIG2 = block_mask;
    772e:	f8c3 2610 	str.w	r2, [r3, #1552]	; 0x610
    7732:	9a03      	ldr	r2, [sp, #12]
            p_reg->CONFIG3 = block_mask;
    7734:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
	}

	return 0;
    7738:	2000      	movs	r0, #0
}
    773a:	b005      	add	sp, #20
    773c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00007740 <boot_swap_info_off>:
    return ALIGN_DOWN(boot_magic_off(fap) - BOOT_MAX_ALIGN, BOOT_MAX_ALIGN);
    7740:	6880      	ldr	r0, [r0, #8]
    7742:	3818      	subs	r0, #24
    7744:	f020 0007 	bic.w	r0, r0, #7
}
    7748:	3810      	subs	r0, #16
    774a:	4770      	bx	lr

0000774c <boot_magic_compatible_check>:
    switch (tbl_val) {
    774c:	2804      	cmp	r0, #4
    774e:	d009      	beq.n	7764 <boot_magic_compatible_check+0x18>
    7750:	2805      	cmp	r0, #5
    7752:	d103      	bne.n	775c <boot_magic_compatible_check+0x10>
        return val != BOOT_MAGIC_GOOD;
    7754:	1e48      	subs	r0, r1, #1
    7756:	bf18      	it	ne
    7758:	2001      	movne	r0, #1
    775a:	4770      	bx	lr
        return tbl_val == val;
    775c:	1a43      	subs	r3, r0, r1
    775e:	4258      	negs	r0, r3
    7760:	4158      	adcs	r0, r3
    7762:	4770      	bx	lr
    switch (tbl_val) {
    7764:	2001      	movs	r0, #1
}
    7766:	4770      	bx	lr

00007768 <bootutil_buffer_is_erased>:
{
    7768:	b538      	push	{r3, r4, r5, lr}
    776a:	4615      	mov	r5, r2
    if (buffer == NULL || len == 0) {
    776c:	460c      	mov	r4, r1
    776e:	b161      	cbz	r1, 778a <bootutil_buffer_is_erased+0x22>
    7770:	b15a      	cbz	r2, 778a <bootutil_buffer_is_erased+0x22>
    erased_val = flash_area_erased_val(area);
    7772:	f7ff faa2 	bl	6cba <flash_area_erased_val>
    for (i = 0, u8b = (uint8_t *)buffer; i < len; i++) {
    7776:	4425      	add	r5, r4
    7778:	4621      	mov	r1, r4
        if (u8b[i] != erased_val) {
    777a:	f811 3b01 	ldrb.w	r3, [r1], #1
    777e:	4283      	cmp	r3, r0
    7780:	d103      	bne.n	778a <bootutil_buffer_is_erased+0x22>
    for (i = 0, u8b = (uint8_t *)buffer; i < len; i++) {
    7782:	42a9      	cmp	r1, r5
    7784:	d1f9      	bne.n	777a <bootutil_buffer_is_erased+0x12>
    return true;
    7786:	2001      	movs	r0, #1
}
    7788:	bd38      	pop	{r3, r4, r5, pc}
        return false;
    778a:	2000      	movs	r0, #0
    778c:	e7fc      	b.n	7788 <bootutil_buffer_is_erased+0x20>

0000778e <boot_read_flag>:
{
    778e:	b538      	push	{r3, r4, r5, lr}
    7790:	460c      	mov	r4, r1
    rc = flash_area_read(fap, off, flag, sizeof *flag);
    7792:	2301      	movs	r3, #1
{
    7794:	4611      	mov	r1, r2
    rc = flash_area_read(fap, off, flag, sizeof *flag);
    7796:	4622      	mov	r2, r4
{
    7798:	4605      	mov	r5, r0
    rc = flash_area_read(fap, off, flag, sizeof *flag);
    779a:	f7ff fa49 	bl	6c30 <flash_area_read>
    if (rc < 0) {
    779e:	2800      	cmp	r0, #0
    77a0:	db0f      	blt.n	77c2 <boot_read_flag+0x34>
    if (bootutil_buffer_is_erased(fap, flag, sizeof *flag)) {
    77a2:	2201      	movs	r2, #1
    77a4:	4621      	mov	r1, r4
    77a6:	4628      	mov	r0, r5
    77a8:	f7ff ffde 	bl	7768 <bootutil_buffer_is_erased>
    77ac:	b938      	cbnz	r0, 77be <boot_read_flag+0x30>
    if (flag != BOOT_FLAG_SET) {
    77ae:	7823      	ldrb	r3, [r4, #0]
    return BOOT_FLAG_SET;
    77b0:	2b01      	cmp	r3, #1
        *flag = boot_flag_decode(*flag);
    77b2:	bf14      	ite	ne
    77b4:	2302      	movne	r3, #2
    77b6:	2301      	moveq	r3, #1
    77b8:	7023      	strb	r3, [r4, #0]
    77ba:	2000      	movs	r0, #0
}
    77bc:	bd38      	pop	{r3, r4, r5, pc}
    77be:	2303      	movs	r3, #3
    77c0:	e7fa      	b.n	77b8 <boot_read_flag+0x2a>
        return BOOT_EFLASH;
    77c2:	2001      	movs	r0, #1
    77c4:	e7fa      	b.n	77bc <boot_read_flag+0x2e>

000077c6 <boot_write_trailer>:
{
    77c6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    77ca:	461d      	mov	r5, r3
    77cc:	4606      	mov	r6, r0
    77ce:	460f      	mov	r7, r1
    77d0:	4690      	mov	r8, r2
    align = flash_area_align(fap);
    77d2:	f7ff fa6b 	bl	6cac <flash_area_align>
    align = ALIGN_UP(inlen, align);
    77d6:	1e6c      	subs	r4, r5, #1
    77d8:	4404      	add	r4, r0
    77da:	4240      	negs	r0, r0
    77dc:	4004      	ands	r4, r0
    if (align > BOOT_MAX_ALIGN) {
    77de:	2c08      	cmp	r4, #8
    77e0:	d81a      	bhi.n	7818 <boot_write_trailer+0x52>
    erased_val = flash_area_erased_val(fap);
    77e2:	4630      	mov	r0, r6
    77e4:	f7ff fa69 	bl	6cba <flash_area_erased_val>
    memcpy(buf, inbuf, inlen);
    77e8:	462a      	mov	r2, r5
    erased_val = flash_area_erased_val(fap);
    77ea:	4681      	mov	r9, r0
    memcpy(buf, inbuf, inlen);
    77ec:	4641      	mov	r1, r8
    77ee:	4668      	mov	r0, sp
    77f0:	f7ff fabc 	bl	6d6c <memcpy>
    memset(&buf[inlen], erased_val, align - inlen);
    77f4:	1b62      	subs	r2, r4, r5
    77f6:	4649      	mov	r1, r9
    77f8:	eb0d 0005 	add.w	r0, sp, r5
    77fc:	f7ff fac1 	bl	6d82 <memset>
    rc = flash_area_write(fap, off, buf, align);
    7800:	4623      	mov	r3, r4
    7802:	466a      	mov	r2, sp
    7804:	4639      	mov	r1, r7
    7806:	4630      	mov	r0, r6
    7808:	f7ff fa27 	bl	6c5a <flash_area_write>
    if (rc != 0) {
    780c:	3800      	subs	r0, #0
    780e:	bf18      	it	ne
    7810:	2001      	movne	r0, #1
}
    7812:	b003      	add	sp, #12
    7814:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return -1;
    7818:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    781c:	e7f9      	b.n	7812 <boot_write_trailer+0x4c>

0000781e <boot_write_trailer_flag>:
{
    781e:	b507      	push	{r0, r1, r2, lr}
    return boot_write_trailer(fap, off, buf, 1);
    7820:	2301      	movs	r3, #1
    const uint8_t buf[1] = { flag_val };
    7822:	f88d 2004 	strb.w	r2, [sp, #4]
    return boot_write_trailer(fap, off, buf, 1);
    7826:	aa01      	add	r2, sp, #4
    7828:	f7ff ffcd 	bl	77c6 <boot_write_trailer>
}
    782c:	b003      	add	sp, #12
    782e:	f85d fb04 	ldr.w	pc, [sp], #4

00007832 <boot_write_image_ok>:
    return ALIGN_DOWN(boot_magic_off(fap) - BOOT_MAX_ALIGN, BOOT_MAX_ALIGN);
    7832:	6881      	ldr	r1, [r0, #8]
    7834:	3918      	subs	r1, #24
    return boot_write_trailer_flag(fap, off, BOOT_FLAG_SET);
    7836:	2201      	movs	r2, #1
    7838:	f021 0107 	bic.w	r1, r1, #7
    783c:	f7ff bfef 	b.w	781e <boot_write_trailer_flag>

00007840 <boot_read_image_ok>:
    return ALIGN_DOWN(boot_magic_off(fap) - BOOT_MAX_ALIGN, BOOT_MAX_ALIGN);
    7840:	6882      	ldr	r2, [r0, #8]
    7842:	3a18      	subs	r2, #24
    return boot_read_flag(fap, image_ok, boot_image_ok_off(fap));
    7844:	f022 0207 	bic.w	r2, r2, #7
    7848:	f7ff bfa1 	b.w	778e <boot_read_flag>

0000784c <boot_read_swap_state_by_id>:
{
    784c:	b513      	push	{r0, r1, r4, lr}
    784e:	460c      	mov	r4, r1
    rc = flash_area_open(flash_area_id, &fap);
    7850:	b2c0      	uxtb	r0, r0
    7852:	a901      	add	r1, sp, #4
    7854:	f7fa f8c6 	bl	19e4 <flash_area_open>
    if (rc != 0) {
    7858:	b950      	cbnz	r0, 7870 <boot_read_swap_state_by_id+0x24>
    rc = boot_read_swap_state(fap, state);
    785a:	4621      	mov	r1, r4
    785c:	9801      	ldr	r0, [sp, #4]
    785e:	f7fc f853 	bl	3908 <boot_read_swap_state>
    7862:	4604      	mov	r4, r0
    flash_area_close(fap);
    7864:	9801      	ldr	r0, [sp, #4]
    7866:	f7ff f9e2 	bl	6c2e <flash_area_close>
}
    786a:	4620      	mov	r0, r4
    786c:	b002      	add	sp, #8
    786e:	bd10      	pop	{r4, pc}
        return BOOT_EFLASH;
    7870:	2401      	movs	r4, #1
    7872:	e7fa      	b.n	786a <boot_read_swap_state_by_id+0x1e>

00007874 <boot_write_swap_info>:
{
    7874:	b513      	push	{r0, r1, r4, lr}
    BOOT_SET_SWAP_INFO(swap_info, image_num, swap_type);
    7876:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
{
    787a:	4604      	mov	r4, r0
    BOOT_SET_SWAP_INFO(swap_info, image_num, swap_type);
    787c:	f88d 1007 	strb.w	r1, [sp, #7]
    off = boot_swap_info_off(fap);
    7880:	f7ff ff5e 	bl	7740 <boot_swap_info_off>
    return boot_write_trailer(fap, off, (const uint8_t *) &swap_info, 1);
    7884:	2301      	movs	r3, #1
    off = boot_swap_info_off(fap);
    7886:	4601      	mov	r1, r0
    return boot_write_trailer(fap, off, (const uint8_t *) &swap_info, 1);
    7888:	f10d 0207 	add.w	r2, sp, #7
    788c:	4620      	mov	r0, r4
    788e:	f7ff ff9a 	bl	77c6 <boot_write_trailer>
}
    7892:	b002      	add	sp, #8
    7894:	bd10      	pop	{r4, pc}

00007896 <_mbedtls_init>:
#if defined(CONFIG_MBEDTLS_DEBUG_LEVEL)
	mbedtls_debug_set_threshold(CONFIG_MBEDTLS_DEBUG_LEVEL);
#endif

	return 0;
}
    7896:	2000      	movs	r0, #0
    7898:	4770      	bx	lr

0000789a <mbedtls_asn1_get_len>:
 * ASN.1 DER decoding routines
 */
int mbedtls_asn1_get_len( unsigned char **p,
                  const unsigned char *end,
                  size_t *len )
{
    789a:	b570      	push	{r4, r5, r6, lr}
    if( ( end - *p ) < 1 )
    789c:	6803      	ldr	r3, [r0, #0]
    789e:	1acd      	subs	r5, r1, r3
    78a0:	2d00      	cmp	r5, #0
    78a2:	dc02      	bgt.n	78aa <mbedtls_asn1_get_len+0x10>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
    78a4:	f06f 005f 	mvn.w	r0, #95	; 0x5f

    if( *len > (size_t) ( end - *p ) )
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    return( 0 );
}
    78a8:	bd70      	pop	{r4, r5, r6, pc}
    if( ( **p & 0x80 ) == 0 )
    78aa:	f993 6000 	ldrsb.w	r6, [r3]
    78ae:	781c      	ldrb	r4, [r3, #0]
    78b0:	2e00      	cmp	r6, #0
    78b2:	db0a      	blt.n	78ca <mbedtls_asn1_get_len+0x30>
        *len = *(*p)++;
    78b4:	1c5c      	adds	r4, r3, #1
    78b6:	6004      	str	r4, [r0, #0]
    78b8:	781b      	ldrb	r3, [r3, #0]
    78ba:	6013      	str	r3, [r2, #0]
    if( *len > (size_t) ( end - *p ) )
    78bc:	6803      	ldr	r3, [r0, #0]
    78be:	1ac9      	subs	r1, r1, r3
    78c0:	6813      	ldr	r3, [r2, #0]
    78c2:	428b      	cmp	r3, r1
    78c4:	d8ee      	bhi.n	78a4 <mbedtls_asn1_get_len+0xa>
    return( 0 );
    78c6:	2000      	movs	r0, #0
    78c8:	e7ee      	b.n	78a8 <mbedtls_asn1_get_len+0xe>
        switch( **p & 0x7F )
    78ca:	f004 047f 	and.w	r4, r4, #127	; 0x7f
    78ce:	3c01      	subs	r4, #1
    78d0:	2c03      	cmp	r4, #3
    78d2:	d82b      	bhi.n	792c <mbedtls_asn1_get_len+0x92>
    78d4:	e8df f004 	tbb	[pc, r4]
    78d8:	21140a02 	.word	0x21140a02
            if( ( end - *p ) < 2 )
    78dc:	2d01      	cmp	r5, #1
    78de:	d0e1      	beq.n	78a4 <mbedtls_asn1_get_len+0xa>
            *len = (*p)[1];
    78e0:	785b      	ldrb	r3, [r3, #1]
    78e2:	6013      	str	r3, [r2, #0]
            (*p) += 2;
    78e4:	6803      	ldr	r3, [r0, #0]
    78e6:	3302      	adds	r3, #2
            (*p) += 5;
    78e8:	6003      	str	r3, [r0, #0]
            break;
    78ea:	e7e7      	b.n	78bc <mbedtls_asn1_get_len+0x22>
            if( ( end - *p ) < 3 )
    78ec:	2d02      	cmp	r5, #2
    78ee:	ddd9      	ble.n	78a4 <mbedtls_asn1_get_len+0xa>
            *len = ( (size_t)(*p)[1] << 8 ) | (*p)[2];
    78f0:	f8b3 3001 	ldrh.w	r3, [r3, #1]
    78f4:	ba5b      	rev16	r3, r3
    78f6:	b29b      	uxth	r3, r3
    78f8:	6013      	str	r3, [r2, #0]
            (*p) += 3;
    78fa:	6803      	ldr	r3, [r0, #0]
    78fc:	3303      	adds	r3, #3
    78fe:	e7f3      	b.n	78e8 <mbedtls_asn1_get_len+0x4e>
            if( ( end - *p ) < 4 )
    7900:	2d03      	cmp	r5, #3
    7902:	ddcf      	ble.n	78a4 <mbedtls_asn1_get_len+0xa>
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
    7904:	789c      	ldrb	r4, [r3, #2]
            *len = ( (size_t)(*p)[1] << 16 ) |
    7906:	785d      	ldrb	r5, [r3, #1]
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
    7908:	78db      	ldrb	r3, [r3, #3]
    790a:	0224      	lsls	r4, r4, #8
            *len = ( (size_t)(*p)[1] << 16 ) |
    790c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
    7910:	4323      	orrs	r3, r4
            *len = ( (size_t)(*p)[1] << 16 ) |
    7912:	6013      	str	r3, [r2, #0]
            (*p) += 4;
    7914:	6803      	ldr	r3, [r0, #0]
    7916:	3304      	adds	r3, #4
    7918:	e7e6      	b.n	78e8 <mbedtls_asn1_get_len+0x4e>
            if( ( end - *p ) < 5 )
    791a:	2d04      	cmp	r5, #4
    791c:	ddc2      	ble.n	78a4 <mbedtls_asn1_get_len+0xa>
            *len = ( (size_t)(*p)[1] << 24 ) | ( (size_t)(*p)[2] << 16 ) |
    791e:	f8d3 3001 	ldr.w	r3, [r3, #1]
    7922:	ba1b      	rev	r3, r3
    7924:	6013      	str	r3, [r2, #0]
            (*p) += 5;
    7926:	6803      	ldr	r3, [r0, #0]
    7928:	3305      	adds	r3, #5
    792a:	e7dd      	b.n	78e8 <mbedtls_asn1_get_len+0x4e>
        switch( **p & 0x7F )
    792c:	f06f 0063 	mvn.w	r0, #99	; 0x63
    7930:	e7ba      	b.n	78a8 <mbedtls_asn1_get_len+0xe>

00007932 <mbedtls_asn1_get_tag>:

int mbedtls_asn1_get_tag( unsigned char **p,
                  const unsigned char *end,
                  size_t *len, int tag )
{
    7932:	b470      	push	{r4, r5, r6}
    if( ( end - *p ) < 1 )
    7934:	6804      	ldr	r4, [r0, #0]
    7936:	1b0e      	subs	r6, r1, r4
    7938:	2e00      	cmp	r6, #0
    793a:	dd07      	ble.n	794c <mbedtls_asn1_get_tag+0x1a>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    if( **p != tag )
    793c:	7826      	ldrb	r6, [r4, #0]
    793e:	429e      	cmp	r6, r3
    7940:	d108      	bne.n	7954 <mbedtls_asn1_get_tag+0x22>
        return( MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    (*p)++;
    7942:	3401      	adds	r4, #1
    7944:	6004      	str	r4, [r0, #0]

    return( mbedtls_asn1_get_len( p, end, len ) );
}
    7946:	bc70      	pop	{r4, r5, r6}
    return( mbedtls_asn1_get_len( p, end, len ) );
    7948:	f7ff bfa7 	b.w	789a <mbedtls_asn1_get_len>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
    794c:	f06f 005f 	mvn.w	r0, #95	; 0x5f
}
    7950:	bc70      	pop	{r4, r5, r6}
    7952:	4770      	bx	lr
        return( MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
    7954:	f06f 0061 	mvn.w	r0, #97	; 0x61
    7958:	e7fa      	b.n	7950 <mbedtls_asn1_get_tag+0x1e>

0000795a <mbedtls_asn1_get_mpi>:

#if defined(MBEDTLS_BIGNUM_C)
int mbedtls_asn1_get_mpi( unsigned char **p,
                  const unsigned char *end,
                  mbedtls_mpi *X )
{
    795a:	b573      	push	{r0, r1, r4, r5, r6, lr}
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
    795c:	2302      	movs	r3, #2
{
    795e:	4615      	mov	r5, r2
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
    7960:	aa01      	add	r2, sp, #4
{
    7962:	4604      	mov	r4, r0
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
    7964:	f7ff ffe5 	bl	7932 <mbedtls_asn1_get_tag>
    7968:	b940      	cbnz	r0, 797c <mbedtls_asn1_get_mpi+0x22>
        return( ret );

    ret = mbedtls_mpi_read_binary( X, *p, len );
    796a:	9e01      	ldr	r6, [sp, #4]
    796c:	6821      	ldr	r1, [r4, #0]
    796e:	4632      	mov	r2, r6
    7970:	4628      	mov	r0, r5
    7972:	f000 fb19 	bl	7fa8 <mbedtls_mpi_read_binary>

    *p += len;
    7976:	6823      	ldr	r3, [r4, #0]
    7978:	4433      	add	r3, r6
    797a:	6023      	str	r3, [r4, #0]

    return( ret );
}
    797c:	b002      	add	sp, #8
    797e:	bd70      	pop	{r4, r5, r6, pc}

00007980 <mpi_mul_hlp>:
#endif
void mpi_mul_hlp( size_t i,
                  const mbedtls_mpi_uint *s,
                  mbedtls_mpi_uint *d,
                  mbedtls_mpi_uint b )
{
    7980:	b5f0      	push	{r4, r5, r6, r7, lr}
        MULADDC_INIT
        MULADDC_CORE
        MULADDC_STOP
    }
#else /* MULADDC_HUIT */
    for( ; i >= 16; i -= 16 )
    7982:	4684      	mov	ip, r0
{
    7984:	4617      	mov	r7, r2
    7986:	460e      	mov	r6, r1
    7988:	4614      	mov	r4, r2
    mbedtls_mpi_uint c = 0, t = 0;
    798a:	2500      	movs	r5, #0
    for( ; i >= 16; i -= 16 )
    798c:	f1bc 0f0f 	cmp.w	ip, #15
    7990:	f106 0640 	add.w	r6, r6, #64	; 0x40
    7994:	f104 0440 	add.w	r4, r4, #64	; 0x40
    7998:	d877      	bhi.n	7a8a <mpi_mul_hlp+0x10a>
    799a:	0904      	lsrs	r4, r0, #4
    799c:	f06f 020f 	mvn.w	r2, #15
    79a0:	fb02 0004 	mla	r0, r2, r4, r0
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
        MULADDC_STOP
    }

    for( ; i >= 8; i -= 8 )
    79a4:	2807      	cmp	r0, #7
    79a6:	ea4f 1c84 	mov.w	ip, r4, lsl #6
    79aa:	eb01 1684 	add.w	r6, r1, r4, lsl #6
    79ae:	eb07 1484 	add.w	r4, r7, r4, lsl #6
    79b2:	d95d      	bls.n	7a70 <mpi_mul_hlp+0xf0>
    {
        MULADDC_INIT
        MULADDC_CORE   MULADDC_CORE
    79b4:	f851 100c 	ldr.w	r1, [r1, ip]
    79b8:	fba3 1201 	umull	r1, r2, r3, r1
    79bc:	1869      	adds	r1, r5, r1
    79be:	f857 500c 	ldr.w	r5, [r7, ip]
    79c2:	f142 0200 	adc.w	r2, r2, #0
    79c6:	1949      	adds	r1, r1, r5
    79c8:	f847 100c 	str.w	r1, [r7, ip]
    79cc:	6871      	ldr	r1, [r6, #4]
    79ce:	f142 0200 	adc.w	r2, r2, #0
    79d2:	fba3 5101 	umull	r5, r1, r3, r1
    79d6:	1952      	adds	r2, r2, r5
    79d8:	6865      	ldr	r5, [r4, #4]
    79da:	f141 0100 	adc.w	r1, r1, #0
    79de:	1952      	adds	r2, r2, r5
    79e0:	6062      	str	r2, [r4, #4]
        MULADDC_CORE   MULADDC_CORE
    79e2:	68b2      	ldr	r2, [r6, #8]
        MULADDC_CORE   MULADDC_CORE
    79e4:	f141 0100 	adc.w	r1, r1, #0
        MULADDC_CORE   MULADDC_CORE
    79e8:	fba3 5202 	umull	r5, r2, r3, r2
    79ec:	1949      	adds	r1, r1, r5
    79ee:	68a5      	ldr	r5, [r4, #8]
    79f0:	f142 0200 	adc.w	r2, r2, #0
    79f4:	1949      	adds	r1, r1, r5
    79f6:	60a1      	str	r1, [r4, #8]
    79f8:	68f1      	ldr	r1, [r6, #12]
    79fa:	f142 0200 	adc.w	r2, r2, #0
    79fe:	fba3 5101 	umull	r5, r1, r3, r1
    7a02:	1952      	adds	r2, r2, r5
    7a04:	68e5      	ldr	r5, [r4, #12]
    7a06:	f141 0100 	adc.w	r1, r1, #0
    7a0a:	1952      	adds	r2, r2, r5
    7a0c:	60e2      	str	r2, [r4, #12]

        MULADDC_CORE   MULADDC_CORE
    7a0e:	6932      	ldr	r2, [r6, #16]
        MULADDC_CORE   MULADDC_CORE
    7a10:	f141 0100 	adc.w	r1, r1, #0
        MULADDC_CORE   MULADDC_CORE
    7a14:	fba3 5202 	umull	r5, r2, r3, r2
    7a18:	1949      	adds	r1, r1, r5
    7a1a:	6925      	ldr	r5, [r4, #16]
    7a1c:	f142 0200 	adc.w	r2, r2, #0
    7a20:	1949      	adds	r1, r1, r5
    7a22:	6121      	str	r1, [r4, #16]
    7a24:	6971      	ldr	r1, [r6, #20]
    7a26:	f142 0200 	adc.w	r2, r2, #0
    7a2a:	fba3 5101 	umull	r5, r1, r3, r1
    7a2e:	1952      	adds	r2, r2, r5
    7a30:	6965      	ldr	r5, [r4, #20]
    7a32:	f141 0100 	adc.w	r1, r1, #0
    7a36:	1952      	adds	r2, r2, r5
    7a38:	6162      	str	r2, [r4, #20]
        MULADDC_CORE   MULADDC_CORE
    7a3a:	69b2      	ldr	r2, [r6, #24]
        MULADDC_CORE   MULADDC_CORE
    7a3c:	f141 0100 	adc.w	r1, r1, #0
        MULADDC_CORE   MULADDC_CORE
    7a40:	fba3 5202 	umull	r5, r2, r3, r2
    7a44:	1949      	adds	r1, r1, r5
    7a46:	69a5      	ldr	r5, [r4, #24]
    7a48:	f142 0200 	adc.w	r2, r2, #0
    7a4c:	1949      	adds	r1, r1, r5
    7a4e:	61a1      	str	r1, [r4, #24]
    7a50:	69f1      	ldr	r1, [r6, #28]
    7a52:	f142 0200 	adc.w	r2, r2, #0
    7a56:	fba3 1501 	umull	r1, r5, r3, r1
    7a5a:	1852      	adds	r2, r2, r1
    7a5c:	69e1      	ldr	r1, [r4, #28]
    7a5e:	f145 0500 	adc.w	r5, r5, #0
    7a62:	1852      	adds	r2, r2, r1
    7a64:	61e2      	str	r2, [r4, #28]
    7a66:	f145 0500 	adc.w	r5, r5, #0
    for( ; i >= 8; i -= 8 )
    7a6a:	3808      	subs	r0, #8
        MULADDC_CORE   MULADDC_CORE
    7a6c:	3420      	adds	r4, #32
    7a6e:	3620      	adds	r6, #32
    7a70:	ea4f 0c80 	mov.w	ip, r0, lsl #2
    7a74:	4627      	mov	r7, r4
    7a76:	eb06 0080 	add.w	r0, r6, r0, lsl #2
        MULADDC_STOP
    }

    for( ; i > 0; i-- )
    7a7a:	42b0      	cmp	r0, r6
    7a7c:	f040 8106 	bne.w	7c8c <mpi_mul_hlp+0x30c>
    7a80:	4464      	add	r4, ip
    }
#endif /* MULADDC_HUIT */

    t++;

    while( c != 0 )
    7a82:	2d00      	cmp	r5, #0
    7a84:	f040 8110 	bne.w	7ca8 <mpi_mul_hlp+0x328>
    {
        *d += c; c = ( *d < c ); d++;
    }
}
    7a88:	bdf0      	pop	{r4, r5, r6, r7, pc}
        MULADDC_CORE   MULADDC_CORE
    7a8a:	f856 2c40 	ldr.w	r2, [r6, #-64]
    7a8e:	fba3 e202 	umull	lr, r2, r3, r2
    7a92:	eb15 0e0e 	adds.w	lr, r5, lr
    7a96:	f854 5c40 	ldr.w	r5, [r4, #-64]
    7a9a:	f142 0200 	adc.w	r2, r2, #0
    7a9e:	eb15 050e 	adds.w	r5, r5, lr
    7aa2:	f844 5c40 	str.w	r5, [r4, #-64]
    7aa6:	f856 5c3c 	ldr.w	r5, [r6, #-60]
    7aaa:	f142 0200 	adc.w	r2, r2, #0
    7aae:	fba3 e505 	umull	lr, r5, r3, r5
    7ab2:	eb12 0e0e 	adds.w	lr, r2, lr
    7ab6:	f854 2c3c 	ldr.w	r2, [r4, #-60]
    7aba:	f145 0500 	adc.w	r5, r5, #0
    7abe:	eb12 020e 	adds.w	r2, r2, lr
    7ac2:	f844 2c3c 	str.w	r2, [r4, #-60]
        MULADDC_CORE   MULADDC_CORE
    7ac6:	f856 2c38 	ldr.w	r2, [r6, #-56]
        MULADDC_CORE   MULADDC_CORE
    7aca:	f145 0500 	adc.w	r5, r5, #0
        MULADDC_CORE   MULADDC_CORE
    7ace:	fba3 e202 	umull	lr, r2, r3, r2
    7ad2:	eb15 0e0e 	adds.w	lr, r5, lr
    7ad6:	f854 5c38 	ldr.w	r5, [r4, #-56]
    7ada:	f142 0200 	adc.w	r2, r2, #0
    7ade:	eb15 050e 	adds.w	r5, r5, lr
    7ae2:	f844 5c38 	str.w	r5, [r4, #-56]
    7ae6:	f856 5c34 	ldr.w	r5, [r6, #-52]
    7aea:	f142 0200 	adc.w	r2, r2, #0
    7aee:	fba3 e505 	umull	lr, r5, r3, r5
    7af2:	eb12 0e0e 	adds.w	lr, r2, lr
    7af6:	f854 2c34 	ldr.w	r2, [r4, #-52]
    7afa:	f145 0500 	adc.w	r5, r5, #0
    7afe:	eb12 020e 	adds.w	r2, r2, lr
    7b02:	f844 2c34 	str.w	r2, [r4, #-52]
        MULADDC_CORE   MULADDC_CORE
    7b06:	f856 2c30 	ldr.w	r2, [r6, #-48]
        MULADDC_CORE   MULADDC_CORE
    7b0a:	f145 0500 	adc.w	r5, r5, #0
        MULADDC_CORE   MULADDC_CORE
    7b0e:	fba3 e202 	umull	lr, r2, r3, r2
    7b12:	eb15 0e0e 	adds.w	lr, r5, lr
    7b16:	f854 5c30 	ldr.w	r5, [r4, #-48]
    7b1a:	f142 0200 	adc.w	r2, r2, #0
    7b1e:	eb15 050e 	adds.w	r5, r5, lr
    7b22:	f844 5c30 	str.w	r5, [r4, #-48]
    7b26:	f856 5c2c 	ldr.w	r5, [r6, #-44]
    7b2a:	f142 0200 	adc.w	r2, r2, #0
    7b2e:	fba3 e505 	umull	lr, r5, r3, r5
    7b32:	eb12 0e0e 	adds.w	lr, r2, lr
    7b36:	f854 2c2c 	ldr.w	r2, [r4, #-44]
    7b3a:	f145 0500 	adc.w	r5, r5, #0
    7b3e:	eb12 020e 	adds.w	r2, r2, lr
    7b42:	f844 2c2c 	str.w	r2, [r4, #-44]
        MULADDC_CORE   MULADDC_CORE
    7b46:	f856 2c28 	ldr.w	r2, [r6, #-40]
        MULADDC_CORE   MULADDC_CORE
    7b4a:	f145 0500 	adc.w	r5, r5, #0
        MULADDC_CORE   MULADDC_CORE
    7b4e:	fba3 e202 	umull	lr, r2, r3, r2
    7b52:	eb15 0e0e 	adds.w	lr, r5, lr
    7b56:	f854 5c28 	ldr.w	r5, [r4, #-40]
    7b5a:	f142 0200 	adc.w	r2, r2, #0
    7b5e:	eb15 050e 	adds.w	r5, r5, lr
    7b62:	f844 5c28 	str.w	r5, [r4, #-40]
    7b66:	f856 5c24 	ldr.w	r5, [r6, #-36]
    7b6a:	f142 0200 	adc.w	r2, r2, #0
    7b6e:	fba3 e505 	umull	lr, r5, r3, r5
    7b72:	eb12 0e0e 	adds.w	lr, r2, lr
    7b76:	f854 2c24 	ldr.w	r2, [r4, #-36]
    7b7a:	f145 0500 	adc.w	r5, r5, #0
    7b7e:	eb12 020e 	adds.w	r2, r2, lr
    7b82:	f844 2c24 	str.w	r2, [r4, #-36]
        MULADDC_CORE   MULADDC_CORE
    7b86:	f856 2c20 	ldr.w	r2, [r6, #-32]
        MULADDC_CORE   MULADDC_CORE
    7b8a:	f145 0500 	adc.w	r5, r5, #0
        MULADDC_CORE   MULADDC_CORE
    7b8e:	fba3 e202 	umull	lr, r2, r3, r2
    7b92:	eb15 0e0e 	adds.w	lr, r5, lr
    7b96:	f854 5c20 	ldr.w	r5, [r4, #-32]
    7b9a:	f142 0200 	adc.w	r2, r2, #0
    7b9e:	eb15 050e 	adds.w	r5, r5, lr
    7ba2:	f844 5c20 	str.w	r5, [r4, #-32]
    7ba6:	f856 5c1c 	ldr.w	r5, [r6, #-28]
    7baa:	f142 0200 	adc.w	r2, r2, #0
    7bae:	fba3 e505 	umull	lr, r5, r3, r5
    7bb2:	eb12 0e0e 	adds.w	lr, r2, lr
    7bb6:	f854 2c1c 	ldr.w	r2, [r4, #-28]
    7bba:	f145 0500 	adc.w	r5, r5, #0
    7bbe:	eb12 020e 	adds.w	r2, r2, lr
    7bc2:	f844 2c1c 	str.w	r2, [r4, #-28]
        MULADDC_CORE   MULADDC_CORE
    7bc6:	f856 2c18 	ldr.w	r2, [r6, #-24]
        MULADDC_CORE   MULADDC_CORE
    7bca:	f145 0500 	adc.w	r5, r5, #0
        MULADDC_CORE   MULADDC_CORE
    7bce:	fba3 e202 	umull	lr, r2, r3, r2
    7bd2:	eb15 0e0e 	adds.w	lr, r5, lr
    7bd6:	f854 5c18 	ldr.w	r5, [r4, #-24]
    7bda:	f142 0200 	adc.w	r2, r2, #0
    7bde:	eb15 050e 	adds.w	r5, r5, lr
    7be2:	f844 5c18 	str.w	r5, [r4, #-24]
    7be6:	f856 5c14 	ldr.w	r5, [r6, #-20]
    7bea:	f142 0200 	adc.w	r2, r2, #0
    7bee:	fba3 e505 	umull	lr, r5, r3, r5
    7bf2:	eb12 0e0e 	adds.w	lr, r2, lr
    7bf6:	f854 2c14 	ldr.w	r2, [r4, #-20]
    7bfa:	f145 0500 	adc.w	r5, r5, #0
    7bfe:	eb12 020e 	adds.w	r2, r2, lr
    7c02:	f844 2c14 	str.w	r2, [r4, #-20]
        MULADDC_CORE   MULADDC_CORE
    7c06:	f856 2c10 	ldr.w	r2, [r6, #-16]
        MULADDC_CORE   MULADDC_CORE
    7c0a:	f145 0500 	adc.w	r5, r5, #0
        MULADDC_CORE   MULADDC_CORE
    7c0e:	fba3 e202 	umull	lr, r2, r3, r2
    7c12:	eb15 0e0e 	adds.w	lr, r5, lr
    7c16:	f854 5c10 	ldr.w	r5, [r4, #-16]
    7c1a:	f142 0200 	adc.w	r2, r2, #0
    7c1e:	eb15 050e 	adds.w	r5, r5, lr
    7c22:	f844 5c10 	str.w	r5, [r4, #-16]
    7c26:	f856 5c0c 	ldr.w	r5, [r6, #-12]
    7c2a:	f142 0200 	adc.w	r2, r2, #0
    7c2e:	fba3 e505 	umull	lr, r5, r3, r5
    7c32:	eb12 0e0e 	adds.w	lr, r2, lr
    7c36:	f854 2c0c 	ldr.w	r2, [r4, #-12]
    7c3a:	f145 0500 	adc.w	r5, r5, #0
    7c3e:	eb12 020e 	adds.w	r2, r2, lr
    7c42:	f844 2c0c 	str.w	r2, [r4, #-12]
        MULADDC_CORE   MULADDC_CORE
    7c46:	f856 2c08 	ldr.w	r2, [r6, #-8]
        MULADDC_CORE   MULADDC_CORE
    7c4a:	f145 0500 	adc.w	r5, r5, #0
        MULADDC_CORE   MULADDC_CORE
    7c4e:	fba3 e202 	umull	lr, r2, r3, r2
    7c52:	eb15 0e0e 	adds.w	lr, r5, lr
    7c56:	f854 5c08 	ldr.w	r5, [r4, #-8]
    7c5a:	f142 0200 	adc.w	r2, r2, #0
    7c5e:	eb15 050e 	adds.w	r5, r5, lr
    7c62:	f844 5c08 	str.w	r5, [r4, #-8]
    7c66:	f856 5c04 	ldr.w	r5, [r6, #-4]
    7c6a:	f142 0200 	adc.w	r2, r2, #0
    7c6e:	fba3 5e05 	umull	r5, lr, r3, r5
    7c72:	1952      	adds	r2, r2, r5
    7c74:	f854 5c04 	ldr.w	r5, [r4, #-4]
    7c78:	f14e 0e00 	adc.w	lr, lr, #0
    7c7c:	18aa      	adds	r2, r5, r2
    7c7e:	f14e 0500 	adc.w	r5, lr, #0
    7c82:	f844 2c04 	str.w	r2, [r4, #-4]
    for( ; i >= 16; i -= 16 )
    7c86:	f1ac 0c10 	sub.w	ip, ip, #16
    7c8a:	e67f      	b.n	798c <mpi_mul_hlp+0xc>
        MULADDC_CORE
    7c8c:	f856 2b04 	ldr.w	r2, [r6], #4
    7c90:	fba3 2102 	umull	r2, r1, r3, r2
    7c94:	18aa      	adds	r2, r5, r2
    7c96:	f141 0500 	adc.w	r5, r1, #0
    7c9a:	6839      	ldr	r1, [r7, #0]
    7c9c:	1889      	adds	r1, r1, r2
    7c9e:	f847 1b04 	str.w	r1, [r7], #4
    7ca2:	f145 0500 	adc.w	r5, r5, #0
    for( ; i > 0; i-- )
    7ca6:	e6e8      	b.n	7a7a <mpi_mul_hlp+0xfa>
        *d += c; c = ( *d < c ); d++;
    7ca8:	6823      	ldr	r3, [r4, #0]
    7caa:	195b      	adds	r3, r3, r5
    7cac:	f844 3b04 	str.w	r3, [r4], #4
    7cb0:	bf2c      	ite	cs
    7cb2:	2501      	movcs	r5, #1
    7cb4:	2500      	movcc	r5, #0
    7cb6:	e6e4      	b.n	7a82 <mpi_mul_hlp+0x102>

00007cb8 <mpi_montmul>:
 *                      Note that unlike the usual convention in the library
 *                      for `const mbedtls_mpi*`, the content of T can change.
 */
static void mpi_montmul( mbedtls_mpi *A, const mbedtls_mpi *B, const mbedtls_mpi *N, mbedtls_mpi_uint mm,
                         const mbedtls_mpi *T )
{
    7cb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7cbc:	b085      	sub	sp, #20
    7cbe:	4617      	mov	r7, r2
    7cc0:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    7cc2:	9000      	str	r0, [sp, #0]
    size_t i, n, m;
    mbedtls_mpi_uint u0, u1, *d;

    memset( T->p, 0, T->n * ciL );
    7cc4:	6862      	ldr	r2, [r4, #4]
    7cc6:	68a0      	ldr	r0, [r4, #8]
{
    7cc8:	9303      	str	r3, [sp, #12]
    7cca:	468a      	mov	sl, r1
    memset( T->p, 0, T->n * ciL );
    7ccc:	0092      	lsls	r2, r2, #2
    7cce:	2100      	movs	r1, #0
    7cd0:	f7ff f857 	bl	6d82 <memset>

    d = T->p;
    n = N->n;
    7cd4:	687e      	ldr	r6, [r7, #4]
    m = ( B->n < n ) ? B->n : n;
    7cd6:	f8da 3004 	ldr.w	r3, [sl, #4]
    d = T->p;
    7cda:	68a5      	ldr	r5, [r4, #8]
    m = ( B->n < n ) ? B->n : n;
    7cdc:	42b3      	cmp	r3, r6
    7cde:	bf28      	it	cs
    7ce0:	4633      	movcs	r3, r6
        u1 = ( d[0] + u0 * B->p[0] ) * mm;

        mpi_mul_hlp( m, B->p, d, u0 );
        mpi_mul_hlp( n, N->p, d, u1 );

        *d++ = u0; d[n + 1] = 0;
    7ce2:	1c74      	adds	r4, r6, #1
    m = ( B->n < n ) ? B->n : n;
    7ce4:	9301      	str	r3, [sp, #4]
        *d++ = u0; d[n + 1] = 0;
    7ce6:	00a4      	lsls	r4, r4, #2
    d = T->p;
    7ce8:	46a9      	mov	r9, r5
    for( i = 0; i < n; i++ )
    7cea:	f04f 0800 	mov.w	r8, #0
        u0 = A->p[i];
    7cee:	9b00      	ldr	r3, [sp, #0]
    for( i = 0; i < n; i++ )
    7cf0:	45b0      	cmp	r8, r6
        u0 = A->p[i];
    7cf2:	6898      	ldr	r0, [r3, #8]
    for( i = 0; i < n; i++ )
    7cf4:	d11c      	bne.n	7d30 <mpi_montmul+0x78>
    7cf6:	3c04      	subs	r4, #4
    7cf8:	4425      	add	r5, r4
     * plus N. We now potentially subtract N, avoiding leaking whether the
     * subtraction is performed through side channels. */

    /* Copy the n least significant limbs of d to A, so that
     * A = d if d < N (recall that N has n limbs). */
    memcpy( A->p, d, n * ciL );
    7cfa:	4622      	mov	r2, r4
    7cfc:	4629      	mov	r1, r5
    7cfe:	f7ff f835 	bl	6d6c <memcpy>
    /* If d >= N then we want to set A to d - N. To prevent timing attacks,
     * do the calculation without using conditional tests. */
    /* Set d to d0 + (2^biL)^n - N where d0 is the current value of d. */
    d[n] += 1;
    7d02:	592b      	ldr	r3, [r5, r4]
    7d04:	3301      	adds	r3, #1
    7d06:	512b      	str	r3, [r5, r4]
    mbedtls_mpi_uint c = 0, t, z;
    7d08:	2200      	movs	r2, #0
    d[n] -= mpi_sub_hlp( n, d, d, N->p );
    7d0a:	f8d7 e008 	ldr.w	lr, [r7, #8]
    for( i = 0; i < n; i++ )
    7d0e:	1f28      	subs	r0, r5, #4
    7d10:	4613      	mov	r3, r2
    7d12:	429e      	cmp	r6, r3
    7d14:	d12b      	bne.n	7d6e <mpi_montmul+0xb6>
    d[n] -= mpi_sub_hlp( n, d, d, N->p );
    7d16:	592b      	ldr	r3, [r5, r4]
     * so d[n] == 0 and we want to keep A as it is.
     * If d0 >= N then d >= (2^biL)^n, and d <= (2^biL)^n + N < 2 * (2^biL)^n
     * so d[n] == 1 and we want to set A to the result of the subtraction
     * which is d - (2^biL)^n, i.e. the n least significant limbs of d.
     * This exactly corresponds to a conditional assignment. */
    mbedtls_ct_mpi_uint_cond_assign( n, A->p, d, (unsigned char) d[n] );
    7d18:	9900      	ldr	r1, [sp, #0]
    d[n] -= mpi_sub_hlp( n, d, d, N->p );
    7d1a:	1a9b      	subs	r3, r3, r2
    7d1c:	512b      	str	r3, [r5, r4]
    mbedtls_ct_mpi_uint_cond_assign( n, A->p, d, (unsigned char) d[n] );
    7d1e:	6889      	ldr	r1, [r1, #8]
    7d20:	b2db      	uxtb	r3, r3
    7d22:	462a      	mov	r2, r5
    7d24:	4630      	mov	r0, r6
}
    7d26:	b005      	add	sp, #20
    7d28:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    mbedtls_ct_mpi_uint_cond_assign( n, A->p, d, (unsigned char) d[n] );
    7d2c:	f000 bfe6 	b.w	8cfc <mbedtls_ct_mpi_uint_cond_assign>
        u1 = ( d[0] + u0 * B->p[0] ) * mm;
    7d30:	f8da 1008 	ldr.w	r1, [sl, #8]
        u0 = A->p[i];
    7d34:	f850 b028 	ldr.w	fp, [r0, r8, lsl #2]
        u1 = ( d[0] + u0 * B->p[0] ) * mm;
    7d38:	f8d9 3000 	ldr.w	r3, [r9]
    7d3c:	6808      	ldr	r0, [r1, #0]
    7d3e:	9a03      	ldr	r2, [sp, #12]
    7d40:	fb00 330b 	mla	r3, r0, fp, r3
    7d44:	4353      	muls	r3, r2
        mpi_mul_hlp( m, B->p, d, u0 );
    7d46:	9801      	ldr	r0, [sp, #4]
        u1 = ( d[0] + u0 * B->p[0] ) * mm;
    7d48:	9302      	str	r3, [sp, #8]
        mpi_mul_hlp( m, B->p, d, u0 );
    7d4a:	464a      	mov	r2, r9
    7d4c:	465b      	mov	r3, fp
    7d4e:	f7ff fe17 	bl	7980 <mpi_mul_hlp>
        mpi_mul_hlp( n, N->p, d, u1 );
    7d52:	9b02      	ldr	r3, [sp, #8]
    7d54:	68b9      	ldr	r1, [r7, #8]
    7d56:	464a      	mov	r2, r9
    7d58:	4630      	mov	r0, r6
    7d5a:	f7ff fe11 	bl	7980 <mpi_mul_hlp>
        *d++ = u0; d[n + 1] = 0;
    7d5e:	f849 bb04 	str.w	fp, [r9], #4
    7d62:	2300      	movs	r3, #0
    7d64:	f849 3004 	str.w	r3, [r9, r4]
    for( i = 0; i < n; i++ )
    7d68:	f108 0801 	add.w	r8, r8, #1
    7d6c:	e7bf      	b.n	7cee <mpi_montmul+0x36>
        z = ( l[i] <  c );    t = l[i] - c;
    7d6e:	f850 cf04 	ldr.w	ip, [r0, #4]!
        c = ( t < r[i] ) + z; d[i] = t - r[i];
    7d72:	f85e 7023 	ldr.w	r7, [lr, r3, lsl #2]
        z = ( l[i] <  c );    t = l[i] - c;
    7d76:	ebac 0102 	sub.w	r1, ip, r2
        c = ( t < r[i] ) + z; d[i] = t - r[i];
    7d7a:	42b9      	cmp	r1, r7
    7d7c:	bf2c      	ite	cs
    7d7e:	f04f 0800 	movcs.w	r8, #0
    7d82:	f04f 0801 	movcc.w	r8, #1
    7d86:	1bc9      	subs	r1, r1, r7
    7d88:	4594      	cmp	ip, r2
    7d8a:	bf2c      	ite	cs
    7d8c:	4642      	movcs	r2, r8
    7d8e:	f108 0201 	addcc.w	r2, r8, #1
    7d92:	6001      	str	r1, [r0, #0]
    for( i = 0; i < n; i++ )
    7d94:	3301      	adds	r3, #1
    7d96:	e7bc      	b.n	7d12 <mpi_montmul+0x5a>

00007d98 <mpi_bigendian_to_host.part.0>:
static void mpi_bigendian_to_host( mbedtls_mpi_uint * const p, size_t limbs )
    7d98:	b573      	push	{r0, r1, r4, r5, r6, lr}
    for( cur_limb_left = p, cur_limb_right = p + ( limbs - 1 );
    7d9a:	f101 4280 	add.w	r2, r1, #1073741824	; 0x40000000
    7d9e:	3a01      	subs	r2, #1
    7da0:	eb00 0282 	add.w	r2, r0, r2, lsl #2
         cur_limb_left <= cur_limb_right;
    7da4:	4282      	cmp	r2, r0
    7da6:	d201      	bcs.n	7dac <mpi_bigendian_to_host.part.0+0x14>
}
    7da8:	b002      	add	sp, #8
    7daa:	bd70      	pop	{r4, r5, r6, pc}
    return( mpi_uint_bigendian_to_host_c( x ) );
    7dac:	6803      	ldr	r3, [r0, #0]
    7dae:	9301      	str	r3, [sp, #4]
        tmp             = mpi_uint_bigendian_to_host( *cur_limb_left  );
    7db0:	2304      	movs	r3, #4
    for( i = 0, x_ptr = (unsigned char*) &x; i < ciL; i++, x_ptr++ )
    7db2:	eb0d 0503 	add.w	r5, sp, r3
    mbedtls_mpi_uint tmp = 0;
    7db6:	2400      	movs	r4, #0
    7db8:	4629      	mov	r1, r5
        tmp |= (mbedtls_mpi_uint) *x_ptr;
    7dba:	f815 6b01 	ldrb.w	r6, [r5], #1
    for( i = 0, x_ptr = (unsigned char*) &x; i < ciL; i++, x_ptr++ )
    7dbe:	3b01      	subs	r3, #1
    7dc0:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
        tmp |= (mbedtls_mpi_uint) *x_ptr;
    7dc4:	ea46 2404 	orr.w	r4, r6, r4, lsl #8
    for( i = 0, x_ptr = (unsigned char*) &x; i < ciL; i++, x_ptr++ )
    7dc8:	d1f7      	bne.n	7dba <mpi_bigendian_to_host.part.0+0x22>
    return( mpi_uint_bigendian_to_host_c( x ) );
    7dca:	6815      	ldr	r5, [r2, #0]
    7dcc:	9501      	str	r5, [sp, #4]
    mbedtls_mpi_uint tmp = 0;
    7dce:	461d      	mov	r5, r3
    for( i = 0, x_ptr = (unsigned char*) &x; i < ciL; i++, x_ptr++ )
    7dd0:	3301      	adds	r3, #1
        tmp |= (mbedtls_mpi_uint) *x_ptr;
    7dd2:	f811 6b01 	ldrb.w	r6, [r1], #1
    for( i = 0, x_ptr = (unsigned char*) &x; i < ciL; i++, x_ptr++ )
    7dd6:	b2db      	uxtb	r3, r3
    7dd8:	2b04      	cmp	r3, #4
        tmp |= (mbedtls_mpi_uint) *x_ptr;
    7dda:	ea46 2505 	orr.w	r5, r6, r5, lsl #8
    for( i = 0, x_ptr = (unsigned char*) &x; i < ciL; i++, x_ptr++ )
    7dde:	d1f7      	bne.n	7dd0 <mpi_bigendian_to_host.part.0+0x38>
        *cur_limb_left  = mpi_uint_bigendian_to_host( *cur_limb_right );
    7de0:	f840 5b04 	str.w	r5, [r0], #4
        *cur_limb_right = tmp;
    7de4:	f842 4904 	str.w	r4, [r2], #-4
         cur_limb_left++, cur_limb_right-- )
    7de8:	e7dc      	b.n	7da4 <mpi_bigendian_to_host.part.0+0xc>

00007dea <mbedtls_mpi_init>:
    X->n = 0;
    7dea:	2300      	movs	r3, #0
    7dec:	2201      	movs	r2, #1
    7dee:	e9c0 2300 	strd	r2, r3, [r0]
    X->p = NULL;
    7df2:	6083      	str	r3, [r0, #8]
}
    7df4:	4770      	bx	lr

00007df6 <mbedtls_mpi_free>:
{
    7df6:	b510      	push	{r4, lr}
    if( X == NULL )
    7df8:	4604      	mov	r4, r0
    7dfa:	b168      	cbz	r0, 7e18 <mbedtls_mpi_free+0x22>
    if( X->p != NULL )
    7dfc:	6880      	ldr	r0, [r0, #8]
    7dfe:	b130      	cbz	r0, 7e0e <mbedtls_mpi_free+0x18>
    mbedtls_platform_zeroize( v, ciL * n );
    7e00:	6861      	ldr	r1, [r4, #4]
    7e02:	0089      	lsls	r1, r1, #2
    7e04:	f7fb fff0 	bl	3de8 <mbedtls_platform_zeroize>
        mbedtls_free( X->p );
    7e08:	68a0      	ldr	r0, [r4, #8]
    7e0a:	f7fb ffdd 	bl	3dc8 <mbedtls_free>
    X->n = 0;
    7e0e:	2300      	movs	r3, #0
    7e10:	2201      	movs	r2, #1
    7e12:	e9c4 2300 	strd	r2, r3, [r4]
    X->p = NULL;
    7e16:	60a3      	str	r3, [r4, #8]
}
    7e18:	bd10      	pop	{r4, pc}

00007e1a <mbedtls_mpi_grow>:
    if( nblimbs > MBEDTLS_MPI_MAX_LIMBS )
    7e1a:	f242 7310 	movw	r3, #10000	; 0x2710
    7e1e:	4299      	cmp	r1, r3
{
    7e20:	b570      	push	{r4, r5, r6, lr}
    7e22:	4604      	mov	r4, r0
    7e24:	460d      	mov	r5, r1
    if( nblimbs > MBEDTLS_MPI_MAX_LIMBS )
    7e26:	d902      	bls.n	7e2e <mbedtls_mpi_grow+0x14>
        return( MBEDTLS_ERR_MPI_ALLOC_FAILED );
    7e28:	f06f 000f 	mvn.w	r0, #15
}
    7e2c:	bd70      	pop	{r4, r5, r6, pc}
    if( X->n < nblimbs )
    7e2e:	6843      	ldr	r3, [r0, #4]
    7e30:	428b      	cmp	r3, r1
    7e32:	d301      	bcc.n	7e38 <mbedtls_mpi_grow+0x1e>
    return( 0 );
    7e34:	2000      	movs	r0, #0
    7e36:	e7f9      	b.n	7e2c <mbedtls_mpi_grow+0x12>
        if( ( p = (mbedtls_mpi_uint*)mbedtls_calloc( nblimbs, ciL ) ) == NULL )
    7e38:	2104      	movs	r1, #4
    7e3a:	4628      	mov	r0, r5
    7e3c:	f7fb ffbe 	bl	3dbc <mbedtls_calloc>
    7e40:	4606      	mov	r6, r0
    7e42:	2800      	cmp	r0, #0
    7e44:	d0f0      	beq.n	7e28 <mbedtls_mpi_grow+0xe>
        if( X->p != NULL )
    7e46:	68a1      	ldr	r1, [r4, #8]
    7e48:	b159      	cbz	r1, 7e62 <mbedtls_mpi_grow+0x48>
            memcpy( p, X->p, X->n * ciL );
    7e4a:	6862      	ldr	r2, [r4, #4]
    7e4c:	0092      	lsls	r2, r2, #2
    7e4e:	f7fe ff8d 	bl	6d6c <memcpy>
    mbedtls_platform_zeroize( v, ciL * n );
    7e52:	6861      	ldr	r1, [r4, #4]
    7e54:	68a0      	ldr	r0, [r4, #8]
    7e56:	0089      	lsls	r1, r1, #2
    7e58:	f7fb ffc6 	bl	3de8 <mbedtls_platform_zeroize>
            mbedtls_free( X->p );
    7e5c:	68a0      	ldr	r0, [r4, #8]
    7e5e:	f7fb ffb3 	bl	3dc8 <mbedtls_free>
        X->p = p;
    7e62:	e9c4 5601 	strd	r5, r6, [r4, #4]
    7e66:	e7e5      	b.n	7e34 <mbedtls_mpi_grow+0x1a>

00007e68 <mbedtls_mpi_resize_clear>:
{
    7e68:	b538      	push	{r3, r4, r5, lr}
    7e6a:	4604      	mov	r4, r0
    if( limbs == 0 )
    7e6c:	460d      	mov	r5, r1
    7e6e:	b919      	cbnz	r1, 7e78 <mbedtls_mpi_resize_clear+0x10>
        mbedtls_mpi_free( X );
    7e70:	f7ff ffc1 	bl	7df6 <mbedtls_mpi_free>
}
    7e74:	2000      	movs	r0, #0
    7e76:	bd38      	pop	{r3, r4, r5, pc}
    else if( X->n == limbs )
    7e78:	6842      	ldr	r2, [r0, #4]
    7e7a:	428a      	cmp	r2, r1
    7e7c:	d107      	bne.n	7e8e <mbedtls_mpi_resize_clear+0x26>
        memset( X->p, 0, limbs * ciL );
    7e7e:	6880      	ldr	r0, [r0, #8]
    7e80:	0092      	lsls	r2, r2, #2
    7e82:	2100      	movs	r1, #0
    7e84:	f7fe ff7d 	bl	6d82 <memset>
        X->s = 1;
    7e88:	2301      	movs	r3, #1
    7e8a:	6023      	str	r3, [r4, #0]
        return( 0 );
    7e8c:	e7f2      	b.n	7e74 <mbedtls_mpi_resize_clear+0xc>
        mbedtls_mpi_free( X );
    7e8e:	f7ff ffb2 	bl	7df6 <mbedtls_mpi_free>
        return( mbedtls_mpi_grow( X, limbs ) );
    7e92:	4629      	mov	r1, r5
    7e94:	4620      	mov	r0, r4
}
    7e96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        return( mbedtls_mpi_grow( X, limbs ) );
    7e9a:	f7ff bfbe 	b.w	7e1a <mbedtls_mpi_grow>

00007e9e <mbedtls_mpi_copy>:
    if( X == Y )
    7e9e:	4288      	cmp	r0, r1
{
    7ea0:	b570      	push	{r4, r5, r6, lr}
    7ea2:	4605      	mov	r5, r0
    7ea4:	460e      	mov	r6, r1
    if( X == Y )
    7ea6:	d009      	beq.n	7ebc <mbedtls_mpi_copy+0x1e>
    if( Y->n == 0 )
    7ea8:	6849      	ldr	r1, [r1, #4]
        if( X->n != 0 )
    7eaa:	6842      	ldr	r2, [r0, #4]
    if( Y->n == 0 )
    7eac:	b941      	cbnz	r1, 7ec0 <mbedtls_mpi_copy+0x22>
        if( X->n != 0 )
    7eae:	b12a      	cbz	r2, 7ebc <mbedtls_mpi_copy+0x1e>
            X->s = 1;
    7eb0:	2301      	movs	r3, #1
    7eb2:	6003      	str	r3, [r0, #0]
            memset( X->p, 0, X->n * ciL );
    7eb4:	0092      	lsls	r2, r2, #2
    7eb6:	6880      	ldr	r0, [r0, #8]
    7eb8:	f7fe ff63 	bl	6d82 <memset>
        return( 0 );
    7ebc:	2000      	movs	r0, #0
}
    7ebe:	bd70      	pop	{r4, r5, r6, pc}
    for( i = Y->n - 1; i > 0; i-- )
    7ec0:	1e4c      	subs	r4, r1, #1
    7ec2:	b984      	cbnz	r4, 7ee6 <mbedtls_mpi_copy+0x48>
    i++;
    7ec4:	3401      	adds	r4, #1
    X->s = Y->s;
    7ec6:	6833      	ldr	r3, [r6, #0]
    7ec8:	602b      	str	r3, [r5, #0]
    if( X->n < i )
    7eca:	4294      	cmp	r4, r2
    7ecc:	d912      	bls.n	7ef4 <mbedtls_mpi_copy+0x56>
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i ) );
    7ece:	4621      	mov	r1, r4
    7ed0:	4628      	mov	r0, r5
    7ed2:	f7ff ffa2 	bl	7e1a <mbedtls_mpi_grow>
    7ed6:	2800      	cmp	r0, #0
    7ed8:	d1f1      	bne.n	7ebe <mbedtls_mpi_copy+0x20>
    memcpy( X->p, Y->p, i * ciL );
    7eda:	68b1      	ldr	r1, [r6, #8]
    7edc:	68a8      	ldr	r0, [r5, #8]
    7ede:	00a2      	lsls	r2, r4, #2
    7ee0:	f7fe ff44 	bl	6d6c <memcpy>
    7ee4:	e7ea      	b.n	7ebc <mbedtls_mpi_copy+0x1e>
        if( Y->p[i] != 0 )
    7ee6:	68b3      	ldr	r3, [r6, #8]
    7ee8:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
    7eec:	2b00      	cmp	r3, #0
    7eee:	d1e9      	bne.n	7ec4 <mbedtls_mpi_copy+0x26>
    for( i = Y->n - 1; i > 0; i-- )
    7ef0:	3c01      	subs	r4, #1
    7ef2:	e7e6      	b.n	7ec2 <mbedtls_mpi_copy+0x24>
        memset( X->p + i, 0, ( X->n - i ) * ciL );
    7ef4:	68a8      	ldr	r0, [r5, #8]
    7ef6:	1b12      	subs	r2, r2, r4
    7ef8:	0092      	lsls	r2, r2, #2
    7efa:	2100      	movs	r1, #0
    7efc:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    7f00:	f7fe ff3f 	bl	6d82 <memset>
    7f04:	e7e9      	b.n	7eda <mbedtls_mpi_copy+0x3c>

00007f06 <mbedtls_mpi_lset>:
{
    7f06:	b570      	push	{r4, r5, r6, lr}
    7f08:	460e      	mov	r6, r1
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, 1 ) );
    7f0a:	2101      	movs	r1, #1
{
    7f0c:	4604      	mov	r4, r0
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, 1 ) );
    7f0e:	f7ff ff84 	bl	7e1a <mbedtls_mpi_grow>
    7f12:	4605      	mov	r5, r0
    7f14:	b988      	cbnz	r0, 7f3a <mbedtls_mpi_lset+0x34>
    memset( X->p, 0, X->n * ciL );
    7f16:	6862      	ldr	r2, [r4, #4]
    7f18:	4601      	mov	r1, r0
    7f1a:	0092      	lsls	r2, r2, #2
    7f1c:	68a0      	ldr	r0, [r4, #8]
    7f1e:	f7fe ff30 	bl	6d82 <memset>
    X->p[0] = ( z < 0 ) ? -z : z;
    7f22:	68a3      	ldr	r3, [r4, #8]
    7f24:	ea86 72e6 	eor.w	r2, r6, r6, asr #31
    X->s    = ( z < 0 ) ? -1 : 1;
    7f28:	2e00      	cmp	r6, #0
    X->p[0] = ( z < 0 ) ? -z : z;
    7f2a:	eba2 72e6 	sub.w	r2, r2, r6, asr #31
    7f2e:	601a      	str	r2, [r3, #0]
    X->s    = ( z < 0 ) ? -1 : 1;
    7f30:	bfac      	ite	ge
    7f32:	2301      	movge	r3, #1
    7f34:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
    7f38:	6023      	str	r3, [r4, #0]
}
    7f3a:	4628      	mov	r0, r5
    7f3c:	bd70      	pop	{r4, r5, r6, pc}

00007f3e <mbedtls_mpi_get_bit>:
    if( X->n * biL <= pos )
    7f3e:	6843      	ldr	r3, [r0, #4]
    7f40:	ebb1 1f43 	cmp.w	r1, r3, lsl #5
    return( ( X->p[pos / biL] >> ( pos % biL ) ) & 0x01 );
    7f44:	bf3f      	itttt	cc
    7f46:	6883      	ldrcc	r3, [r0, #8]
    7f48:	094a      	lsrcc	r2, r1, #5
    7f4a:	f001 011f 	andcc.w	r1, r1, #31
    7f4e:	f853 0022 	ldrcc.w	r0, [r3, r2, lsl #2]
    7f52:	bf3a      	itte	cc
    7f54:	40c8      	lsrcc	r0, r1
    7f56:	f000 0001 	andcc.w	r0, r0, #1
        return( 0 );
    7f5a:	2000      	movcs	r0, #0
}
    7f5c:	4770      	bx	lr

00007f5e <mbedtls_mpi_bitlen>:
{
    7f5e:	4602      	mov	r2, r0
    if( X->n == 0 )
    7f60:	6840      	ldr	r0, [r0, #4]
    7f62:	b1a0      	cbz	r0, 7f8e <mbedtls_mpi_bitlen+0x30>
        if( X->p[i] != 0 )
    7f64:	6892      	ldr	r2, [r2, #8]
    for( i = X->n - 1; i > 0; i-- )
    7f66:	1e43      	subs	r3, r0, #1
    7f68:	b993      	cbnz	r3, 7f90 <mbedtls_mpi_bitlen+0x32>
    j = biL - mbedtls_clz( X->p[i] );
    7f6a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
        if( x & mask ) break;
    7f6e:	2900      	cmp	r1, #0
    for( j = 0; j < biL; j++ )
    7f70:	f04f 0000 	mov.w	r0, #0
        if( x & mask ) break;
    7f74:	db08      	blt.n	7f88 <mbedtls_mpi_bitlen+0x2a>
    mbedtls_mpi_uint mask = (mbedtls_mpi_uint) 1 << (biL - 1);
    7f76:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    for( j = 0; j < biL; j++ )
    7f7a:	3001      	adds	r0, #1
    7f7c:	2820      	cmp	r0, #32
        mask >>= 1;
    7f7e:	ea4f 0252 	mov.w	r2, r2, lsr #1
    for( j = 0; j < biL; j++ )
    7f82:	d001      	beq.n	7f88 <mbedtls_mpi_bitlen+0x2a>
        if( x & mask ) break;
    7f84:	4211      	tst	r1, r2
    7f86:	d0f8      	beq.n	7f7a <mbedtls_mpi_bitlen+0x1c>
    return( ( i * biL ) + j );
    7f88:	3301      	adds	r3, #1
    7f8a:	ebc0 1043 	rsb	r0, r0, r3, lsl #5
}
    7f8e:	4770      	bx	lr
        if( X->p[i] != 0 )
    7f90:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    7f94:	2900      	cmp	r1, #0
    7f96:	d1e8      	bne.n	7f6a <mbedtls_mpi_bitlen+0xc>
    for( i = X->n - 1; i > 0; i-- )
    7f98:	3b01      	subs	r3, #1
    7f9a:	e7e5      	b.n	7f68 <mbedtls_mpi_bitlen+0xa>

00007f9c <mbedtls_mpi_size>:
{
    7f9c:	b508      	push	{r3, lr}
    return( ( mbedtls_mpi_bitlen( X ) + 7 ) >> 3 );
    7f9e:	f7ff ffde 	bl	7f5e <mbedtls_mpi_bitlen>
    7fa2:	3007      	adds	r0, #7
}
    7fa4:	08c0      	lsrs	r0, r0, #3
    7fa6:	bd08      	pop	{r3, pc}

00007fa8 <mbedtls_mpi_read_binary>:
{
    7fa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    size_t const limbs    = CHARS_TO_LIMBS( buflen );
    7fac:	f012 0403 	ands.w	r4, r2, #3
    7fb0:	bf18      	it	ne
    7fb2:	2401      	movne	r4, #1
    7fb4:	eb04 0492 	add.w	r4, r4, r2, lsr #2
{
    7fb8:	4688      	mov	r8, r1
    MBEDTLS_MPI_CHK( mbedtls_mpi_resize_clear( X, limbs ) );
    7fba:	4621      	mov	r1, r4
{
    7fbc:	4607      	mov	r7, r0
    7fbe:	4615      	mov	r5, r2
    MBEDTLS_MPI_CHK( mbedtls_mpi_resize_clear( X, limbs ) );
    7fc0:	f7ff ff52 	bl	7e68 <mbedtls_mpi_resize_clear>
    7fc4:	4606      	mov	r6, r0
    7fc6:	b968      	cbnz	r0, 7fe4 <mbedtls_mpi_read_binary+0x3c>
    if( buflen != 0 )
    7fc8:	b165      	cbz	r5, 7fe4 <mbedtls_mpi_read_binary+0x3c>
        memcpy( Xp + overhead, buf, buflen );
    7fca:	68bb      	ldr	r3, [r7, #8]
    size_t const overhead = ( limbs * ciL ) - buflen;
    7fcc:	ebc5 0084 	rsb	r0, r5, r4, lsl #2
        memcpy( Xp + overhead, buf, buflen );
    7fd0:	462a      	mov	r2, r5
    7fd2:	4641      	mov	r1, r8
    7fd4:	4418      	add	r0, r3
    7fd6:	f7fe fec9 	bl	6d6c <memcpy>
        mpi_bigendian_to_host( X->p, limbs );
    7fda:	68b8      	ldr	r0, [r7, #8]
    if( limbs == 0 )
    7fdc:	b114      	cbz	r4, 7fe4 <mbedtls_mpi_read_binary+0x3c>
    7fde:	4621      	mov	r1, r4
    7fe0:	f7ff feda 	bl	7d98 <mpi_bigendian_to_host.part.0>
}
    7fe4:	4630      	mov	r0, r6
    7fe6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00007fea <mbedtls_mpi_write_binary>:
{
    7fea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7fec:	4604      	mov	r4, r0
    7fee:	4608      	mov	r0, r1
    stored_bytes = X->n * ciL;
    7ff0:	6863      	ldr	r3, [r4, #4]
    if( stored_bytes < buflen )
    7ff2:	ebb2 0f83 	cmp.w	r2, r3, lsl #2
    stored_bytes = X->n * ciL;
    7ff6:	ea4f 0583 	mov.w	r5, r3, lsl #2
    if( stored_bytes < buflen )
    7ffa:	d91a      	bls.n	8032 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x32>
        p = buf + buflen - stored_bytes;
    7ffc:	1b52      	subs	r2, r2, r5
    7ffe:	188e      	adds	r6, r1, r2
        memset( buf, 0, buflen - stored_bytes );
    8000:	2100      	movs	r1, #0
    8002:	f7fe febe 	bl	6d82 <memset>
        p = buf + buflen - stored_bytes;
    8006:	4630      	mov	r0, r6
    8008:	462a      	mov	r2, r5
    for( i = 0; i < bytes_to_copy; i++ )
    800a:	1883      	adds	r3, r0, r2
    800c:	2100      	movs	r1, #0
    800e:	428a      	cmp	r2, r1
    8010:	d111      	bne.n	8036 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x36>
    return( 0 );
    8012:	2000      	movs	r0, #0
}
    8014:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            if( GET_BYTE( X, i ) != 0 )
    8016:	68a1      	ldr	r1, [r4, #8]
    8018:	f023 0703 	bic.w	r7, r3, #3
    801c:	f003 0603 	and.w	r6, r3, #3
    8020:	59c9      	ldr	r1, [r1, r7]
    8022:	00f6      	lsls	r6, r6, #3
    8024:	40f1      	lsrs	r1, r6
    8026:	b2c9      	uxtb	r1, r1
    8028:	b989      	cbnz	r1, 804e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4e>
        for( i = bytes_to_copy; i < stored_bytes; i++ )
    802a:	3301      	adds	r3, #1
    802c:	42ab      	cmp	r3, r5
    802e:	d1f2      	bne.n	8016 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x16>
    8030:	e7eb      	b.n	800a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa>
    8032:	4613      	mov	r3, r2
    8034:	e7fa      	b.n	802c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2c>
        p[bytes_to_copy - i - 1] = GET_BYTE( X, i );
    8036:	68a6      	ldr	r6, [r4, #8]
    8038:	f021 0003 	bic.w	r0, r1, #3
    803c:	f001 0503 	and.w	r5, r1, #3
    8040:	5830      	ldr	r0, [r6, r0]
    8042:	00ed      	lsls	r5, r5, #3
    8044:	40e8      	lsrs	r0, r5
    8046:	f803 0d01 	strb.w	r0, [r3, #-1]!
    for( i = 0; i < bytes_to_copy; i++ )
    804a:	3101      	adds	r1, #1
    804c:	e7df      	b.n	800e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xe>
                return( MBEDTLS_ERR_MPI_BUFFER_TOO_SMALL );
    804e:	f06f 0007 	mvn.w	r0, #7
    8052:	e7df      	b.n	8014 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x14>

00008054 <mbedtls_mpi_shift_l>:
{
    8054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8056:	4605      	mov	r5, r0
    8058:	460e      	mov	r6, r1
    v0 = count / (biL    );
    805a:	094c      	lsrs	r4, r1, #5
    t1 = count & (biL - 1);
    805c:	f001 071f 	and.w	r7, r1, #31
    i = mbedtls_mpi_bitlen( X ) + count;
    8060:	f7ff ff7d 	bl	7f5e <mbedtls_mpi_bitlen>
    if( X->n * biL < i )
    8064:	686b      	ldr	r3, [r5, #4]
    i = mbedtls_mpi_bitlen( X ) + count;
    8066:	4430      	add	r0, r6
    if( X->n * biL < i )
    8068:	ebb0 1f43 	cmp.w	r0, r3, lsl #5
    806c:	d805      	bhi.n	807a <mbedtls_mpi_shift_l+0x26>
    if( v0 > 0 )
    806e:	2e1f      	cmp	r6, #31
    8070:	d80f      	bhi.n	8092 <mbedtls_mpi_shift_l+0x3e>
    if( t1 > 0 )
    8072:	2f00      	cmp	r7, #0
    8074:	d141      	bne.n	80fa <mbedtls_mpi_shift_l+0xa6>
    ret = 0;
    8076:	2000      	movs	r0, #0
    8078:	e00a      	b.n	8090 <mbedtls_mpi_shift_l+0x3c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, BITS_TO_LIMBS( i ) ) );
    807a:	f010 011f 	ands.w	r1, r0, #31
    807e:	bf18      	it	ne
    8080:	2101      	movne	r1, #1
    8082:	eb01 1150 	add.w	r1, r1, r0, lsr #5
    8086:	4628      	mov	r0, r5
    8088:	f7ff fec7 	bl	7e1a <mbedtls_mpi_grow>
    808c:	2800      	cmp	r0, #0
    808e:	d0ee      	beq.n	806e <mbedtls_mpi_shift_l+0x1a>
}
    8090:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for( i = X->n; i > v0; i-- )
    8092:	686b      	ldr	r3, [r5, #4]
    8094:	f06f 0003 	mvn.w	r0, #3
    8098:	009a      	lsls	r2, r3, #2
    809a:	4360      	muls	r0, r4
    809c:	4619      	mov	r1, r3
    809e:	42a1      	cmp	r1, r4
    80a0:	f1a2 0204 	sub.w	r2, r2, #4
    80a4:	d80c      	bhi.n	80c0 <mbedtls_mpi_shift_l+0x6c>
    80a6:	1ae2      	subs	r2, r4, r3
    80a8:	429c      	cmp	r4, r3
    80aa:	bf88      	it	hi
    80ac:	2200      	movhi	r2, #0
    80ae:	4413      	add	r3, r2
    80b0:	009b      	lsls	r3, r3, #2
            X->p[i - 1] = 0;
    80b2:	2200      	movs	r2, #0
        for( ; i > 0; i-- )
    80b4:	3b04      	subs	r3, #4
    80b6:	1d19      	adds	r1, r3, #4
    80b8:	d0db      	beq.n	8072 <mbedtls_mpi_shift_l+0x1e>
            X->p[i - 1] = 0;
    80ba:	68a9      	ldr	r1, [r5, #8]
    80bc:	50ca      	str	r2, [r1, r3]
        for( ; i > 0; i-- )
    80be:	e7f9      	b.n	80b4 <mbedtls_mpi_shift_l+0x60>
            X->p[i - 1] = X->p[i - v0 - 1];
    80c0:	68ae      	ldr	r6, [r5, #8]
    80c2:	eb06 0c02 	add.w	ip, r6, r2
        for( i = X->n; i > v0; i-- )
    80c6:	3901      	subs	r1, #1
            X->p[i - 1] = X->p[i - v0 - 1];
    80c8:	f85c c000 	ldr.w	ip, [ip, r0]
    80cc:	f846 c002 	str.w	ip, [r6, r2]
        for( i = X->n; i > v0; i-- )
    80d0:	e7e5      	b.n	809e <mbedtls_mpi_shift_l+0x4a>
            r1 = X->p[i] >> (biL - t1);
    80d2:	68ab      	ldr	r3, [r5, #8]
    80d4:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
            X->p[i] <<= t1;
    80d8:	fa01 f007 	lsl.w	r0, r1, r7
    80dc:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
            X->p[i] |= r0;
    80e0:	68a8      	ldr	r0, [r5, #8]
    80e2:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
    80e6:	4313      	orrs	r3, r2
    80e8:	f840 3024 	str.w	r3, [r0, r4, lsl #2]
            r0 = r1;
    80ec:	fa21 f206 	lsr.w	r2, r1, r6
        for( i = v0; i < X->n; i++ )
    80f0:	3401      	adds	r4, #1
    80f2:	686b      	ldr	r3, [r5, #4]
    80f4:	42a3      	cmp	r3, r4
    80f6:	d8ec      	bhi.n	80d2 <mbedtls_mpi_shift_l+0x7e>
    80f8:	e7bd      	b.n	8076 <mbedtls_mpi_shift_l+0x22>
    mbedtls_mpi_uint r0 = 0, r1;
    80fa:	2200      	movs	r2, #0
            r1 = X->p[i] >> (biL - t1);
    80fc:	f1c7 0620 	rsb	r6, r7, #32
    8100:	e7f7      	b.n	80f2 <mbedtls_mpi_shift_l+0x9e>

00008102 <mbedtls_mpi_shift_r>:
{
    8102:	b4f0      	push	{r4, r5, r6, r7}
    if( v0 > X->n || ( v0 == X->n && v1 > 0 ) )
    8104:	6843      	ldr	r3, [r0, #4]
    v0 = count /  biL;
    8106:	094c      	lsrs	r4, r1, #5
    if( v0 > X->n || ( v0 == X->n && v1 > 0 ) )
    8108:	42a3      	cmp	r3, r4
    v1 = count & (biL - 1);
    810a:	f001 021f 	and.w	r2, r1, #31
    if( v0 > X->n || ( v0 == X->n && v1 > 0 ) )
    810e:	d301      	bcc.n	8114 <mbedtls_mpi_shift_r+0x12>
    8110:	d109      	bne.n	8126 <mbedtls_mpi_shift_r+0x24>
    8112:	b11a      	cbz	r2, 811c <mbedtls_mpi_shift_r+0x1a>
}
    8114:	bcf0      	pop	{r4, r5, r6, r7}
        return mbedtls_mpi_lset( X, 0 );
    8116:	2100      	movs	r1, #0
    8118:	f7ff bef5 	b.w	7f06 <mbedtls_mpi_lset>
    if( v0 > 0 )
    811c:	291f      	cmp	r1, #31
    811e:	d804      	bhi.n	812a <mbedtls_mpi_shift_r+0x28>
}
    8120:	2000      	movs	r0, #0
    8122:	bcf0      	pop	{r4, r5, r6, r7}
    8124:	4770      	bx	lr
    if( v0 > 0 )
    8126:	291f      	cmp	r1, #31
    8128:	d909      	bls.n	813e <mbedtls_mpi_shift_r+0x3c>
    812a:	00a5      	lsls	r5, r4, #2
{
    812c:	2300      	movs	r3, #0
        for( i = 0; i < X->n - v0; i++ )
    812e:	6841      	ldr	r1, [r0, #4]
    8130:	1b09      	subs	r1, r1, r4
    8132:	4299      	cmp	r1, r3
    8134:	d81b      	bhi.n	816e <mbedtls_mpi_shift_r+0x6c>
            X->p[i] = 0;
    8136:	2400      	movs	r4, #0
        for( ; i < X->n; i++ )
    8138:	6841      	ldr	r1, [r0, #4]
    813a:	4299      	cmp	r1, r3
    813c:	d81e      	bhi.n	817c <mbedtls_mpi_shift_r+0x7a>
    if( v1 > 0 )
    813e:	2a00      	cmp	r2, #0
    8140:	d0ee      	beq.n	8120 <mbedtls_mpi_shift_r+0x1e>
        for( i = X->n; i > 0; i-- )
    8142:	6843      	ldr	r3, [r0, #4]
    mbedtls_mpi_uint r0 = 0, r1;
    8144:	2400      	movs	r4, #0
            r1 = X->p[i - 1] << (biL - v1);
    8146:	f1c2 0720 	rsb	r7, r2, #32
        for( i = X->n; i > 0; i-- )
    814a:	3b01      	subs	r3, #1
    814c:	d3e8      	bcc.n	8120 <mbedtls_mpi_shift_r+0x1e>
            r1 = X->p[i - 1] << (biL - v1);
    814e:	6881      	ldr	r1, [r0, #8]
    8150:	f851 5023 	ldr.w	r5, [r1, r3, lsl #2]
            X->p[i - 1] >>= v1;
    8154:	fa25 f602 	lsr.w	r6, r5, r2
    8158:	f841 6023 	str.w	r6, [r1, r3, lsl #2]
            X->p[i - 1] |= r0;
    815c:	6886      	ldr	r6, [r0, #8]
    815e:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
    8162:	4321      	orrs	r1, r4
    8164:	f846 1023 	str.w	r1, [r6, r3, lsl #2]
            r0 = r1;
    8168:	fa05 f407 	lsl.w	r4, r5, r7
    816c:	e7ed      	b.n	814a <mbedtls_mpi_shift_r+0x48>
            X->p[i] = X->p[i + v0];
    816e:	6881      	ldr	r1, [r0, #8]
    8170:	594e      	ldr	r6, [r1, r5]
    8172:	f841 6023 	str.w	r6, [r1, r3, lsl #2]
        for( i = 0; i < X->n - v0; i++ )
    8176:	3504      	adds	r5, #4
    8178:	3301      	adds	r3, #1
    817a:	e7d8      	b.n	812e <mbedtls_mpi_shift_r+0x2c>
            X->p[i] = 0;
    817c:	6881      	ldr	r1, [r0, #8]
    817e:	f841 4023 	str.w	r4, [r1, r3, lsl #2]
        for( ; i < X->n; i++ )
    8182:	3301      	adds	r3, #1
    8184:	e7d8      	b.n	8138 <mbedtls_mpi_shift_r+0x36>

00008186 <mbedtls_mpi_cmp_abs>:
{
    8186:	b510      	push	{r4, lr}
    for( i = X->n; i > 0; i-- )
    8188:	6842      	ldr	r2, [r0, #4]
    818a:	b93a      	cbnz	r2, 819c <mbedtls_mpi_cmp_abs+0x16>
    for( j = Y->n; j > 0; j-- )
    818c:	684b      	ldr	r3, [r1, #4]
    818e:	b973      	cbnz	r3, 81ae <mbedtls_mpi_cmp_abs+0x28>
    if( i == 0 && j == 0 )
    8190:	b9b2      	cbnz	r2, 81c0 <mbedtls_mpi_cmp_abs+0x3a>
    8192:	1e18      	subs	r0, r3, #0
    8194:	bf18      	it	ne
    8196:	2001      	movne	r0, #1
    8198:	4240      	negs	r0, r0
}
    819a:	bd10      	pop	{r4, pc}
        if( X->p[i - 1] != 0 )
    819c:	6883      	ldr	r3, [r0, #8]
    819e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    81a2:	f853 3c04 	ldr.w	r3, [r3, #-4]
    81a6:	2b00      	cmp	r3, #0
    81a8:	d1f0      	bne.n	818c <mbedtls_mpi_cmp_abs+0x6>
    for( i = X->n; i > 0; i-- )
    81aa:	3a01      	subs	r2, #1
    81ac:	e7ed      	b.n	818a <mbedtls_mpi_cmp_abs+0x4>
        if( Y->p[j - 1] != 0 )
    81ae:	688c      	ldr	r4, [r1, #8]
    81b0:	eb04 0483 	add.w	r4, r4, r3, lsl #2
    81b4:	f854 4c04 	ldr.w	r4, [r4, #-4]
    81b8:	2c00      	cmp	r4, #0
    81ba:	d1e9      	bne.n	8190 <mbedtls_mpi_cmp_abs+0xa>
    for( j = Y->n; j > 0; j-- )
    81bc:	3b01      	subs	r3, #1
    81be:	e7e6      	b.n	818e <mbedtls_mpi_cmp_abs+0x8>
    if( i > j ) return(  1 );
    81c0:	429a      	cmp	r2, r3
    81c2:	d810      	bhi.n	81e6 <mbedtls_mpi_cmp_abs+0x60>
    if( j > i ) return( -1 );
    81c4:	d311      	bcc.n	81ea <mbedtls_mpi_cmp_abs+0x64>
    81c6:	3a01      	subs	r2, #1
        if( X->p[i - 1] > Y->p[i - 1] ) return(  1 );
    81c8:	6883      	ldr	r3, [r0, #8]
    81ca:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
    81ce:	688b      	ldr	r3, [r1, #8]
    81d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    81d4:	429c      	cmp	r4, r3
    81d6:	d806      	bhi.n	81e6 <mbedtls_mpi_cmp_abs+0x60>
        if( X->p[i - 1] < Y->p[i - 1] ) return( -1 );
    81d8:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
    81dc:	d305      	bcc.n	81ea <mbedtls_mpi_cmp_abs+0x64>
    for( ; i > 0; i-- )
    81de:	1c53      	adds	r3, r2, #1
    81e0:	d1f2      	bne.n	81c8 <mbedtls_mpi_cmp_abs+0x42>
        return( 0 );
    81e2:	2000      	movs	r0, #0
    81e4:	e7d9      	b.n	819a <mbedtls_mpi_cmp_abs+0x14>
    if( i > j ) return(  1 );
    81e6:	2001      	movs	r0, #1
    81e8:	e7d7      	b.n	819a <mbedtls_mpi_cmp_abs+0x14>
    if( j > i ) return( -1 );
    81ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    81ee:	e7d4      	b.n	819a <mbedtls_mpi_cmp_abs+0x14>

000081f0 <mbedtls_mpi_cmp_mpi>:
{
    81f0:	b530      	push	{r4, r5, lr}
    for( i = X->n; i > 0; i-- )
    81f2:	6843      	ldr	r3, [r0, #4]
{
    81f4:	4602      	mov	r2, r0
    for( i = X->n; i > 0; i-- )
    81f6:	b923      	cbnz	r3, 8202 <mbedtls_mpi_cmp_mpi+0x12>
    for( j = Y->n; j > 0; j-- )
    81f8:	6848      	ldr	r0, [r1, #4]
    81fa:	b958      	cbnz	r0, 8214 <mbedtls_mpi_cmp_mpi+0x24>
    if( i == 0 && j == 0 )
    81fc:	2b00      	cmp	r3, #0
    81fe:	d136      	bne.n	826e <mbedtls_mpi_cmp_mpi+0x7e>
    8200:	e02f      	b.n	8262 <mbedtls_mpi_cmp_mpi+0x72>
        if( X->p[i - 1] != 0 )
    8202:	6890      	ldr	r0, [r2, #8]
    8204:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    8208:	f850 0c04 	ldr.w	r0, [r0, #-4]
    820c:	2800      	cmp	r0, #0
    820e:	d1f3      	bne.n	81f8 <mbedtls_mpi_cmp_mpi+0x8>
    for( i = X->n; i > 0; i-- )
    8210:	3b01      	subs	r3, #1
    8212:	e7f0      	b.n	81f6 <mbedtls_mpi_cmp_mpi+0x6>
        if( Y->p[j - 1] != 0 )
    8214:	688c      	ldr	r4, [r1, #8]
    8216:	eb04 0580 	add.w	r5, r4, r0, lsl #2
    821a:	f855 5c04 	ldr.w	r5, [r5, #-4]
    821e:	bb15      	cbnz	r5, 8266 <mbedtls_mpi_cmp_mpi+0x76>
    for( j = Y->n; j > 0; j-- )
    8220:	3801      	subs	r0, #1
    8222:	e7ea      	b.n	81fa <mbedtls_mpi_cmp_mpi+0xa>
    if( X->s > 0 && Y->s < 0 ) return(  1 );
    8224:	680d      	ldr	r5, [r1, #0]
    if( j > i ) return( -Y->s );
    8226:	d202      	bcs.n	822e <mbedtls_mpi_cmp_mpi+0x3e>
    8228:	6808      	ldr	r0, [r1, #0]
        if( X->p[i - 1] < Y->p[i - 1] ) return( -X->s );
    822a:	4240      	negs	r0, r0
    822c:	e020      	b.n	8270 <mbedtls_mpi_cmp_mpi+0x80>
    if( X->s > 0 && Y->s < 0 ) return(  1 );
    822e:	6810      	ldr	r0, [r2, #0]
    8230:	2800      	cmp	r0, #0
    8232:	dd03      	ble.n	823c <mbedtls_mpi_cmp_mpi+0x4c>
    8234:	2d00      	cmp	r5, #0
    8236:	da07      	bge.n	8248 <mbedtls_mpi_cmp_mpi+0x58>
    8238:	2001      	movs	r0, #1
    823a:	e019      	b.n	8270 <mbedtls_mpi_cmp_mpi+0x80>
    if( Y->s > 0 && X->s < 0 ) return( -1 );
    823c:	2d00      	cmp	r5, #0
    823e:	dd03      	ble.n	8248 <mbedtls_mpi_cmp_mpi+0x58>
    8240:	b110      	cbz	r0, 8248 <mbedtls_mpi_cmp_mpi+0x58>
    8242:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    8246:	e013      	b.n	8270 <mbedtls_mpi_cmp_mpi+0x80>
    8248:	3b01      	subs	r3, #1
        if( X->p[i - 1] > Y->p[i - 1] ) return(  X->s );
    824a:	6891      	ldr	r1, [r2, #8]
    824c:	f851 5023 	ldr.w	r5, [r1, r3, lsl #2]
    8250:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
    8254:	428d      	cmp	r5, r1
    8256:	d80b      	bhi.n	8270 <mbedtls_mpi_cmp_mpi+0x80>
        if( X->p[i - 1] < Y->p[i - 1] ) return( -X->s );
    8258:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
    825c:	d3e5      	bcc.n	822a <mbedtls_mpi_cmp_mpi+0x3a>
    for( ; i > 0; i-- )
    825e:	1c59      	adds	r1, r3, #1
    8260:	d1f3      	bne.n	824a <mbedtls_mpi_cmp_mpi+0x5a>
        return( 0 );
    8262:	2000      	movs	r0, #0
    8264:	e004      	b.n	8270 <mbedtls_mpi_cmp_mpi+0x80>
    if( i == 0 && j == 0 )
    8266:	2b00      	cmp	r3, #0
    8268:	d0de      	beq.n	8228 <mbedtls_mpi_cmp_mpi+0x38>
    if( i > j ) return(  X->s );
    826a:	4283      	cmp	r3, r0
    826c:	d9da      	bls.n	8224 <mbedtls_mpi_cmp_mpi+0x34>
    826e:	6810      	ldr	r0, [r2, #0]
}
    8270:	bd30      	pop	{r4, r5, pc}

00008272 <mbedtls_mpi_cmp_int>:
{
    8272:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    *p  = ( z < 0 ) ? -z : z;
    8274:	ea81 73e1 	eor.w	r3, r1, r1, asr #31
    8278:	eba3 73e1 	sub.w	r3, r3, r1, asr #31
    Y.s = ( z < 0 ) ? -1 : 1;
    827c:	2900      	cmp	r1, #0
    *p  = ( z < 0 ) ? -z : z;
    827e:	9300      	str	r3, [sp, #0]
    Y.s = ( z < 0 ) ? -1 : 1;
    8280:	bfac      	ite	ge
    8282:	2301      	movge	r3, #1
    8284:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
    8288:	9301      	str	r3, [sp, #4]
    return( mbedtls_mpi_cmp_mpi( X, &Y ) );
    828a:	a901      	add	r1, sp, #4
    Y.n = 1;
    828c:	2301      	movs	r3, #1
    828e:	9302      	str	r3, [sp, #8]
    Y.p = p;
    8290:	f8cd d00c 	str.w	sp, [sp, #12]
    return( mbedtls_mpi_cmp_mpi( X, &Y ) );
    8294:	f7ff ffac 	bl	81f0 <mbedtls_mpi_cmp_mpi>
}
    8298:	b005      	add	sp, #20
    829a:	f85d fb04 	ldr.w	pc, [sp], #4

0000829e <mbedtls_mpi_add_abs>:
    if( X == B )
    829e:	4290      	cmp	r0, r2
{
    82a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    82a4:	4606      	mov	r6, r0
    82a6:	460f      	mov	r7, r1
    82a8:	4615      	mov	r5, r2
    if( X == B )
    82aa:	d002      	beq.n	82b2 <mbedtls_mpi_add_abs+0x14>
    if( X != A )
    82ac:	4288      	cmp	r0, r1
    82ae:	d129      	bne.n	8304 <mbedtls_mpi_add_abs+0x66>
{
    82b0:	462f      	mov	r7, r5
    X->s = 1;
    82b2:	2301      	movs	r3, #1
    82b4:	6033      	str	r3, [r6, #0]
    for( j = B->n; j > 0; j-- )
    82b6:	687d      	ldr	r5, [r7, #4]
    82b8:	bb65      	cbnz	r5, 8314 <mbedtls_mpi_add_abs+0x76>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, j ) );
    82ba:	4629      	mov	r1, r5
    82bc:	4630      	mov	r0, r6
    82be:	f7ff fdac 	bl	7e1a <mbedtls_mpi_grow>
    82c2:	4604      	mov	r4, r0
    82c4:	bb18      	cbnz	r0, 830e <mbedtls_mpi_add_abs+0x70>
    o = B->p; p = X->p; c = 0;
    82c6:	68b3      	ldr	r3, [r6, #8]
    82c8:	68b9      	ldr	r1, [r7, #8]
    82ca:	469c      	mov	ip, r3
    82cc:	4607      	mov	r7, r0
    for( i = 0; i < j; i++, o++, p++ )
    82ce:	4285      	cmp	r5, r0
    82d0:	d129      	bne.n	8326 <mbedtls_mpi_add_abs+0x88>
    82d2:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    while( c != 0 )
    82d6:	b1d7      	cbz	r7, 830e <mbedtls_mpi_add_abs+0x70>
        if( i >= X->n )
    82d8:	6872      	ldr	r2, [r6, #4]
    82da:	42aa      	cmp	r2, r5
            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i + 1 ) );
    82dc:	f105 0801 	add.w	r8, r5, #1
        if( i >= X->n )
    82e0:	d807      	bhi.n	82f2 <mbedtls_mpi_add_abs+0x54>
            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i + 1 ) );
    82e2:	4641      	mov	r1, r8
    82e4:	4630      	mov	r0, r6
    82e6:	f7ff fd98 	bl	7e1a <mbedtls_mpi_grow>
    82ea:	bb68      	cbnz	r0, 8348 <mbedtls_mpi_add_abs+0xaa>
            p = X->p + i;
    82ec:	68b3      	ldr	r3, [r6, #8]
    82ee:	eb03 0385 	add.w	r3, r3, r5, lsl #2
        *p += c; c = ( *p < c ); i++; p++;
    82f2:	681a      	ldr	r2, [r3, #0]
    82f4:	19d2      	adds	r2, r2, r7
    82f6:	f843 2b04 	str.w	r2, [r3], #4
    82fa:	bf2c      	ite	cs
    82fc:	2701      	movcs	r7, #1
    82fe:	2700      	movcc	r7, #0
    8300:	4645      	mov	r5, r8
    8302:	e7e8      	b.n	82d6 <mbedtls_mpi_add_abs+0x38>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, A ) );
    8304:	f7ff fdcb 	bl	7e9e <mbedtls_mpi_copy>
    8308:	4604      	mov	r4, r0
    830a:	2800      	cmp	r0, #0
    830c:	d0d0      	beq.n	82b0 <mbedtls_mpi_add_abs+0x12>
}
    830e:	4620      	mov	r0, r4
    8310:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if( B->p[j - 1] != 0 )
    8314:	68bb      	ldr	r3, [r7, #8]
    8316:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    831a:	f853 3c04 	ldr.w	r3, [r3, #-4]
    831e:	2b00      	cmp	r3, #0
    8320:	d1cb      	bne.n	82ba <mbedtls_mpi_add_abs+0x1c>
    for( j = B->n; j > 0; j-- )
    8322:	3d01      	subs	r5, #1
    8324:	e7c8      	b.n	82b8 <mbedtls_mpi_add_abs+0x1a>
        *p +=  c; c  = ( *p <  c );
    8326:	f8dc 2000 	ldr.w	r2, [ip]
    832a:	19d2      	adds	r2, r2, r7
    832c:	f851 7020 	ldr.w	r7, [r1, r0, lsl #2]
    8330:	bf2c      	ite	cs
    8332:	f04f 0e01 	movcs.w	lr, #1
    8336:	f04f 0e00 	movcc.w	lr, #0
        *p += tmp; c += ( *p < tmp );
    833a:	19d2      	adds	r2, r2, r7
    833c:	f84c 2b04 	str.w	r2, [ip], #4
    8340:	f14e 0700 	adc.w	r7, lr, #0
    for( i = 0; i < j; i++, o++, p++ )
    8344:	3001      	adds	r0, #1
    8346:	e7c2      	b.n	82ce <mbedtls_mpi_add_abs+0x30>
            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i + 1 ) );
    8348:	4604      	mov	r4, r0
    return( ret );
    834a:	e7e0      	b.n	830e <mbedtls_mpi_add_abs+0x70>

0000834c <mbedtls_mpi_sub_abs>:
{
    834c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    for( n = B->n; n > 0; n-- )
    8350:	6854      	ldr	r4, [r2, #4]
{
    8352:	4605      	mov	r5, r0
    8354:	460e      	mov	r6, r1
    8356:	4690      	mov	r8, r2
    for( n = B->n; n > 0; n-- )
    8358:	b93c      	cbnz	r4, 836a <mbedtls_mpi_sub_abs+0x1e>
    if( n > A->n )
    835a:	6871      	ldr	r1, [r6, #4]
    835c:	42a1      	cmp	r1, r4
    835e:	d20e      	bcs.n	837e <mbedtls_mpi_sub_abs+0x32>
        ret = MBEDTLS_ERR_MPI_NEGATIVE_VALUE;
    8360:	f06f 0709 	mvn.w	r7, #9
}
    8364:	4638      	mov	r0, r7
    8366:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if( B->p[n - 1] != 0 )
    836a:	f8d8 3008 	ldr.w	r3, [r8, #8]
    836e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    8372:	f853 3c04 	ldr.w	r3, [r3, #-4]
    8376:	2b00      	cmp	r3, #0
    8378:	d1ef      	bne.n	835a <mbedtls_mpi_sub_abs+0xe>
    for( n = B->n; n > 0; n-- )
    837a:	3c01      	subs	r4, #1
    837c:	e7ec      	b.n	8358 <mbedtls_mpi_sub_abs+0xc>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, A->n ) );
    837e:	4628      	mov	r0, r5
    8380:	f7ff fd4b 	bl	7e1a <mbedtls_mpi_grow>
    8384:	4607      	mov	r7, r0
    8386:	2800      	cmp	r0, #0
    8388:	d1ec      	bne.n	8364 <mbedtls_mpi_sub_abs+0x18>
    if( A->n > n )
    838a:	6872      	ldr	r2, [r6, #4]
    838c:	42a2      	cmp	r2, r4
    838e:	d909      	bls.n	83a4 <mbedtls_mpi_sub_abs+0x58>
        memcpy( X->p + n, A->p + n, ( A->n - n ) * ciL );
    8390:	68b1      	ldr	r1, [r6, #8]
    8392:	68a8      	ldr	r0, [r5, #8]
    8394:	1b12      	subs	r2, r2, r4
    8396:	0092      	lsls	r2, r2, #2
    8398:	eb01 0184 	add.w	r1, r1, r4, lsl #2
    839c:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    83a0:	f7fe fce4 	bl	6d6c <memcpy>
    if( X->n > A->n )
    83a4:	686a      	ldr	r2, [r5, #4]
    83a6:	6870      	ldr	r0, [r6, #4]
    83a8:	4282      	cmp	r2, r0
    83aa:	d907      	bls.n	83bc <mbedtls_mpi_sub_abs+0x70>
        memset( X->p + A->n, 0, ( X->n - A->n ) * ciL );
    83ac:	68ab      	ldr	r3, [r5, #8]
    83ae:	1a12      	subs	r2, r2, r0
    83b0:	0092      	lsls	r2, r2, #2
    83b2:	2100      	movs	r1, #0
    83b4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    83b8:	f7fe fce3 	bl	6d82 <memset>
    mbedtls_mpi_uint c = 0, t, z;
    83bc:	2200      	movs	r2, #0
    carry = mpi_sub_hlp( n, X->p, A->p, B->p );
    83be:	f8d5 c008 	ldr.w	ip, [r5, #8]
    83c2:	f8d6 e008 	ldr.w	lr, [r6, #8]
    83c6:	f8d8 8008 	ldr.w	r8, [r8, #8]
    for( i = 0; i < n; i++ )
    83ca:	4613      	mov	r3, r2
    83cc:	429c      	cmp	r4, r3
    83ce:	d112      	bne.n	83f6 <mbedtls_mpi_sub_abs+0xaa>
    if( carry != 0 )
    83d0:	b172      	cbz	r2, 83f0 <mbedtls_mpi_sub_abs+0xa4>
            --X->p[n];
    83d2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
        for( ; n < X->n && X->p[n] == 0; n++ )
    83d6:	686b      	ldr	r3, [r5, #4]
    83d8:	42a3      	cmp	r3, r4
    83da:	d925      	bls.n	8428 <mbedtls_mpi_sub_abs+0xdc>
    83dc:	68ab      	ldr	r3, [r5, #8]
    83de:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
    83e2:	b1ea      	cbz	r2, 8420 <mbedtls_mpi_sub_abs+0xd4>
        --X->p[n];
    83e4:	68aa      	ldr	r2, [r5, #8]
    83e6:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
    83ea:	3b01      	subs	r3, #1
    83ec:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
    X->s = 1;
    83f0:	2301      	movs	r3, #1
    83f2:	602b      	str	r3, [r5, #0]
    return( ret );
    83f4:	e7b6      	b.n	8364 <mbedtls_mpi_sub_abs+0x18>
        z = ( l[i] <  c );    t = l[i] - c;
    83f6:	f85e 6023 	ldr.w	r6, [lr, r3, lsl #2]
        c = ( t < r[i] ) + z; d[i] = t - r[i];
    83fa:	f858 0023 	ldr.w	r0, [r8, r3, lsl #2]
        z = ( l[i] <  c );    t = l[i] - c;
    83fe:	1ab1      	subs	r1, r6, r2
        c = ( t < r[i] ) + z; d[i] = t - r[i];
    8400:	4281      	cmp	r1, r0
    8402:	bf2c      	ite	cs
    8404:	f04f 0900 	movcs.w	r9, #0
    8408:	f04f 0901 	movcc.w	r9, #1
    840c:	1a09      	subs	r1, r1, r0
    840e:	f84c 1023 	str.w	r1, [ip, r3, lsl #2]
    8412:	4296      	cmp	r6, r2
    8414:	bf2c      	ite	cs
    8416:	464a      	movcs	r2, r9
    8418:	f109 0201 	addcc.w	r2, r9, #1
    for( i = 0; i < n; i++ )
    841c:	3301      	adds	r3, #1
    841e:	e7d5      	b.n	83cc <mbedtls_mpi_sub_abs+0x80>
            --X->p[n];
    8420:	f843 1024 	str.w	r1, [r3, r4, lsl #2]
        for( ; n < X->n && X->p[n] == 0; n++ )
    8424:	3401      	adds	r4, #1
    8426:	e7d6      	b.n	83d6 <mbedtls_mpi_sub_abs+0x8a>
        if( n == X->n )
    8428:	d1dc      	bne.n	83e4 <mbedtls_mpi_sub_abs+0x98>
    842a:	e799      	b.n	8360 <mbedtls_mpi_sub_abs+0x14>

0000842c <mbedtls_mpi_add_mpi>:
{
    842c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    s = A->s;
    842e:	680f      	ldr	r7, [r1, #0]
    if( A->s * B->s < 0 )
    8430:	6813      	ldr	r3, [r2, #0]
    8432:	437b      	muls	r3, r7
{
    8434:	4605      	mov	r5, r0
    8436:	460c      	mov	r4, r1
    8438:	4616      	mov	r6, r2
    if( A->s * B->s < 0 )
    843a:	d516      	bpl.n	846a <mbedtls_mpi_add_mpi+0x3e>
        if( mbedtls_mpi_cmp_abs( A, B ) >= 0 )
    843c:	4611      	mov	r1, r2
    843e:	4620      	mov	r0, r4
    8440:	f7ff fea1 	bl	8186 <mbedtls_mpi_cmp_abs>
    8444:	2800      	cmp	r0, #0
    8446:	db06      	blt.n	8456 <mbedtls_mpi_add_mpi+0x2a>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, A, B ) );
    8448:	4632      	mov	r2, r6
    844a:	4621      	mov	r1, r4
    844c:	4628      	mov	r0, r5
    844e:	f7ff ff7d 	bl	834c <mbedtls_mpi_sub_abs>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
    8452:	b138      	cbz	r0, 8464 <mbedtls_mpi_add_mpi+0x38>
}
    8454:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, B, A ) );
    8456:	4622      	mov	r2, r4
    8458:	4628      	mov	r0, r5
    845a:	f7ff ff77 	bl	834c <mbedtls_mpi_sub_abs>
    845e:	2800      	cmp	r0, #0
    8460:	d1f8      	bne.n	8454 <mbedtls_mpi_add_mpi+0x28>
            X->s = -s;
    8462:	427f      	negs	r7, r7
        X->s = s;
    8464:	602f      	str	r7, [r5, #0]
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, B, A ) );
    8466:	2000      	movs	r0, #0
    return( ret );
    8468:	e7f4      	b.n	8454 <mbedtls_mpi_add_mpi+0x28>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
    846a:	f7ff ff18 	bl	829e <mbedtls_mpi_add_abs>
    846e:	e7f0      	b.n	8452 <mbedtls_mpi_add_mpi+0x26>

00008470 <mbedtls_mpi_sub_mpi>:
{
    8470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    s = A->s;
    8472:	680f      	ldr	r7, [r1, #0]
    if( A->s * B->s > 0 )
    8474:	6813      	ldr	r3, [r2, #0]
    8476:	437b      	muls	r3, r7
    8478:	2b00      	cmp	r3, #0
{
    847a:	4605      	mov	r5, r0
    847c:	460c      	mov	r4, r1
    847e:	4616      	mov	r6, r2
    if( A->s * B->s > 0 )
    8480:	dd16      	ble.n	84b0 <mbedtls_mpi_sub_mpi+0x40>
        if( mbedtls_mpi_cmp_abs( A, B ) >= 0 )
    8482:	4611      	mov	r1, r2
    8484:	4620      	mov	r0, r4
    8486:	f7ff fe7e 	bl	8186 <mbedtls_mpi_cmp_abs>
    848a:	2800      	cmp	r0, #0
    848c:	db06      	blt.n	849c <mbedtls_mpi_sub_mpi+0x2c>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, A, B ) );
    848e:	4632      	mov	r2, r6
    8490:	4621      	mov	r1, r4
    8492:	4628      	mov	r0, r5
    8494:	f7ff ff5a 	bl	834c <mbedtls_mpi_sub_abs>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
    8498:	b138      	cbz	r0, 84aa <mbedtls_mpi_sub_mpi+0x3a>
}
    849a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, B, A ) );
    849c:	4622      	mov	r2, r4
    849e:	4628      	mov	r0, r5
    84a0:	f7ff ff54 	bl	834c <mbedtls_mpi_sub_abs>
    84a4:	2800      	cmp	r0, #0
    84a6:	d1f8      	bne.n	849a <mbedtls_mpi_sub_mpi+0x2a>
            X->s = -s;
    84a8:	427f      	negs	r7, r7
        X->s = s;
    84aa:	602f      	str	r7, [r5, #0]
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, B, A ) );
    84ac:	2000      	movs	r0, #0
    return( ret );
    84ae:	e7f4      	b.n	849a <mbedtls_mpi_sub_mpi+0x2a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
    84b0:	f7ff fef5 	bl	829e <mbedtls_mpi_add_abs>
    84b4:	e7f0      	b.n	8498 <mbedtls_mpi_sub_mpi+0x28>

000084b6 <mbedtls_mpi_mul_int>:
{
    84b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    size_t n = A->n;
    84ba:	684e      	ldr	r6, [r1, #4]
{
    84bc:	4605      	mov	r5, r0
    84be:	460f      	mov	r7, r1
    84c0:	4690      	mov	r8, r2
    while( n > 0 && A->p[n - 1] == 0 )
    84c2:	b146      	cbz	r6, 84d6 <mbedtls_mpi_mul_int+0x20>
    84c4:	68bb      	ldr	r3, [r7, #8]
    84c6:	eb03 0386 	add.w	r3, r3, r6, lsl #2
    84ca:	f853 3c04 	ldr.w	r3, [r3, #-4]
    84ce:	b143      	cbz	r3, 84e2 <mbedtls_mpi_mul_int+0x2c>
    if( b == 0 || n == 0 )
    84d0:	f1b8 0f00 	cmp.w	r8, #0
    84d4:	d107      	bne.n	84e6 <mbedtls_mpi_mul_int+0x30>
        return( mbedtls_mpi_lset( X, 0 ) );
    84d6:	4628      	mov	r0, r5
    84d8:	2100      	movs	r1, #0
}
    84da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        return( mbedtls_mpi_lset( X, 0 ) );
    84de:	f7ff bd12 	b.w	7f06 <mbedtls_mpi_lset>
        --n;
    84e2:	3e01      	subs	r6, #1
    84e4:	e7ed      	b.n	84c2 <mbedtls_mpi_mul_int+0xc>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, n + 1 ) );
    84e6:	1c71      	adds	r1, r6, #1
    84e8:	4628      	mov	r0, r5
    84ea:	f7ff fc96 	bl	7e1a <mbedtls_mpi_grow>
    84ee:	4604      	mov	r4, r0
    84f0:	b960      	cbnz	r0, 850c <mbedtls_mpi_mul_int+0x56>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, A ) );
    84f2:	4639      	mov	r1, r7
    84f4:	4628      	mov	r0, r5
    84f6:	f7ff fcd2 	bl	7e9e <mbedtls_mpi_copy>
    84fa:	4604      	mov	r4, r0
    84fc:	b930      	cbnz	r0, 850c <mbedtls_mpi_mul_int+0x56>
    mpi_mul_hlp( n, A->p, X->p, b - 1 );
    84fe:	68aa      	ldr	r2, [r5, #8]
    8500:	68b9      	ldr	r1, [r7, #8]
    8502:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
    8506:	4630      	mov	r0, r6
    8508:	f7ff fa3a 	bl	7980 <mpi_mul_hlp>
}
    850c:	4620      	mov	r0, r4
    850e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00008512 <mbedtls_mpi_div_mpi>:
{
    8512:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8516:	b09d      	sub	sp, #116	; 0x74
    8518:	4683      	mov	fp, r0
    851a:	460f      	mov	r7, r1
    if( mbedtls_mpi_cmp_int( B, 0 ) == 0 )
    851c:	4618      	mov	r0, r3
    851e:	2100      	movs	r1, #0
{
    8520:	4616      	mov	r6, r2
    8522:	9303      	str	r3, [sp, #12]
    if( mbedtls_mpi_cmp_int( B, 0 ) == 0 )
    8524:	f7ff fea5 	bl	8272 <mbedtls_mpi_cmp_int>
    8528:	2800      	cmp	r0, #0
    852a:	f000 8187 	beq.w	883c <mbedtls_mpi_div_mpi+0x32a>
    T2.n = sizeof( TP2 ) / sizeof( *TP2 );
    852e:	2303      	movs	r3, #3
    X->n = 0;
    8530:	2400      	movs	r4, #0
    8532:	2501      	movs	r5, #1
    T2.n = sizeof( TP2 ) / sizeof( *TP2 );
    8534:	9317      	str	r3, [sp, #92]	; 0x5c
    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
    8536:	9903      	ldr	r1, [sp, #12]
    T2.s = 1;
    8538:	9516      	str	r5, [sp, #88]	; 0x58
    T2.p = TP2;
    853a:	ab19      	add	r3, sp, #100	; 0x64
    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
    853c:	4630      	mov	r0, r6
    X->n = 0;
    853e:	e9cd 540a 	strd	r5, r4, [sp, #40]	; 0x28
    X->s = 1;
    8542:	e9cd 450c 	strd	r4, r5, [sp, #48]	; 0x30
    X->p = NULL;
    8546:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
    X->n = 0;
    854a:	e9cd 5410 	strd	r5, r4, [sp, #64]	; 0x40
    X->s = 1;
    854e:	e9cd 4512 	strd	r4, r5, [sp, #72]	; 0x48
    X->p = NULL;
    8552:	e9cd 4414 	strd	r4, r4, [sp, #80]	; 0x50
    T2.p = TP2;
    8556:	9318      	str	r3, [sp, #96]	; 0x60
    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
    8558:	f7ff fe15 	bl	8186 <mbedtls_mpi_cmp_abs>
    855c:	42a0      	cmp	r0, r4
    855e:	da28      	bge.n	85b2 <mbedtls_mpi_div_mpi+0xa0>
        if( Q != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_lset( Q, 0 ) );
    8560:	f1bb 0f00 	cmp.w	fp, #0
    8564:	d105      	bne.n	8572 <mbedtls_mpi_div_mpi+0x60>
        if( R != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, A ) );
    8566:	b9e7      	cbnz	r7, 85a2 <mbedtls_mpi_div_mpi+0x90>
        return( 0 );
    8568:	2400      	movs	r4, #0
}
    856a:	4620      	mov	r0, r4
    856c:	b01d      	add	sp, #116	; 0x74
    856e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if( Q != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_lset( Q, 0 ) );
    8572:	4621      	mov	r1, r4
    8574:	4658      	mov	r0, fp
    8576:	f7ff fcc6 	bl	7f06 <mbedtls_mpi_lset>
    857a:	4604      	mov	r4, r0
    857c:	2800      	cmp	r0, #0
    857e:	d0f2      	beq.n	8566 <mbedtls_mpi_div_mpi+0x54>
    mbedtls_mpi_free( &X ); mbedtls_mpi_free( &Y ); mbedtls_mpi_free( &Z );
    8580:	a80a      	add	r0, sp, #40	; 0x28
    8582:	f7ff fc38 	bl	7df6 <mbedtls_mpi_free>
    8586:	a80d      	add	r0, sp, #52	; 0x34
    8588:	f7ff fc35 	bl	7df6 <mbedtls_mpi_free>
    858c:	a810      	add	r0, sp, #64	; 0x40
    858e:	f7ff fc32 	bl	7df6 <mbedtls_mpi_free>
    mbedtls_mpi_free( &T1 );
    8592:	a813      	add	r0, sp, #76	; 0x4c
    8594:	f7ff fc2f 	bl	7df6 <mbedtls_mpi_free>
    mbedtls_platform_zeroize( TP2, sizeof( TP2 ) );
    8598:	210c      	movs	r1, #12
    859a:	a819      	add	r0, sp, #100	; 0x64
    859c:	f7fb fc24 	bl	3de8 <mbedtls_platform_zeroize>
    return( ret );
    85a0:	e7e3      	b.n	856a <mbedtls_mpi_div_mpi+0x58>
        if( R != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, A ) );
    85a2:	4631      	mov	r1, r6
    85a4:	4638      	mov	r0, r7
    85a6:	f7ff fc7a 	bl	7e9e <mbedtls_mpi_copy>
    85aa:	4604      	mov	r4, r0
    85ac:	2800      	cmp	r0, #0
    85ae:	d1e7      	bne.n	8580 <mbedtls_mpi_div_mpi+0x6e>
    85b0:	e7da      	b.n	8568 <mbedtls_mpi_div_mpi+0x56>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &X, A ) );
    85b2:	4631      	mov	r1, r6
    85b4:	a80a      	add	r0, sp, #40	; 0x28
    85b6:	f7ff fc72 	bl	7e9e <mbedtls_mpi_copy>
    85ba:	4604      	mov	r4, r0
    85bc:	2800      	cmp	r0, #0
    85be:	d1df      	bne.n	8580 <mbedtls_mpi_div_mpi+0x6e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &Y, B ) );
    85c0:	9903      	ldr	r1, [sp, #12]
    85c2:	a80d      	add	r0, sp, #52	; 0x34
    85c4:	f7ff fc6b 	bl	7e9e <mbedtls_mpi_copy>
    85c8:	4604      	mov	r4, r0
    85ca:	2800      	cmp	r0, #0
    85cc:	d1d8      	bne.n	8580 <mbedtls_mpi_div_mpi+0x6e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &Z, A->n + 2 ) );
    85ce:	6871      	ldr	r1, [r6, #4]
    X.s = Y.s = 1;
    85d0:	950d      	str	r5, [sp, #52]	; 0x34
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &Z, A->n + 2 ) );
    85d2:	3102      	adds	r1, #2
    85d4:	a810      	add	r0, sp, #64	; 0x40
    X.s = Y.s = 1;
    85d6:	950a      	str	r5, [sp, #40]	; 0x28
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &Z, A->n + 2 ) );
    85d8:	f7ff fc1f 	bl	7e1a <mbedtls_mpi_grow>
    85dc:	4604      	mov	r4, r0
    85de:	2800      	cmp	r0, #0
    85e0:	d1ce      	bne.n	8580 <mbedtls_mpi_div_mpi+0x6e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &Z,  0 ) );
    85e2:	4601      	mov	r1, r0
    85e4:	a810      	add	r0, sp, #64	; 0x40
    85e6:	f7ff fc8e 	bl	7f06 <mbedtls_mpi_lset>
    85ea:	4604      	mov	r4, r0
    85ec:	2800      	cmp	r0, #0
    85ee:	d1c7      	bne.n	8580 <mbedtls_mpi_div_mpi+0x6e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T1, A->n + 2 ) );
    85f0:	6871      	ldr	r1, [r6, #4]
    85f2:	a813      	add	r0, sp, #76	; 0x4c
    85f4:	3102      	adds	r1, #2
    85f6:	f7ff fc10 	bl	7e1a <mbedtls_mpi_grow>
    85fa:	4604      	mov	r4, r0
    85fc:	2800      	cmp	r0, #0
    85fe:	d1bf      	bne.n	8580 <mbedtls_mpi_div_mpi+0x6e>
    k = mbedtls_mpi_bitlen( &Y ) % biL;
    8600:	a80d      	add	r0, sp, #52	; 0x34
    8602:	f7ff fcac 	bl	7f5e <mbedtls_mpi_bitlen>
    8606:	f000 001f 	and.w	r0, r0, #31
    if( k < biL - 1 )
    860a:	281f      	cmp	r0, #31
    860c:	d070      	beq.n	86f0 <mbedtls_mpi_div_mpi+0x1de>
        k = biL - 1 - k;
    860e:	f1c0 031f 	rsb	r3, r0, #31
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &X, k ) );
    8612:	4619      	mov	r1, r3
    8614:	a80a      	add	r0, sp, #40	; 0x28
        k = biL - 1 - k;
    8616:	9301      	str	r3, [sp, #4]
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &X, k ) );
    8618:	f7ff fd1c 	bl	8054 <mbedtls_mpi_shift_l>
    861c:	4604      	mov	r4, r0
    861e:	2800      	cmp	r0, #0
    8620:	d1ae      	bne.n	8580 <mbedtls_mpi_div_mpi+0x6e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, k ) );
    8622:	9901      	ldr	r1, [sp, #4]
    8624:	a80d      	add	r0, sp, #52	; 0x34
    8626:	f7ff fd15 	bl	8054 <mbedtls_mpi_shift_l>
    862a:	4604      	mov	r4, r0
    862c:	2800      	cmp	r0, #0
    862e:	d1a7      	bne.n	8580 <mbedtls_mpi_div_mpi+0x6e>
    n = X.n - 1;
    8630:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    t = Y.n - 1;
    8632:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, biL * ( n - t ) ) );
    8636:	eba5 0a08 	sub.w	sl, r5, r8
    863a:	ea4f 194a 	mov.w	r9, sl, lsl #5
    863e:	4649      	mov	r1, r9
    8640:	a80d      	add	r0, sp, #52	; 0x34
    8642:	f7ff fd07 	bl	8054 <mbedtls_mpi_shift_l>
    8646:	4604      	mov	r4, r0
    8648:	2800      	cmp	r0, #0
    864a:	d199      	bne.n	8580 <mbedtls_mpi_div_mpi+0x6e>
        Z.p[n - t]++;
    864c:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
    while( mbedtls_mpi_cmp_mpi( &X, &Y ) >= 0 )
    8650:	a90d      	add	r1, sp, #52	; 0x34
    8652:	a80a      	add	r0, sp, #40	; 0x28
    8654:	f7ff fdcc 	bl	81f0 <mbedtls_mpi_cmp_mpi>
    8658:	2800      	cmp	r0, #0
    865a:	da4b      	bge.n	86f4 <mbedtls_mpi_div_mpi+0x1e2>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &Y, biL * ( n - t ) ) );
    865c:	4649      	mov	r1, r9
    865e:	a80d      	add	r0, sp, #52	; 0x34
    8660:	f7ff fd4f 	bl	8102 <mbedtls_mpi_shift_r>
    8664:	4604      	mov	r4, r0
    8666:	2800      	cmp	r0, #0
    8668:	d18a      	bne.n	8580 <mbedtls_mpi_div_mpi+0x6e>
    t = Y.n - 1;
    866a:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
    866e:	9305      	str	r3, [sp, #20]
        if( X.p[i] >= Y.p[t] )
    8670:	009b      	lsls	r3, r3, #2
    n = X.n - 1;
    8672:	f105 3aff 	add.w	sl, r5, #4294967295	; 0xffffffff
        if( X.p[i] >= Y.p[t] )
    8676:	9306      	str	r3, [sp, #24]
    8678:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
    867c:	f108 4380 	add.w	r3, r8, #1073741824	; 0x40000000
    8680:	3b02      	subs	r3, #2
    8682:	3d01      	subs	r5, #1
    8684:	009b      	lsls	r3, r3, #2
    8686:	eba5 0508 	sub.w	r5, r5, r8
    868a:	9308      	str	r3, [sp, #32]
    868c:	00ab      	lsls	r3, r5, #2
    868e:	9302      	str	r3, [sp, #8]
    for( i = n; i > t ; i-- )
    8690:	9b05      	ldr	r3, [sp, #20]
    8692:	459a      	cmp	sl, r3
    8694:	d83d      	bhi.n	8712 <mbedtls_mpi_div_mpi+0x200>
    if( Q != NULL )
    8696:	f1bb 0f00 	cmp.w	fp, #0
    869a:	d00c      	beq.n	86b6 <mbedtls_mpi_div_mpi+0x1a4>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( Q, &Z ) );
    869c:	a910      	add	r1, sp, #64	; 0x40
    869e:	4658      	mov	r0, fp
    86a0:	f7ff fbfd 	bl	7e9e <mbedtls_mpi_copy>
    86a4:	2800      	cmp	r0, #0
    86a6:	f040 80c5 	bne.w	8834 <mbedtls_mpi_div_mpi+0x322>
        Q->s = A->s * B->s;
    86aa:	9a03      	ldr	r2, [sp, #12]
    86ac:	6833      	ldr	r3, [r6, #0]
    86ae:	6812      	ldr	r2, [r2, #0]
    86b0:	4353      	muls	r3, r2
    86b2:	f8cb 3000 	str.w	r3, [fp]
    if( R != NULL )
    86b6:	2f00      	cmp	r7, #0
    86b8:	f43f af62 	beq.w	8580 <mbedtls_mpi_div_mpi+0x6e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &X, k ) );
    86bc:	9901      	ldr	r1, [sp, #4]
    86be:	a80a      	add	r0, sp, #40	; 0x28
    86c0:	f7ff fd1f 	bl	8102 <mbedtls_mpi_shift_r>
    86c4:	2800      	cmp	r0, #0
    86c6:	f040 80b5 	bne.w	8834 <mbedtls_mpi_div_mpi+0x322>
        X.s = A->s;
    86ca:	6833      	ldr	r3, [r6, #0]
    86cc:	930a      	str	r3, [sp, #40]	; 0x28
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, &X ) );
    86ce:	a90a      	add	r1, sp, #40	; 0x28
    86d0:	4638      	mov	r0, r7
    86d2:	f7ff fbe4 	bl	7e9e <mbedtls_mpi_copy>
    86d6:	4601      	mov	r1, r0
    86d8:	2800      	cmp	r0, #0
    86da:	f040 80ad 	bne.w	8838 <mbedtls_mpi_div_mpi+0x326>
        if( mbedtls_mpi_cmp_int( R, 0 ) == 0 )
    86de:	4638      	mov	r0, r7
    86e0:	f7ff fdc7 	bl	8272 <mbedtls_mpi_cmp_int>
    86e4:	2800      	cmp	r0, #0
    86e6:	f47f af4b 	bne.w	8580 <mbedtls_mpi_div_mpi+0x6e>
            R->s = 1;
    86ea:	2301      	movs	r3, #1
    86ec:	603b      	str	r3, [r7, #0]
    86ee:	e747      	b.n	8580 <mbedtls_mpi_div_mpi+0x6e>
    else k = 0;
    86f0:	9401      	str	r4, [sp, #4]
    86f2:	e79d      	b.n	8630 <mbedtls_mpi_div_mpi+0x11e>
        Z.p[n - t]++;
    86f4:	9a12      	ldr	r2, [sp, #72]	; 0x48
    86f6:	f852 300a 	ldr.w	r3, [r2, sl]
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X, &X, &Y ) );
    86fa:	a90a      	add	r1, sp, #40	; 0x28
        Z.p[n - t]++;
    86fc:	3301      	adds	r3, #1
    86fe:	f842 300a 	str.w	r3, [r2, sl]
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X, &X, &Y ) );
    8702:	4608      	mov	r0, r1
    8704:	aa0d      	add	r2, sp, #52	; 0x34
    8706:	f7ff feb3 	bl	8470 <mbedtls_mpi_sub_mpi>
    870a:	4604      	mov	r4, r0
    870c:	2800      	cmp	r0, #0
    870e:	d09f      	beq.n	8650 <mbedtls_mpi_div_mpi+0x13e>
    8710:	e736      	b.n	8580 <mbedtls_mpi_div_mpi+0x6e>
        if( X.p[i] >= Y.p[t] )
    8712:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8714:	9a06      	ldr	r2, [sp, #24]
    8716:	9304      	str	r3, [sp, #16]
    8718:	4413      	add	r3, r2
    871a:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
    871e:	9307      	str	r3, [sp, #28]
    8720:	9b04      	ldr	r3, [sp, #16]
    8722:	f859 102a 	ldr.w	r1, [r9, sl, lsl #2]
    8726:	589a      	ldr	r2, [r3, r2]
            Z.p[i - t - 1] = ~0;
    8728:	9d12      	ldr	r5, [sp, #72]	; 0x48
    872a:	ea4f 088a 	mov.w	r8, sl, lsl #2
            Z.p[i - t - 1] = mbedtls_int_div_int( X.p[i], X.p[i - 1],
    872e:	f1a8 0304 	sub.w	r3, r8, #4
    8732:	9309      	str	r3, [sp, #36]	; 0x24
            Z.p[i - t - 1] = ~0;
    8734:	9b02      	ldr	r3, [sp, #8]
        if( X.p[i] >= Y.p[t] )
    8736:	4291      	cmp	r1, r2
            Z.p[i - t - 1] = ~0;
    8738:	441d      	add	r5, r3
        if( X.p[i] >= Y.p[t] )
    873a:	d276      	bcs.n	882a <mbedtls_mpi_div_mpi+0x318>
    quotient = dividend / d;
    873c:	f1a8 0004 	sub.w	r0, r8, #4
    8740:	2300      	movs	r3, #0
    8742:	f859 0000 	ldr.w	r0, [r9, r0]
    8746:	f7f7 fcc9 	bl	dc <__aeabi_uldivmod>
    if( quotient > ( (mbedtls_t_udbl) 1 << biL ) - 1 )
    874a:	2900      	cmp	r1, #0
    874c:	bf14      	ite	ne
    874e:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
    8752:	4603      	moveq	r3, r0
        T2.p[0] = ( i < 2 ) ? 0 : X.p[i - 2];
    8754:	f1ba 0f01 	cmp.w	sl, #1
            Z.p[i - t - 1] = ~0;
    8758:	602b      	str	r3, [r5, #0]
        T2.p[0] = ( i < 2 ) ? 0 : X.p[i - 2];
    875a:	bf16      	itet	ne
    875c:	eb09 0308 	addne.w	r3, r9, r8
    8760:	2300      	moveq	r3, #0
    8762:	f853 3c08 	ldrne.w	r3, [r3, #-8]
    8766:	9319      	str	r3, [sp, #100]	; 0x64
        T2.p[1] = ( i < 1 ) ? 0 : X.p[i - 1];
    8768:	f1a8 0304 	sub.w	r3, r8, #4
    876c:	f859 3003 	ldr.w	r3, [r9, r3]
    8770:	931a      	str	r3, [sp, #104]	; 0x68
        T2.p[2] = X.p[i];
    8772:	f859 3008 	ldr.w	r3, [r9, r8]
    8776:	931b      	str	r3, [sp, #108]	; 0x6c
        Z.p[i - t - 1]++;
    8778:	682b      	ldr	r3, [r5, #0]
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
    877a:	f8dd 8010 	ldr.w	r8, [sp, #16]
        Z.p[i - t - 1]++;
    877e:	3301      	adds	r3, #1
    8780:	602b      	str	r3, [r5, #0]
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
    8782:	9b08      	ldr	r3, [sp, #32]
    8784:	4498      	add	r8, r3
            Z.p[i - t - 1]--;
    8786:	682b      	ldr	r3, [r5, #0]
    8788:	3b01      	subs	r3, #1
    878a:	602b      	str	r3, [r5, #0]
            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T1, 0 ) );
    878c:	2100      	movs	r1, #0
    878e:	a813      	add	r0, sp, #76	; 0x4c
    8790:	f7ff fbb9 	bl	7f06 <mbedtls_mpi_lset>
    8794:	2800      	cmp	r0, #0
    8796:	d14d      	bne.n	8834 <mbedtls_mpi_div_mpi+0x322>
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
    8798:	9b05      	ldr	r3, [sp, #20]
    879a:	2b00      	cmp	r3, #0
    879c:	d048      	beq.n	8830 <mbedtls_mpi_div_mpi+0x31e>
    879e:	f8d8 2000 	ldr.w	r2, [r8]
    87a2:	9b15      	ldr	r3, [sp, #84]	; 0x54
    87a4:	601a      	str	r2, [r3, #0]
            T1.p[1] = Y.p[t];
    87a6:	9a07      	ldr	r2, [sp, #28]
    87a8:	6812      	ldr	r2, [r2, #0]
    87aa:	605a      	str	r2, [r3, #4]
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &T1, Z.p[i - t - 1] ) );
    87ac:	a913      	add	r1, sp, #76	; 0x4c
    87ae:	682a      	ldr	r2, [r5, #0]
    87b0:	4608      	mov	r0, r1
    87b2:	f7ff fe80 	bl	84b6 <mbedtls_mpi_mul_int>
    87b6:	2800      	cmp	r0, #0
    87b8:	d13c      	bne.n	8834 <mbedtls_mpi_div_mpi+0x322>
        while( mbedtls_mpi_cmp_mpi( &T1, &T2 ) > 0 );
    87ba:	a916      	add	r1, sp, #88	; 0x58
    87bc:	a813      	add	r0, sp, #76	; 0x4c
    87be:	f7ff fd17 	bl	81f0 <mbedtls_mpi_cmp_mpi>
    87c2:	2800      	cmp	r0, #0
    87c4:	dcdf      	bgt.n	8786 <mbedtls_mpi_div_mpi+0x274>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &Y, Z.p[i - t - 1] ) );
    87c6:	682a      	ldr	r2, [r5, #0]
    87c8:	a90d      	add	r1, sp, #52	; 0x34
    87ca:	a813      	add	r0, sp, #76	; 0x4c
    87cc:	f7ff fe73 	bl	84b6 <mbedtls_mpi_mul_int>
    87d0:	bb80      	cbnz	r0, 8834 <mbedtls_mpi_div_mpi+0x322>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T1,  biL * ( i - t - 1 ) ) );
    87d2:	9b02      	ldr	r3, [sp, #8]
    87d4:	ea4f 08c3 	mov.w	r8, r3, lsl #3
    87d8:	4641      	mov	r1, r8
    87da:	a813      	add	r0, sp, #76	; 0x4c
    87dc:	f7ff fc3a 	bl	8054 <mbedtls_mpi_shift_l>
    87e0:	bb40      	cbnz	r0, 8834 <mbedtls_mpi_div_mpi+0x322>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X, &X, &T1 ) );
    87e2:	a90a      	add	r1, sp, #40	; 0x28
    87e4:	4608      	mov	r0, r1
    87e6:	aa13      	add	r2, sp, #76	; 0x4c
    87e8:	f7ff fe42 	bl	8470 <mbedtls_mpi_sub_mpi>
    87ec:	4601      	mov	r1, r0
    87ee:	bb18      	cbnz	r0, 8838 <mbedtls_mpi_div_mpi+0x326>
        if( mbedtls_mpi_cmp_int( &X, 0 ) < 0 )
    87f0:	a80a      	add	r0, sp, #40	; 0x28
    87f2:	f7ff fd3e 	bl	8272 <mbedtls_mpi_cmp_int>
    87f6:	2800      	cmp	r0, #0
    87f8:	da12      	bge.n	8820 <mbedtls_mpi_div_mpi+0x30e>
            MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &T1, &Y ) );
    87fa:	a90d      	add	r1, sp, #52	; 0x34
    87fc:	a813      	add	r0, sp, #76	; 0x4c
    87fe:	f7ff fb4e 	bl	7e9e <mbedtls_mpi_copy>
    8802:	b9b8      	cbnz	r0, 8834 <mbedtls_mpi_div_mpi+0x322>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T1, biL * ( i - t - 1 ) ) );
    8804:	4641      	mov	r1, r8
    8806:	a813      	add	r0, sp, #76	; 0x4c
    8808:	f7ff fc24 	bl	8054 <mbedtls_mpi_shift_l>
    880c:	b990      	cbnz	r0, 8834 <mbedtls_mpi_div_mpi+0x322>
            MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &X, &X, &T1 ) );
    880e:	a90a      	add	r1, sp, #40	; 0x28
    8810:	aa13      	add	r2, sp, #76	; 0x4c
    8812:	4608      	mov	r0, r1
    8814:	f7ff fe0a 	bl	842c <mbedtls_mpi_add_mpi>
    8818:	b960      	cbnz	r0, 8834 <mbedtls_mpi_div_mpi+0x322>
            Z.p[i - t - 1]--;
    881a:	682b      	ldr	r3, [r5, #0]
    881c:	3b01      	subs	r3, #1
    881e:	602b      	str	r3, [r5, #0]
    for( i = n; i > t ; i-- )
    8820:	9b02      	ldr	r3, [sp, #8]
    8822:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
    8826:	3b04      	subs	r3, #4
    8828:	e731      	b.n	868e <mbedtls_mpi_div_mpi+0x17c>
    882a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    882e:	e791      	b.n	8754 <mbedtls_mpi_div_mpi+0x242>
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
    8830:	9a05      	ldr	r2, [sp, #20]
    8832:	e7b6      	b.n	87a2 <mbedtls_mpi_div_mpi+0x290>
    8834:	4604      	mov	r4, r0
    8836:	e6a3      	b.n	8580 <mbedtls_mpi_div_mpi+0x6e>
    8838:	460c      	mov	r4, r1
    883a:	e6a1      	b.n	8580 <mbedtls_mpi_div_mpi+0x6e>
        return( MBEDTLS_ERR_MPI_DIVISION_BY_ZERO );
    883c:	f06f 040b 	mvn.w	r4, #11
    8840:	e693      	b.n	856a <mbedtls_mpi_div_mpi+0x58>

00008842 <mbedtls_mpi_mod_mpi>:
{
    8842:	b570      	push	{r4, r5, r6, lr}
    8844:	4604      	mov	r4, r0
    8846:	460d      	mov	r5, r1
    if( mbedtls_mpi_cmp_int( B, 0 ) < 0 )
    8848:	4610      	mov	r0, r2
    884a:	2100      	movs	r1, #0
{
    884c:	4616      	mov	r6, r2
    if( mbedtls_mpi_cmp_int( B, 0 ) < 0 )
    884e:	f7ff fd10 	bl	8272 <mbedtls_mpi_cmp_int>
    8852:	2800      	cmp	r0, #0
    8854:	db24      	blt.n	88a0 <mbedtls_mpi_mod_mpi+0x5e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_div_mpi( NULL, R, A, B ) );
    8856:	462a      	mov	r2, r5
    8858:	4633      	mov	r3, r6
    885a:	4621      	mov	r1, r4
    885c:	2000      	movs	r0, #0
    885e:	f7ff fe58 	bl	8512 <mbedtls_mpi_div_mpi>
    8862:	4605      	mov	r5, r0
    8864:	b138      	cbz	r0, 8876 <mbedtls_mpi_mod_mpi+0x34>
}
    8866:	4628      	mov	r0, r5
    8868:	bd70      	pop	{r4, r5, r6, pc}
      MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( R, R, B ) );
    886a:	4632      	mov	r2, r6
    886c:	4621      	mov	r1, r4
    886e:	4620      	mov	r0, r4
    8870:	f7ff fddc 	bl	842c <mbedtls_mpi_add_mpi>
    8874:	b990      	cbnz	r0, 889c <mbedtls_mpi_mod_mpi+0x5a>
    while( mbedtls_mpi_cmp_int( R, 0 ) < 0 )
    8876:	2100      	movs	r1, #0
    8878:	4620      	mov	r0, r4
    887a:	f7ff fcfa 	bl	8272 <mbedtls_mpi_cmp_int>
    887e:	2800      	cmp	r0, #0
    8880:	dbf3      	blt.n	886a <mbedtls_mpi_mod_mpi+0x28>
    while( mbedtls_mpi_cmp_mpi( R, B ) >= 0 )
    8882:	4631      	mov	r1, r6
    8884:	4620      	mov	r0, r4
    8886:	f7ff fcb3 	bl	81f0 <mbedtls_mpi_cmp_mpi>
    888a:	2800      	cmp	r0, #0
    888c:	dbeb      	blt.n	8866 <mbedtls_mpi_mod_mpi+0x24>
      MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( R, R, B ) );
    888e:	4632      	mov	r2, r6
    8890:	4621      	mov	r1, r4
    8892:	4620      	mov	r0, r4
    8894:	f7ff fdec 	bl	8470 <mbedtls_mpi_sub_mpi>
    8898:	2800      	cmp	r0, #0
    889a:	d0f2      	beq.n	8882 <mbedtls_mpi_mod_mpi+0x40>
    889c:	4605      	mov	r5, r0
    889e:	e7e2      	b.n	8866 <mbedtls_mpi_mod_mpi+0x24>
        return( MBEDTLS_ERR_MPI_NEGATIVE_VALUE );
    88a0:	f06f 0509 	mvn.w	r5, #9
    88a4:	e7df      	b.n	8866 <mbedtls_mpi_mod_mpi+0x24>

000088a6 <mbedtls_mpi_exp_mod>:
 * Sliding-window exponentiation: X = A^E mod N  (HAC 14.85)
 */
int mbedtls_mpi_exp_mod( mbedtls_mpi *X, const mbedtls_mpi *A,
                         const mbedtls_mpi *E, const mbedtls_mpi *N,
                         mbedtls_mpi *prec_RR )
{
    88a6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    88aa:	f5ad 7d5b 	sub.w	sp, sp, #876	; 0x36c
    88ae:	4606      	mov	r6, r0
    88b0:	4689      	mov	r9, r1
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( E != NULL );
    MPI_VALIDATE_RET( N != NULL );

    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 || ( N->p[0] & 1 ) == 0 )
    88b2:	4618      	mov	r0, r3
    88b4:	2100      	movs	r1, #0
{
    88b6:	9205      	str	r2, [sp, #20]
    88b8:	461d      	mov	r5, r3
    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 || ( N->p[0] & 1 ) == 0 )
    88ba:	f7ff fcda 	bl	8272 <mbedtls_mpi_cmp_int>
    88be:	2800      	cmp	r0, #0
    88c0:	f340 8213 	ble.w	8cea <mbedtls_mpi_exp_mod+0x444>
    88c4:	68ab      	ldr	r3, [r5, #8]
    88c6:	681c      	ldr	r4, [r3, #0]
    88c8:	f014 0301 	ands.w	r3, r4, #1
    88cc:	9308      	str	r3, [sp, #32]
    88ce:	f000 820c 	beq.w	8cea <mbedtls_mpi_exp_mod+0x444>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    if( mbedtls_mpi_cmp_int( E, 0 ) < 0 )
    88d2:	9805      	ldr	r0, [sp, #20]
    88d4:	2100      	movs	r1, #0
    88d6:	f7ff fccc 	bl	8272 <mbedtls_mpi_cmp_int>
    88da:	2800      	cmp	r0, #0
    88dc:	f2c0 8205 	blt.w	8cea <mbedtls_mpi_exp_mod+0x444>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    if( mbedtls_mpi_bitlen( E ) > MBEDTLS_MPI_MAX_BITS ||
    88e0:	9805      	ldr	r0, [sp, #20]
    88e2:	f7ff fb3c 	bl	7f5e <mbedtls_mpi_bitlen>
    88e6:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
    88ea:	f200 81fe 	bhi.w	8cea <mbedtls_mpi_exp_mod+0x444>
        mbedtls_mpi_bitlen( N ) > MBEDTLS_MPI_MAX_BITS )
    88ee:	4628      	mov	r0, r5
    88f0:	f7ff fb35 	bl	7f5e <mbedtls_mpi_bitlen>
    if( mbedtls_mpi_bitlen( E ) > MBEDTLS_MPI_MAX_BITS ||
    88f4:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
    88f8:	f200 81f7 	bhi.w	8cea <mbedtls_mpi_exp_mod+0x444>
    x += ( ( m0 + 2 ) & 4 ) << 1;
    88fc:	f104 0802 	add.w	r8, r4, #2
    8900:	ea4f 0848 	mov.w	r8, r8, lsl #1
    8904:	f008 0808 	and.w	r8, r8, #8
    8908:	44a0      	add	r8, r4
    890a:	2103      	movs	r1, #3
        x *= ( 2 - ( m0 * x ) );
    890c:	fb08 f304 	mul.w	r3, r8, r4
    8910:	f1c3 0302 	rsb	r3, r3, #2
    for( i = biL; i >= 8; i /= 2 )
    8914:	3901      	subs	r1, #1
        x *= ( 2 - ( m0 * x ) );
    8916:	fb03 f808 	mul.w	r8, r3, r8
    for( i = biL; i >= 8; i /= 2 )
    891a:	d1f7      	bne.n	890c <mbedtls_mpi_exp_mod+0x66>
    X->s = 1;
    891c:	2301      	movs	r3, #1
     */
    mpi_montg_init( &mm, N );
    mbedtls_mpi_init( &RR ); mbedtls_mpi_init( &T );
    mbedtls_mpi_init( &Apos );
    mbedtls_mpi_init( &WW );
    memset( W, 0, sizeof( W ) );
    891e:	f44f 7240 	mov.w	r2, #768	; 0x300
    8922:	a81a      	add	r0, sp, #104	; 0x68
    X->n = 0;
    8924:	e9cd 310b 	strd	r3, r1, [sp, #44]	; 0x2c
    X->s = 1;
    8928:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
    X->p = NULL;
    892c:	e9cd 110f 	strd	r1, r1, [sp, #60]	; 0x3c
    X->n = 0;
    8930:	e9cd 3114 	strd	r3, r1, [sp, #80]	; 0x50
    8934:	e9cd 3111 	strd	r3, r1, [sp, #68]	; 0x44
    X->p = NULL;
    8938:	9116      	str	r1, [sp, #88]	; 0x58
    893a:	9113      	str	r1, [sp, #76]	; 0x4c
    memset( W, 0, sizeof( W ) );
    893c:	f7fe fa21 	bl	6d82 <memset>

    i = mbedtls_mpi_bitlen( E );
    8940:	9805      	ldr	r0, [sp, #20]
    8942:	f7ff fb0c 	bl	7f5e <mbedtls_mpi_bitlen>

    wsize = ( i > 671 ) ? 6 : ( i > 239 ) ? 5 :
    8946:	f5b0 7f28 	cmp.w	r0, #672	; 0x2a0
    894a:	f080 80f5 	bcs.w	8b38 <mbedtls_mpi_exp_mod+0x292>
    894e:	28ef      	cmp	r0, #239	; 0xef
    8950:	f200 80f4 	bhi.w	8b3c <mbedtls_mpi_exp_mod+0x296>
    8954:	284f      	cmp	r0, #79	; 0x4f
    8956:	f200 80f3 	bhi.w	8b40 <mbedtls_mpi_exp_mod+0x29a>
    895a:	9b08      	ldr	r3, [sp, #32]
    895c:	2818      	cmp	r0, #24
    895e:	bf34      	ite	cc
    8960:	461f      	movcc	r7, r3
    8962:	2703      	movcs	r7, #3
#if( MBEDTLS_MPI_WINDOW_SIZE < 6 )
    if( wsize > MBEDTLS_MPI_WINDOW_SIZE )
        wsize = MBEDTLS_MPI_WINDOW_SIZE;
#endif

    j = N->n + 1;
    8964:	686b      	ldr	r3, [r5, #4]
    8966:	f103 0a01 	add.w	sl, r3, #1
    /* All W[i] and X must have at least N->n limbs for the mpi_montmul()
     * and mpi_montred() calls later. Here we ensure that W[1] and X are
     * large enough, and later we'll grow other W[i] to the same length.
     * They must not be shrunk midway through this function!
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, j ) );
    896a:	4651      	mov	r1, sl
    896c:	4630      	mov	r0, r6
    896e:	f7ff fa54 	bl	7e1a <mbedtls_mpi_grow>
    8972:	4604      	mov	r4, r0
    8974:	2800      	cmp	r0, #0
    8976:	f040 80bd 	bne.w	8af4 <mbedtls_mpi_exp_mod+0x24e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[1],  j ) );
    897a:	4651      	mov	r1, sl
    897c:	a81d      	add	r0, sp, #116	; 0x74
    897e:	f7ff fa4c 	bl	7e1a <mbedtls_mpi_grow>
    8982:	4604      	mov	r4, r0
    8984:	2800      	cmp	r0, #0
    8986:	f040 80b5 	bne.w	8af4 <mbedtls_mpi_exp_mod+0x24e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T, j * 2 ) );
    898a:	ea4f 014a 	mov.w	r1, sl, lsl #1
    898e:	a80e      	add	r0, sp, #56	; 0x38
    8990:	f7ff fa43 	bl	7e1a <mbedtls_mpi_grow>
    8994:	4604      	mov	r4, r0
    8996:	2800      	cmp	r0, #0
    8998:	f040 80ac 	bne.w	8af4 <mbedtls_mpi_exp_mod+0x24e>

    /*
     * Compensate for negative A (and correct at the end)
     */
    neg = ( A->s == -1 );
    899c:	f8d9 3000 	ldr.w	r3, [r9]
    89a0:	9306      	str	r3, [sp, #24]
    if( neg )
    89a2:	3301      	adds	r3, #1
    89a4:	d10b      	bne.n	89be <mbedtls_mpi_exp_mod+0x118>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &Apos, A ) );
    89a6:	4649      	mov	r1, r9
    89a8:	a814      	add	r0, sp, #80	; 0x50
    89aa:	f7ff fa78 	bl	7e9e <mbedtls_mpi_copy>
    89ae:	4604      	mov	r4, r0
    89b0:	2800      	cmp	r0, #0
    89b2:	f040 809f 	bne.w	8af4 <mbedtls_mpi_exp_mod+0x24e>
        Apos.s = 1;
    89b6:	2301      	movs	r3, #1
    89b8:	9314      	str	r3, [sp, #80]	; 0x50
        A = &Apos;
    89ba:	f10d 0950 	add.w	r9, sp, #80	; 0x50
    }

    /*
     * If 1st call, pre-compute R^2 mod N
     */
    if( prec_RR == NULL || prec_RR->p == NULL )
    89be:	9be4      	ldr	r3, [sp, #912]	; 0x390
    89c0:	b11b      	cbz	r3, 89ca <mbedtls_mpi_exp_mod+0x124>
    89c2:	689b      	ldr	r3, [r3, #8]
    89c4:	2b00      	cmp	r3, #0
    89c6:	f040 80bd 	bne.w	8b44 <mbedtls_mpi_exp_mod+0x29e>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &RR, 1 ) );
    89ca:	2101      	movs	r1, #1
    89cc:	a80b      	add	r0, sp, #44	; 0x2c
    89ce:	f7ff fa9a 	bl	7f06 <mbedtls_mpi_lset>
    89d2:	4604      	mov	r4, r0
    89d4:	2800      	cmp	r0, #0
    89d6:	f040 808d 	bne.w	8af4 <mbedtls_mpi_exp_mod+0x24e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &RR, N->n * 2 * biL ) );
    89da:	6869      	ldr	r1, [r5, #4]
    89dc:	a80b      	add	r0, sp, #44	; 0x2c
    89de:	0189      	lsls	r1, r1, #6
    89e0:	f7ff fb38 	bl	8054 <mbedtls_mpi_shift_l>
    89e4:	4604      	mov	r4, r0
    89e6:	2800      	cmp	r0, #0
    89e8:	f040 8084 	bne.w	8af4 <mbedtls_mpi_exp_mod+0x24e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &RR, &RR, N ) );
    89ec:	a90b      	add	r1, sp, #44	; 0x2c
    89ee:	462a      	mov	r2, r5
    89f0:	4608      	mov	r0, r1
    89f2:	f7ff ff26 	bl	8842 <mbedtls_mpi_mod_mpi>
    89f6:	4604      	mov	r4, r0
    89f8:	2800      	cmp	r0, #0
    89fa:	d17b      	bne.n	8af4 <mbedtls_mpi_exp_mod+0x24e>

        if( prec_RR != NULL )
    89fc:	9be4      	ldr	r3, [sp, #912]	; 0x390
    89fe:	b123      	cbz	r3, 8a0a <mbedtls_mpi_exp_mod+0x164>
            memcpy( prec_RR, &RR, sizeof( mbedtls_mpi ) );
    8a00:	220c      	movs	r2, #12
    8a02:	a90b      	add	r1, sp, #44	; 0x2c
    8a04:	4618      	mov	r0, r3
    }
    else
        memcpy( &RR, prec_RR, sizeof( mbedtls_mpi ) );
    8a06:	f7fe f9b1 	bl	6d6c <memcpy>

    /*
     * W[1] = A * R^2 * R^-1 mod N = A * R mod N
     */
    if( mbedtls_mpi_cmp_mpi( A, N ) >= 0 )
    8a0a:	4629      	mov	r1, r5
    8a0c:	4648      	mov	r0, r9
    8a0e:	f7ff fbef 	bl	81f0 <mbedtls_mpi_cmp_mpi>
    8a12:	2800      	cmp	r0, #0
    8a14:	f2c0 809a 	blt.w	8b4c <mbedtls_mpi_exp_mod+0x2a6>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &W[1], A, N ) );
    8a18:	462a      	mov	r2, r5
    8a1a:	4649      	mov	r1, r9
    8a1c:	a81d      	add	r0, sp, #116	; 0x74
    8a1e:	f7ff ff10 	bl	8842 <mbedtls_mpi_mod_mpi>
    8a22:	4604      	mov	r4, r0
    8a24:	2800      	cmp	r0, #0
    8a26:	d165      	bne.n	8af4 <mbedtls_mpi_exp_mod+0x24e>
        /* This should be a no-op because W[1] is already that large before
         * mbedtls_mpi_mod_mpi(), but it's necessary to avoid an overflow
         * in mpi_montmul() below, so let's make sure. */
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[1], N->n + 1 ) );
    8a28:	6869      	ldr	r1, [r5, #4]
    8a2a:	a81d      	add	r0, sp, #116	; 0x74
    8a2c:	3101      	adds	r1, #1
    8a2e:	f7ff f9f4 	bl	7e1a <mbedtls_mpi_grow>
    8a32:	4604      	mov	r4, r0
    8a34:	2800      	cmp	r0, #0
    8a36:	d15d      	bne.n	8af4 <mbedtls_mpi_exp_mod+0x24e>
    else
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[1], A ) );

    /* Note that this is safe because W[1] always has at least N->n limbs
     * (it grew above and was preserved by mbedtls_mpi_copy()). */
    mpi_montmul( &W[1], &RR, N, mm, &T );
    8a38:	f10d 0b38 	add.w	fp, sp, #56	; 0x38
    *mm = ~x + 1;
    8a3c:	f1c8 0300 	rsb	r3, r8, #0
    mpi_montmul( &W[1], &RR, N, mm, &T );
    8a40:	462a      	mov	r2, r5
    8a42:	a90b      	add	r1, sp, #44	; 0x2c
    8a44:	a81d      	add	r0, sp, #116	; 0x74
    8a46:	f8cd b000 	str.w	fp, [sp]
    *mm = ~x + 1;
    8a4a:	9303      	str	r3, [sp, #12]
    mpi_montmul( &W[1], &RR, N, mm, &T );
    8a4c:	f7ff f934 	bl	7cb8 <mpi_montmul>

    /*
     * X = R^2 * R^-1 mod N = R mod N
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, &RR ) );
    8a50:	a90b      	add	r1, sp, #44	; 0x2c
    8a52:	4630      	mov	r0, r6
    8a54:	f7ff fa23 	bl	7e9e <mbedtls_mpi_copy>
    8a58:	4604      	mov	r4, r0
    8a5a:	2800      	cmp	r0, #0
    8a5c:	d14a      	bne.n	8af4 <mbedtls_mpi_exp_mod+0x24e>
    mbedtls_mpi_uint z = 1;
    8a5e:	2301      	movs	r3, #1
    8a60:	aa0a      	add	r2, sp, #40	; 0x28
    U.n = U.s = (int) z;
    8a62:	e9cd 3317 	strd	r3, r3, [sp, #92]	; 0x5c
    mbedtls_mpi_uint z = 1;
    8a66:	930a      	str	r3, [sp, #40]	; 0x28
    U.p = &z;
    8a68:	9219      	str	r2, [sp, #100]	; 0x64
    mpi_montmul( A, &U, N, mm, T );
    8a6a:	9b03      	ldr	r3, [sp, #12]
    8a6c:	f8cd b000 	str.w	fp, [sp]
    8a70:	462a      	mov	r2, r5
    8a72:	a917      	add	r1, sp, #92	; 0x5c
    8a74:	4630      	mov	r0, r6
    8a76:	f7ff f91f 	bl	7cb8 <mpi_montmul>
    mpi_montred( X, N, mm, &T );

    if( wsize > 1 )
    8a7a:	2f01      	cmp	r7, #1
    8a7c:	d16b      	bne.n	8b56 <mbedtls_mpi_exp_mod+0x2b0>

            mpi_montmul( &W[i], &W[1], N, mm, &T );
        }
    }

    nblimbs = E->n;
    8a7e:	9b05      	ldr	r3, [sp, #20]
    bufsize = 0;
    nbits   = 0;
    wbits   = 0;
    state   = 0;
    8a80:	f04f 0a00 	mov.w	sl, #0
    nblimbs = E->n;
    8a84:	685b      	ldr	r3, [r3, #4]
    8a86:	9304      	str	r3, [sp, #16]
    nbits   = 0;
    8a88:	46d0      	mov	r8, sl
    bufsize = 0;
    8a8a:	46d3      	mov	fp, sl
    wbits   = 0;
    8a8c:	46d1      	mov	r9, sl

    while( 1 )
    {
        if( bufsize == 0 )
    8a8e:	f1bb 0f00 	cmp.w	fp, #0
    8a92:	f040 80af 	bne.w	8bf4 <mbedtls_mpi_exp_mod+0x34e>
        {
            if( nblimbs == 0 )
    8a96:	9b04      	ldr	r3, [sp, #16]
    8a98:	2b00      	cmp	r3, #0
    8a9a:	f040 80a6 	bne.w	8bea <mbedtls_mpi_exp_mod+0x344>
    {
        mpi_montmul( X, X, N, mm, &T );

        wbits <<= 1;

        if( ( wbits & ( one << wsize ) ) != 0 )
    8a9e:	f04f 0b01 	mov.w	fp, #1
    8aa2:	fa0b fb07 	lsl.w	fp, fp, r7
    8aa6:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
    for( i = 0; i < nbits; i++ )
    8aaa:	9b04      	ldr	r3, [sp, #16]
    8aac:	4543      	cmp	r3, r8
    8aae:	f040 80fa 	bne.w	8ca6 <mbedtls_mpi_exp_mod+0x400>
    mbedtls_mpi_uint z = 1;
    8ab2:	2301      	movs	r3, #1
    8ab4:	aa0a      	add	r2, sp, #40	; 0x28
    U.n = U.s = (int) z;
    8ab6:	e9cd 3317 	strd	r3, r3, [sp, #92]	; 0x5c
    mbedtls_mpi_uint z = 1;
    8aba:	930a      	str	r3, [sp, #40]	; 0x28
    U.p = &z;
    8abc:	9219      	str	r2, [sp, #100]	; 0x64
    mpi_montmul( A, &U, N, mm, T );
    8abe:	9b03      	ldr	r3, [sp, #12]
    8ac0:	f8cd a000 	str.w	sl, [sp]
    8ac4:	462a      	mov	r2, r5
    8ac6:	a917      	add	r1, sp, #92	; 0x5c
    8ac8:	4630      	mov	r0, r6
    8aca:	f7ff f8f5 	bl	7cb8 <mpi_montmul>
    /*
     * X = A^E * R * R^-1 mod N = A^E mod N
     */
    mpi_montred( X, N, mm, &T );

    if( neg && E->n != 0 && ( E->p[0] & 1 ) != 0 )
    8ace:	9b06      	ldr	r3, [sp, #24]
    8ad0:	3301      	adds	r3, #1
    8ad2:	d10f      	bne.n	8af4 <mbedtls_mpi_exp_mod+0x24e>
    8ad4:	9b05      	ldr	r3, [sp, #20]
    8ad6:	685b      	ldr	r3, [r3, #4]
    8ad8:	b163      	cbz	r3, 8af4 <mbedtls_mpi_exp_mod+0x24e>
    8ada:	9b05      	ldr	r3, [sp, #20]
    8adc:	689b      	ldr	r3, [r3, #8]
    8ade:	681b      	ldr	r3, [r3, #0]
    8ae0:	07db      	lsls	r3, r3, #31
    8ae2:	d507      	bpl.n	8af4 <mbedtls_mpi_exp_mod+0x24e>
    {
        X->s = -1;
    8ae4:	9b06      	ldr	r3, [sp, #24]
    8ae6:	6033      	str	r3, [r6, #0]
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( X, N, X ) );
    8ae8:	4632      	mov	r2, r6
    8aea:	4629      	mov	r1, r5
    8aec:	4630      	mov	r0, r6
    8aee:	f7ff fc9d 	bl	842c <mbedtls_mpi_add_mpi>
            MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[i], &W[i - 1] ) );
    8af2:	4604      	mov	r4, r0
    }

cleanup:

    for( i = ( one << ( wsize - 1 ) ); i < ( one << wsize ); i++ )
    8af4:	1e7d      	subs	r5, r7, #1
    8af6:	2301      	movs	r3, #1
    8af8:	fa03 f607 	lsl.w	r6, r3, r7
    8afc:	fa03 f505 	lsl.w	r5, r3, r5
        mbedtls_mpi_free( &W[i] );
    8b00:	270c      	movs	r7, #12
    for( i = ( one << ( wsize - 1 ) ); i < ( one << wsize ); i++ )
    8b02:	42ae      	cmp	r6, r5
    8b04:	f200 80ea 	bhi.w	8cdc <mbedtls_mpi_exp_mod+0x436>

    mbedtls_mpi_free( &W[1] ); mbedtls_mpi_free( &T ); mbedtls_mpi_free( &Apos );
    8b08:	a81d      	add	r0, sp, #116	; 0x74
    8b0a:	f7ff f974 	bl	7df6 <mbedtls_mpi_free>
    8b0e:	a80e      	add	r0, sp, #56	; 0x38
    8b10:	f7ff f971 	bl	7df6 <mbedtls_mpi_free>
    8b14:	a814      	add	r0, sp, #80	; 0x50
    8b16:	f7ff f96e 	bl	7df6 <mbedtls_mpi_free>
    mbedtls_mpi_free( &WW );
    8b1a:	a811      	add	r0, sp, #68	; 0x44
    8b1c:	f7ff f96b 	bl	7df6 <mbedtls_mpi_free>

    if( prec_RR == NULL || prec_RR->p == NULL )
    8b20:	9be4      	ldr	r3, [sp, #912]	; 0x390
    8b22:	b10b      	cbz	r3, 8b28 <mbedtls_mpi_exp_mod+0x282>
    8b24:	689b      	ldr	r3, [r3, #8]
    8b26:	b913      	cbnz	r3, 8b2e <mbedtls_mpi_exp_mod+0x288>
        mbedtls_mpi_free( &RR );
    8b28:	a80b      	add	r0, sp, #44	; 0x2c
    8b2a:	f7ff f964 	bl	7df6 <mbedtls_mpi_free>

    return( ret );
}
    8b2e:	4620      	mov	r0, r4
    8b30:	f50d 7d5b 	add.w	sp, sp, #876	; 0x36c
    8b34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    wsize = ( i > 671 ) ? 6 : ( i > 239 ) ? 5 :
    8b38:	2706      	movs	r7, #6
    8b3a:	e713      	b.n	8964 <mbedtls_mpi_exp_mod+0xbe>
    8b3c:	2705      	movs	r7, #5
    8b3e:	e711      	b.n	8964 <mbedtls_mpi_exp_mod+0xbe>
    8b40:	2704      	movs	r7, #4
    8b42:	e70f      	b.n	8964 <mbedtls_mpi_exp_mod+0xbe>
        memcpy( &RR, prec_RR, sizeof( mbedtls_mpi ) );
    8b44:	99e4      	ldr	r1, [sp, #912]	; 0x390
    8b46:	220c      	movs	r2, #12
    8b48:	a80b      	add	r0, sp, #44	; 0x2c
    8b4a:	e75c      	b.n	8a06 <mbedtls_mpi_exp_mod+0x160>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[1], A ) );
    8b4c:	4649      	mov	r1, r9
    8b4e:	a81d      	add	r0, sp, #116	; 0x74
    8b50:	f7ff f9a5 	bl	7e9e <mbedtls_mpi_copy>
    8b54:	e76d      	b.n	8a32 <mbedtls_mpi_exp_mod+0x18c>
        j =  one << ( wsize - 1 );
    8b56:	f107 39ff 	add.w	r9, r7, #4294967295	; 0xffffffff
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[j], N->n + 1 ) );
    8b5a:	230c      	movs	r3, #12
    8b5c:	6869      	ldr	r1, [r5, #4]
    8b5e:	fa03 f309 	lsl.w	r3, r3, r9
    8b62:	aa1a      	add	r2, sp, #104	; 0x68
    8b64:	eb02 0803 	add.w	r8, r2, r3
    8b68:	3101      	adds	r1, #1
    8b6a:	4640      	mov	r0, r8
    8b6c:	f7ff f955 	bl	7e1a <mbedtls_mpi_grow>
    8b70:	2800      	cmp	r0, #0
    8b72:	d1be      	bne.n	8af2 <mbedtls_mpi_exp_mod+0x24c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[j], &W[1]    ) );
    8b74:	a91d      	add	r1, sp, #116	; 0x74
    8b76:	4640      	mov	r0, r8
    8b78:	f7ff f991 	bl	7e9e <mbedtls_mpi_copy>
    8b7c:	2800      	cmp	r0, #0
    8b7e:	d1b8      	bne.n	8af2 <mbedtls_mpi_exp_mod+0x24c>
        for( i = 0; i < wsize - 1; i++ )
    8b80:	46a2      	mov	sl, r4
            mpi_montmul( &W[j], &W[j], N, mm, &T );
    8b82:	9b03      	ldr	r3, [sp, #12]
    8b84:	f8cd b000 	str.w	fp, [sp]
    8b88:	462a      	mov	r2, r5
    8b8a:	4641      	mov	r1, r8
    8b8c:	4640      	mov	r0, r8
        for( i = 0; i < wsize - 1; i++ )
    8b8e:	f10a 0a01 	add.w	sl, sl, #1
            mpi_montmul( &W[j], &W[j], N, mm, &T );
    8b92:	f7ff f891 	bl	7cb8 <mpi_montmul>
        for( i = 0; i < wsize - 1; i++ )
    8b96:	45ca      	cmp	sl, r9
    8b98:	d3f3      	bcc.n	8b82 <mbedtls_mpi_exp_mod+0x2dc>
        j =  one << ( wsize - 1 );
    8b9a:	f04f 0a01 	mov.w	sl, #1
    8b9e:	fa0a f909 	lsl.w	r9, sl, r9
        for( i = j + 1; i < ( one << wsize ); i++ )
    8ba2:	44d1      	add	r9, sl
    8ba4:	fa0a fa07 	lsl.w	sl, sl, r7
    8ba8:	45ca      	cmp	sl, r9
    8baa:	f67f af68 	bls.w	8a7e <mbedtls_mpi_exp_mod+0x1d8>
            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[i], N->n + 1 ) );
    8bae:	6869      	ldr	r1, [r5, #4]
    8bb0:	f108 0b0c 	add.w	fp, r8, #12
    8bb4:	3101      	adds	r1, #1
    8bb6:	4658      	mov	r0, fp
    8bb8:	f7ff f92f 	bl	7e1a <mbedtls_mpi_grow>
    8bbc:	2800      	cmp	r0, #0
    8bbe:	d198      	bne.n	8af2 <mbedtls_mpi_exp_mod+0x24c>
            MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[i], &W[i - 1] ) );
    8bc0:	4641      	mov	r1, r8
    8bc2:	4658      	mov	r0, fp
    8bc4:	f7ff f96b 	bl	7e9e <mbedtls_mpi_copy>
    8bc8:	2800      	cmp	r0, #0
    8bca:	d192      	bne.n	8af2 <mbedtls_mpi_exp_mod+0x24c>
            mpi_montmul( &W[i], &W[1], N, mm, &T );
    8bcc:	ab0e      	add	r3, sp, #56	; 0x38
    8bce:	9300      	str	r3, [sp, #0]
    8bd0:	462a      	mov	r2, r5
    8bd2:	9b03      	ldr	r3, [sp, #12]
    8bd4:	a91d      	add	r1, sp, #116	; 0x74
    8bd6:	4658      	mov	r0, fp
    8bd8:	f7ff f86e 	bl	7cb8 <mpi_montmul>
        for( i = j + 1; i < ( one << wsize ); i++ )
    8bdc:	f109 0901 	add.w	r9, r9, #1
    8be0:	46d8      	mov	r8, fp
    8be2:	e7e1      	b.n	8ba8 <mbedtls_mpi_exp_mod+0x302>
        state = 2;
    8be4:	f04f 0a02 	mov.w	sl, #2
    8be8:	e751      	b.n	8a8e <mbedtls_mpi_exp_mod+0x1e8>
            nblimbs--;
    8bea:	9b04      	ldr	r3, [sp, #16]
    8bec:	3b01      	subs	r3, #1
    8bee:	9304      	str	r3, [sp, #16]
            bufsize = sizeof( mbedtls_mpi_uint ) << 3;
    8bf0:	f04f 0b20 	mov.w	fp, #32
        ei = (E->p[nblimbs] >> bufsize) & 1;
    8bf4:	9b05      	ldr	r3, [sp, #20]
    8bf6:	9a04      	ldr	r2, [sp, #16]
    8bf8:	689b      	ldr	r3, [r3, #8]
    8bfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
        bufsize--;
    8bfe:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
        ei = (E->p[nblimbs] >> bufsize) & 1;
    8c02:	fa23 f30b 	lsr.w	r3, r3, fp
        if( ei == 0 && state == 0 )
    8c06:	f013 0301 	ands.w	r3, r3, #1
    8c0a:	d10f      	bne.n	8c2c <mbedtls_mpi_exp_mod+0x386>
    8c0c:	f1ba 0f00 	cmp.w	sl, #0
    8c10:	f43f af3d 	beq.w	8a8e <mbedtls_mpi_exp_mod+0x1e8>
        if( ei == 0 && state == 1 )
    8c14:	f1ba 0f01 	cmp.w	sl, #1
    8c18:	d108      	bne.n	8c2c <mbedtls_mpi_exp_mod+0x386>
            mpi_montmul( X, X, N, mm, &T );
    8c1a:	ab0e      	add	r3, sp, #56	; 0x38
    8c1c:	9300      	str	r3, [sp, #0]
    8c1e:	462a      	mov	r2, r5
    8c20:	9b03      	ldr	r3, [sp, #12]
    8c22:	4631      	mov	r1, r6
    8c24:	4630      	mov	r0, r6
    8c26:	f7ff f847 	bl	7cb8 <mpi_montmul>
            continue;
    8c2a:	e730      	b.n	8a8e <mbedtls_mpi_exp_mod+0x1e8>
        nbits++;
    8c2c:	f108 0801 	add.w	r8, r8, #1
        wbits |= ( ei << ( wsize - nbits ) );
    8c30:	eba7 0208 	sub.w	r2, r7, r8
    8c34:	4093      	lsls	r3, r2
        if( nbits == wsize )
    8c36:	4547      	cmp	r7, r8
        wbits |= ( ei << ( wsize - nbits ) );
    8c38:	ea49 0903 	orr.w	r9, r9, r3
        if( nbits == wsize )
    8c3c:	d1d2      	bne.n	8be4 <mbedtls_mpi_exp_mod+0x33e>
            for( i = 0; i < wsize; i++ )
    8c3e:	f04f 0a00 	mov.w	sl, #0
                mpi_montmul( X, X, N, mm, &T );
    8c42:	ab0e      	add	r3, sp, #56	; 0x38
    8c44:	9300      	str	r3, [sp, #0]
    8c46:	462a      	mov	r2, r5
    8c48:	9b03      	ldr	r3, [sp, #12]
    8c4a:	4631      	mov	r1, r6
    8c4c:	4630      	mov	r0, r6
            for( i = 0; i < wsize; i++ )
    8c4e:	f10a 0a01 	add.w	sl, sl, #1
                mpi_montmul( X, X, N, mm, &T );
    8c52:	f7ff f831 	bl	7cb8 <mpi_montmul>
            for( i = 0; i < wsize; i++ )
    8c56:	45d0      	cmp	r8, sl
    8c58:	d8f3      	bhi.n	8c42 <mbedtls_mpi_exp_mod+0x39c>
            MBEDTLS_MPI_CHK( mpi_select( &WW, W, (size_t) 1 << wsize, wbits ) );
    8c5a:	2301      	movs	r3, #1
    8c5c:	fa03 f308 	lsl.w	r3, r3, r8
    for( size_t i = 0; i < T_size; i++ )
    8c60:	f04f 0a00 	mov.w	sl, #0
    8c64:	f10d 0868 	add.w	r8, sp, #104	; 0x68
        MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_assign( R, &T[i],
    8c68:	4649      	mov	r1, r9
    8c6a:	4650      	mov	r0, sl
    8c6c:	9309      	str	r3, [sp, #36]	; 0x24
    8c6e:	f000 f83f 	bl	8cf0 <mbedtls_ct_size_bool_eq>
    8c72:	4641      	mov	r1, r8
    8c74:	b2c2      	uxtb	r2, r0
    8c76:	a811      	add	r0, sp, #68	; 0x44
    8c78:	f000 f852 	bl	8d20 <mbedtls_mpi_safe_cond_assign>
    8c7c:	9007      	str	r0, [sp, #28]
    8c7e:	bb58      	cbnz	r0, 8cd8 <mbedtls_mpi_exp_mod+0x432>
    for( size_t i = 0; i < T_size; i++ )
    8c80:	9b09      	ldr	r3, [sp, #36]	; 0x24
    8c82:	f10a 0a01 	add.w	sl, sl, #1
    8c86:	4553      	cmp	r3, sl
    8c88:	f108 080c 	add.w	r8, r8, #12
    8c8c:	d1ec      	bne.n	8c68 <mbedtls_mpi_exp_mod+0x3c2>
            mpi_montmul( X, &WW, N, mm, &T );
    8c8e:	ab0e      	add	r3, sp, #56	; 0x38
    8c90:	9300      	str	r3, [sp, #0]
    8c92:	462a      	mov	r2, r5
    8c94:	9b03      	ldr	r3, [sp, #12]
    8c96:	a911      	add	r1, sp, #68	; 0x44
    8c98:	4630      	mov	r0, r6
    8c9a:	f7ff f80d 	bl	7cb8 <mpi_montmul>
            nbits = 0;
    8c9e:	e9dd 9a07 	ldrd	r9, sl, [sp, #28]
            wbits = 0;
    8ca2:	46c8      	mov	r8, r9
    8ca4:	e6f3      	b.n	8a8e <mbedtls_mpi_exp_mod+0x1e8>
        mpi_montmul( X, X, N, mm, &T );
    8ca6:	9b03      	ldr	r3, [sp, #12]
    8ca8:	f8cd a000 	str.w	sl, [sp]
    8cac:	462a      	mov	r2, r5
    8cae:	4631      	mov	r1, r6
    8cb0:	4630      	mov	r0, r6
        wbits <<= 1;
    8cb2:	ea4f 0949 	mov.w	r9, r9, lsl #1
        mpi_montmul( X, X, N, mm, &T );
    8cb6:	f7fe ffff 	bl	7cb8 <mpi_montmul>
        if( ( wbits & ( one << wsize ) ) != 0 )
    8cba:	ea1b 0f09 	tst.w	fp, r9
    8cbe:	d007      	beq.n	8cd0 <mbedtls_mpi_exp_mod+0x42a>
            mpi_montmul( X, &W[1], N, mm, &T );
    8cc0:	9b03      	ldr	r3, [sp, #12]
    8cc2:	f8cd a000 	str.w	sl, [sp]
    8cc6:	462a      	mov	r2, r5
    8cc8:	a91d      	add	r1, sp, #116	; 0x74
    8cca:	4630      	mov	r0, r6
    8ccc:	f7fe fff4 	bl	7cb8 <mpi_montmul>
    for( i = 0; i < nbits; i++ )
    8cd0:	9b04      	ldr	r3, [sp, #16]
    8cd2:	3301      	adds	r3, #1
    8cd4:	9304      	str	r3, [sp, #16]
    8cd6:	e6e8      	b.n	8aaa <mbedtls_mpi_exp_mod+0x204>
        MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_assign( R, &T[i],
    8cd8:	9c07      	ldr	r4, [sp, #28]
    8cda:	e70b      	b.n	8af4 <mbedtls_mpi_exp_mod+0x24e>
        mbedtls_mpi_free( &W[i] );
    8cdc:	ab1a      	add	r3, sp, #104	; 0x68
    8cde:	fb07 3005 	mla	r0, r7, r5, r3
    8ce2:	f7ff f888 	bl	7df6 <mbedtls_mpi_free>
    for( i = ( one << ( wsize - 1 ) ); i < ( one << wsize ); i++ )
    8ce6:	3501      	adds	r5, #1
    8ce8:	e70b      	b.n	8b02 <mbedtls_mpi_exp_mod+0x25c>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
    8cea:	f06f 0403 	mvn.w	r4, #3
    8cee:	e71e      	b.n	8b2e <mbedtls_mpi_exp_mod+0x288>

00008cf0 <mbedtls_ct_size_bool_eq>:

unsigned mbedtls_ct_size_bool_eq( size_t x,
                                  size_t y )
{
    /* diff = 0 if x == y, non-zero otherwise */
    const size_t diff = x ^ y;
    8cf0:	4041      	eors	r1, r0
#pragma warning( push )
#pragma warning( disable : 4146 )
#endif

    /* diff_msb's most significant bit is equal to x != y */
    const size_t diff_msb = ( diff | (size_t) -diff );
    8cf2:	4248      	negs	r0, r1
    8cf4:	4308      	orrs	r0, r1

    /* diff1 = (x != y) ? 1 : 0 */
    const unsigned diff1 = diff_msb >> ( sizeof( diff_msb ) * 8 - 1 );

    return( 1 ^ diff1 );
}
    8cf6:	43c0      	mvns	r0, r0
    8cf8:	0fc0      	lsrs	r0, r0, #31
    8cfa:	4770      	bx	lr

00008cfc <mbedtls_ct_mpi_uint_cond_assign>:

void mbedtls_ct_mpi_uint_cond_assign( size_t n,
                                      mbedtls_mpi_uint *dest,
                                      const mbedtls_mpi_uint *src,
                                      unsigned char condition )
{
    8cfc:	b5f0      	push	{r4, r5, r6, r7, lr}
    8cfe:	3904      	subs	r1, #4
#pragma warning( push )
#pragma warning( disable : 4146 )
#endif

    /* all-bits 1 if condition is 1, all-bits 0 if condition is 0 */
    const mbedtls_mpi_uint mask = -condition;
    8d00:	425f      	negs	r7, r3

#if defined(_MSC_VER)
#pragma warning( pop )
#endif

    for( i = 0; i < n; i++ )
    8d02:	2500      	movs	r5, #0
        dest[i] = ( src[i] & mask ) | ( dest[i] & ~mask );
    8d04:	3b01      	subs	r3, #1
    for( i = 0; i < n; i++ )
    8d06:	4285      	cmp	r5, r0
    8d08:	d100      	bne.n	8d0c <mbedtls_ct_mpi_uint_cond_assign+0x10>
}
    8d0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        dest[i] = ( src[i] & mask ) | ( dest[i] & ~mask );
    8d0c:	f852 6025 	ldr.w	r6, [r2, r5, lsl #2]
    8d10:	f851 4f04 	ldr.w	r4, [r1, #4]!
    8d14:	403e      	ands	r6, r7
    8d16:	401c      	ands	r4, r3
    8d18:	4334      	orrs	r4, r6
    8d1a:	600c      	str	r4, [r1, #0]
    for( i = 0; i < n; i++ )
    8d1c:	3501      	adds	r5, #1
    8d1e:	e7f2      	b.n	8d06 <mbedtls_ct_mpi_uint_cond_assign+0xa>

00008d20 <mbedtls_mpi_safe_cond_assign>:
 * (Leaking information about the respective sizes of X and Y is ok however.)
 */
int mbedtls_mpi_safe_cond_assign( mbedtls_mpi *X,
                                  const mbedtls_mpi *Y,
                                  unsigned char assign )
{
    8d20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8d24:	460f      	mov	r7, r1
    MPI_VALIDATE_RET( Y != NULL );

    /* all-bits 1 if assign is 1, all-bits 0 if assign is 0 */
    limb_mask = mbedtls_ct_mpi_uint_mask( assign );;

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, Y->n ) );
    8d26:	6849      	ldr	r1, [r1, #4]
{
    8d28:	4605      	mov	r5, r0
    8d2a:	4691      	mov	r9, r2
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, Y->n ) );
    8d2c:	f7ff f875 	bl	7e1a <mbedtls_mpi_grow>
    8d30:	4680      	mov	r8, r0
    8d32:	b9c8      	cbnz	r0, 8d68 <mbedtls_mpi_safe_cond_assign+0x48>
    unsigned uif0 = if0 + 1;
    8d34:	682b      	ldr	r3, [r5, #0]
    unsigned uif1 = if1 + 1;
    8d36:	683c      	ldr	r4, [r7, #0]

    X->s = mbedtls_ct_cond_select_sign( assign, Y->s, X->s );

    mbedtls_ct_mpi_uint_cond_assign( Y->n, X->p, Y->p, assign );
    8d38:	68a9      	ldr	r1, [r5, #8]
    unsigned uif0 = if0 + 1;
    8d3a:	3301      	adds	r3, #1
    unsigned uif1 = if1 + 1;
    8d3c:	3401      	adds	r4, #1
    return( (int) ur - 1 );
    8d3e:	405c      	eors	r4, r3
    8d40:	ea04 0449 	and.w	r4, r4, r9, lsl #1
    8d44:	405c      	eors	r4, r3
    8d46:	3c01      	subs	r4, #1
    X->s = mbedtls_ct_cond_select_sign( assign, Y->s, X->s );
    8d48:	602c      	str	r4, [r5, #0]
    return( - ( ( value | - value ) >> ( sizeof( value ) * 8 - 1 ) ) );
    8d4a:	f1c9 0600 	rsb	r6, r9, #0
    mbedtls_ct_mpi_uint_cond_assign( Y->n, X->p, Y->p, assign );
    8d4e:	464b      	mov	r3, r9
    8d50:	68ba      	ldr	r2, [r7, #8]
    8d52:	6878      	ldr	r0, [r7, #4]
    return( - ( ( value | - value ) >> ( sizeof( value ) * 8 - 1 ) ) );
    8d54:	ea46 0609 	orr.w	r6, r6, r9
    mbedtls_ct_mpi_uint_cond_assign( Y->n, X->p, Y->p, assign );
    8d58:	f7ff ffd0 	bl	8cfc <mbedtls_ct_mpi_uint_cond_assign>
    return( - ( ( value | - value ) >> ( sizeof( value ) * 8 - 1 ) ) );
    8d5c:	17f6      	asrs	r6, r6, #31

    for( i = Y->n; i < X->n; i++ )
    8d5e:	687b      	ldr	r3, [r7, #4]
        X->p[i] &= ~limb_mask;
    8d60:	43f6      	mvns	r6, r6
    for( i = Y->n; i < X->n; i++ )
    8d62:	686a      	ldr	r2, [r5, #4]
    8d64:	429a      	cmp	r2, r3
    8d66:	d802      	bhi.n	8d6e <mbedtls_mpi_safe_cond_assign+0x4e>

cleanup:
    return( ret );
}
    8d68:	4640      	mov	r0, r8
    8d6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        X->p[i] &= ~limb_mask;
    8d6e:	68a9      	ldr	r1, [r5, #8]
    8d70:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    8d74:	4032      	ands	r2, r6
    8d76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for( i = Y->n; i < X->n; i++ )
    8d7a:	3301      	adds	r3, #1
    8d7c:	e7f1      	b.n	8d62 <mbedtls_mpi_safe_cond_assign+0x42>

00008d7e <platform_calloc_uninit>:
}
    8d7e:	2000      	movs	r0, #0
    8d80:	4770      	bx	lr

00008d82 <platform_exit_uninit>:
 * Make dummy function to prevent NULL pointer dereferences
 */
static void platform_exit_uninit( int status )
{
    ((void) status);
}
    8d82:	4770      	bx	lr

00008d84 <platform_free_uninit>:
static void platform_free_uninit( void *ptr )
    8d84:	4770      	bx	lr

00008d86 <mbedtls_rsa_import>:
{
    8d86:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8d8a:	4604      	mov	r4, r0
    8d8c:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
    8d90:	4691      	mov	r9, r2
    8d92:	4698      	mov	r8, r3
    if( ( N != NULL && ( ret = mbedtls_mpi_copy( &ctx->N, N ) ) != 0 ) ||
    8d94:	460d      	mov	r5, r1
    8d96:	b951      	cbnz	r1, 8dae <mbedtls_rsa_import+0x28>
    8d98:	f1b9 0f00 	cmp.w	r9, #0
    8d9c:	d110      	bne.n	8dc0 <mbedtls_rsa_import+0x3a>
        ( P != NULL && ( ret = mbedtls_mpi_copy( &ctx->P, P ) ) != 0 ) ||
    8d9e:	f1b8 0f00 	cmp.w	r8, #0
    8da2:	d115      	bne.n	8dd0 <mbedtls_rsa_import+0x4a>
        ( Q != NULL && ( ret = mbedtls_mpi_copy( &ctx->Q, Q ) ) != 0 ) ||
    8da4:	b9e7      	cbnz	r7, 8de0 <mbedtls_rsa_import+0x5a>
        ( D != NULL && ( ret = mbedtls_mpi_copy( &ctx->D, D ) ) != 0 ) ||
    8da6:	bb1e      	cbnz	r6, 8df0 <mbedtls_rsa_import+0x6a>
    if( N != NULL )
    8da8:	bb55      	cbnz	r5, 8e00 <mbedtls_rsa_import+0x7a>
    return( 0 );
    8daa:	2000      	movs	r0, #0
    8dac:	e006      	b.n	8dbc <mbedtls_rsa_import+0x36>
    if( ( N != NULL && ( ret = mbedtls_mpi_copy( &ctx->N, N ) ) != 0 ) ||
    8dae:	3008      	adds	r0, #8
    8db0:	f7ff f875 	bl	7e9e <mbedtls_mpi_copy>
    8db4:	2800      	cmp	r0, #0
    8db6:	d0ef      	beq.n	8d98 <mbedtls_rsa_import+0x12>
    8db8:	f5a0 4081 	sub.w	r0, r0, #16512	; 0x4080
}
    8dbc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        ( P != NULL && ( ret = mbedtls_mpi_copy( &ctx->P, P ) ) != 0 ) ||
    8dc0:	4649      	mov	r1, r9
    8dc2:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    8dc6:	f7ff f86a 	bl	7e9e <mbedtls_mpi_copy>
    8dca:	2800      	cmp	r0, #0
    8dcc:	d0e7      	beq.n	8d9e <mbedtls_rsa_import+0x18>
    8dce:	e7f3      	b.n	8db8 <mbedtls_rsa_import+0x32>
        ( Q != NULL && ( ret = mbedtls_mpi_copy( &ctx->Q, Q ) ) != 0 ) ||
    8dd0:	4641      	mov	r1, r8
    8dd2:	f104 0038 	add.w	r0, r4, #56	; 0x38
    8dd6:	f7ff f862 	bl	7e9e <mbedtls_mpi_copy>
    8dda:	2800      	cmp	r0, #0
    8ddc:	d0e2      	beq.n	8da4 <mbedtls_rsa_import+0x1e>
    8dde:	e7eb      	b.n	8db8 <mbedtls_rsa_import+0x32>
        ( D != NULL && ( ret = mbedtls_mpi_copy( &ctx->D, D ) ) != 0 ) ||
    8de0:	4639      	mov	r1, r7
    8de2:	f104 0020 	add.w	r0, r4, #32
    8de6:	f7ff f85a 	bl	7e9e <mbedtls_mpi_copy>
    8dea:	2800      	cmp	r0, #0
    8dec:	d0db      	beq.n	8da6 <mbedtls_rsa_import+0x20>
    8dee:	e7e3      	b.n	8db8 <mbedtls_rsa_import+0x32>
        ( E != NULL && ( ret = mbedtls_mpi_copy( &ctx->E, E ) ) != 0 ) )
    8df0:	4631      	mov	r1, r6
    8df2:	f104 0014 	add.w	r0, r4, #20
    8df6:	f7ff f852 	bl	7e9e <mbedtls_mpi_copy>
    8dfa:	2800      	cmp	r0, #0
    8dfc:	d0d4      	beq.n	8da8 <mbedtls_rsa_import+0x22>
    8dfe:	e7db      	b.n	8db8 <mbedtls_rsa_import+0x32>
        ctx->len = mbedtls_mpi_size( &ctx->N );
    8e00:	f104 0008 	add.w	r0, r4, #8
    8e04:	f7ff f8ca 	bl	7f9c <mbedtls_mpi_size>
    8e08:	6060      	str	r0, [r4, #4]
    8e0a:	e7ce      	b.n	8daa <mbedtls_rsa_import+0x24>

00008e0c <mbedtls_rsa_init>:
{
    8e0c:	b510      	push	{r4, lr}
    memset( ctx, 0, sizeof( mbedtls_rsa_context ) );
    8e0e:	22ac      	movs	r2, #172	; 0xac
    8e10:	2100      	movs	r1, #0
{
    8e12:	4604      	mov	r4, r0
    memset( ctx, 0, sizeof( mbedtls_rsa_context ) );
    8e14:	f7fd ffb5 	bl	6d82 <memset>
    ctx->padding = MBEDTLS_RSA_PKCS_V15;
    8e18:	2300      	movs	r3, #0
    ctx->hash_id = MBEDTLS_MD_NONE;
    8e1a:	e9c4 3329 	strd	r3, r3, [r4, #164]	; 0xa4
}
    8e1e:	bd10      	pop	{r4, pc}

00008e20 <mbedtls_rsa_free>:

/*
 * Free the components of an RSA key
 */
void mbedtls_rsa_free( mbedtls_rsa_context *ctx )
{
    8e20:	b510      	push	{r4, lr}
    if( ctx == NULL )
    8e22:	4604      	mov	r4, r0
    8e24:	b3a0      	cbz	r0, 8e90 <mbedtls_rsa_free+0x70>
        return;

    mbedtls_mpi_free( &ctx->Vi );
    8e26:	308c      	adds	r0, #140	; 0x8c
    8e28:	f7fe ffe5 	bl	7df6 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->Vf );
    8e2c:	f104 0098 	add.w	r0, r4, #152	; 0x98
    8e30:	f7fe ffe1 	bl	7df6 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->RN );
    8e34:	f104 0068 	add.w	r0, r4, #104	; 0x68
    8e38:	f7fe ffdd 	bl	7df6 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->D  );
    8e3c:	f104 0020 	add.w	r0, r4, #32
    8e40:	f7fe ffd9 	bl	7df6 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->Q  );
    8e44:	f104 0038 	add.w	r0, r4, #56	; 0x38
    8e48:	f7fe ffd5 	bl	7df6 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->P  );
    8e4c:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    8e50:	f7fe ffd1 	bl	7df6 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->E  );
    8e54:	f104 0014 	add.w	r0, r4, #20
    8e58:	f7fe ffcd 	bl	7df6 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->N  );
    8e5c:	f104 0008 	add.w	r0, r4, #8
    8e60:	f7fe ffc9 	bl	7df6 <mbedtls_mpi_free>

#if !defined(MBEDTLS_RSA_NO_CRT)
    mbedtls_mpi_free( &ctx->RQ );
    8e64:	f104 0080 	add.w	r0, r4, #128	; 0x80
    8e68:	f7fe ffc5 	bl	7df6 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->RP );
    8e6c:	f104 0074 	add.w	r0, r4, #116	; 0x74
    8e70:	f7fe ffc1 	bl	7df6 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->QP );
    8e74:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    8e78:	f7fe ffbd 	bl	7df6 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->DQ );
    8e7c:	f104 0050 	add.w	r0, r4, #80	; 0x50
    8e80:	f7fe ffb9 	bl	7df6 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->DP );
    8e84:	f104 0044 	add.w	r0, r4, #68	; 0x44
    {
        mbedtls_mutex_free( &ctx->mutex );
        ctx->ver = 0;
    }
#endif
}
    8e88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_mpi_free( &ctx->DP );
    8e8c:	f7fe bfb3 	b.w	7df6 <mbedtls_mpi_free>
}
    8e90:	bd10      	pop	{r4, pc}

00008e92 <mbedtls_sha256_init>:
    memset( ctx, 0, sizeof( mbedtls_sha256_context ) );
    8e92:	226c      	movs	r2, #108	; 0x6c
    8e94:	2100      	movs	r1, #0
    8e96:	f7fd bf74 	b.w	6d82 <memset>

00008e9a <mbedtls_sha256_update>:
 * SHA-256 process buffer
 */
int mbedtls_sha256_update( mbedtls_sha256_context *ctx,
                               const unsigned char *input,
                               size_t ilen )
{
    8e9a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8e9e:	4605      	mov	r5, r0
    8ea0:	460e      	mov	r6, r1
    uint32_t left;

    SHA256_VALIDATE_RET( ctx != NULL );
    SHA256_VALIDATE_RET( ilen == 0 || input != NULL );

    if( ilen == 0 )
    8ea2:	4614      	mov	r4, r2
    8ea4:	b37a      	cbz	r2, 8f06 <mbedtls_sha256_update+0x6c>
        return( 0 );

    left = ctx->total[0] & 0x3F;
    8ea6:	6803      	ldr	r3, [r0, #0]
    8ea8:	f003 073f 	and.w	r7, r3, #63	; 0x3f
    fill = 64 - left;

    ctx->total[0] += (uint32_t) ilen;
    8eac:	189b      	adds	r3, r3, r2
    8eae:	6003      	str	r3, [r0, #0]
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < (uint32_t) ilen )
        ctx->total[1]++;
    8eb0:	bf22      	ittt	cs
    8eb2:	6843      	ldrcs	r3, [r0, #4]
    8eb4:	3301      	addcs	r3, #1
    8eb6:	6043      	strcs	r3, [r0, #4]

    if( left && ilen >= fill )
    8eb8:	b19f      	cbz	r7, 8ee2 <mbedtls_sha256_update+0x48>
    fill = 64 - left;
    8eba:	f1c7 0940 	rsb	r9, r7, #64	; 0x40
    if( left && ilen >= fill )
    8ebe:	454a      	cmp	r2, r9
    8ec0:	d30f      	bcc.n	8ee2 <mbedtls_sha256_update+0x48>
    {
        memcpy( (void *) (ctx->buffer + left), input, fill );
    8ec2:	f100 0828 	add.w	r8, r0, #40	; 0x28
    8ec6:	464a      	mov	r2, r9
    8ec8:	eb08 0007 	add.w	r0, r8, r7
    8ecc:	f7fd ff4e 	bl	6d6c <memcpy>

        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
    8ed0:	4641      	mov	r1, r8
    8ed2:	4628      	mov	r0, r5
    8ed4:	f7fb f8be 	bl	4054 <mbedtls_internal_sha256_process>
    8ed8:	b9b0      	cbnz	r0, 8f08 <mbedtls_sha256_update+0x6e>
            return( ret );

        input += fill;
    8eda:	443c      	add	r4, r7
    8edc:	444e      	add	r6, r9
        ilen  -= fill;
    8ede:	3c40      	subs	r4, #64	; 0x40
        left = 0;
    8ee0:	4607      	mov	r7, r0
    8ee2:	4426      	add	r6, r4
    8ee4:	e004      	b.n	8ef0 <mbedtls_sha256_update+0x56>
    }

    while( ilen >= 64 )
    {
        if( ( ret = mbedtls_internal_sha256_process( ctx, input ) ) != 0 )
    8ee6:	4628      	mov	r0, r5
    8ee8:	f7fb f8b4 	bl	4054 <mbedtls_internal_sha256_process>
    8eec:	b960      	cbnz	r0, 8f08 <mbedtls_sha256_update+0x6e>
            return( ret );

        input += 64;
        ilen  -= 64;
    8eee:	3c40      	subs	r4, #64	; 0x40
    while( ilen >= 64 )
    8ef0:	2c3f      	cmp	r4, #63	; 0x3f
    8ef2:	eba6 0104 	sub.w	r1, r6, r4
    8ef6:	d8f6      	bhi.n	8ee6 <mbedtls_sha256_update+0x4c>
    }

    if( ilen > 0 )
    8ef8:	b12c      	cbz	r4, 8f06 <mbedtls_sha256_update+0x6c>
        memcpy( (void *) (ctx->buffer + left), input, ilen );
    8efa:	f105 0028 	add.w	r0, r5, #40	; 0x28
    8efe:	4622      	mov	r2, r4
    8f00:	4438      	add	r0, r7
    8f02:	f7fd ff33 	bl	6d6c <memcpy>
        return( 0 );
    8f06:	2000      	movs	r0, #0

    return( 0 );
}
    8f08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00008f0c <mbedtls_sha256_finish>:
/*
 * SHA-256 final digest
 */
int mbedtls_sha256_finish( mbedtls_sha256_context *ctx,
                               unsigned char *output )
{
    8f0c:	b570      	push	{r4, r5, r6, lr}
    SHA256_VALIDATE_RET( (unsigned char *)output != NULL );

    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;
    8f0e:	6803      	ldr	r3, [r0, #0]
    8f10:	f003 033f 	and.w	r3, r3, #63	; 0x3f

    ctx->buffer[used++] = 0x80;
    8f14:	1c5a      	adds	r2, r3, #1
    8f16:	4403      	add	r3, r0
{
    8f18:	460d      	mov	r5, r1

    if( used <= 56 )
    {
        /* Enough room for padding + length in current block */
        memset( ctx->buffer + used, 0, 56 - used );
    8f1a:	f100 0628 	add.w	r6, r0, #40	; 0x28
    ctx->buffer[used++] = 0x80;
    8f1e:	2180      	movs	r1, #128	; 0x80
    if( used <= 56 )
    8f20:	2a38      	cmp	r2, #56	; 0x38
{
    8f22:	4604      	mov	r4, r0
    ctx->buffer[used++] = 0x80;
    8f24:	f883 1028 	strb.w	r1, [r3, #40]	; 0x28
        memset( ctx->buffer + used, 0, 56 - used );
    8f28:	eb06 0002 	add.w	r0, r6, r2
    if( used <= 56 )
    8f2c:	d861      	bhi.n	8ff2 <mbedtls_sha256_finish+0xe6>
        memset( ctx->buffer + used, 0, 56 - used );
    8f2e:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
    8f32:	2100      	movs	r1, #0
        memset( ctx->buffer + used, 0, 64 - used );

        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
            return( ret );

        memset( ctx->buffer, 0, 56 );
    8f34:	f7fd ff25 	bl	6d82 <memset>

    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 29 )
         | ( ctx->total[1] <<  3 );
    8f38:	e9d4 3100 	ldrd	r3, r1, [r4]
    high = ( ctx->total[0] >> 29 )
    8f3c:	0f5a      	lsrs	r2, r3, #29
    8f3e:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
    low  = ( ctx->total[0] <<  3 );
    8f42:	00db      	lsls	r3, r3, #3
    8f44:	ba12      	rev	r2, r2
    8f46:	ba1b      	rev	r3, r3

    MBEDTLS_PUT_UINT32_BE( high, ctx->buffer, 56 );
    8f48:	6622      	str	r2, [r4, #96]	; 0x60
    MBEDTLS_PUT_UINT32_BE( low,  ctx->buffer, 60 );
    8f4a:	6663      	str	r3, [r4, #100]	; 0x64

    if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
    8f4c:	4631      	mov	r1, r6
    8f4e:	4620      	mov	r0, r4
    8f50:	f7fb f880 	bl	4054 <mbedtls_internal_sha256_process>
    8f54:	2800      	cmp	r0, #0
    8f56:	d14b      	bne.n	8ff0 <mbedtls_sha256_finish+0xe4>
        return( ret );

    /*
     * Output final state
     */
    MBEDTLS_PUT_UINT32_BE( ctx->state[0], output,  0 );
    8f58:	7ae3      	ldrb	r3, [r4, #11]
    8f5a:	702b      	strb	r3, [r5, #0]
    8f5c:	8963      	ldrh	r3, [r4, #10]
    8f5e:	706b      	strb	r3, [r5, #1]
    8f60:	68a3      	ldr	r3, [r4, #8]
    8f62:	0a1b      	lsrs	r3, r3, #8
    8f64:	70ab      	strb	r3, [r5, #2]
    8f66:	68a3      	ldr	r3, [r4, #8]
    8f68:	70eb      	strb	r3, [r5, #3]
    MBEDTLS_PUT_UINT32_BE( ctx->state[1], output,  4 );
    8f6a:	7be3      	ldrb	r3, [r4, #15]
    8f6c:	712b      	strb	r3, [r5, #4]
    8f6e:	89e3      	ldrh	r3, [r4, #14]
    8f70:	716b      	strb	r3, [r5, #5]
    8f72:	68e3      	ldr	r3, [r4, #12]
    8f74:	0a1b      	lsrs	r3, r3, #8
    8f76:	71ab      	strb	r3, [r5, #6]
    8f78:	68e3      	ldr	r3, [r4, #12]
    8f7a:	71eb      	strb	r3, [r5, #7]
    MBEDTLS_PUT_UINT32_BE( ctx->state[2], output,  8 );
    8f7c:	7ce3      	ldrb	r3, [r4, #19]
    8f7e:	722b      	strb	r3, [r5, #8]
    8f80:	8a63      	ldrh	r3, [r4, #18]
    8f82:	726b      	strb	r3, [r5, #9]
    8f84:	6923      	ldr	r3, [r4, #16]
    8f86:	0a1b      	lsrs	r3, r3, #8
    8f88:	72ab      	strb	r3, [r5, #10]
    8f8a:	6923      	ldr	r3, [r4, #16]
    8f8c:	72eb      	strb	r3, [r5, #11]
    MBEDTLS_PUT_UINT32_BE( ctx->state[3], output, 12 );
    8f8e:	7de3      	ldrb	r3, [r4, #23]
    8f90:	732b      	strb	r3, [r5, #12]
    8f92:	8ae3      	ldrh	r3, [r4, #22]
    8f94:	736b      	strb	r3, [r5, #13]
    8f96:	6963      	ldr	r3, [r4, #20]
    8f98:	0a1b      	lsrs	r3, r3, #8
    8f9a:	73ab      	strb	r3, [r5, #14]
    8f9c:	6963      	ldr	r3, [r4, #20]
    8f9e:	73eb      	strb	r3, [r5, #15]
    MBEDTLS_PUT_UINT32_BE( ctx->state[4], output, 16 );
    8fa0:	7ee3      	ldrb	r3, [r4, #27]
    8fa2:	742b      	strb	r3, [r5, #16]
    8fa4:	8b63      	ldrh	r3, [r4, #26]
    8fa6:	746b      	strb	r3, [r5, #17]
    8fa8:	69a3      	ldr	r3, [r4, #24]
    8faa:	0a1b      	lsrs	r3, r3, #8
    8fac:	74ab      	strb	r3, [r5, #18]
    8fae:	69a3      	ldr	r3, [r4, #24]
    8fb0:	74eb      	strb	r3, [r5, #19]
    MBEDTLS_PUT_UINT32_BE( ctx->state[5], output, 20 );
    8fb2:	7fe3      	ldrb	r3, [r4, #31]
    8fb4:	752b      	strb	r3, [r5, #20]
    8fb6:	8be3      	ldrh	r3, [r4, #30]
    8fb8:	756b      	strb	r3, [r5, #21]
    8fba:	69e3      	ldr	r3, [r4, #28]
    8fbc:	0a1b      	lsrs	r3, r3, #8
    8fbe:	75ab      	strb	r3, [r5, #22]
    8fc0:	69e3      	ldr	r3, [r4, #28]
    8fc2:	75eb      	strb	r3, [r5, #23]
    MBEDTLS_PUT_UINT32_BE( ctx->state[6], output, 24 );
    8fc4:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
    8fc8:	762b      	strb	r3, [r5, #24]
    8fca:	8c63      	ldrh	r3, [r4, #34]	; 0x22
    8fcc:	766b      	strb	r3, [r5, #25]
    8fce:	6a23      	ldr	r3, [r4, #32]
    8fd0:	0a1b      	lsrs	r3, r3, #8
    8fd2:	76ab      	strb	r3, [r5, #26]
    8fd4:	6a23      	ldr	r3, [r4, #32]
    8fd6:	76eb      	strb	r3, [r5, #27]

#if defined(MBEDTLS_SHA224_C)
    if( ctx->is224 == 0 )
    8fd8:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    8fda:	b94b      	cbnz	r3, 8ff0 <mbedtls_sha256_finish+0xe4>
#endif
        MBEDTLS_PUT_UINT32_BE( ctx->state[7], output, 28 );
    8fdc:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
    8fe0:	772b      	strb	r3, [r5, #28]
    8fe2:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    8fe4:	776b      	strb	r3, [r5, #29]
    8fe6:	6a63      	ldr	r3, [r4, #36]	; 0x24
    8fe8:	0a1b      	lsrs	r3, r3, #8
    8fea:	77ab      	strb	r3, [r5, #30]
    8fec:	6a63      	ldr	r3, [r4, #36]	; 0x24
    8fee:	77eb      	strb	r3, [r5, #31]

    return( 0 );
}
    8ff0:	bd70      	pop	{r4, r5, r6, pc}
        memset( ctx->buffer + used, 0, 64 - used );
    8ff2:	2100      	movs	r1, #0
    8ff4:	f1c2 0240 	rsb	r2, r2, #64	; 0x40
    8ff8:	f7fd fec3 	bl	6d82 <memset>
        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
    8ffc:	4631      	mov	r1, r6
    8ffe:	4620      	mov	r0, r4
    9000:	f7fb f828 	bl	4054 <mbedtls_internal_sha256_process>
    9004:	2800      	cmp	r0, #0
    9006:	d1f3      	bne.n	8ff0 <mbedtls_sha256_finish+0xe4>
        memset( ctx->buffer, 0, 56 );
    9008:	4601      	mov	r1, r0
    900a:	2238      	movs	r2, #56	; 0x38
    900c:	4630      	mov	r0, r6
    900e:	e791      	b.n	8f34 <mbedtls_sha256_finish+0x28>

00009010 <nrf52_errata_108>:
            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
    9010:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    9014:	f8d3 0130 	ldr.w	r0, [r3, #304]	; 0x130
    9018:	1c42      	adds	r2, r0, #1
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    901a:	bf04      	itt	eq
    901c:	f04f 4370 	moveq.w	r3, #4026531840	; 0xf0000000
    9020:	f893 0fe0 	ldrbeq.w	r0, [r3, #4064]	; 0xfe0
}
    9024:	1f83      	subs	r3, r0, #6
    9026:	4258      	negs	r0, r3
    9028:	4158      	adcs	r0, r3
    902a:	4770      	bx	lr

0000902c <nrfx_isr>:
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    902c:	4700      	bx	r0

0000902e <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
    902e:	f000 b9cb 	b.w	93c8 <z_impl_k_busy_wait>

00009032 <nrfx_clock_enable>:
{
    9032:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    9034:	2000      	movs	r0, #0
    9036:	f7f8 fd87 	bl	1b48 <arch_irq_is_enabled>
    903a:	b908      	cbnz	r0, 9040 <nrfx_clock_enable+0xe>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    903c:	f7f8 fd76 	bl	1b2c <arch_irq_enable>
    p_reg->LFCLKSRC = (uint32_t)(source);
    9040:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    9044:	2200      	movs	r2, #0
    9046:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
    904a:	bd08      	pop	{r3, pc}

0000904c <nrfx_clock_stop>:
    clock_stop(domain);
    904c:	f7fb ba46 	b.w	44dc <clock_stop>

00009050 <nrf_gpio_cfg_sense_set>:
    *p_pin = pin_number & 0x1F;
    9050:	f000 001f 	and.w	r0, r0, #31
    9054:	0080      	lsls	r0, r0, #2
    9056:	f100 40a0 	add.w	r0, r0, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number];
    905a:	f8d0 3700 	ldr.w	r3, [r0, #1792]	; 0x700
    cnf &= ~to_update;
    905e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    9062:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
    9066:	f8c0 3700 	str.w	r3, [r0, #1792]	; 0x700
}
    906a:	4770      	bx	lr

0000906c <nrfx_nvmc_flash_size_get>:
    906c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    9070:	691a      	ldr	r2, [r3, #16]
NRF_STATIC_INLINE uint32_t nrf_ficr_codesize_get(NRF_FICR_Type const * p_reg)
{
#if defined(FICR_INFO_CODESIZE_CODESIZE_Msk)
    return p_reg->INFO.CODESIZE;
#else
    return p_reg->CODESIZE;
    9072:	6958      	ldr	r0, [r3, #20]
}

uint32_t nrfx_nvmc_flash_size_get(void)
{
    return flash_total_size_get();
}
    9074:	4350      	muls	r0, r2
    9076:	4770      	bx	lr

00009078 <nrfx_nvmc_flash_page_size_get>:
    return p_reg->CODEPAGESIZE;
    9078:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    907c:	6918      	ldr	r0, [r3, #16]

uint32_t nrfx_nvmc_flash_page_size_get(void)
{
    return flash_page_size_get();
}
    907e:	4770      	bx	lr

00009080 <nrfx_nvmc_flash_page_count_get>:
    return p_reg->CODESIZE;
    9080:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    9084:	6958      	ldr	r0, [r3, #20]

uint32_t nrfx_nvmc_flash_page_count_get(void)
{
    return flash_page_count_get();
}
    9086:	4770      	bx	lr

00009088 <xfer_completeness_check>:
    switch (p_cb->xfer_desc.type)
    9088:	7b0a      	ldrb	r2, [r1, #12]
{
    908a:	4603      	mov	r3, r0
    switch (p_cb->xfer_desc.type)
    908c:	2a03      	cmp	r2, #3
    908e:	d829      	bhi.n	90e4 <xfer_completeness_check+0x5c>
    9090:	e8df f002 	tbb	[pc, r2]
    9094:	02192521 	.word	0x02192521
            if (((p_cb->int_mask & NRF_TWIM_INT_SUSPENDED_MASK) &&
    9098:	688a      	ldr	r2, [r1, #8]
    909a:	0350      	lsls	r0, r2, #13
    909c:	d504      	bpl.n	90a8 <xfer_completeness_check+0x20>
    return p_reg->TXD.AMOUNT;
    909e:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
    90a2:	6908      	ldr	r0, [r1, #16]
    90a4:	4290      	cmp	r0, r2
    90a6:	d107      	bne.n	90b8 <xfer_completeness_check+0x30>
                (!(p_cb->int_mask & NRF_TWIM_INT_SUSPENDED_MASK) &&
    90a8:	688a      	ldr	r2, [r1, #8]
                 (nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)) ||
    90aa:	0352      	lsls	r2, r2, #13
    90ac:	d41a      	bmi.n	90e4 <xfer_completeness_check+0x5c>
    90ae:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
            if ((nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length) ||
    90b2:	6949      	ldr	r1, [r1, #20]
            if (nrf_twim_rxd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)
    90b4:	4291      	cmp	r1, r2
    90b6:	d015      	beq.n	90e4 <xfer_completeness_check+0x5c>
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
    90b8:	2000      	movs	r0, #0
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
    90ba:	2206      	movs	r2, #6
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
    90bc:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
    90c0:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
    90c4:	4770      	bx	lr
    return p_reg->TXD.AMOUNT;
    90c6:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
            if ((nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length) ||
    90ca:	6908      	ldr	r0, [r1, #16]
    90cc:	4290      	cmp	r0, r2
    90ce:	d1f3      	bne.n	90b8 <xfer_completeness_check+0x30>
    return p_reg->RXD.AMOUNT;
    90d0:	f8d3 253c 	ldr.w	r2, [r3, #1340]	; 0x53c
    90d4:	e7ed      	b.n	90b2 <xfer_completeness_check+0x2a>
    return p_reg->TXD.AMOUNT;
    90d6:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
            if (nrf_twim_rxd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)
    90da:	6909      	ldr	r1, [r1, #16]
    90dc:	e7ea      	b.n	90b4 <xfer_completeness_check+0x2c>
    return p_reg->RXD.AMOUNT;
    90de:	f8d3 253c 	ldr.w	r2, [r3, #1340]	; 0x53c
    90e2:	e7fa      	b.n	90da <xfer_completeness_check+0x52>
    bool transfer_complete = true;
    90e4:	2001      	movs	r0, #1
}
    90e6:	4770      	bx	lr

000090e8 <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
    90e8:	f7fc b982 	b.w	53f0 <_DoInit>

000090ec <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
    90ec:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
    90ee:	f7ff fffb 	bl	90e8 <SEGGER_RTT_Init>

	return 0;
}
    90f2:	2000      	movs	r0, #0
    90f4:	bd08      	pop	{r3, pc}

000090f6 <z_device_state_init>:

	while (dev < __device_end) {
		z_object_init(dev);
		++dev;
	}
}
    90f6:	4770      	bx	lr

000090f8 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    90f8:	b140      	cbz	r0, 910c <z_device_is_ready+0x14>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    90fa:	68c3      	ldr	r3, [r0, #12]
    90fc:	7858      	ldrb	r0, [r3, #1]
    90fe:	f010 0001 	ands.w	r0, r0, #1
    9102:	bf1e      	ittt	ne
    9104:	7818      	ldrbne	r0, [r3, #0]
    9106:	fab0 f080 	clzne	r0, r0
    910a:	0940      	lsrne	r0, r0, #5
}
    910c:	4770      	bx	lr

0000910e <z_early_memset>:
	(void) memset(dst, c, n);
    910e:	f7fd be38 	b.w	6d82 <memset>

00009112 <z_early_memcpy>:
	(void) memcpy(dst, src, n);
    9112:	f7fd be2b 	b.w	6d6c <memcpy>

00009116 <k_is_in_isr>:
    9116:	f3ef 8005 	mrs	r0, IPSR
}
    911a:	3800      	subs	r0, #0
    911c:	bf18      	it	ne
    911e:	2001      	movne	r0, #1
    9120:	4770      	bx	lr

00009122 <z_impl_k_thread_name_set>:
}
    9122:	f06f 0057 	mvn.w	r0, #87	; 0x57
    9126:	4770      	bx	lr

00009128 <k_thread_name_get>:
}
    9128:	2000      	movs	r0, #0
    912a:	4770      	bx	lr

0000912c <z_impl_k_thread_start>:
	z_sched_start(thread);
    912c:	f7fc bea4 	b.w	5e78 <z_sched_start>

00009130 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    9130:	b508      	push	{r3, lr}
	__asm__ volatile(
    9132:	f04f 0220 	mov.w	r2, #32
    9136:	f3ef 8311 	mrs	r3, BASEPRI
    913a:	f382 8812 	msr	BASEPRI_MAX, r2
    913e:	f3bf 8f6f 	isb	sy
	arch_cpu_idle();
    9142:	f7f8 fcad 	bl	1aa0 <arch_cpu_idle>
    9146:	e7f4      	b.n	9132 <idle+0x2>

00009148 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
    9148:	b13a      	cbz	r2, 915a <z_impl_k_sem_init+0x12>
    914a:	428a      	cmp	r2, r1
    914c:	d305      	bcc.n	915a <z_impl_k_sem_init+0x12>
	sem->limit = limit;
    914e:	e9c0 1202 	strd	r1, r2, [r0, #8]
	list->tail = (sys_dnode_t *)list;
    9152:	e9c0 0000 	strd	r0, r0, [r0]
	return 0;
    9156:	2000      	movs	r0, #0
    9158:	4770      	bx	lr
		return -EINVAL;
    915a:	f06f 0015 	mvn.w	r0, #21
}
    915e:	4770      	bx	lr

00009160 <flag_test_and_clear>:
	return (*flagp & BIT(bit)) != 0U;
    9160:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
    9162:	2301      	movs	r3, #1
    9164:	408b      	lsls	r3, r1
    9166:	ea22 0303 	bic.w	r3, r2, r3
    916a:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
    916c:	fa22 f001 	lsr.w	r0, r2, r1
}
    9170:	f000 0001 	and.w	r0, r0, #1
    9174:	4770      	bx	lr

00009176 <notify_queue_locked.isra.0>:
	if (queue != NULL) {
    9176:	b120      	cbz	r0, 9182 <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
    9178:	2200      	movs	r2, #0
    917a:	4611      	mov	r1, r2
    917c:	3088      	adds	r0, #136	; 0x88
    917e:	f000 b8ca 	b.w	9316 <z_sched_wake>
}
    9182:	4770      	bx	lr

00009184 <work_timeout>:
{
    9184:	b573      	push	{r0, r1, r4, r5, r6, lr}
    9186:	4604      	mov	r4, r0
    9188:	f04f 0320 	mov.w	r3, #32
    918c:	f3ef 8511 	mrs	r5, BASEPRI
    9190:	f383 8812 	msr	BASEPRI_MAX, r3
    9194:	f3bf 8f6f 	isb	sy
	struct k_work_q *queue = NULL;
    9198:	2300      	movs	r3, #0
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
    919a:	f1a0 0610 	sub.w	r6, r0, #16
    919e:	2103      	movs	r1, #3
    91a0:	3804      	subs	r0, #4
	struct k_work_q *queue = NULL;
    91a2:	9301      	str	r3, [sp, #4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
    91a4:	f7ff ffdc 	bl	9160 <flag_test_and_clear>
    91a8:	b128      	cbz	r0, 91b6 <work_timeout+0x32>
		queue = dw->queue;
    91aa:	69a3      	ldr	r3, [r4, #24]
    91ac:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
    91ae:	a901      	add	r1, sp, #4
    91b0:	4630      	mov	r0, r6
    91b2:	f7fc fc2b 	bl	5a0c <submit_to_queue_locked>
	__asm__ volatile(
    91b6:	f385 8811 	msr	BASEPRI, r5
    91ba:	f3bf 8f6f 	isb	sy
}
    91be:	b002      	add	sp, #8
    91c0:	bd70      	pop	{r4, r5, r6, pc}

000091c2 <k_work_init_delayable>:
{
    91c2:	b538      	push	{r3, r4, r5, lr}
	*dwork = (struct k_work_delayable){
    91c4:	2230      	movs	r2, #48	; 0x30
{
    91c6:	4604      	mov	r4, r0
    91c8:	460d      	mov	r5, r1
	*dwork = (struct k_work_delayable){
    91ca:	2100      	movs	r1, #0
    91cc:	f7fd fdd9 	bl	6d82 <memset>
    91d0:	f44f 7380 	mov.w	r3, #256	; 0x100
    91d4:	6065      	str	r5, [r4, #4]
    91d6:	60e3      	str	r3, [r4, #12]
}
    91d8:	bd38      	pop	{r3, r4, r5, pc}

000091da <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
    91da:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
    91de:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    91e0:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    91e2:	2300      	movs	r3, #0
	node->prev = NULL;
    91e4:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dnode_init(node);
}
    91e8:	4770      	bx	lr

000091ea <unpend_thread_no_timeout>:
{
    91ea:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
    91ec:	f7ff fff5 	bl	91da <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    91f0:	7b43      	ldrb	r3, [r0, #13]
    91f2:	f023 0302 	bic.w	r3, r3, #2
    91f6:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
    91f8:	2300      	movs	r3, #0
    91fa:	6083      	str	r3, [r0, #8]
}
    91fc:	bd08      	pop	{r3, pc}

000091fe <z_thread_timeout>:
{
    91fe:	b510      	push	{r4, lr}
    9200:	4601      	mov	r1, r0
	__asm__ volatile(
    9202:	f04f 0320 	mov.w	r3, #32
    9206:	f3ef 8411 	mrs	r4, BASEPRI
    920a:	f383 8812 	msr	BASEPRI_MAX, r3
    920e:	f3bf 8f6f 	isb	sy
		if (!killed) {
    9212:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
    9216:	f013 0f28 	tst.w	r3, #40	; 0x28
    921a:	d10d      	bne.n	9238 <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
    921c:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
    9220:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
    9222:	b10b      	cbz	r3, 9228 <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
    9224:	f7ff ffe1 	bl	91ea <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    9228:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
    922c:	f023 0314 	bic.w	r3, r3, #20
    9230:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
    9234:	f7fc fd18 	bl	5c68 <ready_thread>
	__asm__ volatile(
    9238:	f384 8811 	msr	BASEPRI, r4
    923c:	f3bf 8f6f 	isb	sy
}
    9240:	bd10      	pop	{r4, pc}

00009242 <add_to_waitq_locked>:
{
    9242:	b538      	push	{r3, r4, r5, lr}
    9244:	4604      	mov	r4, r0
    9246:	460d      	mov	r5, r1
	unready_thread(thread);
    9248:	f7fc fd42 	bl	5cd0 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    924c:	7b63      	ldrb	r3, [r4, #13]
    924e:	f043 0302 	orr.w	r3, r3, #2
    9252:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    9254:	b1e5      	cbz	r5, 9290 <add_to_waitq_locked+0x4e>
		thread->base.pended_on = wait_q;
    9256:	60a5      	str	r5, [r4, #8]
	return list->head == list;
    9258:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    925a:	429d      	cmp	r5, r3
    925c:	d109      	bne.n	9272 <add_to_waitq_locked+0x30>
	sys_dnode_t *const tail = list->tail;
    925e:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
    9260:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
    9264:	601c      	str	r4, [r3, #0]
	list->tail = node;
    9266:	606c      	str	r4, [r5, #4]
}
    9268:	e012      	b.n	9290 <add_to_waitq_locked+0x4e>
	return (node == list->tail) ? NULL : node->next;
    926a:	686a      	ldr	r2, [r5, #4]
    926c:	4293      	cmp	r3, r2
    926e:	d0f6      	beq.n	925e <add_to_waitq_locked+0x1c>
    9270:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    9272:	2b00      	cmp	r3, #0
    9274:	d0f3      	beq.n	925e <add_to_waitq_locked+0x1c>
	int32_t b1 = thread_1->base.prio;
    9276:	f994 200e 	ldrsb.w	r2, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    927a:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
    927e:	428a      	cmp	r2, r1
    9280:	d0f3      	beq.n	926a <add_to_waitq_locked+0x28>
		if (z_sched_prio_cmp(thread, t) > 0) {
    9282:	4291      	cmp	r1, r2
    9284:	ddf1      	ble.n	926a <add_to_waitq_locked+0x28>
	sys_dnode_t *const prev = successor->prev;
    9286:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    9288:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    928c:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    928e:	605c      	str	r4, [r3, #4]
}
    9290:	bd38      	pop	{r3, r4, r5, pc}

00009292 <z_ready_thread>:
{
    9292:	b510      	push	{r4, lr}
	__asm__ volatile(
    9294:	f04f 0320 	mov.w	r3, #32
    9298:	f3ef 8411 	mrs	r4, BASEPRI
    929c:	f383 8812 	msr	BASEPRI_MAX, r3
    92a0:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
    92a4:	f7fc fce0 	bl	5c68 <ready_thread>
	__asm__ volatile(
    92a8:	f384 8811 	msr	BASEPRI, r4
    92ac:	f3bf 8f6f 	isb	sy
}
    92b0:	bd10      	pop	{r4, pc}

000092b2 <z_unpend_first_thread>:
{
    92b2:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    92b4:	f04f 0320 	mov.w	r3, #32
    92b8:	f3ef 8511 	mrs	r5, BASEPRI
    92bc:	f383 8812 	msr	BASEPRI_MAX, r3
    92c0:	f3bf 8f6f 	isb	sy
	return list->head == list;
    92c4:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    92c6:	42a0      	cmp	r0, r4
    92c8:	d00d      	beq.n	92e6 <z_unpend_first_thread+0x34>
		if (thread != NULL) {
    92ca:	b134      	cbz	r4, 92da <z_unpend_first_thread+0x28>
			unpend_thread_no_timeout(thread);
    92cc:	4620      	mov	r0, r4
    92ce:	f7ff ff8c 	bl	91ea <unpend_thread_no_timeout>
    92d2:	f104 0018 	add.w	r0, r4, #24
    92d6:	f000 f841 	bl	935c <z_abort_timeout>
	__asm__ volatile(
    92da:	f385 8811 	msr	BASEPRI, r5
    92de:	f3bf 8f6f 	isb	sy
}
    92e2:	4620      	mov	r0, r4
    92e4:	bd38      	pop	{r3, r4, r5, pc}
    92e6:	2400      	movs	r4, #0
    92e8:	e7f7      	b.n	92da <z_unpend_first_thread+0x28>

000092ea <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    92ea:	4603      	mov	r3, r0
    92ec:	b920      	cbnz	r0, 92f8 <z_reschedule_irqlock+0xe>
    92ee:	f3ef 8205 	mrs	r2, IPSR
    92f2:	b90a      	cbnz	r2, 92f8 <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
    92f4:	f7f8 bc6e 	b.w	1bd4 <arch_swap>
    92f8:	f383 8811 	msr	BASEPRI, r3
    92fc:	f3bf 8f6f 	isb	sy
}
    9300:	4770      	bx	lr

00009302 <z_reschedule_unlocked>:
	__asm__ volatile(
    9302:	f04f 0320 	mov.w	r3, #32
    9306:	f3ef 8011 	mrs	r0, BASEPRI
    930a:	f383 8812 	msr	BASEPRI_MAX, r3
    930e:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    9312:	f7ff bfea 	b.w	92ea <z_reschedule_irqlock>

00009316 <z_sched_wake>:
{
    9316:	b538      	push	{r3, r4, r5, lr}
    9318:	f04f 0320 	mov.w	r3, #32
    931c:	f3ef 8511 	mrs	r5, BASEPRI
    9320:	f383 8812 	msr	BASEPRI_MAX, r3
    9324:	f3bf 8f6f 	isb	sy
	return list->head == list;
    9328:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    932a:	42a0      	cmp	r0, r4
    932c:	d012      	beq.n	9354 <z_sched_wake+0x3e>
		if (thread != NULL) {
    932e:	b19c      	cbz	r4, 9358 <z_sched_wake+0x42>
    9330:	67a1      	str	r1, [r4, #120]	; 0x78
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    9332:	6162      	str	r2, [r4, #20]
			unpend_thread_no_timeout(thread);
    9334:	4620      	mov	r0, r4
    9336:	f7ff ff58 	bl	91ea <unpend_thread_no_timeout>
    933a:	f104 0018 	add.w	r0, r4, #24
    933e:	f000 f80d 	bl	935c <z_abort_timeout>
			ready_thread(thread);
    9342:	4620      	mov	r0, r4
    9344:	f7fc fc90 	bl	5c68 <ready_thread>
			ret = true;
    9348:	2001      	movs	r0, #1
	__asm__ volatile(
    934a:	f385 8811 	msr	BASEPRI, r5
    934e:	f3bf 8f6f 	isb	sy
}
    9352:	bd38      	pop	{r3, r4, r5, pc}
	bool ret = false;
    9354:	2000      	movs	r0, #0
    9356:	e7f8      	b.n	934a <z_sched_wake+0x34>
    9358:	4620      	mov	r0, r4
    935a:	e7f6      	b.n	934a <z_sched_wake+0x34>

0000935c <z_abort_timeout>:
{
    935c:	b510      	push	{r4, lr}
	__asm__ volatile(
    935e:	f04f 0220 	mov.w	r2, #32
    9362:	f3ef 8411 	mrs	r4, BASEPRI
    9366:	f382 8812 	msr	BASEPRI_MAX, r2
    936a:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
    936e:	6803      	ldr	r3, [r0, #0]
    9370:	b13b      	cbz	r3, 9382 <z_abort_timeout+0x26>
			remove_timeout(to);
    9372:	f7fc ff6d 	bl	6250 <remove_timeout>
			ret = 0;
    9376:	2000      	movs	r0, #0
	__asm__ volatile(
    9378:	f384 8811 	msr	BASEPRI, r4
    937c:	f3bf 8f6f 	isb	sy
}
    9380:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
    9382:	f06f 0015 	mvn.w	r0, #21
    9386:	e7f7      	b.n	9378 <z_abort_timeout+0x1c>

00009388 <z_set_timeout_expiry>:
{
    9388:	b570      	push	{r4, r5, r6, lr}
    938a:	4604      	mov	r4, r0
    938c:	460d      	mov	r5, r1
	__asm__ volatile(
    938e:	f04f 0320 	mov.w	r3, #32
    9392:	f3ef 8611 	mrs	r6, BASEPRI
    9396:	f383 8812 	msr	BASEPRI_MAX, r3
    939a:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
    939e:	f7fc ff2f 	bl	6200 <next_timeout>
			      || (ticks <= next_to);
    93a2:	2801      	cmp	r0, #1
    93a4:	dd07      	ble.n	93b6 <z_set_timeout_expiry+0x2e>
    93a6:	42a0      	cmp	r0, r4
    93a8:	db05      	blt.n	93b6 <z_set_timeout_expiry+0x2e>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
    93aa:	42a0      	cmp	r0, r4
    93ac:	4629      	mov	r1, r5
    93ae:	bfa8      	it	ge
    93b0:	4620      	movge	r0, r4
    93b2:	f7fa fa43 	bl	383c <sys_clock_set_timeout>
	__asm__ volatile(
    93b6:	f386 8811 	msr	BASEPRI, r6
    93ba:	f3bf 8f6f 	isb	sy
}
    93be:	bd70      	pop	{r4, r5, r6, pc}

000093c0 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    93c0:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    93c2:	f7fd f839 	bl	6438 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    93c6:	bd08      	pop	{r3, pc}

000093c8 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    93c8:	b108      	cbz	r0, 93ce <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    93ca:	f7f9 b859 	b.w	2480 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    93ce:	4770      	bx	lr

000093d0 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    93d0:	4770      	bx	lr
	...
